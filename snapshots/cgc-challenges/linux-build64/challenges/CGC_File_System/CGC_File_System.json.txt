{"4202496:_init": "extern struct_0 *g_407230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407230;\n
    if (g_407230)\n
        v1 = g_407230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407250;\n
    goto *(4223576);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4223552);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_407238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4202963:sub_4021d3": null, "4202976:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203746:sub_4024e2": null, "4203760:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4203955:sub_4025b3": null, "4203968:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: unsigned long, struct struct_0 **, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204508:sub_4027dc": null, "4204512:cgc_expi": "long long cgc_expi(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
\n
    v1 = a1;\n
    for (v0 = 1; v1; v1 -= 1)\n
    {\n
        v0 *= a0;\n
    }\n
    return v0;\n
}\n
", "4204568:sub_402818": null, "4204576:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204724:sub_4028b4": null, "4204736:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204860:sub_40293c": null, "4204864:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204992:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205054:sub_4029fe": null, "4205056:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    unsigned int *v0;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xf0]\n
    unsigned int v2;  // [bp-0xe4]\n
    unsigned int *v3;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0xd8]\n
    unsigned int v5;  // [bp-0xcc]\n
    unsigned int *v6;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0xc0]\n
    unsigned int v8;  // [bp-0xb4]\n
    struct struct_0 **v9;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0xa8]\n
    unsigned int v11;  // [bp-0x9c]\n
    unsigned int v12;  // [bp-0x98]\n
    unsigned int v13;  // [bp-0x94]\n
    unsigned int v14;  // [bp-0x90]\n
    unsigned int v15;  // [bp-0x8c]\n
    char v16;  // [bp-0x88]\n
    unsigned int v17;  // [bp-0x60]\n
    unsigned int v18;  // [bp-0x5c]\n
    char v19;  // [bp-0x58]\n
    char v20;  // [bp-0x35]\n
    unsigned int v21;  // [bp-0x34]\n
    char *v22;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x24]\n
    char *v24;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v25;  // [bp-0xc]\n
    struct_1 *v27;  // rcx\n
    unsigned long long v28;  // rdx\n
    unsigned int *v29;  // rax\n
    struct_1 *v30;  // rcx\n
    unsigned int *v31;  // rdx\n
    struct_1 *v32;  // rcx\n
    unsigned long long v33;  // rdx\n
    unsigned int *v34;  // rax\n
    struct_1 *v35;  // rcx\n
    unsigned int *v36;  // rdx\n
    struct_1 *v37;  // rcx\n
    unsigned long long v38;  // rdx\n
    struct struct_0 **v39;  // rax\n
    struct_1 *v40;  // rcx\n
    struct struct_0 **v41;  // rdx\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax\n
    struct_1 *v45;  // rcx\n
    unsigned int *v46;  // rdx\n
    struct_3 *v47;  // rax\n
    unsigned long v48;  // rax\n
    unsigned long v49;  // rax\n
    unsigned int v50;  // eax\n
    unsigned long v51;  // rax\n
    unsigned int v52;  // eax\n
    unsigned int v54;  // eax\n
\n
    v24 = a0;\n
    v23 = 0;\n
    if (!v24)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (true)\n
    {\n
        if (!*(v24))\n
        {\n
            v25 = v23;\n
            return v25;\n
        }\n
        if (*(v24) == 36)\n
            break;\n
        cgc_putc(*(v24));\n
        v24 += 1;\n
        v23 += 1;\n
LABEL_402f54:\n
    }\n
    v24 += 1;\n
    v12 = *(v24);\n
    if (!v12)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    if (v12 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_402f22;\n
    }\n
    if (v12 != 88)\n
    {\n
        if (v12 == 99)\n
        {\n
            v7 = a1;\n
            v8 = v7->field_0;\n
            if (v8 > 40)\n
            {\n
                v30 = v7;\n
                v31 = v30->field_8;\n
                v30->field_8 = &v31[2];\n
                v6 = v31;\n
            }\n
            else\n
            {\n
                v27 = v7;\n
                v28 = v8;\n
                v29 = v28 + v27->field_10;\n
                v27->field_0 = v28 + 8;\n
                v6 = v29;\n
            }\n
            v21 = *(v6);\n
            v20 = v21;\n
            cgc_putc(v20);\n
            goto LABEL_402f22;\n
        }\n
        if (v12 == 100)\n
        {\n
            v4 = a1;\n
            v5 = v4->field_0;\n
            if (v5 > 40)\n
            {\n
                v35 = v4;\n
                v36 = v35->field_8;\n
                v35->field_8 = &v36[2];\n
                v3 = v36;\n
            }\n
            else\n
            {\n
                v32 = v4;\n
                v33 = v5;\n
                v34 = v33 + v32->field_10;\n
                v32->field_0 = v33 + 8;\n
                v3 = v34;\n
            }\n
            v17 = *(v3);\n
            v18 = 0;\n
            if (v17 < 0)\n
            {\n
                v17 = -(v17);\n
                cgc_putc(45);\n
                v23 += 1;\n
            }\n
            else\n
            {\n
                if (!v17)\n
                {\n
                    v18 = 1;\n
                    v19 = 48;\n
                }\n
            }\n
            while (v17)\n
            {\n
                v51 = v18;\n
                v18 = v51 + 1;\n
                (&v19)[v51] = ((v17 >> 31 CONCAT v17) /m 10 >> 32) + 48;\n
                v52 = v17;\n
                v17 = (v52 >> 31 CONCAT v52) /m 10;\n
                if (v18 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v54 = v18;\n
                v18 = v54 - 1;\n
                if (v54 <= 0)\n
                    break;\n
                cgc_putc((&v19)[v18]);\n
                v23 += 1;\n
            }\n
            goto LABEL_402f22;\n
        }\n
        else if (v12 == 115)\n
        {\n
            v10 = a1;\n
            v11 = v10->field_0;\n
            if (v11 > 40)\n
            {\n
                v40 = v10;\n
                v41 = v40->field_8;\n
                v40->field_8 = &v41[1];\n
                v9 = v41;\n
            }\n
            else\n
            {\n
                v37 = v10;\n
                v38 = v11;\n
                v39 = v38 + v37->field_10;\n
                v37->field_0 = v38 + 8;\n
                v9 = v39;\n
            }\n
            v22 = *(v9);\n
            while (*(v22))\n
            {\n
                cgc_putc(*(v22));\n
                v23 += 1;\n
                v22 += 1;\n
                if (!v22)\n
                    break;\n
            }\n
            goto LABEL_402f22;\n
        }\n
        else if (v12 != 120)\n
        {\n
            v25 = -1;\n
            return v25;\n
        }\n
    }\n
    v1 = a1;\n
    v2 = v1->field_0;\n
    if (v2 > 40)\n
    {\n
        v45 = v1;\n
        v46 = v45->field_8;\n
        v45->field_8 = &v46[2];\n
        v0 = v46;\n
    }\n
    else\n
    {\n
        v42 = v1;\n
        v43 = v2;\n
        v44 = v43 + v42->field_10;\n
        v42->field_0 = v43 + 8;\n
        v0 = v44;\n
    }\n
    v14 = *(v0);\n
    v15 = 0;\n
    while (v14)\n
    {\n
        v13 = v14 & 15;\n
        v14 >>= 4;\n
        if (v13 < 10)\n
        {\n
            v47 = v15;\n
            v15 = v47 + 1;\n
            *((&v16 + v47)) = v13 + 48;\n
        }\n
        else if (*(v24) != 120)\n
        {\n
            v49 = v15;\n
            v15 = v49 + 1;\n
            (&v16)[v49] = v13 + 55;\n
        }\n
        else\n
        {\n
            v48 = v15;\n
            v15 = v48 + 1;\n
            (&v16)[v48] = v13 + 87;\n
        }\n
        if (v15 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v50 = v15;\n
        v15 = v50 - 1;\n
        if (v50 <= 0)\n
            break;\n
        cgc_putc((&v16)[v15]);\n
        v23 += 1;\n
    }\n
LABEL_402f22:\n
    v24 += 1;\n
    goto LABEL_402f54;\n
}\n
", "4206443:sub_402f6b": null, "4206448:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4206608:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206659:sub_403043": null, "4206672:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206723:sub_403083": null, "4206736:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (32 <= a0 && a0 <= 126)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206791:sub_4030c7": null, "4206800:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0) && !cgc_isupper(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206873:sub_403119": null, "4206880:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206971:sub_40317b": null, "4206976:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207027:sub_4031b3": null, "4207040:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4207068:sub_4031dc": null, "4207072:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4207124:sub_403214": null, "4207136:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4207191:sub_403257": null, "4207200:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4207255:sub_403297": null, "4207264:cgc_strcmp": "long long cgc_strcmp(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[a0] && !v0[a1])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (!v0[a1])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        if (v0[a0] < v0[a1])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (v0[a0] <= v0[a1])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4207519:sub_40339f": null, "4207520:cgc_strncat": "long long cgc_strncat(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
            return a0;\n
        if (!*((a1 + v0)))\n
            return a0;\n
        a0[v1] = *((a1 + v0));\n
        v1 += 1;\n
        v0 += 1;\n
    }\n
}\n
", "4207662:sub_40342e": null, "4207664:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4207724:sub_40346c": null, "4207728:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
\n
    v1 = cgc_strlen(a0);\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        a0[v1] = v0[a1];\n
        v1 += 1;\n
    }\n
    return a0;\n
}\n
", "4207852:sub_4034ec": null, "4207856:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return v0;\n
        if (*(v1) == a1)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4207949:sub_40354d": null, "4207952:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4208055:sub_4035b7": null, "4208064:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4208185:sub_403639": null, "4208192:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a2 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a2; v0 += 4)\n
        {\n
            *(&v0[a0]) = *(&v0[a1]);\n
        }\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4208358:sub_4036e6": null, "4208368:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2 >= 4)\n
    {\n
        for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v1 + 3 < a2; v1 += 4)\n
        {\n
            *((a0 + v1)) = v0;\n
        }\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = a1;\n
    }\n
    return a0;\n
}\n
", "4208552:sub_4037a8": null, "4208560:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4208952:sub_403938": null, "4208960:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = -(a0);\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4209001:sub_403969": null, "4209008:cgc_handle_repo": "long long cgc_handle_repo()\n
{\n
    char v0;  // [bp-0x118]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    if (!cgc_recv(&v1, 1))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(&v0, 0, 0x100);\n
    if (!cgc_recv(&v0, v1))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = cgc_delete_file(&v0);\n
    return v2;\n
}\n
", "4209143:sub_4039f7": null, "4209152:cgc_handle_prnt": "typedef struct struct_1 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    struct struct_2 *field_108;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
    unsigned int field_104;\n
} struct_0;\n
\n
long long cgc_handle_prnt(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0[66];  // [bp-0x130]\n
    char v1;  // [bp-0x128]\n
    struct struct_0 **v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x1c]\n
    struct struct_0 **v5;  // rax\n
    unsigned long v6;  // rcx\n
\n
    v3 = 0;\n
    v2 = 0;\n
    *(&v0[0]) = 0;\n
    if (!a0)\n
        return v5;\n
    cgc_bubble_sort(a0);\n
    v2 = &a0->field_108->field_0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v5 = v3;\n
        if (v5 >= a0->field_104)\n
            break;\n
        v6 = v3;\n
        *(&v0[0]) = v2[v6];\n
        cgc_printf(\"$s/$s     \", a1, v0, v6, a4);\n
        if (v0[64])\n
        {\n
            cgc_printf(\"Dir\\n
\", a1, a2, v6, a4);\n
            cgc_memset(&v1, 0, 0x100);\n
            cgc_strncpy(&v1, a1, 255);\n
            cgc_strncat(&v1, \"/\", 255);\n
            cgc_strncat(&v1, v0, 255);\n
            cgc_handle_prnt(v0, &v1, 255, v6, a4);\n
        }\n
        else\n
        {\n
            cgc_printf(\"File     $d\\n
\", v0[65], a2, v6, a4);\n
        }\n
        v3 += 1;\n
    }\n
    return v3;\n
}\n
", "4209513:sub_403b69": null, "4209520:cgc_handle_recv": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
    char padding_104[4];\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long cgc_handle_recv(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x120], Other Possible Types: unsigned int [67]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long v5;  // rsi\n
\n
    v2 = 0;\n
    v0 = 0;\n
    cgc_memset(&v1, 0, 0x100);\n
    if (!cgc_recv(&v2, 1))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv\\n
\", 1, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v5 = v2;\n
    if (!cgc_recv(&v1, v5))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv name\\n
\", v5, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(&v0[0]) = cgc_get_file(&v1);\n
    if (!v0)\n
    {\n
        cgc_printf(\"[ERROR] RECV failed\\n
\", v5, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v0[64] == 1)\n
    {\n
        cgc_printf(\"[ERROR] $s is a directory\\n
\", v0, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (*(&v0[66]))\n
    {\n
        cgc_printf(\"[DATA] $s\\n
\", *(&v0[66]), 0x100, a3, a4);\n
        v3 = 1;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4209859:sub_403cc3": null, "4209872:cgc_handle_ndir": "long long cgc_handle_ndir(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x120], Other Possible Types: unsigned long long\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long v5;  // rsi\n
\n
    v2 = 0;\n
    v0 = 0;\n
    cgc_memset(&v1, 0, 0x100);\n
    if (!cgc_recv(&v2, 1))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv\\n
\", 1, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v5 = v2;\n
    if (!cgc_recv(&v1, v5))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv name\\n
\", v5, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = cgc_init_file();\n
    if (!v0)\n
    {\n
        cgc_printf(\"[ERROR] Failed to initialize a new directory\\n
\", v5, 0x100, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!cgc_set_name(v0, &v1))\n
    {\n
        cgc_printf(\"[ERROR] Failed to set directory name\\n
\", v5, 0x100, a3, a4);\n
        cgc_free(v0);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!cgc_set_type(v0, 1))\n
    {\n
        cgc_printf(\"[ERROR] Failed to set type\\n
\", 1, 0x100, a3, a4);\n
        cgc_free(v0);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!cgc_add_file(v0))\n
    {\n
        cgc_printf(\"[ERROR] NDIR failed\\n
\", 1, 0x100, a3, a4);\n
        cgc_free(v0);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_printf(\"[INFO] Added new directory\\n
\", 1, 0x100, a3, a4);\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4210293:sub_403e75": null, "4210304:cgc_handle_send": "long long cgc_handle_send(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x128], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x120], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x118]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned long v7;  // rsi\n
\n
    v4 = 0;\n
    v3 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_memset(&v2, 0, 0x100);\n
    if (!cgc_recv(&v4, 1))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv\\n
\", 1, 0x100, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
    v7 = v4;\n
    if (!cgc_recv(&v2, v7))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv name\\n
\", v7, 0x100, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!cgc_recv(&v3, 2))\n
    {\n
        cgc_printf(\"[ERROR] Failed to recv file length\\n
\", 2, 0x100, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v3 <= 0x400)\n
    {\n
        v1 = cgc_malloc(v3 + 1);\n
        if (!v1)\n
        {\n
            cgc_printf(\"[ERROR] malloc failed\\n
\", 2, 0x100, a3, a4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        cgc_memset(v1, 0, v3 + 1);\n
        if (!cgc_recv(v1, v3))\n
        {\n
            cgc_printf(\"[ERROR] Failed to recv data\\n
\", v7, a2, a3, a4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = cgc_init_file();\n
        if (!v0)\n
        {\n
            cgc_printf(\"[ERROR] Failed to initialize a new file\\n
\", v7, a2, a3, a4);\n
            cgc_free(v1);\n
            v5 = 0;\n
            return v5;\n
        }\n
        else if (!cgc_set_name(v0, &v2))\n
        {\n
            cgc_printf(\"[ERROR] Failed to set file name\\n
\", v7, a2, a3, a4);\n
            cgc_free(v1);\n
            cgc_free(v0);\n
            v5 = 0;\n
            return v5;\n
        }\n
        else if (!cgc_set_type(v0, 0))\n
        {\n
            cgc_printf(\"[ERROR] Failed to set type\\n
\", 0, a2, a3, a4);\n
            cgc_free(v1);\n
            cgc_free(v0);\n
            v5 = 0;\n
            return v5;\n
        }\n
        else if (cgc_set_data(v0, v3, v1))\n
        {\n
            cgc_free(v1);\n
            if (cgc_add_file(v0))\n
            {\n
                cgc_printf(\"[INFO] File received: $s\\n
\", &v2, a2, a3, a4);\n
                v5 = 1;\n
                return v5;\n
            }\n
            cgc_printf(\"[ERROR] SEND failed\\n
\", v7, a2, a3, a4);\n
            cgc_free_file(v0);\n
            v5 = 0;\n
            return v5;\n
        }\n
        else\n
        {\n
            cgc_printf(\"[ERROR] Failed to set data\\n
\", v7, a2, a3, a4);\n
            cgc_free(v1);\n
            cgc_free(v0);\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(\"[ERROR] Maximum file length is 0x400\\n
\", 2, 0x100, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4211098:sub_40419a": null, "4211104:cgc_bubble_sort": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    struct struct_1 *field_108;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_bubble_sort(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x28], Other Possible Types: unsigned int *\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (a0->field_108)\n
    {\n
        for (v2 = &a0->field_108->field_0; v4 < a0->field_104; v4 += 1)\n
        {\n
            if (*(&v2[2 * v4]))\n
                v3 += 1;\n
        }\n
        if (v3 < a0->field_104)\n
        {\n
            v4 = 0;\n
            for (v3 = 0; v4 < a0->field_104; v4 += 1)\n
            {\n
                if (*(&v2[2 * v4]))\n
                {\n
                    *(&v2[2 * v3]) = *(&v2[2 * v4]);\n
                    v3 += 1;\n
                }\n
            }\n
            for (v4 = v3; v3 < a0->field_104; v3 += 1)\n
            {\n
                *(&v2[2 * v3]) = 0;\n
            }\n
        }\n
        for (v4 = 0; v4 < a0->field_104; v4 += 1)\n
        {\n
            for (v3 = v4 + 1; v3 < a0->field_104; v3 += 1)\n
            {\n
                v0 = cgc_strcmp(*(&v2[2 * v4]), *(&v2[2 * v3]));\n
                if (v0 > 0)\n
                {\n
                    v1 = *(&v2[2 * v3]);\n
                    *(&v2[2 * v3]) = *(&v2[2 * v4]);\n
                    *(&v2[2 * v4]) = v1;\n
                }\n
            }\n
        }\n
        v5 = 1;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4211656:sub_4043c8": null, "4211664:cgc_remove_sub_file": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    struct struct_2 *field_108;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long cgc_remove_sub_file(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    struct struct_0 **v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        if (a0->field_108)\n
        {\n
            v2 = &a0->field_108->field_0;\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    if (v1 >= a0->field_104)\n
                    {\n
                        v3 = 0;\n
                        return v3;\n
                    }\n
                    v0 = v2[v1];\n
                    if (v0)\n
                        break;\n
                    v1 += 1;\n
                }\n
                if (!cgc_strcmp(v0, a1))\n
                    break;\n
                v1 += 1;\n
            }\n
            if (v0->field_100 == 1)\n
            {\n
                cgc_printf(\"[ERROR] Cannot delete a directory\\n
\", a1, a2, a3, a4);\n
                v3 = 0;\n
                return v3;\n
            }\n
            cgc_free_file(v0);\n
            v2[v1] = 0;\n
            v3 = 1;\n
            return v3;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4211974:sub_404506": null, "4211984:cgc_free_file": "typedef struct struct_0 {\n
    char padding_0[264];\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long cgc_free_file(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
        return v1;\n
    if (a0->field_108)\n
        cgc_free(a0->field_108);\n
    v1 = cgc_free(a0);\n
    return v1;\n
}\n
", "4212061:sub_40455d": null, "4212064:cgc_delete_file": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
} struct_0;\n
\n
extern struct_0 *cgc_root;\n
\n
long long cgc_delete_file(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x134]\n
    unsigned int v1;  // [bp-0x130]\n
    unsigned int v2;  // [bp-0x12c]\n
    char v3;  // [bp-0x128]\n
    struct_0 *v4;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rdx\n
\n
    v4 = cgc_root;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (*(a0) == 47)\n
    {\n
        v2 = 1;\n
        v0 = cgc_strlen(a0);\n
        if (v0 > 0x100)\n
        {\n
            cgc_printf(\"[ERROR] Name too long\\n
\", a1, a2, a3, a4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        while (true)\n
        {\n
            if (v1 == -1)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            v1 = cgc_find_next_slash(a0, v2, v0);\n
            cgc_memset(&v3, 0, 0x100);\n
            if (v1 == -1)\n
                break;\n
            if (v1 - v2 > 0x100)\n
            {\n
                cgc_printf(\"[ERROR] Size calculation failed\\n
\", 0, 0x100, a3, a4);\n
                v5 = 0;\n
                return v5;\n
            }\n
            v7 = v1 - v2;\n
            cgc_memcpy(&v3, &a0[v2], v7);\n
            v4 = cgc_retrieve_sub(v4, &v3);\n
            if (!v4)\n
            {\n
                cgc_printf(\"[ERROR] Failed to locate directory $s\\n
\", &v3, v7, a3, a4);\n
                v5 = 0;\n
                return v5;\n
            }\n
            if (*((v4 + 0x100)) != 1)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            v2 = v1 + 1;\n
        }\n
        if (v0 - v2 > 0x100)\n
        {\n
            cgc_printf(\"[ERROR] Size calculation failed\\n
\", 0, 0x100, a3, a4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v8 = v0 - v2;\n
        cgc_memcpy(&v3, &a0[v2], v8);\n
        if (!cgc_does_sub_file_exist(v4, &v3))\n
        {\n
            cgc_printf(\"[ERROR] Could not locate $s\\n
\", a0, v8, a3, a4);\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (cgc_remove_sub_file(v4, &v3, v8, a3, a4))\n
        {\n
            cgc_printf(\"[INFO] $s removed\\n
\", &v3, v8, a3, a4);\n
            v5 = 1;\n
            return v5;\n
        }\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!cgc_does_sub_file_exist(v4, a0))\n
    {\n
        cgc_printf(\"[ERROR] Could not locate $s\\n
\", a0, a2, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (cgc_remove_sub_file(v4, a0, a2, a3, a4))\n
    {\n
        cgc_printf(\"[INFO] $s removed\\n
\", a0, a2, a3, a4);\n
        v5 = 1;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4212859:sub_40487b": null, "4212864:cgc_does_sub_file_exist": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    struct struct_1 *field_108;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_does_sub_file_exist(struct_0 *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long *v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    for (v2 = &a0->field_108->field_0; true; v1 += 1)\n
    {\n
        if (v1 >= a0->field_104)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        *(&v0) = v2[v1];\n
        if (*(&v0))\n
        {\n
            if (!cgc_strcmp(*(&v0), a1))\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
        }\n
    }\n
}\n
", "4213042:sub_404932": null, "4213056:cgc_find_next_slash": "long long cgc_find_next_slash(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a1;\n
    if (!a0)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    for (v0 = -1; v1 < a2; v1 += 1)\n
    {\n
        if (a0[v1] == 47)\n
        {\n
            v0 = v1;\n
            break;\n
        }\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4213174:sub_4049b6": null, "4213184:cgc_retrieve_sub": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
    unsigned int field_104;\n
    struct struct_1 *field_108;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_retrieve_sub(struct_0 *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        if (a0->field_100 == 1)\n
        {\n
            for (v2 = &a0->field_108->field_0; true; v1 += 1)\n
            {\n
                if (v1 >= a0->field_104)\n
                {\n
                    v3 = 0;\n
                    return v3;\n
                }\n
                *(&v0) = v2[v1];\n
                if (*(&v0))\n
                {\n
                    if (!cgc_strcmp(*(&v0), a1))\n
                    {\n
                        v3 = *(&v0);\n
                        return v3;\n
                    }\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4213430:sub_404ab6": null, "4213440:cgc_fixup_dir_length": "typedef struct struct_1 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    char field_108;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long cgc_fixup_dir_length(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v4;  // rax\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
\n
    v1 = &a0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (a0->field_104)\n
    {\n
        v5 = a0;\n
        v5->field_104 = v5->field_104 + 1;\n
        *(&v0) = cgc_malloc(a0->field_104 * 8);\n
        if (!*(&v0))\n
        {\n
            v6 = a0;\n
            v6->field_104 = v6->field_104 - 1;\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_memset(*(&v0), 0, a0->field_104 * 8);\n
        cgc_memcpy(*(&v0), *(&a0->field_108), (v1->field_104 - 1) * 8);\n
        cgc_free(*(&a0->field_108));\n
        *(&a0->field_108) = *(&v0);\n
    }\n
    else\n
    {\n
        a0->field_104 = 1;\n
        v4 = cgc_malloc(8);\n
        *(&a0->field_108) = v4;\n
        if (!*(&a0->field_108))\n
        {\n
            cgc_printf(\"[ERROR] Failed to fixup dir data\\n
\", a1, a2, v4, a4);\n
            a0->field_104 = 0;\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_memset(*(&a0->field_108), 0, 8);\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4213825:sub_404c41": null, "4213840:cgc_get_file": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
} struct_0;\n
\n
extern struct_0 *cgc_root;\n
\n
long long cgc_get_file(char *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x138]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    struct_0 *v4;  // [bp-0x28]\n
    struct_0 *v5;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v6;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v8;  // rdx\n
\n
    v5 = cgc_root;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!a0)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (*(a0) == 47)\n
    {\n
        v3 = 1;\n
        v1 = cgc_strlen(a0);\n
        while (true)\n
        {\n
            if (v2 != -1)\n
            {\n
                v2 = cgc_find_next_slash(a0, v3, v1);\n
                if (v2 == -1)\n
                {\n
                    cgc_memset(&v0, 0, 0x100);\n
                    cgc_memcpy(&v0, &a0[v3], v1 - v3);\n
                    v4 = cgc_retrieve_sub(v5, &v0);\n
                    v6 = v4;\n
                    return v6;\n
                }\n
                cgc_memset(&v0, 0, 0x100);\n
                v8 = v2 - v3;\n
                cgc_memcpy(&v0, &a0[v3], v8);\n
                v5 = cgc_retrieve_sub(v5, &v0);\n
                v3 = v2 + 1;\n
                if (!v5)\n
                {\n
                    v6 = v5;\n
                    return v6;\n
                }\n
                else if (*((v5 + 0x100)) != 1)\n
                {\n
                    cgc_printf(\"[ERROR] $s is not a directory\\n
\", &v0, v8, a3, a4);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v4 = cgc_retrieve_sub(v5, a0);\n
        v6 = v4;\n
        return v6;\n
    }\n
}\n
", "4214295:sub_404e17": null, "4214304:cgc_add_file_to_dir": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long cgc_add_file_to_dir(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        if (cgc_fixup_dir_length(a0, a1, a2, a3, a4))\n
        {\n
            *((a0->field_108 + (a0->field_104 - 1) * 8)) = a1;\n
            v0 = 1;\n
            return v0;\n
        }\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214434:sub_404ea2": null, "4214448:cgc_add_file": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
} struct_0;\n
\n
extern struct_0 *cgc_root;\n
\n
long long cgc_add_file(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x148]\n
    struct_0 *v1;  // [bp-0x140], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x134]\n
    void* v3;  // [bp-0x130]\n
    char v4;  // [bp-0x128]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned long v9;  // rdx\n
    unsigned long v10;  // rdx\n
    unsigned int v11;  // esi\n
\n
    v6 = 0;\n
    v5 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = cgc_root;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (*(a0) == 47)\n
    {\n
        v6 = 1;\n
        v2 = cgc_strlen(a0);\n
        if (v2 == 1)\n
        {\n
            cgc_printf(\"[ERROR] You cannot add '/'\\n
\", a1, a2, a3, a4);\n
            v7 = 0;\n
            return v7;\n
        }\n
        while (true)\n
        {\n
            if (v5 == -1)\n
            {\n
                v7 = 1;\n
                return v7;\n
            }\n
            v5 = cgc_find_next_slash(a0, v6, v2);\n
            if (v5 == -1)\n
                break;\n
            cgc_memset(&v4, 0, 0x100);\n
            v9 = v5 - v6;\n
            cgc_memcpy(&v4, &a0[v6], v9);\n
            v0 = cgc_retrieve_sub(v1, &v4);\n
            if (!v0)\n
            {\n
                cgc_printf(\"[ERROR] Directory $s does not exist.\\n
\", &v4, v9, a3, a4);\n
                v7 = 0;\n
                return v7;\n
            }\n
            if (v0->field_100 != 1)\n
            {\n
                cgc_printf(\"[ERROR] $s is not a directory\\n
\", &v4, v9, a3, a4);\n
                v7 = 0;\n
                return v7;\n
            }\n
            v1 = v0;\n
            v6 = v5 + 1;\n
        }\n
        cgc_memset(&v4, 0, 0x100);\n
        cgc_memcpy(&v4, &a0[v6], v2 - v6);\n
        cgc_memset(a0, 0, 0x100);\n
        v10 = v2 - v6;\n
        cgc_memcpy(a0, &v4, v10);\n
        v11 = a0;\n
        if (cgc_does_sub_file_exist(v1, v11) == 1)\n
        {\n
            cgc_printf(\"[ERROR] File already exists\\n
\", *(&v11), v10, a3, a4);\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (!cgc_add_file_to_dir(v1, a0, v10, a3, a4))\n
        {\n
            cgc_printf(\"[ERROR] Failed to add file to $s\\n
\", v1, v10, a3, a4);\n
            v7 = 0;\n
            return v7;\n
        }\n
        v7 = 1;\n
        return v7;\n
    }\n
    else if (!cgc_add_file_to_dir(v1, a0, a2, a3, a4))\n
    {\n
        cgc_printf(\"[ERROR] Failed to add file to root\\n
\", a1, a2, a3, a4);\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        v7 = 1;\n
        return v7;\n
    }\n
}\n
", "4215183:sub_40518f": null, "4215184:cgc_init_file": "long long cgc_init_file()\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v0 = 0;\n
    *(&v0) = cgc_malloc(272);\n
    if (!*(&v0))\n
    {\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    cgc_memset(*(&v0), 0, 272);\n
    v1 = *(&v0);\n
    return v1;\n
}\n
", "4215272:sub_4051e8": null, "4215280:cgc_set_name": "long long cgc_set_name(unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a1)\n
    {\n
        v0 = cgc_strlen(a1);\n
        if (v0 > 255)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        cgc_memcpy(a0, a1, v0);\n
        v1 = v0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4215418:sub_40527a": null, "4215424:cgc_set_type": "typedef struct struct_0 {\n
    char padding_0[256];\n
    unsigned int field_100;\n
} struct_0;\n
\n
long long cgc_set_type(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    if (a1 && a1 != 1)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    a0->field_100 = a1;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4215515:sub_4052db": null, "4215520:cgc_set_data": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long cgc_set_data(struct_0 *a0, unsigned long a1, unsigned int a2)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!a2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a1 <= 0x400)\n
    {\n
        *(&v0) = cgc_malloc(a1 + 1);\n
        if (!*(&v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        cgc_memcpy(*(&v0), a2, a1 + 1);\n
        a0->field_104 = a1;\n
        a0->field_108 = *(&v0);\n
        v1 = 1;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4215725:sub_4053ad": null, "4215728:cgc_recv": "long long cgc_recv(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = a1;\n
    if (!a0)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (v2 < a1)\n
        {\n
            if (cgc_receive(a0, a1, a2, a3))\n
            {\n
                cgc_printf(\"[ERROR] Failed to receive data\\n
\", a1, a2, a3, a4);\n
                v3 = 0;\n
                return v3;\n
            }\n
            if (!v1)\n
            {\n
                cgc_printf(\"[ERROR] Failed to receive data\\n
\", a1, a2, a3, a4);\n
                v3 = 0;\n
                return v3;\n
            }\n
            v2 += v1;\n
            v0 = (v0 - v1);\n
        }\n
        else\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
    }\n
}\n
", "4215949:sub_40548d": null, "4215952:cgc_service_loop": "extern void* cgc_root;\n
extern unsigned int g_40606d;\n
extern unsigned int g_4063c5;\n
\n
long long cgc_service_loop(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v5;  // edi\n
\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_root = cgc_init_file();\n
    if (!cgc_root)\n
    {\n
        v4 = cgc_printf(\"[ERROR] Failed to create the root node\\n
\", a1, a2, a3, a4);\n
        return v4;\n
    }\n
    cgc_set_type(cgc_root, 1);\n
    v5 = cgc_root;\n
    cgc_set_name(cgc_root, 4218989);\n
    for (; cgc_recv(&v2, 4, a2, a3, a4) == 4; LABEL_405635:\n
)\n
    {\n
        v0 = v2;\n
        if (v0 == 1145980243)\n
        {\n
            if (!cgc_handle_send(*(&v5), 4, a2, a3, a4))\n
                continue;\n
            goto LABEL_405635;\n
        }\n
        if (v0 == 1330660690)\n
        {\n
            cgc_handle_repo();\n
        }\n
        else\n
        {\n
            if (v0 == 1347376211)\n
            {\n
                cgc_printf(\"[INFO] Terminating\\n
\", 4, a2, a3, a4);\n
                cgc__terminate(\"[INFO] Terminating\\n
\");\n
            }\n
            else if (v0 == 1380533326)\n
            {\n
                if (!cgc_handle_ndir(*(&v5), 4, a2, a3, a4))\n
                    continue;\n
                goto LABEL_405635;\n
            }\n
            else if (v0 != 1414419024)\n
            {\n
                if (v0 != 1447249234)\n
                {\n
                    cgc_printf(\"[ERROR] Invalid command: $x\\n
\", v2, a2, a3, a4);\n
                }\n
                else if (!cgc_handle_recv(*(&v5), 4, a2, a3, a4))\n
                {\n
                    continue;\n
                }\n
                goto LABEL_405635;\n
            }\n
            cgc_printf(\"[INFO] Listing files\\n
\", 4, a2, a3, a4);\n
            cgc_handle_prnt(cgc_root, 4219845, a2, a3, a4);\n
        }\n
    }\n
    v4 = cgc_printf(\"[ERROR] Receive failed\\n
\", 4, a2, a3, a4);\n
    return v4;\n
}\n
", "4216384:main": "int main(unsigned int a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = a0;\n
    v0 = a1;\n
    cgc_service_loop(a0, a1, a2, a3, a4);\n
    return 0;\n
}\n
", "4216420:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}