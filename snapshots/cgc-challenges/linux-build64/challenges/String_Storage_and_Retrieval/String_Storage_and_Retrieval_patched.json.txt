{"4202496:_init": "extern struct_0 *g_408c80;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408c80;\n
    if (g_408c80)\n
        v1 = g_408c80();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408ca0;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408ca0;\n
    goto *(4230312);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4230288);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408c78;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_408c88;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408c90;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408c90)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203011:sub_402203": null, "4203024:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203794:sub_402512": null, "4203808:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204003:sub_4025e3": null, "4204016:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 *[2], struct struct_0 **, unsigned long\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204556:sub_40280c": null, "4204560:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204708:sub_4028a4": null, "4204720:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204844:sub_40292c": null, "4204848:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204976:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205038:sub_4029ee": null, "4205040:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205265:sub_402ad1": null, "4205280:cgc_uint_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_uint_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = ((0 CONCAT v4) /m 10 >> 32) + 48;\n
        v4 = (0 CONCAT v4) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205471:sub_402b9f": null, "4205472:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 = v4 >> 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205679:sub_402c6f": null, "4205680:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402f71;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402f71:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4206465:sub_402f81": null, "4206480:cgc_vprintf": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_0 *a1)\n
{\n
    unsigned long v0;  // [bp-0x1a0]\n
    unsigned long v1;  // [bp-0x198]\n
    unsigned long long *v2;  // [bp-0x190]\n
    struct_0 *v3;  // [bp-0x188]\n
    unsigned int v4;  // [bp-0x17c]\n
    unsigned long v5;  // [bp-0x178]\n
    unsigned long long *v6;  // [bp-0x170], Other Possible Types: unsigned long\n
    struct_0 *v7;  // [bp-0x168]\n
    unsigned int *v8;  // [bp-0x160]\n
    unsigned int v9;  // [bp-0x154]\n
    unsigned long v10;  // [bp-0x150]\n
    unsigned int *v11;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_0 *v12;  // [bp-0x140]\n
    unsigned int v13;  // [bp-0x134]\n
    unsigned long v14;  // [bp-0x130]\n
    unsigned int *v15;  // [bp-0x128], Other Possible Types: unsigned long\n
    struct_0 *v16;  // [bp-0x120]\n
    unsigned int v17;  // [bp-0x114]\n
    unsigned long v18;  // [bp-0x110]\n
    unsigned int *v19;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_0 *v20;  // [bp-0x100]\n
    unsigned int v21;  // [bp-0xf4]\n
    unsigned int *v22;  // [bp-0xf0], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xe8]\n
    unsigned int v24;  // [bp-0xe0]\n
    unsigned int v25;  // [bp-0xdc]\n
    void* v26;  // [bp-0xd8]\n
    unsigned int v27;  // [bp-0xcc]\n
    unsigned long long v28;  // [bp-0xc8]\n
    struct_2 *v29;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v30;  // [bp-0xb8]\n
    struct_2 *v31;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v32;  // [bp-0xa4]\n
    struct_2 *v33;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v34;  // [bp-0x94]\n
    struct_2 *v35;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v36;  // [bp-0x88]\n
    char v37;  // [bp-0x81]\n
    unsigned int v38;  // [bp-0x80]\n
    unsigned int v39;  // [bp-0x7c]\n
    unsigned int v40;  // [bp-0x78]\n
    unsigned int v41;  // [bp-0x74]\n
    unsigned int v42;  // [bp-0x70]\n
    unsigned int v43;  // [bp-0x6c]\n
    char v44;  // [bp-0x68]\n
    unsigned int v45;  // [bp-0x24]\n
    struct_0 *v46;  // [bp-0x20]\n
    char *v47;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v48;  // [bp-0xc]\n
    struct_0 *v50;  // rcx\n
    unsigned long long v51;  // rdx\n
    unsigned int *v52;  // rax\n
    struct_0 *v53;  // rcx\n
    unsigned int *v54;  // rdx\n
    struct_0 *v55;  // rcx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_0 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_0 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    unsigned int *v62;  // rax\n
    struct_0 *v63;  // rcx\n
    unsigned int *v64;  // rdx\n
    struct_0 *v65;  // rcx\n
    unsigned long long v66;  // rdx\n
    unsigned int *v67;  // rax\n
    struct_0 *v68;  // rcx\n
    unsigned int *v69;  // rdx\n
    unsigned long long v70;  // rdx\n
    unsigned long long *v71;  // rax\n
    struct_0 *v72;  // rcx\n
    unsigned long long *v73;  // rdx\n
    struct_0 *v74;  // rcx, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v75;  // rdx\n
    unsigned long long *v76;  // rax, Other Possible Types: unsigned long\n
    unsigned long v77;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long *v78;  // rdx\n
\n
    v47 = a0;\n
    v46 = a1;\n
    v45 = 0;\n
    if (!v47)\n
    {\n
        v48 = -1;\n
        return v48;\n
    }\n
    while (*(v47))\n
    {\n
        if (*(v47) != 64)\n
        {\n
            cgc_putc(*(v47));\n
            v47 += 1;\n
            v45 += 1;\n
LABEL_403b2d:\n
        }\n
        else\n
        {\n
            v47 += 1;\n
            v43 = 0;\n
            v42 = 0;\n
            v41 = 0;\n
            v40 = 0;\n
            v38 = 0;\n
            if (*(v47) == 64)\n
            {\n
                cgc_putc(64);\n
                v47 += 1;\n
                v45 += 1;\n
                continue;\n
            }\n
            if (*(v47) == 45)\n
            {\n
                v40 = 1;\n
                v47 += 1;\n
            }\n
            if (cgc_isdigit(*(v47)))\n
            {\n
                if (*(v47) == 48)\n
                {\n
                    v41 = 1;\n
                    v47 += 1;\n
                }\n
                if (cgc_isdigit(*(v47)))\n
                {\n
                    for (v43 = cgc_atoi(v47); cgc_isdigit(*(v47)); v47 += 1);\n
                }\n
            }\n
            if (*(v47) == 46)\n
            {\n
                v47 += 1;\n
                for (v42 = cgc_atoi(v47); cgc_isdigit(*(v47)); v47 += 1);\n
            }\n
            if (*(v47) == 99)\n
            {\n
                v23 = v46;\n
                v24 = v23->field_0;\n
                if (v24 > 40)\n
                {\n
                    v53 = v23;\n
                    v54 = v53->field_8;\n
                    v53->field_8 = &v54[2];\n
                    v22 = v54;\n
                }\n
                else\n
                {\n
                    v50 = v23;\n
                    v51 = v24;\n
                    v52 = v51 + v50->field_10;\n
                    v50->field_0 = v51 + 8;\n
                    v22 = v52;\n
                }\n
                v37 = *(v22);\n
                v38 = v43 - 1;\n
                if (!v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        if (!v41)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v45 += 1;\n
                    }\n
                }\n
                cgc_putc(v37);\n
                v45 += 1;\n
                if (v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v45 += 1;\n
                    }\n
                }\n
                v47 += 1;\n
                continue;\n
            }\n
            if (*(v47) == 100)\n
            {\n
                v20 = v46;\n
                v21 = v20->field_0;\n
                if (v21 > 40)\n
                {\n
                    v58 = v20;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v19 = v59;\n
                }\n
                else\n
                {\n
                    v55 = v20;\n
                    v56 = v21;\n
                    v57 = v56 + v55->field_10;\n
                    v55->field_0 = v56 + 8;\n
                    v19 = v57;\n
                }\n
                v36 = *(v19);\n
                cgc_int_to_str(v36, &v44);\n
                v18 = v43;\n
                v38 = v18 - cgc_strlen(&v44);\n
                if (!v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        if (!v41)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v45 += 1;\n
                    }\n
                }\n
                for (v35 = &v44; v35->field_0; v35 += 1)\n
                {\n
                    cgc_putc(v35->field_0);\n
                    v45 += 1;\n
                }\n
                if (v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v45 += 1;\n
                    }\n
                }\n
                v47 += 1;\n
                continue;\n
            }\n
            if (*(v47) == 117)\n
            {\n
                v16 = v46;\n
                v17 = v16->field_0;\n
                if (v17 <= 40)\n
                {\n
                    v60 = v16;\n
                    v61 = v17;\n
                    v62 = v61 + v60->field_10;\n
                    v60->field_0 = v61 + 8;\n
                    v15 = v62;\n
                }\n
                else\n
                {\n
                    v63 = v16;\n
                    v64 = v63->field_8;\n
                    v63->field_8 = &v64[2];\n
                    v15 = v64;\n
                }\n
                v34 = *(v15);\n
                cgc_uint_to_str(v34, &v44);\n
                v14 = v43;\n
                v38 = v14 - cgc_strlen(&v44);\n
                if (!v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        if (!v41)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v45 += 1;\n
                    }\n
                }\n
                for (v33 = &v44; *(v33); v33 += 1)\n
                {\n
                    cgc_putc(*(v33));\n
                    v45 += 1;\n
                }\n
                if (v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v45 += 1;\n
                    }\n
                }\n
                v47 += 1;\n
                continue;\n
            }\n
            if (*(v47) == 120)\n
            {\n
                v12 = v46;\n
                v13 = v12->field_0;\n
                if (v13 <= 40)\n
                {\n
                    v65 = v12;\n
                    v66 = v13;\n
                    v67 = v66 + v65->field_10;\n
                    v65->field_0 = v66 + 8;\n
                    v11 = v67;\n
                }\n
                else\n
                {\n
                    v68 = v12;\n
                    v69 = v68->field_8;\n
                    v68->field_8 = &v69[2];\n
                    v11 = v69;\n
                }\n
                v32 = *(v11);\n
                cgc_int_to_hex(v32, &v44);\n
                v10 = v43;\n
                v38 = v10 - cgc_strlen(&v44);\n
                if (!v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        if (!v41)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v45 += 1;\n
                    }\n
                }\n
                for (v31 = &v44; v31->field_0; v31 += 1)\n
                {\n
                    cgc_putc(v31->field_0);\n
                    v45 += 1;\n
                }\n
                if (v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v45 += 1;\n
                    }\n
                }\n
                v47 += 1;\n
                continue;\n
            }\n
            if (*(v47) == 102)\n
            {\n
                v7 = v46;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v72 = v7;\n
                    v73 = v72->field_8;\n
                    v72->field_8 = &v73[1];\n
                    v6 = v73;\n
                }\n
                else\n
                {\n
                    v70 = v9;\n
                    v71 = v70 + v7->field_10;\n
                    *(v8) = v70 + 16;\n
                    v6 = v71;\n
                }\n
                v30 = *(v6);\n
                a1 = v42;\n
                cgc_float_to_str(&v44, a1);\n
                v5 = v43;\n
                v38 = v5 - cgc_strlen(&v44);\n
                if (!v40)\n
                {\n
                    for (v39 = 0; v39 < v38; v39 += 1)\n
                    {\n
                        if (!v41)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v45 += 1;\n
                    }\n
                }\n
                for (v29 = &v44; v29->field_0; v29 += 1)\n
                {\n
                    cgc_putc(v29->field_0);\n
                    v45 += 1;\n
                }\n
                v47 += 1;\n
                continue;\n
            }\n
            if (!(*(v47) == 115))\n
                goto LABEL_403b2d;\n
            v3 = v46;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v74 = v3;\n
                v78 = v74->field_8;\n
                v76 = v78;\n
                v77 = v78 + 1;\n
                v74->field_8 = v77;\n
            }\n
            else\n
            {\n
                v74 = v3;\n
                v75 = v4;\n
                v76 = v75 + v74->field_10;\n
                v77 = v75 + 8;\n
                v74->field_0 = v77;\n
            }\n
            v2 = v76;\n
            v28 = *(v2);\n
            if (v42 > 0)\n
            {\n
                v1 = v42;\n
                v74 = cgc_strlen(v28);\n
                if (v1 < v74)\n
                {\n
                    v27 = v42;\n
                    goto LABEL_4039dd;\n
                }\n
            }\n
            v27 = cgc_strlen(v28);\n
LABEL_4039dd:\n
            v38 = v43 - v27;\n
            if (!v40)\n
            {\n
                for (v39 = 0; v39 < v38; v39 += 1)\n
                {\n
                    if (!v41)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v45 += 1;\n
                }\n
            }\n
            v26 = 0;\n
            v0 = v28;\n
            cgc_strlen(v28);\n
            v25 = cgc_transmit(a0, a1, v77, v74);\n
            if (v25)\n
                cgc__terminate(a0);\n
            v45 += v26;\n
            if (v40)\n
            {\n
                for (v39 = 0; v39 < v38; v39 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v45 += 1;\n
                }\n
            }\n
            v47 += 1;\n
        }\n
    }\n
    v48 = v45;\n
    return v48;\n
}\n
", "4209476:sub_403b44": null, "4209488:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_1 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_0 **v2;  // [bp-0x160]\n
    struct_1 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    struct struct_0 **v18;  // [bp-0xe0]\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_3 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_3 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_1 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v45;  // rcx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_40463b:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    a0[v37] = *(v27);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 <= 160)\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                else\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_40463b;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_4044a7;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_4044a7:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        a0[v37] = 32;\n
                    else\n
                        a0[v37] = 48;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4212306:sub_404652": null, "4212320:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4212495:sub_40470f": null, "4212496:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4212660:sub_4047b4": null, "4212672:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4212755:sub_404813": null, "4212768:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212819:sub_404853": null, "4212832:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212883:sub_404893": null, "4212896:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4212939:sub_4048cb": null, "4212944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4212987:sub_4048fb": null, "4212992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4213043:sub_404933": null, "4213056:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4213147:sub_40499b": null, "4213152:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4213180:sub_4049bc": null, "4213184:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4213236:sub_4049f4": null, "4213248:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_404be9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_404be9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_404be9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_404b59:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_404be9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_404b59;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_404be9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4213805:sub_404c2d": null, "4213808:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4214200:sub_404db8": null, "4214208:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4214311:sub_404e27": null, "4214320:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((a0 + v1)) = *((a1 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = 0;\n
    }\n
    return a0;\n
}\n
", "4214493:sub_404edd": null, "4214496:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4214614:sub_404f56": null, "4214624:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4214712:sub_404fb8": null, "4214720:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4214838:sub_405036": null, "4214848:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4215057:sub_405111": null, "4215072:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4215155:sub_405173": null, "4215168:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
\n
    while (true)\n
    {\n
        cgc_bzero(&v3, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 128, v7, v8, v9);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 128, v7, v8);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215437:sub_40528d": null, "4215440:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4215534:sub_4052ee": null, "4215536:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; v2 < a2; v2 += 1)\n
    {\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v0 == a1)\n
                break;\n
            *((a0 + v2)) = v0;\n
        }\n
    }\n
    if (v2 == a2)\n
        cgc_flush_input(0);\n
    return v2;\n
}\n
", "4215734:sub_4053b6": null, "4215744:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v1 = a1 - v2;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (cgc_receive(a0, a1, v6, v7))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v1 -= v0;\n
        v2 = v0 + v2;\n
    }\n
}\n
", "4215904:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4216066:sub_405502": null, "4216080:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4216312:sub_4055f8": null, "4216320:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4216402:sub_405652": null, "4216416:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4216532:sub_4056d4": null, "4216544:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4217254:sub_4059a6": null, "4217264:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4217347:sub_405a03": null, "4217360:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4217509:sub_405aa5": null, "4217520:cgc_insert_node": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    char padding_14[4];\n
    struct struct_1 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
long long cgc_insert_node(struct struct_1 **a0, char *a1, struct struct_2 **a2)\n
{\n
    struct_0 *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_1 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_2 **v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
    struct_1 *v6;  // rax\n
\n
    v3 = a2;\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (*(a0))\n
    {\n
        v1 = v3(a1);\n
        v2 = *(a0);\n
        while (true)\n
        {\n
            if (v1 < *((v2 + 8)))\n
            {\n
                if (*((v2 + 32)))\n
                {\n
                    v2 = *((v2 + 32));\n
                }\n
                else\n
                {\n
                    *((v2 + 32)) = cgc_calloc(1, 40);\n
                    if (!*((v2 + 32)))\n
                    {\n
                        v4 = -1;\n
                        return v4;\n
                    }\n
                    *(*((v2 + 32))) = a1;\n
                    *((*((v2 + 32)) + 16)) = 1;\n
                    *((*((v2 + 32)) + 8)) = v1;\n
                    v4 = 0;\n
                    return v4;\n
                }\n
            }\n
            else\n
            {\n
                if (v1 > *((v2 + 8)))\n
                {\n
                    if (!*((v2 + 24)))\n
                    {\n
                        *((v2 + 24)) = cgc_calloc(1, 40);\n
                        if (!*((v2 + 24)))\n
                        {\n
                            v4 = -1;\n
                            return v4;\n
                        }\n
                        *(*((v2 + 24))) = a1;\n
                        *((*((v2 + 24)) + 16)) = 1;\n
                        *((*((v2 + 24)) + 8)) = v1;\n
                        v4 = 0;\n
                        return v4;\n
                    }\n
                    v2 = *((v2 + 24));\n
                }\n
                else if (cgc_strcmp(*(v2), a1))\n
                {\n
                    for (v0 = *(v2); v0->field_400; v0 = v0->field_400);\n
                    *((v0 + 0x400)) = a1;\n
                    v6 = v2;\n
                    v6->field_10 = v6->field_10 + 1;\n
                    break;\n
                }\n
            }\n
        }\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        *(a0) = cgc_calloc(1, 40);\n
        if (!*(a0))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v1 = v3(a1);\n
        if (v1 <= 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        *(a0)->field_0 = &a1;\n
        *(a0)->field_10 = 1;\n
        *(a0)->field_8 = v1;\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4218222:sub_405d6e": null, "4218224:cgc_delete_node": "long long cgc_delete_node(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned long v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rax\n
\n
    v5 = a0;\n
    if (!*(a0))\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v4 = *(a0);\n
    while (*((v4 + 8)) != a2)\n
    {\n
        v2 = v4;\n
        if (a2 < *((v4 + 8)))\n
            v4 = *((v4 + 32));\n
        else\n
            v4 = *((v4 + 24));\n
        if (!v4)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    if (*((v4 + 16)) > 1)\n
    {\n
        v1 = *(v4);\n
        if (!cgc_strcmp(*(v4), a1))\n
        {\n
            cgc_free(v1);\n
            *(v4) = v0;\n
            v8 = v4;\n
            *((v8 + 16)) = *((v8 + 16)) - 1;\n
            v6 = 0;\n
            return v6;\n
        }\n
        for (v0 = *((v1 + 0x400)); v0; v0 = *((v0 + 0x400)))\n
        {\n
            if (cgc_strcmp(v0, a1))\n
            {\n
                v1 = v0;\n
            }\n
            else\n
            {\n
                *((v1 + 0x400)) = *((v0 + 0x400));\n
                v9 = v4;\n
                *((v9 + 16)) = *((v9 + 16)) - 1;\n
                cgc_free(v0);\n
                break;\n
            }\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        if (!*((v4 + 32)) && !*((v4 + 24)))\n
        {\n
            if (v4 != *(a0))\n
            {\n
                if (*((v2 + 8)) > a2)\n
                    *((v2 + 32)) = 0;\n
                else\n
                    *((v2 + 24)) = 0;\n
                cgc_free(*(v4));\n
                cgc_free(v4);\n
                goto LABEL_40615d;\n
            }\n
            else\n
            {\n
                cgc_free(*(*(a0)));\n
                cgc_free(*(a0));\n
                *(a0) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        if (*((v4 + 32)) && *((v4 + 24)))\n
        {\n
            v2 = v4;\n
            for (v3 = *((v4 + 32)); *((v3 + 24)); v3 = *((v3 + 24)))\n
            {\n
                v2 = v3;\n
            }\n
            cgc_free(*(v4));\n
            *(v4) = *(v3);\n
            if (*((v3 + 8)) > *((v2 + 8)))\n
                *((v2 + 24)) = *((v3 + 32));\n
            else\n
                *((v2 + 32)) = *((v3 + 32));\n
            *((v4 + 8)) = *((v3 + 8));\n
            *((v4 + 16)) = *((v3 + 16));\n
            cgc_free(v3);\n
            goto LABEL_40615d;\n
        }\n
        if (v4 == *(a0))\n
        {\n
            cgc_free(*(*(a0)));\n
            if (*((v4 + 32)))\n
                *(a0) = *((*(a0) + 32));\n
            else\n
                *(a0) = *((*(a0) + 24));\n
            cgc_free(v4);\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (*((v4 + 32)))\n
            v3 = *((v4 + 32));\n
        else\n
            v3 = *((v4 + 24));\n
        if (*((v2 + 8)) > a2)\n
            *((v2 + 32)) = v3;\n
        else\n
            *((v2 + 24)) = v3;\n
        cgc_free(*(v4));\n
        cgc_free(v4);\n
LABEL_40615d:\n
        v6 = 0;\n
        return v6;\n
    }\n
}\n
", "4219250:sub_406172": null, "4219264:cgc_find_node_by_key": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_find_node_by_key(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (v0->field_8 != a1)\n
        {\n
            if (a1 >= v0->field_8)\n
                v0 = v0->field_18;\n
            else\n
                v0 = v0[1].field_0;\n
            if (!v0)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = *(v0);\n
            return v1;\n
        }\n
    }\n
}\n
", "4219419:sub_40621b": null, "4219424:cgc_walk_tree": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[16];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
long long cgc_walk_tree(struct_1 *a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (a0->field_20)\n
        cgc_walk_tree(a0->field_20, a1, a2, a3, a4);\n
    for (v0 = a0->field_0; v0; v0 = *((v0 + 0x400)))\n
    {\n
        cgc_printf(\"@s\\n
\", v0, a2, a3, a4);\n
    }\n
    if (a0->field_18)\n
        cgc_walk_tree(a0->field_18, a1, a2, a3, a4);\n
    v1 = 0;\n
    return v1;\n
}\n
", "4219591:sub_4062c7": null, "4219600:cgc_make_key_from_name": "long long cgc_make_key_from_name(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    v0 = cgc_str_token(a0);\n
    return v0;\n
}\n
", "4219651:sub_406303": null, "4219664:cgc_count_bst_stats": "long long cgc_count_bst_stats(unsigned long long a0[5], unsigned int a1[3])\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        a1[0] = 0;\n
        v1 = 0;\n
        v0 = 0;\n
        if (a0[4])\n
            cgc_count_nodes(a0[4], &v1);\n
        v3 = v1;\n
        if (a0[3])\n
            cgc_count_nodes(a0[3], &v0);\n
        v2 = v0;\n
        v4 = v3 + v2;\n
        if (a0[0])\n
            v4 += 1;\n
        a1[0] = v4;\n
        if (v4 < 2)\n
        {\n
            a1[1] = 0;\n
            a1[2] = 0;\n
        }\n
        else\n
        {\n
            a1[1] = (0 CONCAT v3 * 100) /m (v4 - 1);\n
            a1[2] = (0 CONCAT v2 * 100) /m (v4 - 1);\n
        }\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4219954:sub_406432": null, "4219968:cgc_count_nodes": "long long cgc_count_nodes(unsigned long long a0[5], unsigned int *a1)\n
{\n
    if (a0[4])\n
        cgc_count_nodes(a0[4], a1);\n
    *(a1) = *(a1) + 1;\n
    if (a0[3])\n
        cgc_count_nodes(a0[3], a1);\n
    return 0;\n
}\n
", "4220067:sub_4064a3": null, "4220080:cgc_delete_matches": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_delete_matches(unsigned int a0, unsigned long a1, struct_0 *a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = a1;\n
    *(&v0) = a2->field_8;\n
    return cgc_delete_node(a0, *(&v0), cgc_make_key_from_name(a2->field_8));\n
}\n
", "4220154:sub_4064fa": null, "4220160:cgc_find_matches": "typedef struct struct_0 {\n
    char padding_0[1024];\n
    struct struct_0 *field_400;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    char *field_8;\n
} struct_1;\n
\n
long long cgc_find_matches(void* a0, unsigned long a1, struct_1 *a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long long, unsigned long\n
\n
    v1 = a1;\n
    v0 = 0;\n
    v3 = cgc_find_node_by_key(a0, cgc_make_key_from_name(a2->field_8));\n
    if (!v0)\n
        return v3;\n
    for (v0 = v3; v0; v0 = v3)\n
    {\n
        if (cgc_strcmp(a2->field_8, v0))\n
        {\n
            v3 = *((v0 + 0x400));\n
        }\n
        else\n
        {\n
            v3 = cgc_printf(\"@s\\n
\", v0, a2, a3, a4);\n
            break;\n
        }\n
    }\n
    return v3;\n
}\n
", "4220331:sub_4065ab": null, "4220336:cgc_parse_command": "long long cgc_parse_command(char *a0, unsigned long a1, unsigned long long *a2)\n
{\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0xc]\n
    char *v6;  // rax\n
\n
    if (!*(a0))\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v3 = 1;\n
    v2 = a0;\n
    while (true)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        if (!*(v6))\n
            break;\n
        if (*(v2) == a1)\n
            v3 += 1;\n
    }\n
    *(a2) = cgc_calloc(v3, 8);\n
    if (!*(a2))\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = a0;\n
    for (v1 = 0; v1 < v3; v1 += 1)\n
    {\n
        *((*(a2) + v1 * 8)) = v2;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*(v2) != a1)\n
                v0 = *(v2);\n
            if (!(v0 & 1))\n
                break;\n
            v2 += 1;\n
        }\n
        if (*(v2))\n
        {\n
            *(v2) = 0;\n
            v2 += 1;\n
        }\n
    }\n
    v4 = v3;\n
    return v4;\n
}\n
", "4220709:sub_406725": null, "4220720:main": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    char padding_14[4];\n
    void* field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    unsigned long long field_400;\n
} struct_0;\n
\n
typedef struct struct_0 {\n
    char padding_0[1024];\n
    void* field_400;\n
} struct_0;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x85c]\n
    unsigned long long v1;  // [bp-0x858]\n
    unsigned long v2;  // [bp-0x850]\n
    char v3;  // [bp-0x848]\n
    char v4;  // [bp-0x38]\n
    char v5;  // [bp-0x34]\n
    char v6;  // [bp-0x30]\n
    struct_0 *v7;  // [bp-0x28]\n
    struct_1 *v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = a0;\n
    v9 = a1;\n
    while (true)\n
    {\n
        do\n
        {\n
            v2 = cgc_getline(&v3, 0x800);\n
        } while (!v2);\n
        v0 = cgc_parse_command(&v3, 47, &v1);\n
        if (*(*(v1)) == 97 && v0 == 2)\n
        {\n
            if (cgc_strlen(*((v1 + 8))) >= 10)\n
            {\n
                v7 = cgc_calloc(1, 1032);\n
                if (!v7)\n
                {\n
                    cgc_printf(\"Unable to allocate memory\\n
\", 1032, cgc_make_key_from_name, a3, a4);\n
                    v11 = -1;\n
                    return v11;\n
                }\n
                cgc_strncpy(v7, *((v1 + 8)), 1023);\n
                v7->field_400 = 0;\n
                cgc_insert_node(&v8, v7, cgc_make_key_from_name);\n
                goto LABEL_4069a0;\n
            }\n
            else\n
            {\n
                cgc_free(v1);\n
                continue;\n
            }\n
        }\n
        if (*(*(v1)) == 102 && v0 == 2)\n
        {\n
            cgc_find_matches(v8, v0, v1, a3, a4);\n
            goto LABEL_4069a0;\n
        }\n
        if (*(*(v1)) == 100 && v0 == 2)\n
        {\n
            cgc_delete_matches(&v8, v0, v1);\n
            goto LABEL_4069a0;\n
        }\n
        if (*(*(v1)) == 120)\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        else if (*(*(v1)) == 119)\n
        {\n
            cgc_walk_tree(v8, 47, cgc_make_key_from_name, a3, a4);\n
        }\n
        else if (*(*(v1)) == 115)\n
        {\n
            cgc_bzero(&v4, 12);\n
            cgc_count_bst_stats(v8, &v4);\n
            cgc_printf(\"# of Nodes: @d\\n
\", *(&v4), cgc_make_key_from_name, a3, a4);\n
            cgc_printf(\"% left nodes: @d\\n
\", *(&v5), cgc_make_key_from_name, a3, a4);\n
            cgc_printf(\"% right nodes: @d\\n
\", *(&v6), cgc_make_key_from_name, a3, a4);\n
        }\n
LABEL_4069a0:\n
        cgc_free(v1);\n
    }\n
}\n
", "4221383:sub_4069c7": null, "4221392:cgc_str_token": "long long cgc_str_token(char *a0)\n
{\n
    unsigned long v0;  // [bp-0x20], Other Possible Types: unsigned long long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v0 = 5381; *(v1); v1 += 1)\n
    {\n
        v0 = 33 * v0 + *(v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221504:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_deallocate": null, "5242944:cgc_log10": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}