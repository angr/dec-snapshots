{"4202496:_init": "extern struct_0 *g_40a570;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a570;\n
    if (g_40a570)\n
        v1 = g_40a570();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a590;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a590;\n
    goto *(4236696);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_log": "// attributes: PLT stub\n
int cgc_log()\n
{\n
    ::libc.so.0::cgc_log();\n
    return;\n
}\n
", "4202656:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202672:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4236672);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a568;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_40a578;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a580;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a580)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203011:sub_402203": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203075:sub_402243": null, "4203088:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203139:sub_402283": null, "4203152:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0) && !cgc_islower(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203225:sub_4022d9": null, "4203232:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(a0) && !cgc_isdigit(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203305:sub_402329": null, "4203312:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 32 && a0 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203363:sub_402363": null, "4203376:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + -32;\n
    return v0;\n
}\n
", "4203436:sub_4023ac": null, "4203440:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4203500:sub_4023ec": null, "4203504:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203595:sub_40244b": null, "4203600:cgc_link": "extern char cgc_lookaside;\n
\n
long long cgc_link(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long v5;  // rax\n
\n
    v3 = cgc_lookaside;\n
    if (!a0)\n
        return cgc_lookaside;\n
    v5 = a0;\n
    if (*(a0) <= 1016)\n
    {\n
        if (*(a0) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(a0) >> 3;\n
        *((a0 + 8)) = (&cgc_lookaside)[v2];\n
        v1 = a0;\n
        if (*(a0) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(a0) >> 3;\n
        (&cgc_lookaside)[v0] = v1;\n
        return &cgc_lookaside;\n
    }\n
    while (true)\n
    {\n
        if (!v3)\n
            return v5;\n
        if (!*((v3 + 8)))\n
        {\n
            *((v3 + 8)) = a0;\n
            *((a0 + 16)) = v3;\n
            *((a0 + 8)) = 0;\n
            return a0;\n
        }\n
        if (*(a0) < *(*((v3 + 8))))\n
        {\n
            *((a0 + 8)) = *((v3 + 8));\n
            *((a0 + 16)) = v3;\n
            *((*((v3 + 8)) + 16)) = a0;\n
            v5 = v3;\n
            *((v5 + 8)) = a0;\n
            return v3;\n
        }\n
        v5 = *((v3 + 8));\n
        v3 = v5;\n
    }\n
}\n
", "4203979:sub_4025cb": null, "4203984:cgc_add_freelist_block": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_add_freelist_block(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned long long *v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long *v8;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = 0;\n
    v0 = 0;\n
    v2 += 4;\n
    v2 = v2 + 4095 & 0xfffff000;\n
    if (cgc_allocate(a0, v4, v5, v6))\n
    {\n
        cgc_printf(\"[ERROR] Allocating a free list block failed: $d\\n
\", v2);\n
        cgc__terminate(\"[ERROR] Allocating a free list block failed: $d\\n
\");\n
    }\n
    cgc_bzero(v1, v2);\n
    *(v1) = v2 - 4;\n
    if (!cgc_lookaside)\n
    {\n
        v8 = v1;\n
        cgc_lookaside = v8;\n
        return v1;\n
    }\n
    v8 = cgc_link(v1);\n
    return v8;\n
}\n
", "4204176:cgc_free": "long long cgc_free(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (a0)\n
        *(&v0) = a0 - 4;\n
    return cgc_link(*(&v0));\n
}\n
", "4204234:sub_4026ca": null, "4204240:cgc_init_freelist": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_init_freelist()\n
{\n
    unsigned long long v0[3];  // [bp-0x18]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    v1[0] = 0;\n
    v0[0] = 0;\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        cgc_printf(\"[ERROR] Malloc fail terminate\\n
\");\n
        cgc__terminate(\"[ERROR] Malloc fail terminate\\n
\");\n
    }\n
    cgc_bzero(cgc_lookaside, 0x1000);\n
    v1[0] = cgc_lookaside;\n
    v0[0] = v1 + 1;\n
    v1[0] = 0;\n
    v1[1] = v0;\n
    v1[2] = 0;\n
    v0[0] = 4068;\n
    v0[2] = v1;\n
    v0[1] = 0;\n
    return v0;\n
}\n
", "4204432:cgc_unlink": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_unlink(struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_1 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (!a0)\n
        return v2;\n
    if (a0->field_10)\n
        a0->field_10->field_8 = v0->field_8;\n
    v2 = a0;\n
    if (!a0->field_8)\n
        return v2;\n
    v2 = a0->field_8;\n
    *((v2 + 16)) = a0->field_10;\n
}\n
", "4204533:sub_4027f5": null, "4204544:cgc_freelist_alloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern struct_0 *cgc_lookaside;\n
\n
long long cgc_freelist_alloc(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v1 = cgc_lookaside; v1; v1 = *((v1 + 8)))\n
    {\n
        if (*(v1) >= a0)\n
            break;\n
    }\n
    if (!v1)\n
    {\n
        cgc_add_freelist_block(a0);\n
        v2 = cgc_freelist_alloc(a0);\n
        return v2;\n
    }\n
    cgc_unlink(v1);\n
    if (*(v1) - a0 < 24)\n
    {\n
        v2 = v1 + 4;\n
        return v2;\n
    }\n
    v0 = v1 + 4 + a0;\n
    *(v0) = *(v1) - (a0 + 4);\n
    *(v1) = a0;\n
    cgc_link(v0);\n
    v2 = v1 + 4;\n
    return v2;\n
}\n
", "4204825:sub_402919": null, "4204832:cgc_calloc": "long long cgc_calloc(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v0 = cgc_malloc(v1);\n
    if (!v0)\n
    {\n
        v2 = v0;\n
        return v2;\n
    }\n
    v1 = v1 + 7 & 4294967288;\n
    cgc_bzero(v0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4204937:sub_402989": null, "4204944:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern struct_1 cgc_lookaside;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30], Other Possible Types: unsigned long long\n
    struct_0 *v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long long v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x10]\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 < 8)\n
        v3 = 8;\n
    v3 = v3 + 7 & 4294967288;\n
    if (v3 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v3 >> 3;\n
    if (!v2)\n
    {\n
        v4 = cgc_freelist_alloc(v3);\n
        return v4;\n
    }\n
    for (v2 = v0; v2 < 128; v2 += 1)\n
    {\n
        if ((&cgc_lookaside.field_0)[v2])\n
            break;\n
    }\n
    if (v2 != 128)\n
    {\n
        v1 = (&cgc_lookaside.field_0)[v2];\n
        (&cgc_lookaside.field_0)[v2] = v1->field_8;\n
        v4 = &v1->padding_0[4];\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v3);\n
    return v4;\n
}\n
", "4205246:sub_402abe": null, "4205248:cgc_round": "long long cgc_round()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205374:sub_402b3e": null, "4205376:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v7;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v7 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v7;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205526:sub_402bd6": null, "4205536:cgc_seed_prng_array": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_seed_prng_array(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a1;\n
    cgc_bzero(&state, 128);\n
    state_n = 0;\n
    if (v2 > 32)\n
        v2 = 32;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        (&state)[v1] = a0[v1];\n
    }\n
    v5 = v2;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= 32)\n
            break;\n
        v0 = (&state)[v1 - 1 & 31];\n
        (&state)[v1] = (v0 ^ (v0 >> 30) + v1) * 524287;\n
        v5 = v1 + 1;\n
    }\n
    return v5;\n
}\n
", "4205750:sub_402cb6": null, "4205760:cgc_seed_prng": "long long cgc_seed_prng(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    return cgc_seed_prng_array(&v0, 1);\n
}\n
", "4205791:sub_402cdf": null, "4205792:cgc_prng": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v8 = (&state)[state_n];\n
    v7 = (&state)[state_n + 3 & 31];\n
    v6 = (&state)[state_n + 24 & 31];\n
    v5 = (&state)[state_n + 10 & 31];\n
    v4 = (&state)[state_n + 31 & 31];\n
    v3 = v8 ^ v7 ^ (v7 >> 8);\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    (&state)[state_n] = v1;\n
    (&state)[state_n + 31 & 31] = v0;\n
    state_n = state_n + 31 & 31;\n
    return v0;\n
}\n
", "4206101:sub_402e15": null, "4206112:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    if (a0 > a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0 != a1)\n
    {\n
        v2 = a1 - a0 + 1;\n
        if (!v2)\n
        {\n
            v4 = cgc_prng();\n
            return v4;\n
        }\n
        v1 = (0 CONCAT -1) /m v2;\n
        do\n
        {\n
            v3 = cgc_prng();\n
        } while (v3 >= v2 * v1);\n
        v0 = a0;\n
        v4 = v0 + (0 CONCAT v3) /m v1;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = a0;\n
        return v4;\n
    }\n
}\n
", "4206280:sub_402ec8": null, "4206288:cgc_WRAPPER_PUTC": "long long cgc_WRAPPER_PUTC(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rcx\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (cgc_transmit(a0, a1, a2, v4))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4206371:sub_402f23": null, "4206384:cgc_WRAPPER_OUTC": "long long cgc_WRAPPER_OUTC(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    a0[a2] = a1;\n
    return a2 + 1;\n
}\n
", "4206425:sub_402f59": null, "4206432:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    struct struct_0 *field_100;\n
} struct_0;\n
\n
long long cgc_WRAPPER_BUFFER_PUTC(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    if (a0->field_100 >= 0x100)\n
    {\n
        for (v1 = a0; a0->field_100 > 0; v1 = &(&v1->field_0)[*(&v0)])\n
        {\n
            if (cgc_transmit(a0, a1, a2, rcx<8>))\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
            else if (*(&v0))\n
            {\n
                v6 = a0->field_100 - *(&v0);\n
                *(&a0->field_100) = v6;\n
            }\n
            else\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
        }\n
    }\n
    *(&v6) = a0->field_100;\n
    *(&a0->field_100) = v6 + 1;\n
    (&a0->field_0)[v6] = a1;\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4206691:sub_403063": null, "4206704:cgc_putchar": "long long cgc_putchar(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    if (cgc_transmit(a0, v2, v3, v4))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4206774:sub_4030b6": null, "4206784:cgc_puts": "long long cgc_puts(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 0;\n
    v1 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        if (v0 == v1)\n
        {\n
            cgc_putchar(10);\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (cgc_transmit(a0, v5, v6, v7))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (*(&v2))\n
        {\n
            v0 = *(&v2) + v0;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206948:sub_403164": null, "4206960:cgc_vprintf_buffered": "long long cgc_vprintf_buffered(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x158]\n
    unsigned long v1;  // [bp-0x150]\n
    unsigned int v2;  // [bp-0x144]\n
    void* v3;  // [bp-0x140]\n
    unsigned long long v4;  // [bp-0x138]\n
    char v5;  // [bp-0x130]\n
    unsigned short v6;  // [bp-0x30]\n
    unsigned long long v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v7 = cgc_WRAPPER_BUFFER_PUTC;\n
    v6 = 0;\n
    v4 = &v5;\n
    v3 = 0;\n
    v2 = cgc_wrapper_output(v4, v7, v3, a0, a1);\n
    v1 = &v5;\n
    while (true)\n
    {\n
        if (v6 <= 0)\n
        {\n
            v8 = v2;\n
            return v8;\n
        }\n
        if (cgc_transmit(v4, v7, v3, a0))\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
        else if (*(&v0))\n
        {\n
            v6 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
    }\n
}\n
", "4207227:sub_40327b": null, "4207232:cgc_wrapper_output": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
long long cgc_wrapper_output(unsigned long long a0, struct struct_1 **a1, unsigned long a2, char *a3, struct_2 *a4)\n
{\n
    unsigned int v0;  // [bp-0x170]\n
    struct struct_0 **v1;  // [bp-0x168], Other Possible Types: unsigned long\n
    struct_2 *v2;  // [bp-0x160]\n
    unsigned int v3;  // [bp-0x154]\n
    struct struct_0 **v4;  // [bp-0x150], Other Possible Types: unsigned long\n
    struct_2 *v5;  // [bp-0x148]\n
    unsigned int v6;  // [bp-0x13c]\n
    struct struct_0 **v7;  // [bp-0x138], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0x130]\n
    unsigned int *v9;  // [bp-0x128]\n
    unsigned int v10;  // [bp-0x11c]\n
    unsigned long long *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int *v13;  // [bp-0x108]\n
    unsigned int v14;  // [bp-0xfc]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xcc]\n
    unsigned int *v21;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_2 *v22;  // [bp-0xc0]\n
    unsigned int v23;  // [bp-0xb4]\n
    unsigned long long *v24;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_2 *v25;  // [bp-0xa8]\n
    unsigned int v26;  // [bp-0x9c]\n
    unsigned long v27;  // [bp-0x98]\n
    char v28;  // [bp-0x8b]\n
    char v29;  // [bp-0x8a]\n
    char v30;  // [bp-0x89]\n
    unsigned int *v31;  // [bp-0x88]\n
    unsigned long v32;  // [bp-0x80]\n
    unsigned long v33;  // [bp-0x78]\n
    unsigned int v34;  // [bp-0x6c]\n
    unsigned int v35;  // [bp-0x68]\n
    unsigned int v36;  // [bp-0x64]\n
    unsigned long long v37;  // [bp-0x60]\n
    char *v38;  // [bp-0x58]\n
    char *v39;  // [bp-0x50]\n
    char v40;  // [bp-0x41]\n
    unsigned int v41;  // [bp-0x40]\n
    unsigned int v42;  // [bp-0x3c]\n
    unsigned int v43;  // [bp-0x38]\n
    unsigned int v44;  // [bp-0x34]\n
    char *v45;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v46;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_1 **v47;  // [bp-0x18]\n
    struct_2 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned long long *v51;  // rax\n
    struct_2 *v52;  // rcx\n
    unsigned long long *v53;  // rdx\n
    struct_2 *v54;  // rcx\n
    unsigned long long v55;  // rdx\n
    unsigned int *v56;  // rax\n
    struct_2 *v57;  // rcx\n
    unsigned int *v58;  // rdx\n
    struct_2 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned int *v61;  // rax\n
    struct_2 *v62;  // rcx\n
    unsigned int *v63;  // rdx\n
    struct_2 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    unsigned int *v66;  // rax\n
    struct_2 *v67;  // rcx\n
    unsigned int *v68;  // rdx\n
    unsigned long long v69;  // rdx\n
    unsigned long long *v70;  // rax\n
    struct_2 *v71;  // rcx\n
    unsigned long long *v72;  // rdx\n
    unsigned long long v73;  // rdx\n
    struct struct_0 **v74;  // rax\n
    struct_2 *v75;  // rcx\n
    struct struct_0 **v76;  // rdx\n
    struct_2 *v77;  // rcx\n
    unsigned long long v78;  // rdx\n
    struct struct_0 **v79;  // rax\n
    struct_2 *v80;  // rcx\n
    struct struct_0 **v81;  // rdx\n
    struct_2 *v82;  // rcx\n
    unsigned long long v83;  // rdx\n
    struct struct_0 **v84;  // rax\n
    struct_2 *v85;  // rcx\n
    struct struct_0 **v86;  // rdx\n
\n
    v47 = a1;\n
    v46 = a2;\n
    v45 = a3;\n
    v44 = 0;\n
    v43 = 0;\n
    v42 = 0;\n
    v41 = 0;\n
    while (true)\n
    {\n
        if (!*(v45))\n
            return v46;\n
        v40 = *(v45);\n
        v45 += 1;\n
        if (v40 != 36)\n
        {\n
            v46 = v47(a0, v40, v46);\n
        }\n
        else\n
        {\n
            v41 = 0;\n
            v42 = 0;\n
            v43 = 0;\n
            v44 = 0;\n
            if (!*(v45))\n
                return v46;\n
            if (*(v45) != 36)\n
            {\n
                if (*(v45) == 45)\n
                {\n
                    v44 |= 1;\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (cgc_isdigit(*(v45)))\n
                {\n
                    if (*(v45) == 48)\n
                        v44 |= 4;\n
                    for (v39 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v43 = cgc_atoi(v39);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (*(v45) == 46)\n
                {\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                    for (v38 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v41 = cgc_atoi(v38);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                v27 = *(v45) - 88;\n
                switch (v27)\n
                {\n
                case 0:\n
                    v44 |= 8;\n
                    v16 = a4;\n
                    v17 = v16->field_0;\n
                    if (v17 > 40)\n
                    {\n
                        v67 = v16;\n
                        v68 = v67->field_8;\n
                        v67->field_8 = &v68[2];\n
                        v15 = v68;\n
                    }\n
                    else\n
                    {\n
                        v64 = v16;\n
                        v65 = v17;\n
                        v66 = v65 + v64->field_10;\n
                        v64->field_0 = v65 + 8;\n
                        v15 = v66;\n
                    }\n
                    v34 = *(v15);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v34, 16, v43, v41);\n
                    break;\n
                case 11:\n
                    v2 = a4;\n
                    v3 = v2->field_0;\n
                    if (v3 > 40)\n
                    {\n
                        v85 = v2;\n
                        v86 = v85->field_8;\n
                        v85->field_8 = &v86[1];\n
                        v1 = v86;\n
                    }\n
                    else\n
                    {\n
                        v82 = v2;\n
                        v83 = v3;\n
                        v84 = v83 + v82->field_10;\n
                        v82->field_0 = v83 + 8;\n
                        v1 = v84;\n
                    }\n
                    v30 = *(v1);\n
                    v28 = v30;\n
                    v29 = 0;\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, &v28, v43, 0);\n
                    break;\n
                case 12:\n
                    v22 = a4;\n
                    v23 = v22->field_0;\n
                    if (v23 > 40)\n
                    {\n
                        v57 = v22;\n
                        v58 = v57->field_8;\n
                        v57->field_8 = &v58[2];\n
                        v21 = v58;\n
                    }\n
                    else\n
                    {\n
                        v54 = v22;\n
                        v55 = v23;\n
                        v56 = v55 + v54->field_10;\n
                        v54->field_0 = v55 + 8;\n
                        v21 = v56;\n
                    }\n
                    v36 = *(v21);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v36, 10, v43, v41);\n
                    break;\n
                case 13:\n
                    v44 |= 16;\n
                    v8 = a4;\n
                    v9 = &v8->field_4;\n
                    v10 = v8->field_4;\n
                    if (v10 <= 160)\n
                    {\n
                        v73 = v10;\n
                        v74 = v73 + v8->field_10;\n
                        *(v9) = v73 + 16;\n
                        v7 = v74;\n
                    }\n
                    else\n
                    {\n
                        v75 = v8;\n
                        v76 = v75->field_8;\n
                        v75->field_8 = &v76[1];\n
                        v7 = v76;\n
                    }\n
                    v32 = *(v7);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 14:\n
                    v12 = a4;\n
                    v13 = &v12->field_4;\n
                    v14 = v12->field_4;\n
                    if (v14 > 160)\n
                    {\n
                        v71 = v12;\n
                        v72 = v71->field_8;\n
                        v71->field_8 = &v72[1];\n
                        v11 = v72;\n
                    }\n
                    else\n
                    {\n
                        v69 = v14;\n
                        v70 = v69 + v12->field_10;\n
                        *(v13) = v69 + 16;\n
                        v11 = v70;\n
                    }\n
                    v33 = *(v11);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 22:\n
                    v5 = a4;\n
                    v6 = v5->field_0;\n
                    if (v6 <= 40)\n
                    {\n
                        v77 = v5;\n
                        v78 = v6;\n
                        v79 = v78 + v77->field_10;\n
                        v77->field_0 = v78 + 8;\n
                        v4 = v79;\n
                    }\n
                    else\n
                    {\n
                        v80 = v5;\n
                        v81 = v80->field_8;\n
                        v80->field_8 = &v81[1];\n
                        v4 = v81;\n
                    }\n
                    v31 = *(v4);\n
                    *(v31) = v46;\n
                    break;\n
                case 27:\n
                    v25 = a4;\n
                    v26 = v25->field_0;\n
                    if (v26 > 40)\n
                    {\n
                        v52 = v25;\n
                        v53 = v52->field_8;\n
                        v52->field_8 = &v53[1];\n
                        v24 = v53;\n
                    }\n
                    else\n
                    {\n
                        v49 = v25;\n
                        v50 = v26;\n
                        v51 = v50 + v49->field_10;\n
                        v49->field_0 = v50 + 8;\n
                        v24 = v51;\n
                    }\n
                    v37 = *(v24);\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, v37, v43, v41);\n
                    break;\n
                case 32:\n
                    v19 = a4;\n
                    v20 = v19->field_0;\n
                    if (v20 > 40)\n
                    {\n
                        v62 = v19;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[2];\n
                        v18 = v63;\n
                    }\n
                    else\n
                    {\n
                        v59 = v19;\n
                        v60 = v20;\n
                        v61 = v60 + v59->field_10;\n
                        v59->field_0 = v60 + 8;\n
                        v18 = v61;\n
                    }\n
                    v35 = *(v18);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v35, 16, v43, v41);\n
                    break;\n
                default:\n
                    break;\n
                }\n
                v45 += 1;\n
            }\n
            else\n
            {\n
                v46 = v47(a0, 36, v46);\n
                continue;\n
            }\n
        }\n
    }\n
}\n
", "4209178:sub_403a1a": null, "4209184:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf_buffered(a0, &v15);\n
    return v14;\n
}\n
", "4209344:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4209508:sub_403b64": null, "4209520:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, char *a1, void* a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x28]\n
\n
    v2 = &cgc_WRAPPER_OUTC;\n
    v1 = 0;\n
    v0 = cgc_wrapper_output(a0, v2, v1, a1, a2);\n
    v2(a0, 0, v0);\n
    return v0;\n
}\n
", "4209620:sub_403bd4": null, "4209632:cgc_printf_int_to_string": "long long cgc_printf_int_to_string(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rcx\n
\n
    v3 = a0;\n
    v2 = a3;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a2) = 48;\n
        v4 = 1;\n
        return v4;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a1 >> 32;\n
        v3 = (0 CONCAT v3) /m a1;\n
        if (a1 != 16)\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a2[v6] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a2[v7] = v0 + 48;\n
        }\n
        else if ((v2 & 8))\n
        {\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            a2[v8] = v0 + 55;\n
        }\n
        else\n
        {\n
            v9 = v1;\n
            v1 = v9 + 1;\n
            a2[v9] = v0 + 87;\n
        }\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4209924:sub_403d04": null, "4209936:cgc_printf_helper_int": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf_helper_int(unsigned long long a0, struct struct_1 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned int v9, unsigned int a6)\n
{\n
    struct_0 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    struct_0 *v2;  // [bp-0x50]\n
    char v3;  // [bp-0x41]\n
    void* v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_1 **v8;  // [bp-0x18]\n
    unsigned long long v10;  // rax\n
    unsigned long v11;  // rcx\n
    unsigned long long v12;  // rax\n
\n
    v8 = a1;\n
    v7 = a2;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a4 == 10 && v6 < 0)\n
    {\n
        v3 = 1;\n
        v6 = -(v6);\n
        v5 += 1;\n
    }\n
    v2 = cgc_printf_int_to_string(v6, a4, &v1, a6);\n
    v5 = &v2[v5];\n
    if (a5 > 0 && v5 < a5)\n
        v4 = a5 - v5;\n
    if (v9 > 0)\n
    {\n
        a6 |= 4;\n
        if (v2 < v9)\n
            v4 = v9 - v2;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a6 & 4))\n
        {\n
            v7 = v8(a0, 45, v7);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v10 = v4;\n
            v4 = v10 - 1;\n
            if (v10 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                v7 = v8(a0, 32, v7);\n
            else\n
                v7 = v8(a0, 48, v7);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v7 = v8(a0, 45, v7);\n
        v3 = 0;\n
    }\n
    for (v0 = v2; v0 > 0; v0 += 1)\n
    {\n
        v11 = v0 + 1;\n
        v7 = v8(a0, (&v1)[v11], v7, v11);\n
    }\n
    if (!(a6 & 1))\n
        return v7;\n
    while (true)\n
    {\n
        v12 = v4;\n
        v4 = v12 - 1;\n
        if (v12 <= 0)\n
            break;\n
        v7 = v8(a0, 32, v7);\n
    }\n
    return v7;\n
}\n
", "4210573:sub_403f8d": null, "4210576:cgc_printf_float_to_string": "long long cgc_printf_float_to_string(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_10;  // tmp #10\n
    int tmp_12;  // tmp #12\n
    int tmp_11;  // tmp #11\n
    char v0;  // [bp-0x7d]\n
    char v1;  // [bp-0x7c]\n
    char v2;  // [bp-0x7b]\n
    unsigned short v3;  // [bp-0x7a]\n
    char v4;  // [bp-0x77]\n
    unsigned short v5;  // [bp-0x76]\n
    char v6;  // [bp-0x73]\n
    char v7;  // [bp-0x72]\n
    char v8;  // [bp-0x71]\n
    unsigned long long v9;  // [bp-0x70]\n
    unsigned short v10;  // [bp-0x62]\n
    char v11;  // [bp-0x5f]\n
    unsigned short v12;  // [bp-0x5e]\n
    unsigned short v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x5a]\n
    unsigned long v15;  // [bp-0x58]\n
    unsigned short v16;  // [bp-0x4c]\n
    char v17;  // [bp-0x49]\n
    unsigned long v18;  // [bp-0x48], Other Possible Types: unsigned long long\n
    char *v19;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v20;  // [bp-0x2c]\n
    unsigned long v21;  // [bp-0x18]\n
    char *v22;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v24;  // xmm0lq\n
    unsigned long long v25;  // xmm0lq\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rcx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rcx\n
    int v33;  // xmm0\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rcx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rcx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    char *v46;  // rax, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rcx\n
    unsigned long v54;  // rcx\n
    unsigned long v56;  // rcx\n
    unsigned long v57;  // rcx\n
    unsigned long v58;  // rcx\n
    unsigned long v59;  // rcx\n
    unsigned long v60;  // rcx\n
    unsigned long v61;  // rcx\n
    unsigned long v62;  // rcx\n
    unsigned int v64;  // eax\n
    unsigned long v65;  // rcx\n
\n
    v21 = v24;\n
    v20 = a2;\n
    v19 = 0;\n
    cgc_pow();\n
    v18 = 0x4024000000000000;\n
    v25 = v21;\n
    if ((((CmpF(v25, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v26 = v19;\n
        v19 = v26 + 1;\n
        *((a1 + v26)) = 48;\n
        v27 = v19;\n
        v19 = v27 + 1;\n
        *((a1 + v27)) = 46;\n
        for (v17 = 0; v17 < a0; v17 += 1)\n
        {\n
            v29 = v19;\n
            v19 = v29 + 1;\n
            *((a1 + v29)) = 48;\n
        }\n
        if ((v20 & 16))\n
        {\n
            v34 = v19;\n
            v19 = v34 + 1;\n
            *((a1 + v34)) = 101;\n
            v35 = v19;\n
            v19 = v35 + 1;\n
            *((a1 + v35)) = 43;\n
            v36 = v19;\n
            v19 = v36 + 1;\n
            *((a1 + v36)) = 48;\n
            v37 = v19;\n
            v19 = v37 + 1;\n
            *((a1 + v37)) = 48;\n
            v38 = v19;\n
            v19 = v38 + 1;\n
            *((a1 + v38)) = 48;\n
        }\n
        v22 = v19;\n
        return v22;\n
    }\n
    if ((((CmpF(v21, v21) & 69) >> 2) & 1))\n
    {\n
        v30 = v19;\n
        v19 = v30 + 1;\n
        *((a1 + v30)) = 78;\n
        v31 = v19;\n
        v19 = v31 + 1;\n
        *((a1 + v31)) = 97;\n
        v32 = v19;\n
        v19 = v32 + 1;\n
        *((a1 + v32)) = 78;\n
        v22 = v19;\n
        return v22;\n
    }\n
    v33 = (0 CONCAT v21) & 170141183460469231722463931679029329919;\n
    if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v39 = v19;\n
        v19 = v39 + 1;\n
        *((a1 + v39)) = 73;\n
        v40 = v19;\n
        v19 = v40 + 1;\n
        *((a1 + v40)) = 78;\n
        v41 = v19;\n
        v19 = v41 + 1;\n
        *((a1 + v41)) = 70;\n
        v22 = v19;\n
        return v22;\n
    }\n
    if (!(CmpF(v21, 0x4202a05f20000000) & 1))\n
        v20 |= 16;\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) == 1)\n
        v21 = (0 CONCAT v18) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    else\n
        v21 = (0 CONCAT v18 ^ 0x8000000000000000) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    cgc_log10();\n
    v16 = v21;\n
    if ((v20 & 16))\n
    {\n
        v14 = v16 - a0;\n
        if ((((CmpF(0x3ff0000000000000, v21) & 69) | ((CmpF(0x3ff0000000000000, v21) & 69) >> 6)) & 1) == 1)\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        else\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        v18 = v15;\n
    }\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v21 ^= 0x8000000000000000;\n
        v19[a1] = 45;\n
        v19 += 1;\n
    }\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    *(&v33) = v18;\n
    if ((((CmpF(v33, v21) & 69) | ((CmpF(v33, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v43 = v19;\n
        v19 = v43 + 1;\n
        *((a1 + v43)) = 48;\n
        v44 = v19;\n
        v19 = v44 + 1;\n
        *((a1 + v44)) = 46;\n
        v11 = 1;\n
    }\n
    else if (v16 < 0)\n
    {\n
        *(&v33) = v21;\n
        if ((((CmpF(v33, v18) & 69) | ((CmpF(v33, v18) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
        {\n
            v45 = v19;\n
            v19 = v45 + 1;\n
            *((a1 + v45)) = 48;\n
            v46 = a1;\n
            v47 = v19;\n
            v19 = v47 + 1;\n
            *((a1 + v47)) = 46;\n
            v10 = v16;\n
            while (true)\n
            {\n
                *(&v46) = v10 + 1;\n
                v10 = v46;\n
                if (v46 >= 0)\n
                    break;\n
                v46 = a1;\n
                v48 = v19;\n
                v19 = v48 + 1;\n
                *((a1 + v48)) = 48;\n
                v12 += 1;\n
            }\n
            v11 = 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v16 < 0)\n
        {\n
            *(&v33) = v21;\n
            v1 = !((CmpF(v33, v18) & 69 | (CmpF(v33, v18) & 69) >> 6) & 1);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        cgc_pow();\n
        v9 = 0x4024000000000000;\n
        *(&v33) = v9;\n
        if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) == 1)\n
        {\n
LABEL_404621:\n
            if ((((CmpF(v16, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                *(&v33) = v21;\n
                if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
                {\n
                    v56 = v19;\n
                    v19 = v56 + 1;\n
                    *((a1 + v56)) = 46;\n
                    v11 = 1;\n
                }\n
            }\n
            if (v12 >= a0)\n
                break;\n
            v16 -= 1;\n
        }\n
        else\n
        {\n
            v33 = (0 CONCAT v9) & 170141183460469231722463931679029329919;\n
            if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x7ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                goto LABEL_404621;\n
            tmp_10 = DivV(tmp_12, tmp_11);\n
            v33 = tmp_10;\n
            cgc_floor();\n
            v8 = v33;\n
            v21 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v9) + (0 CONCAT v21);\n
            if ((v20 & 16) && !v11)\n
            {\n
                if (!v13)\n
                    v13 = v16;\n
                if (!v8)\n
                {\n
                    v13 -= 1;\n
                }\n
                else\n
                {\n
                    v52 = v19;\n
                    v19 = v52 + 1;\n
                    *((a1 + v52)) = v8 + 48;\n
                    v53 = v19;\n
                    v19 = v53 + 1;\n
                    *((a1 + v53)) = 46;\n
                    v11 = 1;\n
                }\n
                goto LABEL_404617;\n
            }\n
            if ((((CmpF(0, v16) & 69) | ((CmpF(0, v16) & 69) >> 6)) & 1) != 1 && !v11)\n
            {\n
                v50 = v19;\n
                v19 = v50 + 1;\n
                *((a1 + v50)) = 48;\n
                v51 = v19;\n
                v19 = v51 + 1;\n
                *((a1 + v51)) = 46;\n
                v11 = 1;\n
            }\n
            v54 = v19;\n
            v19 = v54 + 1;\n
            *((a1 + v54)) = v8 + 48;\n
            if (v11)\n
                v12 += 1;\n
LABEL_404617:\n
            goto LABEL_404621;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v11)\n
            v0 = v12 < a0;\n
        if (!(v0 & 1))\n
            break;\n
        v57 = v19;\n
        v19 = v57 + 1;\n
        *((a1 + v57)) = 48;\n
        v12 += 1;\n
    }\n
    if ((v20 & 16))\n
    {\n
        v58 = v19;\n
        v19 = v58 + 1;\n
        *((a1 + v58)) = 101;\n
        if (v13 >= 0)\n
        {\n
            v60 = v19;\n
            v19 = v60 + 1;\n
            *((a1 + v60)) = 43;\n
        }\n
        else\n
        {\n
            v13 = -(v13);\n
            v59 = v19;\n
            v19 = v59 + 1;\n
            *((a1 + v59)) = 45;\n
        }\n
        if (v13)\n
        {\n
            v6 = 0;\n
            cgc_log10();\n
            v5 = v13;\n
            for (v4 = v5; v4 < 2; v4 += 1)\n
            {\n
                v62 = v19;\n
                v19 = v62 + 1;\n
                *((a1 + v62)) = 48;\n
                v6 += 1;\n
            }\n
            while (true)\n
            {\n
                tmp_10 = v6;\n
                v6 += 1;\n
                if (tmp_10 >= 3)\n
                    break;\n
                cgc_pow();\n
                v3 = 0;\n
                v64 = v13;\n
                v2 = (v64 >> 31 CONCAT v64) /m v3;\n
                v65 = v19;\n
                v19 = v65 + 1;\n
                *((a1 + v65)) = v2 + 48;\n
                v13 -= (v3 * v2);\n
                v5 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            for (v7 = 0; v7 < 3; v7 += 1)\n
            {\n
                v61 = v19;\n
                v19 = v61 + 1;\n
                *((a1 + v61)) = 48;\n
            }\n
        }\n
    }\n
    v22 = v19;\n
    return v22;\n
}\n
", "4212922:sub_4048ba": null, "4212928:cgc_printf_helper_float": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf_helper_float(unsigned long long a0, struct struct_1 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    struct_0 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x49]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned long v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_1 **v9;  // [bp-0x18]\n
    unsigned long v11;  // xmm0lq\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rax\n
\n
    v9 = a1;\n
    v8 = a2;\n
    v7 = v11;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
    {\n
        v7 ^= 0x8000000000000000;\n
        v3 = 1;\n
        v5 += 1;\n
    }\n
    if (!a4)\n
        v2 = cgc_printf_float_to_string(6, &v1, a5);\n
    else\n
        v2 = cgc_printf_float_to_string(a4, &v1, a5);\n
    v5 = v2 + v5;\n
    if (v6 > 0 && v5 < v6)\n
        v4 = v6 - v5;\n
    if (!(a5 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a5 & 4))\n
        {\n
            v8 = v9(a0, 45, v8);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v12 = v4;\n
            v4 = v12 - 1;\n
            if (v12 <= 0)\n
                break;\n
            if ((a5 & 4))\n
                v8 = v9(a0, 48, v8);\n
            else\n
                v8 = v9(a0, 32, v8);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v8 = v9(a0, 45, v8);\n
        v3 = 0;\n
    }\n
    for (v0 = 0; v0 < v2; v0 += 1)\n
    {\n
        v13 = v0;\n
        v8 = v9(a0, (&v1)[v13], v8, v13);\n
    }\n
    if (!(a5 & 1))\n
        return v8;\n
    while (true)\n
    {\n
        v14 = v4;\n
        v4 = v14 - 1;\n
        if (v14 <= 0)\n
            break;\n
        v8 = v9(a0, 32, v8);\n
    }\n
    return v8;\n
}\n
", "4213575:sub_404b47": null, "4213584:cgc_printf_helper_string": "long long cgc_printf_helper_string(unsigned long long a0, struct struct_0 **a1, unsigned long a2, char *a3, unsigned long a4, unsigned long a5, unsigned int v6)\n
{\n
    void* v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct struct_0 **v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x10]\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx\n
    unsigned long long v11;  // rax\n
\n
    v4 = a1;\n
    v3 = a2;\n
    if (!a5 && !a4)\n
    {\n
        for (v2 = a3; *(v2); v2 += 1)\n
        {\n
            v7 = v2;\n
            v3 = v4(a0, *(v7), v3, v7);\n
        }\n
        v5 = v3;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v2);\n
    v0 = 0;\n
    if (a5 > 0 && v1 > a5)\n
        v1 = a5;\n
    if (a4 > 0 && v1 < a4)\n
        v0 = a4 - v1;\n
    if (!(v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v8 = v0;\n
            v0 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(v6 & 4))\n
                v3 = v4(a0, 32, v3);\n
            else\n
                v3 = v4(a0, 48, v3);\n
        }\n
    }\n
    while (true)\n
    {\n
        v9 = v1;\n
        v1 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v10 = v2;\n
        v2 = v10 + 1;\n
        v3 = v4(a0, *(v10), v3, v10);\n
    }\n
    if ((v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v11 = v0;\n
            v0 = v11 - 1;\n
            if (v11 <= 0)\n
                break;\n
            v3 = v4(a0, 32, v3);\n
        }\n
    }\n
    v5 = v3;\n
    return v5;\n
}\n
", "4214118:sub_404d66": null, "4214128:cgc_rand": "long long cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4214146:sub_404d82": null, "4214160:cgc_srand": "long long cgc_srand(unsigned long a0)\n
{\n
    return cgc_seed_prng(a0);\n
}\n
", "4214185:sub_404da9": null, "4214192:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    for (v0 = 0; cgc_isspace(*(v2)); v2 += 1);\n
    if (!*(v2))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v2) == 45)\n
    {\n
        v0 = 1;\n
        v2 += 1;\n
    }\n
    for (; cgc_isdigit(*(v2)); v1 = v1 * 10 + *(v5) - 48)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    if (v0)\n
    {\n
        v3 = -(v1);\n
        return v3;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214418:sub_404e92": null, "4214432:cgc_atof": "double cgc_atof(long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    for (v1 = a0; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == 46)\n
        {\n
            *(v1) = 0;\n
            v1 += 1;\n
            break;\n
        }\n
    }\n
    v4 = cgc_atoi(v2);\n
    if (!*(v1))\n
        return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
    v3 = cgc_atoi(v1);\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1)\n
            v0 = cgc_isdigit(*(v1));\n
        if (!(v0 & 1))\n
            break;\n
        tmp_12 = DivV(tmp_14, tmp_13);\n
        *(&v3) = tmp_12;\n
        v1 += 1;\n
    }\n
    return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
}\n
", "4214706:sub_404fb2": null, "4214720:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    for (v0 = v2; *(v1); *(v5) = tmp_19)\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    *(v2) = 0;\n
    return v0;\n
}\n
", "4214808:sub_405018": null, "4214816:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!*((a1 + v0)))\n
            break;\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = 0;\n
    }\n
    return a0;\n
}\n
", "4214973:sub_4050bd": null, "4214976:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    for (v0 = v3; v1 >= 4; v1 -= 4)\n
    {\n
        *(&v3) = *(&v2);\n
        v3 += 4;\n
        v2 += 4;\n
    }\n
    for (; v1 > 0; v1 -= 1)\n
    {\n
        *(v3) = *(v2);\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return v0;\n
}\n
", "4215139:sub_405163": null, "4215152:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned long v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x40], Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v6) = a0;\n
    v5 = a2;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v6)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    if (v5 >= 16)\n
        v5 = 16;\n
    for (; cgc_isspace(*(v6)); v6 += 1);\n
    if (*(v6) == 45)\n
    {\n
        v3 = 1;\n
        *(&v6) = v6 + 1;\n
    }\n
    else if (*(v6) == 43)\n
    {\n
        *(&v6) = v6 + 1;\n
    }\n
    if (v5 != 16 && !(!v5))\n
        goto LABEL_40528d;\n
    if (*(v6) != 48)\n
    {\n
LABEL_40528d:\n
        if (v5 && !(v5 == 2))\n
            goto LABEL_4052e6;\n
        if (*(v6) == 48)\n
        {\n
            if (*((v6 + 1)) != 98 && !(*((v6 + 1)) == 66))\n
                goto LABEL_4052e6;\n
            *(&v6) = v6 + 2;\n
            v5 = 2;\n
        }\n
LABEL_4052e6:\n
    }\n
    else\n
    {\n
        if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
            goto LABEL_40528d;\n
        *(&v6) = v6 + 2;\n
        v5 = 16;\n
    }\n
    if (!v5)\n
    {\n
        if (*(v6) == 48)\n
            v5 = 8;\n
        else\n
            v5 = 10;\n
    }\n
    v2 = 0;\n
    if (v3)\n
        v2 = -0x80000000;\n
    else\n
        v2 = 2147483647;\n
    v1 = (0 CONCAT v2) /m v5 >> 64;\n
    v2 = (0 CONCAT v2) /m v5;\n
    while (*(v6))\n
    {\n
        v0 = *(v6);\n
        if (cgc_isdigit(v0))\n
        {\n
            v0 -= 48;\n
        }\n
        else\n
        {\n
            if (!cgc_isalpha(v0))\n
                break;\n
            if (cgc_isupper(v0))\n
                v0 -= 55;\n
            else\n
                v0 -= 87;\n
        }\n
        if (v0 >= v5)\n
            break;\n
        if (v4 > v2)\n
        {\n
LABEL_405422:\n
            break;\n
        }\n
        else if (v4 != v2)\n
        {\n
LABEL_405427:\n
            v4 *= v5;\n
            v4 = v0 + v4;\n
            *(&v6) = v6 + 1;\n
        }\n
        else\n
        {\n
            if (v0 <= v1)\n
                goto LABEL_405427;\n
            goto LABEL_405422;\n
        }\n
    }\n
    if (a1)\n
        *(a1) = v6;\n
    if (v3)\n
    {\n
        v7 = -(v4);\n
        return v7;\n
    }\n
    v7 = v4;\n
    return v7;\n
}\n
", "4215954:sub_405492": null, "4215968:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4216034:sub_4054e2": null, "4216048:cgc_bzero": "long long cgc_bzero(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // rcx\n
\n
    for (v0 = a1; v0; v2[1 + a0] = 0)\n
    {\n
        v2 = v0;\n
        v0 = v2 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4216114:sub_405532": null, "4216128:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
\n
    v3 = a0;\n
    v2 = a2;\n
    v1 = v3;\n
    for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v2 >= 4; v2 -= 4)\n
    {\n
        *(&v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; v2 > 0; v2 -= 1)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = a1;\n
    }\n
    return v1;\n
}\n
", "4216299:sub_4055eb": null, "4216304:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = v1;\n
        if (v0 >= cgc_strlen(a0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a0[v1] != a1)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4216458:sub_40568a": null, "4216464:cgc_strtok": "extern struct_0 *cgc_StrtokNext;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!a1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v4)\n
    {\n
        if (cgc_StrtokNext)\n
        {\n
            v4 = cgc_StrtokNext;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a1, *(v4)))\n
            v0 = *(v4);\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 1;\n
    }\n
    if (!*(v4))\n
    {\n
        cgc_StrtokNext = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v4);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= v1)\n
        {\n
            cgc_StrtokNext = 0;\n
            v5 = v4;\n
            return v5;\n
        }\n
        if (cgc_strchr(a1, *((v4 + v3))))\n
            break;\n
        v3 += 1;\n
    }\n
    *((v4 + v3)) = 0;\n
    for (v2 = v3 + 1; v2 < v1; v2 += 1)\n
    {\n
        if (!cgc_strchr(a1, *((v4 + v2))))\n
        {\n
            cgc_StrtokNext = v4 + v2;\n
            v5 = v4;\n
            return v5;\n
        }\n
        *((v4 + v2)) = 0;\n
    }\n
    if (v2 == v1)\n
        cgc_StrtokNext = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4216958:sub_40587e": null, "4216960:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x21]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    if (v2 && !v1)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!v2 && v1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (!v2 && !v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(v1))\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        else if (*(v2) >= *(v1))\n
        {\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    if (*(v2) && !*(v1))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!*(v2) && *(v1))\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217329:sub_4059f1": null, "4217344:cgc_strcat": "long long cgc_strcat(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v2 = cgc_strlen(a0);\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = v1;\n
            if (v0 >= cgc_strlen(a1))\n
                break;\n
            a0[v2] = a1[v1];\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        a0[v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217518:sub_405aae": null, "4217520:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x32]\n
    char v1;  // [bp-0x31]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = *((a0 + v2));\n
        v0 = *((a1 + v2));\n
        if (v1 < v0)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (v1 <= v0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4217681:sub_405b51": null, "4217696:cgc_init_baseband": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[6];\n
    unsigned long long field_8;\n
    char padding_10[12];\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    char padding_24[4];\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
    char field_2b;\n
    char field_2c;\n
    char field_2d;\n
    char padding_2e[256];\n
    unsigned short field_12e;\n
} struct_0;\n
\n
long long cgc_init_baseband(struct_0 *a0)\n
{\n
    a0->field_0 = 0;\n
    a0->field_1 = 0;\n
    a0->field_8 = 0;\n
    a0->field_1c = 0;\n
    a0->field_20 = 0;\n
    a0->field_28 = 0;\n
    a0->field_2a = 0;\n
    a0->field_29 = 0;\n
    a0->field_2b = 0;\n
    a0->field_2c = 0;\n
    a0->field_2d = 0;\n
    a0->field_12e = 0;\n
    return a0;\n
}\n
", "4217816:sub_405bd8": null, "4217824:cgc_process_sample": "char cgc_process_sample(unsigned long long a0, unsigned long a1)\n
{\n
    return cgc_run_cdr(a0, a1);\n
}\n
", "4217861:sub_405c05": null, "4217872:cgc_run_cdr": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[6];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    char padding_24[4];\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
} struct_0;\n
\n
long long cgc_run_cdr(struct_0 *a0, unsigned long a1)\n
{\n
    int tmp_11;  // tmp #11\n
    int tmp_13;  // tmp #13\n
    int tmp_12;  // tmp #12\n
    int tmp_54;  // tmp #54\n
    int tmp_56;  // tmp #56\n
    int tmp_55;  // tmp #55\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned short v1;  // [bp-0x16]\n
    unsigned short v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10]\n
    struct_0 *v5;  // rax\n
    unsigned long long v6;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v9;  // rax\n
    struct_0 *v10;  // rax\n
    struct_0 *v12;  // rax\n
    struct_0 *v13;  // rax\n
\n
    v3 = a0;\n
    v5 = a0;\n
    v5->field_1c = v5->field_1c + 1;\n
    if (a0->field_1 != a1)\n
    {\n
        if (!a0->field_0)\n
        {\n
            a0->field_0 = 1;\n
            a0->field_8 = 0x4040000000000000;\n
            a0->field_1c = 0;\n
        }\n
        else if (a0->field_0 == 1)\n
        {\n
            v2 = a0->field_1c;\n
            if ((((CmpF(v2, 4630240848892154348) & 69) | ((CmpF(v2, 4630240848892154348) & 69) >> 6)) & 1) != 1)\n
            {\n
LABEL_405cca:\n
                a0->field_0 = 0;\n
            }\n
            else\n
            {\n
                if (!(((CmpF(4628619553026300969, v2) & 69 | (CmpF(4628619553026300969, v2) & 69) >> 6) & 1) == 1))\n
                    goto LABEL_405cca;\n
                cgc_floor();\n
                v1 = (0 CONCAT a0->field_8) + (0 CONCAT 0x3fe0000000000000);\n
                if (v2 < v1)\n
                {\n
                    tmp_11 = SubV(tmp_13, tmp_12);\n
                    *(&a0->field_8) = tmp_11;\n
                }\n
                else\n
                {\n
                    if (v2 > v1)\n
                    {\n
                        v12 = a0;\n
                        STORE(addr=(rax<8> + 0x8<64>), data=Conv(128->64, ((0x0<64> CONCAT 0x3fc999999999999a<64>) + Conv(64->128, Load(addr=(rax<8> + 0x8<64>), size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
                    }\n
                }\n
                v13 = a0;\n
                v13->field_20 = v13->field_20 + 1;\n
                if (a0->field_20 >= 15)\n
                {\n
                    a0->field_28 = 1;\n
                    a0->field_2a = 0;\n
                    a0->field_29 = v3->field_1;\n
                    a0->field_0 = 2;\n
                    a0->field_18 = 0;\n
                    tmp_54 = DivV(tmp_56, tmp_55);\n
                    *(&a0->field_10) = tmp_54;\n
                }\n
            }\n
        }\n
        else if (a0->field_0 != 2)\n
        {\n
            cgc__terminate(a0);\n
        }\n
        else\n
        {\n
            cgc_free_run_lock(a0, a1);\n
        }\n
        a0->field_1 = a1;\n
        a0->field_1c = 0;\n
        return a0;\n
    }\n
    else\n
    {\n
        v6 = a0->field_0;\n
        if (v6 != 2)\n
            return v6;\n
        v0 = a0->field_1c;\n
        cgc_round();\n
        v6 = v0;\n
        if (v6 == a0->field_10)\n
        {\n
            v9 = a0;\n
            STORE(addr=(rax<8> + 0x10<64>), data=Conv(128->64, ((0x0<64> CONCAT Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=(rax<8> + 0x10<64>), size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
            v10 = a0;\n
            v10->field_18 = v10->field_18 + 1;\n
            v6 = cgc_do_sample(a0, a1);\n
        }\n
    }\n
}\n
", "4218506:sub_405e8a": null, "4218512:cgc_free_run_lock": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
double cgc_free_run_lock(long long a0, long long a1)\n
{\n
    int tmp_50;  // tmp #50\n
    int tmp_52;  // tmp #52\n
    int tmp_51;  // tmp #51\n
    unsigned long v0;  // [bp-0x20]\n
    int tmp_11;  // tmp #11\n
    int tmp_13;  // tmp #13\n
    int tmp_12;  // tmp #12\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    char v1;  // [bp-0x11]\n
    int v3;  // xmm0\n
    int v5;  // xmm0\n
\n
    v1 = a1;\n
    tmp_50 = DivV(tmp_52, tmp_51);\n
    v3 = tmp_50;\n
    v0 = v3;\n
    if ((((CmpF(0x3ff0000000000000, v0) & 69) | ((CmpF(0x3ff0000000000000, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_11 = SubV(tmp_13, tmp_12);\n
        *(&a0->field_8) = tmp_11;\n
    }\n
    else\n
    {\n
        *(&v3) = v0;\n
        if ((((CmpF(v3, 0x3ff0000000000000) & 69) | ((CmpF(v3, 0x3ff0000000000000) & 69) >> 6)) & 1) != 1)\n
            STORE(addr=(rdi<8> + 0x8<64>), data=Conv(128->64, ((0x0<64> CONCAT 0x3fb999999999999a<64>) + Conv(64->128, Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
    }\n
    a0->field_18 = 0;\n
    tmp_24 = DivV(tmp_26, tmp_25);\n
    v5 = tmp_24;\n
    a0->field_10 = v5;\n
    return v5;\n
}\n
", "4218707:sub_405f53": null, "4218720:cgc_do_sample": "typedef struct struct_0 {\n
    char padding_0[40];\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
    char field_2b;\n
    char field_2c;\n
    char field_2d;\n
    char padding_2e[256];\n
    unsigned short field_12e;\n
} struct_0;\n
\n
long long cgc_do_sample(struct_0 *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x13]\n
    char v1;  // [bp-0x12]\n
    struct_0 *v2;  // [bp-0x10]\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
    unsigned long long v8;  // rcx\n
    struct_0 *v9;  // rax\n
    struct_0 *v10;  // rax\n
    unsigned long long v11;  // rcx\n
    struct_0 *v12;  // rax\n
    struct_0 *v13;  // rax\n
\n
    v2 = a0;\n
    v1 = a0->field_28;\n
    v4 = v1;\n
    if (!v4)\n
        return v1;\n
    if (v1 == 1)\n
    {\n
        if (a0->field_2a)\n
        {\n
            if (a0->field_2a != 1)\n
            {\n
                v0 = a0->field_2a;\n
                if (!a0->field_29 && a0->field_2a == 2 && a1 == 1)\n
                {\n
                    v4 = a0;\n
                    a0->field_29 = 1;\n
                    goto LABEL_406101;\n
                }\n
                if (a1 == (((1 << ((15 - v0) & 31)) & 53155) >> ((15 - v0) & 31)))\n
                {\n
                    v13 = a0;\n
                    v13->field_2a = v13->field_2a + 1;\n
                }\n
                else\n
                {\n
                    cgc_reset_baseband_state(a0);\n
                }\n
                v4 = a0->field_2a;\n
                if (v4 == 16)\n
                {\n
                    a0->field_28 = 2;\n
                    a0->field_2d = 0;\n
                    a0->field_2c = 0;\n
                    v4 = a0;\n
                    a0->field_2b = 0;\n
                }\n
LABEL_406101:\n
            }\n
            else if (a1)\n
            {\n
                v4 = a0;\n
                a0->field_2a = 2;\n
            }\n
            else\n
            {\n
                a0->field_29 = 0;\n
                v4 = a0;\n
                a0->field_2a = 0;\n
            }\n
        }\n
        else\n
        {\n
            if (a1 == 1)\n
            {\n
                v4 = a0;\n
                a0->field_2a = 1;\n
            }\n
            else if (a1 != a0->field_29)\n
            {\n
                v4 = a0;\n
                a0->field_29 = a1;\n
            }\n
            else\n
            {\n
                v4 = cgc_reset_baseband_state(a0);\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (v1 == 2)\n
        {\n
            v5 = a0;\n
            v5->field_2b = v5->field_2b | ((a1 & 1) << ((7 - a0->field_2d) & 31));\n
            v6 = a0;\n
            v6->field_2d = v6->field_2d + 1;\n
            v4 = a0->field_2d;\n
            if (v4 == 8)\n
            {\n
                if (a0->field_2b)\n
                {\n
                    a0->field_28 = 3;\n
                    a0->field_2d = 0;\n
                    v4 = cgc_memset(&a0->padding_2e, 0, 255);\n
                }\n
                else\n
                {\n
                    v4 = cgc_reset_baseband_state(a0);\n
                }\n
            }\n
        }\n
        else if (v1 == 3)\n
        {\n
            v7 = a0;\n
            v8 = a0->field_2c;\n
            v7->padding_2e[v8] = v7->padding_2e[v8] | (a1 & 1) << ((7 - a0->field_2d) & 31);\n
            v9 = a0;\n
            v9->field_2d = v9->field_2d + 1;\n
            v4 = a0->field_2d;\n
            if (v4 == 8)\n
            {\n
                a0->field_2d = 0;\n
                v10 = a0;\n
                v10->field_2c = v10->field_2c + 1;\n
                v4 = a0->field_2c;\n
                if (v4 == a0->field_2b)\n
                {\n
                    a0->field_28 = 4;\n
                    v4 = a0;\n
                    a0->field_12e = 0;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v4 = v1;\n
            if (v4 == 4)\n
            {\n
                v11 = a0->field_12e | (a1 & 1) << ((15 - a0->field_2d) & 31);\n
                a0->field_12e = v11;\n
                v12 = a0;\n
                v12->field_2d = v12->field_2d + 1;\n
                v4 = a0->field_2d;\n
                if (v4 == 16)\n
                {\n
                    *(&v11) = a0->field_2b;\n
                    cgc_receive_packet(&v2->padding_2e, a0->field_2b, a0->field_12e, v11);\n
                    v4 = cgc_reset_baseband_state(a0);\n
                }\n
            }\n
        }\n
    }\n
    return v4;\n
}\n
", "4219649:sub_406301": null, "4219664:cgc_reset_baseband_state": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[6];\n
    unsigned long long field_8;\n
    char padding_10[12];\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    char padding_24[4];\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
    char field_2b;\n
    char field_2c;\n
    char field_2d;\n
    char padding_2e[256];\n
    unsigned short field_12e;\n
} struct_0;\n
\n
long long cgc_reset_baseband_state(struct_0 *a0)\n
{\n
    a0->field_0 = 0;\n
    a0->field_28 = 0;\n
    a0->field_1 = 0;\n
    a0->field_8 = 0;\n
    a0->field_1c = 0;\n
    a0->field_20 = 0;\n
    a0->field_2a = 0;\n
    a0->field_29 = 0;\n
    a0->field_2b = 0;\n
    a0->field_2c = 0;\n
    a0->field_2d = 0;\n
    a0->field_12e = 0;\n
    return a0;\n
}\n
", "4219784:sub_406388": null, "4219792:cgc_init_packet_handler": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    char field_10;\n
    char padding_11[7];\n
    unsigned long long field_18;\n
    char field_20;\n
    char padding_21[7];\n
    unsigned long long field_28;\n
    char field_30;\n
    char padding_31[7];\n
    unsigned long long field_38;\n
    char field_40;\n
    char padding_41[7];\n
    unsigned long long field_48;\n
} struct_0;\n
\n
extern struct_0 *cgc_g_packetHandlers;\n
extern char g_40aa20;\n
\n
long long cgc_init_packet_handler()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
\n
    cgc_g_packetHandlers = cgc_malloc(80);\n
    g_40aa20 = 5;\n
    v0 = cgc_g_packetHandlers;\n
    v0->field_0 = 0;\n
    v0->field_8 = cgc_HandleBroadcastPacket;\n
    v0->field_10 = 1;\n
    v0->field_18 = cgc_HandleChannelPacket;\n
    v0->field_20 = 2;\n
    v0->field_28 = cgc_HandlePrivatePacket;\n
    v0->field_30 = 3;\n
    v0->field_38 = cgc_HandleConnectPacket;\n
    v0->field_40 = 4;\n
    v0->field_48 = cgc_HandleDisconnectPacket;\n
    return v0;\n
}\n
", "4219955:sub_406433": null, "4219968:cgc_HandleBroadcastPacket": "long long cgc_HandleBroadcastPacket(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x121]\n
    char v1;  // [bp-0x118]\n
    char v2;  // [bp-0x16]\n
    char v3;  // [bp-0x15]\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
\n
    if (!a0)\n
    {\n
        v5 = cgc_printf(\"[BROADCAST]No data\\n
\", a1, a2, a3, a4);\n
        return v5;\n
    }\n
    else if (a1 < 1)\n
    {\n
        v5 = cgc_printf(\"[BROADCAST]Missing length\\n
\", a1, a2, a3, a4);\n
        return v5;\n
    }\n
    else\n
    {\n
        v3 = *(a0);\n
        v6 = v3 + 2;\n
        if (a1 < v6)\n
        {\n
            v5 = cgc_printf(\"[BROADCAST]Invalid message length\\n
\", a1, a2, v6, a4);\n
            return v5;\n
        }\n
        else if (v3 > 8)\n
        {\n
            v5 = cgc_printf(\"[BROADCAST]Username length was too large\\n
\", a1, a2, v6, a4);\n
            return v5;\n
        }\n
        else\n
        {\n
            v2 = a0[1 + v3];\n
            v7 = v2;\n
            v8 = v3 + v7 + 2;\n
            if (a1 != v8)\n
            {\n
                v5 = cgc_printf(\"[BROADCAST]Message length did not match packet length\\n
\", a1, v7, v8, a4);\n
                return v5;\n
            }\n
            cgc_memcpy(&v0, a0 + 1, v3);\n
            (&v0)[v3] = 0;\n
            cgc_memcpy(&v1, &a0[v3 + 2], v2);\n
            (&v1)[v2] = 0;\n
            v5 = cgc_printf(\"[BROADCAST]From $s::$s\\n
\", &v0, &v1, v8, a4);\n
            return v5;\n
        }\n
    }\n
}\n
", "4220308:sub_406594": null, "4220320:cgc_HandleChannelPacket": "long long cgc_HandleChannelPacket(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x128]\n
    char v1;  // [bp-0x20]\n
    char v2;  // [bp-0x17]\n
    char v3;  // [bp-0x16]\n
    char v4;  // [bp-0x15]\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // rcx\n
\n
    if (!a0)\n
    {\n
        v6 = cgc_printf(\"[CHANNEL]No data\\n
\", a1, a2, a3, a4);\n
        return v6;\n
    }\n
    else if (a1 < 2)\n
    {\n
        v6 = cgc_printf(\"[CHANNEL]Invalid length\\n
\", a1, a2, a3, a4);\n
        return v6;\n
    }\n
    else\n
    {\n
        v4 = *(a0);\n
        v7 = v4 + 3;\n
        if (a1 < v7)\n
        {\n
            v6 = cgc_printf(\"[CHANNEL]Invalid message length\\n
\", a1, a2, v7, a4);\n
            return v6;\n
        }\n
        else if (v4 > 8)\n
        {\n
            v6 = cgc_printf(\"[CHANNEL]Username length was too large\\n
\", a1, a2, v7, a4);\n
            return v6;\n
        }\n
        else\n
        {\n
            v3 = a0[1 + v4];\n
            v2 = a0[2 + v4];\n
            v8 = v2;\n
            v9 = v4 + v8 + 3;\n
            if (a1 != v9)\n
            {\n
                v6 = cgc_printf(\"[CHANNEL]Message length did not match packet length\\n
\", a1, v8, v9, a4);\n
                return v6;\n
            }\n
            cgc_memcpy(&v1, a0 + 1, v4);\n
            (&v1)[v4] = 0;\n
            cgc_memcpy(&v0, &a0[v4 + 3], v2);\n
            (&v0)[v2] = 0;\n
            v6 = cgc_printf(\"[CHANNEL $d]Message from $s::$s\\n
\", v3, &v1, &v0, a4);\n
            return v6;\n
        }\n
    }\n
}\n
", "4220675:sub_406703": null, "4220688:cgc_HandlePrivatePacket": "long long cgc_HandlePrivatePacket(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x12a]\n
    char v1;  // [bp-0x121]\n
    char v2;  // [bp-0x118]\n
    char v3;  // [bp-0x17]\n
    char v4;  // [bp-0x16]\n
    char v5;  // [bp-0x15]\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rdx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rcx\n
\n
    if (!a0)\n
    {\n
        v7 = cgc_printf(\"[PRIVATE MESSAGE]No data\\n
\", a1, a2, a3, a4);\n
        return v7;\n
    }\n
    else if (a1 < 2)\n
    {\n
        v7 = cgc_printf(\"[PRIVATE MESSAGE]Invalid length\\n
\", a1, a2, a3, a4);\n
        return v7;\n
    }\n
    else\n
    {\n
        v5 = *(a0);\n
        v8 = v5 + 3;\n
        if (a1 < v8)\n
        {\n
            v7 = cgc_printf(\"[PRIVATE MESSAGE]Message length did not match packet length\\n
\", a1, a2, v8, a4);\n
            return v7;\n
        }\n
        else if (v5 > 8)\n
        {\n
            v7 = cgc_printf(\"[PRIVATE MESSAGE]Username length was too large\\n
\", a1, a2, v8, a4);\n
            return v7;\n
        }\n
        else\n
        {\n
            v4 = a0[1 + v5];\n
            v9 = v4;\n
            v10 = v5 + v9 + 3;\n
            if (a1 < v10)\n
            {\n
                v7 = cgc_printf(\"[PRIVATE MESSAGE]Message length did not match packet length\\n
\", a1, v9, v10, a4);\n
                return v7;\n
            }\n
            else if (v4 > 8)\n
            {\n
                v7 = cgc_printf(\"[PRIVATE MESSAGE]Username length was too large\\n
\", a1, v9, v10, a4);\n
                return v7;\n
            }\n
            else\n
            {\n
                v3 = a0[2 + v4 + v5];\n
                v11 = v3;\n
                v12 = v5 + v4 + v11 + 3;\n
                if (a1 != v12)\n
                {\n
                    v7 = cgc_printf(\"[PRIVATE MESSAGE]Message length did not match packet length\\n
\", a1, v11, v12, a4);\n
                    return v7;\n
                }\n
                cgc_memcpy(&v0, a0 + 1, v5);\n
                (&v0)[v5] = 0;\n
                cgc_memcpy(&v1, &a0[v5 + 2], v4);\n
                (&v1)[v4] = 0;\n
                cgc_memcpy(&v2, &a0[v5 + v4 + 3], v3);\n
                (&v2)[v3] = 0;\n
                v7 = cgc_printf(\"[PRIVATE MESSAGE]$s to $s::$s\\n
\", &v0, &v1, &v2, a4);\n
                return v7;\n
            }\n
        }\n
    }\n
}\n
", "4221198:sub_40690e": null, "4221200:cgc_HandleConnectPacket": "long long cgc_HandleConnectPacket(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1d]\n
    char v1;  // [bp-0x15]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v4;  // rcx\n
    unsigned long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v3 = cgc_printf(\"[CONNECT MESSAGE]No data\\n
\", a1, a2, a3, a4);\n
        return v3;\n
    }\n
    else if (a1 < 1)\n
    {\n
        v3 = cgc_printf(\"[CONNECT MESSAGE]Invalid length\\n
\", a1, a2, a3, a4);\n
        return v3;\n
    }\n
    else\n
    {\n
        v1 = *(a0);\n
        v4 = v1 + 1;\n
        if (a1 != v4)\n
        {\n
            v3 = cgc_printf(\"[CONNECT MESSAGE]Message length did not match packet length\\n
\", a1, a2, v4, a4);\n
            return v3;\n
        }\n
        else if (v1 < 8)\n
        {\n
            v5 = v1;\n
            cgc_memcpy(&v0, a0 + 1, v5);\n
            (&v0)[v1] = 0;\n
            v3 = cgc_printf(\"[CONNECT MESSAGE]$s connected\\n
\", &v0, v5, v4, a4);\n
            return v3;\n
        }\n
        else\n
        {\n
            v3 = cgc_printf(\"[CONNECT MESSAGE]Username length was too large\\n
\", a1, a2, v4, a4);\n
            return v3;\n
        }\n
    }\n
}\n
", "4221408:cgc_HandleDisconnectPacket": "long long cgc_HandleDisconnectPacket(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1d]\n
    char v1;  // [bp-0x15]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v4;  // rcx\n
    unsigned long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v3 = cgc_printf(\"[DISCONNECT MESSAGE]No data\\n
\", a1, a2, a3, a4);\n
        return v3;\n
    }\n
    else if (a1 < 1)\n
    {\n
        v3 = cgc_printf(\"[DISCONNECT MESSAGE]Invalid length\\n
\", a1, a2, a3, a4);\n
        return v3;\n
    }\n
    else\n
    {\n
        v1 = *(a0);\n
        v4 = v1 + 1;\n
        if (a1 != v4)\n
        {\n
            v3 = cgc_printf(\"[DISCONNECT MESSAGE]Message length did not match packet length\\n
\", a1, a2, v4, a4);\n
            return v3;\n
        }\n
        else if (v1 < 8)\n
        {\n
            v5 = v1;\n
            cgc_memcpy(&v0, a0 + 1, v5);\n
            (&v0)[v1] = 0;\n
            v3 = cgc_printf(\"[DISCONNECT MESSAGE]$s disconnected\\n
\", &v0, v5, v4, a4);\n
            return v3;\n
        }\n
        else\n
        {\n
            v3 = cgc_printf(\"[DISCONNECT MESSAGE]Username length was too large\\n
\", a1, a2, v4, a4);\n
            return v3;\n
        }\n
    }\n
}\n
", "4221616:cgc_destroy_packet_handler": "typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
extern struct_0 *cgc_g_packetData;\n
extern void* cgc_g_packetHandlers;\n
\n
long long cgc_destroy_packet_handler()\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    if (cgc_g_packetHandlers)\n
        cgc_free(cgc_g_packetHandlers);\n
    cgc_g_packetHandlers = 0;\n
    v3 = cgc_g_packetData;\n
    for (v1 = cgc_g_packetData; v1; v1 = v3)\n
    {\n
        v0 = *((v1 + 56));\n
        cgc_free(v1);\n
        v3 = v0;\n
    }\n
    cgc_g_packetData = 0;\n
    return v3;\n
}\n
", "4221734:sub_406b26": null, "4221744:cgc_simple_checksum16": "long long cgc_simple_checksum16(char *a0, unsigned long a1)\n
{\n
    unsigned short v0;  // [bp-0x14]\n
    unsigned short v1;  // [bp-0x12]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v6;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = 49069;\n
    while (true)\n
    {\n
        v1 -= 1;\n
        if (eax<4> <= 0)\n
            break;\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        *(&v0) = v0 + *(v6);\n
    }\n
    return v0;\n
}\n
", "4221831:sub_406b87": null, "4221840:cgc_receive_packet": "extern unsigned long long cgc_g_packetHandlers;\n
extern char g_40aa20;\n
extern unsigned int g_40aa30;\n
extern unsigned int g_40aa34;\n
extern unsigned int g_40aa38;\n
\n
long long cgc_receive_packet(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x17]\n
    unsigned short v3;  // [bp-0x16]\n
    unsigned short v4;  // [bp-0x14]\n
    char v5;  // [bp-0x11]\n
    unsigned long v7;  // ax, Other Possible Types: unsigned short, unsigned long long\n
\n
    v7 = a2;\n
    v5 = a1;\n
    v4 = a2;\n
    if (!a0)\n
        return v7;\n
    v7 = v5;\n
    if (!v7)\n
        return v5;\n
    v3 = cgc_simple_checksum16(a0, v5);\n
    v7 = v4;\n
    if (v7 != v3)\n
        return v4;\n
    v2 = *(a0);\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v7 = v0;\n
        if (v7 >= g_40aa20)\n
            break;\n
        if (*((cgc_g_packetHandlers + (v0 << 4))) == v2)\n
        {\n
            v1 = 1;\n
            cgc_add_new_packet(v2, *((cgc_g_packetHandlers + v0 * 16 + 8)), a0 + 1, v5 - 1);\n
            g_40aa30 = g_40aa30 + 1;\n
            g_40aa34 = v5 + g_40aa34;\n
        }\n
        v0 += 1;\n
    }\n
    if (v1)\n
        return v7;\n
    v7 = g_40aa38 + 1;\n
    g_40aa38 = v7;\n
}\n
", "4222145:sub_406cc1": null, "4222160:cgc_add_new_packet": "typedef struct struct_0 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
    char padding_34[4];\n
    unsigned long long field_38;\n
    unsigned long long field_40;\n
    char field_48;\n
} struct_0;\n
\n
extern struct_0 *cgc_g_packetData;\n
\n
long long cgc_add_new_packet(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(80);\n
    v0->field_48 = a0;\n
    v0->field_40 = a1;\n
    v0->field_38 = 0;\n
    v0->field_30 = a3;\n
    cgc_memcpy(v0, a2, a3);\n
    if (!cgc_g_packetData)\n
    {\n
        v2 = v0;\n
        cgc_g_packetData = v2;\n
        return v0;\n
    }\n
    v0->field_38 = cgc_g_packetData;\n
    v2 = v0;\n
    cgc_g_packetData = v2;\n
    return v0;\n
}\n
", "4222327:sub_406d77": null, "4222336:cgc_display_packets": "typedef struct struct_1 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
    char padding_34[4];\n
    struct struct_1 *field_38;\n
    struct struct_0 *field_40;\n
    char field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 *cgc_g_packetData;\n
extern unsigned int g_40aa30;\n
extern unsigned int g_40aa34;\n
extern unsigned int g_40aa38;\n
\n
long long cgc_display_packets(unsigned long a0, unsigned long a1, unsigned long a2, struct_1 *a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_1 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_1 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    cgc_printf(\"Total $d bytes received and $d invalid packets.\\n
\", g_40aa34, g_40aa38, a3, a4);\n
    cgc_printf(\"Displaying $d received packets:\\n
\", g_40aa30, g_40aa38, a3, a4);\n
    v0 = 0;\n
    v3 = cgc_g_packetData;\n
    for (v1 = cgc_g_packetData; v1; v1 = v3)\n
    {\n
        cgc_printf(\"Displaying packet $d type $d:\\n
\", v0, v1->field_48, a3, a4);\n
        a3 = v1;\n
        v1->field_40(v1, *((a3 + 48)));\n
        v0 += 1;\n
        v3 = v1->field_38;\n
    }\n
    return v3;\n
}\n
", "4222505:sub_406e29": null, "4222512:cgc_get_rand_uniform": "double cgc_get_rand_uniform()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    unsigned long long v1;  // [bp-0x10]\n
\n
    v1 = cgc_rand() >> 4;\n
    v0 = cgc_rand() >> 5;\n
    return ((0 CONCAT v1) * (0 CONCAT 0x4190000000000000) + (0 CONCAT v0)) * (0 CONCAT 0x3ca0000000000000);\n
}\n
", "4222598:sub_406e86": null, "4222608:cgc_add_awgn_to_sample": "long long cgc_add_awgn_to_sample(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x60]\n
    int tmp_15;  // tmp #15\n
    int tmp_17;  // tmp #17\n
    int tmp_16;  // tmp #16\n
    int tmp_13;  // tmp #13\n
    int tmp_14;  // tmp #14\n
    unsigned long v1;  // [bp-0x58]\n
    unsigned short v2;  // [bp-0x4c]\n
    char v3;  // [bp-0x49]\n
    unsigned long v4;  // [bp-0x48]\n
    unsigned long v5;  // [bp-0x40]\n
    unsigned long v6;  // [bp-0x38]\n
    unsigned long v7;  // [bp-0x30]\n
    unsigned long v8;  // [bp-0x28]\n
    unsigned long v9;  // [bp-0x20]\n
    unsigned long v10;  // [bp-0x18]\n
    char v11;  // [bp-0x9]\n
    unsigned long long v16;  // rsi\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rcx\n
    unsigned long long v19;  // r8\n
    unsigned long long v20;  // r9\n
    int v21;  // xmm0\n
    int v23;  // xmm0\n
\n
    v11 = a0;\n
    do\n
    {\n
        cgc_get_rand_uniform();\n
        *(&v7) = xmm0lq<8>;\n
        cgc_get_rand_uniform();\n
        *(&v6) = xmm0lq<8>;\n
        v9 = (0 CONCAT v7) * 2 + (0 CONCAT 0xbff0000000000000);\n
        *(&v8) = (0 CONCAT v6) * 2 + (0 CONCAT 0xbff0000000000000);\n
        s_18 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-32, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base-32, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE)))))<8>\n
    } while (!(CmpF(v10, 0x3ff0000000000000) & 1));\n
    cgc_log();\n
    v0 = 0xc000000000000000;\n
    tmp_15 = DivV(tmp_17, tmp_16);\n
    cgc_sqrt(a0, v16, v17, v18, v19, v20);\n
    v21 = tmp_15 * (0 CONCAT v9);\n
    v5 = v21;\n
    cgc_log(a0, v16, v17, v18, v19, v20);\n
    tmp_13 = DivV(tmp_15, tmp_14);\n
    cgc_sqrt(a0, v16, v17, v18, v19, v20);\n
    v23 = tmp_13 * (0 CONCAT v8);\n
    v4 = v23;\n
    v1 = v5;\n
    cgc_sqrt(a0, v16, v17, v18, v19, v20);\n
    v3 = (0 CONCAT v1) * (0 CONCAT 0x4034000000000000);\n
    v2 = v3 + v11;\n
    v11 = v3 + v11;\n
    if (v2 >= 128)\n
    {\n
        v11 = 127;\n
        return v11;\n
    }\n
    if (v2 > -128)\n
        return v11;\n
    v11 = 129;\n
}\n
", "4222981:sub_407005": null, "4222992:cgc_receive_sample": "extern unsigned long long cgc_receive_sample.xv1200;\n
extern unsigned long long cgc_receive_sample.xv2400;\n
extern unsigned long long cgc_receive_sample.xv_env1200;\n
extern unsigned long long cgc_receive_sample.xv_env2400;\n
extern unsigned long long cgc_receive_sample.yv1200;\n
extern unsigned long long cgc_receive_sample.yv2400;\n
extern unsigned long long cgc_receive_sample.yv_env1200;\n
extern unsigned long long cgc_receive_sample.yv_env2400;\n
extern unsigned long long g_40aa48;\n
extern unsigned long long g_40aa50;\n
extern unsigned long long g_40aa58;\n
extern unsigned long long g_40aa60;\n
extern unsigned long long g_40aa68;\n
extern unsigned long long g_40aa70;\n
extern unsigned long long g_40aa88;\n
extern unsigned long long g_40aa90;\n
extern unsigned long long g_40aa98;\n
extern unsigned long long g_40aaa0;\n
extern unsigned long long g_40aaa8;\n
extern unsigned long long g_40aab0;\n
extern unsigned long long g_40aac8;\n
extern unsigned long long g_40aad0;\n
extern unsigned long long g_40aad8;\n
extern unsigned long long g_40aae0;\n
extern unsigned long long g_40aae8;\n
extern unsigned long long g_40aaf0;\n
extern unsigned long long g_40ab08;\n
extern unsigned long long g_40ab10;\n
extern unsigned long long g_40ab18;\n
extern unsigned long long g_40ab20;\n
extern unsigned long long g_40ab28;\n
extern unsigned long long g_40ab30;\n
extern unsigned long long g_40ab48;\n
extern unsigned long long g_40ab50;\n
extern unsigned long long g_40ab58;\n
extern unsigned long long g_40ab68;\n
extern unsigned long long g_40ab70;\n
extern unsigned long long g_40ab78;\n
extern unsigned long long g_40ab88;\n
extern unsigned long long g_40ab90;\n
extern unsigned long long g_40ab98;\n
extern unsigned long long g_40aba8;\n
extern unsigned long long g_40abb0;\n
extern unsigned long long g_40abb8;\n
\n
long long cgc_receive_sample(unsigned long a0)\n
{\n
    int tmp_73;  // tmp #73\n
    int tmp_75;  // tmp #75\n
    int tmp_74;  // tmp #74\n
    int tmp_91;  // tmp #91\n
    int tmp_93;  // tmp #93\n
    int tmp_92;  // tmp #92\n
    int tmp_96;  // tmp #96\n
    int tmp_98;  // tmp #98\n
    int tmp_97;  // tmp #97\n
    int tmp_95;  // tmp #95\n
    int tmp_113;  // tmp #113\n
    int tmp_114;  // tmp #114\n
    int tmp_111;  // tmp #111\n
    int tmp_118;  // tmp #118\n
    int tmp_119;  // tmp #119\n
    int tmp_116;  // tmp #116\n
    int tmp_102;  // tmp #102\n
    int tmp_104;  // tmp #104\n
    int tmp_103;  // tmp #103\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned long v0;  // [bp-0x48]\n
    unsigned long v1;  // [bp-0x40]\n
    unsigned long long v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long long v6;  // [bp-0x18]\n
    char v7;  // [bp-0xa]\n
    char v8;  // [bp-0x9]\n
    int v13;  // xmm1\n
    int v17;  // xmm1\n
    int v19;  // xmm0\n
\n
    v7 = a0;\n
    v7 = cgc_add_awgn_to_sample(v7);\n
    v6 = 4661121313830818808;\n
    cgc_receive_sample.xv1200 = g_40aa48;\n
    g_40aa48 = g_40aa50;\n
    g_40aa50 = g_40aa58;\n
    g_40aa58 = g_40aa60;\n
    g_40aa60 = g_40aa68;\n
    g_40aa68 = g_40aa70;\n
    tmp_73 = DivV(tmp_75, tmp_74);\n
    *(&g_40aa70) = tmp_73;\n
    cgc_receive_sample.yv1200 = g_40aa88;\n
    g_40aa88 = g_40aa90;\n
    g_40aa90 = g_40aa98;\n
    g_40aa98 = g_40aaa0;\n
    g_40aaa0 = g_40aaa8;\n
    g_40aaa8 = g_40aab0;\n
    tmp_91 = SubV(tmp_93, tmp_92);\n
    tmp_96 = SubV(tmp_98, tmp_97);\n
    v13 = (0 CONCAT g_40aa90) * (0 CONCAT 13843575331137114248) + (0 CONCAT g_40aa88) * (0 CONCAT 4614871111687090306) + (0 CONCAT cgc_receive_sample.yv1200) * (0 CONCAT 0xbfe89fea63391f00) + tmp_96 * (0 CONCAT 0x4008000000000000) + tmp_91;\n
    g_40aab0 = ((0 CONCAT g_40aaa8) * (0 CONCAT 4616264329692339511) + (0 CONCAT g_40aaa0) * (0 CONCAT 13844208981161497880) + (0 CONCAT g_40aa98) * (0 CONCAT 4621782674337219323) + v13);\n
    v5 = g_40aab0;\n
    v4 = 4661121313835216854;\n
    cgc_receive_sample.xv2400 = g_40aac8;\n
    g_40aac8 = g_40aad0;\n
    g_40aad0 = g_40aad8;\n
    g_40aad8 = g_40aae0;\n
    g_40aae0 = g_40aae8;\n
    g_40aae8 = g_40aaf0;\n
    tmp_95 = DivV(tmp_96, tmp_93);\n
    *(&g_40aaf0) = tmp_95;\n
    cgc_receive_sample.yv2400 = g_40ab08;\n
    g_40ab08 = g_40ab10;\n
    g_40ab10 = g_40ab18;\n
    g_40ab18 = g_40ab20;\n
    g_40ab20 = g_40ab28;\n
    g_40ab28 = g_40ab30;\n
    tmp_113 = SubV(tmp_114, tmp_111);\n
    tmp_118 = SubV(tmp_119, tmp_116);\n
    v17 = (0 CONCAT cgc_receive_sample.yv2400) * (0 CONCAT 0xbfe89fea63391f00) + tmp_118 * (0 CONCAT 0x4008000000000000) + tmp_113;\n
    g_40ab30 = ((0 CONCAT g_40ab28) * 0 + (0 CONCAT g_40ab20) * (0 CONCAT 13836720750279075031) + (0 CONCAT g_40ab18) * 0 + (0 CONCAT g_40ab10) * (0 CONCAT 13836206207155685140) + (0 CONCAT g_40ab08) * 0 + v17);\n
    v3 = g_40ab30;\n
    v2 = 0x40679544e06f4100;\n
    cgc_receive_sample.xv_env1200 = g_40ab48;\n
    g_40ab48 = g_40ab50;\n
    g_40ab50 = g_40ab58;\n
    tmp_102 = DivV(tmp_104, tmp_103);\n
    *(&g_40ab58) = tmp_102;\n
    cgc_receive_sample.yv_env1200 = g_40ab68;\n
    g_40ab68 = g_40ab70;\n
    g_40ab70 = g_40ab78;\n
    g_40ab78 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=0x40ab70<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0x4001c0db79ff4399<64>)) + (((0x0<64> CONCAT Load(addr=0x40ab68<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0xbffb711f64ca2f0e<64>)) + (((0x0<64> CONCAT Load(addr=0x40ab60<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0x3fdd06e585cbf46f<64>)) + ((((0x0<64> CONCAT Load(addr=0x40ab48<64>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=0x40ab50<64>, size=8, endness=Iend_LE))) * (0x0<64> CONCAT 0x4008000000000000<64>)) + ((0x0<64> CONCAT Load(addr=0x40ab40<64>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=0x40ab58<64>, size=8, endness=Iend_LE))))))))<8>\n
    v1 = g_40ab78;\n
    cgc_receive_sample.xv_env2400 = g_40ab88;\n
    g_40ab88 = g_40ab90;\n
    g_40ab90 = g_40ab98;\n
    tmp_45 = DivV(tmp_47, tmp_46);\n
    v19 = tmp_45;\n
    g_40ab98 = v19;\n
    cgc_receive_sample.yv_env2400 = g_40aba8;\n
    g_40aba8 = g_40abb0;\n
    g_40abb0 = g_40abb8;\n
    g_40abb8 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=0x40abb0<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0x4001c0db79ff4399<64>)) + (((0x0<64> CONCAT Load(addr=0x40aba8<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0xbffb711f64ca2f0e<64>)) + (((0x0<64> CONCAT Load(addr=0x40aba0<64>, size=8, endness=Iend_LE)) * (0x0<64> CONCAT 0x3fdd06e585cbf46f<64>)) + ((((0x0<64> CONCAT Load(addr=0x40ab88<64>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=0x40ab90<64>, size=8, endness=Iend_LE))) * (0x0<64> CONCAT 0x4008000000000000<64>)) + ((0x0<64> CONCAT Load(addr=0x40ab80<64>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=0x40ab98<64>, size=8, endness=Iend_LE))))))))<8>\n
    v0 = g_40abb8;\n
    *(&v19) = v0;\n
    if ((((CmpF(v19, v1) & 69) | ((CmpF(v19, v1) & 69) >> 6)) & 1) != 1)\n
    {\n
        v8 = 1;\n
        return v8;\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4224481:sub_4075e1": null, "4224496:cgc_init_prng": "long long cgc_init_prng(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
\n
    if (!cgc_random(a0, a1, a2))\n
        return cgc_seed_prng_array(&v0, 8);\n
    cgc_printf(\"[[ERROR RANDOM FAILED]]\\n
\", a1, a2, a3, a4);\n
    cgc__terminate(\"[[ERROR RANDOM FAILED]]\\n
\");\n
    return cgc_seed_prng_array(&v0, 8);\n
}\n
", "4224575:sub_40763f": null, "4224576:main": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x265]\n
    unsigned int v1;  // [bp-0x264]\n
    char v2;  // [bp-0x260]\n
    char v3;  // [bp-0x258]\n
    unsigned int v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x154]\n
    char v6;  // [bp-0x150]\n
    unsigned int v7[4];  // [bp-0x20]\n
    unsigned long v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned int v12[4];  // rcx\n
\n
    v10 = 0;\n
    v9 = a0;\n
    v8 = a1;\n
    v9 = 0x4347c000;\n
    *(&v7[0]) = v9;\n
    v12 = v7;\n
    v5 = v7[0] + v7[1] + v7[2] + v12[3];\n
    v5 &= 524287;\n
    v5 += 1452975630;\n
    cgc_printf(\"[[RECEIVER STARTED -- TIMESTAMP: $d]]\\n
\", v5, a2, v12, a4);\n
    cgc_init_prng(\"[[RECEIVER STARTED -- TIMESTAMP: $d]]\\n
\", a1, a2, v12[0], a4);\n
    cgc_init_baseband(&v6);\n
    cgc_init_packet_handler();\n
    v4 = 0;\n
    while (v4 < 0x9600)\n
    {\n
        if (cgc_receive(a0, a1, a2, v12))\n
        {\n
            cgc_printf(\"[[CONNECTION CLOSED EARLY]]\\n
\", a1, a2, v12, a4);\n
            cgc__terminate(\"[[CONNECTION CLOSED EARLY]]\\n
\");\n
        }\n
        if (*(&v2) < 1)\n
        {\n
            cgc_printf(\"[[RECEIVE ERROR]]\\n
\", a1, a2, v12, a4);\n
            cgc__terminate(\"[[RECEIVE ERROR]]\\n
\");\n
        }\n
        for (v1 = 0; v1 < *(&v2); v1 += 1)\n
        {\n
            if (v4 >= 0x9600)\n
                break;\n
            v0 = cgc_receive_sample((&v3)[v1]);\n
            a1 = v0;\n
            cgc_process_sample(&v6, a1);\n
            v4 += 1;\n
        }\n
    }\n
    cgc_display_packets(a0, a1, a2, v12, a4);\n
    cgc_destroy_packet_handler();\n
    return 0;\n
}\n
", "4225004:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_random": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_log": null, "5242944:cgc_log10": null, "5242952:cgc_sqrt": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}