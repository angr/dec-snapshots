{"4202496:_init": "extern struct_0 *g_40b430;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40b430;\n
    if (g_40b430)\n
        v1 = g_40b430();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40b450;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40b450;\n
    goto *(4240472);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4240448);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40b428;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_40b438;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40b440;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40b440)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203810:sub_402522": null, "4203824:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204019:sub_4025f3": null, "4204032:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 **, unsigned long, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204572:sub_40281c": null, "4204576:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204724:sub_4028b4": null, "4204736:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204860:sub_40293c": null, "4204864:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204992:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205054:sub_4029fe": null, "4205056:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205503:sub_402bbf": null, "4205504:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402ec1;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402ec1:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4206289:sub_402ed1": null, "4206304:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_0 **v2;  // [bp-0x150]\n
    struct_1 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned int *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    struct struct_0 **v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_3 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_3 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    struct struct_0 **v43;  // rax\n
    struct_1 *v44;  // rcx\n
    struct struct_0 **v45;  // rdx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_4038e6:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 <= 40)\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                else\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[1];\n
                    v18 = v45;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    cgc_putc(v27->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    cgc_putc(*(v23));\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_4038e6;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403783;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403783:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4208893:sub_4038fd": null, "4208896:cgc_vsprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_1 **v2;  // [bp-0x160]\n
    struct_2 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_0 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_0 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_2 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_2 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v45;  // rcx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_2 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_4043eb:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    a0[v37] = v27->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 <= 40)\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                else\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_4043eb;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_404257;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_404257:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        a0[v37] = 32;\n
                    else\n
                        a0[v37] = 48;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4211714:sub_404402": null, "4211728:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4211903:sub_4044bf": null, "4211904:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4212068:sub_404564": null, "4212080:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4212163:sub_4045c3": null, "4212176:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212227:sub_404603": null, "4212240:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212291:sub_404643": null, "4212304:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4212347:sub_40467b": null, "4212352:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4212395:sub_4046ab": null, "4212400:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212451:sub_4046e3": null, "4212464:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4212555:sub_40474b": null, "4212560:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4212588:sub_40476c": null, "4212592:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4212644:sub_4047a4": null, "4212656:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_404999;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_404999;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_404999;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_404909:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_404999;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_404909;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_404999:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4213213:sub_4049dd": null, "4213216:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4213608:sub_404b68": null, "4213616:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4213719:sub_404bd7": null, "4213728:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4213901:sub_404c8d": null, "4213904:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4214022:sub_404d06": null, "4214032:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 -= 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4214120:sub_404d68": null, "4214128:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4214246:sub_404de6": null, "4214256:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4214465:sub_404ec1": null, "4214480:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4214563:sub_404f23": null, "4214576:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
\n
    while (true)\n
    {\n
        cgc_bzero(&v3, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 128, v7, v8, v9);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 128, v7, v8);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4214845:sub_40503d": null, "4214848:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4214942:sub_40509e": null, "4214944:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; v2 < a2; v2 += 1)\n
    {\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v0 == a1)\n
                break;\n
            *((a0 + v2)) = v0;\n
        }\n
    }\n
    if (v2 == a2)\n
        cgc_flush_input(0);\n
    return v2;\n
}\n
", "4215142:sub_405166": null, "4215152:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v1 = a1 - v2;\n
    while (true)\n
    {\n
        if (v1)\n
        {\n
            if (cgc_receive(a0, a1, v6, v7))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            v1 -= v0;\n
            v2 = v0 + v2;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215312:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4215474:sub_4052b2": null, "4215488:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4215720:sub_4053a8": null, "4215728:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4215810:sub_405402": null, "4215824:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4215940:sub_405484": null, "4215952:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4216662:sub_405756": null, "4216672:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4216755:sub_4057b3": null, "4216768:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4216917:sub_405855": null, "4216928:cgc_datetime2time_t": "long long cgc_datetime2time_t(unsigned int a0[7])\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (a0[2] < 1970)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 1970; v1 < a0[2]; v1 += 1)\n
    {\n
        v0 = cgc_leap_year(v1) + 365 + v0;\n
    }\n
    v0 = a0[6] - 1 + v0;\n
    v0 *= 86400;\n
    v0 = a0[3] * 3600 + v0;\n
    v0 = a0[4] * 60 + v0;\n
    v0 = a0[5] + v0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4217142:sub_405936": null, "4217152:cgc_leap_year": "long long cgc_leap_year(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if ((0 CONCAT a0) /m 400 >> 32 && !(0 CONCAT a0) /m 100 >> 32)\n
        goto LABEL_40598c;\n
    if (!(a0 & 3))\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
LABEL_40598c:\n
    v0 = 0;\n
    return v0;\n
}\n
", "4217240:sub_405998": null, "4217248:cgc_time_t2datetime": "extern void g_409070;\n
\n
long long cgc_time_t2datetime(unsigned long a0, unsigned int a1[7])\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x74]\n
    unsigned int v2;  // [bp-0x70]\n
    unsigned int v3;  // [bp-0x6c]\n
    char v4;  // [bp-0x68]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
\n
    memcpy(&v4, &g_409070, 52);\n
    v9 = (0 CONCAT a0) /m 86400 >> 64;\n
    a1[5] = (0 CONCAT v9) /m 60 >> 32;\n
    a1[4] = (0 CONCAT (0 CONCAT v9) /m 60) /m 60 >> 32;\n
    a1[3] = (0 CONCAT v9) /m 3600;\n
    v8 = (0 CONCAT a0) /m 86400;\n
    v7 = 0;\n
    for (v5 = 1970; v7 <= v8; v5 += 1)\n
    {\n
        v7 = cgc_leap_year(v5) + 365 + v7;\n
    }\n
    a1[2] = v5 - 1;\n
    v7 -= cgc_leap_year(a1[2]) + 365;\n
    v6 = v8 - v7 + 1;\n
    a1[6] = v6;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v3 = *(&(&v4)[4 * v5]);\n
        v2 = 1 < v5;\n
        if (v3 + cgc_leap_year(a1[2]) * v2 >= v6)\n
            break;\n
        v5 += 1;\n
    }\n
    a1[0] = v5;\n
    v0 = v6 - *(&(&v4)[4 + 4 * a1[0]]);\n
    v1 = 2 < a1[0];\n
    a1[1] = v0 - cgc_leap_year(a1[2]) * v1;\n
    return 0;\n
}\n
", "4217685:sub_405b55": null, "4217696:cgc_str2datetime": "extern void g_4090b0;\n
\n
long long cgc_str2datetime(char *a0, unsigned int a1[7])\n
{\n
    char v0;  // [bp-0x7a]\n
    char v1;  // [bp-0x79]\n
    unsigned int v2;  // [bp-0x78]\n
    char v3;  // [bp-0x72]\n
    char v4;  // [bp-0x71]\n
    char *v5;  // [bp-0x70], Other Possible Types: unsigned long\n
    char v6;  // [bp-0x68]\n
    unsigned int v7;  // [bp-0x38]\n
    unsigned int v8;  // [bp-0x34]\n
    unsigned int v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x2c]\n
    unsigned int v11;  // [bp-0x28]\n
    unsigned int v12;  // [bp-0x24]\n
    char *v13;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v14;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v16;  // rcx\n
\n
    v13 = a0;\n
    memcpy(&v6, &g_4090b0, 48);\n
    for (; cgc_isspace(*(v13)); v13 += 1);\n
    v5 = v13;\n
    v12 = cgc_atoi(v5);\n
    if (v12 >= 1 && v12 <= 12)\n
    {\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v5) != 47)\n
                v4 = *(v5);\n
            if (!(v4 & 1))\n
                break;\n
            v5 += 1;\n
        }\n
        v5 += 1;\n
        v11 = cgc_atoi(v5);\n
        if (v11 < 1)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
        if (v12 != 1 && v12 != 3 && v12 != 5 && v12 != 7 && v12 != 8 && v12 != 10 && !(v12 == 12))\n
            goto LABEL_405cba;\n
        if (v11 > 31)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
LABEL_405cba:\n
        if (v12 != 4 && v12 != 6 && v12 != 9 && !(v12 == 11))\n
            goto LABEL_405cf9;\n
        if (v11 > 30)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
LABEL_405cf9:\n
        while (true)\n
        {\n
            v3 = 0;\n
            if (*(v5) != 47)\n
                v3 = *(v5);\n
            if (!(v3 & 1))\n
                break;\n
            v5 += 1;\n
        }\n
        v5 += 1;\n
        v10 = cgc_atoi(v5);\n
        if (v10 >= 1970 && v10 <= 2050)\n
        {\n
            if (v12 == 2)\n
            {\n
                v2 = v11;\n
                if (v2 > cgc_leap_year(v10) + 28)\n
                {\n
                    v14 = -2;\n
                    return v14;\n
                }\n
            }\n
            a1[2] = v10;\n
            a1[1] = v11;\n
            for (a1[0] = v12; ((cgc_isspace(*(v5)) ^ 255) & 1); v5 += 1);\n
            for (; cgc_isspace(*(v5)); v5 += 1);\n
            v9 = cgc_atoi(v5);\n
            while (true)\n
            {\n
                v1 = 0;\n
                if (*(v5) != 58)\n
                    v1 = *(v5);\n
                if (!(v1 & 1))\n
                    break;\n
                v5 += 1;\n
            }\n
            v5 += 1;\n
            v8 = cgc_atoi(v5);\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v5) != 58)\n
                    v0 = *(v5);\n
                if (!(v0 & 1))\n
                    break;\n
                v5 += 1;\n
            }\n
            v5 += 1;\n
            v7 = cgc_atoi(v5);\n
            a1[3] = v9;\n
            a1[4] = v8;\n
            v16 = v7;\n
            a1[5] = v16;\n
            a1[6] = cgc_doy(a1[2], a1[0], a1[1], v16);\n
            v14 = cgc_datetime2time_t(a1);\n
            return v14;\n
        }\n
        v14 = -2;\n
        return v14;\n
    }\n
    v14 = -2;\n
    return v14;\n
}\n
", "4218708:sub_405f54": null, "4218720:cgc_doy": "extern void g_4090e0;\n
\n
long long cgc_doy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x18]\n
\n
    memcpy(&v0, &g_4090e0, 48);\n
    v1 = *(&(&v0)[4 + 4 * a1]) + a2;\n
    if (a1 > 2)\n
    {\n
        v1 = cgc_leap_year(a0) + v1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4218809:sub_405fb9": null, "4218816:cgc_print_time_t": "long long cgc_print_time_t(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1[7];  // [bp-0x30]\n
    char v2;  // [bp-0x2c]\n
    char v3;  // [bp-0x28]\n
    char v4;  // [bp-0x24]\n
    char v5;  // [bp-0x1c]\n
\n
    cgc_time_t2datetime(a0, v1);\n
    v0 = *(&v5);\n
    return cgc_printf(\"@d/@d/@d @02d:@02d:@02d\", v1[0], *(&v2), *(&v3), *(&v4));\n
}\n
", "4218884:sub_406004": null, "4218896:cgc_print_datetime": "long long cgc_print_datetime(unsigned int a0[6])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = a0[5];\n
    return cgc_printf(\"@d/@d/@d @02d:@02d:@02d\", a0[0], a0[1], a0[2], a0[3]);\n
}\n
", "4218974:sub_40605e": null, "4218976:cgc_to_date_str": "long long cgc_to_date_str(unsigned int a0[3], char *a1)\n
{\n
    cgc_sprintf(a1, \"@d/@d/@d\", a0[0], a0[1], a0[2]);\n
    return 0;\n
}\n
", "4219039:sub_40609f": null, "4219040:cgc_to_time_str": "long long cgc_to_time_str(unsigned int a0[6], char *a1)\n
{\n
    cgc_sprintf(a1, \"@02d:@02d:@02d\", a0[3], a0[4], a0[5]);\n
    return 0;\n
}\n
", "4219104:cgc_diff_between_dates": "long long cgc_diff_between_dates(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v0 = a1;\n
    return 0;\n
}\n
", "4219120:cgc_dive_statistics": "typedef struct struct_1 {\n
    char padding_0[160];\n
    struct struct_0 *field_a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[56];\n
    unsigned int field_38;\n
    char padding_3c[4];\n
    unsigned int field_40;\n
    char padding_44[68];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
long long cgc_dive_statistics(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x438], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x430]\n
    unsigned int v2;  // [bp-0x42c]\n
    unsigned int v3;  // [bp-0x428]\n
    unsigned int v4;  // [bp-0x424]\n
    unsigned int v5;  // [bp-0x420]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // rax\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // rax\n
\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    if (!a0->field_a0)\n
    {\n
        cgc_printf(\"No dives are logged\\n
\", a1, a2, a3, a4);\n
        v6 = -1;\n
        return v6;\n
    }\n
    for (v0 = a0->field_a0; v0; v0 = v0->field_88)\n
    {\n
        v5 += 1;\n
        if (v0->field_38 > 0)\n
        {\n
            v4 = v0->field_38 + v4;\n
            v3 += 1;\n
        }\n
        if (v0->field_40 > 0)\n
        {\n
            v2 = v0->field_40 + v2;\n
            v1 += 1;\n
        }\n
    }\n
    cgc_printf(\"Dives logged: @d\\n
\", v5, a2, a3, a4);\n
    if (v3 <= 0)\n
    {\n
        cgc_printf(\"Average Max Depth: 0\\n
\", a1, a2, a3, a4);\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        v9 = (v8 >> 31 CONCAT v8) /m v3;\n
        cgc_printf(\"Average Max Depth: @d\\n
\", v9, v9 / 0x100000000, a3, a4);\n
    }\n
    if (v1 <= 0)\n
    {\n
        cgc_printf(\"Average Dive Length: 0\\n
\", a1, a2, a3, a4);\n
    }\n
    else\n
    {\n
        v10 = v2;\n
        v11 = (v10 >> 31 CONCAT v10) /m v1;\n
        cgc_printf(\"Average Dive Length: @d\\n
\", v11, v11 / 0x100000000, a3, a4);\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4219585:sub_4062c1": null, "4219600:cgc_download_dive": "long long cgc_download_dive(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x8a0]\n
    unsigned int v1;  // [bp-0x89c]\n
    unsigned long v2;  // [bp-0x898]\n
    unsigned long v3;  // [bp-0x890]\n
    unsigned int v4;  // [bp-0x884]\n
    unsigned int v5;  // [bp-0x880]\n
    unsigned int v6;  // [bp-0x87c]\n
    char v7;  // [bp-0x878]\n
    unsigned long v8;  // [bp-0x858]\n
    char v9;  // [bp-0x84c]\n
    char v10;  // [bp-0x848]\n
    char v11;  // [bp-0x840]\n
    unsigned int v12;  // [bp-0x834]\n
    unsigned long v13;  // [bp-0x830]\n
    char v14;  // [bp-0x828]\n
    char v15;  // [bp-0x428]\n
    unsigned long v16;  // [bp-0x20]\n
    unsigned int v17;  // [bp-0xc]\n
    unsigned long v19;  // rax\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rax\n
    unsigned int v22;  // eax\n
    unsigned long v23;  // rax\n
    unsigned long v24;  // rcx\n
\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v12 = cgc_receive_bytes(&v10, 8);\n
    if (v12 < 0)\n
    {\n
        cgc_printf(\"received error code \\n
\", 8, a2, a3, a4);\n
        v17 = -1;\n
        return v17;\n
    }\n
    v12 = cgc_receive_bytes(&v9, 4);\n
    if (v12 < 0)\n
    {\n
        cgc_printf(\"received error code or zero sample \\n
\", 4, a2, a3, a4);\n
        v17 = -1;\n
        return v17;\n
    }\n
    if (!*((a0 + 160)))\n
    {\n
        *((a0 + 160)) = cgc_calloc(1, 144);\n
        if (!*((a0 + 160)))\n
            cgc__terminate(1);\n
        v16 = *((a0 + 160));\n
    }\n
    else\n
    {\n
        for (v16 = *((a0 + 160)); *((v16 + 136)); v16 = *((v16 + 136)));\n
        *((v16 + 136)) = cgc_calloc(1, 144);\n
        if (!*((v16 + 136)))\n
            cgc__terminate(1);\n
        v16 = *((v16 + 136));\n
    }\n
    *((v16 + 128)) = cgc_calloc(1, 24);\n
    if (!*((v16 + 128)))\n
        cgc__terminate(1);\n
    v8 = *((v16 + 128));\n
    *(v8) = *(&v10);\n
    *((v8 + 8)) = *(&v9);\n
    cgc_time_t2datetime(*(&v10), &v7);\n
    while (true)\n
    {\n
        v12 = cgc_receive_bytes(&v11, 8);\n
        if (v12 < 0)\n
        {\n
            cgc_printf(\"received error code or zero timestamp \\n
\", 8, a2, a3, a4);\n
            v17 = -1;\n
            return v17;\n
        }\n
        if (!*(&v11))\n
            break;\n
        v12 = cgc_receive_bytes(&v9, 4);\n
        if (v12 < 0)\n
        {\n
            cgc_printf(\"received error code or zero sample \\n
\", 4, a2, a3, a4);\n
            v17 = -1;\n
            return v17;\n
        }\n
        *((v8 + 16)) = cgc_calloc(1, 24);\n
        if (!*((v8 + 16)))\n
            cgc__terminate(1);\n
        v8 = *((v8 + 16));\n
        *(v8) = *(&v11);\n
        *((v8 + 8)) = *(&v9);\n
    }\n
    *((v8 + 16)) = 0;\n
    v3 = *(v8) - *(&v10);\n
    *((v16 + 48)) = *(&v10);\n
    cgc_to_date_str(&v7, v16 + 26);\n
    cgc_to_time_str(&v7, v16 + 37);\n
    *((v16 + 64)) = (0 CONCAT v3) /m 60;\n
    v2 = cgc_calloc(*((v16 + 64)) + 1, 4);\n
    if (!v2)\n
        cgc__terminate(a0);\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    for (v8 = *((v16 + 128)); v8; v8 = *((v8 + 16)))\n
    {\n
        if (*((v8 + 8)) > v6)\n
            v6 = *((v8 + 8));\n
        v5 = *((v8 + 8)) + v5;\n
        v4 += 1;\n
        v1 = (0 CONCAT *(v8) - *(&v10)) /m 60;\n
        if (v1 >= 0 && v1 < *((v16 + 64)) + 1)\n
        {\n
            v19 = v2;\n
            v20 = v1;\n
            *((v19 + v20 * 4)) = *((v19 + v20 * 4)) + 1;\n
        }\n
    }\n
    *((v16 + 92)) = 0;\n
    for (v0 = 0; v0 < *((v16 + 64)) + 1; v0 += 1)\n
    {\n
        v21 = v16;\n
        *((v21 + 92)) = *((v2 + v0 * 4)) + *((v21 + 92));\n
    }\n
    cgc_free(v2);\n
    v24 = v6;\n
    *((v16 + 56)) = v24;\n
    if (v4 <= 0)\n
    {\n
        *((v16 + 60)) = 0;\n
    }\n
    else\n
    {\n
        v22 = v5;\n
        v23 = (v22 >> 31 CONCAT v22) /m v4;\n
        a2 = v23 / 0x100000000;\n
        v24 = v23;\n
        *((v16 + 60)) = v23;\n
    }\n
    cgc_printf(\"Dive Site\", 4, a2, v24, a4);\n
    if (*(v16))\n
        cgc_printf(\" (@s)\", v16, a2, v24, a4);\n
    cgc_printf(\": \", a1, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 26);\n
    if (v13 > 0)\n
    {\n
        a2 = 26;\n
        cgc_strncpy(v16, &v15, 26);\n
    }\n
    cgc_printf(\"Date\", 26, a2, v24, a4);\n
    if (*((v16 + 26)))\n
        cgc_printf(\" (@s)\", v16 + 26, a2, v24, a4);\n
    cgc_printf(\": \", 26, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 11);\n
    if (v13 > 0)\n
    {\n
        a2 = v13;\n
        cgc_strncpy(v16 + 26, &v15, a2);\n
    }\n
    cgc_printf(\"Time\", 11, a2, v24, a4);\n
    if (*((v16 + 37)))\n
        cgc_printf(\" (@s)\", v16 + 37, a2, v24, a4);\n
    cgc_printf(\": \", 11, a2, v24, a4);\n
    v13 = cgc_getline(&v14, 9);\n
    if (v13 > 0)\n
    {\n
        a2 = v13;\n
        cgc_strncpy(v16 + 37, &v14, a2);\n
    }\n
    cgc_printf(\"Location (area/city)\", 9, a2, v24, a4);\n
    if (*((v16 + 96)))\n
        cgc_printf(\" (@s)\", v16 + 96, a2, v24, a4);\n
    cgc_printf(\": \", 9, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 26);\n
    if (v13 > 0)\n
    {\n
        a2 = v13;\n
        cgc_strncpy(v16 + 96, &v15, a2);\n
    }\n
    cgc_printf(\"Max Depth in ft\", 26, a2, v24, a4);\n
    if (*((v16 + 56)))\n
        cgc_printf(\" (@d)\", *((v16 + 56)), a2, v24, a4);\n
    cgc_printf(\": \", 26, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 0x400);\n
    if (v13 > 0)\n
    {\n
        v24 = cgc_atoi(&v15);\n
        *((v16 + 56)) = v24;\n
    }\n
    cgc_printf(\"Avg Depth in ft\", 0x400, a2, v24, a4);\n
    if (*((v16 + 60)))\n
        cgc_printf(\" (@d)\", *((v16 + 60)), a2, v24, a4);\n
    cgc_printf(\": \", 0x400, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 0x400);\n
    if (v13 > 0)\n
    {\n
        v24 = cgc_atoi(&v15);\n
        *((v16 + 60)) = v24;\n
    }\n
    cgc_printf(\"Dive Duration (mins)\", 0x400, a2, v24, a4);\n
    if (*((v16 + 64)))\n
        cgc_printf(\" (@d)\", *((v16 + 64)), a2, v24, a4);\n
    cgc_printf(\": \", 0x400, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 13);\n
    if (v13 > 0)\n
    {\n
        v24 = cgc_atoi(&v15);\n
        *((v16 + 64)) = v24;\n
    }\n
    cgc_printf(\"O2 Percentage\", 13, a2, v24, a4);\n
    if (*((v16 + 76)))\n
        cgc_printf(\" (@d)\", *((v16 + 76)), a2, v24, a4);\n
    cgc_printf(\": \", 13, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 11);\n
    if (v13 > 0)\n
    {\n
        v24 = cgc_atoi(&v15);\n
        *((v16 + 76)) = v24;\n
    }\n
    cgc_printf(\"Pressure In (psi)\", 11, a2, v24, a4);\n
    if (*((v16 + 68)))\n
        cgc_printf(\" (@d)\", *((v16 + 68)), a2, v24, a4);\n
    cgc_printf(\": \", 11, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 20);\n
    if (v13 > 0)\n
    {\n
        v24 = cgc_atoi(&v15);\n
        *((v16 + 68)) = v24;\n
    }\n
    cgc_printf(\"Pressure Out (psi)\", 20, a2, v24, a4);\n
    if (*((v16 + 72)))\n
        cgc_printf(\" (@d)\", *((v16 + 72)), a2, v24, a4);\n
    cgc_printf(\": \", 20, a2, v24, a4);\n
    v13 = cgc_getline(&v15, 11);\n
    if (v13 > 0)\n
        *((v16 + 72)) = cgc_atoi(&v15);\n
    *((v16 + 136)) = 0;\n
    v17 = 0;\n
    return v17;\n
}\n
", "4222251:sub_406d2b": null, "4222256:cgc_edit_diver": "long long cgc_edit_diver(char a0[143], unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x420]\n
    char v1;  // [bp-0x418]\n
\n
    cgc_printf(\"First Name\", a1, a2, a3, a4);\n
    if (a0[21])\n
        cgc_printf(\" (@s)\", &a0[21], a2, a3, a4);\n
    cgc_printf(\": \", a1, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 21);\n
    if (v0 > 0)\n
    {\n
        a2 = 21;\n
        cgc_strncpy(&a0[21], &v1, 21);\n
    }\n
    cgc_printf(\"Last Name\", 21, 21, a3, a4);\n
    if (a0[0])\n
        cgc_printf(\" (@s)\", a0, 21, a3, a4);\n
    cgc_printf(\": \", 21, 21, a3, a4);\n
    v0 = cgc_getline(&v1, 21);\n
    if (v0 > 0)\n
    {\n
        a2 = 21;\n
        cgc_strncpy(a0, &v1, 21);\n
    }\n
    cgc_printf(\"Street\", 21, a2, a3, a4);\n
    if (a0[58])\n
        cgc_printf(\" (@s)\", &a0[58], a2, a3, a4);\n
    cgc_printf(\": \", 21, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 30);\n
    if (v0 > 0)\n
    {\n
        a2 = 30;\n
        cgc_strncpy(&a0[58], &v1, 30);\n
    }\n
    cgc_printf(\"City\", 30, a2, a3, a4);\n
    if (a0[88])\n
        cgc_printf(\" (@s)\", &a0[88], a2, a3, a4);\n
    cgc_printf(\": \", 30, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 20);\n
    if (v0 > 0)\n
    {\n
        a2 = 20;\n
        cgc_strncpy(&a0[88], &v1, 20);\n
    }\n
    cgc_printf(\"State\", 20, a2, a3, a4);\n
    if (a0[108])\n
        cgc_printf(\" (@s)\", &a0[108], a2, a3, a4);\n
    cgc_printf(\": \", 20, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 3);\n
    if (v0 > 0)\n
    {\n
        a2 = 3;\n
        cgc_strncpy(&a0[108], &v1, 3);\n
    }\n
    cgc_printf(\"Zip Code\", 3, a2, a3, a4);\n
    if (a0[111])\n
        cgc_printf(\" (@s)\", &a0[111], a2, a3, a4);\n
    cgc_printf(\": \", 3, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 11);\n
    if (v0 > 0)\n
    {\n
        a2 = 11;\n
        cgc_strncpy(&a0[111], &v1, 11);\n
    }\n
    cgc_printf(\"Phone Number\", 11, a2, a3, a4);\n
    if (a0[42])\n
        cgc_printf(\" (@s)\", &a0[42], a2, a3, a4);\n
    cgc_printf(\": \", 11, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 16);\n
    if (v0 > 0)\n
    {\n
        a2 = 16;\n
        cgc_strncpy(&a0[42], &v1, 16);\n
    }\n
    cgc_printf(\"PADI Diver Number\", 16, a2, a3, a4);\n
    if (a0[122])\n
        cgc_printf(\" (@s)\", &a0[122], a2, a3, a4);\n
    cgc_printf(\": \", 16, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 20);\n
    if (v0 > 0)\n
    {\n
        a2 = 20;\n
        cgc_strncpy(&a0[122], &v1, 20);\n
    }\n
    cgc_printf(\"PADI Cert Date\", 20, a2, a3, a4);\n
    if (a0[142])\n
        cgc_printf(\" (@s)\", &a0[142], a2, a3, a4);\n
    cgc_printf(\": \", 20, a2, a3, a4);\n
    v0 = cgc_getline(&v1, 11);\n
    if (v0 > 0)\n
        cgc_strncpy(&a0[142], &v1, 11);\n
    cgc_print_diver_info(a0);\n
    return 0;\n
}\n
", "4223461:sub_4071e5": null, "4223472:cgc_print_diver_info": "long long cgc_print_diver_info(unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"     Name: @s @s\\n
\", a0 + 21, a0, a3, a4);\n
    cgc_printf(\"  Address: @s\\n
\", a0 + 58, a2, a3, a4);\n
    cgc_printf(\"     City: @s\\n
\", a0 + 88, a2, a3, a4);\n
    cgc_printf(\"    State: @s\\n
\", a0 + 108, a2, a3, a4);\n
    cgc_printf(\" Zip Code: @s\\n
\", a0 + 111, a2, a3, a4);\n
    cgc_printf(\"    Phone: @s\\n
\", a0 + 42, a2, a3, a4);\n
    cgc_printf(\" PADI Num: @s\\n
\", a0 + 122, a2, a3, a4);\n
    cgc_printf(\"Cert Date: @s\\n
\", a0 + 142, a2, a3, a4);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    return 0;\n
}\n
", "4223703:sub_4072d7": null, "4223712:cgc_edit_dives": "typedef struct struct_1 {\n
    char padding_0[160];\n
    struct struct_0 *field_a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[136];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
long long cgc_edit_dives(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x431]\n
    unsigned int v1;  // [bp-0x430]\n
    unsigned int v2;  // [bp-0x42c]\n
    struct_0 *v3;  // [bp-0x428], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x41c]\n
    char v5;  // [bp-0x418]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // rcx\n
\n
    v3 = a0->field_a0;\n
    v2 = 1;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v6 = 0;\n
        return v6;\n
    }\n
    cgc_list_dives(a0);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Enter Dive # to edit: \", a1, a2, a3, a4);\n
    v4 = cgc_getline(&v5, 0x400);\n
    if (!v4)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v1 = cgc_atoi(&v5);\n
    v3 = a0->field_a0;\n
    v2 = 1;\n
    while (true)\n
    {\n
        v8 = v2;\n
        v0 = 0;\n
        if (v8 < v1)\n
            v0 = v3;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v3 = *((v3 + 136));\n
    }\n
    if (v2 == v1 && v3)\n
    {\n
        cgc_printf(\"Editing dive number @d\\n
\", v1, a2, v8, a4);\n
        cgc_update_dive(v3);\n
        goto LABEL_407488;\n
    }\n
    cgc_printf(\"Invalid dive number entered\\n
\", 0x400, a2, v8, a4);\n
LABEL_407488:\n
    v6 = 0;\n
    return v6;\n
}\n
", "4224155:sub_40749b": null, "4224160:cgc_update_dive": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[25];\n
    char field_1a;\n
    char padding_1b[10];\n
    char field_25;\n
    char padding_26[10];\n
    unsigned long long field_30;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    char padding_50[16];\n
    char field_60;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_update_dive(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x850]\n
    struct_0 *v1;  // [bp-0x848]\n
    unsigned int v2[7];  // [bp-0x840]\n
    unsigned long v3;  // [bp-0x820]\n
    char v4;  // [bp-0x818]\n
    char v5;  // [bp-0x418]\n
    unsigned long v7;  // rax\n
\n
    cgc_printf(\"Dive Site\", a1, a2, a3, a4);\n
    if (a0->field_0)\n
        cgc_printf(\" (@s)\", a0, a2, a3, a4);\n
    cgc_printf(\": \", a1, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 26);\n
    if (v3 > 0)\n
    {\n
        a2 = 26;\n
        cgc_strncpy(a0, &v5, 26);\n
    }\n
    cgc_printf(\"Date\", 26, 26, a3, a4);\n
    if (a0->field_1a)\n
        cgc_printf(\" (@s)\", &a0->field_1a, 26, a3, a4);\n
    cgc_printf(\": \", 26, 26, a3, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
    {\n
        a2 = 11;\n
        cgc_strncpy(&a0->field_1a, &v5, 11);\n
    }\n
    cgc_printf(\"Time\", 11, a2, a3, a4);\n
    if (a0->field_25)\n
        cgc_printf(\" (@s)\", &a0->field_25, a2, a3, a4);\n
    cgc_printf(\": \", 11, a2, a3, a4);\n
    v3 = cgc_getline(&v4, 9);\n
    if (v3 > 0)\n
        cgc_strncpy(&a0->field_25, &v4, 9);\n
    cgc_strncat(&v5, \" \", 1);\n
    v0 = &v5;\n
    v1 = &v4;\n
    cgc_strncat(v0, v1, cgc_strlen(&v4));\n
    v7 = cgc_str2datetime(&v5, v2);\n
    a0->field_30 = v7;\n
    cgc_printf(\"Location (area/city)\", 11, a2, v7, a4);\n
    if (a0->field_60)\n
        cgc_printf(\" (@s)\", &a0->field_60, a2, v7, a4);\n
    cgc_printf(\": \", 11, a2, v7, a4);\n
    v3 = cgc_getline(&v5, 26);\n
    if (v3 > 0)\n
    {\n
        a2 = v3;\n
        cgc_strncpy(&a0->field_60, &v5, a2);\n
    }\n
    cgc_printf(\"Max Depth in ft\", 26, a2, a3, a4);\n
    if (a0->field_38)\n
        cgc_printf(\" (@d)\", a0->field_38, a2, a3, a4);\n
    cgc_printf(\": \", 26, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 0x400);\n
    if (v3 > 0)\n
    {\n
        a3 = cgc_atoi(&v5);\n
        a0->field_38 = a3;\n
    }\n
    cgc_printf(\"Avg Depth in ft\", 0x400, a2, a3, a4);\n
    if (a0->field_3c)\n
        cgc_printf(\" (@d)\", a0->field_3c, a2, a3, a4);\n
    cgc_printf(\": \", 0x400, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 0x400);\n
    if (v3 > 0)\n
    {\n
        a3 = cgc_atoi(&v5);\n
        a0->field_3c = a3;\n
    }\n
    cgc_printf(\"Dive Duration (mins)\", 0x400, a2, a3, a4);\n
    if (a0->field_40)\n
        cgc_printf(\" (@d)\", a0->field_40, a2, a3, a4);\n
    cgc_printf(\": \", 0x400, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 13);\n
    if (v3 > 0)\n
    {\n
        a3 = cgc_atoi(&v5);\n
        a0->field_40 = a3;\n
    }\n
    cgc_printf(\"O2 Percentage\", 13, a2, a3, a4);\n
    if (a0->field_4c)\n
        cgc_printf(\" (@d)\", a0->field_4c, a2, a3, a4);\n
    cgc_printf(\": \", 13, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
    {\n
        a3 = cgc_atoi(&v5);\n
        a0->field_4c = a3;\n
    }\n
    cgc_printf(\"Pressure In (psi)\", 11, a2, a3, a4);\n
    if (a0->field_44)\n
        cgc_printf(\" (@d)\", a0->field_44, a2, a3, a4);\n
    cgc_printf(\": \", 11, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 20);\n
    if (v3 > 0)\n
    {\n
        a3 = cgc_atoi(&v5);\n
        a0->field_44 = a3;\n
    }\n
    cgc_printf(\"Pressure Out (psi)\", 20, a2, a3, a4);\n
    if (a0->field_48)\n
        cgc_printf(\" (@d)\", a0->field_48, a2, a3, a4);\n
    cgc_printf(\": \", 20, a2, a3, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
    {\n
        a0->field_48 = cgc_atoi(&v5);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4225547:sub_407a0b": null, "4225552:cgc_log_dives": "long long cgc_log_dives(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x850]\n
    unsigned long v1;  // [bp-0x848]\n
    char v2;  // [bp-0x840]\n
    unsigned long v3;  // [bp-0x820]\n
    char v4;  // [bp-0x818]\n
    char v5;  // [bp-0x418]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rax\n
\n
    if (!*((a0 + 160)))\n
    {\n
        v8 = cgc_calloc(1, 144);\n
        *((a0 + 160)) = v8;\n
        if (!*((a0 + 160)))\n
            cgc__terminate(1);\n
        v6 = *((a0 + 160));\n
    }\n
    else\n
    {\n
        for (v6 = *((a0 + 160)); *((v6 + 136)); v6 = *((v6 + 136)));\n
        v8 = cgc_calloc(1, 144);\n
        *((v6 + 136)) = v8;\n
        if (!*((v6 + 136)))\n
            cgc__terminate(1);\n
        v6 = *((v6 + 136));\n
    }\n
    cgc_printf(\"Dive Site\", 144, a2, v8, a4);\n
    if (*(v6))\n
        cgc_printf(\" (@s)\", v6, a2, v8, a4);\n
    cgc_printf(\": \", a1, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 26);\n
    if (v3 > 0)\n
    {\n
        a2 = 26;\n
        cgc_strncpy(v6, &v5, 26);\n
    }\n
    cgc_printf(\"Date\", 26, 26, v8, a4);\n
    if (*((v6 + 26)))\n
        cgc_printf(\" (@s)\", v6 + 26, 26, v8, a4);\n
    cgc_printf(\": \", 26, 26, v8, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
    {\n
        a2 = v3;\n
        cgc_strncpy(v6 + 26, &v5, a2);\n
    }\n
    cgc_printf(\"Time\", 11, a2, v8, a4);\n
    if (*((v6 + 37)))\n
        cgc_printf(\" (@s)\", v6 + 37, a2, v8, a4);\n
    cgc_printf(\": \", 11, a2, v8, a4);\n
    v3 = cgc_getline(&v4, 9);\n
    if (v3 > 0)\n
        cgc_strncpy(v6 + 37, &v4, v3);\n
    cgc_strncat(&v5, \" \", 1);\n
    v0 = &v5;\n
    v1 = &v4;\n
    cgc_strncat(v0, v1, cgc_strlen(&v4));\n
    v9 = cgc_str2datetime(&v5, &v2);\n
    *((v6 + 48)) = v9;\n
    cgc_printf(\"Location (area/city)\", 11, a2, v9, a4);\n
    if (*((v6 + 96)))\n
        cgc_printf(\" (@s)\", v6 + 96, a2, v9, a4);\n
    cgc_printf(\": \", 11, a2, v9, a4);\n
    v3 = cgc_getline(&v5, 26);\n
    if (v3 > 0)\n
    {\n
        a2 = v3;\n
        cgc_strncpy(v6 + 96, &v5, a2);\n
    }\n
    cgc_printf(\"Max Depth in ft\", 26, a2, v8, a4);\n
    if (*((v6 + 56)))\n
        cgc_printf(\" (@d)\", *((v6 + 56)), a2, v8, a4);\n
    cgc_printf(\": \", 26, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 0x400);\n
    if (v3 > 0)\n
    {\n
        v8 = cgc_atoi(&v5);\n
        *((v6 + 56)) = v8;\n
    }\n
    cgc_printf(\"Avg Depth in ft\", 0x400, a2, v8, a4);\n
    if (*((v6 + 60)))\n
        cgc_printf(\" (@d)\", *((v6 + 60)), a2, v8, a4);\n
    cgc_printf(\": \", 0x400, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 0x400);\n
    if (v3 > 0)\n
    {\n
        v8 = cgc_atoi(&v5);\n
        *((v6 + 60)) = v8;\n
    }\n
    cgc_printf(\"Dive Duration (mins)\", 0x400, a2, v8, a4);\n
    if (*((v6 + 64)))\n
        cgc_printf(\" (@d)\", *((v6 + 64)), a2, v8, a4);\n
    cgc_printf(\": \", 0x400, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 13);\n
    if (v3 > 0)\n
    {\n
        v8 = cgc_atoi(&v5);\n
        *((v6 + 64)) = v8;\n
    }\n
    cgc_printf(\"O2 Percentage\", 13, a2, v8, a4);\n
    if (*((v6 + 76)))\n
        cgc_printf(\" (@d)\", *((v6 + 76)), a2, v8, a4);\n
    cgc_printf(\": \", 13, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
    {\n
        v8 = cgc_atoi(&v5);\n
        *((v6 + 76)) = v8;\n
    }\n
    cgc_printf(\"Pressure In (psi)\", 11, a2, v8, a4);\n
    if (*((v6 + 68)))\n
        cgc_printf(\" (@d)\", *((v6 + 68)), a2, v8, a4);\n
    cgc_printf(\": \", 11, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 20);\n
    if (v3 > 0)\n
    {\n
        v8 = cgc_atoi(&v5);\n
        *((v6 + 68)) = v8;\n
    }\n
    cgc_printf(\"Pressure Out (psi)\", 20, a2, v8, a4);\n
    if (*((v6 + 72)))\n
        cgc_printf(\" (@d)\", *((v6 + 72)), a2, v8, a4);\n
    cgc_printf(\": \", 20, a2, v8, a4);\n
    v3 = cgc_getline(&v5, 11);\n
    if (v3 > 0)\n
        *((v6 + 72)) = cgc_atoi(&v5);\n
    *((v6 + 136)) = 0;\n
    return 0;\n
}\n
", "4227178:sub_40806a": null, "4227184:cgc_process_menu": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned long long cgc_logbook;\n
\n
long long cgc_process_menu(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int *a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
\n
    while (true)\n
    {\n
        do\n
        {\n
            cgc_printf(\"\\n
\", 24, a2, a3, a4);\n
            for (v2 = 0; v2 < a1; v2 += 1)\n
            {\n
                a3 = v2 * 24;\n
                cgc_printf(\"@c - @s\\n
\", *(*((a0 + v2 * 24 + 8))), *((a0 + a3)), a3, a4);\n
            }\n
            cgc_printf(\":\", 24, a2, a3, a4);\n
            v1 = cgc_getline(&v0, 24);\n
        } while (!v1);\n
        cgc_printf(\"\\n
\", 24, a2, a3, a4);\n
        for (v2 = 0; v2 < a1; v2 += 1)\n
        {\n
            a2 = v2 * 24;\n
            a3 = a0 + a2;\n
            if (cgc_find_char(v0, a3->field_8, a2, a3))\n
            {\n
                if (*((a0 + v2 * 24 + 16)))\n
                {\n
                    a3 = a0 + v2 * 24;\n
                    *((a0 + v2 * 24 + 16))(&cgc_logbook);\n
                    break;\n
                }\n
                else\n
                {\n
                    return 0;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4227508:sub_4081b4": null, "4227520:cgc_find_char": "long long cgc_find_char(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = v1;\n
        if (v0 >= cgc_strlen(a1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a1[v1] != a0)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = 1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4227649:sub_408241": null, "4227664:cgc_list_dives": "typedef struct struct_1 {\n
    char padding_0[160];\n
    struct struct_0 *field_a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[136];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
long long cgc_list_dives(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = 1;\n
    v1 = a0->field_a0;\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    if (!v1)\n
    {\n
        cgc_printf(\"Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v2 = -1;\n
        return v2;\n
    }\n
    cgc_printf(\"Dive# @-10s @-8s @-25s @-25s\\n
\", \"Date\", \"Time\", \"Dive Site\", \"Location\");\n
    while (true)\n
    {\n
        cgc_printf(\"@4d: @-10s @-8s @-25s @-25s\\n
\", v0, &v1->padding_0[26], &v1->padding_0[37], v1);\n
        v1 = v1->field_88;\n
        v0 += 1;\n
    }\n
}\n
", "4227892:sub_408334": null, "4227904:cgc_print_dives": "typedef struct struct_1 {\n
    char padding_0[160];\n
    struct struct_0 *field_a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[56];\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    char padding_50[12];\n
    unsigned int field_5c;\n
    char padding_60[40];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
long long cgc_print_dives(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x99]\n
    char v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    struct_0 *v5;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0xc]\n
    char v7;  // [bp-0x8]\n
    unsigned long long v9;  // rbp\n
    unsigned long v10;  // rcx\n
\n
    v9 = &v7;\n
    if (cgc_list_dives(a0, a1, a2, a3, a4) == -1)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Enter Dive # to display: \", a1, a2, a3, a4);\n
    v2 = cgc_getline(&v1, 100);\n
    if (!v2)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v3 = cgc_atoi(&v1);\n
    v5 = a0->field_a0;\n
    v4 = 1;\n
    while (true)\n
    {\n
        v10 = v4;\n
        v0 = 0;\n
        if (v10 < v3)\n
            v0 = v5;\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 1;\n
        v5 = v5->field_88;\n
    }\n
    if (v4 == v3 && v5)\n
    {\n
        cgc_printf(\"\\n
\", 100, a2, v10, a4);\n
        cgc_printf(\"          Date: @s\\n
\", v5 + 26, a2, v10, a4);\n
        cgc_printf(\"          Time: @s\\n
\", v5 + 37, a2, v10, a4);\n
        cgc_printf(\"     Dive Site: @s\\n
\", v5, a2, v10, a4);\n
        cgc_printf(\"      Location: @s\\n
\", v5 + 96, a2, v10, a4);\n
        cgc_printf(\"     Max Depth: @d\\n
\", *((v5 + 56)), a2, v10, a4);\n
        cgc_printf(\"     Avg Depth: @d\\n
\", *((v5 + 60)), a2, v10, a4);\n
        cgc_printf(\"      Duration: @d\\n
\", *((v5 + 64)), a2, v10, a4);\n
        cgc_printf(\"    O2 Percent: @d\\n
\", *((v5 + 76)), a2, v10, a4);\n
        cgc_printf(\"Start Pressure: @d\\n
\", *((v5 + 68)), a2, v10, a4);\n
        cgc_printf(\"  End Pressure: @d\\n
\", *((v5 + 72)), a2, v10, a4);\n
        cgc_printf(\"     Bin Count: @d\\n
\", *((v5 + 92)), a2, v10, a4);\n
        cgc_printf(\"\\n
\", a1, a2, v10, a4);\n
        goto LABEL_408557;\n
    }\n
    cgc_printf(\"Invalid dive number entered\\n
\", 100, a2, v10, a4);\n
LABEL_408557:\n
    v6 = 0;\n
    return v6;\n
}\n
", "4228458:sub_40856a": null, "4228464:cgc_remove_dives": "typedef struct struct_2 {\n
    char padding_0[160];\n
    struct struct_1 *field_a0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[128];\n
    struct struct_0 *field_80;\n
    struct struct_1 *field_88;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long cgc_remove_dives(struct_2 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x451]\n
    unsigned int v1;  // [bp-0x450]\n
    unsigned int v2;  // [bp-0x44c]\n
    struct_0 *v3;  // [bp-0x448]\n
    struct_0 *v4;  // [bp-0x440], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0x438]\n
    struct_1 *v6;  // [bp-0x430]\n
    struct_1 *v7;  // [bp-0x428], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x41c]\n
    char v9;  // [bp-0x418]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned long v12;  // rcx\n
\n
    v7 = a0->field_a0;\n
    v2 = 1;\n
    v1 = 0;\n
    if (!v7)\n
    {\n
        cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v10 = 0;\n
        return v10;\n
    }\n
    cgc_list_dives(a0, a1, a2, a3, a4);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Enter Dive # to delete or blank to abort: \", a1, a2, a3, a4);\n
    v8 = cgc_getline(&v9, 0x400);\n
    if (!v8)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    v1 = cgc_atoi(&v9);\n
    v7 = a0->field_a0;\n
    if (v1 == 1)\n
    {\n
        v5 = v7->field_88;\n
        if (v7->field_80)\n
        {\n
            for (v4 = v7->field_80; v4; v4 = v3)\n
            {\n
                v3 = v4->field_10;\n
                cgc_free(v4);\n
            }\n
        }\n
        cgc_free(v7);\n
        a0->field_a0 = v5;\n
        v10 = 0;\n
        return v10;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        while (true)\n
        {\n
            v12 = v2;\n
            v0 = 0;\n
            if (v12 < v1)\n
                v0 = v7;\n
            if (!(v0 & 1))\n
                break;\n
            v2 += 1;\n
            v6 = v7;\n
            v7 = v7->field_88;\n
        }\n
        if (v2 == v1 && v7)\n
        {\n
            v6->field_88 = *((v7 + 136));\n
            if (v7->field_80)\n
            {\n
                for (v4 = *((v7 + 128)); v4; v4 = v3)\n
                {\n
                    v3 = *((v4 + 16));\n
                    cgc_free(v4);\n
                }\n
            }\n
            cgc_free(v7);\n
            goto LABEL_408856;\n
        }\n
        cgc_printf(\"Invalid dive number entered\\n
\", 0x400, a2, v12, a4);\n
LABEL_408856:\n
        v10 = 0;\n
        return v10;\n
    }\n
}\n
", "4229225:sub_408869": null, "4229232:main": "extern char cgc_logbook;\n
extern void g_40b150;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int *a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    memcpy(&v0, &g_40b150, 192);\n
    cgc_bzero(&cgc_logbook, 168);\n
    cgc_process_menu(&v0, 8, 192, a3, a4);\n
    return 0;\n
}\n
", "4229319:sub_4088c7": null, "4229328:cgc_exit_app": "long long cgc_exit_app(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
}\n
", "4229348:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:memcpy": null, "5242936:cgc_rint": null, "5242944:cgc_deallocate": null, "5242952:cgc_log10": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}