{"4202496:_init": "extern struct_0 *g_409238;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409238;\n
    if (g_409238)\n
        v1 = g_409238();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409258;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409258;\n
    goto *(4231776);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231752);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409230;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_409240;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_409248;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409248)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203092:sub_402254": null, "4203104:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203228:sub_4022dc": null, "4203232:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203360:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203422:sub_40239e": null, "4203424:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203649:sub_402481": null, "4203664:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203871:sub_40255f": null, "4203872:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40285c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40285c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204652:sub_40286c": null, "4204656:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    struct struct_1 **v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    struct_2 *v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10c]\n
    unsigned long long *v3;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v4;  // [bp-0x100]\n
    unsigned int *v5;  // [bp-0xf8]\n
    unsigned int v6;  // [bp-0xec]\n
    unsigned int *v7;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0xe0]\n
    unsigned int v9;  // [bp-0xd4]\n
    unsigned int *v10;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v11;  // [bp-0xc8]\n
    unsigned int v12;  // [bp-0xbc]\n
    unsigned int *v13;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_2 *v14;  // [bp-0xb0]\n
    unsigned int v15;  // [bp-0xa8]\n
    unsigned int v16;  // [bp-0xa4]\n
    char *v17;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_0 *v18;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v19;  // [bp-0x90]\n
    struct_0 *v20;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned int v21;  // [bp-0x7c]\n
    struct_0 *v22;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x70]\n
    char v24;  // [bp-0x69]\n
    char v25;  // [bp-0x68]\n
    unsigned int v26;  // [bp-0x24]\n
    char *v27;  // [bp-0x18]\n
    unsigned int v28;  // [bp-0xc]\n
    struct_2 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    unsigned int *v32;  // rax\n
    struct_2 *v33;  // rcx\n
    unsigned int *v34;  // rdx\n
    struct_2 *v35;  // rcx\n
    unsigned long long v36;  // rdx\n
    unsigned int *v37;  // rax\n
    struct_2 *v38;  // rcx\n
    unsigned int *v39;  // rdx\n
    unsigned long long v40;  // rdx\n
    unsigned long long *v41;  // rax\n
    struct_2 *v42;  // rcx\n
    unsigned long long *v43;  // rdx\n
    struct_2 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    struct struct_1 **v46;  // rax\n
    struct_2 *v47;  // rcx\n
    struct struct_1 **v48;  // rdx\n
    struct_2 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned int *v51;  // rax\n
    struct_2 *v52;  // rcx\n
    unsigned int *v53;  // rdx\n
\n
    v27 = a0;\n
    v26 = 0;\n
    if (!v27)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (true)\n
    {\n
        if (!*(v27))\n
        {\n
            v28 = v26;\n
            return v28;\n
        }\n
        else if (*(v27) != 64)\n
        {\n
            cgc_putc(*(v27));\n
            v27 += 1;\n
            v26 += 1;\n
        }\n
        else\n
        {\n
            v27 += 1;\n
            v16 = *(v27);\n
            if (!v16)\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            if (v16 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v16 == 99)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v33 = v14;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[2];\n
                    v13 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v14;\n
                    v31 = v15;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v13 = v32;\n
                }\n
                v24 = *(v13);\n
                cgc_putc(v24);\n
                v26 += 1;\n
            }\n
            else if (v16 == 100)\n
            {\n
                v11 = a1;\n
                v12 = v11->field_0;\n
                if (v12 > 40)\n
                {\n
                    v38 = v11;\n
                    v39 = v38->field_8;\n
                    v38->field_8 = &v39[2];\n
                    v10 = v39;\n
                }\n
                else\n
                {\n
                    v35 = v11;\n
                    v36 = v12;\n
                    v37 = v36 + v35->field_10;\n
                    v35->field_0 = v36 + 8;\n
                    v10 = v37;\n
                }\n
                v23 = *(v10);\n
                cgc_int_to_str(v23, &v25);\n
                for (v22 = &v25; *(v22); v22 += 1)\n
                {\n
                    cgc_putc(*(v22));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 > 160)\n
                {\n
                    v42 = v4;\n
                    v43 = v42->field_8;\n
                    v42->field_8 = &v43[1];\n
                    v3 = v43;\n
                }\n
                else\n
                {\n
                    v40 = v6;\n
                    v41 = v40 + v4->field_10;\n
                    *(v5) = v40 + 16;\n
                    v3 = v41;\n
                }\n
                v19 = *(v3);\n
                cgc_float_to_str(&v25);\n
                for (v18 = &v25; *(v18); v18 += 1)\n
                {\n
                    cgc_putc(*(v18));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v47 = v1;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v0 = v48;\n
                }\n
                else\n
                {\n
                    v44 = v1;\n
                    v45 = v2;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v0 = v46;\n
                }\n
                for (v17 = *(v0); *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 120)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 <= 40)\n
                {\n
                    v49 = v8;\n
                    v50 = v9;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v7 = v51;\n
                }\n
                else\n
                {\n
                    v52 = v8;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[2];\n
                    v7 = v53;\n
                }\n
                v21 = *(v7);\n
                cgc_int_to_hex(v21, &v25);\n
                for (v20 = &v25; v20->field_0; v20 += 1)\n
                {\n
                    cgc_putc(v20->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            v27 += 1;\n
        }\n
    }\n
}\n
", "4205914:sub_402d5a": null, "4205920:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4206080:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4206217:sub_402e89": null, "4206224:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4206400:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4206512:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4206595:sub_403003": null, "4206608:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206659:sub_403043": null, "4206672:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206723:sub_403083": null, "4206736:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4206779:sub_4030bb": null, "4206784:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4206827:sub_4030eb": null, "4206832:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206883:sub_403123": null, "4206896:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206987:sub_40318b": null, "4206992:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4207020:sub_4031ac": null, "4207024:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4207076:sub_4031e4": null, "4207088:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_4033d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_4033d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_4033d9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_403349:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_4033d9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_403349;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_4033d9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4207645:sub_40341d": null, "4207648:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4208040:sub_4035a8": null, "4208048:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4208151:sub_403617": null, "4208160:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = v1[a1];\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4208333:sub_4036cd": null, "4208336:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4208454:sub_403746": null, "4208464:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 -= 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4208552:sub_4037a8": null, "4208560:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4208678:sub_403826": null, "4208688:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4208897:sub_403901": null, "4208912:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4208995:sub_403963": null, "4209008:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        v2[a0] = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4209185:sub_403a21": null, "4209200:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4209362:sub_403ad2": null, "4209376:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4209608:sub_403bc8": null, "4209616:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4209698:sub_403c22": null, "4209712:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4209828:sub_403ca4": null, "4209840:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4210550:sub_403f76": null, "4210560:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4210643:sub_403fd3": null, "4210656:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4210805:sub_404075": null, "4210816:cgc_calloc": "long long cgc_calloc(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_malloc(a0 * a1);\n
    cgc_memset(*(&v0), 0, a0 * a1);\n
    return *(&v0);\n
}\n
", "4210880:cgc_malloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_2;\n
\n
extern struct_1 *cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    struct_2 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x28]\n
    struct_0 *v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    struct_0 *v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        cgc_heap_manager->field_0 = 0x1000;\n
        cgc_heap_manager->field_10 = 8;\n
        cgc_heap_manager->field_8 = 0x1000 - cgc_heap_manager->field_10;\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(cgc_heap_manager->field_18, 0, 0x1000);\n
        v3 = cgc_heap_manager->field_18;\n
        v3->field_0 = 4072;\n
        v3->field_8 = 0;\n
    }\n
    v3 = cgc_heap_manager->field_18;\n
    if (a0 > v3->field_0)\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (!v3->field_8)\n
        {\n
            cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
            cgc__terminate(\"Not enough space available to allocate more heap.  Failure.\");\n
        }\n
        v3 = v3->field_8;\n
        v3->field_0 = 4072;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        v9->field_0 = v9->field_0 - a0;\n
        v1 = &v3[1].field_0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((v1->field_8 & 1))\n
                v0 = v1->field_0 < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = 7 + &v1[1].field_0 + v1->field_0;\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = &v1[1].field_0 + 7;\n
        return v4;\n
    }\n
}\n
", "4211362:sub_4042a2": null, "4211376:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4211438:sub_4042ee": null, "4211440:cgc_getNextPieceNum": "extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_getNextPieceNum()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (g_409824 == -1)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = (&game_stack)[9 * g_409824] + 1;\n
    return v0;\n
}\n
", "4211504:cgc_create_random_piece": "extern char cgc_current_max_road_len;\n
extern unsigned int g_409824;\n
\n
long long cgc_create_random_piece(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    if (g_409824 >= 128)\n
    {\n
        v5 = 33;\n
        return v5;\n
    }\n
    if (!cgc_isTopPiecePlaced() && g_409824 > 0)\n
    {\n
        v5 = 22;\n
        return v5;\n
    }\n
    *(a0) = cgc_getNextPieceNum();\n
    if (g_409824 != -1)\n
    {\n
        v2 = cgc_random_in_range(0, 3);\n
        for (v1 = v2; v1 == v2; v1 = cgc_random_in_range(0, 3));\n
        v0 = 0;\n
        while (v0 < 4)\n
        {\n
            if (v0 == v2)\n
            {\n
LABEL_40445d:\n
                a0[1 + 2 * v0] = 253;\n
                goto LABEL_40447c;\n
            }\n
            else\n
            {\n
                if (v0 == v1)\n
                    goto LABEL_40445d;\n
                a0[1 + 2 * v0] = 252;\n
LABEL_40447c:\n
                v0 += 1;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v4 = cgc_random_in_range(1, 3);\n
        for (v3 = 0; v3 < 4; v3 += 1)\n
        {\n
            if (v3 != v4)\n
                a0[1 + 2 * v3] = 252;\n
            else\n
                a0[1 + 2 * v3] = 253;\n
        }\n
    }\n
    if (g_409824 < 0)\n
        cgc_current_max_road_len = cgc_current_max_road_len + 1;\n
    cgc_push_piece(a0);\n
    v5 = 1;\n
    return v5;\n
}\n
", "4211912:sub_4044c8": null, "4211920:cgc_push_piece": "extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_push_piece(char a0[9])\n
{\n
    if (g_409824 >= 128)\n
        return &(&game_stack)[9 * g_409824];\n
    g_409824 = g_409824 + 1;\n
    (&game_stack)[9 * g_409824] = a0[0];\n
    (&game_stack)[1 + 9 * g_409824] = a0[1];\n
    (&game_stack)[2 + 9 * g_409824] = a0[2];\n
    (&game_stack)[3 + 9 * g_409824] = a0[3];\n
    (&game_stack)[4 + 9 * g_409824] = a0[4];\n
    (&game_stack)[5 + 9 * g_409824] = a0[5];\n
    (&game_stack)[6 + 9 * g_409824] = a0[6];\n
    (&game_stack)[7 + 9 * g_409824] = a0[7];\n
    (&game_stack)[8 + 9 * g_409824] = a0[8];\n
}\n
", "4212243:sub_404613": null, "4212256:cgc_discard_piece": "extern unsigned int g_409824;\n
\n
long long cgc_discard_piece()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (g_409824 < 0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (cgc_isTopPiecePlaced() != 1)\n
    {\n
        g_409824 = g_409824 - 1;\n
        v0 = 1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4212346:sub_40467a": null, "4212352:cgc_connect_pieces": "extern char cgc_current_max_road_len;\n
extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_connect_pieces(char *a0, unsigned long a1, char *a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x3a]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2;  // [bp-0x29]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long v5;  // rcx\n
\n
    v2 = a3;\n
    if (a0[1 + 2 * a1] == -3 && a2[1 + 2 * v2] == -3)\n
    {\n
        a0[1 + 2 * a1] = *(a2);\n
        a0[2 + 2 * a1] = v2;\n
        a2[1 + 2 * v2] = *(a0);\n
        a2[2 + 2 * v2] = a1;\n
        cgc_current_max_road_len = cgc_current_max_road_len + 1;\n
        v3 = 1;\n
        return v3;\n
    }\n
    v5 = v2;\n
    cgc_printf(\"a: @d, b: @d...\", a0[1 + 2 * a1], a2[1 + 2 * v5], v5, a4);\n
    for (v1 = 0; v1 < g_409824; v1 += 1)\n
    {\n
        cgc_piece_to_pkt(&(&game_stack)[9 * v1], &v0);\n
        cgc_printf(\"piece @d: @s\", v1, &v0, v2, a4);\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4212663:sub_4047b7": null, "4212672:cgc_piece_to_pkt": "long long cgc_piece_to_pkt(char a0[8], char a1[9])\n
{\n
    a1[0] = a0[0] + 48;\n
    if (a0[1] == -3)\n
    {\n
        a1[1] = 48;\n
        a1[2] = 121;\n
    }\n
    else\n
    {\n
        a1[1] = 48;\n
        a1[2] = 110;\n
    }\n
    if (a0[3] == -3)\n
    {\n
        a1[3] = 49;\n
        a1[4] = 121;\n
    }\n
    else\n
    {\n
        a1[3] = 49;\n
        a1[4] = 110;\n
    }\n
    if (a0[5] == -3)\n
    {\n
        a1[5] = 50;\n
        a1[6] = 121;\n
    }\n
    else\n
    {\n
        a1[5] = 50;\n
        a1[6] = 110;\n
    }\n
    if (a0[7] == -3)\n
    {\n
        a1[7] = 51;\n
        a1[8] = 121;\n
        return a1;\n
    }\n
    a1[7] = 51;\n
    a1[8] = 110;\n
    return a1;\n
}\n
", "4212920:sub_4048b8": null, "4212928:cgc_get_max_road_len": "extern char cgc_current_max_road_len;\n
\n
long long cgc_get_max_road_len()\n
{\n
    return cgc_current_max_road_len;\n
}\n
", "4212941:sub_4048cd": null, "4212944:cgc_isTopPiecePlaced": "extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_isTopPiecePlaced()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (g_409824 < 0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < 4)\n
        {\n
            if ((&game_stack)[1 + 9 * g_409824 + 2 * v0] != -0x4 && (&game_stack)[1 + 9 * g_409824 + 2 * v0] != -3)\n
            {\n
                v1 = 1;\n
                return v1;\n
            }\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4213111:sub_404977": null, "4213120:cgc_get_piece": "extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_get_piece(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 > g_409824)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if ((&game_stack)[9 * v0] == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4213227:sub_4049eb": null, "4213232:cgc_seed_prng": "long long cgc_seed_prng(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x134]\n
    unsigned long v1;  // [bp-0x130], Other Possible Types: unsigned long long\n
    unsigned int v2;  // [bp-0x11c]\n
    char v3;  // [bp-0x118]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    cgc_bzero(&v3, 0x100);\n
    cgc_printf(\"Enter crypto seed\\n
\", 0x100, a2, a3, a4);\n
    v2 = cgc_receive_until(&v3, 10, 255);\n
    if (v2 < 2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = -1;\n
    for (v0 = 0; v0 < v2; v0 += 1)\n
    {\n
        v1 = (v1 * 16 | v1 >> 60) ^ (&v3)[v0];\n
    }\n
    cgc_sprng(v1);\n
    v4 = v2;\n
    return v4;\n
}\n
", "4213470:sub_404ade": null, "4213472:cgc_populate_packet": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_0;\n
\n
long long cgc_populate_packet(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a2 != 16)\n
    {\n
        cgc_printf(\"not proper packet length: got @d, should be @d\\n
\", a2, 16, a3, a4);\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_memcpy(a0, a1, a2);\n
    v0 = a0->field_4 - 48;\n
    if (v0 <= 10 && v0 >= 0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    cgc_printf(\"length field outside valid range\\n
\", a1, a2, a3, a4);\n
    v1 = 0;\n
    return v1;\n
}\n
", "4213632:cgc_validate_packet": "extern unsigned int current_connection_number;\n
\n
long long cgc_validate_packet(char a0[16], unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long v4;  // rcx\n
\n
    v2 = 1;\n
    if (a0[0] < 97 && a0[0] > 99)\n
    {\n
        cgc_printf(\"type is out of range (@c)\\n
\", a0[0], a2, a3, a4);\n
        v2 = 0;\n
    }\n
    if (a0[0] != 99)\n
    {\n
        if (a0[1] <= 113 && !(a0[1] < 100))\n
            goto LABEL_404c1e;\n
        cgc_printf(\"subtype is out of range (@c)\\n
\", a0[1], a2, a3, a4);\n
        v2 = 0;\n
LABEL_404c1e:\n
    }\n
    else\n
    {\n
        if (a0[1] <= 122 && !(a0[1] < 118))\n
            goto LABEL_404c62;\n
        cgc_printf(\"data subtype is out of range (@c)\\n
\", a0[1], a2, a3, a4);\n
        v2 = 0;\n
LABEL_404c62:\n
    }\n
    v1 = a0[4] - 48;\n
    if (v1 <= 10 && !(v1 < 0))\n
        goto LABEL_404ca6;\n
    cgc_printf(\"length is out of range (@c)\\n
\", a0[4], a2, a3, a4);\n
    v2 = 0;\n
LABEL_404ca6:\n
    if (a0[1] != 100 && a0[3] - 48 != current_connection_number)\n
    {\n
        cgc_printf(\"connection number not valid: @c vs @c\\n
\", a0[3], current_connection_number + 48, a3, a4);\n
        v2 = 0;\n
    }\n
    v0 = cgc_get_checksum(a0);\n
    v4 = v0;\n
    if (a0[15] != v4)\n
    {\n
        cgc_printf(\"checksum does not match @c vs @d\", v0, a0[15], v4, a4);\n
        cgc_printf(\"@s\\n
\", a0, a2, v4, a4);\n
        v2 = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214101:sub_404d55": null, "4214112:cgc_get_checksum": "long long cgc_get_checksum(unsigned long long a0)\n
{\n
    return cgc_calculateCS(a0, 15);\n
}\n
", "4214147:sub_404d83": null, "4214160:cgc_packet_handler": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char cgc_current_max_road_len;\n
extern unsigned int current_encryption;\n
extern unsigned int current_packet_count_recvd;\n
extern unsigned int g_409824;\n
extern char game_stack;\n
\n
long long cgc_packet_handler(char a0[10], unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa8]\n
    char v3;  // [bp-0xa7]\n
    char v4;  // [bp-0xa3]\n
    unsigned int v5;  // [bp-0x98]\n
    unsigned int v6;  // [bp-0x8c]\n
    unsigned int v7;  // [bp-0x88]\n
    char v8;  // [bp-0x82]\n
    char v9;  // [bp-0x81]\n
    unsigned int v10;  // [bp-0x80]\n
    char v11[9];  // [bp-0x71]\n
    char v12;  // [bp-0x68]\n
    char v13;  // [bp-0x67]\n
    char v14;  // [bp-0x63]\n
    char v15;  // [bp-0x58]\n
    char v16;  // [bp-0x57]\n
    char v17;  // [bp-0x53]\n
    unsigned int v18;  // [bp-0x48]\n
    unsigned int v19;  // [bp-0x3c]\n
    char v20;  // [bp-0x38]\n
    char v21;  // [bp-0x28]\n
    char v22;  // [bp-0x27]\n
    char v23;  // [bp-0x23]\n
    char v24;  // [bp-0x1a]\n
    unsigned int v25;  // [bp-0xc]\n
    unsigned long v27;  // rcx\n
\n
    if (a0[0] != 98)\n
    {\n
        if (a0[0] == 99)\n
        {\n
            v27 = current_packet_count_recvd + 1;\n
            if (a0[2] - 48 != v27)\n
            {\n
                cgc_printf(\"packet number incorrect: @c vs @c\\n
\", a0[2], current_packet_count_recvd + 49, v27, a4);\n
                cgc_send_nack(a0[2], 1);\n
                v25 = 0;\n
                return v25;\n
            }\n
            cgc_send_ack(a0[2]);\n
            if (a0[1] == 120)\n
            {\n
                v19 = cgc_create_random_piece(&v20);\n
                if (v19 == 1)\n
                {\n
                    cgc_piece_to_pkt(&v20, v11);\n
                    v21 = 99;\n
                    v22 = 120;\n
                    cgc_memcpy(&v23, v11, 9);\n
                    v24 = 48;\n
                    cgc_encrypt_data(&v23, 10, current_encryption);\n
                    cgc_send_packet_new(&v21, 9);\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                if (v19 == 33)\n
                {\n
                    *(&v18) = \"nfull\";\n
                    v21 = 99;\n
                    v22 = 120;\n
                    v0 = &v23;\n
                    *(&v1) = *(&v18);\n
                    cgc_strncpy(v0, *(&v1), cgc_strlen(*(&v18)));\n
                    cgc_send_packet_new(&v21, cgc_strlen(*(&v18)));\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                if (v19 != 22)\n
                {\n
                    v12 = 99;\n
                    v13 = 120;\n
                    cgc_strncpy(&v14, \"nconfused\", 9);\n
                    cgc_send_packet_new(&v12, 9);\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                v15 = 99;\n
                v16 = 120;\n
                cgc_strncpy(&v17, \"nusetop\", 7);\n
                cgc_send_packet_new(&v15, 7);\n
                v25 = 1;\n
                return v25;\n
            }\n
            else if (a0[1] == 122)\n
            {\n
                if (current_encryption == 1)\n
                {\n
                    cgc_decrypt_packet(&a0[5], a0[4] - 48, 1);\n
                }\n
                else\n
                {\n
                    if (current_encryption == 2)\n
                    {\n
                        cgc_decrypt_packet(&a0[5], a0[4] - 48, 2);\n
                    }\n
                    else\n
                    {\n
                        v25 = 0;\n
                        return v25;\n
                    }\n
                }\n
                if (a0[4] != 53)\n
                {\n
                    v25 = 0;\n
                    return v25;\n
                }\n
                if (g_409824 < 1)\n
                {\n
                    *(&v10) = \"NO,PCE\";\n
                    v21 = 99;\n
                    v22 = 122;\n
                    cgc_memcpy(&v23, *(&v10), 6);\n
                    cgc_send_packet_new(&v21, 6);\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                v9 = a0[6];\n
                v8 = a0[9];\n
                v7 = cgc_get_piece(a0[5] - 48);\n
                if (v7 == -1)\n
                {\n
                    cgc_printf(\"Out of bounds piece requested A: @d vs @d...\\n
\", a0[5] - 48, g_409824, v27, a4);\n
                    v25 = 0;\n
                    return v25;\n
                }\n
                v6 = cgc_get_piece(a0[8] - 48);\n
                if (v6 == -1)\n
                {\n
                    cgc_printf(\"Out of bounds piece requested B: @d vs @d...\\n
\", a0[8] - 48, g_409824, v27, a4);\n
                    v25 = 0;\n
                    return v25;\n
                }\n
                if (!cgc_connect_pieces(&(&game_stack)[9 * v7], v9 - 48, &(&game_stack)[9 * v6], v8 - 48, a4))\n
                {\n
                    *(&v5) = \"NO,ERROR\";\n
                    v2 = 99;\n
                    v3 = 122;\n
                    cgc_memcpy(&v4, *(&v5), 8);\n
                    cgc_send_packet_new(&v2, 8);\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                v21 = 99;\n
                v22 = 122;\n
                v23 = cgc_current_max_road_len + 48;\n
                cgc_encrypt_data(&v23, 10, current_encryption);\n
                cgc_send_packet_new(&v21, 1);\n
                v25 = 1;\n
                return v25;\n
            }\n
            else if (a0[1] == 119)\n
            {\n
                v21 = 99;\n
                v22 = 119;\n
                v23 = cgc_current_max_road_len + 48;\n
                cgc_encrypt_data(&v23, 10, current_encryption);\n
                cgc_send_packet_new(&v21, 1);\n
                v25 = 1;\n
                return v25;\n
            }\n
            else if (a0[1] == 118)\n
            {\n
                if (cgc_discard_piece() != 1)\n
                {\n
                    v21 = 99;\n
                    v22 = 118;\n
                    cgc_strncpy(&v23, \"nplaced\", 7);\n
                    cgc_send_packet_new(&v21, 7);\n
                    v25 = 1;\n
                    return v25;\n
                }\n
                v21 = 99;\n
                v22 = 118;\n
                v23 = 121;\n
                cgc_send_packet_new(&v21, 1);\n
                v25 = 1;\n
                return v25;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (a0[1] == 100)\n
        {\n
            cgc_send_assoc_response(a0[5] - 48);\n
            v25 = 1;\n
            return v25;\n
        }\n
        else if (a0[1] == 101)\n
        {\n
            v25 = 0;\n
            return v25;\n
        }\n
        else if (a0[1] == 102)\n
        {\n
            cgc_send_auth_response(&a0[5]);\n
            v25 = 1;\n
            return v25;\n
        }\n
        else if (a0[1] == 105)\n
        {\n
            v25 = 0;\n
            return v25;\n
        }\n
        else if (a0[1] == 104)\n
        {\n
            cgc_handle_auth_challenge_resp(&a0[5]);\n
            v25 = 1;\n
            return v25;\n
        }\n
        else if (a0[1] == 106)\n
        {\n
            if (!cgc_handle_disass_req(a0[5]))\n
            {\n
                cgc_printf(\"Failed disass\\n
\", a1, a2, a3, a4);\n
                v25 = 2;\n
                return v25;\n
            }\n
            v25 = 1;\n
            return v25;\n
        }\n
        else\n
        {\n
            if (a0[1] == 107)\n
            {\n
                cgc_printf(\"Dissasociation response received\\n
\", a1, a2, a3, a4);\n
                v25 = 0;\n
                return v25;\n
            }\n
            else if (a0[1] == 108)\n
            {\n
                if (!cgc_handle_deauth_req(a0[5]))\n
                {\n
                    cgc_printf(\"failed deauth...leaving\\n
\", a1, a2, a3, a4);\n
                    v25 = 2;\n
                    return v25;\n
                }\n
                v25 = 1;\n
                return v25;\n
            }\n
            else\n
            {\n
                if (a0[1] == 109)\n
                {\n
                    cgc_printf(\"Dissasociation response received\\n
\", a1, a2, a3, a4);\n
                    v25 = 0;\n
                    return v25;\n
                }\n
            }\n
        }\n
    }\n
    v25 = 1;\n
    return v25;\n
}\n
", "4216089:sub_405519": null, "4216096:cgc_send_assoc_response": "extern char current_connection_number;\n
extern unsigned int current_packet_count_recvd;\n
extern unsigned int last_connection_number;\n
\n
long long cgc_send_assoc_response(unsigned long a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2f]\n
    char v2;  // [bp-0x2b]\n
    char v3;  // [bp-0x20]\n
    char v4;  // [bp-0x1f]\n
    char v5;  // [bp-0x1b]\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = last_connection_number + 1;\n
    if (a0 != v7)\n
    {\n
        v0 = 98;\n
        v1 = 101;\n
        v2 = 48;\n
        v8 = cgc_send_packet_new(&v0, 1);\n
        return v8;\n
    }\n
    last_connection_number = last_connection_number + 1;\n
    current_packet_count_recvd = -1;\n
    *(&current_connection_number) = a0;\n
    v3 = 98;\n
    v4 = 101;\n
    v5 = 49;\n
    cgc_send_packet_new(&v3, 1);\n
    v8 = cgc_printf(\"SUCCESSFUL association\\n
\", 1, a2, v7, a4);\n
    return v8;\n
}\n
", "4216243:sub_4055b3": null, "4216256:cgc_send_auth_response": "long long cgc_send_auth_response(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (*(a0) == 97)\n
    {\n
        v1 = cgc_send_auth_challenge(1);\n
        return v1;\n
    }\n
    if (*(a0) == 120)\n
    {\n
        v1 = cgc_send_auth_challenge(2);\n
    }\n
    else\n
    {\n
        cgc_printf(\"AUTH RESP sent: fail\\n
\", a1, a2, a3, a4);\n
        v1 = cgc_printf(\"requested: @s, next: @c\\n
\", a0, a2, a3, a4);\n
    }\n
    return v1;\n
}\n
", "4216373:sub_405635": null, "4216384:cgc_handle_auth_challenge_resp": "extern unsigned int current_encryption;\n
extern unsigned int enc_chal;\n
extern unsigned int g_409830;\n
extern unsigned int g_409835;\n
\n
long long cgc_handle_auth_challenge_resp(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    char v1;  // [bp-0x68]\n
    char v2;  // [bp-0x67]\n
    char v3;  // [bp-0x63]\n
    char v4;  // [bp-0x58]\n
    char v5;  // [bp-0x57]\n
    char v6;  // [bp-0x53]\n
    unsigned int v7;  // [bp-0x48]\n
    char v8;  // [bp-0x41]\n
    char v9;  // [bp-0x40]\n
    char v10;  // [bp-0x3f]\n
    char v11;  // [bp-0x3b]\n
    char v12;  // [bp-0x30]\n
    char v13;  // [bp-0x2f]\n
    char v14;  // [bp-0x2b]\n
    unsigned int v15;  // [bp-0x20]\n
    char v16;  // [bp-0x19]\n
    unsigned int v17;  // [bp-0xc]\n
\n
    v0 = g_409835;\n
    if (g_409835 == 1)\n
    {\n
        v8 = 1;\n
        for (v7 = 0; v7 < 5; v7 += 1)\n
        {\n
            a2 = v7;\n
            a3 = *(4 + &enc_chal + a2);\n
            if (a0[v7] != a3)\n
                v8 = 0;\n
        }\n
        if (v8)\n
        {\n
            enc_chal = 0;\n
            v4 = 98;\n
            v5 = 105;\n
            v6 = 49;\n
            cgc_send_packet_new(&v4, 1);\n
            current_encryption = 1;\n
            v17 = 1;\n
            return v17;\n
        }\n
        cgc_printf(\"failed to match (@s)\", &g_409830, a2, a3, a4);\n
        v1 = 98;\n
        v2 = 105;\n
        v3 = 48;\n
        cgc_send_packet_new(&v1, 1);\n
    }\n
    else\n
    {\n
        if (v0 != 2)\n
        {\n
            v17 = 0;\n
            return v17;\n
        }\n
        v16 = 1;\n
        for (v15 = 0; v15 < 5; v15 += 1)\n
        {\n
            a2 = v15;\n
            a3 = *(4 + &enc_chal + a2);\n
            if (a0[v15] != a3)\n
                v16 = 0;\n
        }\n
        if (v16)\n
        {\n
            enc_chal = 0;\n
            v12 = 98;\n
            v13 = 105;\n
            v14 = 49;\n
            cgc_send_packet_new(&v12, 1);\n
            current_encryption = 2;\n
            v17 = 1;\n
            return v17;\n
        }\n
        cgc_printf(\"failed to match (@s)\", &g_409830, a2, a3, a4);\n
        v9 = 98;\n
        v10 = 105;\n
        v11 = 48;\n
        cgc_send_packet_new(&v9, 1);\n
    }\n
    v17 = 0;\n
    return v17;\n
}\n
", "4216872:sub_405828": null, "4216880:cgc_handle_disass_req": "extern unsigned int current_connection_number;\n
extern unsigned int current_encryption;\n
extern unsigned int current_packet_count_recvd;\n
extern unsigned int current_packet_count_sent;\n
extern unsigned int encryption_confirmed;\n
extern unsigned int last_connection_number;\n
\n
long long cgc_handle_disass_req(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2f]\n
    char v2;  // [bp-0x2b]\n
    char v3;  // [bp-0x20]\n
    char v4;  // [bp-0x1f]\n
    char v5;  // [bp-0x1b]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    if (current_encryption == -1 && !encryption_confirmed)\n
    {\n
        if (a0 != 51)\n
        {\n
            v3 = 98;\n
            v4 = 107;\n
            v5 = 48;\n
            cgc_send_packet_new(&v3, 1);\n
            v6 = 0;\n
            return v6;\n
        }\n
        v0 = 98;\n
        v1 = 107;\n
        v2 = 49;\n
        cgc_send_packet_new(&v0, 1);\n
        current_packet_count_recvd = -1;\n
        current_packet_count_sent = -1;\n
        last_connection_number = current_connection_number;\n
        current_connection_number = -1;\n
        v6 = 1;\n
        return v6;\n
    }\n
    cgc_printf(\"FAILED1\\n
\", a1, a2, a3, a4);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4217081:sub_4058f9": null, "4217088:cgc_handle_deauth_req": "extern unsigned int current_encryption;\n
extern unsigned int encryption_confirmed;\n
\n
long long cgc_handle_deauth_req(unsigned long a0)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2f]\n
    char v2;  // [bp-0x2b]\n
    char v3;  // [bp-0x20]\n
    char v4;  // [bp-0x1f]\n
    char v5;  // [bp-0x1b]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    if (a0 == 55)\n
    {\n
        v0 = 98;\n
        v1 = 109;\n
        v2 = 49;\n
        cgc_send_packet_new(&v0, 1);\n
        current_encryption = -1;\n
        encryption_confirmed = 0;\n
        v6 = 1;\n
        return v6;\n
    }\n
    v3 = 98;\n
    v4 = 109;\n
    v5 = 48;\n
    cgc_send_packet_new(&v3, 1);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4217215:sub_40597f": null, "4217216:cgc_send_nack": "extern unsigned int current_packet_count_recvd;\n
\n
long long cgc_send_nack(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1f]\n
    char v2;  // [bp-0x1b]\n
    char v3;  // [bp-0x1a]\n
\n
    v0 = 97;\n
    v1 = 113;\n
    v2 = a0;\n
    v3 = a1 + 48;\n
    current_packet_count_recvd = current_packet_count_recvd + 1;\n
    return cgc_send_packet_new(&v0, 2);\n
}\n
", "4217291:sub_4059cb": null, "4217296:cgc_send_ack": "extern unsigned int current_packet_count_recvd;\n
\n
long long cgc_send_ack(unsigned long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1f]\n
    char v2;  // [bp-0x1b]\n
\n
    v0 = 97;\n
    v1 = 112;\n
    v2 = a0;\n
    current_packet_count_recvd = current_packet_count_recvd + 1;\n
    return cgc_send_packet_new(&v0, 1);\n
}\n
", "4217359:sub_405a0f": null, "4217360:cgc_send_packet_new": "extern unsigned int current_connection_number;\n
extern unsigned int current_packet_count_sent;\n
\n
long long cgc_send_packet_new(char a0[5], unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    if (a0[0] != 99)\n
    {\n
        a0[2] = 48;\n
    }\n
    else\n
    {\n
        current_packet_count_sent = current_packet_count_sent + 1;\n
        a0[2] = current_packet_count_sent + 48;\n
    }\n
    a0[3] = current_connection_number + 48;\n
    for (v0 = a1; v0 < 10; v0 += 1)\n
    {\n
        a3 = v0;\n
        a0[1 + a3] = 48;\n
    }\n
    *(&a3) = a1 + 48;\n
    a0[4] = *(&a3);\n
    cgc_set_checksum(a0);\n
    cgc_write(a0, 16);\n
    return cgc_printf(\"\\n
\", 16, a2, a3, a4);\n
}\n
", "4217550:sub_405ace": null, "4217552:cgc_encrypt_data": "extern unsigned int LAST_CHAR_POS;\n
extern struct_0 *VALID_CHARS;\n
extern unsigned int offset;\n
\n
long long cgc_encrypt_data(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3e]\n
    char v3;  // [bp-0x3d]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    char v7;  // [bp-0x2e]\n
    char v8;  // [bp-0x2d]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v14;  // eax\n
    unsigned int v16;  // eax\n
\n
    if (a2 == 2)\n
    {\n
        v11 = 0;\n
        for (v10 = 0; v10 < a1; v10 += 1)\n
        {\n
            v9 = cgc_locate_char(a0[v10]);\n
            if (v9 == -1)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            v14 = v10;\n
            if (!(v14 >> 31 CONCAT v14) /m 2 >> 32)\n
            {\n
                v1 = &VALID_CHARS->field_0;\n
                v8 = v1[(v9 + offset >> 31 CONCAT v9 + offset) /m LAST_CHAR_POS >> 32];\n
                a0[v10] = v8;\n
            }\n
            else\n
            {\n
                v7 = v9 - offset;\n
                if (v7 < 0)\n
                    v7 = LAST_CHAR_POS - (offset - v9);\n
                a0[v10] = VALID_CHARS[v7].field_0;\n
            }\n
        }\n
    }\n
    if (a2 == 1)\n
    {\n
        v6 = 0;\n
        for (v5 = 0; v5 < a1; v5 += 1)\n
        {\n
            v4 = cgc_locate_char(a0[v5]);\n
            if (v4 == -1)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            v16 = v5;\n
            if ((v16 >> 31 CONCAT v16) /m 2 >> 32)\n
            {\n
                v0 = &VALID_CHARS->field_0;\n
                v2 = v0[(v4 + offset >> 31 CONCAT v4 + offset) /m LAST_CHAR_POS >> 32];\n
                a0[v5] = v2;\n
            }\n
            else\n
            {\n
                v3 = v4 - offset;\n
                if (v3 < 0)\n
                    v3 = LAST_CHAR_POS - (offset - v4);\n
                a0[v5] = VALID_CHARS[v3].field_0;\n
            }\n
        }\n
    }\n
    v12 = 1;\n
    return v12;\n
}\n
", "4218090:sub_405cea": null, "4218096:cgc_decrypt_packet": "extern unsigned int LAST_CHAR_POS;\n
extern struct_0 *VALID_CHARS;\n
extern unsigned int offset;\n
\n
long long cgc_decrypt_packet(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3e]\n
    char v3;  // [bp-0x3d]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    char v7;  // [bp-0x2e]\n
    char v8;  // [bp-0x2d]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v14;  // eax\n
    unsigned int v16;  // eax\n
\n
    if (a2 == 2)\n
    {\n
        v11 = 0;\n
        for (v10 = 0; v10 < a1; v10 += 1)\n
        {\n
            v9 = cgc_locate_char(a0[v10]);\n
            if (v9 == -1)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            v14 = v10;\n
            if ((v14 >> 31 CONCAT v14) /m 2 >> 32)\n
            {\n
                v1 = &VALID_CHARS->field_0;\n
                v7 = v1[(v9 + offset >> 31 CONCAT v9 + offset) /m LAST_CHAR_POS >> 32];\n
                a0[v10] = v7;\n
            }\n
            else\n
            {\n
                v8 = v9 - offset;\n
                if (v8 < 0)\n
                    v8 = LAST_CHAR_POS - (offset - v9);\n
                a0[v10] = VALID_CHARS[v8].field_0;\n
            }\n
        }\n
    }\n
    if (a2 == 1)\n
    {\n
        v6 = 0;\n
        for (v5 = 0; v5 < a1; v5 += 1)\n
        {\n
            v4 = cgc_locate_char(a0[v5]);\n
            if (v4 == -1)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            v16 = v5;\n
            if (!(v16 >> 31 CONCAT v16) /m 2 >> 32)\n
            {\n
                v0 = &VALID_CHARS->field_0;\n
                v3 = v0[(v4 + offset >> 31 CONCAT v4 + offset) /m LAST_CHAR_POS >> 32];\n
                a0[v5] = v3;\n
            }\n
            else\n
            {\n
                v2 = v4 - offset;\n
                if (v2 < 0)\n
                    v2 = LAST_CHAR_POS - (offset - v4);\n
                a0[v5] = VALID_CHARS[v2].field_0;\n
            }\n
        }\n
    }\n
    v12 = 1;\n
    return v12;\n
}\n
", "4218634:sub_405f0a": null, "4218640:cgc_send_auth_challenge": "extern unsigned int enc_chal;\n
extern unsigned int g_409830;\n
extern char g_409835;\n
\n
long long cgc_send_auth_challenge(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x27]\n
    char v2;  // [bp-0x23]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x11]\n
\n
    enc_chal = 1;\n
    for (v3 = 0; v3 < 5; v3 += 1)\n
    {\n
        (&v4)[v3] = cgc_random_in_range(97, 112);\n
    }\n
    *(&g_409835) = a0;\n
    v0 = 98;\n
    v1 = 103;\n
    cgc_memcpy(&v2, &v4, 5);\n
    cgc_send_packet_new(&v0, 5, 5, a3, a4);\n
    cgc_encrypt_data(&v4, 5, a0);\n
    return cgc_memcpy(&g_409830, &v4, 5);\n
}\n
", "4218818:sub_405fc2": null, "4218832:cgc_send_packet": "char cgc_send_packet(unsigned long long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_write(a0, 16);\n
    return cgc_printf(\"\\n
\", 16, a2, a3, a4);\n
}\n
", "4218878:sub_405ffe": null, "4218880:cgc_set_checksum": "typedef struct struct_0 {\n
    char padding_0[15];\n
    char field_f;\n
} struct_0;\n
\n
long long cgc_set_checksum(struct_0 *a0)\n
{\n
    a0->field_f = cgc_calculateCS(a0, 15);\n
    return a0;\n
}\n
", "4218921:sub_406029": null, "4218928:cgc_calculateCS": "long long cgc_calculateCS(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
\n
    v1 = 0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v1 ^= a0[v0];\n
    }\n
    return v1;\n
}\n
", "4219003:sub_40607b": null, "4219008:cgc_locate_char": "extern unsigned int LAST_CHAR_POS;\n
extern unsigned long long VALID_CHARS;\n
\n
long long cgc_locate_char(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= LAST_CHAR_POS)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((VALID_CHARS + v0)) != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4219109:sub_4060e5": null, "4219120:cgc_check_win": "long long cgc_check_win(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_get_max_road_len() < a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_printf(\"YOU WIN, what is your name?\\n
\", a1, a2, a3, a4);\n
    v0 = cgc_receive_until(&v1, 10, 5);\n
    (&v1)[v0] = 0;\n
    cgc_printf(\"Well done, @s\\n
\", &v1, 5, a3, a4);\n
    v2 = 1;\n
    return v2;\n
}\n
", "4219238:sub_406166": null, "4219248:main": "extern unsigned int current_connection_number;\n
extern unsigned int current_encryption;\n
extern unsigned int current_packet_count_recvd;\n
extern unsigned int current_packet_count_sent;\n
extern unsigned long long enc_chal;\n
extern unsigned int encryption_confirmed;\n
extern unsigned int g_409824;\n
extern unsigned int g_409834;\n
extern char g_409838;\n
extern unsigned int goal_len;\n
extern unsigned int last_connection_number;\n
extern unsigned int seed_length;\n
\n
int main(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x148]\n
    unsigned int v1;  // [bp-0x144]\n
    unsigned int v2;  // [bp-0x140]\n
    unsigned int v3;  // [bp-0x13c]\n
    char v4[10];  // [bp-0x138]\n
    unsigned int v5;  // [bp-0x128]\n
    char v6;  // [bp-0x124]\n
    char v7;  // [bp-0x120]\n
    unsigned int v8;  // [bp-0x11f]\n
    char v9;  // [bp-0x118]\n
    unsigned long v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    void* v14;  // rsi, Other Possible Types: unsigned long, unsigned int\n
    unsigned long v15;  // rdx, Other Possible Types: unsigned int, unsigned long long\n
\n
    v12 = 0;\n
    v11 = a0;\n
    *(&v10) = a1;\n
    cgc_printf(\"go time\\n
\", a1, a2, a3, a4);\n
    current_packet_count_recvd = -1;\n
    current_packet_count_sent = -1;\n
    last_connection_number = -1;\n
    current_connection_number = -1;\n
    current_encryption = -1;\n
    encryption_confirmed = 0;\n
    v5 = 0;\n
    v14 = 0;\n
    v15 = 5;\n
    memset(&v6, 0, 5);\n
    v8 = 0;\n
    enc_chal = *(&v5);\n
    g_409834 = *(&v7);\n
    g_409838 = *(&v8 + 3);\n
    g_409824 = -1;\n
    v3 = 0;\n
    v2 = cgc_seed_prng(\"go time\\n
\", 0, 5, a3, a4);\n
    if (!v2)\n
    {\n
        cgc_printf(\"didn't succeed in seeding prng()\", 0, 5, a3, a4);\n
        v12 = 1;\n
        return v12;\n
    }\n
    for (seed_length = v2; true; v3 += 1)\n
    {\n
        cgc_printf(\"ready for next packet\\n
\", v14, v15, a3, a4);\n
        if (cgc_check_win(goal_len, v14, v15, a3, a4) == 1)\n
        {\n
            cgc_printf(\"Good game\\n
\", v14, v15, a3, a4);\n
            v12 = 1;\n
            return v12;\n
        }\n
        else if (v3 >= 3)\n
        {\n
            cgc_printf(\"good bye\\n
\", v14, v15, a3, a4);\n
            v12 = 0;\n
            return v12;\n
        }\n
        else\n
        {\n
            v15 = 255;\n
            v1 = cgc_receive_until(&v9, 10, 255);\n
            v14 = \"1212\";\n
            if (!cgc_strcmp(&v9, \"1212\"))\n
            {\n
                cgc_printf(\"good bye\\n
\", \"1212\", 255, a3, a4);\n
                v12 = 1;\n
                return v12;\n
            }\n
            else if (v1 != 16)\n
            {\n
                cgc_printf(\"not proper packet length: got @d, should be @d\\n
\", v1, 16, a3, a4);\n
                cgc_printf(\"I got: @s\\n
\", &v9, 16, a3, a4);\n
            }\n
            else\n
            {\n
                v14 = &v9;\n
                v15 = v1;\n
                if (cgc_populate_packet(v4, &v9, v15, a3, a4))\n
                {\n
                    v0 = cgc_validate_packet(v4, *(&v14), v15, a3, a4);\n
                    if (!v0)\n
                    {\n
                        cgc_printf(\"skipping packet processing due to malformed packet\\n
\", *(&v14), *(&v15), a3, a4);\n
                    }\n
                    else\n
                    {\n
                        v0 = cgc_packet_handler(v4, &v9, v15, a3, a4);\n
                        if (v0)\n
                        {\n
                            if (v0 == 2)\n
                            {\n
                                cgc_printf(\"exiting main loop\\n
\", *(&v14), *(&v15), a3, a4);\n
                                v12 = 1;\n
                                return v12;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4220012:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:memset": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_deallocate": null, "5242944:cgc_log10": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}