{"4276224:_init": "extern struct_0 *g_4222b8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_4222b8;\n
    if (g_4222b8)\n
        v1 = g_4222b8();\n
    return v1;\n
}\n
", "4276256:sub_414020": "extern unsigned long long g_4222d0;\n
\n
long long sub_414020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_4222d0;\n
    goto *(4334296);\n
}\n
", "4276268:sub_41402c": null, "4276272:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4276288:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4276304:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4276320:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4276336:_Znwm": "// attributes: PLT stub\n
int operator new(unsigned long a0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4276352:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4276368:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4276384:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4334240);\n
}\n
", "4276400:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4276437:sub_4140d5": null, "4276438:sub_4140d6": null, "4276448:deregister_tm_clones": "extern char __TMC_END__;\n
extern unsigned long long g_4222b0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__TMC_END__;\n
}\n
", "4276489:sub_414109": null, "4276496:register_tm_clones": "extern unsigned long long g_4222c0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4276553:sub_414149": null, "4276560:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned long long g_4222a0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__TMC_END__)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_4222a0)\n
    {\n
        __TMC_END__ = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4276613:sub_414185": null, "4276617:sub_414189": null, "4276624:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4276633:sub_414199": null, "4276640:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (!v4)\n
        return 0;\n
    cgc_memset(v4, 0, v3);\n
    return v4;\n
}\n
", "4276703:sub_4141df": null, "4276704:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4276723:sub_4141f3": null, "4276736:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4276755:sub_414213": null, "4276768:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4276787:sub_414233": null, "4276800:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4276819:sub_414253": null, "4276832:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4276851:sub_414273": null, "4276864:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4276883:sub_414293": null, "4276896:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4276915:sub_4142b3": null, "4276928:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4276947:sub_4142d3": null, "4276960:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4276979:sub_4142f3": null, "4276992:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4277011:sub_414313": null, "4277024:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4292624];\n
    char field_418010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4277069:sub_41434d": null, "4277072:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4292624];\n
    char field_418010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4277096:sub_414368": null, "4277104:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4292624];\n
    char field_418010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4277154:sub_4143a2": null, "4277168:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4292624];\n
    char field_418010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4277192:sub_4143c8": null, "4277200:__cxa_pure_virtual": "long long __cxa_pure_virtual()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate(v3);\n
    return cgc_exit(v3, v4, v5, v6, v7, v8);\n
}\n
", "4277216:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4277232:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    void* v4;  // rax, Other Possible Types: unsigned long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rbp\n
    void* v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rbx\n
    unsigned long long v10;  // rsi\n
    unsigned long long v11;  // rax\n
\n
    v0 = v2;\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        if (v5)\n
        {\n
            v6 = a0->padding_c;\n
            if (v6 != v3)\n
            {\n
                do\n
                {\n
                    *(&a0->padding_0[v3 + 32]) = v5[*(&a0->padding_0[v3 + 32])];\n
                    v3 += 1;\n
                } while (v6 != v3);\n
            }\n
        }\n
        v7 = (a0->padding_c - a0->field_8);\n
        v8 = 0;\n
        while (true)\n
        {\n
            v9 = v8;\n
            if (v8 >= v7)\n
                break;\n
            v11 = cgc_transmit(a0, v10, v6, v8);\n
            v8 = (!v11 ? 0 : v0) + v9;\n
            if (v11)\n
                break;\n
        }\n
        v4 = -(v9 < v7);\n
    }\n
    *(&a0->field_8) = 0;\n
    return v4;\n
}\n
", "4277350:sub_414466": null, "4277436:sub_4144bc": null, "4277440:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x38]\n
    struct_0 *v2;  // rbx\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    char *v4;  // rdi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v7;  // rax\n
    void* v9;  // r14, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v3 = a0->field_8;\n
    if (v3 != -1)\n
    {\n
        if (a0->field_4 != 1)\n
        {\n
            v4 = a0->field_10;\n
            if (v4)\n
            {\n
                v5 = v2->padding_c;\n
                if (v5 != v3)\n
                {\n
                    do\n
                    {\n
                        *(&v2->padding_0[v3 + 32]) = v4[*(&v2->padding_0[v3 + 32])];\n
                        v3 += 1;\n
                    } while (v5 != v3);\n
                }\n
            }\n
            v9 = 0;\n
            while (v9 < (v2->padding_c - v2->field_8))\n
            {\n
                v7 = cgc_transmit(v4, a1, v5, rcx<8>);\n
                v9 += (!v7 ? 0 : *(&v0));\n
                if (v7)\n
                    break;\n
            }\n
        }\n
        *(&v2->field_8) = 0;\n
    }\n
    v2->field_8 = -(a1 < 1);\n
    *(&v2->padding_c[0]) = 0;\n
    return -(a1 < 1);\n
}\n
", "4277606:sub_414566": null, "4277670:sub_4145a6": null, "4277680:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4277744:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // r13\n
    unsigned long long v4;  // r14\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long v8;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rax\n
    void* v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v11;  // eax\n
    char *v13;  // rbx\n
    char *v14;  // rax\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a1;\n
    if (a2->field_8 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v8);\n
        if (!v6)\n
        {\n
            v8 = v0;\n
            if (v8)\n
            {\n
                *(&a2->padding_c[0]) = v8;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rcx<8>, 0x20<8>), Shl(rcx<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v7 = a2->field_18;\n
                    if (v7)\n
                    {\n
                        a2 = 0;\n
                        do\n
                        {\n
                            v3[1].padding_0[a2] = v7[v3[1].padding_0[a2]];\n
                            a2 += 1;\n
                        } while (v8 != a2);\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v9 = v3->field_8;\n
    if (v9 != -1)\n
    {\n
        a2 = *(&v3->padding_c[0]) - v9;\n
        if (a2 > a1)\n
            a2 = a1;\n
        v0 = a2;\n
        a1 = &v3->padding_0[v9 + 32];\n
        cgc_memcpy();\n
        v10 = v0;\n
        v11 = v3->field_8 + v10;\n
        v3->field_8 = v11;\n
        if (v11 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v10 < v4))\n
            goto LABEL_41473d;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (0 >= a1)\n
        {\n
LABEL_41473d:\n
            return v10;\n
        }\n
    }\n
    while (true)\n
    {\n
        v13 = a0 + v10;\n
        v8 = cgc_receive(a0, a1, a2, v8);\n
        if (v8)\n
            return -1;\n
        a0 = v0;\n
        if (!a0)\n
            return -1;\n
        v14 = v3->field_18;\n
        if (v14)\n
        {\n
            a2 = 0;\n
            do\n
            {\n
                v13[a2] = v14[v13[a2]];\n
                a2 += 1;\n
            } while (a0 != a2);\n
        }\n
        v10 += a0;\n
        if (v10 >= v4)\n
            return v10;\n
    }\n
}\n
", "4277966:sub_4146ce": null, "4278095:sub_41474f": null, "4278096:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3)\n
{\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v2;  // r12\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
            {\n
                a3 = 1;\n
            }\n
            else\n
            {\n
                a3 = 2;\n
                if (v3 != a2)\n
                {\n
                    *((a0 + v1)) = v3;\n
                    a3 = 0;\n
                }\n
            }\n
            if (a3)\n
                break;\n
            v1 += 1;\n
            if (v2 == v1)\n
                goto LABEL_4147a9;\n
        }\n
        if (!(a3 == 2))\n
            goto LABEL_4147c8;\n
    }\n
LABEL_4147a9:\n
    if (v1 != v2)\n
    {\n
LABEL_4147c1:\n
        *((a0 + v1)) = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_4147c1;\n
    }\n
LABEL_4147c8:\n
    return -1;\n
}\n
", "4278158:sub_41478e": null, "4278235:sub_4147db": null, "4278240:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_0 *v3;  // rbx\n
    unsigned int v4;  // eax\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edx\n
    unsigned long long v17;  // r8\n
    char *v18;  // rax\n
    char *v19;  // rdx\n
    void* v20;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v21;  // rax\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        if (v13)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v18 = a0->field_18;\n
            if (!v18)\n
                return v0;\n
            v0 = v18[v0];\n
        }\n
    }\n
    else\n
    {\n
        if (v4 == *(&a0->padding_c[0]))\n
        {\n
            *(&a0->field_8) = 0;\n
            v15 = cgc_receive(a0, v9, v10, v11);\n
            v16 = -1;\n
            if (!v15)\n
            {\n
                v17 = *(&v1);\n
                v16 = -1;\n
                if (v17)\n
                {\n
                    *(&a0->padding_c[0]) = v17;\n
                    if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
                    {\n
                        v19 = a0->field_18;\n
                        if (v19)\n
                        {\n
                            v20 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[v20] = v19[v3[1].padding_0[v20]];\n
                                v20 += 1;\n
                            } while (v17 != v20);\n
                        }\n
                    }\n
                    v16 = v17;\n
                }\n
            }\n
            if (v16 < 0)\n
                return 4294967295;\n
        }\n
        v21 = v3->field_8;\n
        v3->field_8 = v21 + 1;\n
        return v3[1].padding_0[v21];\n
    }\n
}\n
", "4278471:sub_4148c7": null, "4278480:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long v1;  // rax\n
\n
    malloc_free(&g_heap, a0);\n
    return v1;\n
}\n
", "4278498:sub_4148e2": null, "4278512:cgc_fwrite": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
long long cgc_fwrite(unsigned long a0, unsigned long long a1, struct_1 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x450]\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    char v3;  // [bp-0x438], Other Possible Types: unsigned long long\n
    struct_1 *v5;  // rbx\n
    unsigned long v6;  // r12, Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rax\n
    char *v8;  // r15\n
    unsigned long v9;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r14\n
    unsigned long v11;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v12;  // rsi\n
    struct_0 *v13;  // rdi\n
    unsigned long long v14;  // rdx\n
    unsigned long v15;  // rax\n
    void* v16;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // r12\n
    unsigned long long v18;  // rax\n
    void* v19;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v20;  // rdx, Other Possible Types: unsigned long long\n
    void* v21;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rbx\n
    unsigned long long v23;  // rax\n
    unsigned long long v25;  // r15\n
\n
    v5 = a2;\n
    v6 = a1;\n
    v0 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v7 = a2->field_c;\n
            if (v7 + a1 < 0x400)\n
            {\n
                v9 = 0;\n
                if (0 >= a1)\n
                    return 0;\n
            }\n
            else\n
            {\n
                v9 = 0x400 - v7;\n
                cgc_memcpy(&a2->padding_0[v7 + 32], v0, v9);\n
                v5->field_c = v5->field_c + v9;\n
                cgc_fflush(a2);\n
                if (v9 >= a1)\n
                    return 0x400 - v7;\n
            }\n
            v25 = a1 - v9;\n
            cgc_memcpy(&v5->padding_0[v5->field_c + 32], v0 + v9, v25);\n
            v5->field_c = v5->field_c + v25;\n
LABEL_414ade:\n
            return v6;\n
        }\n
    }\n
    v8 = a2->field_10;\n
    v21 = 0;\n
    if (v8)\n
    {\n
        v1 = a1;\n
        while (v21 < v6)\n
        {\n
            v10 = v21;\n
            v11 = v6 - v21;\n
            if (0x400 <= v11)\n
                v11 = 0x400;\n
            v12 = v0 + v21;\n
            v13 = &v3;\n
            v14 = v11;\n
            cgc_memcpy();\n
            if (v11)\n
            {\n
                v15 = 0;\n
                do\n
                {\n
                    *(&v3 + v15) = v8[*(&v3 + v15)];\n
                    v15 += 1;\n
                } while (v11 != v15);\n
            }\n
            v16 = 0;\n
            do\n
            {\n
                v17 = v16;\n
                if (v11 <= v16)\n
                {\n
                    v19 = v11;\n
                    break;\n
                }\n
                v18 = cgc_transmit(&v3, v12);\n
                v19 = 0;\n
                v20 = 0;\n
                if (!v18)\n
                    v20 = *(&v2);\n
                v16 = v20 + v17;\n
            } while (!v18);\n
            v21 = v19 + v10;\n
            tmp_4 = v17;\n
            v6 = v1;\n
            if (v11 > tmp_4)\n
            {\n
                if (v10 < v6)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        while (v21 < a1)\n
        {\n
            v22 = v21;\n
            v23 = cgc_transmit(a2, a1, a2, v21);\n
            v21 = (!v23 ? 0 : *(&v3)) + v22;\n
            if (v23)\n
            {\n
                if (v22 < a1)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    goto LABEL_414ade;\n
}\n
", "4278596:sub_414944": null, "4278731:sub_4149cb": null, "4278879:sub_414a5f": null, "4279030:sub_414af6": null, "4279040:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    unsigned long v5;  // rbx\n
    unsigned long v8;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rdx, Other Possible Types: char, unsigned long long\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rax\n
    unsigned long v12;  // rdi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned long v15;  // rdx\n
    char v16;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v5 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v5;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v9 = a1[0];\n
    v8 = 826981510;\n
    if (v3[0])\n
    {\n
        v10 = 1;\n
        do\n
        {\n
            v8 = __ROL__((v8 + v8 * 36) ^ v9, 13);\n
            v9 = v3[v10];\n
            v10 = v10 + 1;\n
        } while (v9);\n
    }\n
    v11 = 0;\n
    do\n
    {\n
        *((v5 + v11)) = v11;\n
        v11 += 1;\n
    } while (v11 != 0x100);\n
    v12 = 255;\n
    while (true)\n
    {\n
        v13 = v8;\n
        v14 = v8 * 3;\n
        v15 = (0 CONCAT v13) /m v12 >> 32;\n
        v8 = v14 / 0x200000 ^ __ROL__(v14, 13);\n
        v16 = *((v5 + v12));\n
        *((v5 + v12)) = *((v5 + v15));\n
        *((v5 + v15)) = v16;\n
        v12 -= 1;\n
    }\n
}\n
", "4279273:sub_414be9": null, "4279280:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4279298:sub_414c02": null, "4279312:cgc_malloc_alloc": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    char padding_8[8];\n
    struct struct_3 *field_10;\n
    char padding_18[1016];\n
    struct struct_2 *field_410;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_1 *field_18;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_5 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_5;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
long long cgc_malloc_alloc(struct_2 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // r15\n
    unsigned long v3;  // rsi, Other Possible Types: unsigned long long\n
    struct_2 *v4;  // r15\n
    struct_2 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rbx\n
    unsigned long v10;  // r15, Other Possible Types: unsigned long long\n
    void* v11;  // rbx, Other Possible Types: unsigned long, struct_1 *\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v13;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v15;  // rbp\n
    unsigned long long v16;  // r15\n
    struct_4 *v17;  // rax\n
    unsigned long long v18;  // rbx\n
    unsigned long v19;  // rcx\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rax\n
    struct_0 *v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_5 *v24;  // rax\n
    struct_0 *v25;  // rdx\n
    unsigned long long v26;  // rax\n
    struct_2 *v27;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v28;  // rax\n
    struct_0 *v29;  // rax\n
    unsigned long long v30;  // r8\n
    unsigned long long v31;  // r9\n
    unsigned long long v32;  // rax\n
\n
    if (a1 > 2147483647)\n
    {\n
LABEL_414c25:\n
        return 0;\n
    }\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
    {\n
        v3 = 4;\n
    }\n
    else if (v2 <= 15)\n
    {\n
        v3 = v2;\n
    }\n
    else\n
    {\n
        if (v2 > 131071)\n
        {\n
            if (!cgc_allocate(a0, a1, v7))\n
            {\n
                v11 = *(&v0);\n
                *(v11) = a0;\n
                *((v11 + 8)) = v2 + 4111 & -0x1000;\n
                goto LABEL_414f45;\n
            }\n
            else\n
            {\n
                return 0;\n
            }\n
        }\n
        v4 = v2 + 31;\n
        v5 = v4 & -0x10;\n
        if (!(v4 & -0x10))\n
        {\n
            v10 = 4294967295;\n
        }\n
        else if (v5 <= 0x200)\n
        {\n
            v10 = (v4 >> 4) + 2;\n
        }\n
        else if (v5 <= 0x1200)\n
        {\n
            v10 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
        }\n
        else\n
        {\n
            v10 = 130;\n
            if (v5 <= 0x20000)\n
                v10 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
        }\n
        if (v10 <= 130)\n
        {\n
            do\n
            {\n
                v11 = (&a0->field_0)[v10];\n
                if (v11)\n
                {\n
                    while (*((v11 + 8)) < v5)\n
                    {\n
                        v11 = *((v11 + 24));\n
                        if (!v11)\n
                            goto LABEL_414d3f;\n
                    }\n
                }\n
LABEL_414d3f:\n
                v10 += 1;\n
            } while (v10 != 131);\n
            v10 = 131;\n
        }\n
        v11 = 0;\n
        if (v10 != 131)\n
        {\n
LABEL_414e49:\n
            v19 = *((v11 + 8));\n
            if (!(v19 & 1))\n
            {\n
                cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", v11);\n
            }\n
            else\n
            {\n
                v23 = v19 & -2;\n
                *((v11 + 8)) = v23;\n
                v24 = *((v11 + 16));\n
                if (v24)\n
                    v24->field_18 = *((v11 + 24));\n
                v25 = *((v11 + 24));\n
                if (v25)\n
                    v25->field_10 = v24;\n
                if ((&a0->field_0)[v10] == v11)\n
                    (&a0->field_0)[v10] = *((v11 + 24));\n
                *((v11 + 16)) = 0;\n
                v26 = v23 - v5;\n
                if (v26 < 33)\n
                {\n
LABEL_414f45:\n
                    v9 = v11 + 16;\n
                    return v9;\n
                }\n
                v13 = v11;\n
                a1 = v11 + v5;\n
                *((v11 + 8)) = v5;\n
                *((v11 + &v5->field_0)) = v5;\n
                *(&v5->padding_8[v11]) = v26;\n
                *((v23 + v11)) = v26;\n
                if (v26 <= 0x200)\n
                {\n
                    v27 = (v26 >> 4) + 2;\n
                }\n
                else if (v26 <= 0x1200)\n
                {\n
                    v27 = (v26 + 0x7ffffffe00 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v19 = 130;\n
                    if (!(v26 <= 0x20000))\n
                        goto LABEL_414f11;\n
                    v27 = (v26 + 0x7ffffffee00 >> 11) + 66;\n
                }\n
                v19 = v27;\n
LABEL_414f11:\n
                v28 = *((a1 + 8));\n
                if (!(v28 & 1))\n
                {\n
                    *((a1 + 8)) = v28 | 1;\n
                    *((a1 + 16)) = 0;\n
                    *((a1 + 24)) = (&a0->field_0)[v19];\n
                    (&a0->field_0)[v19] = a1;\n
                    v29 = *((a1 + 24));\n
                    if (v29)\n
                    {\n
                        v29->field_10 = a1;\n
                        goto LABEL_414f45;\n
                    }\n
                }\n
            }\n
LABEL_414f69:\n
            cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
            v32 = cgc_tiny_alloc(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a1, v13, v19, v30, v31);\n
            return v32;\n
        }\n
        else\n
        {\n
            v12 = 0;\n
            if (!cgc_allocate(a0, a1, v13))\n
            {\n
                v15 = *(&v0);\n
                v16 = v15 + 1048575;\n
                v12 = v16 & -0x100000;\n
                if (v12 > v15)\n
                    cgc_deallocate(a0);\n
                if ((v15 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *(1048 + &a0->field_0 + (v16 >> 20)) = 2;\n
            }\n
            if (v12)\n
            {\n
                v17 = v12 + 19;\n
                a1 = v17 & -0x10;\n
                a1->field_0 = 0;\n
                v18 = (v12 - a1) + 0x100000;\n
                v19 = v18 - 32;\n
                a1->field_8 = v19;\n
                v20 = v17 & -0x10;\n
                *((v18 + v20 - 32)) = v19;\n
                *((v18 + v20 - 24)) = 0;\n
                v21 = a1->field_8;\n
                if (!(!(v21 & 1)))\n
                    goto LABEL_414f69;\n
                a1->field_8 = v21 | 1;\n
                a1->field_10 = 0;\n
                a1->field_18 = &a0->field_410->field_0;\n
                a0->field_410 = &a1;\n
                v22 = a1->field_18;\n
                if (v22)\n
                    v22->field_10 = a1;\n
                v11 = a0->field_410;\n
                v10 = 130;\n
                goto LABEL_414e49;\n
            }\n
        }\n
        goto LABEL_414c25;\n
    }\n
    v9 = cgc_tiny_alloc(a0, v3);\n
    return v9;\n
}\n
", "4280192:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned int field_1430;\n
    char padding_1434[4];\n
    struct struct_2 *field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned short v3;  // bx\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    void* v7;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rbp\n
    unsigned long long v11;  // r13\n
    unsigned long long v12;  // r12\n
    unsigned long long *v13;  // rax, Other Possible Types: unsigned long\n
    unsigned short *v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rdx\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rbx\n
    unsigned int v19;  // ecx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v13 = *((a0 + v4 * 8));\n
    if (v13)\n
    {\n
        *((a0 + v5 * 8)) = *(v13);\n
        return v13;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (!v6)\n
    {\n
        if (!*((a0 + 5168)))\n
        {\n
            v7 = 0;\n
            if (!cgc_allocate(a0, a1, v8))\n
            {\n
                v10 = v0;\n
                v11 = v10 + 1048575;\n
                v12 = v11 & -0x100000;\n
                if (v12 > v10)\n
                    cgc_deallocate(a0);\n
                if ((v10 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *((a0 + (v11 >> 20) + 1048)) = 1;\n
                v7 = v12;\n
            }\n
            *((a0 + 5168)) = v7;\n
            if (!v7)\n
                return 0;\n
            *((a0 + 5176)) = 0;\n
        }\n
        v14 = *((a0 + 5168));\n
        v15 = *((a0 + 5176));\n
        v6 = v14 + v15;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v14 + v15)) = v3;\n
        *((2 + v14 + v15)) = v3;\n
        v16 = v15 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
    }\n
    v17 = *((v6 + 2));\n
    v13 = v6 + v17;\n
    v18 = a1 + v17;\n
    *((v6 + 2)) = v18;\n
    v19 = *(v6);\n
    if (v19 + v18 < 4097)\n
        return v13;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4280624:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r8\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // r9\n
    unsigned long v10;  // r11\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rsi\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r10\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rax\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rdx\n
    unsigned long v26;  // rdi\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_415508;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                {\n
                    cgc_deallocate(a0, a1);\n
                    return v0;\n
                }\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v21 = a1 - 16;\n
        v7 = *((v21 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_415508;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_415508;\n
        }\n
        else\n
        {\n
            v8 = *(v21);\n
            v9 = v21;\n
            v10 = v21 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (v10 && !((*((v10 + 8)) & -2) == v8))\n
                goto LABEL_41552b;\n
            v9 = v21 + v7;\n
            if (*(v9) == v7)\n
            {\n
                if (v10)\n
                {\n
                    v15 = *((v10 + 8));\n
                    if ((v15 & 1))\n
                    {\n
                        v16 = v15 & -2;\n
                        if (v16 <= 15)\n
                        {\n
                            v17 = v15 / 4 - 1;\n
                        }\n
                        else if (v16 <= 0x200)\n
                        {\n
                            v17 = (v15 >> 4) + 2;\n
                        }\n
                        else if (v16 <= 0x1200)\n
                        {\n
                            v17 = (0x7ffffffe00 + v16 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v17 = 130;\n
                            if (v16 <= 0x20000)\n
                                v17 = (0x7ffffffee00 + v16 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v16;\n
                        v18 = *((v10 + 16));\n
                        if (v18)\n
                            *((v18 + 24)) = *((v10 + 24));\n
                        v19 = *((v10 + 24));\n
                        if (v19)\n
                            *((v19 + 16)) = v18;\n
                        if (*((v4 + (v17 << 3))) == v10)\n
                            *((v4 + v17 * 8)) = *((v10 + 24));\n
                        *((v10 + 16)) = 0;\n
                        v20 = v16 + *((v21 + 8));\n
                        *((v10 + 8)) = v20;\n
                        *(v9) = v20;\n
                        v21 = v10;\n
                    }\n
                }\n
                v22 = *((v9 + 8));\n
                if ((v22 & 1))\n
                {\n
                    v23 = v22 & -2;\n
                    if (v23 <= 15)\n
                    {\n
                        v24 = v22 / 4 - 1;\n
                    }\n
                    else if (v23 <= 0x200)\n
                    {\n
                        v24 = (v22 >> 4) + 2;\n
                    }\n
                    else if (v23 <= 0x1200)\n
                    {\n
                        v24 = (0x7ffffffe00 + v23 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v24 = 130;\n
                        if (v23 <= 0x20000)\n
                            v24 = (0x7ffffffee00 + v23 >> 11) + 66;\n
                    }\n
                    *((v9 + 8)) = v23;\n
                    v25 = *((v9 + 16));\n
                    if (v25)\n
                        *((v25 + 24)) = *((v9 + 24));\n
                    v26 = *((v9 + 24));\n
                    if (v26)\n
                        *((v26 + 16)) = v25;\n
                    if (*((v4 + (v24 << 3))) == v9)\n
                        *((v4 + v24 * 8)) = *((v9 + 24));\n
                    *((v9 + 16)) = 0;\n
                    v27 = v23 + *((v21 + 8));\n
                    *((v21 + 8)) = v27;\n
                    *((v21 + v27)) = v27;\n
                }\n
                v28 = *((v21 + 8));\n
                if (v28 <= 15)\n
                {\n
                    v3 = v28 / 4 - 1;\n
                }\n
                else if (v28 <= 0x200)\n
                {\n
                    v3 = (v28 >> 4) + 2;\n
                }\n
                else if (v28 <= 0x1200)\n
                {\n
                    v3 = (0x7ffffffe00 + v28 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v3 = 130;\n
                    if (v28 <= 0x20000)\n
                        v3 = (0x7ffffffee00 + v28 >> 11) + 66;\n
                }\n
                if ((v28 & 1))\n
                {\n
                    cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                }\n
                else\n
                {\n
                    *((v21 + 8)) = v28 | 1;\n
                    *((v21 + 16)) = 0;\n
                    *((v21 + 24)) = *((v4 + v3 * 8));\n
                    *((v4 + v3 * 8)) = v21;\n
                    v29 = *((v21 + 24));\n
                    if (!v29)\n
                        return v0;\n
                    *((v29 + 16)) = v21;\n
                    return v0;\n
                }\n
LABEL_41552b:\n
                v13 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                v14 = v10;\n
LABEL_415535:\n
                cgc_heap_error(v13, v14, v3);\n
                return cgc_malloc_size(v13, v14, v3, v3, v4, v9);\n
            }\n
            goto LABEL_415511;\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_415508:\n
    cgc_heap_error(v11, v3);\n
LABEL_415511:\n
    v13 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v14 = v9;\n
    goto LABEL_415535;\n
}\n
", "4281664:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4281708:sub_41556c": null, "4281712:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v4;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_415581:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_4155f9;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_4155f9;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_4155f9:\n
                v4 = cgc_malloc_alloc(a0, a2);\n
                if (v4)\n
                {\n
                    cgc_memcpy(v4, a1);\n
                    malloc_free(a0, a1);\n
                    return v4;\n
                }\n
                goto LABEL_415581;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4281962:sub_41566a": null, "4281968:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4282144:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4282180:sub_415744": null, "4282192:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4282238:sub_41577e": null, "4282240:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4282273:sub_4157a1": null, "4282288:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_4;  // tmp #4\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        do\n
        {\n
            a0[1 + a2] = *((a1 + a2 - 1));\n
            tmp_4 = a2;\n
            a2 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v1[v2] = *((a1 + v2));\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
}\n
", "4282353:sub_4157f1": null, "4282368:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return a0;\n
    v1 = 0;\n
    do\n
    {\n
        *((a0 + v1)) = a1;\n
        v1 += 1;\n
    } while (a2 != v1);\n
    return a0;\n
}\n
", "4282398:sub_41581e": null, "4282400:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned int v32;  // ebp\n
    unsigned long long v33;  // rax\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    v32 = cgc_stdout->field_8;\n
    if (v32 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v33 = cgc__vsfprintf();\n
    if (v32 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v33;\n
    }\n
    return v33;\n
}\n
", "4282608:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = cgc_stdout->field_8;\n
    if (v1 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v2 = cgc__vsfprintf();\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4282678:sub_415936": null, "4282688:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned int v30;  // ebp\n
    unsigned long long v31;  // rax\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    v30 = a0->field_8;\n
    if (v30 == -1)\n
        a0->field_8 = 0;\n
    v31 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    if (v30 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v31;\n
    }\n
    return v31;\n
}\n
", "4282890:sub_415a0a": null, "4282896:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = a0->field_8;\n
    if (v1 == -1)\n
        a0->field_8 = 0;\n
    v2 = cgc__vsfprintf(a1, a2, a0, 0);\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4282965:sub_415a55": null, "4282976:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4283129:sub_415af9": null, "4283136:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4283155:sub_415b13": null, "4283168:cgc__vsfprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[17];\n
    char field_12;\n
    char field_13;\n
} struct_1;\n
\n
typedef struct struct_5 {\n
    char field_-1;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char field_-1;\n
    char field_0;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
long long cgc__vsfprintf(struct struct_0 **a0, struct_2 *a1, unsigned long a2, char *a3)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned long long v0;  // [bp-0x1c8]\n
    int tmp_70;  // tmp #70\n
    int tmp_50;  // tmp #50\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    struct_1 *v1;  // [bp-0xa1]\n
    struct struct_0 **v2;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_1 *v3;  // [bp-0x98], Other Possible Types: char\n
    struct_2 *v4;  // [bp-0x90]\n
    unsigned long v5;  // [bp-0x88]\n
    unsigned long v6;  // [bp-0x80]\n
    char v7;  // [bp-0x78]\n
    char v8;  // [bp-0x77]\n
    char v9;  // [bp-0x66]\n
    char v10;  // [bp-0x65]\n
    char *v12;  // r14\n
    void* v13;  // r12\n
    struct struct_0 **v14;  // rax, Other Possible Types: char, unsigned long\n
    struct struct_0 **v15;  // rax\n
    char *v16;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    struct struct_0 **v17;  // r15\n
    unsigned int v18;  // eax\n
    struct struct_0 **v19;  // rcx\n
    unsigned int v20;  // esi\n
    char v21;  // r8b\n
    struct struct_0 **v22;  // rcx\n
    struct struct_0 **v23;  // dl\n
    unsigned long long v24;  // rcx\n
    unsigned long long v25;  // rsi\n
    struct_2 *v26;  // rax\n
    unsigned long long v27;  // rcx\n
    struct_2 *v28;  // rdx\n
    unsigned long long v29;  // rcx\n
    struct_2 *v30;  // rsi\n
    unsigned long long v31;  // rcx\n
    struct_2 *v32;  // rax\n
    unsigned long long v33;  // rcx\n
    struct_1 *v34;  // rbp\n
    unsigned int *v37;  // rsi, Other Possible Types: unsigned long\n
    unsigned int *v38;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v40;  // rax, Other Possible Types: unsigned long\n
    unsigned long v42;  // r10, Other Possible Types: unsigned long long\n
    struct_1 *v43;  // rbp\n
    char *v44;  // rbp\n
    unsigned long long v45;  // rcx\n
    struct_4 *v46;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v47;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rbp\n
    struct_1 *v49;  // rdx, Other Possible Types: unsigned long\n
    struct_1 *v50;  // rdx, Other Possible Types: unsigned long\n
    struct_5 *v51;  // rsi, Other Possible Types: unsigned long\n
    struct_1 *v52;  // rbp, Other Possible Types: unsigned long\n
    struct struct_1 **v53;  // rax, Other Possible Types: unsigned long, unsigned long long, char\n
    struct_1 *v54;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v55;  // rbp\n
    unsigned long long v56;  // rbp\n
    unsigned long v57;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v58;  // rcx\n
    unsigned int v59;  // ebp\n
\n
    v12 = a3;\n
    v13 = a2;\n
    v4 = a1;\n
    v2 = a0;\n
    v6 = 20 + -0x1 * &v7;\n
    v16 = 0;\n
    while (true)\n
    {\n
        v14 = v2;\n
        v2 = v14 + 1;\n
        *(&v14) = *(v14);\n
        if (!*(&v14))\n
        {\n
LABEL_416109:\n
            if (v16 < 2147483647)\n
                goto LABEL_416122;\n
            if (v16 != -1)\n
                return v16;\n
LABEL_416118:\n
            cgc__terminate(a0);\n
LABEL_416122:\n
            if (v12)\n
            {\n
                v12[v16] = 0;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            while (v14 != 37)\n
            {\n
                if (v16 < 2147483647)\n
                {\n
                    *(&v1) = v14;\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                        v12[v16] = v1;\n
                }\n
                else if (v16 == -1)\n
                {\n
                    goto LABEL_416118;\n
                }\n
                v16 += 1;\n
                v15 = v2;\n
                v2 = v15 + 1;\n
                v14 = *(v15);\n
                if (!v14)\n
                    goto LABEL_415b60;\n
            }\n
            v17 = v2;\n
            v2 = v17 + 1;\n
            v18 = *(v17);\n
            if (v18 == 48)\n
            {\n
                v3 = 48;\n
            }\n
            else\n
            {\n
                *(&v3) = 32;\n
                if (v18 != 32)\n
                {\n
                    if (!v18)\n
                        goto LABEL_415b60;\n
                    v2 = v17;\n
                }\n
            }\n
            a0 = v2;\n
            if (*(a0) - 48 > 9)\n
                v53 = 0;\n
            else\n
                v53 = cgc_strtoul(a0, &v2, 10);\n
            v19 = v2;\n
            v2 = v19 + 1;\n
            v20 = *(v19);\n
            if (v20 == 108)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 108)\n
                {\n
                    v2 = v19 + 2;\n
                    v21 = 0;\n
                }\n
            }\n
            else if (v20 == 104)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 104)\n
                    v2 = v19 + 2;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    goto LABEL_415b60;\n
                v2 = v19;\n
                v21 = 1;\n
            }\n
            v22 = v2;\n
            v2 = v22 + 1;\n
            v23 = *(v22);\n
            v24 = *(v22);\n
            v25 = v24 - 88;\n
            if (v25 > 32)\n
            {\n
                v34 = v2 - v17;\n
                if (v24)\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v50 = 2147483647 - v16;\n
                        if (v50 > v34)\n
                            v50 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v50;\n
                            cgc_fwrite(v17, v50, v13);\n
                            v50 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(&v12[v16], v17, v50);\n
                    }\n
                    v56 = &(&v34->field_0)[v16];\n
                    *(&v53) = 1;\n
                    tmp_4 = v16;\n
                    v16 = v56;\n
                    if (v56 < tmp_4)\n
                        goto LABEL_416118;\n
                    goto LABEL_415b62;\n
                }\n
                else\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v49 = 2147483647 - v16;\n
                        if (v49 > v34)\n
                            v49 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v49;\n
                            cgc_fwrite(v17, v49, v13);\n
                            v49 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(&v12[v16], v17, v49);\n
                    }\n
                    v55 = &(&v34->field_0)[v16];\n
                    if (v16 >= v16)\n
                    {\n
                        v53 = 0;\n
                        v16 = v55;\n
                        goto LABEL_415b62;\n
                    }\n
                    goto LABEL_416118;\n
                }\n
            }\n
            v0 = 4831842305;\n
            if (!((*(&v0 + ((v25 & 63) >> 3)) >> (v25 & 63 & 7)) & 1))\n
            {\n
                if (v25 == 11)\n
                {\n
                    v26 = v4;\n
                    v27 = v26->field_0;\n
                    if (v27 <= 40)\n
                    {\n
                        v53 = v27 + v26->field_10;\n
                        v26->field_0 = v27 + 8;\n
                        if (!(v16 < 2147483647))\n
                            goto LABEL_415ff6;\n
                    }\n
                    else\n
                    {\n
                        v53 = v26->field_8;\n
                        v26->field_8 = v53 + 8;\n
                        if (v16 >= 2147483647)\n
                        {\n
LABEL_415ff6:\n
                            if (v16 == -1)\n
                                goto LABEL_416118;\n
LABEL_416000:\n
                            v16 += 1;\n
                            *(&v53) = 1;\n
                            goto LABEL_415b62;\n
                        }\n
                    }\n
                    *(&v1) = *(v53);\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                    {\n
                        v12[v16] = v1;\n
                        goto LABEL_416000;\n
                    }\n
                }\n
                else if (v25 == 27)\n
                {\n
                    v32 = v4;\n
                    v33 = v32->field_0;\n
                    if (v33 > 40)\n
                    {\n
                        v40 = v32->field_8;\n
                        v32->field_8 = v40 + 8;\n
                    }\n
                    else\n
                    {\n
                        v40 = v33 + v32->field_10;\n
                        v32->field_0 = v33 + 8;\n
                    }\n
                    v43 = *(v40);\n
                    v53 = cgc_strlen(v43);\n
                    v57 = v53;\n
                    if (!(v16 < 2147483647))\n
                        goto LABEL_4160fc;\n
                    v3 = v43;\n
                    v48 = 2147483647 - v16;\n
                    if (v48 > v53)\n
                        v48 = v53;\n
                    if (v13)\n
                        cgc_fwrite(v3, v48, v13);\n
                    if (!v12)\n
                        goto LABEL_4160fc;\n
                    a0 = &v12[v16];\n
                    v54 = v3;\n
                    goto LABEL_4160f4;\n
                }\n
            }\n
            if (v23 == 100)\n
            {\n
                a0 = &v7;\n
                if (v21)\n
                {\n
                    v28 = v4;\n
                    v29 = v28->field_0;\n
                    if (v29 > 40)\n
                    {\n
                        v37 = v28->field_8;\n
                        v28->field_8 = v37 + 8;\n
                    }\n
                    else\n
                    {\n
                        v37 = v29 + v28->field_10;\n
                        v28->field_0 = v29 + 8;\n
                    }\n
                    v42 = *(v37);\n
                    if (v42 < 0)\n
                    {\n
                        v7 = 45;\n
                        v42 = -(v42);\n
                        a0 = &v8;\n
                    }\n
                    *((a0 + 19)) = 0;\n
                    v5 = v53;\n
                    if (!v42)\n
                    {\n
                        v51 = a0 + 18;\n
                        *((a0 + 18)) = 48;\n
                    }\n
                    else\n
                    {\n
                        v51 = a0 + 19;\n
                        do\n
                        {\n
                            v45 = 3435973837 * v42 >> 35;\n
                            *((v51 - 1)) = *((4293372 + v42 + -10 * v45));\n
                            v51 -= 1;\n
                            tmp_70 = v42;\n
                            v42 = v45;\n
                        } while (tmp_70 > 9);\n
                    }\n
                    cgc_memmove(a0, v51, v51 - a0 + 20);\n
                    v52 = &v7;\n
                    goto LABEL_41604b;\n
                }\n
            }\n
            if (!v21)\n
            {\n
LABEL_415b60:\n
                v53 = 0;\n
                goto LABEL_415b62;\n
            }\n
            v30 = v4;\n
            v31 = v30->field_0;\n
            if (v31 > 40)\n
            {\n
                v38 = v30->field_8;\n
                v30->field_8 = v38 + 8;\n
            }\n
            else\n
            {\n
                v38 = v31 + v30->field_10;\n
                v30->field_0 = v31 + 8;\n
            }\n
            v5 = v53;\n
            v47 = *(v38);\n
            if (v23 == 117)\n
                a0 = 10;\n
            else\n
                a0 = 16;\n
            v44 = (v23 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
            v10 = 0;\n
            v46 = &v10;\n
            if (!v47)\n
            {\n
                v9 = *(v44);\n
                v46 = &v9;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    *((v46 - 1)) = v44[(0 CONCAT v47) /m a0 >> 32];\n
                    v46 = &v9;\n
                    tmp_50 = v47;\n
                    v47 = (0 CONCAT v47) /m a0;\n
                } while (tmp_50 >= a0);\n
            }\n
            v52 = &v7;\n
            cgc_memmove(&v7, v46, v6 + v46);\n
LABEL_41604b:\n
            v53 = cgc_strlen(v52);\n
            v57 = v53;\n
            v58 = v5;\n
            if (v58 > v53)\n
            {\n
                v59 = v53 - v58;\n
                do\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        *(&v1) = v3;\n
                        if (v13)\n
                            cgc_fwrite(&v1, 1, v13);\n
                        if (v12)\n
                            v12[v16] = v1;\n
                    }\n
                    else if (!(v16 == -1))\n
                    {\n
                        continue;\n
                    }\n
                    tmp_2 = v16;\n
                    v16 += 1;\n
                    tmp_12 = v59 + 1;\n
                    v59 += 1;\n
                } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                goto LABEL_416118;\n
            }\n
            if (!(v16 < 2147483647))\n
                goto LABEL_4160fc;\n
            v48 = 2147483647 - v16;\n
            if (v48 > v53)\n
                v48 = v53;\n
            if (v13)\n
                cgc_fwrite(&v7, v48, v13);\n
            if (!v12)\n
                goto LABEL_4160fc;\n
            a0 = &v12[v16];\n
            v54 = &v7;\n
LABEL_4160f4:\n
            cgc_memcpy(a0, v54, v48);\n
LABEL_4160fc:\n
            *(&v53) = 1;\n
            tmp_2 = v16;\n
            v16 += v57;\n
            if (__CFADD__(tmp_2, v57))\n
                goto LABEL_416118;\n
LABEL_415b62:\n
            if (!v53)\n
                goto LABEL_416109;\n
        }\n
    }\n
    return v16;\n
}\n
", "4283225:sub_415b59": null, "4283267:sub_415b83": null, "4283369:sub_415be9": null, "4284521:sub_416069": null, "4284733:sub_41613d": null, "4284736:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4284757:sub_416155": null, "4284768:cgc_strcasecmp": "long long cgc_strcasecmp(char a0[2], char *a1)\n
{\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    char v2[2];  // r14, Other Possible Types: unsigned long\n
    unsigned long v3;  // al, Other Possible Types: char\n
    unsigned long long v4;  // rax\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = a0[0];\n
    if (!a0[0])\n
        return a0[0] - *(a1);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4284842:sub_4161aa": null, "4284848:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4284944:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // cl, Other Possible Types: char, unsigned long\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4285001:sub_416249": null, "4285008:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // al, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return v1 - *(a1);\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return v1 - *(a1);\n
}\n
", "4285059:sub_416283": null, "4285072:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4285125:sub_4162c5": null, "4285136:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, a0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4285201:sub_416311": null, "4285216:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4285250:sub_416342": null, "4285264:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4285375:sub_4163bf": null, "4285376:cgc_strncpy": "long long cgc_strncpy(char *a0, char a1[2], unsigned long a2)\n
{\n
    char *v1;  // rax\n
    char v2;  // r8b\n
    unsigned long v3;  // rdi\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v5;  // rsi, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = a1[0];\n
    v4 = a0;\n
    if (a1[0])\n
    {\n
        v4 = a0;\n
        if (a2)\n
        {\n
            v3 = 1;\n
            v4 = v1;\n
            while (true)\n
            {\n
                *(v4) = v2;\n
                v4 += 1;\n
                v2 = a1[v3];\n
                if (!v2)\n
                    break;\n
                v3 += 1;\n
                if (1 >= a2)\n
                    break;\n
            }\n
        }\n
    }\n
    v5 = v4 - v1;\n
    if (v5 < a2)\n
    {\n
        do\n
        {\n
            *(v4) = 0;\n
            v4 += 1;\n
            v5 += 1;\n
        } while (v5 < a2);\n
    }\n
    return v1;\n
}\n
", "4285473:sub_416421": null, "4285488:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (!v3)\n
        return 0;\n
    cgc_memcpy(v3, a0, v2);\n
    v2[v3] = 0;\n
    return v3;\n
}\n
", "4285564:sub_41647c": null, "4285568:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r12\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rbx\n
    unsigned long v6;  // rax\n
    char *v7;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    v5 = 0;\n
    if (!v3)\n
        return 0;\n
    v2 = *(v3);\n
    if (*(v3))\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a1, v2);\n
            if (v4)\n
                break;\n
            v5 = v5 + 1;\n
            v2 = v3[v5];\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v6 = v5;\n
    v7 = v5 + 1;\n
    *(a0) = (v3[v6] ? 0 : v7 + v3);\n
    v3[v6] = 0;\n
    return *(a0);\n
}\n
", "4285691:sub_4164fb": null, "4285696:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4285775:sub_41654f": null, "4285776:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    unsigned long v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rdi\n
    unsigned long v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ebp\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_4166f8;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_4166f8;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_41665b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_41665b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_41665b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_41665b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (cgc_isupper(v26))\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
                else\n
                {\n
                    v27 = 0;\n
                    goto LABEL_416670;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 > 2147483647)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_416670:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_4166f8:\n
    v32 = (!v30 ? -0x80000000 : -(v31));\n
    v33 = (!v30 ? 2147483647 : v31);\n
    if (v29 < 0)\n
        v33 = v32;\n
    return v33;\n
}\n
", "4286092:sub_41668c": null, "4286262:sub_416736": null, "4286272:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    unsigned long v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rdi\n
    unsigned long v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // ecx\n
    void* v30;  // rbp, Other Possible Types: unsigned long, unsigned int, unsigned long long\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v32;  // eax\n
    unsigned long v33;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_4168e8;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_4168e8;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_41684b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_41684b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_41684b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_41684b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (cgc_isupper(v26))\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
                else\n
                {\n
                    v27 = 0;\n
                    goto LABEL_416860;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 >> 32)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_416860:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_4168e8:\n
    if (v29 < 0)\n
    {\n
        v32 = (v31 == -0x80000000 ? 1 : v30);\n
        if (v31 <= 2147483647)\n
            v32 = v30;\n
        v31 = -(v31);\n
        v30 = v32;\n
    }\n
    v33 = (!v30 ? 4294967295 : v31);\n
    return v33;\n
}\n
", "4286588:sub_41687c": null, "4286769:sub_416931": null, "4286784:_ZN4blubC1EPcS0_": "long long blub::__ctor__(unsigned int a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long long v1;  // rcx\n
    unsigned long long v2;  // r8\n
    unsigned long long v3;  // r9\n
    unsigned long long v4;  // rax\n
\n
    a0[0] = a0;\n
    cgc_strncpy(a0 + 1, a1, cgc_strlen(a1));\n
    cgc_memcpy(&a0[5] + 1, a2, 140);\n
    v4 = tick(a0, a2, 140, v1, v2, v3);\n
    a0[1] = v4;\n
    return v4;\n
}\n
", "4286854:sub_416986": null, "4286864:_ZN7blubberC1Ev": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long blubber::__ctor__(struct_0 *a0)\n
{\n
    vector::__ctor__();\n
    a0->field_20 = 0;\n
    return vector::__ctor__(&a0->padding_0[16], 64);\n
}\n
", "4286901:sub_4169b5": null, "4286912:_ZN7blubber12set_usernameEPc": "long long blubber::set_username(unsigned long a0, char *a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_strcpy(a0 + 36, a1);\n
    return v1;\n
}\n
", "4286924:sub_4169cc": null, "4286928:_ZN7blubber8gen_blubEv": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long words;\n
\n
long long blubber::gen_blub(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0xd0]\n
    char v1;  // [bp-0xc8]\n
    char v2;  // [bp-0xc7]\n
    char v3;  // [bp-0x3c]\n
    unsigned int v5;  // ebp\n
    unsigned long long v6;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rax\n
    char *v8;  // r13\n
    unsigned long long v9;  // rax\n
    unsigned int v10[2];  // rbx\n
    struct_0 *v11;  // rbp\n
    char *v12;  // r15\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
\n
    v0 = a0;\n
    v5 = 0;\n
    cgc_memset(&v1, 0, 141);\n
    v6 = 140;\n
    do\n
    {\n
        v7 = choice();\n
        v8 = (&words)[v7 + -3000 * (v7 * 12592977287652387237 >> 64 >> 11)];\n
        if (cgc_strlen(\" \") + cgc_strlen(v8) <= v6)\n
        {\n
            v9 = cgc_strlen(&v1);\n
            a0 = &v1;\n
            if (v9)\n
            {\n
                cgc_strcpy(&(&v1)[v9], \" \");\n
                a0 = &(&v2)[v9];\n
            }\n
            cgc_strcpy(a0, v8);\n
            v6 = 140 - cgc_strlen(&v1);\n
            if (!v6)\n
                break;\n
            continue;\n
        }\n
        else\n
        {\n
            v5 += 1;\n
            if (!v6)\n
                break;\n
            continue;\n
        }\n
    } while (v5 < 8);\n
    v3 = 0;\n
    v10 = operator new(184);\n
    v11 = v0;\n
    v12 = v11 + 36;\n
    v10[0] = v10;\n
    cgc_strncpy(v10 + 1, v12, cgc_strlen(v12));\n
    cgc_memcpy(&v10[5] + 1, &v1, 140);\n
    v10[1] = tick(a0, v12, 140, v13, v14, v15);\n
    vector::add(v11, v10);\n
    return v10;\n
}\n
", "4287078:sub_416a66": null, "4287284:sub_416b34": null, "4287296:_ZN7blubber11record_blubEPc": "long long blubber::record_blub(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned int v3[2];  // rbx\n
    char *v4;  // r12\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r8\n
    unsigned long long v7;  // r9\n
\n
    v0 = v2;\n
    v3 = operator new(184);\n
    v4 = a0 + 36;\n
    v3[0] = v3;\n
    cgc_strncpy(v3 + 1, v4, cgc_strlen(v4));\n
    cgc_memcpy(&v3[5] + 1, a1, 140);\n
    v3[1] = tick(a0, a1, 140, v5, v6, v7);\n
    vector::add(a0, v3);\n
    return v3;\n
}\n
", "4287403:sub_416bab": null, "4287408:_ZN7blubber9subscribeEPS_": "long long blubber::subscribe(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v3 = a0 + 16;\n
    v4 = vector::contains(v3);\n
    if (!v4)\n
    {\n
        v4 = vector::add(v3, a1);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4287453:sub_416bdd": null, "4287456:_ZN7blubber11unsubscribeEPS_": "long long blubber::unsubscribe(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v3 = a0 + 16;\n
    v4 = vector::contains(v3);\n
    if (v4)\n
    {\n
        v4 = vector::remove(v3, vector::index_of(v3, a1));\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4287511:sub_416c17": null, "4287520:_Z6choicev": "extern unsigned long long _ZL5cgc_x;\n
\n
long long choice()\n
{\n
    _ZL5cgc_x = _ZL5cgc_x * 1103515245 + 12345;\n
    return (_ZL5cgc_x >> 16) & 32767;\n
}\n
", "4287553:sub_416c41": null, "4287568:_Z10new_clienti": "typedef struct struct_0 {\n
    void* field_0;\n
    void* field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char field_18;\n
    char padding_19[3];\n
    unsigned int field_1c;\n
    unsigned long long field_20;\n
} struct_0;\n
\n
extern unsigned long long cgc_stdin;\n
extern unsigned long long cgc_stdout;\n
\n
long long new_client(unsigned long a0)\n
{\n
    struct_0 *v1;  // rbx\n
    unsigned long v2;  // rbp\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    void* v4;  // rax\n
\n
    v1 = operator new(40);\n
    v1->field_10 = a0;\n
    if (!a0)\n
    {\n
        v1->field_14 = 0;\n
        v1->field_0 = cgc_stdout;\n
        v3 = cgc_stdin;\n
    }\n
    else\n
    {\n
        v2 = a0 * 2 + 2;\n
        v1->field_14 = v2;\n
        v1->field_0 = cgc_fopen(v2, 1);\n
        v3 = cgc_fopen(v2, 0);\n
    }\n
    v1->field_8 = v3;\n
    cgc_fbuffered(v1->field_0, 0);\n
    cgc_fbuffered(v1->field_8, 0);\n
    v1->field_1c = 0;\n
    v1->field_18 = 0;\n
    v4 = operator new(72);\n
    blubber::__ctor__(v4);\n
    v1->field_20 = v4;\n
    return v1;\n
}\n
", "4287732:sub_416cf4": null, "4287744:_Z10new_serverm": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    char field_18;\n
    char padding_19[7];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long new_server(unsigned int a0)\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long *v2;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = operator new(40);\n
    v1->field_18 = 0;\n
    v1->field_20 = cgc_stderr;\n
    *(&v1->field_8) = a0;\n
    v1->field_0 = cgc_calloc(8, a0);\n
    if (!a0)\n
        return v1;\n
    v2 = 0;\n
    do\n
    {\n
        v1->field_0[v2].field_0 = new_client(v2);\n
        v2 += 1;\n
    } while (a0 != v2);\n
    return v1;\n
}\n
", "4287856:_Z12client_readyP12client_state": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
long long client_ready(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x94]\n
    unsigned long long v1;  // [bp-0x90]\n
    void* v2;  // [bp-0x88]\n
    struct_1 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rcx\n
    unsigned long v6;  // rdx\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // r8\n
    unsigned long long v10;  // rcx\n
    unsigned long v12;  // rax\n
    unsigned long long v13;  // rcx\n
\n
    v0 = 0;\n
    v4 = 0;\n
    do\n
    {\n
        (&v2)[v4] = 0;\n
        v4 += 1;\n
    } while (v4 != 16);\n
    v5 = a0->field_14;\n
    v6 = v5 / 64;\n
    (&v2)[v6] = (&v2)[v6] | 1 << (v5 & 31);\n
    v1 = 0x186a000000000;\n
    if (!cgc_fdwait(a0, v7, v6, v5, v8) && v0 > 0)\n
    {\n
        v10 = a0->field_14;\n
        v12 = 1 << (v10 & 31);\n
        v13 = v12;\n
        *(&v12) = 1;\n
        if ((v13 & (&v2)[v10 / 64]))\n
            return v12;\n
    }\n
    return 0;\n
}\n
", "4288024:sub_416e18": null, "4288032:_Z11handle_readP12server_stateP12client_state": "typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    void* field_0;\n
    char padding_8[20];\n
    unsigned int field_1c;\n
    unsigned long long field_20;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
long long handle_read(struct_2 *a0, struct_4 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    char v1;  // [bp-0x40]\n
    struct struct_0 **v3;  // r13, Other Possible Types: unsigned long\n
    struct_0 *v4;  // rbp\n
    void* v5;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v6;  // rax\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
    void* v8;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v9;  // rax\n
\n
    vector::__ctor__(&v1, 64);\n
    if (a0->field_8)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v4 = a0->field_0[v3].field_0;\n
            if (vector::contains(a1->field_20 + 16, v4->field_20) && vector::length(v4->field_20))\n
            {\n
                v5 = 0;\n
                do\n
                {\n
                    v6 = vector::get(v4->field_20, v5);\n
                    if (v6->field_4 > a1->field_1c)\n
                        vector::add(&v1, v6);\n
                    v5 += 1;\n
                } while (v5 < vector::length(v4->field_20));\n
            }\n
            v3 += 1;\n
        } while (v3 < a0->field_8);\n
    }\n
    v0 = vector::length(&v1);\n
    v7 = cgc_fwrite(&v0, 4, a1->field_0);\n
    if (!v0)\n
        return v7;\n
    v8 = 0;\n
    do\n
    {\n
        v9 = vector::get(&v1, v8);\n
        cgc_fwrite(v9, 4, a1->field_0);\n
        cgc_fwrite(v9 + 1, 32, a1->field_0);\n
        cgc_fwrite(&v9[5].padding_0[1], 140, a1->field_0);\n
        a1->field_1c = v9->field_4;\n
        v8 += 1;\n
        v7 = v0;\n
    } while (v8 < v7);\n
    return v0;\n
}\n
", "4288088:sub_416e58": null, "4288152:sub_416e98": null, "4288376:sub_416f78": null, "4288384:_Z11handle_blubP12client_state": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char padding_18[8];\n
    void* field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
long long handle_blub(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0xb4]\n
    unsigned long long v1;  // [bp-0xb0]\n
    void* v2;  // [bp-0xa8]\n
    char v3;  // [bp-0x1c]\n
    struct_1 *v5;  // r14\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
    void* v7;  // rdi\n
    struct_2 *v8;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rcx\n
    unsigned long v10;  // rdx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // rcx\n
\n
    v5 = a0;\n
    if (a0->field_10)\n
    {\n
        v6 = blubber::gen_blub(a0->field_20);\n
        return v6;\n
    }\n
    v7 = a0->field_0;\n
    v8 = 0;\n
    cgc_fprintf(v7, \"...: \");\n
    v0 = 0;\n
    do\n
    {\n
        (&v2)[v8] = 0;\n
        v8 += 1;\n
    } while (v8 != 16);\n
    v9 = v5->field_14;\n
    v10 = v9 / 64;\n
    (&v2)[v10] = (&v2)[v10] | 1 << (v9 & 31);\n
    v1 = 0x186a000000000;\n
    v6 = cgc_fdwait(v7, \"...: \", v10, v9, v11);\n
    if (v6)\n
    {\n
        return v6;\n
    }\n
    else if (v0 <= 0)\n
    {\n
        return v6;\n
    }\n
    else\n
    {\n
        v12 = v5->field_14;\n
        v6 = v12 / 64;\n
        if (!(1 << (v12 & 31) & (&v2)[v6]))\n
            return v12 / 64;\n
        v6 = cgc_freaduntil(&v2, 140, 4, v5->field_8);\n
        if (v6 >= 0)\n
        {\n
            v3 = 0;\n
            v6 = blubber::record_blub(v5->field_20, &v2);\n
            return v6;\n
        }\n
        return v6;\n
    }\n
}\n
", "4288659:sub_417093": null, "4288672:_Z13handle_reblubP12server_stateP12client_state": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[4];\n
    unsigned int field_14;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    unsigned long long field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_0 *field_0;\n
} struct_4;\n
\n
long long handle_reblub(struct_3 *a0, struct_1 *a1)\n
{\n
    unsigned int v0;  // [bp-0xfc]\n
    unsigned int v1;  // [bp-0xf8], Other Possible Types: unsigned long long\n
    unsigned long long v2;  // [bp-0xf0]\n
    unsigned long long v3;  // [bp-0xe8]\n
    char v4;  // [bp-0xc8]\n
    char v5;  // [bp-0xb8]\n
    struct_2 *v7;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rcx\n
    unsigned long v9;  // rdx\n
    unsigned long long v10;  // r8\n
    unsigned long long v11;  // rcx\n
    unsigned long v12;  // rax\n
    unsigned long long v13;  // rcx\n
    unsigned long v15;  // rcx\n
    unsigned long v16;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v17;  // rcx\n
    struct struct_0 **v18;  // r15, Other Possible Types: unsigned long\n
    struct_0 *v19;  // rbp\n
    unsigned long long v20;  // r13\n
    unsigned int v21[2];  // rax\n
\n
    v1 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        *(&(&v5)[8 * v7]) = 0;\n
        v7 += 1;\n
    } while (v7 != 16);\n
    v8 = a1->field_14;\n
    v9 = v8 / 64;\n
    *(&(&v5)[8 * v9]) = *(&(&v5)[8 * v9]) | 1 << (v8 & 31);\n
    v3 = 0x186a000000000;\n
    v16 = cgc_fdwait(a0, a1, v9, v8, v10);\n
    if (v16)\n
    {\n
        return v16;\n
    }\n
    else if (v1 <= 0)\n
    {\n
        return v16;\n
    }\n
    else\n
    {\n
        v11 = a1->field_14;\n
        v16 = v11 / 64;\n
        if (!(1 << (v11 & 31) & *(&(&v5)[8 * v16])))\n
            return v11 / 64;\n
        v16 = cgc_freaduntil(&v3, 32, 4, a1->field_8);\n
        if (v16 < 0)\n
            return v16;\n
        v4 = 0;\n
        v0 = 0;\n
        v12 = 0;\n
        do\n
        {\n
            *(&(&v5)[8 * v12]) = 0;\n
            v12 += 1;\n
        } while (v12 != 16);\n
        v13 = a1->field_14;\n
        v15 = v13 / 64;\n
        *(&(&v5)[8 * v15]) = *(&(&v5)[8 * v15]) | 1 << (v13 & 31);\n
        v1 = 0x186a000000000;\n
        v16 = cgc_fdwait(a0, 32, 4, v15, v10);\n
        if (v16)\n
        {\n
            return v16;\n
        }\n
        else if (v0 <= 0)\n
        {\n
            return v16;\n
        }\n
        else\n
        {\n
            v17 = a1->field_14;\n
            v16 = v17 / 64;\n
            if (!(1 << (v17 & 31) & *(&(&v5)[8 * v16])))\n
                return v17 / 64;\n
            v16 = cgc_freaduntil(&v5, 15, 4, a1->field_8);\n
            if (v16 < 0)\n
                return v16;\n
            v16 = cgc_strtol(&v5, NULL, 10);\n
            v2 = v16;\n
            if (!a0->field_8)\n
                return v16;\n
            v18 = 0;\n
            do\n
            {\n
                v19 = a0->field_0[v18].field_0;\n
                v16 = cgc_strcmp(v19->field_20 + 36, &v3);\n
                if (!v16)\n
                {\n
                    v16 = vector::contains(a1->field_20 + 16, v19->field_20);\n
                    if (v16)\n
                    {\n
                        v16 = vector::length(v19->field_20);\n
                        if (v16 > v2)\n
                        {\n
                            v16 = vector::get(v19->field_20, v2);\n
                            if (v16)\n
                            {\n
                                v20 = v16;\n
                                v21 = operator new(184);\n
                                blub::__ctor__(v21, a1->field_20 + 36, v20 + 41);\n
                                v16 = vector::add(a1->field_20, v21);\n
                            }\n
                        }\n
                    }\n
                }\n
                v18 += 1;\n
            } while (v18 < a0->field_8);\n
            return v16;\n
        }\n
    }\n
}\n
", "4289110:sub_417256": null, "4289290:sub_41730a": null, "4289296:_Z10handle_subP12server_stateP12client_state": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[4];\n
    unsigned int field_14;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
long long handle_sub(struct_2 *a0, struct_4 *a1)\n
{\n
    unsigned int v0;  // [bp-0xb4]\n
    unsigned long long v1;  // [bp-0xb0]\n
    void* v2;  // [bp-0xa8]\n
    char v3;  // [bp-0x88]\n
    struct_1 *v5;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v6;  // rcx\n
    unsigned long v7;  // rdx\n
    unsigned long long v8;  // r8\n
    unsigned long long v9;  // rcx\n
    struct struct_0 **v10;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v11;  // r13\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = 0;\n
    v5 = 0;\n
    do\n
    {\n
        (&v2)[v5] = 0;\n
        v5 += 1;\n
    } while (v5 != 16);\n
    v6 = a1->field_14;\n
    v7 = v6 / 64;\n
    (&v2)[v7] = (&v2)[v7] | 1 << (v6 & 31);\n
    v1 = 0x186a000000000;\n
    v12 = cgc_fdwait(a0, a1, v7, v6, v8);\n
    if (v12)\n
    {\n
        return v12;\n
    }\n
    else if (v0 <= 0)\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v9 = a1->field_14;\n
        v12 = v9 / 64;\n
        if (!(1 << (v9 & 31) & (&v2)[v12]))\n
            return v9 / 64;\n
        v12 = cgc_freaduntil(&v2, 32, 4, a1->field_8);\n
        if (v12 < 0)\n
            return v12;\n
        v3 = 0;\n
        if (!a0->field_8)\n
            return v12;\n
        v10 = 0;\n
        while (true)\n
        {\n
            v11 = a0->field_0[v10].field_0;\n
            v12 = cgc_strcmp(v11->field_20 + 36, &v2);\n
            if (!v12)\n
                break;\n
            v10 += 1;\n
            if (v10 >= a0->field_8)\n
                return v12;\n
        }\n
        v12 = vector::contains(a1->field_20 + 16, v11->field_20);\n
        if (!v12)\n
        {\n
            v12 = vector::add(a1->field_20 + 16, v11->field_20);\n
            return v12;\n
        }\n
        return v12;\n
    }\n
}\n
", "4289616:_Z10run_serverP12server_state": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    char field_18;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    void* field_0;\n
    void* field_8;\n
    char padding_10[4];\n
    unsigned int field_14;\n
    char field_18;\n
    char field_19;\n
    char padding_1a[6];\n
    unsigned int field_20;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long g_41ff76;\n
extern unsigned long long g_41ff8e;\n
extern unsigned long long g_41ff94;\n
\n
int run_server()\n
{\n
    struct_1 *v7;  // rdi\n
    unsigned long v8;  // rbx\n
    struct struct_2 **v11;  // r13\n
\n
    if (!v7->field_8)\n
        goto LABEL_0x417822;\n
    v8 = v7;\n
    v11 = 0;\n
}\n
", "4290629:sub_417845": null, "4290640:main": "typedef struct struct_0 {\n
    char padding_0[1128775680];\n
    unsigned int field_4347c000;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    char field_18;\n
    char padding_19[7];\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
extern unsigned long long cgc_stderr;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int main()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned long v3;  // rax\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned int v5;  // ecx\n
    struct_1 *v6;  // r14\n
    unsigned long long *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rdi\n
\n
    v0 = v3;\n
    cgc_fxlat(cgc_stdin, \"9an538n9av3;5\");\n
    cgc_fxlat(cgc_stdout, \"9an538n9av3;5\");\n
    v1 = 0;\n
    v4 = 0;\n
    v5 = 0;\n
    do\n
    {\n
        v5 ^= *((v4 * 4 + 0x4347c000));\n
        v4 += 1;\n
    } while (v4 != 0x400);\n
    v1 = v5;\n
    cgc_fwrite(&v1, 4, cgc_stdout);\n
    v6 = operator new(40);\n
    v6->field_18 = 0;\n
    v6->field_20 = cgc_stderr;\n
    v6->field_8 = 3;\n
    v6->field_0 = cgc_calloc(8, 3);\n
    v7 = 0;\n
    do\n
    {\n
        v6->field_0[v7].field_0 = new_client(v7);\n
        v7 += 1;\n
    } while (v7 != 3);\n
    do\n
    { } while (!run_server(v8));\n
    return 0;\n
}\n
", "4290870:sub_417936": null, "4290880:_Z5sleepj": "long long sleep(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
\n
    v0 = v3;\n
    v0 = a0 * 1125899907 >> 50;\n
    v1 = a0 - v0 * 1000000;\n
    cgc_fdwait(a0, v4, v5, v6, v7);\n
    return v0;\n
}\n
", "4290931:sub_417973": null, "4290944:_Z4tickv": "extern unsigned int _ZL9wall_time;\n
\n
long long tick()\n
{\n
    unsigned long long v1;  // rax\n
\n
    v1 = _ZL9wall_time;\n
    _ZL9wall_time = _ZL9wall_time + 1;\n
    return v1;\n
}\n
", "4290960:_ZN6vectorC1Ei": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long vector::__ctor__(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v1;  // rax\n
    unsigned long long v2;  // rax\n
\n
    v1 = (a1 ? 64 : a1);\n
    a0->field_4 = v1;\n
    a0->field_0 = 0;\n
    v2 = cgc_calloc(v1, 8);\n
    a0->field_8 = v2;\n
    return v2;\n
}\n
", "4291002:sub_4179ba": null, "4291008:_ZN6vector3setEiPv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long vector::set(struct_0 *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long long v1;  // rax\n
\n
    v1 = a0->field_0;\n
    if (v1 > a1)\n
        *((a0->field_8 + a1 * 8)) = a2;\n
    *(&v1) = a1 < v1;\n
    return v1;\n
}\n
", "4291031:sub_4179d7": null, "4291040:_ZN6vector6lengthEv": "long long vector::length(unsigned int *a0)\n
{\n
    return *(a0);\n
}\n
", "4291043:sub_4179e3": null, "4291056:_ZN6vector6removeEi": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long vector::remove(struct_0 *a0, unsigned long long *a1)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned long long v1;  // r8\n
    unsigned long v5;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rax\n
\n
    v1 = a0->field_0;\n
    if ((a1 + 1) < v1)\n
    {\n
        v5 = ~(a1) + v1;\n
        do\n
        {\n
            v6 = a0->field_8;\n
            *((v6 + (a1 + 1) * 8)) = *((v6 + a1 * 8));\n
            tmp_21 = v5;\n
            v5 = v5 - 1;\n
        } while (tmp_21 + -1);\n
    }\n
    a0->field_8[1 + v1].field_0 = 0;\n
    a0->field_0 = v1 - 1;\n
    return v6;\n
}\n
", "4291126:sub_417a36": null, "4291136:_ZN6vector8containsEPv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long vector::contains(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // r8\n
    unsigned long v2;  // al, Other Possible Types: char, unsigned long long\n
    unsigned long long v3[2];  // rdx\n
    unsigned long v4;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rdi\n
\n
    v1 = a0->field_0;\n
    v2 = v1 > 0;\n
    if (v1 <= 0)\n
        return v2;\n
    v3 = a0->field_8;\n
    if (v3[0] == a1)\n
        return v2;\n
    v2 = v1;\n
    v4 = 1;\n
    while (true)\n
    {\n
        v5 = v4;\n
        if (v1 == v4)\n
            break;\n
        v4 += 1;\n
        if (v3[v5] == a1)\n
            break;\n
    }\n
    *(&v2) = v5 < v1;\n
    return v2;\n
}\n
", "4291193:sub_417a79": null, "4291200:_ZN6vector3getEi": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long vector::get(struct_0 *a0, unsigned long long *a1)\n
{\n
    if (a0->field_0 > a1)\n
        return *((a0->field_8 + a1 * 8));\n
    return 0;\n
}\n
", "4291219:sub_417a93": null, "4291232:_ZN6vector3addEPv": "long long vector::add(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rbx\n
    unsigned long v5;  // rsi\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rcx\n
\n
    v0 = v2;\n
    v4 = a0;\n
    v5 = *((a0 + 4));\n
    if (*(a0) == v5)\n
    {\n
        a0 = *((a0 + 8));\n
        *((v4 + 8)) = cgc_realloc(a0, v5 * 16);\n
        *((v4 + 4)) = *((v4 + 4)) * 2;\n
    }\n
    v6 = *((a0 + 8));\n
    v7 = *(a0);\n
    *(a0) = v7 + 1;\n
    *((v6 + v7 * 8)) = a1;\n
    return v6;\n
}\n
", "4291294:sub_417ade": null, "4291296:_ZN6vector8index_ofEPv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long vector::index_of(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rcx\n
    void* v3;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0->field_0;\n
    if (v1 <= 0)\n
        return 4294967295;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a0->field_8[v3].field_0 == a1)\n
            return v3;\n
        v3 += 1;\n
        if (v1 == v3)\n
            return 4294967295;\n
    }\n
}\n
", "4291348:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242896:cgc_receive": null, "5242904:cgc_allocate": null, "5242912:cgc__terminate": null, "5242920:_Znwm": null, "5242928:cgc_deallocate": null, "5242936:cgc_transmit": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}