{"4206592:_init": "extern struct_0 *g_40a418;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a418;\n
    if (g_40a418)\n
        v1 = g_40a418();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40a430;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a430;\n
    goto *(4236344);\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206672:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206688:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206704:_Znwm": "// attributes: PLT stub\n
int operator new(unsigned long a0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4206720:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206736:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206752:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(0x40a400);\n
}\n
", "4206768:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206805:sub_4030d5": null, "4206806:sub_4030d6": null, "4206816:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a410;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206857:sub_403109": null, "4206864:register_tm_clones": "extern unsigned long long g_40a420;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206921:sub_403149": null, "4206928:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a400;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a400)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4206981:sub_403185": null, "4206985:sub_403189": null, "4206992:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207001:sub_403199": null, "4207004:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4207062:sub_4031d6": null, "4207064:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4207083:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4207102:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4207121:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4207140:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4207159:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4207178:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4207197:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4207216:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4207235:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4207254:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4207299:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207323:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4207373:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207397:sub_403325": null, "4207400:__cxa_pure_virtual": "long long __cxa_pure_virtual()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate(v3);\n
    return cgc_exit(v3, v4, v5, v6, v7, v8);\n
}\n
", "4207412:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4207420:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v4;  // rbx\n
    char *v5;  // rdi\n
    unsigned long long v6;  // rdx\n
    unsigned long v7;  // r12, Other Possible Types: unsigned long long\n
    void* v8;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rsi\n
    void* v10;  // rax, Other Possible Types: unsigned long, unsigned long long\n
\n
    v0 = v2;\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    v4 = a0;\n
    if (a0->field_4 != 1)\n
    {\n
        v5 = a0->field_10;\n
        v6 = v4->padding_c;\n
        v7 = v6 - v3;\n
        if (v5 && v7)\n
        {\n
            do\n
            {\n
                *(&v4->padding_0[v3 + 32]) = v5[*(&v4->padding_0[v3 + 32])];\n
                v3 += 1;\n
            } while (v6 != v3);\n
            v7 = (v4->padding_c - v4->field_8);\n
        }\n
        v8 = 0;\n
        while (v7 > v8)\n
        {\n
            v8 += v0;\n
            if (cgc_transmit(v5, v9))\n
            {\n
                v10 = 4294967295;\n
                goto LABEL_4033ce;\n
            }\n
        }\n
    }\n
    v10 = 0;\n
LABEL_4033ce:\n
    *(&v4->field_8) = 0;\n
    return v10;\n
}\n
", "4207589:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    a0[2] = -(a1 < 1);\n
    a0[3] = 0;\n
    return -(a1 < 1);\n
}\n
", "4207633:sub_403411": null, "4207636:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4207700:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, struct_0 *a1, struct_0 *a2)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // rax\n
    struct_0 *v3;  // r12\n
    struct_0 *v4;  // r14\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v7;  // r13, Other Possible Types: unsigned long\n
    unsigned int v8;  // eax\n
    char *v9;  // rbp\n
    struct_0 *v13;  // rcx\n
    char *v14;  // rax\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a1;\n
    v6 = a2->field_8;\n
    if (v6 == *(&a2->padding_c[0]))\n
    {\n
        cgc__refill(a2);\n
        v6 = a2->field_8;\n
    }\n
    if (v6 == -1)\n
    {\n
        v7 = 0;\n
    }\n
    else\n
    {\n
        v7 = *(&a2->padding_c[0]) - v6;\n
        if (v7 > a1)\n
            v7 = a1;\n
        v0 = v7;\n
        a1 = &a2->padding_0[v6 + 32];\n
        a2 = v7;\n
        cgc_memcpy();\n
        v8 = v3->field_8 + v7;\n
        v3->field_8 = v8;\n
        if (v8 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
    }\n
    if (v7 >= v4)\n
        return v7;\n
    while (true)\n
    {\n
        v9 = a0 + v7;\n
        if (cgc_receive(a0, a1, a2, rcx<8>))\n
            return -1;\n
        v13 = v0;\n
        if (!v13)\n
            return -1;\n
        v14 = v3->field_18;\n
        if (v14)\n
        {\n
            a2 = 0;\n
            do\n
            {\n
                v9[a2] = v14[v9[a2]];\n
                a2 += 1;\n
            } while (v13 != a2);\n
        }\n
        v7 = &v13->padding_0[v7];\n
        if (v7 >= v4)\n
            return v7;\n
    }\n
}\n
", "4207935:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x10]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned int v6;  // ecx\n
    unsigned long long v7;  // r8\n
    char *v8;  // rax\n
    void* v9;  // rsi, Other Possible Types: unsigned long\n
\n
    if (a0->field_8 == *(&a0->padding_c[0]))\n
        *(&a0->field_8) = 0;\n
    v6 = cgc_receive(a0, v2, v3, v4);\n
    if (v6)\n
        return 4294967295;\n
    v7 = *(&v0);\n
    if (!v7)\n
        return 4294967295;\n
    *(&a0->padding_c[0]) = v7;\n
    if ([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>))\n
        return v7;\n
    v8 = a0->field_18;\n
    if (v8)\n
    {\n
        v9 = 0;\n
        do\n
        {\n
            a0[1].padding_0[v9] = v8[a0[1].padding_0[v9]];\n
            v9 += 1;\n
        } while (v7 != v9);\n
    }\n
}\n
", "4208068:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (!([D] amd64g_calculate_condition(0x4<64>, 0x1c<64>, Sub(rsi<8>, 0x1<64>), 0x0<64>, 0x0<64>)))\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_403606;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_403617;\n
    while (true)\n
    {\n
LABEL_403606:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_403617;\n
    }\n
LABEL_403617:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4208177:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned int v8;  // ecx\n
    unsigned long v9;  // rcx\n
    struct struct_0 **v10;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
    {\n
        v8 = cgc_receive(a0, v4, v5, v6);\n
        v10 = 4294967295;\n
        if (v8)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v9 = a0->field_18;\n
            *(&v10) = v0;\n
            if (!v9)\n
                return v10;\n
            *(&v10) = *(v9 + v10);\n
        }\n
    }\n
    else\n
    {\n
        if (v3 == a0->field_c)\n
        {\n
            if (cgc__refill(a0) >= 0)\n
                v3 = a0->field_8;\n
            else\n
                return 4294967295;\n
        }\n
        a0->field_8 = v3 + 1;\n
        v10 = a0[1].padding_0[v3];\n
        return v10;\n
    }\n
}\n
", "4208304:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4208319:sub_4036bf": null, "4208320:cgc_fwrite": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_1 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    char v3;  // [bp-0x438], Other Possible Types: unsigned long long\n
    struct_1 *v5;  // rbp\n
    unsigned long long v6;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v7;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rax\n
    char *v9;  // r15\n
    unsigned long long v10;  // rcx\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v13;  // rcx\n
    unsigned long v14;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v15;  // rsi\n
    unsigned long long v16;  // rdx\n
    unsigned long v17;  // rax\n
    void* v18;  // r14, Other Possible Types: unsigned long\n
    void* v19;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rcx\n
    struct_0 *v21;  // rdi\n
    void* v22;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v23;  // r15\n
\n
    v5 = a2;\n
    v6 = a1;\n
    v7 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v8 = a2->field_c;\n
            if (v8 + a1 < 0x400)\n
            {\n
                v22 = 0;\n
            }\n
            else\n
            {\n
                v22 = 0x400 - v8;\n
                cgc_memcpy(&a2->padding_0[v8 + 32], a0, v22);\n
                v5->field_c = v5->field_c + v22;\n
                cgc_fflush(a2);\n
            }\n
            if (v22 >= a1)\n
                return v22;\n
            v23 = a1 - v22;\n
            cgc_memcpy(&v5->padding_0[v5->field_c + 32], a0 + v22, v23);\n
            v5->field_c = v5->field_c + v23;\n
            return a1;\n
        }\n
    }\n
    v9 = a2->field_10;\n
    if (!v9)\n
    {\n
        v12 = 0;\n
        do\n
        {\n
            if (v12 >= a1)\n
                return a1;\n
            v12 += *(&v3);\n
        } while (!cgc_transmit(a2, a1, a2, v13));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v19 = 0;\n
        v10 = 0x400;\n
        v0 = v7;\n
LABEL_403724:\n
        v14 = v6 - v19;\n
        if (0x400 <= v14)\n
            v14 = 0x400;\n
        v1 = v19;\n
        v15 = v7 + v19;\n
        v16 = v14;\n
        cgc_memcpy();\n
        if (v14)\n
        {\n
            v17 = 0;\n
            do\n
            {\n
                *(&v3 + v17) = v9[*(&v3 + v17)];\n
                v17 += 1;\n
            } while (v14 != v17);\n
        }\n
        v18 = 0;\n
        do\n
        {\n
            if (v14 <= v18)\n
            {\n
                v19 = v1 + v14;\n
                v7 = v0;\n
                v20 = 0x400;\n
                v21 = &v3;\n
                if (v19 >= v6)\n
                    return v6;\n
                goto LABEL_403724;\n
            }\n
            v18 += *(&v2);\n
        } while (!cgc_transmit(&v3, v15));\n
    }\n
    return -1;\n
}\n
", "4208734:sub_40385e": null, "4208736:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    int tmp_104;  // tmp #104\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    char v4[256];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // rbx\n
    char *v6;  // r8\n
    unsigned long v8;  // rsi, Other Possible Types: unsigned long long\n
    unsigned int v9;  // edx, Other Possible Types: char\n
    unsigned long v10;  // rax\n
    int v11;  // xmm0\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rdi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rdx\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        v4 = cgc_free(v2);\n
        *(&v1->field_10) = 0;\n
        return v4;\n
    }\n
    v3 = a1;\n
    v5 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v5;\n
    v6 = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    *(&v1[1].padding_0[0]) = v6;\n
    v9 = a1[0];\n
    v8 = 826981510;\n
    if (v3[0])\n
    {\n
        v10 = 1;\n
        do\n
        {\n
            v8 = __ROL__((v8 + v8 * 36) ^ v9, 13);\n
            v9 = v10;\n
            *(&v9) = v3[v10];\n
            v10 = v10 + 1;\n
        } while (v3[1]);\n
    }\n
    v11 = 0xf0e0d0c0b0a09080706050403020100;\n
    v12 = 0;\n
    do\n
    {\n
        *((v5 + v12)) = v11;\n
        v12 += 16;\n
        v11 += 21351050473470648687898014583954083856;\n
    } while (v12 != 0x100);\n
    v13 = 255;\n
    do\n
    {\n
        v14 = v8;\n
        v15 = v8 * 3;\n
        v16 = (0 CONCAT v14) /m v13;\n
        v17 = v16 / 0x100000000;\n
        v8 = v15 / 0x200000 ^ __ROL__(v15, 13);\n
        tmp_104 = *((v5 + v13));\n
        *((v5 + v13)) = *((v5 + v17));\n
        *((v5 + v17)) = tmp_104;\n
        v13 -= 1;\n
    } while (!([D] amd64g_calculate_condition(0x4<64>, 0x1c<64>, 0xfe<64>, 0x0<64>, 0x0<64>)));\n
    v4 = 0;\n
    do\n
    {\n
        v6[*((v5 + v4))] = v4;\n
        v4 += 1;\n
    } while (v4 != 0x100);\n
    return v4;\n
}\n
", "4208965:sub_403945": null, "4208968:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4208983:sub_403957": null, "4208984:cgc_malloc_alloc": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    char padding_8[1032];\n
    struct struct_0 *field_410;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_1 *field_18;\n
} struct_1;\n
\n
long long cgc_malloc_alloc(struct_2 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    struct_2 *v2;  // r14\n
    unsigned long long v3;  // r12\n
    struct_0 *v5;  // r12\n
    struct_0 *v6;  // r13\n
    unsigned long long v8;  // rdx\n
    unsigned long v10;  // r15\n
    unsigned long v11;  // r12\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v14;  // rbx\n
\n
    if (a1 > 2147483647)\n
        return 0;\n
    v2 = a0;\n
    v3 = a1 + 3 & -4;\n
    if (!v3)\n
        return cgc_tiny_alloc(a0, 4);\n
    if (v3 <= 15)\n
        return cgc_tiny_alloc(a0, v3);\n
    if (v3 <= 131071)\n
    {\n
        v5 = v3 + 31;\n
        v6 = v5 & -0x10;\n
        if (!(v5 & -0x10))\n
        {\n
            v10 = 4294967295;\n
        }\n
        else if (v6 < 513)\n
        {\n
            v11 = v5 / 16;\n
            v10 = v11 + 2;\n
            if (v11 > 128)\n
                v12 = 0;\n
        }\n
        else if (v6 <= 0x1200)\n
        {\n
            v10 = (v6 + 34359738336 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v10 = 130;\n
            if (v6 <= 0x20000)\n
                v10 = (v6 + 549755813600 >> 11) + 66;\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_allocate(a0, a1, v8))\n
            return 0;\n
        v12 = *(&v0);\n
        *(v12) = a0;\n
        *((v12 + 8)) = v3 + 4111 & -0x1000;\n
        v14 = v12 + 16;\n
        return v14;\n
    }\n
}\n
", "4209587:cgc_tiny_alloc": "long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v1;  // rbx\n
    struct struct_0 *v2[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v3;  // r15\n
    unsigned int v4;  // edx\n
    unsigned short *v5;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v6;  // rax, Other Possible Types: unsigned long\n
    unsigned long v7;  // rdx\n
    unsigned short v8[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rax\n
    unsigned long long v10;  // rbx\n
\n
    v1 = a1;\n
    if (a1 <= 15)\n
    {\n
        v2 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v2 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v2 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v2 = 130;\n
        if (a1 <= 0x20000)\n
            v2 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v3 = v2;\n
    v6 = *((a0 + v2 * 8));\n
    if (v6)\n
    {\n
        *((a0 + v3 * 8)) = *(&v6);\n
        return v6;\n
    }\n
    v8 = *((a0 + v3 * 8 + 5144));\n
    if (v8)\n
    {\n
        v4 = v8[0];\n
        a1 = v8[1];\n
    }\n
    else\n
    {\n
        v5 = *((a0 + 5168));\n
        if (v5)\n
        {\n
            v6 = *((a0 + 5176));\n
        }\n
        else\n
        {\n
            v5 = cgc_run_alloc(a0, 1);\n
            *((a0 + 5168)) = v5;\n
            v6 = 0;\n
            if (!v5)\n
                return 0;\n
        }\n
        v7 = v5;\n
        v8 = v5 + v6;\n
        *((a0 + v3 * 8 + 5144)) = v8;\n
        *((v7 + v6)) = v1;\n
        *((v7 + v6 + 2)) = v1;\n
        v9 = v6 + 0x1000;\n
        *((a0 + 5176)) = v9;\n
        if (v9 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v4 = a1;\n
    }\n
    v10 = v1 + a1;\n
    *((v8 + 2)) = v10;\n
    if (v4 + v10 < 4097)\n
        return a1 + v8;\n
    *((a0 + v3 * 8 + 5144)) = 0;\n
}\n
", "4209906:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r14\n
    unsigned long v5;  // rdx\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // rbx\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rsi\n
    unsigned long v12;  // rdi\n
    unsigned long v13;  // rsi\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rsi\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v2;\n
    v3 = a1;\n
    v2 = a1 / 0x100000;\n
    *(&v2) = *((a0 + v2 + 1048));\n
    if (*(&v2) != 2)\n
    {\n
        if (*(&v2) == 1)\n
        {\n
            v2 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v2 * 8));\n
            *((a0 + v2 * 8)) = a1;\n
            return v2;\n
        }\n
        if (*(&v2))\n
            return v2;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v9 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_404058;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v10 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v10 = *((a1 - 8));\n
                if (v10 - 0x20000 <= 2147356671 && !(v10 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v10);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v4 = a1 - 16;\n
        v5 = *((v4 + 8));\n
        if ((v5 & 1))\n
        {\n
            v9 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_404058;\n
        }\n
        else if (v5 - 131073 <= -131058)\n
        {\n
            v9 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_404058;\n
        }\n
        else\n
        {\n
            v6 = *(v4);\n
            v7 = v5 + v4;\n
            v8 = v4 - v6;\n
            if (!v6)\n
                v8 = v6;\n
            if (!v8)\n
            {\n
                if (*(v7) == v5)\n
                    goto LABEL_403f03;\n
LABEL_403e39:\n
                v12 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
                v13 = v7;\n
                goto LABEL_40406a;\n
            }\n
            else\n
            {\n
                v11 = *((v8 + 8));\n
                if ((v11 & -2) == v6)\n
                {\n
                    if (*(v7) == v5)\n
                    {\n
                        if ((v11 & 1))\n
                        {\n
                            if (v6 > 15 && v6 > 0x200 && v6 > 0x1200 && !(v6 <= 0x20000))\n
                                goto LABEL_403ee6;\n
LABEL_403ee6:\n
                            cgc_small_unlink_free(a0);\n
                            v14 = *((v8 + 8)) + *((v4 + 8));\n
                            *((v8 + 8)) = v14;\n
                            *(v7) = v14;\n
                            v4 = v8;\n
                        }\n
LABEL_403f03:\n
                        v15 = *((v7 + 8));\n
                        if ((v15 & 1))\n
                        {\n
                            v16 = v15 & -2;\n
                            if (v16 > 15 && v16 > 0x200 && v16 > 0x1200 && !(v16 <= 0x20000))\n
                                goto LABEL_403f78;\n
LABEL_403f78:\n
                            cgc_small_unlink_free(a0);\n
                            v17 = *((v4 + 8)) + *((v7 + 8));\n
                            *((v4 + 8)) = v17;\n
                            *((v4 + v17)) = v17;\n
                        }\n
                        v18 = *((v4 + 8));\n
                        if (!(v18 > 15 && v18 > 0x200 && v18 > 0x1200 && v18 > 0x20000))\n
                            return cgc_small_insert_free(a0);\n
                        return cgc_small_insert_free(a0);\n
                    }\n
                    goto LABEL_403e39;\n
                }\n
            }\n
        }\n
    }\n
    v9 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_404058:\n
    cgc_heap_error(v9, v3);\n
    v12 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    v13 = v8;\n
LABEL_40406a:\n
    cgc_heap_error(v12, v13, v3);\n
}\n
", "4210803:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4210847:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 <= 2147483647)\n
    {\n
        if (!a2)\n
        {\n
            malloc_free(a0, a1);\n
        }\n
        else if (!a1)\n
        {\n
            return cgc_malloc_alloc(a0, a2);\n
        }\n
        else\n
        {\n
            v4 = (!(*((a0 + a1 / 0x100000 + 1048)) & 253) ? (*((a0 + a1 / 0x100000 + 1048)) == 1 ? 0 : *((a1 & -0x1000))) : a1[1].field_-8 - 16);\n
            if (v4 >= a2)\n
                return a1;\n
            v5 = cgc_malloc_alloc(a0, a2);\n
            if (v5)\n
            {\n
                cgc_memcpy(v5, a1);\n
                malloc_free(a0, a1);\n
                return v5;\n
            }\n
        }\n
    }\n
    return 0;\n
}\n
", "4211081:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long v2;  // rbp\n
    unsigned long long v3;  // rdx\n
    unsigned long long v5;  // rbx\n
    unsigned long long v6;  // r12\n
\n
    if (cgc_allocate(a0, a1, v3))\n
        return 0;\n
    v5 = *(&v0);\n
    v6 = v5 + 1048575;\n
    v2 = v6 & -0x100000;\n
    if (v2 > v5)\n
        cgc_deallocate(a0);\n
    if ((v5 + 0x200000) > (v2 + 0x100000))\n
        cgc_deallocate(a0);\n
    *((a0 + (v6 >> 20) + 1048)) = a1;\n
    return v6 & -0x100000;\n
}\n
", "4211212:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_3 *field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    struct_0 *v4;  // rax\n
    struct_1 *v5;  // rcx\n
\n
    v0 = v2;\n
    v3 = a2->field_8;\n
    if (!(v3 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    a2->field_8 = v3 & -2;\n
    v4 = a2->field_10;\n
    if (v4)\n
        *(&v4->field_18) = a2[1].padding_0;\n
    v5 = a2[1].padding_0;\n
    if (v5)\n
        v5->field_10 = v4;\n
    if (a0[a1] != a2)\n
    {\n
        *(&a2->field_10) = 0;\n
        return v0;\n
    }\n
    a0[a1] = v5;\n
}\n
", "4211297:cgc_small_insert_free": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long long *a0, unsigned long a1, struct_1 *a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    struct_0 *v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a2->field_8;\n
    if ((v3 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    a2->field_8 = v3 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = a0[a1];\n
    a0[a1] = a2;\n
    v4 = a2->field_18;\n
    if (!v4)\n
        return v0;\n
    v4->field_10 = a2;\n
}\n
", "4211368:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4211524:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            v2 = *(v1);\n
            if (v2 == a1)\n
                return v1;\n
            v1 += 1;\n
            a2 -= 1;\n
        } while (!([D] amd64g_calculate_condition(0x4<64>, 0x1c<64>, rdx<8>, 0x0<64>, Conv(1->64, (ecx<4> < esi<4>)))));\n
    }\n
    return 0;\n
}\n
", "4211550:sub_40435e": null, "4211552:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4211588:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4211613:sub_40439d": null, "4211616:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_3;  // tmp #3\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long long v2;  // cc_op\n
    unsigned long long v3;  // cc_dep1\n
    unsigned long v4;  // cc_ndep\n
    unsigned long long v5;  // cc_op\n
    unsigned long long v6;  // cc_dep1\n
    unsigned long v7;  // rdi\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        v2 = 20;\n
        v3 = a2;\n
        if (!a2)\n
            return a0;\n
        do\n
        {\n
            a0[1 + a2] = *((a1 + a2 - 1));\n
            tmp_3 = a2 - 1;\n
            tmp_20 = [D] amd64g_calculate_rflags_c(cc_op<8>, cc_dep1<8>, 0x0<64>, cc_ndep<8>);\n
            v4 = [D] amd64g_calculate_rflags_c(cc_op<8>, cc_dep1<8>, 0x0<64>, cc_ndep<8>);\n
            v5 = 28;\n
            v6 = a2 - 1;\n
            a2 -= 1;\n
        } while (!([D] amd64g_calculate_condition(0x4<64>, 0x1c<64>, t3, 0x0<64>, t20)));\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            v1[v7] = *((a1 + v7));\n
            v7 += 1;\n
        } while (a2 != v7);\n
        return v1;\n
    }\n
}\n
", "4211666:sub_4043d2": null, "4211668:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    int tmp_27;  // tmp #27\n
    int tmp_29;  // tmp #29\n
    int tmp_28;  // tmp #28\n
    int tmp_31;  // tmp #31\n
    int tmp_33;  // tmp #33\n
    int tmp_32;  // tmp #32\n
    int tmp_34;  // tmp #34\n
    int tmp_36;  // tmp #36\n
    int tmp_35;  // tmp #35\n
    int tmp_39;  // tmp #39\n
    int tmp_41;  // tmp #41\n
    int tmp_40;  // tmp #40\n
    int tmp_51;  // tmp #51\n
    int tmp_53;  // tmp #53\n
    int tmp_52;  // tmp #52\n
    int v2;  // xmm11\n
    int v3;  // xmm2\n
    int v4;  // xmm7\n
    int v6;  // xmm5\n
    int v8;  // xmm6\n
    int v10;  // xmm7\n
    int v12;  // xmm7\n
    int v13;  // xmm5\n
    int v14;  // xmm5\n
    int v16;  // xmm5\n
    char *v17;  // rdx, Other Possible Types: unsigned long\n
    int v18;  // xmm4\n
    int v19;  // xmm3\n
\n
    if (!a2)\n
        return a0;\n
    v2 = 129127208515966861318;\n
    v3 = 92233720368547758084;\n
    v19 = 55340232221128654850;\n
    v18 = 0x10000000000000000;\n
    v17 = 0;\n
    do\n
    {\n
        tmp_24 = CmpGTV(tmp_26, tmp_25);\n
        v4 = tmp_24;\n
        tmp_27 = CmpEQV(tmp_29, tmp_28);\n
        v6 = ((v4 / 0x1000000000000000000000000) CONCAT (v4 / 0x1000000000000000000000000) CONCAT (v4 >> 32) CONCAT (v4 >> 32)) | ((tmp_27 / 0x1000000000000000000000000) CONCAT (tmp_27 / 0x1000000000000000000000000) CONCAT (tmp_27 >> 32) CONCAT (tmp_27 >> 32)) & v4;\n
        if ((~(v6) & 1))\n
            *((a0 + v17)) = a1;\n
        if ((((((v6 ^ 340282366920938463463374607431768211455) >> 64) >> 48 CONCAT (v6 ^ 340282366920938463463374607431768211455) >> 48 | ((v6 ^ 340282366920938463463374607431768211455) >> 64) * 0x10000) >> 16) & 1))\n
            *((a0 + v17 + 1)) = a1;\n
        tmp_31 = CmpGTV(tmp_33, tmp_32);\n
        v8 = tmp_31;\n
        tmp_34 = CmpEQV(tmp_36, tmp_35);\n
        v10 = ((tmp_34 / 0x1000000000000000000000000) CONCAT (tmp_34 / 0x1000000000000000000000000) CONCAT (tmp_34 >> 32) CONCAT (tmp_34 >> 32)) & v8;\n
        if ((((((v8 / 0x1000000000000000000000000) CONCAT (v8 / 0x1000000000000000000000000) CONCAT (v8 >> 32) CONCAT (v8 >> 32)) | v10) ^ 340282366920938463463374607431768211455) & 1))\n
            *((a0 + v17 + 2)) = a1;\n
        if ((((((((v8 >> 64) >> 32) CONCAT ((v8 >> 64) >> 32) CONCAT (v8 >> 32) CONCAT (v8 >> 32)) | v10) ^ 340282366920938463463374607431768211455) >> 64) & 1))\n
            *((a0 + v17 + 3)) = a1;\n
        tmp_39 = CmpGTV(tmp_41, tmp_40);\n
        v12 = tmp_39;\n
        tmp_51 = CmpEQV(tmp_53, tmp_52);\n
        v13 = tmp_51;\n
        if (((((((v12 >> 32) CONCAT (v12 >> 32) CONCAT (v12 >> 32) CONCAT (v12 >> 32)) | ((v13 >> 32) CONCAT (v13 >> 32) CONCAT (v13 >> 32) CONCAT (v13 >> 32)) & ((v12 >> 32) CONCAT v12 CONCAT (v12 >> 32) CONCAT v12)) ^ 340282366920938463463374607431768211455) >> 64) & 1))\n
            *((a0 + v17 + 4)) = a1;\n
        if ((((((((v12 >> 64) >> 32) CONCAT ((v12 >> 64) >> 32) CONCAT (v12 >> 32) CONCAT (v12 >> 32)) | (((v13 >> 64) >> 32) CONCAT ((v13 >> 64) >> 32) CONCAT (v13 >> 32) CONCAT (v13 >> 32)) & v12) ^ 340282366920938463463374607431768211455) >> 64) & 1))\n
            *((a0 + v17 + 5)) = a1;\n
        tmp_31 = CmpGTV(tmp_33, tmp_32);\n
        v14 = tmp_31;\n
        tmp_34 = CmpEQV(tmp_36, tmp_35);\n
        v16 = (((v14 / 0x1000000000000000000000000) CONCAT (v14 / 0x1000000000000000000000000) CONCAT (v14 >> 32) CONCAT (v14 >> 32)) | ((tmp_34 / 0x1000000000000000000000000) CONCAT (tmp_34 / 0x1000000000000000000000000) CONCAT (tmp_34 >> 32) CONCAT (tmp_34 >> 32)) & v14) ^ 340282366920938463463374607431768211455;\n
        if ((v16 & 1))\n
            *((a0 + v17 + 6)) = a1;\n
        if (((v16 >> 64) & 1))\n
            *((a0 + v17 + 7)) = a1;\n
        v17 += 8;\n
        v18 += 147573952589676412936;\n
        v19 += 147573952589676412936;\n
        v3 += 147573952589676412936;\n
        v2 += 147573952589676412936;\n
    } while ((a2 + 7 & -8) != v17);\n
    return a0;\n
}\n
", "4212138:sub_4045aa": null, "4212140:cgc_printf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_printf(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    return cgc_vfprintf(cgc_stdout, a0, &v0);\n
}\n
", "4212292:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4212313:cgc_fprintf": "long long cgc_fprintf(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc_vfprintf();\n
}\n
", "4212445:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4212528:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4212674:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4212687:cgc__vsfprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_1 *a1, unsigned long a2, char *a3)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned long long v0;  // [bp-0x1b8]\n
    int tmp_16;  // tmp #16\n
    struct_0 *v1;  // [bp-0x91]\n
    struct_0 *v2;  // [bp-0x90], Other Possible Types: unsigned long\n
    struct_1 *v3;  // [bp-0x88]\n
    unsigned long v4;  // [bp-0x80]\n
    char v5;  // [bp-0x78]\n
    char v6;  // [bp-0x77]\n
    char *v8;  // r14\n
    struct_0 *v9;  // rbp, Other Possible Types: unsigned long\n
    void* v10;  // r15\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // r13b, Other Possible Types: char\n
    void* v13;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned int v15;  // edx\n
    char v16;  // cl\n
    struct_0 *v17;  // rdx, Other Possible Types: unsigned long\n
    char v18;  // cc_dep1\n
    char v19;  // cc_dep2\n
    struct_0 *v20;  // r8b\n
    unsigned long long v21;  // rdx\n
    unsigned long long v22;  // rsi\n
    struct_1 *v23;  // rdx\n
    struct_0 *v24;  // rbp, Other Possible Types: unsigned long\n
    struct_1 *v25;  // rsi\n
    struct_1 *v26;  // rdx\n
    unsigned long long v27;  // rcx\n
    unsigned long long v28;  // rcx\n
    unsigned long long v29;  // rdx\n
    struct_1 *v30;  // rdx\n
    unsigned long long v31;  // rcx\n
    struct struct_0 **v32;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v33;  // rsi, Other Possible Types: unsigned long\n
    struct struct_0 **v34;  // rcx, Other Possible Types: unsigned long\n
    struct struct_0 **v35;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v36;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v37;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v38;  // r13\n
    unsigned long long v39;  // rax\n
    unsigned long v40;  // r13, Other Possible Types: unsigned long long\n
    void* v41;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v42;  // rax\n
    unsigned long long v43;  // rcx\n
    struct_0 *v44;  // rsi, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v45;  // rdx\n
    unsigned int v46;  // ebp\n
    unsigned long long v47;  // cc_op\n
    char *v48;  // cc_dep1\n
    unsigned long long v49;  // cc_dep2\n
    unsigned long long v50;  // cc_op\n
    char *v51;  // cc_dep1\n
    void* v52;  // cc_dep2\n
    char *v53;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v55;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v56;  // r12, Other Possible Types: unsigned long long\n
    struct_0 *v57;  // rax, Other Possible Types: unsigned long, char\n
    unsigned long v58;  // r13\n
\n
    v8 = a3;\n
    v3 = a1;\n
    v9 = &a0->field_0 + 1;\n
    v2 = v9;\n
    v57 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v53 = 0;\n
    }\n
    else\n
    {\n
        v10 = a2;\n
        v53 = 0;\n
        while (true)\n
        {\n
            if (v57 != 37)\n
            {\n
                if (v53 < 2147483647)\n
                {\n
                    *(&v1) = v57;\n
                    if (v10)\n
                        cgc_fwrite(&v1, 1, v10);\n
                    if (v8)\n
                        v8[v53] = v1;\n
                    v9 = v2;\n
                }\n
                else if (v53 == -1)\n
                {\n
                    goto LABEL_404c44;\n
                }\n
                v53 += 1;\n
                v2 = v9 + 1;\n
                v57 = *(v9);\n
                v9 = v2;\n
                goto LABEL_404b90;\n
            }\n
            a0 = v9 + 1;\n
            v2 = a0;\n
            v11 = *(v9);\n
            v12 = 32;\n
            if (v11 != 32)\n
            {\n
                if (v11 == 48)\n
                {\n
                    v12 = 48;\n
                }\n
                else\n
                {\n
                    if (!v11)\n
                        goto LABEL_404c35;\n
                    v2 = v9;\n
                    a0 = v9;\n
                }\n
            }\n
            if (*(a0) - 48 > 9)\n
            {\n
                v13 = 0;\n
            }\n
            else\n
            {\n
                v13 = cgc_strtoul();\n
                a0 = v2;\n
            }\n
            v14 = a0 + 1;\n
            v2 = v14;\n
            v15 = *(a0);\n
            v16 = 1;\n
            if (v15 == 104)\n
            {\n
                v17 = a0 + 2;\n
                v18 = *((a0 + 1));\n
                v19 = 104;\n
            }\n
            else if (v15 == 108)\n
            {\n
                v18 = *((a0 + 1));\n
                v19 = 108;\n
                v17 = a0 + 2;\n
                v16 = *((a0 + 1)) != 108;\n
            }\n
            else\n
            {\n
                if (!v15)\n
                    goto LABEL_404c35;\n
                goto LABEL_4048e5;\n
            }\n
            if (v18 == v19)\n
                v14 = v17;\n
            a0 = v14;\n
LABEL_4048e5:\n
            v2 = a0 + 1;\n
            v20 = *(a0);\n
            v21 = *(a0);\n
            v22 = v21 - 88;\n
            if (v22 > 32)\n
            {\n
LABEL_4049ac:\n
                v56 = v2 - v9;\n
                if (!v21)\n
                {\n
                    if (v53 < 2147483647)\n
                    {\n
                        v58 = 2147483647 - v53;\n
                        if (v58 > v56)\n
                            v58 = v56;\n
                        if (v10)\n
                            cgc_fwrite(v9, v58, v10);\n
                        if (v8)\n
                            cgc_memcpy(&v8[v53], v9, v58);\n
                    }\n
                    tmp_2 = v53;\n
                    v53 += v56;\n
                    if (__CFADD__(tmp_2, v56))\n
                        goto LABEL_404c44;\n
LABEL_404c35:\n
                    if (v53 < 2147483647)\n
                        break;\n
                    if (v53 != -1)\n
                        return v53;\n
LABEL_404c44:\n
                    cgc__terminate(a0);\n
                    break;\n
                }\n
                if (!(v53 < 2147483647))\n
                    goto LABEL_404b77;\n
                v40 = 2147483647 - v53;\n
                if (v40 > v56)\n
                    v40 = v56;\n
                if (v10)\n
                    cgc_fwrite(v9, v40, v10);\n
                if (!v8)\n
                    goto LABEL_404b77;\n
                a0 = &v8[v53];\n
                v44 = v9;\n
                v45 = v40;\n
                goto LABEL_404b72;\n
            }\n
            else\n
            {\n
                v0 = 4831842305;\n
                if (((*(&v0 + ((v22 & 63) >> 3)) >> (v22 & 63 & 7)) & 1))\n
                {\n
                    v4 = v13;\n
                    if (v20 == 100)\n
                    {\n
                        v23 = v3;\n
                        v24 = &v5;\n
                        if (!v16)\n
                            goto LABEL_404c35;\n
                        v28 = v23->field_0;\n
                        if (v28 > 40)\n
                        {\n
                            v33 = v23->field_8;\n
                            v23->field_8 = v33 + 8;\n
                        }\n
                        else\n
                        {\n
                            v33 = v28 + v23->field_10;\n
                            v23->field_0 = v28 + 8;\n
                        }\n
                        v36 = *(v33);\n
                        if (v36 < 0)\n
                        {\n
                            v5 = 45;\n
                            v36 = -(v36);\n
                            a0 = &v6;\n
                        }\n
                        else\n
                        {\n
                            a0 = &v5;\n
                        }\n
                        v37 = 10;\n
                        v41 = 0;\n
                    }\n
                    else\n
                    {\n
                        v25 = v3;\n
                        v24 = &v5;\n
                        if (!v16)\n
                            goto LABEL_404c35;\n
                        v29 = v25->field_0;\n
                        if (v29 <= 40)\n
                        {\n
                            v34 = v29 + v25->field_10;\n
                            v25->field_0 = v29 + 8;\n
                        }\n
                        else\n
                        {\n
                            v34 = v25->field_8;\n
                            v25->field_8 = v34 + 8;\n
                        }\n
                        v37 = (v20 == 117 ? 16 : 10);\n
                        v36 = *(v34);\n
                        v41 = 0;\n
                        *(&v41) = v20 == 88;\n
                        a0 = &v5;\n
                    }\n
                    cgc__convert_unsigned(a0, v36, v37, v41);\n
                    v42 = cgc_strlen(v24);\n
                    v56 = v42;\n
                    v43 = v4;\n
                    if (v43 > v42)\n
                    {\n
                        v46 = v42 - v43;\n
                        do\n
                        {\n
                            if (v53 < 2147483647)\n
                            {\n
                                *(&v1) = v12;\n
                                if (v10)\n
                                    cgc_fwrite(&v1, 1, v10);\n
                                v50 = 20;\n
                                v51 = v8;\n
                                v52 = 0;\n
                                if (v8)\n
                                    v8[v53] = v1;\n
                            }\n
                            else\n
                            {\n
                                v47 = 8;\n
                                v48 = v53;\n
                                v49 = -1;\n
                                if (!(v53 == -1))\n
                                    continue;\n
                            }\n
                            v53 += 1;\n
                            tmp_16 = v46 + 1;\n
                            v46 += 1;\n
                        } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t16, 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
                    }\n
                    if (!(v53 < 2147483647))\n
                        goto LABEL_404b77;\n
                    v55 = 2147483647 - v53;\n
                    if (v55 > v42)\n
                        v55 = v42;\n
                    if (v10)\n
                        cgc_fwrite(&v5, v55, v10);\n
                    if (!v8)\n
                        goto LABEL_404b77;\n
                    a0 = &v8[v53];\n
                    v44 = &v5;\n
                    goto LABEL_404b6f;\n
                }\n
                if (v22 == 11)\n
                {\n
                    v26 = v3;\n
                    v27 = v26->field_0;\n
                    if (v27 <= 40)\n
                    {\n
                        v32 = v27 + v26->field_10;\n
                        v26->field_0 = v27 + 8;\n
                    }\n
                    else\n
                    {\n
                        v32 = v26->field_8;\n
                        v26->field_8 = v32 + 8;\n
                    }\n
                    if (v53 < 2147483647)\n
                    {\n
                        *(&v1) = *(v32);\n
                        if (v10)\n
                            cgc_fwrite(&v1, 1, v10);\n
                        if (v8)\n
                            v8[v53] = v1;\n
                    }\n
                    else if (v53 == -1)\n
                    {\n
                        goto LABEL_404c44;\n
                    }\n
                    v53 += 1;\n
                    goto LABEL_404b80;\n
                }\n
                if (!(v22 == 27))\n
                    goto LABEL_4049ac;\n
                v30 = v3;\n
                v31 = v30->field_0;\n
                if (v31 > 40)\n
                {\n
                    v35 = v30->field_8;\n
                    v30->field_8 = v35 + 8;\n
                }\n
                else\n
                {\n
                    v35 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                }\n
                v38 = *(v35);\n
                v39 = cgc_strlen(v38);\n
                v56 = v39;\n
                if (!(v53 < 2147483647))\n
                    goto LABEL_404b77;\n
                v55 = 2147483647 - v53;\n
                if (v55 > v39)\n
                    v55 = v39;\n
                if (v10)\n
                    cgc_fwrite(v38, v55, v10);\n
                if (!v8)\n
                    goto LABEL_404b77;\n
                a0 = &v8[v53];\n
                v44 = v38;\n
LABEL_404b6f:\n
                v45 = v55;\n
LABEL_404b72:\n
                cgc_memcpy(a0, v44, v45);\n
LABEL_404b77:\n
                tmp_2 = v53;\n
                v53 += v56;\n
                if (__CFADD__(tmp_2, v56))\n
                    goto LABEL_404c44;\n
LABEL_404b80:\n
                v57 = v2;\n
                v9 = v57 + 1;\n
                v2 = v9;\n
                *(&v57) = *(v57);\n
LABEL_404b90:\n
                if (!v57)\n
                    goto LABEL_404c35;\n
            }\n
        }\n
    }\n
    if (v8)\n
        v8[v53] = 0;\n
    return v53;\n
}\n
", "4213865:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char a0[20], unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_51;  // tmp #51\n
    char *v1;  // rcx\n
    unsigned long v2;  // r9, Other Possible Types: unsigned long long\n
    struct_0 *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = (!a3 ? \"0123456789ABCDEF\" : \"0123456789abcdef\");\n
    a0[19] = 0;\n
    if (!a1)\n
    {\n
        v3 = &a0[18];\n
        a0[18] = *(v1);\n
        return cgc_memmove(a0, v3, 20 + v3 - a0);\n
    }\n
    v2 = a1;\n
    v3 = &a0[19];\n
    do\n
    {\n
        *((v3 - 1)) = v1[(0 CONCAT v2) /m a2 >> 32];\n
        v3 -= 1;\n
        tmp_51 = v2;\n
        v2 = (0 CONCAT v2) /m a2;\n
    } while (tmp_51 >= a2);\n
    return cgc_memmove(a0, v3, 20 + v3 - a0);\n
}\n
", "4213954:sub_404cc2": null, "4213956:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4213974:sub_404cd6": null, "4213976:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (!*(a0))\n
        return 0 - *(v1);\n
    v3 = a0 + 1;\n
    do\n
    {\n
        if (!*(v1))\n
            return v2 - *(v1);\n
        v4 = cgc_tolower(v2);\n
        v2 = cgc_tolower(*(v1));\n
        if (v4 != v2)\n
        {\n
            *(&v2) = *((v3 - 1));\n
            return v2 - *(v1);\n
        }\n
        v1 += 1;\n
        tmp_13 = *(v3);\n
        *(&v2) = *(v3);\n
        v3 += 1;\n
    } while (tmp_13);\n
}\n
", "4214057:sub_404d29": null, "4214060:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4214147:sub_404d83": null, "4214148:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char v1;  // cl\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (*(&v1) == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (a0[v2]);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4214195:sub_404db3": null, "4214196:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    int tmp_13;  // tmp #13\n
    void* v1;  // al, Other Possible Types: char, unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            if (!*(a1))\n
                return v1 - *(a1);\n
            if (v1 != *(a1))\n
                return v1 - *(a1);\n
            a1 += 1;\n
            tmp_13 = *(v2);\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (tmp_13);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4214238:sub_404dde": null, "4214240:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    int tmp_15;  // tmp #15\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            tmp_15 = *(v3);\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (tmp_15);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4214276:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214337:sub_404e41": null, "4214340:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4214365:sub_404e5d": null, "4214368:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v5 = a0;\n
    v4 = &a0[a2];\n
    for (v2 = a0[0]; v2; v5 += 1)\n
    {\n
        if (!*(v3))\n
            break;\n
        v2 = cgc_tolower(v2);\n
        if (v2 != cgc_tolower(*(v3)))\n
            break;\n
        if (v5 >= v4)\n
            break;\n
        v3 += 1;\n
        *(&v2) = *((v5 + 1));\n
    }\n
    v6 = (v5 == v4 ? *(v5) - *(v3) : 0);\n
    return v6;\n
}\n
", "4214467:sub_404ec3": null, "4214468:cgc_strncpy": "long long cgc_strncpy(char *a0, char a1[2], unsigned long a2)\n
{\n
    char *v1;  // rax\n
    char v2;  // r8b\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = a1[0];\n
    v3 = 0;\n
    if (a1[0] && a2)\n
    {\n
        v3 = 0;\n
        while (true)\n
        {\n
            a0[v3] = v2;\n
            v2 = a1[1 + v3];\n
            v3 += 1;\n
            if (!a1[1])\n
                break;\n
            if (v3 >= a2)\n
                break;\n
        }\n
        a0 = &a0[v3];\n
    }\n
    if (v3 >= a2)\n
        return v1;\n
    v4 = a0 - v1;\n
    do\n
    {\n
        *(a0) = 0;\n
        a0 += 1;\n
        v4 += 1;\n
    } while (v4 < a2);\n
    return v1;\n
}\n
", "4214542:sub_404f0e": null, "4214544:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4214615:sub_404f57": null, "4214616:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r15\n
    unsigned long v4;  // rbx\n
    char *v5;  // rax, Other Possible Types: unsigned long, unsigned long long\n
    char *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rbx\n
    void* v8;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v2 = cgc_strchr(a1, v2);\n
            if (v2)\n
            {\n
                v5 = &v3[v4];\n
                if (!v3[v4])\n
                    goto LABEL_404f9a;\n
                v7 = v4 + 1;\n
                v8 = v7 + v3;\n
                goto LABEL_404f9c;\n
            }\n
            v4 = v4 + 1;\n
            *(&v2) = v3[v4];\n
        } while (v3[v4]);\n
        v6 = v4;\n
    }\n
    v5 = &v3[v6];\n
LABEL_404f9a:\n
    v8 = 0;\n
LABEL_404f9c:\n
    *(a0) = v8;\n
    *(v5) = 0;\n
    return *(a0);\n
}\n
", "4214725:sub_404fc5": null, "4214728:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4214800:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    int tmp_11;  // tmp #11\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long v20;  // rdi\n
    unsigned long v21;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v22;  // rdi\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ebp\n
    void* v25;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v26;  // r14d\n
    unsigned long long *v27;  // r15, Other Possible Types: unsigned long\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v27 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v24 = 0;\n
                v23 = 1;\n
                v26 = 1;\n
                v25 = 0;\n
                goto LABEL_40519d;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) == 45)\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
    }\n
    if (a2)\n
    {\n
        if (!(a2 == 16))\n
            goto LABEL_40510c;\n
        *(&v18) = *(v16);\n
        v19 = 16;\n
        if (!(*(v16) == 48))\n
            goto LABEL_40510e;\n
        v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
        goto LABEL_4050ec;\n
    }\n
    else\n
    {\n
        *(&v18) = *(v16);\n
        if (*(v16) != 48)\n
        {\n
LABEL_4050f6:\n
            v18 = cgc_isdigit(v18);\n
            v19 = 10;\n
            if (!v18)\n
                goto LABEL_40518e;\n
LABEL_40510c:\n
            *(&v18) = *(v16);\n
LABEL_40510e:\n
            if (v18)\n
            {\n
                v1 = a1;\n
LABEL_405117:\n
                v25 = 0;\n
                v24 = 0;\n
                v26 = 1;\n
                do\n
                {\n
                    v18 = cgc_isdigit(v18);\n
                    v20 = *(v16);\n
                    if (v18)\n
                    {\n
                        v21 = v20 - 48;\n
                    }\n
                    else\n
                    {\n
                        v18 = cgc_islower(v20);\n
                        v22 = *(v16);\n
                        if (v18)\n
                        {\n
                            v21 = v22 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v22))\n
                                break;\n
                            v21 = *(v16) - 55;\n
                        }\n
                    }\n
                    if (v21 >= v19)\n
                        break;\n
                    continue;\n
                    v25 = v21 + v19 * v25;\n
                    if (v25 > 2147483647)\n
                        v24 = 1;\n
                    tmp_11 = *((v16 + 1));\n
                    *(&v18) = *((v16 + 1));\n
                    v16 += 1;\n
                    v26 = 0;\n
                } while (tmp_11);\n
                v27 = v1;\n
                goto LABEL_405199;\n
            }\n
LABEL_40518e:\n
            v24 = 0;\n
            v26 = 1;\n
            v25 = 0;\n
        }\n
        else\n
        {\n
            *(&v18) = *((v16 + 1));\n
            if ((v18 & 248) == 48)\n
            {\n
                v1 = a1;\n
                v16 += 1;\n
                v19 = 8;\n
                goto LABEL_405117;\n
            }\n
            v18 = cgc_tolower(v18);\n
            if (v18 != 120)\n
            {\n
                *(&v18) = *(v16);\n
                goto LABEL_4050f6;\n
            }\n
            else\n
            {\n
                v16 += 2;\n
            }\n
LABEL_4050ec:\n
            v19 = 16;\n
            goto LABEL_40510c;\n
        }\n
    }\n
LABEL_405199:\n
    v23 = v0;\n
LABEL_40519d:\n
    if (v27)\n
    {\n
        v28 = v2;\n
        if (!v26)\n
            v28 = v16;\n
        *(v27) = v28;\n
    }\n
    v29 = (!v24 ? -0x80000000 : -(v25));\n
    v30 = (!v24 ? 2147483647 : v25);\n
    if (v23 < 0)\n
        v30 = v29;\n
    return v30;\n
}\n
", "4215266:sub_4051e2": null, "4215268:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    int tmp_11;  // tmp #11\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long v20;  // rdi\n
    unsigned long v21;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v22;  // rdi\n
    unsigned int v23;  // ecx\n
    void* v24;  // rbp, Other Possible Types: unsigned long, unsigned long long, unsigned int\n
    void* v25;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v26;  // r14d\n
    unsigned long long *v27;  // r15, Other Possible Types: unsigned long\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // eax\n
    unsigned long v30;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v27 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v24 = 0;\n
                v23 = 1;\n
                v26 = 1;\n
                v25 = 0;\n
                goto LABEL_405371;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) == 45)\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
    }\n
    if (a2)\n
    {\n
        if (!(a2 == 16))\n
            goto LABEL_4052e0;\n
        *(&v18) = *(v16);\n
        v19 = 16;\n
        if (!(*(v16) == 48))\n
            goto LABEL_4052e2;\n
        v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
        goto LABEL_4052c0;\n
    }\n
    else\n
    {\n
        *(&v18) = *(v16);\n
        if (*(v16) != 48)\n
        {\n
LABEL_4052ca:\n
            v18 = cgc_isdigit(v18);\n
            v19 = 10;\n
            if (!v18)\n
                goto LABEL_405362;\n
LABEL_4052e0:\n
            *(&v18) = *(v16);\n
LABEL_4052e2:\n
            if (v18)\n
            {\n
                v1 = a1;\n
LABEL_4052eb:\n
                v25 = 0;\n
                v24 = 0;\n
                v26 = 1;\n
                do\n
                {\n
                    v18 = cgc_isdigit(v18);\n
                    v20 = *(v16);\n
                    if (v18)\n
                    {\n
                        v21 = v20 - 48;\n
                    }\n
                    else\n
                    {\n
                        v18 = cgc_islower(v20);\n
                        v22 = *(v16);\n
                        if (v18)\n
                        {\n
                            v21 = v22 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v22))\n
                                break;\n
                            v21 = *(v16) - 55;\n
                        }\n
                    }\n
                    if (v21 >= v19)\n
                        break;\n
                    continue;\n
                    v25 = v21 + v19 * v25;\n
                    if (v25 >> 32)\n
                        v24 = 1;\n
                    tmp_11 = *((v16 + 1));\n
                    *(&v18) = *((v16 + 1));\n
                    v16 += 1;\n
                    v26 = 0;\n
                } while (tmp_11);\n
                v27 = v1;\n
                goto LABEL_40536d;\n
            }\n
LABEL_405362:\n
            v24 = 0;\n
            v26 = 1;\n
            v25 = 0;\n
        }\n
        else\n
        {\n
            *(&v18) = *((v16 + 1));\n
            if ((v18 & 248) == 48)\n
            {\n
                v1 = a1;\n
                v16 += 1;\n
                v19 = 8;\n
                goto LABEL_4052eb;\n
            }\n
            v18 = cgc_tolower(v18);\n
            if (v18 != 120)\n
            {\n
                *(&v18) = *(v16);\n
                goto LABEL_4052ca;\n
            }\n
            else\n
            {\n
                v16 += 2;\n
            }\n
LABEL_4052c0:\n
            v19 = 16;\n
            goto LABEL_4052e0;\n
        }\n
    }\n
LABEL_40536d:\n
    v23 = v0;\n
LABEL_405371:\n
    if (v27)\n
    {\n
        v28 = v2;\n
        if (!v26)\n
            v28 = v16;\n
        *(v27) = v28;\n
    }\n
    if (v23 < 0)\n
    {\n
        v29 = (v25 == -0x80000000 ? 1 : v24);\n
        if (v25 <= 2147483647)\n
            v29 = v24;\n
        v25 = -(v25);\n
        v24 = v29;\n
    }\n
    v30 = (!v24 ? 4294967295 : v25);\n
    return v30;\n
}\n
", "4215745:sub_4053c1": null, "4215748:_ZN8DatabaseC2Ev": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Database::__base_ctor__(unsigned long long *a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = operator new(24);\n
    v1->field_0 = v1->field_0 & 252 | 1;\n
    v1->field_1 = 0;\n
    v1->field_2 = 0;\n
    *(a0) = v1;\n
    return Database::rebuild_fsm(a0);\n
}\n
", "4215794:_ZN8Database11rebuild_fsmEv": "typedef struct struct_3 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[6];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern struct_1 *g_10;\n
\n
long long Database::rebuild_fsm(struct struct_3 **a0)\n
{\n
    struct_2 *v1;  // rax, Other Possible Types: unsigned long, void*, struct_4 *\n
    struct_3 *v2;  // rcx, Other Possible Types: unsigned long\n
    struct_4 *v3;  // rdx, Other Possible Types: unsigned long, struct_1 *\n
    struct_1 *v4;  // r14, Other Possible Types: unsigned long\n
    struct_2 *v5;  // r12, Other Possible Types: unsigned long, struct_1 *\n
    void* v6;  // r13, Other Possible Types: unsigned long\n
    struct_2 *v7;  // r15, Other Possible Types: unsigned long, struct_1 *, struct_4 *\n
    struct_0 *v8;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rax\n
\n
    v1 = _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_(*(a0));\n
    v2 = *(a0);\n
    if (!v2->field_2)\n
        return v1;\n
    v1 = 0;\n
    v3 = 0;\n
    v4 = 0;\n
    do\n
    {\n
        v7 = *((v2 + v1 * 8 + 24));\n
        if (!v4)\n
            v4 = v7;\n
        if (v3)\n
        {\n
            *((v3 + &g_10)) = v7;\n
            v2 = *(a0);\n
        }\n
        v7->field_8 = v2;\n
        v1 += 1;\n
        v2 = *(a0);\n
        v3 = v7;\n
    } while (v1 < *((v2 + 2)));\n
    if (!v4)\n
        return v1;\n
    do\n
    {\n
        v5 = *((v4 + &g_10));\n
        v1 = (!v5 ? v7 : v5);\n
        if (!*((v4 + 2)))\n
        {\n
            v7 = v1;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                v7 = *((v4 + v6 * 8 + 24));\n
                v8 = *((v4 + 8));\n
                if (!v5)\n
                    v5 = v7;\n
                if (v1)\n
                    *((v1 + &g_10)) = v7;\n
                while (true)\n
                {\n
                    v9 = Database::PrefixNode::get_next(v8, v7->field_1);\n
                    if (v9)\n
                        break;\n
                    v8 = *((v8 + 8));\n
                }\n
                v7->field_8 = v9;\n
                v6 += 1;\n
                v1 = v7;\n
            } while (v6 < *((v4 + 2)));\n
        }\n
        v4 = v5;\n
    } while (v5);\n
    return v1;\n
}\n
", "4216003:sub_4054c3": null, "4216004:_ZN8DatabaseD1Ev": "long long Database::__dtor__(unsigned long long *a0)\n
{\n
    Database::PrefixNode::__base_dtor__(*(a0));\n
    return cgc_free(*(a0));\n
}\n
", "4216025:sub_4054d9": null, "4216026:_ZN8Database10PrefixNode3addEPPS0_PKhj": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_1;\n
\n
long long Database::PrefixNode::add(struct struct_0 **a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_33;  // tmp #33\n
    unsigned long v2;  // rax\n
    unsigned int v3;  // r15d\n
    char *v4;  // r14, Other Possible Types: unsigned long, unsigned long long\n
    void* v5;  // rax, Other Possible Types: unsigned long, unsigned long long\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v8;  // r12\n
    void* v9;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v10;  // r13\n
    struct_1 *v11;  // rax\n
    struct struct_0 **v12;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned long long v16;  // rax\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a1;\n
    v12 = a0;\n
    while (true)\n
    {\n
        v7 = *(v12);\n
        v5 = v7->field_2;\n
        if (!v5)\n
        {\n
            v5 = 0;\n
        }\n
        else\n
        {\n
            v9 = 0;\n
            while (*((*(&v7[6 + 2 * v9]) + 1)) != *(v4))\n
            {\n
                v9 += 1;\n
                if (v5 == v9)\n
                    goto LABEL_40552b;\n
            }\n
            if (v9 >= 0)\n
            {\n
                if (v3 == 1)\n
                {\n
                    v5 = *(&v7[6 + 2 * v9]);\n
                    *(v5) = *(v5) | 2;\n
                    return *(&v7[6 + 2 * v9]);\n
                }\n
                goto LABEL_4055c6;\n
            }\n
        }\n
LABEL_40552b:\n
        v6 = cgc_realloc(v7, v5 * 8 + 32);\n
        *(v12) = v6;\n
        if (!v6)\n
        {\n
            cgc__terminate(v7);\n
            v16 = Database::PrefixNode::remove(v7, a1, 24, v13, v14, v15);\n
            return v16;\n
        }\n
        v7 = v6;\n
        v8 = v6->field_2 + 1;\n
        v6->field_2 = v8;\n
        v9 = v8 - 1;\n
        v10 = v8;\n
        *(&v6[4 + 2 * v10]) = cgc_malloc(24);\n
        v11 = operator new(24);\n
        tmp_33 = *(v4);\n
        v11->field_0 = v11->field_0 & 252 | (v3 == 1) * 2;\n
        v11->field_1 = tmp_33;\n
        v11->field_2 = 0;\n
        cgc_memcpy(*((v7 + v10 * 8 + 16)), v11, 24);\n
        Database::PrefixNode::__base_dtor__(v11);\n
        v5 = operator delete(v11);\n
LABEL_4055c6:\n
        if (v3 < 2)\n
            return v5;\n
        v12 = v7 + v9 * 8 + 24;\n
        v4 += 1;\n
        v3 -= 1;\n
    }\n
}\n
", "4216324:_ZN8Database10PrefixNode6removeEPPS0_PKhj": "typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Database::PrefixNode::remove(struct struct_1 **a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct_1 *v3;  // r12\n
    char v4;  // cl\n
    struct_2 *v5;  // rdi\n
    void* v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rbp, Other Possible Types: unsigned long long\n
    char *v8;  // r14\n
    char *v9;  // rax, Other Possible Types: unsigned long, unsigned long long\n
    struct_0 *v10;  // r15\n
    unsigned long v11;  // rax, Other Possible Types: unsigned short\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    v9 = v3->field_2;\n
    if (!v9)\n
        return v3->field_2;\n
    v4 = *(a1);\n
    v9 *= 8;\n
    v7 = 1;\n
    v6 = 0;\n
    while (true)\n
    {\n
        v5 = *(&v3[6].padding_0[v6]);\n
        if (v5->field_1 == v4)\n
            break;\n
        v6 += 8;\n
        v7 = v7 + 1;\n
        if (v9 == v6)\n
            return v9;\n
    }\n
    if ([D] amd64g_calculate_condition(0x8<64>, 0x1b<64>, Conv(32->64, (Conv(64->32, rbp<8>) - 0x1<32>)), 0x0<64>, Conv(1->64, (Load(addr=(rdi<8> + 0x1<64>), size=1, endness=Iend_LE) < cl<1>))))\n
        return v9;\n
    v8 = &v3->padding_0[v6 + 24];\n
    if (a2 == 1)\n
    {\n
        v9 = *(&v3[6].padding_0[v6]);\n
        *(v9) = *(v9) & 253;\n
    }\n
    else\n
    {\n
        v9 = Database::PrefixNode::remove(v8, a1 + 1, a2 - 1);\n
    }\n
    v10 = *(&v3[6].padding_0[v6]);\n
    if (v10->field_2)\n
    {\n
        return v9;\n
    }\n
    else if ((v10->field_0 & 2))\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v11 = v3->field_2;\n
        if (!(v11 >= 2 && (v11 - 1) > v7 - 1))\n
        {\n
            v3->field_2 = v11 - 1;\n
            Database::PrefixNode::__base_dtor__(v10);\n
            return cgc_free(*(&v3[6].padding_0[v6]));\n
        }\n
        cgc_memmove(v8, &v3->padding_0[v6 + 32], (v11 - v7) * 8);\n
        v11 = v3->field_2;\n
    }\n
}\n
", "4216562:_ZN8Database3addEPKhj": "long long Database::add(struct struct_0 **a0, char *a1, unsigned int a2)\n
{\n
    Database::PrefixNode::add(a0, a1, a2);\n
    return Database::rebuild_fsm(a0);\n
}\n
", "4216580:_ZN8Database6removeEPKhj": "long long Database::remove(struct struct_1 **a0, char *a1, unsigned int a2)\n
{\n
    Database::PrefixNode::remove(a0, a1, a2);\n
    return Database::rebuild_fsm(a0);\n
}\n
", "4216598:_ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    char padding_4[4];\n
    uint128_t field_8;\n
} struct_0;\n
\n
long long _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v3;  // r14\n
    void* v4;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    *(&(&a0->padding_4)[1]) = 0;\n
    if (!a0->field_2)\n
        return v2;\n
    v3 = a0;\n
    v4 = 0;\n
    do\n
    {\n
        a0 = *((a0 + v4 * 8 + 24));\n
        _ZN8Database10PrefixNode13traverse_treeIZNS_11rebuild_fsmEvE3$_2EEvPS0_T_(a0);\n
        v4 += 1;\n
        v2 = v3->field_2;\n
    } while (v4 < v2);\n
    return v3->field_2;\n
}\n
", "4216652:_ZNK8Database5queryEPKhj": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long Database::query const(struct struct_0 **a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v1;  // rbp, Other Possible Types: unsigned long\n
    char v2;  // r14b, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rax\n
    char *v4;  // rbx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v1 = *(a0);\n
        v2 = 1;\n
        v4 = 0;\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                a1 = *((a1 + v4));\n
                v3 = Database::PrefixNode::get_next(v1, a1);\n
                if (v3)\n
                    break;\n
                v1 = *((v1 + 8));\n
            }\n
            if ((v3->field_0 & 2))\n
                break;\n
            v4 += 1;\n
            v1 = v3;\n
            v2 = v4 < a2;\n
            if (v4 == a2)\n
                break;\n
        }\n
    }\n
    *(&v2) = v2 & 1;\n
    return v2;\n
}\n
", "4216743:sub_4057a7": null, "4216744:_ZN8Database10PrefixNodeD2Ev": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Database::PrefixNode::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v3;  // r14\n
    void* v4;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (!a0->field_2)\n
        return v2;\n
    v3 = a0;\n
    v4 = 0;\n
    do\n
    {\n
        a0 = *((a0 + v4 * 8 + 24));\n
        Database::PrefixNode::__base_dtor__(a0);\n
        cgc_free(*(&v3[6 + 2 * v4]));\n
        v4 += 1;\n
        v2 = v3->field_2;\n
    } while (v4 < v2);\n
    return v3->field_2;\n
}\n
", "4216801:sub_4057e1": null, "4216802:_ZN8Database10PrefixNode8get_nextEh": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Database::PrefixNode::get_next(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    void* v2;  // rcx, Other Possible Types: unsigned long\n
\n
    v1 = a0->field_2;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            if (*((*(&a0[6 + 2 * v2]) + 1)) == a1)\n
            {\n
                if (!((v2 >> 31) & 1))\n
                    return *(&a0[6 + 2 * v2]);\n
                break;\n
            }\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return ((a0->field_0 & 1) ? 0 : a0);\n
}\n
", "4216856:_ZN8EmulatorC1EPvS0_": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    char padding_18[32784];\n
    unsigned int field_8028;\n
    char padding_802c[16];\n
    char field_803c;\n
    char padding_803d[3];\n
    unsigned long long field_8040;\n
} struct_0;\n
\n
long long Emulator::__ctor__(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    a0->field_8 = a1;\n
    a0->field_10 = a2;\n
    a0->field_8040 = 0;\n
    v3 = -60;\n
    do\n
    {\n
        *(&a0[1].padding_18[36 + v3]) = 0;\n
        v3 += 20;\n
    } while (true);\n
    cgc_memset(&a0->padding_18[0x8000], 0, 32);\n
    a0->field_8028 = a1 + 0x10000;\n
    a0->field_803c = a0->field_803c & 252;\n
    return cgc_memset(&a0->padding_18, 0, 0x8000);\n
}\n
", "4216973:sub_40588d": null, "4216974:_ZN8EmulatorD1Ev": "long long Emulator::__dtor__()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4216975:sub_40588f": null, "4216976:_ZN8Emulator5resetEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    char padding_18[32784];\n
    unsigned int field_8028;\n
    char padding_802c[16];\n
    char field_803c;\n
} struct_0;\n
\n
long long Emulator::reset(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int s_158;  // [bp-0x158]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long, char, unsigned int\n
    void* v4;  // r14, Other Possible Types: unsigned long\n
    unsigned long v5;  // rbx, Other Possible Types: unsigned long long\n
    void* v6;  // rbp, Other Possible Types: unsigned long\n
    void* v7;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rax\n
\n
    v0 = v2;\n
    v4 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        v2 = *((a0 + v7 + 24));\n
        if (*((a0 + v7 + 24)))\n
        {\n
            v5 = v4;\n
            v6 = 0;\n
            while (true)\n
            {\n
                v2 = s_158;\n
                if ((((&v2)[(v6 & 31) >> 3] >> (v6 & 31 & 7)) & 1))\n
                {\n
                    a0 = *((a0 + 16)) + v5;\n
                    v2 = cgc_memset(a0, 0, 0x1000);\n
                }\n
                if (v6 == 7)\n
                    break;\n
                *(&v2) = *(24 + a0 + v7);\n
                v5 += 0x1000;\n
                v6 += 1;\n
            }\n
        }\n
        v7 += 1;\n
        v4 += 0x8000;\n
    } while (v7 != 0x8000);\n
    cgc_memset(*((a0 + 8)), 0, 0x10000);\n
    cgc_memset(a0 + 32792, 0, 32);\n
    cgc_memset(a0 + 24, 0, 0x8000);\n
    v8 = 0x10000 + *((a0 + 8));\n
    *((a0 + 32808)) = v8;\n
    *((a0 + 32828)) = *((a0 + 32828)) & 252;\n
    return v8;\n
}\n
", "4217174:_ZN8Emulator6set_ipEi": "typedef struct struct_0 {\n
    char padding_0[32824];\n
    unsigned int field_8038;\n
} struct_0;\n
\n
long long Emulator::set_ip(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    a0->field_8038 = a1;\n
    return v1;\n
}\n
", "4217181:sub_40595d": null, "4217182:_ZN8Emulator4stepEv": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[15];\n
    unsigned long long field_10;\n
    char padding_18[32768];\n
    unsigned int field_8018;\n
    unsigned int field_801c;\n
    unsigned int field_8020;\n
    unsigned int field_8024;\n
    unsigned int field_8028;\n
    unsigned int field_802c;\n
    unsigned int field_8030;\n
    unsigned int field_8034;\n
    unsigned int field_8038;\n
    char field_803c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_408430;\n
\n
long long Emulator::step(struct_1 *a0)\n
{\n
    int v0;  // [bp-0x98], Other Possible Types: unsigned long long\n
    unsigned int v1;  // [bp-0x88]\n
    char v2;  // [bp-0x78]\n
    char v3;  // [bp-0x74]\n
    char v4;  // [bp-0x70]\n
    char v5;  // [bp-0x5c]\n
    unsigned long long v8;  // [bp-0x30]\n
    unsigned long long v10;  // rax\n
    struct_1 *v11;  // rbx\n
    unsigned int v12;  // edx\n
    unsigned long v13;  // d\n
    struct_0 *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v19;  // r14, Other Possible Types: unsigned long\n
    struct_0 *v20;  // r14, Other Possible Types: unsigned long\n
    struct_1 *v21;  // rdi, Other Possible Types: unsigned long\n
    struct_0 *v22;  // rsi, Other Possible Types: unsigned long\n
    unsigned int v23;  // r14d\n
    unsigned long long v24;  // rax\n
    unsigned int v25;  // edx\n
    unsigned long v26;  // cc_dep1, Other Possible Types: unsigned long long\n
    unsigned long v27;  // cc_dep2, Other Possible Types: unsigned long long\n
    unsigned long long v28;  // rcx\n
    unsigned int v29;  // cc_dep1\n
    unsigned int v31;  // ecx\n
    unsigned int v32;  // ecx\n
\n
    v10 = a0->field_8038;\n
    if (v10 > 1073741823)\n
        return 0;\n
    v11 = a0;\n
    Instruction::disassemble(&v2, v10 + a0->field_10, 0x40000000 - v10);\n
    v12 = *(&v2);\n
    if (v12)\n
    {\n
        v16 = &a0[1].padding_1[2];\n
        v15 = 17;\n
        for (v14 = &v2; v15; v14 += v13 * 4)\n
        {\n
            v15 -= 1;\n
            *(v16) = *(v14);\n
            v16 += v13 * 4;\n
        }\n
        v17 = *(&v3);\n
        v11->field_8038 = v11->field_8038 + v17;\n
        v11->field_0 = 0;\n
        switch (v12)\n
        {\n
        case 2:\n
            v19 = &v4;\n
            v24 = Emulator::get_operand(v11, &v5) + Emulator::get_operand(v11, &v4);\n
            v25 = v24;\n
            v26 = v24;\n
            v27 = v24;\n
            goto LABEL_405a41;\n
        case 4:\n
            v19 = &v4;\n
            v28 = Emulator::get_operand(v11, &v4) - Emulator::get_operand(v11, &v5);\n
            v25 = v28;\n
            v26 = v28;\n
            v27 = v28;\n
LABEL_405a41:\n
            v11->field_803c = (v26 != v27) * 2 | v11->field_803c & 252 | !v25;\n
            v21 = v11;\n
            v22 = v19;\n
            goto LABEL_405ebb;\n
        case 6:\n
            v20 = &v4;\n
            v29 = Emulator::get_operand(v11, &v4) & Emulator::get_operand(v11, &v5);\n
            goto LABEL_405ad2;\n
        case 7:\n
            v20 = &v4;\n
            v29 = Emulator::get_operand(v11, &v4) | Emulator::get_operand(v11, &v5);\n
            goto LABEL_405ad2;\n
        case 8:\n
            v20 = &v4;\n
            v29 = Emulator::get_operand(v11, &v4) ^ Emulator::get_operand(v11, &v5);\n
LABEL_405ad2:\n
            v11->field_803c = v11->field_803c & 252 | !v29;\n
            v21 = v11;\n
            v22 = v20;\n
            goto LABEL_405ebb;\n
        case 9:\n
            Emulator::get_operand(v11, &v5);\n
            v21 = v11;\n
            v22 = &v4;\n
            goto LABEL_405c2e;\n
        case 10:\n
            if (*(&v5) == 2)\n
            {\n
                v22 = &v4;\n
                goto LABEL_405eb8;\n
            }\n
        case 11:\n
            v17 = Emulator::get_operand(v11, &v4) - Emulator::get_operand(v11, &v5);\n
            v11->field_803c = (v17 != v17) * 2 | v11->field_803c & 252 | !v17;\n
            break;\n
        case 12:\n
            *(&v0) = 340282366841710300949110269855404130306;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v4, Emulator::get_operand(v11, &v0));\n
            goto LABEL_405eb5;\n
        case 13:\n
            v0 = 17179869185;\n
            v8 = 17179869185;\n
            Emulator::set_operand(v11, &v0, Emulator::get_operand(v11, &v8) - 4);\n
            *(&v0) = 340282366841710300949110269855404130306;\n
            v1 = 0;\n
            Emulator::get_operand(v11, &v4);\n
            v22 = &v0;\n
            v21 = v11;\n
LABEL_405c2e:\n
            goto LABEL_405ebb;\n
        case 14:\n
            *(&v0) = 340282366841710300949110269855404130306;\n
            v1 = 0;\n
            v23 = Emulator::get_operand(v11, &v0);\n
            v0 = 17179869185;\n
            v8 = 17179869185;\n
            v17 = Emulator::set_operand(v11, &v0, Emulator::get_operand(v11, &v8) + 4);\n
            if (v23 < 0x40000000)\n
            {\n
                v11->field_8038 = v23;\n
                break;\n
            }\n
        case 17:\n
            if (!(!(v11->field_803c & 1)))\n
                break;\n
            goto LABEL_405d0b;\n
        case 18:\n
            v0 = 17179869185;\n
            v8 = 17179869185;\n
            Emulator::set_operand(v11, &v0, Emulator::get_operand(v11, &v8) - 4);\n
            *(&v0) = 340282366841710300949110269855404130306;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8038);\n
            goto LABEL_405d0b;\n
        case 19:\n
            Emulator::get_operand(v11, &v4);\n
            goto LABEL_405d6b;\n
        case 20:\n
            Emulator::get_operand(v11, &v4);\n
LABEL_405d6b:\n
            v21 = v11;\n
            v22 = &v4;\n
            goto LABEL_405ebb;\n
        case 21:\n
            *(&v0) = 340282366920938463389587631154109874178;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8018);\n
            *(&v0) = 340282366920938463315800654859271667714;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_801c);\n
            *(&v0) = 340282366920938463242013678564433461250;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8020);\n
            *(&v0) = 340282366920938463168226702269595254786;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8024);\n
            *(&v0) = 340282366920938463094439725974757048322;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8028);\n
            *(&v0) = 340282366920938463020652749679918841858;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_802c);\n
            *(&v0) = 340282366920938462946865773385080635394;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8030);\n
            *(&v0) = 340282366920938462873078797090242428930;\n
            v1 = 0;\n
            Emulator::set_operand(v11, &v0, v11->field_8034);\n
LABEL_405eb5:\n
            v0 = 17179869185;\n
            v8 = 17179869185;\n
            Emulator::get_operand(v11, &v8);\n
            v22 = &v0;\n
LABEL_405eb8:\n
            v21 = v11;\n
LABEL_405ebb:\n
            v17 = Emulator::set_operand(v21, v22);\n
            break;\n
        case 22:\n
            v0 = 17179869185;\n
            v8 = 17179869185;\n
            Emulator::set_operand(v11, &v0, Emulator::get_operand(v11, &v8) + 32);\n
            *(&v0) = 340282366920938463389587631154109874178;\n
            v1 = 0;\n
            v11->field_8018 = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938463315800654859271667714;\n
            v1 = 0;\n
            v11->field_801c = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938463242013678564433461250;\n
            v1 = 0;\n
            v11->field_8020 = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938463168226702269595254786;\n
            v1 = 0;\n
            v11->field_8024 = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938463020652749679918841858;\n
            v1 = 0;\n
            v11->field_802c = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938462946865773385080635394;\n
            v1 = 0;\n
            v11->field_8030 = Emulator::get_operand(v11, &v0);\n
            *(&v0) = 340282366920938462873078797090242428930;\n
            v1 = 0;\n
            v17 = Emulator::get_operand(v11, &v0);\n
            v11->field_8034 = v17;\n
            break;\n
        case 16:\n
            if (!(v11->field_803c & 1))\n
                break;\n
        case 15:\n
LABEL_405d0b:\n
            v17 = Emulator::get_operand(v11, &v4);\n
            v31 = 0;\n
            if (*(&v4) == 3)\n
                v31 = v11->field_8038;\n
            v32 = v31 + v17;\n
            if (v32 < 0x40000000)\n
            {\n
                v11->field_8038 = v32;\n
                break;\n
            }\n
            v11->field_0 = 1;\n
            break;\n
        }\n
        *(&v17) = !v11->field_0;\n
        return v17;\n
    }\n
}\n
", "4218916:_ZN8Emulator11get_operandERK7Operand": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long Emulator::get_operand(struct_0 *a0, struct_1 *a1)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned int v1;  // ecx\n
    unsigned long long v2;  // rax\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rcx\n
    unsigned int *v5;  // rax\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // rdx\n
\n
    v1 = a1->field_0;\n
    if (v1 == 3)\n
    {\n
        return a1->field_4;\n
    }\n
    else if (v1 == 2)\n
    {\n
        v2 = a1->field_4;\n
        v3 = (v2 == -1 ? *(&(&a0->field_0)[4 * v2 + 32792]) : 0);\n
        v4 = a1->field_c;\n
        if (v4 != -1)\n
            v3 += *(&(&a0->field_0)[4 * v4 + 32792]) << (a1->field_10 & 31);\n
        v5 = v3 + a1->field_8;\n
        if (v5 >= 0x1000)\n
        {\n
            if (v5 <= 1073741820)\n
                return *((a0->field_10 + v5));\n
            v7 = a0->field_8;\n
            if (v5 >= v7 && v5 - v7 <= 65535)\n
            {\n
                v8 = v5 + 3;\n
                tmp_3 = v8;\n
                if (tmp_3 >= v7 && v8 - v7 <= 65535)\n
                    return *(v5);\n
            }\n
        }\n
        a0->field_0 = 1;\n
        return 0;\n
    }\n
    else if (v1 == 1)\n
    {\n
        return *(&(&a0->field_0)[4 * a1->field_4 + 32792]);\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4219079:sub_4060c7": null, "4219080:_ZN8Emulator11set_operandERK7Operandi": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long Emulator::set_operand(struct_0 *a0, struct_1 *a1, unsigned long a2)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned long long v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v2;  // rax\n
    unsigned long v3;  // r8, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rcx\n
    unsigned int *v6;  // rcx\n
    unsigned int *v7;  // rsi\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rsi\n
\n
    v1 = a1->field_0;\n
    if (v1 == 2)\n
    {\n
        v2 = a1->field_4;\n
        v3 = (v2 == -1 ? *(&(&a0->field_0)[4 * v2 + 32792]) : 0);\n
        v5 = a1->field_c;\n
        if (v5 != -1)\n
            v3 += *(&(&a0->field_0)[4 * v5 + 32792]) << (a1->field_10 & 31);\n
        v1 = a1->field_8;\n
        v6 = v3 + v1;\n
        if (v6 > 4095)\n
        {\n
            if (v6 <= 1073741820)\n
            {\n
                v7 = v6;\n
                *((a0->field_10 + v6)) = a2;\n
                *(&v6) = v6 / 0x1000 & 7;\n
                (&a0[1].field_0)[v7 / 0x8000] = (&a0[1].field_0)[v7 / 0x8000] | (1 << (*(&v6) & 31));\n
                return 1 << (*(&v6) & 31);\n
            }\n
            v1 = a0->field_8;\n
            if (v6 >= v1 && v6 - v1 <= 65535)\n
            {\n
                v9 = v6 + 3;\n
                tmp_3 = v9;\n
                v10 = v9 - v1;\n
                if (tmp_3 >= v1 && v10 <= 65535)\n
                {\n
                    *(v6) = a2;\n
                    return v1;\n
                }\n
            }\n
        }\n
        a0->field_0 = 1;\n
        return v1;\n
    }\n
    else if (v1 == 1)\n
    {\n
        v4 = a1->field_4;\n
        *(&(&a0->field_0)[4 * v4 + 32792]) = a2;\n
        return v4;\n
    }\n
    else\n
    {\n
        return a1->field_0;\n
    }\n
}\n
", "4219257:sub_406179": null, "4219258:_ZN8Emulator15get_operand_memERK7Operand": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char field_10;\n
} struct_0;\n
\n
long long Emulator::get_operand_mem(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned long long v1;  // rax\n
    unsigned int v2;  // eax\n
    unsigned long long v3;  // rcx\n
    unsigned long long v4;  // rax\n
\n
    v1 = a1->field_4;\n
    v2 = (v1 == -1 ? *((a0 + v1 * 4 + 32792)) : 0);\n
    v3 = a1->field_c;\n
    if (v3 != -1)\n
        v2 += (*((a0 + v3 * 4 + 32792)) << (a1->field_10 & 31));\n
    v4 = v2 + a1->field_8;\n
    return v4;\n
}\n
", "4219307:sub_4061ab": null, "4219308:_ZN8Emulator11print_stateEv": "extern unsigned int cgc_stderr;\n
\n
long long Emulator::print_state(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    void* v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    cgc_fprintf(*(&cgc_stderr), \"IP: %08X\\tStack: %08X\\tHeap: %08X\\n
\");\n
    v3 = 0;\n
    do\n
    {\n
        cgc_fprintf(*(&cgc_stderr), \"R%d: %08X\\n
\");\n
        v3 += 1;\n
    } while (v3 != 8);\n
    return cgc_fprintf(*(&cgc_stderr), \"\\n
\");\n
}\n
", "4219429:sub_406225": null, "4219432:_ZN6EngineC2Ev": "long long Engine::__base_ctor__(unsigned long long *a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    Database::__base_ctor__(a0);\n
    Database::__base_ctor__(a0 + 1);\n
    v3 = cgc_allocate(a0, v1, v2);\n
    if (v3)\n
    {\n
        cgc__terminate(a0);\n
        return Engine::__base_dtor__(a0, v1, v2, v4, v5, v6);\n
    }\n
    return v3;\n
}\n
", "4219486:_ZN6EngineD2Ev": "long long Engine::__base_dtor__(unsigned long long *a0)\n
{\n
    Database::__dtor__(a0 + 1);\n
    return Database::__dtor__(a0);\n
}\n
", "4219508:_ZN6Engine7processEPhj": "typedef struct struct_0 {\n
    char padding_0[24];\n
    char field_18;\n
} struct_0;\n
\n
long long Engine::process(struct_0 *a0, unsigned short a1[4], unsigned long a2)\n
{\n
    unsigned long long v1;  // rax, Other Possible Types: unsigned long\n
\n
    a0->field_18 = 0;\n
    if (Database::query const(&a0->padding_0[8], a1, a2))\n
        return 0;\n
    v1 = Database::query const(a0, a1, a2);\n
    if (v1)\n
        a0->field_18 = 1;\n
    if (a2 >= 40)\n
    {\n
        v1 = a1[0];\n
        if (v1 == 43456 && !a1[1])\n
        {\n
            v1 = a1[2] * a1[3] * 3;\n
            if (v1 != a2 - 40)\n
                a0->field_18 = 1;\n
        }\n
    }\n
    else if (a2 < 32)\n
    {\n
        goto LABEL_406301;\n
    }\n
    if (*(&a1[0]) == 1311151218)\n
        v1 = Engine::process_exe(a0, a1, a2);\n
LABEL_406301:\n
    *(&v1) = a0->field_18;\n
    return v1;\n
}\n
", "4219661:sub_40630d": null, "4219662:_ZN6Engine6is_bmpEPhj": "long long Engine::is_bmp(unsigned long a0, unsigned short *a1, unsigned long a2)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (a2 >= 40)\n
    {\n
        v1 = *(a1);\n
        *(&v1) = v1 == 43456;\n
        return v1;\n
    }\n
    return 0;\n
}\n
", "4219682:_ZN6Engine11process_bmpEPhj": "typedef struct struct_0 {\n
    char padding_0[24];\n
    char field_18;\n
} struct_0;\n
\n
long long Engine::process_bmp(struct_0 *a0, unsigned short a1[4], unsigned long a2)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v2;  // rcx\n
\n
    v1 = a1[0];\n
    if (v1 != 43456)\n
    {\n
        return a1[0];\n
    }\n
    else if (a1[1])\n
    {\n
        return a1[0];\n
    }\n
    else\n
    {\n
        v2 = a1[2] * a1[3];\n
        v1 = v2 * 3;\n
        if (v1 == a2 - 40)\n
            return v2 * 3;\n
        a0->field_18 = 1;\n
        return v2 * 3;\n
    }\n
}\n
", "4219730:_ZN6Engine6is_exeEPhj": "long long Engine::is_exe(unsigned long a0, unsigned int *a1, unsigned long a2)\n
{\n
    char v1;  // al\n
    unsigned long v2;  // rax\n
\n
    if (a2 >= 32)\n
    {\n
        v1 = *(a1) == 1311151218;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4219748:_ZN6Engine11process_exeEPhj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
    char padding_14[4];\n
    char field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    char field_18;\n
} struct_1;\n
\n
long long Engine::process_exe(struct_0 *a0, unsigned int a1[8], unsigned long a2)\n
{\n
    char v0;  // [bp-0x180b0]\n
    int tmp_9;  // tmp #9\n
    char v1;  // [bp-0x10070]\n
    char v2;  // [bp-0x10028]\n
    struct_1 *v4;  // r14\n
    unsigned long long v5;  // rdi\n
    unsigned int v6;  // r12d\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // r15\n
    unsigned long long v9;  // rdi\n
    unsigned long v10;  // rdx\n
    unsigned long long v11;  // rax\n
    unsigned long long v12;  // rdi\n
    unsigned long v13;  // rdx\n
    unsigned long v14;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = a0;\n
    Emulator::__ctor__(&v0, &v2, *(&a0->field_10));\n
    Emulator::reset(&v0);\n
    if (a1[0] != 1311151218)\n
    {\n
        return Emulator::__dtor__();\n
    }\n
    else if (a1[1] > 1073741823)\n
    {\n
        return Emulator::__dtor__();\n
    }\n
    else\n
    {\n
        v5 = a1[2];\n
        if (v5 > 1073741823)\n
            return Emulator::__dtor__();\n
        v6 = a2 - 32;\n
        v7 = a1[3];\n
        if (v7 > v6)\n
        {\n
            return Emulator::__dtor__();\n
        }\n
        else if ((v7 + v5) <= 1073741823)\n
        {\n
            v8 = a1 + 1;\n
            cgc_memcpy(v5 + v4->field_10, v8, v7);\n
            v9 = a1[4];\n
            if (v9 > 1073741823)\n
                return Emulator::__dtor__();\n
            v10 = a1[5];\n
            if ((v10 + v9) > 1073741823)\n
                return Emulator::__dtor__();\n
            v11 = a1[3];\n
            if (v10 > v6 - v11)\n
                return Emulator::__dtor__();\n
            cgc_memcpy(v9 + v4->field_10, v8 + v11, v10);\n
            v12 = a1[6];\n
            if (v12 > 1073741823)\n
                return Emulator::__dtor__();\n
            v13 = a1[7];\n
            if ((v13 + v12) > 1073741823)\n
                return Emulator::__dtor__();\n
            cgc_memset(v12 + v4->field_10, 0, v13);\n
            Emulator::set_ip(&v0, a1[1]);\n
            v14 = 9999;\n
            while (true)\n
            {\n
                tmp_9 = v14;\n
                v14 = v14 - 1;\n
                if (!Emulator::step(&v0))\n
                    break;\n
                if (*(&v1) == 22)\n
                    break;\n
                if (tmp_9 < 1)\n
                    break;\n
            }\n
            _ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_(&v0, v4);\n
            if (Database::query const(v4, &v2, 0x10000))\n
            {\n
                v4->field_18 = 1;\n
                return Emulator::__dtor__();\n
            }\n
            return Emulator::__dtor__();\n
        }\n
        else\n
        {\n
            return Emulator::__dtor__();\n
        }\n
    }\n
}\n
", "4220113:sub_4064d1": null, "4220114:_ZN6Engine12update_rulesEPhj": "long long Engine::update_rules(struct struct_1 **a0, char a1[5], unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned int v3;  // r14d\n
    char v4[5];  // rbx\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v7;  // rdx\n
    unsigned int v8;  // r12d\n
    unsigned long v9;  // r13b, Other Possible Types: char\n
    unsigned long v10;  // rbp\n
    unsigned long long v11;  // rdx\n
    unsigned long long v12;  // rcx\n
    char *v13;  // rsi\n
\n
    v0 = v2;\n
    if (a2 < 8)\n
        return 0;\n
    v3 = a2;\n
    v4 = a1;\n
    v6 = 305419896;\n
    v7 = 4;\n
    do\n
    {\n
        v6 += a1[v7];\n
        v7 += 1;\n
    } while (a2 != v7);\n
    if (!v6 + *(&a1[0]))\n
    {\n
        v8 = v3 - 4;\n
        v9 = 1;\n
        if (v8 < 5)\n
            return v9;\n
        v10 = 4;\n
        while (true)\n
        {\n
            *(&v6) = v4[v10];\n
            if (v4[v10] > 1)\n
                break;\n
            v11 = *(&v4[1 + v10]);\n
            if (v11 > v3)\n
                break;\n
            v12 = v10 + 5;\n
            v10 = v11 + v12;\n
            if (v10 > v3)\n
                break;\n
            v13 = &v4[v12];\n
            if (!v6)\n
                Database::add(a0, v13, v11);\n
            else\n
                Database::remove(a0, v13, v11);\n
            if (v10 >= v8)\n
                return v9;\n
        }\n
    }\n
}\n
", "4220270:_ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    char field_18;\n
} struct_0;\n
\n
long long _ZN8Emulator14traverse_dirtyIZN6Engine11process_exeEPhjE3$_0EEvT_(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int s_158;  // [bp-0x158]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned int, unsigned long, char\n
    struct_0 *v3;  // rbx\n
    void* v4;  // r15, Other Possible Types: unsigned long\n
    unsigned long v5;  // rbp, Other Possible Types: unsigned long long\n
    void* v6;  // r12, Other Possible Types: unsigned long\n
    void* v7;  // r13, Other Possible Types: unsigned long\n
    unsigned int v8;  // eax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        v2 = *((a0 + v7 + 24));\n
        if (*((a0 + v7 + 24)))\n
        {\n
            v5 = v4;\n
            v6 = 0;\n
            while (true)\n
            {\n
                v2 = s_158;\n
                if (((*(&v2 + ((v6 & 31) >> 3)) >> (v6 & 31 & 7)) & 1))\n
                {\n
                    a1 = *((a1 + 16)) + v5;\n
                    v2 = Database::query const(v3, a1, (v5 != 0x3ffff000) * 0x1000 + 0x1000);\n
                    if (v2)\n
                        v3->field_18 = 1;\n
                }\n
                if (v6 == 7)\n
                    break;\n
                *(&v2) = *(24 + a0 + v7);\n
                v5 += 0x1000;\n
                v6 += 1;\n
            }\n
        }\n
        v7 += 1;\n
        v8 = 0x8000;\n
        v4 += 0x8000;\n
    } while (v7 != 0x8000);\n
    return 0x8000;\n
}\n
", "4220415:sub_4065ff": null, "4220416:_ZN6Engine9whitelistEPhj": "long long Engine::whitelist(unsigned long a0, char *a1, unsigned long a2)\n
{\n
    return Database::add(a0 + 8, a1, a2);\n
}\n
", "4220425:sub_406609": null, "4220428:_ZN11Instruction11disassembleEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _ZL7parsers;\n
extern char g_40a031;\n
\n
long long Instruction::disassemble(unsigned int *a0, char *a1)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    char v4[4235314];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // d\n
    struct_0 *v6;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v7;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(&a0) = 0;\n
    v3 = -60;\n
    do\n
    {\n
        *((68 + a0 + v3)) = 0;\n
        v3 += 20;\n
    } while (true);\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (((&g_40a031)[v4] & *(a1)) != (&_ZL7parsers)[v4])\n
        {\n
            v4 += 16;\n
            if (v4 == 400)\n
                return a0;\n
        }\n
        else\n
        {\n
            *(&(&_ZL7parsers)[8 + v4])(&v0);\n
            v7 = 17;\n
            for (v6 = &v0; v7; v6 += v5 * 4)\n
            {\n
                v7 -= 1;\n
                *(a0) = *(v6);\n
                a0 += v5 * 4;\n
            }\n
            return a0;\n
        }\n
    }\n
}\n
", "4220541:sub_40667d": null, "4220542:_ZN3$_18__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_1::__invoke(unsigned int *a0, char *a1)\n
{\n
    int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned long long v2;  // [bp-0x60]\n
    int v3;  // [bp-0x58], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    int v5;  // [bp-0x44], Other Possible Types: char\n
    unsigned int v6;  // [bp-0x34], Other Possible Types: char\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v11;  // d\n
    struct_0 *v12;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
\n
    v2 = 4294967298;\n
    v9 = 8;\n
    do\n
    {\n
        *((&v2 + v9)) = 0;\n
        v9 += 20;\n
    } while (v9 != 68);\n
    if (parse_modrm(&v2, a1))\n
    {\n
        if ((*(a1) & 2))\n
        {\n
            v1 = *(&v4);\n
            *(&v0) = *(&v3);\n
            v4 = *(&v6);\n
            *(&v3) = *(&v5);\n
            v6 = v1;\n
            *(&v5) = v0;\n
        }\n
        v12 = &v2;\n
        for (v13 = 17; v13; v12 += v11 * 4)\n
        {\n
            v13 -= 1;\n
            *(a0) = *(v12);\n
            a0 += v11 * 4;\n
        }\n
        return a0;\n
    }\n
    *(&a0) = 0;\n
    v10 = -60;\n
    while (true)\n
    {\n
        *((68 + a0 + v10)) = 0;\n
        v10 += 20;\n
    }\n
}\n
", "4220730:_ZL11parse_modrmR11InstructionPhj": "long long parse_modrm(unsigned int a0[9], unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx\n
    unsigned int v2;  // r11d\n
    unsigned long long v3;  // rbx\n
    unsigned int v7;  // ecx\n
\n
    v1 = a0[1];\n
    v2 = v1 + 1;\n
    if (v2 > a2)\n
        return 0;\n
    v3 = v1[a1];\n
    a0[1] = v2;\n
    a0[7] = 1;\n
    a0[8] = v3 / 8 & 7;\n
    if (((v3 & 7) == 4 & (v3 / 64) != 3) == 1)\n
    {\n
        v7 = v1 + 2;\n
        if (v7 > a2)\n
            return 0;\n
        a0[1] = v7;\n
    }\n
    goto *((4228272 + rbx<8> * 4)) + 4228272;\n
}\n
", "4220843:sub_4067ab": "int sub_4067ab()\n
{\n
    unsigned int v1;  // r10d\n
    unsigned int *v2;  // r11\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edx\n
    unsigned int v5[6];  // rdi, Other Possible Types: unsigned long\n
    unsigned long v6;  // rsi\n
    char v7;  // r9b\n
    unsigned int v8;  // r8d\n
\n
    if (v1 != 5)\n
    {\n
        v5[2] = 2;\n
        v5[3] = v1;\n
        *(&v5[4]) = -0x100000000;\n
        v5[1] = 0;\n
    }\n
    else\n
    {\n
        v3 = v2 + 4;\n
        if (!(v3 <= v4))\n
            goto LABEL_0x406748;\n
        *((v5 + 8)) = -4294967294;\n
        *((v5 + 16)) = *((v6 + v2));\n
        *((v5 + 20)) = 4294967295;\n
        *((v5 + 4)) = v3;\n
    }\n
    if (!v7)\n
        goto LABEL_0x40674a;\n
    v4 = (v4 != 4 ? -1 : v8 / 8 & 7);\n
    *((v5 + 12)) = v8 & 7;\n
    *((v5 + 20)) = v4;\n
    *((v5 + 24)) = v8 / 64;\n
}\n
", "4220879:sub_4067cf": "int sub_4067cf()\n
{\n
    unsigned int v1;  // r11d\n
    unsigned int v2;  // edx\n
    unsigned int v3[4];  // rdi\n
    unsigned int v4;  // r10d\n
\n
    if (!(v1 + 4 <= v2))\n
        goto LABEL_0x406748;\n
    v3[2] = 2;\n
    v3[3] = v4;\n
}\n
", "4220899:sub_4067e3": "int sub_4067e3()\n
{\n
    unsigned int v1[4];  // rdi\n
    unsigned int v2;  // r10d\n
\n
    v1[2] = 1;\n
    v1[3] = v2;\n
}\n
", "4220912:sub_4067f0": "long long sub_4067f0(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v1;  // r11d\n
\n
    if (!(v1 + 1 <= a2))\n
        goto LABEL_0x406748;\n
}\n
", "4221047:sub_406877": null, "4221048:_ZN3$_28__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_2::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v4;  // [bp-0x4]\n
    unsigned int *v6;  // rax\n
    unsigned long v7;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v8;  // rcx, Other Possible Types: unsigned long\n
\n
    v6 = a0;\n
    if (a2 > 4)\n
    {\n
        v0 = 21474836482;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4221161:sub_4068e9": null, "4221162:_ZN3$_38__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_3::__invoke(unsigned int *a0, char *a1, unsigned int a2)\n
{\n
    int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned long long v2;  // [bp-0x60]\n
    int v3;  // [bp-0x58], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    int v5;  // [bp-0x44], Other Possible Types: char\n
    char v6;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v11;  // d\n
    struct_0 *v12;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
\n
    v2 = 4294967300;\n
    v9 = 8;\n
    do\n
    {\n
        *((&v2 + v9)) = 0;\n
        v9 += 20;\n
    } while (v9 != 68);\n
    if (parse_modrm(&v2, a1, a2))\n
    {\n
        if ((*(a1) & 2))\n
        {\n
            v1 = *(&v4);\n
            *(&v0) = *(&v3);\n
            v4 = *(&v6);\n
            *(&v3) = *(&v5);\n
            v6 = v1;\n
            *(&v5) = v0;\n
        }\n
        v12 = &v2;\n
        for (v13 = 17; v13; v12 += v11 * 4)\n
        {\n
            v13 -= 1;\n
            *(a0) = *(v12);\n
            a0 += v11 * 4;\n
        }\n
        return a0;\n
    }\n
    *(&a0) = 0;\n
    v10 = -60;\n
    while (true)\n
    {\n
        *((68 + a0 + v10)) = 0;\n
        v10 += 20;\n
    }\n
}\n
", "4221350:_ZN3$_48__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_4::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v4;  // [bp-0x4]\n
    unsigned int *v6;  // rax\n
    unsigned long v7;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v8;  // rcx, Other Possible Types: unsigned long\n
\n
    v6 = a0;\n
    if (a2 > 4)\n
    {\n
        v0 = 21474836484;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4221463:sub_406a17": null, "4221464:_ZN3$_58__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_5::__invoke(unsigned int *a0, char *a1, unsigned int a2)\n
{\n
    int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned long long v2;  // [bp-0x60]\n
    int v3;  // [bp-0x58], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    int v5;  // [bp-0x44], Other Possible Types: char\n
    unsigned int v6;  // [bp-0x34], Other Possible Types: char\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v11;  // d\n
    struct_0 *v12;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
\n
    v2 = 4294967307;\n
    v9 = 8;\n
    do\n
    {\n
        *((&v2 + v9)) = 0;\n
        v9 += 20;\n
    } while (v9 != 68);\n
    if (parse_modrm(&v2, a1, a2))\n
    {\n
        if ((*(a1) & 2))\n
        {\n
            v1 = *(&v4);\n
            *(&v0) = *(&v3);\n
            v4 = *(&v6);\n
            *(&v3) = *(&v5);\n
            v6 = v1;\n
            *(&v5) = v0;\n
        }\n
        v12 = &v2;\n
        for (v13 = 17; v13; v12 += v11 * 4)\n
        {\n
            v13 -= 1;\n
            *(a0) = *(v12);\n
            a0 += v11 * 4;\n
        }\n
        return a0;\n
    }\n
    *(&a0) = 0;\n
    v10 = -60;\n
    while (true)\n
    {\n
        *((68 + a0 + v10)) = 0;\n
        v10 += 20;\n
    }\n
}\n
", "4221652:_ZN3$_68__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_6::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v4;  // [bp-0x4]\n
    unsigned int *v6;  // rax\n
    unsigned long v7;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v8;  // rcx, Other Possible Types: unsigned long\n
\n
    v6 = a0;\n
    if (a2 > 4)\n
    {\n
        v0 = 21474836491;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *(&(&v4)[v8]) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v7)) = 0;\n
            v7 += 20;\n
        }\n
    }\n
}\n
", "4221765:sub_406b45": null, "4221766:_ZN3$_78__invokeEPhj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long $_7::__invoke(struct_0 *a0, char *a1)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v2;  // ecx\n
\n
    a0->field_0 = 4294967315;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + &a0->field_0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    v2 = *(a1) & 7;\n
    a0->field_8 = 1;\n
    a0->field_c = v2;\n
    return a0;\n
}\n
", "4221820:_ZN3$_88__invokeEPhj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long $_8::__invoke(struct_0 *a0, char *a1)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v2;  // ecx\n
\n
    a0->field_0 = 4294967316;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + &a0->field_0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    v2 = *(a1) & 7;\n
    a0->field_8 = 1;\n
    a0->field_c = v2;\n
    return a0;\n
}\n
", "4221874:_ZN3$_98__invokeEPhj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long $_9::__invoke(struct_0 *a0, char *a1)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v2;  // ecx\n
\n
    a0->field_0 = 4294967309;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + &a0->field_0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    v2 = *(a1) & 7;\n
    a0->field_8 = 1;\n
    a0->field_c = v2;\n
    return a0;\n
}\n
", "4221928:_ZN4$_108__invokeEPhj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long $_10::__invoke(struct_0 *a0, char *a1)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v2;  // ecx\n
\n
    a0->field_0 = 4294967308;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + &a0->field_0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    v2 = *(a1) & 7;\n
    a0->field_8 = 1;\n
    a0->field_c = v2;\n
    return a0;\n
}\n
", "4221982:_ZN4$_118__invokeEPhj": "long long $_11::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967317;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4222020:_ZN4$_128__invokeEPhj": "long long $_12::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967318;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4222058:_ZN4$_138__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_13::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v3;  // [bp-0x4]\n
    unsigned int *v5;  // rax\n
    unsigned long v6;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v5 = a0;\n
    if (a2 > 1)\n
    {\n
        v0 = 8589934608;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *(&(&v3)[v7]) = 0;\n
            v7 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v6 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v6)) = 0;\n
            v6 += 20;\n
        }\n
    }\n
}\n
", "4222161:sub_406cd1": null, "4222162:_ZN4$_148__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_14::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v3;  // [bp-0x4]\n
    unsigned int *v5;  // rax\n
    unsigned long v6;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v5 = a0;\n
    if (a2 > 1)\n
    {\n
        v0 = 8589934609;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *(&(&v3)[v7]) = 0;\n
            v7 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v6 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v6)) = 0;\n
            v6 += 20;\n
        }\n
    }\n
}\n
", "4222265:sub_406d39": null, "4222266:_ZN4$_158__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_15::__invoke(unsigned int *a0, unsigned int *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x60], Other Possible Types: unsigned long long\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v7;  // rax\n
    unsigned long long v8;  // rax\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rcx\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // d\n
\n
    v0 = 0x100000000;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (parse_modrm(&v0, a1, a2))\n
    {\n
        v8 = *(&v4);\n
        switch (v8)\n
        {\n
        case 0:\n
            v0 = 2;\n
            break;\n
        case 1:\n
            v0 = 7;\n
            break;\n
        case 2:\n
            v0 = 3;\n
            break;\n
        case 3:\n
            v0 = 5;\n
            break;\n
        case 4:\n
            v0 = 6;\n
            break;\n
        case 5:\n
            v0 = 4;\n
            break;\n
        case 6:\n
            v0 = 8;\n
            break;\n
        case 7:\n
            v0 = 11;\n
            break;\n
        }\n
        v10 = *((&v0 + 4));\n
        if (*((&v0 + 4)) <= a2)\n
        {\n
            v13 = *((a1 + v10));\n
            v14 = &v0;\n
            v3 = 3;\n
            v4 = v13;\n
            v1 = v10 + 4;\n
            for (v15 = 17; v15; v14 += v16 * 4)\n
            {\n
                v15 -= 1;\n
                *(a0) = *(v14);\n
                a0 += v16 * 4;\n
            }\n
            return a0;\n
        }\n
        *(&a0) = 0;\n
        v12 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v12)) = 0;\n
            v12 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v9 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v9)) = 0;\n
            v9 += 20;\n
        }\n
    }\n
}\n
", "4222562:_ZN4$_168__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_16::__invoke(unsigned int *a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x60], Other Possible Types: unsigned long long\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x44]\n
    char v4;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned long v7;  // rax\n
    unsigned long long v8;  // rax\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rcx\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // d\n
\n
    v0 = 0x100000000;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (parse_modrm(&v0, a1, a2))\n
    {\n
        v8 = *(&v4);\n
        switch (v8)\n
        {\n
        case 0:\n
            v0 = 2;\n
            break;\n
        case 1:\n
            v0 = 7;\n
            break;\n
        case 2:\n
            v0 = 3;\n
            break;\n
        case 3:\n
            v0 = 5;\n
            break;\n
        case 4:\n
            v0 = 6;\n
            break;\n
        case 5:\n
            v0 = 4;\n
            break;\n
        case 6:\n
            v0 = 8;\n
            break;\n
        case 7:\n
            v0 = 11;\n
            break;\n
        }\n
        v10 = *((&v0 + 4));\n
        if (*((&v0 + 4)) <= a2)\n
        {\n
            v13 = a1[v10];\n
            v14 = &v0;\n
            v3 = 3;\n
            v4 = v13;\n
            v1 = v10 + 1;\n
            for (v15 = 17; v15; v14 += v16 * 4)\n
            {\n
                v15 -= 1;\n
                *(a0) = *(v14);\n
                a0 += v16 * 4;\n
            }\n
            return a0;\n
        }\n
        *(&a0) = 0;\n
        v12 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v12)) = 0;\n
            v12 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v9 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v9)) = 0;\n
            v9 += 20;\n
        }\n
    }\n
}\n
", "4222859:sub_406f8b": null, "4222860:_ZN4$_178__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_17::__invoke(unsigned int *a0, char *a1, unsigned int a2)\n
{\n
    int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned long long v2;  // [bp-0x60]\n
    int v3;  // [bp-0x58], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    int v5;  // [bp-0x44], Other Possible Types: char\n
    unsigned int v6;  // [bp-0x34], Other Possible Types: char\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v11;  // d\n
    struct_0 *v12;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
\n
    v2 = 4294967305;\n
    v9 = 8;\n
    do\n
    {\n
        *((&v2 + v9)) = 0;\n
        v9 += 20;\n
    } while (v9 != 68);\n
    if (parse_modrm(&v2, a1, a2))\n
    {\n
        if ((*(a1) & 2))\n
        {\n
            v1 = *(&v4);\n
            *(&v0) = *(&v3);\n
            v4 = *(&v6);\n
            *(&v3) = *(&v5);\n
            v6 = v1;\n
            *(&v5) = v0;\n
        }\n
        v12 = &v2;\n
        for (v13 = 17; v13; v12 += v11 * 4)\n
        {\n
            v13 -= 1;\n
            *(a0) = *(v12);\n
            a0 += v11 * 4;\n
        }\n
        return a0;\n
    }\n
    *(&a0) = 0;\n
    v10 = -60;\n
    while (true)\n
    {\n
        *((68 + a0 + v10)) = 0;\n
        v10 += 20;\n
    }\n
}\n
", "4223048:_ZN4$_188__invokeEPhj": "long long $_18::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967297;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4223086:_ZN4$_198__invokeEPhj": "long long $_19::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967319;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4223124:_ZN4$_208__invokeEPhj": "long long $_20::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967320;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4223162:_ZN4$_218__invokeEPhj": "long long $_21::__invoke(unsigned long long *a0)\n
{\n
    unsigned long v1;  // rcx, Other Possible Types: unsigned long long\n
\n
    *(a0) = 4294967310;\n
    v1 = -60;\n
    do\n
    {\n
        *((68 + a0 + v1)) = 0;\n
        v1 += 20;\n
    } while (true);\n
    return a0;\n
}\n
", "4223200:_ZN4$_228__invokeEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long $_22::__invoke(unsigned int *a0, unsigned int *a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x44]\n
    char v4;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rcx\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // d\n
\n
    v0 = 4294967305;\n
    v7 = 8;\n
    do\n
    {\n
        *((&v0 + v7)) = 0;\n
        v7 += 20;\n
    } while (v7 != 68);\n
    if (!parse_modrm(&v0, a1, a2))\n
    {\n
        *(&a0) = 0;\n
        v8 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v8)) = 0;\n
            v8 += 20;\n
        }\n
    }\n
    else if (!*(&v4))\n
    {\n
        v9 = *((&v0 + 4));\n
        if (*((&v0 + 4)) <= a2)\n
        {\n
            v13 = *((a1 + v9));\n
            v14 = &v0;\n
            v3 = 3;\n
            v4 = v13;\n
            v1 = v9 + 4;\n
            for (v15 = 17; v15; v14 += v16 * 4)\n
            {\n
                v15 -= 1;\n
                *(a0) = *(v14);\n
                a0 += v16 * 4;\n
            }\n
            return a0;\n
        }\n
        *(&a0) = 0;\n
        v12 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v12)) = 0;\n
            v12 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v11 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v11)) = 0;\n
            v11 += 20;\n
        }\n
    }\n
}\n
", "4223426:_ZN4$_238__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_23::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v3;  // [bp-0x4]\n
    unsigned int *v5;  // rax\n
    unsigned long v6;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v5 = a0;\n
    if (a2 > 4)\n
    {\n
        v0 = 21474836498;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *(&(&v3)[v7]) = 0;\n
            v7 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v6 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v6)) = 0;\n
            v6 += 20;\n
        }\n
    }\n
}\n
", "4223528:_ZN4$_248__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned int field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_24::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v3;  // [bp-0x4]\n
    unsigned int *v5;  // rax\n
    unsigned long v6;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v5 = a0;\n
    if (a2 > 4)\n
    {\n
        v0 = 21474836495;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *(&(&v3)[v7]) = 0;\n
            v7 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v6 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v6)) = 0;\n
            v6 += 20;\n
        }\n
    }\n
}\n
", "4223630:_ZN4$_258__invokeEPhj": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long $_25::__invoke(unsigned int *a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    char v3;  // [bp-0x4]\n
    unsigned int *v5;  // rax\n
    unsigned long v6;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v5 = a0;\n
    if (a2 > 1)\n
    {\n
        v0 = 8589934607;\n
        v7 = -60;\n
        while (true)\n
        {\n
            *(&(&v3)[v7]) = 0;\n
            v7 += 20;\n
        }\n
    }\n
    else\n
    {\n
        *(&a0) = 0;\n
        v6 = -60;\n
        while (true)\n
        {\n
            *((68 + a0 + v6)) = 0;\n
            v6 += 20;\n
        }\n
    }\n
}\n
", "4223733:sub_4072f5": null, "4223736:_ZN9InterfaceC2ER6Engine": "long long Interface::__base_ctor__(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    *(a0) = a1;\n
    return v1;\n
}\n
", "4223740:_ZN9InterfaceD1Ev": "long long Interface::__dtor__()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4223741:sub_4072fd": null, "4223742:_ZN9Interface7processEPhj": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdout;\n
\n
long long Interface::process(void* a0, unsigned int *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned long v3;  // rax, Other Possible Types: char\n
    unsigned int v4;  // eax\n
    unsigned short v5[4];  // rsi\n
    unsigned long v6;  // rdx\n
    struct_0 *v7;  // rdi, Other Possible Types: unsigned long\n
\n
    v0 = v3;\n
    v3 = 1;\n
    if (a2 < 4)\n
        return v3;\n
    v4 = *(a1);\n
    v5 = a1 + 1;\n
    v6 = a2 - 4;\n
    if (v4 > 914075212)\n
    {\n
        if (v4 != 914075213)\n
        {\n
            if (v4 == 1902178598)\n
            {\n
                v1 = 1875200410;\n
                cgc_fwrite(&v1, 4, cgc_stdout);\n
                return 0;\n
            }\n
        }\n
        else\n
        {\n
            if (!Engine::process(*(a0), v5, v6))\n
                goto LABEL_40738a;\n
        }\n
    }\n
    else\n
    {\n
        if (v4 == 262473119)\n
        {\n
            Engine::whitelist(*(a0), v5, v6);\n
LABEL_40738a:\n
            v7 = &v1;\n
            v1 = 1875200410;\n
LABEL_407395:\n
            v3 = cgc_fwrite(v7, 4, cgc_stdout);\n
            *(&v3) = v3 == 4;\n
            return v3;\n
        }\n
        else if (v4 == 816306970 && !(!Engine::update_rules(*(a0), v5, v6)))\n
        {\n
            goto LABEL_40738a;\n
        }\n
    }\n
    v7 = &v1;\n
    v1 = 1107835781;\n
    goto LABEL_407395;\n
}\n
", "4223922:_ZN9Interface13send_responseEj": "extern void* cgc_stdout;\n
\n
long long Interface::send_response(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v0 = v3;\n
    v1 = a1;\n
    v4 = cgc_fwrite(&a1, 4, cgc_stdout);\n
    *(&v4) = v4 == 4;\n
    return v4;\n
}\n
", "4223959:sub_4073d7": null, "4223960:main": "typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_1;\n
\n
extern unsigned int cgc_stderr;\n
extern void* cgc_stdin;\n
\n
int main()\n
{\n
    char v0;  // [bp-0xe4]\n
    char v1;  // [bp-0xe0]\n
    struct_1 *v2;  // [bp-0xd8]\n
    char v3[5];  // [bp-0xb8], Other Possible Types: unsigned int\n
    char v4;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xb3]\n
    char v6;  // [bp-0xaf]\n
    void* v8;  // rax, Other Possible Types: unsigned long\n
    unsigned long v9;  // rcx\n
    unsigned int *v10;  // rax\n
    unsigned long v11;  // rdx\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
\n
    Engine::__base_ctor__(&v2);\n
    Interface::__base_ctor__(&v1, &v2);\n
    v3 = 0;\n
    v4 = 0;\n
    v5 = 128;\n
    cgc_memcpy(&v6, 0x4347c000, 128);\n
    v8 = 0;\n
    v9 = 4;\n
    do\n
    {\n
        v8 -= *(&v3 + v9);\n
        v9 += 1;\n
    } while (v9 != 137);\n
    *(&v3[0]) = v8 - 305419896;\n
    if (!Engine::update_rules(&v2, &v3, 137))\n
    {\n
        cgc_fprintf(*(&cgc_stderr), \"failed to add secret rule\\n
\");\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        while (cgc_fread(&v0, 0x4, cgc_stdin) == 4)\n
        {\n
            if (*(&v0) > 0x40000000)\n
                break;\n
            cgc_free(v12);\n
            v10 = cgc_malloc(*(&v0));\n
            if (!v10)\n
            {\n
                v12 = 0;\n
                break;\n
            }\n
            else\n
            {\n
                v12 = v10;\n
                v11 = *(&v0);\n
                if (cgc_fread(v10, *(&v0), cgc_stdin) != v11)\n
                    break;\n
                if (!Interface::process(&v1, v10, v11))\n
                    break;\n
            }\n
        }\n
        cgc_free(v12);\n
    }\n
    Interface::__dtor__();\n
    Engine::__base_dtor__(&v2);\n
    return 0;\n
}\n
", "4224288:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_receive": null, "5242896:cgc_allocate": null, "5242904:cgc__terminate": null, "5242912:_ZdlPv": null, "5242920:_Znwm": null, "5242928:cgc_deallocate": null, "5242936:cgc_transmit": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}