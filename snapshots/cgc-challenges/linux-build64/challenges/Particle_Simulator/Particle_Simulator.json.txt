{"4202496:_init": "extern struct_0 *g_407be8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407be8;\n
    if (g_407be8)\n
        v1 = g_407be8();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407c08;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407c08;\n
    goto *(4226064);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fabs": "// attributes: PLT stub\n
int cgc_fabs()\n
{\n
    ::libc.so.0::cgc_fabs();\n
    return;\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4226040);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407be0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_407bf0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407bf8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407bf8)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203092:sub_402254": null, "4203104:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203228:sub_4022dc": null, "4203232:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203360:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203422:sub_40239e": null, "4203424:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v8 = v4;\n
        v4 = (v8 >> 31 CONCAT v8) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v10 = v0;\n
        v0 = v10 - 1;\n
        if (v10 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203649:sub_402481": null, "4203664:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    unsigned long long v0;  // [bp-0x40]\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // xmm0lq\n
    char *v10;  // rax, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v11;  // xmm0lq\n
    unsigned long long v12;  // xmm0lq\n
    char *v14;  // rax\n
    int v15;  // xmm0\n
    int v16;  // xmm1\n
    char *v17;  // rax\n
    char *v18;  // rax\n
\n
    v7 = v9;\n
    if (!a0)\n
    {\n
        return v10;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v10 = cgc_strcpy(a0, \"inf\");\n
            goto LABEL_4027d1;\n
        }\n
        v11 = v7;\n
        if ((((CmpF(v11, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
        {\n
            v10 = cgc_strcpy(a0, \"0.00000\");\n
            goto LABEL_4027d1;\n
        }\n
        v2 = 0;\n
        v1 = a0;\n
        v12 = v7;\n
        if ((((CmpF(v15, 0) & 69) | ((CmpF(v15, 0) & 69) >> 6)) & 1) == 1)\n
        {\n
            tmp_7 = SubV(tmp_9, tmp_8);\n
            *(&v7) = tmp_7;\n
        }\n
        else\n
        {\n
            s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
        }\n
        if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
        {\n
            v2 = 1;\n
            v14 = v1;\n
            v1 = v14 + 1;\n
            *(v14) = 45;\n
            v7 ^= 0x8000000000000000;\n
        }\n
        if (cgc_isnan())\n
        {\n
            v10 = cgc_strcpy(a0, \"nan\");\n
            return v10;\n
        }\n
        if (cgc_isinf())\n
        {\n
            v10 = cgc_strcpy(a0, \"inf\");\n
            return v10;\n
        }\n
        v15 = 0;\n
        *(&v15) = v7;\n
        cgc_fabs();\n
        v16 = v15;\n
        if ((((CmpF(4532020583610935537, xmm1lq<8>) & 69) | ((CmpF(4532020583610935537, xmm1lq<8>) & 69) >> 6)) & 1) != 1)\n
        {\n
            v10 = cgc_strcpy(a0, \"0.00000\");\n
            return v10;\n
        }\n
        *(&v15) = v7;\n
        if ((((CmpF(v15, 0x4202a05f20000000) & 69) | ((CmpF(v15, 0x4202a05f20000000) & 69) >> 6)) & 1) != 1)\n
        {\n
            v10 = cgc_strcpy(a0, \"fmax\");\n
            return v10;\n
        }\n
        cgc_log10();\n
        v5 = v7;\n
        *(&v15) = v5;\n
        if ((((CmpF(0x3ff0000000000000, v15) & 69) | ((CmpF(0x3ff0000000000000, v15) & 69) >> 6)) & 1) != 1)\n
            v5 = 0;\n
        v4 = 0;\n
        for (v3 = 0; v5 >= -5; v5 -= 1)\n
        {\n
            cgc_pow();\n
            v0 = 0x4024000000000000;\n
            *(&v15) = v0;\n
            if ((((CmpF(v15, 0) & 69) | ((CmpF(v15, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
            {\n
                tmp_12 = DivV(tmp_13, tmp_10);\n
                v15 = tmp_12;\n
                cgc_floor();\n
                v6 = v15;\n
                v7 = (0 CONCAT v6 ^ 0x8000000000000000) * (0 CONCAT v0) + (0 CONCAT v7);\n
                v17 = v1;\n
                v1 = v17 + 1;\n
                *(v17) = v6 + 48;\n
                if (v3)\n
                    v4 += 1;\n
            }\n
            if (!v5)\n
            {\n
                *(&v15) = v7;\n
                if ((((CmpF(v15, 0) & 69) | ((CmpF(v15, 0) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v18 = v1;\n
                    v1 = v18 + 1;\n
                    *(v18) = 46;\n
                    v3 = 1;\n
                    v4 = 0;\n
                }\n
            }\n
        }\n
        v10 = v1;\n
        *(v10) = 0;\n
LABEL_4027d1:\n
        return v10;\n
    }\n
    else\n
    {\n
        v10 = cgc_strcpy(a0, \"nan\");\n
        return v10;\n
    }\n
}\n
", "4204513:sub_4027e1": null, "4204528:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    unsigned int *v0;  // [bp-0xc0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xb8]\n
    unsigned int *v2;  // [bp-0xb0]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int *v4;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0x98]\n
    unsigned int v6;  // [bp-0x90]\n
    unsigned int v7;  // [bp-0x8c]\n
    struct_0 *v8;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned long v9;  // [bp-0x80]\n
    struct_0 *v10;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v11;  // [bp-0x6c]\n
    char v12;  // [bp-0x68]\n
    unsigned int v13;  // [bp-0x24]\n
    char *v14;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v15;  // [bp-0xc]\n
    struct_1 *v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    unsigned int *v19;  // rax\n
    struct_1 *v20;  // rcx\n
    unsigned int *v21;  // rdx\n
    unsigned long long v22;  // rdx\n
    unsigned int *v23;  // rax\n
    struct_1 *v24;  // rcx\n
    unsigned int *v25;  // rdx\n
\n
    v14 = a0;\n
    v13 = 0;\n
    if (!v14)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v15 = v13;\n
            return v15;\n
        }\n
        if (*(v14) != 64)\n
        {\n
            cgc_putc(*(v14));\n
            v14 += 1;\n
            v13 += 1;\n
        }\n
        else\n
        {\n
            v14 += 1;\n
            v7 = *(v14);\n
            if (!v7)\n
            {\n
                v15 = -1;\n
                return v15;\n
            }\n
            if (v7 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v7 == 100)\n
            {\n
                v5 = a1;\n
                v6 = v5->field_0;\n
                if (v6 <= 40)\n
                {\n
                    v17 = v5;\n
                    v18 = v6;\n
                    v19 = v18 + v17->field_10;\n
                    v17->field_0 = v18 + 8;\n
                    v4 = v19;\n
                }\n
                else\n
                {\n
                    v20 = v5;\n
                    v21 = v20->field_8;\n
                    v20->field_8 = &v21[2];\n
                    v4 = v21;\n
                }\n
                v11 = *(v4);\n
                cgc_int_to_str(v11, &v12);\n
                for (v10 = &v12; *(v10); v10 += 1)\n
                {\n
                    cgc_putc(*(v10));\n
                    v13 += 1;\n
                }\n
            }\n
            else if (v7 == 102)\n
            {\n
                v1 = a1;\n
                v2 = &v1->field_4;\n
                v3 = v1->field_4;\n
                if (v3 > 160)\n
                {\n
                    v24 = v1;\n
                    v25 = v24->field_8;\n
                    v24->field_8 = &v25[2];\n
                    v0 = v25;\n
                }\n
                else\n
                {\n
                    v22 = v3;\n
                    v23 = v22 + v1->field_10;\n
                    *(v2) = v22 + 16;\n
                    v0 = v23;\n
                }\n
                v9 = *(v0);\n
                cgc_float_to_str(&v12);\n
                for (v8 = &v12; v8->field_0; v8 += 1)\n
                {\n
                    cgc_putc(v8->field_0);\n
                    v13 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v15 = -1;\n
                return v15;\n
            }\n
            v14 += 1;\n
        }\n
    }\n
}\n
", "4205215:sub_402a9f": null, "4205216:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4205376:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4205467:sub_402b9b": null, "4205472:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205523:sub_402bd3": null, "4205536:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4205564:sub_402bfc": null, "4205568:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4205620:sub_402c34": null, "4205632:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_402e29;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_402e29;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_402e29;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_402d99:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_402e29;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_402d99;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_402e29:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4206189:sub_402e6d": null, "4206192:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4206584:sub_402ff8": null, "4206592:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4206695:sub_403067": null, "4206704:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4206822:sub_4030e6": null, "4206832:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4206950:sub_403166": null, "4206960:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4207169:sub_403241": null, "4207184:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4207267:sub_4032a3": null, "4207280:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        v2[a0] = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4207457:sub_403361": null, "4207472:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4207634:sub_403412": null, "4207648:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4207880:sub_403508": null, "4207888:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4207944:sub_403548": null, "4207952:cgc_init_render_grid": "extern void* g_renderGrid;\n
extern unsigned long long g_render_delta_x;\n
extern unsigned long long g_render_delta_y;\n
\n
long long cgc_init_render_grid()\n
{\n
    unsigned long v0;  // [bp-0x48]\n
    unsigned long v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned long long v3;  // [bp-0x30]\n
    unsigned long long v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    char v9;  // [bp-0x10]\n
    unsigned long long v11;  // rdi\n
    unsigned long long v12;  // rsi\n
    unsigned long long v13;  // rdx\n
    unsigned long long v15;  // xmm1lq\n
    int v18;  // xmm1\n
    int v19;  // xmm0\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    unsigned long v23;  // rax, Other Possible Types: unsigned long long\n
\n
    v6 = 400;\n
    v5 = v6 * 24;\n
    g_renderGrid = 0;\n
    if (cgc_allocate(v11, v12, v13))\n
        cgc__terminate(v11);\n
    v23 = *(&v9);\n
    g_renderGrid = v23;\n
    v4 = 0x4014000000000000;\n
    v3 = 0x4014000000000000;\n
    g_render_delta_x = v4;\n
    g_render_delta_y = v3;\n
    for (v8 = 0; v8 < 20; v8 = v23)\n
    {\n
        for (v7 = 0; v7 < 20; v7 += 1)\n
        {\n
            v2 = v7 + v8 * 20;\n
            v15 = v8;\n
            v18 = 0;\n
            v19 = (0 CONCAT v4) * xmm1<16> + (0 CONCAT 0x4059000000000000);\n
            v1 = v19;\n
            *(&v18) = v7;\n
            v20 = (0 CONCAT v3) * v18;\n
            v21 = 0;\n
            *(&v0) = v20 + (0 CONCAT 0x4059000000000000);\n
            *((g_renderGrid + 24 * v2)) = v1;\n
            *((8 + g_renderGrid + 24 * v2)) = v0;\n
            *((16 + g_renderGrid + 24 * v2)) = 0;\n
        }\n
        v23 = v8 + 1;\n
    }\n
    return v23;\n
}\n
", "4208325:sub_4036c5": null, "4208336:cgc_clear_render_grid": "extern unsigned long long g_renderGrid;\n
\n
long long cgc_clear_render_grid()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    for (v2 = 0; v2 < 20; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < 20; v1 += 1)\n
        {\n
            v0 = v2 * 20 + v1;\n
            *((g_renderGrid + v0 * 24 + 16)) = 0;\n
        }\n
    }\n
    return v2 + 1;\n
}\n
", "4208443:sub_40373b": null, "4208448:cgc_add_render_grid": "extern unsigned long long g_renderGrid;\n
\n
double cgc_add_render_grid(long long a0)\n
{\n
    int tmp_62;  // tmp #62\n
    int tmp_64;  // tmp #64\n
    int tmp_63;  // tmp #63\n
    int tmp_76;  // tmp #76\n
    int tmp_78;  // tmp #78\n
    int tmp_77;  // tmp #77\n
    int tmp_93;  // tmp #93\n
    int tmp_95;  // tmp #95\n
    int tmp_94;  // tmp #94\n
    int tmp_110;  // tmp #110\n
    int tmp_112;  // tmp #112\n
    int tmp_111;  // tmp #111\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned long v4;  // [bp-0x10]\n
\n
    v4 = a0;\n
    tmp_62 = SubV(tmp_64, tmp_63);\n
    v3 = tmp_62;\n
    tmp_76 = SubV(tmp_78, tmp_77);\n
    v2 = tmp_76;\n
    tmp_93 = DivV(tmp_95, tmp_94);\n
    v1 = tmp_93;\n
    tmp_110 = DivV(tmp_112, tmp_111);\n
    v0 = tmp_110;\n
    *((g_renderGrid + (v1 * 20 + v0) * 24 + 16)) = *((g_renderGrid + (v1 * 20 + v0) * 24 + 16)) + 1;\n
    return v0;\n
}\n
", "4208595:sub_4037d3": null, "4208608:cgc_display_render_grid": "extern unsigned long long g_renderGrid;\n
\n
long long cgc_display_render_grid(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    for (v1 = 0; v1 < 20; v1 += 1)\n
    {\n
        cgc_printf(\"-\", a1, a2, a3, a4);\n
    }\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    for (v1 = 20; v1 > 0; v1 -= 1)\n
    {\n
        for (v2 = 0; v2 < 20; v2 += 1)\n
        {\n
            v0 = v2 * 20 + v1 - 1;\n
            a3 = v0 * 24;\n
            cgc_printf(\"@d\", *((g_renderGrid + a3 + 16)), a2, a3, a4);\n
        }\n
        cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    }\n
    for (v2 = 0; v2 < 20; v2 += 1)\n
    {\n
        cgc_printf(\"-\", a1, a2, a3, a4);\n
    }\n
    return cgc_printf(\"\\n
\", a1, a2, v0 * 24, a4);\n
}\n
", "4208865:sub_4038e1": null, "4208880:cgc_readLine": "extern unsigned int cgc_g_lasterror;\n
\n
long long cgc_readLine(unsigned long long a0, char *a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2a]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned long long v7;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    for (v2 = 1; v2 < a2; v2 += 1)\n
    {\n
        v0 = cgc_receive(a0, a1, a2, v7);\n
        if (v0)\n
        {\n
            cgc_g_lasterror = v0;\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v1 == 10)\n
            break;\n
        *(v3) = v1;\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    v5 = v2;\n
    return v5;\n
}\n
", "4209059:sub_4039a3": null, "4209072:cgc_parse_float_pair": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_parse_float_pair(char *a0, unsigned long long *a1, unsigned long long *a2)\n
{\n
    char v0;  // [bp-0x838]\n
    char v1;  // [bp-0x438]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v6;  // rax\n
    unsigned long v7;  // xmm0lq\n
\n
    for (v3 = 0; v3 < 0x400; v3 += 1)\n
    {\n
        if (!a0[v3])\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        if (a0[v3] == 44)\n
            break;\n
        (&v1)[v3] = a0[v3];\n
    }\n
    if (v3 == 0x400)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    (&v1)[v3] = 0;\n
    v3 += 1;\n
    for (v2 = 0; v3 < 0x400; v3 += 1)\n
    {\n
        if (!a0[v3])\n
            break;\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        *((&v0 + v6)) = a0[v3];\n
    }\n
    if (v3 == 0x400)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    (&v0)[v2] = 0;\n
    cgc_atof(&v1);\n
    *(a1) = v7;\n
    cgc_atof(&v0);\n
    *(a2) = v7;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4209443:sub_403b23": null, "4209456:main": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x464]\n
    unsigned int v1;  // [bp-0x460]\n
    unsigned int v2;  // [bp-0x45c]\n
    unsigned long v3;  // [bp-0x458]\n
    unsigned long v4;  // [bp-0x450]\n
    unsigned long long v5;  // [bp-0x448]\n
    unsigned long long v6;  // [bp-0x440]\n
    unsigned long long v7;  // [bp-0x438]\n
    unsigned long long v8;  // [bp-0x430]\n
    unsigned int v9;  // [bp-0x424]\n
    unsigned int v10;  // [bp-0x420]\n
    unsigned int v11;  // [bp-0x41c]\n
    char v12;  // [bp-0x418]\n
    unsigned long v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v15;  // [bp-0xc]\n
    unsigned long v17;  // xmm0lq\n
    unsigned long v18;  // cc_dep1\n
    unsigned long v19;  // cc_dep1\n
    unsigned long long v20;  // r9\n
    unsigned long v21;  // rax\n
\n
    v15 = 0;\n
    v14 = a0;\n
    v13 = a1;\n
    cgc_printf(\"2D Particle Simulator\\n
Enter the number of particles to simulate (1-10):\\n
\", a1, a2, a3, a4);\n
    v11 = cgc_readLine(0, &v12, 0x400);\n
    if (v11 == -1)\n
        cgc__terminate(0);\n
    v9 = cgc_atoi(&v12);\n
    if (!v9)\n
    {\n
        cgc_printf(\"Goodbye\\n
\", a1, 0x400, a3, a4);\n
        cgc__terminate(\"Goodbye\\n
\");\n
    }\n
    if (v9 > 10)\n
    {\n
        cgc_printf(\"Goodbye\\n
\", a1, 0x400, a3, a4);\n
        cgc__terminate(\"Goodbye\\n
\");\n
    }\n
    v10 = 0;\n
    while (v10 < v9)\n
    {\n
        cgc_printf(\"Enter Position (x,y):\\n
\", a1, 0x400, a3, a4);\n
        v11 = cgc_readLine(0, &v12, 0x400);\n
        if (v11 == -1)\n
            cgc__terminate(0);\n
        if (cgc_parse_float_pair(&v12, &v8, &v7))\n
        {\n
            cgc_printf(\"Invalid position. Try again.\\n
\", a1, 0x400, a3, a4);\n
        }\n
        else\n
        {\n
            cgc_printf(\"Enter Velocity (x,y):\\n
\", a1, 0x400, a3, a4);\n
            v11 = cgc_readLine(0, &v12, 0x400);\n
            if (v11 == -1)\n
                cgc__terminate(0);\n
            if (cgc_parse_float_pair(&v12, &v6, &v5))\n
            {\n
                cgc_printf(\"Invalid velocity. Try again.\\n
\", a1, 0x400, a3, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(\"Enter Mass:\\n
\", a1, 0x400, a3, a4);\n
                v11 = cgc_readLine(0, &v12, 0x400);\n
                if (v11 == -1)\n
                    cgc__terminate(0);\n
                cgc_atof(&v12);\n
                v4 = v17;\n
                v18 = CmpF(v17, 0) & 69;\n
                if ((((CmpF(v17, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n
                {\n
                    cgc_printf(\"Invalid mass. Try again.\\n
\", a1, 0x400, a3, a4);\n
                    continue;\n
                }\n
                cgc_printf(\"Enter Radius:\\n
\", a1, 0x400, a3, a4);\n
                v11 = cgc_readLine(0, &v12, 0x400);\n
                if (v11 == -1)\n
                    cgc__terminate(0);\n
                cgc_atof(&v12);\n
                v3 = v17;\n
                v19 = CmpF(v17, 0) & 69;\n
                if ((((CmpF(v17, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n
                {\n
                    cgc_printf(\"Invalid radius. Try again.\\n
\", a1, 0x400, a3, a4);\n
                    continue;\n
                }\n
                v17 = v8;\n
                v2 = cgc_simulation_add_particle();\n
                if (v2 < 0)\n
                {\n
                    cgc_printf(\"Invalid simulation data. Try again.\\n
\", a1, 0x400, a3, a4);\n
                }\n
                else\n
                {\n
                    v10 += 1;\n
                    v17 = v8;\n
                    cgc_printf(\"Particle #@d added at (@f,@f) velocity(@f,@f) mass(@f) radius(@f).\\n
\", v2, 0x400, a3, a4);\n
                }\n
            }\n
        }\n
    }\n
    cgc_printf(\"Running simulation with...\\n
\", a1, 0x400, a3, a4);\n
    cgc_init_render_grid();\n
    cgc_display_simulation_data(\"Running simulation with...\\n
\", a1, 0x400, a3, a4, v20);\n
    cgc_simulation_run(10);\n
    v0 = cgc_get_collision_count(10, a1, 0x400, a3, a4, v20);\n
    v1 = cgc_get_simulation_time(10, a1, 0x400, a3, a4, v20);\n
    v21 = cgc_get_simulation_frames(10, a1, 0x400, a3, a4, v20);\n
    cgc_printf(\"Simulation complete, @d collisions simulated over @d seconds in @d frames.\\n
\", v0, v1, v21, a4);\n
    cgc_display_simulation_data(\"Simulation complete, @d collisions simulated over @d seconds in @d frames.\\n
\", a1, a2, v21, a4, v20);\n
    cgc_printf(\"Goodbye\\n
\", a1, a2, v21, a4);\n
    cgc__terminate(\"Goodbye\\n
\");\n
    return cgc_simulation_add_particle(\"Goodbye\\n
\", a1, a2, v21, a4, v20);\n
}\n
", "4210432:cgc_simulation_add_particle": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x464]\n
    unsigned int v1;  // [bp-0x460]\n
    unsigned int v2;  // [bp-0x45c]\n
    unsigned long v3;  // [bp-0x458]\n
    unsigned long v4;  // [bp-0x450]\n
    unsigned long long v5;  // [bp-0x448]\n
    unsigned long long v6;  // [bp-0x440]\n
    unsigned long long v7;  // [bp-0x438]\n
    unsigned long long v8;  // [bp-0x430]\n
    unsigned int v9;  // [bp-0x424]\n
    unsigned int v10;  // [bp-0x420]\n
    unsigned int v11;  // [bp-0x41c]\n
    char v12;  // [bp-0x418]\n
    unsigned long v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v15;  // [bp-0xc]\n
    unsigned long v17;  // xmm0lq\n
    unsigned long v18;  // cc_dep1\n
    unsigned long v19;  // cc_dep1\n
    unsigned long long v20;  // r9\n
    unsigned long v21;  // rax\n
\n
    v15 = 0;\n
    v14 = a0;\n
    v13 = a1;\n
    cgc_printf(\"2D Particle Simulator\\n
Enter the number of particles to simulate (1-10):\\n
\", a1, a2, a3, a4);\n
    v11 = cgc_readLine(0, &v12, 0x400);\n
    if (v11 == -1)\n
        cgc__terminate(0);\n
    v9 = cgc_atoi(&v12);\n
    if (!v9)\n
    {\n
        cgc_printf(\"Goodbye\\n
\", a1, 0x400, a3, a4);\n
        cgc__terminate(\"Goodbye\\n
\");\n
    }\n
    if (v9 > 10)\n
    {\n
        cgc_printf(\"Goodbye\\n
\", a1, 0x400, a3, a4);\n
        cgc__terminate(\"Goodbye\\n
\");\n
    }\n
    v10 = 0;\n
    while (v10 < v9)\n
    {\n
        cgc_printf(\"Enter Position (x,y):\\n
\", a1, 0x400, a3, a4);\n
        v11 = cgc_readLine(0, &v12, 0x400);\n
        if (v11 == -1)\n
            cgc__terminate(0);\n
        if (cgc_parse_float_pair(&v12, &v8, &v7))\n
        {\n
            cgc_printf(\"Invalid position. Try again.\\n
\", a1, 0x400, a3, a4);\n
        }\n
        else\n
        {\n
            cgc_printf(\"Enter Velocity (x,y):\\n
\", a1, 0x400, a3, a4);\n
            v11 = cgc_readLine(0, &v12, 0x400);\n
            if (v11 == -1)\n
                cgc__terminate(0);\n
            if (cgc_parse_float_pair(&v12, &v6, &v5))\n
            {\n
                cgc_printf(\"Invalid velocity. Try again.\\n
\", a1, 0x400, a3, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(\"Enter Mass:\\n
\", a1, 0x400, a3, a4);\n
                v11 = cgc_readLine(0, &v12, 0x400);\n
                if (v11 == -1)\n
                    cgc__terminate(0);\n
                cgc_atof(&v12);\n
                v4 = v17;\n
                v18 = CmpF(v17, 0) & 69;\n
                if ((((CmpF(v17, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n
                {\n
                    cgc_printf(\"Invalid mass. Try again.\\n
\", a1, 0x400, a3, a4);\n
                    continue;\n
                }\n
                cgc_printf(\"Enter Radius:\\n
\", a1, 0x400, a3, a4);\n
                v11 = cgc_readLine(0, &v12, 0x400);\n
                if (v11 == -1)\n
                    cgc__terminate(0);\n
                cgc_atof(&v12);\n
                v3 = v17;\n
                v19 = CmpF(v17, 0) & 69;\n
                if ((((CmpF(v17, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n
                {\n
                    cgc_printf(\"Invalid radius. Try again.\\n
\", a1, 0x400, a3, a4);\n
                    continue;\n
                }\n
                v17 = v8;\n
                v2 = cgc_simulation_add_particle();\n
                if (v2 < 0)\n
                {\n
                    cgc_printf(\"Invalid simulation data. Try again.\\n
\", a1, 0x400, a3, a4);\n
                }\n
                else\n
                {\n
                    v10 += 1;\n
                    v17 = v8;\n
                    cgc_printf(\"Particle #@d added at (@f,@f) velocity(@f,@f) mass(@f) radius(@f).\\n
\", v2, 0x400, a3, a4);\n
                }\n
            }\n
        }\n
    }\n
    cgc_printf(\"Running simulation with...\\n
\", a1, 0x400, a3, a4);\n
    cgc_init_render_grid();\n
    cgc_display_simulation_data(\"Running simulation with...\\n
\", a1, 0x400, a3, a4, v20);\n
    cgc_simulation_run(10);\n
    v0 = cgc_get_collision_count(10, a1, 0x400, a3, a4, v20);\n
    v1 = cgc_get_simulation_time(10, a1, 0x400, a3, a4, v20);\n
    v21 = cgc_get_simulation_frames(10, a1, 0x400, a3, a4, v20);\n
    cgc_printf(\"Simulation complete, @d collisions simulated over @d seconds in @d frames.\\n
\", v0, v1, v21, a4);\n
    cgc_display_simulation_data(\"Simulation complete, @d collisions simulated over @d seconds in @d frames.\\n
\", a1, a2, v21, a4, v20);\n
    cgc_printf(\"Goodbye\\n
\", a1, a2, v21, a4);\n
    cgc__terminate(\"Goodbye\\n
\");\n
    return cgc_simulation_add_particle(\"Goodbye\\n
\", a1, a2, v21, a4, v20);\n
}\n
", "4211499:sub_40432b": null, "4211504:cgc_is_colliding": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_is_colliding(struct_0 *a0, struct_0 *a1)\n
{\n
    int tmp_54;  // tmp #54\n
    int tmp_55;  // tmp #55\n
    int tmp_52;  // tmp #52\n
    int tmp_72;  // tmp #72\n
    int tmp_73;  // tmp #73\n
    int tmp_70;  // tmp #70\n
    unsigned long v0;  // [bp-0x48]\n
    unsigned long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0xc]\n
    int v8;  // xmm0\n
\n
    tmp_54 = SubV(tmp_55, tmp_52);\n
    *(&v4) = tmp_54;\n
    tmp_72 = SubV(tmp_73, tmp_70);\n
    v8 = tmp_72;\n
    v3 = v8;\n
    s_38 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=(rsi<8> + 0x28<64>), size=8, endness=Iend_LE))))<8>\n
    s_40 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base-48, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE)))))<8>\n
    s_48 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-56, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-56, size=8, endness=Iend_LE))))<8>\n
    *(&v8) = v0;\n
    if ((((CmpF(v8, v1) & 69) | ((CmpF(v8, v1) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211675:sub_4043db": null, "4211680:cgc_simulation_reset": "extern unsigned int cgc_g_particleCount;\n
\n
long long cgc_simulation_reset()\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_g_particleCount = 0;\n
    return v1;\n
}\n
", "4211696:cgc_do_collision": "long long cgc_do_collision(unsigned long long a0[6], unsigned long long a1[6])\n
{\n
    int tmp_46;  // tmp #46\n
    int tmp_47;  // tmp #47\n
    int tmp_44;  // tmp #44\n
    int tmp_64;  // tmp #64\n
    int tmp_65;  // tmp #65\n
    int tmp_62;  // tmp #62\n
    int tmp_115;  // tmp #115\n
    int tmp_116;  // tmp #116\n
    int tmp_113;  // tmp #113\n
    int tmp_124;  // tmp #124\n
    int tmp_126;  // tmp #126\n
    int tmp_125;  // tmp #125\n
    int tmp_211;  // tmp #211\n
    int tmp_212;  // tmp #212\n
    int tmp_209;  // tmp #209\n
    int tmp_223;  // tmp #223\n
    int tmp_224;  // tmp #224\n
    int tmp_221;  // tmp #221\n
    int tmp_312;  // tmp #312\n
    int tmp_313;  // tmp #313\n
    int tmp_310;  // tmp #310\n
    int tmp_327;  // tmp #327\n
    int tmp_328;  // tmp #328\n
    int tmp_325;  // tmp #325\n
    int tmp_68;  // tmp #68\n
    int tmp_69;  // tmp #69\n
    int tmp_66;  // tmp #66\n
    int tmp_86;  // tmp #86\n
    int tmp_87;  // tmp #87\n
    int tmp_84;  // tmp #84\n
    int tmp_28;  // tmp #28\n
    int tmp_29;  // tmp #29\n
    int tmp_26;  // tmp #26\n
    int tmp_40;  // tmp #40\n
    int tmp_41;  // tmp #41\n
    int tmp_38;  // tmp #38\n
    unsigned long v0;  // [bp-0x140]\n
    unsigned long v1;  // [bp-0x138]\n
    unsigned long v2;  // [bp-0x130]\n
    unsigned long v3;  // [bp-0x128]\n
    unsigned long v4;  // [bp-0x120]\n
    unsigned long v5;  // [bp-0x118]\n
    unsigned long v7;  // [bp-0x108]\n
    unsigned long v8;  // [bp-0x100]\n
    unsigned long v9;  // [bp-0xf8]\n
    unsigned long v10;  // [bp-0xf0]\n
    unsigned long v11;  // [bp-0xe8], Other Possible Types: unsigned long long\n
    unsigned long v12;  // [bp-0xe0]\n
    unsigned long v13;  // [bp-0xd8]\n
    unsigned long v14;  // [bp-0xd0]\n
    unsigned long v15;  // [bp-0xc8]\n
    unsigned long v18;  // [bp-0xb0]\n
    unsigned long v19;  // [bp-0xa8]\n
    unsigned long v22;  // [bp-0x90]\n
    unsigned long v23;  // [bp-0x88]\n
    unsigned long v24;  // [bp-0x80]\n
    unsigned long v25;  // [bp-0x78]\n
    unsigned long v27;  // [bp-0x68]\n
    unsigned long v28;  // [bp-0x60]\n
    unsigned long v29;  // [bp-0x58]\n
    unsigned long v30;  // [bp-0x50]\n
    unsigned long v31;  // [bp-0x48]\n
    unsigned long v33;  // [bp-0x38]\n
    unsigned long v34;  // [bp-0x30]\n
    unsigned long v35;  // [bp-0x28]\n
    unsigned long v36;  // [bp-0x20]\n
    int v47;  // xmm0\n
\n
    tmp_46 = SubV(tmp_47, tmp_44);\n
    *(&v36) = tmp_46;\n
    tmp_64 = SubV(tmp_65, tmp_62);\n
    *(&v35) = tmp_64;\n
    s_30 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-32, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base-32, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE)))))<8>\n
    cgc_sqrt();\n
    v33 = v34;\n
    s_40 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=(rsi<8> + 0x28<64>), size=8, endness=Iend_LE))))<8>\n
    tmp_115 = DivV(tmp_116, tmp_113);\n
    *(&v31) = tmp_115;\n
    tmp_124 = SubV(tmp_126, tmp_125);\n
    *(&v31) = tmp_124;\n
    s_50 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-32, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-72, size=8, endness=Iend_LE))))<8>\n
    s_58 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-72, size=8, endness=Iend_LE))))<8>\n
    v28 = a0[4];\n
    v27 = a1[4];\n
    s_70 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-96, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-104, size=8, endness=Iend_LE))))<8>\n
    s_78 =L Conv(128->64, ((0x0<64> CONCAT 0x4000000000000000<64>) * Conv(64->128, Load(addr=stack_base-80, size=8, endness=Iend_LE))))<8>\n
    s_80 =L Conv(128->64, ((0x0<64> CONCAT 0x4000000000000000<64>) * Conv(64->128, Load(addr=stack_base-88, size=8, endness=Iend_LE))))<8>\n
    tmp_211 = DivV(tmp_212, tmp_209);\n
    *(&v23) = tmp_211;\n
    tmp_223 = DivV(tmp_224, tmp_221);\n
    *(&v22) = tmp_223;\n
    s_98 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-120, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-136, size=8, endness=Iend_LE))))<8>\n
    s_a0 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-128, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-136, size=8, endness=Iend_LE))))<8>\n
    s_a8 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=rdi<8>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-152, size=8, endness=Iend_LE))))<8>\n
    s_b0 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-160, size=8, endness=Iend_LE))))<8>\n
    s_b8 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-120, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-144, size=8, endness=Iend_LE))))<8>\n
    s_c0 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-128, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-144, size=8, endness=Iend_LE))))<8>\n
    tmp_312 = SubV(tmp_313, tmp_310);\n
    *(&v15) = tmp_312;\n
    tmp_327 = SubV(tmp_328, tmp_325);\n
    *(&v14) = tmp_327;\n
    a0[0] = v19;\n
    a0[1] = v18;\n
    a1[0] = v15;\n
    a1[1] = v14;\n
    tmp_68 = SubV(tmp_69, tmp_66);\n
    *(&v13) = tmp_68;\n
    tmp_86 = SubV(tmp_87, tmp_84);\n
    v47 = tmp_86;\n
    v12 = v47;\n
    s_e8 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-80, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base-80, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base-88, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-88, size=8, endness=Iend_LE)))))<8>\n
    *(&v47) = v11;\n
    if ((((CmpF(v47, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
        v11 = 0x3ff0000000000000;\n
    v10 = v11;\n
    tmp_28 = DivV(tmp_29, tmp_26);\n
    *(&v9) = tmp_28;\n
    tmp_40 = DivV(tmp_41, tmp_38);\n
    *(&v8) = tmp_40;\n
    s_108 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-216, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base-248, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base-224, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-256, size=8, endness=Iend_LE)))))<8>\n
    if ((CmpF(v7, 0) & 1))\n
    {\n
        s_110 =L Conv(128->64, ((0x0<64> CONCAT 0xc000000000000000<64>) * Conv(64->128, Load(addr=stack_base-264, size=8, endness=Iend_LE))))<8>\n
        s_118 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-248, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-272, size=8, endness=Iend_LE))))<8>\n
        s_120 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-256, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-272, size=8, endness=Iend_LE))))<8>\n
        v3 = (0 CONCAT v5) * (0 CONCAT v23) + (0 CONCAT a0[2]);\n
        v2 = (0 CONCAT v4) * (0 CONCAT v23) + (0 CONCAT a0[3]);\n
        v1 = (0 CONCAT v5 ^ 0x8000000000000000) * (0 CONCAT v22) + (0 CONCAT a1[2]);\n
        v0 = (0 CONCAT v4 ^ 0x8000000000000000) * (0 CONCAT v22) + (0 CONCAT a1[3]);\n
        a0[2] = v3;\n
        a0[3] = v2;\n
        a1[2] = v1;\n
        a1[3] = v0;\n
        return a1;\n
    }\n
    return cgc_sqrt();\n
}\n
", "4212872:sub_404888": null, "4212880:cgc_do_wall_collision": "long long cgc_do_wall_collision(unsigned long long a0[6])\n
{\n
    int tmp_64;  // tmp #64\n
    int tmp_65;  // tmp #65\n
    int tmp_62;  // tmp #62\n
    int tmp_100;  // tmp #100\n
    int tmp_101;  // tmp #101\n
    int tmp_98;  // tmp #98\n
    int tmp_18;  // tmp #18\n
    int tmp_20;  // tmp #20\n
    int tmp_19;  // tmp #19\n
    int tmp_34;  // tmp #34\n
    int tmp_36;  // tmp #36\n
    int tmp_35;  // tmp #35\n
    int tmp_21;  // tmp #21\n
    int tmp_38;  // tmp #38\n
    int tmp_37;  // tmp #37\n
    unsigned long v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x60]\n
    unsigned long v3;  // [bp-0x58]\n
    unsigned long v4;  // [bp-0x50]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned long v6;  // [bp-0x40]\n
    unsigned long v7;  // [bp-0x38]\n
    unsigned long v8;  // [bp-0x30]\n
    unsigned long v9;  // [bp-0x28]\n
    unsigned long v10;  // [bp-0x20]\n
    unsigned long v11;  // [bp-0x18]\n
    unsigned long long v12[6];  // [bp-0x10]\n
    unsigned long long v15[6];  // rax, Other Possible Types: unsigned long\n
    int v18;  // xmm0\n
    int v21;  // xmm0\n
    int v23;  // xmm0\n
    int v26;  // xmm0\n
\n
    v12[0] = a0;\n
    s_18 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=rdi<8>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=(Load(addr=stack_base-16, size=8, endness=Iend_LE) + 0x28<64>), size=8, endness=Iend_LE))))<8>\n
    tmp_64 = SubV(tmp_65, tmp_62);\n
    *(&v10) = tmp_64;\n
    s_28 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=(Load(addr=stack_base-16, size=8, endness=Iend_LE) + 0x8<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE))))<8>\n
    v15 = a0;\n
    tmp_100 = SubV(tmp_101, tmp_98);\n
    v18 = tmp_100;\n
    v8 = v18;\n
    *(&v18) = v11;\n
    if ((((CmpF(v18, 0x4069000000000000) & 69) | ((CmpF(v18, 0x4069000000000000) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_18 = SubV(tmp_20, tmp_19);\n
        *(&v7) = tmp_18;\n
        tmp_34 = SubV(tmp_36, tmp_35);\n
        v18 = tmp_34;\n
        v6 = v18;\n
        a0[0] = v6;\n
        v15 = a0;\n
        *(&v18) = a0[2];\n
        if ((((CmpF(v21, 0) & 69) | ((CmpF(v21, 0) & 69) >> 6)) & 1) != 1)\n
        {\n
            xmm0<16> = Conv(64->128, (Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE) ^ 0x8000000000000000<64>))\n
            v15 = a0;\n
            a0[2] = v18;\n
        }\n
    }\n
    if ((((CmpF(0x4059000000000000, v10) & 69) | ((CmpF(0x4059000000000000, v10) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_20 = SubV(tmp_21, tmp_18);\n
        v18 = tmp_20;\n
        v5 = v18;\n
        v4 = (0 CONCAT v5) * 2 + (0 CONCAT a0[0]);\n
        a0[0] = v4;\n
        v15 = a0;\n
        if ((((CmpF(0, a0[2]) & 69) | ((CmpF(0, a0[2]) & 69) >> 6)) & 1) != 1)\n
        {\n
            xmm0<16> = Conv(64->128, (Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE) ^ 0x8000000000000000<64>))\n
            v15 = a0;\n
            a0[2] = v18;\n
        }\n
    }\n
    *(&v18) = v9;\n
    if ((((CmpF(v18, 0x4069000000000000) & 69) | ((CmpF(v18, 0x4069000000000000) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_18 = SubV(tmp_20, tmp_19);\n
        *(&v3) = tmp_18;\n
        tmp_36 = SubV(tmp_38, tmp_37);\n
        v21 = tmp_36;\n
        v2 = v21;\n
        a0[1] = v2;\n
        v15 = a0;\n
        *(&v21) = a0[3];\n
        if ((((CmpF(v21, 0) & 69) | ((CmpF(v21, 0) & 69) >> 6)) & 1) != 1)\n
        {\n
            xmm0<16> = Conv(64->128, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) ^ 0x8000000000000000<64>))\n
            v15 = a0;\n
            a0[3] = v23;\n
        }\n
    }\n
    if ((((CmpF(0x4059000000000000, v8) & 69) | ((CmpF(0x4059000000000000, v8) & 69) >> 6)) & 1) == 1)\n
        return v15;\n
    tmp_20 = SubV(tmp_21, tmp_18);\n
    *(&v1) = tmp_20;\n
    v0 = (0 CONCAT v1) * 2 + (0 CONCAT a0[1]);\n
    a0[1] = v0;\n
    v15 = a0;\n
    if ((((CmpF(0, a0[3]) & 69) | ((CmpF(0, a0[3]) & 69) >> 6)) & 1) == 1)\n
        return v15;\n
    xmm0<16> = Conv(64->128, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) ^ 0x8000000000000000<64>))\n
    v15 = a0;\n
    a0[3] = v26;\n
}\n
", "4213568:cgc_simulation_run": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern unsigned int cgc_g_collisionTotal;\n
extern unsigned int cgc_g_particleCount;\n
extern unsigned int cgc_g_simulationFrames;\n
extern char cgc_g_simulationTime;\n
extern unsigned long long g_particles;\n
\n
long long cgc_simulation_run(unsigned long a0)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_45;  // tmp #45\n
    int tmp_44;  // tmp #44\n
    unsigned long long *v0;  // [bp-0x58]\n
    int tmp_97;  // tmp #97\n
    int tmp_98;  // tmp #98\n
    int tmp_95;  // tmp #95\n
    int tmp_116;  // tmp #116\n
    int tmp_117;  // tmp #117\n
    int tmp_114;  // tmp #114\n
    unsigned long long *v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    unsigned int v12;  // [bp-0x10]\n
    int v14;  // xmm0lq, Other Possible Types: unsigned long long\n
    struct_0 *v15;  // rax\n
    struct_0 *v16;  // rax\n
\n
    v9 = a0;\n
    v10 = 1;\n
    cgc_g_collisionTotal = 0;\n
    *(&cgc_g_simulationTime) = a0;\n
    cgc_g_simulationFrames = 0;\n
    v10 = 1;\n
    for (v8 = 0; v8 < v9; v8 += 1)\n
    {\n
        v6 = 1;\n
        v5 = 1;\n
        for (v12 = 0; v12 < cgc_g_particleCount; v12 += 1)\n
        {\n
            v14 = (&g_particles)[2 + 6 * v12];\n
            cgc_fabs();\n
            v15 = &(&g_particles)[6 * v12];\n
            if ((((CmpF(v14, v16->field_28) & 69) | ((CmpF(v14, v16->field_28) & 69) >> 6)) & 1) != 1)\n
            {\n
                v1 = &g_particles;\n
                cgc_fabs();\n
                tmp_43 = DivV(tmp_45, tmp_44);\n
                v14 = tmp_43;\n
                v5 = v14 + 1;\n
            }\n
            if (v5 > v6)\n
                v6 = v5;\n
            *(&v14) = (&g_particles)[3 + 6 * v12];\n
            cgc_fabs();\n
            v16 = &(&g_particles)[6 * v12];\n
            if ((((CmpF(v14, v16->field_28) & 69) | ((CmpF(v14, v16->field_28) & 69) >> 6)) & 1) != 1)\n
            {\n
                v0 = &g_particles;\n
                cgc_fabs();\n
                tmp_43 = DivV(tmp_45, tmp_44);\n
                v5 = tmp_43 + 1;\n
            }\n
            if (v5 > v6)\n
                v6 = v5;\n
        }\n
        for (; v6 > v10; v9 = v9 * 2)\n
        {\n
            v10 *= 2;\n
        }\n
        for (v12 = 0; v12 < cgc_g_particleCount; v12 += 1)\n
        {\n
            v4 = v10;\n
            tmp_97 = DivV(tmp_98, tmp_95);\n
            *(&v3) = tmp_97;\n
            tmp_116 = DivV(tmp_117, tmp_114);\n
            *(&v2) = tmp_116;\n
            STORE(addr=(0x407ca0<64> + (Conv(32->64, Load(addr=stack_base-16, size=4, endness=Iend_LE)) * 0x30<64>)), data=Conv(128->64, ((0x0<64> CONCAT Load(addr=(0x407ca0<64> + (Conv(32->64, Load(addr=stack_base-16, size=4, endness=Iend_LE)) * 0x30<64>)), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-64, size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
            STORE(addr=((0x407ca0<64> + (Conv(32->64, Load(addr=stack_base-16, size=4, endness=Iend_LE)) * 0x30<64>)) + 0x8<64>), data=Conv(128->64, ((0x0<64> CONCAT Load(addr=((0x407ca0<64> + (Conv(32->64, Load(addr=stack_base-16, size=4, endness=Iend_LE)) * 0x30<64>)) + 0x8<64>), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-72, size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
        }\n
        v7 = 0;\n
        for (v12 = 0; v12 < cgc_g_particleCount; v12 += 1)\n
        {\n
            for (v11 = 0; v11 < cgc_g_particleCount; v11 += 1)\n
            {\n
                if (v12 != v11 && cgc_is_colliding(&(&g_particles)[6 * v12], &(&g_particles)[6 * v11]))\n
                {\n
                    cgc_do_collision(&(&g_particles)[6 * v12], &(&g_particles)[6 * v11]);\n
                    v7 += 1;\n
                }\n
            }\n
            cgc_do_wall_collision(&(&g_particles)[6 * v12]);\n
        }\n
        cgc_g_collisionTotal = v7 + cgc_g_collisionTotal;\n
    }\n
    cgc_g_simulationFrames = v8;\n
    return v8;\n
}\n
", "4214521:sub_404ef9": null, "4214528:cgc_get_collision_count": "extern unsigned int cgc_g_collisionTotal;\n
\n
long long cgc_get_collision_count()\n
{\n
    return cgc_g_collisionTotal;\n
}\n
", "4214540:sub_404f0c": null, "4214544:cgc_get_simulation_time": "extern unsigned int cgc_g_simulationTime;\n
\n
long long cgc_get_simulation_time()\n
{\n
    return cgc_g_simulationTime;\n
}\n
", "4214556:sub_404f1c": null, "4214560:cgc_get_simulation_frames": "extern unsigned int cgc_g_simulationFrames;\n
\n
long long cgc_get_simulation_frames()\n
{\n
    return cgc_g_simulationFrames;\n
}\n
", "4214572:sub_404f2c": null, "4214576:cgc_display_simulation_data": "extern unsigned int cgc_g_particleCount;\n
extern unsigned long long g_particles;\n
\n
long long cgc_display_simulation_data(unsigned int a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // rcx\n
\n
    cgc_clear_render_grid();\n
    cgc_printf(\"@d total particles:\\n
\", cgc_g_particleCount, a2, a3, a4);\n
    for (v6 = 0; v6 < cgc_g_particleCount; v6 += 1)\n
    {\n
        v5 = (&g_particles)[6 * v6];\n
        v4 = (&g_particles)[1 + 6 * v6];\n
        v3 = (&g_particles)[2 + 6 * v6];\n
        v2 = (&g_particles)[3 + 6 * v6];\n
        v1 = (&g_particles)[4 + 6 * v6];\n
        v8 = v6 * 48;\n
        v0 = *((40 + &g_particles + v8));\n
        cgc_printf(\"@d: Position (@f,@f) Velocity (@f,@f) mass (@f) radius (@f).\\n
\", v6, a2, v8, a4);\n
        cgc_add_render_grid(&(&g_particles)[6 * v6]);\n
    }\n
    return cgc_display_render_grid(a0, a1, a2, v6 * 48, a4);\n
}\n
", "4214900:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fabs": null, "5242896:cgc_pow": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_log10": null, "5242944:cgc_sqrt": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}