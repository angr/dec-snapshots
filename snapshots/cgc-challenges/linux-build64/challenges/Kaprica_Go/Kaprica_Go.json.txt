{"4202496:_init": "extern struct_0 *g_409560;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409560;\n
    if (g_409560)\n
        v1 = g_409560();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409580;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409580;\n
    goto *(4232584);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4232560);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409558;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_409568;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409570;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409570)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202949:sub_4021c5": null, "4202960:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4203007:sub_4021ff": null, "4203008:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203068:sub_40223c": null, "4203072:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203090:sub_402252": null, "4203104:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203122:sub_402272": null, "4203136:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203154:sub_402292": null, "4203168:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203186:sub_4022b2": null, "4203200:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203215:sub_4022cf": null, "4203216:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203237:sub_4022e5": null, "4203248:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4223120];\n
    char field_407090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203263:sub_4022ff": null, "4203264:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203270:sub_402306": null, "4203280:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203311:sub_40232f": null, "4203312:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203370:sub_40236a": null, "4203376:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_2 *g_4097d8;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_1 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_2 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rsi\n
    unsigned long long v13;  // rdx\n
    struct_1 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_2 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_0 *v20;  // rax\n
\n
    if (!a0)\n
    {\n
LABEL_402455:\n
        return 0;\n
    }\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            return 0;\n
        v7 = *(&v0);\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v6 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v6 = a0;\n
    if (!(v6 <= 2147483647))\n
        goto LABEL_402455;\n
    v9 = v6 + 24;\n
    v10 = cgc_get_size_class(v9);\n
    if (v10 <= 31)\n
    {\n
        v11 = *((&cgc_free_lists + 0x8 * v10));\n
        if (!v11)\n
            goto LABEL_402412;\n
        else\n
            goto LABEL_0x402430;\n
    }\n
    else\n
    {\n
        if (!cgc_allocate(v9, v12, v13))\n
        {\n
            v15 = *(&v0);\n
            if (v15)\n
            {\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_4097d8;\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
        goto LABEL_402455;\n
    }\n
    while (true)\n
    {\n
        while (*(v11) < v9)\n
        {\n
            v11 = *((v11 + 16));\n
            if (!v11)\n
                goto LABEL_402412;\n
        }\n
        while (true)\n
        {\n
LABEL_402412:\n
            v10 += 1;\n
            if (v10 == 32)\n
                break;\n
            v11 = *(&(&cgc_free_lists)[8 * v10]);\n
        }\n
    }\n
}\n
", "4203796:sub_402514": null, "4203808:cgc_get_size_class": "extern unsigned long long g_4095d8;\n
extern unsigned long long g_4095e0;\n
extern unsigned long long g_4095e8;\n
extern unsigned long long g_4095f0;\n
extern unsigned long long g_4095f8;\n
extern unsigned long long g_409600;\n
extern unsigned long long g_409608;\n
extern unsigned long long g_409610;\n
extern unsigned long long g_409618;\n
extern unsigned long long g_409620;\n
extern unsigned long long g_409628;\n
extern unsigned long long g_409630;\n
extern unsigned long long g_409638;\n
extern unsigned long long g_409640;\n
extern unsigned long long g_409648;\n
extern unsigned long long g_409650;\n
extern unsigned long long g_409658;\n
extern unsigned long long g_409660;\n
extern unsigned long long g_409668;\n
extern unsigned long long g_409670;\n
extern unsigned long long g_409678;\n
extern unsigned long long g_409680;\n
extern unsigned long long g_409688;\n
extern unsigned long long g_409690;\n
extern unsigned long long g_409698;\n
extern unsigned long long g_4096a0;\n
extern unsigned long long g_4096a8;\n
extern unsigned long long g_4096b0;\n
extern unsigned long long g_4096b8;\n
extern unsigned long long g_4096c0;\n
extern unsigned long long g_4096c8;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_4095d8 < a0)\n
    {\n
        v1 = 2;\n
        if (g_4095e0 < a0)\n
        {\n
            v1 = 3;\n
            if (g_4095e8 < a0)\n
            {\n
                v1 = 4;\n
                if (g_4095f0 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_4095f8 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_409600 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_409608 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_409610 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_409618 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_409620 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_409628 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_409630 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_409638 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_409640 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_409648 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_409650 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_409658 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_409660 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_409668 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_409670 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_409678 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_409680 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_409688 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_409690 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_409698 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_4096a0 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_4096a8 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_4096b0 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_4096b8 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_4096c0 < a0)\n
                                                                                                                            v1 = 31 + (g_4096c8 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204343:sub_402737": null, "4204352:cgc_insert_into_flist": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_0 *a0)\n
{\n
    struct struct_1 **v1;  // rax\n
    struct_1 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4204421:sub_402785": null, "4204432:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_2 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_1 *v2;  // rcx\n
    struct_0 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4204509:sub_4027dd": null, "4204512:cgc_coalesce": "extern char cgc_free_lists;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rdx\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rdx\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdx\n
    unsigned long v25;  // r12\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rbx\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rbx\n
    unsigned long v32;  // r12\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // r12\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rax\n
    unsigned long v42;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rax\n
    unsigned long v45;  // rcx\n
\n
    v0 = v2;\n
    v3 = *((a0 + 40));\n
    if (!v3)\n
        return v2;\n
    v13 = *((a0 + 32));\n
    if (!*((v3 + 8)))\n
    {\n
        if (!v13)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v13 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v5 = cgc_get_size_class(*(v13));\n
            v7 = *((v13 + 24));\n
            if (v7)\n
                *((v7 + 16)) = *((v13 + 16));\n
            v11 = *((v13 + 16));\n
            if (v11)\n
                *((v11 + 24)) = v7;\n
            if ((&cgc_free_lists)[v5] == v13)\n
                (&cgc_free_lists)[v5] = v11;\n
            *((v13 + 16)) = 0;\n
            *((v13 + 8)) = 0;\n
            v15 = *(a0);\n
            v16 = cgc_get_size_class(v15);\n
            v18 = *((a0 + 24));\n
            if (v18)\n
                *((v18 + 16)) = *((a0 + 16));\n
            v23 = *((a0 + 16));\n
            if (v23)\n
                *((v23 + 24)) = v18;\n
            if ((&cgc_free_lists)[v16] == a0)\n
                (&cgc_free_lists)[v16] = v23;\n
            *((a0 + 16)) = 0;\n
            *((a0 + 8)) = 0;\n
            v27 = v15 + *(*((a0 + 32)));\n
            *(a0) = v27;\n
            v28 = cgc_get_size_class(v27);\n
            *((a0 + 8)) = 1;\n
            v30 = (&cgc_free_lists)[v28];\n
            if (v30)\n
            {\n
                *((a0 + 16)) = v30;\n
                *(((&cgc_free_lists)[v28] + 24)) = a0;\n
                (&cgc_free_lists)[v28] = a0;\n
                *((a0 + 24)) = 0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b76;\n
            }\n
            else\n
            {\n
                (&cgc_free_lists)[v28] = a0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b76;\n
            }\n
            *((v2 + 32)) = *((v34 + 32));\n
LABEL_402b76:\n
            v37 = *((v34 + 32));\n
            if (!v37)\n
                return v2;\n
        }\n
LABEL_402b7f:\n
        *((v37 + 40)) = v2;\n
        return v2;\n
    }\n
    if (v13 && *((v13 + 8)))\n
    {\n
        v4 = cgc_get_size_class(*(v3));\n
        v6 = *((v3 + 24));\n
        if (v6)\n
            *((v6 + 16)) = *((v3 + 16));\n
        v9 = *((v3 + 16));\n
        if (v9)\n
            *((v9 + 24)) = v6;\n
        if ((&cgc_free_lists)[v4] == v3)\n
        {\n
            (&cgc_free_lists)[v4] = v9;\n
            v13 = *((a0 + 32));\n
        }\n
        *((v3 + 16)) = 0;\n
        *((v3 + 8)) = 0;\n
        v14 = cgc_get_size_class(*(v13));\n
        v17 = *((v13 + 24));\n
        if (v17)\n
            *((v17 + 16)) = *((v13 + 16));\n
        v21 = *((v13 + 16));\n
        if (v21)\n
            *((v21 + 24)) = v17;\n
        if ((&cgc_free_lists)[v14] == v13)\n
            (&cgc_free_lists)[v14] = v21;\n
        *((v13 + 16)) = 0;\n
        *((v13 + 8)) = 0;\n
        v25 = *(a0);\n
        v26 = cgc_get_size_class(v25);\n
        v29 = *((a0 + 24));\n
        if (v29)\n
            *((v29 + 16)) = *((a0 + 16));\n
        v35 = *((a0 + 16));\n
        if (v35)\n
            *((v35 + 24)) = v29;\n
        if ((&cgc_free_lists)[v26] == a0)\n
            (&cgc_free_lists)[v26] = v35;\n
        *((a0 + 16)) = 0;\n
        *((a0 + 8)) = 0;\n
        v38 = *((a0 + 40));\n
        v39 = v25 + *(v38);\n
        *(v38) = v39;\n
        v40 = v39 + *(*((a0 + 32)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 8)) = 1;\n
        v42 = (&cgc_free_lists)[v41];\n
        if (v42)\n
        {\n
            *((v38 + 16)) = v42;\n
            *(((&cgc_free_lists)[v41] + 24)) = v38;\n
            (&cgc_free_lists)[v41] = v38;\n
            *((v38 + 24)) = 0;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_402952;\n
        }\n
        else\n
        {\n
            (&cgc_free_lists)[v41] = v38;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_402952;\n
        }\n
        *((v44 + 32)) = *((v43 + 32));\n
LABEL_402952:\n
        v45 = *((v43 + 32));\n
        if (v45)\n
        {\n
            *((v45 + 40)) = v44;\n
            v2 = *((a0 + 40));\n
            if (!v2)\n
                goto LABEL_402a69;\n
            goto LABEL_402a61;\n
        }\n
    }\n
    v2 = *((a0 + 32));\n
    if (!v2)\n
        return *((a0 + 32));\n
    if (*((v2 + 8)))\n
        return *((a0 + 32));\n
    v8 = cgc_get_size_class(*(v3));\n
    v10 = *((v3 + 24));\n
    if (v10)\n
        *((v10 + 16)) = *((v3 + 16));\n
    v12 = *((v3 + 16));\n
    if (v12)\n
        *((v12 + 24)) = v10;\n
    if ((&cgc_free_lists)[v8] == v3)\n
        (&cgc_free_lists)[v8] = v12;\n
    *((v3 + 16)) = 0;\n
    *((v3 + 8)) = 0;\n
    v19 = *(a0);\n
    v20 = cgc_get_size_class(v19);\n
    v22 = *((a0 + 24));\n
    if (v22)\n
        *((v22 + 16)) = *((a0 + 16));\n
    v24 = *((a0 + 16));\n
    if (v24)\n
        *((v24 + 24)) = v22;\n
    if ((&cgc_free_lists)[v20] == a0)\n
        (&cgc_free_lists)[v20] = v24;\n
    *((a0 + 16)) = 0;\n
    *((a0 + 8)) = 0;\n
    v31 = *((a0 + 40));\n
    v32 = v19 + *(v31);\n
    *(v31) = v32;\n
    v33 = cgc_get_size_class(v32);\n
    *((v31 + 8)) = 1;\n
    v36 = (&cgc_free_lists)[v33];\n
    if (v36)\n
    {\n
        *((v31 + 16)) = v36;\n
        *(((&cgc_free_lists)[v33] + 24)) = v31;\n
        (&cgc_free_lists)[v33] = v31;\n
        *((v31 + 24)) = 0;\n
    }\n
    else\n
    {\n
        (&cgc_free_lists)[v33] = v31;\n
        v2 = *((a0 + 40));\n
        if (!v2)\n
            goto LABEL_402a69;\n
LABEL_402a61:\n
        *((v2 + 32)) = *((a0 + 32));\n
LABEL_402a69:\n
        v37 = *((a0 + 32));\n
        if (!v37)\n
            return v2;\n
        goto LABEL_402b7f;\n
    }\n
    v2 = *((a0 + 40));\n
    if (!v2)\n
        goto LABEL_402a69;\n
    goto LABEL_402a61;\n
}\n
", "4205522:sub_402bd2": null, "4205536:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205578:sub_402c0a": null, "4205584:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205630:sub_402c3e": null, "4205632:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_402cd4:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_402c67;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_402c67:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_402cd4;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_402c67;\n
}\n
", "4206063:sub_402def": null, "4206064:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_402f3f:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_402e29;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_402e29:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_402f3f;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_402e29;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_402ec7:\n
            v38 = a2;\n
            goto LABEL_402eca;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_402ec7;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_402ec7;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_402eca:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4206999:sub_403197": null, "4207008:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_403319;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_403319:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_403319;\n
}\n
", "4207406:sub_40332e": null, "4207408:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x41]\n
    unsigned int v1;  // [bp-0x34]\n
    char v3;  // r15b\n
    void* v4;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v5;  // r12, Other Possible Types: unsigned long long\n
    unsigned int v6;  // r14d\n
    unsigned long v7;  // rbx, Other Possible Types: unsigned long long\n
    void* v8;  // r13d, Other Possible Types: unsigned long, unsigned int\n
    char v9;  // al\n
    char v10;  // cl\n
    unsigned long v11;  // rbx, Other Possible Types: unsigned long long\n
\n
    v3 = a4;\n
    v4 = a3;\n
    v5 = a1;\n
    v8 = 0;\n
    if (a1 >= a2)\n
    {\n
        a3 -= 1;\n
        v5 = (0 CONCAT a1) /m a2 >> 32;\n
        v8 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
    }\n
    v6 = a4 & 4;\n
    if (a3 > 0 && !v8 && !v6)\n
    {\n
        v7 = a3 - 1;\n
        if (!a3 + -1)\n
        {\n
            v4 = 0;\n
        }\n
        else\n
        {\n
            v1 = v8;\n
            if ((v3 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v7;\n
                    v7 = v7 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v7;\n
                    v7 = v7 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            v4 = 0;\n
            v8 = v1;\n
            v3 = a4;\n
            if (!(!(v3 & 2)))\n
                goto LABEL_40341e;\n
            goto LABEL_4033d6;\n
        }\n
    }\n
    if ((v3 & 2))\n
    {\n
LABEL_40341e:\n
        v9 = v5 + 55;\n
    }\n
    else\n
    {\n
LABEL_4033d6:\n
        v9 = v5 + 87;\n
    }\n
    v10 = v5 + 48;\n
    if (10 <= v5)\n
        v10 = v9;\n
    v0 = v10;\n
    cgc_transmit();\n
    if (!v6)\n
    {\n
        return v8 + 1;\n
    }\n
    else if (v8)\n
    {\n
        return v8 + 1;\n
    }\n
    else if (v4 <= 0)\n
    {\n
        return v8 + 1;\n
    }\n
    else\n
    {\n
        tmp_5 = v4;\n
        v11 = v4 - 1;\n
        if (!tmp_5 + -1)\n
        {\n
            return v8 + 1;\n
        }\n
        else if ((v3 & 1))\n
        {\n
            do\n
            {\n
                v0 = 48;\n
                cgc_transmit(a0, a1, a2, *(&v10));\n
                tmp_5 = v11;\n
                v11 = v11 - 1;\n
            } while (tmp_5 + -1);\n
            return v8 + 1;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                v0 = 32;\n
                cgc_transmit(a0, a1, a2, *(&v10));\n
                tmp_5 = v11;\n
                v11 = v11 - 1;\n
            } while (tmp_5 + -1);\n
            return v8 + 1;\n
        }\n
    }\n
}\n
", "4207826:sub_4034d2": null, "4207840:cgc_fdprintf": "extern char g_407110;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    char *v31;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    void* v33;  // r12, Other Possible Types: unsigned long long, unsigned long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v35;  // edx\n
    unsigned long long v36;  // r12\n
    unsigned long long v37;  // r12\n
    unsigned long v38;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v39;  // rcx\n
    unsigned long long v40;  // rcx\n
    unsigned long long v41;  // rcx\n
    struct struct_0 **v42;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v43;  // rax\n
    struct struct_0 **v44;  // rax\n
    struct struct_0 **v45;  // rax, Other Possible Types: unsigned long\n
    unsigned long v46;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v47;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v48;  // rax, Other Possible Types: unsigned long\n
    char *v49;  // rbp\n
    unsigned long v50;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v51;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v52;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v53;  // r12, Other Possible Types: unsigned long\n
    unsigned long v54;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v55;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v53 = &v5;\n
    do\n
    {\n
        v31 = a1 + 1;\n
        v4 = v31;\n
        if (*(a1) != 37)\n
        {\n
            v0 = *(a1);\n
        }\n
        else\n
        {\n
            v32 = v53;\n
            v33 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                a0 = v31;\n
                while (true)\n
                {\n
                    v31 = a0 + 1;\n
                    v4 = v31;\n
                    a3 = *(a0);\n
                    v35 = a3;\n
                    if (v35 - 49 >= 9)\n
                        break;\n
                    a1 = &v4;\n
                    v34 = cgc_strtol();\n
                    a0 = v4;\n
                }\n
                a2 = v35 - 37;\n
                switch (a2)\n
                {\n
                case 0:\n
                    v0 = 37;\n
                    goto LABEL_403715;\n
                case 8:\n
                    v36 = v33 | 4;\n
                    continue;\n
                case 11:\n
                    v37 = v33 | 1;\n
                    continue;\n
                case 62:\n
                    a3 = v1;\n
                    if (a3 <= 40)\n
                    {\n
                        v42 = a3 + v3;\n
                        a3 = a3 + 8;\n
                        v1 = a3;\n
                    }\n
                    else\n
                    {\n
                        v42 = v2;\n
                        v2 = v42 + 8;\n
                    }\n
                    v53 = rbx<8>;\n
                    v0 = *(v42);\n
                    goto LABEL_403594;\n
                case 63:\n
                    v38 = v1;\n
                    if (v38 <= 40)\n
                    {\n
                        v43 = v38 + v3;\n
                        v38 = v38 + 8;\n
                        v1 = v38;\n
                        v54 = *(v43);\n
                        if (!(v54 < 0))\n
                            goto LABEL_40377a;\n
                    }\n
                    else\n
                    {\n
                        v44 = v2;\n
                        v2 = v44 + 1;\n
                        v54 = *(v44);\n
                        if (!(v54 < 0))\n
                            goto LABEL_40377a;\n
                    }\n
                    v0 = 45;\n
                    cgc_transmit(a0, &g_407110, a2, v38);\n
                    v54 = -(v54);\n
LABEL_40377a:\n
                    cgc_output_number_printf(v30, v54, 10, v34, v33);\n
                    v53 = rbx<8>;\n
                    break;\n
                case 78:\n
                    v39 = v1;\n
                    if (v39 <= 40)\n
                    {\n
                        v45 = v39 + v3;\n
                        v46 = v39 + 8;\n
                        v1 = v46;\n
                    }\n
                    else\n
                    {\n
                        v45 = v2;\n
                        v46 = v45 + 8;\n
                        v2 = v46;\n
                    }\n
                    v53 = rbx<8>;\n
                    v49 = *(v45);\n
                    if (cgc_strlen(v49))\n
                    {\n
                        v55 = 0;\n
                        do\n
                        {\n
                            v0 = v49[v55];\n
                            cgc_transmit(a0, &g_407110, a2, v46);\n
                            v55 += 1;\n
                        } while (cgc_strlen(v49) > v55);\n
                    }\n
                    break;\n
                case 80:\n
                    v40 = v1;\n
                    if (v40 > 40)\n
                    {\n
                        v47 = v2;\n
                        v2 = v47 + 8;\n
                    }\n
                    else\n
                    {\n
                        v47 = v40 + v3;\n
                        v1 = v40 + 8;\n
                    }\n
                    v50 = *(v47);\n
                    v51 = v30;\n
                    v52 = 10;\n
LABEL_40381a:\n
                    cgc_output_number_printf(v51, v50, v52, v34, v33);\n
                    v53 = rbx<8>;\n
                    break;\n
                case 51:\n
                    v33 = v33 | 2;\n
                case 83:\n
                    v41 = v1;\n
                    if (v41 <= 40)\n
                    {\n
                        v48 = v41 + v3;\n
                        v1 = v41 + 8;\n
                    }\n
                    else\n
                    {\n
                        v48 = v2;\n
                        v2 = v48 + 8;\n
                    }\n
                    v50 = *(v48);\n
                    v51 = v30;\n
                    v52 = 16;\n
                    goto LABEL_40381a;\n
                default:\n
                    v0 = a3;\n
LABEL_403715:\n
                    v53 = rbx<8>;\n
                    goto LABEL_403594;\n
                }\n
            }\n
        }\n
LABEL_403594:\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4208014:sub_40358e": null, "4208126:sub_4035fe": null, "4208704:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_35;  // tmp #35\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    char v14[2];  // rdx, Other Possible Types: unsigned long\n
    char v15[2];  // rdx\n
    char v16[2];  // rdx\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            v14 = *(a1);\n
            if ((v9 & 1))\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 48;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 48;\n
                        v16 = *(a1);\n
                        *(a1) = &v16[1];\n
                        *(a0) = *(a0) + 1;\n
                        v16[1] = 48;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 32;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 32;\n
                        v15 = *(a1);\n
                        *(a1) = &v15[1];\n
                        *(a0) = *(a0) + 1;\n
                        v15[1] = 32;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v17 + v12;\n
    *(a1) = &*(a1)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v11 + 1;\n
    return v18;\n
}\n
", "4209023:sub_40397f": null, "4209024:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_sprintf(char *a0, struct_0 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_2 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned int *v4;  // [bp-0xf8]\n
    struct_0 *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_1 *v31;  // r14\n
    struct struct_2 **v32;  // r13\n
    struct_0 *v33;  // rdi, Other Possible Types: unsigned long\n
    char *v34;  // rcx\n
    void* v36;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v37;  // rbp\n
    struct_0 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v40;  // rcx\n
    unsigned int v41;  // esi\n
    unsigned long long v43;  // rax\n
    char *v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rdx\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned long v48;  // rdx, Other Possible Types: unsigned long long\n
    struct struct_2 **v49;  // rcx\n
    struct struct_2 **v50;  // rax, Other Possible Types: unsigned long\n
    struct struct_2 **v51;  // rcx, Other Possible Types: unsigned long\n
    char *v52;  // rcx\n
    char *v53;  // rbp\n
    unsigned long v54;  // r14\n
    unsigned int v55;  // r13d\n
    struct_1 *v56;  // rdi, Other Possible Types: unsigned long\n
    struct struct_2 **v57;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v58;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v59;  // rbx\n
    unsigned long v60;  // r15\n
    struct struct_0 **v61;  // r15\n
    struct_1 *v62;  // r14\n
    struct struct_2 **v63;  // r13\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v5 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v34 = v1;\n
                *(v34) = *(a1);\n
                v1 = v34 + 1;\n
            }\n
            else\n
            {\n
                v36 = 0;\n
                while (true)\n
                {\n
                    v37 = v36 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v36;\n
                    do\n
                    {\n
                        v36 = v39;\n
                        v5 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = v40;\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    switch (v41)\n
                    {\n
                    case 37:\n
                        v44 = v1;\n
                        *(v44) = 37;\n
                        goto LABEL_403b5d;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v43 = cgc_strtol(v38 - 2, &v5, 10);\n
                        v33 = v5;\n
                        continue;\n
                    case 100:\n
                        v45 = v2;\n
                        if (v45 <= 40)\n
                        {\n
                            v2 = v45 + 8;\n
                            v48 = *((v45 + v4));\n
                            if (!(v48 < 0))\n
                                goto LABEL_403b97;\n
                        }\n
                        else\n
                        {\n
                            v49 = v3;\n
                            v3 = v49 + 1;\n
                            v48 = *(v49);\n
                            if (!(v48 < 0))\n
                                goto LABEL_403b97;\n
                        }\n
                        v52 = v1;\n
                        *(v52) = 45;\n
                        v1 = v52 + 1;\n
                        v0 += 1;\n
                        v48 = -(v48);\n
LABEL_403b97:\n
                        v56 = *(&v0);\n
                        v57 = v1;\n
                        v58 = 10;\n
LABEL_403ba2:\n
                        cgc_output_number_sprintf(v56, v57, v48, v58, 0, v36);\n
                        break;\n
                    case 115:\n
                        v46 = v2;\n
                        if (v46 > 40)\n
                        {\n
                            v50 = v3;\n
                            v3 = v50 + 8;\n
                        }\n
                        else\n
                        {\n
                            v50 = v46 + v4;\n
                            v2 = v46 + 8;\n
                        }\n
                        v53 = *(v50);\n
                        v54 = v1;\n
                        v55 = v0;\n
                        if (cgc_strlen(v53))\n
                        {\n
                            v59 = r15<8>;\n
                            v60 = 0;\n
                            do\n
                            {\n
                                *((v54 + v60)) = v53[v60];\n
                                v60 += 1;\n
                            } while (cgc_strlen(v53) > v60);\n
                            v54 += v60;\n
                            v55 += v60;\n
                            v61 = rbx<8>;\n
                        }\n
                        v1 = v54;\n
                        v0 = v55;\n
                        v62 = &v0;\n
                        v63 = &v1;\n
                        break;\n
                    case 88:\n
                        v36 = v36 | 2;\n
                    case 120:\n
                        v47 = v2;\n
                        if (v47 <= 40)\n
                        {\n
                            v51 = v47 + v4;\n
                            v2 = v47 + 8;\n
                        }\n
                        else\n
                        {\n
                            v51 = v3;\n
                            v3 = v51 + 8;\n
                        }\n
                        v48 = *(v51);\n
                        v56 = r14<8>;\n
                        v57 = r13<8>;\n
                        v58 = 16;\n
                        goto LABEL_403ba2;\n
                    default:\n
                        v44 = v1;\n
                        *(v44) = v40;\n
LABEL_403b5d:\n
                        v1 = v44 + 1;\n
                        goto LABEL_403a50;\n
                    }\n
                }\n
            }\n
LABEL_403a50:\n
            v0 += 1;\n
            a1 = v5;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4209212:sub_403a3c": null, "4209727:sub_403c3f": null, "4209728:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4209839:sub_403caf": null, "4209840:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_403d07;\n
        }\n
    }\n
LABEL_403d07:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4209862:sub_403cc6": null, "4209957:sub_403d25": null, "4209968:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4210006:sub_403d56": null, "4210016:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    char v1[2];  // rax, Other Possible Types: unsigned long\n
    char v2;  // cl, Other Possible Types: unsigned long, unsigned long long\n
\n
    v1 = a0;\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        do\n
        {\n
            if (v2 == a1)\n
                return v1;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
        } while (v2);\n
    }\n
    if (!a1)\n
        return v1;\n
    return 0;\n
}\n
", "4210060:sub_403d8c": null, "4210064:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4210117:sub_403dc5": null, "4210128:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4210175:sub_403dff": null, "4210176:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210235:sub_403e3b": null, "4210240:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210268:sub_403e5c": null, "4210272:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4210329:sub_403e99": null, "4210389:sub_403ed5": null, "4210400:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a0) - *(a1);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a0) - *(a1);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v2) - *(v3);\n
        }\n
    }\n
}\n
", "4210482:sub_403f32": null, "4210496:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_404080:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_404080;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_404080;\n
}\n
", "4210831:sub_40408f": null, "4210832:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_4040e9;\n
                }\n
                goto LABEL_4040e7;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_4040e7:\n
    v3 = 0;\n
LABEL_4040e9:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4210930:sub_4040f2": null, "4210944:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_4041e0;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_4041e0:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_4041fa;\n
                    else\n
                        goto LABEL_404220;\n
                }\n
LABEL_4041fa:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_404220;\n
            }\n
        }\n
LABEL_404220:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4210979:sub_404123": null, "4211161:sub_4041d9": null, "4211266:sub_404242": null, "4211280:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4211285:sub_404255": null, "4211296:cgc_prand": "extern unsigned int pcnt;\n
extern unsigned long long prng_s;\n
\n
long long cgc_prand()\n
{\n
    pcnt = pcnt + 1;\n
    prng_s = prng_s * 1103515245 + 12345;\n
    return prng_s >> 16;\n
}\n
", "4211334:sub_404286": null, "4211344:cgc_init_zobrist": "typedef struct struct_0 {\n
    unsigned long long field_-ffffffffffbf6818;\n
    char padding_-ffffffffffbf6810[18446744073709551616];\n
    unsigned long long field_4097f0;\n
} struct_0;\n
\n
extern unsigned int pcnt;\n
extern unsigned long long prng_s;\n
extern unsigned long ztable;\n
\n
long long cgc_init_zobrist()\n
{\n
    struct_0 *v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v2;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rdi\n
\n
    v1 = 8;\n
    v2 = prng_s;\n
    do\n
    {\n
        v3 = v2 * 1103515245 + 12345;\n
        *((v1 - -4233192)) = v3 / 0x10000;\n
        v2 = v3 * 1103515245 + 12345;\n
        *((v1 + &ztable)) = v2 / 0x10000;\n
        v1 += 16;\n
    } while (v1 != 5784);\n
    pcnt = pcnt + 722;\n
    prng_s = v2;\n
    return 0;\n
}\n
", "4211462:sub_404306": null, "4211472:cgc_hash_zobrist": "extern unsigned long long prng_s;\n
\n
long long cgc_hash_zobrist(unsigned long a0)\n
{\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    void* v3;  // rax, Other Possible Types: unsigned long\n
    unsigned long v4;  // rsi\n
\n
    v1 = &prng_s;\n
    v2 = 0;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = *((a0 + v2));\n
        if (v4 != 3)\n
            v3 ^= *((v1 + v4 * 8));\n
        v2 += 1;\n
        v1 += 16;\n
    } while (v2 != 361);\n
    return v3;\n
}\n
", "4211485:sub_40431d": null, "4211522:sub_404342": null, "4211536:cgc_push_game_state": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[407];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_push_game_state(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long *v3;  // rax, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdx\n
    struct_1 *v5;  // rcx, Other Possible Types: unsigned long\n
    void* v6;  // r14, Other Possible Types: unsigned long\n
    struct_0 *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long long v11;  // rax\n
\n
    v0 = v2;\n
    v3 = &prng_s;\n
    v5 = 0;\n
    v6 = 0;\n
    do\n
    {\n
        v4 = *((a0 + v5));\n
        if (v4 != 3)\n
            v6 ^= *((v3 + v4 * 8));\n
        v5 += 1;\n
        v3 += 16;\n
    } while (v5 != 361);\n
    v7 = *((a0 + 408));\n
    v8 = cgc_calloc(1, 16);\n
    if (v8)\n
    {\n
        v8[1] = v8;\n
        v8[0] = v6;\n
        *((v7 + 8)) = v8;\n
        return v8;\n
    }\n
    cgc__terminate(1);\n
    v11 = cgc_ndigits(1, 16, v4, v5, v9, v10);\n
    return v11;\n
}\n
", "4211554:sub_404362": null, "4211696:cgc_ndigits": "long long cgc_ndigits(unsigned long long a0)\n
{\n
    void* v1;  // rax\n
    char v2;  // al\n
    unsigned long v3;  // rax\n
\n
    if (!a0)\n
    {\n
        v2 = 1;\n
        return v3;\n
    }\n
    v1 = 0;\n
    do\n
    {\n
        a0 = (a0 * 1717986919 >> 34) + (a0 * 1717986919 >> 63);\n
        *(&v1) = v1 + 1;\n
    } while (a0 + 9 > 18);\n
    return v1;\n
}\n
", "4211749:sub_404425": null, "4211760:cgc_init_game": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[15];\n
    unsigned short field_10;\n
    char field_12;\n
    uint128_t field_13;\n
    unsigned short field_23;\n
    char field_25;\n
    uint128_t field_26;\n
    unsigned short field_36;\n
    char field_38;\n
    uint128_t field_39;\n
    unsigned short field_49;\n
    char field_4b;\n
    uint128_t field_4c;\n
    unsigned short field_5c;\n
    char field_5e;\n
    uint128_t field_5f;\n
    unsigned short field_6f;\n
    char field_71;\n
    uint128_t field_72;\n
    unsigned short field_82;\n
    char field_84;\n
    uint128_t field_85;\n
    unsigned short field_95;\n
    char field_97;\n
    uint128_t field_98;\n
    unsigned short field_a8;\n
    char field_aa;\n
    uint128_t field_ab;\n
    unsigned short field_bb;\n
    char field_bd;\n
    uint128_t field_be;\n
    unsigned short field_ce;\n
    char field_d0;\n
    uint128_t field_d1;\n
    unsigned short field_e1;\n
    char field_e3;\n
    uint128_t field_e4;\n
    unsigned short field_f4;\n
    char field_f6;\n
    uint128_t field_f7;\n
    unsigned short field_107;\n
    char field_109;\n
    uint128_t field_10a;\n
    unsigned short field_11a;\n
    char field_11c;\n
    uint128_t field_11d;\n
    unsigned short field_12d;\n
    char field_12f;\n
    uint128_t field_130;\n
    unsigned short field_140;\n
    char field_142;\n
    uint128_t field_143;\n
    unsigned short field_153;\n
    char field_155;\n
    uint128_t field_156;\n
    unsigned short field_166;\n
    char field_168;\n
    char padding_169[3];\n
    uint128_t field_16c;\n
    unsigned long long field_17c;\n
    char padding_184[4];\n
    unsigned long long field_188;\n
    char field_190;\n
    char padding_191[7];\n
    unsigned long long field_198;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_init_game(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax\n
    struct_0 *v4;  // r14, Other Possible Types: unsigned long\n
    unsigned long v5;  // rax\n
    void* v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
    unsigned long long *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10[2];  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_calloc(1, 416);\n
    if (!v3)\n
        return 0;\n
    v4 = v3;\n
    if (!a0)\n
    {\n
        *(&v3->field_0) = 4003321963775746628980877734491390723;\n
        v3->field_10 = 771;\n
        v3->field_12 = 3;\n
        *(&(&v3->field_12)[1]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_13 + 3)) = 771;\n
        *(&v3->field_13 + 5) = 3;\n
        *((&v3->field_13 + 6)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_25)[4]) = 771;\n
        (&v3->field_25)[6] = 3;\n
        *(&(&v3->field_25)[7]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_26 + 9)) = 771;\n
        *(&v3->field_26 + 11) = 3;\n
        *((&v3->field_26 + 12)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_38)[10]) = 771;\n
        (&v3->field_38)[12] = 3;\n
        *(&(&v3->field_38)[13]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_39 + 15)) = 771;\n
        *(&v3->field_49 + 1) = 3;\n
        *(&v3->field_4b) = 4003321963775746628980877734491390723;\n
        *((&v3->field_4c + 2)) = 771;\n
        *(&v3->field_4c + 4) = 3;\n
        *((&v3->field_4c + 5)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_5e)[3]) = 771;\n
        (&v3->field_5e)[5] = 3;\n
        *(&(&v3->field_5e)[6]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_5f + 8)) = 771;\n
        *(&v3->field_5f + 10) = 3;\n
        *((&v3->field_5f + 11)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_71)[9]) = 771;\n
        (&v3->field_71)[11] = 3;\n
        *(&(&v3->field_71)[12]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_72 + 14)) = 771;\n
        *(&v3->field_82) = 3;\n
        *((&v3->field_82 + 1)) = 4003321963775746628980877734491390723;\n
        *((&v3->field_85 + 1)) = 771;\n
        *(&v3->field_85 + 3) = 3;\n
        *((&v3->field_85 + 4)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_97)[2]) = 771;\n
        (&v3->field_97)[4] = 3;\n
        *(&(&v3->field_97)[5]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_98 + 7)) = 771;\n
        *(&v3->field_98 + 9) = 3;\n
        *((&v3->field_98 + 10)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_aa)[8]) = 771;\n
        (&v3->field_aa)[10] = 3;\n
        *(&(&v3->field_aa)[11]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_ab + 13)) = 771;\n
        *(&v3->field_ab + 15) = 3;\n
        *(&v3->field_bb) = 4003321963775746628980877734491390723;\n
        *(&v3->field_be) = 771;\n
        *(&v3->field_be + 2) = 3;\n
        *((&v3->field_be + 3)) = 4003321963775746628980877734491390723;\n
        *(&(&v3->field_d0)[1]) = 771;\n
        (&v3->field_d0)[3] = 3;\n
        *(&(&v3->field_d0)[4]) = 4003321963775746628980877734491390723;\n
        *((&v3->field_d1 + 6)) = 771;\n
        *(&v3->field_d1 + 8) = 3;\n
    }\n
    else\n
    {\n
        v5 = 18;\n
        do\n
        {\n
            (&v4->field_12)[v5] = *((a0 + v5 - 18));\n
            *(&(&v4->field_0)[v5 + 17]) = *((a0 + v5 - 17));\n
            *(&(&v4->field_0)[v5 + 16]) = *((a0 + v5 - 16));\n
            v4->padding_1[14 + v5] = *((a0 + v5 - 15));\n
            v4->padding_1[13 + v5] = *((a0 + v5 - 14));\n
            v4->padding_1[12 + v5] = *((a0 + v5 - 13));\n
            v4->padding_1[11 + v5] = *((a0 + v5 - 12));\n
            v4->padding_1[10 + v5] = *((a0 + v5 - 11));\n
            v4->padding_1[9 + v5] = *((a0 + v5 - 10));\n
            v4->padding_1[8 + v5] = *((a0 + v5 - 9));\n
            v4->padding_1[7 + v5] = *((a0 + v5 - 8));\n
            v4->padding_1[6 + v5] = *((a0 + v5 - 7));\n
            v4->padding_1[5 + v5] = *((a0 + v5 - 6));\n
            v4->padding_1[4 + v5] = *((a0 + v5 - 5));\n
            v4->padding_1[3 + v5] = *((a0 + v5 - 4));\n
            v4->padding_1[2 + v5] = *((a0 + v5 - 3));\n
            v4->padding_1[1 + v5] = *((a0 + v5 - 2));\n
            v4->padding_1[v5] = *((a0 + v5 - 1));\n
            (&v4->field_0)[v5] = *((a0 + v5));\n
            v5 += 19;\n
        } while (v5 != 379);\n
    }\n
    *(&(&v4->field_e3)[10]) = 0;\n
    *((&v4->field_d1 + 12)) = 0;\n
    *(&(&v4->field_f6)[6]) = 0;\n
    v9 = &prng_s;\n
    v8 = 0;\n
    v6 = 0;\n
    do\n
    {\n
        v7 = (&v4->field_0)[v8];\n
        if (v7 != 3)\n
            v6 ^= *((v9 + v7 * 8));\n
        v8 += 1;\n
        v9 += 16;\n
    } while (v8 != 361);\n
    v10 = cgc_calloc(1, 16);\n
    *(&(&v4->field_f6)[6]) = v10;\n
    v10[0] = v6;\n
    v10[1] = v10;\n
    *((&v4->field_e4 + 8)) = 0;\n
    *(&v4->field_f4) = 0;\n
    return v4;\n
}\n
", "4212514:sub_404722": null, "4212621:sub_40478d": null, "4212624:cgc_copy_game": "long long cgc_copy_game(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    char *v3;  // rax\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r8\n
    unsigned long long v7;  // r9\n
\n
    v0 = v2;\n
    v3 = cgc_calloc(1, 416);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, 0x1a0);\n
        return v3;\n
    }\n
    cgc__terminate(1);\n
    return cgc_get_color(1, 416, v4, v5, v6, v7);\n
}\n
", "4212704:cgc_get_color": "long long cgc_get_color(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // al, Other Possible Types: unsigned long long, char\n
    unsigned long v2;  // rax\n
\n
    v1 = 4;\n
    if (a1 <= 18 && a2 <= 18)\n
    {\n
        v2 = a2;\n
        v1 = v2 + v2 * 18;\n
        *(&v1) = *((a1 + a0 + v1));\n
    }\n
    return v1;\n
}\n
", "4212739:sub_404803": null, "4212752:cgc_has_liberty": "long long cgc_has_liberty(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x43]\n
    int tmp_26;  // tmp #26\n
    int tmp_17;  // tmp #17\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0x42]\n
    char v2;  // [bp-0x41]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned long v5;  // [bp-0x38]\n
    char v7;  // rbx\n
    char v9;  // rbp\n
    unsigned long long v10;  // r13\n
    unsigned long long v11;  // r12\n
    unsigned long v12;  // r14\n
    unsigned long long v13;  // rcx\n
    char *v14;  // r10\n
    unsigned long v15;  // rcx\n
    unsigned long long v16;  // r8\n
    char v17;  // r11b\n
    unsigned long long v18;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v19;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v20;  // rdi\n
    char v21;  // al, Other Possible Types: unsigned long\n
    unsigned long v22;  // r9, Other Possible Types: unsigned long long\n
\n
    v7 = a2;\n
    if (v7 > 18)\n
        return 0;\n
    v9 = a3;\n
    if (v9 > 18)\n
        return 0;\n
    v10 = a0;\n
    v11 = v9;\n
    v12 = v7;\n
    v13 = v11 + v11 * 18;\n
    v14 = a0 + v13;\n
    if (v14[v12] == 4)\n
        return 0;\n
    v15 = v13 + a1;\n
    if (*((v12 + v15)) == 1)\n
        return 0;\n
    v22 = a4;\n
    v16 = v9 + 1;\n
    if (v9 > 17)\n
    {\n
        a2 = 4;\n
        v9 = 17;\n
    }\n
    else\n
    {\n
        a2 = v16;\n
        *(&a2) = *((v12 + a2 + a2 * 18 + a0));\n
        v9 -= 1;\n
        if (v9 > 18)\n
        {\n
            v17 = 4;\n
            v9 = 255;\n
            v18 = v15 + v12;\n
            v19 = v7 - 1;\n
            if (!(v19 <= 18))\n
                goto LABEL_4048e1;\n
            goto LABEL_4048ab;\n
        }\n
    }\n
    v20 = v9;\n
    v17 = *((v12 + v20 + v20 * 18 + v10));\n
    v18 = v15 + v12;\n
    v19 = v7 - 1;\n
    if (v19 <= 18)\n
    {\n
LABEL_4048ab:\n
        v1 = v14[v19];\n
        if (v7 > 17)\n
        {\n
            v21 = 4;\n
            v7 = 19;\n
        }\n
        else\n
        {\n
            v7 += 1;\n
            goto LABEL_4048ed;\n
        }\n
    }\n
    else\n
    {\n
LABEL_4048e1:\n
        v1 = 4;\n
        v7 = 1;\n
LABEL_4048ed:\n
        v21 = v14[v7];\n
    }\n
    *(v18) = 1;\n
    if (a2 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v17 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v1 == 3)\n
    {\n
        return 1;\n
    }\n
    else if (v21 == 3)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v0 = v21;\n
        if (a2 == v22)\n
        {\n
            v3 = v19;\n
            v4 = v22;\n
            v5 = a1;\n
            v2 = v17;\n
            v21 = cgc_has_liberty(v10, a1, v12, v16, v22);\n
            v17 = v2;\n
            v19 = v3;\n
            a1 = v5;\n
            v22 = v4;\n
            tmp_26 = v21;\n
            *(&v21) = v0;\n
            if (tmp_26)\n
                return 1;\n
        }\n
        if (v17 == v22)\n
        {\n
            v3 = v19;\n
            v19 = v3;\n
            tmp_17 = cgc_has_liberty(v10, a1, v12, v9, v22);\n
            *(&v21) = v0;\n
            if (tmp_17)\n
                return 1;\n
        }\n
        if (v1 == v22)\n
        {\n
            tmp_12 = cgc_has_liberty(v10, a1, v19, v11, v22);\n
            *(&v21) = v0;\n
            if (tmp_12)\n
                return 1;\n
        }\n
        if (!(v21 == v22 && cgc_has_liberty(v10, a1, v7, v11, v22)))\n
            return 0;\n
        return 1;\n
    }\n
}\n
", "4213251:sub_404a03": null, "4213264:cgc_surrounded_by": "long long cgc_surrounded_by(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    char v1;  // [bp-0x36]\n
    char v2;  // [bp-0x35]\n
    unsigned long v4;  // rax, Other Possible Types: char\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rbx\n
    unsigned long long v7;  // r9\n
    unsigned long long v9;  // r12\n
    char *v10;  // rbp\n
    unsigned long long v11;  // rcx\n
    unsigned long long v12;  // rdx\n
    unsigned long v13;  // rcx\n
    char *v14;  // rcx\n
\n
    v0 = v4;\n
    if (!(a0 && a1))\n
    {\n
        cgc__terminate(a0);\n
        return cgc_remove_captures(a0, a1, a2, a3, a4, v7);\n
    }\n
    v5 = a2;\n
    v4 = 1;\n
    if (v5 > 18)\n
        return v4;\n
    v6 = a3;\n
    if (v6 > 18)\n
        return v4;\n
    v9 = v6;\n
    v10 = v5;\n
    v11 = v9 + v9 * 18;\n
    v12 = v10[v11 + a0];\n
    if (v12 == 4)\n
        return v4;\n
    v13 = v11 + a1;\n
    if (v10[v13] == 1)\n
        return v4;\n
    v14 = &v10[v13];\n
    if (v12 == a4)\n
    {\n
        *(v14) = 1;\n
        v4 = 2;\n
        return v4;\n
    }\n
    else if (2 - (a4 == 2) != v12)\n
    {\n
        if (v12 == 3)\n
            *(v14) = 1;\n
        v2 = cgc_surrounded_by(a0, a1, v10, v6 + 1, a4);\n
        v1 = cgc_surrounded_by(a0, a1, v10, v6 - 1, a4);\n
        v4 = cgc_surrounded_by(a0, a1, v5 - 1, v9, a4) + cgc_surrounded_by(a0, a1, v5 + 1, v9, a4) + v1 + v2;\n
        *(&v4) = (5 <= v4) * 2;\n
        return v4;\n
    }\n
    else\n
    {\n
        *(v14) = 1;\n
        return 0;\n
    }\n
}\n
", "4213600:cgc_remove_captures": "long long cgc_remove_captures(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1bc]\n
    unsigned long v1;  // [bp-0x1b8]\n
    char *v2;  // [bp-0x1b0]\n
    char v3;  // [bp-0x1a8]\n
    unsigned long long v5;  // rbp\n
    char *v6;  // rax\n
    char *v7;  // r12\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r8\n
    unsigned long long v11;  // r9\n
    void* v13;  // r14\n
    char *v14;  // rbp\n
    void* v15;  // r14\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // r12\n
    char *v19;  // rbp\n
    unsigned long v20;  // r15\n
    unsigned long long v22;  // r12\n
\n
    v5 = a1;\n
    v6 = cgc_calloc(1, 416);\n
    if (!v6)\n
    {\n
        cgc__terminate(1);\n
        return cgc_has_happened(1, 416, v8, v9, v10, v11);\n
    }\n
    v7 = v6;\n
    v1 = a0;\n
    cgc_memcpy(v6, a0, 0x1a0);\n
    v2 = v6;\n
    if (v5 == 4)\n
    {\n
        v13 = 0;\n
        v14 = v6;\n
        v0 = 0;\n
        do\n
        {\n
            v16 = 0;\n
            v17 = v1;\n
            do\n
            {\n
                cgc_memset(&v3, 0, 0x169);\n
                if (v14[v16] == 4 && !cgc_has_liberty(v2, &v3, v16, v13, 4))\n
                {\n
                    v0 += 1;\n
                    *((v17 + v16)) = 3;\n
                }\n
                v16 += 1;\n
            } while (v16 != 19);\n
            v1 = v17 + 19;\n
            v19 = v14 + 19;\n
        } while (v13 + 1 != 19);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        v0 = 0;\n
        do\n
        {\n
            v20 = 0;\n
            do\n
            {\n
                cgc_memset(&v3, 0, 0x169);\n
                if (v7[v20] == v5 && !cgc_has_liberty(v2, &v3, v20, v15, v5))\n
                {\n
                    v0 += 1;\n
                    *((v1 + v20)) = 3;\n
                }\n
                v20 += 1;\n
            } while (v20 != 19);\n
            v1 += 19;\n
            v22 = v7 + 19;\n
        } while (v15 + 1 != 19);\n
    }\n
    cgc_free(v2);\n
    return v0;\n
}\n
", "4213711:sub_404bcf": null, "4213748:sub_404bf4": null, "4213854:sub_404c5e": null, "4213881:sub_404c79": null, "4214016:cgc_has_happened": "typedef struct struct_1 {\n
    char padding_0[408];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_has_happened(unsigned long a0, struct_1 *a1)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v3;  // rax\n
    void* v4;  // r8, Other Possible Types: unsigned long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
\n
    v1 = &prng_s;\n
    v2 = 0;\n
    v4 = 0;\n
    do\n
    {\n
        v3 = *((a0 + v2));\n
        if (v3 != 3)\n
            v4 ^= *((v1 + v3 * 8));\n
        v2 += 1;\n
        v1 += 16;\n
    } while (v2 != 361);\n
    v5 = a1->field_198;\n
    while (true)\n
    {\n
        if (*(v5) == v4)\n
            return 1;\n
        tmp_2 = v5;\n
        v5 = *((v5 + 8));\n
        if (v5 == tmp_2)\n
            return 0;\n
    }\n
}\n
", "4214030:sub_404d0e": null, "4214106:sub_404d5a": null, "4214112:cgc_score": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[371];\n
    unsigned int field_174;\n
    unsigned int field_178;\n
} struct_0;\n
\n
long long cgc_score(struct_0 *a0, unsigned int *a1, unsigned int *a2)\n
{\n
    void* v0;  // [bp-0x1b8], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x1a8]\n
    struct_0 *v3;  // r15\n
    unsigned long v4;  // r13\n
    char v5;  // al\n
    unsigned int *v6;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rbp\n
    unsigned long long v8;  // r15\n
\n
    v3 = a0;\n
    *(a1) = a0->field_174;\n
    *(a2) = a0->field_178;\n
    v0 = 0;\n
    do\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            cgc_memset(&v1, 0, 0x169);\n
            v5 = (&v3->field_0)[v4];\n
            v6 = a2;\n
            if (v5 != 2)\n
            {\n
                v6 = a1;\n
                if (v5 != 1)\n
                {\n
                    v7 = v0;\n
                    v6 = a1;\n
                    if (cgc_surrounded_by(a0, &v1, v4, v7, 1) <= 1)\n
                    {\n
                        v6 = a2;\n
                        if (cgc_surrounded_by(a0, &v1, v4, v7, 2) < 2)\n
                            continue;\n
                    }\n
                }\n
            }\n
            *(v6) = *(v6) + 1;\n
            v4 += 1;\n
        } while (v4 != 19);\n
        v8 = &v3->padding_1[18];\n
        v0 += 1;\n
    } while (v0 != 19);\n
    return 0;\n
}\n
", "4214366:sub_404e5e": null, "4214368:cgc_check_and_play": "typedef struct struct_1 {\n
    char padding_0[408];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_check_and_play(struct struct_1 **a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    int tmp_2;  // tmp #2\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long long v3;  // rbx\n
    struct_1 *v5;  // r12\n
    unsigned long v6;  // r14\n
    char *v7;  // r13\n
    char *v8;  // rax\n
    char *v9;  // rbp\n
    unsigned long v10;  // r12\n
    unsigned long long v11;  // r9\n
    struct_1 *v15;  // rdi\n
    unsigned long long *v16;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v17;  // rdx\n
    void* v18;  // rax, Other Possible Types: unsigned long\n
    unsigned long v19;  // rsi\n
    struct_0 *v20;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rcx\n
\n
    v3 = a3;\n
    v5 = *(a0);\n
    v6 = a2;\n
    v7 = a1;\n
    if (v3 != 3 && *((v7 + &v5->padding_0[16 * v6 + 2 * v6 + v6])) != 3)\n
        return 4294967295;\n
    v0 = a4;\n
    v8 = cgc_calloc(1, 416);\n
    if (!v8)\n
    {\n
        cgc__terminate(1);\n
        return cgc_print_rchar(1, 416, a2, a3, a4, v11);\n
    }\n
    v9 = v8;\n
    v1 = a3;\n
    cgc_memcpy(v8, v5, 0x1a0);\n
    *((v7 + &v8[18 * v6 + v6])) = v3;\n
    v10 = 2 - (v3 == 2);\n
    v15 = *(a0);\n
    v16 = &prng_s;\n
    v17 = 0;\n
    v18 = 0;\n
    do\n
    {\n
        v19 = v9[v17];\n
        if (v19 != 3)\n
            v18 ^= *((v16 + v19 * 8));\n
        v17 += 1;\n
        v16 += 16;\n
    } while (v17 != 361);\n
    v20 = v15->field_198;\n
    do\n
    {\n
        if (*(v20) == v18)\n
        {\n
            cgc_free(v9);\n
            return 4294967295;\n
        }\n
        tmp_2 = v20;\n
        v20 = *((v20 + 8));\n
    } while (v20 != tmp_2);\n
    if (!v0)\n
    {\n
        cgc_free(v9);\n
    }\n
    else\n
    {\n
        cgc_free(v15);\n
        *(a0) = &v9;\n
        v22 = v1;\n
        *(&v9[376 + 4 * v22]) = *(&v9[376 + 4 * v22]) + 1;\n
        *(&v9[368 + 4 * v22]) = *(&v9[368 + 4 * v22]) + cgc_remove_captures(v8, v10);\n
        *(&v9[368 + 4 * v10]) = *(&v9[368 + 4 * v10]) + cgc_remove_captures(v9, v3);\n
    }\n
    return 0;\n
}\n
", "4214562:sub_404f22": null, "4214752:cgc_print_rchar": "long long cgc_print_rchar(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned long long v1;  // rbx\n
    unsigned long long v2;  // rax\n
\n
    if (!a1)\n
        return v2;\n
    v1 = a1;\n
    do\n
    {\n
        v2 = cgc_fdprintf(1, \"%c\", a0, a3, a4);\n
        tmp_3 = v1;\n
        *(&v1) = v1 - 1;\n
    } while (!([D] amd64g_calculate_condition(0x4<64>, 0x1<64>, t3, 0xff<64>, cc_ndep<8>)));\n
    return v2;\n
}\n
", "4214811:sub_40501b": null, "4214816:cgc_print_player": "long long cgc_print_player(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    unsigned long v2;  // rax\n
    unsigned int v4;  // ecx\n
    char v5;  // bl\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    cgc_fdprintf(1, \"%s: %d\", (a1 == 2 ? \"Black\" : \"White\"), *((a0 + a1 * 4 + 360)), a4);\n
    v6 = *((a0 + a1 * 4 + 360));\n
    if (!v6)\n
    {\n
        v5 = 13;\n
    }\n
    else\n
    {\n
        v5 = 14;\n
        do\n
        {\n
            v4 = v6;\n
            v6 = (v6 * 1717986919 >> 34) + (v6 * 1717986919 >> 63);\n
            a3 = v4 + 9;\n
            v5 -= 1;\n
        } while (a3 > 18);\n
        if (!v5)\n
            return v6;\n
    }\n
    do\n
    {\n
        v6 = cgc_fdprintf(1, \"%c\", 32, a3, a4);\n
        tmp_3 = v5;\n
        v5 -= 1;\n
    } while (!([D] amd64g_calculate_condition(0x4<64>, 0x1<64>, t3, 0xff<64>, cc_ndep<8>)));\n
    return v6;\n
}\n
", "4214993:sub_4050d1": null, "4215008:cgc_print_point": "long long cgc_print_point(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v1;  // rbp\n
    unsigned long long v2;  // rbx\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v4;  // rax\n
    char *v5;  // r14\n
\n
    v1 = a2;\n
    v2 = a1;\n
    if (a1)\n
        v3 = cgc_fdprintf(1, \"%c\", 32, a3, a4);\n
    if (v2 > 18)\n
    {\n
        return v3;\n
    }\n
    else if (v1 > 18)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v1;\n
        v3 = v4 + v4 * 18;\n
        v5 = a0 + v3;\n
        *(&v3) = v5[v2] - 1;\n
        if (v5[v2] - 1 <= 2)\n
        {\n
            cgc_fdprintf(1, \"%c\", *((4224152 + 4 * v3)), \"B\", a4);\n
            return cgc_fdprintf(1, \"%c\", (v2 == 18 ? 32 : 10), \"B\", a4);\n
        }\n
        return v3;\n
    }\n
}\n
", "4215162:sub_40517a": null, "4215168:cgc_draw_game": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[391];\n
    unsigned int field_188;\n
} struct_0;\n
\n
long long cgc_draw_game(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    int tmp_3;  // tmp #3\n
    struct_0 *v2;  // rax\n
    unsigned long long v3;  // r12\n
    void* v4;  // r15, Other Possible Types: unsigned long\n
    void* v5;  // rbx\n
    unsigned int v6;  // rdx\n
    struct_0 *v7;  // r14\n
    struct_0 *v8;  // rbx\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v10;  // ecx\n
    unsigned long v11;  // rcx\n
    unsigned int v12;  // ecx\n
    struct_0 *v13;  // rcx\n
    unsigned long v14;  // rbx, Other Possible Types: unsigned long long\n
    unsigned int v15;  // rdx\n
    unsigned long long v16;  // r12\n
\n
    v0 = v2;\n
    cgc_fdprintf(1, \"%c\", 10, a3, a4);\n
    cgc_fdprintf(1, \"%c\", 10, a3, a4);\n
    cgc_fdprintf(1, \"%c\", 10, a3, a4);\n
    cgc_fdprintf(1, \"%c\", 10, a3, a4);\n
    cgc_fdprintf(1, \"%c\", 10, a3, a4);\n
    v0 = a0;\n
    v3 = &a0->padding_1;\n
    v4 = 0;\n
    do\n
    {\n
        v9 = v4 - 9;\n
        v11 = -(v9);\n
        if (-(v9) < 0)\n
            v11 = v9;\n
        if (v11 == 3)\n
        {\n
            v5 = 0;\n
            *(&v5) = v4 < 9;\n
            v6 = (v4 < 9 ? \"Black\" : \"White\");\n
            v7 = v0;\n
            cgc_fdprintf(1, \"%s: %d\", v6, *((364 + &v7->field_0 + 0x4 * v5)), a4);\n
            v9 = *((364 + &v7->field_0 + 0x4 * v5));\n
            if (!v9)\n
            {\n
                *(&v7) = 13;\n
            }\n
            else\n
            {\n
                *(&v7) = 14;\n
                do\n
                {\n
                    v10 = v9;\n
                    v9 = (v9 * 1717986919 >> 34) + (v9 * 1717986919 >> 63);\n
                    v11 = v10 + 9;\n
                    *(&v7) = v7 - 1;\n
                } while (v11 > 18);\n
                if (!v7)\n
                    continue;\n
            }\n
            do\n
            {\n
                cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
                tmp_3 = v7;\n
                *(&v7) = v7 - 1;\n
            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x18<64>, 0xffffffffffffffef<64>, 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        }\n
        else if (v4 != 9)\n
        {\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
            continue;\n
        }\n
        else\n
        {\n
            v8 = v0;\n
            cgc_fdprintf(1, \"Ticks: %u\", *(&v8->field_188), v11, a4);\n
            v9 = v8->field_188;\n
            if (!v9)\n
            {\n
                *(&v8) = 13;\n
            }\n
            else\n
            {\n
                *(&v8) = 14;\n
                do\n
                {\n
                    v12 = v9;\n
                    v9 = (v9 * 1717986919 >> 34) + (v9 * 1717986919 >> 63);\n
                    v11 = v12 + 9;\n
                    *(&v8) = v8 - 1;\n
                } while (v11 > 18);\n
                if (!v8)\n
                    continue;\n
            }\n
            do\n
            {\n
                cgc_fdprintf(1, \"%c\", 32, v11, a4);\n
                tmp_3 = v8;\n
                *(&v8) = v8 - 1;\n
            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x18<64>, 0xffffffffffffffef<64>, 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        }\n
        v13 = v0;\n
        *(&v9) = (&v13->field_0)[18 * v4 + v4] - 1;\n
        if (v9 <= 2)\n
        {\n
            cgc_fdprintf(1, \"%c\", *((4224152 + 4 * v9)), v13, a4);\n
            cgc_fdprintf(1, \"%c\", 32, v13, a4);\n
        }\n
        v14 = -18;\n
        do\n
        {\n
            cgc_fdprintf(1, \"%c\", 32, v13, a4);\n
            v9 = *((v3 + v14 + 18)) - 1;\n
            if (v9 <= 2)\n
            {\n
                cgc_fdprintf(1, \"%c\", *((4224152 + 4 * v9)), v13, a4);\n
                v15 = (v14 == -1 ? 32 : 10);\n
                cgc_fdprintf(1, \"%c\", v15, v13, a4);\n
            }\n
            v14 += 1;\n
        } while (!([D] amd64g_calculate_condition(0x4<64>, 0x18<64>, 0xffffffffffffffef<64>, 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
        v4 += 1;\n
        v16 = v3 + 19;\n
    } while (v4 != 19);\n
    cgc_fdprintf(1, \"%c\", 10, v13, a4);\n
    cgc_fdprintf(1, \"%c\", 10, v13, a4);\n
    cgc_fdprintf(1, \"%c\", 10, v13, a4);\n
    cgc_fdprintf(1, \"%c\", 10, v13, a4);\n
    return cgc_fdprintf(1, \"%c\", 10, v13, a4);\n
}\n
", "4215307:sub_40520b": null, "4215489:sub_4052c1": null, "4215615:sub_40533f": null, "4216406:sub_405656": null, "4216416:cgc_sleep": "long long cgc_sleep(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x8], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r8\n
\n
    v0 = v3;\n
    v0 = a0;\n
    v1 = a1;\n
    cgc_fdwait(a0, a1, v4, v5, v6);\n
    return *(&v0);\n
}\n
", "4216443:sub_40567b": null, "4216448:cgc_read_n_bytes": "long long cgc_read_n_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    char *v4;  // r13\n
    unsigned long long v5;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        if (a3)\n
        {\n
            v3 = 0;\n
            while (true)\n
            {\n
                v4 = a2 + v3;\n
                if (cgc_receive(a0, a1, a2, a3))\n
                    break;\n
                v5 = v0;\n
                if (!v5)\n
                {\n
                    return v3;\n
                }\n
                else if (*(v4) != a4)\n
                {\n
                    v3 += v5;\n
                    if (v3 >= a1)\n
                        return v3;\n
                }\n
                else\n
                {\n
                    *(v4) = 0;\n
                    return v3;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            while (!cgc_receive(a0, a1, a2, a3))\n
            {\n
                v6 = v0;\n
                if (!v6)\n
                    return v3;\n
                v3 += v6;\n
                if (v3 >= a1)\n
                    return v3;\n
            }\n
        }\n
        return 4294967295;\n
    }\n
}\n
", "4216647:sub_405747": null, "4216656:cgc_read_move": "long long cgc_read_move(char *a0, char *a1, char *a2)\n
{\n
    char v0[2];  // [bp-0x48], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x39]\n
    char v2;  // [bp-0x31]\n
    void* v5;  // rbp, Other Possible Types: unsigned long\n
    char *v6;  // rbx\n
    unsigned long long v7;  // rcx\n
    char v8[2];  // rax\n
    unsigned long long v10;  // r12\n
    char v11[2];  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rax\n
    char v13[2];  // rcx\n
    unsigned long v14;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v15;  // rax\n
\n
    *(a2) = 0;\n
    v5 = 0;\n
    cgc_memset(&v1, 0, 0x8);\n
    *(&v0) = 0;\n
    while (true)\n
    {\n
        v6 = &v1;\n
        if (cgc_receive(a0, 0, 8, v7))\n
            break;\n
        v8 = v0;\n
        if (!v8)\n
            break;\n
        if (*(v6) != 10)\n
        {\n
            v5 = &v8[v5];\n
            if (v5 >= 8)\n
                break;\n
        }\n
        else\n
        {\n
            *(v6) = 0;\n
            break;\n
        }\n
    }\n
    v2 = 0;\n
    *(&v0) = 0;\n
    if (!cgc_strncmp(\"pass\", &v1, cgc_strlen(\"pass\")))\n
    {\n
        *(a2) = 1;\n
    }\n
    else\n
    {\n
        v14 = cgc_strtol(&v1, v0, 10);\n
        v11 = v0;\n
        if (v11 == &v1)\n
            return 4294967295;\n
        if (v11 >= &v2)\n
            return 4294967295;\n
        v10 = v14;\n
        if (!v11)\n
        {\n
            v11 = 0;\n
        }\n
        else\n
        {\n
            *(&v14) = v11[0];\n
            if (v11[0])\n
            {\n
                while (v11 < &v2)\n
                {\n
                    v12 = cgc_isdigit(v14);\n
                    v13 = v0;\n
                    if (!v12)\n
                    {\n
                        v11 = &v13[1];\n
                        v0 = v11;\n
                        v14 = v13[1];\n
                        if (!v14)\n
                            break;\n
                    }\n
                    else\n
                    {\n
                        v11 = v13;\n
                        break;\n
                    }\n
                }\n
            }\n
        }\n
        v15 = cgc_strtol(v11, NULL, 10);\n
        if (v10 > 18)\n
            return 4294967295;\n
        if (v15 < 0)\n
            return 4294967295;\n
        if (v15 > 18)\n
            return 4294967295;\n
        *(a0) = v10;\n
        *(a1) = v15;\n
    }\n
    return 0;\n
}\n
", "4217003:sub_4058ab": null, "4217008:cgc_end_game": "extern char g_4074a4;\n
\n
long long cgc_end_game(unsigned int a0[93], unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // r14\n
    unsigned long v4;  // rbx\n
    unsigned long long v5;  // rbp\n
    char *v6;  // r14\n
    unsigned int v7[93];  // rbx\n
    unsigned long long v9;  // r9\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v5 = a2;\n
    v6 = a1;\n
    v7 = a0;\n
    cgc_free(a0);\n
    cgc_fdprintf(1, \"Game Over \", a2, a3, a4);\n
    if (v5 <= 2)\n
        cgc_fdprintf(1, &(&g_4074a4)[*(&(&g_4074a4)[4 * v5])], a2, &g_4074a4, a4);\n
    cgc_fdprintf(1, \"You are a \", a2, &g_4074a4, a4);\n
    cgc_fdprintf(1, (a0[92] < a0[91] ? \"Loser, \" : \"Winner, \"), a2, &g_4074a4, a4);\n
    cgc_fdprintf(1, v6, a2, &g_4074a4, a4);\n
    cgc__terminate(1);\n
    return cgc_prompt_move(1, v6, a2, &g_4074a4, a4, v9);\n
}\n
", "4217168:cgc_prompt_move": "typedef struct struct_0 {\n
    char padding_0[392];\n
    unsigned long long field_188;\n
} struct_0;\n
\n
long long cgc_prompt_move(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rdx\n
\n
    v1 = a0->field_188;\n
    if (a1 == 1)\n
    {\n
        return cgc_fdprintf(1, \"B >\", v1, a3, a4);\n
    }\n
    else if (a1 != 2)\n
    {\n
        return cgc_fdprintf(1, \"%d \", v1, a3, a4);\n
    }\n
    else\n
    {\n
        return cgc_fdprintf(1, \"W >\", v1, a3, a4);\n
    }\n
}\n
", "4217249:sub_4059a1": null, "4217264:cgc_color_to_string": "extern unsigned int g_4074b0;\n
\n
long long cgc_color_to_string(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    char v3;  // dil\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    v3 = a0 - 1;\n
    if (v3 >= 4)\n
    {\n
        cgc__terminate(rdi<8>);\n
        return cgc_pass_for(rdi<8>, v4, v5, v6, v7, v8);\n
    }\n
    return (&g_4074b0)[v3] + &g_4074b0;\n
}\n
", "4217312:cgc_pass_for": "typedef struct struct_0 {\n
    char padding_0[400];\n
    char field_190;\n
} struct_0;\n
\n
long long cgc_pass_for(struct_0 *a0, unsigned long a1)\n
{\n
    int tmp_3;  // tmp #3\n
    unsigned long long v2;  // rax\n
\n
    tmp_3 = a0->field_190 + 1;\n
    a0->field_190 = a0->field_190 + 1;\n
    v2 = -(2 <= tmp_3 & a1 == 2);\n
    return v2;\n
}\n
", "4217346:sub_405a02": null, "4217360:cgc_interact": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[391];\n
    unsigned long long field_188;\n
    char field_190;\n
    char padding_191[7];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_interact(struct struct_1 **a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1b]\n
    int tmp_1;  // tmp #1\n
    char v1;  // [bp-0x1a]\n
    char v2;  // [bp-0x19]\n
    unsigned long long v4;  // rbp\n
    unsigned long v5;  // rdx\n
    char *v6;  // rsi, Other Possible Types: unsigned long\n
    struct_1 *v7;  // rax\n
    struct_1 *v8;  // rax\n
    unsigned long long *v9;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v10;  // rdx\n
    void* v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v12;  // rsi\n
    struct_0 *v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14[2];  // rax\n
    unsigned long long v15;  // r9\n
    unsigned long long v16;  // rax\n
\n
    v4 = a1;\n
    v5 = *(a0)->field_188;\n
    cgc_fdprintf(1, \"%d \", v5, a3, a4);\n
    if (v4 == 1)\n
    {\n
        v6 = \"B >\";\n
    }\n
    else\n
    {\n
        if (!(v4 == 2))\n
            goto LABEL_405a62;\n
        v6 = \"W >\";\n
    }\n
    cgc_fdprintf(1, v6, v5, a3, a4);\n
LABEL_405a62:\n
    if (cgc_read_move(&v2, &v1, &v0) < 0)\n
        return 4294967295;\n
    v7 = *(a0);\n
    if (v0)\n
    {\n
        tmp_1 = v7->field_190 + 1;\n
        v7->field_190 = v7->field_190 + 1;\n
        return 2 <= tmp_1 & v4 == 2;\n
    }\n
    v7->field_190 = 0;\n
    if (cgc_check_and_play(a0, v2, v1, v4, 1) < 0)\n
        return 4294967295;\n
    v8 = *(a0);\n
    v9 = &prng_s;\n
    v10 = 0;\n
    v11 = 0;\n
    do\n
    {\n
        v12 = (&v8->field_0)[v10];\n
        if (v12 != 3)\n
            v11 ^= *((v9 + v12 * 8));\n
        v10 += 1;\n
        v9 += 16;\n
    } while (v10 != 361);\n
    v13 = v8->field_198;\n
    v14 = cgc_calloc(1, 16);\n
    if (v14)\n
    {\n
        v14[1] = v14;\n
        v14[0] = v11;\n
        *((v13 + 8)) = v14;\n
        return 0;\n
    }\n
    cgc__terminate(1);\n
    v16 = cgc_calculate_move(1, 16, v10, v9, 1, v15);\n
    return v16;\n
}\n
", "4217578:sub_405aea": null, "4217712:cgc_calculate_move": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[408];\n
    struct struct_2 *field_198;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
extern char g_4073c0;\n
extern unsigned int pcnt;\n
extern unsigned long long prng_s;\n
\n
long long cgc_calculate_move(struct struct_3 **a0, char *a1, struct struct_1 **a2, struct struct_1 **a3)\n
{\n
    char v0;  // [bp-0x37d]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x37c]\n
    char v2;  // [bp-0x377]\n
    char v3;  // [bp-0x376]\n
    char v4;  // [bp-0x375]\n
    unsigned int v5;  // [bp-0x374]\n
    void* v6;  // [bp-0x370], Other Possible Types: unsigned long\n
    struct struct_1 **v7;  // [bp-0x368]\n
    unsigned int v8;  // [bp-0x35c]\n
    struct struct_1 **v9;  // [bp-0x358]\n
    struct struct_1 **v10;  // [bp-0x350]\n
    char *v11;  // [bp-0x348]\n
    struct struct_1 **v12;  // [bp-0x340]\n
    char *v13;  // [bp-0x338]\n
    struct struct_1 **v14;  // [bp-0x330]\n
    struct struct_3 **v15;  // [bp-0x328]\n
    struct struct_1 **v16;  // [bp-0x320]\n
    char v17;  // [bp-0x318]\n
    char v18;  // [bp-0x1a8]\n
    struct struct_3 **v20;  // r12, Other Possible Types: unsigned long\n
    struct struct_1 **v21;  // rbp, Other Possible Types: unsigned long\n
    struct struct_1 **v22;  // rbx\n
    struct_3 *v23;  // r15\n
    unsigned long v24;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v25;  // eax\n
    struct struct_1 **v26;  // rsi\n
    unsigned int *v28;  // rax\n
    char *v29;  // rax\n
    char *v30;  // rbx\n
    char *v31;  // rax\n
    char *v32;  // rbp\n
    unsigned long v33;  // r15\n
    void* v34;  // rbx\n
    unsigned long v35;  // r13\n
    unsigned long long v37;  // r15\n
    unsigned long long v38;  // rbp\n
    char *v39;  // rax\n
    char *v40;  // r13\n
    char *v41;  // r12\n
    unsigned long v42;  // rbx\n
    void* v43;  // r13\n
    unsigned long v44;  // rbp\n
    void* v45;  // r12\n
    unsigned long v46;  // rbp\n
    unsigned long long v48;  // r12\n
    unsigned long long v49;  // rbx\n
    unsigned long v50;  // rbx\n
    unsigned long long v52;  // r13\n
    unsigned long long v53;  // rbp\n
    char *v54;  // rsi, Other Possible Types: unsigned long\n
    void* v55;  // rax, Other Possible Types: unsigned long\n
    unsigned long v56;  // rdi\n
    unsigned long v57;  // rbx\n
    unsigned int v58;  // esi\n
    void* v59;  // rcx, Other Possible Types: unsigned long, unsigned long long, struct_2 *, char\n
    struct struct_1 **v60;  // rdi, Other Possible Types: unsigned long\n
    struct_0 *v61;  // r13, Other Possible Types: unsigned long\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v63;  // r9\n
    unsigned long long v64;  // rax\n
\n
    v14 = a2;\n
    v13 = a1;\n
    v20 = a0;\n
    v0 = 2 - (a3 == 2);\n
    v1 = a3;\n
    v4 = a3 == 4;\n
    v21 = 0;\n
    v61 = &v17;\n
    v6 = 0;\n
    v5 = 0;\n
    v15 = a0;\n
    while (true)\n
    {\n
        v9 = v21 + 1;\n
        v12 = v21 - 1;\n
        v60 = 0;\n
        v16 = v21;\n
        do\n
        {\n
            v22 = v60;\n
            v24 = cgc_memset(v61, 0, 0x169);\n
            v23 = *(v20);\n
            v60 += 1;\n
            a3 = 17;\n
            *(&v24) = v4;\n
            if (v22 != 18)\n
            {\n
                v24 = &v23->padding_0[18 * v21 + v21];\n
                *(&v24) = *((v60 + v24)) == v1;\n
                a3 = v22 + 1;\n
                a2 = 4;\n
                if (!(a3 <= 18))\n
                    goto LABEL_405c81;\n
            }\n
            *(&a2) = v23->padding_0[18 * v21 + v21 + a3];\n
LABEL_405c81:\n
            v25 = v24 + (a2 == v1);\n
            *(&a3) = 4;\n
            *(&a2) = 4;\n
            if (v21 <= 17)\n
            {\n
                v26 = v9;\n
                *(&a2) = *(v22 + v26 + 0x12 * v26 + &v23->padding_0[0]);\n
            }\n
            if (v12 <= 18)\n
            {\n
                a2 = v12;\n
                *(&a3) = *((v22 + &v23->padding_0[18 * a2 + a2]));\n
            }\n
            v28 = v24 + (a2 == v1) + (a3 == v1) - 1;\n
            v59 = 0;\n
            if (v28 <= 3)\n
                v59 = *((&g_4073c0 + 0x4 * v28));\n
            if (v59 >= v5)\n
            {\n
                if (v1 != 3 && !(*((v22 + &v23->padding_0[16 * v21 + 2 * v21 + v21])) == 3))\n
                    goto LABEL_405c09;\n
                v8 = v59;\n
                v10 = v22;\n
                v7 = v60;\n
                v29 = cgc_calloc(1, 416);\n
                if (!v29)\n
                {\n
                    cgc__terminate(1);\n
                    v64 = cgc_ai(1, 416, a2, v59, 4, v63);\n
                    return v64;\n
                }\n
                v30 = v29;\n
                cgc_memcpy(v29, v23, 0x1a0);\n
                *((v10 + &v29[18 * v21 + v21])) = v1;\n
                v31 = cgc_calloc(1, 416);\n
                if (v31)\n
                {\n
                    cgc_memcpy(v31, v30, 0x1a0);\n
                    v32 = v31;\n
                    v11 = v30;\n
                    v33 = v30;\n
                    v34 = 0;\n
                    do\n
                    {\n
                        v35 = 0;\n
                        do\n
                        {\n
                            cgc_memset(&v18, 0, 0x169);\n
                            if (v32[v35] == v0 && !cgc_has_liberty(v31, &v18, v35, v34, v0))\n
                                *((v33 + v35)) = 3;\n
                            v35 += 1;\n
                        } while (v35 != 19);\n
                        v37 = v33 + 19;\n
                        v38 = v32 + 19;\n
                    } while (v34 + 1 != 19);\n
                    cgc_free(v31);\n
                    v39 = cgc_calloc(1, 416);\n
                    if (v39)\n
                    {\n
                        v40 = v11;\n
                        cgc_memcpy(v39, v40, 0x1a0);\n
                        if (v1 != 4)\n
                        {\n
                            v44 = v39;\n
                            v45 = 0;\n
                            do\n
                            {\n
                                v50 = 0;\n
                                do\n
                                {\n
                                    cgc_memset(&v18, 0, 0x169);\n
                                    if (*((v44 + v50)) == v1 && !cgc_has_liberty(v39, &v18, v50, v45, v1))\n
                                        v40[v50] = 3;\n
                                    v50 += 1;\n
                                } while (v50 != 19);\n
                                v52 = v40 + 19;\n
                                v53 = v44 + 19;\n
                            } while (v45 + 1 != 19);\n
                        }\n
                        else\n
                        {\n
                            v41 = v40;\n
                            v42 = v39;\n
                            v43 = 0;\n
                            do\n
                            {\n
                                v46 = 0;\n
                                do\n
                                {\n
                                    cgc_memset(&v18, 0, 0x169);\n
                                    if (*((v42 + v46)) == 4 && !cgc_has_liberty(v39, &v18, v46, v43, 4))\n
                                        v41[v46] = 3;\n
                                    v46 += 1;\n
                                } while (v46 != 19);\n
                                v48 = v41 + 19;\n
                                v49 = v42 + 19;\n
                            } while (v43 + 1 != 19);\n
                        }\n
                        cgc_free(v39);\n
                        v20 = v15;\n
                        a2 = &prng_s;\n
                        v54 = 0;\n
                        v55 = 0;\n
                        v21 = v16;\n
                        v61 = &v17;\n
                        v56 = v11;\n
                        do\n
                        {\n
                            v57 = *((v56 + v54));\n
                            if (v57 != 3)\n
                                v55 ^= *((a2 + v57 * 8));\n
                            v54 += 1;\n
                            a2 += 16;\n
                        } while (v54 != 361);\n
                        v59 = *(v20)->field_198;\n
                        do\n
                        {\n
                            if (*(v59) == v55)\n
                            {\n
                                cgc_free(v56);\n
                                goto LABEL_405c04;\n
                            }\n
                            a2 = *((v59 + 8));\n
                            tmp_2 = v59;\n
                            v59 = a2;\n
                        } while (a2 != tmp_2);\n
                        cgc_free(v56);\n
                        pcnt = pcnt + 1;\n
                        prng_s = prng_s * 1103515245 + 12345;\n
                        v58 = v8;\n
                        v59 = (v58 == v5 ? 75 : 90);\n
                        if (((prng_s * 1103515245 + 12345 >> 16) - ((prng_s * 1103515245 + 12345 >> 16) * 1374389535 >> 37) * 100) <= v59)\n
                        {\n
LABEL_405c04:\n
                            v60 = v7;\n
                            goto LABEL_405c09;\n
                        }\n
                        v59 = v6;\n
                        *(&v59) = v59 + 1;\n
                        v5 = v58;\n
                        a2 = v10;\n
                        v2 = a2;\n
                        v3 = v21;\n
                        v6 = v59;\n
                        v60 = v7;\n
                        if (*(&v59) > 5)\n
                        {\n
                            v59 = v21;\n
LABEL_40606f:\n
                            *(v13) = a2;\n
                            v62 = v14;\n
                            *(v62) = v59;\n
                            *(&v62) = 1;\n
                            return v62;\n
                        }\n
                        goto LABEL_405c09;\n
                    }\n
                }\n
            }\n
LABEL_405c09:\n
        } while (v60 != 19);\n
        v62 = v9;\n
        v21 = v62;\n
        if (v62 != 19)\n
            continue;\n
        *(&v59) = v3;\n
        *(&a2) = v2;\n
        if (!v6)\n
        {\n
            *(&v62) = 2;\n
            return v62;\n
        }\n
        goto LABEL_40606f;\n
    }\n
}\n
", "4217805:sub_405bcd": null, "4218303:sub_405dbf": null, "4218327:sub_405dd7": null, "4218408:sub_405e28": null, "4218490:sub_405e7a": null, "4218522:sub_405e9a": null, "4218603:sub_405eeb": null, "4218630:sub_405f06": null, "4218711:sub_405f57": null, "4218765:sub_405f8d": null, "4218801:sub_405fb1": null, "4219056:cgc_ai": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[399];\n
    char field_190;\n
    char padding_191[7];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern unsigned long long prng_s;\n
\n
long long cgc_ai(struct struct_1 **a0, unsigned long long *a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long *v3;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rax\n
    struct_1 *v6;  // rax\n
    unsigned long v7;  // rsi\n
    void* v8;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v9;  // rdx\n
    struct_0 *v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v11[2];  // rax\n
    unsigned long long v12;  // r9\n
    unsigned long long v13;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = cgc_calculate_move(a0, &v0, &v0, a1);\n
    if (v4 == 2)\n
    {\n
        *(a0)->field_190 = *(a0)->field_190 + 1;\n
        return 0;\n
    }\n
    if (v4 != 1)\n
    {\n
        cgc__terminate(1);\n
        v13 = cgc_pb(1, 16, v9, v3, 1, v12);\n
        return v13;\n
    }\n
    cgc_check_and_play(a0, *(&v0 + 7), *(&v0 + 6), a1, 1);\n
    v6 = *(a0);\n
    v3 = &prng_s;\n
    v9 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v7 = (&v6->field_0)[v9];\n
        if (v7 != 3)\n
            v8 ^= *((v3 + v7 * 8));\n
        v9 += 1;\n
        v3 += 16;\n
    } while (v9 != 361);\n
    v10 = v6->field_198;\n
    v11 = cgc_calloc(1, 16);\n
    if (v11)\n
    {\n
        v11[1] = v11;\n
        v11[0] = v8;\n
        *((v10 + 8)) = v11;\n
        return 0;\n
    }\n
}\n
", "4219137:sub_406101": null, "4219296:cgc_pb": "long long cgc_pb(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v1[19];  // rbx, Other Possible Types: unsigned long\n
\n
    cgc_fdprintf(2, \"@@\", a2, a3, a4);\n
    v1 = 18;\n
    do\n
    {\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 18)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 17)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 16)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 15)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 14)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 13)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 12)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 11)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 10)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 9)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 8)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 7)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 6)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 5)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 4)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 3)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 2)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1 - 1)), a3, a4);\n
        cgc_fdprintf(2, \"%d\", *((a0 + v1)), a3, a4);\n
        v1 += 19;\n
    } while (v1 != 379);\n
    return cgc_fdprintf(2, \"\\n
\", a2, a3, a4);\n
}\n
", "4219783:sub_406387": null, "4219792:main": "typedef struct struct_6 {\n
    unsigned long long field_-ffffffffffbf6818;\n
    char padding_-ffffffffffbf6810[18446744073705318416];\n
    struct struct_0 *field_0;\n
    char padding_8[4233192];\n
    unsigned long long field_4097f0;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    char field_1;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[363];\n
    unsigned int field_16c;\n
    char padding_170[4];\n
    unsigned int field_174;\n
    char padding_178[4];\n
    unsigned int field_17c;\n
    unsigned int field_180;\n
    char padding_184[4];\n
    unsigned long long field_188;\n
    char field_190;\n
    char padding_191[7];\n
    struct struct_0 *field_198;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[408];\n
    struct struct_2 *field_198;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char field_0;\n
    char padding_1[363];\n
    unsigned int field_16c;\n
    char padding_170[4];\n
    unsigned int field_174;\n
    char padding_178[4];\n
    unsigned int field_17c;\n
    unsigned int field_180;\n
    char padding_184[4];\n
    unsigned int field_188;\n
    char padding_18c[4];\n
    char field_190;\n
    char padding_191[7];\n
    struct struct_0 *field_198;\n
} struct_7;\n
\n
typedef struct struct_5 {\n
    char field_0;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
    struct struct_4 *field_8;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    void* field_8;\n
} struct_2;\n
\n
extern unsigned int pcnt;\n
extern struct_6 prng_s;\n
extern unsigned long ztable;\n
\n
int main(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_2;  // tmp #2\n
    void* *v0;  // [bp-0x1d9]\n
    unsigned int v1;  // [bp-0x1d8]\n
    unsigned int v2;  // [bp-0x1d4]\n
    struct_1 *v3;  // [bp-0x1d0]\n
    struct_2 *v4;  // [bp-0x1c8], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0x1c0]\n
    struct_1 *v6;  // [bp-0x1b8], Other Possible Types: struct_3 *\n
    char v7;  // [bp-0x1b0]\n
    void* v8;  // [bp-0x1a8]\n
    char v9;  // [bp-0x1a0]\n
    unsigned long v10;  // [bp-0x30]\n
    unsigned long v11;  // [bp-0x28]\n
    unsigned long v12;  // [bp-0x20]\n
    unsigned long v13;  // [bp-0x18]\n
    unsigned long v14;  // [bp-0x10]\n
    unsigned long v16;  // r15\n
    unsigned long v17;  // r14\n
    unsigned long v18;  // r13\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rbx\n
    void* v21;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rax\n
    struct_1 *v23;  // rdx, Other Possible Types: unsigned long, struct_0 *, struct_6 *, unsigned int\n
    struct_2 *v24;  // rcx, Other Possible Types: unsigned long, unsigned long long, struct_0 *\n
    struct_2 *v25;  // rdi, Other Possible Types: unsigned long\n
    struct_1 *v26;  // rax, Other Possible Types: unsigned long\n
    void* v27;  // rbx, Other Possible Types: unsigned long\n
    char *v28;  // rbp\n
    unsigned long long v29;  // rax\n
    struct_5 *v30;  // r15\n
    void* v31;  // rbx, Other Possible Types: unsigned long\n
    char *v32;  // rbp\n
    struct_2 *v33;  // rax\n
    char *v34;  // rax, Other Possible Types: unsigned long\n
    char *v35;  // rbp\n
    unsigned long long v36;  // rax\n
    struct_0 *v37;  // rax\n
    unsigned long long v38;  // rbx\n
    struct_1 *v39;  // rax\n
    struct_1 *v40;  // r14\n
    struct_1 *v41;  // rax\n
    void* v42;  // r15\n
    unsigned long v43;  // rbp\n
    unsigned long v44;  // rbx\n
    unsigned long long v46;  // r14\n
    unsigned long long v47;  // rbp\n
    struct_1 *v48;  // rax\n
    struct_1 *v49;  // r12\n
    void* v50;  // r15\n
    unsigned long v51;  // rbp\n
    unsigned long v52;  // rbx\n
    unsigned long long v54;  // r12\n
    unsigned long long v55;  // rbp\n
    struct_7 *v56;  // r13, Other Possible Types: unsigned long\n
    struct_5 *v57;  // r15\n
    unsigned long v58;  // rbp\n
    unsigned long v59;  // rsi\n
    void* v60;  // rax, Other Possible Types: unsigned long\n
    struct_6 *v61;  // rcx, Other Possible Types: unsigned long\n
    struct_5 *v62;  // r12, Other Possible Types: unsigned long\n
    unsigned long v63;  // rax\n
    void* v64;  // rbx, Other Possible Types: unsigned long\n
    struct_4 *v65;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v66[2];  // rax\n
    unsigned int *v67;  // r12\n
    struct_1 *v68;  // rbx\n
    unsigned int *v69;  // r13\n
    void* v70;  // r14\n
    unsigned long v71;  // r15\n
    char v72;  // al\n
    unsigned int *v73;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v74;  // rbp\n
    unsigned long long v76;  // rbx\n
    struct_1 *v77;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v78;  // rax\n
    char *v79;  // r15\n
    unsigned long long v80;  // rax\n
    unsigned long long v81;  // rbp\n
    struct_1 *v82;  // rax\n
    struct_1 *v83;  // rbx\n
    struct_1 *v84;  // rax\n
    void* v85;  // r15\n
    struct_1 *v86;  // rbp\n
    unsigned long v87;  // r13\n
    unsigned long v88;  // rbx\n
    unsigned long long v90;  // r13\n
    unsigned long long v91;  // rbp\n
    struct_1 *v92;  // rax\n
    struct_1 *v93;  // r12\n
    void* v94;  // r15\n
    unsigned long v95;  // rbp\n
    unsigned long v96;  // rbx\n
    unsigned long long v98;  // r12\n
    unsigned long long v99;  // rbp\n
    struct_6 *v100;  // rcx, Other Possible Types: unsigned long\n
    struct_1 *v101;  // rdx, Other Possible Types: unsigned long\n
    void* v102;  // rax, Other Possible Types: unsigned long\n
    unsigned long v103;  // rbx\n
    unsigned long v104;  // rsi\n
    struct_4 *v105;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v106;  // rax\n
    void* v107;  // rbx, Other Possible Types: unsigned long\n
    struct_4 *v108;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v109[2];  // rax\n
    struct_0 *v110;  // r12\n
    struct_0 *v111;  // r13\n
    struct_1 *v112;  // r15\n
    void* v113;  // r14\n
    unsigned long v114;  // rbx\n
    char v115;  // al\n
    unsigned long long v116;  // rbp\n
    unsigned long long v118;  // r15\n
    unsigned long long v119;  // rax\n
    struct_5 *v120;  // r12\n
    struct_5 *v121;  // r15\n
    char *v122;  // rsi, Other Possible Types: unsigned long\n
    char *v123;  // rsi\n
\n
    v14 = v16;\n
    v13 = v17;\n
    v12 = v18;\n
    v11 = v19;\n
    v10 = v20;\n
    v8 = 0;\n
    v21 = 0;\n
    while (!cgc_receive(a0, a1, a2, a3))\n
    {\n
        v22 = v8;\n
        if (!v22)\n
            break;\n
        v21 += v22;\n
        if (v21 >= 8)\n
            break;\n
    }\n
    v23 = 8;\n
    v24 = prng_s.field_-ffffffffffbf6818;\n
    do\n
    {\n
        v25 = v24 * 1103515245 + 12345;\n
        *((v23 - -4233192)) = v25 / 0x10000;\n
        v24 = v25 * 1103515245 + 12345;\n
        *((v23 + &ztable)) = v24 / 0x10000;\n
        v23 += 16;\n
    } while (v23 != 5784);\n
    pcnt = pcnt + 722;\n
    prng_s.field_-ffffffffffbf6818 = v24;\n
    v26 = cgc_init_game(0);\n
    v6 = &v26->field_0;\n
    if (!(!v26))\n
        goto LABEL_40647e;\n
    do\n
    {\n
LABEL_406474:\n
        v26 = cgc__terminate(v25);\n
LABEL_40647e:\n
        v56 = v26;\n
        v27 = 0;\n
        cgc_fdprintf(1, \"What is your name?\\n
\", v23, v24, a4);\n
        v8 = 0;\n
        v62 = &v8;\n
        v28 = &v7;\n
        if (cgc_receive(1, \"What is your name?\\n
\", v23, v24))\n
        {\n
LABEL_406f04:\n
            cgc_fdprintf(1, \"Need a name, bro\\n
\", v23, v24, a4);\n
            cgc__terminate(1);\n
            cgc_free(v56);\n
            cgc_fdprintf(1, \"Game Over \", v23, v24, a4);\n
            v122 = \"Game Time Exceeded\\n
\";\n
LABEL_406f43:\n
            cgc_fdprintf(1, v122, v23, v24, a4);\n
            cgc_fdprintf(1, \"You are a \", v23, v24, a4);\n
            goto LABEL_406f62;\n
        }\n
        v29 = v8;\n
        if (v29)\n
        {\n
            if (*(v28) == 10)\n
            {\n
                *(v28) = 0;\n
                if (!(v27 & 0x80000000))\n
                    goto LABEL_4064fb;\n
                goto LABEL_406f04;\n
            }\n
            v27 += v29;\n
        }\n
        if (!(!(v27 & 0x80000000)))\n
            goto LABEL_406f04;\n
LABEL_4064fb:\n
        cgc_fdprintf(1, \"Hi, %s\\n
\", &v7, v24, a4);\n
        cgc_draw_game(v56, \"Hi, %s\\n
\", v23, v24, a4);\n
        v30 = &v9;\n
        v3 = v56;\n
        while (true)\n
        {\n
            cgc_fdprintf(1, \"%d \", *((v56 + 392)), v24, a4);\n
            cgc_fdprintf(1, \"B >\", v23, v24, a4);\n
            cgc_memset(v62, 0, 0x8);\n
            v4 = 0;\n
            v31 = 0;\n
            while (true)\n
            {\n
                v32 = &v8;\n
                if (cgc_receive(v62, 0, 8, v24))\n
                    break;\n
                v33 = v4;\n
                if (!v33)\n
                    break;\n
                if (*(v32) == 10)\n
                {\n
                    *(v32) = 0;\n
                    break;\n
                }\n
                else\n
                {\n
                    v31 += v33;\n
                    if (v31 >= 8)\n
                        break;\n
                }\n
            }\n
            v9 = 0;\n
            v4 = 0;\n
            if (!cgc_strncmp(\"pass\", v62, cgc_strlen(\"pass\")))\n
                break;\n
            v34 = cgc_strtol(v62, &v4, 10);\n
            v25 = v4;\n
            if (v25 != v62 && v25 < v30)\n
            {\n
                v35 = v34;\n
                if (!v25)\n
                {\n
                    v25 = 0;\n
                }\n
                else\n
                {\n
                    *(&v34) = *(v25);\n
                    if (*(v25))\n
                    {\n
                        do\n
                        {\n
                            v36 = cgc_isdigit(v34);\n
                            v24 = v4;\n
                            if (v36)\n
                            {\n
                                v25 = v24;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v25 = &v24->field_0 + 1;\n
                                v4 = v25;\n
                                if (v25 >= v30)\n
                                    break;\n
                                continue;\n
                            }\n
                            v34 = *(&v24->field_0 + 1);\n
                        } while (v34);\n
                    }\n
                }\n
                v23 = 10;\n
                v37 = cgc_strtol(v25, NULL, 10);\n
                if (v35 <= 18 && v37 >= 0 && v37 < 19)\n
                {\n
                    v56->field_190 = 0;\n
                    v24 = v37 * 9;\n
                    v38 = v37 + 2 * v24;\n
                    if (*((v35 + &(&v56->field_0)[v38])) == 3)\n
                    {\n
                        v39 = cgc_calloc(1, 416);\n
                        if (!v39)\n
                            goto LABEL_406474;\n
                        v40 = v39;\n
                        cgc_memcpy(v39, v56, 0x1a0);\n
                        *((v35 + &(&v39->field_0)[v38])) = 1;\n
                        v41 = cgc_calloc(1, 416);\n
                        if (!v41)\n
                            goto LABEL_406474;\n
                        cgc_memcpy(v41, v40, 0x1a0);\n
                        v42 = 0;\n
                        v43 = v41;\n
                        v5 = v40;\n
                        v2 = 0;\n
                        do\n
                        {\n
                            v44 = 0;\n
                            do\n
                            {\n
                                cgc_memset(v62, 0, 0x169);\n
                                if (*((v43 + v44)) == 2 && !cgc_has_liberty(v41, v62, v44, v42, 2))\n
                                {\n
                                    v2 += 1;\n
                                    (&v40->field_0)[v44] = 3;\n
                                }\n
                                v44 += 1;\n
                            } while (v44 != 19);\n
                            v46 = &v40->padding_1[18];\n
                            v47 = v43 + 19;\n
                        } while (v42 + 1 != 19);\n
                        cgc_free(v41);\n
                        v48 = cgc_calloc(1, 416);\n
                        if (!v48)\n
                            goto LABEL_406474;\n
                        v49 = v5;\n
                        cgc_memcpy(v48, v49, 0x1a0);\n
                        v50 = 0;\n
                        v51 = v48;\n
                        v1 = 0;\n
                        do\n
                        {\n
                            v52 = 0;\n
                            do\n
                            {\n
                                cgc_memset(&v8, 0, 0x169);\n
                                if (*((v51 + v52)) == 1)\n
                                {\n
                                    a4 = 1;\n
                                    if (!cgc_has_liberty(v48, &v8, v52, v50, 1))\n
                                    {\n
                                        v1 += 1;\n
                                        (&v49->field_0)[v52] = 3;\n
                                    }\n
                                }\n
                                v52 += 1;\n
                            } while (v52 != 19);\n
                            v54 = &v49->padding_1[18];\n
                            v55 = v51 + 19;\n
                        } while (v50 + 1 != 19);\n
                        cgc_free(v48);\n
                        v61 = &prng_s.field_-ffffffffffbf6818;\n
                        v23 = 0;\n
                        v60 = 0;\n
                        v62 = &v8;\n
                        v56 = v3;\n
                        v57 = &v9;\n
                        v58 = v5;\n
                        do\n
                        {\n
                            v59 = *((v58 + v23));\n
                            if (v59 != 3)\n
                                v60 ^= *((v61 + v59 * 8));\n
                            v23 += 1;\n
                            v61 += 16;\n
                        } while (v23 != 361);\n
                        v24 = *((v56 + 408));\n
                        while (*(v24) != v60)\n
                        {\n
                            v23 = *((v24 + 8));\n
                            tmp_2 = v24;\n
                            v24 = v23;\n
                            if (v23 == tmp_2)\n
                            {\n
                                cgc_free(v56);\n
                                v6 = v58;\n
                                *((v58 + 380)) = *((v58 + 380)) + 1;\n
                                *((v58 + 372)) = *((v58 + 372)) + v2;\n
                                *((v58 + 376)) = *((v58 + 376)) + v1;\n
                                v63 = &prng_s.field_-ffffffffffbf6818;\n
                                v24 = 0;\n
                                v64 = 0;\n
                                do\n
                                {\n
                                    v23 = *((v58 + v24));\n
                                    if (v23 != 3)\n
                                        v64 ^= *((v63 + v23 * 8));\n
                                    v24 += 1;\n
                                    v63 += 16;\n
                                } while (v24 != 361);\n
                                v65 = *((v58 + 408));\n
                                v66 = cgc_calloc(1, 16);\n
                                if (!v66)\n
                                    goto LABEL_406474;\n
                                v66[1] = v66;\n
                                v66[0] = v64;\n
                                *((v65 + 8)) = v66;\n
                                v56 = v5;\n
                                goto LABEL_406990;\n
                            }\n
                        }\n
                        cgc_free(v58);\n
                    }\n
                }\n
            }\n
        }\n
        v56->field_190 = v56->field_190 + 1;\n
LABEL_406990:\n
        v67 = v56 + 364;\n
        v68 = v56;\n
        v69 = v56 + 368;\n
        *(&v68->field_16c) = *(&v68->field_174);\n
        v3 = v68;\n
        v70 = 0;\n
        do\n
        {\n
            v71 = 0;\n
            do\n
            {\n
                cgc_memset(&v8, 0, 0x169);\n
                v72 = (&v68->field_0)[v71];\n
                v73 = v69;\n
                if (v72 != 2)\n
                {\n
                    v73 = v67;\n
                    if (v72 != 1)\n
                    {\n
                        v74 = v70;\n
                        a4 = 1;\n
                        v73 = v67;\n
                        if (cgc_surrounded_by(v3, &v8, v71, v74, 1) <= 1)\n
                        {\n
                            a4 = 2;\n
                            v73 = v69;\n
                            if (cgc_surrounded_by(v3, &v8, v71, v74, 2) < 2)\n
                                continue;\n
                        }\n
                    }\n
                }\n
                *(v73) = *(v73) + 1;\n
                v71 += 1;\n
            } while (v71 != 19);\n
            v76 = &v68->padding_1[18];\n
        } while (v70 + 1 != 19);\n
        v77 = v3;\n
        cgc_draw_game(v77, 0, v23, v73, a4);\n
        v24 = 2;\n
        v78 = cgc_calculate_move(&v6, &v4, &v0, 0x2);\n
        if (v78 == 2)\n
        {\n
            v77->field_190 = v77->field_190 + 1;\n
            goto LABEL_406dbb;\n
        }\n
    } while (v78 != 1);\n
    v79 = v4;\n
    v80 = v0;\n
    v81 = v80 + v80 * 18;\n
    if (*((v79 + &(&v77->field_0)[v81])) == 3)\n
    {\n
        v82 = cgc_calloc(1, 416);\n
        if (!v82)\n
            goto LABEL_406474;\n
        v83 = v82;\n
        cgc_memcpy(v82, v77, 0x1a0);\n
        *((v79 + &(&v82->field_0)[v81])) = 2;\n
        v84 = cgc_calloc(1, 416);\n
        if (!v84)\n
            goto LABEL_406474;\n
        cgc_memcpy(v84, v83, 0x1a0);\n
        v85 = 0;\n
        v86 = v84;\n
        v5 = v83;\n
        v87 = v83;\n
        v2 = 0;\n
        do\n
        {\n
            v88 = 0;\n
            do\n
            {\n
                cgc_memset(&v8, 0, 0x169);\n
                if ((&v86->field_0)[v88] == 1)\n
                {\n
                    a4 = 1;\n
                    if (!cgc_has_liberty(v84, &v8, v88, v85, 1))\n
                    {\n
                        v2 += 1;\n
                        *((v87 + v88)) = 3;\n
                    }\n
                }\n
                v88 += 1;\n
            } while (v88 != 19);\n
            v90 = v87 + 19;\n
            v91 = &v86->padding_1[18];\n
        } while (v85 + 1 != 19);\n
        cgc_free(v84);\n
        v92 = cgc_calloc(1, 416);\n
        if (!v92)\n
            goto LABEL_406474;\n
        v93 = v5;\n
        cgc_memcpy(v92, v93, 0x1a0);\n
        v94 = 0;\n
        v95 = v92;\n
        v1 = 0;\n
        do\n
        {\n
            v96 = 0;\n
            do\n
            {\n
                cgc_memset(&v8, 0, 0x169);\n
                if (*((v95 + v96)) == 2)\n
                {\n
                    a4 = 2;\n
                    if (!cgc_has_liberty(v92, &v8, v96, v94, 2))\n
                    {\n
                        v1 += 1;\n
                        (&v93->field_0)[v96] = 3;\n
                    }\n
                }\n
                v96 += 1;\n
            } while (v96 != 19);\n
            v98 = &v93->padding_1[18];\n
            v99 = v95 + 19;\n
        } while (v94 + 1 != 19);\n
        cgc_free(v92);\n
        v100 = &prng_s.field_-ffffffffffbf6818;\n
        v101 = 0;\n
        v102 = 0;\n
        v77 = v3;\n
        v103 = v5;\n
        do\n
        {\n
            v104 = *((v103 + v101));\n
            if (v104 != 3)\n
                v102 ^= *((v100 + v104 * 8));\n
            v101 += 1;\n
            v100 += 16;\n
        } while (v101 != 361);\n
        v105 = *((v77 + 408));\n
        do\n
        {\n
            if (*(v105) == v102)\n
            {\n
                cgc_free(v103);\n
                goto LABEL_406d28;\n
            }\n
            tmp_2 = v105;\n
            v105 = *((v105 + 8));\n
        } while (v105 != tmp_2);\n
        cgc_free(v77);\n
        v6 = v103;\n
        *((v103 + 384)) = *((v103 + 384)) + 1;\n
        *((v103 + 376)) = *((v103 + 376)) + v2;\n
        *((v103 + 372)) = *((v103 + 372)) + v1;\n
        v77 = v103;\n
    }\n
LABEL_406d28:\n
    v106 = &prng_s.field_-ffffffffffbf6818;\n
    v24 = 0;\n
    v107 = 0;\n
    do\n
    {\n
        v23 = *((v77 + v24));\n
        if (v23 != 3)\n
            v107 ^= *((v106 + v23 * 8));\n
        v24 += 1;\n
        v106 += 16;\n
    } while (v24 != 361);\n
    v108 = *((v77 + 408));\n
    v109 = cgc_calloc(1, 16);\n
    if (!v109)\n
        goto LABEL_406474;\n
    v109[1] = v109;\n
    v109[0] = v107;\n
    *((v108 + 8)) = v109;\n
LABEL_406dbb:\n
    v110 = v77 + 364;\n
    v111 = v77 + 368;\n
    *((v77 + 364)) = *((v77 + 372));\n
    v3 = v77;\n
    v112 = v77;\n
    v113 = 0;\n
    do\n
    {\n
        v114 = 0;\n
        do\n
        {\n
            cgc_memset(&v8, 0, 0x169);\n
            v115 = (&v112->field_0)[v114];\n
            v24 = v111;\n
            if (v115 != 2)\n
            {\n
                v24 = v110;\n
                if (v115 != 1)\n
                {\n
                    v116 = v113;\n
                    a4 = 1;\n
                    v24 = v110;\n
                    if (cgc_surrounded_by(v3, &v8, v114, v116, 1) <= 1)\n
                    {\n
                        a4 = 2;\n
                        v24 = v111;\n
                        if (cgc_surrounded_by(v3, &v8, v114, v116, 2) < 2)\n
                            continue;\n
                    }\n
                }\n
            }\n
            *(v24) = *(v24) + 1;\n
            v114 += 1;\n
        } while (v114 != 19);\n
        v118 = &v112->padding_1[18];\n
    } while (v113 + 1 != 19);\n
    v56 = v3;\n
    v119 = *((v56 + 392)) + 1;\n
    *((v56 + 392)) = v119;\n
    if (v119 < 151)\n
    {\n
        v120 = &v8;\n
        v121 = &v9;\n
        if (*((v56 + 380)) > 90)\n
        {\n
LABEL_406ed0:\n
            cgc_free(v56);\n
            cgc_fdprintf(1, \"Game Over \", v23, v24, a4);\n
            v122 = \"Stones Exhausted\\n
\";\n
            goto LABEL_406f43;\n
        }\n
        else if (!(*((v56 + 384)) < 91))\n
        {\n
            goto LABEL_406ed0;\n
        }\n
        continue;\n
    }\n
LABEL_406f62:\n
    v123 = (*((v56 + 368)) < *((v56 + 364)) ? \"Loser, \" : \"Winner, \");\n
    cgc_fdprintf(1, v123, v23, v24, a4);\n
    cgc_fdprintf(1, &v7, v23, v24, a4);\n
    cgc__terminate(1);\n
}\n
", "4220347:sub_4065bb": null, "4220699:sub_40671b": null, "4220726:sub_406736": null, "4220902:sub_4067e6": null, "4221030:sub_406866": null, "4221175:sub_4068f7": null, "4221218:sub_406922": null, "4221284:sub_406964": null, "4221306:sub_40697a": null, "4221746:sub_406b32": null, "4221782:sub_406b56": null, "4221865:sub_406ba9": null, "4221885:sub_406bbd": null, "4221960:sub_406c08": null, "4221990:sub_406c26": null, "4222077:sub_406c7d": null, "4222111:sub_406c9f": null, "4222145:sub_406cc1": null, "4222261:sub_406d35": null, "4222306:sub_406d62": null, "4222372:sub_406da4": null, "4222888:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}