{"4202496:_init": "extern struct_0 *g_40b530;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40b530;\n
    if (g_40b530)\n
        v1 = g_40b530();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40b550;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40b550;\n
    goto *(4240728);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4240704);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40b528;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_40b538;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40b540;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40b540)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203076:sub_402244": null, "4203088:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203344:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203406:sub_40238e": null, "4203408:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203633:sub_402471": null, "4203648:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203855:sub_40254f": null, "4203856:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40284c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40284c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204636:sub_40285c": null, "4204640:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10c]\n
    unsigned long long *v3;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x100]\n
    unsigned int *v5;  // [bp-0xf8]\n
    unsigned int v6;  // [bp-0xec]\n
    unsigned int *v7;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0xe0]\n
    unsigned int v9;  // [bp-0xd4]\n
    unsigned int *v10;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v11;  // [bp-0xc8]\n
    unsigned int v12;  // [bp-0xbc]\n
    struct struct_0 **v13;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_1 *v14;  // [bp-0xb0]\n
    unsigned int v15;  // [bp-0xa8]\n
    unsigned int v16;  // [bp-0xa4]\n
    char *v17;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_3 *v18;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v19;  // [bp-0x90]\n
    struct_3 *v20;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned int v21;  // [bp-0x7c]\n
    struct_3 *v22;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x70]\n
    char v24;  // [bp-0x69]\n
    char v25;  // [bp-0x68]\n
    unsigned int v26;  // [bp-0x24]\n
    char *v27;  // [bp-0x18]\n
    unsigned int v28;  // [bp-0xc]\n
    struct_1 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    struct struct_0 **v32;  // rax\n
    struct_1 *v33;  // rcx\n
    struct struct_0 **v34;  // rdx\n
    struct_1 *v35;  // rcx\n
    unsigned long long v36;  // rdx\n
    unsigned int *v37;  // rax\n
    struct_1 *v38;  // rcx\n
    unsigned int *v39;  // rdx\n
    unsigned long long v40;  // rdx\n
    unsigned long long *v41;  // rax\n
    struct_1 *v42;  // rcx\n
    unsigned long long *v43;  // rdx\n
    struct_1 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    struct struct_0 **v46;  // rax\n
    struct_1 *v47;  // rcx\n
    struct struct_0 **v48;  // rdx\n
    struct_1 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned int *v51;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned int *v53;  // rdx\n
\n
    v27 = a0;\n
    v26 = 0;\n
    if (!v27)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (true)\n
    {\n
        if (!*(v27))\n
        {\n
            v28 = v26;\n
            return v28;\n
        }\n
        else if (*(v27) != 64)\n
        {\n
            cgc_putc(*(v27));\n
            v27 += 1;\n
            v26 += 1;\n
        }\n
        else\n
        {\n
            v27 += 1;\n
            v16 = *(v27);\n
            if (!v16)\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            if (v16 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v16 == 99)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v33 = v14;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[1];\n
                    v13 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v14;\n
                    v31 = v15;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v13 = v32;\n
                }\n
                v24 = *(v13);\n
                cgc_putc(v24);\n
            }\n
            else if (v16 == 100)\n
            {\n
                v11 = a1;\n
                v12 = v11->field_0;\n
                if (v12 <= 40)\n
                {\n
                    v35 = v11;\n
                    v36 = v12;\n
                    v37 = v36 + v35->field_10;\n
                    v35->field_0 = v36 + 8;\n
                    v10 = v37;\n
                }\n
                else\n
                {\n
                    v38 = v11;\n
                    v39 = v38->field_8;\n
                    v38->field_8 = &v39[2];\n
                    v10 = v39;\n
                }\n
                v23 = *(v10);\n
                cgc_int_to_str(v23, &v25);\n
                for (v22 = &v25; *(v22); v22 += 1)\n
                {\n
                    cgc_putc(*(v22));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 <= 160)\n
                {\n
                    v40 = v6;\n
                    v41 = v40 + v4->field_10;\n
                    *(v5) = v40 + 16;\n
                    v3 = v41;\n
                }\n
                else\n
                {\n
                    v42 = v4;\n
                    v43 = v42->field_8;\n
                    v42->field_8 = &v43[1];\n
                    v3 = v43;\n
                }\n
                v19 = *(v3);\n
                cgc_float_to_str(&v25);\n
                for (v18 = &v25; *(v18); v18 += 1)\n
                {\n
                    cgc_putc(*(v18));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v47 = v1;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v0 = v48;\n
                }\n
                else\n
                {\n
                    v44 = v1;\n
                    v45 = v2;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v0 = v46;\n
                }\n
                for (v17 = *(v0); *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 120)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 > 40)\n
                {\n
                    v52 = v8;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[2];\n
                    v7 = v53;\n
                }\n
                else\n
                {\n
                    v49 = v8;\n
                    v50 = v9;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v7 = v51;\n
                }\n
                v21 = *(v7);\n
                cgc_int_to_hex(v21, &v25);\n
                for (v20 = &v25; *(v20); v20 += 1)\n
                {\n
                    cgc_putc(*(v20));\n
                    v26 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            v27 += 1;\n
        }\n
    }\n
}\n
", "4205889:sub_402d41": null, "4205904:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4206064:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4206147:sub_402e43": null, "4206160:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206211:sub_402e83": null, "4206224:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206275:sub_402ec3": null, "4206288:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4206331:sub_402efb": null, "4206336:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4206379:sub_402f2b": null, "4206384:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206435:sub_402f63": null, "4206448:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206539:sub_402fcb": null, "4206544:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4206572:sub_402fec": null, "4206576:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4206628:sub_403024": null, "4206640:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_403219;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_403219;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_403219;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_403189:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_403219;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_403189;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_403219:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4207197:sub_40325d": null, "4207200:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4207592:sub_4033e8": null, "4207600:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4207703:sub_403457": null, "4207712:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = v1[a1];\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4207885:sub_40350d": null, "4207888:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4208006:sub_403586": null, "4208016:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 -= 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4208104:sub_4035e8": null, "4208112:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4208230:sub_403666": null, "4208240:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4208449:sub_403741": null, "4208464:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4208547:sub_4037a3": null, "4208560:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v1)\n
        {\n
            if (v0 == a1)\n
                return v2;\n
            v2[a0] = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4208761:sub_403879": null, "4208768:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4208930:sub_403922": null, "4208944:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4209176:sub_403a18": null, "4209184:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x18], Other Possible Types: char\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = 0;\n
    if (!a0)\n
        return v4;\n
    v0 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 < v0)\n
        {\n
            v4 = cgc_transmit(a0, v5, v6, v7);\n
            if (v4)\n
                return v4;\n
            v1 = *(&v2) + v1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 == 1)\n
                    return v4;\n
                v4 = cgc_transmit(a0, v5, v6, v7);\n
                if (v4)\n
                    return v4;\n
            }\n
        }\n
    }\n
}\n
", "4209378:sub_403ae2": null, "4209392:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4209508:sub_403b64": null, "4209520:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4210230:sub_403e36": null, "4210240:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        if (cgc_transmit(a0, a1, v4, v5))\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 = *(&v1) + v0;\n
    }\n
}\n
", "4210394:sub_403eda": null, "4210400:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4210549:sub_403f75": null, "4210560:cgc_calloc": "long long cgc_calloc(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_malloc(a0 * a1);\n
    cgc_memset(*(&v0), 0, a0 * a1);\n
    return *(&v0);\n
}\n
", "4210624:cgc_malloc": "extern char cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    unsigned long v1;  // [bp-0x30]\n
    char v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x10]\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        *(cgc_heap_manager) = 0x1000;\n
        *((cgc_heap_manager + 16)) = 8;\n
        *((cgc_heap_manager + 8)) = 0x1000 - *((cgc_heap_manager + 16));\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(*((cgc_heap_manager + 24)), 0, 0x1000);\n
        v3 = *((cgc_heap_manager + 24));\n
        *(v3) = 4072;\n
        *((v3 + 8)) = 0;\n
    }\n
    v3 = *((cgc_heap_manager + 24));\n
    if (a0 > *(v3))\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (!*((v3 + 8)))\n
        {\n
            cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
            cgc__terminate(\"Not enough space available to allocate more heap.  Failure.\");\n
        }\n
        v3 = *((v3 + 8));\n
        *(v3) = 4072;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        *(v9) = *(v9) - a0;\n
        v1 = v3 + 16;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v1 + 8)) & 1))\n
                v0 = *(v1) < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = v1 + 16 + *(v1);\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = v1 + 16;\n
        return v4;\n
    }\n
}\n
", "4211106:sub_4041a2": null, "4211120:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4211182:sub_4041ee": null, "4211184:cgc_LsHandler": "extern unsigned int cgc_ARGC;\n
extern char cgc_CWD;\n
extern struct_0 *g_40ca18;\n
\n
long long cgc_LsHandler()\n
{\n
    unsigned long v0;  // [bp-0x120]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_ARGC == 1)\n
    {\n
        v2 = cgc_ls(&cgc_CWD);\n
        return v2;\n
    }\n
    else if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(\"usage: show <directory>\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (g_40ca18->field_0 != 47)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        v0 = cgc_strlen(&cgc_CWD);\n
        if (v0 + cgc_strlen(g_40ca18) + 1 > 255)\n
        {\n
            cgc_puts(\"command too long\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_strcpy(&v1, &cgc_CWD);\n
        cgc_strcat(&v1, g_40ca18);\n
        v2 = cgc_ls(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_ls(g_40ca18);\n
        return v2;\n
    }\n
}\n
", "4211492:sub_404324": null, "4211504:cgc_CatHandler": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_CWD;\n
extern struct_0 *g_40ca18;\n
\n
long long cgc_CatHandler()\n
{\n
    unsigned long v0;  // [bp-0x120]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(\"usage: dump <file>\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (g_40ca18->field_0 != 47)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        v0 = cgc_strlen(&cgc_CWD);\n
        if (v0 + cgc_strlen(g_40ca18) + 1 > 255)\n
        {\n
            cgc_puts(\"command too long\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_strcpy(&v1, &cgc_CWD);\n
        cgc_strcat(&v1, g_40ca18);\n
        v2 = cgc_ReadFile(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_ReadFile(g_40ca18);\n
        return v2;\n
    }\n
}\n
", "4211776:cgc_RmHandler": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_CWD;\n
extern struct_0 *g_40ca18;\n
\n
long long cgc_RmHandler()\n
{\n
    unsigned long v0;  // [bp-0x120]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(\"usage: delete <file>\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (g_40ca18->field_0 != 47)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        v0 = cgc_strlen(&cgc_CWD);\n
        if (v0 + cgc_strlen(g_40ca18) + 1 > 255)\n
        {\n
            cgc_puts(\"command too long\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_strcpy(&v1, &cgc_CWD);\n
        cgc_strcat(&v1, g_40ca18);\n
        v2 = cgc_unlink(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_unlink(g_40ca18);\n
        return v2;\n
    }\n
}\n
", "4212048:cgc_MkdirHandler": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_CWD;\n
extern struct_0 *g_40ca18;\n
\n
long long cgc_MkdirHandler()\n
{\n
    unsigned long v0;  // [bp-0x120]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(\"usage: mkfolder <directory>\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (g_40ca18->field_0 != 47)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        v0 = cgc_strlen(&cgc_CWD);\n
        if (v0 + cgc_strlen(g_40ca18) + 1 > 255)\n
        {\n
            cgc_puts(\"command too long\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_strcpy(&v1, &cgc_CWD);\n
        cgc_strcat(&v1, g_40ca18);\n
        v2 = cgc_mkdir(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_mkdir(g_40ca18);\n
        return v2;\n
    }\n
}\n
", "4212320:cgc_RmdirHandler": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_CWD;\n
extern struct_0 *g_40ca18;\n
\n
long long cgc_RmdirHandler()\n
{\n
    unsigned long v0;  // [bp-0x120]\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(\"usage: delfolder <directory>\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (g_40ca18->field_0 != 47)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        v0 = cgc_strlen(&cgc_CWD);\n
        if (v0 + cgc_strlen(g_40ca18) + 1 > 255)\n
        {\n
            cgc_puts(\"command too long\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_strcpy(&v1, &cgc_CWD);\n
        cgc_strcat(&v1, g_40ca18);\n
        v2 = cgc_rmdir(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_rmdir(g_40ca18);\n
        return v2;\n
    }\n
}\n
", "4212592:cgc_ExitHandler": "long long cgc_ExitHandler()\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
    unsigned long long v4;  // r8\n
    unsigned long long v5;  // r9\n
\n
    cgc_puts(\"bye\");\n
    cgc__terminate(\"bye\");\n
    return cgc_EchoHandler(\"bye\", v1, v2, v3, v4, v5);\n
}\n
", "4212624:cgc_EchoHandler": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_CWD;\n
extern unsigned int g_40ca18;\n
extern char *g_40ca20;\n
extern struct_0 *g_40ca28;\n
\n
long long cgc_EchoHandler()\n
{\n
    unsigned long v0;  // [bp-0x230]\n
    unsigned int v1;  // [bp-0x224]\n
    unsigned long long v2;  // [bp-0x220]\n
    char v3;  // [bp-0x218]\n
    char v4;  // [bp-0x118]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    if (cgc_ARGC >= 2 && cgc_ARGC != 3)\n
    {\n
        if (cgc_ARGC == 2)\n
        {\n
            cgc_bzero(&v3, 0x100);\n
            cgc_strncpy(&v3, *(&g_40ca18), 255);\n
            v1 = cgc_Unescape(&v3);\n
            if (v1 == -1)\n
            {\n
                cgc_puts(\"unable to write to file\");\n
                v5 = -1;\n
                return v5;\n
            }\n
            cgc_write(&v3, v1);\n
            v5 = 0;\n
            return v5;\n
        }\n
        else\n
        {\n
            if (cgc_ARGC == 4)\n
            {\n
                cgc_bzero(&v4, 0x100);\n
                if (g_40ca28->field_0 != 47)\n
                {\n
                    v0 = cgc_strlen(&cgc_CWD);\n
                    if (v0 + cgc_strlen(g_40ca28) + 1 > 255)\n
                    {\n
                        cgc_puts(\"command too long\");\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    cgc_strcpy(&v4, &cgc_CWD);\n
                    cgc_strcat(&v4, g_40ca28);\n
                }\n
                else if (cgc_strlen(g_40ca28) <= 255)\n
                {\n
                    cgc_strcpy(&v4, g_40ca28);\n
                }\n
                else\n
                {\n
                    cgc_puts(\"invalid file name\");\n
                    v5 = -1;\n
                    return v5;\n
                }\n
                if (cgc_strcmp(g_40ca20, \">\"))\n
                {\n
                    if (cgc_strcmp(g_40ca20, \">>\"))\n
                    {\n
                        cgc_puts(\"usage: echo <text> [>|>>] [file]\");\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    v2 = cgc_fopen(&v4, \"a\");\n
                    if (!v2)\n
                    {\n
                        cgc_puts(\"unable to write to file\");\n
                        v5 = -1;\n
                        return v5;\n
                    }\n
                    cgc_bzero(&v3, 0x100);\n
                    cgc_strncpy(&v3, *(&g_40ca18), 255);\n
                    v1 = cgc_Unescape(&v3);\n
                    if (v1 == -1)\n
                    {\n
                        cgc_fclose(v2);\n
                        cgc_puts(\"unable to write to file\");\n
                        v5 = -1;\n
                        return v5;\n
                    }\n
                    cgc_fwrite(&v3, v1, 1, v2);\n
                    cgc_fclose(v2);\n
                }\n
                else\n
                {\n
                    v2 = cgc_fopen(&v4, \"w\");\n
                    if (!v2)\n
                    {\n
                        cgc_puts(\"unable to write to file\");\n
                        v5 = -1;\n
                        return v5;\n
                    }\n
                    cgc_bzero(&v3, 0x100);\n
                    cgc_strncpy(&v3, *(&g_40ca18), 255);\n
                    v1 = cgc_Unescape(&v3);\n
                    if (v1 == -1)\n
                    {\n
                        cgc_puts(\"unable to write to file\");\n
                        cgc_fclose(v2);\n
                        v5 = -1;\n
                        return v5;\n
                    }\n
                    cgc_fwrite(&v3, v1, 1, v2);\n
                    cgc_fclose(v2);\n
                }\n
            }\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    cgc_puts(\"usage: echo <text> [>|>>] [file]\");\n
    v5 = 0;\n
    return v5;\n
}\n
", "4213649:sub_404b91": null, "4213664:cgc_DfHandler": "extern unsigned int cgc_ARGC;\n
\n
long long cgc_DfHandler()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (cgc_ARGC == 1)\n
        cgc_StatusFS();\n
    else\n
        cgc_puts(\"usage: fsinfo\");\n
    v0 = 0;\n
    return v0;\n
}\n
", "4213735:sub_404be7": null, "4213744:cgc_HelpHandler": "extern unsigned long long cgc_cmds[3];\n
\n
long long cgc_HelpHandler(unsigned long a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[5];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v3;  // eax\n
\n
    for (*(&v1[0]) = &cgc_cmds[0]; *(&v1[0]); v1 = &v1[1 + 1])\n
    {\n
        cgc_printf(\"@s\", *(&v1[0]), a2, a3, a4);\n
        v0 = 20 - cgc_strlen(*(&v1[0]));\n
        while (true)\n
        {\n
            v3 = v0;\n
            a3 = v3 - 1;\n
            v0 = a3;\n
            if (v3 <= 0)\n
                break;\n
            cgc_printf(\" \", *(&v1[0]), a2, a3, a4);\n
        }\n
        cgc_printf(\"@s\\n
\", *(&v1[4]), a2, a3, a4);\n
    }\n
    return 0;\n
}\n
", "4213910:sub_404c96": null, "4213920:cgc_readUntil": "long long cgc_readUntil(char *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x1e]\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
    char *v7;  // rax\n
    char *v8;  // rax\n
\n
    v3 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (cgc_receive(a0, a1, a2, v6))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        if (*(&v1) != 1)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        if (v2 == a2)\n
            break;\n
        v7 = v3;\n
        v3 = v7 + 1;\n
        *(v7) = v2;\n
    }\n
    v8 = v3;\n
    v3 = v8 + 1;\n
    *(v8) = 0;\n
    v4 = v0;\n
    return v4;\n
}\n
", "4214111:sub_404d5f": null, "4214112:cgc_Unescape": "long long cgc_Unescape(char a0[4])\n
{\n
    char v0;  // [bp-0x31]\n
    char v1[4];  // [bp-0x30], Other Possible Types: unsigned long\n
    char v2[4];  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    for (*(&v2) = a0; v2[0]; v2 = &v2[1])\n
    {\n
        if (v2[0] == 92 && v2[1] == 120 && cgc_IsHex(v2[2]) && cgc_IsHex(v2[3]))\n
        {\n
            v2[0] = cgc_Hex2Char(&v2[2]);\n
            *(&v1) = &v2[1];\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v1[0])\n
                    v0 = v1[3];\n
                if (!(v0 & 1))\n
                    break;\n
                v1[0] = v1[3];\n
                v1 = &v1[1];\n
            }\n
            *(v1) = 0;\n
        }\n
    }\n
    v3 = (v2 - a0);\n
    return v3;\n
}\n
", "4214414:sub_404e8e": null, "4214416:cgc_IsHex": "long long cgc_IsHex(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a0 >= 97 && a0 <= 102)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a0 >= 65 && a0 <= 70)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214552:sub_404f18": null, "4214560:cgc_Hex2Char": "long long cgc_Hex2Char(char a0[2])\n
{\n
    char v0;  // [bp-0x11]\n
\n
    v0 = 0;\n
    if (a0[0] >= 48 && a0[0] <= 57)\n
        v0 += (a0[0] - 48) * 16;\n
    if (a0[0] >= 97 && a0[0] <= 102)\n
        v0 += (a0[0] + -87) * 16;\n
    if (a0[0] >= 65 && a0[0] <= 70)\n
        v0 += (a0[0] + -55) * 16;\n
    if (a0[1] >= 48 && a0[1] <= 57)\n
        v0 += a0[1] - 48;\n
    if (a0[1] >= 97 && a0[1] <= 102)\n
        v0 += a0[1] + -87;\n
    if (a0[1] >= 65 && a0[1] <= 70)\n
        v0 += a0[1] + -55;\n
    return v0;\n
}\n
", "4214914:sub_405082": null, "4214928:cgc_InitFS": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[12];\n
    unsigned long long field_e8;\n
} struct_0;\n
\n
extern char free_list;\n
extern char fs;\n
extern char *g_40b6f8;\n
extern unsigned int g_40c6f4;\n
extern unsigned int g_40c6f8;\n
extern struct_0 *g_40c700;\n
\n
long long cgc_InitFS(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rdx\n
\n
    v1 = a0;\n
    if ((v1 & 4095))\n
    {\n
        v1 -= v1 & 4095;\n
        v1 += 0x1000;\n
    }\n
    if (v1 > 0x100000)\n
    {\n
        cgc_puts(\"Requested filesystem size is too large\\n
\");\n
        v2 = -1;\n
        return v2;\n
    }\n
    else if (!(v1 & 511))\n
    {\n
        cgc_bzero(&fs, 528);\n
        strncpy(&fs, \"SFRC\", 4);\n
        g_40c6f4 = 0x200;\n
        g_40c6f8 = v1;\n
        if (cgc_allocate(&fs, 528, v4))\n
        {\n
            cgc_puts(\"Failed to allocate inode page\\n
\");\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_bzero(g_40c700, 0x1000);\n
        cgc_bzero(&free_list, 0x1000);\n
        if (cgc_allocate(&free_list, 0x1000, v4))\n
        {\n
            cgc_puts(\"Failed to allocate data blocks\\n
\");\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_bzero(g_40b6f8, 0x1000);\n
        v0 = g_40c700;\n
        cgc_strcpy(v0, \"/\");\n
        v0->field_d0 = 2;\n
        v0->field_d4 = 0;\n
        v0->field_d8 = 1;\n
        v0->field_e8 = g_40b6f8;\n
        free_list = 128;\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_puts(\"Requested filesystem size is not an even number of blocks\\n
\");\n
        v2 = -1;\n
        return v2;\n
    }\n
}\n
", "4215381:sub_405255": null, "4215392:cgc_DestroyFS": "extern char free_list;\n
extern char fs;\n
extern unsigned int g_40c6f8;\n
\n
long long cgc_DestroyFS()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
\n
    v1 = g_40c6f8 >> 12;\n
    for (v0 = 0; v0 < v1; v0 += 1)\n
    {\n
        if (*(&(&free_list)[8 + 16 * v0]))\n
            cgc_deallocate(v3, v4);\n
    }\n
    for (v0 = 0; v0 < 64; v0 += 1)\n
    {\n
        if (*(&(&fs)[16 + 8 * v0]))\n
            cgc_deallocate(v3, v4);\n
    }\n
    return 0;\n
}\n
", "4215610:sub_40533a": null, "4215616:cgc_FindInode": "extern char fs;\n
\n
long long cgc_FindInode(char *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (v2 < 64)\n
    {\n
        if (!*(&(&fs)[16 + 8 * v2]))\n
            break;\n
        v0 = *(&(&fs)[16 + 8 * v2]);\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= 16)\n
            {\n
                v2 += 1;\n
                break;\n
            }\n
            if (*((v0 + v1 * 296 + 208)) != 1 && !(*((v0 + v1 * 296 + 208)) == 2))\n
                goto LABEL_405433;\n
            if (!cgc_strcmp(v0 + v1 * 296, a0))\n
            {\n
                v3 = v0 + v1 * 296;\n
                return v3;\n
            }\n
LABEL_405433:\n
            v1 += 1;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4215915:sub_40546b": null, "4215920:cgc_FindDirEntry": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
long long cgc_FindDirEntry(struct_0 *a0, char *a1)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    char *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        if (a0->field_d0 == 2)\n
        {\n
            for (v3 = 0; v3 < 8; v3 += 1)\n
            {\n
                v0 = *(&a0[1].padding_0[20 + 8 * v3]);\n
                if (v0)\n
                {\n
                    for (v2 = 0; v2 < 128; v2 += 1)\n
                    {\n
                        v1 = v0[v2];\n
                        if (v1 && !cgc_strcmp(v1, a1))\n
                        {\n
                            v4 = v1;\n
                            return v4;\n
                        }\n
                    }\n
                }\n
            }\n
            v4 = 0;\n
            return v4;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4216197:sub_405585": null, "4216208:cgc_CheckFileExists": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
long long cgc_CheckFileExists(char *a0, unsigned long long *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40]\n
    struct_0 *v2;  // [bp-0x38]\n
    char *v3;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v3 = a0;\n
    v0 = 1;\n
    if (!a0)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    else if (*(a0) == 47)\n
    {\n
        v2 = cgc_FindInode(\"/\");\n
        if (!v2)\n
        {\n
            cgc_puts(\"failed to root find inode\");\n
            v5 = -1;\n
            return v5;\n
        }\n
        else if (cgc_strcmp(a0, \"/\"))\n
        {\n
            while (true)\n
            {\n
                v4 = cgc_strtok(v3, \"/\");\n
                if (!v4)\n
                    break;\n
                v3 = 0;\n
                v0 = 0;\n
                v1 = cgc_FindDirEntry(v2, v4);\n
                if (v1)\n
                {\n
                    if (v1->field_d0 == 2)\n
                    {\n
                        v2 = v1;\n
                        *(a1) = v1;\n
                        v0 = 2;\n
                    }\n
                    else\n
                    {\n
                        *(a1) = v1;\n
                        v0 = 1;\n
                        break;\n
                    }\n
                }\n
            }\n
            if (v3)\n
                v0 = 0;\n
            v5 = v0;\n
            return v5;\n
        }\n
        else\n
        {\n
            *(a1) = v2;\n
            v5 = 2;\n
            return v5;\n
        }\n
    }\n
    else\n
    {\n
        cgc_puts(\"invalid filename\");\n
        v5 = -1;\n
        return v5;\n
    }\n
}\n
", "4216591:sub_40570f": null, "4216592:cgc_FindFreeInode": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
extern char fs;\n
\n
long long cgc_FindFreeInode()\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // rdx\n
\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= 64)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v1 = *(&(&fs)[16 + 8 * v3]);\n
        if (!v1)\n
        {\n
            if (!cgc_allocate(v6, 0x1000, v7))\n
            {\n
                cgc_bzero(*(&(&fs)[16 + 8 * v3]), 0x1000);\n
                v1 = *(&(&fs)[16 + 8 * v3]);\n
            }\n
            else\n
            {\n
                cgc_puts(\"Failed to allocate inode page\\n
\");\n
                v4 = 0;\n
                return v4;\n
            }\n
        }\n
        for (v2 = 0; v2 < 16; v2 += 1)\n
        {\n
            v0 = v1 + v2 * 296;\n
            if (!v0->field_d0)\n
            {\n
                v4 = v0;\n
                return v4;\n
            }\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4216887:sub_405837": null, "4216896:cgc_FindFreeDataBlock": "extern char free_list[4];\n
extern unsigned int g_40c6f8;\n
\n
long long cgc_FindFreeDataBlock()\n
{\n
    char v0;  // [bp-0x26]\n
    char v1;  // [bp-0x25]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    char v6;  // [bp-0x8]\n
    unsigned long long v8;  // rbp\n
    unsigned long long v9;  // rdi\n
    unsigned long long v10;  // rdx\n
    char *v11;  // rax\n
\n
    v8 = &v6;\n
    v2 = 7;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 < 0x100)\n
        {\n
            v3 = *(&free_list[8 + 16 * v4]);\n
            if (!v3)\n
            {\n
                if ((v4 << 12) >= g_40c6f8)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                if (cgc_allocate(v9, 0x1000, v10))\n
                {\n
                    cgc_puts(\"Failed to allocate data blocks\\n
\");\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                cgc_bzero(*(&free_list[8 + 16 * v4]), 0x1000);\n
                v3 = *(&free_list[8 + 16 * v4]);\n
            }\n
            if (free_list[16 * v4] == 255)\n
            {\n
                v4 += 1;\n
            }\n
            else\n
            {\n
                v1 = free_list[16 * v4];\n
                while (true)\n
                {\n
                    v0 = 0;\n
                    if ((v1 & 1))\n
                        v0 = v2;\n
                    if (!(v0 & 1))\n
                        break;\n
                    v1 >>= 1;\n
                    v2 -= 1;\n
                }\n
                v11 = &free_list[16 * v4];\n
                *(v11) = *(v11) | (128 >> (v2 & 31));\n
                v5 = *(&free_list[8 + 16 * v4]) + v2 * 0x200;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4217365:sub_405a15": null, "4217376:cgc_SplitPath": "long long cgc_SplitPath(unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a0 && a1 && a2)\n
    {\n
        cgc_strcpy(a1, a0);\n
        for (v0 = cgc_strlen(a1); v0 > 0; v0 -= 1)\n
        {\n
            if (a1[v0] == 47)\n
            {\n
                cgc_strcpy(a2, &a1[v0 + 1]);\n
                a1[v0] = 0;\n
                break;\n
            }\n
        }\n
        if (!v0)\n
        {\n
            cgc_strcpy(a2, a0 + 1);\n
            a1[1 + v0] = 0;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4217617:sub_405b11": null, "4217632:cgc_CreateFile": "typedef struct struct_0 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    char padding_d8[16];\n
    struct struct_1 *field_e8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    struct struct_2 *field_e0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
extern unsigned int g_40c6f4;\n
\n
long long cgc_CreateFile(char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x294]\n
    unsigned int v1;  // [bp-0x290]\n
    unsigned int v2;  // [bp-0x288]\n
    unsigned int v3;  // [bp-0x27c]\n
    char v4;  // [bp-0x278]\n
    char v5;  // [bp-0x178]\n
    unsigned long long *v6;  // [bp-0x70]\n
    struct_2 *v7;  // [bp-0x68], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0x60], Other Possible Types: unsigned long\n
    struct_2 *v9;  // [bp-0x58]\n
    struct_0 *v10;  // [bp-0x50]\n
    void* v11;  // [bp-0x48]\n
    unsigned long v12;  // [bp-0x40]\n
    struct_2 *v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x30]\n
    unsigned int v15;  // [bp-0x2c]\n
    unsigned int v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x24]\n
    struct_2 *v18;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v20;  // eax\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    if (a0 && a1)\n
    {\n
        cgc_bzero(&v5, 0x100);\n
        cgc_bzero(&v4, 0x100);\n
        if (cgc_strlen(&v4) > 207)\n
        {\n
            cgc_puts(\"file name too large\");\n
            v18 = 0;\n
            return v18;\n
        }\n
        v17 = cgc_CheckFileExists(a0, &v11);\n
        if (v17 == -1)\n
        {\n
            v18 = 0;\n
            return v18;\n
        }\n
        else if (v17 != 1)\n
        {\n
            cgc_SplitPath(a0, &v5, &v4);\n
            if (cgc_CheckFileExists(&v5, &v10) != 2)\n
            {\n
                cgc_puts(\"directory doesn't exist\");\n
                v18 = 0;\n
                return v18;\n
            }\n
            v15 = (0 CONCAT cgc_strlen(a1)) /m g_40c6f4;\n
            if ((0 CONCAT cgc_strlen(a1)) /m g_40c6f4 >> 64)\n
                v15 += 1;\n
            if (!v15)\n
                v15 = 1;\n
            v14 = v15 >> 3;\n
            if ((v15 & 7))\n
                v14 += 1;\n
            for (v17 = 0; v17 < v14; v17 += 1)\n
            {\n
                v13 = cgc_FindFreeInode();\n
                if (!v13)\n
                {\n
                    cgc_puts(\"out of inodes\");\n
                    v18 = 0;\n
                    return v18;\n
                }\n
                if (!v17)\n
                    v8 = v13;\n
                v13->field_d0 = 1;\n
                v13->field_d4 = cgc_strlen(a1);\n
                v13->field_d8 = v15;\n
                if (v9)\n
                    v9->field_e0 = v13;\n
                v9 = v13;\n
                cgc_strncpy(v13, &v4, 207);\n
            }\n
            v7 = v8;\n
            v16 = 0;\n
            for (v17 = 0; v17 < v15; v16 += 1)\n
            {\n
                v12 = cgc_FindFreeDataBlock();\n
                if (v12)\n
                {\n
                    if (v17)\n
                    {\n
                        v20 = v17;\n
                        if (!(v20 >> 31 CONCAT v20) /m 8 >> 32)\n
                        {\n
                            v7 = v7->field_e0;\n
                            v16 = 0;\n
                        }\n
                    }\n
                    *((v7 + v16 * 8 + 232)) = v12;\n
                    v3 = cgc_strlen(a1 + v17 * 0x200);\n
                    *(&v1) = v12;\n
                    *(&v2) = a1 + v17 * 0x200;\n
                    if (v3 > 0x200)\n
                        v0 = 0x200;\n
                    else\n
                        v0 = v3;\n
                    cgc_memcpy(*(&v1), *(&v2), v0);\n
                    v17 += 1;\n
                }\n
                else\n
                {\n
                    cgc_puts(\"out of space\");\n
                    while (v7)\n
                    {\n
                        v9 = v7;\n
                        v7 = *((v7 + 224));\n
                        cgc_bzero(v9, 296);\n
                    }\n
                    v18 = 0;\n
                    return v18;\n
                }\n
            }\n
            v6 = &v10->field_e8->field_0;\n
            for (v17 = 0; v17 < 128; v17 += 1)\n
            {\n
                if (!v6[v17])\n
                {\n
                    v6[v17] = v8;\n
                    if ((v17 + 1 << 2) > v10->field_d4)\n
                        v10->field_d4 = (v17 + 1) * 4;\n
                    break;\n
                }\n
            }\n
            if (v17 != 128)\n
            {\n
                cgc_puts(\"file created\");\n
                v18 = v8;\n
                return v18;\n
            }\n
            v7 = v8;\n
            while (v7)\n
            {\n
                v9 = v7;\n
                v7 = *((v7 + 224));\n
                for (v16 = 0; v16 < 8; v16 += 1)\n
                {\n
                    cgc_FreeDataBlock(*(&v9[1].padding_0[8 * v16]));\n
                }\n
                cgc_bzero(v9, 296);\n
            }\n
            cgc_puts(\"directory is full\");\n
            v18 = 0;\n
            return v18;\n
        }\n
        else\n
        {\n
            cgc_puts(\"file exists\");\n
            v18 = 0;\n
            return v18;\n
        }\n
    }\n
    v18 = 0;\n
    return v18;\n
}\n
", "4218943:sub_40603f": null, "4218944:cgc_FreeDataBlock": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern char free_list;\n
\n
long long cgc_FreeDataBlock(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0xc]\n
    struct_0 *v5;  // rax\n
\n
    if (!a0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    for (v2 = 0; v2 < 0x100; v2 += 1)\n
    {\n
        v0 = &(&free_list)[16 * v2];\n
        if (a0 >= v0->field_8 && a0 <= v0->field_8 + 0xe00)\n
        {\n
            for (v1 = 0; v1 < 8; v1 += 1)\n
            {\n
                if (a0 == v0->field_8 + (v1 << 9))\n
                {\n
                    v5 = v0;\n
                    v5->field_0 = v5->field_0 ^ (128 >> (v1 & 31));\n
                    cgc_bzero(v0->field_8 + v1 * 0x200, 0x200);\n
                    break;\n
                }\n
            }\n
            if (v1 == 8)\n
            {\n
                cgc_puts(\"unable to free block\");\n
                v3 = 1;\n
                return v3;\n
            }\n
            break;\n
        }\n
    }\n
    if (v2 != 0x100)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_puts(\"unable to free block\");\n
    v3 = 1;\n
    return v3;\n
}\n
", "4219304:sub_4061a8": null, "4219312:cgc_ReadFile": "typedef struct struct_0 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
extern unsigned int g_409584;\n
\n
long long cgc_ReadFile(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x250]\n
    unsigned long long v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // eax\n
\n
    v2 = 0;\n
    v4 = cgc_CheckFileExists(a0, &v2);\n
    if (v4 == -1)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    if (!v4)\n
    {\n
        cgc_puts(\"file doesn't exist\");\n
        v5 = 1;\n
        return v5;\n
    }\n
    if (v4 == 2)\n
    {\n
        cgc_puts(\"file is a directory\");\n
        v5 = 1;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v0 = v2->field_d4;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 < *((v2 + 216)))\n
        {\n
            if (v4)\n
            {\n
                v7 = v4;\n
                if (!(v7 >> 31 CONCAT v7) /m 8 >> 32)\n
                {\n
                    v2 = *((v2 + 224));\n
                    if (!v2)\n
                    {\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    v3 = 0;\n
                }\n
            }\n
            v1 = *((v2 + v3 * 8 + 232));\n
            if (!v1)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            if (v0 < 0x200)\n
            {\n
                cgc_write(v1, v0);\n
            }\n
            else\n
            {\n
                cgc_write(v1, 0x200);\n
                v0 -= 0x200;\n
            }\n
            v4 += 1;\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            cgc_puts(&g_409584);\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4219746:sub_406362": null, "4219760:cgc_mkdir": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    struct struct_0 *field_e0;\n
    unsigned long long field_e8;\n
} struct_0;\n
\n
long long cgc_mkdir(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x25c]\n
    char v1;  // [bp-0x258]\n
    char v2;  // [bp-0x158]\n
    unsigned long long *v3;  // [bp-0x50]\n
    unsigned long v4;  // [bp-0x48]\n
    struct_0 *v5;  // [bp-0x40]\n
    struct_0 *v6;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v7;  // [bp-0x30]\n
    unsigned long long v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    cgc_bzero(&v2, 0x100);\n
    cgc_bzero(&v1, 0x100);\n
    v9 = cgc_CheckFileExists(a0, &v8);\n
    if (v9 == -1)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    else if (v9 == 1)\n
    {\n
        cgc_puts(\"file exists\");\n
        v10 = -1;\n
        return v10;\n
    }\n
    else if (v9 != 2)\n
    {\n
        cgc_SplitPath(a0, &v2, &v1);\n
        if (cgc_strlen(&v1) > 207)\n
        {\n
            cgc_puts(\"file name too large\");\n
            v10 = -1;\n
            return v10;\n
        }\n
        else if (cgc_CheckFileExists(&v2, &v7) == 2)\n
        {\n
            v4 = cgc_FindFreeDataBlock();\n
            if (!v4)\n
            {\n
                cgc_puts(\"out of space\");\n
                v10 = -1;\n
                return v10;\n
            }\n
            v6 = cgc_FindFreeInode();\n
            if (!v6)\n
            {\n
                cgc_puts(\"out of inodes\");\n
                v10 = -1;\n
                return v10;\n
            }\n
            v6->field_d0 = 2;\n
            v6->field_d4 = 0;\n
            v6->field_d8 = 1;\n
            v6->field_e0 = 0;\n
            cgc_strncpy(v6, &v1, 207);\n
            v6->field_e8 = v4;\n
            v3 = *((v7 + 232));\n
            for (v9 = 0; v9 < 128; v9 += 1)\n
            {\n
                if (!v3[v9])\n
                {\n
                    v3[v9] = v6;\n
                    if ((v9 + 1 << 2) > *((v7 + 212)))\n
                        *((v7 + 212)) = (v9 + 1) * 4;\n
                    break;\n
                }\n
            }\n
            if (v9 != 128)\n
            {\n
                cgc_puts(\"directory created\");\n
                v10 = 0;\n
                return v10;\n
            }\n
            while (v6)\n
            {\n
                v5 = v6;\n
                v6 = *((v6 + 224));\n
                for (v0 = 0; v0 < 8; v0 += 1)\n
                {\n
                    cgc_FreeDataBlock((&v5->field_e8)[v0]);\n
                }\n
                cgc_bzero(v5, 296);\n
            }\n
            cgc_puts(\"directory is full\");\n
            v10 = -1;\n
            return v10;\n
        }\n
        else\n
        {\n
            cgc_puts(\"parent directory doesn't exist\");\n
            v10 = -1;\n
            return v10;\n
        }\n
    }\n
    else\n
    {\n
        cgc_puts(\"directory exists\");\n
        v10 = -1;\n
        return v10;\n
    }\n
}\n
", "4220578:sub_4066a2": null, "4220592:cgc_rmdir": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
long long cgc_rmdir(char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x258]\n
    struct_0 *v1;  // [bp-0x250], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x244]\n
    unsigned long long *v3;  // [bp-0x240]\n
    char v4;  // [bp-0x238]\n
    char v5;  // [bp-0x138]\n
    unsigned long long v6;  // [bp-0x30]\n
    unsigned long long v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11;  // eax\n
\n
    if (!a0)\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
    cgc_bzero(&v5, 0x100);\n
    cgc_bzero(&v4, 0x100);\n
    v8 = cgc_CheckFileExists(a0, &v7);\n
    if (v8 && v8 != -1)\n
    {\n
        if (*((v7 + 208)) != 2)\n
        {\n
            cgc_puts(\"not a directory\");\n
            v9 = -1;\n
            return v9;\n
        }\n
        else if (!cgc_strcmp(a0, \"/\"))\n
        {\n
            cgc_puts(\"unable to remove /\");\n
            v9 = -1;\n
            return v9;\n
        }\n
        else\n
        {\n
            v3 = *((v7 + 232));\n
            for (v8 = 0; v8 < 128; v8 += 1)\n
            {\n
                if (v3[v8])\n
                {\n
                    cgc_puts(\"directory not empty\");\n
                    v9 = -1;\n
                    return v9;\n
                }\n
            }\n
            cgc_SplitPath(a0, &v5, &v4);\n
            if (cgc_CheckFileExists(&v5, &v6) != 2)\n
            {\n
                cgc_puts(\"parent directory doesn't exist...file system corruption detected\");\n
                v9 = 1;\n
                return v9;\n
            }\n
            v3 = *((v6 + 232));\n
            for (v8 = 0; v8 < 128; v8 += 1)\n
            {\n
                if (v3[v8] == v7)\n
                {\n
                    v3[v8] = 0;\n
                    if ((v8 + 1 << 2) == *((v6 + 212)))\n
                        *((v6 + 212)) = v8 * 4;\n
                    break;\n
                }\n
            }\n
            if (v8 == 128)\n
            {\n
                cgc_puts(\"parent directory doesn't have an entry for this directory...file system corruption detected\");\n
                v9 = 1;\n
                return v9;\n
            }\n
            v2 = 0;\n
            v1 = v7;\n
            for (v8 = 0; v8 < *((v1 + 216)); v2 += 1)\n
            {\n
                if (v8)\n
                {\n
                    v11 = v8;\n
                    if (!(v11 >> 31 CONCAT v11) /m 8 >> 32)\n
                    {\n
                        v0 = *((v1 + 224));\n
                        cgc_bzero(v1, 296);\n
                        v1 = v0;\n
                        v2 = 0;\n
                        if (!v1)\n
                            break;\n
                    }\n
                }\n
                if (*((v1 + (v2 << 3) + 232)))\n
                    cgc_FreeDataBlock(*((v1 + v2 * 8 + 232)));\n
                v8 += 1;\n
            }\n
            cgc_bzero(v7, 296);\n
            cgc_puts(\"directory removed\");\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    cgc_puts(\"directory does not exist\");\n
    v9 = -1;\n
    return v9;\n
}\n
", "4221474:sub_406a22": null, "4221488:cgc_unlink": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
long long cgc_unlink(char *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x250]\n
    char v1;  // [bp-0x248]\n
    char v2;  // [bp-0x148]\n
    struct_0 *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x38]\n
    unsigned long long v5;  // [bp-0x30]\n
    unsigned long long v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11;  // eax\n
\n
    cgc_bzero(&v2, 0x100);\n
    cgc_bzero(&v1, 0x100);\n
    v8 = cgc_CheckFileExists(a0, &v6);\n
    if (v8 == -1)\n
    {\n
        v9 = 1;\n
        return v9;\n
    }\n
    else if (!v8)\n
    {\n
        cgc_puts(\"file doesn't exist\");\n
        v9 = 1;\n
        return v9;\n
    }\n
    else if (v8 != 2)\n
    {\n
        cgc_SplitPath(a0, &v2, &v1);\n
        if (cgc_CheckFileExists(&v2, &v5) != 2)\n
        {\n
            cgc_puts(\"parent directory doesn't exist...file system corruption detected\");\n
            v9 = 1;\n
            return v9;\n
        }\n
        v7 = 0;\n
        v3 = v6;\n
        for (v8 = 0; v8 < v3->field_d8; v7 += 1)\n
        {\n
            if (v8)\n
            {\n
                v11 = v8;\n
                if (!(v11 >> 31 CONCAT v11) /m 8 >> 32)\n
                {\n
                    v4 = v3->field_e0;\n
                    cgc_bzero(v3, 296);\n
                    v3 = v4;\n
                    v7 = 0;\n
                    if (!v3)\n
                        break;\n
                }\n
            }\n
            if (*((v3 + (v7 << 3) + 232)))\n
                cgc_FreeDataBlock(*((v3 + v7 * 8 + 232)));\n
            v8 += 1;\n
        }\n
        v0 = *((v5 + 232));\n
        for (v8 = 0; v8 < 128; v8 += 1)\n
        {\n
            if (v0[v8] == v6)\n
            {\n
                v0[v8] = 0;\n
                if ((v8 + 1 << 2) == *((v5 + 212)))\n
                    *((v5 + 212)) = v8 * 4;\n
                break;\n
            }\n
        }\n
        cgc_bzero(v6, 296);\n
        cgc_puts(\"file removed\");\n
        v9 = 0;\n
        return v9;\n
    }\n
    else\n
    {\n
        cgc_puts(\"file is a directory\");\n
        v9 = 1;\n
        return v9;\n
    }\n
}\n
", "4222125:sub_406cad": null, "4222128:cgc_fopen": "typedef struct struct_1 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    char padding_d8[8];\n
    struct struct_0 *field_e0;\n
    char *field_e8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[224];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
extern unsigned int g_409584;\n
\n
long long cgc_fopen(char *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x50]\n
    struct_0 *v1;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned long long *v3;  // [bp-0x38]\n
    struct_1 *v4;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned long v6;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v8;  // rdx\n
    unsigned int v10;  // eax\n
\n
    v4 = 0;\n
    if (!a0)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v5 = cgc_CheckFileExists(a0, &v4);\n
    if (v5 == -1)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    if (v5)\n
    {\n
        if (v5 == 2)\n
        {\n
            cgc_puts(\"file is a directory\");\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_strcmp(a1, \"w\"))\n
        {\n
            cgc_puts(\"file doesn't exist\");\n
            v6 = 0;\n
            return v6;\n
        }\n
        a1 = &g_409584;\n
        v4 = cgc_CreateFile(a0, 4232580);\n
        if (!v4)\n
        {\n
            cgc_puts(\"file creation failed\\n
\");\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    if (cgc_allocate(a0, a1, v8))\n
    {\n
        cgc_puts(\"Failed to allocate FILE struct\\n
\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    cgc_bzero(v3, 32);\n
    *(v3) = v4;\n
    if (!cgc_strcmp(a1, \"r\"))\n
    {\n
        *(&v3[1]) = 0;\n
        *((&v3[1] + 4)) = 0;\n
        v3[2] = v4;\n
    }\n
    else if (!cgc_strcmp(a1, \"w\"))\n
    {\n
        for (v5 = 1; v5 < 8; v5 += 1)\n
        {\n
            cgc_FreeDataBlock(*((v4 + v5 * 8 + 232)));\n
            *((v4 + v5 * 8 + 232)) = 0;\n
        }\n
        for (v1 = *((v4 + 224)); v1; v1 = v0)\n
        {\n
            for (v5 = 0; v5 < 8; v5 += 1)\n
            {\n
                cgc_FreeDataBlock(*(&v1[1].padding_0[8 * v5]));\n
                *(&v1[1].padding_0[8 * v5]) = 0;\n
            }\n
            v0 = v1->field_e0;\n
            cgc_bzero(v1, 296);\n
        }\n
        cgc_bzero(*((v4 + 232)), 0x200);\n
        *((v4 + 212)) = 0;\n
        *(&v3[1]) = 0;\n
        *((&v3[1] + 4)) = 1;\n
        v3[2] = v4;\n
    }\n
    else\n
    {\n
        if (cgc_strcmp(a1, \"a\"))\n
        {\n
            cgc_deallocate(a0, \"a\");\n
            v6 = 0;\n
            return v6;\n
        }\n
        *(&v3[1]) = *((v4 + 212));\n
        *((&v3[1] + 4)) = 2;\n
        v3[2] = v4;\n
        v2 = *((v4 + 212)) >> 12;\n
        *(&v3[3]) = (*((v4 + 212)) & 4095) >> 9;\n
        *((&v3[3] + 4)) = *((v4 + 212)) & 4095 & 511;\n
        while (true)\n
        {\n
            v10 = v2;\n
            v2 = v10 - 1;\n
            if (!v10)\n
                break;\n
            v3[2] = *((v3[2] + 224));\n
        }\n
    }\n
    v6 = v3;\n
    return v6;\n
}\n
", "4223079:sub_407067": null, "4223088:cgc_fread": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_0 *field_10;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[224];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
} struct_1;\n
\n
long long cgc_fread(char *a0, unsigned long a1, unsigned long a2, struct_2 *a3)\n
{\n
    char v0;  // [bp-0x59]\n
    struct_0 *v1;  // [bp-0x50], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    struct_2 *v6;  // [bp-0x30]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v9;  // eax\n
    unsigned int v11;  // eax\n
    unsigned long v13;  // rcx\n
    struct_2 *v14;  // rax\n
\n
    v6 = a3;\n
    if (a0 && v6)\n
    {\n
        if (!v6->field_c && v6->field_0)\n
        {\n
            v1 = v6->field_10;\n
            v4 = v6->field_18;\n
            v2 = *(&v1[1].padding_0[8 * v4]);\n
            v3 = v6->field_1c;\n
            v5 = 0;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5 < a2 * a1)\n
                    v0 = v6->field_8 < v6->field_0->field_d4;\n
                if (!(v0 & 1))\n
                {\n
                    v6->field_10 = v1;\n
                    v6->field_18 = v4;\n
                    v6->field_1c = v3;\n
                    v7 = v5;\n
                    return v7;\n
                }\n
                if (v3)\n
                {\n
                    v9 = v3;\n
                    if (!(v9 >> 31 CONCAT v9) /m 0x200 >> 32)\n
                    {\n
                        if (v4)\n
                        {\n
                            v11 = v4;\n
                            if (!(v11 >> 31 CONCAT v11) /m 8 >> 32)\n
                            {\n
                                v1 = *((v1 + 224));\n
                                if (!v1)\n
                                {\n
                                    v6->field_10 = v1;\n
                                    v6->field_18 = v4;\n
                                    v6->field_1c = v3;\n
                                    v7 = v5;\n
                                    return v7;\n
                                }\n
                                v4 = -1;\n
                            }\n
                        }\n
                        v4 += 1;\n
                        v2 = *((v1 + v4 * 8 + 232));\n
                        if (!v2)\n
                        {\n
                            v6->field_10 = v1;\n
                            v6->field_18 = v4;\n
                            v6->field_1c = v3;\n
                            v7 = v5;\n
                            return v7;\n
                        }\n
                        v3 = 0;\n
                    }\n
                }\n
                v13 = v3;\n
                v3 = v13 + 1;\n
                a0[v5] = *((v2 + v13));\n
                v14 = v6;\n
                v14->field_8 = v14->field_8 + 1;\n
                v5 += 1;\n
            }\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4223651:sub_4072a3": null, "4223664:cgc_fwrite": "typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_0 *field_10;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[224];\n
    struct struct_0 *field_e0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    unsigned long long field_e0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
} struct_2;\n
\n
long long cgc_fwrite(char *a0, unsigned long a1, unsigned long a2, struct_1 *a3)\n
{\n
    char *v0;  // [bp-0x68], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    struct_0 *v3;  // [bp-0x58]\n
    struct_0 *v4;  // [bp-0x50], Other Possible Types: unsigned long\n
    struct_3 *v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x34]\n
    struct_1 *v7;  // [bp-0x30]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v14[55];  // rax\n
    unsigned long v15;  // rcx\n
    unsigned int v16[55];  // rax\n
    struct_1 *v17;  // rax\n
\n
    v7 = a3;\n
    if (a0 && v7)\n
    {\n
        if (v7->field_c != 1 && v7->field_c != 2)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        v4 = v7->field_10;\n
        v2 = v7->field_18;\n
        v0 = *(&v4[1].padding_0[8 * v2]);\n
        if (!v0)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        v1 = v7->field_1c;\n
        v6 = 0;\n
        while (true)\n
        {\n
            if (v6 < a2 * a1)\n
            {\n
                if (v1)\n
                {\n
                    v10 = v1;\n
                    if (!(v10 >> 31 CONCAT v10) /m 0x200 >> 32)\n
                    {\n
                        v2 += 1;\n
                        if (v2)\n
                        {\n
                            v12 = v2;\n
                            if (!(v12 >> 31 CONCAT v12) /m 8 >> 32)\n
                            {\n
                                if (v4->field_e0)\n
                                {\n
                                    v7->field_10 = v4;\n
                                    v7->field_18 = v2;\n
                                    v7->field_1c = v1;\n
                                    v8 = v6;\n
                                    return v8;\n
                                }\n
                                v5 = cgc_FindFreeInode();\n
                                if (!v5)\n
                                {\n
                                    cgc_puts(\"out of inodes\");\n
                                    v8 = 0;\n
                                    return v8;\n
                                }\n
                                v5->field_d0 = v7->field_0->field_d0;\n
                                v5->field_d4 = v7->field_0->field_d4;\n
                                v5->field_d8 = v7->field_0->field_d8;\n
                                v5->field_e0 = 0;\n
                                cgc_strncpy(v5, v7->field_0, 207);\n
                                v4->field_e0 = &v5->padding_0;\n
                                v2 = 0;\n
                            }\n
                        }\n
                        v0 = cgc_FindFreeDataBlock();\n
                        if (v0)\n
                        {\n
                            *(&v4[1].padding_0[8 * v2]) = v0;\n
                            v1 = 0;\n
                            v14 = v7->field_0;\n
                            v14[54] = v14[54] + 1;\n
                        }\n
                        else\n
                        {\n
                            cgc_puts(\"out of space\");\n
                            v7->field_10 = v4;\n
                            v7->field_18 = v2;\n
                            v7->field_1c = v1;\n
                            while (v4)\n
                            {\n
                                v3 = v4;\n
                                v4 = *((v4 + 224));\n
                                cgc_bzero(v3, 296);\n
                            }\n
                            v8 = v6;\n
                            return v8;\n
                        }\n
                    }\n
                }\n
                v15 = v1;\n
                v1 = v15 + 1;\n
                *((v0 + v15)) = a0[v6];\n
                v16 = v7->field_0;\n
                v16[53] = v16[53] + 1;\n
                v17 = v7;\n
                v17->field_8 = v17->field_8 + 1;\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                v7->field_10 = v4;\n
                v7->field_18 = v2;\n
                v7->field_1c = v1;\n
                v8 = v6;\n
                return v8;\n
            }\n
        }\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4224489:sub_4075e9": null, "4224496:cgc_fclose": "long long cgc_fclose(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
\n
    if (!a0)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    cgc_deallocate(a0, v2);\n
    v0 = 0;\n
    return v0;\n
}\n
", "4224561:sub_407631": null, "4224576:cgc_StatusFS": "extern char free_list[4];\n
extern char fs;\n
extern unsigned int g_40c6f4;\n
extern unsigned int g_40c6f8;\n
\n
long long cgc_StatusFS(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_printf(\"Filesystem info:\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"  Blocksize: @d\\n
\", g_40c6f4, a2, a3, a4);\n
    for (v5 = 0; v5 < 64; v5 += 1)\n
    {\n
        a3 = v5;\n
        if (!*(&(&fs)[16 + 8 * a3]))\n
            break;\n
        a3 = v5;\n
        v0 = *(&(&fs)[16 + 8 * a3]);\n
        for (v4 = 0; v4 < 16; v4 += 1)\n
        {\n
            a3 = v4 * 296;\n
            if (*((v0 + a3 + 208)))\n
                v3 += 1;\n
        }\n
    }\n
    cgc_printf(\"  Used Inodes: @d/@d\\n
\", v3, 0x400, a3, a4);\n
    for (v5 = 0; v5 < 0x100; v5 += 1)\n
    {\n
        a3 = v5 * 16;\n
        if (!*(&free_list[8 + a3]))\n
            break;\n
        v1 += 1;\n
        for (v4 = 0; v4 < 8; v4 += 1)\n
        {\n
            a3 = v4;\n
            if (((free_list[16 * v5] >> (a3 & 31)) & 1))\n
                v2 += 1;\n
        }\n
    }\n
    cgc_printf(\"  Used Blocks: @d/@d\\n
\", v2, g_40c6f8 >> 9, a3, a4);\n
    return 0;\n
}\n
", "4225020:sub_4077fc": null, "4225024:cgc_ls": "long long cgc_ls(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    struct struct_0 **v2;  // [bp-0x38]\n
    unsigned long long v3;  // [bp-0x30]\n
    unsigned int v4[54];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned long v9;  // rcx\n
\n
    if (!a0)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v5 = cgc_CheckFileExists(a0, &v3);\n
    if (!v5)\n
    {\n
        cgc_puts(\"No such directory\");\n
        v6 = -1;\n
        return v6;\n
    }\n
    else if (v5 == 1)\n
    {\n
        cgc_puts(\"File is not a directory\");\n
        v6 = -1;\n
        return v6;\n
    }\n
    else if (v5 != -1)\n
    {\n
        v2 = *((v3 + 232));\n
        if (!v2)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        cgc_printf(\"Directory listing of @s\\n
\", a0, a2, a3, a4);\n
        v5 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v5 < 128)\n
            {\n
                a3 = v5;\n
                *(&v4[0]) = v2[a3];\n
                v0 = v4;\n
            }\n
            if (!(v0 & 1))\n
                break;\n
            if (v4[52] == 2)\n
                cgc_printf(\"d \", a1, a2, a3, a4);\n
            else\n
                cgc_printf(\"  \", a1, a2, a3, a4);\n
            cgc_printf(\"@s\", v4, a2, a3, a4);\n
            v1 = cgc_strlen(v4);\n
            v1 = 50 - v1;\n
            while (true)\n
            {\n
                v8 = v1;\n
                v9 = v8 - 1;\n
                v1 = v9;\n
                if (v8 <= 0)\n
                    break;\n
                cgc_printf(\" \", a1, a2, v9, a4);\n
            }\n
            cgc_printf(\" @d\\n
\", v4[53], a2, v9, a4);\n
            v5 += 1;\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
}\n
", "4225482:sub_4079ca": null, "4225488:cgc_FreeArgs": "extern struct_0 cgc_ARGV;\n
\n
long long cgc_FreeArgs()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
\n
    for (v1 = 0; *(&(&cgc_ARGV.field_0)[2 * v1]); v1 += 1)\n
    {\n
        v0 = *(&(&cgc_ARGV.field_0)[2 * v1]);\n
        cgc_strlen(*(&(&cgc_ARGV.field_0)[2 * v1]));\n
        cgc_deallocate(v3, v4);\n
        *(&(&cgc_ARGV.field_0)[2 * v1]) = 0;\n
    }\n
    return 0;\n
}\n
", "4225617:sub_407a51": null, "4225632:cgc_ParseArgs": "extern unsigned int cgc_ARGC;\n
extern unsigned int cgc_ARGV;\n
\n
long long cgc_ParseArgs(char *a0)\n
{\n
    char *v0;  // [bp-0x80]\n
    char *v1;  // [bp-0x78]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned long v3;  // [bp-0x68]\n
    unsigned long v4;  // [bp-0x60]\n
    char *v5;  // [bp-0x58]\n
    unsigned long v6;  // [bp-0x50]\n
    unsigned long v7;  // [bp-0x48]\n
    char *v8;  // [bp-0x40]\n
    char v9;  // [bp-0x31]\n
    unsigned int v10;  // [bp-0x30]\n
    unsigned int v11;  // [bp-0x2c]\n
    char v12;  // [bp-0x28]\n
    char *v13;  // [bp-0x20]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned long long v16;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v17;  // rax\n
    unsigned long v19;  // rax\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rax\n
    unsigned long v23;  // rcx\n
\n
    v10 = 0;\n
    cgc_bzero(&cgc_ARGV, 80);\n
    cgc_ARGC = 0;\n
    v13 = cgc_strtok(a0, \" \");\n
    if (!v13)\n
    {\n
        cgc_ARGC = 0;\n
        v14 = 0;\n
        return v14;\n
    }\n
    v16 = cgc_strdup(v13);\n
    v17 = cgc_ARGC;\n
    cgc_ARGC = cgc_ARGC + 1;\n
    *(&(&cgc_ARGV)[2 * v17]) = v16;\n
    while (true)\n
    {\n
        v13 = cgc_strtok(NULL, \" \");\n
        v9 = 0;\n
        if (v13)\n
            v9 = cgc_ARGC < 9;\n
        if (!(v9 & 1))\n
            break;\n
        if (v10)\n
        {\n
            v8 = v13;\n
            if (v8[1 + cgc_strlen(v13)] == 34)\n
            {\n
                v7 = cgc_strlen(*(&(&cgc_ARGV)[2 * cgc_ARGC]));\n
                v11 = v7 + cgc_strlen(v13) + 1;\n
                if (cgc_allocate(a0, \" \", v16, v23))\n
                {\n
                    cgc_FreeArgs();\n
                    cgc_ARGC = 0;\n
                    v14 = 0;\n
                    return v14;\n
                }\n
                cgc_strcpy(*(&v12), *(&(&cgc_ARGV)[2 * cgc_ARGC]) + 1);\n
                cgc_strcat(*(&v12), \" \");\n
                v5 = v13;\n
                v5[1 + cgc_strlen(v13)] = 0;\n
                cgc_strcat(*(&v12), v13);\n
                v6 = *(&(&cgc_ARGV)[2 * cgc_ARGC]);\n
                cgc_strlen(*(&(&cgc_ARGV)[2 * cgc_ARGC]));\n
                cgc_deallocate(a0, v21);\n
                v22 = cgc_ARGC;\n
                cgc_ARGC = cgc_ARGC + 1;\n
                *(&(&cgc_ARGV)[2 * v22]) = *(&v12);\n
                v10 = 0;\n
                goto LABEL_407eb0;\n
            }\n
        }\n
        if (!v10)\n
        {\n
            v2 = *(v13) == 34;\n
            v1 = v13;\n
            if ((v2 & v1[1 + cgc_strlen(v13)] == 34))\n
            {\n
                v0 = v13;\n
                v0[1 + cgc_strlen(v13)] = 0;\n
                v16 = cgc_strdup(v13 + 1);\n
                v19 = cgc_ARGC;\n
                cgc_ARGC = cgc_ARGC + 1;\n
                *(&(&cgc_ARGV)[2 * v19]) = v16;\n
            }\n
            else if (*(v13) != 34)\n
            {\n
                v16 = cgc_strdup(v13);\n
                v20 = cgc_ARGC;\n
                cgc_ARGC = cgc_ARGC + 1;\n
                *(&(&cgc_ARGV)[2 * v20]) = v16;\n
            }\n
            else\n
            {\n
                v10 = 1;\n
                *(&(&cgc_ARGV)[2 * cgc_ARGC]) = cgc_strdup(v13);\n
            }\n
        }\n
        else\n
        {\n
            v4 = cgc_strlen(*(&(&cgc_ARGV)[2 * cgc_ARGC]));\n
            v11 = v4 + cgc_strlen(v13) + 2;\n
            if (cgc_allocate(a0, \" \", v16, v23))\n
            {\n
                cgc_FreeArgs();\n
                cgc_ARGC = 0;\n
                v14 = 0;\n
                return v14;\n
            }\n
            cgc_strcpy(*(&v12), *(&(&cgc_ARGV)[2 * cgc_ARGC]));\n
            cgc_strcat(*(&v12), \" \");\n
            cgc_strcat(*(&v12), v13);\n
            v3 = *(&(&cgc_ARGV)[2 * cgc_ARGC]);\n
            cgc_strlen(*(&(&cgc_ARGV)[2 * cgc_ARGC]));\n
            cgc_deallocate(a0, v21);\n
            *(&(&cgc_ARGV)[2 * cgc_ARGC]) = *(&v12);\n
        }\n
LABEL_407eb0:\n
    }\n
    if (v10)\n
    {\n
        cgc_puts(\"missing quote\");\n
        cgc_FreeArgs();\n
        cgc_ARGC = 0;\n
        v14 = 0;\n
        return v14;\n
    }\n
    else if (cgc_ARGC == 9)\n
    {\n
        cgc_puts(\"too many args\");\n
        cgc_FreeArgs();\n
        cgc_ARGC = 0;\n
        v14 = 0;\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_ARGC;\n
        return v14;\n
    }\n
}\n
", "4226868:sub_407f34": null, "4226880:main": "typedef struct struct_2 {\n
    char *field_0;\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_ARGC;\n
extern char *cgc_ARGV;\n
extern char cgc_CWD;\n
extern struct_1 cgc_cmds;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_2 *v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x118]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v4 = 0;\n
    v3 = a0;\n
    v2 = a1;\n
    cgc_bzero(&cgc_CWD, 0x100);\n
    cgc_strcpy(&cgc_CWD, \"/\");\n
    if (cgc_InitFS(0x80000))\n
    {\n
        cgc_puts(\"Failed to initialize the RAM file system\\n
\");\n
        v4 = -1;\n
        return v4;\n
    }\n
    cgc_puts(\"Welcome to the cgcfs shell!\");\n
    cgc_puts(\"Type help for a list of available commands.\");\n
    cgc_printf(\"% \", \"/\", a2, a3, a4);\n
    cgc_bzero(&v1, 0x100);\n
    while (cgc_readUntil(&v1, 255, 10) != -1)\n
    {\n
        cgc_ParseArgs(&v1);\n
        if (!cgc_ARGC)\n
        {\n
            cgc_FreeArgs();\n
            cgc_bzero(&v1, 0x100);\n
            cgc_printf(\"% \", 0x100, 10, a3, a4);\n
        }\n
        else\n
        {\n
            if (cgc_ARGV)\n
            {\n
                for (v0 = &cgc_cmds.field_0; *(v0); v0 += 24)\n
                {\n
                    if (!cgc_strcmp(*(v0), cgc_ARGV))\n
                    {\n
                        *((v0 + 8))();\n
                        break;\n
                    }\n
                }\n
            }\n
            if (!v0)\n
                cgc_puts(\"Invalid command\");\n
            if (!*(v0))\n
                cgc_puts(\"Invalid command\");\n
            cgc_FreeArgs();\n
            cgc_bzero(&v1, 0x100);\n
            cgc_printf(\"% \", 0x100, 10, a3, a4);\n
        }\n
    }\n
    if (!cgc_DestroyFS())\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_puts(\"Failed to destroy the RAM file system\\n
\");\n
    v4 = -1;\n
    return v4;\n
}\n
", "4227412:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_deallocate": null, "5242936:cgc_log10": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}