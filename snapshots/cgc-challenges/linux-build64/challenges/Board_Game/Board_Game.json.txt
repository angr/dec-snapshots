{"4202496:_init": "extern struct_0 *g_407d90;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407d90;\n
    if (g_407d90)\n
        v1 = g_407d90();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407db0;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407db0;\n
    goto *(4226488);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4226464);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407d88;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_407d98;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407da0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407da0)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203076:sub_402244": null, "4203088:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203344:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203406:sub_40238e": null, "4203408:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203633:sub_402471": null, "4203648:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v4 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203855:sub_40254f": null, "4203856:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40284c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40284c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204636:sub_40285c": null, "4204640:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10c]\n
    unsigned long long *v3;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x100]\n
    unsigned int *v5;  // [bp-0xf8]\n
    unsigned int v6;  // [bp-0xec]\n
    struct struct_0 **v7;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0xe0]\n
    unsigned int v9;  // [bp-0xd4]\n
    unsigned int *v10;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v11;  // [bp-0xc8]\n
    unsigned int v12;  // [bp-0xbc]\n
    unsigned int *v13;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_1 *v14;  // [bp-0xb0]\n
    unsigned int v15;  // [bp-0xa8]\n
    unsigned int v16;  // [bp-0xa4]\n
    char *v17;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_3 *v18;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v19;  // [bp-0x90]\n
    struct_3 *v20;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned int v21;  // [bp-0x7c]\n
    struct_3 *v22;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x70]\n
    char v24;  // [bp-0x69]\n
    char v25;  // [bp-0x68]\n
    unsigned int v26;  // [bp-0x24]\n
    char *v27;  // [bp-0x18]\n
    unsigned int v28;  // [bp-0xc]\n
    struct_1 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    unsigned int *v32;  // rax\n
    struct_1 *v33;  // rcx\n
    unsigned int *v34;  // rdx\n
    struct_1 *v35;  // rcx\n
    unsigned long long v36;  // rdx\n
    unsigned int *v37;  // rax\n
    struct_1 *v38;  // rcx\n
    unsigned int *v39;  // rdx\n
    unsigned long long v40;  // rdx\n
    unsigned long long *v41;  // rax\n
    struct_1 *v42;  // rcx\n
    unsigned long long *v43;  // rdx\n
    struct_1 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    struct struct_0 **v46;  // rax\n
    struct_1 *v47;  // rcx\n
    struct struct_0 **v48;  // rdx\n
    struct_1 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    struct struct_0 **v51;  // rax\n
    struct_1 *v52;  // rcx\n
    struct struct_0 **v53;  // rdx\n
\n
    v27 = a0;\n
    v26 = 0;\n
    if (!v27)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (true)\n
    {\n
        if (!*(v27))\n
        {\n
            v28 = v26;\n
            return v28;\n
        }\n
        if (*(v27) != 64)\n
        {\n
            cgc_putc(*(v27));\n
            v27 += 1;\n
            v26 += 1;\n
        }\n
        else\n
        {\n
            v27 += 1;\n
            v16 = *(v27);\n
            if (!v16)\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            if (v16 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v16 == 99)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v33 = v14;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[2];\n
                    v13 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v14;\n
                    v31 = v15;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v13 = v32;\n
                }\n
                v24 = *(v13);\n
                cgc_putc(v24);\n
            }\n
            else if (v16 == 100)\n
            {\n
                v11 = a1;\n
                v12 = v11->field_0;\n
                if (v12 > 40)\n
                {\n
                    v38 = v11;\n
                    v39 = v38->field_8;\n
                    v38->field_8 = &v39[2];\n
                    v10 = v39;\n
                }\n
                else\n
                {\n
                    v35 = v11;\n
                    v36 = v12;\n
                    v37 = v36 + v35->field_10;\n
                    v35->field_0 = v36 + 8;\n
                    v10 = v37;\n
                }\n
                v23 = *(v10);\n
                cgc_int_to_str(v23, &v25);\n
                for (v22 = &v25; v22->field_0; v22 += 1)\n
                {\n
                    cgc_putc(v22->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 > 160)\n
                {\n
                    v42 = v4;\n
                    v43 = v42->field_8;\n
                    v42->field_8 = &v43[1];\n
                    v3 = v43;\n
                }\n
                else\n
                {\n
                    v40 = v6;\n
                    v41 = v40 + v4->field_10;\n
                    *(v5) = v40 + 16;\n
                    v3 = v41;\n
                }\n
                v19 = *(v3);\n
                cgc_float_to_str(&v25);\n
                for (v18 = &v25; v18->field_0; v18 += 1)\n
                {\n
                    cgc_putc(v18->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v47 = v1;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v0 = v48;\n
                }\n
                else\n
                {\n
                    v44 = v1;\n
                    v45 = v2;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v0 = v46;\n
                }\n
                for (v17 = *(v0); *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 120)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 <= 40)\n
                {\n
                    v49 = v8;\n
                    v50 = v9;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v7 = v51;\n
                }\n
                else\n
                {\n
                    v52 = v8;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[1];\n
                    v7 = v53;\n
                }\n
                v21 = *(v7);\n
                cgc_int_to_hex(v21, &v25);\n
                for (v20 = &v25; *(v20); v20 += 1)\n
                {\n
                    cgc_putc(*(v20));\n
                    v26 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            v27 += 1;\n
        }\n
    }\n
}\n
", "4205889:sub_402d41": null, "4205904:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4206064:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4206201:sub_402e79": null, "4206208:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long long v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4206384:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4206496:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4206579:sub_402ff3": null, "4206592:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206643:sub_403033": null, "4206656:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206707:sub_403073": null, "4206720:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4206763:sub_4030ab": null, "4206768:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4206811:sub_4030db": null, "4206816:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206867:sub_403113": null, "4206880:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206971:sub_40317b": null, "4206976:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4207004:sub_40319c": null, "4207008:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4207060:sub_4031d4": null, "4207072:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_4033c9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_4033c9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_4033c9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_403339:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_4033c9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_403339;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_4033c9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4207629:sub_40340d": null, "4207632:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4208024:sub_403598": null, "4208032:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4208135:sub_403607": null, "4208144:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4208317:sub_4036bd": null, "4208320:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4208438:sub_403736": null, "4208448:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4208536:sub_403798": null, "4208544:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4208662:sub_403816": null, "4208672:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4208881:sub_4038f1": null, "4208896:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; v0[a0]; v0 += 1);\n
    return v0;\n
}\n
", "4208979:sub_403953": null, "4208992:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 != a1)\n
        {\n
            *((a0 + v2)) = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return v2;\n
        }\n
    }\n
}\n
", "4209193:sub_403a29": null, "4209200:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4209362:sub_403ad2": null, "4209376:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4209608:sub_403bc8": null, "4209616:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x18], Other Possible Types: char\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = 0;\n
    if (!a0)\n
        return v4;\n
    v0 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 >= v0)\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 == 1)\n
                    return v4;\n
                v4 = cgc_transmit(a0, v5, v6, v7);\n
                if (v4)\n
                    return v4;\n
            }\n
        }\n
        else\n
        {\n
            v4 = cgc_transmit(a0, v5, v6, v7);\n
            if (v4)\n
                return v4;\n
            v1 = *(&v2) + v1;\n
        }\n
    }\n
}\n
", "4209810:sub_403c92": null, "4209824:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4209940:sub_403d14": null, "4209952:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4210662:sub_403fe6": null, "4210672:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        else if (!cgc_transmit(a0, a1, v4, v5))\n
        {\n
            v0 = *(&v1) + v0;\n
        }\n
        else\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4210826:sub_40408a": null, "4210832:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4210981:sub_404125": null, "4210992:cgc_calloc": "long long cgc_calloc(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_malloc(a0 * a1);\n
    cgc_memset(*(&v0), 0, a0 * a1);\n
    return *(&v0);\n
}\n
", "4211056:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
extern struct_2 *cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x28]\n
    struct_1 *v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    struct_1 *v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        cgc_heap_manager->field_0 = 0x1000;\n
        cgc_heap_manager->field_10 = 8;\n
        cgc_heap_manager->field_8 = 0x1000 - cgc_heap_manager->field_10;\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(cgc_heap_manager->field_18, 0, 0x1000);\n
        v3 = cgc_heap_manager->field_18;\n
        v3->field_0 = 4072;\n
        v3->field_8 = 0;\n
    }\n
    v3 = cgc_heap_manager->field_18;\n
    if (a0 > v3->field_0)\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (!v3->field_8)\n
        {\n
            cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
            cgc__terminate(\"Not enough space available to allocate more heap.  Failure.\");\n
        }\n
        v3 = v3->field_8;\n
        v3->field_0 = 4072;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        v9->field_0 = v9->field_0 - a0;\n
        v1 = &v3[1].field_0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v1 + 8)) & 1))\n
                v0 = *(v1) < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = v1 + 16 + *(v1);\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = v1 + 16;\n
        return v4;\n
    }\n
}\n
", "4211538:sub_404352": null, "4211552:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4211614:sub_40439e": null, "4211616:cgc_PrintBoard": "long long cgc_PrintBoard(unsigned long a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1b]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    for (v1 = 7; v1 >= 0; v1 -= 1)\n
    {\n
        for (v2 = 0; v2 < 8; v2 += 1)\n
        {\n
            a3 = v1;\n
            if (!*(a0 + 8 * v2 + a3))\n
            {\n
                (&v0)[v2] = 46;\n
            }\n
            else\n
            {\n
                a3 = v1;\n
                *(&a3) = *(a0 + 8 * v2 + a3);\n
                (&v0)[v2] = *(&a3);\n
            }\n
        }\n
        (&v0)[v2] = 0;\n
        cgc_printf(\"@s\\n
\", &v0, a2, a3, a4);\n
    }\n
    return v1;\n
}\n
", "4211809:sub_404461": null, "4211824:cgc_InitBoard": "long long cgc_InitBoard(char a0[64])\n
{\n
    char v0;  // [bp-0x12]\n
    char v1;  // [bp-0x11]\n
\n
    a0[56] = 100;\n
    a0[0] = 100;\n
    a0[48] = 98;\n
    a0[8] = 98;\n
    a0[40] = 99;\n
    a0[16] = 99;\n
    a0[24] = 102;\n
    a0[32] = 101;\n
    v0 = 1;\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        a0[8 * v1 + v0] = 97;\n
    }\n
    for (v0 = 2; v0 < 6; v0 += 1)\n
    {\n
        for (v1 = 0; v1 < 8; v1 += 1)\n
        {\n
            a0[8 * v1 + v0] = 0;\n
        }\n
    }\n
    v0 = 6;\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        a0[8 * v1 + v0] = 103;\n
    }\n
    a0[63] = 106;\n
    a0[7] = 106;\n
    a0[55] = 104;\n
    a0[15] = 104;\n
    a0[47] = 105;\n
    a0[23] = 105;\n
    a0[31] = 108;\n
    a0[39] = 107;\n
    return a0;\n
}\n
", "4212169:sub_4045c9": null, "4212176:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = a0 * -1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4212216:sub_4045f8": null, "4212224:cgc_IsDiagClear": "long long cgc_IsDiagClear(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x22]\n
    char v1;  // [bp-0x21]\n
    char v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1f]\n
    char v4;  // [bp-0x1e]\n
    char v5;  // [bp-0x1d]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    if (a1 >= a3)\n
    {\n
        if (a2 >= a4)\n
        {\n
            v5 = a1 - 1;\n
            v4 = a2 - 1;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5 > a3)\n
                    v0 = a4 < v4;\n
                if (!(v0 & 1))\n
                    break;\n
                if (*((a0 + (v5 << 3) + v4)))\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                v5 -= 1;\n
                v4 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            v5 = a1 - 1;\n
            v4 = a2 + 1;\n
            while (true)\n
            {\n
                v1 = 0;\n
                if (v5 > a3)\n
                    v1 = v4 < a4;\n
                if (!(v1 & 1))\n
                    break;\n
                if (*((a0 + (v5 << 3) + v4)))\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                v5 -= 1;\n
                v4 += 1;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (a2 >= a4)\n
        {\n
            v5 = a1 + 1;\n
            v4 = a2 - 1;\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (v5 < a3)\n
                    v2 = a4 < v4;\n
                if (!(v2 & 1))\n
                    break;\n
                if (*((a0 + (v5 << 3) + v4)))\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                v5 += 1;\n
                v4 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            v5 = a1 + 1;\n
            v4 = a2 + 1;\n
            while (true)\n
            {\n
                v3 = 0;\n
                if (v5 < a3)\n
                    v3 = v4 < a4;\n
                if (!(v3 & 1))\n
                    break;\n
                if (*((a0 + (v5 << 3) + v4)))\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                v5 += 1;\n
                v4 += 1;\n
            }\n
        }\n
    }\n
    v6 = 1;\n
    return v6;\n
}\n
", "4212918:sub_4048b6": null, "4212928:cgc_IsLateralClear": "long long cgc_IsLateralClear(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x1e]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (a1 < a3)\n
    {\n
        for (v1 = a1 + 1; v1 < a3; v1 += 1)\n
        {\n
            if (*((a0 + (v1 << 3) + a2)))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
    }\n
    else if (a1 > a3)\n
    {\n
        for (v1 = a3 + 1; v1 < a1; v1 += 1)\n
        {\n
            if (*((a0 + (v1 << 3) + a2)))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
    }\n
    else if (a2 < a4)\n
    {\n
        for (v0 = a2 + 1; v0 < a4; v0 += 1)\n
        {\n
            if (*((a0 + (a1 << 3) + v0)))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
    }\n
    else if (a2 > a4)\n
    {\n
        for (v0 = a4 + 1; v0 < a2; v0 += 1)\n
        {\n
            if (*((a0 + (a1 << 3) + v0)))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
        }\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4213423:sub_404aaf": null, "4213424:cgc_IsMemberPiece": "long long cgc_IsMemberPiece(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = cgc_strchr(a0, a1);\n
    if (!v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = v1;\n
    if (v0 == a0 + cgc_strlen(a0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4213558:sub_404b36": null, "4213568:cgc_IsValidMove": "extern char cgc_CURR_PLAYER;\n
\n
long long cgc_IsValidMove(unsigned int a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 == a3 && a2 == a4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!cgc_strcmp(&cgc_CURR_PLAYER, \"WHITE\") && !cgc_IsMemberPiece(\"dbcfea\", *((a0 + (a1 << 3) + a2))))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!cgc_strcmp(&cgc_CURR_PLAYER, \"BLACK\") && !cgc_IsMemberPiece(\"jhilkg\", *((a0 + (a1 << 3) + a2))))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!cgc_strcmp(&cgc_CURR_PLAYER, \"WHITE\") && cgc_IsMemberPiece(\"dbcfea\", *((a0 + (a3 << 3) + a4))))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!cgc_strcmp(&cgc_CURR_PLAYER, \"BLACK\") && cgc_IsMemberPiece(\"jhilkg\", *((a0 + (a3 << 3) + a4))))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *((a2 + a0 + a1 * 8));\n
    switch (v2)\n
    {\n
    case 0:\n
        v3 = 0;\n
        return v3;\n
    case 97:\n
        if (a1 == a3 && a2 + 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    case 98: case 104:\n
        if (a1 + 2 == a3 && a2 + 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 - 2 == a3 && a2 + 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 + 2 == a3 && a2 - 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 - 2 == a3 && a2 - 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 + 1 == a3 && a2 + 2 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 + 1 == a3 && a2 - 2 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 - 1 == a3 && a2 + 2 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (a1 - 1 == a3 && a2 - 2 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    case 99: case 105:\n
        v1 = cgc_abs(a3 - a1);\n
        if (v1 != cgc_abs(a4 - a2))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v3 = cgc_IsDiagClear(a0, a1, a2, a3, a4);\n
        return v3;\n
    case 100: case 106:\n
        if (a1 != a3 && a2 != a4)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v3 = cgc_IsLateralClear(a0, a1, a2, a3, a4);\n
        return v3;\n
    case 101: case 107:\n
        if (cgc_abs(a1 - a3) <= 1 && cgc_abs(a2 - a4) <= 1)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    case 102: case 108:\n
        if (a1 != a3 && a2 != a4)\n
        {\n
            v0 = cgc_abs(a3 - a1);\n
            if (v0 != cgc_abs(a4 - a2))\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            v3 = cgc_IsDiagClear(a0, a1, a2, a3, a4);\n
            return v3;\n
        }\n
        v3 = cgc_IsLateralClear(a0, a1, a2, a3, a4);\n
        return v3;\n
    case 103:\n
        if (a1 == a3 && a2 - 1 == a4)\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    default:\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4215033:sub_4050f9": null, "4215040:cgc_AcceptMove": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
} struct_0;\n
\n
extern unsigned int cgc_CURR_PLAYER;\n
\n
long long cgc_AcceptMove(unsigned int a0, char *a1, char *a2, char *a3, char *a4)\n
{\n
    unsigned long v0;  // [bp-0x78]\n
    unsigned long v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x64]\n
    char v3[3];  // [bp-0x60], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v5;  // [bp-0x51]\n
    void* v6;  // [bp-0x50]\n
    unsigned long long v7;  // [bp-0x48]\n
    char v8;  // [bp-0x40]\n
    unsigned int v9;  // [bp-0xc]\n
\n
    v6 = 0;\n
    v7 = 0x3000000000000000;\n
    strncpy(&v8, \"1234567\", 7);\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    cgc_printf(\"@s: \", &cgc_CURR_PLAYER, 16, a3, a4);\n
                    cgc_bzero(&v6, 15);\n
                    v1 = cgc_receive_until(&v6, 10, 16);\n
                    if (!v1 && !v1)\n
                        cgc__terminate(\"@s: \");\n
                    if ((&v5)[cgc_strlen(&v6)] == 10)\n
                        (&v5)[cgc_strlen(&v6)] = 0;\n
                    if (cgc_strcmp(\"9\", &v6))\n
                        break;\n
                    cgc_PrintBoard(a0, 10, 16, a3, a4);\n
                }\n
                if (!cgc_strcmp(\"666\", &v6))\n
                {\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                if (cgc_strlen(&v6) <= 7)\n
                    break;\n
                cgc_puts(\"incorrect input\");\n
                cgc_puts(\"Not a legal move format\");\n
            }\n
            *(&v3) = 0;\n
            v4 = 0;\n
            v2 = 0;\n
            while (true)\n
            {\n
                v0 = v2;\n
                if (v0 >= cgc_strlen(&v6))\n
                    break;\n
                if (*(&v6 + v2) == 32)\n
                {\n
                    *(&v6 + v2) = 0;\n
                    *(&v3) = &v6 + v2;\n
                    v4 = &v6;\n
                }\n
                v2 += 1;\n
            }\n
            if (v4)\n
                break;\n
            cgc_puts(\"incorrect input\");\n
            cgc_puts(\"Not a legal move format\");\n
        }\n
        if (!cgc_strchr(&v7, *(v4)))\n
        {\n
LABEL_40534e:\n
            cgc_puts(\"incorrect input\");\n
            cgc_puts(\"Not a legal move format\");\n
        }\n
        else\n
        {\n
            if (!(*((v4 + 1)) == 44))\n
                goto LABEL_40534e;\n
            if (!cgc_strchr(&v7, *((v4 + 2))))\n
                goto LABEL_40534e;\n
            if (!(cgc_strlen(v4) == 3))\n
                goto LABEL_40534e;\n
            *(a1) = *(v4) - 48;\n
            *(a2) = *((v4 + 2)) - 48;\n
            if (cgc_strchr(&v7, *(v3)) && *((v3 + 1)) == 44 && cgc_strchr(&v7, *((v3 + 2))) && cgc_strlen(v3) == 3)\n
            {\n
                *(a3) = *(v3) - 48;\n
                *(a4) = *((v3 + 2)) - 48;\n
                v9 = 1;\n
                return v9;\n
            }\n
            cgc_puts(\"incorrect input\");\n
            cgc_puts(\"Not a legal move format\");\n
        }\n
    }\n
}\n
", "4215875:sub_405443": null, "4215888:cgc_MakeMove": "long long cgc_MakeMove(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned long v2;  // rax\n
\n
    if (*((a0 + (a3 << 3) + a4)))\n
    {\n
        v0 = *((a0 + a3 * 8 + a4));\n
        *((a0 + a3 * 8 + a4)) = *((a0 + a1 * 8 + a2));\n
        v2 = a0 + a1 * 8;\n
        *((v2 + a2)) = v0;\n
        return a0 + a1 * 8;\n
    }\n
    *((a0 + a3 * 8 + a4)) = *((a0 + a1 * 8 + a2));\n
    v2 = a0 + a1 * 8;\n
    *((v2 + a2)) = 0;\n
    return a0 + a1 * 8;\n
}\n
", "4216128:main": "extern char cgc_CURR_PLAYER;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    char v0[64];  // [bp-0x68]\n
    char v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x1b]\n
    char v3;  // [bp-0x1a]\n
    char v4;  // [bp-0x19]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v7 = 0;\n
    v6 = a0;\n
    v5 = a1;\n
    cgc_InitBoard(v0);\n
    cgc_strcpy(&cgc_CURR_PLAYER, \"WHITE\");\n
    cgc_PrintBoard(v0, \"WHITE\", a2, a3, a4);\n
    while (cgc_AcceptMove(v0, &v4, &v3, &v2, &v1))\n
    {\n
        if (!cgc_IsValidMove(v0, v4, v3, v2, v1))\n
        {\n
            cgc_puts(\"NO\");\n
        }\n
        else\n
        {\n
            cgc_MakeMove(v0, v4, v3, v2, v1);\n
            if (cgc_strcmp(&cgc_CURR_PLAYER, \"WHITE\"))\n
                cgc_strcpy(&cgc_CURR_PLAYER, \"WHITE\");\n
            else\n
                cgc_strcpy(&cgc_CURR_PLAYER, \"BLACK\");\n
            cgc_puts(\"OK\");\n
        }\n
    }\n
    cgc_puts(\"good game\");\n
    return 0;\n
}\n
", "4216420:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_deallocate": null, "5242936:cgc_log10": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}