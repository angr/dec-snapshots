{"4202496:_init": "extern struct_0 *g_409230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409230;\n
    if (g_409230)\n
        v1 = g_409230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409250;\n
    goto *(4231768);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231744);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_409238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203011:sub_402203": null, "4203024:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203794:sub_402512": null, "4203808:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204003:sub_4025e3": null, "4204016:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 **, unsigned long, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204556:sub_40280c": null, "4204560:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204708:sub_4028a4": null, "4204720:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204844:sub_40292c": null, "4204848:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204976:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205038:sub_4029ee": null, "4205040:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205265:sub_402ad1": null, "4205280:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 = v4 >> 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205487:sub_402baf": null, "4205488:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402eb1;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402eb1:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4206273:sub_402ec1": null, "4206288:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_1 **v2;  // [bp-0x150]\n
    struct_2 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned long long *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    struct struct_1 **v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_0 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_0 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_2 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    struct struct_1 **v43;  // rax\n
    struct_2 *v44;  // rcx\n
    struct struct_1 **v45;  // rdx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_2 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_4038d6:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[1];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    cgc_putc(*(v27));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; v23->field_0; v23 += 1)\n
                {\n
                    cgc_putc(v23->field_0);\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_4038d6;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 <= 40)\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            else\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403773;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403773:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4208877:sub_4038ed": null, "4208880:cgc_vsprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_1 **v2;  // [bp-0x160]\n
    struct_2 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_0 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_0 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_2 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_2 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v45;  // rcx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_2 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_4043db:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    a0[v37] = v27->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; *(v25); v25 += 1)\n
                {\n
                    a0[v37] = *(v25);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; v23->field_0; v23 += 1)\n
                {\n
                    a0[v37] = v23->field_0;\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_4043db;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_404247;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_404247:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4211698:sub_4043f2": null, "4211712:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4211887:sub_4044af": null, "4211888:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    a0[v13] = 0;\n
    return v13;\n
}\n
", "4212064:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212182:sub_4045d6": null, "4212192:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4212308:sub_404654": null, "4212320:cgc_strdup": "long long cgc_strdup(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4212469:sub_4046f5": null, "4212480:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4212540:sub_40473c": null, "4212544:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4212647:sub_4047a7": null, "4212656:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4213366:sub_404a76": null, "4213376:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4213458:sub_404ad2": null, "4213472:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4213563:sub_404b3b": null, "4213568:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4213619:sub_404b73": null, "4213632:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4213660:sub_404b9c": null, "4213664:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4213716:sub_404bd4": null, "4213728:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4213783:sub_404c17": null, "4213792:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4213847:sub_404c57": null, "4213856:cgc_strcmp": "long long cgc_strcmp(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!*((a0 + v0)) && !*((a1 + v0)))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!*((a0 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!*((a1 + v0)))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) < *((a1 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) <= *((a1 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4214111:sub_404d5f": null, "4214112:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!*((a1 + v0)))\n
            break;\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4214233:sub_404dd9": null, "4214240:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
\n
    while (true)\n
    {\n
        cgc_memset(&v3, 0, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 0, 128, v7, v8);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 0, 128, v7);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4214511:sub_404eef": null, "4214512:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2 >= 4)\n
    {\n
        for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v1 + 3 < a2; v1 += 4)\n
        {\n
            *(&v1[a0]) = v0;\n
        }\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4214696:sub_404fa8": null, "4214704:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4214798:sub_40500e": null, "4214800:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; v2 < a2; v2 += 1)\n
    {\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v0 == a1)\n
                break;\n
            *((a0 + v2)) = v0;\n
        }\n
    }\n
    if (v2 == a2)\n
        cgc_flush_input(0);\n
    return v2;\n
}\n
", "4214998:sub_4050d6": null, "4215008:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a2 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a2; v0 += 4)\n
        {\n
            *((a0 + v0)) = *((a1 + v0));\n
        }\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4215174:sub_405186": null, "4215184:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 12)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4215576:sub_405318": null, "4215584:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = -(a0);\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4215625:sub_405349": null, "4215632:cgc_lint": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
long long cgc_lint(unsigned long long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
\n
    v0 = cgc_calloc(32, 1);\n
    v0->field_10 = cgc_atoi(a1);\n
    v0->field_8 = \"Integer\";\n
    v0->field_0 = cgc_strdup(a0);\n
    v0->field_18 = cgc_strlen(a1);\n
    return v0;\n
}\n
", "4215749:sub_4053c5": null, "4215760:cgc_lstring": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
long long cgc_lstring(unsigned long long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
\n
    v0 = cgc_calloc(32, 1);\n
    v0->field_10 = cgc_strdup(a1);\n
    v0->field_8 = \"String\";\n
    v0->field_0 = cgc_strdup(a0);\n
    v0->field_18 = cgc_strlen(a1);\n
    return v0;\n
}\n
", "4215877:sub_405445": null, "4215888:cgc_lbool": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
long long cgc_lbool(unsigned long long a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
\n
    v0 = cgc_calloc(32, 1);\n
    if (!cgc_strcmp(a1, \"True\"))\n
        v0->field_10 = 1;\n
    else\n
        v0->field_10 = 0;\n
    v0->field_18 = 1;\n
    v0->field_8 = \"Boolean\";\n
    v0->field_0 = cgc_strdup(a0);\n
    return v0;\n
}\n
", "4216033:sub_4054e1": null, "4216048:cgc_lfunc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
long long cgc_lfunc(unsigned long long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
\n
    v0 = cgc_calloc(32, 1);\n
    v0->field_0 = cgc_strdup(a0);\n
    v0->field_10 = a1;\n
    v0->field_8 = \"Function\";\n
    v0->field_18 = 0;\n
    return v0;\n
}\n
", "4216150:sub_405556": null, "4216160:main": "extern unsigned long long funcStack;\n
extern unsigned long long operStack;\n
extern unsigned long long root;\n
\n
int main(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x270]\n
    unsigned long long v1;  // [bp-0x268]\n
    unsigned long long v2;  // [bp-0x260]\n
    unsigned long long v3;  // [bp-0x258]\n
    unsigned long long v4;  // [bp-0x250]\n
    unsigned long long v5;  // [bp-0x248]\n
    unsigned long long v6;  // [bp-0x240]\n
    unsigned long long v7;  // [bp-0x238]\n
    unsigned long long v8;  // [bp-0x230]\n
    unsigned long long v9;  // [bp-0x228]\n
    unsigned long long v10;  // [bp-0x220]\n
    char v11;  // [bp-0x118]\n
    unsigned long v12;  // [bp-0x18]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned long long v16;  // rsi\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rcx\n
    unsigned long long v19;  // r8\n
    unsigned long long v20;  // r9\n
\n
    v14 = 0;\n
    v13 = a0;\n
    v12 = v16;\n
    root = cgc_initTrie();\n
    *(&operStack) = cgc_initStack(a0, v16, v17, v18, v19, v20);\n
    funcStack = cgc_initStack(a0, v16, v17, v18, v19, v20);\n
    v0 = root;\n
    cgc_insertInTrie(v0, \"add\", cgc_lfunc(\"add\", cgc_add));\n
    v1 = root;\n
    cgc_insertInTrie(v1, \"sub\", cgc_lfunc(\"sub\", cgc_sub));\n
    v2 = root;\n
    cgc_insertInTrie(v2, \"mul\", cgc_lfunc(\"mul\", cgc_mul));\n
    v3 = root;\n
    cgc_insertInTrie(v3, \"div\", cgc_lfunc(\"div\", cgc_div));\n
    v4 = root;\n
    cgc_insertInTrie(v4, \"mod\", cgc_lfunc(\"mod\", cgc_mod));\n
    v5 = root;\n
    cgc_insertInTrie(v5, \"not\", cgc_lfunc(\"not\", cgc_not));\n
    v6 = root;\n
    cgc_insertInTrie(v6, \"int\", cgc_lfunc(\"int\", cgc__int));\n
    v7 = root;\n
    cgc_insertInTrie(v7, \"terminate\", cgc_lfunc(\"terminate\", cgc_terminate));\n
    v8 = root;\n
    cgc_insertInTrie(v8, \"equals\", cgc_lfunc(\"equals\", cgc_equals));\n
    v9 = root;\n
    cgc_insertInTrie(v9, \"type\", cgc_lfunc(\"type\", cgc_type));\n
    v10 = root;\n
    cgc_insertInTrie(v10, \"len\", cgc_lfunc(\"len\", len));\n
    while (true)\n
    {\n
        cgc_memset(&v11, 0, 0x100);\n
        cgc_transmit(a0, 0, 0x100, v18);\n
        if (!cgc_receive_until(&v11, 10, 255))\n
            cgc__terminate(a0);\n
        cgc_process(&v11);\n
    }\n
}\n
", "4216933:sub_405865": null, "4216944:cgc_process": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern unsigned long long funcStack;\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
extern unsigned long long root;\n
\n
long long cgc_process(char *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    unsigned long long v0;  // [bp-0x118]\n
    unsigned long long v1;  // [bp-0x110]\n
    unsigned long long v2;  // [bp-0x108]\n
    unsigned long long v3;  // [bp-0x100]\n
    unsigned long long v4;  // [bp-0xf8]\n
    unsigned long long v5;  // [bp-0xf0]\n
    unsigned long long v6;  // [bp-0xe8]\n
    unsigned long long v7;  // [bp-0xe0]\n
    unsigned long long v8;  // [bp-0xd8]\n
    unsigned long long v9;  // [bp-0xd0]\n
    unsigned long long v10;  // [bp-0xc8]\n
    unsigned long long v11;  // [bp-0xc0]\n
    unsigned long long v12;  // [bp-0xb8]\n
    unsigned long v13;  // [bp-0xb0]\n
    unsigned long v14;  // [bp-0xa8]\n
    unsigned int v15[5];  // [bp-0xa0]\n
    struct_2 *v16;  // [bp-0x98]\n
    struct_0 *v17;  // [bp-0x90]\n
    struct_0 *v18;  // [bp-0x88]\n
    struct_0 *v19;  // [bp-0x80]\n
    struct_0 *v20;  // [bp-0x78]\n
    struct_0 *v21;  // [bp-0x70]\n
    struct_0 *v22;  // [bp-0x68]\n
    struct_0 *v23;  // [bp-0x60]\n
    char *v24;  // [bp-0x58]\n
    char *v25;  // [bp-0x50]\n
    char *v26;  // [bp-0x48]\n
    unsigned long long v27;  // [bp-0x40]\n
    char *v28;  // [bp-0x38]\n
    unsigned long long v29;  // [bp-0x28]\n
    unsigned int v30;  // [bp-0x1c]\n
    char *v31;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v33;  // r9\n
    unsigned long long v34;  // rax, Other Possible Types: unsigned long\n
    unsigned long v35;  // rcx\n
\n
    v30 = 0;\n
    v31 = cgc_strtok(a0, \" \");\n
    while (v31)\n
    {\n
        if (cgc_isdigit(*(v31)))\n
        {\n
LABEL_4058dd:\n
            v30 = 1;\n
            while (true)\n
            {\n
                v14 = v30;\n
                if (v14 >= cgc_strlen(v31))\n
                    break;\n
                if (!cgc_isdigit(v31[v30]))\n
                    break;\n
                v30 += 1;\n
            }\n
            v13 = v30;\n
            if (v13 < cgc_strlen(v31))\n
            {\n
                cgc_puts(\"NOT A NUMBER\");\n
            }\n
            else\n
            {\n
                v29 = cgc_lint(&g_408236, v31);\n
                cgc_push(operStack, v29);\n
            }\n
            goto LABEL_406168;\n
        }\n
        else if (*(v31) != 45)\n
        {\n
LABEL_40599e:\n
            if (*(v31) == 34)\n
            {\n
                v31 += 1;\n
                v28 = cgc_strchr(v31, 34);\n
                if (v28)\n
                {\n
                    *(v28) = 0;\n
                    v12 = operStack;\n
                    cgc_push(v12, cgc_lstring(&g_408236, v31));\n
                }\n
                else\n
                {\n
                    v31 += 1;\n
                    cgc_printf(\"Unterminated string constant: @s\\n
\", v31, a2, a3, a4);\n
                }\n
            }\n
            else if (!cgc_strcmp(v31, \"var\"))\n
            {\n
                v27 = cgc_strtok(NULL, \" \");\n
                v26 = cgc_strtok(NULL, \" \");\n
                if (!v26)\n
                    break;\n
                if (v26 && *(v26) == 61)\n
                {\n
                    v25 = cgc_strtok(NULL, \" \");\n
                    if (v25)\n
                    {\n
                        if (*(v25) == 34)\n
                        {\n
                            v25 += 1;\n
                            v24 = cgc_strchr(v25, 34);\n
                            if (v24)\n
                            {\n
                                *(v24) = 0;\n
                                v10 = root;\n
                                v11 = v27;\n
                                cgc_insertInTrie(v10, v11, cgc_lstring(v27, v25));\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_strcmp(v25, \"False\"))\n
                            {\n
                                v8 = root;\n
                                v9 = v27;\n
                                cgc_insertInTrie(v8, v9, cgc_lbool(v27, v25));\n
                            }\n
                            else\n
                            {\n
                                if (cgc_strcmp(v25, \"True\"))\n
                                {\n
                                    v4 = root;\n
                                    v5 = v27;\n
                                    cgc_insertInTrie(v4, v5, cgc_lint(v27, v25));\n
                                }\n
                                else\n
                                {\n
                                    v6 = root;\n
                                    v7 = v27;\n
                                    cgc_insertInTrie(v6, v7, cgc_lbool(v27, v25));\n
                                }\n
                            }\n
                        }\n
                        goto LABEL_405c90;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(\"Malformed variable declaration\\n
\", \" \", a2, a3, a4);\n
                        break;\n
                    }\n
                }\n
                v2 = root;\n
                v3 = v27;\n
                cgc_insertInTrie(v2, v3, cgc_lint(v27, \"0\"));\n
LABEL_405c90:\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"True\"))\n
            {\n
                v1 = operStack;\n
                cgc_push(v1, cgc_lbool(&g_408236, 4227199));\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"False\"))\n
            {\n
                v0 = operStack;\n
                cgc_push(v0, cgc_lbool(&g_408236, 4227349));\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"+\"))\n
            {\n
                v23 = *((cgc_findInTrie(root, \"add\") + 24));\n
                if (cgc_strcmp(*(&v23->field_8), \"Function\"))\n
                    cgc_push(operStack, v23);\n
                else\n
                    cgc_push(funcStack, v23);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"-\"))\n
            {\n
                v22 = *((cgc_findInTrie(root, \"sub\") + 24));\n
                if (!cgc_strcmp(*(&v22->field_8), \"Function\"))\n
                    cgc_push(funcStack, v22);\n
                else\n
                    cgc_push(operStack, v22);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"*\"))\n
            {\n
                v21 = *((cgc_findInTrie(root, \"mul\") + 24));\n
                if (cgc_strcmp(*(&v21->field_8), \"Function\"))\n
                    cgc_push(operStack, v21);\n
                else\n
                    cgc_push(funcStack, v21);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"/\"))\n
            {\n
                v20 = *((cgc_findInTrie(root, \"div\") + 24));\n
                if (cgc_strcmp(*(&v20->field_8), \"Function\"))\n
                    cgc_push(operStack, v20);\n
                else\n
                    cgc_push(funcStack, v20);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"%\"))\n
            {\n
                v19 = *((cgc_findInTrie(root, \"mod\") + 24));\n
                if (cgc_strcmp(*(&v19->field_8), \"Function\"))\n
                    cgc_push(operStack, v19);\n
                else\n
                    cgc_push(funcStack, v19);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v31, \"==\"))\n
            {\n
                v18 = *((cgc_findInTrie(root, \"equals\") + 24));\n
                if (!cgc_strcmp(*(&v18->field_8), \"Function\"))\n
                    cgc_push(funcStack, v18);\n
                else\n
                    cgc_push(operStack, v18);\n
                v31 = cgc_strtok(NULL, \" \");\n
                continue;\n
            }\n
            else if (!cgc_findInTrie(root, v31))\n
            {\n
                cgc_printf(\"Undeclared identifier: @s\\n
\", v31, a2, a3, a4);\n
            }\n
            else\n
            {\n
                v17 = *((cgc_findInTrie(root, v31) + 24));\n
                if (!cgc_strcmp(*(&v17->field_8), \"Function\"))\n
                    cgc_push(funcStack, v17);\n
                else\n
                    cgc_push(operStack, v17);\n
            }\n
LABEL_406168:\n
            v31 = cgc_strtok(NULL, \" \");\n
        }\n
        else\n
        {\n
            if (cgc_strlen(v31) <= 1)\n
                goto LABEL_40599e;\n
            goto LABEL_4058dd;\n
        }\n
    }\n
    while (((cgc_isEmpty(funcStack) ^ 255) & 1))\n
    {\n
        v16 = cgc_pop(funcStack);\n
        v16->field_10(funcStack, \" \", a2, v16, a4, v33);\n
    }\n
    v34 = cgc_isEmpty(operStack);\n
    if (v34)\n
        return v34;\n
    *(&v15[0]) = cgc_pop(operStack);\n
    if (!cgc_strcmp(*(&v15[2]), \"Integer\"))\n
    {\n
        v34 = cgc_printf(\"@d\\n
\", *(&v15[4]), a2, a3, a4);\n
    }\n
    else if (!cgc_strcmp(*(&v15[2]), \"String\"))\n
    {\n
        v34 = cgc_printf(\"@s\\n
\", *(&v15[4]), a2, a3, a4);\n
    }\n
    else\n
    {\n
        v34 = cgc_strcmp(*(&v15[2]), \"Boolean\");\n
        if (!v34)\n
        {\n
            v35 = *(&v15[4]);\n
            v34 = cgc_printf(\"@s\\n
\", (v35 == 1 ? \"False\" : \"True\"), a2, v35, a4);\n
        }\n
    }\n
    return v34;\n
}\n
", "4219607:sub_4062d7": null, "4219616:cgc_add": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_add(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x90]\n
    struct_0 *v1;  // [bp-0x88]\n
    unsigned long long v2;  // [bp-0x80]\n
    unsigned long long v3;  // [bp-0x78]\n
    unsigned long long v4;  // [bp-0x70]\n
    char v5;  // [bp-0x68]\n
    unsigned long v6;  // [bp-0x48]\n
    unsigned long v7;  // [bp-0x40]\n
    char v8;  // [bp-0x38]\n
    unsigned int v9[7];  // [bp-0x18], Other Possible Types: struct_1 *\n
    struct_1 *v10;  // [bp-0x10], Other Possible Types: unsigned int [7]\n
    unsigned long long v12;  // rax, Other Possible Types: unsigned long\n
\n
    v10 = 0;\n
    v9 = 0;\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v12 = cgc_puts(\"Not enough operands for add\");\n
        return v12;\n
    }\n
    *(&v10[0]) = cgc_pop(operStack);\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v12 = cgc_puts(\"Not enough operands for add\");\n
        return v12;\n
    }\n
    *(&v9[0]) = cgc_pop(operStack);\n
    if (!cgc_strcmp(*(&v10[2]), \"Integer\") && !cgc_strcmp(*(&v9[2]), \"Integer\"))\n
    {\n
        cgc_bzero(&v8, 32);\n
        cgc_int_to_str(*(&v10[4]) + *(&v9[4]), &v8);\n
        v4 = operStack;\n
        v12 = cgc_push(v4, cgc_lint(&g_408236, &v8));\n
        return v12;\n
    }\n
    if (!cgc_strcmp(*(&v10[2]), \"String\") && !cgc_strcmp(*(&v9[2]), \"String\"))\n
    {\n
        v7 = cgc_calloc(v10[6] + v9[6] + 1, 1);\n
        if (!v7)\n
        {\n
            cgc_puts(\"Critical memory error.  Exiting.\");\n
            v12 = cgc__terminate(\"Critical memory error.  Exiting.\");\n
        }\n
        else\n
        {\n
            cgc_memcpy(v7, *(&v9[4]), v9[6]);\n
            cgc_memcpy(v7 + v9[6], *(&v10[4]), v10[6]);\n
            v3 = operStack;\n
            cgc_push(v3, cgc_lstring(&g_408236, v7));\n
            v12 = cgc_free(v7);\n
        }\n
        goto LABEL_40663f;\n
    }\n
    if (!cgc_strcmp(*(&v9[2]), \"String\") && !cgc_strcmp(*(&v10[2]), \"Integer\"))\n
    {\n
        cgc_bzero(&v5, 32);\n
        cgc_int_to_str(*(&v10[4]), &v5);\n
        v6 = cgc_calloc(v9[6] + v10[6] + 1, 1);\n
        if (!v6)\n
        {\n
            cgc_puts(\"Critical memory error.  Exiting.\");\n
            v12 = cgc__terminate(\"Critical memory error.  Exiting.\");\n
        }\n
        else\n
        {\n
            cgc_memcpy(v6, *(&v9[4]), v9[6]);\n
            *(&v0) = v6 + v9[6];\n
            v1 = &v5;\n
            cgc_memcpy(*(&v0), v1, cgc_strlen(&v5));\n
            v2 = operStack;\n
            cgc_push(v2, cgc_lstring(&g_408236, v6));\n
            v12 = cgc_free(v6);\n
        }\n
        goto LABEL_40663f;\n
    }\n
    v12 = cgc_printf(\"Add doesn't make sense on @s and @s\\n
\", *(&v9[2]), *(&v10[2]), a3, a4);\n
LABEL_40663f:\n
    return v12;\n
}\n
", "4220498:sub_406652": null, "4220512:cgc__int": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc__int()\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long long v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    char *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_0 *v6;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
\n
    v6 = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v6 = cgc_pop(operStack);\n
    if (!v6)\n
    {\n
        v8 = cgc_puts(\"Not enough operands for int\");\n
        return v8;\n
    }\n
    if (!cgc_strcmp(*((v6 + 8)), \"Integer\"))\n
    {\n
        v8 = cgc_push(operStack, v6);\n
    }\n
    else if (cgc_strcmp(*((v6 + 8)), \"String\"))\n
    {\n
        v8 = cgc_strcmp(*((v6 + 8)), \"Boolean\");\n
        if (!v8)\n
        {\n
            if (!*((v6 + 16)))\n
            {\n
                v0 = operStack;\n
                v8 = cgc_push(v0, cgc_lint(&g_408236, \"0\"));\n
            }\n
            else\n
            {\n
                v1 = operStack;\n
                v8 = cgc_push(v1, cgc_lint(&g_408236, \"1\"));\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v4 = *((v6 + 16));\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = v5;\n
            if (v3 >= cgc_strlen(v4))\n
                break;\n
            if (!cgc_isdigit(v4[v5]))\n
            {\n
                v8 = cgc_puts(\"Could not convert argument to int\");\n
                return v8;\n
            }\n
            v5 += 1;\n
        }\n
        v2 = operStack;\n
        v8 = cgc_push(v2, cgc_lint(&g_408236, *((v6 + 16))));\n
    }\n
    return v8;\n
}\n
", "4220988:sub_40683c": null, "4220992:cgc_mul": "extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_mul(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned long long v2;  // [bp-0x58]\n
    unsigned int v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x44]\n
    unsigned long v6;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v7;  // [bp-0x38]\n
    unsigned int v8[7];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v9[5];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax, Other Possible Types: unsigned long\n
    unsigned int v12;  // eax\n
\n
    *(&v9[0]) = 0;\n
    *(&v8[0]) = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v9 = cgc_pop(operStack);\n
    if (!cgc_isEmpty(operStack))\n
        v8 = cgc_pop(operStack);\n
    if (v9 && v8)\n
    {\n
        if (!cgc_strcmp(*((v8 + 8)), \"Integer\") && !cgc_strcmp(*((v9 + 8)), \"Integer\"))\n
        {\n
            cgc_bzero(&v7, 32);\n
            cgc_int_to_str(*((v9 + 16)) * *((v8 + 16)), &v7);\n
            v2 = operStack;\n
            v11 = cgc_push(v2, cgc_lint(&g_408236, &v7));\n
            goto LABEL_406abd;\n
        }\n
        if (!cgc_strcmp(*((v8 + 8)), \"String\") && !cgc_strcmp(*((v9 + 8)), \"Integer\"))\n
        {\n
            v1 = *((v9 + 16));\n
            v11 = v1;\n
            if (v11 >= (0 CONCAT 2147483647) /m *((v8 + 24)))\n
                return v1;\n
            v11 = *((v9 + 16));\n
            if (v11 <= 0)\n
                return *((v9 + 16));\n
            v4 = *((v9 + 16));\n
            v5 = *((v9 + 16)) * *((v8 + 24)) + 1;\n
            *(&v6) = cgc_calloc(v5, 1);\n
            *(&v3) = *(&v6);\n
            if (!*(&v6))\n
            {\n
                cgc_puts(\"Critical memory error.  Terminating.\");\n
                v11 = cgc__terminate(\"Critical memory error.  Terminating.\");\n
            }\n
            else\n
            {\n
                while (true)\n
                {\n
                    v12 = v4;\n
                    v4 = v12 - 1;\n
                    if (!v12)\n
                        break;\n
                    cgc_memcpy(v6, *((v8 + 16)), *((v8 + 24)));\n
                    v6 += *((v8 + 24));\n
                }\n
                v0 = operStack;\n
                v11 = cgc_push(v0, cgc_lstring(&g_408236, *(&v3)));\n
            }\n
            goto LABEL_406abd;\n
            goto LABEL_406abd;\n
        }\n
        v11 = cgc_printf(\"Mul does not make sense with @s and @s.\\n
\", *((v8 + 8)), *((v9 + 8)), a3, a4);\n
LABEL_406abd:\n
        return v11;\n
    }\n
    v11 = cgc_puts(\"Not enough operands for multiplication\");\n
    return v11;\n
}\n
", "4221657:sub_406ad9": null, "4221664:cgc_sub": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_sub(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v2[3];  // [bp-0x18], Other Possible Types: struct_0 *\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned long long [3]\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v5 = cgc_puts(\"Not enough operands for sub\");\n
        return v5;\n
    }\n
    v3 = cgc_pop(operStack);\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v5 = cgc_puts(\"Not enough operands for sub\");\n
        return v5;\n
    }\n
    v2 = cgc_pop(operStack);\n
    if (!cgc_strcmp(*(&v3->field_8), \"Integer\") && !cgc_strcmp(*(&v2->field_8), \"Integer\"))\n
    {\n
        cgc_bzero(&v1, 32);\n
        cgc_int_to_str(v2->field_10 - v3->field_10, &v1);\n
        v0 = operStack;\n
        v5 = cgc_push(v0, cgc_lint(&g_408236, &v1));\n
        return v5;\n
    }\n
    v5 = cgc_printf(\"Sub does not make sense on @s and @s\\n
\", *(&v2->field_8), *(&v3->field_8), a3, a4);\n
    return v5;\n
}\n
", "4221987:sub_406c23": null, "4222000:cgc_div": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_div(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax, Other Possible Types: unsigned long\n
    unsigned int v6;  // eax\n
\n
    v3 = 0;\n
    v2 = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v3 = cgc_pop(operStack);\n
    if (!cgc_isEmpty(operStack))\n
        v2 = cgc_pop(operStack);\n
    if (v3 && v2)\n
    {\n
        if (!cgc_strcmp(*((v3 + 8)), \"Integer\") && !cgc_strcmp(*((v2 + 8)), \"Integer\"))\n
        {\n
            cgc_bzero(&v1, 32);\n
            if (!*((v3 + 16)))\n
            {\n
                v5 = cgc_puts(\"Cannot divide by zero.\");\n
            }\n
            else\n
            {\n
                v6 = *((v2 + 16));\n
                cgc_int_to_str((v6 >> 31 CONCAT v6) /m *((v3 + 16)), &v1);\n
                v0 = operStack;\n
                v5 = cgc_push(v0, cgc_lint(&g_408236, &v1));\n
            }\n
            goto LABEL_406d78;\n
        }\n
        v5 = cgc_printf(\"Division does not make sense on @s and @s\\n
\", *((v2 + 8)), *((v3 + 8)), a3, a4);\n
LABEL_406d78:\n
        return v5;\n
    }\n
    v5 = cgc_puts(\"Not enough operands for division.\");\n
    return v5;\n
}\n
", "4222351:sub_406d8f": null, "4222352:cgc_mod": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_mod(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v2 = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v3 = cgc_pop(operStack);\n
    if (!cgc_isEmpty(operStack))\n
        v2 = cgc_pop(operStack);\n
    if (v3 && v2)\n
    {\n
        if (!cgc_strcmp(*((v3 + 8)), \"Integer\") && !cgc_strcmp(*((v2 + 8)), \"Integer\"))\n
        {\n
            cgc_bzero(&v1, 32);\n
            if (!*((v3 + 16)))\n
            {\n
                v5 = cgc_puts(\"Cannot mod by zero.\");\n
            }\n
            else\n
            {\n
                cgc_int_to_str((*((v2 + 16)) >> 31 CONCAT *((v2 + 16))) /m *((v3 + 16)) >> 32, &v1);\n
                v0 = operStack;\n
                v5 = cgc_push(v0, cgc_lint(&g_408236, &v1));\n
            }\n
            goto LABEL_406ed8;\n
        }\n
        v5 = cgc_printf(\"Mod does not make sense on @s and @s\\n
\", *((v2 + 8)), *((v3 + 8)), a3, a4);\n
LABEL_406ed8:\n
        return v5;\n
    }\n
    v5 = cgc_puts(\"Not enough operands for mod.\");\n
    return v5;\n
}\n
", "4222703:sub_406eef": null, "4222704:cgc_not": "extern unsigned int g_40807f;\n
extern unsigned int g_408115;\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_not()\n
{\n
    unsigned long long v0;  // [bp-0x60]\n
    unsigned long long v1;  // [bp-0x58]\n
    unsigned long long v2;  // [bp-0x50]\n
    unsigned long long v3;  // [bp-0x48]\n
    unsigned long long v4;  // [bp-0x40]\n
    char v5;  // [bp-0x38]\n
    unsigned long long v6[3];  // [bp-0x10], Other Possible Types: unsigned int [5]\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
\n
    v6[0] = 0;\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v8 = cgc_puts(\"Not enough operands for not.\");\n
        return v8;\n
    }\n
    *(&v6[0]) = cgc_pop(operStack);\n
    if (cgc_strcmp(*(&v6[2]), \"String\"))\n
    {\n
        if (!cgc_strcmp(*(&v6[2]), \"Integer\"))\n
        {\n
            cgc_bzero(&v5, 32);\n
            cgc_int_to_str(*(&v6[4]) ^ -1, &v5);\n
            v2 = operStack;\n
            v8 = cgc_push(v2, cgc_lint(&g_408236, &v5));\n
        }\n
        else if (*(&v6[4]) == 1)\n
        {\n
            v1 = operStack;\n
            v8 = cgc_push(v1, cgc_lbool(&g_408236, 4227349));\n
        }\n
        else\n
        {\n
            v0 = operStack;\n
            v8 = cgc_push(v0, cgc_lbool(&g_408236, 4227199));\n
        }\n
        return v8;\n
    }\n
    else\n
    {\n
        if (!cgc_strcmp(*(&v6[4]), \"OMG\"))\n
        {\n
            v3 = operStack;\n
            v8 = cgc_push(v3, cgc_lstring(&g_408236, \"BBQ\"));\n
        }\n
        else\n
        {\n
            v4 = operStack;\n
            v8 = cgc_push(v4, cgc_lstring(&g_408236, \"OMG\"));\n
        }\n
        return v8;\n
    }\n
}\n
", "4223162:sub_4070ba": null, "4223168:len": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long len()\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x10]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = 0;\n
    if (cgc_isEmpty(operStack))\n
    {\n
        v4 = cgc_puts(\"Not enough operands for len.\");\n
        return v4;\n
    }\n
    v2 = cgc_pop(operStack);\n
    cgc_bzero(&v1, 32);\n
    cgc_int_to_str(v2->field_18, &v1);\n
    v0 = operStack;\n
    v4 = cgc_push(v0, cgc_lint(&g_408236, &v1));\n
    return v4;\n
}\n
", "4223318:sub_407156": null, "4223328:cgc_equals": "extern unsigned int g_40807f;\n
extern unsigned int g_408115;\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_equals()\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long long v2;  // [bp-0x30]\n
    unsigned long long v3;  // [bp-0x28]\n
    unsigned long long v4;  // [bp-0x20]\n
    unsigned int v5[5];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v6[5];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
\n
    *(&v6[0]) = 0;\n
    *(&v5[0]) = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v6 = cgc_pop(operStack);\n
    if (!cgc_isEmpty(operStack))\n
        v5 = cgc_pop(operStack);\n
    if (v6 && v5)\n
    {\n
        if (!cgc_strcmp(*((v6 + 8)), \"Integer\") && !cgc_strcmp(*((v5 + 8)), \"Integer\"))\n
            goto LABEL_40724c;\n
        if (cgc_strcmp(*((v6 + 8)), \"Boolean\"))\n
        {\n
LABEL_4072c0:\n
            if (!cgc_strcmp(*((v6 + 8)), \"String\") && !cgc_strcmp(*((v5 + 8)), \"String\"))\n
            {\n
                if (!cgc_strcmp(*((v6 + 16)), *((v5 + 16))))\n
                {\n
                    v2 = operStack;\n
                    v8 = cgc_push(v2, cgc_lbool(&g_408236, 4227199));\n
                }\n
                else\n
                {\n
                    v1 = operStack;\n
                    v8 = cgc_push(v1, cgc_lbool(&g_408236, 4227349));\n
                }\n
                goto LABEL_4073a0;\n
            }\n
            v0 = operStack;\n
            v8 = cgc_push(v0, cgc_lbool(&g_408236, 4227349));\n
LABEL_4073a0:\n
        }\n
        else\n
        {\n
            if (!(!cgc_strcmp(*((v5 + 8)), \"Boolean\")))\n
                goto LABEL_4072c0;\n
LABEL_40724c:\n
            if (*((v6 + 16)) == *((v5 + 16)))\n
            {\n
                v4 = operStack;\n
                v8 = cgc_push(v4, cgc_lbool(&g_408236, 4227199));\n
            }\n
            else\n
            {\n
                v3 = operStack;\n
                v8 = cgc_push(v3, cgc_lbool(&g_408236, 4227349));\n
            }\n
        }\n
        return v8;\n
    }\n
    v8 = cgc_puts(\"Not enough operands for equality\");\n
    return v8;\n
}\n
", "4223932:sub_4073bc": null, "4223936:cgc_type": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
extern unsigned long long g_408236;\n
extern unsigned long long operStack;\n
\n
long long cgc_type()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_1 *v3;  // rax, Other Possible Types: unsigned long, unsigned long long\n
\n
    v1 = 0;\n
    v3 = cgc_isEmpty(operStack);\n
    if (!v3)\n
    {\n
        v3 = cgc_pop(operStack);\n
        v1 = v3;\n
    }\n
    if (v1)\n
    {\n
        v0 = operStack;\n
        v3 = cgc_push(v0, cgc_lstring(&g_408236, *((v1 + 8))));\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4224049:sub_407431": null, "4224064:cgc_terminate": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern unsigned long long operStack;\n
\n
long long cgc_terminate()\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = 0;\n
    if (!cgc_isEmpty(operStack))\n
        v0 = cgc_pop(operStack);\n
    if (v0 && !cgc_strcmp(*((v0 + 8)), \"Integer\"))\n
        cgc__terminate(v2);\n
    cgc__terminate(v2);\n
    return cgc_pop(v2, \"Integer\", v3, v4, v5, v6);\n
}\n
", "4224192:cgc_pop": "long long cgc_pop(unsigned int *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x10]\n
    unsigned int *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = *(&a0[2 + 2 * *(v1)]);\n
    v3 = a0;\n
    *(v3) = *(v3) - 1;\n
    return v0;\n
}\n
", "4224237:sub_4074ed": null, "4224240:cgc_push": "long long cgc_push(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned int *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v2;  // rax\n
\n
    v1 = a0;\n
    if (*(a0) < 31)\n
    {\n
        v2 = a0;\n
        *(v2) = *(v2) + 1;\n
        v1 = a0;\n
        *(&a0[2 + 2 * *(a0)]) = a1;\n
    }\n
    return v1;\n
}\n
", "4224298:sub_40752a": null, "4224304:cgc_isEmpty": "long long cgc_isEmpty(unsigned int *a0)\n
{\n
    return !*(a0);\n
}\n
", "4224329:sub_407549": null, "4224336:cgc_initStack": "long long cgc_initStack()\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = cgc_calloc(264, 1);\n
    if (!v0)\n
    {\n
        cgc_puts(\"Critical memory error.  Corwardly exiting.\");\n
        cgc__terminate(\"Critical memory error.  Corwardly exiting.\");\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4224411:sub_40759b": null, "4224416:cgc_initTrie": "long long cgc_initTrie()\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = cgc_calloc(32, 1);\n
    return v0;\n
}\n
", "4224453:sub_4075c5": null, "4224464:cgc_insertInTrie": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_8[8];\n
    char field_10;\n
    char padding_11[7];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_insertInTrie(struct_0 *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x24]\n
\n
    v2 = a0;\n
    if (!v2->field_0)\n
    {\n
        v2->field_0 = cgc_calloc(32, 1);\n
        v2->field_0->field_10 = *(a1);\n
    }\n
    v2 = v2->field_0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v1 = v3;\n
        if (v1 > cgc_strlen(a1))\n
            break;\n
        for (; *((v2 + 8)); v2 = *((v2 + 8)))\n
        {\n
            if (*((v2 + 16)) == a1[v3])\n
                break;\n
        }\n
        if (*((v2 + 16)) != a1[v3])\n
        {\n
            *((v2 + 8)) = cgc_calloc(32, 1);\n
            *((*((v2 + 8)) + 16)) = a1[v3];\n
            v2 = *((v2 + 8));\n
            while (true)\n
            {\n
                v0 = v3;\n
                if (v0 >= cgc_strlen(a1))\n
                    break;\n
                *(v2) = cgc_calloc(32, 1);\n
                v3 += 1;\n
                v2->field_0->field_10 = a1[v3];\n
                v2 = *(v2);\n
            }\n
        }\n
        else\n
        {\n
            if (!a1[v3])\n
                break;\n
            if (!v2->field_0)\n
            {\n
                *(v2) = cgc_calloc(32, 1);\n
                v2->field_0->field_10 = a1[1 + v3];\n
            }\n
            v2 = *(v2);\n
            v3 += 1;\n
        }\n
    }\n
    *((v2 + 24)) = a2;\n
    return v2;\n
}\n
", "4225008:cgc_findInTrie": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
    char field_10;\n
    char padding_11[7];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_findInTrie(struct_0 *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_0 *v3;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    v2 = a0;\n
    if (!v2->padding_0)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    *(&v2) = v2->padding_0;\n
    while (true)\n
    {\n
        for (v3 = v2; v3; v3 = v3->field_8)\n
        {\n
            if (v3->field_10 == a1[v0])\n
            {\n
                v1 = v3;\n
                break;\n
            }\n
        }\n
        if (!v1)\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
        if (!a1[v0])\n
            break;\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = *(v3);\n
        v0 += 1;\n
    }\n
    if (!*((v1 + 24)))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4225320:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_deallocate": null, "5242944:cgc_log10": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}