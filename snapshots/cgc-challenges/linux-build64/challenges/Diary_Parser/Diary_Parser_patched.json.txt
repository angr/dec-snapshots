{"4202496:_init": "extern struct_0 *g_40a230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a230;\n
    if (g_40a230)\n
        v1 = g_40a230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a250;\n
    goto *(4235864);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4235840);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_40a238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40a240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a240)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203076:sub_402244": null, "4203088:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203344:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203406:sub_40238e": null, "4203408:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v8 = v4;\n
        v4 = (v8 >> 31 CONCAT v8) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v11 = v0;\n
        v0 = v11 - 1;\n
        if (v11 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203633:sub_402471": null, "4203648:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 39;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203855:sub_40254f": null, "4203856:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402851;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402851:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204641:sub_402861": null, "4204656:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_1 **v2;  // [bp-0x150]\n
    struct_2 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned long long *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_0 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_0 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_2 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_2 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_2 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_403276:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    cgc_putc(v27->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 <= 160)\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                else\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    cgc_putc(*(v23));\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_403276;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403113;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403113:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4207245:sub_40328d": null, "4207248:cgc_vsprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_1 **v2;  // [bp-0x160]\n
    struct_2 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    struct struct_1 **v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_0 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_0 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_2 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_2 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v45;  // rcx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    struct struct_1 **v48;  // rax\n
    struct_2 *v49;  // rcx\n
    struct struct_1 **v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_403d7b:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[1];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    a0[v37] = v27->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_403d7b;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403be7;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403be7:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4210066:sub_403d92": null, "4210080:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4210255:sub_403e4f": null, "4210256:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4210420:sub_403ef4": null, "4210432:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4210569:sub_403f89": null, "4210576:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4210752:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4210864:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4210947:sub_404103": null, "4210960:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211011:sub_404143": null, "4211024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211075:sub_404183": null, "4211088:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4211131:sub_4041bb": null, "4211136:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4211179:sub_4041eb": null, "4211184:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211235:sub_404223": null, "4211248:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4211339:sub_40428b": null, "4211344:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4211372:sub_4042ac": null, "4211376:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4211428:sub_4042e4": null, "4211440:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_4044d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_4044d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_4044d9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_404449:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_4044d9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_404449;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_4044d9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4211997:sub_40451d": null, "4212000:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4212392:sub_4046a8": null, "4212400:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4212503:sub_404717": null, "4212512:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4212685:sub_4047cd": null, "4212688:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212806:sub_404846": null, "4212816:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 -= 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4212904:sub_4048a8": null, "4212912:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4213030:sub_404926": null, "4213040:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4213249:sub_404a01": null, "4213264:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4213347:sub_404a63": null, "4213360:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        *((a0 + v2)) = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4213537:sub_404b21": null, "4213552:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x29]\n
    void* v1;  // [bp-0x28]\n
    char *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, v4, v5))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        *((a0 + v2)) = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4213702:sub_404bc6": null, "4213712:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4213874:sub_404c72": null, "4213888:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4214120:sub_404d68": null, "4214128:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4214210:sub_404dc2": null, "4214224:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4214340:sub_404e44": null, "4214352:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4215062:sub_405116": null, "4215072:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4215155:sub_405173": null, "4215168:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4215317:sub_405215": null, "4215328:cgc_calloc": "long long cgc_calloc(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_malloc(a0 * a1);\n
    cgc_memset(*(&v0), 0, a0 * a1);\n
    return *(&v0);\n
}\n
", "4215392:cgc_malloc": "extern char cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    unsigned long v1;  // [bp-0x30]\n
    char v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x10]\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        *(cgc_heap_manager) = 0x1000;\n
        *((cgc_heap_manager + 16)) = 8;\n
        *((cgc_heap_manager + 8)) = 0x1000 - *((cgc_heap_manager + 16));\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(*((cgc_heap_manager + 24)), 0, 0x1000);\n
        v3 = *((cgc_heap_manager + 24));\n
        *(v3) = 4072;\n
        *((v3 + 8)) = 0;\n
    }\n
    v3 = *((cgc_heap_manager + 24));\n
    if (a0 > *(v3))\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (!*((v3 + 8)))\n
        {\n
            cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
            cgc__terminate(\"Not enough space available to allocate more heap.  Failure.\");\n
        }\n
        v3 = *((v3 + 8));\n
        *(v3) = 4072;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        *(v9) = *(v9) - a0;\n
        v1 = v3 + 16;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v1 + 8)) & 1))\n
                v0 = *(v1) < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = v1 + 16 + *(v1);\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = v1 + 16;\n
        return v4;\n
    }\n
}\n
", "4215874:sub_405442": null, "4215888:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4215950:sub_40548e": null, "4215952:cgc_read_short": "long long cgc_read_short()\n
{\n
    char v0;  // [bp-0xc]\n
    unsigned short v1;  // [bp-0xa]\n
\n
    if (cgc_receive_bytes(&v0, 2) != 2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = *(&v0);\n
    return v1;\n
}\n
", "4216013:sub_4054cd": null, "4216016:cgc_populate_entry": "extern char entry_info_table;\n
\n
long long cgc_populate_entry(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char v0)\n
{\n
    *(&(&entry_info_table)[120 * a0 + 8 * a1]) = cgc_malloc(30);\n
    *(*(&(&entry_info_table)[120 * a0 + 8 * a1])) = v0;\n
    *((*(&(&entry_info_table)[120 * a0 + 8 * a1]) + 2)) = a5;\n
    *((*(&(&entry_info_table)[120 * a0 + 8 * a1]) + 3)) = a4;\n
    *((*(&(&entry_info_table)[120 * a0 + 8 * a1]) + 1)) = a3;\n
    cgc_strncpy(*(&(&entry_info_table)[120 * a0 + 8 * a1]) + 4, a2, a3);\n
    return cgc_bzero(a2, 26);\n
}\n
", "4216319:sub_4055ff": null, "4216320:cgc_populate_sub_entry": "extern char sub_entry_info_list;\n
\n
long long cgc_populate_sub_entry(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char v0)\n
{\n
    *(&(&sub_entry_info_list)[120 * a0 + 8 * a1]) = cgc_malloc(30);\n
    *(*(&(&sub_entry_info_list)[120 * a0 + 8 * a1])) = v0;\n
    *((*(&(&sub_entry_info_list)[120 * a0 + 8 * a1]) + 2)) = a5;\n
    *((*(&(&sub_entry_info_list)[120 * a0 + 8 * a1]) + 3)) = a4;\n
    *((*(&(&sub_entry_info_list)[120 * a0 + 8 * a1]) + 1)) = a3;\n
    cgc_strncpy(*(&(&sub_entry_info_list)[120 * a0 + 8 * a1]) + 4, a2, a3);\n
    return cgc_bzero(a2, 26);\n
}\n
", "4216623:sub_40572f": null, "4216624:cgc_populateEntryInfo": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int g_40952b;\n
\n
long long cgc_populateEntryInfo()\n
{\n
    unsigned int v0;  // [bp-0x350]\n
    unsigned int v1;  // [bp-0x34c]\n
    struct_0 *v2;  // [bp-0x348]\n
    unsigned int v3;  // [bp-0x340]\n
    unsigned int v4;  // [bp-0x33c]\n
    struct_0 *v5;  // [bp-0x338]\n
    unsigned int v6;  // [bp-0x330]\n
    unsigned int v7;  // [bp-0x32c]\n
    struct_0 *v8;  // [bp-0x328]\n
    unsigned int v9;  // [bp-0x320]\n
    unsigned int v10;  // [bp-0x31c]\n
    struct_0 *v11;  // [bp-0x318]\n
    unsigned int v12;  // [bp-0x310]\n
    unsigned int v13;  // [bp-0x30c]\n
    struct_0 *v14;  // [bp-0x308]\n
    unsigned int v15;  // [bp-0x300]\n
    unsigned int v16;  // [bp-0x2fc]\n
    struct_0 *v17;  // [bp-0x2f8]\n
    unsigned int v18;  // [bp-0x2f0]\n
    unsigned int v19;  // [bp-0x2ec]\n
    struct_0 *v20;  // [bp-0x2e8]\n
    unsigned int v21;  // [bp-0x2e0]\n
    unsigned int v22;  // [bp-0x2dc]\n
    struct_0 *v23;  // [bp-0x2d8]\n
    unsigned int v24;  // [bp-0x2d0]\n
    unsigned int v25;  // [bp-0x2cc]\n
    struct_0 *v26;  // [bp-0x2c8]\n
    unsigned int v27;  // [bp-0x2c0]\n
    unsigned int v28;  // [bp-0x2bc]\n
    struct_0 *v29;  // [bp-0x2b8]\n
    unsigned int v30;  // [bp-0x2b0]\n
    unsigned int v31;  // [bp-0x2ac]\n
    struct_0 *v32;  // [bp-0x2a8]\n
    unsigned int v33;  // [bp-0x2a0]\n
    unsigned int v34;  // [bp-0x29c]\n
    struct_0 *v35;  // [bp-0x298]\n
    unsigned int v36;  // [bp-0x290]\n
    unsigned int v37;  // [bp-0x28c]\n
    struct_0 *v38;  // [bp-0x288]\n
    unsigned int v39;  // [bp-0x280]\n
    unsigned int v40;  // [bp-0x27c]\n
    struct_0 *v41;  // [bp-0x278]\n
    unsigned int v42;  // [bp-0x270]\n
    unsigned int v43;  // [bp-0x26c]\n
    struct_0 *v44;  // [bp-0x268]\n
    unsigned int v45;  // [bp-0x260]\n
    unsigned int v46;  // [bp-0x25c]\n
    struct_0 *v47;  // [bp-0x258]\n
    unsigned int v48;  // [bp-0x250]\n
    unsigned int v49;  // [bp-0x24c]\n
    struct_0 *v50;  // [bp-0x248]\n
    unsigned int v51;  // [bp-0x240]\n
    unsigned int v52;  // [bp-0x23c]\n
    struct_0 *v53;  // [bp-0x238]\n
    unsigned int v54;  // [bp-0x230]\n
    unsigned int v55;  // [bp-0x22c]\n
    struct_0 *v56;  // [bp-0x228]\n
    unsigned int v57;  // [bp-0x220]\n
    unsigned int v58;  // [bp-0x21c]\n
    struct_0 *v59;  // [bp-0x218]\n
    unsigned int v60;  // [bp-0x210]\n
    unsigned int v61;  // [bp-0x20c]\n
    struct_0 *v62;  // [bp-0x208]\n
    unsigned int v63;  // [bp-0x200]\n
    unsigned int v64;  // [bp-0x1fc]\n
    struct_0 *v65;  // [bp-0x1f8]\n
    unsigned int v66;  // [bp-0x1f0]\n
    unsigned int v67;  // [bp-0x1ec]\n
    struct_0 *v68;  // [bp-0x1e8]\n
    unsigned int v69;  // [bp-0x1e0]\n
    unsigned int v70;  // [bp-0x1dc]\n
    struct_0 *v71;  // [bp-0x1d8]\n
    unsigned int v72;  // [bp-0x1d0]\n
    unsigned int v73;  // [bp-0x1cc]\n
    struct_0 *v74;  // [bp-0x1c8]\n
    unsigned int v75;  // [bp-0x1c0]\n
    unsigned int v76;  // [bp-0x1bc]\n
    struct_0 *v77;  // [bp-0x1b8]\n
    unsigned int v78;  // [bp-0x1b0]\n
    unsigned int v79;  // [bp-0x1ac]\n
    struct_0 *v80;  // [bp-0x1a8]\n
    unsigned int v81;  // [bp-0x1a0]\n
    unsigned int v82;  // [bp-0x19c]\n
    struct_0 *v83;  // [bp-0x198]\n
    unsigned int v84;  // [bp-0x190]\n
    unsigned int v85;  // [bp-0x18c]\n
    struct_0 *v86;  // [bp-0x188]\n
    unsigned int v87;  // [bp-0x180]\n
    unsigned int v88;  // [bp-0x17c]\n
    struct_0 *v89;  // [bp-0x178]\n
    unsigned int v90;  // [bp-0x170]\n
    unsigned int v91;  // [bp-0x16c]\n
    struct_0 *v92;  // [bp-0x168]\n
    unsigned int v93;  // [bp-0x160]\n
    unsigned int v94;  // [bp-0x15c]\n
    struct_0 *v95;  // [bp-0x158]\n
    unsigned int v96;  // [bp-0x150]\n
    unsigned int v97;  // [bp-0x14c]\n
    struct_0 *v98;  // [bp-0x148]\n
    unsigned int v99;  // [bp-0x140]\n
    unsigned int v100;  // [bp-0x13c]\n
    struct_0 *v101;  // [bp-0x138]\n
    unsigned int v102;  // [bp-0x130]\n
    unsigned int v103;  // [bp-0x12c]\n
    struct_0 *v104;  // [bp-0x128]\n
    unsigned int v105;  // [bp-0x120]\n
    unsigned int v106;  // [bp-0x11c]\n
    struct_0 *v107;  // [bp-0x118]\n
    unsigned int v108;  // [bp-0x110]\n
    unsigned int v109;  // [bp-0x10c]\n
    struct_0 *v110;  // [bp-0x108]\n
    unsigned int v111;  // [bp-0x100]\n
    unsigned int v112;  // [bp-0xfc]\n
    struct_0 *v113;  // [bp-0xf8]\n
    unsigned int v114;  // [bp-0xf0]\n
    unsigned int v115;  // [bp-0xec]\n
    struct_0 *v116;  // [bp-0xe8]\n
    unsigned int v117;  // [bp-0xe0]\n
    unsigned int v118;  // [bp-0xdc]\n
    struct_0 *v119;  // [bp-0xd8]\n
    unsigned int v120;  // [bp-0xd0]\n
    unsigned int v121;  // [bp-0xcc]\n
    struct_0 *v122;  // [bp-0xc8]\n
    unsigned int v123;  // [bp-0xc0]\n
    unsigned int v124;  // [bp-0xbc]\n
    struct_0 *v125;  // [bp-0xb8]\n
    unsigned int v126;  // [bp-0xb0]\n
    unsigned int v127;  // [bp-0xac]\n
    struct_0 *v128;  // [bp-0xa8]\n
    unsigned int v129;  // [bp-0xa0]\n
    unsigned int v130;  // [bp-0x9c]\n
    struct_0 *v131;  // [bp-0x98]\n
    unsigned int v132;  // [bp-0x90]\n
    unsigned int v133;  // [bp-0x8c]\n
    struct_0 *v134;  // [bp-0x88]\n
    unsigned int v135;  // [bp-0x80]\n
    unsigned int v136;  // [bp-0x7c]\n
    struct_0 *v137;  // [bp-0x78]\n
    unsigned int v138;  // [bp-0x70]\n
    unsigned int v139;  // [bp-0x6c]\n
    struct_0 *v140;  // [bp-0x68]\n
    unsigned int v141;  // [bp-0x60]\n
    unsigned int v142;  // [bp-0x5c]\n
    struct_0 *v143;  // [bp-0x58]\n
    unsigned int v144;  // [bp-0x50]\n
    unsigned int v145;  // [bp-0x4c]\n
    struct_0 *v146;  // [bp-0x48]\n
    unsigned int v147;  // [bp-0x40]\n
    unsigned int v148;  // [bp-0x3c]\n
    struct_0 *v149;  // [bp-0x38]\n
    unsigned int v150;  // [bp-0x30]\n
    unsigned int v151;  // [bp-0x2c]\n
    char v152;  // [bp-0x28]\n
\n
    cgc_bzero(&v152, 26);\n
    v151 = 0;\n
    v150 = 0;\n
    cgc_strcpy(&v152, \"first name\");\n
    v0 = v150;\n
    v1 = v151;\n
    v151 = v1 + 1;\n
    v2 = &v152;\n
    cgc_populate_entry(v0, v1, v2, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"middle name\");\n
    v3 = v150;\n
    v4 = v151;\n
    v151 = v4 + 1;\n
    v5 = &v152;\n
    cgc_populate_entry(v3, v4, v5, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"last name\");\n
    v6 = v150;\n
    v7 = v151;\n
    v151 = v7 + 1;\n
    v8 = &v152;\n
    cgc_populate_entry(v6, v7, v8, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"age\");\n
    v9 = v150;\n
    v10 = v151;\n
    v151 = v10 + 1;\n
    v11 = &v152;\n
    cgc_populate_entry(v9, v10, v11, cgc_strlen(&v152), 1, 0, 0);\n
    cgc_strcpy(&v152, \"weight\");\n
    v12 = v150;\n
    v13 = v151;\n
    v151 = v13 + 1;\n
    v14 = &v152;\n
    cgc_populate_entry(v12, v13, v14, cgc_strlen(&v152), 0, 0, 1);\n
    cgc_strcpy(&v152, \"birth country\");\n
    v15 = v150;\n
    v16 = v151;\n
    v151 = v16 + 1;\n
    v17 = &v152;\n
    cgc_populate_entry(v15, v16, v17, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"birth state\");\n
    v18 = v150;\n
    v19 = v151;\n
    v151 = v19 + 1;\n
    v20 = &v152;\n
    cgc_populate_entry(v18, v19, v20, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"birth city\");\n
    v21 = v150;\n
    v22 = v151;\n
    v151 = v22 + 1;\n
    v23 = &v152;\n
    cgc_populate_entry(v21, v22, v23, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"married\");\n
    v24 = v150;\n
    v25 = v151;\n
    v151 = v25 + 1;\n
    v26 = &v152;\n
    cgc_populate_entry(v24, v25, v26, cgc_strlen(&v152), 0, 0, 4);\n
    v151 = 0;\n
    v150 = 1;\n
    cgc_strcpy(&v152, \"title\");\n
    v27 = v150;\n
    v28 = v151;\n
    v151 = v28 + 1;\n
    v29 = &v152;\n
    cgc_populate_entry(v27, v28, v29, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"actor\");\n
    v30 = v150;\n
    v31 = v151;\n
    v151 = v31 + 1;\n
    v32 = &v152;\n
    cgc_populate_entry(v30, v31, v32, cgc_strlen(&v152), 0, 1, 3);\n
    cgc_strcpy(&v152, \"director\");\n
    v33 = v150;\n
    v34 = v151;\n
    v151 = v34 + 1;\n
    v35 = &v152;\n
    cgc_populate_entry(v33, v34, v35, cgc_strlen(&v152), 0, 1, 3);\n
    cgc_strcpy(&v152, \"producer\");\n
    v36 = v150;\n
    v37 = v151;\n
    v151 = v37 + 1;\n
    v38 = &v152;\n
    cgc_populate_entry(v36, v37, v38, cgc_strlen(&v152), 0, 1, 3);\n
    cgc_strcpy(&v152, \"year released\");\n
    v39 = v150;\n
    v40 = v151;\n
    v151 = v40 + 1;\n
    v41 = &v152;\n
    cgc_populate_entry(v39, v40, v41, cgc_strlen(&v152), 0, 0, 1);\n
    cgc_strcpy(&v152, \"plot summary\");\n
    v42 = v150;\n
    v43 = v151;\n
    v151 = v43 + 1;\n
    v44 = &v152;\n
    cgc_populate_entry(v42, v43, v44, cgc_strlen(&v152), 1, 0, 3);\n
    v151 = 0;\n
    v150 = 2;\n
    cgc_strcpy(&v152, \"make\");\n
    v45 = v150;\n
    v46 = v151;\n
    v151 = v46 + 1;\n
    v47 = &v152;\n
    cgc_populate_entry(v45, v46, v47, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"model\");\n
    v48 = v150;\n
    v49 = v151;\n
    v151 = v49 + 1;\n
    v50 = &v152;\n
    cgc_populate_entry(v48, v49, v50, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"color\");\n
    v51 = v150;\n
    v52 = v151;\n
    v151 = v52 + 1;\n
    v53 = &v152;\n
    cgc_populate_entry(v51, v52, v53, cgc_strlen(&v152), 0, 1, 3);\n
    cgc_strcpy(&v152, \"displacement\");\n
    v54 = v150;\n
    v55 = v151;\n
    v151 = v55 + 1;\n
    v56 = &v152;\n
    cgc_populate_entry(v54, v55, v56, cgc_strlen(&v152), 0, 0, 1);\n
    cgc_strcpy(&v152, \"displacement units\");\n
    v57 = v150;\n
    v58 = v151;\n
    v151 = v58 + 1;\n
    v59 = &v152;\n
    cgc_populate_entry(v57, v58, v59, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"doors\");\n
    v60 = v150;\n
    v61 = v151;\n
    v151 = v61 + 1;\n
    v62 = &v152;\n
    cgc_populate_entry(v60, v61, v62, cgc_strlen(&v152), 1, 0, 0);\n
    v151 = 0;\n
    v150 = 3;\n
    cgc_strcpy(&v152, \"author\");\n
    v63 = v150;\n
    v64 = v151;\n
    v151 = v64 + 1;\n
    v65 = &v152;\n
    cgc_populate_entry(v63, v64, v65, cgc_strlen(&v152), 1, 1, 3);\n
    cgc_strcpy(&v152, \"year\");\n
    v66 = v150;\n
    v67 = v151;\n
    v151 = v67 + 1;\n
    v68 = &v152;\n
    cgc_populate_entry(v66, v67, v68, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"summary\");\n
    v69 = v150;\n
    v70 = v151;\n
    v151 = v70 + 1;\n
    v71 = &v152;\n
    cgc_populate_entry(v69, v70, v71, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"publisher\");\n
    v72 = v150;\n
    v73 = v151;\n
    v151 = v73 + 1;\n
    v74 = &v152;\n
    cgc_populate_entry(v72, v73, v74, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"character\");\n
    v75 = v150;\n
    v76 = v151;\n
    v151 = v76 + 1;\n
    v77 = &v152;\n
    cgc_populate_entry(v75, v76, v77, cgc_strlen(&v152), 0, 1, 3);\n
    cgc_strcpy(&v152, \"made into a movie\");\n
    v78 = v150;\n
    v79 = v151;\n
    v151 = v79 + 1;\n
    v80 = &v152;\n
    cgc_populate_entry(v78, v79, v80, cgc_strlen(&v152), 1, 0, 4);\n
    v151 = 0;\n
    v150 = 4;\n
    cgc_strcpy(&v152, \"writer\");\n
    v81 = v150;\n
    v82 = v151;\n
    v151 = v82 + 1;\n
    v83 = &v152;\n
    cgc_populate_entry(v81, v82, v83, cgc_strlen(&v152), 1, 1, 3);\n
    cgc_strcpy(&v152, \"year\");\n
    v84 = v150;\n
    v85 = v151;\n
    v151 = v85 + 1;\n
    v86 = &v152;\n
    cgc_populate_entry(v84, v85, v86, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"genre\");\n
    v87 = v150;\n
    v88 = v151;\n
    v151 = v88 + 1;\n
    v89 = &v152;\n
    cgc_populate_entry(v87, v88, v89, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"publisher\");\n
    v90 = v150;\n
    v91 = v151;\n
    v151 = v91 + 1;\n
    v92 = &v152;\n
    cgc_populate_entry(v90, v91, v92, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"free online\");\n
    v93 = v150;\n
    v94 = v151;\n
    v151 = v94 + 1;\n
    v95 = &v152;\n
    cgc_populate_entry(v93, v94, v95, cgc_strlen(&v152), 1, 0, 4);\n
    v151 = 0;\n
    v150 = 5;\n
    cgc_strcpy(&v152, \"title\");\n
    v96 = v150;\n
    v97 = v151;\n
    v151 = v97 + 1;\n
    v98 = &v152;\n
    cgc_populate_entry(v96, v97, v98, cgc_strlen(&v152), 1, 1, 3);\n
    cgc_strcpy(&v152, \"years\");\n
    v99 = v150;\n
    v100 = v151;\n
    v151 = v100 + 1;\n
    v101 = &v152;\n
    cgc_populate_entry(v99, v100, v101, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"job category\");\n
    v102 = v150;\n
    v103 = v151;\n
    v151 = v103 + 1;\n
    v104 = &v152;\n
    cgc_populate_entry(v102, v103, v104, cgc_strlen(&v152), 0, 0, 3);\n
    cgc_strcpy(&v152, \"company\");\n
    v105 = v150;\n
    v106 = v151;\n
    v151 = v106 + 1;\n
    v107 = &v152;\n
    cgc_populate_entry(v105, v106, v107, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"have a best friend\");\n
    v108 = v150;\n
    v109 = v151;\n
    v151 = v109 + 1;\n
    v110 = &v152;\n
    cgc_populate_entry(v108, v109, v110, cgc_strlen(&v152), 0, 0, 4);\n
    cgc_strcpy(&v152, \"salary\");\n
    v111 = v150;\n
    v112 = v151;\n
    v151 = v112 + 1;\n
    v113 = &v152;\n
    cgc_populate_entry(v111, v112, v113, cgc_strlen(&v152), 1, 0, 2);\n
    v151 = 0;\n
    v150 = 6;\n
    cgc_strcpy(&v152, &g_40952b);\n
    v114 = v150;\n
    v115 = v151;\n
    v151 = v115 + 1;\n
    v116 = &v152;\n
    cgc_populate_entry(v114, v115, v116, cgc_strlen(&v152), 0, 0, 5);\n
    cgc_strcpy(&v152, &g_40952b);\n
    v117 = v150;\n
    v118 = v151;\n
    v151 = v118 + 1;\n
    v119 = &v152;\n
    cgc_populate_entry(v117, v118, v119, cgc_strlen(&v152), 0, 0, 5);\n
    cgc_strcpy(&v152, &g_40952b);\n
    v120 = v150;\n
    v121 = v151;\n
    v151 = v121 + 1;\n
    v122 = &v152;\n
    cgc_populate_entry(v120, v121, v122, cgc_strlen(&v152), 0, 0, 5);\n
    cgc_strcpy(&v152, &g_40952b);\n
    v123 = v150;\n
    v124 = v151;\n
    v151 = v124 + 1;\n
    v125 = &v152;\n
    cgc_populate_entry(v123, v124, v125, cgc_strlen(&v152), 0, 0, 5);\n
    cgc_strcpy(&v152, &g_40952b);\n
    v126 = v150;\n
    v127 = v151;\n
    v151 = v127 + 1;\n
    v128 = &v152;\n
    cgc_populate_entry(v126, v127, v128, cgc_strlen(&v152), 0, 0, 5);\n
    cgc_strcpy(&v152, &g_40952b);\n
    v129 = v150;\n
    v130 = v151;\n
    v151 = v130 + 1;\n
    v131 = &v152;\n
    cgc_populate_entry(v129, v130, v131, cgc_strlen(&v152), 0, 0, 5);\n
    v151 = 0;\n
    v150 = 7;\n
    cgc_strcpy(&v152, \"name\");\n
    v132 = v150;\n
    v133 = v151;\n
    v151 = v133 + 1;\n
    v134 = &v152;\n
    cgc_populate_entry(v132, v133, v134, cgc_strlen(&v152), 1, 1, 3);\n
    cgc_strcpy(&v152, \"species\");\n
    v135 = v150;\n
    v136 = v151;\n
    v151 = v136 + 1;\n
    v137 = &v152;\n
    cgc_populate_entry(v135, v136, v137, cgc_strlen(&v152), 1, 0, 3);\n
    cgc_strcpy(&v152, \"legs\");\n
    v138 = v150;\n
    v139 = v151;\n
    v151 = v139 + 1;\n
    v140 = &v152;\n
    cgc_populate_entry(v138, v139, v140, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"inside only\");\n
    v141 = v150;\n
    v142 = v151;\n
    v151 = v142 + 1;\n
    v143 = &v152;\n
    cgc_populate_entry(v141, v142, v143, cgc_strlen(&v152), 0, 0, 4);\n
    cgc_strcpy(&v152, \"age\");\n
    v144 = v150;\n
    v145 = v151;\n
    v151 = v145 + 1;\n
    v146 = &v152;\n
    cgc_populate_entry(v144, v145, v146, cgc_strlen(&v152), 0, 0, 0);\n
    cgc_strcpy(&v152, \"shots updated\");\n
    v147 = v150;\n
    v148 = v151;\n
    v151 = v148 + 1;\n
    v149 = &v152;\n
    return cgc_populate_entry(v147, v148, v149, cgc_strlen(&v152), 1, 0, 4);\n
}\n
", "4221693:sub_406afd": null, "4221696:cgc_populateSubEntryInfo": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_populateSubEntryInfo()\n
{\n
    unsigned int v0;  // [bp-0x300]\n
    unsigned int v1;  // [bp-0x2fc]\n
    struct_0 *v2;  // [bp-0x2f8]\n
    unsigned int v3;  // [bp-0x2f0]\n
    unsigned int v4;  // [bp-0x2ec]\n
    struct_0 *v5;  // [bp-0x2e8]\n
    unsigned int v6;  // [bp-0x2e0]\n
    unsigned int v7;  // [bp-0x2dc]\n
    struct_0 *v8;  // [bp-0x2d8]\n
    unsigned int v9;  // [bp-0x2d0]\n
    unsigned int v10;  // [bp-0x2cc]\n
    struct_0 *v11;  // [bp-0x2c8]\n
    unsigned int v12;  // [bp-0x2c0]\n
    unsigned int v13;  // [bp-0x2bc]\n
    struct_0 *v14;  // [bp-0x2b8]\n
    unsigned int v15;  // [bp-0x2b0]\n
    unsigned int v16;  // [bp-0x2ac]\n
    struct_0 *v17;  // [bp-0x2a8]\n
    unsigned int v18;  // [bp-0x2a0]\n
    unsigned int v19;  // [bp-0x29c]\n
    struct_0 *v20;  // [bp-0x298]\n
    unsigned int v21;  // [bp-0x290]\n
    unsigned int v22;  // [bp-0x28c]\n
    struct_0 *v23;  // [bp-0x288]\n
    unsigned int v24;  // [bp-0x280]\n
    unsigned int v25;  // [bp-0x27c]\n
    struct_0 *v26;  // [bp-0x278]\n
    unsigned int v27;  // [bp-0x270]\n
    unsigned int v28;  // [bp-0x26c]\n
    struct_0 *v29;  // [bp-0x268]\n
    unsigned int v30;  // [bp-0x260]\n
    unsigned int v31;  // [bp-0x25c]\n
    struct_0 *v32;  // [bp-0x258]\n
    unsigned int v33;  // [bp-0x250]\n
    unsigned int v34;  // [bp-0x24c]\n
    struct_0 *v35;  // [bp-0x248]\n
    unsigned int v36;  // [bp-0x240]\n
    unsigned int v37;  // [bp-0x23c]\n
    struct_0 *v38;  // [bp-0x238]\n
    unsigned int v39;  // [bp-0x230]\n
    unsigned int v40;  // [bp-0x22c]\n
    struct_0 *v41;  // [bp-0x228]\n
    unsigned int v42;  // [bp-0x220]\n
    unsigned int v43;  // [bp-0x21c]\n
    struct_0 *v44;  // [bp-0x218]\n
    unsigned int v45;  // [bp-0x210]\n
    unsigned int v46;  // [bp-0x20c]\n
    struct_0 *v47;  // [bp-0x208]\n
    unsigned int v48;  // [bp-0x200]\n
    unsigned int v49;  // [bp-0x1fc]\n
    struct_0 *v50;  // [bp-0x1f8]\n
    unsigned int v51;  // [bp-0x1f0]\n
    unsigned int v52;  // [bp-0x1ec]\n
    struct_0 *v53;  // [bp-0x1e8]\n
    unsigned int v54;  // [bp-0x1e0]\n
    unsigned int v55;  // [bp-0x1dc]\n
    struct_0 *v56;  // [bp-0x1d8]\n
    unsigned int v57;  // [bp-0x1d0]\n
    unsigned int v58;  // [bp-0x1cc]\n
    struct_0 *v59;  // [bp-0x1c8]\n
    unsigned int v60;  // [bp-0x1c0]\n
    unsigned int v61;  // [bp-0x1bc]\n
    struct_0 *v62;  // [bp-0x1b8]\n
    unsigned int v63;  // [bp-0x1b0]\n
    unsigned int v64;  // [bp-0x1ac]\n
    struct_0 *v65;  // [bp-0x1a8]\n
    unsigned int v66;  // [bp-0x1a0]\n
    unsigned int v67;  // [bp-0x19c]\n
    struct_0 *v68;  // [bp-0x198]\n
    unsigned int v69;  // [bp-0x190]\n
    unsigned int v70;  // [bp-0x18c]\n
    struct_0 *v71;  // [bp-0x188]\n
    unsigned int v72;  // [bp-0x180]\n
    unsigned int v73;  // [bp-0x17c]\n
    struct_0 *v74;  // [bp-0x178]\n
    unsigned int v75;  // [bp-0x170]\n
    unsigned int v76;  // [bp-0x16c]\n
    struct_0 *v77;  // [bp-0x168]\n
    unsigned int v78;  // [bp-0x160]\n
    unsigned int v79;  // [bp-0x15c]\n
    struct_0 *v80;  // [bp-0x158]\n
    unsigned int v81;  // [bp-0x150]\n
    unsigned int v82;  // [bp-0x14c]\n
    struct_0 *v83;  // [bp-0x148]\n
    unsigned int v84;  // [bp-0x140]\n
    unsigned int v85;  // [bp-0x13c]\n
    struct_0 *v86;  // [bp-0x138]\n
    unsigned int v87;  // [bp-0x130]\n
    unsigned int v88;  // [bp-0x12c]\n
    struct_0 *v89;  // [bp-0x128]\n
    unsigned int v90;  // [bp-0x120]\n
    unsigned int v91;  // [bp-0x11c]\n
    struct_0 *v92;  // [bp-0x118]\n
    unsigned int v93;  // [bp-0x110]\n
    unsigned int v94;  // [bp-0x10c]\n
    struct_0 *v95;  // [bp-0x108]\n
    unsigned int v96;  // [bp-0x100]\n
    unsigned int v97;  // [bp-0xfc]\n
    struct_0 *v98;  // [bp-0xf8]\n
    unsigned int v99;  // [bp-0xf0]\n
    unsigned int v100;  // [bp-0xec]\n
    struct_0 *v101;  // [bp-0xe8]\n
    unsigned int v102;  // [bp-0xe0]\n
    unsigned int v103;  // [bp-0xdc]\n
    struct_0 *v104;  // [bp-0xd8]\n
    unsigned int v105;  // [bp-0xd0]\n
    unsigned int v106;  // [bp-0xcc]\n
    struct_0 *v107;  // [bp-0xc8]\n
    unsigned int v108;  // [bp-0xc0]\n
    unsigned int v109;  // [bp-0xbc]\n
    struct_0 *v110;  // [bp-0xb8]\n
    unsigned int v111;  // [bp-0xb0]\n
    unsigned int v112;  // [bp-0xac]\n
    struct_0 *v113;  // [bp-0xa8]\n
    unsigned int v114;  // [bp-0xa0]\n
    unsigned int v115;  // [bp-0x9c]\n
    struct_0 *v116;  // [bp-0x98]\n
    unsigned int v117;  // [bp-0x90]\n
    unsigned int v118;  // [bp-0x8c]\n
    struct_0 *v119;  // [bp-0x88]\n
    unsigned int v120;  // [bp-0x80]\n
    unsigned int v121;  // [bp-0x7c]\n
    struct_0 *v122;  // [bp-0x78]\n
    unsigned int v123;  // [bp-0x70]\n
    unsigned int v124;  // [bp-0x6c]\n
    struct_0 *v125;  // [bp-0x68]\n
    unsigned int v126;  // [bp-0x60]\n
    unsigned int v127;  // [bp-0x5c]\n
    struct_0 *v128;  // [bp-0x58]\n
    unsigned int v129;  // [bp-0x50]\n
    unsigned int v130;  // [bp-0x4c]\n
    struct_0 *v131;  // [bp-0x48]\n
    unsigned int v132;  // [bp-0x40]\n
    unsigned int v133;  // [bp-0x3c]\n
    struct_0 *v134;  // [bp-0x38]\n
    unsigned int v135;  // [bp-0x30]\n
    unsigned int v136;  // [bp-0x2c]\n
    char v137;  // [bp-0x28]\n
\n
    cgc_bzero(&v137, 26);\n
    v136 = 0;\n
    v135 = 0;\n
    cgc_strcpy(&v137, \"make\");\n
    v0 = v135;\n
    v1 = v136;\n
    v136 = v1 + 1;\n
    v2 = &v137;\n
    cgc_populate_sub_entry(v0, v1, v2, cgc_strlen(&v137), 1, 1, 3);\n
    cgc_strcpy(&v137, \"model\");\n
    v3 = v135;\n
    v4 = v136;\n
    v136 = v4 + 1;\n
    v5 = &v137;\n
    cgc_populate_sub_entry(v3, v4, v5, cgc_strlen(&v137), 1, 1, 3);\n
    cgc_strcpy(&v137, \"league\");\n
    v6 = v135;\n
    v7 = v136;\n
    v136 = v7 + 1;\n
    v8 = &v137;\n
    cgc_populate_sub_entry(v6, v7, v8, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"length\");\n
    v9 = v135;\n
    v10 = v136;\n
    v136 = v10 + 1;\n
    v11 = &v137;\n
    cgc_populate_sub_entry(v9, v10, v11, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"length units\");\n
    v12 = v135;\n
    v13 = v136;\n
    v136 = v13 + 1;\n
    v14 = &v137;\n
    cgc_populate_sub_entry(v12, v13, v14, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"years experience\");\n
    v15 = v135;\n
    v16 = v136;\n
    v136 = v16 + 1;\n
    v17 = &v137;\n
    cgc_populate_sub_entry(v15, v16, v17, cgc_strlen(&v137), 1, 0, 0);\n
    cgc_strcpy(&v137, \"injury\");\n
    v18 = v135;\n
    v19 = v136;\n
    v136 = v19 + 1;\n
    v20 = &v137;\n
    cgc_populate_sub_entry(v18, v19, v20, cgc_strlen(&v137), 0, 0, 4);\n
    v136 = 0;\n
    v135 = 1;\n
    cgc_strcpy(&v137, \"make\");\n
    v21 = v135;\n
    v22 = v136;\n
    v136 = v22 + 1;\n
    v23 = &v137;\n
    cgc_populate_sub_entry(v21, v22, v23, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"model\");\n
    v24 = v135;\n
    v25 = v136;\n
    v136 = v25 + 1;\n
    v26 = &v137;\n
    cgc_populate_sub_entry(v24, v25, v26, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"value\");\n
    v27 = v135;\n
    v28 = v136;\n
    v136 = v28 + 1;\n
    v29 = &v137;\n
    cgc_populate_sub_entry(v27, v28, v29, cgc_strlen(&v137), 0, 0, 1);\n
    cgc_strcpy(&v137, \"style\");\n
    v30 = v135;\n
    v31 = v136;\n
    v136 = v31 + 1;\n
    v32 = &v137;\n
    cgc_populate_sub_entry(v30, v31, v32, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"blade length\");\n
    v33 = v135;\n
    v34 = v136;\n
    v136 = v34 + 1;\n
    v35 = &v137;\n
    cgc_populate_sub_entry(v33, v34, v35, cgc_strlen(&v137), 1, 0, 0);\n
    cgc_strcpy(&v137, \"length units\");\n
    v36 = v135;\n
    v37 = v136;\n
    v136 = v37 + 1;\n
    v38 = &v137;\n
    cgc_populate_sub_entry(v36, v37, v38, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"comes with sheath\");\n
    v39 = v135;\n
    v40 = v136;\n
    v136 = v40 + 1;\n
    v41 = &v137;\n
    cgc_populate_sub_entry(v39, v40, v41, cgc_strlen(&v137), 0, 0, 4);\n
    cgc_strcpy(&v137, \"injury\");\n
    v42 = v135;\n
    v43 = v136;\n
    v136 = v43 + 1;\n
    v44 = &v137;\n
    cgc_populate_sub_entry(v42, v43, v44, cgc_strlen(&v137), 1, 0, 4);\n
    v136 = 0;\n
    v135 = 2;\n
    cgc_strcpy(&v137, \"name\");\n
    v45 = v135;\n
    v46 = v136;\n
    v136 = v46 + 1;\n
    v47 = &v137;\n
    cgc_populate_sub_entry(v45, v46, v47, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"value\");\n
    v48 = v135;\n
    v49 = v136;\n
    v136 = v49 + 1;\n
    v50 = &v137;\n
    cgc_populate_sub_entry(v48, v49, v50, cgc_strlen(&v137), 1, 0, 1);\n
    cgc_strcpy(&v137, \"seller\");\n
    v51 = v135;\n
    v52 = v136;\n
    v136 = v52 + 1;\n
    v53 = &v137;\n
    cgc_populate_sub_entry(v51, v52, v53, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"mint\");\n
    v54 = v135;\n
    v55 = v136;\n
    v136 = v55 + 1;\n
    v56 = &v137;\n
    cgc_populate_sub_entry(v54, v55, v56, cgc_strlen(&v137), 1, 0, 4);\n
    cgc_strcpy(&v137, \"count\");\n
    v57 = v135;\n
    v58 = v136;\n
    v136 = v58 + 1;\n
    v59 = &v137;\n
    cgc_populate_sub_entry(v57, v58, v59, cgc_strlen(&v137), 1, 0, 0);\n
    v136 = 0;\n
    v135 = 3;\n
    cgc_strcpy(&v137, \"make\");\n
    v60 = v135;\n
    v61 = v136;\n
    v136 = v61 + 1;\n
    v62 = &v137;\n
    cgc_populate_sub_entry(v60, v61, v62, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"model\");\n
    v63 = v135;\n
    v64 = v136;\n
    v136 = v64 + 1;\n
    v65 = &v137;\n
    cgc_populate_sub_entry(v63, v64, v65, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"length\");\n
    v66 = v135;\n
    v67 = v136;\n
    v136 = v67 + 1;\n
    v68 = &v137;\n
    cgc_populate_sub_entry(v66, v67, v68, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"style\");\n
    v69 = v135;\n
    v70 = v136;\n
    v136 = v70 + 1;\n
    v71 = &v137;\n
    cgc_populate_sub_entry(v69, v70, v71, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"initial stability\");\n
    v72 = v135;\n
    v73 = v136;\n
    v136 = v73 + 1;\n
    v74 = &v137;\n
    cgc_populate_sub_entry(v72, v73, v74, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"years experience\");\n
    v75 = v135;\n
    v76 = v136;\n
    v136 = v76 + 1;\n
    v77 = &v137;\n
    cgc_populate_sub_entry(v75, v76, v77, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"highest class\");\n
    v78 = v135;\n
    v79 = v136;\n
    v136 = v79 + 1;\n
    v80 = &v137;\n
    cgc_populate_sub_entry(v78, v79, v80, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"touring\");\n
    v81 = v135;\n
    v82 = v136;\n
    v136 = v82 + 1;\n
    v83 = &v137;\n
    cgc_populate_sub_entry(v81, v82, v83, cgc_strlen(&v137), 0, 0, 4);\n
    cgc_strcpy(&v137, \"surfing\");\n
    v84 = v135;\n
    v85 = v136;\n
    v136 = v85 + 1;\n
    v86 = &v137;\n
    cgc_populate_sub_entry(v84, v85, v86, cgc_strlen(&v137), 0, 0, 4);\n
    cgc_strcpy(&v137, \"tricking\");\n
    v87 = v135;\n
    v88 = v136;\n
    v136 = v88 + 1;\n
    v89 = &v137;\n
    cgc_populate_sub_entry(v87, v88, v89, cgc_strlen(&v137), 0, 0, 4);\n
    cgc_strcpy(&v137, \"injury\");\n
    v90 = v135;\n
    v91 = v136;\n
    v136 = v91 + 1;\n
    v92 = &v137;\n
    cgc_populate_sub_entry(v90, v91, v92, cgc_strlen(&v137), 0, 0, 4);\n
    v136 = 0;\n
    v135 = 4;\n
    cgc_strcpy(&v137, \"name\");\n
    v93 = v135;\n
    v94 = v136;\n
    v136 = v94 + 1;\n
    v95 = &v137;\n
    cgc_populate_sub_entry(v93, v94, v95, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"seller\");\n
    v96 = v135;\n
    v97 = v136;\n
    v136 = v97 + 1;\n
    v98 = &v137;\n
    cgc_populate_sub_entry(v96, v97, v98, cgc_strlen(&v137), 0, 0, 3);\n
    cgc_strcpy(&v137, \"value\");\n
    v99 = v135;\n
    v100 = v136;\n
    v136 = v100 + 1;\n
    v101 = &v137;\n
    cgc_populate_sub_entry(v99, v100, v101, cgc_strlen(&v137), 1, 0, 2);\n
    cgc_strcpy(&v137, \"mint\");\n
    v102 = v135;\n
    v103 = v136;\n
    v136 = v103 + 1;\n
    v104 = &v137;\n
    cgc_populate_sub_entry(v102, v103, v104, cgc_strlen(&v137), 1, 0, 4);\n
    cgc_strcpy(&v137, \"count\");\n
    v105 = v135;\n
    v106 = v136;\n
    v136 = v106 + 1;\n
    v107 = &v137;\n
    cgc_populate_sub_entry(v105, v106, v107, cgc_strlen(&v137), 1, 0, 0);\n
    v136 = 0;\n
    v135 = 5;\n
    cgc_strcpy(&v137, \"name\");\n
    v108 = v135;\n
    v109 = v136;\n
    v136 = v109 + 1;\n
    v110 = &v137;\n
    cgc_populate_sub_entry(v108, v109, v110, cgc_strlen(&v137), 1, 1, 3);\n
    cgc_strcpy(&v137, \"max weight\");\n
    v111 = v135;\n
    v112 = v136;\n
    v136 = v112 + 1;\n
    v113 = &v137;\n
    cgc_populate_sub_entry(v111, v112, v113, cgc_strlen(&v137), 1, 0, 1);\n
    cgc_strcpy(&v137, \"reps\");\n
    v114 = v135;\n
    v115 = v136;\n
    v136 = v115 + 1;\n
    v116 = &v137;\n
    cgc_populate_sub_entry(v114, v115, v116, cgc_strlen(&v137), 0, 0, 0);\n
    cgc_strcpy(&v137, \"sets\");\n
    v117 = v135;\n
    v118 = v136;\n
    v136 = v118 + 1;\n
    v119 = &v137;\n
    cgc_populate_sub_entry(v117, v118, v119, cgc_strlen(&v137), 1, 0, 0);\n
    cgc_strcpy(&v137, \"injury\");\n
    v120 = v135;\n
    v121 = v136;\n
    v136 = v121 + 1;\n
    v122 = &v137;\n
    cgc_populate_sub_entry(v120, v121, v122, cgc_strlen(&v137), 0, 0, 4);\n
    v136 = 0;\n
    v135 = 6;\n
    cgc_strcpy(&v137, \"name\");\n
    v123 = v135;\n
    v124 = v136;\n
    v136 = v124 + 1;\n
    v125 = &v137;\n
    cgc_populate_sub_entry(v123, v124, v125, cgc_strlen(&v137), 1, 0, 3);\n
    cgc_strcpy(&v137, \"position\");\n
    v126 = v135;\n
    v127 = v136;\n
    v136 = v127 + 1;\n
    v128 = &v137;\n
    cgc_populate_sub_entry(v126, v127, v128, cgc_strlen(&v137), 1, 1, 3);\n
    cgc_strcpy(&v137, \"years experience\");\n
    v129 = v135;\n
    v130 = v136;\n
    v136 = v130 + 1;\n
    v131 = &v137;\n
    cgc_populate_sub_entry(v129, v130, v131, cgc_strlen(&v137), 1, 0, 0);\n
    cgc_strcpy(&v137, \"injury\");\n
    v132 = v135;\n
    v133 = v136;\n
    v136 = v133 + 1;\n
    v134 = &v137;\n
    return cgc_populate_sub_entry(v132, v133, v134, cgc_strlen(&v137), 0, 0, 4);\n
}\n
", "4226256:cgc_getEntryInfo": "extern char entry_info_table;\n
extern char sub_entry_info_list;\n
\n
long long cgc_getEntryInfo(unsigned long a0, unsigned int a1, unsigned long a2, char a3[4], unsigned int a4)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!a2)\n
    {\n
        if (*(&(&entry_info_table)[120 * a0 + 8 * a1]))\n
        {\n
            cgc_memcpy(a3, *(&(&entry_info_table)[120 * a0 + 8 * a1]), 30);\n
        }\n
        else\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
    }\n
    else\n
    {\n
        if (*(&(&sub_entry_info_list)[120 * a0 + 8 * a1]))\n
        {\n
            cgc_memcpy(a3, *(&(&sub_entry_info_list)[120 * a0 + 8 * a1]), 30);\n
        }\n
        else\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
    }\n
    if (a3[2] <= 1 && a3[3] <= 1)\n
        goto LABEL_407dd9;\n
    cgc_printf(\"WRONG FORMAT in getEntryInfo\\n
\", a1, 30, a3, a4);\n
LABEL_407dd9:\n
    v0 = 1;\n
    return v0;\n
}\n
", "4226535:sub_407de7": null, "4226544:cgc_verify_entry": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    unsigned short field_3;\n
    unsigned short field_5;\n
} struct_0;\n
\n
extern unsigned int buffer_length;\n
\n
long long cgc_verify_entry(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (a0->field_0 > 15)\n
    {\n
        v0 = 2;\n
        return v0;\n
    }\n
    else if (a0->field_1 <= 5)\n
    {\n
        if (a0->field_1 != 3 && !(a0->field_1 == 2))\n
            goto LABEL_407e8f;\n
        if (*(&(&a0->field_2)[1]) >= buffer_length)\n
        {\n
            v0 = 4;\n
            return v0;\n
        }\n
LABEL_407e8f:\n
        if (a0->field_2 > 26)\n
        {\n
            v0 = 5;\n
            return v0;\n
        }\n
        else if (*((&a0->field_3 + 1)) < buffer_length)\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 6;\n
            return v0;\n
        }\n
    }\n
    else\n
    {\n
        v0 = 3;\n
        return v0;\n
    }\n
}\n
", "4226776:sub_407ed8": null, "4226784:cgc_verify_chapter": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
} struct_0;\n
\n
extern unsigned int buffer_length;\n
\n
long long cgc_verify_chapter(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (a0->field_0 >= 8)\n
    {\n
        v0 = 2;\n
        return v0;\n
    }\n
    else if (a0->field_1 > 15)\n
    {\n
        v0 = 3;\n
        return v0;\n
    }\n
    else if (a0->field_2 >= buffer_length)\n
    {\n
        v0 = 4;\n
        return v0;\n
    }\n
    else if (a0->field_4 < buffer_length)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 5;\n
        return v0;\n
    }\n
}\n
", "4226948:sub_407f84": null, "4226960:cgc_parse_book": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    unsigned short field_3;\n
    unsigned short field_5;\n
} struct_1;\n
\n
extern char entry_info_table;\n
extern char g_40a3f1;\n
extern char g_40a3f2;\n
extern char g_40a3f3;\n
extern char g_40a3f4;\n
extern unsigned short g_40a422;\n
extern unsigned short g_40a424;\n
extern unsigned short g_40a426;\n
extern unsigned short g_40a428;\n
extern unsigned short g_40a42a;\n
extern char prev_read_entries;\n
extern char required_entries;\n
extern char sub_entry_info_list;\n
extern unsigned long long subtitles;\n
extern unsigned short success_info;\n
extern char successful;\n
extern char titles;\n
\n
long long cgc_parse_book(unsigned int *a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    int tmp_18;  // tmp #18\n
    char v0;  // [bp-0xaf]\n
    unsigned short v1;  // [bp-0xae]\n
    unsigned int v2;  // [bp-0xac]\n
    char v3;  // [bp-0xa8]\n
    char v4;  // [bp-0x8f]\n
    char v5;  // [bp-0x8e]\n
    char v6;  // [bp-0x8d]\n
    unsigned int v7;  // [bp-0x8c]\n
    char v8;  // [bp-0x88]\n
    char v9;  // [bp-0x86]\n
    char v10;  // [bp-0x84]\n
    unsigned int v11;  // [bp-0x68]\n
    unsigned int v12;  // [bp-0x64]\n
    unsigned int v13;  // [bp-0x60]\n
    unsigned int v14;  // [bp-0x5c]\n
    struct_0 *v15;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long v16;  // [bp-0x50]\n
    char v17;  // [bp-0x41]\n
    unsigned int *v18;  // [bp-0x40], Other Possible Types: unsigned long long *\n
    unsigned short v19;  // [bp-0x34]\n
    char v20;  // [bp-0x31]\n
    unsigned int v21;  // [bp-0x30]\n
    unsigned short v22;  // [bp-0x2a]\n
    struct_1 *v23;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v24;  // [bp-0x20]\n
    unsigned int v25;  // [bp-0x1c]\n
    unsigned int v26;  // [bp-0xc]\n
    unsigned int *v28;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v29;  // rcx\n
    unsigned int *v30;  // rcx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax\n
    unsigned long v33;  // rcx\n
    struct_1 *v34;  // rax\n
    unsigned long v35;  // rax\n
    unsigned long v36;  // rcx\n
\n
    v25 = a1;\n
    v24 = a2;\n
    v22 = v24;\n
    v21 = 1;\n
    v20 = 0;\n
    v19 = 0;\n
    v17 = 0;\n
    v15 = 0;\n
    while (!v15)\n
    {\n
        v15 = a0 + v22;\n
LABEL_40804f:\n
        v14 = 0;\n
        v28 = v25;\n
        v29 = a0 + v28;\n
        if (v15 + 6 > v29)\n
        {\n
            cgc_printf(\"bad book.\\n
\", a1, v28, v29, a4);\n
            v26 = -1;\n
            return v26;\n
        }\n
        if (*(v15) == 6 && !v20)\n
        {\n
            v30 = *(v15);\n
            cgc_printf(\"Title: @s\\n
\", *((&titles + 0x8 * v30)), v28, v30, a4);\n
            cgc_printf(\"Entry Count: 0x@x\\n
\", *((v15 + 1)), v28, v30, a4);\n
            v18 = &subtitles;\n
            v16 = &sub_entry_info_list;\n
            v22 = *((v15 + 2));\n
            v19 = *((v15 + 4));\n
            v20 = 1;\n
            v17 = 1;\n
            goto LABEL_4088e2;\n
        }\n
        if (!v20)\n
        {\n
            v18 = &titles;\n
            v16 = &entry_info_table;\n
        }\n
        v14 = cgc_verify_chapter(v15);\n
        if (v14)\n
        {\n
            cgc_printf(\"Malformed chapter found! @d Exiting.\\n
\", v14, v28, v29, a4);\n
            cgc__terminate(\"Malformed chapter found! @d Exiting.\\n
\");\n
        }\n
        v31 = *(v15);\n
        cgc_printf(\"Title: @s\\n
\", *(&v18[2 * v31]), v28, v31, a4);\n
        if (*((v15 + 1)) > 15)\n
        {\n
            cgc_printf(\"ERROR: Too many entries: @d\\n
\", *((v15 + 1)), v28, v31, a4);\n
            cgc__terminate(\"ERROR: Too many entries: @d\\n
\");\n
        }\n
        cgc_printf(\"Entry Count: 0x@x\\n
\", *((v15 + 1)), v28, v31, a4);\n
        if (!*((v15 + 2)))\n
        {\n
LABEL_4081ef:\n
            v22 = *((v15 + 4));\n
            cgc_printf(\"NO entries found\\n
\", a1, v28, v31, a4);\n
            goto LABEL_4088e2;\n
        }\n
        else\n
        {\n
            if (!*((v15 + 1)))\n
                goto LABEL_4081ef;\n
            v13 = 1;\n
            v12 = 0;\n
            v21 = 1;\n
            v23 = a0 + *((v15 + 2));\n
            v14 = cgc_verify_entry(v23);\n
            if (v14)\n
            {\n
                cgc_printf(\"Malformed entry found! @d Exiting.\\n
\", v14, v28, v31, a4);\n
                cgc__terminate(\"Malformed entry found! @d Exiting.\\n
\");\n
            }\n
            while (true)\n
            {\n
                v11 = 0;\n
                if (v18 != 4236016)\n
                {\n
                    a1 = *(v23);\n
                    cgc_getEntryInfo(*(v15), a1, 0, &v8, a4);\n
                }\n
                else\n
                {\n
                    a1 = *(v23);\n
                    cgc_getEntryInfo(*(v15), a1, 1, &v8, a4);\n
                }\n
                if (v21)\n
                {\n
                    cgc_memset(&prev_read_entries, 4294967295, *((v15 + 1)));\n
                    cgc_memset(&required_entries, 4294967295, 0xf);\n
                    v21 = 0;\n
                    v12 = 0;\n
                    required_entries = 0;\n
                    for (v7 = 0; v7 < 15; v7 += 1)\n
                    {\n
                        if (*((v16 + *(v15) * 120 + (v7 << 3))) && *((*((v16 + *(v15) * 120 + (v7 << 3))) + 3)) == 1)\n
                        {\n
                            v32 = v13;\n
                            v13 = v32 + 1;\n
                            (&required_entries)[v32] = v7;\n
                        }\n
                    }\n
                    v13 -= 1;\n
                    required_entries = v13;\n
                }\n
                for (v6 = 1; v6 <= v13; v6 += 1)\n
                {\n
                    v28 = v6;\n
                    if (v23->field_0 == (&required_entries)[v28])\n
                    {\n
                        (&required_entries)[v6] = 70;\n
                        required_entries = required_entries - 1;\n
                    }\n
                }\n
                for (v5 = 1; v5 <= v12; v5 += 1)\n
                {\n
                    v28 = v5;\n
                    v33 = (&prev_read_entries)[v28];\n
                    if (v23->field_0 == v33 && v9 != 1)\n
                    {\n
                        cgc_printf(\"Duplicate entry found! Exiting...\\n
\", a1, v28, v33, a4);\n
                        cgc__terminate(\"Duplicate entry found! Exiting...\\n
\");\n
                    }\n
                }\n
                v34 = v23;\n
                tmp_18 = v34->field_0;\n
                *(&v28) = v34->field_0;\n
                v35 = v12;\n
                v12 = v35 + 1;\n
                (&prev_read_entries)[v35] = tmp_18;\n
                v36 = v23->field_1;\n
                if (v8 != v36)\n
                {\n
                    v28 = v23->field_1;\n
                    cgc_printf(\"WRONG FORMAT: @d vs @d\\n
\", v8, v28, v36, a4);\n
                    cgc__terminate(\"WRONG FORMAT: @d vs @d\\n
\");\n
                }\n
                if (*(v15) == 7 && !v23->field_0)\n
                {\n
                    if (g_40a3f3 == -1)\n
                        g_40a3f3 = 1;\n
                    if (!g_40a3f3)\n
                        g_40a3f3 = 255;\n
                }\n
                if (*(v15) == 5 && v23->field_0 == 1 && *(&(&v23->field_2)[1]) > 20)\n
                    g_40a3f4 = 1;\n
                if (v8 == 3)\n
                {\n
                    a1 = a0 + *(&(&v23->field_2)[1]);\n
                    v28 = v23->field_2;\n
                    cgc_memcpy(&v3, a1, v28);\n
                    if (v23->field_2 >= 26)\n
                        v4 = 0;\n
                    else\n
                        (&v3)[v23->field_2] = 0;\n
                    cgc_printf(\"@s: @s\\n
\", &v10, &v3, v36, a4);\n
                    v11 = v23->field_2 + v11;\n
                }\n
                else if (v8 == 2)\n
                {\n
                    v36 = *(&(&v23->field_2)[1]);\n
                    v2 = *((a0 + v36));\n
                    v28 = v2;\n
                    cgc_printf(\"@s: 0x@x\\n
\", &v10, v28, v36, a4);\n
                    v11 += 4;\n
                }\n
                else if (v8 != 4)\n
                {\n
                    v28 = *(&(&v23->field_2)[1]);\n
                    cgc_printf(\"@s: 0x@x\\n
\", &v10, v28, v36, a4);\n
                }\n
                else\n
                {\n
                    v1 = *(&(&v23->field_2)[1]);\n
                    if (v1 == 1)\n
                    {\n
                        cgc_printf(\"@s: true\\n
\", &v10, v28, v36, a4);\n
                    }\n
                    else if (v1)\n
                    {\n
                        v28 = v1;\n
                        cgc_printf(\"@s!!: 0x@x\\n
\", &v10, v28, v36, a4);\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(\"@s: false\\n
\", &v10, v28, v36, a4);\n
                    }\n
                    v11 = v11;\n
                }\n
                if (!*(v15))\n
                {\n
                    if (v23->field_0 != 8)\n
                    {\n
                        if (v23->field_0 == 3 && *(&(&v23->field_2)[1]) < 11)\n
                        {\n
                            g_40a3f2 = 1;\n
                            g_40a428 = *(&(&v23->field_2)[1]);\n
                            g_40a42a = v23->field_2;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (successful == 1)\n
                        {\n
                            g_40a424 = *(&(&v23->field_2)[1]);\n
                            g_40a426 = v23->field_2;\n
                            g_40a3f1 = 1;\n
                        }\n
                        else\n
                        {\n
                            success_info = *(&(&v23->field_2)[1]);\n
                            g_40a422 = v23->field_2;\n
                            successful = 1;\n
                        }\n
                    }\n
                }\n
                if (!*((&v23->field_3 + 1)))\n
                    break;\n
                v23 = a0 + *((&v23->field_3 + 1));\n
                v14 = cgc_verify_entry(v23);\n
                if (v14)\n
                {\n
                    cgc_printf(\"Malformed entry found! @d @d Exiting..\\n
\", v14, v23->field_1, v36, a4);\n
                    cgc__terminate(\"Malformed entry found! @d @d Exiting..\\n
\");\n
                }\n
                if (!v23)\n
                    break;\n
            }\n
            v22 = *((v15 + 4));\n
            if (required_entries)\n
            {\n
                cgc_printf(\"DIDN'T SEND ME ALL THE REQUIRED ENTRIES! @c  \", required_entries, v28, v36, a4);\n
                v26 = -1;\n
                return v26;\n
            }\n
LABEL_4088e2:\n
            v0 = 1;\n
            if (!*((v15 + 4)))\n
                v0 = v20;\n
            if (!(v0 & 1))\n
            {\n
                v26 = 1;\n
                return v26;\n
            }\n
        }\n
    }\n
    if (!*((v15 + 4)) && !v17)\n
    {\n
        if (v20)\n
        {\n
            v20 = 0;\n
            if (!v19)\n
                goto LABEL_4088e2;\n
            v15 = a0 + v19;\n
        }\n
        goto LABEL_408038;\n
    }\n
    v15 = a0 + v22;\n
    v17 = 0;\n
LABEL_408038:\n
    goto LABEL_40804f;\n
}\n
", "4229420:sub_40892c": null, "4229424:cgc_init": "long long cgc_init()\n
{\n
    cgc_populateEntryInfo();\n
    return cgc_populateSubEntryInfo();\n
}\n
", "4229440:cgc_test_win": "extern char successful;\n
\n
long long cgc_test_win(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1a]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v7;  // rdx\n
\n
    v4 = 0;\n
    for (v3 = 0; v3 < 5; v3 = v6)\n
    {\n
        a3 = v3;\n
        if (*((&successful + a3)) == 1)\n
            v4 += 1;\n
        v6 = v3 + 1;\n
    }\n
    if (v4 == 5)\n
    {\n
        v1 = 9;\n
        cgc_printf(\"What is your family's last name?\\n
\", a1, a2, a3, a4);\n
        v7 = v1;\n
        v0 = cgc_receive_until(&v2, 10, v7);\n
        (&v2)[v0] = 0;\n
        v6 = cgc_printf(\"Congratulations, @s family! You have a great diary!\\n
\", &v2, v7, a3, a4);\n
        return v6;\n
    }\n
    return v3 + 1;\n
}\n
", "4229609:sub_4089e9": null, "4229616:main": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned int buffer_length;\n
extern unsigned int success_info;\n
extern unsigned int successful;\n
\n
int main(unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    struct_0 *v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned short v4;  // [bp-0x1e]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rcx\n
    unsigned int v12;  // esi\n
\n
    v8 = 0;\n
    v7 = a0;\n
    *(&v6) = a1;\n
    cgc_init();\n
    cgc_memset(&successful, 0, 0x5);\n
    cgc_memset(&success_info, 0, 0x14);\n
    v5 = 0;\n
    cgc_printf(\"Welcome to the diary logger!\\n
\", 0, 20, a3, a4);\n
    v4 = cgc_read_short();\n
    buffer_length = v4;\n
    if (v4 < 1)\n
    {\n
        cgc_printf(\"Buffer length is too small.\\n
\", 0, 20, a3, a4);\n
        cgc__terminate(\"Buffer length is too small.\\n
\");\n
    }\n
    v3 = cgc_malloc(v4);\n
    if (!v3)\n
    {\n
        cgc_printf(\"Failed to allocate enough space for this buffer.\\n
\", 0, 20, a3, a4);\n
        cgc__terminate(\"Failed to allocate enough space for this buffer.\\n
\");\n
    }\n
    v2 = cgc_receive_bytes(v3, v4);\n
    v10 = v4;\n
    if (v2 != v10)\n
    {\n
        cgc_printf(\"Buffer received is not correct size.\\n
\", a1, 20, v10, a4);\n
        cgc__terminate(\"Buffer received is not correct size.\\n
\");\n
    }\n
    if (v4 < 8)\n
    {\n
        cgc_printf(\"Buffer received is not correct size.\\n
\", a1, 20, v10, a4);\n
        cgc__terminate(\"Buffer received is not correct size.\\n
\");\n
    }\n
    v11 = v5;\n
    v1 = v3 + v11;\n
    v5 += 8;\n
    cgc_printf(\"Length: @d\\n
\", v4, 20, v11, a4);\n
    cgc_printf(\"Magic number: 0x@x\\n
\", v1->field_0, 20, v11, a4);\n
    cgc_printf(\"Future: 0x@x\\n
\", v1->field_2, 20, v11, a4);\n
    cgc_printf(\"Offset: 0x@x\\n
\", v1->field_4, 20, v11, a4);\n
    v12 = v2;\n
    v0 = cgc_parse_book(v3, v12, v1->field_4, v11, a4);\n
    if (v0 == -1)\n
    {\n
        cgc_printf(\"bad book.\\n
\", *(&v12), a2, v11, a4);\n
        v8 = -1;\n
        return v8;\n
    }\n
    cgc_test_win(a0, v12, a2, v11, a4);\n
    cgc_free(v3);\n
    cgc_printf(\"good book.\\n
\", *(&v12), a2, v11, a4);\n
    v8 = 0;\n
    return v8;\n
}\n
", "4230116:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_deallocate": null, "5242936:cgc_log10": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}