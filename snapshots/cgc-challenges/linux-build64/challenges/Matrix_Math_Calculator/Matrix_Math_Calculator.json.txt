{"4202496:_init": "extern struct_0 *g_40bbc8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40bbc8;\n
    if (g_40bbc8)\n
        v1 = g_40bbc8();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40bbe8;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40bbe8;\n
    goto *(4242416);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4242392);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40bbc0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_40bbd0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40bbd8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40bbd8)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 * a0;\n
    if (a1 * a0 > -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_malloc_alloc(&g_heap, v1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(v0, 0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4203018:sub_40220a": null, "4203024:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 1;\n
}\n
", "4203058:sub_402232": null, "4203072:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 2;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 16;\n
}\n
", "4203154:sub_402292": null, "4203168:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 14;\n
}\n
", "4203202:sub_4022c2": null, "4203216:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 12;\n
}\n
", "4203250:sub_4022f2": null, "4203264:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 4;\n
}\n
", "4203298:sub_402322": null, "4203312:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 8;\n
}\n
", "4203346:sub_402352": null, "4203360:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 64;\n
}\n
", "4203394:sub_402382": null, "4203408:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 32;\n
}\n
", "4203442:sub_4023b2": null, "4203456:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 128;\n
}\n
", "4203492:sub_4023e4": null, "4203504:cgc_isxdigit": "long long cgc_isxdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    v2 = a0;\n
    v2 = cgc_toupper(v2);\n
    v1 = 1;\n
    if (cgc_isdigit(v2))\n
        return v1 & 1;\n
    v0 = 0;\n
    if (v2 >= 65)\n
        v0 = v2 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4203595:sub_40244b": null, "4203600:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203671:sub_402497": null, "4203680:cgc_digittoint": "long long cgc_digittoint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 = cgc_toupper(v0);\n
    if (cgc_isdigit(v0))\n
    {\n
        v1 = v0 - 48;\n
        return v1;\n
    }\n
    if (v0 >= 65 && v0 <= 70)\n
    {\n
        v1 = v0 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203786:sub_40250a": null, "4203792:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203863:sub_402557": null, "4203872:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_fflush(a0, v2, v3, v4, v5, v6);\n
}\n
", "4203904:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rcx\n
\n
    v1 = a0;\n
    if (a0->field_8 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a0->field_4 != 1)\n
    {\n
        v0 = 0;\n
        v4 = a0;\n
        ::0x402680::cgc_xlat(v1->field_10, &v1[1].field_8 + v1->field_8, a0->field_c - v4->field_8, v4);\n
        v5 = a0;\n
        if (::0x4026f0::cgc_transmit_all(v1->field_0, &v1[1].field_8 + a0->field_8, v1->field_c - v5->field_8, v5))\n
            v0 = -1;\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = v0;\n
        return v2;\n
    }\n
    else\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4204146:sub_402672": null, "4204160:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204271:sub_4026ef": null, "4204272:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204403:sub_402773": null, "4204416:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    if (a1)\n
        a0[2] = 0;\n
    else\n
        a0[2] = -1;\n
    a0[3] = 0;\n
    return a0;\n
}\n
", "4204519:sub_4027e7": null, "4204528:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(1056);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = (a1 ? 1 : 2);\n
    v0->field_8 = 0;\n
    v0->field_c = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4204679:sub_402887": null, "4204688:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    v5 = a2;\n
    if (a2->field_8 == a2->field_c)\n
        cgc__refill(a2);\n
    if (a2->field_8 != -1)\n
    {\n
        v5 = a2;\n
        v0 = a2->field_c - a2->field_8;\n
        if (v0 > a1)\n
            v0 = a1;\n
        cgc_memcpy(a0, &v2->padding_0[1 + a2->field_8], v0);\n
        v1 = v0 + v1;\n
        v6 = a2;\n
        v6->field_8 = v6->field_8 + v0;\n
        if (v2->field_8 == a2->field_c)\n
        {\n
            a2->field_c = 0;\n
            a2->field_8 = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!v0)\n
            break;\n
        ::0x402ae0::cgc_xlat(a2->field_18, a0 + v1, v0);\n
        v1 = v0 + v1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205061:sub_402a05": null, "4205072:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v7;  // rcx\n
\n
    if (a0->field_8 == a0->field_c)\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
    }\n
    if (!cgc_receive(a0, v3, v4, v5) && *(&v0))\n
    {\n
        v7 = *(&v0);\n
        a0->field_c = v7;\n
        ::0x402ae0::cgc_xlat(a0->field_18, a0 + 1, a0->field_c, v7);\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4205266:sub_402ad2": null, "4205280:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205391:sub_402b4f": null, "4205392:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v2 = 0; v2 < a1 - 1; v2 += 1)\n
    {\n
        v1 = cgc__getc(a3);\n
        if (v1 == -1)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (v1 == a2)\n
            break;\n
        *((a0 + v2)) = v1;\n
    }\n
    if (v2 == a1 - 1)\n
    {\n
        do\n
        {\n
            v0 = cgc__getc(a3);\n
            if (v0 == -1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
        } while (v0 != a2);\n
    }\n
    *((a0 + v2)) = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4205660:sub_402c5c": null, "4205664:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    char *field_18;\n
} struct_0;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v8;  // rcx\n
\n
    if (a0->field_8 == -1)\n
    {\n
        if (!cgc_receive(a0, v4, v5, v6) && *(&v0))\n
        {\n
            ::0x402ae0::cgc_xlat(a0->field_18, &v1, 1);\n
            v2 = v1;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        if (a0->field_8 == a0->field_c && cgc__refill(a0) < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v8 = a0->field_8;\n
        a0->field_8 = v8 + 1;\n
        v2 = a0[1].padding_0[v8];\n
        return v2;\n
    }\n
}\n
", "4205874:sub_402d32": null, "4205888:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4205922:sub_402d62": null, "4205936:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            if (a2->field_c + a1 >= 0x400)\n
            {\n
                v5 = a2->field_c;\n
                v0 = 0x400 - v5;\n
                cgc_memcpy(&v2[1].field_8 + a2->field_c, a0, v0, v5);\n
                v6 = a2;\n
                v6->field_c = v6->field_c + v0;\n
                v1 = v0 + v1;\n
                cgc_fflush(a2);\n
            }\n
            if (v1 < a1)\n
            {\n
                v0 = a1 - v1;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0 + v1, v0);\n
                v7 = a2;\n
                v7->field_c = v7->field_c + v0;\n
                v1 = v0 + v1;\n
            }\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    if (a2->field_10)\n
    {\n
        if (cgc_transmit_xlat(a2->field_0, v2->field_10, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        if (::0x402f30::cgc_transmit_all(a2->field_0, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    v3 = a1;\n
    return v3;\n
}\n
", "4206372:sub_402f24": null, "4206384:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4206515:sub_402fb3": null, "4206528:cgc_transmit_xlat": "long long cgc_transmit_xlat(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x448], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a3)\n
        {\n
            v0 = a3 - v1;\n
            if (v0 > 0x400)\n
                v0 = 0x400;\n
            cgc_memcpy(&v2, a2 + v1, v0);\n
            ::0x4030c0::cgc_xlat(a1, &v2, v0);\n
            if (::0x402f30::cgc_transmit_all(a0, &v2, v0))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206777:sub_4030b9": null, "4206784:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4206895:sub_40312f": null, "4206896:cgc_fxlat": "long long cgc_fxlat(unsigned long long a0[4], unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v7;  // rax\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
    char *v9;  // rax\n
\n
    if (!a1)\n
    {\n
        cgc_free(a0[2]);\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        return a0;\n
    }\n
    v7 = cgc_realloc(a0[2], 0x100);\n
    a0[2] = v7;\n
    v3 = v7;\n
    v9 = cgc_realloc(a0[3], 0x100);\n
    a0[3] = v9;\n
    v2 = v9;\n
    v8 = cgc_hash_seed(a1);\n
    v5 = v8;\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v3[v4] = v4;\n
        v8 = v4 + 1;\n
    }\n
    for (v4 = 255; v4 >= 1; v4 = v8)\n
    {\n
        v1 = (0 CONCAT v5) /m v4 >> 32;\n
        v5 *= 3;\n
        v5 = v5 * 0x2000 ^ (v5 >> 19) ^ (v5 >> 21);\n
        v0 = v3[v4];\n
        v3[v4] = v3[v1];\n
        v3[v1] = v0;\n
        v8 = v4 - 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v2[v3[v4]] = v4;\n
        v8 = v4 + 1;\n
    }\n
    return v8;\n
}\n
", "4207272:sub_4032a8": null, "4207280:cgc_hash_seed": "long long cgc_hash_seed(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 826981510;\n
    for (v1 = 0; a0[v1]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = a0[v1] ^ v0;\n
        v0 = v0 * 0x2000 ^ (v0 >> 19);\n
    }\n
    return v0;\n
}\n
", "4207382:sub_403316": null, "4207392:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4207426:sub_403342": null, "4207440:cgc_malloc_alloc": "long long cgc_malloc_alloc(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20], Other Possible Types: unsigned long long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (v1 > 2147483647)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = v1 - -3 & -4;\n
    if (v1 < 4)\n
    {\n
        v0 = cgc_tiny_alloc(a0, 4);\n
    }\n
    else if (v1 < 16)\n
    {\n
        v0 = cgc_tiny_alloc(a0, v1);\n
    }\n
    else if (v1 < 0x20000)\n
    {\n
        v0 = cgc_small_alloc(a0, v1);\n
    }\n
    else\n
    {\n
        v0 = cgc_large_alloc(a0, v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4207651:sub_403423": null, "4207664:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned long long field_1430;\n
    unsigned long long field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_tiny_alloc(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40]\n
    unsigned short v1[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned long long *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned short v7[2];  // rax\n
    struct_0 *v8;  // rax\n
    unsigned short v9[2];  // rax\n
\n
    v4 = a0;\n
    v3 = cgc_size_to_bin(a1);\n
    v2 = &(&a0->field_0)[v3]->field_0;\n
    if (v2)\n
    {\n
        (&a0->field_0)[v3] = *(v2);\n
        v5 = v2;\n
        return v5;\n
    }\n
    *(&v1) = *(&a0->padding_8[5136 + 8 * v3]);\n
    if (!v1)\n
    {\n
        if (!a0->field_1430)\n
        {\n
            a0->field_1430 = cgc_run_alloc(a0, 1);\n
            if (!a0->field_1430)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a0->field_1438 = 0;\n
        }\n
        v7 = v4->field_1430 + a0->field_1438;\n
        *(&a0->padding_8[5136 + 8 * v3]) = v7;\n
        v1 = v7;\n
        *(v1) = a1;\n
        *((v1 + 2)) = a1;\n
        v8 = a0;\n
        v8->field_1438 = v8->field_1438 + 0x1000;\n
        if (a0->field_1438 == 0x100000)\n
            a0->field_1430 = 0;\n
    }\n
    v0 = v1 + *((v1 + 2));\n
    v9 = v1;\n
    v9[1] = v9[1] + a1;\n
    if (*((v1 + 2)) + *(v1) > 0x1000)\n
        *(&a0->padding_8[5136 + 8 * v3]) = 0;\n
    v5 = v0;\n
    return v5;\n
}\n
", "4208118:sub_4035f6": null, "4208128:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_alloc(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 - -31 & -0x10;\n
    for (v2 = cgc_size_to_bin(v1); v2 < 131; v2 += 1)\n
    {\n
        for (v0 = a0[v2]; v0; v0 = v0->field_18)\n
        {\n
            if (v0->field_8 >= v1)\n
                break;\n
        }\n
        if (v0)\n
            break;\n
    }\n
    if (v2 == 131)\n
    {\n
        if (!cgc_small_alloc_run(a0))\n
        {\n
            v2 = 130;\n
            v0 = a0[v2];\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    cgc_small_unlink_free(a0, v2, v0);\n
    if (*((v0 + 8)) - v1 > 32)\n
        cgc_small_split(a0, v0, v1);\n
    v3 = v0 + 16;\n
    return v3;\n
}\n
", "4208444:sub_40373c": null, "4208448:cgc_large_alloc": "long long cgc_large_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v2 = a1 - -4111 & -0x1000;\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0[0] = *(&v1);\n
    v0[0] = a0;\n
    v0[1] = v2;\n
    v3 = v0 + 1;\n
    return v3;\n
}\n
", "4208582:sub_4037c6": null, "4208592:malloc_free": "long long malloc_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return *((a0 + (a1 >> 20) + 1048));\n
    }\n
    else if (v0)\n
    {\n
        if (v0 == 2)\n
        {\n
            v2 = cgc_small_free(a0, a1);\n
        }\n
        else if (v0 == 1)\n
        {\n
            v2 = cgc_tiny_free(a0, a1);\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_large_free(a0, a1);\n
        return v2;\n
    }\n
}\n
", "4208763:sub_40387b": null, "4208768:cgc_large_free": "long long cgc_large_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
\n
    if ((a1 & 4095) != 16)\n
        cgc_heap_error(\"BAD FREE: large address is not aligned ptr=%08X\\n
\", a1);\n
    v0[0] = a1 - 16;\n
    if (v0[0] != a0)\n
        cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1, v0[0], a0);\n
    if (v0[1] >= 0x20000 && v0[1] <= 2147487743 && !(v0[1] & 4095))\n
        return cgc_deallocate(a0, a1);\n
    cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", a1, v0[1]);\n
    return cgc_deallocate(a0, a1);\n
}\n
", "4208994:sub_403962": null, "4209008:cgc_small_free": "long long cgc_small_free(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x58]\n
    unsigned long long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4[2];  // [bp-0x38]\n
    unsigned long long v5[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v6[2];  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[2];  // rax\n
\n
    v6[0] = a1 - 16;\n
    v3 = a1 & -0x100000;\n
    if ((a1 & 7))\n
        cgc_heap_error(\"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\", a1);\n
    if ((v6[1] & 1))\n
        cgc_heap_error(\"BAD SMALL FREE: double free ptr=%08x\\n
\", a1);\n
    if (v6[1] <= 0x20000 && !(v6[1] < 16))\n
        goto LABEL_403a19;\n
    cgc_heap_error(\"BAD SMALL FREE: corrupted size ptr=%08x\\n
\", a1);\n
LABEL_403a19:\n
    if (!v6[0])\n
        v5[0] = 0;\n
    else\n
        v5 = v6 - v6[0];\n
    v4[0] = v6 + v6[1];\n
    if (v5 && (*((v5 + 8)) & -2) != v6[0])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\", v5, a1);\n
    if (v4[0] != v6[1])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v4, a1);\n
    if (v5 && (*((v5 + 8)) & 1))\n
    {\n
        v2 = a0;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin(*((v5 + 8)) & -2), v5);\n
        v8 = v5;\n
        v8[1] = v6[1] + v8[1];\n
        v6 = v5;\n
        v4[0] = *((v6 + 8));\n
    }\n
    if ((v4[1] & 1))\n
    {\n
        v1 = a0;\n
        cgc_small_unlink_free(v1, cgc_size_to_bin(v4[1] & -2), v4);\n
        v9 = v6;\n
        v9[1] = v4[1] + v9[1];\n
        v4[0] = v6 + v6[1];\n
        v4[0] = *((v6 + 8));\n
    }\n
    v0 = a0;\n
    return cgc_small_insert_free(v0, cgc_size_to_bin(*((v6 + 8))), v6);\n
}\n
", "4209615:sub_403bcf": null, "4209616:cgc_tiny_free": "long long cgc_tiny_free(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned short *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v0 = a1 & -0x1000;\n
    v1 = cgc_size_to_bin(*(v0));\n
    *(a1) = a0[v1];\n
    a0[v1] = a1;\n
    return a0;\n
}\n
", "4209713:sub_403c31": null, "4209728:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned short *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a1 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = a1 - 16;\n
    v3 = v1->field_8 - 16;\n
    return v3;\n
}\n
", "4209884:sub_403cdc": null, "4209888:cgc_malloc_realloc": "long long cgc_malloc_realloc(unsigned long a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a2 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        v3 = cgc_malloc_alloc(a0, a2);\n
        return v3;\n
    }\n
    else if (cgc_malloc_size(a0, a1) < a2)\n
    {\n
        v2 = cgc_malloc_alloc(a0, a2);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = v2;\n
        v1 = a1;\n
        cgc_memcpy(v0, v1, cgc_malloc_size(a0, a1));\n
        malloc_free(a0, a1);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        return v3;\n
    }\n
}\n
", "4210158:sub_403dee": null, "4210160:cgc_size_to_bin": "long long cgc_size_to_bin(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 16)\n
    {\n
        v0 = a0 / 4 - 1;\n
        return v0;\n
    }\n
    else if (a0 <= 0x200)\n
    {\n
        v0 = a0 / 16 - -2;\n
        return v0;\n
    }\n
    else if (a0 <= 0x1200)\n
    {\n
        v0 = (a0 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (a0 <= 0x20000)\n
    {\n
        v0 = (a0 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210343:sub_403ea7": null, "4210352:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(&v0);\n
    v1 = v2 - -1048575 & -0x100000;\n
    if (v2 < v1)\n
        cgc_deallocate(a0, a1);\n
    if (v1 + 0x100000 < v2 + 0x200000)\n
        cgc_deallocate(a0, a1);\n
    *((a0 + (v1 >> 20) + 1048)) = a1;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4210579:sub_403f93": null, "4210592:cgc_small_alloc_run": "long long cgc_small_alloc_run(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned long long v2[2];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v0 = cgc_run_alloc(a0, 2);\n
    if (!v0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    v2[0] = v0 - -19 & -0x10;\n
    v2[0] = 0;\n
    v2[1] = 0x100000 - (v2 - v0) - 32;\n
    v1[0] = v2 + v2[1];\n
    v5 = v2[1];\n
    v1[0] = v5;\n
    v1[1] = 0;\n
    cgc_small_insert_free(a0, 130, v2, v5);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4210796:sub_40406c": null, "4210800:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    struct_2 *v2;  // rax\n
\n
    v0 = a2;\n
    if (!(a2->field_8 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    v2 = a2;\n
    v2->field_8 = v2->field_8 & -2;\n
    if (a2->field_10)\n
        a2->field_10->field_18 = v0->field_18;\n
    if (a2->field_18)\n
        v0->field_18->field_10 = a2->field_10;\n
    if (a0[a1] == a2)\n
        a0[a1] = a2->field_18;\n
    a2->field_10 = 0;\n
    a2->field_18 = 0;\n
    return a2;\n
}\n
", "4211019:sub_40414b": null, "4211024:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_small_split(unsigned long long a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
\n
    *(&v2) = a1->field_8 - a2;\n
    v1[0] = &a1->padding_0[a2];\n
    v0 = &a1->padding_0[a1->field_8];\n
    a1->field_8 = a2;\n
    v1[0] = a1->field_8;\n
    v1[1] = *(&v2);\n
    *(v0) = *(&v2);\n
    return cgc_small_insert_free(a0, cgc_size_to_bin(*(&v2)), v1);\n
}\n
", "4211180:sub_4041ec": null, "4211184:cgc_small_insert_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if ((a2->field_8 & 1) == 1)\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    v1 = a2;\n
    v1->field_8 = v1->field_8 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = *((a0 + a1 * 8));\n
    *((a0 + a1 * 8)) = a2;\n
    v2 = a2;\n
    if (a2->field_18)\n
    {\n
        v2 = a2->field_18;\n
        *((v2 + 16)) = a2;\n
    }\n
    return v2;\n
}\n
", "4211346:sub_404292": null, "4211360:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct_0 *v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    cgc_vfprintf(cgc_stderr, a0, &v14, &v18);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, a2, a3, a4, v28);\n
}\n
", "4211536:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((a0 + v0)) == a1)\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4211655:sub_4043c7": null, "4211664:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) == *((a1 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *((a0 + v0)) - *((a1 + v0));\n
            return v1;\n
        }\n
    }\n
}\n
", "4211818:sub_40446a": null, "4211824:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4211923:sub_4044d3": null, "4211936:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    if (a0 > a1)\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[1 + a2 + -1 * v0] = *((a1 + a2 - v0 - 1));\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4212136:sub_4045a8": null, "4212144:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4212228:sub_404604": null, "4212240:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4212400:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4212445:sub_4046dd": null, "4212448:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4212609:sub_404781": null, "4212624:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v0 = 1;\n
    if (a0->field_8 == -1)\n
    {\n
        v0 = 0;\n
        a0->field_8 = 0;\n
    }\n
    v1 = cgc__vsfprintf(a1, a2, a0, 0, 2147483647);\n
    if (!v0)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4212752:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4212913:sub_4048b1": null, "4212928:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0, 2147483647);\n
}\n
", "4212981:sub_4048f5": null, "4212992:cgc__vsfprintf": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc__vsfprintf(struct_2 *a0, struct_0 *a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned long long *v0;  // [bp-0x178]\n
    struct_0 *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x164]\n
    unsigned int *v3;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x14c]\n
    unsigned int *v6;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_0 *v7;  // [bp-0x140]\n
    unsigned int v8;  // [bp-0x134]\n
    unsigned int *v9;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_0 *v10;  // [bp-0x128]\n
    unsigned int v11;  // [bp-0x11c]\n
    unsigned int v12;  // [bp-0x118]\n
    unsigned int v13;  // [bp-0x114]\n
    unsigned int v14;  // [bp-0x110]\n
    char v15;  // [bp-0x109]\n
    unsigned long v16;  // [bp-0x108]\n
    unsigned long v17;  // [bp-0x100]\n
    char v18;  // [bp-0xf1]\n
    unsigned long v19;  // [bp-0xf0]\n
    unsigned long v20;  // [bp-0xe8]\n
    char v21;  // [bp-0xd9]\n
    unsigned long v22;  // [bp-0xd8]\n
    unsigned long v23;  // [bp-0xd0]\n
    unsigned long v24;  // [bp-0xc8]\n
    unsigned long v25;  // [bp-0xc0]\n
    char v26;  // [bp-0xb1]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned long v29;  // [bp-0xa8]\n
    struct_2 *v30;  // [bp-0xa0]\n
    char v31;  // [bp-0x91]\n
    unsigned long v32;  // [bp-0x90]\n
    char v33;  // [bp-0x88]\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v35;  // [bp-0x3c]\n
    unsigned int v36;  // [bp-0x38]\n
    char v37;  // [bp-0x31]\n
    char *v38;  // [bp-0x28]\n
    void* v39;  // [bp-0x20]\n
    struct_0 *v40;  // [bp-0x18]\n
    struct_2 *v41;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_2 *v43;  // rax\n
    char *v44;  // rax\n
    struct_2 *v45;  // rax\n
    struct_2 *v46;  // rax\n
    struct_2 *v48;  // rax\n
    struct_2 *v50;  // rax\n
    struct_0 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_0 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    struct_0 *v57;  // rcx\n
    unsigned long long v58;  // rdx\n
    unsigned long long *v59;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v60;  // rcx\n
    char *v61;  // rax\n
    struct_0 *v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned int *v64;  // rax\n
    struct_0 *v65;  // rcx\n
    unsigned int *v66;  // rdx\n
    struct_0 *v67;  // rcx\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    struct_0 *v70;  // rcx\n
    unsigned int *v71;  // rdx\n
    unsigned long long v72;  // rsi\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rcx\n
    char *v75;  // rax\n
    char *v76;  // rax\n
\n
    v41 = a0;\n
    v40 = a1;\n
    v39 = a2;\n
    v38 = a3;\n
    v34 = 0;\n
    while (true)\n
    {\n
        v43 = v41;\n
        v41 = v43 + 1;\n
        v37 = v43->field_0;\n
        if (!v37)\n
            break;\n
        v31 = 32;\n
        while (v37 != 37)\n
        {\n
            if (v34 >= a4)\n
            {\n
                v44 = v34;\n
                v34 = v44 + 1;\n
                if (v44 == -1)\n
                    cgc__terminate(a0);\n
            }\n
            else\n
            {\n
                v26 = v37;\n
                if (v39)\n
                    cgc_fwrite(&v26, 1, v39);\n
                if (v38)\n
                    v38[v34] = v26;\n
                v34 += 1;\n
            }\n
            v45 = v41;\n
            v41 = v45 + 1;\n
            v37 = v45->field_0;\n
            if (!v37)\n
                goto LABEL_4053ec;\n
        }\n
        v30 = v41;\n
        v36 = 4;\n
        v35 = 0;\n
        v46 = v41;\n
        v41 = v46 + 1;\n
        v14 = v46->field_0;\n
        v37 = v14;\n
        if (!v14)\n
            break;\n
        if (v14 == 32)\n
        {\n
            v31 = 32;\n
        }\n
        else if (v14 != 48)\n
        {\n
            v41 += 1;\n
        }\n
        else\n
        {\n
            v31 = 48;\n
        }\n
        if (*(v41) >= 48 && *(v41) <= 57)\n
            v35 = cgc_strtoul(v41, &v41, 10);\n
        v48 = v41;\n
        v41 = v48 + 1;\n
        v13 = v48->field_0;\n
        v37 = v13;\n
        if (!v13)\n
            break;\n
        if (v13 == 104)\n
        {\n
            if (v41->field_0 == 104)\n
            {\n
                v41 += 1;\n
                v36 = 1;\n
            }\n
            else\n
            {\n
                v36 = 2;\n
            }\n
        }\n
        else\n
        {\n
            if (v13 != 108)\n
            {\n
                v41 += 1;\n
            }\n
            else if (v41->field_0 != 108)\n
            {\n
                v36 = 4;\n
            }\n
            else\n
            {\n
                v41 += 1;\n
                v36 = 8;\n
            }\n
        }\n
        v50 = v41;\n
        v41 = v50 + 1;\n
        v12 = v50->field_0;\n
        v37 = v12;\n
        if (!v12)\n
        {\n
            v25 = v41 - v30;\n
            if (v34 < a4)\n
            {\n
                v24 = a4 - v34;\n
                if (v24 > v25)\n
                    v24 = v25;\n
                if (v39)\n
                    cgc_fwrite(v30, v24, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], v30, v24);\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            break;\n
        }\n
        if (v12 == 88)\n
        {\n
LABEL_404e4d:\n
            if (v37 == 100)\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v10 = v40;\n
                v11 = v10->field_0;\n
                if (v11 > 40)\n
                {\n
                    v65 = v10;\n
                    v66 = v65->field_8;\n
                    v65->field_8 = &v66[2];\n
                    v9 = v66;\n
                }\n
                else\n
                {\n
                    v62 = v10;\n
                    v63 = v11;\n
                    v64 = v63 + v62->field_10;\n
                    v62->field_0 = v63 + 8;\n
                    v9 = v64;\n
                }\n
                v27 = *(v9);\n
                cgc__convert_signed(&v33, v27, 10, 0);\n
            }\n
            else\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v7 = v40;\n
                v8 = v7->field_0;\n
                if (v8 > 40)\n
                {\n
                    v70 = v7;\n
                    v71 = v70->field_8;\n
                    v70->field_8 = &v71[2];\n
                    v6 = v71;\n
                }\n
                else\n
                {\n
                    v67 = v7;\n
                    v68 = v8;\n
                    v69 = v68 + v67->field_10;\n
                    v67->field_0 = v68 + 8;\n
                    v6 = v69;\n
                }\n
                v28 = *(v6);\n
                a0 = &v33;\n
                v72 = v28;\n
                v73 = (v37 == 117 ? 16 : 10);\n
                v74 = v37 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v32 = cgc_strlen(&v33);\n
            if (v32 < v35)\n
            {\n
                v35 -= v32;\n
                do\n
                {\n
                    if (v34 < a4)\n
                    {\n
                        v21 = v31;\n
                        if (v39)\n
                            cgc_fwrite(&v21, 1, v39);\n
                        if (v38)\n
                            v38[v34] = v21;\n
                        v34 += 1;\n
                    }\n
                    else\n
                    {\n
                        v75 = v34;\n
                        v34 = v75 + 1;\n
                        if (v75 == -1)\n
                            cgc__terminate(a0);\n
                    }\n
                    v35 -= 1;\n
                } while (v35 > 0);\n
            }\n
            v20 = v32;\n
            if (v34 < a4)\n
            {\n
                v19 = a4 - v34;\n
                if (v19 > v20)\n
                    v19 = v20;\n
                if (v39)\n
                    cgc_fwrite(&v33, v19, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], &v33, v19);\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            goto LABEL_4053dd;\n
        }\n
        else\n
        {\n
            if (v12 == 99)\n
            {\n
                v4 = v40;\n
                v5 = v4->field_0;\n
                if (v5 > 40)\n
                {\n
                    v55 = v4;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v3 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v4;\n
                    v53 = v5;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v3 = v54;\n
                }\n
                v37 = *(v3);\n
                if (v34 >= a4)\n
                {\n
                    v61 = v34;\n
                    v34 = v61 + 1;\n
                    if (v61 == -1)\n
                        cgc__terminate(a0);\n
                }\n
                else\n
                {\n
                    v18 = v37;\n
                    if (v39)\n
                        cgc_fwrite(&v18, 1, v39);\n
                    if (v38)\n
                        v38[v34] = v18;\n
                    v34 += 1;\n
                }\n
                goto LABEL_4053dd;\n
            }\n
            if (v12 == 100)\n
                goto LABEL_404e4d;\n
            if (v12 == 115)\n
            {\n
                v1 = v40;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v60 = v1;\n
                    v59 = v60->field_8;\n
                    v60->field_8 = v59 + 8;\n
                }\n
                else\n
                {\n
                    v57 = v1;\n
                    v58 = v2;\n
                    v59 = v58 + v57->field_10;\n
                    v57->field_0 = v58 + 8;\n
                }\n
                v0 = v59;\n
                v29 = *(v0);\n
                v17 = cgc_strlen(v29);\n
                if (v34 < a4)\n
                {\n
                    v16 = a4 - v34;\n
                    if (v16 > v17)\n
                        v16 = v17;\n
                    if (v39)\n
                        cgc_fwrite(v29, v16, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v29, v16);\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
LABEL_4053dd:\n
            }\n
            else if (v12 != 117 && v12 != 120)\n
            {\n
                v23 = v41 - v30;\n
                if (v34 < a4)\n
                {\n
                    v22 = a4 - v34;\n
                    if (v22 > v23)\n
                        v22 = v23;\n
                    if (v39)\n
                        cgc_fwrite(v30, v22, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v30, v22);\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                goto LABEL_4053dd;\n
            }\n
        }\n
    }\n
LABEL_4053ec:\n
    v39 = 0;\n
    if (v34 >= a4)\n
    {\n
        v76 = v34;\n
        v34 = v76 + 1;\n
        if (v76 != -1)\n
            return v34 - 1;\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        if (v39)\n
            cgc_fwrite(&v15, 1, v39);\n
        if (v38)\n
            v38[v34] = v15;\n
        v34 += 1;\n
        return v34 - 1;\n
    }\n
}\n
", "4215945:sub_405489": null, "4215952:cgc__convert_signed": "long long cgc__convert_signed(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (v0 < 0)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 45;\n
        v0 = -(v0);\n
    }\n
    return cgc__convert_unsigned(v1, v0, a2, a3);\n
}\n
", "4216033:sub_4054e1": null, "4216048:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x14], Other Possible Types: unsigned long\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v3 = a1;\n
    v1 = &a0[20];\n
    if (a3)\n
        v2 = \"0123456789ABCDEF\";\n
    else\n
        v2 = \"0123456789abcdef\";\n
    v5 = v1;\n
    v1 = v5 + 1;\n
    if (!v3)\n
    {\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        v6[1].field_-1 = *(v2);\n
        return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
    }\n
    for (v5[1].field_-1 = 0; v3; v3 = (0 CONCAT v3) /m a2)\n
    {\n
        v0 = v2;\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT v3) /m a2 >> 32];\n
    }\n
    return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
}\n
", "4216293:sub_4055e5": null, "4216304:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(unsigned int a0, unsigned long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4216346:sub_40561a": null, "4216352:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(v2));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4216517:sub_4056c5": null, "4216528:cgc_strcasestr": "long long cgc_strcasestr(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_strlen(a1);\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!a0[v1])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strncasecmp(&a0[v1], a1, v0))\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4216672:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; a0[v0]; v0 += 1)\n
    {\n
        if (a0[v0] == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = &a0[v0];\n
    return v1;\n
}\n
", "4216811:sub_4057eb": null, "4216816:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4216955:sub_40587b": null, "4216960:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    for (v0 = a0; *(v1); v0 += 1)\n
    {\n
        *(v0) = *(v1);\n
        v1 += 1;\n
    }\n
    *(v0) = 0;\n
    return a0;\n
}\n
", "4217050:sub_4058da": null, "4217056:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    v1[v0] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4217169:sub_405951": null, "4217184:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217247:sub_40599f": null, "4217248:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char v1;  // [bp-0x31]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = &v4[a2];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v4))\n
        {\n
            v1 = 0;\n
            if (*(v3))\n
            {\n
                v0 = cgc_tolower(*(v4));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(v3)))\n
                    v1 = v4 < v2;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    if (v4 == v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = *(v4) - *(v3);\n
    return v5;\n
}\n
", "4217480:sub_405a88": null, "4217488:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    v1 = a0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = v1 - a0 < a2;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(v2);\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - a0 < a2; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return a0;\n
}\n
", "4217667:sub_405b43": null, "4217680:cgc_strndup": "long long cgc_strndup(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
        v1 = a1;\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    *((v0 + v1)) = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4217819:sub_405bdb": null, "4217824:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = &*(a0)->field_0;\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v0[v1]; v1 += 1)\n
    {\n
        if (cgc_strchr(a1, v0[v1]))\n
            break;\n
    }\n
    if (!v0[v1])\n
        *(a0) = 0;\n
    else\n
        *(a0) = &v0[1 + v1];\n
    v0[v1] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4218043:sub_405cbb": null, "4218048:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!cgc_strcmp(&a0[v0], a1))\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4218175:sub_405d3f": null, "4218176:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x68], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x60], Other Possible Types: unsigned long long\n
    char v2[2];  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8[2];  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x24]\n
    char v10[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v11;  // [bp-0x10]\n
\n
    *(&v10) = a0;\n
    v9 = a2;\n
    *(&v8) = v10;\n
    v7 = 1;\n
    v6 = 1;\n
    v5 = 0;\n
    for (v4 = 0; cgc_isspace(v10[0]); v10 = &v10[1])\n
    {\n
        if (!v10[0])\n
            goto LABEL_405efc;\n
    }\n
    if (*(v10) == 43)\n
    {\n
        v7 = 1;\n
        v10 = &v10[1];\n
    }\n
    else if (*(v10) == 45)\n
    {\n
        v7 = -1;\n
        v10 = &v10[1];\n
    }\n
    if (v9 == 16)\n
    {\n
        if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
            v10 += 2;\n
        goto LABEL_405f0b;\n
    }\n
    if (v9)\n
    {\n
LABEL_405f0b:\n
        for (; *(v10); v10 = &v10[1])\n
        {\n
            if (cgc_isdigit(v10[0]))\n
            {\n
                v3 = *(v10) - 48;\n
            }\n
            else if (cgc_islower(v10[0]))\n
            {\n
                v3 = *(v10) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v10[0]))\n
                    break;\n
                v3 = *(v10) + -55;\n
            }\n
            if (v3 >= v9)\n
                break;\n
            v6 = 0;\n
            v4 = v9 * v4 + v3;\n
            if (v4 > 2147483647)\n
                v5 = 1;\n
        }\n
    }\n
    if (*(v10) == 48 && *((v10 + 1)) >= 48 && *((v10 + 1)) <= 55)\n
    {\n
        *(&v10) = &v10[1];\n
        v9 = 8;\n
        goto LABEL_405efc;\n
    }\n
    if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
    {\n
        v10 += 2;\n
        v9 = 16;\n
        goto LABEL_405efc;\n
    }\n
    if (!cgc_isdigit(v10[0]))\n
        goto LABEL_405efc;\n
    v9 = 10;\n
LABEL_405efc:\n
    if (a1)\n
    {\n
        if (v6)\n
            *(&v2) = v8;\n
        else\n
            v2 = v10;\n
        *(a1) = v2;\n
    }\n
    if (v7 >= 0)\n
    {\n
        if (v5)\n
            v0 = 2147483647;\n
        else\n
            v0 = v4;\n
        v11 = v0;\n
        return v11;\n
    }\n
    else\n
    {\n
        if (v5)\n
            v1 = -0x80000000;\n
        else\n
            v1 = -(v4);\n
        v11 = v1;\n
        return v11;\n
    }\n
}\n
", "4219048:sub_4060a8": null, "4219056:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x58], Other Possible Types: unsigned long long\n
    char v1[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7[2];  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char v9[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v9) = a0;\n
    v8 = a2;\n
    *(&v7) = v9;\n
    v6 = 1;\n
    v5 = 1;\n
    v4 = 0;\n
    for (v3 = 0; cgc_isspace(*(v9)); v9 += 1)\n
    {\n
        if (!*(v9))\n
            goto LABEL_40626c;\n
    }\n
    if (*(v9) == 43)\n
    {\n
        v6 = 1;\n
        v9 += 1;\n
    }\n
    else if (*(v9) == 45)\n
    {\n
        v6 = -1;\n
        v9 += 1;\n
    }\n
    if (v8 == 16)\n
    {\n
        if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
            v9 += 2;\n
        goto LABEL_40627b;\n
    }\n
    if (v8)\n
    {\n
LABEL_40627b:\n
        for (; *(v9); v9 += 1)\n
        {\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v2 = *(v9) - 48;\n
            }\n
            else if (cgc_islower(*(v9)))\n
            {\n
                v2 = *(v9) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v9)))\n
                    break;\n
                v2 = *(v9) + -55;\n
            }\n
            if (v2 >= v8)\n
                break;\n
            v5 = 0;\n
            v3 = v8 * v3 + v2;\n
            if (v3 > 4294967295)\n
                v4 = 1;\n
        }\n
    }\n
    if (*(v9) == 48 && *((v9 + 1)) >= 48 && *((v9 + 1)) <= 55)\n
    {\n
        *(&v9) = v9 + 1;\n
        v8 = 8;\n
        goto LABEL_40626c;\n
    }\n
    if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
    {\n
        v9 += 2;\n
        v8 = 16;\n
        goto LABEL_40626c;\n
    }\n
    if (!cgc_isdigit(*(v9)))\n
        goto LABEL_40626c;\n
    v8 = 10;\n
LABEL_40626c:\n
    if (a1)\n
    {\n
        if (v5)\n
            *(&v1) = v7;\n
        else\n
            v1 = v9;\n
        *(a1) = v1;\n
    }\n
    if (v6 < 0)\n
    {\n
        if (v3 > 2147483647 && v3 != -0x80000000)\n
            v4 = 1;\n
        v3 = -(v3);\n
    }\n
    if (v4)\n
    {\n
        v0 = 4294967295;\n
        return v0;\n
    }\n
    v0 = v3;\n
    return v0;\n
}\n
", "4219917:sub_40640d": null, "4219920:cgc_create_random_shorts": "long long cgc_create_random_shorts()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned short *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18]\n
    unsigned short *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = 0x4347c000;\n
    v1 = cgc_malloc(0x800);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v0 = 0; v0 < 0x400; v0 += 1)\n
    {\n
        v1[v0] = v2[3 * v0];\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4220055:sub_406497": null, "4220064:cgc_get_rand_short": "extern unsigned int cgc_g_random_usage;\n
\n
long long cgc_get_rand_short(unsigned long a0)\n
{\n
    unsigned short *v1;  // rcx\n
\n
    if (cgc_g_random_usage >= 0x400)\n
        cgc_g_random_usage = 0;\n
    v1 = cgc_g_random_usage;\n
    cgc_g_random_usage = cgc_g_random_usage + 1;\n
    return *((a0 + v1 * 2));\n
}\n
", "4220127:sub_4064df": null, "4220128:cgc_readline": "long long cgc_readline(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (a0 && a1 >= 2)\n
    {\n
        v1 = 0;\n
        for (v1 = 0; v1 < a1; v1 += 1)\n
        {\n
            v0 = cgc_get_byte();\n
            if (v0 == -1)\n
            {\n
                v2 = 1;\n
                return v2;\n
            }\n
            a0[v1] = v0;\n
            if (a0[v1] == 10)\n
            {\n
                a0[v1] = 0;\n
                break;\n
            }\n
        }\n
        if (v1 != a1 && v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4220372:sub_4065d4": null, "4220384:cgc_readnum": "long long cgc_readnum(char *a0, unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
\n
    v0 = cgc_readline(a0, a1);\n
    if (v0)\n
    {\n
        *(a2) = 0;\n
        return v0;\n
    }\n
    *(a2) = cgc_strtol(a0, NULL, 10);\n
    return v0;\n
}\n
", "4220480:cgc_select_menu_choice": "long long cgc_select_menu_choice(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    cgc_printf(\"Make a selection: \\n
1. Input Matrix\\n
2. Print Matrix\\n
3. Add Matrices\\n
4. Subtract Matrices\\n
5. Multiply Matrices\\n
6. Swap Matrix Row\\n
7. Swap Matrix Col\\n
8. Transpose Matrix\\n
9. Perform Reduced Row Echelon Form on Matrix\\n
10. Randomize Matrix\\n
11. Exit\\n
>> \", a1, a2, a3, a4);\n
    if (cgc_readnum(a0, a1, &v0) == 1)\n
    {\n
        v1 = 11;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4220569:sub_406699": null, "4220576:cgc_choose_matrix": "long long cgc_choose_matrix(unsigned long a0, unsigned int a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_printf(\"Select Matrix 1 or Matrix 2\\n
>> \", a1, a2, a3, a4);\n
    v1 = cgc_readnum(a2, a3, &v2);\n
    if (v1 == 1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (v2 == 2)\n
        *(&v0) = a1;\n
    else\n
        v0 = a0;\n
    v3 = v0;\n
    return v3;\n
}\n
", "4220719:sub_40672f": null, "4220720:cgc_resize_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[48];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_resize_matrix(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        cgc_printf(\"New Row Size (0 to stay the same): \", a1, a2, a3, a4);\n
        a1 = a2;\n
        if (cgc_readnum(*(&a1), a1, &v1) == 1)\n
        {\n
            v2 = 1;\n
            return v2;\n
        }\n
        if (!v1)\n
            v1 = a0->field_0;\n
        cgc_printf(\"New Column Size (0 to stay the same): \", *(&a1), a2, a3, a4);\n
        if (cgc_readnum(*(&a1), a2, &v0) == 1)\n
        {\n
            v2 = 1;\n
            return v2;\n
        }\n
        if (!v0)\n
            v0 = a0->field_4;\n
        if (!a0->field_38(a0, v1, v0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_printf(\"Row and Column Sizes must be between 1-16\\n
\", *(&a1), a2, a3, a4);\n
    }\n
}\n
", "4220970:sub_40682a": null, "4220976:cgc_input_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[32];\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_input_matrix(struct_1 *a0, char *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    void* v4;  // [bp-0x38], Other Possible Types: char [2]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    char v8;  // [bp-0x24]\n
    char *v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned long v12;  // rax\n
\n
    if (cgc_resize_matrix(a0, a1, a2, a3, a4) == 1)\n
    {\n
        v10 = 1;\n
        return v10;\n
    }\n
    v7 = a0->field_4 * a0->field_0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v5 = cgc_readline(a1, *(&v8));\n
    if (v5 != 1 && v5 != -1)\n
    {\n
        v3 = 1;\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = v2;\n
            v12 = cgc_strlen(a1);\n
            if (v0 >= v12)\n
                break;\n
            if (a1[v2] == 32)\n
                v3 += 1;\n
            v2 += 1;\n
        }\n
        if (v3 != v7)\n
        {\n
            cgc_printf(\"Bad Input\\n
\", a1, a2, v12, a4);\n
            v10 = -1;\n
            return v10;\n
        }\n
        for (v2 = 0; v2 < a0->field_0; v2 += 1)\n
        {\n
            for (v1 = 0; v1 < a0->field_4; v1 += 1)\n
            {\n
                *(&v4) = cgc_strsep(&v9, \" \");\n
                if (!v4)\n
                {\n
                    v10 = 1;\n
                    return v10;\n
                }\n
                v6 = cgc_strtol(v4, NULL, 10);\n
                a0->field_28(a0, v2, v1, v6);\n
            }\n
        }\n
        v10 = 0;\n
        return v10;\n
    }\n
    cgc_printf(\"Bad Input\\n
\", a1, a2, a3, a4);\n
    v10 = v5;\n
    return v10;\n
}\n
", "4221447:sub_406a07": null, "4221456:cgc_random_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[32];\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_random_matrix(struct_1 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    struct struct_0 **v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    if (cgc_resize_matrix(a0, a1, a2, a3, a4) == 1)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    for (v4 = 0; v4 < a0->field_0; v4 += 1)\n
    {\n
        for (v3 = 0; v3 < a0->field_4; v3 += 1)\n
        {\n
            v2 = &a0->field_28->field_0;\n
            v0 = v4;\n
            v1 = v3;\n
            a3 = cgc_get_rand_short(a3);\n
            v2(a0, v0, v1, rcx<8>);\n
        }\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4221673:sub_406ae9": null, "4221680:cgc_print_matrix": "typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_print_matrix(unsigned int a0, struct_1 *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"%s\\n
\", a0, a2, a3, a4);\n
    return a1->field_40(a1);\n
}\n
", "4221734:sub_406b26": null, "4221744:cgc_print_matrices": "extern unsigned int g_4093cc;\n
extern unsigned int g_4093d7;\n
extern unsigned int g_4093e2;\n
\n
char cgc_print_matrices(void* a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_print_matrix(4232140, a0, a2, a3, a4);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_print_matrix(4232151, a1, a2, a3, a4);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    return cgc_print_matrix(4232162, a2, a2, a3, a4);\n
}\n
", "4221846:sub_406b96": null, "4221856:cgc_add_matrices": "extern unsigned int g_409505;\n
\n
long long cgc_add_matrices(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (!cgc_m_add(a0, a1, a2))\n
    {\n
        v1 = cgc_print_matrix(4232453, a2, a2, a3, a4);\n
        return v1;\n
    }\n
    v1 = cgc_printf(\"Could not add matrices together. Check sizes\\n
\", a1, a2, a3, a4);\n
    return v1;\n
}\n
", "4221943:sub_406bf7": null, "4221952:cgc_subtract_matrices": "extern unsigned int g_409505;\n
\n
long long cgc_subtract_matrices(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (!cgc_m_subtract(a0, a1, a2))\n
    {\n
        v1 = cgc_print_matrix(4232453, a2, a2, a3, a4);\n
        return v1;\n
    }\n
    v1 = cgc_printf(\"Could not subtract matrices. Check sizes\\n
\", a1, a2, a3, a4);\n
    return v1;\n
}\n
", "4222039:sub_406c57": null, "4222048:cgc_multiply_matrices": "extern unsigned int g_409505;\n
\n
long long cgc_multiply_matrices(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (!cgc_m_multiply(a0, a1, a2))\n
    {\n
        v1 = cgc_print_matrix(4232453, a2, a2, a3, a4);\n
        return v1;\n
    }\n
    v1 = cgc_printf(\"Could not multiply matrices together. Check sizes\\n
\", a1, a2, a3, a4);\n
    return v1;\n
}\n
", "4222135:sub_406cb7": null, "4222144:cgc_swap_matrix_row_col": "extern unsigned int g_4094b1;\n
\n
long long cgc_swap_matrix_row_col(unsigned int a0[2], unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (a1 == 1)\n
    {\n
        *(&v0) = \"Row\";\n
        v1 = a0[0];\n
    }\n
    else if (a1 == 2)\n
    {\n
        v0 = \"Column\";\n
        v1 = a0[1];\n
    }\n
    else\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    cgc_printf(\"Enter %s Index 1: \", v0, a2, a3, a4);\n
    v6 = a3;\n
    if (cgc_readnum(a2, v6, &v3) == 1)\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    else if (v3 < v1)\n
    {\n
        cgc_printf(\"Enter %s Index 2: \", v0, a2, a3, a4);\n
        v7 = a3;\n
        if (cgc_readnum(a2, v7, &v2) == 1)\n
        {\n
            v4 = 1;\n
            return v4;\n
        }\n
        else if (v2 < v1)\n
        {\n
            cgc_print_matrix(4232369, a0, a2, a3, a4);\n
            if (a1 == 1)\n
            {\n
                v4 = cgc_swap_row(a0, v3, v2);\n
                return v4;\n
            }\n
            else if (a1 == 2)\n
            {\n
                v4 = cgc_swap_col(a0, v3, v2);\n
                return v4;\n
            }\n
            else\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(\"Bad Input\\n
\", *(&v7), a2, a3, a4);\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(\"Bad Input\\n
\", *(&v6), a2, a3, a4);\n
        v4 = -1;\n
        return v4;\n
    }\n
}\n
", "4222561:sub_406e61": null, "4222576:cgc_transpose_matrix": "extern unsigned int g_4094b1;\n
extern unsigned int g_4094c1;\n
\n
long long cgc_transpose_matrix(void* a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    cgc_print_matrix(4232369, a0, a2, a3, a4);\n
    cgc_m_transpose(a0);\n
    return cgc_print_matrix(4232385, a0, a2, a3, a4);\n
}\n
", "4222635:sub_406eab": null, "4222640:cgc_rref_matrix": "extern unsigned int g_409500;\n
\n
long long cgc_rref_matrix(unsigned long long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (!cgc_m_rref(a0, a1))\n
    {\n
        v1 = cgc_print_matrix(0x409500, a1, a2, a3, a4);\n
        return v1;\n
    }\n
    v1 = cgc_printf(\"Could not complete reduced row echelon form\\n
\", a1, a2, a3, a4);\n
    return v1;\n
}\n
", "4222719:sub_406eff": null, "4222720:main": "extern unsigned int g_409204;\n
extern unsigned int g_4095bb;\n
extern unsigned int g_4095e4;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x458]\n
    unsigned long v1;  // [bp-0x450]\n
    unsigned int v2;  // [bp-0x448]\n
    unsigned int v3;  // [bp-0x440]\n
    unsigned long v4;  // [bp-0x438]\n
    void* v5;  // [bp-0x430], Other Possible Types: unsigned long long\n
    char v6;  // [bp-0x428]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned long v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v14;  // esi\n
    unsigned long long v15;  // rax\n
\n
    v12 = 0;\n
    v11 = a0;\n
    v10 = a1;\n
    v9 = 0;\n
    v8 = 0;\n
    *(&v7) = cgc_create_random_shorts();\n
    v4 = cgc_create_matrix(1, 0);\n
    *(&v3) = cgc_create_matrix(1, 0);\n
    *(&v2) = cgc_create_matrix(2, &v6);\n
    v1 = cgc_malloc(0x800);\n
    cgc_printf(\"Matrix math is fun!\\n
\", 0, a2, a3, a4);\n
    cgc_printf(\"-------------------\\n
\", 0, a2, a3, a4);\n
    while (true)\n
    {\n
        v14 = 0x800;\n
        v8 = cgc_select_menu_choice(v1, 0x800, 0x800, a3, a4);\n
        v15 = v8 - 1;\n
        a3 = v15;\n
        *(&v0) = v15;\n
        switch (*(&v0))\n
        {\n
        case 0:\n
            cgc_printf(\"Inputting Matrix Values:\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            a2 = 0x800;\n
            if (cgc_input_matrix(v5, v1, 0x800, 0x800, a4) == 1)\n
                break;\n
        case 1:\n
            cgc_printf(\"Print Matrices:\\n
\", *(&v14), a2, &g_409204, a4);\n
            cgc_print_matrices(v4, *(&v3), *(&v2), 4231684, a4);\n
            goto LABEL_407378;\n
        case 2:\n
            cgc_printf(\"Adding Matrices:\\n
\", *(&v14), a2, &g_409204, a4);\n
            cgc_add_matrices(v4, *(&v3), *(&v2), 4231684, a4);\n
            goto LABEL_407378;\n
        case 3:\n
            cgc_printf(\"Subtracting Matrices:\\n
\", *(&v14), a2, &g_409204, a4);\n
            cgc_subtract_matrices(v4, *(&v3), *(&v2), 4231684, a4);\n
            goto LABEL_407378;\n
        case 4:\n
            cgc_printf(\"Multiplying Matrices:\\n
\", *(&v14), a2, &g_409204, a4);\n
            cgc_multiply_matrices(v4, *(&v3), *(&v2), 4231684, a4);\n
            goto LABEL_407378;\n
        case 5:\n
            cgc_printf(\"Swap Rows in a  Matrix:\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            a3 = 0x800;\n
            v9 = cgc_swap_matrix_row_col(v5, 1, v1, 0x800, a4);\n
            if (v9 == 1)\n
                break;\n
            if (!v9)\n
                cgc_print_matrix(4232635, v5, 0x800, 0x800, a4);\n
            goto LABEL_407378;\n
        case 6:\n
            cgc_printf(\"Swap Columns in a  Matrix:\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            a3 = 0x800;\n
            v9 = cgc_swap_matrix_row_col(v5, 2, v1, 0x800, a4);\n
            if (v9 == 1)\n
                break;\n
            if (!v9)\n
                cgc_print_matrix(4232676, v5, 0x800, 0x800, a4);\n
            goto LABEL_407378;\n
        case 7:\n
            cgc_printf(\"Transpose a Matrix:\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            cgc_transpose_matrix(v5, *(&v14), a2, *(&a3), a4);\n
            goto LABEL_407378;\n
        case 8:\n
            cgc_printf(\"Perform Reduced Row Echelon Form on Matrix\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            cgc_rref_matrix(v5, *(&v2), 0x800, 0x800, a4);\n
            goto LABEL_407378;\n
        case 9:\n
            cgc_printf(\"Create a Random Matrix:\\n
\", *(&v14), a2, &g_409204, a4);\n
            v14 = *(&v3);\n
            a3 = 0x800;\n
            v5 = cgc_choose_matrix(v4, v14, v1, 0x800, a4);\n
            if (!v5)\n
                break;\n
            if (cgc_random_matrix(v5, v1, 0x800, *(&v7), a4) == 1)\n
                break;\n
        case 10:\n
            break;\n
        default:\n
            cgc_printf(\"Bad Selection\\n
\", *(&v14), a2, *(&v0), a4);\n
        }\n
LABEL_407378:\n
    }\n
    cgc_printf(\"Exiting...\\n
\", *(&v14), a2, a3, a4);\n
    return 0;\n
}\n
", "4223894:sub_407396": null, "4223904:cgc_get_byte": "extern char cgc_get_byte.rxbuf;\n
extern unsigned int cgc_get_byte.rxcnt;\n
extern unsigned int cgc_get_byte.rxidx;\n
\n
long long cgc_get_byte()\n
{\n
    char v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    char *v8;  // rax\n
\n
    if (cgc_get_byte.rxidx != cgc_get_byte.rxcnt)\n
    {\n
LABEL_407405:\n
        v8 = cgc_get_byte.rxidx;\n
        cgc_get_byte.rxidx = cgc_get_byte.rxidx + 1;\n
        v1 = *((&cgc_get_byte.rxbuf + v8));\n
        return v1;\n
    }\n
    if (!cgc_receive(v3, v4, v5, v6) && *(&v0))\n
    {\n
        cgc_get_byte.rxcnt = *(&v0);\n
        cgc_get_byte.rxidx = 0;\n
        goto LABEL_407405;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4224048:cgc_create_matrix": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
    unsigned long long field_30;\n
    unsigned long long field_38;\n
    unsigned long long field_40;\n
} struct_0;\n
\n
long long cgc_create_matrix(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        if (a0 == 1)\n
        {\n
            v0 = 0x200;\n
        }\n
        else if (a0 == 2)\n
        {\n
            v0 = 0x400;\n
        }\n
        else if (a0 == 4)\n
        {\n
            v0 = 0x400;\n
        }\n
        v1 = cgc_calloc(1, v0 + 72);\n
        if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        *((v1 + 16)) = v1 + 72;\n
    }\n
    else\n
    {\n
        v1 = cgc_calloc(1, 72);\n
        if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        *((v1 + 16)) = a1;\n
    }\n
    *(v1) = 1;\n
    *((v1 + 4)) = 1;\n
    *((v1 + 8)) = a0;\n
    *((v1 + 24)) = cgc_m_get_cell;\n
    *((v1 + 32)) = cgc_m_get_fcell;\n
    *((v1 + 40)) = cgc_m_set_cell;\n
    *((v1 + 48)) = cgc_m_set_fcell;\n
    *((v1 + 56)) = cgc_m_set_rows_cols;\n
    *((v1 + 64)) = print_matrix;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4224428:sub_4075ac": null, "4224432:cgc_m_get_cell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_m_get_cell(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (a1 <= a0->field_0 && a2 <= a0->field_4)\n
    {\n
        v0 = a0->field_8;\n
        if (v0 == 1)\n
        {\n
            v1 = *((a0->field_10 + (a0->field_4 * a1 + a2) * 2));\n
            return v1;\n
        }\n
        else if (v0 != 2)\n
        {\n
            if (v0 != 4)\n
                return v1;\n
            v1 = *((a0->field_10 + (a0->field_4 * a1 + a2) * 4));\n
        }\n
        else\n
        {\n
            v1 = *((a0->field_10 + (a0->field_4 * a1 + a2) * 4));\n
            return v1;\n
        }\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4224678:sub_4076a6": null, "4224688:cgc_m_get_fcell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_m_get_fcell(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_10;  // tmp #10\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    if (!a0)\n
    {\n
        v1 = 0x3f800000;\n
        return v3;\n
    }\n
    v3 = a1;\n
    if (v3 <= a0->field_0)\n
    {\n
        v3 = a2;\n
        if (v3 <= a0->field_4)\n
        {\n
            v0 = a0->field_8;\n
            if (v0 == 1)\n
            {\n
                v3 = *((a0->field_10 + (a0->field_4 * a1 + a2) * 2));\n
                v1 = v3;\n
                return *((a0->field_10 + (a0->field_4 * a1 + a2) * 2));\n
            }\n
            else if (v0 != 2)\n
            {\n
                v4 = v0;\n
                tmp_10 = v4;\n
                v3 = v4 - 4;\n
                if (tmp_10 != 4)\n
                    return v3;\n
                v3 = a0->field_10;\n
                v1 = *((v3 + (a0->field_4 * a1 + a2) * 4));\n
            }\n
            else\n
            {\n
                v3 = a0->field_10;\n
                v1 = *((v3 + (a0->field_4 * a1 + a2) * 4));\n
                return a0->field_10;\n
            }\n
        }\n
    }\n
    v1 = 0xbf800000;\n
    return v3;\n
}\n
", "4224958:sub_4077be": null, "4224960:cgc_m_set_cell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_m_set_cell(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (a1 <= a0->field_0 && a2 <= a0->field_4)\n
    {\n
        v0 = a0->field_8;\n
        if (v0 == 1)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 2)) = a3;\n
        }\n
        else if (v0 == 2)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 4)) = a3;\n
        }\n
        else if (v0 == 4)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 4)) = a3;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4225221:sub_4078c5": null, "4225232:cgc_m_set_fcell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_m_set_fcell(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // ymm0\n
\n
    if (!a0)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (a1 <= a0->field_0 && a2 <= a0->field_4)\n
    {\n
        v0 = a0->field_8;\n
        if (v0 == 1)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 2)) = v3;\n
        }\n
        else if (v0 == 2)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 4)) = v3;\n
        }\n
        else if (v0 == 4)\n
        {\n
            *((a0->field_10 + (a0->field_4 * a1 + a2) * 4)) = v3;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4225503:sub_4079df": null, "4225504:cgc_m_set_rows_cols": "long long cgc_m_set_rows_cols(unsigned int a0[2], unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a1 <= 16 && a2 <= 16)\n
    {\n
        a0[0] = a1;\n
        a0[1] = a2;\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4225604:sub_407a44": null, "4225616:print_matrix": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char print_matrix.buf;\n
\n
long long print_matrix(struct_1 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    int tmp_58;  // tmp #58\n
    int tmp_60;  // tmp #60\n
    int tmp_59;  // tmp #59\n
    int tmp_87;  // tmp #87\n
    int tmp_89;  // tmp #89\n
    int tmp_88;  // tmp #88\n
    int tmp_27;  // tmp #27\n
    int tmp_29;  // tmp #29\n
    int tmp_28;  // tmp #28\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    int v10;  // xmm0\n
    int v14;  // xmm0, Other Possible Types: unsigned long long\n
    unsigned long v15;  // rax\n
\n
    if (!a0)\n
        return v15;\n
    print_matrix.buf = 0;\n
    for (v6 = 0; v6 < a0->field_0; v6 += 1)\n
    {\n
        cgc_sprintf(&print_matrix.buf, \"%s|\", &print_matrix.buf, a0, a4);\n
        for (v5 = 0; v5 < a0->field_4; v5 += 1)\n
        {\n
            if (cgc_strlen(&print_matrix.buf) > 7192)\n
            {\n
                cgc_transmitall(&print_matrix.buf, cgc_strlen(&print_matrix.buf));\n
                print_matrix.buf = 0;\n
            }\n
            if (a0->field_8 != 4)\n
            {\n
                cgc_sprintf(&print_matrix.buf, \"%s %d |\", &print_matrix.buf, a0->field_18(a0, v6, v5), a4);\n
            }\n
            else\n
            {\n
                a0->field_20(a0, v6, v5);\n
                v4 = v14;\n
                if (!(CmpF(v4, 0) & 1))\n
                    v0 = v4;\n
                else\n
                    s_2c =L Conv(128->32, ((0x0<96> CONCAT 0xbf800000<32>) * Conv(32->128, Load(addr=stack_base-28, size=4, endness=Iend_LE))))<4>\n
                v3 = v0;\n
                v2 = v3;\n
                tmp_58 = SubV(tmp_60, tmp_59);\n
                v10 = tmp_58 * (0 CONCAT 0x42c80000);\n
                v1 = v10;\n
                tmp_87 = SubV(tmp_89, tmp_88);\n
                v14 = tmp_87 * (0 CONCAT 0x461c4000);\n
                if (v14 == 9999)\n
                {\n
                    v2 += 1;\n
                    v1 = 0;\n
                }\n
                else\n
                {\n
                    tmp_27 = SubV(tmp_29, tmp_28);\n
                    v14 = tmp_27 * (0 CONCAT 0x461c4000);\n
                    if (v14 == 1)\n
                        v1 = 0;\n
                }\n
                v14 = 4576918229304087675;\n
                if ((((CmpF(4576918229304087675, v3) & 69) | ((CmpF(4576918229304087675, v3) & 69) >> 6)) & 1) != 1)\n
                {\n
                    cgc_sprintf(&print_matrix.buf, \"%s 0.0 |\", &print_matrix.buf, a0, a4);\n
                }\n
                else\n
                {\n
                    v14 = 0;\n
                    *(&v14) = v4;\n
                    if ((CmpF(v14, 13785580428911960874) & 1))\n
                        cgc_sprintf(&print_matrix.buf, \"%s -%d.%d |\", &print_matrix.buf, v2, v1);\n
                    else\n
                        cgc_sprintf(&print_matrix.buf, \"%s %d.%d |\", &print_matrix.buf, v2, v1);\n
                }\n
            }\n
        }\n
        cgc_sprintf(&print_matrix.buf, \"%s\\n
\", &print_matrix.buf, a0, a4);\n
    }\n
    if (print_matrix.buf)\n
    {\n
        v15 = cgc_transmitall(&print_matrix.buf, cgc_strlen(&print_matrix.buf));\n
        print_matrix.buf = 0;\n
        return v15;\n
    }\n
    return print_matrix.buf;\n
}\n
", "4226365:sub_407d3d": null, "4226368:cgc_m_add": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[28];\n
    struct struct_0 *field_28;\n
    char padding_30[8];\n
    struct struct_0 *field_38;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_m_add(struct_1 *a0, struct_1 *a1, struct_2 *a2)\n
{\n
    unsigned short v0;  // [bp-0x34]\n
    unsigned short v1;  // [bp-0x32]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    struct_1 *v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_1 *v7;  // rcx\n
    unsigned long long v8;  // r8\n
\n
    v4 = a0;\n
    if (a0 && a1 && a2)\n
    {\n
        if (a0->field_0 == a1->field_0 && a0->field_4 == a1->field_4)\n
        {\n
            a2->field_8 = 1;\n
            v7 = a0;\n
            a2->field_38(a2, a0->field_0, v7->field_4, v7);\n
            for (v3 = 0; v3 < a2->field_0; v3 += 1)\n
            {\n
                for (v2 = 0; v2 < a2->field_4; v2 += 1)\n
                {\n
                    v1 = a0->field_18(v4, v3, v2);\n
                    v0 = a1->field_18(a1, v3, v2);\n
                    v8 = v0;\n
                    a2->field_28(a2, v3, v2, v1 + v8, v8);\n
                }\n
            }\n
            v5 = 0;\n
            return v5;\n
        }\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = 1;\n
    return v5;\n
}\n
", "4226695:sub_407e87": null, "4226704:cgc_m_subtract": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[28];\n
    struct struct_0 *field_28;\n
    char padding_30[8];\n
    struct struct_0 *field_38;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_m_subtract(struct_1 *a0, struct_1 *a1, struct_2 *a2)\n
{\n
    unsigned short v0;  // [bp-0x34]\n
    unsigned short v1;  // [bp-0x32]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    struct_1 *v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_1 *v7;  // rcx\n
    unsigned long long v8;  // r8\n
\n
    v4 = a0;\n
    if (a0 && a1 && a2)\n
    {\n
        if (a0->field_0 == a1->field_0 && a0->field_4 == a1->field_4)\n
        {\n
            a2->field_8 = 1;\n
            v7 = a0;\n
            a2->field_38(a2, a0->field_0, v7->field_4, v7);\n
            for (v3 = 0; v3 < a2->field_0; v3 += 1)\n
            {\n
                for (v2 = 0; v2 < a2->field_4; v2 += 1)\n
                {\n
                    v1 = v4->field_18(a0, v3, v2);\n
                    v0 = a1->field_18(a1, v3, v2);\n
                    v8 = v0;\n
                    a2->field_28(a2, v3, v2, v1 - v8, v8);\n
                }\n
            }\n
            v5 = 0;\n
            return v5;\n
        }\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = 1;\n
    return v5;\n
}\n
", "4227031:sub_407fd7": null, "4227040:cgc_m_multiply": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[28];\n
    struct struct_0 *field_28;\n
    char padding_30[8];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_m_multiply(struct_2 *a0, struct_2 *a1, struct_1 *a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    struct_2 *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0xc]\n
    struct_2 *v8;  // rcx\n
\n
    v5 = a1;\n
    if (a0 && a1 && a2)\n
    {\n
        if (a0->field_4 == a1->field_0)\n
        {\n
            a2->field_8 = 2;\n
            v8 = a1;\n
            a2->field_38(a2, a0->field_0, v8->field_4, v8);\n
            for (v4 = 0; v4 < a0->field_0; v4 += 1)\n
            {\n
                for (v2 = 0; v2 < a1->field_4; v2 += 1)\n
                {\n
                    v1 = 0;\n
                    for (v3 = 0; v3 < a0->field_4; v3 += 1)\n
                    {\n
                        v0 = a0->field_18(a0, v4, v3);\n
                        v1 = a1->field_18(v5, v3, v2) * v0 + v1;\n
                    }\n
                    a2->field_28(a2, v4, v2, v1);\n
                }\n
            }\n
            v6 = 0;\n
            return v6;\n
        }\n
        else\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
    }\n
    v6 = 1;\n
    return v6;\n
}\n
", "4227392:cgc_swap_row": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
    char padding_28[8];\n
    struct struct_0 *field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_swap_row(struct_1 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v6;  // ymm0\n
\n
    if (!a0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (a1 <= a0->field_0 && a2 <= a0->field_0)\n
    {\n
        for (v0 = 0; v0 < a0->field_4; v0 += 1)\n
        {\n
            a0->field_20(a0, a1, v0);\n
            v2 = ymm0<4>;\n
            a0->field_20(a0, a2, v0);\n
            v1 = ymm0<4>;\n
            a0->field_30(a0, a1, v0);\n
            v6 = v2;\n
            a0->field_30(a0, a2, v0);\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4227628:sub_40822c": null, "4227632:cgc_swap_col": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
    char padding_20[8];\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_swap_col(struct_1 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (a1 <= a0->field_4 && a2 <= a0->field_4)\n
    {\n
        for (v0 = 0; v0 < a0->field_0; v0 += 1)\n
        {\n
            v2 = a0->field_18(a0, v0, a1);\n
            v1 = a0->field_18(a0, v0, a2);\n
            a0->field_28(a0, v0, a1, v1);\n
            a0->field_28(a0, v0, a2, v2);\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4227877:sub_408325": null, "4227888:cgc_m_transpose": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
    char padding_20[24];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_m_transpose(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    struct struct_0 *v4[8];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v8 = 1;\n
        return v8;\n
    }\n
    v7 = a0->field_0;\n
    v6 = a0->field_4;\n
    v4[0] = 0;\n
    v0 = a0->field_8;\n
    if (v0 == 1)\n
    {\n
        v4 = cgc_create_matrix(1, 0);\n
        v5 = 2;\n
    }\n
    else if (v0 == 2)\n
    {\n
        v4 = cgc_create_matrix(2, 0);\n
        v5 = 4;\n
    }\n
    else if (v0 == 4)\n
    {\n
        v4[7](v4, v6, v7);\n
        v5 = 4;\n
    }\n
    *((v4 + 56))(v4, v6, v7);\n
    for (v3 = 0; v3 < a0->field_0; v3 += 1)\n
    {\n
        for (v2 = 0; v2 < a0->field_4; v2 += 1)\n
        {\n
            v1 = a0->field_18(a0, v3, v2);\n
            *((v4 + 40))(v4, v2, v3, v1);\n
        }\n
    }\n
    a0->field_38(a0, v6, v7);\n
    cgc_memcpy(&a0[1].field_8, v4 + 72, v5 * v7 * v6);\n
    cgc_free(v4);\n
    v8 = 0;\n
    return v8;\n
}\n
", "4228319:sub_4084df": null, "4228320:cgc_m_rref": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[16];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[20];\n
    struct struct_0 *field_20;\n
    char padding_28[8];\n
    struct struct_0 *field_30;\n
    struct struct_0 *field_38;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_m_rref(struct_1 *a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x51]\n
    int tmp_10;  // tmp #10\n
    int tmp_12;  // tmp #12\n
    int tmp_11;  // tmp #11\n
    struct_2 *v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    struct struct_0 **v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    struct_2 *v11;  // [bp-0x20]\n
    struct_1 *v12;  // [bp-0x18]\n
    unsigned int v13;  // [bp-0xc]\n
    struct_1 *v15;  // rcx\n
    int v16;  // xmm0lq, Other Possible Types: unsigned long long\n
    unsigned long v17;  // xmm1lq\n
    int v18;  // xmm0\n
\n
    v12 = a0;\n
    v11 = a1;\n
    if (a0 && a1)\n
    {\n
        a1->field_8 = 4;\n
        v15 = a0;\n
        v11->field_38(a1, a0->field_0, v15->field_4, v15);\n
        for (v10 = 0; v10 < a0->field_0; v10 += 1)\n
        {\n
            for (v9 = 0; v9 < a0->field_4; v9 += 1)\n
            {\n
                v4 = &a1->field_30->field_0;\n
                v1 = a1;\n
                v2 = v10;\n
                v3 = v9;\n
                v4(v1, v2, v3, v12->field_18(a0, v10, v9));\n
            }\n
        }\n
        v8 = 0x3f800000;\n
        v7 = 0;\n
        v10 = 0;\n
        v9 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v10 < a1->field_0)\n
                v0 = v9 < a1->field_4;\n
            if (!(v0 & 1))\n
                break;\n
            v16 = 4562208392057185066;\n
            if (!(CmpF(4562208392057185066, v8) & 1))\n
            {\n
                v16 = 0;\n
                *(&v16) = v8;\n
                if (!(CmpF(v16, 13785580428911960874) & 1))\n
                    v10 -= 1;\n
            }\n
            cgc_swap_nonzero_cell(a1, v10, v9);\n
            a1->field_20(v11, v10, v9);\n
            v8 = v16;\n
            for (v7 = v9; v7 < a1->field_4; v7 += 1)\n
            {\n
                if (!(CmpF(4562208392057185066, v8) & 1) && !(CmpF(v8, 13785580428911960874) & 1))\n
                    break;\n
                tmp_10 = SubV(tmp_12, tmp_11);\n
                v16 = tmp_10;\n
                v17 = v16;\n
                v16 = 4562208392057185066;\n
                if (!(CmpF(4562208392057185066, v17) & 1))\n
                {\n
                    tmp_10 = SubV(tmp_12, tmp_11);\n
                    v16 = tmp_10;\n
                    if (!(CmpF(v16, 13785580428911960874) & 1))\n
                        break;\n
                }\n
                a1->field_20(v11, v10, v7);\n
                v6 = v16;\n
                a1->field_30(v11, v10, v7);\n
            }\n
            v7 = 0;\n
            while (v7 < a1->field_0)\n
            {\n
                v16 = 4562208392057185066;\n
                if (!(CmpF(4562208392057185066, v8) & 1))\n
                {\n
                    v16 = 0;\n
                    *(&v16) = v8;\n
                    if (!(CmpF(v16, 13785580428911960874) & 1))\n
                        break;\n
                }\n
                if (v7 == v10)\n
                {\n
LABEL_408843:\n
                    v7 += 1;\n
                }\n
                else\n
                {\n
                    a1->field_20(v11, v7, v9);\n
                    v5 = v16;\n
                    v18 = 0;\n
                    *(&v18) = v5;\n
                    if ((((CmpF(v18, 4562208392057185066) & 69) | ((CmpF(v18, 4562208392057185066) & 69) >> 6)) & 1) == 1 && ((CmpF(13785580428911960874, v5) & 69 | (CmpF(13785580428911960874, v5) & 69) >> 6) & 1) == 1)\n
                        goto LABEL_40883e;\n
                    cgc_subtract_row(a1, v10, v7, v9);\n
LABEL_40883e:\n
                    goto LABEL_408843;\n
                }\n
            }\n
            v10 += 1;\n
            v9 += 1;\n
        }\n
        v13 = 0;\n
        return v13;\n
    }\n
    v13 = 1;\n
    return v13;\n
}\n
", "4229245:sub_40887d": null, "4229248:cgc_swap_nonzero_cell": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[28];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_swap_nonzero_cell(struct_1 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v4;  // xmm0lq\n
\n
    v1 = a1;\n
    if (!a0)\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
    a0->field_20(a0, v1, a2);\n
    if ((((CmpF(v4, 4562208392057185066) & 69) | ((CmpF(v4, 4562208392057185066) & 69) >> 6)) & 1) == 1)\n
    {\n
        a0->field_20(a0, v1, a2);\n
        if ((((CmpF(13785580428911960874, v4) & 69) | ((CmpF(13785580428911960874, v4) & 69) >> 6)) & 1) == 1)\n
        {\n
            v0 = v1;\n
            v1 += 1;\n
            while (true)\n
            {\n
                if (v1 >= a0->field_0)\n
                {\n
                    v2 = -1;\n
                    return v2;\n
                }\n
                a0->field_20(a0, v1, a2);\n
                if ((((CmpF(13785580428911960874, 4562208392057185066) & 69) | ((CmpF(13785580428911960874, 4562208392057185066) & 69) >> 6)) & 1) != 1)\n
                    break;\n
                a0->field_20(a0, v1, a2);\n
                if ((((CmpF(13785580428911960874, 1742725930) & 69) | ((CmpF(13785580428911960874, 1742725930) & 69) >> 6)) & 1) != 1)\n
                    break;\n
                v1 += 1;\n
            }\n
            v2 = cgc_swap_row(a0, v0, v1);\n
            return v2;\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4229557:sub_4089b5": null, "4229568:cgc_subtract_row": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
    char padding_28[8];\n
    struct struct_0 *field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_subtract_row(struct_1 *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_39;  // tmp #39\n
    int tmp_40;  // tmp #40\n
    int tmp_37;  // tmp #37\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0xc]\n
    int v7;  // xmm0\n
\n
    if (!a0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (a1 <= a0->field_0 && a2 <= a0->field_0)\n
    {\n
        for (v0 = a3; v0 < a0->field_4; v0 += 1)\n
        {\n
            a0->field_20(a0, a1, v0);\n
            s_2c =L (xmm0<16> * Conv(32->128, ymm0<4>))<4>\n
            a0->field_20(a0, a2, v0);\n
            v1 = v2;\n
            tmp_39 = SubV(tmp_40, tmp_37);\n
            v7 = tmp_39;\n
            a0->field_30(a0, a2, v0);\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4229796:sub_408aa4": null, "4229808:cgc_transmitall": "long long cgc_transmitall(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    v2 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v4 = v0;\n
        if (v4 >= a1)\n
            return v0;\n
        v4 = cgc_transmit(a0, a1, v5, v6);\n
        if (v4)\n
            break;\n
        if (!*(&v1))\n
            break;\n
        v0 = *(&v1) + v0;\n
    }\n
    return v4;\n
}\n
", "4229928:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}