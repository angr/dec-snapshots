{"4202496:_init": "extern struct_0 *g_9c0230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_9c0230;\n
    if (g_9c0230)\n
        v1 = g_9c0230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_9c0250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_9c0250;\n
    goto *(10224216);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(10224192);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_9c0228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_9c0238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_9c0240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_9c0240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202933:sub_4021b5": null, "4202944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202991:sub_4021ef": null, "4202992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203199:sub_4022bf": null, "4203200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203221:sub_4022d5": null, "4203232:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4219024];\n
    char field_406090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203247:sub_4022ef": null, "4203248:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203279:sub_40230f": null, "4203280:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203354:sub_40235a": null, "4203360:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_9c0ed8;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_1 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rsi\n
    unsigned long long v13;  // rdx\n
    struct_2 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_1 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_0 *v20;  // rax\n
\n
    if (!a0)\n
        return 0;\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            return 0;\n
        v7 = *(&v0);\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v6 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v6 = a0;\n
    if (v6 <= 2147483647)\n
    {\n
        v9 = v6 + 24;\n
        v10 = cgc_get_size_class(v9);\n
        if (v10 <= 31)\n
        {\n
            do\n
            {\n
                v11 = *(&(&cgc_free_lists)[8 * v10]);\n
                if (v11)\n
                {\n
                    while (*(v11) < v9)\n
                    {\n
                        v11 = *((v11 + 16));\n
                        if (!v11)\n
                            goto LABEL_40240e;\n
                    }\n
                }\n
LABEL_40240e:\n
                v10 += 1;\n
            } while (v10 != 32);\n
            goto LABEL_402472;\n
        }\n
        if (!cgc_allocate(v9, v12, v13))\n
        {\n
            v15 = *(&v0);\n
            if (v15)\n
            {\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_9c0ed8;\n
LABEL_402472:\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
    }\n
}\n
", "4203755:sub_4024eb": null, "4203760:cgc_get_size_class": "extern unsigned long long size_class_limits[4];\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    void* v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (size_class_limits[v1] >= a0)\n
        {\n
            return v1;\n
        }\n
        else if (size_class_limits[1 + v1] >= a0)\n
        {\n
            return v1 + 1;\n
        }\n
        else if (size_class_limits[2 + v1] >= a0)\n
        {\n
            v1 += 2;\n
            return v1;\n
        }\n
        else if (size_class_limits[3 + v1] >= a0)\n
        {\n
            return v1 + 3;\n
        }\n
        else\n
        {\n
            v1 += 4;\n
            if (v1 == 32)\n
                return 32;\n
        }\n
    }\n
}\n
", "4203834:sub_40253a": null, "4203840:cgc_insert_into_flist": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits[4];\n
\n
long long cgc_insert_into_flist(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rcx\n
    void* v2;  // rax, Other Possible Types: unsigned long, unsigned long long, struct struct_1 **\n
    struct_1 *v3;  // rdx\n
\n
    v1 = a0->field_0;\n
    v2 = 0;\n
    do\n
    {\n
        if (size_class_limits[v2] >= v1)\n
        {\n
LABEL_40258c:\n
            goto LABEL_40258e;\n
        }\n
        if (size_class_limits[1 + v2] >= v1)\n
        {\n
            v2 += 1;\n
            goto LABEL_40258c;\n
        }\n
        if (size_class_limits[2 + v2] >= v1)\n
        {\n
            v2 += 2;\n
            goto LABEL_40258c;\n
        }\n
        if (size_class_limits[3 + v2] >= v1)\n
        {\n
            v2 += 3;\n
            goto LABEL_40258c;\n
        }\n
        v2 += 4;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_40258e:\n
    a0->field_8 = 1;\n
    v3 = *(&(&cgc_free_lists)[8 * v2]);\n
    if (v3)\n
    {\n
        a0->field_10 = v3;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        a0->field_18 = 0;\n
        return v2;\n
    }\n
    *(&(&cgc_free_lists)[8 * v2]) = a0;\n
    return v2;\n
}\n
", "4203971:sub_4025c3": null, "4203984:cgc_remove_from_flist": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits[4];\n
\n
long long cgc_remove_from_flist(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rcx\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long, unsigned long long [4]\n
    struct_2 *v3;  // rcx\n
    struct_3 *v4;  // rdx\n
\n
    v1 = a0->field_0;\n
    v2 = 0;\n
    do\n
    {\n
        if (size_class_limits[v2] >= v1)\n
        {\n
LABEL_40261c:\n
            goto LABEL_40261e;\n
        }\n
        if (size_class_limits[1 + v2] >= v1)\n
        {\n
            v2 += 1;\n
            goto LABEL_40261c;\n
        }\n
        if (size_class_limits[2 + v2] >= v1)\n
        {\n
            v2 += 2;\n
            goto LABEL_40261c;\n
        }\n
        if (size_class_limits[3 + v2] >= v1)\n
        {\n
            v2 += 3;\n
            goto LABEL_40261c;\n
        }\n
        v2 += 4;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_40261e:\n
    v3 = a0[1].field_0;\n
    if (v3)\n
        v3->field_10 = a0->field_10;\n
    v4 = a0->field_10;\n
    if (v4)\n
        v4->field_18 = v3;\n
    if (*(&(&cgc_free_lists)[8 * v2]) == a0)\n
        *(&(&cgc_free_lists)[8 * v2]) = v4;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v2;\n
}\n
", "4204124:sub_40265c": null, "4204128:cgc_coalesce": "extern char cgc_free_lists;\n
extern char size_class_limits;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v1;  // rsi\n
    unsigned long v2;  // r9\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // rcx\n
    unsigned long v5;  // rdx\n
    unsigned long v6;  // r10\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rcx\n
    unsigned long v12;  // r9\n
    unsigned long v13;  // rdx\n
    unsigned long v14;  // rdx\n
    unsigned long v15;  // rdx\n
    unsigned long v16;  // rsi\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // rsi\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rsi\n
    unsigned long v25;  // r9\n
    unsigned long v26;  // rdx\n
    unsigned long v27;  // r9\n
    unsigned long v28;  // rdx\n
    unsigned long v29;  // rsi\n
    unsigned long v30;  // rsi\n
    unsigned long v31;  // rsi\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rcx\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rsi\n
    unsigned long v36;  // rsi\n
    unsigned long v37;  // rdx\n
    unsigned long v38;  // rcx\n
    unsigned long v39;  // rsi\n
    unsigned long v40;  // rax\n
    unsigned long v41;  // r9\n
    unsigned long v42;  // rsi\n
    unsigned long v43;  // rax\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rdx\n
    unsigned long v46;  // rcx\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rax\n
    unsigned long v49;  // rcx\n
    unsigned long v50;  // rsi\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rdx\n
    unsigned long v54;  // rax\n
    unsigned long v55;  // rcx\n
    unsigned long v56;  // rcx\n
    unsigned long v57;  // rax\n
    unsigned long v58;  // rcx\n
\n
    v1 = *((a0 + 40));\n
    if (!v1)\n
        return v48;\n
    v2 = *((a0 + 32));\n
    if (!*((v1 + 8)))\n
    {\n
        if (!v2)\n
        {\n
            return v48;\n
        }\n
        else if (!*((v2 + 8)))\n
        {\n
            return v48;\n
        }\n
        else\n
        {\n
            v4 = *(v2);\n
            v5 = 0;\n
            do\n
            {\n
                if ((&size_class_limits)[v5] >= v4)\n
                {\n
LABEL_4029a8:\n
                    v10 = v5;\n
                    goto LABEL_4029ab;\n
                }\n
                if ((&size_class_limits)[1 + v5] >= v4)\n
                {\n
                    v5 += 1;\n
                    goto LABEL_4029a8;\n
                }\n
                if ((&size_class_limits)[2 + v5] >= v4)\n
                {\n
                    v5 += 2;\n
                    goto LABEL_4029a8;\n
                }\n
                if ((&size_class_limits)[3 + v5] >= v4)\n
                {\n
                    v5 += 3;\n
                    goto LABEL_4029a8;\n
                }\n
                v5 += 4;\n
            } while (v5 != 32);\n
            v10 = 32;\n
LABEL_4029ab:\n
            v13 = *((v2 + 24));\n
            if (v13)\n
                *((v13 + 16)) = *((v2 + 16));\n
            v16 = *((v2 + 16));\n
            if (v16)\n
                *((v16 + 24)) = v13;\n
            if ((&cgc_free_lists)[v10] == v2)\n
                (&cgc_free_lists)[v10] = v16;\n
            *((v2 + 16)) = 0;\n
            *((v2 + 8)) = 0;\n
            v20 = *(a0);\n
            v21 = 0;\n
            do\n
            {\n
                if ((&size_class_limits)[v21] >= v20)\n
                {\n
LABEL_402a2d:\n
                    v25 = v21;\n
                    goto LABEL_402a30;\n
                }\n
                if ((&size_class_limits)[1 + v21] >= v20)\n
                {\n
                    v21 += 1;\n
                    goto LABEL_402a2d;\n
                }\n
                if ((&size_class_limits)[2 + v21] >= v20)\n
                {\n
                    v21 += 2;\n
                    goto LABEL_402a2d;\n
                }\n
                if ((&size_class_limits)[3 + v21] >= v20)\n
                {\n
                    v21 += 3;\n
                    goto LABEL_402a2d;\n
                }\n
                v21 += 4;\n
            } while (v21 != 32);\n
            v25 = 32;\n
LABEL_402a30:\n
            v28 = *((a0 + 24));\n
            if (v28)\n
                *((v28 + 16)) = *((a0 + 16));\n
            v31 = *((a0 + 16));\n
            if (v31)\n
                *((v31 + 24)) = v28;\n
            if ((&cgc_free_lists)[v25] == a0)\n
                (&cgc_free_lists)[v25] = v31;\n
            *((a0 + 16)) = 0;\n
            v34 = v20 + *(*((a0 + 32)));\n
            *(a0) = v34;\n
            v39 = 0;\n
            do\n
            {\n
                if ((&size_class_limits)[v39] >= v34)\n
                {\n
LABEL_402aac:\n
                    v40 = v39;\n
                    goto LABEL_402aaf;\n
                }\n
                if ((&size_class_limits)[1 + v39] >= v34)\n
                {\n
                    v39 += 1;\n
                    goto LABEL_402aac;\n
                }\n
                if ((&size_class_limits)[2 + v39] >= v34)\n
                {\n
                    v39 += 2;\n
                    goto LABEL_402aac;\n
                }\n
                if ((&size_class_limits)[3 + v39] >= v34)\n
                {\n
                    v39 += 3;\n
                    goto LABEL_402aac;\n
                }\n
                v39 += 4;\n
            } while (v39 != 32);\n
            v40 = 32;\n
LABEL_402aaf:\n
            *((a0 + 8)) = 1;\n
            v44 = (&cgc_free_lists)[v40];\n
            if (!v44)\n
            {\n
                (&cgc_free_lists)[v40] = a0;\n
            }\n
            else\n
            {\n
                *((a0 + 16)) = v44;\n
                *(((&cgc_free_lists)[v40] + 24)) = a0;\n
                (&cgc_free_lists)[v40] = a0;\n
                *((a0 + 24)) = 0;\n
            }\n
            v47 = *((a0 + 32));\n
            v48 = *((v47 + 40));\n
            if (v48)\n
                *((v48 + 32)) = *((v47 + 32));\n
            v49 = *((v47 + 32));\n
            if (!v49)\n
                return v48;\n
        }\n
        goto LABEL_402c7b;\n
    }\n
    if (v2 && *((v2 + 8)))\n
    {\n
        v3 = *(v1);\n
        v7 = 0;\n
        do\n
        {\n
            if ((&size_class_limits)[v7] >= v3)\n
            {\n
LABEL_4027a0:\n
                v6 = v7;\n
                goto LABEL_4027a3;\n
            }\n
            if ((&size_class_limits)[1 + v7] >= v3)\n
            {\n
                v7 += 1;\n
                goto LABEL_4027a0;\n
            }\n
            if ((&size_class_limits)[2 + v7] >= v3)\n
            {\n
                v7 += 2;\n
                goto LABEL_4027a0;\n
            }\n
            if ((&size_class_limits)[3 + v7] >= v3)\n
            {\n
                v7 += 3;\n
                goto LABEL_4027a0;\n
            }\n
            v7 += 4;\n
        } while (v7 != 32);\n
        v6 = 32;\n
LABEL_4027a3:\n
        v11 = *((v1 + 24));\n
        if (v11)\n
            *((v11 + 16)) = *((v1 + 16));\n
        v14 = *((v1 + 16));\n
        if (v14)\n
            *((v14 + 24)) = v11;\n
        if ((&cgc_free_lists)[v6] == v1)\n
        {\n
            (&cgc_free_lists)[v6] = v14;\n
            v2 = *((a0 + 32));\n
        }\n
        *((v1 + 16)) = 0;\n
        *((v1 + 8)) = 0;\n
        v18 = *(v2);\n
        v19 = 0;\n
        do\n
        {\n
            if ((&size_class_limits)[v19] >= v18)\n
            {\n
LABEL_40282c:\n
                v22 = v19;\n
                goto LABEL_40282f;\n
            }\n
            if ((&size_class_limits)[1 + v19] >= v18)\n
            {\n
                v19 += 1;\n
                goto LABEL_40282c;\n
            }\n
            if ((&size_class_limits)[2 + v19] >= v18)\n
            {\n
                v19 += 2;\n
                goto LABEL_40282c;\n
            }\n
            if ((&size_class_limits)[3 + v19] >= v18)\n
            {\n
                v19 += 3;\n
                goto LABEL_40282c;\n
            }\n
            v19 += 4;\n
        } while (v19 != 32);\n
        v22 = 32;\n
LABEL_40282f:\n
        v26 = *((v2 + 24));\n
        if (v26)\n
            *((v26 + 16)) = *((v2 + 16));\n
        v29 = *((v2 + 16));\n
        if (v29)\n
            *((v29 + 24)) = v26;\n
        if ((&cgc_free_lists)[v22] == v2)\n
            (&cgc_free_lists)[v22] = v29;\n
        *((v2 + 16)) = 0;\n
        *((v2 + 8)) = 0;\n
        v33 = *(a0);\n
        v35 = 0;\n
        do\n
        {\n
            if ((&size_class_limits)[v35] >= v33)\n
            {\n
LABEL_4028ad:\n
                v41 = v35;\n
                goto LABEL_4028b0;\n
            }\n
            if ((&size_class_limits)[1 + v35] >= v33)\n
            {\n
                v35 += 1;\n
                goto LABEL_4028ad;\n
            }\n
            if ((&size_class_limits)[2 + v35] >= v33)\n
            {\n
                v35 += 2;\n
                goto LABEL_4028ad;\n
            }\n
            if ((&size_class_limits)[3 + v35] >= v33)\n
            {\n
                v35 += 3;\n
                goto LABEL_4028ad;\n
            }\n
            v35 += 4;\n
        } while (v35 != 32);\n
        v41 = 32;\n
LABEL_4028b0:\n
        v42 = *((a0 + 24));\n
        if (v42)\n
            *((v42 + 16)) = *((a0 + 16));\n
        v45 = *((a0 + 16));\n
        if (v45)\n
            *((v45 + 24)) = v42;\n
        if ((&cgc_free_lists)[v41] == a0)\n
            (&cgc_free_lists)[v41] = v45;\n
        *((a0 + 16)) = 0;\n
        *((a0 + 8)) = 0;\n
        v50 = *((a0 + 40));\n
        v51 = v33 + *(v50);\n
        *(v50) = v51;\n
        v52 = v51 + *(*((a0 + 32)));\n
        *(v50) = v52;\n
        v53 = 0;\n
        do\n
        {\n
            if ((&size_class_limits)[v53] >= v52)\n
            {\n
LABEL_40293c:\n
                v54 = v53;\n
                goto LABEL_40293f;\n
            }\n
            if ((&size_class_limits)[1 + v53] >= v52)\n
            {\n
                v53 += 1;\n
                goto LABEL_40293c;\n
            }\n
            if ((&size_class_limits)[2 + v53] >= v52)\n
            {\n
                v53 += 2;\n
                goto LABEL_40293c;\n
            }\n
            if ((&size_class_limits)[3 + v53] >= v52)\n
            {\n
                v53 += 3;\n
                goto LABEL_40293c;\n
            }\n
            v53 += 4;\n
        } while (v53 != 32);\n
        v54 = 32;\n
LABEL_40293f:\n
        *((v50 + 8)) = 1;\n
        v55 = (&cgc_free_lists)[v54];\n
        if (!v55)\n
        {\n
            (&cgc_free_lists)[v54] = v50;\n
        }\n
        else\n
        {\n
            *((v50 + 16)) = v55;\n
            *(((&cgc_free_lists)[v54] + 24)) = v50;\n
            (&cgc_free_lists)[v54] = v50;\n
            *((v50 + 24)) = 0;\n
        }\n
        v56 = *((a0 + 32));\n
        v57 = *((v56 + 40));\n
        if (v57)\n
            *((v57 + 32)) = *((v56 + 32));\n
        v58 = *((v56 + 32));\n
        if (v58)\n
        {\n
            *((v58 + 40)) = v57;\n
            goto LABEL_402c5d;\n
        }\n
    }\n
    v48 = *((a0 + 32));\n
    if (!v48)\n
        return *((a0 + 32));\n
    if (*((v48 + 8)))\n
        return *((a0 + 32));\n
    v8 = *(v1);\n
    v9 = 0;\n
    do\n
    {\n
        if ((&size_class_limits)[v9] >= v8)\n
        {\n
LABEL_402b14:\n
            v12 = v9;\n
            goto LABEL_402b17;\n
        }\n
        if ((&size_class_limits)[1 + v9] >= v8)\n
        {\n
            v9 += 1;\n
            goto LABEL_402b14;\n
        }\n
        if ((&size_class_limits)[2 + v9] >= v8)\n
        {\n
            v9 += 2;\n
            goto LABEL_402b14;\n
        }\n
        if ((&size_class_limits)[3 + v9] >= v8)\n
        {\n
            v9 += 3;\n
            goto LABEL_402b14;\n
        }\n
        v9 += 4;\n
    } while (v9 != 32);\n
    v12 = 32;\n
LABEL_402b17:\n
    v15 = *((v1 + 24));\n
    if (v15)\n
        *((v15 + 16)) = *((v1 + 16));\n
    v17 = *((v1 + 16));\n
    if (v17)\n
        *((v17 + 24)) = v15;\n
    if ((&cgc_free_lists)[v12] == v1)\n
        (&cgc_free_lists)[v12] = v17;\n
    *((v1 + 16)) = 0;\n
    *((v1 + 8)) = 0;\n
    v23 = *(a0);\n
    v24 = 0;\n
    do\n
    {\n
        if ((&size_class_limits)[v24] >= v23)\n
        {\n
LABEL_402b9d:\n
            v27 = v24;\n
            goto LABEL_402ba0;\n
        }\n
        if ((&size_class_limits)[1 + v24] >= v23)\n
        {\n
            v24 += 1;\n
            goto LABEL_402b9d;\n
        }\n
        if ((&size_class_limits)[2 + v24] >= v23)\n
        {\n
            v24 += 2;\n
            goto LABEL_402b9d;\n
        }\n
        if ((&size_class_limits)[3 + v24] >= v23)\n
        {\n
            v24 += 3;\n
            goto LABEL_402b9d;\n
        }\n
        v24 += 4;\n
    } while (v24 != 32);\n
    v27 = 32;\n
LABEL_402ba0:\n
    v30 = *((a0 + 24));\n
    if (v30)\n
        *((v30 + 16)) = *((a0 + 16));\n
    v32 = *((a0 + 16));\n
    if (v32)\n
        *((v32 + 24)) = v30;\n
    if ((&cgc_free_lists)[v27] == a0)\n
        (&cgc_free_lists)[v27] = v32;\n
    *((a0 + 16)) = 0;\n
    *((a0 + 8)) = 0;\n
    v36 = *((a0 + 40));\n
    v37 = v23 + *(v36);\n
    *(v36) = v37;\n
    v38 = 0;\n
    do\n
    {\n
        if ((&size_class_limits)[v38] >= v37)\n
        {\n
LABEL_402c2c:\n
            v43 = v38;\n
            goto LABEL_402c2f;\n
        }\n
        if ((&size_class_limits)[1 + v38] >= v37)\n
        {\n
            v38 += 1;\n
            goto LABEL_402c2c;\n
        }\n
        if ((&size_class_limits)[2 + v38] >= v37)\n
        {\n
            v38 += 2;\n
            goto LABEL_402c2c;\n
        }\n
        if ((&size_class_limits)[3 + v38] >= v37)\n
        {\n
            v38 += 3;\n
            goto LABEL_402c2c;\n
        }\n
        v38 += 4;\n
    } while (v38 != 32);\n
    v43 = 32;\n
LABEL_402c2f:\n
    *((v36 + 8)) = 1;\n
    v46 = (&cgc_free_lists)[v43];\n
    if (!v46)\n
    {\n
        (&cgc_free_lists)[v43] = v36;\n
    }\n
    else\n
    {\n
        *((v36 + 16)) = v46;\n
        *(((&cgc_free_lists)[v43] + 24)) = v36;\n
        (&cgc_free_lists)[v43] = v36;\n
        *((v36 + 24)) = 0;\n
    }\n
LABEL_402c5d:\n
    v48 = *((a0 + 40));\n
    if (v48)\n
        *((v48 + 32)) = *((a0 + 32));\n
    v49 = *((a0 + 32));\n
    if (v49)\n
    {\n
LABEL_402c7b:\n
        *((v49 + 40)) = v48;\n
        return v48;\n
    }\n
    return *((a0 + 40));\n
}\n
", "4205696:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205738:sub_402caa": null, "4205744:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205790:sub_402cde": null, "4205792:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_402d74:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_402d07;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_402d07:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_402d74;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_402d07;\n
}\n
", "4206223:sub_402e8f": null, "4206224:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_402fdf:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_402ec9;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_402ec9:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_402fdf;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_402ec9;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_402f67:\n
            v38 = a2;\n
            goto LABEL_402f6a;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_402f67;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_402f67;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_402f6a:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4207159:sub_403237": null, "4207168:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_4033b9;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_4033b9:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_4033b9;\n
}\n
", "4207566:sub_4033ce": null, "4207568:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char v3;  // bpl\n
    unsigned long long v5;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v3 = a4;\n
    v6 = a1;\n
    if (a1 < a2)\n
    {\n
        v1 = 0;\n
        if (a3 <= 0)\n
            goto LABEL_40346a;\n
    }\n
    else\n
    {\n
        a3 -= 1;\n
        v6 = (0 CONCAT a1) /m a2 >> 32;\n
        v1 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
        if (a3 <= 0)\n
            goto LABEL_40346a;\n
    }\n
    if (!v1)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            do\n
            {\n
                if ((v3 & 1))\n
                    v0 = 48;\n
                else\n
                    v0 = 32;\n
                cgc_transmit(a0, a1, a2, a3);\n
                tmp_5 = v5;\n
                v5 = v5 - 1;\n
            } while (tmp_5 + -1);\n
        }\n
    }\n
LABEL_40346a:\n
    v7 = (!(v3 & 2) ? v6 + 55 : v6 + 87);\n
    v8 = v6 + 48;\n
    if (10 <= v6)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc_transmit();\n
    return v1 + 1;\n
}\n
", "4207676:sub_40343c": null, "4207798:sub_4034b6": null, "4207808:cgc_fdprintf": "extern unsigned long long g_406110;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    char *v31;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    void* v33;  // r12, Other Possible Types: unsigned long long, unsigned long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v37;  // rcx\n
    unsigned long long v38;  // rcx\n
    unsigned long long v39;  // rcx\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v41;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v42;  // rax, Other Possible Types: unsigned long\n
    unsigned long v43;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v45;  // rax, Other Possible Types: unsigned long\n
    char *v46;  // rbp\n
    unsigned long v47;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v49;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v50;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v51;  // rbx\n
    unsigned long long v52;  // r12, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v52 = &v5;\n
    do\n
    {\n
        v31 = a1 + 1;\n
        v4 = v31;\n
        if (*(a1) != 37)\n
        {\n
            v0 = *(a1);\n
        }\n
        else\n
        {\n
            v32 = v52;\n
            v33 = 0;\n
            v34 = 0;\n
            a0 = v31;\n
            while (true)\n
            {\n
                v31 = a0 + 1;\n
                v4 = v31;\n
                a3 = *(a0);\n
                a2 = a3;\n
                if ((a2 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol();\n
                a0 = v4;\n
            }\n
            a1 = a2 - 88;\n
            switch (a1)\n
            {\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
                v0 = a3;\n
            case 11:\n
                a3 = v1;\n
                if (a3 <= 40)\n
                {\n
                    v40 = a3 + v3;\n
                    a3 = a3 + 8;\n
                    v1 = a3;\n
                }\n
                else\n
                {\n
                    v40 = v2;\n
                    v2 = v40 + 8;\n
                }\n
                v52 = rbx<8>;\n
                v0 = *(v40);\n
                goto LABEL_403574;\n
            case 12:\n
                v36 = v1;\n
                if (v36 <= 40)\n
                {\n
                    v41 = v36 + v3;\n
                    v36 = v36 + 8;\n
                    v1 = v36;\n
                }\n
                else\n
                {\n
                    v41 = v2;\n
                    v2 = v41 + 8;\n
                }\n
                v50 = *(v41);\n
                if (v50 < 0)\n
                {\n
                    v0 = 45;\n
                    cgc_transmit(a0, a1, &g_406110, v36);\n
                    v50 = -(v50);\n
                }\n
                cgc_output_number_printf(v30, v50, 10, v34, v33);\n
                v52 = rbx<8>;\n
                break;\n
            case 27:\n
                v37 = v1;\n
                if (v37 > 40)\n
                {\n
                    v42 = v2;\n
                    v43 = v42 + 8;\n
                    v2 = v43;\n
                }\n
                else\n
                {\n
                    v42 = v37 + v3;\n
                    v43 = v37 + 8;\n
                    v1 = v43;\n
                }\n
                v52 = rbx<8>;\n
                v46 = *(v42);\n
                if (cgc_strlen(v46))\n
                {\n
                    v51 = 0;\n
                    do\n
                    {\n
                        v0 = v46[v51];\n
                        cgc_transmit(a0, a1, &g_406110, v43);\n
                        v51 += 1;\n
                    } while (cgc_strlen(v46) > v51);\n
                }\n
                break;\n
            case 29:\n
                v38 = v1;\n
                if (v38 <= 40)\n
                {\n
                    v44 = v38 + v3;\n
                    v1 = v38 + 8;\n
                }\n
                else\n
                {\n
                    v44 = v2;\n
                    v2 = v44 + 8;\n
                }\n
                v47 = *(v44);\n
                v48 = v30;\n
                v49 = 10;\n
LABEL_4037ea:\n
                cgc_output_number_printf(v48, v47, v49, v34, v33);\n
                v52 = rbx<8>;\n
                break;\n
            case 0:\n
                v33 = v33 | 2;\n
            case 32:\n
                v39 = v1;\n
                if (v39 > 40)\n
                {\n
                    v45 = v2;\n
                    v2 = v45 + 8;\n
                }\n
                else\n
                {\n
                    v45 = v39 + v3;\n
                    v1 = v39 + 8;\n
                }\n
                v47 = *(v45);\n
                v48 = v30;\n
                v49 = 16;\n
                goto LABEL_4037ea;\n
            default:\n
                if (a2 == 37)\n
                    goto LABEL_0x4036e4;\n
                else\n
                    goto LABEL_0x4035f1;\n
            }\n
        }\n
LABEL_403574:\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4207982:sub_40356e": null, "4208094:sub_4035de": null, "4208126:sub_4035fe": null, "4208656:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_36;  // tmp #36\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    struct struct_0 **v10;  // rbx\n
    unsigned long long v11;  // rax\n
    unsigned long v12;  // rbp, Other Possible Types: unsigned long long\n
    void* v13;  // rax, Other Possible Types: unsigned long\n
    unsigned long v14;  // rcx, Other Possible Types: unsigned long long\n
    char v15;  // dl\n
    char v16[2];  // rsi\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v10 = a1;\n
    v13 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v11 = (0 CONCAT a2) /m a3;\n
        v12 = v11 / 0x100000000;\n
        v13 = cgc_output_number_sprintf(a0, a1, v11, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v13)\n
    {\n
        v14 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            if ((v14 & 1))\n
            {\n
                *(a1)->field_0 = ((v9 & 1) * 16) | 32;\n
                *(v10) = &*(v10)->field_1;\n
                *(a0) = *(a0) + 1;\n
                v14 = a4 - 2;\n
            }\n
            if (a4 != 2)\n
            {\n
                v15 = ((v9 & 1) * 16) | 32;\n
                do\n
                {\n
                    *(v10)->field_0 = v15;\n
                    v16 = *(v10);\n
                    *(v10) = &v16[1];\n
                    *(a0) = *(a0) + 1;\n
                    v16[1] = v15;\n
                    *(v10) = &*(v10)->field_1;\n
                    *(a0) = *(a0) + 1;\n
                    tmp_36 = v14;\n
                    v14 = v14 - 2;\n
                } while (tmp_36 + -2);\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(v10)->field_0 = v17 + v12;\n
    *(v10) = &*(v10)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v13 + 1;\n
    return v18;\n
}\n
", "4208872:sub_4038e8": null, "4208880:cgc_sprintf": "typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, struct_2 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_1 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0xf8]\n
    struct_2 *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_0 *v31;  // r14\n
    struct struct_1 **v32;  // r13\n
    struct_2 *v33;  // rdi, Other Possible Types: unsigned long\n
    char *v34;  // rcx\n
    void* v36;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v37;  // rbp\n
    struct_2 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v40;  // rcx\n
    unsigned int v41;  // esi\n
    unsigned long long v43;  // rax\n
    char *v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v45;  // rdx\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    struct struct_1 **v48;  // rcx, Other Possible Types: unsigned long\n
    struct struct_1 **v49;  // rax, Other Possible Types: unsigned long\n
    struct struct_1 **v50;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v51;  // rdx, Other Possible Types: unsigned long\n
    char *v52;  // rbp\n
    unsigned long v53;  // r14\n
    unsigned int v54;  // r13d\n
    struct_0 *v55;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v56;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v57;  // rcx, Other Possible Types: unsigned long long\n
    char *v58;  // rcx\n
    struct struct_2 **v59;  // rbx\n
    unsigned long v60;  // r15\n
    struct struct_2 **v61;  // r15\n
    struct_0 *v62;  // r14\n
    struct struct_1 **v63;  // r13\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v5 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v34 = v1;\n
                *(v34) = *(a1);\n
                v1 = v34 + 1;\n
            }\n
            else\n
            {\n
                v36 = 0;\n
                while (true)\n
                {\n
                    v37 = v36 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v36;\n
                    do\n
                    {\n
                        v36 = v39;\n
                        v5 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = v40;\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    switch (v41)\n
                    {\n
                    case 37:\n
                        v44 = v1;\n
                        *(v44) = 37;\n
                        goto LABEL_403ac0;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v43 = cgc_strtol(v38 - 2, &v5, 10);\n
                        v33 = v5;\n
                        continue;\n
                    case 100:\n
                        v45 = v2;\n
                        if (v45 <= 40)\n
                        {\n
                            v48 = v45 + v4;\n
                            v2 = v45 + 8;\n
                        }\n
                        else\n
                        {\n
                            v48 = v3;\n
                            v3 = v48 + 8;\n
                        }\n
                        v51 = *(v48);\n
                        if (v51 < 0)\n
                        {\n
                            v58 = v1;\n
                            *(v58) = 45;\n
                            v1 = v58 + 1;\n
                            v0 += 1;\n
                            v51 = -(v51);\n
                        }\n
                        v55 = *(&v0);\n
                        v56 = v1;\n
                        v57 = 10;\n
LABEL_403b05:\n
                        cgc_output_number_sprintf(v55, v56, v51, v57, 0, v36);\n
                        break;\n
                    case 115:\n
                        v46 = v2;\n
                        if (v46 > 40)\n
                        {\n
                            v49 = v3;\n
                            v3 = v49 + 8;\n
                        }\n
                        else\n
                        {\n
                            v49 = v46 + v4;\n
                            v2 = v46 + 8;\n
                        }\n
                        v52 = *(v49);\n
                        v53 = v1;\n
                        v54 = v0;\n
                        if (cgc_strlen(v52))\n
                        {\n
                            v59 = r15<8>;\n
                            v60 = 0;\n
                            do\n
                            {\n
                                *((v53 + v60)) = v52[v60];\n
                                v60 += 1;\n
                            } while (cgc_strlen(v52) > v60);\n
                            v53 += v60;\n
                            v54 += v60;\n
                            v61 = rbx<8>;\n
                        }\n
                        v1 = v53;\n
                        v0 = v54;\n
                        v62 = &v0;\n
                        v63 = &v1;\n
                        break;\n
                    case 88:\n
                        v36 = v36 | 2;\n
                    case 120:\n
                        v47 = v2;\n
                        if (v47 <= 40)\n
                        {\n
                            v50 = v47 + v4;\n
                            v2 = v47 + 8;\n
                        }\n
                        else\n
                        {\n
                            v50 = v3;\n
                            v3 = v50 + 8;\n
                        }\n
                        v51 = *(v50);\n
                        v55 = r14<8>;\n
                        v56 = r13<8>;\n
                        v57 = 16;\n
                        goto LABEL_403b05;\n
                    default:\n
                        v44 = v1;\n
                        *(v44) = v40;\n
LABEL_403ac0:\n
                        v1 = v44 + 1;\n
                        goto LABEL_4039c0;\n
                    }\n
                }\n
            }\n
LABEL_4039c0:\n
            v0 += 1;\n
            a1 = v5;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4209068:sub_4039ac": null, "4209583:sub_403baf": null, "4209584:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4209695:sub_403c1f": null, "4209696:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_403c77;\n
        }\n
    }\n
LABEL_403c77:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4209718:sub_403c36": null, "4209813:sub_403c95": null, "4209824:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4209862:sub_403cc6": null, "4209872:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    char v1[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        do\n
        {\n
            if (v2 == a1)\n
                return v1;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
        } while (v2);\n
    }\n
    if (!a1)\n
        return v1;\n
    return 0;\n
}\n
", "4209916:sub_403cfc": null, "4209920:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4209973:sub_403d35": null, "4209984:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4210031:sub_403d6f": null, "4210032:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210091:sub_403dab": null, "4210096:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210124:sub_403dcc": null, "4210128:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4210185:sub_403e09": null, "4210245:sub_403e45": null, "4210256:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a0) - *(a1);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a0) - *(a1);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v2) - *(v3);\n
        }\n
    }\n
}\n
", "4210338:sub_403ea2": null, "4210352:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_403ff0:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_403ff0;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_403ff0;\n
}\n
", "4210687:sub_403fff": null, "4210688:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_404055;\n
                }\n
                goto LABEL_404053;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_404053:\n
    v3 = 0;\n
LABEL_404055:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4210782:sub_40405e": null, "4210784:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    char *v1;  // r9d, Other Possible Types: unsigned long\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    unsigned long v8;  // r8\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v10;  // rcx\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v12;  // r11d\n
    unsigned long v13;  // r10\n
    unsigned long long v14;  // rcx\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (*(v8) == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (*(v8) == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        while (true)\n
        {\n
            v10 = *((v8 + v1));\n
            if (v10 - 48 < 10)\n
            {\n
                v11 = v10 - 48;\n
                if (v11 >= a2)\n
                    break;\n
            }\n
            else\n
            {\n
                v12 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v12 = -97;\n
                    if (v10 - 97 >= 26)\n
                        break;\n
                }\n
                v11 = v10 + v12 + 10;\n
                if (v11 >= a2)\n
                    break;\n
            }\n
            v13 = a2 * v9;\n
            v14 = v11 + v13;\n
            v1 += 1;\n
            v9 = v14;\n
        }\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4210819:sub_404083": null, "4210997:sub_404135": null, "4211094:sub_404196": null, "4211104:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4211109:sub_4041a5": null, "4211120:cgc_send_n_bytes": "long long cgc_send_n_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    void* v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp, Other Possible Types: unsigned long long\n
\n
    if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        v3 = a1;\n
        do\n
        {\n
            if (cgc_transmit(a0, a1, a2, v4))\n
            {\n
                v6 = 4294967295;\n
                goto LABEL_404225;\n
            }\n
            v5 = v0;\n
            if (!v5)\n
            {\n
                v6 = a1 - v3;\n
                goto LABEL_404225;\n
            }\n
            tmp_2 = v3;\n
            v3 -= v5;\n
        } while (tmp_2 != v5);\n
        v3 = 0;\n
LABEL_404225:\n
        return v6;\n
    }\n
}\n
", "4211252:sub_404234": null, "4211264:cgc_read_n_bytes": "long long cgc_read_n_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    void* v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp, Other Possible Types: unsigned long long\n
\n
    if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        v3 = a1;\n
        do\n
        {\n
            if (cgc_receive(a0, a1, a2, v4))\n
            {\n
                v6 = 4294967295;\n
                goto LABEL_4042b5;\n
            }\n
            v5 = v0;\n
            if (!v5)\n
            {\n
                v6 = a1 - v3;\n
                goto LABEL_4042b5;\n
            }\n
            tmp_2 = v3;\n
            v3 -= v5;\n
        } while (tmp_2 != v5);\n
        v3 = 0;\n
LABEL_4042b5:\n
        return v6;\n
    }\n
}\n
", "4211396:sub_4042c4": null, "4211408:cgc_read_until": "long long cgc_read_until(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    void* v0;  // [bp-0x40]\n
    int tmp_7;  // tmp #7\n
    unsigned long v2;  // rax\n
    void* v3;  // r13, Other Possible Types: unsigned long\n
    unsigned long v4;  // r12\n
    unsigned long v5;  // r14, Other Possible Types: unsigned long long\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rax\n
    unsigned long v8;  // rax\n
\n
    if (!a1)\n
        return 4294967295;\n
    if (!a3)\n
        return 4294967295;\n
    v3 = 0;\n
    while (true)\n
    {\n
LABEL_40430e:\n
        v4 = a3 + v3;\n
        v0 = 0;\n
        v5 = 1;\n
        do\n
        {\n
            if (cgc_receive(v4, a1, a2, a3))\n
                return 4294967295;\n
            v6 = v0;\n
            if (!v6)\n
            {\n
LABEL_40435d:\n
                v7 = v5 - 1;\n
                if (v5 != 1)\n
                {\n
                    tmp_7 = v7;\n
                    v8 = -(v7);\n
                    if (-(tmp_7) >= 0)\n
                    {\n
                        if (cgc_memchr(v4, a2, v8))\n
                        {\n
                            *(cgc_memchr(v4, a2, v8)) = 0;\n
                            v2 = v8 + v3;\n
                            return v2;\n
                        }\n
                        v3 += v8;\n
                        if (v3 < a1)\n
                            goto LABEL_40430e;\n
                    }\n
                }\n
            }\n
            v5 -= v6;\n
        } while (v6 != 1);\n
        v5 = 0;\n
        goto LABEL_40435d;\n
    }\n
}\n
", "4211653:sub_4043c5": null, "4211664:cgc_read_image": "long long cgc_read_image(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long *a3, unsigned long a4)\n
{\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v4;  // [bp-0x50]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned long long *v6;  // [bp-0x40]\n
    unsigned long long v9;  // r14\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rax\n
    void* v14;  // r12\n
    unsigned long long v27;  // rbx\n
    void* v29;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v30;  // r9\n
\n
    if (!a3)\n
        return 0;\n
    v9 = a1;\n
    v10 = a0;\n
    *(a3) = 0;\n
    v11 = a1 * a2;\n
    v12 = cgc_calloc(v11, 1);\n
    if (!v12)\n
    {\n
        cgc_fdprintf(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", 134, a4);\n
        cgc__terminate(2);\n
        return cgc_make_2d_view(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", 134, a4, v30);\n
    }\n
    v6 = a3;\n
    v14 = 0;\n
    if (!v11)\n
    {\n
        v29 = 0;\n
    }\n
    else\n
    {\n
        v27 = a1 + 1;\n
        v29 = 0;\n
        v5 = a1;\n
        v4 = v11;\n
        v1 = v12;\n
    }\n
}\n
", "4211976:sub_404508": null, "4212256:cgc_make_2d_view": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_0;\n
\n
long long cgc_make_2d_view(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v1;  // r14d\n
    struct_0 *v2;  // rax\n
    unsigned long v3;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // rax\n
\n
    v1 = a4;\n
    v2 = cgc_calloc(1, 32);\n
    if (!v2)\n
    {\n
        v3 = 195;\n
    }\n
    else\n
    {\n
        v2->field_0 = a0;\n
        if (a0)\n
        {\n
            v2->field_10 = a1;\n
            v2->field_14 = a2;\n
            v2->field_18 = a3;\n
            v2->field_1c = v1;\n
            v2->field_8 = a1 - a3;\n
            v2->field_c = a2 - v1;\n
            return v2;\n
        }\n
        v3 = 198;\n
    }\n
    cgc_fdprintf(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", v3, a4);\n
    cgc__terminate(2);\n
    v5 = cgc_index_through_view(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", v3, a4, v4);\n
    return v5;\n
}\n
", "4212416:cgc_index_through_view": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_0;\n
\n
long long cgc_index_through_view(unsigned long a0, unsigned long a1, struct_0 *a2, char *a3)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v2;  // rdi\n
    unsigned int v3;  // r8d\n
    unsigned int v4;  // esi\n
\n
    v1 = 4294967295;\n
    if (a2->field_8 > a0 && a2->field_c > a1)\n
    {\n
        v2 = a0 + a2->field_18;\n
        v3 = a2->field_10;\n
        if (v2 < v3)\n
        {\n
            v4 = a1 + a2->field_1c;\n
            if (v4 < a2->field_14)\n
            {\n
                *(a3) = *((a2->field_0 + v3 * v4 + v2));\n
                v1 = 0;\n
            }\n
        }\n
    }\n
    return v1;\n
}\n
", "4212468:sub_4046f4": null, "4212480:cgc_parse_dimensions": "long long cgc_parse_dimensions(char *a0, unsigned long a1, unsigned int *a2, unsigned int *a3)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v2;  // rax\n
    char *v3;  // r13\n
    unsigned long long v4;  // rbp\n
    char *v5;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // rdi\n
    unsigned long long v8;  // rax\n
    char *v9;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v10;  // rdi\n
    unsigned long long v12;  // rax\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v0 = 0;\n
    v4 = &a0[a1];\n
    if (a1)\n
    {\n
        v5 = a0;\n
        while (true)\n
        {\n
            v6 = *(v5);\n
            if (!v6)\n
                break;\n
            if (!cgc_isspace(v6) && !cgc_isdigit(*(v5)))\n
                return 4294967295;\n
            v5 += 1;\n
            if (v5 >= v4)\n
                break;\n
        }\n
    }\n
    if (!cgc_isdigit(*(v3)))\n
        return 4294967295;\n
    v8 = cgc_strtol(v3, &v0, 10);\n
    *(a2) = v8;\n
    if (!v8)\n
        return 4294967295;\n
    v9 = v0;\n
    if (v9 < v4)\n
    {\n
        while (true)\n
        {\n
            v10 = *(v9);\n
            v9 = v0;\n
            if (!cgc_isspace(v10))\n
                break;\n
            v9 += 1;\n
            v0 = v9;\n
            if (v9 >= v4)\n
                break;\n
        }\n
    }\n
    if (v9 == v4)\n
        return 4294967295;\n
    v12 = cgc_strtol(v9, &v0, 10);\n
    *(a3) = v12;\n
    if (v12)\n
        return -(v0 != v4);\n
    return 4294967295;\n
}\n
", "4212522:sub_40472a": null, "4212726:sub_4047f6": null, "4212736:cgc_match_percent": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_0;\n
\n
double cgc_match_percent(long long a0, long long a1)\n
{\n
    int tmp_38;  // tmp #38\n
    int tmp_40;  // tmp #40\n
    int tmp_39;  // tmp #39\n
    unsigned long long v1;  // r11\n
    unsigned int v2;  // r8d\n
    void* v3;  // r10, Other Possible Types: unsigned long long, unsigned long\n
    unsigned int v4;  // ebp\n
    unsigned int v6;  // edx\n
    unsigned long long v7;  // rbp\n
    unsigned long long v8;  // rbx\n
    void* v9;  // r9, Other Possible Types: unsigned long\n
    void* v10;  // rax, Other Possible Types: unsigned long\n
    unsigned int v11;  // r14d\n
\n
    v1 = a1[0];\n
    v2 = a1[1];\n
    if (!v2)\n
    {\n
        tmp_38 = DivV(tmp_40, tmp_39);\n
        return tmp_38;\n
    }\n
    v3 = 0;\n
    v11 = 0;\n
    v9 = 0;\n
    do\n
    {\n
        if (v1)\n
        {\n
            v10 = 0;\n
            do\n
            {\n
                if (v10 < a0->field_8 && a0->field_c > v11)\n
                {\n
                    v4 = a0->field_10;\n
                    if ((v10 + a0->field_18) < v4)\n
                    {\n
                        v6 = a0->field_1c + v11;\n
                        if (v6 < a0->field_14)\n
                        {\n
                            v7 = v6 * v4;\n
                            v8 = v8 + v7 + v10;\n
                            v9 += *((a0->field_0 + v8 + v7 + v10)) == *((a1 + v3 + v10 + 9));\n
                        }\n
                    }\n
                }\n
                v10 += 1;\n
            } while (v1 != v10);\n
        }\n
        v11 += 1;\n
        v3 += v1;\n
    } while (v11 != v2);\n
}\n
", "4212765:sub_40481d": null, "4212792:sub_404838": null, "4212909:sub_4048ad": null, "4212912:cgc_find_matching_object": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[10224564];\n
    unsigned int field_9c03b4;\n
} struct_0;\n
\n
extern char g_9c03b4;\n
extern char match_objects;\n
\n
long long cgc_find_matching_object(struct_1 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_43;  // tmp #43\n
    int tmp_45;  // tmp #45\n
    int tmp_44;  // tmp #44\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // r12\n
    unsigned long v11;  // rbx\n
    unsigned int v12;  // r12d\n
    struct_0 *v13;  // r11\n
    unsigned int v14;  // r10d\n
    unsigned int *v15;  // r11\n
    unsigned long long v16;  // r13\n
    unsigned long long v17;  // rsi\n
    void* v18;  // r15, Other Possible Types: unsigned long long, unsigned long\n
    unsigned int v19;  // ebp\n
    void* v20;  // r14, Other Possible Types: unsigned long\n
    void* v21;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v22;  // edx\n
    unsigned int v24;  // r8d\n
    unsigned long long v25;  // rdx\n
    unsigned long long v26;  // rcx\n
    int v27;  // xmm3\n
    char v28;  // cc_dep1\n
    void* v29;  // rax, Other Possible Types: unsigned long, unsigned int *, unsigned long long\n
    int v30;  // xmm1\n
    struct_0 *v31;  // r9, Other Possible Types: unsigned long\n
    unsigned int v32;  // ymm0\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v2 = v10;\n
    v1 = v11;\n
    v12 = a0->field_c;\n
    v30 = 0;\n
    v31 = 0;\n
    v29 = 0;\n
    do\n
    {\n
        v13 = v31 * 96;\n
        v14 = *((v13 + &g_9c03b4));\n
        if (v14 <= v12)\n
        {\n
            v15 = v13 + &match_objects;\n
            v16 = *(v15);\n
            v17 = a0->field_8;\n
            if (v16 <= v17)\n
            {\n
                v0 = v29;\n
                if (v14)\n
                {\n
                    v18 = 0;\n
                    v19 = 0;\n
                    v20 = 0;\n
                    do\n
                    {\n
                        if (v16)\n
                        {\n
                            v21 = 0;\n
                            do\n
                            {\n
                                if (v21 < v17 && v12 > v19)\n
                                {\n
                                    v22 = a0->field_10;\n
                                    if ((v21 + a0->field_18) < v22)\n
                                    {\n
                                        v24 = a0->field_1c + v19;\n
                                        if (v24 < a0->field_14)\n
                                        {\n
                                            v25 = v24 * v22;\n
                                            v26 = v26 + v25 + v21;\n
                                            v20 += *((a0->field_0 + v26 + v25 + v21)) == *((v18 + v21 + v15 + 9));\n
                                        }\n
                                    }\n
                                }\n
                                v21 += 1;\n
                            } while (v16 != v21);\n
                        }\n
                        v19 += 1;\n
                        v18 += v16;\n
                    } while (v19 != v14);\n
                }\n
                tmp_43 = DivV(tmp_45, tmp_44);\n
                v27 = tmp_43;\n
                v28 = !((CmpF(4606804116431318286, v27) & 69 | (CmpF(4606804116431318286, v27) & 69) >> 6) & 1) & [D] amd64g_calculate_condition(0x3<64>, 0x0<64>, Conv(32->64, ((Conv(32->64, ymm3<4>) CmpF Conv(32->64, ymm1<4>)) & 0x45<32>)), 0x0<64>, cc_ndep<8>);\n
                if (!(!((CmpF(4606804116431318286, v27) & 69 | (CmpF(4606804116431318286, v27) & 69) >> 6) & 1) & [D] amd64g_calculate_condition(0x3<64>, 0x0<64>, Conv(32->64, ((Conv(32->64, ymm3<4>) CmpF Conv(32->64, ymm1<4>)) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                    v27 = v30;\n
                v29 = v0;\n
                if (v28)\n
                    v29 = v15;\n
                v30 = v27;\n
            }\n
        }\n
        v31 += 1;\n
    } while (v31 != 27);\n
    if ((CmpF(v30, v32) & 1))\n
        v29 = 0;\n
    return v29;\n
}\n
", "4212951:sub_4048d7": null, "4213049:sub_404939": null, "4213076:sub_404954": null, "4213253:sub_404a05": null, "4213264:cgc_perform_ocr": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
} struct_2;\n
\n
long long cgc_perform_ocr(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x7c]\n
    char v1;  // [bp-0x78]\n
    unsigned int v3;  // ymm0\n
    unsigned int v5;  // r12d\n
    struct_0 *v6;  // rax\n
    struct_2 *v7;  // rax\n
    struct_1 *v8;  // rdx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebp\n
    struct_1 *v11;  // r15, Other Possible Types: unsigned long\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    struct_1 *v13;  // rbx\n
    char *v14;  // rax\n
\n
    v0 = v3;\n
    if (!a1)\n
        return 0;\n
    v5 = a2;\n
    if (!a2)\n
        return 0;\n
    v9 = 0;\n
    v10 = 0;\n
    v11 = 0;\n
    while (true)\n
    {\n
        v6 = cgc_calloc(1, 32);\n
        if (!v6)\n
        {\n
            v12 = 195;\n
            goto LABEL_404b57;\n
        }\n
        else\n
        {\n
            v6->field_0 = a0;\n
            if (a0)\n
            {\n
                v6->field_10 = a1;\n
                v6->field_14 = v5;\n
                v6->field_18 = v9;\n
                v6->field_1c = v10;\n
                v6->field_8 = a1 - v9;\n
                v6->field_c = v5 - v10;\n
                v7 = cgc_find_matching_object(v6);\n
                if (!v7)\n
                {\n
                    v9 += 1;\n
                }\n
                else\n
                {\n
                    v8 = v11;\n
                    v11 = v11 + 1;\n
                    *((&v1 + v8)) = v7->field_8;\n
                    v9 += v7->field_0;\n
                    if (v9 >= a1)\n
                    {\n
                        v10 += v7->field_4;\n
                        v9 = 0;\n
                        if (!(v10 < v5))\n
                            goto LABEL_404ae1;\n
                    }\n
                }\n
                if (v9 >= a1)\n
                {\n
LABEL_404ae1:\n
                    if (!v11)\n
                        return 0;\n
                    v13 = v11;\n
                    v14 = cgc_calloc(v11, 1);\n
                    if (!v14)\n
                        goto LABEL_404b68;\n
                    cgc_strncpy(v14, &v1, v13);\n
                    break;\n
                }\n
                else if (!(v10 < v5))\n
                {\n
                    goto LABEL_404ae1;\n
                }\n
            }\n
            else\n
            {\n
                v12 = 198;\n
                while (true)\n
                {\n
LABEL_404b57:\n
                    cgc_fdprintf(2, \"DEBUG %s:%d:\\tcalloc() failed\\n
\", \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", v12, a4);\n
                    cgc__terminate(2);\n
LABEL_404b68:\n
                    v12 = 357;\n
                }\n
            }\n
        }\n
    }\n
    return v14;\n
}\n
", "4213447:sub_404ac7": null, "4213634:sub_404b82": null, "4213648:cgc_check_junk": "extern struct_0 *junk;\n
\n
long long cgc_check_junk()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    char *v4;  // r8, Other Possible Types: unsigned long\n
    unsigned long long v5;  // r10\n
    unsigned long v6;  // rsi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
    char *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rdi, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(junk);\n
    v4 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        v8 = v4;\n
        v9 = v3;\n
        if (v3)\n
        {\n
            do\n
            {\n
                if (v8 >= 257)\n
                {\n
                    v6 = junk[0x100 + v8].field_0 << (v8 & 31) ^ v7;\n
                    if (v8 >= 2049)\n
                    {\n
                        v5 = junk[v8].field_0;\n
                        v6 = v6 ^ (junk[0x800 + v8].field_0 | v5);\n
                        if (v8 >= 30001)\n
                            v6 = v6 ^ (junk[30000 + v8].field_0 | v5);\n
                    }\n
                    v7 = v6;\n
                }\n
                v8 += 1;\n
                v9 -= 1;\n
            } while (v3 != 1);\n
        }\n
        v4 += 1;\n
    } while (v4 != 16);\n
    return v7 == 1768831;\n
}\n
", "4213675:sub_404bab": null, "4213703:sub_404bc7": null, "4213815:sub_404c37": null, "4213824:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 *junk;\n
\n
int main()\n
{\n
    void* v0;  // [bp-0x58], Other Possible Types: unsigned long\n
    int tmp_7;  // tmp #7\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    char v3;  // [bp-0x48]\n
    unsigned long long v5;  // rax\n
    char *v6;  // r8, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rsi\n
    void* v8;  // rdx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v9;  // rdi, Other Possible Types: unsigned long long\n
    void* v10;  // r12, Other Possible Types: unsigned long\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rax\n
    unsigned long long v13;  // rax\n
    unsigned long v14;  // rax\n
    unsigned long long v15;  // rax\n
    unsigned long long v16;  // rax\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // r14\n
    struct_0 *v19;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char *v20;  // rsi, Other Possible Types: unsigned long\n
    char *v21;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v22;  // rdi\n
    unsigned long v23;  // rax\n
\n
    v5 = cgc_strlen(junk);\n
    v6 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v21 = v6;\n
        v9 = v5;\n
        if (v5)\n
        {\n
            do\n
            {\n
                if (v21 >= 257)\n
                {\n
                    v19 = junk[0x100 + v21].field_0 << (v21 & 31) ^ v8;\n
                    if (v21 >= 2049)\n
                    {\n
                        v7 = junk[v21].field_0;\n
                        v19 = v19 ^ (junk[0x800 + v21].field_0 | v7);\n
                        if (v21 >= 30001)\n
                            v19 = v19 ^ (junk[30000 + v21].field_0 | v7);\n
                    }\n
                    v8 = v19;\n
                }\n
                v21 += 1;\n
                v9 -= 1;\n
            } while (v5 != 1);\n
        }\n
        v6 += 1;\n
    } while (v6 != 16);\n
    if (v8 != 1768831)\n
    {\n
        v20 = \"DEBUG %s:%d:\\tbad junk\\n
\";\n
        v21 = 392;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        cgc_fdprintf(1, \"Welcome to the super awesome OCR engine! Enter your input to have it OCR'd\\n
\", v8, v21, v6);\n
        cgc_memset(&v3, 0, 0x20);\n
        while (true)\n
        {\n
            v11 = &v3;\n
            v0 = 0;\n
            v19 = 1;\n
            if (cgc_receive(v9, 0, 32, v21))\n
            {\n
LABEL_404d97:\n
                v20 = \"DEBUG %s:%d:\\tbad line\\n
\";\n
                v21 = 402;\n
                break;\n
            }\n
            v12 = v0;\n
            if (v12)\n
            {\n
                v19 -= v12;\n
                if (!(1 == v12))\n
                    continue;\n
                v19 = 0;\n
            }\n
            v13 = v19 - 1;\n
            v19 = v19 - 1;\n
            if (!v19)\n
                goto LABEL_404d97;\n
            tmp_7 = v13;\n
            v14 = -(v13);\n
            if (-(tmp_7) < 0)\n
                goto LABEL_404d97;\n
            v19 = v14;\n
            if (!cgc_memchr(v11, 10, v14))\n
            {\n
                v10 += v14;\n
                if (!(v10 < 32))\n
                    goto LABEL_404d97;\n
            }\n
            else\n
            {\n
                *(cgc_memchr(v11, 10, v14)) = 0;\n
                v19 = v14 + v10;\n
                if ([D] amd64g_calculate_condition(0x8<64>, 0x3<64>, rax<8>, r12<8>, cc_ndep<8>))\n
                    goto LABEL_404d97;\n
                v19 = cgc_strlen(&v3);\n
                if (v19 == cgc_strlen(\"Z1\"))\n
                {\n
                    v19 = &v3;\n
                    if (!cgc_strncmp(&v3, \"Z1\", cgc_strlen(&v3)))\n
                    {\n
                        v10 = 0;\n
                        cgc_memset(&v3, 0, 0x20);\n
                        while (true)\n
                        {\n
                            v11 = &v3;\n
                            v0 = 0;\n
                            v19 = 1;\n
                            if (!(!cgc_receive(v9, 0, 32, v21)))\n
                                goto LABEL_404ea7;\n
                            v15 = v0;\n
                            if (v15)\n
                            {\n
                                v19 -= v15;\n
                                if (!(1 == v15))\n
                                    continue;\n
                                v19 = 0;\n
                            }\n
                            v16 = v19 - 1;\n
                            v19 = v19 - 1;\n
                            if (!v19)\n
                                goto LABEL_404ea7;\n
                            tmp_7 = v16;\n
                            v17 = -(v16);\n
                            if (-(tmp_7) < 0)\n
                                goto LABEL_404ea7;\n
                            v19 = v17;\n
                            if (!(!cgc_memchr(v11, 10, v17)))\n
                                goto LABEL_404ed0;\n
                            v10 += v17;\n
                            if (v10 >= 32)\n
                                goto LABEL_404ea7;\n
                        }\n
                    }\n
                }\n
                v20 = \"DEBUG %s:%d:\\tbad magic\\n
\";\n
                v21 = 407;\n
                break;\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                cgc_fdprintf(2, v20, \"/home/user/src/cb-multios/challenges/simpleOCR/src/main.c\", v21, v6);\n
                cgc__terminate(2);\n
LABEL_404ed0:\n
                *(cgc_memchr(v11, 10, v19)) = 0;\n
                tmp_8 = v19;\n
                v19 += v10;\n
                if (!([D] amd64g_calculate_condition(0x8<64>, 0x3<64>, t8, r12<8>, cc_ndep<8>)))\n
                    break;\n
LABEL_404ea7:\n
                v20 = \"DEBUG %s:%d:\\tbad line\\n
\";\n
                v21 = 413;\n
            }\n
            v19 = &v3;\n
            if (!cgc_parse_dimensions(&v3, cgc_strlen(&v3), &v2, &v1))\n
                break;\n
            v20 = \"DEBUG %s:%d:\\tbad dimensions\\n
\";\n
            v21 = 419;\n
        }\n
        v18 = v2;\n
        v19 = v1;\n
        if (v19 == cgc_read_image(0, v18, v19, &v0, v6))\n
        {\n
            v22 = v0;\n
            if (v22)\n
                break;\n
        }\n
        v20 = \"DEBUG %s:%d:\\tbad image\\n
\";\n
        v21 = 426;\n
    }\n
    v23 = cgc_perform_ocr(v22, v18, v19, v21, v6);\n
    if (!v23)\n
    {\n
        cgc_fdprintf(1, \"No characters recognized\\n
\", v19, v21, v6);\n
        return 0;\n
    }\n
    cgc_fdprintf(1, \"Result: %s\\n
\", v23, v21, v6);\n
    return 0;\n
}\n
", "4213861:sub_404c65": null, "4213895:sub_404c87": null, "4214788:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "10485760:__libc_start_main": null, "10485768:cgc__terminate": null, "10485776:cgc_transmit": null, "10485784:cgc_allocate": null, "10485792:cgc_deallocate": null, "10485800:cgc_receive": null, "11538512:UnresolvableJumpTarget": null, "11538520:UnresolvableCallTarget": null}