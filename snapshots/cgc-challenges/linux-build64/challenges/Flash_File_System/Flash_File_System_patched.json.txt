{"4206592:_init": "extern struct_0 *g_410268;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_410268;\n
    if (g_410268)\n
        v1 = g_410268();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_410280;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_410280;\n
    goto *(4260488);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4206672:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4206688:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4206704:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4206720:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206736:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libstdc++.so::cgc_rint();\n
    return;\n
}\n
", "4206752:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libstdc++.so::cgc_log10();\n
    return;\n
}\n
", "4206768:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4206784:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libstdc++.so::cgc_pow();\n
    return;\n
}\n
", "4206800:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4260432);\n
}\n
", "4206816:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206853:sub_403105": null, "4206854:sub_403106": null, "4206864:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_410260;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206905:sub_403139": null, "4206912:register_tm_clones": "extern unsigned long long g_410270;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206969:sub_403179": null, "4206976:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_410250;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_410250)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207029:sub_4031b5": null, "4207033:sub_4031b9": null, "4207040:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207049:sub_4031c9": null, "4207056:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207107:sub_403203": null, "4207120:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207171:sub_403243": null, "4207184:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207235:sub_403283": null, "4207248:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0) && !cgc_islower(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4207321:sub_4032d9": null, "4207328:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(a0) && !cgc_isdigit(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4207401:sub_403329": null, "4207408:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 32 && a0 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207459:sub_403363": null, "4207472:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + -32;\n
    return v0;\n
}\n
", "4207532:sub_4033ac": null, "4207536:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4207596:sub_4033ec": null, "4207600:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4207691:sub_40344b": null, "4207696:_ZN5CUtil6StringC1Ev": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long CUtil::String::__ctor__(struct_0 *a0)\n
{\n
    a0->field_0 = operator new[](1);\n
    a0->field_0->field_0 = 0;\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4207756:sub_40348c": null, "4207760:_ZN5CUtil6StringC1ERKS0_": "long long CUtil::String::__ctor__(unsigned long long a0[2], unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x10]\n
    unsigned long long v2[2];  // rdi\n
\n
    v0[0] = a0;\n
    v2 = v0;\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    return CUtil::String::SetInternal(v0, a1);\n
}\n
", "4207810:sub_4034c2": null, "4207824:_ZN5CUtil6String11SetInternalERKS0_": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long CUtil::String::SetInternal(struct_0 *a0, unsigned long long a1[2])\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v2;  // rax\n
\n
    if (a0->field_0)\n
    {\n
        v0 = &a0->field_0->field_0;\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    a0->field_8 = a1[1];\n
    a0->field_0 = operator new[](a0->field_8 + 1);\n
    cgc_memcpy(a0->field_0, a1[0], a0->field_8, a1);\n
    v2 = a0->field_0;\n
    v2[a0->field_8] = 0;\n
    return v2;\n
}\n
", "4207972:sub_403564": null, "4207984:_ZN5CUtil6StringC2EPKc": "long long CUtil::String::__base_ctor__(unsigned long long a0[2], unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x10]\n
    unsigned long long v2[2];  // rdi\n
\n
    v0[0] = a0;\n
    v2 = v0;\n
    v2[0] = 0;\n
    v2[1] = 0;\n
    return CUtil::String::SetInternal(v0, a1);\n
}\n
", "4208034:sub_4035a2": null, "4208048:_ZN5CUtil6String11SetInternalEPKc": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CUtil::String::SetInternal(struct_0 *a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned long long v4;  // rcx\n
    struct_0 *v5;  // rax\n
\n
    if (a0->field_0)\n
    {\n
        v0 = a0->field_0;\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    if (!a1)\n
    {\n
        a0->field_0 = operator new[](1);\n
        *(&a0->field_0->field_0) = 0;\n
        a0->field_8 = 0;\n
        return a0;\n
    }\n
    a0->field_8 = cgc_strlen(a1);\n
    v4 = operator new[](a0->field_8 + 1);\n
    v5 = a0;\n
    a0->field_0 = v4;\n
    cgc_memcpy(v5->field_0, a1, v5->field_8, v4);\n
    *(&a0->field_0->field_0 + a0->field_8) = 0;\n
    return a0->field_0;\n
}\n
", "4208247:sub_403677": null, "4208256:_ZN5CUtil6StringD1Ev": "long long CUtil::String::__dtor__(unsigned long long a0[2])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    if (a0[0])\n
    {\n
        *(&v0) = a0[0];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    a0[1] = 0;\n
    return a0;\n
}\n
", "4208339:sub_4036d3": null, "4208352:_ZNK5CUtil6StringeqERKS0_": "long long CUtil::String::operator== const(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (a0[1] != a1[1])\n
    {\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    v0 = !cgc_memcmp(a0[0], a1[0], a0[1], a1);\n
    return v0 & 1;\n
}\n
", "4208451:sub_403743": null, "4208464:_ZNK5CUtil6StringneERKS0_": "long long CUtil::String::operator!= const(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    return (CUtil::String::operator== const(a0, a1) ^ 255) & 1;\n
}\n
", "4208506:sub_40377a": null, "4208512:_ZN5CUtil6StringaSERKS0_": "long long CUtil::String::operator=(void* a0, unsigned long long a1[2])\n
{\n
    return CUtil::String::SetInternal(a0, a1);\n
}\n
", "4208547:sub_4037a3": null, "4208560:_ZN5CUtil6StringaSEPKc": "long long CUtil::String::operator=(void* a0, unsigned long long a1)\n
{\n
    return CUtil::String::SetInternal(a0, a1);\n
}\n
", "4208595:sub_4037d3": null, "4208608:_ZNK5CUtil6StringplERKS0_": "long long CUtil::String::operator+ const(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
\n
    CUtil::String::__ctor__(v1, a0);\n
    v0 = CUtil::String::operator+=(v1, a1);\n
    CUtil::String::__dtor__(v1);\n
    return v0;\n
}\n
", "4208681:sub_403829": null, "4208688:_ZN5CUtil6StringpLERKS0_": "long long CUtil::String::operator+=(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char *v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
\n
    v2 = a0[1] + a1[1];\n
    v1 = operator new[](v2 + 1);\n
    cgc_memcpy(v1, a0[0], a0[1], v1);\n
    cgc_memcpy(&v1[a0[1]], a1[0], a1[1]);\n
    v1[a1[1] + a0[1]] = 0;\n
    if (a0[0])\n
    {\n
        *(&v0) = a0[0];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    a0[0] = v1;\n
    a0[1] = v2;\n
    return a0;\n
}\n
", "4208894:sub_4038fe": null, "4208896:_ZNK5CUtil6String5c_strEv": "long long CUtil::String::c_str const(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4208913:sub_403911": null, "4208928:_ZNK5CUtil6String5UpperEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CUtil::String::Upper const(unsigned long long *a0, struct_0 *a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x19]\n
    unsigned long long *v2;  // [bp-0x10]\n
\n
    v2 = a0;\n
    v1 = 0;\n
    CUtil::String::__ctor__(a0, a1);\n
    for (v0 = 0; v0 < a1->field_8; v0 += 1)\n
    {\n
        if (cgc_islower(*((*(a0) + v0))))\n
            *((*(a0) + v0)) = cgc_toupper(*((*(a0) + v0)));\n
    }\n
    v1 = 1;\n
    if (!(v1 & 1))\n
        CUtil::String::__dtor__(a0);\n
    return a0;\n
}\n
", "4209123:sub_4039e3": null, "4209136:_ZNK5CUtil6String5LowerEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CUtil::String::Lower const(unsigned long long *a0, struct_0 *a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x19]\n
    unsigned long long *v2;  // [bp-0x10]\n
\n
    v2 = a0;\n
    v1 = 0;\n
    CUtil::String::__ctor__(a0, a1);\n
    for (v0 = 0; v0 < a1->field_8; v0 += 1)\n
    {\n
        if (cgc_isupper(*((*(a0) + v0))))\n
            *((*(a0) + v0)) = cgc_tolower(*((*(a0) + v0)));\n
    }\n
    v1 = 1;\n
    if (!(v1 & 1))\n
        CUtil::String::__dtor__(a0);\n
    return a0;\n
}\n
", "4209331:sub_403ab3": null, "4209344:_ZNK5CUtil6StringixERKm": "long long CUtil::String::operator[] const(unsigned long long a0[2], unsigned long long *a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if ((CUtil::String::IsEmpty const(a0) & 1))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*(a1) < a0[1])\n
    {\n
        v0 = *((a0[0] + *(a1)));\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4209455:sub_403b2f": null, "4209456:_ZNK5CUtil6String7IsEmptyEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CUtil::String::IsEmpty const(struct_0 *a0)\n
{\n
    return !a0->field_8;\n
}\n
", "4209483:sub_403b4b": null, "4209488:_ZNK5CUtil6String4TrimEm": "long long CUtil::String::Trim const(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = a2;\n
    CUtil::String::SubString const();\n
    return a0;\n
}\n
", "4209545:sub_403b89": null, "4209552:_ZNK5CUtil6String9SubStringEmm": "extern unsigned long long g_40e5c7;\n
\n
long long CUtil::String::SubString const(unsigned long long a0[2], unsigned long long a1[2], char *a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // rcx\n
\n
    v5 = a0;\n
    v4 = a3;\n
    if (v4 > a1[1])\n
        v4 = a1[1];\n
    if (a2 < a1[1] && a2 < v4)\n
    {\n
        v3 = v4 - a2;\n
        v2 = operator new[](v3 + 1);\n
        v1 = 0;\n
        for (v0 = a2; v0 < v4; v0 += 1)\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            v2[v7] = *((a1[0] + v0));\n
        }\n
        v2[v1] = 0;\n
        CUtil::String::__base_ctor__(a0, v2);\n
        return a0;\n
    }\n
    CUtil::String::__base_ctor__(a0, &g_40e5c7);\n
    return a0;\n
}\n
", "4209821:sub_403c9d": null, "4209824:_ZNK5CUtil6String10TrimSpacesEv": "long long CUtil::String::TrimSpaces const(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1[1]; v0 += 1)\n
    {\n
        if (*((a1[0] + v0)) != 32)\n
            break;\n
    }\n
    CUtil::String::SubString const(a0, a1, v0, 4294967295);\n
    return a0;\n
}\n
", "4209968:_ZN5CUtil6String5ToIntERj": "long long CUtil::String::ToInt(unsigned long long *a0, unsigned int *a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if ((CUtil::String::IsEmpty const(a0) & 1))\n
    {\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    *(a1) = cgc_atoi(*(a0));\n
    v0 = 1;\n
    return v0 & 1;\n
}\n
", "4210052:sub_403d84": null, "4210064:_ZNK5CUtil6String9GetLengthEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CUtil::String::GetLength const(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4210082:sub_403da2": null, "4210096:cgc_SetFsError": "extern char FS_ERROR;\n
\n
long long cgc_SetFsError(unsigned long long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = FS_ERROR;\n
    if (!FS_ERROR)\n
        v1 = cgc_strncpy(&FS_ERROR, a0, 63);\n
    return v1;\n
}\n
", "4210151:sub_403de7": null, "4210160:cgc_ClearFsError": "extern char FS_ERROR;\n
\n
long long cgc_ClearFsError()\n
{\n
    unsigned long v1;  // rax\n
\n
    FS_ERROR = 0;\n
    return v1;\n
}\n
", "4210173:sub_403dfd": null, "4210176:cgc_FsError": "extern char FS_ERROR;\n
\n
long long cgc_FsError()\n
{\n
    return &FS_ERROR;\n
}\n
", "4210189:sub_403e0d": null, "4210192:cgc_DestroyFilesystem": "extern struct_0 *cgc_FS;\n
\n
long long cgc_DestroyFilesystem()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(\"Filesystem does not exist\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (v0 = 0; v0 < cgc_FS->field_4; v0 += 1)\n
    {\n
        if (*((cgc_FS->field_8 + (v0 << 3))))\n
        {\n
            if (*(*((cgc_FS->field_8 + (v0 << 3)))))\n
            {\n
                cgc_free(*(*((cgc_FS->field_8 + v0 * 8))));\n
                *(*((cgc_FS->field_8 + v0 * 8))) = 0;\n
            }\n
            if (*((*((cgc_FS->field_8 + (v0 << 3))) + 8)))\n
            {\n
                cgc_free(*((*((cgc_FS->field_8 + v0 * 8)) + 8)));\n
                *((*((cgc_FS->field_8 + v0 * 8)) + 8)) = 0;\n
            }\n
            if (*((*((cgc_FS->field_8 + (v0 << 3))) + 24)))\n
            {\n
                cgc_free(*((*((cgc_FS->field_8 + v0 * 8)) + 24)));\n
                *((*((cgc_FS->field_8 + v0 * 8)) + 24)) = 0;\n
            }\n
            cgc_free(*((cgc_FS->field_8 + v0 * 8)));\n
            *((cgc_FS->field_8 + v0 * 8)) = 0;\n
        }\n
    }\n
    cgc_free(cgc_FS);\n
    cgc_FS = 0;\n
    cgc_ClearFsError();\n
    v1 = 1;\n
    return v1;\n
}\n
", "4210635:sub_403fcb": null, "4210640:cgc_InitFilesystem": "extern unsigned long long FD;\n
extern unsigned long long FS_ERROR;\n
extern struct_0 *cgc_FS;\n
\n
long long cgc_InitFilesystem(unsigned long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x9]\n
    unsigned long long v2;  // rax\n
\n
    cgc_bzero(&FS_ERROR, 64);\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"MaxFiles should be > 0\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    if (cgc_FS)\n
        cgc_DestroyFilesystem();\n
    cgc_FS = cgc_calloc(16);\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(\"calloc failed\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    v2 = cgc_calloc(a0 * 32);\n
    cgc_FS->field_8 = v2;\n
    if (!v2)\n
    {\n
        cgc_SetFsError(\"calloc failed\");\n
        cgc_free(cgc_FS);\n
        v0 = 0;\n
        return v0;\n
    }\n
    cgc_FS->field_4 = a0;\n
    if (!cgc_Login(\"root\"))\n
    {\n
        cgc_SetFsError(\"Login failed\");\n
        cgc_free(cgc_FS->field_8);\n
        cgc_free(cgc_FS);\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (!cgc_InitPasswd(a1))\n
    {\n
        cgc_Logout();\n
        cgc_SetFsError(\"Failed to init the passwd file\");\n
        cgc_free(cgc_FS->field_8);\n
        cgc_free(cgc_FS);\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        cgc_bzero(&FD, 64);\n
        cgc_ClearFsError();\n
        v0 = 1;\n
        return v0;\n
    }\n
}\n
", "4211027:sub_404153": null, "4211040:cgc_Login": "extern void* cgc_CurrentUser;\n
\n
long long cgc_Login(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = cgc_calloc(cgc_strlen(a0) + 1);\n
    if (!v0)\n
    {\n
        cgc_SetFsError(\"calloc failed\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_strcpy(v0, a0);\n
    if (cgc_CurrentUser)\n
    {\n
        cgc_free(cgc_CurrentUser);\n
        cgc_CurrentUser = 0;\n
    }\n
    cgc_CurrentUser = v0;\n
    cgc_ClearFsError();\n
    v1 = 1;\n
    return v1;\n
}\n
", "4211220:sub_404214": null, "4211232:cgc_InitPasswd": "long long cgc_InitPasswd(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid root password\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = cgc_fopen(\"passwd\", \"w\");\n
    if (!v0)\n
    {\n
        cgc_SetFsError(\"Unable to open passwd file\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_fwrite(\"root:\", 5, 1, v0);\n
    cgc_fwrite(a0, cgc_strlen(a0), 1, v0);\n
    cgc_fclose(v0);\n
    cgc_ClearFsError();\n
    v1 = 1;\n
    return v1;\n
}\n
", "4211421:sub_4042dd": null, "4211424:cgc_Logout": "extern void* cgc_CurrentUser;\n
\n
long long cgc_Logout()\n
{\n
    if (cgc_CurrentUser)\n
        cgc_free(cgc_CurrentUser);\n
    cgc_CurrentUser = 0;\n
    cgc_ClearFsError();\n
    return 1;\n
}\n
", "4211477:sub_404315": null, "4211488:cgc_FindFile": "extern struct_0 *cgc_FS;\n
\n
long long cgc_FindFile(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= cgc_FS->field_4)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((cgc_FS->field_8 + (v0 << 3))) && *(*((cgc_FS->field_8 + (v0 << 3)))) && !cgc_strcmp(*(*((cgc_FS->field_8 + (v0 << 3)))), a0))\n
        {\n
            v1 = *((cgc_FS->field_8 + v0 * 8));\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4211687:sub_4043e7": null, "4211696:cgc_CreateEmptyFile": "extern unsigned long long cgc_CurrentUser;\n
extern struct_0 *cgc_FS;\n
\n
long long cgc_CreateEmptyFile(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rax\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid filename\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (!cgc_CurrentUser)\n
    {\n
        cgc_SetFsError(\"Must login first\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    if ((a1 & 153))\n
    {\n
        cgc_SetFsError(\"Invalid mode\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (cgc_FindFile(a0))\n
    {\n
        cgc_SetFsError(\"File already exists\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= cgc_FS->field_4)\n
        {\n
LABEL_4046d6:\n
            if (v0 == cgc_FS->field_4)\n
            {\n
                cgc_SetFsError(\"No free inodes\");\n
                v1 = 0;\n
                return v1;\n
            }\n
            cgc_ClearFsError();\n
            v1 = *((cgc_FS->field_8 + v0 * 8));\n
            return v1;\n
        }\n
        if (*((cgc_FS->field_8 + (v0 << 3))))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = cgc_calloc(32);\n
            *((cgc_FS->field_8 + v0 * 8)) = v3;\n
            if (!v3)\n
            {\n
                cgc_SetFsError(\"calloc failed\");\n
                v1 = 0;\n
                return v1;\n
            }\n
            v4 = cgc_calloc(cgc_strlen(a0) + 1);\n
            *(*((cgc_FS->field_8 + v0 * 8))) = v4;\n
            if (!v4)\n
            {\n
                cgc_SetFsError(\"calloc failed\");\n
                cgc_free(*((cgc_FS->field_8 + v0 * 8)));\n
                *((cgc_FS->field_8 + v0 * 8)) = 0;\n
                v1 = 0;\n
                return v1;\n
            }\n
            cgc_strcpy(*(*((cgc_FS->field_8 + v0 * 8))), a0);\n
            v5 = cgc_calloc(9);\n
            *((*((cgc_FS->field_8 + v0 * 8)) + 8)) = v5;\n
            if (!v5)\n
            {\n
                cgc_SetFsError(\"calloc failed\");\n
                cgc_free(*(*((cgc_FS->field_8 + v0 * 8))));\n
                *(*((cgc_FS->field_8 + v0 * 8))) = 0;\n
                cgc_free(*((cgc_FS->field_8 + v0 * 8)));\n
                *((cgc_FS->field_8 + v0 * 8)) = 0;\n
                v1 = 0;\n
                return v1;\n
            }\n
            cgc_strcpy(*((*((cgc_FS->field_8 + v0 * 8)) + 8)), cgc_CurrentUser);\n
            *((*((cgc_FS->field_8 + v0 * 8)) + 16)) = a1;\n
            *((*((cgc_FS->field_8 + v0 * 8)) + 20)) = 0;\n
            *((*((cgc_FS->field_8 + v0 * 8)) + 24)) = 0;\n
            goto LABEL_4046d6;\n
            goto LABEL_4046d6;\n
        }\n
    }\n
}\n
", "4212519:sub_404727": null, "4212528:cgc_fopen": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern struct_3 FD;\n
extern unsigned long long cgc_CurrentUser;\n
extern unsigned long long cgc_FS;\n
\n
long long cgc_fopen(unsigned long long a0, char *a1)\n
{\n
    struct_1 *v0;  // [bp-0x38]\n
    struct_2 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_1 *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(\"Filesystem does not exist\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (a0 && a1)\n
    {\n
        if (cgc_strlen(a1) > 1)\n
        {\n
            cgc_SetFsError(\"Invalid mode\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*(a1) != 114 && *(a1) != 119)\n
        {\n
            cgc_SetFsError(\"Invalid mode\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (!cgc_CurrentUser)\n
        {\n
            cgc_SetFsError(\"Must login first\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = cgc_FindFile(a0);\n
        if (!v1 && *(a1) == 114)\n
        {\n
            cgc_SetFsError(\"Unable to locate file\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v1)\n
        {\n
            for (v2 = 0; v2 < 8; v2 += 1)\n
            {\n
                if ((&FD.field_0)[v2] && (&FD.field_0)[v2]->field_0 == v1)\n
                {\n
                    cgc_SetFsError(\"File is already open\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
        }\n
        if (v1 && cgc_strcmp(cgc_CurrentUser, \"root\"))\n
        {\n
            if (cgc_strcmp(v1->field_8, cgc_CurrentUser))\n
            {\n
                if (*(a1) == 114 && !(v1->field_10 & 64))\n
                {\n
                    cgc_SetFsError(\"Permission denied\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
                if (*(a1) == 119 && !(v1->field_10 & 96))\n
                {\n
                    cgc_SetFsError(\"Permission denied\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
            else\n
            {\n
                if (*(a1) == 114 && !(v1->field_10 & 4))\n
                {\n
                    cgc_SetFsError(\"Permission denied\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
                if (*(a1) == 119 && !(v1->field_10 & 6))\n
                {\n
                    cgc_SetFsError(\"Permission denied\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
        }\n
        v0 = cgc_calloc(16);\n
        if (!v0)\n
        {\n
            cgc_SetFsError(\"calloc failed\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        for (v2 = 0; v2 < 8; v2 += 1)\n
        {\n
            if (!(&FD.field_0)[v2])\n
            {\n
                (&FD.field_0)[v2] = &v0->field_0;\n
                break;\n
            }\n
        }\n
        if (v2 == 8)\n
        {\n
            cgc_SetFsError(\"No free file descriptors\");\n
            cgc_free(v0);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*(a1) != 119)\n
        {\n
            v0->field_0 = &v1;\n
            v0->field_8 = 4;\n
            v0->field_c = 0;\n
        }\n
        else if (v1)\n
        {\n
            v0->field_0 = &v1;\n
            v0->field_8 = 6;\n
            v0->field_c = 0;\n
            v0->field_0->field_14 = 0;\n
            if (v0->field_0->field_18)\n
            {\n
                cgc_free(v0->field_0->field_18);\n
                v0->field_0->field_18 = 0;\n
            }\n
        }\n
        else\n
        {\n
            v1 = cgc_CreateEmptyFile(a0, 6);\n
            if (!v1)\n
            {\n
                cgc_SetFsError(\"Failed to create file\");\n
                (&FD.field_0)[v2] = 0;\n
                cgc_free(v0);\n
                v3 = 0;\n
                return v3;\n
            }\n
            v0->field_0 = &v1;\n
            v0->field_8 = 6;\n
            v0->field_c = 0;\n
        }\n
        cgc_ClearFsError();\n
        v3 = v0;\n
        return v3;\n
    }\n
    cgc_SetFsError(\"Invalid filename or mode\");\n
    v3 = 0;\n
    return v3;\n
}\n
", "4213781:sub_404c15": null, "4213792:cgc_fclose": "extern unsigned long long FD[4];\n
\n
long long cgc_fclose(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x19]\n
    char v1;  // [bp-0x9]\n
    char v2;  // [bp-0x8]\n
    unsigned long long v4;  // rbp\n
\n
    v4 = &v2;\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid file pointer\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (v0 = 0; v0 < 8; v0 += 1)\n
    {\n
        if (FD[v0] == a0)\n
            FD[v0] = 0;\n
    }\n
    cgc_ClearFsError();\n
    cgc_free(a0);\n
    v1 = 1;\n
    return v1;\n
}\n
", "4213947:sub_404cbb": null, "4213952:cgc_fread": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long a1, unsigned long a2, struct_1 *a3)\n
{\n
    struct_1 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_1 *v3;  // rcx\n
    struct_1 *v4;  // rax\n
    struct_1 *v5;  // rax\n
\n
    v0 = a3;\n
    if (a0 && v0)\n
    {\n
        if (!v0->field_0->field_18)\n
        {\n
            cgc_SetFsError(\"End of file\");\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (a2 * a1 > v0->field_0->field_14 - v0->field_c)\n
        {\n
            v3 = v0;\n
            cgc_memcpy(a0, v0->field_0->field_18 + v0->field_c, v0->field_0->field_14 - v3->field_c, v3);\n
            v4 = v0;\n
            v4->field_c = v0->field_0->field_14 - v0->field_c + v4->field_c;\n
            cgc_ClearFsError();\n
            v1 = v0->field_0->field_14 - v0->field_c;\n
            return v1;\n
        }\n
        else\n
        {\n
            cgc_memcpy(a0, v0->field_0->field_18 + v0->field_c, a2 * a1);\n
            v5 = v0;\n
            v5->field_c = a2 * a1 + v5->field_c;\n
            cgc_ClearFsError();\n
            v1 = a2 * a1;\n
            return v1;\n
        }\n
    }\n
    cgc_SetFsError(\"Invalid buffer or file pointer\");\n
    v1 = 0;\n
    return v1;\n
}\n
", "4214284:sub_404e0c": null, "4214288:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long a1, unsigned long a2, struct struct_0 **a3)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_0 *v3;  // rax\n
\n
    if (a0 && a3)\n
    {\n
        v0 = cgc_calloc(*(a3)->field_14 + a2 * a1);\n
        if (!v0)\n
        {\n
            cgc_SetFsError(\"calloc failed\");\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*(a3)->field_18)\n
            cgc_memcpy(v0, *(a3)->field_18, *(a3)->field_14);\n
        cgc_memcpy(v0 + *(a3)->field_14, a0, a2 * a1);\n
        v3 = *(a3);\n
        v3->field_14 = a2 * a1 + v3->field_14;\n
        if (*(a3)->field_18)\n
            cgc_free(*(a3)->field_18);\n
        *(a3)->field_18 = v0;\n
        cgc_ClearFsError();\n
        v1 = a2 * a1;\n
        return v1;\n
    }\n
    cgc_SetFsError(\"Invalid buffer or file pointer\");\n
    v1 = 0;\n
    return v1;\n
}\n
", "4214602:sub_404f4a": null, "4214608:cgc_fgets": "typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fgets(char *a0, unsigned long a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x2d]\n
    int tmp_62;  // tmp #62\n
    unsigned int v1;  // [bp-0x2c]\n
    struct_2 *v2;  // [bp-0x28]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
    struct_2 *v6;  // rdx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid buffer\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!v2)\n
    {\n
        cgc_SetFsError(\"Invalid file\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v2->field_c == v2->field_0->field_14)\n
    {\n
        cgc_SetFsError(\"End of file\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v2->field_0->field_18)\n
    {\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v2->field_c < v2->field_0->field_14)\n
                v0 = v1 < a1 - 1;\n
            if (!(v0 & 1))\n
                break;\n
            v5 = v2->field_0->field_18;\n
            v6 = v2;\n
            v7 = v6->field_c;\n
            v6->field_c = v7 + 1;\n
            tmp_62 = v5[v7];\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            a0[v8] = tmp_62;\n
            if (v2->field_0->field_18[1 + v2->field_c].field_0 == 10)\n
                break;\n
        }\n
        a0[v1] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"End of file\");\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4214989:sub_4050cd": null, "4214992:cgc_ListFiles": "extern struct_0 *cgc_FS;\n
\n
long long cgc_ListFiles(unsigned long long *a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    char v2;  // [bp-0x21]\n
    char v3;  // [bp-0x20]\n
    char v4;  // [bp-0x1f]\n
    char v5;  // [bp-0x1e]\n
    char v6;  // [bp-0x1d]\n
    unsigned int v7;  // [bp-0x1c]\n
    char v8;  // [bp-0x9]\n
    unsigned long long v10;  // xmm0lq\n
    int v12;  // xmm0\n
    unsigned long long v13;  // rax\n
\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(\"Filesystem does not exist\");\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (a0)\n
    {\n
        v1 = 79;\n
        for (v7 = 0; v7 < cgc_FS->field_4; v7 += 1)\n
        {\n
            if (*((cgc_FS->field_8 + (v7 << 3))))\n
            {\n
                v0 = cgc_strlen(*(*((cgc_FS->field_8 + v7 * 8))));\n
                if (v0 < 32)\n
                    v1 += 32;\n
                else\n
                    v1 = v0 + v1;\n
                v1 += 1;\n
                v0 = cgc_strlen(*((*((cgc_FS->field_8 + v7 * 8)) + 8)));\n
                if (v0 >= 32)\n
                    v1 = v0 + v1;\n
                else\n
                    v1 += 32;\n
                v1 += 1;\n
                v10 = *((*((cgc_FS->field_8 + v7 * 8)) + 20));\n
                cgc_log10();\n
                v12 = xmm0<16> + (0 CONCAT 0x3ff0000000000000);\n
                v0 = v12;\n
                if (v12 >= 8)\n
                    v1 = v0 + v1;\n
                else\n
                    v1 += 8;\n
                v1 += 6;\n
            }\n
        }\n
        v13 = cgc_calloc(v1);\n
        *(a0) = v13;\n
        if (!v13)\n
        {\n
            cgc_SetFsError(\"calloc failed\");\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!a0)\n
        cgc_printf(\"$-32s $-32s $-8s $-4s\\n
\", \"Filename\", \"Owner\", \"Size\", \"Mode\");\n
    else\n
        cgc_sprintf(*(a0), \"$-32s $-32s $-8s $-4s\\n
\", \"Filename\", \"Owner\", \"Size\", \"Mode\");\n
    for (v7 = 0; v7 < cgc_FS->field_4; v7 += 1)\n
    {\n
        if (*((cgc_FS->field_8 + (v7 << 3))))\n
        {\n
            if (a0)\n
                cgc_sprintf(*(a0), \"$s$-32s $-32s $-8d \", *(a0), *(*((cgc_FS->field_8 + v7 * 8))), *((*((cgc_FS->field_8 + v7 * 8)) + 8)), *((*((cgc_FS->field_8 + v7 * 8)) + 20)));\n
            else\n
                cgc_printf(\"$-32s $-32s $-8d \", *(*((cgc_FS->field_8 + v7 * 8))), *((*((cgc_FS->field_8 + v7 * 8)) + 8)), *((*((cgc_FS->field_8 + v7 * 8)) + 20)));\n
            cgc_memset(&v2, 45, 5);\n
            v6 = 0;\n
            if ((*((*((cgc_FS->field_8 + (v7 << 3))) + 16)) & 4))\n
                v2 = 114;\n
            if ((*((*((cgc_FS->field_8 + (v7 << 3))) + 16)) & 6))\n
                v3 = 119;\n
            if ((*((*((cgc_FS->field_8 + (v7 << 3))) + 16)) & 64))\n
                v4 = 114;\n
            if ((*((*((cgc_FS->field_8 + (v7 << 3))) + 16)) & 96))\n
                v5 = 119;\n
            if (!a0)\n
                cgc_printf(\"$-4s\\n
\", &v2);\n
            else\n
                cgc_sprintf(*(a0), \"$s$-4s\\n
\", *(a0), &v2);\n
        }\n
    }\n
    cgc_ClearFsError();\n
    v8 = 1;\n
    return v8;\n
}\n
", "4216042:sub_4054ea": null, "4216048:cgc_DeleteFile": "extern struct_0 FD;\n
extern unsigned long long cgc_CurrentUser;\n
extern struct_2 *cgc_FS;\n
\n
long long cgc_DeleteFile(unsigned long long a0)\n
{\n
    unsigned long long v0[4];  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x9]\n
\n
    if (!cgc_FS)\n
    {\n
        cgc_SetFsError(\"Filesystem does not exist\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid filename\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!cgc_CurrentUser)\n
    {\n
        cgc_SetFsError(\"Must login first\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        for (v2 = 0; v2 < cgc_FS->field_4; v2 += 1)\n
        {\n
            if (*((cgc_FS->field_8 + (v2 << 3))) && !cgc_strcmp(*(*((cgc_FS->field_8 + (v2 << 3)))), a0))\n
            {\n
                v0[0] = *((cgc_FS->field_8 + v2 * 8));\n
                v1 = v2;\n
                break;\n
            }\n
        }\n
        if (v2 == cgc_FS->field_4)\n
        {\n
            cgc_SetFsError(\"Unable to locate file\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        for (v2 = 0; v2 < 8; v2 += 1)\n
        {\n
            if ((&FD.field_0)[v2] && (&FD.field_0)[v2]->field_0 == v0)\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
        if (cgc_strcmp(cgc_CurrentUser, \"root\") && cgc_strcmp(cgc_CurrentUser, v0[1]))\n
        {\n
            cgc_SetFsError(\"Permission denied\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_free(v0[0]);\n
        if (v0[1])\n
            cgc_free(v0[1]);\n
        if (v0[3])\n
            cgc_free(v0[3]);\n
        cgc_free(v0);\n
        *((cgc_FS->field_8 + v1 * 8)) = 0;\n
        cgc_ClearFsError();\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4216647:sub_405747": null, "4216656:cgc_RenameFile": "extern unsigned long long cgc_CurrentUser;\n
extern struct_0 *cgc_FS;\n
\n
long long cgc_RenameFile(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x24]\n
    char v3;  // [bp-0x9]\n
\n
    v1[0] = 0;\n
    if (a0 && a1)\n
    {\n
        for (v2 = 0; v2 < cgc_FS->field_4; v2 += 1)\n
        {\n
            if (*((cgc_FS->field_8 + (v2 << 3))) && *(*((cgc_FS->field_8 + (v2 << 3)))))\n
            {\n
                if (!cgc_strcmp(*(*((cgc_FS->field_8 + (v2 << 3)))), a0))\n
                    v1[0] = *((cgc_FS->field_8 + v2 * 8));\n
                if (!cgc_strcmp(*(*((cgc_FS->field_8 + (v2 << 3)))), a1))\n
                {\n
                    cgc_SetFsError(\"Destination file already exists\");\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
        }\n
        if (!v1)\n
        {\n
            cgc_SetFsError(\"Source file not found\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (cgc_strcmp(cgc_CurrentUser, \"root\") && cgc_strcmp(cgc_CurrentUser, *((v1 + 8))))\n
        {\n
            cgc_SetFsError(\"Permission denied\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = cgc_calloc(cgc_strlen(a1) + 1);\n
        if (!v0)\n
        {\n
            cgc_SetFsError(\"calloc failed\");\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(v0, a1);\n
        cgc_free(*(v1));\n
        *(v1) = v0;\n
        cgc_ClearFsError();\n
        v3 = 1;\n
        return v3;\n
    }\n
    cgc_SetFsError(\"Invalid filename\");\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217168:cgc_ChangeMode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char field_10;\n
} struct_0;\n
\n
extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_ChangeMode(unsigned long long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    char v1;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid user\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!(a1 & 153))\n
    {\n
        v0 = cgc_FindFile(a0);\n
        if (!v0)\n
        {\n
            cgc_SetFsError(\"Unable to find file\");\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (cgc_strcmp(cgc_CurrentUser, \"root\") && cgc_strcmp(cgc_CurrentUser, v0->field_8))\n
        {\n
            cgc_SetFsError(\"Permission denied\");\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0->field_10 = a1;\n
        cgc_ClearFsError();\n
        v1 = 1;\n
        return v1;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"Invalid mode\");\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4217408:cgc_ChangeOwner": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_ChangeOwner(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    struct_0 *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid filename\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(\"Invalid owner\");\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (!cgc_strcmp(cgc_CurrentUser, \"root\"))\n
    {\n
        v1 = cgc_FindFile(a0);\n
        if (!v1)\n
        {\n
            cgc_SetFsError(\"Unable to find file\");\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_UserExists(a1))\n
        {\n
            v0 = cgc_calloc(cgc_strlen(a1) + 1);\n
            if (!v0)\n
            {\n
                cgc_SetFsError(\"calloc failed\");\n
                v2 = 0;\n
                return v2;\n
            }\n
            cgc_strcpy(v0, a1);\n
            if (v1->field_8)\n
                cgc_free(v1->field_8);\n
            v1->field_8 = v0;\n
            cgc_ClearFsError();\n
            v2 = 1;\n
            return v2;\n
        }\n
        else\n
        {\n
            cgc_SetFsError(\"Invalid user\");\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"Must be root\");\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4217747:sub_405b93": null, "4217760:cgc_UserExists": "long long cgc_UserExists(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xb0]\n
    char v1;  // [bp-0xa8]\n
    void* v2;  // [bp-0x20]\n
    char v3;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = cgc_fopen(\"passwd\", \"r\");\n
    if (!v2)\n
    {\n
        cgc_SetFsError(\"Unable to open passwd file\");\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (cgc_fgets(&v1, 127, v2))\n
        {\n
            v0 = cgc_strtok(&v1, \":\");\n
            if (!v0)\n
            {\n
                cgc_SetFsError(\"Failed to parse passwd file\");\n
                v3 = 0;\n
                return v3;\n
            }\n
            else if (!cgc_strcmp(v0, a0))\n
            {\n
                cgc_fclose(v2);\n
                v3 = 1;\n
                return v3;\n
            }\n
        }\n
        else\n
        {\n
            cgc_fclose(v2);\n
            cgc_ClearFsError();\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4218033:sub_405cb1": null, "4218048:cgc_Uid": "extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_Uid()\n
{\n
    return cgc_puts(cgc_CurrentUser);\n
}\n
", "4218080:cgc_AddUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_AddUser(unsigned long long a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0xd0]\n
    struct_0 *v1;  // [bp-0xc8]\n
    unsigned long v2;  // [bp-0xc0]\n
    char v3;  // [bp-0xb8]\n
    struct struct_0 **v4;  // [bp-0x30]\n
    void* v5;  // [bp-0x28]\n
    char v6;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_strcmp(cgc_CurrentUser, \"root\"))\n
    {\n
        cgc_SetFsError(\"Must be root\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_strlen(a0) > 32)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_strlen(a1) > 32)\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (!cgc_UserExists(a0))\n
    {\n
        v5 = cgc_fopen(\"passwd\", \"r\");\n
        if (!v5)\n
        {\n
            cgc_SetFsError(\"Unable to open passwd file\");\n
            v6 = 0;\n
            return v6;\n
        }\n
        v4 = cgc_fopen(\"~passwd\", \"w\");\n
        if (!v4)\n
        {\n
            cgc_SetFsError(\"Unable to open tmp passwd file\");\n
            cgc_fclose(v5);\n
            v6 = 0;\n
            return v6;\n
        }\n
        while (true)\n
        {\n
            if (!cgc_fgets(&v3, 127, v5))\n
            {\n
                cgc_sprintf(&v3, \"$s:$s\", a0, a1);\n
                v0 = &v3;\n
                cgc_fwrite(v0, cgc_strlen(&v3), 1, v4);\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_DeleteFile(\"passwd\");\n
                cgc_RenameFile(\"~passwd\", \"passwd\");\n
                cgc_ClearFsError();\n
                v6 = 1;\n
                return v6;\n
            }\n
            v1 = &v3;\n
            v2 = cgc_fwrite(v1, cgc_strlen(&v3), 1, v4);\n
            if (v2 != cgc_strlen(&v3))\n
            {\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_SetFsError(\"Unable to write tmp passwd file\");\n
                cgc_DeleteFile(\"~passwd\");\n
                v6 = 0;\n
                return v6;\n
            }\n
            else if (*(&v2 + cgc_strlen(&v3)) != 10 && cgc_fwrite(\"\\n
\", 1, 1, v4) != 1)\n
            {\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_SetFsError(\"Unable to write tmp passwd file\");\n
                cgc_DeleteFile(\"~passwd\");\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"User already exists\");\n
        v6 = 0;\n
        return v6;\n
    }\n
}\n
", "4218898:sub_406012": null, "4218912:cgc_DeleteUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_DeleteUser(unsigned long long a0)\n
{\n
    struct_0 *v0;  // [bp-0xc8]\n
    unsigned long v1;  // [bp-0xc0]\n
    struct struct_0 **v2;  // [bp-0xb8]\n
    void* v3;  // [bp-0xb0]\n
    char v4;  // [bp-0xa1]\n
    unsigned long long v5;  // [bp-0xa0]\n
    char v6;  // [bp-0x98]\n
    char v7;  // [bp-0x9]\n
\n
    v4 = 0;\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (cgc_strcmp(cgc_CurrentUser, \"root\"))\n
    {\n
        cgc_SetFsError(\"Must be root\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (cgc_strcmp(a0, \"root\"))\n
    {\n
        v3 = cgc_fopen(\"passwd\", \"r\");\n
        if (!v3)\n
        {\n
            cgc_SetFsError(\"Unable to open passwd file\");\n
            v7 = 0;\n
            return v7;\n
        }\n
        v2 = cgc_fopen(\"~passwd\", \"w\");\n
        if (!v2)\n
        {\n
            cgc_SetFsError(\"Unable to open tmp passwd file\");\n
            cgc_fclose(v3);\n
            v7 = 0;\n
            return v7;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v6, 127, v3))\n
                {\n
                    cgc_fclose(v3);\n
                    cgc_fclose(v2);\n
                    if (v4)\n
                    {\n
                        cgc_DeleteFile(\"passwd\");\n
                        cgc_RenameFile(\"~passwd\", \"passwd\");\n
                        cgc_ClearFsError();\n
                        v7 = 1;\n
                        return v7;\n
                    }\n
                    cgc_SetFsError(\"User not found\");\n
                    cgc_fclose(v3);\n
                    cgc_fclose(v2);\n
                    cgc_DeleteFile(\"~passwd\");\n
                    v7 = 0;\n
                    return v7;\n
                }\n
            } while (!cgc_strlen(&v6));\n
            v5 = cgc_strtok(&v6, \":\");\n
            if (!v5)\n
            {\n
                cgc_SetFsError(\"Failed to parse passwd file\");\n
                cgc_fclose(v3);\n
                cgc_fclose(v2);\n
                cgc_DeleteFile(\"~passwd\");\n
                v7 = 0;\n
                return v7;\n
            }\n
            if (cgc_strcmp(v5, a0))\n
            {\n
                (&v6)[cgc_strlen(v5)] = 58;\n
                v0 = &v6;\n
                v1 = cgc_fwrite(v0, cgc_strlen(&v6), 1, v2);\n
                if (v1 != cgc_strlen(&v6))\n
                    break;\n
            }\n
            else\n
            {\n
                v4 = 1;\n
            }\n
        }\n
        cgc_fclose(v3);\n
        cgc_fclose(v2);\n
        cgc_SetFsError(\"Unable to write tmp passwd file\");\n
        cgc_DeleteFile(\"~passwd\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"Can't delete root user\");\n
        v7 = 0;\n
        return v7;\n
    }\n
}\n
", "4219704:sub_406338": null, "4219712:cgc_ChangePasswd": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_ChangePasswd(unsigned long long a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    struct_0 *v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    struct struct_0 **v4;  // [bp-0xc8]\n
    void* v5;  // [bp-0xc0]\n
    char v6;  // [bp-0xb1]\n
    unsigned long long v7;  // [bp-0xb0]\n
    char v8;  // [bp-0xa8]\n
    char v9;  // [bp-0x9]\n
\n
    v6 = 0;\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v9 = 0;\n
        return v9;\n
    }\n
    else if (cgc_strlen(a1) <= 32)\n
    {\n
        if (cgc_strcmp(cgc_CurrentUser, a0) && cgc_strcmp(cgc_CurrentUser, \"root\"))\n
        {\n
            cgc_SetFsError(\"Must be root or the user being changed\");\n
            v9 = 0;\n
            return v9;\n
        }\n
        v5 = cgc_fopen(\"passwd\", \"r\");\n
        if (!v5)\n
        {\n
            cgc_SetFsError(\"Unable to open passwd file\");\n
            v9 = 0;\n
            return v9;\n
        }\n
        v4 = cgc_fopen(\"~passwd\", \"w\");\n
        if (!v4)\n
        {\n
            cgc_SetFsError(\"Unable to open tmp passwd file\");\n
            cgc_fclose(v5);\n
            v9 = 0;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!cgc_fgets(&v8, 127, v5))\n
                {\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    if (v6)\n
                    {\n
                        cgc_DeleteFile(\"passwd\");\n
                        cgc_RenameFile(\"~passwd\", \"passwd\");\n
                        cgc_ClearFsError();\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
                    cgc_SetFsError(\"User not found\");\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    cgc_DeleteFile(\"~passwd\");\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            } while (!cgc_strlen(&v8));\n
            v7 = cgc_strtok(&v8, \":\");\n
            if (!v7)\n
            {\n
                cgc_SetFsError(\"Failed to parse passwd file\");\n
                cgc_fclose(v5);\n
                cgc_fclose(v4);\n
                cgc_DeleteFile(\"~passwd\");\n
                v9 = 0;\n
                return v9;\n
            }\n
            else if (!cgc_strcmp(v7, a0))\n
            {\n
                cgc_sprintf(&v8, \"$s:$s\\n
\", a0, a1);\n
                v2 = &v8;\n
                v3 = cgc_fwrite(v2, cgc_strlen(&v8), 1, v4);\n
                if (v3 != cgc_strlen(&v8))\n
                {\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    cgc_SetFsError(\"Unable to write tmp passwd file\");\n
                    cgc_DeleteFile(\"~passwd\");\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            }\n
            else\n
            {\n
                (&v8)[cgc_strlen(v7)] = 58;\n
                v0 = &v8;\n
                v1 = cgc_fwrite(v0, cgc_strlen(&v8), 1, v4);\n
                if (v1 != cgc_strlen(&v8))\n
                {\n
                    cgc_SetFsError(\"Unable to write tmp passwd file\");\n
                    cgc_fclose(v5);\n
                    cgc_fclose(v4);\n
                    cgc_DeleteFile(\"~passwd\");\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4220730:sub_40673a": null, "4220736:cgc_CheckPasswd": "extern unsigned long long cgc_CurrentUser;\n
\n
long long cgc_CheckPasswd(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0xd1]\n
    void* v1;  // [bp-0xd0], Other Possible Types: unsigned long, unsigned long long\n
    void* v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb9]\n
    unsigned long long v4;  // [bp-0xb8]\n
    unsigned long long v5;  // [bp-0xb0]\n
    char v6;  // [bp-0xa8]\n
    char v7;  // [bp-0x9]\n
\n
    v3 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        cgc_SetFsError(\"Invalid username\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (!a1)\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else if (cgc_strlen(a1) > 32)\n
    {\n
        cgc_SetFsError(\"Invalid password\");\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        if (!cgc_CurrentUser)\n
        {\n
            cgc_Login(\"root\");\n
            v0 = 1;\n
        }\n
        else if (cgc_strcmp(cgc_CurrentUser, \"root\"))\n
        {\n
            v1 = cgc_calloc(cgc_strlen(cgc_CurrentUser) + 1);\n
            if (!v1)\n
            {\n
                cgc_SetFsError(\"calloc failed\");\n
                v7 = 0;\n
                return v7;\n
            }\n
            cgc_strcpy(v1, cgc_CurrentUser);\n
            cgc_Logout();\n
            cgc_Login(\"root\");\n
        }\n
        v2 = cgc_fopen(\"passwd\", \"r\");\n
        if (!v2)\n
        {\n
            cgc_SetFsError(\"Unable to open passwd file\");\n
            if (v1)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v1);\n
                cgc_free(v1);\n
            }\n
            if (v0)\n
                cgc_Logout();\n
            v7 = 0;\n
            return v7;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                do\n
                {\n
                    do\n
                    {\n
                        if (!cgc_fgets(&v6, 127, v2))\n
                        {\n
                            cgc_fclose(v2);\n
                            if (!v3)\n
                            {\n
                                cgc_SetFsError(\"User not found\");\n
                                if (v1)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v1);\n
                                    cgc_free(v1);\n
                                }\n
                                if (v0)\n
                                    cgc_Logout();\n
                                v7 = 0;\n
                                return v7;\n
                            }\n
                            else\n
                            {\n
                                cgc_ClearFsError();\n
                                if (v1)\n
                                {\n
                                    cgc_Logout();\n
                                    cgc_Login(v1);\n
                                    cgc_free(v1);\n
                                }\n
                                if (v0)\n
                                    cgc_Logout();\n
                                v7 = 0;\n
                                return v7;\n
                            }\n
                        }\n
                    } while (!cgc_strlen(&v6));\n
                    v5 = cgc_strtok(&v6, \":\");\n
                    if (!v5)\n
                    {\n
                        cgc_SetFsError(\"Failed to parse passwd file\");\n
                        cgc_fclose(v2);\n
                        if (v1)\n
                        {\n
                            cgc_Logout();\n
                            cgc_Login(v1);\n
                            cgc_free(v1);\n
                        }\n
                        if (v0)\n
                            cgc_Logout();\n
                        v7 = 0;\n
                        return v7;\n
                    }\n
                } while (cgc_strcmp(v5, a0));\n
                v4 = cgc_strtok(0, \":\");\n
                if (!v4)\n
                {\n
                    cgc_SetFsError(\"Failed to parse passwd file\");\n
                    cgc_fclose(v2);\n
                    if (v1)\n
                    {\n
                        cgc_Logout();\n
                        cgc_Login(v1);\n
                        cgc_free(v1);\n
                    }\n
                    if (v0)\n
                        cgc_Logout();\n
                    v7 = 0;\n
                    return v7;\n
                }\n
            } while (cgc_strcmp(v4, a1));\n
            cgc_ClearFsError();\n
            cgc_fclose(v2);\n
            if (v1)\n
            {\n
                cgc_Logout();\n
                cgc_Login(v1);\n
                cgc_free(v1);\n
            }\n
            if (v0)\n
                cgc_Logout();\n
            v7 = 1;\n
            return v7;\n
        }\n
    }\n
}\n
", "4221826:sub_406b82": null, "4221840:cgc_link": "extern char cgc_lookaside;\n
\n
long long cgc_link(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long v5;  // rax\n
\n
    v3 = cgc_lookaside;\n
    if (!a0)\n
        return cgc_lookaside;\n
    v5 = a0;\n
    if (*(a0) <= 1016)\n
    {\n
        if (*(a0) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(a0) >> 3;\n
        *((a0 + 8)) = (&cgc_lookaside)[v2];\n
        v1 = a0;\n
        if (*(a0) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(a0) >> 3;\n
        (&cgc_lookaside)[v0] = v1;\n
        return &cgc_lookaside;\n
    }\n
    while (true)\n
    {\n
        if (!v3)\n
            return v5;\n
        if (!*((v3 + 8)))\n
        {\n
            *((v3 + 8)) = a0;\n
            *((a0 + 16)) = v3;\n
            *((a0 + 8)) = 0;\n
            return a0;\n
        }\n
        if (*(a0) < *(*((v3 + 8))))\n
        {\n
            *((a0 + 8)) = *((v3 + 8));\n
            *((a0 + 16)) = v3;\n
            *((*((v3 + 8)) + 16)) = a0;\n
            v5 = v3;\n
            *((v5 + 8)) = a0;\n
            return v3;\n
        }\n
        v5 = *((v3 + 8));\n
        v3 = v5;\n
    }\n
}\n
", "4222219:sub_406d0b": null, "4222224:cgc_add_freelist_block": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_add_freelist_block(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned long long *v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long *v8;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = 0;\n
    v0 = 0;\n
    v2 += 4;\n
    v2 = v2 + 4095 & 0xfffff000;\n
    if (cgc_allocate(a0, v4, v5, v6))\n
    {\n
        cgc_printf(\"[ERROR] Allocating a free list block failed: $d\\n
\", v2);\n
        cgc__terminate(\"[ERROR] Allocating a free list block failed: $d\\n
\");\n
    }\n
    cgc_bzero(v1, v2);\n
    *(v1) = v2 - 4;\n
    if (!cgc_lookaside)\n
    {\n
        v8 = v1;\n
        cgc_lookaside = v8;\n
        return v1;\n
    }\n
    v8 = cgc_link(v1);\n
    return v8;\n
}\n
", "4222416:cgc_free": "long long cgc_free(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (a0)\n
        *(&v0) = a0 - 4;\n
    return cgc_link(*(&v0));\n
}\n
", "4222474:sub_406e0a": null, "4222480:cgc_init_freelist": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_init_freelist()\n
{\n
    unsigned long long v0[3];  // [bp-0x18]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    v1[0] = 0;\n
    v0[0] = 0;\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        cgc_printf(\"[ERROR] Malloc fail terminate\\n
\");\n
        cgc__terminate(\"[ERROR] Malloc fail terminate\\n
\");\n
    }\n
    cgc_bzero(cgc_lookaside, 0x1000);\n
    v1[0] = cgc_lookaside;\n
    v0[0] = v1 + 1;\n
    v1[0] = 0;\n
    v1[1] = v0;\n
    v1[2] = 0;\n
    v0[0] = 4068;\n
    v0[2] = v1;\n
    v0[1] = 0;\n
    return v0;\n
}\n
", "4222672:cgc_unlink": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_unlink(struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_1 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (!a0)\n
        return v2;\n
    if (a0->field_10)\n
        a0->field_10->field_8 = v0->field_8;\n
    v2 = a0;\n
    if (!a0->field_8)\n
        return v2;\n
    v2 = a0->field_8;\n
    *((v2 + 16)) = a0->field_10;\n
}\n
", "4222773:sub_406f35": null, "4222784:cgc_freelist_alloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern struct_0 *cgc_lookaside;\n
\n
long long cgc_freelist_alloc(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v1 = cgc_lookaside; v1; v1 = *((v1 + 8)))\n
    {\n
        if (*(v1) >= a0)\n
            break;\n
    }\n
    if (!v1)\n
    {\n
        cgc_add_freelist_block(a0);\n
        v2 = cgc_freelist_alloc(a0);\n
        return v2;\n
    }\n
    cgc_unlink(v1);\n
    if (*(v1) - a0 < 24)\n
    {\n
        v2 = v1 + 4;\n
        return v2;\n
    }\n
    v0 = v1 + 4 + a0;\n
    *(v0) = *(v1) - (a0 + 4);\n
    *(v1) = a0;\n
    cgc_link(v0);\n
    v2 = v1 + 4;\n
    return v2;\n
}\n
", "4223065:sub_407059": null, "4223072:cgc_calloc": "long long cgc_calloc(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v0 = cgc_malloc(v1);\n
    if (!v0)\n
    {\n
        v2 = v0;\n
        return v2;\n
    }\n
    v1 = v1 + 7 & 4294967288;\n
    cgc_bzero(v0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4223177:sub_4070c9": null, "4223184:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern struct_1 cgc_lookaside;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30], Other Possible Types: unsigned long long\n
    struct_0 *v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long long v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x10]\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 < 8)\n
        v3 = 8;\n
    v3 = v3 + 7 & 4294967288;\n
    if (v3 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v3 >> 3;\n
    if (!v2)\n
    {\n
        v4 = cgc_freelist_alloc(v3);\n
        return v4;\n
    }\n
    for (v2 = v0; v2 < 128; v2 += 1)\n
    {\n
        if ((&cgc_lookaside.field_0)[v2])\n
            break;\n
    }\n
    if (v2 != 128)\n
    {\n
        v1 = (&cgc_lookaside.field_0)[v2];\n
        (&cgc_lookaside.field_0)[v2] = v1->field_8;\n
        v4 = &v1->padding_0[4];\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v3);\n
    return v4;\n
}\n
", "4223486:sub_4071fe": null, "4223488:cgc_round": "long long cgc_round()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4223614:sub_40727e": null, "4223616:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v7;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v7 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v7;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4223766:sub_407316": null, "4223776:cgc_seed_prng_array": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_seed_prng_array(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14], Other Possible Types: unsigned long\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a1;\n
    cgc_bzero(&state, 128);\n
    state_n = 0;\n
    if (v2 > 32)\n
        v2 = 32;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        (&state)[v1] = a0[v1];\n
    }\n
    v4 = v2;\n
    while (true)\n
    {\n
        v1 = v4;\n
        if (v1 >= 32)\n
            break;\n
        v0 = (&state)[v1 - 1 & 31];\n
        (&state)[v1] = (v0 ^ (v0 >> 30) + v1) * 524287;\n
        v4 = v1 + 1;\n
    }\n
    return v4;\n
}\n
", "4223990:sub_4073f6": null, "4224000:cgc_seed_prng": "long long cgc_seed_prng(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    return cgc_seed_prng_array(&v0, 1);\n
}\n
", "4224031:sub_40741f": null, "4224032:cgc_prng": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v8 = (&state)[state_n];\n
    v7 = (&state)[state_n + 3 & 31];\n
    v6 = (&state)[state_n + 24 & 31];\n
    v5 = (&state)[state_n + 10 & 31];\n
    v4 = (&state)[state_n + 31 & 31];\n
    v3 = v8 ^ v7 ^ (v7 >> 8);\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    (&state)[state_n] = v1;\n
    (&state)[state_n + 31 & 31] = v0;\n
    state_n = state_n + 31 & 31;\n
    return v0;\n
}\n
", "4224341:sub_407555": null, "4224352:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    if (a0 > a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0 != a1)\n
    {\n
        v2 = a1 - a0 + 1;\n
        if (!v2)\n
        {\n
            v4 = cgc_prng();\n
            return v4;\n
        }\n
        v1 = (0 CONCAT -1) /m v2;\n
        do\n
        {\n
            v3 = cgc_prng();\n
        } while (v3 >= v2 * v1);\n
        v0 = a0;\n
        v4 = v0 + (0 CONCAT v3) /m v1;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = a0;\n
        return v4;\n
    }\n
}\n
", "4224520:sub_407608": null, "4224528:cgc_WRAPPER_PUTC": "long long cgc_WRAPPER_PUTC(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rcx\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (cgc_transmit(a0, a1, a2, v4))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4224611:sub_407663": null, "4224624:cgc_WRAPPER_OUTC": "long long cgc_WRAPPER_OUTC(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    a0[a2] = a1;\n
    return a2 + 1;\n
}\n
", "4224665:sub_407699": null, "4224672:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    struct struct_0 *field_100;\n
} struct_0;\n
\n
long long cgc_WRAPPER_BUFFER_PUTC(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    if (a0->field_100 >= 0x100)\n
    {\n
        for (v1 = a0; a0->field_100 > 0; v1 = &(&v1->field_0)[*(&v0)])\n
        {\n
            if (cgc_transmit(a0, a1, a2, rcx<8>))\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
            else if (*(&v0))\n
            {\n
                v6 = a0->field_100 - *(&v0);\n
                *(&a0->field_100) = v6;\n
            }\n
            else\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
        }\n
    }\n
    *(&v6) = a0->field_100;\n
    *(&a0->field_100) = v6 + 1;\n
    (&a0->field_0)[v6] = a1;\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4224931:sub_4077a3": null, "4224944:cgc_putchar": "long long cgc_putchar(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    if (cgc_transmit(a0, v2, v3, v4))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4225014:sub_4077f6": null, "4225024:cgc_puts": "long long cgc_puts(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 0;\n
    v1 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        if (v0 == v1)\n
        {\n
            cgc_putchar(10);\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (cgc_transmit(a0, v5, v6, v7))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (*(&v2))\n
        {\n
            v0 = *(&v2) + v0;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4225188:sub_4078a4": null, "4225200:cgc_vprintf_buffered": "long long cgc_vprintf_buffered(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x158]\n
    unsigned long v1;  // [bp-0x150]\n
    unsigned int v2;  // [bp-0x144]\n
    void* v3;  // [bp-0x140]\n
    unsigned long long v4;  // [bp-0x138]\n
    char v5;  // [bp-0x130]\n
    unsigned short v6;  // [bp-0x30]\n
    unsigned long long v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v7 = cgc_WRAPPER_BUFFER_PUTC;\n
    v6 = 0;\n
    v4 = &v5;\n
    v3 = 0;\n
    v2 = cgc_wrapper_output(v4, v7, v3, a0, a1);\n
    v1 = &v5;\n
    while (true)\n
    {\n
        if (v6 <= 0)\n
        {\n
            v8 = v2;\n
            return v8;\n
        }\n
        else if (cgc_transmit(v4, v7, v3, a0))\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
        else if (*(&v0))\n
        {\n
            v6 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
    }\n
}\n
", "4225467:sub_4079bb": null, "4225472:cgc_wrapper_output": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_wrapper_output(unsigned long long a0, struct struct_0 **a1, unsigned long a2, char *a3, struct_2 *a4)\n
{\n
    unsigned int v0;  // [bp-0x170]\n
    unsigned int *v1;  // [bp-0x168], Other Possible Types: unsigned long\n
    struct_2 *v2;  // [bp-0x160]\n
    unsigned int v3;  // [bp-0x154]\n
    struct struct_1 **v4;  // [bp-0x150], Other Possible Types: unsigned long\n
    struct_2 *v5;  // [bp-0x148]\n
    unsigned int v6;  // [bp-0x13c]\n
    unsigned long long *v7;  // [bp-0x138], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0x130]\n
    unsigned int *v9;  // [bp-0x128]\n
    unsigned int v10;  // [bp-0x11c]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int *v13;  // [bp-0x108]\n
    unsigned int v14;  // [bp-0xfc]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xcc]\n
    unsigned int *v21;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_2 *v22;  // [bp-0xc0]\n
    unsigned int v23;  // [bp-0xb4]\n
    unsigned long long *v24;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_2 *v25;  // [bp-0xa8]\n
    unsigned int v26;  // [bp-0x9c]\n
    unsigned long v27;  // [bp-0x98]\n
    char v28;  // [bp-0x8b]\n
    char v29;  // [bp-0x8a]\n
    char v30;  // [bp-0x89]\n
    unsigned int *v31;  // [bp-0x88]\n
    unsigned long v32;  // [bp-0x80]\n
    unsigned long v33;  // [bp-0x78]\n
    unsigned int v34;  // [bp-0x6c]\n
    unsigned int v35;  // [bp-0x68]\n
    unsigned int v36;  // [bp-0x64]\n
    unsigned long long v37;  // [bp-0x60]\n
    char *v38;  // [bp-0x58]\n
    char *v39;  // [bp-0x50]\n
    char v40;  // [bp-0x41]\n
    unsigned int v41;  // [bp-0x40]\n
    unsigned int v42;  // [bp-0x3c]\n
    unsigned int v43;  // [bp-0x38]\n
    unsigned int v44;  // [bp-0x34]\n
    char *v45;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v46;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_0 **v47;  // [bp-0x18]\n
    struct_2 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned long long *v51;  // rax\n
    struct_2 *v52;  // rcx\n
    unsigned long long *v53;  // rdx\n
    struct_2 *v54;  // rcx\n
    unsigned long long v55;  // rdx\n
    unsigned int *v56;  // rax\n
    struct_2 *v57;  // rcx\n
    unsigned int *v58;  // rdx\n
    struct_2 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned int *v61;  // rax\n
    struct_2 *v62;  // rcx\n
    unsigned int *v63;  // rdx\n
    struct_2 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    unsigned int *v66;  // rax\n
    struct_2 *v67;  // rcx\n
    unsigned int *v68;  // rdx\n
    unsigned long long v69;  // rdx\n
    unsigned int *v70;  // rax\n
    struct_2 *v71;  // rcx\n
    unsigned int *v72;  // rdx\n
    unsigned long long v73;  // rdx\n
    unsigned long long *v74;  // rax\n
    struct_2 *v75;  // rcx\n
    unsigned long long *v76;  // rdx\n
    struct_2 *v77;  // rcx\n
    unsigned long long v78;  // rdx\n
    struct struct_1 **v79;  // rax\n
    struct_2 *v80;  // rcx\n
    struct struct_1 **v81;  // rdx\n
    struct_2 *v82;  // rcx\n
    unsigned long long v83;  // rdx\n
    unsigned int *v84;  // rax\n
    struct_2 *v85;  // rcx\n
    unsigned int *v86;  // rdx\n
\n
    v47 = a1;\n
    v46 = a2;\n
    v45 = a3;\n
    v44 = 0;\n
    v43 = 0;\n
    v42 = 0;\n
    v41 = 0;\n
    while (true)\n
    {\n
        if (!*(v45))\n
            return v46;\n
        v40 = *(v45);\n
        v45 += 1;\n
        if (v40 != 36)\n
        {\n
            v46 = v47(a0, v40, v46);\n
        }\n
        else\n
        {\n
            v41 = 0;\n
            v42 = 0;\n
            v43 = 0;\n
            v44 = 0;\n
            if (!*(v45))\n
                return v46;\n
            if (*(v45) != 36)\n
            {\n
                if (*(v45) == 45)\n
                {\n
                    v44 |= 1;\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (cgc_isdigit(*(v45)))\n
                {\n
                    if (*(v45) == 48)\n
                        v44 |= 4;\n
                    for (v39 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v43 = cgc_atoi(v39);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (*(v45) == 46)\n
                {\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                    for (v38 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v41 = cgc_atoi(v38);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                v27 = *(v45) - 88;\n
                switch (v27)\n
                {\n
                case 0:\n
                    v44 |= 8;\n
                    v16 = a4;\n
                    v17 = v16->field_0;\n
                    if (v17 > 40)\n
                    {\n
                        v67 = v16;\n
                        v68 = v67->field_8;\n
                        v67->field_8 = &v68[2];\n
                        v15 = v68;\n
                    }\n
                    else\n
                    {\n
                        v64 = v16;\n
                        v65 = v17;\n
                        v66 = v65 + v64->field_10;\n
                        v64->field_0 = v65 + 8;\n
                        v15 = v66;\n
                    }\n
                    v34 = *(v15);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v34, 16, v43, v41);\n
                    break;\n
                case 11:\n
                    v2 = a4;\n
                    v3 = v2->field_0;\n
                    if (v3 > 40)\n
                    {\n
                        v85 = v2;\n
                        v86 = v85->field_8;\n
                        v85->field_8 = &v86[2];\n
                        v1 = v86;\n
                    }\n
                    else\n
                    {\n
                        v82 = v2;\n
                        v83 = v3;\n
                        v84 = v83 + v82->field_10;\n
                        v82->field_0 = v83 + 8;\n
                        v1 = v84;\n
                    }\n
                    v30 = *(v1);\n
                    v28 = v30;\n
                    v29 = 0;\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, &v28, v43, 0);\n
                    break;\n
                case 12:\n
                    v22 = a4;\n
                    v23 = v22->field_0;\n
                    if (v23 > 40)\n
                    {\n
                        v57 = v22;\n
                        v58 = v57->field_8;\n
                        v57->field_8 = &v58[2];\n
                        v21 = v58;\n
                    }\n
                    else\n
                    {\n
                        v54 = v22;\n
                        v55 = v23;\n
                        v56 = v55 + v54->field_10;\n
                        v54->field_0 = v55 + 8;\n
                        v21 = v56;\n
                    }\n
                    v36 = *(v21);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v36, 10, v43, v41);\n
                    break;\n
                case 13:\n
                    v44 |= 16;\n
                    v8 = a4;\n
                    v9 = &v8->field_4;\n
                    v10 = v8->field_4;\n
                    if (v10 <= 160)\n
                    {\n
                        v73 = v10;\n
                        v74 = v73 + v8->field_10;\n
                        *(v9) = v73 + 16;\n
                        v7 = v74;\n
                    }\n
                    else\n
                    {\n
                        v75 = v8;\n
                        v76 = v75->field_8;\n
                        v75->field_8 = &v76[1];\n
                        v7 = v76;\n
                    }\n
                    v32 = *(v7);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 14:\n
                    v12 = a4;\n
                    v13 = &v12->field_4;\n
                    v14 = v12->field_4;\n
                    if (v14 <= 160)\n
                    {\n
                        v69 = v14;\n
                        v70 = v69 + v12->field_10;\n
                        *(v13) = v69 + 16;\n
                        v11 = v70;\n
                    }\n
                    else\n
                    {\n
                        v71 = v12;\n
                        v72 = v71->field_8;\n
                        v71->field_8 = &v72[2];\n
                        v11 = v72;\n
                    }\n
                    v33 = *(v11);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 22:\n
                    v5 = a4;\n
                    v6 = v5->field_0;\n
                    if (v6 <= 40)\n
                    {\n
                        v77 = v5;\n
                        v78 = v6;\n
                        v79 = v78 + v77->field_10;\n
                        v77->field_0 = v78 + 8;\n
                        v4 = v79;\n
                    }\n
                    else\n
                    {\n
                        v80 = v5;\n
                        v81 = v80->field_8;\n
                        v80->field_8 = &v81[1];\n
                        v4 = v81;\n
                    }\n
                    v31 = *(v4);\n
                    *(v31) = v46;\n
                    break;\n
                case 27:\n
                    v25 = a4;\n
                    v26 = v25->field_0;\n
                    if (v26 > 40)\n
                    {\n
                        v52 = v25;\n
                        v53 = v52->field_8;\n
                        v52->field_8 = &v53[1];\n
                        v24 = v53;\n
                    }\n
                    else\n
                    {\n
                        v49 = v25;\n
                        v50 = v26;\n
                        v51 = v50 + v49->field_10;\n
                        v49->field_0 = v50 + 8;\n
                        v24 = v51;\n
                    }\n
                    v37 = *(v24);\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, v37, v43, v41);\n
                    break;\n
                case 32:\n
                    v19 = a4;\n
                    v20 = v19->field_0;\n
                    if (v20 > 40)\n
                    {\n
                        v62 = v19;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[2];\n
                        v18 = v63;\n
                    }\n
                    else\n
                    {\n
                        v59 = v19;\n
                        v60 = v20;\n
                        v61 = v60 + v59->field_10;\n
                        v59->field_0 = v60 + 8;\n
                        v18 = v61;\n
                    }\n
                    v35 = *(v18);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v35, 16, v43, v41);\n
                    break;\n
                default:\n
                    break;\n
                }\n
                v45 += 1;\n
            }\n
            else\n
            {\n
                v46 = v47(a0, 36, v46);\n
                continue;\n
            }\n
        }\n
    }\n
}\n
", "4227418:sub_40815a": null, "4227424:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf_buffered(a0, &v15);\n
    return v14;\n
}\n
", "4227584:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4227748:sub_4082a4": null, "4227760:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, char *a1, void* a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x28]\n
\n
    v2 = &cgc_WRAPPER_OUTC;\n
    v1 = 0;\n
    v0 = cgc_wrapper_output(a0, v2, v1, a1, a2);\n
    v2(a0, 0, v0);\n
    return v0;\n
}\n
", "4227860:sub_408314": null, "4227872:cgc_printf_int_to_string": "long long cgc_printf_int_to_string(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rcx\n
\n
    v3 = a0;\n
    v2 = a3;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a2) = 48;\n
        v4 = 1;\n
        return v4;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a1 >> 32;\n
        v3 = (0 CONCAT v3) /m a1;\n
        if (a1 != 16)\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a2[v6] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a2[v7] = v0 + 48;\n
        }\n
        else if ((v2 & 8))\n
        {\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            a2[v8] = v0 + 55;\n
        }\n
        else\n
        {\n
            v9 = v1;\n
            v1 = v9 + 1;\n
            a2[v9] = v0 + 87;\n
        }\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4228164:sub_408444": null, "4228176:cgc_printf_helper_int": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_printf_helper_int(unsigned long long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned int v9, unsigned int a6)\n
{\n
    struct_1 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    struct_1 *v2;  // [bp-0x50]\n
    char v3;  // [bp-0x41]\n
    void* v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_0 **v8;  // [bp-0x18]\n
    unsigned long long v10;  // rax\n
    unsigned long v11;  // rcx\n
    unsigned long long v12;  // rax\n
\n
    v8 = a1;\n
    v7 = a2;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a4 == 10 && v6 < 0)\n
    {\n
        v3 = 1;\n
        v6 = -(v6);\n
        v5 += 1;\n
    }\n
    v2 = cgc_printf_int_to_string(v6, a4, &v1, a6);\n
    v5 = &v2[v5];\n
    if (a5 > 0 && v5 < a5)\n
        v4 = a5 - v5;\n
    if (v9 > 0)\n
    {\n
        a6 |= 4;\n
        if (v2 < v9)\n
            v4 = v9 - v2;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a6 & 4))\n
        {\n
            v7 = v8(a0, 45, v7);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v10 = v4;\n
            v4 = v10 - 1;\n
            if (v10 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                v7 = v8(a0, 32, v7);\n
            else\n
                v7 = v8(a0, 48, v7);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v7 = v8(a0, 45, v7);\n
        v3 = 0;\n
    }\n
    for (v0 = v2; v0 > 0; v0 -= 1)\n
    {\n
        v11 = v0 - 1;\n
        v7 = v8(a0, (&v1)[v11], v7, v11);\n
    }\n
    if (!(a6 & 1))\n
        return v7;\n
    while (true)\n
    {\n
        v12 = v4;\n
        v4 = v12 - 1;\n
        if (v12 <= 0)\n
            break;\n
        v7 = v8(a0, 32, v7);\n
    }\n
    return v7;\n
}\n
", "4228813:sub_4086cd": null, "4228816:cgc_printf_float_to_string": "long long cgc_printf_float_to_string(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_10;  // tmp #10\n
    int tmp_12;  // tmp #12\n
    int tmp_11;  // tmp #11\n
    char v0;  // [bp-0x7d]\n
    char v1;  // [bp-0x7c]\n
    char v2;  // [bp-0x7b]\n
    unsigned short v3;  // [bp-0x7a]\n
    char v4;  // [bp-0x77]\n
    unsigned short v5;  // [bp-0x76]\n
    char v6;  // [bp-0x73]\n
    char v7;  // [bp-0x72]\n
    char v8;  // [bp-0x71]\n
    unsigned long long v9;  // [bp-0x70]\n
    unsigned short v10;  // [bp-0x62]\n
    char v11;  // [bp-0x5f]\n
    unsigned short v12;  // [bp-0x5e]\n
    unsigned short v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x5a]\n
    unsigned long v15;  // [bp-0x58]\n
    unsigned short v16;  // [bp-0x4c]\n
    char v17;  // [bp-0x49]\n
    unsigned long v18;  // [bp-0x48], Other Possible Types: unsigned long long\n
    char *v19;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v20;  // [bp-0x2c]\n
    unsigned long v21;  // [bp-0x18]\n
    char *v22;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v24;  // xmm0lq\n
    unsigned long long v25;  // xmm0lq\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rcx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rcx\n
    int v33;  // xmm0\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rcx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rcx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    char *v46;  // rax, Other Possible Types: unsigned long, unsigned int\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rcx\n
    unsigned long v54;  // rcx\n
    unsigned long v56;  // rcx\n
    unsigned long v57;  // rcx\n
    unsigned long v58;  // rcx\n
    unsigned long v59;  // rcx\n
    unsigned long v60;  // rcx\n
    unsigned long v61;  // rcx\n
    unsigned long v62;  // rcx\n
    unsigned int v64;  // eax\n
    unsigned long v65;  // rcx\n
\n
    v21 = v24;\n
    v20 = a2;\n
    v19 = 0;\n
    cgc_pow();\n
    v18 = 0x4024000000000000;\n
    v25 = v21;\n
    if ((((CmpF(v25, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v26 = v19;\n
        v19 = v26 + 1;\n
        *((a1 + v26)) = 48;\n
        v27 = v19;\n
        v19 = v27 + 1;\n
        *((a1 + v27)) = 46;\n
        for (v17 = 0; v17 < a0; v17 += 1)\n
        {\n
            v29 = v19;\n
            v19 = v29 + 1;\n
            *((a1 + v29)) = 48;\n
        }\n
        if ((v20 & 16))\n
        {\n
            v34 = v19;\n
            v19 = v34 + 1;\n
            *((a1 + v34)) = 101;\n
            v35 = v19;\n
            v19 = v35 + 1;\n
            *((a1 + v35)) = 43;\n
            v36 = v19;\n
            v19 = v36 + 1;\n
            *((a1 + v36)) = 48;\n
            v37 = v19;\n
            v19 = v37 + 1;\n
            *((a1 + v37)) = 48;\n
            v38 = v19;\n
            v19 = v38 + 1;\n
            *((a1 + v38)) = 48;\n
        }\n
        v22 = v19;\n
        return v22;\n
    }\n
    if ((((CmpF(v21, v21) & 69) >> 2) & 1))\n
    {\n
        v30 = v19;\n
        v19 = v30 + 1;\n
        *((a1 + v30)) = 78;\n
        v31 = v19;\n
        v19 = v31 + 1;\n
        *((a1 + v31)) = 97;\n
        v32 = v19;\n
        v19 = v32 + 1;\n
        *((a1 + v32)) = 78;\n
        v22 = v19;\n
        return v22;\n
    }\n
    v33 = (0 CONCAT v21) & 170141183460469231722463931679029329919;\n
    if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v39 = v19;\n
        v19 = v39 + 1;\n
        *((a1 + v39)) = 73;\n
        v40 = v19;\n
        v19 = v40 + 1;\n
        *((a1 + v40)) = 78;\n
        v41 = v19;\n
        v19 = v41 + 1;\n
        *((a1 + v41)) = 70;\n
        v22 = v19;\n
        return v22;\n
    }\n
    if (!(CmpF(v21, 0x4202a05f20000000) & 1))\n
        v20 |= 16;\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) == 1)\n
        v21 = (0 CONCAT v18) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    else\n
        v21 = (0 CONCAT v18 ^ 0x8000000000000000) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    cgc_log10();\n
    v16 = v21;\n
    if ((v20 & 16))\n
    {\n
        v14 = v16 - a0;\n
        if ((((CmpF(0x3ff0000000000000, v21) & 69) | ((CmpF(0x3ff0000000000000, v21) & 69) >> 6)) & 1) == 1)\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        else\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        v18 = v15;\n
    }\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v21 ^= 0x8000000000000000;\n
        v19[a1] = 45;\n
        v19 += 1;\n
    }\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    *(&v33) = v18;\n
    if ((((CmpF(v33, v21) & 69) | ((CmpF(v33, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v43 = v19;\n
        v19 = v43 + 1;\n
        *((a1 + v43)) = 48;\n
        v44 = v19;\n
        v19 = v44 + 1;\n
        *((a1 + v44)) = 46;\n
        v11 = 1;\n
    }\n
    else if (v16 < 0)\n
    {\n
        *(&v33) = v21;\n
        if ((((CmpF(v33, v18) & 69) | ((CmpF(v33, v18) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
        {\n
            v45 = v19;\n
            v19 = v45 + 1;\n
            *((a1 + v45)) = 48;\n
            v46 = a1;\n
            v47 = v19;\n
            v19 = v47 + 1;\n
            *((a1 + v47)) = 46;\n
            v10 = v16;\n
            while (true)\n
            {\n
                *(&v46) = v10 + 1;\n
                v10 = v46;\n
                if (v46 >= 0)\n
                    break;\n
                v46 = a1;\n
                v48 = v19;\n
                v19 = v48 + 1;\n
                *((a1 + v48)) = 48;\n
                v12 += 1;\n
            }\n
            v11 = 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v16 < 0)\n
        {\n
            *(&v33) = v21;\n
            v1 = !((CmpF(v33, v18) & 69 | (CmpF(v33, v18) & 69) >> 6) & 1);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        cgc_pow();\n
        v9 = 0x4024000000000000;\n
        *(&v33) = v9;\n
        if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) == 1)\n
        {\n
LABEL_408d61:\n
            if ((((CmpF(v16, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                *(&v33) = v21;\n
                if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
                {\n
                    v56 = v19;\n
                    v19 = v56 + 1;\n
                    *((a1 + v56)) = 46;\n
                    v11 = 1;\n
                }\n
            }\n
            if (v12 >= a0)\n
                break;\n
            v16 -= 1;\n
        }\n
        else\n
        {\n
            v33 = (0 CONCAT v9) & 170141183460469231722463931679029329919;\n
            if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x7ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                goto LABEL_408d61;\n
            tmp_10 = DivV(tmp_12, tmp_11);\n
            v33 = tmp_10;\n
            cgc_floor();\n
            v8 = v33;\n
            v21 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v9) + (0 CONCAT v21);\n
            if ((v20 & 16) && !v11)\n
            {\n
                if (!v13)\n
                    v13 = v16;\n
                if (!v8)\n
                {\n
                    v13 -= 1;\n
                }\n
                else\n
                {\n
                    v52 = v19;\n
                    v19 = v52 + 1;\n
                    *((a1 + v52)) = v8 + 48;\n
                    v53 = v19;\n
                    v19 = v53 + 1;\n
                    *((a1 + v53)) = 46;\n
                    v11 = 1;\n
                }\n
                goto LABEL_408d57;\n
            }\n
            if ((((CmpF(0, v16) & 69) | ((CmpF(0, v16) & 69) >> 6)) & 1) != 1 && !v11)\n
            {\n
                v50 = v19;\n
                v19 = v50 + 1;\n
                *((a1 + v50)) = 48;\n
                v51 = v19;\n
                v19 = v51 + 1;\n
                *((a1 + v51)) = 46;\n
                v11 = 1;\n
            }\n
            v54 = v19;\n
            v19 = v54 + 1;\n
            *((a1 + v54)) = v8 + 48;\n
            if (v11)\n
                v12 += 1;\n
LABEL_408d57:\n
            goto LABEL_408d61;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v11)\n
            v0 = v12 < a0;\n
        if (!(v0 & 1))\n
            break;\n
        v57 = v19;\n
        v19 = v57 + 1;\n
        *((a1 + v57)) = 48;\n
        v12 += 1;\n
    }\n
    if ((v20 & 16))\n
    {\n
        v58 = v19;\n
        v19 = v58 + 1;\n
        *((a1 + v58)) = 101;\n
        if (v13 >= 0)\n
        {\n
            v60 = v19;\n
            v19 = v60 + 1;\n
            *((a1 + v60)) = 43;\n
        }\n
        else\n
        {\n
            v13 = -(v13);\n
            v59 = v19;\n
            v19 = v59 + 1;\n
            *((a1 + v59)) = 45;\n
        }\n
        if (v13)\n
        {\n
            v6 = 0;\n
            cgc_log10();\n
            v5 = v13;\n
            for (v4 = v5; v4 < 2; v4 += 1)\n
            {\n
                v62 = v19;\n
                v19 = v62 + 1;\n
                *((a1 + v62)) = 48;\n
                v6 += 1;\n
            }\n
            while (true)\n
            {\n
                tmp_10 = v6;\n
                v6 += 1;\n
                if (tmp_10 >= 3)\n
                    break;\n
                cgc_pow();\n
                v3 = 0;\n
                v64 = v13;\n
                v2 = (v64 >> 31 CONCAT v64) /m v3;\n
                v65 = v19;\n
                v19 = v65 + 1;\n
                *((a1 + v65)) = v2 + 48;\n
                v13 -= (v3 * v2);\n
                v5 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            for (v7 = 0; v7 < 3; v7 += 1)\n
            {\n
                v61 = v19;\n
                v19 = v61 + 1;\n
                *((a1 + v61)) = 48;\n
            }\n
        }\n
    }\n
    v22 = v19;\n
    return v22;\n
}\n
", "4231162:sub_408ffa": null, "4231168:cgc_printf_helper_float": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_printf_helper_float(unsigned long long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    struct_1 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x49]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned long v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_0 **v9;  // [bp-0x18]\n
    unsigned long v11;  // xmm0lq\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rax\n
\n
    v9 = a1;\n
    v8 = a2;\n
    v7 = v11;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
    {\n
        v7 ^= 0x8000000000000000;\n
        v3 = 1;\n
        v5 += 1;\n
    }\n
    if (!a4)\n
        v2 = cgc_printf_float_to_string(6, &v1, a5);\n
    else\n
        v2 = cgc_printf_float_to_string(a4, &v1, a5);\n
    v5 = v2 + v5;\n
    if (v6 > 0 && v5 < v6)\n
        v4 = v6 - v5;\n
    if (!(a5 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a5 & 4))\n
        {\n
            v8 = v9(a0, 45, v8);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v12 = v4;\n
            v4 = v12 - 1;\n
            if (v12 <= 0)\n
                break;\n
            if ((a5 & 4))\n
                v8 = v9(a0, 48, v8);\n
            else\n
                v8 = v9(a0, 32, v8);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v8 = v9(a0, 45, v8);\n
        v3 = 0;\n
    }\n
    for (v0 = 0; v0 < v2; v0 += 1)\n
    {\n
        v13 = v0;\n
        v8 = v9(a0, (&v1)[v13], v8, v13);\n
    }\n
    if (!(a5 & 1))\n
        return v8;\n
    while (true)\n
    {\n
        v14 = v4;\n
        v4 = v14 - 1;\n
        if (v14 <= 0)\n
            break;\n
        v8 = v9(a0, 32, v8);\n
    }\n
    return v8;\n
}\n
", "4231815:sub_409287": null, "4231824:cgc_printf_helper_string": "long long cgc_printf_helper_string(unsigned long long a0, struct struct_0 **a1, unsigned long a2, char *a3, unsigned long a4, unsigned long a5, unsigned int v6)\n
{\n
    void* v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct struct_0 **v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x10]\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx\n
    unsigned long long v11;  // rax\n
\n
    v4 = a1;\n
    v3 = a2;\n
    if (!a5 && !a4)\n
    {\n
        for (v2 = a3; *(v2); v2 += 1)\n
        {\n
            v7 = v2;\n
            v3 = v4(a0, *(v7), v3, v7);\n
        }\n
        v5 = v3;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v2);\n
    v0 = 0;\n
    if (a5 > 0 && v1 > a5)\n
        v1 = a5;\n
    if (a4 > 0 && v1 < a4)\n
        v0 = a4 - v1;\n
    if (!(v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v8 = v0;\n
            v0 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(v6 & 4))\n
                v3 = v4(a0, 32, v3);\n
            else\n
                v3 = v4(a0, 48, v3);\n
        }\n
    }\n
    while (true)\n
    {\n
        v9 = v1;\n
        v1 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v10 = v2;\n
        v2 = v10 + 1;\n
        v3 = v4(a0, *(v10), v3, v10);\n
    }\n
    if ((v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v11 = v0;\n
            v0 = v11 - 1;\n
            if (v11 <= 0)\n
                break;\n
            v3 = v4(a0, 32, v3);\n
        }\n
    }\n
    v5 = v3;\n
    return v5;\n
}\n
", "4232358:sub_4094a6": null, "4232368:cgc_rand": "long long cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4232386:sub_4094c2": null, "4232400:cgc_srand": "long long cgc_srand(unsigned long a0)\n
{\n
    return cgc_seed_prng(a0);\n
}\n
", "4232425:sub_4094e9": null, "4232432:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    for (v0 = 0; cgc_isspace(*(v2)); v2 += 1);\n
    if (!*(v2))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v2) == 45)\n
    {\n
        v0 = 1;\n
        v2 += 1;\n
    }\n
    for (; cgc_isdigit(*(v2)); v1 = v1 * 10 + *(v5) - 48)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    if (v0)\n
    {\n
        v3 = -(v1);\n
        return v3;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4232658:sub_4095d2": null, "4232672:cgc_atof": "double cgc_atof(long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    for (v1 = a0; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == 46)\n
        {\n
            *(v1) = 0;\n
            v1 += 1;\n
            break;\n
        }\n
    }\n
    v4 = cgc_atoi(v2);\n
    if (!*(v1))\n
        return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
    v3 = cgc_atoi(v1);\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1)\n
            v0 = cgc_isdigit(*(v1));\n
        if (!(v0 & 1))\n
            break;\n
        tmp_12 = DivV(tmp_14, tmp_13);\n
        *(&v3) = tmp_12;\n
        v1 += 1;\n
    }\n
    return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
}\n
", "4232946:sub_4096f2": null, "4232960:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    for (v0 = v2; *(v1); *(v5) = tmp_19)\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    *(v2) = 0;\n
    return v0;\n
}\n
", "4233048:sub_409758": null, "4233056:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!*((a1 + v0)))\n
            break;\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = 0;\n
    }\n
    return a0;\n
}\n
", "4233213:sub_4097fd": null, "4233216:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    for (v0 = v3; v1 >= 4; v1 -= 4)\n
    {\n
        *(&v3) = *(v2);\n
        v3 += 4;\n
        v2 += 4;\n
    }\n
    for (; v1 > 0; v1 -= 1)\n
    {\n
        *(v3) = *(v2);\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return v0;\n
}\n
", "4233379:sub_4098a3": null, "4233392:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned long v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x40], Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v6) = a0;\n
    v5 = a2;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v6)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    if (v5 >= 16)\n
        v5 = 16;\n
    for (; cgc_isspace(*(v6)); v6 += 1);\n
    if (*(v6) == 45)\n
    {\n
        v3 = 1;\n
        *(&v6) = v6 + 1;\n
    }\n
    else if (*(v6) == 43)\n
    {\n
        *(&v6) = v6 + 1;\n
    }\n
    if (v5 != 16 && !(!v5))\n
        goto LABEL_4099cd;\n
    if (*(v6) != 48)\n
    {\n
LABEL_4099cd:\n
        if (v5 && !(v5 == 2))\n
            goto LABEL_409a26;\n
        if (*(v6) == 48)\n
        {\n
            if (*((v6 + 1)) != 98 && !(*((v6 + 1)) == 66))\n
                goto LABEL_409a26;\n
            *(&v6) = v6 + 2;\n
            v5 = 2;\n
        }\n
LABEL_409a26:\n
    }\n
    else\n
    {\n
        if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
            goto LABEL_4099cd;\n
        *(&v6) = v6 + 2;\n
        v5 = 16;\n
    }\n
    if (!v5)\n
    {\n
        if (*(v6) == 48)\n
            v5 = 8;\n
        else\n
            v5 = 10;\n
    }\n
    v2 = 0;\n
    if (v3)\n
        v2 = -0x80000000;\n
    else\n
        v2 = 2147483647;\n
    v1 = (0 CONCAT v2) /m v5 >> 64;\n
    v2 = (0 CONCAT v2) /m v5;\n
    while (*(v6))\n
    {\n
        v0 = *(v6);\n
        if (cgc_isdigit(v0))\n
        {\n
            v0 -= 48;\n
        }\n
        else\n
        {\n
            if (!cgc_isalpha(v0))\n
                break;\n
            if (cgc_isupper(v0))\n
                v0 -= 55;\n
            else\n
                v0 -= 87;\n
        }\n
        if (v0 >= v5)\n
            break;\n
        if (v4 > v2)\n
        {\n
LABEL_409b62:\n
            break;\n
        }\n
        else if (v4 != v2)\n
        {\n
LABEL_409b67:\n
            v4 *= v5;\n
            v4 = v0 + v4;\n
            *(&v6) = v6 + 1;\n
        }\n
        else\n
        {\n
            if (v0 <= v1)\n
                goto LABEL_409b67;\n
            goto LABEL_409b62;\n
        }\n
    }\n
    if (a1)\n
        *(a1) = v6;\n
    if (v3)\n
    {\n
        v7 = -(v4);\n
        return v7;\n
    }\n
    v7 = v4;\n
    return v7;\n
}\n
", "4234194:sub_409bd2": null, "4234208:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4234274:sub_409c22": null, "4234288:cgc_bzero": "long long cgc_bzero(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // rcx\n
\n
    for (v0 = a1; v0; v2[1 + a0] = 0)\n
    {\n
        v2 = v0;\n
        v0 = v2 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4234354:sub_409c72": null, "4234368:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
\n
    v3 = a0;\n
    v2 = a2;\n
    v1 = v3;\n
    for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v2 >= 4; v2 -= 4)\n
    {\n
        *(&v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; v2 > 0; v2 -= 1)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = a1;\n
    }\n
    return v1;\n
}\n
", "4234539:sub_409d2b": null, "4234544:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = v1;\n
        if (v0 >= cgc_strlen(a0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a0[v1] != a1)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4234698:sub_409dca": null, "4234704:cgc_strtok": "extern struct_0 *cgc_StrtokNext;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!a1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v4)\n
    {\n
        if (cgc_StrtokNext)\n
        {\n
            v4 = cgc_StrtokNext;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a1, *(v4)))\n
            v0 = *(v4);\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 1;\n
    }\n
    if (!*(v4))\n
    {\n
        cgc_StrtokNext = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v4);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= v1)\n
        {\n
            cgc_StrtokNext = 0;\n
            v5 = v4;\n
            return v5;\n
        }\n
        if (cgc_strchr(a1, *((v4 + v3))))\n
            break;\n
        v3 += 1;\n
    }\n
    *((v4 + v3)) = 0;\n
    for (v2 = v3 + 1; v2 < v1; v2 += 1)\n
    {\n
        if (cgc_strchr(a1, *((v4 + v2))))\n
        {\n
            *((v4 + v2)) = 0;\n
        }\n
        else\n
        {\n
            cgc_StrtokNext = v4 + v2;\n
            v5 = v4;\n
            return v5;\n
        }\n
    }\n
    if (v2 == v1)\n
        cgc_StrtokNext = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4235198:sub_409fbe": null, "4235200:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x21]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    if (v2 && !v1)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!v2 && v1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (!v2 && !v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(v1))\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        else if (*(v2) >= *(v1))\n
        {\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    if (*(v2) && !*(v1))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!*(v2) && *(v1))\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4235569:sub_40a131": null, "4235584:cgc_strcat": "long long cgc_strcat(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v2 = cgc_strlen(a0);\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = v1;\n
            if (v0 >= cgc_strlen(a1))\n
                break;\n
            a0[v2] = a1[v1];\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        a0[v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4235758:sub_40a1ee": null, "4235760:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x32]\n
    char v1;  // [bp-0x31]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = *((a0 + v2));\n
        v0 = *((a1 + v2));\n
        if (v1 < v0)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (v1 <= v0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4235921:sub_40a291": null, "4235936:_Z8RecvDataiPhj": "long long RecvData(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    if (!a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a2)\n
    {\n
        for (v2 = 0; v2 < a2; v2 += *(&v1))\n
        {\n
            v0 = a2 - v2;\n
            if (cgc_receive(a0, a1, a2, v6))\n
                cgc__terminate(a0);\n
            if (!*(&v1))\n
                cgc__terminate(a0);\n
        }\n
        v4 = v2;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4236127:sub_40a35f": null, "4236128:_Z8SendDataiPhj": "long long SendData(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    if (!a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a2)\n
    {\n
        for (v2 = 0; v2 < a2; v2 += *(&v1))\n
        {\n
            v0 = a2 - v2;\n
            if (cgc_transmit(a0, a1, a2, v6))\n
                cgc__terminate(a0);\n
            if (!*(&v1))\n
                cgc__terminate(a0);\n
        }\n
        v4 = v2;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4236319:sub_40a41f": null, "4236320:_ZN8CFlashFSC1Ev": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[136];\n
    unsigned int field_290;\n
} struct_0;\n
\n
long long CFlashFS::__ctor__(struct_0 *a0)\n
{\n
    a0->field_200 = 0;\n
    a0->field_290 = 0;\n
    return a0;\n
}\n
", "4236355:sub_40a443": null, "4236368:_ZN8CFlashFSD2Ev": "long long CFlashFS::__base_dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4236378:sub_40a45a": null, "4236384:_ZN8CFlashFS4InitEP9CNORFlash": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[128];\n
    unsigned short field_288;\n
    char padding_28a[6];\n
    unsigned int field_290;\n
    char padding_294[512];\n
    unsigned short field_494;\n
    unsigned short field_496;\n
    unsigned short field_498;\n
    unsigned short field_49a;\n
    unsigned short field_49c;\n
    unsigned short field_49e;\n
    unsigned short field_4a0;\n
    unsigned short field_4a2;\n
} struct_0;\n
\n
long long CFlashFS::Init(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned int v2;  // [bp-0x60]\n
    unsigned int v3;  // [bp-0x5c]\n
    struct_0 *v4;  // [bp-0x58]\n
    char v5;  // [bp-0x49]\n
    unsigned int v6;  // [bp-0x48]\n
    unsigned short v7;  // [bp-0x42]\n
    char v8;  // [bp-0x40]\n
    char v9;  // [bp-0x3f]\n
    unsigned int v10;  // [bp-0x38]\n
    unsigned int v11;  // [bp-0x34]\n
    char v12;  // [bp-0x30]\n
    unsigned short v13;  // [bp-0x2f]\n
    unsigned short v14;  // [bp-0x2d]\n
    unsigned int v15;  // [bp-0x28]\n
    char v16;  // [bp-0x21]\n
    char v17;  // [bp-0x9]\n
    unsigned short v21;  // ax\n
    struct_0 *v24;  // rax\n
    unsigned long long v25;  // rdx\n
    unsigned long long v26;  // rcx\n
    struct_0 *v27;  // rcx\n
    struct_0 *v28;  // rax\n
    struct_0 *v29;  // rax\n
\n
    v4 = a0;\n
    v16 = 0;\n
    if (!a1)\n
    {\n
        v17 = 0;\n
        return v17 & 1;\n
    }\n
    else if (CNORFlash::GetSectorCount const(a1) >= 16)\n
    {\n
        a0->field_200 = a1;\n
        for (v15 = 0; v15 < 16; v15 += 1)\n
        {\n
            *(&a0->padding_208[4 + 8 * v15]) = 0;\n
            *(&a0->padding_208[8 * v15]) = 65535;\n
        }\n
        a0->field_288 = 0;\n
        if (CNORFlash::ReadData(a0->field_200, 0, &v12, 5) != 5)\n
        {\n
            v17 = 0;\n
            return v17 & 1;\n
        }\n
        if (v12 == 255)\n
        {\n
            v12 = 193;\n
            v13 = 0;\n
            v14 = 5;\n
            if (CNORFlash::WriteData(a0->field_200, 0, &v12, 5) != 5)\n
            {\n
                v17 = 0;\n
                return v17 & 1;\n
            }\n
            v16 = 1;\n
        }\n
        cgc_memcpy(&a0->padding_28a, &v12, 5);\n
        v0 = v13;\n
        a0->field_290 = CNORFlash::GetBlockSize const(a0->field_200) * v0 + v14;\n
        v1 = CNORFlash::GetBlockSize const(a0->field_200);\n
        v21 = (0 CONCAT CNORFlash::GetBlocksPerSector const(v4->field_200) * v1 - a0->field_290) /m 3;\n
        a0->field_498 = v21;\n
        v2 = CNORFlash::GetBlockSize const(a0->field_200);\n
        a0->field_49a = CNORFlash::GetBlocksPerSector const(a0->field_200) * v2 * 3 >> 3;\n
        a0->field_49e = CNORFlash::GetSectorCount const(a0->field_200) - 4;\n
        v3 = CNORFlash::GetBlocksPerSector const(a0->field_200);\n
        v24 = a0;\n
        v25 = CNORFlash::GetSectorCount const(a0->field_200) - 4;\n
        v26 = v25 * v3;\n
        a0->field_4a2 = v26;\n
        CNORFlash::SectorErase(v24->field_200, v24->field_49e, v25, v26);\n
        a0->field_494 = 0;\n
        a0->field_496 = 0;\n
        a0->field_49c = 0;\n
        for (v11 = 0; v11 < 128; v11 += 1)\n
        {\n
            *(&a0->padding_294[4 * v11]) = 65535;\n
            *(&a0->padding_294[2 + 4 * v11]) = 65535;\n
        }\n
        v10 = a0->field_290;\n
        while (true)\n
        {\n
            if (CNORFlash::ReadData(a0->field_200, v10, &v8, 3) != 3)\n
            {\n
                v17 = 0;\n
                return v17 & 1;\n
            }\n
            if (v8 == 255)\n
                break;\n
            if (v8 != 1)\n
            {\n
                if (v8 != 2)\n
                {\n
                    v17 = 0;\n
                    return v17 & 1;\n
                }\n
                v27 = a0;\n
                *(&v27->padding_294[2 + 4 * v27->field_494]) = *(&v9);\n
                *(&v27->padding_294[4 * v27->field_494]) = v27->field_496;\n
                v27->field_494 = v27->field_494 + 1;\n
                if (*(&v9) > a0->field_49c)\n
                    a0->field_49c = *(&v9);\n
                if (a0->field_494 >= 128)\n
                {\n
                    v17 = 0;\n
                    return v17 & 1;\n
                }\n
            }\n
            v28 = a0;\n
            v28->field_496 = v28->field_496 + 1;\n
        }\n
        if ((v16 & 1))\n
        {\n
            a0->field_4a0 = 0;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            while (true)\n
            {\n
                if (v7 >= a0->field_4a2)\n
                {\n
                    v17 = 0;\n
                    return v17 & 1;\n
                }\n
                v6 = CFlashFS::GetAddressForDataID(a0, v7);\n
                if (CNORFlash::ReadData(a0->field_200, v6, &v5, 1) != 1)\n
                {\n
                    v17 = 0;\n
                    return v17 & 1;\n
                }\n
                if (v5 == 255)\n
                    break;\n
                v7 += 1;\n
                if (false)\n
                    break;\n
            }\n
            a0->field_4a0 = v7;\n
        }\n
        v29 = a0;\n
        v29->field_49c = v29->field_49c + 1;\n
        v17 = 1;\n
        return v17 & 1;\n
    }\n
    else\n
    {\n
        v17 = 0;\n
        return v17 & 1;\n
    }\n
}\n
", "4237602:sub_40a922": null, "4237616:_ZN8CFlashFS19GetAddressForDataIDEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
} struct_0;\n
\n
long long CFlashFS::GetAddressForDataID(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = CFlashFS::GetAddressForSector(a0, 4);\n
    return v0 + a1 * CNORFlash::GetBlockSize const(a0->field_200);\n
}\n
", "4237694:sub_40a97e": null, "4237696:_ZN8CFlashFS9WriteFileEiPhj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
} struct_0;\n
\n
long long CFlashFS::WriteFile(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x10c]\n
    struct_0 *v1;  // [bp-0x108]\n
    unsigned int v2;  // [bp-0x100]\n
    char v3;  // [bp-0xf9]\n
    unsigned int v4;  // [bp-0xf8]\n
    unsigned short v5;  // [bp-0xf2]\n
    unsigned int v6;  // [bp-0xf0]\n
    unsigned short v7;  // [bp-0xea]\n
    char v8;  // [bp-0xe8]\n
    unsigned short v9;  // [bp-0xe7]\n
    unsigned int v10;  // [bp-0xe5]\n
    char v11;  // [bp-0xe1]\n
    unsigned int v12;  // [bp-0xdc]\n
    char v13;  // [bp-0xd8]\n
    char v14;  // [bp-0xd5]\n
    unsigned int v15;  // [bp-0xd0]\n
    unsigned int v16;  // [bp-0xcc]\n
    char v17;  // [bp-0xc8]\n
    unsigned short v18;  // [bp-0xc5], Other Possible Types: char\n
    unsigned int v19;  // [bp-0xbc]\n
    char v20;  // [bp-0xb8]\n
    unsigned short v21;  // [bp-0xb7]\n
    unsigned short v22;  // [bp-0xb5]\n
    unsigned int v23;  // [bp-0xac]\n
    char v24;  // [bp-0xa8]\n
    unsigned short v25;  // [bp-0xa7]\n
    unsigned short v26;  // [bp-0xa5]\n
    char v27;  // [bp-0xa0]\n
    char v28;  // [bp-0x9f]\n
    char v29;  // [bp-0x9d]\n
    unsigned int v30;  // [bp-0x98]\n
    unsigned int v31;  // [bp-0x94]\n
    unsigned short v32;  // [bp-0x8e]\n
    unsigned int v33;  // [bp-0x8c]\n
    unsigned int v34;  // [bp-0x88]\n
    unsigned int v35;  // [bp-0x84]\n
    unsigned int v36;  // [bp-0x80]\n
    unsigned int v37;  // [bp-0x7c]\n
    char v38;  // [bp-0x78]\n
    char v39;  // [bp-0x75]\n
    unsigned int v40;  // [bp-0x70]\n
    unsigned int v41;  // [bp-0x6c]\n
    unsigned short v42;  // [bp-0x68]\n
    unsigned short v43;  // [bp-0x66]\n
    unsigned short v44;  // [bp-0x64]\n
    unsigned short v45;  // [bp-0x62]\n
    unsigned int v46;  // [bp-0x60]\n
    unsigned int v47;  // [bp-0x5c]\n
    unsigned int v48;  // [bp-0x58]\n
    unsigned int v49;  // [bp-0x54]\n
    unsigned short v50;  // [bp-0x4e]\n
    unsigned int v51;  // [bp-0x4c]\n
    char v52;  // [bp-0x48]\n
    char v53;  // [bp-0x47]\n
    char v54;  // [bp-0x45]\n
    char v55;  // [bp-0x41]\n
    unsigned short v56;  // [bp-0x3a]\n
    char v57;  // [bp-0x38]\n
    char v58;  // [bp-0x34]\n
    unsigned long v59;  // [bp-0x28]\n
    struct_0 *v60;  // [bp-0x18]\n
    unsigned int v61;  // [bp-0xc]\n
    struct_0 *v63;  // rdx\n
    struct_0 *v64;  // rdx\n
    unsigned long long v67;  // rdx\n
    struct_0 *v69;  // rdx\n
    struct_0 *v70;  // rax\n
    struct_0 *v71;  // rax\n
\n
    v60 = a0;\n
    v59 = a2;\n
    v1 = v60;\n
    if (!(CFlashFS::FindFileDescriptorData(v1, a1, &v57) & 1))\n
    {\n
        v61 = -1;\n
        return v61;\n
    }\n
    v56 = *(&v57);\n
    v51 = CFlashFS::GetAddressForHeaderID(v1, v56);\n
    if (CNORFlash::ReadData(v1->field_200, v51, &v52, 8) != 8)\n
    {\n
        v61 = -1;\n
        return v61;\n
    }\n
    v50 = *(&v53);\n
    v49 = *(&v58);\n
    if (v49 > *(&v54))\n
        v49 = *(&v54);\n
    v48 = *(&v54);\n
    v47 = 0;\n
    v46 = CNORFlash::GetBlockSize const(v1->field_200) - 5;\n
    v45 = 65535;\n
    v44 = v50;\n
    v43 = v50;\n
    for (v42 = 0; v47 < v49; v47 = v40 + v47)\n
    {\n
        v41 = v49 - v47;\n
        v40 = 0;\n
        v42 = 5;\n
        if (!v47)\n
        {\n
            v42 += v55;\n
            v40 = v46 - v55;\n
        }\n
        else\n
        {\n
            v40 = v46;\n
        }\n
        if (v40 <= v41)\n
        {\n
            v37 = CFlashFS::GetAddressForDataID(v1, v43);\n
            if (CNORFlash::ReadData(v1->field_200, v37, &v38, 5) != 5)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
            else if (v38 == 2)\n
            {\n
                v45 = v43;\n
                v43 = *(&v39);\n
                v42 = 5;\n
            }\n
            else\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
        }\n
        else\n
        {\n
            v42 += v41;\n
            break;\n
        }\n
    }\n
    if (!v49)\n
        v42 = v55 + 5;\n
    v36 = a3;\n
    for (v35 = 0; v36 > 0; v36 -= v33)\n
    {\n
        v34 = 0;\n
        v33 = v36;\n
        v32 = 65535;\n
        v0 = v42 + v33;\n
        if (v0 > CNORFlash::GetBlockSize const(v1->field_200))\n
            v33 = CNORFlash::GetBlockSize const(v1->field_200) - v42;\n
        if (v49 >= v48)\n
        {\n
            if (v43 != 65535)\n
            {\n
                v15 = CFlashFS::GetAddressForDataID(v1, v43);\n
                if (CNORFlash::ReadData(v1->field_200, v15, &v13, 5) != 5)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                v32 = *(&v14);\n
            }\n
            else\n
            {\n
                v43 = CFlashFS::GetNextDataBlockID(v1);\n
                v20 = 2;\n
                v22 = 65535;\n
                v21 = v45;\n
                v32 = 65535;\n
                v19 = CFlashFS::GetAddressForDataID(v1, v43);\n
                if (CNORFlash::WriteData(v1->field_200, v19, &v20, 5) != 5)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                v16 = CFlashFS::GetAddressForDataID(v1, v45);\n
                if (CNORFlash::ReadData(v1->field_200, v16, &v17, 5) != 5)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                else if (*(&v18) != 65535)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                else\n
                {\n
                    v18 = v43;\n
                    if (CNORFlash::WriteData(v1->field_200, v16, &v17, 5) != 5)\n
                    {\n
                        v61 = -1;\n
                        return v61;\n
                    }\n
                }\n
            }\n
            v12 = CFlashFS::GetAddressForDataID(v1, v43);\n
            if (CNORFlash::WriteData(v1->field_200, v12 + v42, v59 + v35, v33) != v33)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
        }\n
        else\n
        {\n
            v31 = CNORFlash::GetBlockSize const(v1->field_200);\n
            v30 = CFlashFS::GetAddressForDataID(v1, v43);\n
            if (CNORFlash::ReadData(v1->field_200, v30, &v27, 5) != 5)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
            v63 = v1;\n
            v32 = *(&v29);\n
            v24 = 2;\n
            v25 = *(&v28);\n
            v26 = *(&v29);\n
            if (CNORFlash::ReadData(v63->field_200, v30 + 5, v63, v42 - 5) != v42 - 5)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
            cgc_memcpy(&v1->padding_0[5 + v42], v59 + v35, v33);\n
            if (v42 + v33 < v31)\n
            {\n
                v64 = v1;\n
                if (CNORFlash::ReadData(v64->field_200, v30 + v42 + v33, &v64->padding_0[5 + v42 + v33], v31 - (v42 + v33)) != v31 - (v42 + v33))\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
            }\n
            v67 = v43;\n
            v23 = CNORFlash::GetBlocksPerSector const(v1->field_200) * 4 + v67;\n
            CNORFlash::BlockErase(v1->field_200, v23, v67, v23);\n
            if (CNORFlash::WriteData(v1->field_200, v30, &v24, 5) != 5)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
            v69 = v1;\n
            if (CNORFlash::WriteData(v69->field_200, v30 + 5, v69, v31 - 5) != v31 - 5)\n
            {\n
                v61 = -1;\n
                return v61;\n
            }\n
        }\n
        v45 = v43;\n
        v43 = v32;\n
        v42 = 5;\n
        v49 = v33 + v49;\n
        v35 = v33 + v35;\n
    }\n
    if (v49 > v48)\n
    {\n
        v8 = 2;\n
        v9 = *(&v53);\n
        v10 = v49;\n
        v11 = v55;\n
        v52 = 1;\n
        if (CNORFlash::WriteData(v1->field_200, v51, &v52, 8) != 8)\n
        {\n
            v61 = -1;\n
            return v61;\n
        }\n
        v7 = CFlashFS::GetNewObjHeaderID(v1);\n
        v6 = 0;\n
        while (true)\n
        {\n
            if (v6 >= 128)\n
            {\n
LABEL_40b26d:\n
                if (v6 == 128)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                v6 = 0;\n
                while (v6 < 16)\n
                {\n
                    if (*(&v1[1].padding_0[8 * v6]) == v56)\n
                        *(&v1[1].padding_0[8 * v6]) = v7;\n
                    v6 += 1;\n
                    goto LABEL_40b2f6;\n
                }\n
            }\n
            else if (*(&v1[1].padding_0[142 + 4 * v6]) != v56)\n
            {\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                v70 = v1;\n
                v5 = CFlashFS::GetNewFileTableID(v1);\n
                v4 = CFlashFS::GetAddressForFileTableID(v70, *(&v70[1].padding_0[140 + 4 * v6]));\n
                v3 = 1;\n
                if (CNORFlash::WriteData(v1->field_200, v4, &v3, 1) != 1)\n
                {\n
                    v61 = -1;\n
                    return v61;\n
                }\n
                v71 = v1;\n
                *(&v71[1].padding_0[142 + 4 * v6]) = v7;\n
                *(&v71[1].padding_0[140 + 4 * v6]) = v5;\n
                goto LABEL_40b26d;\n
            }\n
        }\n
LABEL_40b2f6:\n
        v2 = CFlashFS::GetAddressForHeaderID(v1, v7);\n
        if (CNORFlash::WriteData(v1->field_200, v2, &v8, 8) != 8)\n
        {\n
            v61 = -1;\n
            return v61;\n
        }\n
    }\n
    *(&v1[1].padding_0[4 + 8 * a1]) = v49;\n
    v61 = v35;\n
    return v61;\n
}\n
", "4240250:sub_40b37a": null, "4240256:_ZN8CFlashFS22FindFileDescriptorDataEsPNS_21FILE_DESCRIPTOR_TABLEE": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[2];\n
    unsigned int field_4;\n
} struct_0;\n
\n
long long CFlashFS::FindFileDescriptorData(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (a1 >= 0 && a1 < 16)\n
    {\n
        if (*((a0 + (a1 << 3) + 520)) != 65535)\n
        {\n
            a2->field_0 = *((a0 + a1 * 8 + 520));\n
            a2->field_4 = *((a0 + a1 * 8 + 524));\n
            v0 = 1;\n
            return v0 & 1;\n
        }\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    v0 = 0;\n
    return v0 & 1;\n
}\n
", "4240412:sub_40b41c": null, "4240416:_ZN8CFlashFS21GetAddressForHeaderIDEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
} struct_0;\n
\n
long long CFlashFS::GetAddressForHeaderID(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = CNORFlash::GetBlockSize const(a0->field_200);\n
    return CNORFlash::GetBlocksPerSector const(a0->field_200) * v0 + a1 * 8;\n
}\n
", "4240503:sub_40b477": null, "4240512:_ZN8CFlashFS18GetNextDataBlockIDEv": "typedef struct struct_0 {\n
    char padding_0[1184];\n
    unsigned short field_4a0;\n
} struct_0;\n
\n
long long CFlashFS::GetNextDataBlockID(unsigned short a0[594])\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x12]\n
    unsigned short v3;  // ax\n
    struct_0 *v4;  // rcx\n
    unsigned short v5;  // ax\n
\n
    v3 = a0[592];\n
    a0[592] = v3 + 1;\n
    v1 = v3;\n
    v4 = a0[593];\n
    if (v1 >= v4)\n
        CFlashFS::CleanDataBlocks(*(&v0));\n
    v5 = v4->field_4a0;\n
    v4->field_4a0 = v5 + 1;\n
    v1 = v5;\n
    return v1;\n
}\n
", "4240624:_ZN8CFlashFS17GetNewObjHeaderIDEv": "long long CFlashFS::GetNewObjHeaderID(unsigned short a0[591])\n
{\n
    unsigned short v0;  // [bp-0x1a]\n
    unsigned short v1;  // [bp-0xa]\n
    unsigned short v3;  // ax\n
\n
    if (a0[590] >= a0[589])\n
    {\n
        v1 = 65535;\n
        return v1;\n
    }\n
    v3 = a0[590];\n
    a0[590] = v3 + 1;\n
    v0 = v3;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4240716:sub_40b54c": null, "4240720:_ZN8CFlashFS17GetNewFileTableIDEv": "long long CFlashFS::GetNewFileTableID(unsigned short a0[588])\n
{\n
    unsigned short v0;  // [bp-0x1a]\n
    unsigned short v1;  // [bp-0xa]\n
\n
    if (a0[586] >= 128)\n
    {\n
        v1 = 65535;\n
        return v1;\n
    }\n
    v0 = a0[587];\n
    while (true)\n
    {\n
        if (v0 >= 128)\n
            v0 = 0;\n
        if (a0[331 + 2 * v0] == 65535)\n
            break;\n
        v0 += 1;\n
        if (false)\n
            break;\n
    }\n
    if (a0[587] < 128)\n
        a0[587] = a0[587] + 1;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4240918:sub_40b616": null, "4240928:_ZN8CFlashFS24GetAddressForFileTableIDEt": "typedef struct struct_0 {\n
    char padding_0[656];\n
    unsigned int field_290;\n
} struct_0;\n
\n
long long CFlashFS::GetAddressForFileTableID(struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_290 + a1 * 3;\n
}\n
", "4240966:sub_40b646": null, "4240976:_ZN8CFlashFS8ReadFileEiPhj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
} struct_0;\n
\n
long long CFlashFS::ReadFile(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    char v1;  // [bp-0x98]\n
    char v2;  // [bp-0x95]\n
    unsigned int v3;  // [bp-0x8c]\n
    unsigned int v4;  // [bp-0x88]\n
    unsigned int v5;  // [bp-0x84]\n
    unsigned int v6;  // [bp-0x80]\n
    unsigned int v7;  // [bp-0x7c]\n
    char v8;  // [bp-0x78]\n
    char v9;  // [bp-0x75]\n
    unsigned int v10;  // [bp-0x70]\n
    unsigned int v11;  // [bp-0x6c]\n
    unsigned short v12;  // [bp-0x68]\n
    unsigned short v13;  // [bp-0x66]\n
    unsigned short v14;  // [bp-0x64]\n
    unsigned short v15;  // [bp-0x62]\n
    unsigned int v16;  // [bp-0x60]\n
    unsigned int v17;  // [bp-0x5c]\n
    unsigned int v18;  // [bp-0x58]\n
    unsigned int v19;  // [bp-0x54]\n
    unsigned short v20;  // [bp-0x4e]\n
    unsigned int v21;  // [bp-0x4c]\n
    char v22;  // [bp-0x48]\n
    char v23;  // [bp-0x47]\n
    char v24;  // [bp-0x45]\n
    char v25;  // [bp-0x41]\n
    unsigned short v26;  // [bp-0x3a]\n
    char v27;  // [bp-0x38]\n
    char v28;  // [bp-0x34]\n
    unsigned int v29;  // [bp-0x2c], Other Possible Types: unsigned long\n
    unsigned int v30;  // [bp-0xc]\n
\n
    v29 = a3;\n
    if (!(CFlashFS::FindFileDescriptorData(a0, a1, &v27) & 1))\n
    {\n
        v30 = -1;\n
        return v30;\n
    }\n
    v26 = *(&v27);\n
    v21 = CFlashFS::GetAddressForHeaderID(a0, v26);\n
    if (CNORFlash::ReadData(a0->field_200, v21, &v22, 8) != 8)\n
    {\n
        v30 = -1;\n
        return v30;\n
    }\n
    v20 = *(&v23);\n
    v19 = *(&v28);\n
    if (v19 > *(&v24))\n
    {\n
        v19 = *(&v24);\n
        v30 = -1;\n
        return v30;\n
    }\n
    if (v19 + v29 > *(&v24))\n
        v29 = *(&v24) - v19;\n
    if (!v29)\n
    {\n
        v30 = 0;\n
        return v30;\n
    }\n
    v18 = *(&v24);\n
    v17 = 0;\n
    v16 = CNORFlash::GetBlockSize const(a0->field_200) - 5;\n
    v15 = 65535;\n
    v14 = v20;\n
    v13 = v20;\n
    for (v12 = 0; v17 < v19; v17 = v10 + v17)\n
    {\n
        v11 = v19 - v17;\n
        v10 = 0;\n
        v12 = 5;\n
        if (v17)\n
        {\n
            v10 = v16;\n
        }\n
        else\n
        {\n
            v12 += v25;\n
            v10 = v16 - v25;\n
        }\n
        if (v10 <= v11)\n
        {\n
            v7 = CFlashFS::GetAddressForDataID(a0, v13);\n
            if (CNORFlash::ReadData(a0->field_200, v7, &v8, 5) != 5)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            if (v8 != 2)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            v12 = 5;\n
            v15 = v13;\n
            v13 = *(&v9);\n
        }\n
        else\n
        {\n
            v12 += v11;\n
            break;\n
        }\n
    }\n
    if (!v19)\n
        v12 = v25 + 5;\n
    v6 = v29;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v6 > 0)\n
        {\n
            v4 = v6;\n
            v0 = v12 + v4;\n
            if (v0 > CNORFlash::GetBlockSize const(a0->field_200))\n
                v4 = CNORFlash::GetBlockSize const(a0->field_200) - v12;\n
            if (v13 == 65535)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            v3 = CFlashFS::GetAddressForDataID(a0, v13);\n
            if (CNORFlash::ReadData(a0->field_200, v3, &v1, 5) != 5)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            if (v1 != 2)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            if (CNORFlash::ReadData(a0->field_200, v3 + v12, a2 + v5, v4) != v4)\n
            {\n
                v30 = -1;\n
                return v30;\n
            }\n
            v13 = *(&v2);\n
            v12 = 5;\n
            v6 -= v4;\n
            v5 = v4 + v5;\n
            v19 = v4 + v19;\n
        }\n
        else\n
        {\n
            *(&a0[1].padding_0[4 + 8 * a1]) = v19;\n
            v30 = v5;\n
            return v30;\n
        }\n
    }\n
}\n
", "4241960:sub_40ba28": null, "4241968:_ZN8CFlashFS10DeleteFileEPKc": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[128];\n
    unsigned short field_288;\n
    char padding_28a[522];\n
    unsigned short field_494;\n
} struct_0;\n
\n
long long CFlashFS::DeleteFile(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x58]\n
    char v1;  // [bp-0x51]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    unsigned short v4;  // [bp-0x46]\n
    unsigned int v5;  // [bp-0x44]\n
    char v6;  // [bp-0x40]\n
    char v7;  // [bp-0x3d]\n
    unsigned short v8;  // [bp-0x38]\n
    unsigned short v9;  // [bp-0x36]\n
    unsigned int v10;  // [bp-0x34]\n
    char v11;  // [bp-0x30]\n
    char v12;  // [bp-0x2f]\n
    char v13;  // [bp-0x28]\n
    char v14;  // [bp-0x22]\n
    unsigned int v15;  // [bp-0xc]\n
    struct_0 *v17;  // rax\n
    struct_0 *v18;  // rax\n
\n
    if (!(CFlashFS::FindFileInFlashTable(a0, a1, &v14, &v13) & 1))\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    v10 = CFlashFS::GetAddressForHeaderID(a0, *(&v14));\n
    if (CNORFlash::ReadData(a0->field_200, v10, &v11, 8) != 8)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    v9 = *(&v12);\n
    v8 = 65535;\n
    while (true)\n
    {\n
        v5 = CFlashFS::GetAddressForDataID(a0, v9);\n
        if (CNORFlash::ReadData(a0->field_200, v5, &v6, 5) != 5)\n
        {\n
            v15 = -1;\n
            return v15;\n
        }\n
        if (v6 != 2)\n
        {\n
            v15 = -1;\n
            return v15;\n
        }\n
        v6 = 1;\n
        if (CNORFlash::WriteData(a0->field_200, v5, &v6, 5) != 5)\n
        {\n
            v15 = -1;\n
            return v15;\n
        }\n
        v9 = *(&v7);\n
        if (v9 == 65535)\n
            break;\n
        if (false)\n
            break;\n
    }\n
    v11 = 1;\n
    if (CNORFlash::WriteData(a0->field_200, v10, &v11, 8) != 8)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    v4 = 65535;\n
    for (v3 = 0; v3 < 128; v3 += 1)\n
    {\n
        if (*(&a0->padding_28a[12 + 4 * v3]) == *(&v14))\n
        {\n
            v17 = a0;\n
            *(&a0->padding_28a[12 + 4 * v3]) = 65535;\n
            v4 = *(&a0->padding_28a[10 + 4 * v3]);\n
            *(&a0->padding_28a[10 + 4 * v3]) = 65535;\n
            v17->field_494 = v17->field_494 - 1;\n
            break;\n
        }\n
    }\n
    if (v4 == 65535)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    v2 = CFlashFS::GetAddressForFileTableID(a0, v4);\n
    v1 = 1;\n
    if (CNORFlash::WriteData(a0->field_200, v2, &v1, 1) != 1)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    for (v0 = 0; v0 < 16; v0 += 1)\n
    {\n
        if (*(&a0->padding_208[8 * v0]) == *(&v14))\n
        {\n
            v18 = a0;\n
            *(&a0->padding_208[8 * v0]) = 65535;\n
            *(&a0->padding_208[4 + 8 * v0]) = 0;\n
            v18->field_288 = v18->field_288 - 1;\n
        }\n
    }\n
    v15 = 0;\n
    return v15;\n
}\n
", "4242737:sub_40bd31": null, "4242752:_ZN8CFlashFS20FindFileInFlashTableEPKcPtPj": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[652];\n
    unsigned short field_494;\n
} struct_0;\n
\n
long long CFlashFS::FindFileInFlashTable(struct_0 *a0, char *a1, unsigned short *a2, unsigned int *a3)\n
{\n
    unsigned int v0;  // [bp-0x154]\n
    char v1;  // [bp-0x150]\n
    char v2;  // [bp-0x14f]\n
    char v3;  // [bp-0x14d]\n
    char v4;  // [bp-0x149]\n
    unsigned int v5;  // [bp-0x148]\n
    unsigned int v6;  // [bp-0x144]\n
    unsigned int v7;  // [bp-0x140]\n
    char v8;  // [bp-0x139]\n
    char v9;  // [bp-0x138]\n
    char v10;  // [bp-0x9]\n
\n
    v8 = cgc_strlen(a1);\n
    v7 = 0;\n
    for (v6 = 0; v6 < 128; v6 += 1)\n
    {\n
        if (v7 >= a0->field_494)\n
            break;\n
        if (*(&a0->padding_208[142 + 4 * v6]) != 65535)\n
        {\n
            v7 += 1;\n
            v5 = CFlashFS::GetAddressForHeaderID(a0, *(&a0->padding_208[142 + 4 * v6]));\n
            if (CNORFlash::ReadData(a0->field_200, v5, &v1, 8) != 8)\n
            {\n
                v10 = 0;\n
                return v10 & 1;\n
            }\n
            else if (v8 == v4)\n
            {\n
                v0 = CFlashFS::GetAddressForDataID(a0, *(&v2)) + 5;\n
                if (CNORFlash::ReadData(a0->field_200, v0, &v9, v4) != v4)\n
                {\n
                    v10 = 0;\n
                    return v10 & 1;\n
                }\n
                (&v9)[v4] = 0;\n
                if (!cgc_strcmp(a1, &v9))\n
                {\n
                    *(a2) = *(&a0->padding_208[142 + 4 * v6]);\n
                    *(a3) = *(&v3);\n
                    v10 = 1;\n
                    return v10 & 1;\n
                }\n
            }\n
        }\n
    }\n
    v10 = 0;\n
    return v10 & 1;\n
}\n
", "4243279:sub_40bf4f": null, "4243280:_ZN8CFlashFS8OpenFileEPKch": "typedef struct struct_0 {\n
    char padding_0[648];\n
    unsigned short field_288;\n
} struct_0;\n
\n
long long CFlashFS::OpenFile(struct_0 *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned short v2;  // [bp-0x24]\n
    char v3;  // [bp-0x22]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = 0;\n
    if (a0->field_288 >= 16)\n
    {\n
        v4 = -3;\n
        return v4;\n
    }\n
    if (!(CFlashFS::FindFileInFlashTable(a0, a1, &v2, &v1) & 1))\n
    {\n
        if (a2 != 2)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        else if (!(CFlashFS::CreateNewFile(a0, a1, &v2, &v1) & 1))\n
        {\n
            v4 = -2;\n
            return v4;\n
        }\n
    }\n
    v0 = CFlashFS::GetNewFileDescriptor(a0);\n
    if (v0 == -1)\n
    {\n
        v4 = -0x4;\n
        return v4;\n
    }\n
    *(&a0->padding_0[520 + 8 * v0]) = v2;\n
    if (a2 != 4)\n
        *(&a0->padding_0[524 + 8 * v0]) = 0;\n
    else\n
        *(&a0->padding_0[524 + 8 * v0]) = v1;\n
    v4 = v0;\n
    return v4;\n
}\n
", "4243565:sub_40c06d": null, "4243568:_ZN8CFlashFS13CreateNewFileEPKcPtPj": "typedef struct struct_0 {\n
    char padding_0[1172];\n
    unsigned short field_494;\n
} struct_0;\n
\n
long long CFlashFS::CreateNewFile(struct_0 *a0, unsigned long long a1, unsigned short *a2, unsigned int *a3)\n
{\n
    unsigned short v0;  // [bp-0x34]\n
    unsigned short v1;  // [bp-0x32]\n
    char v2;  // [bp-0x9]\n
\n
    if (a0->field_494 >= 128)\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    v1 = CFlashFS::GetNewObjHeaderID(a0);\n
    if (v1 == 65535)\n
    {\n
        CFlashFS::CleanObjHeaderTable(a0);\n
        v1 = CFlashFS::GetNewObjHeaderID(a0);\n
    }\n
    if (v1 == 65535)\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    v0 = CFlashFS::GetNewFileTableID(a0);\n
    if (v0 == 65535)\n
    {\n
        CFlashFS::CleanFileTable(a0);\n
        v0 = CFlashFS::GetNewFileTableID(a0);\n
    }\n
    if (v0 == 65535)\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    else if ((CFlashFS::CreateNewObject(a0, a1, v0, v1) & 1))\n
    {\n
        *(a2) = v1;\n
        *(a3) = 0;\n
        v2 = 1;\n
        return v2 & 1;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
}\n
", "4243855:sub_40c18f": null, "4243856:_ZN8CFlashFS20GetNewFileDescriptorEv": "typedef struct struct_0 {\n
    char padding_0[648];\n
    unsigned short field_288;\n
} struct_0;\n
\n
long long CFlashFS::GetNewFileDescriptor(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a0->field_288 >= 16)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 16)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (*(&a0->padding_0[520 + 8 * v0]) == 65535)\n
        {\n
            a0->field_288 = a0->field_288 + 1;\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4244007:sub_40c227": null, "4244016:_ZN8CFlashFS9CloseFileEi": "typedef struct struct_0 {\n
    char padding_0[648];\n
    unsigned short field_288;\n
} struct_0;\n
\n
long long CFlashFS::CloseFile(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a1 < 0)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (a1 >= 16)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (*(&a0->padding_0[520 + 8 * a1]) != 65535)\n
    {\n
        *(&a0->padding_0[520 + 8 * a1]) = 65535;\n
        *(&a0->padding_0[524 + 8 * a1]) = 0;\n
        a0->field_288 = a0->field_288 - 1;\n
        v0 = a1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
}\n
", "4244180:sub_40c2d4": null, "4244192:_ZN8CFlashFS19GetFileTableAddressEv": "typedef struct struct_0 {\n
    char padding_0[656];\n
    unsigned int field_290;\n
} struct_0;\n
\n
long long CFlashFS::GetFileTableAddress(struct_0 *a0)\n
{\n
    return a0->field_290;\n
}\n
", "4244212:sub_40c2f4": null, "4244224:_ZN8CFlashFS19CleanObjHeaderTableEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[652];\n
    unsigned short field_494;\n
    char padding_496[8];\n
    unsigned short field_49e;\n
} struct_0;\n
\n
long long CFlashFS::CleanObjHeaderTable(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_0 *v2;  // [bp-0x68]\n
    char v3;  // [bp-0x60]\n
    unsigned int v4;  // [bp-0x58]\n
    unsigned int v5;  // [bp-0x54]\n
    unsigned int v6;  // [bp-0x50]\n
    unsigned int v7;  // [bp-0x4c]\n
    unsigned int v8;  // [bp-0x48]\n
    unsigned int v9;  // [bp-0x44]\n
    char v10;  // [bp-0x40]\n
    unsigned int v11;  // [bp-0x38]\n
    unsigned int v12;  // [bp-0x34]\n
    unsigned int v13;  // [bp-0x30]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned int v17;  // [bp-0x20]\n
    char v18;  // [bp-0x19]\n
    struct_0 *v19;  // [bp-0x18]\n
    char v20;  // [bp-0x9]\n
    struct_0 *v22;  // rax\n
    struct_0 *v23;  // rdi\n
    struct_0 *v24;  // rax\n
\n
    v19 = a0;\n
    v2 = v19;\n
    v18 = 0;\n
    v17 = 0;\n
    v16 = 0;\n
    v15 = 0;\n
    v14 = 0;\n
    do\n
    {\n
        v22 = v2;\n
        v23 = v2;\n
        v13 = CFlashFS::GetAddressForSector(v22, v22->field_49e);\n
        v12 = CFlashFS::GetAddressForSector(v23, v23->field_49e + 1);\n
        v11 = 0;\n
        if (!v16)\n
            v16 = v2->field_49e;\n
        v15 = v2->field_49e + 1;\n
        for (v11 = v17; v14 < v2->field_494; v11 += 1)\n
        {\n
            if (*(&v2->padding_208[142 + 4 * v11]) != 65535)\n
            {\n
                if (v11 >= 128)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                if (v13 + 8 > v12)\n
                    break;\n
                v24 = v2;\n
                v9 = CFlashFS::GetAddressForFileTableID(v24, *(&v24->padding_208[142 + 4 * v11]));\n
                if (CNORFlash::ReadData(v2->field_200, v9, &v10, 8) != 8)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                if (CNORFlash::WriteData(v2->field_200, v13, &v10, 8) != 8)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                v13 += 8;\n
                v14 += 1;\n
            }\n
        }\n
        if (v14 == v2->field_494)\n
            v18 = 1;\n
        v17 = v11;\n
        v2->field_49e = CFlashFS::GetNextScratchSector(v2);\n
    } while (((v18 ^ 255) & 1));\n
    CNORFlash::SectorErase(v2->field_200, 1);\n
    CNORFlash::SectorErase(v2->field_200, 2);\n
    CNORFlash::SectorErase(v2->field_200, 3);\n
    v8 = CFlashFS::GetAddressForHeaderID(v2, 0);\n
    v1 = CNORFlash::GetBlockSize const(v2->field_200);\n
    v7 = (CNORFlash::GetBlocksPerSector const(v2->field_200) * v1 >> 3) * 8;\n
    v17 = 0;\n
    v14 = 0;\n
    while (true)\n
    {\n
        v6 = CFlashFS::GetAddressForSector(v2, v16);\n
        v5 = v6 + v7;\n
        v16 += 1;\n
        v4 = 0;\n
        for (v4 = v17; v14 < v2->field_494; v4 += 1)\n
        {\n
            if (*(&v2->padding_208[142 + 4 * v4]) != 65535)\n
            {\n
                if (v4 >= 128)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                if (v6 + 8 > v5)\n
                    break;\n
                if (CNORFlash::ReadData(v2->field_200, v6, &v3, 8) != 8)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                if (CNORFlash::WriteData(v2->field_200, v8, &v3, 8) != 8)\n
                {\n
                    v20 = 0;\n
                    return v20 & 1;\n
                }\n
                *(&v2->padding_208[142 + 4 * v4]) = v14;\n
                v14 += 1;\n
                v6 += 8;\n
                v8 += 8;\n
            }\n
        }\n
        v17 = v4;\n
        if (v14 == v2->field_494)\n
            break;\n
        v0 = v16;\n
        if (v0 >= CNORFlash::GetSectorCount const(v2->field_200))\n
            v16 = CNORFlash::GetSectorCount const(v2->field_200) - 4;\n
        if (false)\n
            break;\n
    }\n
    CFlashFS::CleanFileTable(v2);\n
    v20 = 1;\n
    return v20 & 1;\n
}\n
", "4245301:sub_40c735": null, "4245312:_ZN8CFlashFS14CleanFileTableEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[652];\n
    unsigned short field_494;\n
    unsigned short field_496;\n
} struct_0;\n
\n
long long CFlashFS::CleanFileTable(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned short v1;  // [bp-0x2f]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned short v3;  // [bp-0x26]\n
    unsigned int v4;  // [bp-0x24]\n
    char v5;  // [bp-0x20]\n
    unsigned short v6;  // [bp-0x1f]\n
    unsigned short v7;  // [bp-0x1d]\n
    char v8;  // [bp-0x9]\n
    struct_0 *v10;  // rax\n
    struct_0 *v11;  // rax\n
\n
    CNORFlash::SectorErase(a0->field_200, 0);\n
    v5 = 193;\n
    v6 = 0;\n
    v7 = 5;\n
    if (CNORFlash::WriteData(a0->field_200, 0, &v5, 5) != 5)\n
    {\n
        v8 = 0;\n
        return v8 & 1;\n
    }\n
    v4 = CFlashFS::GetFileTableAddress(a0);\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a0->field_494)\n
        {\n
            do\n
            {\n
                if (v3 >= 128)\n
                {\n
                    v8 = 0;\n
                    return v8 & 1;\n
                }\n
                if (*(&a0->padding_208[142 + 4 * v3]) != 65535)\n
                {\n
                    v10 = a0;\n
                    *(&v10->padding_208[142 + 4 * v2]) = *(&v10->padding_208[142 + 4 * v3]);\n
                    *(&a0->padding_208[140 + 4 * v2]) = v2;\n
                    break;\n
                }\n
                v3 += 1;\n
            } while (true);\n
            v0 = 2;\n
            v1 = *(&a0->padding_208[142 + 4 * v3]);\n
            if (CNORFlash::WriteData(a0->field_200, v4, &v0, 3) != 3)\n
            {\n
                v8 = 0;\n
                return v8 & 1;\n
            }\n
            v4 += 3;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v11 = a0;\n
            v11->field_496 = v11->field_494;\n
            for (v3 = a0->field_496; v3 < 128; v3 += 1)\n
            {\n
                *(&a0->padding_208[142 + 4 * v3]) = 65535;\n
                *(&a0->padding_208[140 + 4 * v3]) = 65535;\n
            }\n
            v8 = 1;\n
            return v8 & 1;\n
        }\n
    }\n
}\n
", "4245793:sub_40c921": null, "4245808:_ZN8CFlashFS15CreateNewObjectEPKctt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[652];\n
    unsigned short field_494;\n
} struct_0;\n
\n
long long CFlashFS::CreateNewObject(struct_0 *a0, char *a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    char v1;  // [bp-0x48]\n
    unsigned short v2;  // [bp-0x47]\n
    unsigned int v3;  // [bp-0x45]\n
    char v4;  // [bp-0x41]\n
    unsigned int v5;  // [bp-0x3c]\n
    char v6;  // [bp-0x38]\n
    unsigned short v7;  // [bp-0x37]\n
    unsigned short v8;  // [bp-0x35]\n
    unsigned short v9;  // [bp-0x2e]\n
    unsigned int v10;  // [bp-0x2c]\n
    char v11;  // [bp-0x25]\n
    char v12;  // [bp-0x9]\n
\n
    v11 = cgc_strlen(a1);\n
    for (v10 = 0; v10 < 128; v10 += 1)\n
    {\n
        if (*(&a0->padding_208[142 + 4 * v10]) == 65535)\n
        {\n
            *(&a0->padding_208[142 + 4 * v10]) = a3;\n
            *(&a0->padding_208[140 + 4 * v10]) = a2;\n
            a0->field_494 = a0->field_494 + 1;\n
            break;\n
        }\n
    }\n
    v9 = CFlashFS::GetNextDataBlockID(a0);\n
    v6 = 2;\n
    v7 = 0;\n
    v8 = 65535;\n
    v5 = CFlashFS::GetAddressForDataID(a0, v9);\n
    if (CNORFlash::WriteData(a0->field_200, v5, &v6, 5) != 5)\n
    {\n
        v12 = 0;\n
        return v12 & 1;\n
    }\n
    else if (CNORFlash::WriteData(a0->field_200, v5 + 5, a1, v11) == v11)\n
    {\n
        v1 = 2;\n
        v2 = v9;\n
        v3 = 0;\n
        v4 = v11;\n
        v0 = CFlashFS::GetAddressForHeaderID(a0, a3);\n
        if (CNORFlash::WriteData(a0->field_200, v0, &v1, 8) != 8)\n
        {\n
            v12 = 0;\n
            return v12 & 1;\n
        }\n
        v12 = 1;\n
        return v12 & 1;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        return v12 & 1;\n
    }\n
}\n
", "4246240:_ZN8CFlashFS19GetAddressForSectorEt": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
} struct_0;\n
\n
long long CFlashFS::GetAddressForSector(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = CNORFlash::GetBlockSize const(a0->field_200);\n
    return a1 * CNORFlash::GetBlocksPerSector const(a0->field_200) * v0;\n
}\n
", "4246321:sub_40cb31": null, "4246336:_ZN8CFlashFS20GetNextScratchSectorEv": "typedef struct struct_0 {\n
    char padding_0[512];\n
    unsigned long long field_200;\n
    char padding_208[662];\n
    unsigned short field_49e;\n
} struct_0;\n
\n
long long CFlashFS::GetNextScratchSector(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v3;  // rax\n
\n
    v0 = a0;\n
    a0->field_49e = a0->field_49e + 1;\n
    v1 = a0->field_49e;\n
    if (v1 >= CNORFlash::GetSectorCount const(a0->field_200))\n
        a0->field_49e = CNORFlash::GetSectorCount const(v0->field_200) - 4;\n
    v3 = a0;\n
    CNORFlash::SectorErase(v3->field_200, v3->field_49e);\n
    return a0->field_49e;\n
}\n
", "4246481:sub_40cbd1": null, "4246496:_ZN8CFlashFS15CleanDataBlocksEv": "typedef struct struct_0 {\n
    char padding_0[1186];\n
    unsigned short field_4a2;\n
} struct_0;\n
\n
long long CFlashFS::CleanDataBlocks(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    for (v1 = 0; v1 < a0->field_4a2; v1 += 1)\n
    {\n
        v0 = CFlashFS::GetAddressForDataID(a0, v1);\n
    }\n
    CFlashFS::CleanObjHeaderTable(a0);\n
    return 0;\n
}\n
", "4246606:sub_40cc4e": null, "4246608:_ZNK9CNORFlash14GetSectorCountEv": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::GetSectorCount const(struct_0 *a0)\n
{\n
    return a0->field_10;\n
}\n
", "4246625:sub_40cc61": null, "4246640:_ZNK9CNORFlash12GetBlockSizeEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long CNORFlash::GetBlockSize const(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4246657:sub_40cc81": null, "4246672:_ZNK9CNORFlash18GetBlocksPerSectorEv": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long CNORFlash::GetBlocksPerSector const(struct_0 *a0)\n
{\n
    return a0->field_c;\n
}\n
", "4246689:sub_40cca1": null, "4246704:_ZN9CNORFlashC1Ev": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::__ctor__(struct_0 *a0)\n
{\n
    a0->field_0 = 0;\n
    a0->field_8 = 0;\n
    a0->field_c = 0;\n
    a0->field_10 = 0;\n
    return a0;\n
}\n
", "4246746:sub_40ccda": null, "4246752:_ZN9CNORFlashD1Ev": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::__dtor__(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned long long v3;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v4;  // rax\n
    unsigned long long v5;  // rsi\n
\n
    v0 = a0;\n
    if (!a0->field_0)\n
        return a0;\n
    v4 = v0;\n
    v1 = v4->field_10 * v4->field_c * v4->field_8;\n
    v3 = cgc_deallocate(a0, v5);\n
    if (!v3)\n
        return v3;\n
    v3 = cgc__terminate(a0);\n
}\n
", "4246843:sub_40cd3b": null, "4246848:_ZN9CNORFlash4InitEjjj": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::Init(struct_0 *a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    if (!(a1 & 63))\n
        a0->field_8 = a1;\n
    else\n
        a0->field_8 = ((a1 >> 6) + 1) * 64;\n
    if (a0->field_8 > 0x200)\n
        a0->field_8 = 0x200;\n
    if (a2 > 16)\n
        a0->field_c = 16;\n
    else\n
        a0->field_c = a2;\n
    if (a3 > 0x100)\n
        a0->field_10 = 0x100;\n
    else\n
        a0->field_10 = a3;\n
    v0 = a0->field_10 * a0->field_c * a0->field_8;\n
    if (cgc_allocate(a0, a1, a0))\n
    {\n
        cgc__terminate(a0);\n
        return cgc_memset(a0->field_0, 255, v0);\n
    }\n
    return cgc_memset(a0->field_0, 255, v0);\n
}\n
", "4247106:sub_40ce42": null, "4247120:_ZN9CNORFlash9WriteDataEjPhj": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long CNORFlash::WriteData(struct_0 *a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0xc]\n
    char *v6;  // rax\n
    unsigned long v7;  // rcx\n
\n
    v3 = a1;\n
    v2 = a3;\n
    if (!a0->field_0)\n
    {\n
        v4 = -3;\n
        return v4;\n
    }\n
    v1 = a0->field_10 * a0->field_c * a0->field_8;\n
    if (v3 + v2 > v1)\n
    {\n
        v4 = -0x4;\n
        return v4;\n
    }\n
    for (v0 = 0; v2 > 0; v2 = v2 - 1)\n
    {\n
        v6 = a0->field_0;\n
        v7 = v3;\n
        v6[v7] = v6[v7] & a2[v0];\n
        v3 += 1;\n
        v0 += 1;\n
    }\n
    v4 = v0;\n
    return v4;\n
}\n
", "4247303:sub_40cf07": null, "4247312:_ZN9CNORFlash8ReadDataEjPhj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::ReadData(struct_0 *a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = a1;\n
    v2 = a3;\n
    if (!a0->field_0)\n
    {\n
        v4 = -3;\n
        return v4;\n
    }\n
    v1 = a0->field_10 * a0->field_c * a0->field_8;\n
    if (v3 + v2 > v1)\n
    {\n
        v4 = -0x4;\n
        return v4;\n
    }\n
    for (v0 = 0; v2 > 0; v2 = v2 - 1)\n
    {\n
        a2[v0] = *((a0->field_0 + v3));\n
        v3 += 1;\n
        v0 += 1;\n
    }\n
    v4 = v0;\n
    return v4;\n
}\n
", "4247488:_ZN9CNORFlash11DeviceEraseEv": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::DeviceErase(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0->field_10 * a0->field_c * a0->field_8;\n
    cgc_memset(a0->field_0, 255, v0);\n
    return 0;\n
}\n
", "4247544:sub_40cff8": null, "4247552:_ZN9CNORFlash11SectorEraseEj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::SectorErase(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (a1 >= a0->field_10)\n
    {\n
        v2 = -2;\n
        return v2;\n
    }\n
    v1 = a0->field_c * a0->field_8;\n
    v0 = a1 * v1;\n
    cgc_memset(a0->field_0 + v0, 255, v1);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4247663:sub_40d06f": null, "4247664:_ZN9CNORFlash10BlockEraseEj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long CNORFlash::BlockErase(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    struct_0 *v5;  // rax\n
\n
    v2 = a0;\n
    v0 = v2;\n
    v1 = v0->field_10 * v0->field_c;\n
    if (a1 >= v1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v5 = v0;\n
    cgc_memset(v5->field_0 + a1 * v5->field_8, 255, v5->field_8);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4247771:sub_40d0db": null, "4247776:_Z6TestFSP9CNORFlash": "long long TestFS(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x14ce]\n
    char v1;  // [bp-0x14c9]\n
    char v2;  // [bp-0xcc8]\n
    unsigned int v3;  // [bp-0x4c8]\n
    unsigned int v4;  // [bp-0x4c4]\n
    unsigned int v5;  // [bp-0x4c0]\n
    unsigned int v6;  // [bp-0x4bc]\n
    char v7;  // [bp-0x4b8]\n
\n
    CFlashFS::__ctor__(&v7);\n
    CFlashFS::Init(&v7, a0);\n
    v6 = CFlashFS::OpenFile(&v7, \"test.txt\", 2);\n
    v5 = CFlashFS::OpenFile(&v7, \"test2.txt\", 2);\n
    v4 = CFlashFS::OpenFile(&v7, \"test3.txt\", 2);\n
    cgc_printf(\"Test1 FD is: $d\\n
\", v6, 2, a3, a4);\n
    cgc_printf(\"Test2 FD is: $d\\n
\", v5, 2, a3, a4);\n
    cgc_printf(\"Test3 FD is: $d\\n
\", v4, 2, a3, a4);\n
    v3 = CFlashFS::WriteFile(&v7, v6, \"blah\", 4);\n
    cgc_printf(\"Ret value is: $d\\n
\", v3, \"blah\", 4, a4);\n
    v3 = CFlashFS::WriteFile(&v7, v6, &v2, 0x700);\n
    cgc_printf(\"Ret value is: $d\\n
\", v3, \"blah\", 0x700, a4);\n
    v3 = CFlashFS::CloseFile(&v7, v6);\n
    cgc_printf(\"Close ret: $d\\n
\", v3, \"blah\", 0x700, a4);\n
    v6 = CFlashFS::OpenFile(&v7, \"test.txt\", 1);\n
    cgc_printf(\"Open read FD is: $d\\n
\", v6, 1, 0x700, a4);\n
    v3 = CFlashFS::ReadFile(&v7, v6, &v0, 4);\n
    cgc_printf(\"Read return is: $d\\n
\", v3, 1, 4, a4);\n
    v1 = 0;\n
    cgc_printf(\"Read blah buffer is: $s\\n
\", &v0, 1, 4, a4);\n
    v3 = CFlashFS::DeleteFile(&v7, \"test.txt\");\n
    cgc_printf(\"Delete test.txt ret: $d\\n
\", v3, 1, 4, a4);\n
    v3 = CFlashFS::ReadFile(&v7, v6, &v0, 4);\n
    cgc_printf(\"Read from FD=1 is: $d\\n
\", v3, 1, 4, a4);\n
    return CFlashFS::__base_dtor__(&v7);\n
}\n
", "4248381:sub_40d33d": null, "4248384:_Z19SendCommandResponseP21TEST_COMMAND_RESPONSEPhj": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
long long SendCommandResponse(struct_0 *a0, unsigned long long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    a0->field_4 = a2;\n
    if (SendData(1, a0, 8) != 8)\n
    {\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    if (a2 > 0 && SendData(1, a1, a2) != a2)\n
    {\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    v0 = 1;\n
    return v0 & 1;\n
}\n
", "4248521:sub_40d3c9": null, "4248528:_Z15OpenFileCommandP8CFlashFS": "long long OpenFileCommand(void* a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    char v1;  // [bp-0x138]\n
    char v2;  // [bp-0x137]\n
    unsigned int v3;  // [bp-0x130]\n
    char v4;  // [bp-0x128]\n
    char v5;  // [bp-0x9]\n
\n
    if (RecvData(0, &v1, 2) != 2)\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    else if (RecvData(0, &v4, v1) == v1)\n
    {\n
        (&v4)[v1] = 0;\n
        v0 = CFlashFS::OpenFile(a0, &v4, v2);\n
        v3 = v0;\n
        SendCommandResponse(&v3, 0, 0);\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
}\n
", "4248723:sub_40d493": null, "4248736:_Z16CloseFileCommandP8CFlashFS": "long long CloseFileCommand(void* a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x9]\n
\n
    if (RecvData(0, &v1, 4) != 4)\n
    {\n
        v3 = 1;\n
        return v3 & 1;\n
    }\n
    v0 = CFlashFS::CloseFile(a0, *(&v1));\n
    v2 = v0;\n
    SendCommandResponse(&v2, 0, 0);\n
    v3 = 0;\n
    return v3 & 1;\n
}\n
", "4248839:sub_40d507": null, "4248848:_Z15ReadFileCommandP8CFlashFSPh": "long long ReadFileCommand(void* a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x28]\n
    char v4;  // [bp-0x9]\n
\n
    if (RecvData(0, &v1, 8) != 8)\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    if (*(&v2) > 0x1000)\n
        v2 = 0x1000;\n
    v0 = CFlashFS::ReadFile(a0, *(&v1), a1, v2);\n
    v3 = v0;\n
    if (v3 > 0)\n
        SendCommandResponse(&v3, a1, v2);\n
    else\n
        SendCommandResponse(&v3, 0, 0);\n
    v4 = 0;\n
    return v4 & 1;\n
}\n
", "4249013:sub_40d5b5": null, "4249024:_Z16WriteFileCommandP8CFlashFSPh": "long long WriteFileCommand(void* a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x28]\n
    char v4;  // [bp-0x9]\n
\n
    if (RecvData(0, &v1, 8) != 8)\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    if (*(&v2) > 0x1000)\n
        v2 = 0x1000;\n
    if (RecvData(0, a1, v2) != v2)\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    v0 = CFlashFS::WriteFile(a0, *(&v1), a1, v2);\n
    v3 = v0;\n
    SendCommandResponse(&v3, 0, 0);\n
    v4 = 0;\n
    return v4 & 1;\n
}\n
", "4249190:sub_40d666": null, "4249200:_Z17DeleteFileCommandP8CFlashFS": "long long DeleteFileCommand(void* a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    char v1;  // [bp-0x138]\n
    unsigned int v2;  // [bp-0x130]\n
    char v3;  // [bp-0x128]\n
    char v4;  // [bp-0x9]\n
\n
    if (RecvData(0, &v1, 1) != 1)\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    else if (RecvData(0, &v3, v1) == v1)\n
    {\n
        (&v3)[v1] = 0;\n
        v0 = CFlashFS::DeleteFile(a0, &v3);\n
        v2 = v0;\n
        SendCommandResponse(&v2, 0, 0);\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    else\n
    {\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
}\n
", "4249388:sub_40d72c": null, "4249392:_Z11SetupDeviceiP8CFlashFSP9CNORFlash": "long long SetupDevice(unsigned long a0, void* a1, void* a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x4f4]\n
    unsigned int v1;  // [bp-0x4f0]\n
    unsigned int v2;  // [bp-0x4ec]\n
    char v3;  // [bp-0x4e8]\n
    char v4;  // [bp-0x40]\n
\n
    CNORFlash::__ctor__(&v4);\n
    CFlashFS::__ctor__(&v3);\n
    if (*(a0) < 128)\n
        v2 = 0x100;\n
    else\n
        v2 = 0x200;\n
    v1 = (((*((a0 + 1)) >> 31 CONCAT *((a0 + 1))) /m 3 >> 32) + 2) * 4;\n
    v0 = (((*((a0 + 2)) >> 31 CONCAT *((a0 + 2))) /m 32 >> 32) + 128) * 4;\n
    CNORFlash::Init(a2, v2, v1, v0);\n
    CFlashFS::Init(a1, a2);\n
    cgc_printf(\"Starting test for device ($d, $d, $d):\\n
\", v2, v1, v0, a4);\n
    CFlashFS::__base_dtor__(&v3);\n
    return CNORFlash::__dtor__(&v4);\n
}\n
", "4249650:sub_40d832": null, "4249664:_Z13RunTestSystemP8CFlashFS": "extern unsigned int g_40e4a0;\n
\n
long long RunTestSystem(void* a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x1028]\n
    char v1;  // [bp-0x101a]\n
    char v2;  // [bp-0x1019]\n
    char v3;  // [bp-0x1018]\n
    unsigned long long v5;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        v5 = RecvData(0, &v1, 1);\n
        if (v5 != 1)\n
            return v5;\n
        v0 = v1;\n
        switch (v0)\n
        {\n
        case 0:\n
            v5 = OpenFileCommand(a0);\n
            v2 = v5 & 1;\n
            break;\n
        case 1:\n
            v5 = CloseFileCommand(a0);\n
            v2 = v5 & 1;\n
            break;\n
        case 2:\n
            v5 = WriteFileCommand(a0, &v3);\n
            v2 = v5 & 1;\n
            break;\n
        case 3:\n
            v5 = ReadFileCommand(a0, &v3);\n
            v2 = v5 & 1;\n
            break;\n
        case 4:\n
            v5 = DeleteFileCommand(a0);\n
            v2 = v5 & 1;\n
            break;\n
        case 5:\n
            v5 = cgc_printf(\"Stop simulation\\n
\", a1, 1, &g_40e4a0, a4);\n
            v2 = 1;\n
            break;\n
        default:\n
            v5 = cgc_printf(\"Invalid command\\n
\", a1, 1, &g_40e4a0, a4);\n
            v2 = 1;\n
            break;\n
        }\n
        *(&v5) = v2 ^ 255;\n
        if (!((v2 ^ 255) & 1))\n
            return v5;\n
    }\n
}\n
", "4249970:sub_40d972": null, "4249984:main": "int main(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x4d8]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v3 = 0x4347c000;\n
    CNORFlash::__ctor__(&v1);\n
    CFlashFS::__ctor__(&v0);\n
    SetupDevice(v3, &v0, &v1, a3, a4);\n
    RunTestSystem(&v0, a1, a2, a3, a4);\n
    CFlashFS::__base_dtor__(&v0);\n
    CNORFlash::__dtor__(&v1);\n
    return 0;\n
}\n
", "4250096:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:cgc_receive": null, "5242904:cgc_allocate": null, "5242912:cgc__terminate": null, "5242920:cgc_deallocate": null, "5242928:_ZdaPv": null, "5242936:cgc_rint": null, "5242944:cgc_log10": null, "5242952:cgc_transmit": null, "5242960:cgc_pow": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}