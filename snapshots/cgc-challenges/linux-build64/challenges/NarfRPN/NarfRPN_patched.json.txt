{"4198400:_init": "extern struct_0 *g_406bb8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_406bb8;\n
    if (g_406bb8)\n
        v1 = g_406bb8();\n
    return v1;\n
}\n
", "4198432:sub_401020": "extern unsigned long long g_406bd8;\n
\n
long long sub_401020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_406bd8;\n
    goto *(4221920);\n
}\n
", "4198444:sub_40102c": null, "4198448:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198464:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198480:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198496:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4221896);\n
}\n
", "4198512:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4198549:sub_401095": null, "4198550:sub_401096": null, "4198560:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_406bb0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4198601:sub_4010c9": null, "4198608:register_tm_clones": "extern unsigned long long g_406bc0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4198665:sub_401109": null, "4198672:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_406bc8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_406bc8)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4198725:sub_401145": null, "4198729:sub_401149": null, "4198736:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198745:sub_401159": null, "4198752:cgc_read_all": "long long cgc_read_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned long v5;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = a2;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v5 = v1;\n
            return v5;\n
        }\n
        else if (!cgc_receive(a0, a1, a2, v7))\n
        {\n
            v2 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
}\n
", "4198886:sub_4011e6": null, "4198896:cgc_write_all": "long long cgc_write_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned long v5;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = a2;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v5 = v1;\n
            return v5;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v7))\n
        {\n
            v2 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
}\n
", "4199030:sub_401276": null, "4199040:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long long v3;  // rax\n
    char *v4;  // rax\n
\n
    v1 = a2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a1;\n
    }\n
    return a0;\n
}\n
", "4199121:sub_4012d1": null, "4199136:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long long v4;  // rax\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = a0;\n
    v0 = a1;\n
    while (true)\n
    {\n
        v4 = v2;\n
        v2 = v4 - 1;\n
        if (!v4)\n
            break;\n
        v5 = v0;\n
        v0 = v5 + 1;\n
        tmp_19 = *(v5);\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        *(v6) = tmp_19;\n
    }\n
    return a0;\n
}\n
", "4199238:sub_401346": null, "4199248:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4199311:sub_40138f": null, "4199312:cgc_malloc": "extern char freelists;\n
extern unsigned long long size_class_sizes;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x60], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x58]\n
    unsigned long long *v2;  // [bp-0x50], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x45]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned long long *v5;  // [bp-0x40]\n
    unsigned long long *v6;  // [bp-0x38]\n
    unsigned long v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned long long *v9;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v10;  // [bp-0x18], Other Possible Types: unsigned long long\n
    void* v11;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v13;  // rax\n
\n
    v10 = a0;\n
    v9 = 0;\n
    if ((v10 + 7 & -8) + 16 < v10)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v10 = (v10 + 7 & -8) + 16;\n
    if (v10 < size_class_sizes)\n
        v10 = size_class_sizes;\n
    if (v10 > 4095)\n
    {\n
        v11 = cgc_allocate_large_chunk(v10);\n
        return v11;\n
    }\n
    v4 = cgc_log_base_two(v10);\n
    v8 = v4 - cgc_log_base_two(size_class_sizes);\n
    if (v8 >= 8)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (!v9)\n
            v3 = v8 < 8;\n
        if (!(v3 & 1))\n
            break;\n
        v13 = v8;\n
        v8 = v13 + 1;\n
        v7 = cgc_list_find(&(&freelists)[16 * v13], cgc_find_fit, v10, v8);\n
        if (!v7)\n
            v2 = 0;\n
        else\n
            v2 = -9 + v7;\n
        v6 = v2;\n
        v9 = v6;\n
    }\n
    if (!v9)\n
    {\n
        v9 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v5 = v9;\n
        v1 = &(&freelists)[16 + 16 * v8];\n
        if (!v5)\n
            v0 = 0;\n
        else\n
            v0 = v5 + 1;\n
        ::0x4017c0::cgc_list_remove(v1, v0);\n
    }\n
    cgc_mark_allocated(v9);\n
    if ((*(v9) & -2) > v10)\n
        v9 = cgc_split_chunk(v9, v10);\n
    v11 = cgc_chunk_to_ptr(v9);\n
    return v11;\n
}\n
", "4199863:sub_4015b7": null, "4199872:cgc_allocate_large_chunk": "long long cgc_allocate_large_chunk(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
\n
    if (cgc_allocate(a0, v3, v4))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    *(v0) = a0;\n
    cgc_mark_allocated(v0);\n
    v1 = cgc_chunk_to_ptr(v0);\n
    return v1;\n
}\n
", "4199964:sub_40161c": null, "4199968:cgc_log_base_two": "long long cgc_log_base_two(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4200024:sub_401658": null, "4200032:cgc_list_find": "long long cgc_list_find(struct struct_0 **a0, struct struct_0 **a1, unsigned long long a2)\n
{\n
    struct struct_0 **v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x20]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v0 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (!v1(v0, a2))\n
        {\n
            v0 = *(v0);\n
        }\n
        else\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4200149:sub_4016d5": null, "4200160:cgc_find_fit": "long long cgc_find_fit(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned long long *v1;  // [bp-0x38]\n
    unsigned long long *v2;  // [bp-0x28]\n
\n
    if (!a0)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a0;\n
    v1 = v0;\n
    v2 = v1;\n
    return a1 <= (*(v2) & -2);\n
}\n
", "4200276:sub_401754": null, "4200288:cgc_grow_heap": "long long cgc_grow_heap()\n
{\n
    unsigned long long *v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    *(v0) = 0x1000;\n
    cgc_mark_free(v0);\n
    v1 = v0;\n
    return v1;\n
}\n
", "4200372:sub_4017b4": null, "4200384:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long cgc_list_remove(unsigned long long a0[2], struct_0 *a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    if (!a1)\n
        return v1;\n
    if (!a1->field_8)\n
        a0[0] = a1->field_0;\n
    else\n
        a1->field_8->field_0 = a1->field_0;\n
    if (a1->field_0)\n
    {\n
        v1 = a1->field_0;\n
        *((v1 + 8)) = a1->field_8;\n
        return a1->field_0;\n
    }\n
    a0[1] = a1->field_8;\n
    return a0;\n
}\n
", "4200520:sub_401848": null, "4200528:cgc_mark_allocated": "long long cgc_mark_allocated(unsigned long long *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x10]\n
    unsigned long long *v2;  // rax\n
\n
    v0 = a0;\n
    v2 = a0;\n
    *(v2) = *(v2) | 1;\n
    *((-8 + a0 + (*(v0) & -2))) = *(v0);\n
    return a0;\n
}\n
", "4200579:sub_401883": null, "4200592:cgc_split_chunk": "extern unsigned long long size_class_sizes;\n
\n
long long cgc_split_chunk(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    unsigned long long *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0 + a1;\n
    v0 = *(a0) & -2;\n
    if ((*(a0) & -2) <= a1 + size_class_sizes)\n
    {\n
        v2 = a0;\n
        return v2;\n
    }\n
    *(a0) = a1;\n
    cgc_mark_allocated(a0);\n
    *(v1) = v0 - a1;\n
    cgc_mark_allocated(v1);\n
    cgc_free(cgc_chunk_to_ptr(v1));\n
    v2 = a0;\n
    return v2;\n
}\n
", "4200758:sub_401936": null, "4200768:cgc_chunk_to_ptr": "long long cgc_chunk_to_ptr(unsigned long a0)\n
{\n
    return a0 + 8;\n
}\n
", "4200791:sub_401957": null, "4200800:cgc_free": "extern char freelists;\n
extern unsigned int size_class_sizes;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned long long *v2;  // [bp-0x18], Other Possible Types: unsigned int *\n
    unsigned long long *v4;  // rax, Other Possible Types: unsigned long\n
\n
    v4 = cgc_ptr_to_chunk(a0);\n
    v2 = v4;\n
    if (!a0)\n
        return v4;\n
    cgc_mark_free(v2);\n
    v2 = cgc_coalesce(v2);\n
    v0 = cgc_log_base_two(*(&v2) & -2);\n
    v1 = v0 - cgc_log_base_two(*(&size_class_sizes));\n
    if (v1 >= 8)\n
        v1 = 7;\n
    v4 = cgc_list_insert_in_order(&(&freelists)[16 * v1], v2 + 2, cgc_size_cmp);\n
    return v4;\n
}\n
", "4200971:sub_401a0b": null, "4200976:cgc_ptr_to_chunk": "long long cgc_ptr_to_chunk(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
\n
    if (!a0)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4201053:sub_401a5d": null, "4201056:cgc_mark_free": "long long cgc_mark_free(unsigned long long *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x10]\n
    unsigned long long *v2;  // rax\n
\n
    v0 = a0;\n
    v2 = a0;\n
    *(v2) = *(v2) & -2;\n
    *((-8 + v0 + (*(a0) & -2))) = *(v0);\n
    return a0;\n
}\n
", "4201107:sub_401a93": null, "4201120:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
    unsigned long long field_0;\n
} struct_0;\n
\n
extern char freelists;\n
extern unsigned int size_class_sizes;\n
\n
long long cgc_coalesce(struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x68], Other Possible Types: unsigned long\n
    unsigned long long v1[2];  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x54]\n
    void* v3;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long long v4[2];  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned long long *v6;  // [bp-0x38]\n
    unsigned long long *v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int *v9;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int *v10;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long *v11;  // [bp-0x10], Other Possible Types: struct_0 *, unsigned long\n
\n
    v11 = a0;\n
    v10 = 0;\n
    v9 = 0;\n
    if ((v11 & 4095))\n
        v9 = v11 + -(v11->field_0 & -2);\n
    if (((v11 + (v11->field_-8 & -2)) & 4095))\n
        v10 = v11 + (v11->field_-8 & -2);\n
    if (v9 && !(*(v9) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v9) & -2);\n
        v8 = v5 - cgc_log_base_two(*(&size_class_sizes));\n
        if (v8 < 8)\n
        {\n
            v7 = v9;\n
            v4[0] = &(&freelists)[16 * v8];\n
            if (!v7)\n
                v3 = 0;\n
            else\n
                v3 = v7 + 1;\n
            ::0x4017c0::cgc_list_remove(v4, v3);\n
            *(v9) = (v11->field_-8 & -2) + (*(v9) & -2);\n
            cgc_mark_free(v9);\n
            v11 = v9;\n
        }\n
    }\n
    if (!v10)\n
    {\n
        return v11;\n
    }\n
    else if ((*(v10) & 1))\n
    {\n
        return v11;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v10) & -2);\n
        v8 = v2 - cgc_log_base_two(*(&size_class_sizes));\n
        if (v8 >= 8)\n
            return v11;\n
        v6 = v10;\n
        v1[0] = &(&freelists)[16 * v8];\n
        if (!v6)\n
            v0 = 0;\n
        else\n
            v0 = v6 + 1;\n
        ::0x4017c0::cgc_list_remove(v1, v0);\n
        *(v11) = (*(v11) & -2) + (*(v10) & -2);\n
        cgc_mark_free(v11);\n
    }\n
}\n
", "4201708:sub_401cec": null, "4201712:cgc_list_insert_in_order": "long long cgc_list_insert_in_order(struct struct_0 **a0, unsigned long long a1, struct struct_0 **a2)\n
{\n
    struct struct_0 **v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x20]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = a2;\n
    v0 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v3 = cgc_list_push_back(a0, a1);\n
            return v3;\n
        }\n
        else if (v1(a1, v0) < 0)\n
        {\n
            v0 = *(v0);\n
        }\n
        else\n
        {\n
            v3 = ::0x401f40::cgc_list_insert_before(a0, v0, a1);\n
            return v3;\n
        }\n
    }\n
}\n
", "4201839:sub_401d6f": null, "4201840:cgc_size_cmp": "long long cgc_size_cmp(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long long *v1;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x48]\n
    unsigned long long *v3;  // [bp-0x38]\n
    unsigned long long *v4;  // [bp-0x30]\n
    unsigned long long *v5;  // [bp-0x20]\n
\n
    if (!a0)\n
        v1 = 0;\n
    else\n
        v1 = -9 + a0;\n
    v4 = v1;\n
    v5 = v4;\n
    if (!a1)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a1;\n
    v2 = v0;\n
    v3 = v2;\n
    return (*(v3) & -2) - (*(v5) & -2);\n
}\n
", "4202021:sub_401e25": null, "4202032:cgc_calloc": "long long cgc_calloc(unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
\n
    v0 = cgc_malloc(a0);\n
    if (v0)\n
    {\n
        cgc_memset(v0, 0, a0);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4202093:sub_401e6d": null, "4202096:cgc_realloc": "long long cgc_realloc(unsigned long a0, unsigned int a1)\n
{\n
    unsigned long v0;  // [bp-0x48], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x10]\n
\n
    if (!a0)\n
    {\n
        v5 = cgc_malloc(a1);\n
        return v5;\n
    }\n
    v4 = (*(cgc_ptr_to_chunk(a0)) & -2) - 16;\n
    if (a1 == v4)\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
    v3 = cgc_malloc(a1);\n
    v1 = v3;\n
    v2 = a0;\n
    if (a1 >= v4)\n
        v0 = v4;\n
    else\n
        v0 = a1;\n
    cgc_memcpy(v1, v2, v0);\n
    cgc_free(a0);\n
    v5 = v3;\n
    return v5;\n
}\n
", "4202300:sub_401f3c": null, "4202304:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long cgc_list_insert_before(struct_1 *a0, struct_3 *a1, unsigned long long a2[2])\n
{\n
    struct_1 *v1;  // rax, Other Possible Types: struct_3 *, unsigned long\n
\n
    if (!a2)\n
        return v1;\n
    a2[1] = 0;\n
    a2[0] = 0;\n
    if (!a0->field_0 && !a0->field_8)\n
    {\n
        a0->field_8 = &a2[0];\n
        a0->field_0 = &a2[0];\n
        return a0;\n
    }\n
    if (!a1)\n
    {\n
        a2[1] = a0->field_8;\n
        a0->field_8->field_0 = a2;\n
        a2[0] = 0;\n
        v1 = a0;\n
        a0->field_8 = &a2[0];\n
    }\n
    else if (a1 == a0->field_0)\n
    {\n
        a2[0] = a0->field_0;\n
        a0->field_0->field_8 = a2;\n
        a2[1] = 0;\n
        v1 = a0;\n
        a0->field_0 = &a2[0];\n
    }\n
    else\n
    {\n
        a2[1] = a1->field_8;\n
        a2[0] = a1;\n
        a1->field_8->field_0 = a2;\n
        v1 = a1;\n
        a1->field_8 = &a2[0];\n
    }\n
    return v1;\n
}\n
", "4202622:sub_40207e": null, "4202624:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_list_push_back(struct_0 *a0, unsigned long long a1)\n
{\n
    return cgc_list_insert_after(a0, a0->field_8, a1);\n
}\n
", "4202667:sub_4020ab": null, "4202672:cgc_list_insert_after": "long long cgc_list_insert_after(void* *a0, void* *a1, unsigned long long a2[2])\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (a1)\n
    {\n
        v1 = ::0x401f40::cgc_list_insert_before(a0, *(a1), a2);\n
        return v1;\n
    }\n
    v1 = ::0x401f40::cgc_list_insert_before(a0, *(a0), a2);\n
    return v1;\n
}\n
", "4202754:sub_402102": null, "4202768:cgc_rpncalc_init": "long long cgc_rpncalc_init(unsigned long long a0[2])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    return a0;\n
}\n
", "4202801:sub_402131": null, "4202816:cgc_rpncalc_destroy": "long long cgc_rpncalc_destroy(unsigned long long a0)\n
{\n
    return cgc_clear(a0);\n
}\n
", "4202843:sub_40215b": null, "4202848:cgc_clear": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_clear(unsigned long long *a0)\n
{\n
    unsigned long v0;  // [bp-0xa8]\n
    struct_0 *v1;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x90], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x88], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x78], Other Possible Types: unsigned long\n
    struct_0 *v5;  // [bp-0x70], Other Possible Types: unsigned long\n
    struct_0 *v6;  // [bp-0x68], Other Possible Types: unsigned long\n
    struct_0 *v7;  // [bp-0x60]\n
    unsigned long v8;  // [bp-0x58]\n
    struct_0 *v9;  // [bp-0x50]\n
    struct_0 *v10;  // [bp-0x48]\n
    unsigned long v11;  // [bp-0x40]\n
    struct_0 *v12;  // [bp-0x38]\n
    unsigned long v13;  // [bp-0x30]\n
    char v14;  // [bp-0x28]\n
    struct_0 *v15;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v16;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v18;  // rcx, Other Possible Types: unsigned long\n
    unsigned int v20;  // ftop\n
    unsigned long long v21;  // rsi\n
    unsigned long long v22;  // rdx\n
    unsigned long long v23;  // r8\n
    unsigned long long v24;  // r9\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
\n
    v13 = *(a0);\n
    if (!v13)\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        v18 = 8;\n
        v6 = -9 + v13;\n
    }\n
    v12 = v6;\n
    v16 = v12;\n
    if (!v16)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v11 = v16->field_8;\n
        if (!v11)\n
        {\n
            v5 = 0;\n
        }\n
        else\n
        {\n
            v18 = 8;\n
            v5 = -9 + v11;\n
        }\n
        v10 = v5;\n
        v4 = v10;\n
    }\n
    for (v15 = v4; v16; v15 = v1)\n
    {\n
        v9 = v16;\n
        if (v9)\n
            v3 = &v9->field_8;\n
        else\n
            v3 = 0;\n
        ::0x4023b0::cgc_list_remove(a0, v3);\n
        v20 = v26 - 1;\n
        [D] PutI(904:F64x8)[t8,0] = t11\n
        [D] PutI(968:I8x8)[t8,0] = 0x01\n
        *(&v0) = ([D] GetI(968:I8x8)[t22,0] ? [D] GetI(904:F64x8)[t22,0] : nan);\n
        [D] PutI(968:I8x8)[t22,0] = 0x00\n
        v26 = v20 + 1;\n
        if (cgc_get_type(a0, v21, v22, v18, v23, v24) == 1)\n
        {\n
            v25 = v26 - 1;\n
            [D] PutI(904:F64x8)[t9,0] = t12\n
            [D] PutI(968:I8x8)[t9,0] = 0x01\n
            *(&v0) = ([D] GetI(968:I8x8)[t23,0] ? [D] GetI(904:F64x8)[t23,0] : nan);\n
            [D] PutI(968:I8x8)[t23,0] = 0x00\n
            v26 = v25 + 1;\n
            if (!cgc_as_matrix(&v14))\n
                cgc_free(*(&v14));\n
        }\n
        cgc_free(v16);\n
        v16 = v15;\n
        if (!v16)\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v8 = *((v16 + 8));\n
            if (!v8)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v18 = 8;\n
                v2 = -9 + v8;\n
            }\n
            v7 = v2;\n
            v1 = v7;\n
        }\n
    }\n
    return 0;\n
}\n
", "4203350:sub_402356": null, "4203360:cgc_perform_rpncalc_op": "long long cgc_perform_rpncalc_op(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = (&rpncalc_ops)[a1](a0);\n
    return v0;\n
}\n
", "4203440:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long cgc_list_remove(unsigned long long a0[2], struct_0 *a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    if (!a1)\n
        return v1;\n
    if (!a1->field_8)\n
        a0[0] = a1->field_0;\n
    else\n
        a1->field_8->field_0 = a1->field_0;\n
    if (a1->field_0)\n
    {\n
        v1 = a1->field_0;\n
        *((v1 + 8)) = a1->field_8;\n
        return a1->field_0;\n
    }\n
    a0[1] = a1->field_8;\n
    return a0;\n
}\n
", "4203576:sub_402438": null, "4203584:cgc_get_type": "long long cgc_get_type(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned long v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if ([D] GetI(968:I8x8)[t8,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t19,0] = t20\n
    [D] PutI(968:I8x8)[t19,0] = 0x01\n
    [D] PutI(968:I8x8)[t19,0] = 0x00\n
    v0 = (0xffff00000000 & v2) >> 32;\n
    if ((0x7ff0000000000000 & v2) == 0x7ff0000000000000)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0 == 1)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
    v1 = 2;\n
    return v1;\n
}\n
", "4203713:sub_4024c1": null, "4203728:cgc_as_matrix": "long long cgc_as_matrix(unsigned long long *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned long v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t5,0] = t6\n
    [D] PutI(968:I8x8)[t5,0] = 0x01\n
    [D] PutI(968:I8x8)[t5,0] = 0x00\n
    if (!a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    if (cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0)) != 1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    *(a0) = 4294967295 & v2;\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203839:sub_40253f": null, "4203840:cgc_push": "long long cgc_push(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x54]\n
    unsigned int v2[2];  // [bp-0x50]\n
    unsigned long long v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    char v7;  // [bp-0x30]\n
    char v8;  // [bp-0x28]\n
    char v9;  // [bp-0x24]\n
    void* v10;  // [bp-0x20], Other Possible Types: unsigned long long\n
    unsigned long long v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned long long v14;  // rdx\n
    unsigned long long v15;  // rcx\n
    unsigned long long v16;  // rdi\n
\n
    v11 = a0;\n
    v10 = 0;\n
    *(&v2[0]) = 0;\n
    v10 = cgc_malloc(24);\n
    if (!v10)\n
    {\n
        v12 = -1;\n
        return v12;\n
    }\n
    if (cgc_read_all(0, &v9, 4) != 4)\n
    {\n
LABEL_402796:\n
        cgc_free(v10);\n
        v12 = -1;\n
        return v12;\n
    }\n
    v1 = *(&v9);\n
    if (!v1)\n
    {\n
        if (!(cgc_read_all(0, &v8, 4) == 4))\n
            goto LABEL_402796;\n
        cgc_set_integer(*(&v8), v10);\n
        goto LABEL_402770;\n
    }\n
    if (v1 != 1)\n
    {\n
        if (!(v1 == 2))\n
            goto LABEL_402796;\n
        v14 = 8;\n
        if (!(cgc_read_all(0, &v7, 8) == 8))\n
            goto LABEL_402796;\n
        v15 = 0x7ff0000000000000;\n
        if ((0x7ff0000000000000 & *(&v7)) == 0x7ff0000000000000)\n
            goto LABEL_402796;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v16 = v10;\n
        *(&v0) = ([D] GetI(968:I8x8)[t11,0] ? [D] GetI(904:F64x8)[t11,0] : nan);\n
        [D] PutI(968:I8x8)[t11,0] = 0x00\n
        cgc_set_double();\n
        goto LABEL_402770;\n
    }\n
    v5 = (*(&v9) & -0x1000000) >> 24;\n
    v4 = (*(&v9) & 0xff0000) >> 16;\n
    v3 = v4 * v5 * 8;\n
    if (v5 && v4)\n
    {\n
        *(&v2[0]) = cgc_malloc(v3 + 8);\n
        if (!v2)\n
            goto LABEL_402796;\n
        v2[0] = v5;\n
        v2[1] = v4;\n
        if (cgc_read_all(0, v2 + 1, v3) == v3)\n
        {\n
            v6 = 0;\n
            while (true)\n
            {\n
                if (v6 >= v3 >> 3)\n
                {\n
                    cgc_set_matrix(v2, v10);\n
LABEL_402770:\n
                    cgc_list_push_front(v11, v10 + 8);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                if ((0x7ff0000000000000 & *(&v2[1 + v6])) == 0x7ff0000000000000)\n
                    break;\n
                v6 += 1;\n
            }\n
        }\n
        cgc_free(v2);\n
        goto LABEL_402796;\n
    }\n
    goto LABEL_402796;\n
}\n
", "4204463:sub_4027af": null, "4204464:cgc_pop": "long long cgc_pop(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x6c]\n
    void* v2;  // [bp-0x68], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x60]\n
    unsigned long v4;  // [bp-0x58]\n
    unsigned int v5[2];  // [bp-0x50]\n
    unsigned long long v6;  // [bp-0x48]\n
    unsigned int v7;  // [bp-0x40]\n
    unsigned int v8;  // [bp-0x3c]\n
    char v9;  // [bp-0x38]\n
    char v10;  // [bp-0x30]\n
    unsigned int v11;  // [bp-0x2c]\n
    unsigned long long v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x1c]\n
    unsigned int v14;  // [bp-0xc]\n
\n
    v13 = -1;\n
    *(&v5[0]) = 0;\n
    v4 = cgc_list_pop_front(a0);\n
    if (!v4)\n
        v2 = 0;\n
    else\n
        v2 = -9 + v4;\n
    v3 = v2;\n
    v12 = v3;\n
    if (!v12)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    [D] PutI(904:F64x8)[t8,0] = t11\n
    [D] PutI(968:I8x8)[t8,0] = 0x01\n
    v0 = ([D] GetI(968:I8x8)[t22,0] ? [D] GetI(904:F64x8)[t22,0] : nan);\n
    [D] PutI(968:I8x8)[t22,0] = 0x00\n
    v11 = cgc_get_type(a0, a1, a2, 8, a4, a5, *(&v0));\n
    v1 = v11;\n
    if (!v1)\n
    {\n
        [D] PutI(904:F64x8)[t9,0] = t12\n
        [D] PutI(968:I8x8)[t9,0] = 0x01\n
        [D] PutI(968:I8x8)[t23,0] = 0x00\n
        if (!(!cgc_as_integer(&v10)))\n
            goto LABEL_402a11;\n
        if (!(cgc_write_all(1, &v11, 4) == 4))\n
            goto LABEL_402a11;\n
        if (!(cgc_write_all(1, &v10, 4) == 4))\n
            goto LABEL_402a11;\n
    }\n
    else if (v1 != 1)\n
    {\n
        if (!(v1 == 2))\n
            goto LABEL_402a11;\n
        [D] PutI(904:F64x8)[t9,0] = t12\n
        [D] PutI(968:I8x8)[t9,0] = 0x01\n
        [D] PutI(968:I8x8)[t23,0] = 0x00\n
        if (!(!cgc_as_double(&v9)))\n
            goto LABEL_402a11;\n
        if (!(cgc_write_all(1, &v11, 4) == 4))\n
            goto LABEL_402a11;\n
        if (!(cgc_write_all(1, &v9, 8) == 8))\n
            goto LABEL_402a11;\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t9,0] = t12\n
        [D] PutI(968:I8x8)[t9,0] = 0x01\n
        v0 = ([D] GetI(968:I8x8)[t23,0] ? [D] GetI(904:F64x8)[t23,0] : nan);\n
        [D] PutI(968:I8x8)[t23,0] = 0x00\n
        if (!(!cgc_as_matrix(v5, a1, a2, 8, a4, a5, *(&v0))))\n
            goto LABEL_402a11;\n
        v8 = v5[0] & 255;\n
        v7 = v5[1] & 255;\n
        v6 = v7 * v8 * 8;\n
        v11 = v8 * 0x1000000 | v7 * 0x10000 | 1;\n
        if (!(cgc_write_all(1, &v11, 4) == 4))\n
            goto LABEL_402a08;\n
        if (!(cgc_write_all(1, v5 + 1, v6) == v6))\n
            goto LABEL_402a08;\n
    }\n
    v13 = 0;\n
LABEL_402a08:\n
    cgc_free(v5);\n
LABEL_402a11:\n
    cgc_free(v12);\n
    v14 = v13;\n
    return v14;\n
}\n
", "4205097:sub_402a29": null, "4205104:cgc_add": "long long cgc_add(unsigned long long a0)\n
{\n
    return cgc_binary_op(a0, cgc_generic_add);\n
}\n
", "4205138:sub_402a52": null, "4205152:cgc_sub": "long long cgc_sub(unsigned long long a0)\n
{\n
    return cgc_binary_op(a0, cgc_generic_sub);\n
}\n
", "4205186:sub_402a82": null, "4205200:cgc_mul": "long long cgc_mul(unsigned long long a0)\n
{\n
    return cgc_binary_op(a0, cgc_generic_mul);\n
}\n
", "4205234:sub_402ab2": null, "4205248:cgc_div": "long long cgc_div(unsigned long long a0)\n
{\n
    return cgc_binary_op(a0, cgc_generic_div);\n
}\n
", "4205282:sub_402ae2": null, "4205296:cgc_inv": "long long cgc_inv(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x58]\n
    void* v1;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    char v4;  // [bp-0x38]\n
    unsigned long long v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v7;  // [bp-0x20], Other Possible Types: unsigned long long\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v7 = 0;\n
    v6 = 0;\n
    if (cgc_list_length(a0) < 1)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    v3 = cgc_list_pop_front(a0);\n
    if (!v3)\n
        v1 = 0;\n
    else\n
        v1 = -9 + v3;\n
    v2 = v1;\n
    v7 = v2;\n
    if (!v7)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    [D] PutI(904:F64x8)[t8,0] = t11\n
    [D] PutI(968:I8x8)[t8,0] = 0x01\n
    v0 = ([D] GetI(968:I8x8)[t22,0] ? [D] GetI(904:F64x8)[t22,0] : nan);\n
    [D] PutI(968:I8x8)[t22,0] = 0x00\n
    if (cgc_get_type(a0, a1, a2, 8, a4, a5, *(&v0)) == 1)\n
    {\n
        [D] PutI(904:F64x8)[t9,0] = t12\n
        [D] PutI(968:I8x8)[t9,0] = 0x01\n
        v0 = ([D] GetI(968:I8x8)[t23,0] ? [D] GetI(904:F64x8)[t23,0] : nan);\n
        [D] PutI(968:I8x8)[t23,0] = 0x00\n
        if (!cgc_as_matrix(&v5, a1, a2, 8, a4, a5, *(&v0)))\n
        {\n
            v6 = cgc_malloc(24);\n
            if (v6 && !cgc_matrix_inv(v5, &v4))\n
            {\n
                cgc_set_matrix(*(&v4), v6);\n
                cgc_list_push_front(a0, v6 + 8);\n
                cgc_free(v5);\n
                cgc_free(v7);\n
                v8 = 0;\n
                return v8;\n
            }\n
LABEL_402c3b:\n
            if (v7)\n
                cgc_list_push_front(a0, v7 + 8);\n
            cgc_free(v6);\n
            v8 = -1;\n
            return v8;\n
        }\n
    }\n
    goto LABEL_402c3b;\n
}\n
", "4205680:cgc_set_integer": "long long cgc_set_integer(unsigned long a0, unsigned long long *a1)\n
{\n
    void* v0;  // [bp-0x28]\n
\n
    v0 = 0;\n
    *(a1) = 0x7ff8000000000000 | v0 | a0;\n
    return a1;\n
}\n
", "4205755:sub_402cbb": null, "4205760:cgc_set_matrix": "long long cgc_set_matrix(unsigned long a0, unsigned long long *a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
\n
    v0 = 0x100000000;\n
    *(a1) = 0x7ff8000000000000 | v0 | a0;\n
    return a1;\n
}\n
", "4205829:sub_402d05": null, "4205840:cgc_set_double": "long long cgc_set_double(unsigned long long *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned long v0)\n
{\n
    if ([D] GetI(968:I8x8)[t8,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t9,0] = t10\n
    [D] PutI(968:I8x8)[t9,0] = 0x01\n
    [D] PutI(968:I8x8)[t9,0] = 0x00\n
    [D] PutI(904:F64x8)[t26,0] = t29\n
    [D] PutI(968:I8x8)[t26,0] = 0x01\n
    *(a0) = ([D] GetI(968:I8x8)[t42,0] ? [D] GetI(904:F64x8)[t42,0] : nan);\n
    [D] PutI(968:I8x8)[t42,0] = 0x00\n
    return a0;\n
}\n
", "4205864:sub_402d28": null, "4205872:cgc_list_push_front": "long long cgc_list_push_front(unsigned long long *a0, unsigned long long a1)\n
{\n
    return ::0x402d60::cgc_list_insert_before(a0, *(a0), a1);\n
}\n
", "4205914:sub_402d5a": null, "4205920:cgc_list_insert_before": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_list_insert_before(struct_3 *a0, struct_0 *a1, unsigned long long a2[2])\n
{\n
    struct_3 *v1;  // rax, Other Possible Types: unsigned long, struct_0 *\n
\n
    if (!a2)\n
        return v1;\n
    a2[1] = 0;\n
    a2[0] = 0;\n
    if (!a0->field_0 && !a0->field_8)\n
    {\n
        a0->field_8 = &a2[0];\n
        a0->field_0 = &a2[0];\n
        return a0;\n
    }\n
    if (!a1)\n
    {\n
        a2[1] = a0->field_8;\n
        a0->field_8->field_0 = a2;\n
        a2[0] = 0;\n
        v1 = a0;\n
        a0->field_8 = &a2[0];\n
    }\n
    else if (a1 == a0->field_0)\n
    {\n
        a2[0] = a0->field_0;\n
        a0->field_0->field_8 = a2;\n
        a2[1] = 0;\n
        v1 = a0;\n
        a0->field_0 = &a2[0];\n
    }\n
    else\n
    {\n
        a2[1] = a1->field_8;\n
        a2[0] = a1;\n
        a1->field_8->field_0 = a2;\n
        v1 = a1;\n
        a1->field_8 = &a2[0];\n
    }\n
    return v1;\n
}\n
", "4206238:sub_402e9e": null, "4206240:cgc_list_pop_front": "long long cgc_list_pop_front(unsigned long long *a0)\n
{\n
    void* v0;  // [bp-0x18]\n
\n
    v0 = *(a0);\n
    ::0x4023b0::cgc_list_remove(a0, v0);\n
    return v0;\n
}\n
", "4206286:sub_402ece": null, "4206288:cgc_as_integer": "long long cgc_as_integer(unsigned int *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned long v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t5,0] = t6\n
    [D] PutI(968:I8x8)[t5,0] = 0x01\n
    [D] PutI(968:I8x8)[t5,0] = 0x00\n
    if (!a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    if (cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0)))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    *(a0) = 4294967295 & v2;\n
    if (*(a0) == 0x80000000)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4206428:sub_402f5c": null, "4206432:cgc_as_double": "long long cgc_as_double(unsigned long long *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned long v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t5,0] = t6\n
    [D] PutI(968:I8x8)[t5,0] = 0x01\n
    [D] PutI(968:I8x8)[t5,0] = 0x00\n
    if (!a0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    if (cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0)) != 2)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    *(a0) = ([D] GetI(968:I8x8)[t9,0] ? [D] GetI(904:F64x8)[t9,0] : nan);\n
    [D] PutI(968:I8x8)[t9,0] = 0x00\n
    v1 = 0;\n
    return v1;\n
}\n
", "4206531:sub_402fc3": null, "4206544:cgc_binary_op": "long long cgc_binary_op(unsigned long a0, struct struct_0 **a1, unsigned int a2, unsigned long a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x88]\n
    unsigned long v1;  // [bp-0x80]\n
    void* v2;  // [bp-0x78], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x70], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x68]\n
    unsigned long v5;  // [bp-0x60]\n
    unsigned long v6;  // [bp-0x58]\n
    unsigned long v7;  // [bp-0x50]\n
    unsigned long long v8;  // [bp-0x48]\n
    unsigned long long v9;  // [bp-0x40]\n
    void* v10;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x30], Other Possible Types: unsigned long long\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct struct_0 **v13;  // [bp-0x20]\n
    unsigned int v14;  // [bp-0xc]\n
\n
    v13 = a1;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    if (cgc_list_length(a0) < 2)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    v7 = cgc_list_pop_front(a0);\n
    if (!v7)\n
        v3 = 0;\n
    else\n
        v3 = -9 + v7;\n
    v6 = v3;\n
    v11 = v6;\n
    if (!v11)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    v5 = cgc_list_pop_front(a0);\n
    if (!v5)\n
        v2 = 0;\n
    else\n
        v2 = -9 + v5;\n
    v4 = v2;\n
    v12 = v4;\n
    if (v12)\n
    {\n
        v10 = cgc_malloc(24);\n
        if (v10)\n
        {\n
            [D] PutI(904:F64x8)[t17,0] = t20\n
            [D] PutI(968:I8x8)[t17,0] = 0x01\n
            [D] PutI(904:F64x8)[t30,0] = t33\n
            [D] PutI(968:I8x8)[t30,0] = 0x01\n
            *(&v1) = ([D] GetI(968:I8x8)[t49,0] ? [D] GetI(904:F64x8)[t49,0] : nan);\n
            [D] PutI(968:I8x8)[t49,0] = 0x00\n
            [D] PutI(968:I8x8)[t59,0] = 0x00\n
            if (!v13(v10))\n
            {\n
                cgc_list_push_front(a0, v10 + 8);\n
                [D] PutI(904:F64x8)[t8,0] = t11\n
                [D] PutI(968:I8x8)[t8,0] = 0x01\n
                v0 = ([D] GetI(968:I8x8)[t22,0] ? [D] GetI(904:F64x8)[t22,0] : nan);\n
                [D] PutI(968:I8x8)[t22,0] = 0x00\n
                if (cgc_get_type(a0, a1, a2, &v0, a4, a5, *(&v0)) == 1)\n
                {\n
                    [D] PutI(904:F64x8)[t9,0] = t12\n
                    [D] PutI(968:I8x8)[t9,0] = 0x01\n
                    v0 = ([D] GetI(968:I8x8)[t23,0] ? [D] GetI(904:F64x8)[t23,0] : nan);\n
                    [D] PutI(968:I8x8)[t23,0] = 0x00\n
                    if (!cgc_as_matrix(&v9, a1, a2, &v0, a4, a5, *(&v0)))\n
                        cgc_free(v9);\n
                }\n
                cgc_free(v12);\n
                [D] PutI(904:F64x8)[t8,0] = t11\n
                [D] PutI(968:I8x8)[t8,0] = 0x01\n
                v0 = ([D] GetI(968:I8x8)[t22,0] ? [D] GetI(904:F64x8)[t22,0] : nan);\n
                [D] PutI(968:I8x8)[t22,0] = 0x00\n
                if (cgc_get_type(a0, a1, a2, &v0, a4, a5, *(&v0)) == 1)\n
                {\n
                    [D] PutI(904:F64x8)[t9,0] = t12\n
                    [D] PutI(968:I8x8)[t9,0] = 0x01\n
                    v0 = ([D] GetI(968:I8x8)[t23,0] ? [D] GetI(904:F64x8)[t23,0] : nan);\n
                    [D] PutI(968:I8x8)[t23,0] = 0x00\n
                    if (!cgc_as_matrix(&v8, a1, a2, &v0, a4, a5, *(&v0)))\n
                        cgc_free(v8);\n
                }\n
                cgc_free(v11);\n
                v14 = 0;\n
                return v14;\n
            }\n
        }\n
    }\n
    if (v12)\n
        cgc_list_push_front(a0, v12 + 8);\n
    if (v11)\n
        cgc_list_push_front(a0, v11 + 8);\n
    cgc_free(v10);\n
    v14 = -1;\n
    return v14;\n
}\n
", "4207136:cgc_generic_add": "long long cgc_generic_add(unsigned long long *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned long v17, unsigned long a6)\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    unsigned int v4;  // [bp-0x5c]\n
    unsigned int v5;  // [bp-0x58]\n
    unsigned int v6;  // [bp-0x54]\n
    unsigned int v7;  // [bp-0x50]\n
    unsigned int v8;  // [bp-0x4c]\n
    unsigned long long v9;  // [bp-0x48]\n
    unsigned long long v10;  // [bp-0x40]\n
    unsigned int v11[2];  // [bp-0x38]\n
    unsigned long long v12;  // [bp-0x30]\n
    unsigned long long v13;  // [bp-0x28]\n
    unsigned int v14;  // [bp-0x20]\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0xc]\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned long v29;  // rax\n
    unsigned int v30;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58[2];  // rax\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v63;  // ftop\n
    unsigned int v64[2];  // rax\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    unsigned int v67;  // ftop\n
    unsigned int v68;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70[2];  // rax\n
    unsigned int v71;  // ftop\n
\n
    v19 = v18 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v20 = v19 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v20 = v19 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t6,0] = t7\n
    [D] PutI(968:I8x8)[t6,0] = 0x01\n
    [D] PutI(968:I8x8)[t6,0] = 0x00\n
    v21 = v20 - 0;\n
    [D] PutI(904:F64x8)[t20,0] = t23\n
    [D] PutI(968:I8x8)[t20,0] = 0x01\n
    [D] PutI(904:F64x8)[t30,0] = t31\n
    [D] PutI(968:I8x8)[t30,0] = 0x01\n
    [D] PutI(968:I8x8)[t30,0] = 0x00\n
    if (!a0)\n
    {\n
        v16 = -1;\n
        return v16;\n
    }\n
    v23 = v21 + 1 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v24 = v23 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v24 = v23 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v25 = v24 + 1;\n
    v4 = cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0));\n
    v26 = v25 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v27 = v26 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v27 = v26 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v28 = v27 + 1;\n
    v29 = cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0));\n
    if (v4 < v29)\n
        cgc_swap(&v17, &a6);\n
    v30 = v28 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v31 = v30 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v31 = v30 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v32 = v31 + 1;\n
    v3 = cgc_get_type(a0, a1, a2, v29, a4, a5, *(&v0));\n
    if (!v3)\n
    {\n
        v33 = v32 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v35 = v33 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v35 = v33 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        v37 = v35 + 1;\n
        if (cgc_as_integer(&v15, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        v39 = v37 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v41 = v39 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v41 = v39 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
        [D] PutI(968:I8x8)[t7,0] = 0x00\n
        v43 = v41 + 1;\n
        v2 = cgc_get_type(a0, a1, a2, v3, a4, a5, *(&v0));\n
        if (!v2)\n
        {\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            if (cgc_as_integer(&v14, a1, a2, v2, a4, a5, *(&v0)))\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
            cgc_set_integer(v15 + v14, a0);\n
        }\n
        else if (v2 == 1)\n
        {\n
            v46 = v43 - 1;\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                v49 = v46 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v49 = v46 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            v51 = v49 + 1;\n
            if (cgc_as_matrix(&v12, a1, a2, v2, a4, a5, *(&v0)))\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
            *(&v11[0]) = cgc_malloc(*((v12 + 4)) * *(v12) * 8 + 8);\n
            if (!v11)\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
            v11[0] = *(v12);\n
            v11[1] = *((v12 + 4));\n
            for (v8 = 0; v8 < *(v12); v8 += 1)\n
            {\n
                for (v7 = 0; v7 < *((v12 + 4)); v7 += 1)\n
                {\n
                    v5 = v15;\n
                    v53 = v51 - 1;\n
                    if ([D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v54 = v53 - 1;\n
                        [D] PutI(904:F64x8)[t3,0] = t6\n
                        [D] PutI(968:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v54 = v53 - 1;\n
                        [D] PutI(904:F64x8)[t3,0] = t6\n
                        [D] PutI(968:I8x8)[t3,0] = 0x01\n
                    }\n
                    v55 = v54 - 1;\n
                    if ([D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v56 = v55 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v56 = v55 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    [D] PutI(904:F64x8)[t27,1] = t28\n
                    [D] PutI(968:I8x8)[t27,1] = 0x01\n
                    [D] PutI(968:I8x8)[t27,0] = 0x00\n
                    v57 = v56 + 1;\n
                    v58 = v11;\n
                    v58[1 + v8 + 2 * v58[0] * v7] = ([D] GetI(968:I8x8)[t74,0] ? [D] GetI(904:F64x8)[t74,0] : nan);\n
                    [D] PutI(968:I8x8)[t74,0] = 0x00\n
                    v51 = v57 + 1;\n
                    if ((0x7ff0000000000000 & *(&v11[1 + v8 + 2 * v11[0] * v7])) == 0x7ff0000000000000)\n
                    {\n
                        cgc_free(v11);\n
                        v16 = -1;\n
                        return v16;\n
                    }\n
                }\n
            }\n
            cgc_set_matrix(v11, a0);\n
        }\n
        else if (v2 != 2)\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        else\n
        {\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            if (cgc_as_double(&v9, a1, a2, v2, a4, a5, *(&v0)))\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
            v6 = v15;\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(904:F64x8)[t4,1] = t5\n
            [D] PutI(968:I8x8)[t4,1] = 0x01\n
            [D] PutI(968:I8x8)[t4,0] = 0x00\n
            v0 = ([D] GetI(968:I8x8)[t31,0] ? [D] GetI(904:F64x8)[t31,0] : nan);\n
            [D] PutI(968:I8x8)[t31,0] = 0x00\n
            cgc_set_double(a0, a1, a2, v2, a4, a5, *(&v0));\n
            if ((0x7ff0000000000000 & *(a0)) == 0x7ff0000000000000)\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
        }\n
        goto LABEL_403896;\n
        goto LABEL_403896;\n
    }\n
    if (v3 != 1)\n
    {\n
        if (v3 != 2)\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        if (cgc_as_double(&v10, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        if (cgc_as_double(&v9, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(904:F64x8)[t4,1] = t5\n
        [D] PutI(968:I8x8)[t4,1] = 0x01\n
        [D] PutI(968:I8x8)[t4,0] = 0x00\n
        v0 = ([D] GetI(968:I8x8)[t31,0] ? [D] GetI(904:F64x8)[t31,0] : nan);\n
        [D] PutI(968:I8x8)[t31,0] = 0x00\n
        cgc_set_double(a0, a1, a2, v3, a4, a5, *(&v0));\n
        if ((0x7ff0000000000000 & *(a0)) == 0x7ff0000000000000)\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        goto LABEL_403896;\n
    }\n
    v34 = v32 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v36 = v34 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v36 = v34 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
    [D] PutI(968:I8x8)[t8,0] = 0x00\n
    v38 = v36 + 1;\n
    if (cgc_as_matrix(&v13, a1, a2, v3, a4, a5, *(&v0)))\n
    {\n
        v16 = -1;\n
        return v16;\n
    }\n
    v40 = v38 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v42 = v40 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v42 = v40 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v44 = v42 + 1;\n
    v1 = cgc_get_type(a0, a1, a2, v3, a4, a5, *(&v0));\n
    if (v1 != 1)\n
    {\n
        if (v1 != 2)\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        v47 = v44 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v50 = v47 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v50 = v47 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        v52 = v50 + 1;\n
        if (cgc_as_double(&v9, a1, a2, v1, a4, a5, *(&v0)))\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        *(&v11[0]) = cgc_malloc(*((v13 + 4)) * *(v13) * 8 + 8);\n
        if (!v11)\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        v11[0] = *(v13);\n
        v11[1] = *((v13 + 4));\n
        for (v8 = 0; v8 < *(v13); v8 += 1)\n
        {\n
            for (v7 = 0; v7 < *((v13 + 4)); v7 += 1)\n
            {\n
                v59 = v52 - 1;\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    v60 = v59 - 1;\n
                    [D] PutI(904:F64x8)[t6,0] = t9\n
                    [D] PutI(968:I8x8)[t6,0] = 0x01\n
                }\n
                else\n
                {\n
                    v60 = v59 - 1;\n
                    [D] PutI(904:F64x8)[t6,0] = t9\n
                    [D] PutI(968:I8x8)[t6,0] = 0x01\n
                }\n
                v61 = v60 - 1;\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    v62 = v61 - 1;\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v62 = v61 - 1;\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(904:F64x8)[t27,1] = t28\n
                [D] PutI(968:I8x8)[t27,1] = 0x01\n
                [D] PutI(968:I8x8)[t27,0] = 0x00\n
                v63 = v62 + 1;\n
                v64 = v11;\n
                v64[1 + v8 + 2 * v64[0] * v7] = ([D] GetI(968:I8x8)[t74,0] ? [D] GetI(904:F64x8)[t74,0] : nan);\n
                [D] PutI(968:I8x8)[t74,0] = 0x00\n
                v52 = v63 + 1;\n
                if ((0x7ff0000000000000 & *(&v11[1 + v8 + 2 * v11[0] * v7])) == 0x7ff0000000000000)\n
                {\n
                    cgc_free(v11);\n
                    v16 = -1;\n
                    return v16;\n
                }\n
            }\n
        }\n
        cgc_set_matrix(v11, a0);\n
        goto LABEL_403896;\n
        goto LABEL_403896;\n
    }\n
    else\n
    {\n
        v45 = v44 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v48 = v45 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v48 = v45 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        v71 = v48 + 1;\n
        if (cgc_as_matrix(&v12, a1, a2, v1, a4, a5, *(&v0)))\n
        {\n
            v16 = -1;\n
            return v16;\n
        }\n
        if (*(v13) == *(v12) && *((v13 + 4)) == *((v12 + 4)))\n
        {\n
            *(&v11[0]) = cgc_malloc(*((v13 + 4)) * *(v13) * 8 + 8);\n
            if (!v11)\n
            {\n
                v16 = -1;\n
                return v16;\n
            }\n
            v11[0] = *(v13);\n
            v11[1] = *((v13 + 4));\n
            for (v8 = 0; v8 < *(v13); v8 += 1)\n
            {\n
                for (v7 = 0; v7 < *((v13 + 4)); v7 += 1)\n
                {\n
                    v65 = v71 - 1;\n
                    if ([D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v66 = v65 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v66 = v65 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    v67 = v66 - 1;\n
                    if ([D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v68 = v67 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v68 = v67 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    [D] PutI(904:F64x8)[t27,1] = t28\n
                    [D] PutI(968:I8x8)[t27,1] = 0x01\n
                    [D] PutI(968:I8x8)[t27,0] = 0x00\n
                    v69 = v68 + 1;\n
                    v70 = v11;\n
                    v70[1 + v8 + 2 * v70[0] * v7] = ([D] GetI(968:I8x8)[t74,0] ? [D] GetI(904:F64x8)[t74,0] : nan);\n
                    [D] PutI(968:I8x8)[t74,0] = 0x00\n
                    v71 = v69 + 1;\n
                    if ((0x7ff0000000000000 & *(&v11[1 + v8 + 2 * v11[0] * v7])) == 0x7ff0000000000000)\n
                    {\n
                        cgc_free(v11);\n
                        v16 = -1;\n
                        return v16;\n
                    }\n
                }\n
            }\n
            cgc_set_matrix(v11, a0);\n
LABEL_403896:\n
            v16 = 0;\n
            return v16;\n
        }\n
        v16 = -1;\n
        return v16;\n
    }\n
}\n
", "4208974:sub_40394e": null, "4208976:cgc_list_length": "long long cgc_list_length(struct struct_0 **a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    for (v0 = &*(a0)->field_0; v0; v0 = *(v0))\n
    {\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4209043:sub_403993": null, "4209056:cgc_swap": "long long cgc_swap(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
\n
    [D] PutI(904:F64x8)[t31,0] = t34\n
    [D] PutI(968:I8x8)[t31,0] = 0x01\n
    *(&v0) = ([D] GetI(968:I8x8)[t46,0] ? [D] GetI(904:F64x8)[t46,0] : nan);\n
    [D] PutI(968:I8x8)[t46,0] = 0x00\n
    [D] PutI(904:F64x8)[t56,0] = t59\n
    [D] PutI(968:I8x8)[t56,0] = 0x01\n
    *(a0) = ([D] GetI(968:I8x8)[t72,0] ? [D] GetI(904:F64x8)[t72,0] : nan);\n
    [D] PutI(968:I8x8)[t72,0] = 0x00\n
    [D] PutI(904:F64x8)[t81,0] = t84\n
    [D] PutI(968:I8x8)[t81,0] = 0x01\n
    *(a1) = ([D] GetI(968:I8x8)[t97,0] ? [D] GetI(904:F64x8)[t97,0] : nan);\n
    [D] PutI(968:I8x8)[t97,0] = 0x00\n
    return a1;\n
}\n
", "4209100:sub_4039cc": null, "4209104:cgc_generic_sub": null, "4209711:sub_403c2f": null, "4209712:cgc_generic_mul": "long long cgc_generic_mul(unsigned long long *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned long long v18, unsigned long long a6)\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v5;  // [bp-0x5c]\n
    unsigned int v6;  // [bp-0x58]\n
    unsigned int v7;  // [bp-0x54]\n
    unsigned int v8;  // [bp-0x50]\n
    unsigned int v9;  // [bp-0x4c]\n
    unsigned long long v10;  // [bp-0x48]\n
    unsigned long long v11;  // [bp-0x40]\n
    unsigned int v12[2];  // [bp-0x38]\n
    unsigned long long v13;  // [bp-0x30]\n
    unsigned long long v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    unsigned int v17;  // [bp-0xc]\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned long v30;  // rax\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v43;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v49;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v55;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59[2];  // rax\n
    unsigned int v60;  // ftop\n
    unsigned int v61;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v63;  // ftop\n
    unsigned int v64;  // ftop\n
    unsigned int v65[2];  // rax\n
    unsigned int v66;  // ftop\n
    unsigned int v67;  // ftop\n
    unsigned int v68;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70[2];  // rax\n
    unsigned int v71;  // ftop\n
    unsigned int v72;  // ftop\n
    unsigned int v73;  // ftop\n
    unsigned int v75;  // ftop\n
\n
    v20 = v19 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v21 = v20 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v21 = v20 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(904:F64x8)[t6,0] = t7\n
    [D] PutI(968:I8x8)[t6,0] = 0x01\n
    [D] PutI(968:I8x8)[t6,0] = 0x00\n
    v22 = v21 - 0;\n
    [D] PutI(904:F64x8)[t20,0] = t23\n
    [D] PutI(968:I8x8)[t20,0] = 0x01\n
    [D] PutI(904:F64x8)[t30,0] = t31\n
    [D] PutI(968:I8x8)[t30,0] = 0x01\n
    [D] PutI(968:I8x8)[t30,0] = 0x00\n
    if (!a0)\n
    {\n
        v17 = -1;\n
        return v17;\n
    }\n
    v24 = v22 + 1 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v25 = v24 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v25 = v24 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v26 = v25 + 1;\n
    v4 = cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0));\n
    v27 = v26 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v28 = v27 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v28 = v27 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v29 = v28 + 1;\n
    v30 = cgc_get_type(a0, a1, a2, a3, a4, a5, *(&v0));\n
    if (v4 < v30)\n
        cgc_swap(&v18, &a6);\n
    v31 = v29 - 1;\n
    if ([D] GetI(968:I8x8)[t3,0])\n
    {\n
        v32 = v31 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        v32 = v31 - 1;\n
        [D] PutI(904:F64x8)[t3,0] = t6\n
        [D] PutI(968:I8x8)[t3,0] = 0x01\n
    }\n
    v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
    [D] PutI(968:I8x8)[t7,0] = 0x00\n
    v33 = v32 + 1;\n
    v3 = cgc_get_type(a0, a1, a2, v30, a4, a5, *(&v0));\n
    if (!v3)\n
    {\n
        v34 = v33 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v36 = v34 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v36 = v34 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        v38 = v36 + 1;\n
        if (cgc_as_integer(&v16, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v17 = -1;\n
            return v17;\n
        }\n
        v40 = v38 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v42 = v40 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v42 = v40 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
        [D] PutI(968:I8x8)[t7,0] = 0x00\n
        v44 = v42 + 1;\n
        v2 = cgc_get_type(a0, a1, a2, v3, a4, a5, *(&v0));\n
        if (!v2)\n
        {\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            if (cgc_as_integer(&v15, a1, a2, v2, a4, a5, *(&v0)))\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            cgc_set_integer(v15 * v16, a0);\n
        }\n
        else\n
        {\n
            if (v2 == 1)\n
            {\n
                v47 = v44 - 1;\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    v50 = v47 - 1;\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v50 = v47 - 1;\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
                [D] PutI(968:I8x8)[t8,0] = 0x00\n
                v52 = v50 + 1;\n
                if (cgc_as_matrix(&v13, a1, a2, v2, a4, a5, *(&v0)))\n
                {\n
                    v17 = -1;\n
                    return v17;\n
                }\n
                *(&v12[0]) = cgc_malloc(*((v13 + 4)) * *(v13) * 8 + 8);\n
                if (!v12)\n
                {\n
                    v17 = -1;\n
                    return v17;\n
                }\n
                v12[0] = *(v13);\n
                v12[1] = *((v13 + 4));\n
                for (v9 = 0; v9 < *(v13); v9 += 1)\n
                {\n
                    for (v8 = 0; v8 < *((v13 + 4)); v8 += 1)\n
                    {\n
                        v5 = v16;\n
                        v54 = v52 - 1;\n
                        if ([D] GetI(968:I8x8)[t3,0])\n
                        {\n
                            v55 = v54 - 1;\n
                            [D] PutI(904:F64x8)[t3,0] = t6\n
                            [D] PutI(968:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v55 = v54 - 1;\n
                            [D] PutI(904:F64x8)[t3,0] = t6\n
                            [D] PutI(968:I8x8)[t3,0] = 0x01\n
                        }\n
                        v56 = v55 - 1;\n
                        if (![D] GetI(968:I8x8)[t3,0])\n
                        {\n
                            v57 = v56 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v57 = v56 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        [D] PutI(904:F64x8)[t27,1] = t28\n
                        [D] PutI(968:I8x8)[t27,1] = 0x01\n
                        [D] PutI(968:I8x8)[t27,0] = 0x00\n
                        v58 = v57 + 1;\n
                        v59 = v12;\n
                        v59[1 + v9 + 2 * v59[0] * v8] = ([D] GetI(968:I8x8)[t74,0] ? [D] GetI(904:F64x8)[t74,0] : nan);\n
                        [D] PutI(968:I8x8)[t74,0] = 0x00\n
                        v52 = v58 + 1;\n
                        if ((0x7ff0000000000000 & *(&v12[1 + v9 + 2 * v12[0] * v8])) == 0x7ff0000000000000)\n
                        {\n
                            cgc_free(v12);\n
                            v17 = -1;\n
                            return v17;\n
                        }\n
                    }\n
                }\n
                cgc_set_matrix(v12, a0);\n
            }\n
            else\n
            {\n
                if (v2 != 2)\n
                {\n
                    v17 = -1;\n
                    return v17;\n
                }\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
                [D] PutI(968:I8x8)[t8,0] = 0x00\n
                if (cgc_as_double(&v10, a1, a2, v2, a4, a5, *(&v0)))\n
                {\n
                    v17 = -1;\n
                    return v17;\n
                }\n
                v6 = v16;\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(968:I8x8)[t3,0])\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(904:F64x8)[t3,0] = t6\n
                    [D] PutI(968:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(904:F64x8)[t4,1] = t5\n
                [D] PutI(968:I8x8)[t4,1] = 0x01\n
                [D] PutI(968:I8x8)[t4,0] = 0x00\n
                v0 = ([D] GetI(968:I8x8)[t31,0] ? [D] GetI(904:F64x8)[t31,0] : nan);\n
                [D] PutI(968:I8x8)[t31,0] = 0x00\n
                cgc_set_double(a0, a1, a2, v2, a4, a5, *(&v0));\n
                if ((0x7ff0000000000000 & *(a0)) == 0x7ff0000000000000)\n
                {\n
                    v17 = -1;\n
                    return v17;\n
                }\n
            }\n
        }\n
    }\n
    else if (v3 == 1)\n
    {\n
        v35 = v33 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v37 = v35 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v37 = v35 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        v39 = v37 + 1;\n
        if (cgc_as_matrix(&v14, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v17 = -1;\n
            return v17;\n
        }\n
        v41 = v39 - 1;\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            v43 = v41 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v43 = v41 - 1;\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t7,0] ? [D] GetI(904:F64x8)[t7,0] : nan);\n
        [D] PutI(968:I8x8)[t7,0] = 0x00\n
        v45 = v43 + 1;\n
        v1 = cgc_get_type(a0, a1, a2, v3, a4, a5, *(&v0));\n
        if (v1 == 1)\n
        {\n
            v46 = v45 - 1;\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                v49 = v46 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v49 = v46 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            v75 = v49 + 1;\n
            if (cgc_as_matrix(&v13, a1, a2, v1, a4, a5, *(&v0)))\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            if (*(v14) != *((v13 + 4)))\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            *(&v12[0]) = cgc_malloc(*((v14 + 4)) * *(v13) * 8 + 8);\n
            if (!v12)\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            v12[0] = *(v13);\n
            v12[1] = *((v14 + 4));\n
            for (v9 = 0; v9 < v12[1] * v12[0]; v9 += 1)\n
            {\n
                *(&v12[1 + v9]) = 0;\n
            }\n
            for (v9 = 0; v9 < v12[1]; v9 += 1)\n
            {\n
                for (v8 = 0; v8 < v12[0]; v8 += 1)\n
                {\n
                    for (v7 = 0; v7 < *(v14); v7 += 1)\n
                    {\n
                        v66 = v75 - 1;\n
                        if ([D] GetI(968:I8x8)[t3,0])\n
                        {\n
                            v67 = v66 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v67 = v66 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        v68 = v67 - 1;\n
                        if ([D] GetI(968:I8x8)[t3,0])\n
                        {\n
                            v69 = v68 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v69 = v68 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        v70 = v12;\n
                        v71 = v69 - 1;\n
                        if ([D] GetI(968:I8x8)[t3,0])\n
                        {\n
                            v72 = v71 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v72 = v71 - 1;\n
                            [D] PutI(904:F64x8)[t6,0] = t9\n
                            [D] PutI(968:I8x8)[t6,0] = 0x01\n
                        }\n
                        [D] PutI(904:F64x8)[t24,0] = t28\n
                        [D] PutI(968:I8x8)[t24,0] = 0x01\n
                        [D] PutI(904:F64x8)[t24,2] = t21\n
                        [D] PutI(968:I8x8)[t24,2] = 0x01\n
                        [D] PutI(904:F64x8)[t39,1] = t40\n
                        [D] PutI(968:I8x8)[t39,1] = 0x01\n
                        [D] PutI(968:I8x8)[t39,0] = 0x00\n
                        v73 = v72 + 1;\n
                        [D] PutI(904:F64x8)[t59,1] = t60\n
                        [D] PutI(968:I8x8)[t59,1] = 0x01\n
                        [D] PutI(968:I8x8)[t59,0] = 0x00\n
                        v70[1 + v8 + 2 * v70[0] * v9] = ([D] GetI(968:I8x8)[t87,0] ? [D] GetI(904:F64x8)[t87,0] : nan);\n
                        [D] PutI(968:I8x8)[t87,0] = 0x00\n
                        v75 = v73 + 1 + 1;\n
                        if ((0x7ff0000000000000 & *(&v12[1 + v8 + 2 * v12[0] * v9])) == 0x7ff0000000000000)\n
                        {\n
                            cgc_free(v12);\n
                            v17 = -1;\n
                            return v17;\n
                        }\n
                    }\n
                }\n
            }\n
            cgc_set_matrix(v12, a0);\n
        }\n
        else\n
        {\n
            if (v1 != 2)\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            v48 = v45 - 1;\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                v51 = v48 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v51 = v48 - 1;\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
            [D] PutI(968:I8x8)[t8,0] = 0x00\n
            v53 = v51 + 1;\n
            if (cgc_as_double(&v10, a1, a2, v1, a4, a5, *(&v0)))\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            *(&v12[0]) = cgc_malloc(*((v14 + 4)) * *(v14) * 8 + 8);\n
            if (!v12)\n
            {\n
                v17 = -1;\n
                return v17;\n
            }\n
            v12[0] = *(v14);\n
            v12[1] = *((v14 + 4));\n
            for (v9 = 0; v9 < *(v14); v9 += 1)\n
            {\n
                for (v8 = 0; v8 < *((v14 + 4)); v8 += 1)\n
                {\n
                    v60 = v53 - 1;\n
                    if ([D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v61 = v60 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v61 = v60 - 1;\n
                        [D] PutI(904:F64x8)[t6,0] = t9\n
                        [D] PutI(968:I8x8)[t6,0] = 0x01\n
                    }\n
                    v62 = v61 - 1;\n
                    if (![D] GetI(968:I8x8)[t3,0])\n
                    {\n
                        v63 = v62 - 1;\n
                        [D] PutI(904:F64x8)[t3,0] = t6\n
                        [D] PutI(968:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v63 = v62 - 1;\n
                        [D] PutI(904:F64x8)[t3,0] = t6\n
                        [D] PutI(968:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(904:F64x8)[t27,1] = t28\n
                    [D] PutI(968:I8x8)[t27,1] = 0x01\n
                    [D] PutI(968:I8x8)[t27,0] = 0x00\n
                    v64 = v63 + 1;\n
                    v65 = v12;\n
                    v65[1 + v9 + 2 * v65[0] * v8] = ([D] GetI(968:I8x8)[t74,0] ? [D] GetI(904:F64x8)[t74,0] : nan);\n
                    [D] PutI(968:I8x8)[t74,0] = 0x00\n
                    v53 = v64 + 1;\n
                    if ((0x7ff0000000000000 & *(&v12[1 + v9 + 2 * v12[0] * v8])) == 0x7ff0000000000000)\n
                    {\n
                        cgc_free(v12);\n
                        v17 = -1;\n
                        return v17;\n
                    }\n
                }\n
            }\n
            cgc_set_matrix(v12, a0);\n
        }\n
    }\n
    else if (v3 != 2)\n
    {\n
        v17 = -1;\n
        return v17;\n
    }\n
    else\n
    {\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        if (cgc_as_double(&v11, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v17 = -1;\n
            return v17;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        v0 = ([D] GetI(968:I8x8)[t8,0] ? [D] GetI(904:F64x8)[t8,0] : nan);\n
        [D] PutI(968:I8x8)[t8,0] = 0x00\n
        if (cgc_as_double(&v10, a1, a2, v3, a4, a5, *(&v0)))\n
        {\n
            v17 = -1;\n
            return v17;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(904:F64x8)[t4,1] = t5\n
        [D] PutI(968:I8x8)[t4,1] = 0x01\n
        [D] PutI(968:I8x8)[t4,0] = 0x00\n
        v0 = ([D] GetI(968:I8x8)[t31,0] ? [D] GetI(904:F64x8)[t31,0] : nan);\n
        [D] PutI(968:I8x8)[t31,0] = 0x00\n
        cgc_set_double(a0, a1, a2, v3, a4, a5, *(&v0));\n
        if ((0x7ff0000000000000 & *(a0)) == 0x7ff0000000000000)\n
        {\n
            v17 = -1;\n
            return v17;\n
        }\n
    }\n
    v17 = 0;\n
    return v17;\n
}\n
", "4211644:sub_4043bc": null, "4211648:cgc_generic_div": null, "4213870:sub_404c6e": null, "4213872:cgc_matrix_inv": "long long cgc_matrix_inv(unsigned int a0[2], struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long v5;  // cc_dep1\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0 + 1;\n
    if (!a1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (a0[0] == a0[1] && a0[0] <= 2)\n
    {\n
        if (a0[0] == 1)\n
        {\n
            [D] PutI(904:F64x8)[t6,0] = t9\n
            [D] PutI(968:I8x8)[t6,0] = 0x01\n
            *(&v2) = ([D] GetI(968:I8x8)[t21,0] ? [D] GetI(904:F64x8)[t21,0] : nan);\n
            [D] PutI(968:I8x8)[t21,0] = 0x00\n
        }\n
        else if (a0[0] == 2)\n
        {\n
            [D] PutI(904:F64x8)[t11,0] = t14\n
            [D] PutI(968:I8x8)[t11,0] = 0x01\n
            [D] PutI(904:F64x8)[t23,0] = t26\n
            [D] PutI(968:I8x8)[t23,0] = 0x01\n
            [D] PutI(904:F64x8)[t35,0] = t38\n
            [D] PutI(968:I8x8)[t35,0] = 0x01\n
            [D] PutI(904:F64x8)[t47,0] = t50\n
            [D] PutI(968:I8x8)[t47,0] = 0x01\n
            [D] PutI(904:F64x8)[t57,1] = t58\n
            [D] PutI(968:I8x8)[t57,1] = 0x01\n
            [D] PutI(968:I8x8)[t57,0] = 0x00\n
            [D] PutI(904:F64x8)[t80,0] = t84\n
            [D] PutI(968:I8x8)[t80,0] = 0x01\n
            [D] PutI(904:F64x8)[t80,2] = t77\n
            [D] PutI(968:I8x8)[t80,2] = 0x01\n
            [D] PutI(904:F64x8)[t95,1] = t96\n
            [D] PutI(968:I8x8)[t95,1] = 0x01\n
            [D] PutI(968:I8x8)[t95,0] = 0x00\n
            [D] PutI(904:F64x8)[t115,1] = t116\n
            [D] PutI(968:I8x8)[t115,1] = 0x01\n
            [D] PutI(968:I8x8)[t115,0] = 0x00\n
            *(&v2) = ([D] GetI(968:I8x8)[t140,0] ? [D] GetI(904:F64x8)[t140,0] : nan);\n
            [D] PutI(968:I8x8)[t140,0] = 0x00\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if ((0x7ff0000000000000 & v2) == 0x7ff0000000000000)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if ([D] GetI(968:I8x8)[t3,0])\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(904:F64x8)[t2,0] = t5\n
        [D] PutI(968:I8x8)[t2,0] = 0x01\n
        [D] PutI(904:F64x8)[t15,0] = t19\n
        [D] PutI(968:I8x8)[t15,0] = 0x01\n
        [D] PutI(904:F64x8)[t15,1] = t12\n
        [D] PutI(968:I8x8)[t15,1] = 0x01\n
        v5 = CmpF(([D] GetI(968:I8x8)[t36,0] ? [D] GetI(904:F64x8)[t36,0] : nan), ([D] GetI(968:I8x8)[t36,1] ? [D] GetI(904:F64x8)[t36,1] : nan)) & 69;\n
        [D] PutI(968:I8x8)[t36,0] = 0x00\n
        [D] PutI(904:F64x8)[t50,0] = t51\n
        [D] PutI(968:I8x8)[t50,0] = 0x01\n
        [D] PutI(968:I8x8)[t50,0] = 0x00\n
        if ((((CmpF(([D] GetI(968:I8x8)[t36,0] ? [D] GetI(904:F64x8)[t36,0] : nan), ([D] GetI(968:I8x8)[t36,1] ? [D] GetI(904:F64x8)[t36,1] : nan)) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        v6 = cgc_malloc(a0[1] * a0[0] * 8 + 8);\n
        *(a1) = v6;\n
        if (!v6)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        *(a1)->field_0 = a0[0];\n
        *(a1)->field_4 = a0[1];\n
        if (*(a1)->field_0 == 1)\n
        {\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(904:F64x8)[t3,0] = t6\n
            [D] PutI(968:I8x8)[t3,0] = 0x01\n
            [D] PutI(904:F64x8)[t13,1] = t14\n
            [D] PutI(968:I8x8)[t13,1] = 0x01\n
            [D] PutI(968:I8x8)[t13,0] = 0x00\n
            *(&*(a1)->field_8) = ([D] GetI(968:I8x8)[t42,0] ? [D] GetI(904:F64x8)[t42,0] : nan);\n
            [D] PutI(968:I8x8)[t42,0] = 0x00\n
        }\n
        else if (*(a1)->field_0 == 2)\n
        {\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(968:I8x8)[t3,0])\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(904:F64x8)[t3,0] = t6\n
                [D] PutI(968:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(904:F64x8)[t21,1] = t22\n
            [D] PutI(968:I8x8)[t21,1] = 0x01\n
            [D] PutI(968:I8x8)[t21,0] = 0x00\n
            *(&*(a1)->field_8) = ([D] GetI(968:I8x8)[t50,0] ? [D] GetI(904:F64x8)[t50,0] : nan);\n
            [D] PutI(968:I8x8)[t50,0] = 0x00\n
            [D] PutI(904:F64x8)[t62,0] = t65\n
            [D] PutI(968:I8x8)[t62,0] = 0x01\n
            [D] PutI(904:F64x8)[t72,0] = t73\n
            [D] PutI(968:I8x8)[t72,0] = 0x01\n
            [D] PutI(904:F64x8)[t84,0] = t87\n
            [D] PutI(968:I8x8)[t84,0] = 0x01\n
            [D] PutI(904:F64x8)[t94,1] = t95\n
            [D] PutI(968:I8x8)[t94,1] = 0x01\n
            [D] PutI(968:I8x8)[t94,0] = 0x00\n
            *(&*(a1)->field_10) = ([D] GetI(968:I8x8)[t123,0] ? [D] GetI(904:F64x8)[t123,0] : nan);\n
            [D] PutI(968:I8x8)[t123,0] = 0x00\n
            [D] PutI(904:F64x8)[t135,0] = t138\n
            [D] PutI(968:I8x8)[t135,0] = 0x01\n
            [D] PutI(904:F64x8)[t145,0] = t146\n
            [D] PutI(968:I8x8)[t145,0] = 0x01\n
            [D] PutI(904:F64x8)[t157,0] = t160\n
            [D] PutI(968:I8x8)[t157,0] = 0x01\n
            [D] PutI(904:F64x8)[t167,1] = t168\n
            [D] PutI(968:I8x8)[t167,1] = 0x01\n
            [D] PutI(968:I8x8)[t167,0] = 0x00\n
            *(&*(a1)->field_18) = ([D] GetI(968:I8x8)[t196,0] ? [D] GetI(904:F64x8)[t196,0] : nan);\n
            [D] PutI(968:I8x8)[t196,0] = 0x00\n
            [D] PutI(904:F64x8)[t206,0] = t209\n
            [D] PutI(968:I8x8)[t206,0] = 0x01\n
            [D] PutI(904:F64x8)[t218,0] = t221\n
            [D] PutI(968:I8x8)[t218,0] = 0x01\n
            [D] PutI(904:F64x8)[t228,1] = t229\n
            [D] PutI(968:I8x8)[t228,1] = 0x01\n
            [D] PutI(968:I8x8)[t228,0] = 0x00\n
            *(&*(a1)->field_20) = ([D] GetI(968:I8x8)[t257,0] ? [D] GetI(904:F64x8)[t257,0] : nan);\n
            [D] PutI(968:I8x8)[t257,0] = 0x00\n
        }\n
        v0 = 0;\n
        while (true)\n
        {\n
            if (v0 >= *(a1)->field_4 * *(a1)->field_0)\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            else if ((0x7ff0000000000000 & (&*(a1)->field_8)[v0]) != 0x7ff0000000000000)\n
            {\n
                v0 += 1;\n
            }\n
            else\n
            {\n
                cgc_free(*(a1));\n
                v3 = -1;\n
                return v3;\n
            }\n
        }\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4214525:sub_404efd": null, "4214528:main": "int main(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v5 = 0;\n
    v4 = a0;\n
    v3 = a1;\n
    cgc_rpncalc_init(v0);\n
    while (true)\n
    {\n
        do\n
        { } while (cgc_read_all(0, &v2, 4) != 4);\n
        if (*(&v2) == -1)\n
            break;\n
        v1 = cgc_perform_rpncalc_op(v0, *(&v2));\n
        cgc_write_all(1, &v1, 4);\n
    }\n
    cgc_rpncalc_destroy(v0);\n
    return 0;\n
}\n
", "4214664:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_allocate": null, "5242904:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}