{"4202496:_init": "extern struct_0 *g_407248;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407248;\n
    if (g_407248)\n
        v1 = g_407248();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407268;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407268;\n
    goto *(4223600);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4223576);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407240;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_407250;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407258;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407258)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (!v4)\n
        return 0;\n
    cgc_memset(v4, 0, v3);\n
    return v4;\n
}\n
", "4202959:sub_4021cf": null, "4202960:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4202979:sub_4021e3": null, "4202992:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4203011:sub_402203": null, "4203024:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4203043:sub_402223": null, "4203056:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4203075:sub_402243": null, "4203088:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4203107:sub_402263": null, "4203120:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4203139:sub_402283": null, "4203152:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4203171:sub_4022a3": null, "4203184:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4203203:sub_4022c3": null, "4203216:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4203235:sub_4022e3": null, "4203248:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4203267:sub_402303": null, "4203280:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203352:sub_402358": null, "4203360:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4203410:sub_402392": null, "4203424:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203448:sub_4023b8": null, "4203456:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4203472:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    void* v4;  // rax, Other Possible Types: unsigned long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rbp\n
    void* v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rbx\n
    unsigned long long v10;  // rsi\n
    unsigned long long v11;  // rax\n
\n
    v0 = v2;\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        if (v5)\n
        {\n
            v6 = a0->padding_c;\n
            if (v6 != v3)\n
            {\n
                do\n
                {\n
                    *(&a0->padding_0[v3 + 32]) = v5[*(&a0->padding_0[v3 + 32])];\n
                    v3 += 1;\n
                } while (v6 != v3);\n
            }\n
        }\n
        v7 = (a0->padding_c - a0->field_8);\n
        v8 = 0;\n
        while (true)\n
        {\n
            v9 = v8;\n
            if (v8 >= v7)\n
                break;\n
            v11 = cgc_transmit(a0, v10, v6, v8);\n
            v8 = (!v11 ? 0 : v0) + v9;\n
            if (v11)\n
                break;\n
        }\n
        v4 = -(v9 < v7);\n
    }\n
    *(&a0->field_8) = 0;\n
    return v4;\n
}\n
", "4203590:sub_402446": null, "4203676:sub_40249c": null, "4203680:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x38]\n
    struct_0 *v2;  // rbx\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    char *v4;  // rdi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v7;  // rax\n
    void* v9;  // r14, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v3 = a0->field_8;\n
    if (v3 != -1)\n
    {\n
        if (a0->field_4 != 1)\n
        {\n
            v4 = a0->field_10;\n
            if (v4)\n
            {\n
                v5 = v2->padding_c;\n
                if (v5 != v3)\n
                {\n
                    do\n
                    {\n
                        *(&v2->padding_0[v3 + 32]) = v4[*(&v2->padding_0[v3 + 32])];\n
                        v3 += 1;\n
                    } while (v5 != v3);\n
                }\n
            }\n
            v9 = 0;\n
            while (v9 < (v2->padding_c - v2->field_8))\n
            {\n
                v7 = cgc_transmit(v4, a1, v5, rcx<8>);\n
                v9 += (!v7 ? 0 : *(&v0));\n
                if (v7)\n
                    break;\n
            }\n
        }\n
        *(&v2->field_8) = 0;\n
    }\n
    v2->field_8 = -(a1 < 1);\n
    *(&v2->padding_c[0]) = 0;\n
    return -(a1 < 1);\n
}\n
", "4203846:sub_402546": null, "4203910:sub_402586": null, "4203920:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4203984:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // r13\n
    unsigned long long v4;  // r14\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long v8;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rax\n
    void* v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v11;  // eax\n
    char *v13;  // rbx\n
    char *v14;  // rax\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a1;\n
    if (a2->field_8 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v8);\n
        if (!v6)\n
        {\n
            v8 = v0;\n
            if (v8)\n
            {\n
                *(&a2->padding_c[0]) = v8;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rcx<8>, 0x20<8>), Shl(rcx<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v7 = a2->field_18;\n
                    if (v7)\n
                    {\n
                        a2 = 0;\n
                        do\n
                        {\n
                            v3[1].padding_0[a2] = v7[v3[1].padding_0[a2]];\n
                            a2 += 1;\n
                        } while (v8 != a2);\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v9 = v3->field_8;\n
    if (v9 != -1)\n
    {\n
        a2 = *(&v3->padding_c[0]) - v9;\n
        if (a2 > a1)\n
            a2 = a1;\n
        v0 = a2;\n
        a1 = &v3->padding_0[v9 + 32];\n
        cgc_memcpy();\n
        v10 = v0;\n
        v11 = v3->field_8 + v10;\n
        v3->field_8 = v11;\n
        if (v11 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v10 < v4))\n
            goto LABEL_40271d;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (0 >= a1)\n
        {\n
LABEL_40271d:\n
            return v10;\n
        }\n
    }\n
    while (true)\n
    {\n
        v13 = a0 + v10;\n
        v8 = cgc_receive(a0, a1, a2, v8);\n
        if (v8)\n
            return -1;\n
        a0 = v0;\n
        if (!a0)\n
            return -1;\n
        v14 = v3->field_18;\n
        if (v14)\n
        {\n
            a2 = 0;\n
            do\n
            {\n
                v13[a2] = v14[v13[a2]];\n
                a2 += 1;\n
            } while (a0 != a2);\n
        }\n
        v10 += a0;\n
        if (v10 >= v4)\n
            return v10;\n
    }\n
}\n
", "4204206:sub_4026ae": null, "4204335:sub_40272f": null, "4204336:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v2;  // r12\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
            {\n
                a3 = 1;\n
            }\n
            else\n
            {\n
                a3 = 2;\n
                if (v3 != a2)\n
                {\n
                    *((a0 + v1)) = v3;\n
                    a3 = 0;\n
                }\n
            }\n
            if (a3)\n
                break;\n
            v1 += 1;\n
            if (v2 == v1)\n
                goto LABEL_402789;\n
        }\n
        if (!(a3 == 2))\n
            goto LABEL_4027a8;\n
    }\n
LABEL_402789:\n
    if (v1 != v2)\n
    {\n
LABEL_4027a1:\n
        *((a0 + v1)) = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_4027a1;\n
    }\n
LABEL_4027a8:\n
    return -1;\n
}\n
", "4204398:sub_40276e": null, "4204475:sub_4027bb": null, "4204480:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_0 *v3;  // rbx\n
    unsigned int v4;  // eax\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edx\n
    unsigned long long v17;  // r8\n
    char *v18;  // rax\n
    char *v19;  // rdx\n
    void* v20;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v21;  // rax\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        if (v13)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v18 = a0->field_18;\n
            if (!v18)\n
                return v0;\n
            v0 = v18[v0];\n
        }\n
    }\n
    else\n
    {\n
        if (v4 == *(&a0->padding_c[0]))\n
        {\n
            *(&a0->field_8) = 0;\n
            v15 = cgc_receive(a0, v9, v10, v11);\n
            v16 = -1;\n
            if (!v15)\n
            {\n
                v17 = *(&v1);\n
                v16 = -1;\n
                if (v17)\n
                {\n
                    *(&a0->padding_c[0]) = v17;\n
                    if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
                    {\n
                        v19 = a0->field_18;\n
                        if (v19)\n
                        {\n
                            v20 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[v20] = v19[v3[1].padding_0[v20]];\n
                                v20 += 1;\n
                            } while (v17 != v20);\n
                        }\n
                    }\n
                    v16 = v17;\n
                }\n
            }\n
            if (v16 < 0)\n
                return 4294967295;\n
        }\n
        v21 = v3->field_8;\n
        v3->field_8 = v21 + 1;\n
        return v3[1].padding_0[v21];\n
    }\n
}\n
", "4204711:sub_4028a7": null, "4204720:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long v1;  // rax\n
\n
    malloc_free(&g_heap, a0);\n
    return v1;\n
}\n
", "4204738:sub_4028c2": null, "4204752:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x450]\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    unsigned long long v3;  // [bp-0x438], Other Possible Types: char\n
    struct_0 *v5;  // rbx\n
    unsigned long v6;  // r12, Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rax\n
    char *v8;  // r15\n
    unsigned long v9;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r14\n
    unsigned long v11;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v12;  // rsi\n
    struct_2 *v13;  // rdi\n
    unsigned long long v14;  // rdx\n
    unsigned long v15;  // rax\n
    void* v16;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // r12\n
    unsigned long long v18;  // rax\n
    void* v19;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v20;  // rdx, Other Possible Types: unsigned long long\n
    void* v21;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rbx\n
    unsigned long long v23;  // rax\n
    unsigned long long v25;  // r15\n
\n
    v5 = a2;\n
    v6 = a1;\n
    v0 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v7 = a2->field_c;\n
            if (v7 + a1 < 0x400)\n
            {\n
                v9 = 0;\n
                if (0 >= a1)\n
                    return 0;\n
            }\n
            else\n
            {\n
                v9 = 0x400 - v7;\n
                cgc_memcpy(&a2->padding_0[v7 + 32], v0, v9);\n
                v5->field_c = v5->field_c + v9;\n
                cgc_fflush(a2);\n
                if (v9 >= a1)\n
                    return 0x400 - v7;\n
            }\n
            v25 = a1 - v9;\n
            cgc_memcpy(&v5->padding_0[v5->field_c + 32], v0 + v9, v25);\n
            v5->field_c = v5->field_c + v25;\n
LABEL_402abe:\n
            return v6;\n
        }\n
    }\n
    v8 = a2->field_10;\n
    v21 = 0;\n
    if (v8)\n
    {\n
        v1 = a1;\n
        while (v21 < v6)\n
        {\n
            v10 = v21;\n
            v11 = v6 - v21;\n
            if (0x400 <= v11)\n
                v11 = 0x400;\n
            v12 = v0 + v21;\n
            v13 = &v3;\n
            v14 = v11;\n
            cgc_memcpy();\n
            if (v11)\n
            {\n
                v15 = 0;\n
                do\n
                {\n
                    *(&v3 + v15) = v8[*(&v3 + v15)];\n
                    v15 += 1;\n
                } while (v11 != v15);\n
            }\n
            v16 = 0;\n
            do\n
            {\n
                v17 = v16;\n
                if (v11 <= v16)\n
                {\n
                    v19 = v11;\n
                    break;\n
                }\n
                v18 = cgc_transmit(&v3, v12);\n
                v19 = 0;\n
                v20 = 0;\n
                if (!v18)\n
                    v20 = *(&v2);\n
                v16 = v20 + v17;\n
            } while (!v18);\n
            v21 = v19 + v10;\n
            tmp_4 = v17;\n
            v6 = v1;\n
            if (v11 > tmp_4)\n
            {\n
                if (v10 < v6)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        while (v21 < a1)\n
        {\n
            v22 = v21;\n
            v23 = cgc_transmit(a2, a1, a2, v21);\n
            v21 = (!v23 ? 0 : *(&v3)) + v22;\n
            if (v23)\n
            {\n
                if (v22 < a1)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    goto LABEL_402abe;\n
}\n
", "4204836:sub_402924": null, "4204971:sub_4029ab": null, "4205119:sub_402a3f": null, "4205270:sub_402ad6": null, "4205280:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    unsigned long v5;  // rbx\n
    unsigned long v8;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rdx, Other Possible Types: char\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rax\n
    unsigned long v12;  // rdi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned long v15;  // rdx\n
    char v16;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v5 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v5;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v9 = a1[0];\n
    v8 = 826981510;\n
    if (v3[0])\n
    {\n
        v10 = 1;\n
        do\n
        {\n
            v8 = __ROL__((v8 + v8 * 36) ^ v9, 13);\n
            v9 = v3[v10];\n
            v10 = v10 + 1;\n
        } while (v9);\n
    }\n
    v11 = 0;\n
    do\n
    {\n
        *((v5 + v11)) = v11;\n
        v11 += 1;\n
    } while (v11 != 0x100);\n
    v12 = 255;\n
    while (true)\n
    {\n
        v13 = v8;\n
        v14 = v8 * 3;\n
        v15 = (0 CONCAT v13) /m v12 >> 32;\n
        v8 = v14 / 0x200000 ^ __ROL__(v14, 13);\n
        v16 = *((v5 + v12));\n
        *((v5 + v12)) = *((v5 + v15));\n
        *((v5 + v15)) = v16;\n
        v12 -= 1;\n
    }\n
}\n
", "4205513:sub_402bc9": null, "4205520:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4205538:sub_402be2": null, "4205552:cgc_malloc_alloc": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    char padding_8[8];\n
    struct struct_4 *field_10;\n
    char padding_18[1016];\n
    struct struct_3 *field_410;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_2 *field_18;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_1 *field_18;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_4;\n
\n
long long cgc_malloc_alloc(struct_3 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // r15\n
    unsigned long v3;  // rsi, Other Possible Types: unsigned long long\n
    struct_3 *v4;  // r15\n
    struct_3 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rbx\n
    unsigned long v10;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v11;  // rbx, Other Possible Types: unsigned long, void*\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    struct_3 *v13;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v15;  // rbp\n
    unsigned long long v16;  // r15\n
    struct_5 *v17;  // rax\n
    unsigned long long v18;  // rbx\n
    unsigned long v19;  // rcx\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rax\n
    struct_1 *v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_0 *v24;  // rax\n
    struct_1 *v25;  // rdx\n
    unsigned long long v26;  // rax\n
    struct_3 *v27;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v28;  // rax\n
    struct_1 *v29;  // rax\n
    unsigned long long v30;  // r8\n
    unsigned long long v31;  // r9\n
    unsigned long long v32;  // rax\n
\n
    if (a1 > 2147483647)\n
    {\n
LABEL_402c05:\n
        return 0;\n
    }\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
    {\n
        v3 = 4;\n
    }\n
    else if (v2 <= 15)\n
    {\n
        v3 = v2;\n
    }\n
    else\n
    {\n
        if (v2 > 131071)\n
        {\n
            if (!cgc_allocate(a0, a1, v7))\n
            {\n
                v11 = *(&v0);\n
                *(v11) = a0;\n
                *((v11 + 8)) = v2 + 4111 & -0x1000;\n
                goto LABEL_402f25;\n
            }\n
            else\n
            {\n
                return 0;\n
            }\n
        }\n
        v4 = v2 + 31;\n
        v5 = v4 & -0x10;\n
        if (!(v4 & -0x10))\n
        {\n
            v10 = 4294967295;\n
        }\n
        else if (v5 <= 0x200)\n
        {\n
            v10 = (v4 >> 4) + 2;\n
        }\n
        else if (v5 <= 0x1200)\n
        {\n
            v10 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
        }\n
        else\n
        {\n
            v10 = 130;\n
            if (v5 <= 0x20000)\n
                v10 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
        }\n
        if (v10 <= 130)\n
        {\n
            do\n
            {\n
                v11 = (&a0->field_0)[v10];\n
                if (v11)\n
                {\n
                    while (*((v11 + 8)) < v5)\n
                    {\n
                        v11 = *((v11 + 24));\n
                        if (!v11)\n
                            goto LABEL_402d1f;\n
                    }\n
                }\n
LABEL_402d1f:\n
                v10 += 1;\n
            } while (v10 != 131);\n
            v10 = 131;\n
        }\n
        v11 = 0;\n
        if (v10 != 131)\n
        {\n
LABEL_402e29:\n
            v19 = *((v11 + 8));\n
            if (!(v19 & 1))\n
            {\n
                cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", v11);\n
            }\n
            else\n
            {\n
                v23 = v19 & -2;\n
                *((v11 + 8)) = v23;\n
                v24 = *((v11 + 16));\n
                if (v24)\n
                    v24->field_18 = *((v11 + 24));\n
                v25 = *((v11 + 24));\n
                if (v25)\n
                    v25->field_10 = v24;\n
                if ((&a0->field_0)[v10] == v11)\n
                    (&a0->field_0)[v10] = *((v11 + 24));\n
                *((v11 + 16)) = 0;\n
                v26 = v23 - v5;\n
                if (v26 < 33)\n
                {\n
LABEL_402f25:\n
                    v9 = v11 + 16;\n
                    return v9;\n
                }\n
                v13 = v11;\n
                a1 = v11 + v5;\n
                *((v11 + 8)) = v5;\n
                *((v11 + &v5->field_0)) = v5;\n
                *(&v5->padding_8[v11]) = v26;\n
                *((v23 + v11)) = v26;\n
                if (v26 <= 0x200)\n
                {\n
                    v27 = (v26 >> 4) + 2;\n
                }\n
                else if (v26 <= 0x1200)\n
                {\n
                    v27 = (v26 + 0x7ffffffe00 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v19 = 130;\n
                    if (!(v26 <= 0x20000))\n
                        goto LABEL_402ef1;\n
                    v27 = (v26 + 0x7ffffffee00 >> 11) + 66;\n
                }\n
                v19 = v27;\n
LABEL_402ef1:\n
                v28 = *((a1 + 8));\n
                if (!(v28 & 1))\n
                {\n
                    *((a1 + 8)) = v28 | 1;\n
                    *((a1 + 16)) = 0;\n
                    *((a1 + 24)) = (&a0->field_0)[v19];\n
                    (&a0->field_0)[v19] = a1;\n
                    v29 = *((a1 + 24));\n
                    if (v29)\n
                    {\n
                        v29->field_10 = a1;\n
                        goto LABEL_402f25;\n
                    }\n
                }\n
            }\n
LABEL_402f49:\n
            cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
            v32 = cgc_tiny_alloc(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a1, v13, v19, v30, v31);\n
            return v32;\n
        }\n
        else\n
        {\n
            v12 = 0;\n
            if (!cgc_allocate(a0, a1, v13))\n
            {\n
                v15 = *(&v0);\n
                v16 = v15 + 1048575;\n
                v12 = v16 & -0x100000;\n
                if (v12 > v15)\n
                    cgc_deallocate(a0);\n
                if ((v15 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *(1048 + &a0->field_0 + (v16 >> 20)) = 2;\n
            }\n
            if (v12)\n
            {\n
                v17 = v12 + 19;\n
                a1 = v17 & -0x10;\n
                a1->field_0 = 0;\n
                v18 = (v12 - a1) + 0x100000;\n
                v19 = v18 - 32;\n
                a1->field_8 = v19;\n
                v20 = v17 & -0x10;\n
                *((v18 + v20 - 32)) = v19;\n
                *((v18 + v20 - 24)) = 0;\n
                v21 = a1->field_8;\n
                if (!(!(v21 & 1)))\n
                    goto LABEL_402f49;\n
                a1->field_8 = v21 | 1;\n
                a1->field_10 = 0;\n
                a1->field_18 = &a0->field_410->field_0;\n
                a0->field_410 = &a1;\n
                v22 = a1->field_18;\n
                if (v22)\n
                    v22->field_10 = a1;\n
                v11 = a0->field_410;\n
                v10 = 130;\n
                goto LABEL_402e29;\n
            }\n
        }\n
        goto LABEL_402c05;\n
    }\n
    v9 = cgc_tiny_alloc(a0, v3);\n
    return v9;\n
}\n
", "4206432:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned int field_1430;\n
    char padding_1434[4];\n
    struct struct_2 *field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned short v3;  // bx\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    void* v7;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rbp\n
    unsigned long long v11;  // r13\n
    unsigned long long v12;  // r12\n
    unsigned long long *v13;  // rax, Other Possible Types: unsigned long\n
    unsigned short *v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rdx\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rbx\n
    unsigned int v19;  // ecx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v13 = *((a0 + v4 * 8));\n
    if (v13)\n
    {\n
        *((a0 + v5 * 8)) = *(v13);\n
        return v13;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (!v6)\n
    {\n
        if (!*((a0 + 5168)))\n
        {\n
            v7 = 0;\n
            if (!cgc_allocate(a0, a1, v8))\n
            {\n
                v10 = v0;\n
                v11 = v10 + 1048575;\n
                v12 = v11 & -0x100000;\n
                if (v12 > v10)\n
                    cgc_deallocate(a0);\n
                if ((v10 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *((a0 + (v11 >> 20) + 1048)) = 1;\n
                v7 = v12;\n
            }\n
            *((a0 + 5168)) = v7;\n
            if (!v7)\n
                return 0;\n
            *((a0 + 5176)) = 0;\n
        }\n
        v14 = *((a0 + 5168));\n
        v15 = *((a0 + 5176));\n
        v6 = v14 + v15;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v14 + v15)) = v3;\n
        *((2 + v14 + v15)) = v3;\n
        v16 = v15 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
    }\n
    v17 = *((v6 + 2));\n
    v13 = v6 + v17;\n
    v18 = a1 + v17;\n
    *((v6 + 2)) = v18;\n
    v19 = *(v6);\n
    if (v19 + v18 < 4097)\n
        return v13;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4206864:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r8\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // r9\n
    unsigned long v10;  // r11\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rsi\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r10\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rax\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rdx\n
    unsigned long v26;  // rdi\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4034e8;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                {\n
                    cgc_deallocate(a0, a1);\n
                    return v0;\n
                }\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v21 = a1 - 16;\n
        v7 = *((v21 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_4034e8;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_4034e8;\n
        }\n
        else\n
        {\n
            v8 = *(v21);\n
            v9 = v21;\n
            v10 = v21 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (v10 && !((*((v10 + 8)) & -2) == v8))\n
                goto LABEL_40350b;\n
            v9 = v21 + v7;\n
            if (*(v9) == v7)\n
            {\n
                if (v10)\n
                {\n
                    v15 = *((v10 + 8));\n
                    if ((v15 & 1))\n
                    {\n
                        v16 = v15 & -2;\n
                        if (v16 <= 15)\n
                        {\n
                            v17 = v15 / 4 - 1;\n
                        }\n
                        else if (v16 <= 0x200)\n
                        {\n
                            v17 = (v15 >> 4) + 2;\n
                        }\n
                        else if (v16 <= 0x1200)\n
                        {\n
                            v17 = (0x7ffffffe00 + v16 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v17 = 130;\n
                            if (v16 <= 0x20000)\n
                                v17 = (0x7ffffffee00 + v16 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v16;\n
                        v18 = *((v10 + 16));\n
                        if (v18)\n
                            *((v18 + 24)) = *((v10 + 24));\n
                        v19 = *((v10 + 24));\n
                        if (v19)\n
                            *((v19 + 16)) = v18;\n
                        if (*((v4 + (v17 << 3))) == v10)\n
                            *((v4 + v17 * 8)) = *((v10 + 24));\n
                        *((v10 + 16)) = 0;\n
                        v20 = v16 + *((v21 + 8));\n
                        *((v10 + 8)) = v20;\n
                        *(v9) = v20;\n
                        v21 = v10;\n
                    }\n
                }\n
                v22 = *((v9 + 8));\n
                if ((v22 & 1))\n
                {\n
                    v23 = v22 & -2;\n
                    if (v23 <= 15)\n
                    {\n
                        v24 = v22 / 4 - 1;\n
                    }\n
                    else if (v23 <= 0x200)\n
                    {\n
                        v24 = (v22 >> 4) + 2;\n
                    }\n
                    else if (v23 <= 0x1200)\n
                    {\n
                        v24 = (0x7ffffffe00 + v23 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v24 = 130;\n
                        if (v23 <= 0x20000)\n
                            v24 = (0x7ffffffee00 + v23 >> 11) + 66;\n
                    }\n
                    *((v9 + 8)) = v23;\n
                    v25 = *((v9 + 16));\n
                    if (v25)\n
                        *((v25 + 24)) = *((v9 + 24));\n
                    v26 = *((v9 + 24));\n
                    if (v26)\n
                        *((v26 + 16)) = v25;\n
                    if (*((v4 + (v24 << 3))) == v9)\n
                        *((v4 + v24 * 8)) = *((v9 + 24));\n
                    *((v9 + 16)) = 0;\n
                    v27 = v23 + *((v21 + 8));\n
                    *((v21 + 8)) = v27;\n
                    *((v21 + v27)) = v27;\n
                }\n
                v28 = *((v21 + 8));\n
                if (v28 <= 15)\n
                {\n
                    v3 = v28 / 4 - 1;\n
                }\n
                else if (v28 <= 0x200)\n
                {\n
                    v3 = (v28 >> 4) + 2;\n
                }\n
                else if (v28 <= 0x1200)\n
                {\n
                    v3 = (0x7ffffffe00 + v28 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v3 = 130;\n
                    if (v28 <= 0x20000)\n
                        v3 = (0x7ffffffee00 + v28 >> 11) + 66;\n
                }\n
                if ((v28 & 1))\n
                {\n
                    cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                }\n
                else\n
                {\n
                    *((v21 + 8)) = v28 | 1;\n
                    *((v21 + 16)) = 0;\n
                    *((v21 + 24)) = *((v4 + v3 * 8));\n
                    *((v4 + v3 * 8)) = v21;\n
                    v29 = *((v21 + 24));\n
                    if (!v29)\n
                        return v0;\n
                    *((v29 + 16)) = v21;\n
                    return v0;\n
                }\n
LABEL_40350b:\n
                v13 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                v14 = v10;\n
LABEL_403515:\n
                cgc_heap_error(v13, v14, v3);\n
                return cgc_malloc_size(v13, v14, v3, v3, v4, v9);\n
            }\n
            goto LABEL_4034f1;\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_4034e8:\n
    cgc_heap_error(v11, v3);\n
LABEL_4034f1:\n
    v13 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v14 = v9;\n
    goto LABEL_403515;\n
}\n
", "4207904:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4207948:sub_40354c": null, "4207952:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v4;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_403561:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_4035d9;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_4035d9;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_4035d9:\n
                v4 = cgc_malloc_alloc(a0, a2);\n
                if (v4)\n
                {\n
                    cgc_memcpy(v4, a1);\n
                    malloc_free(a0, a1);\n
                    return v4;\n
                }\n
                goto LABEL_403561;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4208202:sub_40364a": null, "4208208:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4208384:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4208420:sub_403724": null, "4208432:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4208478:sub_40375e": null, "4208480:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4208513:sub_403781": null, "4208528:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_4;  // tmp #4\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        do\n
        {\n
            a0[1 + a2] = *((a1 + a2 - 1));\n
            tmp_4 = a2;\n
            a2 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v1[v2] = *((a1 + v2));\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
}\n
", "4208593:sub_4037d1": null, "4208608:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return a0;\n
    v1 = 0;\n
    do\n
    {\n
        *((a0 + v1)) = a1;\n
        v1 += 1;\n
    } while (a2 != v1);\n
    return a0;\n
}\n
", "4208638:sub_4037fe": null, "4208640:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned int v32;  // ebp\n
    unsigned long long v33;  // rax\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    v32 = cgc_stdout->field_8;\n
    if (v32 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v33 = cgc__vsfprintf();\n
    if (v32 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v33;\n
    }\n
    return v33;\n
}\n
", "4208848:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = cgc_stdout->field_8;\n
    if (v1 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v2 = cgc__vsfprintf();\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208918:sub_403916": null, "4208928:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned int v30;  // ebp\n
    unsigned long long v31;  // rax\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    v30 = a0->field_8;\n
    if (v30 == -1)\n
        a0->field_8 = 0;\n
    v31 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    if (v30 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v31;\n
    }\n
    return v31;\n
}\n
", "4209130:sub_4039ea": null, "4209136:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = a0->field_8;\n
    if (v1 == -1)\n
        a0->field_8 = 0;\n
    v2 = cgc__vsfprintf(a1, a2, a0, 0);\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4209205:sub_403a35": null, "4209216:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4209369:sub_403ad9": null, "4209376:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4209395:sub_403af3": null, "4209408:cgc__vsfprintf": "long long cgc__vsfprintf(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned long v0;  // [bp-0x1c8]\n
    int tmp_70;  // tmp #70\n
    int tmp_50;  // tmp #50\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0xa1]\n
    unsigned long v2;  // [bp-0xa0]\n
    char v3;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x90]\n
    unsigned long v5;  // [bp-0x88]\n
    unsigned long v6;  // [bp-0x80]\n
    char v7;  // [bp-0x78]\n
    char v8;  // [bp-0x77]\n
    char v9;  // [bp-0x66]\n
    char v10;  // [bp-0x65]\n
    unsigned long v12;  // r14\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // rax, Other Possible Types: char\n
    unsigned long v15;  // rax\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // r15\n
    unsigned int v18;  // eax\n
    unsigned long v19;  // rcx\n
    unsigned int v20;  // esi\n
    char v21;  // r8b\n
    unsigned long v22;  // rcx\n
    char v23;  // dl\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rsi\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rcx\n
    unsigned long v28;  // rdx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rsi\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax\n
    unsigned long v33;  // rcx\n
    unsigned long v34;  // rbp\n
    unsigned long v37;  // rsi\n
    unsigned long v38;  // rdi\n
    unsigned long v40;  // rax\n
    unsigned long v42;  // r10\n
    unsigned long v43;  // rbp\n
    unsigned long v44;  // rbp\n
    unsigned long v45;  // rcx\n
    unsigned long v46;  // rsi\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rbp\n
    unsigned long v49;  // rdx\n
    unsigned long v50;  // rdx\n
    unsigned long v51;  // rsi\n
    unsigned long v52;  // rbp\n
    unsigned long v53;  // rax, Other Possible Types: char\n
    unsigned long v54;  // rsi\n
    unsigned long v55;  // rbp\n
    unsigned long v56;  // rbp\n
    unsigned long v57;  // r15\n
    unsigned long v58;  // rcx\n
    unsigned int v59;  // ebp\n
\n
    v12 = a3;\n
    v13 = a2;\n
    v4 = a1;\n
    v2 = a0;\n
    v6 = 20 + -0x1 * &v7;\n
    v16 = 0;\n
    while (true)\n
    {\n
        v14 = v2;\n
        v2 = v14 + 1;\n
        *(&v14) = *(v14);\n
        if (!*(&v14))\n
        {\n
LABEL_4040e9:\n
            if (v16 < 2147483647)\n
                goto LABEL_404102;\n
            if (v16 != -1)\n
                return v16;\n
LABEL_4040f8:\n
            cgc__terminate(a0);\n
LABEL_404102:\n
            if (v12)\n
            {\n
                *((v12 + v16)) = 0;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            while (v14 != 37)\n
            {\n
                if (v16 < 2147483647)\n
                {\n
                    v1 = v14;\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                        *((v12 + v16)) = v1;\n
                }\n
                else if (v16 == -1)\n
                {\n
                    goto LABEL_4040f8;\n
                }\n
                v16 += 1;\n
                v15 = v2;\n
                v2 = v15 + 1;\n
                v14 = *(v15);\n
                if (!v14)\n
                    goto LABEL_403b40;\n
            }\n
            v17 = v2;\n
            v2 = v17 + 1;\n
            v18 = *(v17);\n
            if (v18 == 48)\n
            {\n
                v3 = 48;\n
            }\n
            else\n
            {\n
                v3 = 32;\n
                if (v18 != 32)\n
                {\n
                    if (!v18)\n
                        goto LABEL_403b40;\n
                    v2 = v17;\n
                }\n
            }\n
            a0 = v2;\n
            if (*(a0) - 48 > 9)\n
                v53 = 0;\n
            else\n
                v53 = cgc_strtoul(a0, &v2, 10);\n
            v19 = v2;\n
            v2 = v19 + 1;\n
            v20 = *(v19);\n
            if (v20 == 108)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 108)\n
                {\n
                    v2 = v19 + 2;\n
                    v21 = 0;\n
                }\n
            }\n
            else if (v20 == 104)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 104)\n
                    v2 = v19 + 2;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    goto LABEL_403b40;\n
                v2 = v19;\n
                v21 = 1;\n
            }\n
            v22 = v2;\n
            v2 = v22 + 1;\n
            v23 = *(v22);\n
            v24 = *(v22);\n
            v25 = v24 - 88;\n
            if (v25 > 32)\n
            {\n
                v34 = v2 - v17;\n
                if (v24)\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v50 = 2147483647 - v16;\n
                        if (v50 > v34)\n
                            v50 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v50;\n
                            cgc_fwrite(v17, v50, v13);\n
                            v50 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(v12 + v16, v17, v50);\n
                    }\n
                    v56 = v34 + v16;\n
                    *(&v53) = 1;\n
                    tmp_4 = v16;\n
                    v16 = v56;\n
                    if (v56 < tmp_4)\n
                        goto LABEL_4040f8;\n
                    goto LABEL_403b42;\n
                }\n
                else\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v49 = 2147483647 - v16;\n
                        if (v49 > v34)\n
                            v49 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v49;\n
                            cgc_fwrite(v17, v49, v13);\n
                            v49 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(v12 + v16, v17, v49);\n
                    }\n
                    v55 = v34 + v16;\n
                    if (v16 >= v16)\n
                    {\n
                        v53 = 0;\n
                        v16 = v55;\n
                        goto LABEL_403b42;\n
                    }\n
                    goto LABEL_4040f8;\n
                }\n
            }\n
            v0 = 4831842305;\n
            if (!((*(&v0 + ((v25 & 63) >> 3)) >> (v25 & 63 & 7)) & 1))\n
            {\n
                if (v25 == 11)\n
                {\n
                    v26 = v4;\n
                    v27 = *(v26);\n
                    if (v27 <= 40)\n
                    {\n
                        v53 = v27 + *((v26 + 16));\n
                        *(v26) = v27 + 8;\n
                        if (!(v16 < 2147483647))\n
                            goto LABEL_403fd6;\n
                    }\n
                    else\n
                    {\n
                        v53 = *((v26 + 8));\n
                        *((v26 + 8)) = v53 + 8;\n
                        if (v16 >= 2147483647)\n
                        {\n
LABEL_403fd6:\n
                            if (v16 == -1)\n
                                goto LABEL_4040f8;\n
LABEL_403fe0:\n
                            v16 += 1;\n
                            *(&v53) = 1;\n
                            goto LABEL_403b42;\n
                        }\n
                    }\n
                    v1 = *(v53);\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                    {\n
                        *((v12 + v16)) = v1;\n
                        goto LABEL_403fe0;\n
                    }\n
                }\n
                else if (v25 == 27)\n
                {\n
                    v32 = v4;\n
                    v33 = *(v32);\n
                    if (v33 > 40)\n
                    {\n
                        v40 = *((v32 + 8));\n
                        *((v32 + 8)) = v40 + 8;\n
                    }\n
                    else\n
                    {\n
                        v40 = v33 + *((v32 + 16));\n
                        *(v32) = v33 + 8;\n
                    }\n
                    v43 = *(v40);\n
                    v53 = cgc_strlen(v43);\n
                    v57 = v53;\n
                    if (!(v16 < 2147483647))\n
                        goto LABEL_4040dc;\n
                    v3 = v43;\n
                    v48 = 2147483647 - v16;\n
                    if (v48 > v53)\n
                        v48 = v53;\n
                    if (v13)\n
                        cgc_fwrite(v3, v48, v13);\n
                    if (!v12)\n
                        goto LABEL_4040dc;\n
                    a0 = v12 + v16;\n
                    v54 = v3;\n
                    goto LABEL_4040d4;\n
                }\n
            }\n
            if (v23 == 100)\n
            {\n
                a0 = &v7;\n
                if (v21)\n
                {\n
                    v28 = v4;\n
                    v29 = *(v28);\n
                    if (v29 > 40)\n
                    {\n
                        v37 = *((v28 + 8));\n
                        *((v28 + 8)) = v37 + 8;\n
                    }\n
                    else\n
                    {\n
                        v37 = v29 + *((v28 + 16));\n
                        *(v28) = v29 + 8;\n
                    }\n
                    v42 = *(v37);\n
                    if (v42 < 0)\n
                    {\n
                        v7 = 45;\n
                        v42 = -(v42);\n
                        a0 = &v8;\n
                    }\n
                    *((a0 + 19)) = 0;\n
                    v5 = v53;\n
                    if (!v42)\n
                    {\n
                        v51 = a0 + 18;\n
                        *((a0 + 18)) = 48;\n
                    }\n
                    else\n
                    {\n
                        v51 = a0 + 19;\n
                        do\n
                        {\n
                            v45 = 3435973837 * v42 >> 35;\n
                            *((v51 - 1)) = *((4219644 + v42 + -10 * v45));\n
                            v51 -= 1;\n
                            tmp_70 = v42;\n
                            v42 = v45;\n
                        } while (tmp_70 > 9);\n
                    }\n
                    cgc_memmove(a0, v51, v51 - a0 + 20);\n
                    v52 = &v7;\n
                    goto LABEL_40402b;\n
                }\n
            }\n
            if (!v21)\n
            {\n
LABEL_403b40:\n
                v53 = 0;\n
                goto LABEL_403b42;\n
            }\n
            v30 = v4;\n
            v31 = *(v30);\n
            if (v31 > 40)\n
            {\n
                v38 = *((v30 + 8));\n
                *((v30 + 8)) = v38 + 8;\n
            }\n
            else\n
            {\n
                v38 = v31 + *((v30 + 16));\n
                *(v30) = v31 + 8;\n
            }\n
            v5 = v53;\n
            v47 = *(v38);\n
            if (v23 == 117)\n
                a0 = 10;\n
            else\n
                a0 = 16;\n
            v44 = (v23 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
            v10 = 0;\n
            v46 = &v10;\n
            if (!v47)\n
            {\n
                v9 = *(v44);\n
                v46 = &v9;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    *((v46 - 1)) = *((v44 + ((0 CONCAT v47) /m a0 >> 32)));\n
                    v46 = &v9;\n
                    tmp_50 = v47;\n
                    v47 = (0 CONCAT v47) /m a0;\n
                } while (tmp_50 >= a0);\n
            }\n
            v52 = &v7;\n
            cgc_memmove(&v7, v46, v6 + v46);\n
LABEL_40402b:\n
            v53 = cgc_strlen(v52);\n
            v57 = v53;\n
            v58 = v5;\n
            if (v58 > v53)\n
            {\n
                v59 = v53 - v58;\n
                do\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v1 = v3;\n
                        if (v13)\n
                            cgc_fwrite(&v1, 1, v13);\n
                        if (v12)\n
                            *((v12 + v16)) = v1;\n
                    }\n
                    else if (!(v16 == -1))\n
                    {\n
                        continue;\n
                    }\n
                    tmp_2 = v16;\n
                    v16 += 1;\n
                    tmp_12 = v59 + 1;\n
                    v59 += 1;\n
                } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                goto LABEL_4040f8;\n
            }\n
            if (!(v16 < 2147483647))\n
                goto LABEL_4040dc;\n
            v48 = 2147483647 - v16;\n
            if (v48 > v53)\n
                v48 = v53;\n
            if (v13)\n
                cgc_fwrite(&v7, v48, v13);\n
            if (!v12)\n
                goto LABEL_4040dc;\n
            a0 = v12 + v16;\n
            v54 = &v7;\n
LABEL_4040d4:\n
            cgc_memcpy(a0, v54, v48);\n
LABEL_4040dc:\n
            *(&v53) = 1;\n
            tmp_2 = v16;\n
            v16 += v57;\n
            if (__CFADD__(tmp_2, v57))\n
                goto LABEL_4040f8;\n
LABEL_403b42:\n
            if (!v53)\n
                goto LABEL_4040e9;\n
        }\n
    }\n
    return v16;\n
}\n
", "4209465:sub_403b39": null, "4209507:sub_403b63": null, "4209609:sub_403bc9": null, "4210761:sub_404049": null, "4210973:sub_40411d": null, "4210976:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4210997:sub_404135": null, "4211008:cgc_strcasecmp": "long long cgc_strcasecmp(char a0[2], char *a1)\n
{\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    char v2[2];  // r14, Other Possible Types: unsigned long\n
    unsigned long v3;  // al, Other Possible Types: char\n
    unsigned long long v4;  // rax\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = a0[0];\n
    if (!a0[0])\n
        return a0[0] - *(a1);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4211082:sub_40418a": null, "4211088:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4211184:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // cl, Other Possible Types: unsigned long, char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4211241:sub_404229": null, "4211248:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // al, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return v1 - *(a1);\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return v1 - *(a1);\n
}\n
", "4211299:sub_404263": null, "4211312:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4211365:sub_4042a5": null, "4211376:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, a0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4211441:sub_4042f1": null, "4211456:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4211490:sub_404322": null, "4211504:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4211615:sub_40439f": null, "4211616:cgc_strncpy": "long long cgc_strncpy(char *a0, char a1[2], unsigned long a2)\n
{\n
    char *v1;  // rax\n
    char v2;  // r8b\n
    unsigned long v3;  // rdi\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v5;  // rsi, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = a1[0];\n
    v4 = a0;\n
    if (a1[0])\n
    {\n
        v4 = a0;\n
        if (a2)\n
        {\n
            v3 = 1;\n
            v4 = v1;\n
            while (true)\n
            {\n
                *(v4) = v2;\n
                v4 += 1;\n
                v2 = a1[v3];\n
                if (!v2)\n
                    break;\n
                v3 += 1;\n
                if (1 >= a2)\n
                    break;\n
            }\n
        }\n
    }\n
    v5 = v4 - v1;\n
    if (v5 < a2)\n
    {\n
        do\n
        {\n
            *(v4) = 0;\n
            v4 += 1;\n
            v5 += 1;\n
        } while (v5 < a2);\n
    }\n
    return v1;\n
}\n
", "4211713:sub_404401": null, "4211728:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (!v3)\n
        return 0;\n
    cgc_memcpy(v3, a0, v2);\n
    v2[v3] = 0;\n
    return v3;\n
}\n
", "4211804:sub_40445c": null, "4211808:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r12\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rbx\n
    unsigned long v6;  // rax\n
    char *v7;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    v5 = 0;\n
    if (!v3)\n
        return 0;\n
    v2 = *(v3);\n
    if (*(v3))\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a1, v2);\n
            if (v4)\n
                break;\n
            v5 = v5 + 1;\n
            v2 = v3[v5];\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v6 = v5;\n
    v7 = v5 + 1;\n
    *(a0) = (v3[v6] ? 0 : v7 + v3);\n
    v3[v6] = 0;\n
    return *(a0);\n
}\n
", "4211931:sub_4044db": null, "4211936:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4212015:sub_40452f": null, "4212016:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    unsigned long v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rdi\n
    unsigned long v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ebp\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_4046d8;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_4046d8;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_40463b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_40463b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_40463b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_40463b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (cgc_isupper(v26))\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
                else\n
                {\n
                    v27 = 0;\n
                    goto LABEL_404650;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 > 2147483647)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_404650:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_4046d8:\n
    v32 = (!v30 ? -0x80000000 : -(v31));\n
    v33 = (!v30 ? 2147483647 : v31);\n
    if (v29 < 0)\n
        v33 = v32;\n
    return v33;\n
}\n
", "4212332:sub_40466c": null, "4212502:sub_404716": null, "4212512:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    unsigned long v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rdi\n
    unsigned long v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // ecx\n
    void* v30;  // rbp, Other Possible Types: unsigned long, unsigned long long, unsigned int\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v32;  // eax\n
    unsigned long v33;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_4048c8;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_4048c8;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_40482b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_40482b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_40482b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_40482b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (cgc_isupper(v26))\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
                else\n
                {\n
                    v27 = 0;\n
                    goto LABEL_404840;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 >> 32)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_404840:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_4048c8:\n
    if (v29 < 0)\n
    {\n
        v32 = (v31 == -0x80000000 ? 1 : v30);\n
        if (v31 <= 2147483647)\n
            v32 = v30;\n
        v31 = -(v31);\n
        v30 = v32;\n
    }\n
    v33 = (!v30 ? 4294967295 : v31);\n
    return v33;\n
}\n
", "4212828:sub_40485c": null, "4213009:sub_404911": null, "4213024:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
\n
int main()\n
{\n
    struct_0 *v0;  // [bp-0x8b20]\n
    struct_0 *v1;  // [bp-0x8b18], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x8b10]\n
    char v3;  // [bp-0x8b08]\n
    char v4;  // [bp-0x8a08]\n
    char v5;  // [bp-0x8a00]\n
    char v6;  // [bp-0x8908]\n
    char v7;  // [bp-0x8903]\n
    char v8;  // [bp-0x8902]\n
    char v9;  // [bp-0x8901]\n
    char v10;  // [bp-0x8900]\n
    char v11;  // [bp-0x88ff]\n
    void* v12;  // [bp-0x50], Other Possible Types: unsigned int, unsigned long, unsigned long long\n
    unsigned int v13;  // [bp-0x4c]\n
    char v14;  // [bp-0x48], Other Possible Types: unsigned int\n
    struct struct_1 **v15;  // [bp-0x40], Other Possible Types: unsigned long\n
    char *v17;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v19;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v20;  // r12\n
    unsigned long long v21;  // r14\n
    struct_0 *v22;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v23;  // rax\n
    struct_0 *v24;  // r12, Other Possible Types: unsigned long, unsigned long long, void*\n
    unsigned long long v25;  // rdx\n
    unsigned long v26;  // r13\n
    unsigned long long v27;  // rdx\n
    struct_0 *v28;  // r14, Other Possible Types: unsigned long\n
    struct_0 *v29;  // rbx, Other Possible Types: void*, unsigned long\n
    unsigned long v30;  // rax\n
    unsigned int v31;  // r13d\n
    unsigned long v32;  // rdx\n
    unsigned int v34;  // esi\n
    unsigned long v36;  // rdx\n
    unsigned int v37;  // r14d\n
    unsigned long long v38;  // rcx\n
    unsigned long long v39;  // rcx\n
    unsigned long v40;  // rdx\n
    unsigned int v41;  // eax\n
    struct_0 *v42;  // r15, Other Possible Types: unsigned long\n
    unsigned long v43;  // rdx\n
    struct struct_1 **v45;  // rax\n
    unsigned int v46;  // esi\n
    unsigned long v47;  // rdx\n
    unsigned long v48;  // rbp, Other Possible Types: unsigned long long\n
    unsigned int v49;  // r14d\n
    unsigned long long v50;  // rcx\n
    unsigned long v51;  // r13\n
    unsigned long long v52;  // rax\n
    unsigned long v53;  // rbp\n
    unsigned long v54;  // rcx\n
    unsigned long v55;  // rcx\n
    unsigned long v57;  // rax\n
    unsigned long v58;  // rax\n
    unsigned long long v59;  // rbp\n
    unsigned long v60;  // r12b, Other Possible Types: char, unsigned long long\n
\n
    v17 = 0;\n
    cgc_memset(&v4, 0, 35288);\n
    v0 = 0;\n
    do\n
    {\n
        v18 = v17 - 1;\n
        v19 = 0x4347c000 + v17;\n
        do\n
        {\n
            v20 = v18;\n
            v21 = v19;\n
            v42 = 0x4347c000 + v17;\n
            v22 = 8;\n
            if (cgc_strlen(v42) <= 7)\n
                v22 = cgc_strlen(v42);\n
            v2 = v20;\n
            if (!v22)\n
            {\n
LABEL_404990:\n
                v24 = 0;\n
                continue;\n
            }\n
            else\n
            {\n
                v24 = v22 + 1;\n
                v23 = cgc_malloc(v24);\n
                if (!v23)\n
                    goto LABEL_404990;\n
                cgc_memcpy(v23, v42, v22);\n
                *((v23 + v22)) = 0;\n
                if (*((v17 + 0x4347c000 + v22)))\n
                    v24 = v22;\n
                v1 = v23;\n
            }\n
            v17 += 1;\n
            v25 = v2;\n
            v18 = v25 + 1;\n
            v19 += 1;\n
        } while (!v24);\n
        v26 = v0 * 16;\n
        *(&(&v4)[v26]) = v1;\n
        v27 = v25 + v24;\n
        v28 = v21 + v24;\n
        v60 = v27;\n
        do\n
        {\n
            v48 = 8;\n
            if (cgc_strlen(v28) <= 7)\n
                v48 = cgc_strlen(v28);\n
            if (!v48)\n
            {\n
LABEL_404a60:\n
                v29 = 0;\n
                continue;\n
            }\n
            else\n
            {\n
                v29 = v48 + 1;\n
                v30 = cgc_malloc(v29);\n
                if (!v30)\n
                    goto LABEL_404a60;\n
                v42 = v30;\n
                cgc_memcpy(v30, v28, v48);\n
                *((v30 + v48)) = 0;\n
                if (*((v28 + v48)))\n
                    v29 = v48;\n
                v1 = v30;\n
            }\n
            v60 += 1;\n
            v28 += 1;\n
        } while (!v29);\n
        v17 = v29 + v60;\n
        *(&(&v5)[v26]) = v1;\n
        v0 += 1;\n
    } while (v0 != 16);\n
    do\n
    {\n
        v12 = 0;\n
        v31 = 0;\n
        if (cgc_fread(&v6, 8, cgc_stdin) == 8)\n
        {\n
            v32 = v12;\n
            v13 = *((&v12 + 4)) + 8;\n
            if (v12 <= v13)\n
            {\n
                v12 = v32 + 1;\n
                v12 = v32 + 2;\n
                v34 = (&v6)[v12] * 0x100 | (&v6)[v32] * 0x10000;\n
                v12 = v32 + 3;\n
                v12 = v32 + 4;\n
                v48 = (&v6)[v12] | ((&v6)[v12] | v34) * 0x100;\n
            }\n
            v31 = 0;\n
            if (!(v12 <= v13))\n
                goto LABEL_404c50;\n
            v36 = v12;\n
            v31 = 0;\n
            v37 = 0;\n
            if (v12 <= v13)\n
            {\n
                v12 = v36 + 1;\n
                v37 = (&v6)[v36];\n
            }\n
            if (!(v12 <= v13))\n
                goto LABEL_404c50;\n
            if (!v48)\n
                goto LABEL_404c50;\n
            if (v48 <= v37)\n
                goto LABEL_404c50;\n
            if (v48 >= 5)\n
            {\n
                v38 = v48 - 4;\n
                v48 = v48 + 3 & -8;\n
                if (!(v48 & 7))\n
                    v48 = v38;\n
                if (!(v48 <= 35000))\n
                    goto LABEL_404c50;\n
                if (!((v13 + v48) <= 35000))\n
                    goto LABEL_404c50;\n
                if (!(cgc_fread(&(&v6)[v13], v48, cgc_stdin) == v48))\n
                    goto LABEL_404c50;\n
                v13 += v48;\n
                if (!v48)\n
                    goto LABEL_404c50;\n
            }\n
            v13 -= v37;\n
            v31 = v13 - v12;\n
        }\n
LABEL_404c50:\n
        v60 = 1;\n
        if (!v31)\n
            continue;\n
        v39 = *(&v14);\n
        v14 = v39 + 1;\n
        v40 = v12;\n
        v41 = *((&v12 + 4));\n
        if (v12 <= v41)\n
        {\n
            v12 = v40 + 1;\n
            v42 = (&v6)[v40];\n
        }\n
        if (!(v12 <= v41))\n
            continue;\n
        if (v42 == 100)\n
            continue;\n
        if (v42 == 103)\n
        {\n
            v43 = v12;\n
            if (v12 <= v41)\n
            {\n
                v12 = v43 + 1;\n
                v12 = v43 + 2;\n
                v46 = (&v6)[v12] * 0x100 | (&v6)[v43] * 0x10000;\n
                v47 = v43 + 3;\n
                v12 = v47;\n
                v12 = v43 + 4;\n
                v48 = (&v6)[v47] | ((&v6)[v12] | v46) * 0x100;\n
            }\n
            v49 = 0;\n
            if (v12 <= v41 && (v48 - 0x100) >= -257 && v48 <= v41)\n
            {\n
                v50 = v12;\n
                if ((v50 + v48) <= v41)\n
                {\n
                    v51 = (v48 + v50 < 35001 ? -30536 - v50 : v48);\n
                    cgc_memcpy(&v3, &(&v6)[v50], v51);\n
                    v12 = v12 + v51;\n
                    (&v3)[v48] = 0;\n
                    if (!cgc_strcmp(&v3, \"userauth\"))\n
                    {\n
                        v15 = &cgc_userauth_handler;\n
                        v12 = 25769803782;\n
                        v7 = 104;\n
                        v52 = cgc_strlen(\"userauth\");\n
                        v53 = v52;\n
                        if (*((&v12 + 4)) + -34997 >= -35001)\n
                        {\n
                            v54 = v12;\n
                            v12 = v54 + 1;\n
                            (&v6)[v54] = v52 / 0x1000000;\n
                            v55 = v12;\n
                            v12 = v55 + 1;\n
                            (&v6)[v55] = v52 / 0x10000;\n
                            v57 = v12;\n
                            v12 = v57 + 1;\n
                            *(&(&v6)[v57]) = dh<1>;\n
                            v58 = v12;\n
                            v12 = v58 + 1;\n
                            (&v6)[v58] = v52;\n
                            if (*((&v12 + 4)) > *((&v12 + 4)))\n
                                v13 = v12;\n
                            if ((*((&v12 + 4)) + v53) <= 35000)\n
                            {\n
                                cgc_memcpy(&(&v6)[v13], \"userauth\", v53);\n
                                v59 = v53 + v12;\n
                                v12 = v59;\n
                                if (v59 > *((&v12 + 4)))\n
                                    v13 = v59;\n
                            }\n
                        }\n
                        v49 = cgc_send_packet(&v4);\n
                    }\n
                }\n
            }\n
            if (!v49)\n
                continue;\n
        }\n
        else if (v42 != 101)\n
        {\n
            if (!v15)\n
            {\n
                v12 = 25769803782;\n
                v7 = 102;\n
                v8 = v39 / 0x1000000;\n
                v9 = v39 / 0x10000;\n
                v10 = v39;\n
                v12 = 10;\n
                v11 = v39;\n
                v13 = 10;\n
                cgc_send_packet(&v4);\n
            }\n
            else if (!v45(&v4, v42))\n
            {\n
                continue;\n
            }\n
        }\n
        v60 = 0;\n
    } while (!v60);\n
    v12 = 25769803782;\n
    v7 = 100;\n
    cgc_send_packet(&v4);\n
    return 0;\n
}\n
", "4213129:sub_404989": null, "4213286:sub_404a26": null, "4213329:sub_404a51": null, "4214710:sub_404fb6": null, "4214720:cgc_userauth_handler": "typedef struct struct_0 {\n
    char *field_0;\n
    char padding_8[253];\n
    char field_105;\n
    char field_106;\n
    char field_107;\n
    char field_108;\n
    char field_109;\n
    char padding_10a[34990];\n
    unsigned int field_89b8;\n
    char padding_89bc[4];\n
    unsigned int field_89c0;\n
    char padding_89c4[12];\n
    char field_89d0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long cgc_userauth_handler(struct_0 *a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x50], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x40]\n
    void* v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x30]\n
    char v6;  // al\n
    void* v7;  // rbp, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v8;  // rdx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
    struct_1 *v11;  // r15, Other Possible Types: unsigned long\n
    unsigned long v12;  // rbp\n
    char *v13;  // rsi\n
    char *v14;  // r14\n
    unsigned long v15;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v16;  // rax\n
    unsigned long v17;  // rsi\n
    unsigned long long v18;  // rcx\n
    unsigned long long v19;  // rcx\n
    unsigned long long v21;  // rax\n
    unsigned long long v22;  // rax\n
    unsigned long long v23;  // rax\n
    unsigned int v24;  // eax\n
\n
    v2 = 0;\n
    v4 = 0;\n
    v1 = 0;\n
    if (a1 != 110)\n
    {\n
        *(&a0->field_89b8) = 25769803782;\n
        a0->field_105 = 102;\n
        v6 = a0->field_89c0 - 1;\n
        a0->field_106 = v6 / 0x1000000;\n
        a0->field_107 = v6 / 0x10000;\n
        *(&a0->field_108) = ah<1>;\n
        a0->field_89b8 = 10;\n
        a0->field_109 = v6;\n
        *(&a0->padding_89bc[0]) = 10;\n
        v7 = cgc_send_packet(a0);\n
        return v7;\n
    }\n
    v7 = 0;\n
    if (cgc_get_string_alloc(a0, &v2) && cgc_get_string_alloc(a0, &v4) && cgc_get_string_alloc(a0, &v1))\n
    {\n
        if (cgc_strcmp(v1, \"password\"))\n
        {\n
            v7 = cgc_send_userauth_failure(a0);\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            v0 = 0;\n
            v8 = a0->field_89b8;\n
            v9 = a0->padding_89bc;\n
            v10 = v8 + 1;\n
            if (v10 <= v9)\n
                a0->field_89b8 = v10;\n
            v7 = 0;\n
            if (v10 <= v9)\n
            {\n
                v7 = 0;\n
                if (cgc_get_string_alloc(a0, &v3))\n
                {\n
                    if (a0->padding_8[248 + v8] && !cgc_get_string_alloc(a0, &v0))\n
                        goto LABEL_40532d;\n
                    v12 = 0;\n
                    v11 = 0;\n
                    do\n
                    {\n
                        if (!cgc_strcmp(v2, *((&a0->field_0 + v12))))\n
                            v11 = a0 + v12;\n
                        v12 += 16;\n
                    } while (v12 != 0x100);\n
                    cgc_fprintf(cgc_stderr, \"Found user %x (username=%s)\\n
\");\n
                    v13 = (!v11 ? *((v11 + 8)) : \"fakepassword\");\n
                    *(&v9) = v11 & !cgc_strcmp(v3, v13);\n
                    if (*(&v9) == 1)\n
                    {\n
                        v14 = v0;\n
                        if (v14)\n
                        {\n
                            if (cgc_strlen(v14) > 7)\n
                            {\n
                                cgc_free(*((v11 + 8)));\n
                                *((v11 + 8)) = v14;\n
                                v0 = 0;\n
                                goto LABEL_405304;\n
                            }\n
                            else\n
                            {\n
                                *(&a0->field_89b8) = 25769803782;\n
                                a0->field_105 = 120;\n
                                v16 = cgc_strlen(\"Too short\");\n
                                v17 = v16;\n
                                if (-34997 + a0->padding_89bc >= -35001)\n
                                {\n
                                    v18 = a0->field_89b8;\n
                                    a0->field_89b8 = v18 + 1;\n
                                    a0->padding_8[248 + v18] = v16 / 0x1000000;\n
                                    v19 = a0->field_89b8;\n
                                    a0->field_89b8 = v19 + 1;\n
                                    a0->padding_8[248 + v19] = v16 / 0x10000;\n
                                    v21 = a0->field_89b8;\n
                                    a0->field_89b8 = v21 + 1;\n
                                    *(&a0->padding_8[248 + v21]) = dh<1>;\n
                                    v22 = a0->field_89b8;\n
                                    a0->field_89b8 = v22 + 1;\n
                                    a0->padding_8[248 + v22] = v16;\n
                                    v23 = a0->field_89b8;\n
                                    if (v23 > a0->padding_89bc)\n
                                        *(&a0->padding_89bc[0]) = v23;\n
                                    if ((a0->padding_89bc + v17) <= 35000)\n
                                    {\n
                                        cgc_memcpy(&a0->padding_8[248 + v23], \"Too short\", v17);\n
                                        v24 = a0->field_89b8 + v17;\n
                                        a0->field_89b8 = v24;\n
                                        if (v24 > a0->padding_89bc)\n
                                            *(&a0->padding_89bc[0]) = v24;\n
                                    }\n
                                }\n
                                v15 = cgc_send_packet(a0);\n
                                goto LABEL_4052ea;\n
                            }\n
                        }\n
                    }\n
                    if (!*(&v9))\n
                    {\n
                        v15 = cgc_send_userauth_failure(a0);\n
LABEL_4052ea:\n
                        v7 = v15;\n
                        goto LABEL_40532d;\n
                    }\n
LABEL_405304:\n
                    *(&a0->field_89b8) = 25769803782;\n
                    a0->field_105 = 112;\n
                    v7 = cgc_send_packet(a0);\n
                    a0->field_89d0 = 1;\n
                }\n
LABEL_40532d:\n
                cgc_free(v3);\n
                cgc_free(v0);\n
            }\n
        }\n
    }\n
    cgc_free(v2);\n
    cgc_free(v4);\n
    cgc_free(v1);\n
    return v7;\n
}\n
", "4215662:sub_40536e": null, "4215664:cgc_get_string_alloc": "long long cgc_get_string_alloc(unsigned int a0[8816], unsigned long long *a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rdx\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned long long v7;  // rsi\n
    unsigned int v8;  // edi\n
    unsigned long long v9;  // rbp\n
    unsigned int v11;  // esi\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rbp\n
    char *v15;  // r13\n
    char *v16;  // rax\n
    unsigned long v17;  // r15\n
    unsigned long long v18;  // rax\n
    unsigned long v19;  // r12, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v4 = a0[8814];\n
    v5 = a0[8815];\n
    v6 = v4 + 4;\n
    if (v6 <= v5)\n
    {\n
        v7 = v4 + 1;\n
        a0[8814] = v7;\n
        v8 = *(0x100 + &a0[0] + v4);\n
        v9 = v4 + 2;\n
        a0[8814] = v9;\n
        v11 = *(0x100 + &a0[0] + v7) * 0x100 | v8 * 0x10000;\n
        v12 = v4 + 3;\n
        a0[8814] = v12;\n
        a0 = (*(0x100 + &a0[0] + v9) | v11) * 0x100;\n
        a0[8814] = v6;\n
        v13 = *(0x100 + &a0[0] + v12) | a0;\n
    }\n
    if (v6 > v5)\n
    {\n
        return 0;\n
    }\n
    else if (v13 > v5)\n
    {\n
        return 0;\n
    }\n
    else if ((a0[8814] + v13) > v5)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v15 = v13;\n
        v16 = cgc_malloc(v15 + 1);\n
        if (!v16)\n
            return 0;\n
        v17 = v16;\n
        v18 = a0[8814];\n
        v19 = -30536 - v18;\n
        if (v13 + v18 < 35001)\n
            v19 = v13;\n
        cgc_memcpy(v17, 0x100 + a0 + v18, v19);\n
        a0[8814] = a0[8814] + v19;\n
        v15[v17] = 0;\n
        *(a1) = v17;\n
        return 1;\n
    }\n
}\n
", "4215919:sub_40546f": null, "4215920:cgc_send_userauth_failure": "typedef struct struct_0 {\n
    char padding_0[261];\n
    char field_105;\n
    unsigned int field_106;\n
    char padding_10a[34990];\n
    unsigned int field_89b8;\n
} struct_0;\n
\n
long long cgc_send_userauth_failure(struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned long long v2;  // rax\n
    unsigned int v3;  // eax\n
\n
    *(&a0->padding_10a[34988]) = 25769803782;\n
    a0->field_105 = 111;\n
    *(&(&a0->field_105)[1]) = 0x8000000;\n
    *(&a0->padding_10a[34988]) = 10;\n
    a0->field_89b8 = 10;\n
    if (-34993 + a0->field_89b8 >= -35001)\n
    {\n
        cgc_memcpy(&a0->field_106 + 2, \"password\", 8);\n
        v1 = *(&a0->padding_10a[34988]) + 8;\n
        *(&a0->padding_10a[34988]) = v1;\n
        if (v1 > a0->field_89b8)\n
            a0->field_89b8 = v1;\n
    }\n
    if (-35000 + a0->field_89b8 >= -35001)\n
    {\n
        v2 = *(&a0->padding_10a[34988]);\n
        *(&a0->padding_10a[34988]) = v2 + 1;\n
        a0->padding_0[0x100 + v2] = 0;\n
        v3 = *(&a0->padding_10a[34988]);\n
        if (v3 > a0->field_89b8)\n
            a0->field_89b8 = v3;\n
    }\n
    return cgc_send_packet(a0);\n
}\n
", "4216126:sub_40553e": null, "4216128:cgc_send_packet": "typedef struct struct_0 {\n
    char padding_0[256];\n
    char field_100;\n
    char field_101;\n
    char field_102;\n
    char field_103;\n
    char padding_104[34996];\n
    unsigned int field_89b8;\n
    unsigned int field_89bc;\n
} struct_0;\n
\n
extern void* cgc_stdout;\n
\n
long long cgc_send_packet(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rcx\n
    unsigned int v3;  // r14d\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned int v6;  // eax\n
    char v7;  // al\n
    unsigned long long v8;  // rax\n
    unsigned int v9;  // eax\n
\n
    v1 = a0->field_89bc;\n
    if (v1 > 0x8000)\n
        return 0;\n
    v3 = 8 - (v1 & 7);\n
    cgc_random(a0, v4, v5);\n
    v6 = a0->field_89bc;\n
    a0->field_89bc = v6 + v3;\n
    a0->field_89b8 = 0;\n
    if (v6 + v3 - 34997 >= -35001)\n
    {\n
        v7 = v6 + v3 - 4;\n
        a0->field_100 = v7 / 0x1000000;\n
        a0->field_101 = v7 / 0x10000;\n
        *(&a0->field_102) = ah<1>;\n
        a0->field_89b8 = 4;\n
        a0->field_103 = v7;\n
        if (a0->field_89bc <= 3)\n
            a0->field_89bc = 4;\n
    }\n
    if (-35000 + a0->field_89bc >= -35001)\n
    {\n
        v8 = a0->field_89b8;\n
        a0->field_89b8 = v8 + 1;\n
        (&a0->field_100)[v8] = 8 - (v1 & 7);\n
        v9 = a0->field_89b8;\n
        if (v9 > a0->field_89bc)\n
            a0->field_89bc = v9;\n
    }\n
    cgc_fwrite(&a0->field_100, a0->field_89bc, cgc_stdout);\n
    return 1;\n
}\n
", "4216416:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_random": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}