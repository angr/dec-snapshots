{"4202496:_init": "extern struct_0 *g_405aa8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_405aa8;\n
    if (g_405aa8)\n
        v1 = g_405aa8();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_405ac8;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_405ac8;\n
    goto *(4217552);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202560:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202576:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202608:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4217528);\n
}\n
", "4202624:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202661:sub_4020a5": null, "4202662:sub_4020a6": null, "4202672:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_405aa0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202713:sub_4020d9": null, "4202720:register_tm_clones": "extern unsigned long long g_405ab0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202777:sub_402119": null, "4202784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_405ab8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_405ab8)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202837:sub_402155": null, "4202841:sub_402159": null, "4202848:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202857:sub_402169": null, "4202860:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202913:sub_4021a1": null, "4202916:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202945:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202960:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4202972:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4202984:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4202996:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203008:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203026:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203044:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203062:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203080:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4210704];\n
    char field_404010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203095:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203116:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4210832];\n
    char field_404090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203131:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203137:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203152:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203167:sub_40229f": null, "4203168:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203226:sub_4022da": null, "4203228:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_405d18;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_1 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rsi\n
    unsigned long long v13;  // rdx\n
    struct_2 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_1 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_0 *v20;  // rax\n
\n
    if (a0)\n
    {\n
        if (a0 - 262120 > -262145)\n
        {\n
            v6 = a0 + 7 & -8;\n
            if (!(a0 & 7))\n
                v6 = a0;\n
            if (v6 <= 2147483647)\n
            {\n
                v9 = v6 + 24;\n
                v10 = cgc_get_size_class(v9);\n
                do\n
                {\n
                    v11 = *(&(&cgc_free_lists)[8 * v10]);\n
                    if (v11)\n
                    {\n
                        if (*(v11) < v9)\n
                        {\n
                            v11 = *((v11 + 16));\n
                            continue;\n
                        }\n
                        goto LABEL_4023e9;\n
                    }\n
                    v10 = v10 + 1;\n
                } while (v10 != 32);\n
                if (cgc_allocate(v9, v12, v13))\n
                    goto LABEL_4023a3;\n
                v15 = *(&v0);\n
                if (!v15)\n
                    goto LABEL_4023a3;\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_405d18;\n
LABEL_4023e9:\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
        else if (cgc_allocate(a0, v3, v4))\n
        {\n
            return 0;\n
        }\n
        else\n
        {\n
            v7 = *(&v0);\n
            v7->field_0 = a0 + 24;\n
            v7->field_8 = 0;\n
            v7->field_10 = 0;\n
            v7->field_20 = 0;\n
            return v7 + 24;\n
        }\n
    }\n
LABEL_4023a3:\n
    return 0;\n
}\n
", "4203618:sub_402462": null, "4203620:cgc_get_size_class": "extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*(v1) >= a0)\n
            return v2;\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
            return 32;\n
    }\n
}\n
", "4203653:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rdx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (*(v1) < a0->field_0)\n
    {\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    a0->field_8 = 1;\n
    v3 = *(&(&cgc_free_lists)[8 * v2]);\n
    if (v3)\n
    {\n
        a0->field_10 = v3;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        a0->field_18 = 0;\n
        return v2;\n
    }\n
    *(&(&cgc_free_lists)[8 * v2]) = a0;\n
    return v2;\n
}\n
", "4203741:cgc_remove_from_flist": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_remove_from_flist(struct_0 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v2[4];  // rax, Other Possible Types: unsigned long\n
    struct_2 *v3;  // rcx\n
    struct_3 *v4;  // rdx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    do\n
    {\n
        if (*(v1) >= a0->field_0)\n
        {\n
            v3 = a0[1].field_0;\n
            if (v3)\n
                v3->field_10 = a0->field_10;\n
            v4 = a0->field_10;\n
            if (v4)\n
                v4->field_18 = v3;\n
            if (*(&(&cgc_free_lists)[8 * v2]) == a0)\n
            {\n
                *(&(&cgc_free_lists)[8 * v2]) = v4;\n
                goto LABEL_40252f;\n
            }\n
        }\n
        v2 += 1;\n
        v1 += 8;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_40252f:\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v2;\n
}\n
", "4203838:cgc_coalesce": "long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v1;  // rbx\n
    unsigned long v2;  // rdi\n
    unsigned long v3;  // rdi\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rcx\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rdi\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rax\n
\n
    v1 = a0;\n
    v2 = *((a0 + 40));\n
    if (!v2)\n
        return v11;\n
    v11 = *((v1 + 32));\n
    if (!*((v2 + 8)))\n
    {\n
        if (!v11)\n
            return v11;\n
        if (!*((v11 + 8)))\n
            return *((v1 + 32));\n
        cgc_remove_from_flist(v11);\n
        cgc_remove_from_flist(v1);\n
        *(v1) = *(v1) + *(*((v1 + 32)));\n
        cgc_insert_into_flist(v1);\n
        v5 = *((v1 + 32));\n
        v11 = *((v5 + 40));\n
        if (v11)\n
            *((v11 + 32)) = *((v5 + 32));\n
        v9 = *((v5 + 32));\n
LABEL_40264e:\n
        if (!v9)\n
            return v11;\n
        *((v9 + 40)) = v11;\n
    }\n
    if (v11 && *((v11 + 8)))\n
    {\n
        cgc_remove_from_flist(v2);\n
        cgc_remove_from_flist(*((v1 + 32)));\n
        cgc_remove_from_flist(v1);\n
        v3 = *((v1 + 40));\n
        v4 = *(v3) + *(v1);\n
        *(v3) = v4;\n
        *(v3) = v4 + *(*((v1 + 32)));\n
        cgc_insert_into_flist(v3);\n
        v6 = *((v1 + 32));\n
        v7 = *((v6 + 40));\n
        if (v7)\n
            *((v7 + 32)) = *((v6 + 32));\n
        v10 = *((v6 + 32));\n
        if (v10)\n
        {\n
            *((v10 + 40)) = v7;\n
            goto LABEL_4025f1;\n
        }\n
    }\n
    v11 = *((v1 + 32));\n
    if (!v11)\n
        return *((v1 + 32));\n
    if (*((v11 + 8)))\n
        return *((v1 + 32));\n
    cgc_remove_from_flist(v2);\n
    cgc_remove_from_flist(v1);\n
    v8 = *((v1 + 40));\n
    *(v8) = *(v8) + *(v1);\n
    cgc_insert_into_flist(v8);\n
LABEL_4025f1:\n
    v11 = *((v1 + 40));\n
    if (v11)\n
        *((v11 + 32)) = *((v1 + 32));\n
    v9 = *((v1 + 32));\n
    goto LABEL_40264e;\n
}\n
", "4204121:sub_402659": null, "4204124:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4204159:sub_40267f": null, "4204160:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4204185:sub_402699": null, "4204188:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            a0[v1] = a1;\n
            v1 += 1;\n
        } while (a2 != v1);\n
        return a0;\n
    }\n
}\n
", "4204216:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    int tmp_9;  // tmp #9\n
    char v0;  // [bp-0x39]\n
    char v2;  // bpl\n
    unsigned int v3;  // ebx\n
    unsigned long v4;  // r15, Other Possible Types: unsigned long long\n
    void* v5;  // r14, Other Possible Types: unsigned long, unsigned int\n
    unsigned int v6;  // ebx\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v2 = a3;\n
    v3 = a2;\n
    v4 = a0;\n
    v5 = 0;\n
    if (a0 >= a1)\n
    {\n
        v4 = (0 CONCAT a0) /m a1 >> 32;\n
        a0 = (0 CONCAT a0) /m a1;\n
        v5 = cgc_output_number_printf(a0, a1, a2 - 1, a3);\n
    }\n
    if (v3 > 0 && !v5)\n
    {\n
        v6 = v3 - 1;\n
        if (v6)\n
        {\n
            do\n
            {\n
                if (!(v2 & 1))\n
                    v0 = 32;\n
                else\n
                    v0 = 48;\n
                cgc_transmit(a0, a1, a2, a3);\n
                tmp_9 = v6 - 1;\n
                v6 -= 1;\n
            } while (tmp_9);\n
        }\n
    }\n
    v7 = (!(v2 & 2) ? v4 + 55 : v4 + 87);\n
    v8 = v4 + 48;\n
    if (10 <= v4)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc_transmit();\n
    return v5 + 1;\n
}\n
", "4204412:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xe8]\n
    unsigned long v6;  // [bp-0xe0]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    char *v30;  // rax, Other Possible Types: unsigned long\n
    void* v31;  // r12, Other Possible Types: unsigned long\n
    void* v32;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v33;  // r12\n
    unsigned long long v34;  // rcx\n
    struct struct_0 **v35;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v36;  // rax, Other Possible Types: unsigned long\n
    unsigned long v37;  // r13, Other Possible Types: unsigned long long\n
    struct struct_0 **v38;  // rax, Other Possible Types: unsigned long\n
    char *v39;  // rbp\n
    unsigned long v40;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v6 = a1;\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a0;\n
    v3 = &v5;\n
    v2 = &v19;\n
    v1 = 206158430216;\n
    if (!*(a0))\n
        return 0;\n
    do\n
    {\n
        v30 = a0 + 1;\n
        v4 = v30;\n
        a3 = *(a0);\n
        if (*(a0) == 37)\n
        {\n
            v31 = 0;\n
            v32 = 0;\n
            while (true)\n
            {\n
                a0 = v30;\n
                while (true)\n
                {\n
                    v30 = a0 + 1;\n
                    v4 = v30;\n
                    a3 = *(a0);\n
                    a2 = *(a0);\n
                    a1 = a2 - 49;\n
                    if (a1 >= 9)\n
                        break;\n
                    v32 = cgc_strtol();\n
                    a0 = v4;\n
                }\n
                if (a2 > 99)\n
                {\n
                    if (a2 == 100)\n
                    {\n
                        a3 = v1;\n
                        if (a3 <= 40)\n
                        {\n
                            v35 = a3 + v3;\n
                            a3 = a3 + 8;\n
                            v1 = a3;\n
                        }\n
                        else\n
                        {\n
                            v35 = v2;\n
                            v2 = v35 + 8;\n
                        }\n
                        v37 = *(v35);\n
                        if (v37 < 0)\n
                        {\n
                            v0 = 45;\n
                            cgc_transmit(a0, a1, a2, a3);\n
                            v37 = -(v37);\n
                        }\n
                        cgc_output_number_printf(v37, 10, v32, v31);\n
                        goto LABEL_4029db;\n
                    }\n
                    if (a2 == 115)\n
                    {\n
                        v34 = v1;\n
                        if (v34 > 40)\n
                        {\n
                            v36 = v2;\n
                            a3 = v36 + 8;\n
                            v2 = a3;\n
                        }\n
                        else\n
                        {\n
                            v36 = v34 + v3;\n
                            a3 = v34 + 8;\n
                            v1 = a3;\n
                        }\n
                        v39 = *(v36);\n
                        if (cgc_strlen(v39))\n
                        {\n
                            v40 = 0;\n
                            do\n
                            {\n
                                v0 = v39[v40];\n
                                cgc_transmit(a0, a1, a2, a3);\n
                                v40 += 1;\n
                            } while (cgc_strlen(v39) > v40);\n
                        }\n
                        goto LABEL_4029db;\n
                    }\n
                    if (a2 != 120)\n
                        goto LABEL_4028ba;\n
                }\n
                else\n
                {\n
                    if (a2 == 37)\n
                    {\n
                        v0 = 37;\n
                        goto LABEL_4028be;\n
                    }\n
                    if (a2 == 48)\n
                    {\n
                        v33 = 1;\n
                    }\n
                    else\n
                    {\n
                        if (a2 != 88)\n
                            goto LABEL_4028ba;\n
                        v31 = v31 | 2;\n
                        a3 = v1;\n
                        if (a3 <= 40)\n
                        {\n
                            v38 = a3 + v3;\n
                            v1 = a3 + 8;\n
                        }\n
                        else\n
                        {\n
                            v38 = v2;\n
                            v2 = v38 + 8;\n
                        }\n
                        cgc_output_number_printf(*(v38), 16, v32, v31);\n
                    }\n
                }\n
            }\n
            continue;\n
            goto LABEL_4028be;\n
        }\n
LABEL_4028ba:\n
        v0 = a3;\n
LABEL_4028be:\n
        cgc_transmit(a0, a1, a2, *(&a3));\n
LABEL_4029db:\n
        a0 = v4;\n
    } while (*(a0));\n
    return 0;\n
}\n
", "4205053:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_30;  // tmp #30\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // r12\n
    unsigned long v11;  // rbx\n
    unsigned long v12;  // rax\n
    char v13;  // r15b\n
    unsigned int v14;  // ebp\n
    unsigned long long v16;  // rax\n
    unsigned long v17;  // r12, Other Possible Types: unsigned long long\n
    unsigned int v18;  // ebp\n
    char v19;  // cl\n
    char v20;  // cl\n
    char *v21;  // rax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v2 = v10;\n
    v1 = v11;\n
    v0 = v12;\n
    v13 = a5;\n
    v14 = a4;\n
    v17 = a2;\n
    if (a2 >= a3)\n
    {\n
        v16 = (0 CONCAT a2) /m a3;\n
        v17 = v16 / 0x100000000;\n
        cgc_output_number_sprintf(a0, a1, v16, a3, a4 - 1, a5);\n
    }\n
    if (v14 > 0 && v17 < a3)\n
    {\n
        v18 = v14 - 1;\n
        if (v18)\n
        {\n
            do\n
            {\n
                *(a1)->field_0 = ((v13 & 1) * 16) | 32;\n
                *(a1) = *(a1) + 1;\n
                *(a0) = *(a0) + 1;\n
                tmp_30 = v18 - 1;\n
                v18 -= 1;\n
            } while (tmp_30);\n
        }\n
    }\n
    if (10 > v17)\n
        v19 = 48;\n
    else\n
        v19 = (!(v13 & 2)) * 32 + 55;\n
    v20 = v19 + v17;\n
    v21 = *(a1);\n
    *(v21) = v20;\n
    *(a1) = *(a1) + 1;\n
    *(a0) = *(a0) + 1;\n
    return v21;\n
}\n
", "4205214:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
long long cgc_sprintf(char *a0, struct_0 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x11c]\n
    char *v1;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_1 **v4;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned long v5;  // [bp-0xf8]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_2 *v31;  // r14\n
    struct struct_1 **v32;  // r15\n
    struct_0 *v33;  // rdi, Other Possible Types: unsigned long\n
    void* v35;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char *v36;  // rcx\n
    unsigned long long v37;  // rbp\n
    struct_0 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rsi, Other Possible Types: unsigned long long\n
    char v40;  // cl\n
    unsigned int v41;  // edx\n
    unsigned long long v42;  // rax\n
    char *v43;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    unsigned long long v46;  // rdx\n
    struct struct_1 **v47;  // rax, Other Possible Types: unsigned long\n
    struct struct_1 **v48;  // rcx, Other Possible Types: unsigned long\n
    struct struct_1 **v49;  // rcx, Other Possible Types: unsigned long\n
    char *v50;  // rbp\n
    unsigned long v51;  // rbx\n
    unsigned int v52;  // r13d\n
    unsigned long v53;  // rdx, Other Possible Types: unsigned long long\n
    struct_2 *v54;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v55;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v56;  // rcx, Other Possible Types: unsigned long long\n
    char *v57;  // rcx\n
    struct struct_1 **v58;  // r12\n
    struct_2 *v59;  // r15\n
    unsigned long v60;  // r14\n
    struct_2 *v61;  // r14\n
    struct struct_1 **v62;  // r15\n
    struct struct_0 **v63;  // r12\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v2 = a1;\n
    v0 = 0;\n
    v5 = &v6;\n
    v4 = &v19;\n
    v3 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v2 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v36 = v1;\n
                *(v36) = *(a1);\n
                v1 = v36 + 1;\n
            }\n
            else\n
            {\n
                v35 = 0;\n
                while (true)\n
                {\n
                    v37 = v35 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v35;\n
                    do\n
                    {\n
                        v35 = v39;\n
                        v2 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = *((v38 - 1));\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    if (v41 > 87)\n
                    {\n
                        if (v41 > 114)\n
                        {\n
                            if (v41 == 115)\n
                            {\n
                                v44 = v3;\n
                                if (v44 > 40)\n
                                {\n
                                    v47 = v4;\n
                                    v4 = v47 + 8;\n
                                }\n
                                else\n
                                {\n
                                    v47 = v44 + v5;\n
                                    v3 = v44 + 8;\n
                                }\n
                                v50 = *(v47);\n
                                v51 = v1;\n
                                v52 = v0;\n
                                if (cgc_strlen(v50))\n
                                {\n
                                    v58 = r15<8>;\n
                                    v59 = r14<8>;\n
                                    v60 = 0;\n
                                    do\n
                                    {\n
                                        *((v51 + v60)) = v50[v60];\n
                                        v60 += 1;\n
                                    } while (cgc_strlen(v50) > v60);\n
                                    v51 += v60;\n
                                    v52 += v60;\n
                                    v61 = r15<8>;\n
                                    v62 = r12<8>;\n
                                    v63 = &v2;\n
                                }\n
                                v1 = v51;\n
                                v0 = v52;\n
                                goto LABEL_402d25;\n
                            }\n
                            if (v41 == 120)\n
                                goto LABEL_402c0c;\n
                            goto LABEL_402c49;\n
                        }\n
                        else if (v41 == 88)\n
                        {\n
                            v35 = v35 | 2;\n
LABEL_402c0c:\n
                            v46 = v3;\n
                            if (v46 > 40)\n
                            {\n
                                v49 = v4;\n
                                v4 = v49 + 8;\n
                            }\n
                            else\n
                            {\n
                                v49 = v46 + v5;\n
                                v3 = v46 + 8;\n
                            }\n
                            v53 = *(v49);\n
                            v54 = r14<8>;\n
                            v55 = r15<8>;\n
                            v56 = 16;\n
LABEL_402cb3:\n
                            cgc_output_number_sprintf(v54, v55, v53, v56, 0, v35);\n
                        }\n
                        else if (v41 == 100)\n
                        {\n
                            v45 = v3;\n
                            if (v45 > 40)\n
                            {\n
                                v48 = v4;\n
                                v4 = v48 + 8;\n
                            }\n
                            else\n
                            {\n
                                v48 = v45 + v5;\n
                                v3 = v45 + 8;\n
                            }\n
                            v53 = *(v48);\n
                            if (v53 < 0)\n
                            {\n
                                v57 = v1;\n
                                *(v57) = 45;\n
                                v1 = v57 + 1;\n
                                v0 += 1;\n
                                v53 = -(v53);\n
                            }\n
                            v54 = *(&v0);\n
                            v55 = v1;\n
                            v56 = 10;\n
                            goto LABEL_402cb3;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v41 - 49 < 9)\n
                        {\n
                            v42 = cgc_strtol(v38 - 2, &v2, 10);\n
                            v33 = v2;\n
                        }\n
                        else\n
                        {\n
                            if (v41 == 37)\n
                            {\n
                                v43 = v1;\n
                                *(v43) = 37;\n
                                goto LABEL_402c50;\n
                            }\n
LABEL_402c49:\n
                            v43 = v1;\n
                            *(v43) = v40;\n
LABEL_402c50:\n
                            v1 = v43 + 1;\n
                            goto LABEL_402c58;\n
                        }\n
                    }\n
                }\n
                continue;\n
            }\n
LABEL_402c58:\n
            v0 += 1;\n
LABEL_402d25:\n
            a1 = v2;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4205909:sub_402d55": null, "4205912:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    unsigned long v3;  // rdx\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4206023:sub_402dc7": null, "4206024:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    v1 = a0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a1)\n
            return v1;\n
    }\n
}\n
", "4206045:sub_402ddd": null, "4206048:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    int tmp_13;  // tmp #13\n
    void* v1;  // cl, Other Possible Types: char, unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            if (!*(a1))\n
                return *(a1) - v1;\n
            if (v1 != *(a1))\n
                return *(a1) - v1;\n
            a1 += 1;\n
            tmp_13 = *(v2);\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (tmp_13);\n
    }\n
    return *(a1) - 0;\n
}\n
", "4206090:sub_402e0a": null, "4206092:cgc_strcpy": "long long cgc_strcpy(char *a0, char a1[2])\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
    unsigned long v4;  // rdx\n
\n
    v1 = a0;\n
    v2 = a1[0];\n
    if (!a1[0])\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v4 = v3 + 1;\n
            v1[v3] = v2;\n
            v2 = a1[1 + v3];\n
            v3 = v4;\n
        } while (a1[1]);\n
    }\n
    v1[v4] = 0;\n
    return v1;\n
}\n
", "4206130:sub_402e32": null, "4206132:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4206151:sub_402e47": null, "4206152:cgc_strsep": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strsep(struct struct_1 **a0, char *a1)\n
{\n
    int tmp_6;  // tmp #6\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    char v2;  // cl\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_402e9a;\n
                }\n
                goto LABEL_402e98;\n
            }\n
            tmp_6 = *(v3);\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (tmp_6);\n
        v1 = *(a0);\n
    }\n
LABEL_402e98:\n
    v3 = 0;\n
LABEL_402e9a:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4206243:sub_402ea3": null, "4206244:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    char *v1;  // r9d, Other Possible Types: unsigned long\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    char v5;  // bl\n
    unsigned long v7;  // rax\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // r8\n
    void* v10;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v11;  // rcx\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v13;  // r11d\n
    unsigned long v14;  // r10\n
    unsigned long long v15;  // rcx\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (rbx<8> - 9 >= 4 && bl<1> != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v7 = 0;\n
        *(&v7) = v5 == 45;\n
        v8 = (*((v4 + v7)) == 43) + v7;\n
        v9 = v4 + v8;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (*(v9) == 48)\n
            {\n
                if ((*((v4 + v8 + 1)) | 32) != 120)\n
                {\n
                    v9 = v4 + v8 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v9 = v4 + v8 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (*(v9) == 48 && (*((v4 + v8 + 1)) | 32) == 120)\n
                v9 = v4 + v8 + 2;\n
        }\n
        v1 = 0;\n
        v10 = 0;\n
        while (true)\n
        {\n
            v11 = *((v9 + v1));\n
            if (v11 - 48 < 10)\n
            {\n
                v12 = v11 - 48;\n
            }\n
            else\n
            {\n
                v13 = -65;\n
                if (v11 - 65 >= 26)\n
                {\n
                    v13 = -97;\n
                    if (v11 - 97 >= 26)\n
                        break;\n
                }\n
                v12 = v11 + v13 + 10;\n
            }\n
            if (v12 >= a2)\n
                break;\n
            v14 = a2 * v10;\n
            v15 = v12 + v14;\n
            v1 += 1;\n
            v10 = v15;\n
        }\n
        v2 = -(v10);\n
        if (v5 != 45)\n
            v2 = v10;\n
        v3 = v9 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4206520:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4206525:sub_402fbd": null, "4206528:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_405d60;\n
extern char state;\n
\n
int main()\n
{\n
    char v0;  // [bp-0x50]\n
    char v1;  // [bp-0x44]\n
    char v2;  // [bp-0x40]\n
    char v3;  // [bp-0x3c]\n
    unsigned long v5;  // r14, Other Possible Types: unsigned long long\n
    struct_0 *v6;  // r15, Other Possible Types: unsigned long\n
    unsigned long v7;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v9;  // rbx, Other Possible Types: unsigned long long\n
    struct_0 *v10;  // r15, Other Possible Types: unsigned long\n
    unsigned int v11;  // eax\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rbx\n
    unsigned long v14;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v15;  // rbx, Other Possible Types: unsigned long long\n
    struct_0 *v16;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rdi\n
\n
    v5 = &state;\n
    cgc_memset(&state, 0, 65600);\n
    v6 = &v3;\n
    v7 = 4;\n
    while (true)\n
    {\n
        if (v7)\n
        {\n
            v8 = *(&v0);\n
            v7 -= v8;\n
            v6 += v8;\n
            if (!(!cgc_receive(&state, 0, 65600, v8)))\n
                goto LABEL_403056;\n
        }\n
        else\n
        {\n
            if (*(&v3) == 0x69564d00)\n
            {\n
                v9 = 4;\n
                v10 = &v1;\n
                do\n
                {\n
                    if (!v9)\n
                    {\n
                        v11 = *(&v1);\n
                        if (v11 < 0)\n
                        {\n
                            v9 = 64;\n
                            do\n
                            {\n
                                if (!v9)\n
                                {\n
                                    v11 = *(&v1);\n
                                    goto LABEL_4030bf;\n
                                }\n
                                v8 = *(&v0);\n
                                v9 -= v8;\n
                                v5 += v8;\n
                            } while (!cgc_receive(&state, 0, 65600, v8));\n
                        }\n
LABEL_4030bf:\n
                        v12 = v11 & 65535;\n
                        if (v9)\n
                        {\n
                            v9 = v12;\n
                            v14 = &g_405d60;\n
                            while (v13)\n
                            {\n
                                v8 = *(&v0);\n
                                v13 -= v8;\n
                                v14 += v8;\n
                                if (cgc_receive(&state, 0, 65600, v8))\n
                                    goto LABEL_403056;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            while (true)\n
                            {\n
                                v15 = 4;\n
                                v16 = &v2;\n
                                while (v15)\n
                                {\n
                                    v8 = *(&v0);\n
                                    v15 -= v8;\n
                                    v16 += v8;\n
                                    if (!(!cgc_receive(v17, 0, 65600, v8)))\n
                                        goto LABEL_403165;\n
                                }\n
                                if (cgc_process(*(&v2)))\n
                                    break;\n
                                cgc_transmit(v17, 0, 65600, v8);\n
                            }\n
LABEL_403165:\n
                            goto LABEL_403067;\n
                        }\n
                    }\n
                    v8 = *(&v0);\n
                    v9 -= v8;\n
                    v10 += v8;\n
                } while (!cgc_receive(&state, 0, 65600, v8));\n
            }\n
LABEL_403056:\n
            break;\n
        }\n
    }\n
LABEL_403067:\n
    cgc_transmit(v17);\n
    return 0;\n
}\n
", "4206971:cgc_process": "extern unsigned int g_405d24;\n
extern unsigned short g_405d28;\n
extern unsigned short g_405d2c;\n
extern char g_405d60;\n
extern char state;\n
\n
long long cgc_process(unsigned long long a0)\n
{\n
    char *v0;  // [bp-0x28]\n
    int tmp_10;  // tmp #10\n
    char *v2;  // rax\n
    unsigned long v4;  // rax\n
    char *v5;  // rcx, Other Possible Types: unsigned long\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // esi\n
    unsigned short v9;  // dx\n
    unsigned short v10;  // dx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // edx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned int v19;  // ecx\n
    unsigned long long v20;  // rdi\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi\n
    unsigned int v23;  // ecx\n
    unsigned long v24;  // rbp, Other Possible Types: unsigned long long\n
    unsigned int v25;  // edx\n
    unsigned long long v26;  // rsi\n
    unsigned long long v27;  // rsi\n
    unsigned long long v28;  // rdx\n
    unsigned int v30;  // edi\n
    unsigned int v33;  // ecx\n
\n
    v0 = v2;\n
    switch (a0)\n
    {\n
    case 0:\n
        return 1;\n
    case 1:\n
        v9 = 0;\n
        if (v5)\n
            v9 = *((&state + 0x4 * v5));\n
        v23 = *(&(&g_405d60)[a0 + v9]);\n
        goto LABEL_403389;\n
    case 2:\n
        v10 = 0;\n
        if (v4)\n
            v10 = *(&(&state)[4 * v4]);\n
        *(&(&g_405d60)[a0 + v10]) = (!v5 ? *(&state + 0x4 * v5) : 0);\n
        break;\n
    case 3:\n
        if (g_405d24 == 1)\n
        {\n
            v18 = g_405d2c;\n
            if (g_405d2c + g_405d28 > 0x10000)\n
                return 1;\n
            v24 = &(&g_405d60)[g_405d28];\n
            while (v18)\n
            {\n
                v5 = v0;\n
                v18 -= v5;\n
                v24 += v5;\n
                if (cgc_receive(a0, v27, v28, v5))\n
                    return 0;\n
            }\n
        }\n
        else\n
        {\n
            if (g_405d24)\n
                return 1;\n
            if (g_405d2c + g_405d28 > 0x10000)\n
                return 1;\n
            cgc_transmit(a0, v26);\n
            break;\n
        }\n
LABEL_40342f:\n
        return 0;\n
    case 4:\n
        v16 = 0;\n
        if (v5)\n
            v16 = *((&state + 0x4 * v5));\n
        *(&(&state)[4 * v4]) = *(&(&state)[4 * v4]) + a0 + v16;\n
        return 0;\n
    case 5:\n
        v12 = 0;\n
        if (v5)\n
            v12 = *((&state + 0x4 * v5));\n
        *(&(&state)[4 * v4]) = *(&(&state)[4 * v4]) - (a0 + v12);\n
        return 0;\n
    case 6:\n
        v13 = 0;\n
        if (v5)\n
            v13 = *((&state + 0x4 * v5));\n
        v23 = *(&(&state)[4 * v4]) * (a0 + v13);\n
LABEL_403389:\n
        *(&(&state)[4 * v4]) = v23;\n
        return 0;\n
    case 7:\n
        if (!v5)\n
        {\n
            tmp_10 = a0 * 0x8000;\n
            v20 = a0 * 0x10000;\n
            if ([D] amd64g_calculate_condition(0x4<64>, 0x1f<64>, rdi<8>, t10, cc_ndep<8>))\n
                return 1;\n
            a0 = v20 >> 16;\n
            v19 = 0;\n
        }\n
        else\n
        {\n
            v19 = *((&state + 0x4 * v5));\n
            if (!v19 + a0)\n
                return 1;\n
        }\n
        v30 = a0 + v19;\n
        *(&(&state)[4 * v4]) = (0 CONCAT *(&(&state)[4 * v4])) /m v30;\n
        return 0;\n
    case 8:\n
        v14 = 0;\n
        if (v5)\n
            v14 = *((&state + 0x4 * v5));\n
        *(&(&state)[4 * v4]) = *(&(&state)[4 * v4]) | a0 | v14;\n
        return 0;\n
    case 9:\n
        v17 = 0;\n
        if (v5)\n
            v17 = *((&state + 0x4 * v5));\n
        *(&(&state)[4 * v4]) = *(&(&state)[4 * v4]) & (a0 | v17);\n
        return 0;\n
    case 10:\n
        v15 = 0;\n
        if (v5)\n
            v15 = *((&state + 0x4 * v5));\n
        *(&(&state)[4 * v4]) = *(&(&state)[4 * v4]) ^ (a0 | v15);\n
        return 0;\n
    case 11:\n
        v25 = 0;\n
        v6 = 0;\n
        if (v5)\n
            v6 = *((&state + 0x4 * v5));\n
        v21 = a0 & 15;\n
        if (v21)\n
            v25 = *(&(&state)[4 * v21]);\n
        v33 = 0;\n
        *(&v33) = v6 < v25;\n
        goto LABEL_40327a;\n
    case 12:\n
        v7 = 0;\n
        v8 = 0;\n
        if (v5)\n
            v8 = *((&state + 0x4 * v5));\n
        v22 = a0 & 15;\n
        if (v22)\n
            v7 = *(&(&state)[4 * v22]);\n
        v33 = 0;\n
        *(&v33) = v8 <= v7;\n
        goto LABEL_40327a;\n
    default:\n
        return 1;\n
    }\n
LABEL_40327a:\n
    *(&(&state)[4 * v4]) = v33;\n
    goto LABEL_40342f;\n
}\n
", "4207804:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_allocate": null, "5242904:cgc_deallocate": null, "5242912:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}