{"4202496:_init": "extern struct_0 *g_40a600;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a600;\n
    if (g_40a600)\n
        v1 = g_40a600();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a620;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a620;\n
    goto *(4236840);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4236816);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a5f8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_40a608;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a610;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a610)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203810:sub_402522": null, "4203824:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204019:sub_4025f3": null, "4204032:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: unsigned long, struct struct_0 **, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204572:sub_40281c": null, "4204576:cgc_cgcfloor": "long long cgc_cgcfloor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204724:sub_4028b4": null, "4204736:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204860:sub_40293c": null, "4204864:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204992:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205054:sub_4029fe": null, "4205056:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 = v4 >> 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205503:sub_402bbf": null, "4205504:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned long v10;  // [bp-0x10]\n
    char v11;  // [bp-0x8]\n
    unsigned long long v13;  // rbp\n
    unsigned long v14;  // xmm0lq\n
    char *v15;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v16;  // xmm0lq\n
    char *v17;  // rax\n
    int v19;  // xmm0, Other Possible Types: unsigned long long\n
    char *v20;  // rax\n
    char *v21;  // rax\n
    char *v22;  // rax\n
    char *v23;  // rax\n
\n
    v13 = &v11;\n
    v10 = v14;\n
    if (!a0)\n
    {\n
        return v15;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v15 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v16 = v10;\n
            if ((((CmpF(v16, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v15 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402eed;\n
            }\n
            v5 = 0;\n
            v4 = a0;\n
            v3 = 0;\n
            v19 = v10;\n
            if ((((CmpF(v19, 0) & 69) | ((CmpF(v19, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v19 = tmp_7;\n
                v10 = v19;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v10) & 69) | ((CmpF(0, v10) & 69) >> 6)) & 1) != 1)\n
            {\n
                v5 = 1;\n
                v17 = v4;\n
                v4 = v17 + 1;\n
                *(v17) = 45;\n
                v10 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v8 = v10;\n
            if ((((CmpF(0x3ff0000000000000, v8) & 69) | ((CmpF(0x3ff0000000000000, v8) & 69) >> 6)) & 1) != 1)\n
                v8 = 0;\n
            v7 = 0;\n
            v6 = 0;\n
            while (true)\n
            {\n
                v1 = 1;\n
                if ((CmpF(v10, 4532020583610935537) & 1))\n
                    v1 = 0 <= v8;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v19) = v2;\n
                if ((((CmpF(v19, 0) & 69) | ((CmpF(v19, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v19 = tmp_12;\n
                    cgc_cgcfloor();\n
                    v9 = v19;\n
                    v10 = (0 CONCAT v9 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v10);\n
                    v20 = v4;\n
                    v4 = v20 + 1;\n
                    *(v20) = v9 + 48;\n
                    if (v6)\n
                        v7 += 1;\n
                }\n
                if (!v8)\n
                {\n
                    *(&v19) = v10;\n
                    if ((((CmpF(v19, 0) & 69) | ((CmpF(v19, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v21 = v4;\n
                        v4 = v21 + 1;\n
                        *(v21) = 46;\n
                        v6 = 1;\n
                        v7 = 0;\n
                    }\n
                }\n
                v8 -= 1;\n
            }\n
            if (!v6)\n
            {\n
                v22 = v4;\n
                v4 = v22 + 1;\n
                *(v22) = 46;\n
                v6 = 1;\n
                v7 = 0;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v6)\n
                    v0 = v7 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v23 = v4;\n
                v4 = v23 + 1;\n
                *(v23) = 48;\n
                v7 += 1;\n
            }\n
            v15 = v4;\n
            *(v15) = 0;\n
LABEL_402eed:\n
        }\n
        return v15;\n
    }\n
    else\n
    {\n
        v15 = cgc_strcpy(a0, \"nan\");\n
        return v15;\n
    }\n
}\n
", "4206333:sub_402efd": null, "4206336:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    struct struct_1 **v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    struct_2 *v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10c]\n
    unsigned long long *v3;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v4;  // [bp-0x100]\n
    unsigned int *v5;  // [bp-0xf8]\n
    unsigned int v6;  // [bp-0xec]\n
    unsigned int *v7;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0xe0]\n
    unsigned int v9;  // [bp-0xd4]\n
    unsigned int *v10;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v11;  // [bp-0xc8]\n
    unsigned int v12;  // [bp-0xbc]\n
    unsigned int *v13;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_2 *v14;  // [bp-0xb0]\n
    unsigned int v15;  // [bp-0xa8]\n
    unsigned int v16;  // [bp-0xa4]\n
    char *v17;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_0 *v18;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v19;  // [bp-0x90]\n
    struct_0 *v20;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned int v21;  // [bp-0x7c]\n
    struct_0 *v22;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x70]\n
    char v24;  // [bp-0x69]\n
    char v25;  // [bp-0x68]\n
    unsigned int v26;  // [bp-0x24]\n
    char *v27;  // [bp-0x18]\n
    unsigned int v28;  // [bp-0xc]\n
    struct_2 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    unsigned int *v32;  // rax\n
    struct_2 *v33;  // rcx\n
    unsigned int *v34;  // rdx\n
    struct_2 *v35;  // rcx\n
    unsigned long long v36;  // rdx\n
    unsigned int *v37;  // rax\n
    struct_2 *v38;  // rcx\n
    unsigned int *v39;  // rdx\n
    unsigned long long v40;  // rdx\n
    unsigned long long *v41;  // rax\n
    struct_2 *v42;  // rcx\n
    unsigned long long *v43;  // rdx\n
    struct_2 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    struct struct_1 **v46;  // rax\n
    struct_2 *v47;  // rcx\n
    struct struct_1 **v48;  // rdx\n
    struct_2 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned int *v51;  // rax\n
    struct_2 *v52;  // rcx\n
    unsigned int *v53;  // rdx\n
\n
    v27 = a0;\n
    v26 = 0;\n
    if (!v27)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (true)\n
    {\n
        if (!*(v27))\n
        {\n
            v28 = v26;\n
            return v28;\n
        }\n
        else if (*(v27) != 64)\n
        {\n
            cgc_putc(*(v27));\n
            v27 += 1;\n
            v26 += 1;\n
        }\n
        else\n
        {\n
            v27 += 1;\n
            v16 = *(v27);\n
            if (!v16)\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            if (v16 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v16 == 99)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v33 = v14;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[2];\n
                    v13 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v14;\n
                    v31 = v15;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v13 = v32;\n
                }\n
                v24 = *(v13);\n
                cgc_putc(v24);\n
            }\n
            else if (v16 == 100)\n
            {\n
                v11 = a1;\n
                v12 = v11->field_0;\n
                if (v12 > 40)\n
                {\n
                    v38 = v11;\n
                    v39 = v38->field_8;\n
                    v38->field_8 = &v39[2];\n
                    v10 = v39;\n
                }\n
                else\n
                {\n
                    v35 = v11;\n
                    v36 = v12;\n
                    v37 = v36 + v35->field_10;\n
                    v35->field_0 = v36 + 8;\n
                    v10 = v37;\n
                }\n
                v23 = *(v10);\n
                cgc_int_to_str(v23, &v25);\n
                for (v22 = &v25; *(v22); v22 += 1)\n
                {\n
                    cgc_putc(*(v22));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 <= 160)\n
                {\n
                    v40 = v6;\n
                    v41 = v40 + v4->field_10;\n
                    *(v5) = v40 + 16;\n
                    v3 = v41;\n
                }\n
                else\n
                {\n
                    v42 = v4;\n
                    v43 = v42->field_8;\n
                    v42->field_8 = &v43[1];\n
                    v3 = v43;\n
                }\n
                v19 = *(v3);\n
                cgc_float_to_str(&v25);\n
                for (v18 = &v25; v18->field_0; v18 += 1)\n
                {\n
                    cgc_putc(v18->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 <= 40)\n
                {\n
                    v44 = v1;\n
                    v45 = v2;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v0 = v46;\n
                }\n
                else\n
                {\n
                    v47 = v1;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v0 = v48;\n
                }\n
                for (v17 = *(v0); *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 120)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 > 40)\n
                {\n
                    v52 = v8;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[2];\n
                    v7 = v53;\n
                }\n
                else\n
                {\n
                    v49 = v8;\n
                    v50 = v9;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v7 = v51;\n
                }\n
                v21 = *(v7);\n
                cgc_int_to_hex(v21, &v25);\n
                for (v20 = &v25; v20->field_0; v20 += 1)\n
                {\n
                    cgc_putc(v20->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            v27 += 1;\n
        }\n
    }\n
}\n
", "4207585:sub_4033e1": null, "4207600:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4207760:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4207897:sub_403519": null, "4207904:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4208080:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4208192:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return v0;\n
}\n
", "4208275:sub_403693": null, "4208288:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4208339:sub_4036d3": null, "4208352:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4208403:sub_403713": null, "4208416:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4208459:sub_40374b": null, "4208464:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4208507:sub_40377b": null, "4208512:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4208563:sub_4037b3": null, "4208576:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4208667:sub_40381b": null, "4208672:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4208700:sub_40383c": null, "4208704:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4208756:sub_403874": null, "4208768:cgc_cgcatof": "long long cgc_cgcatof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_403a69;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_403a69;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_403a69;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_4039d9:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_403a69;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_4039d9;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_403a69:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4209325:sub_403aad": null, "4209328:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4209720:sub_403c38": null, "4209728:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4209831:sub_403ca7": null, "4209840:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((a0 + v1)) = *((a1 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = 0;\n
    }\n
    return a0;\n
}\n
", "4210013:sub_403d5d": null, "4210016:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4210134:sub_403dd6": null, "4210144:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 -= 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4210232:sub_403e38": null, "4210240:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4210358:sub_403eb6": null, "4210368:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4210577:sub_403f91": null, "4210592:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4210675:sub_403ff3": null, "4210688:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 != a1)\n
        {\n
            *((a0 + v2)) = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return v2;\n
        }\n
    }\n
}\n
", "4210889:sub_4040c9": null, "4210896:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4211058:sub_404172": null, "4211072:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4211304:sub_404268": null, "4211312:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x18], Other Possible Types: char\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = 0;\n
    if (!a0)\n
        return v4;\n
    v0 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 < v0)\n
        {\n
            v4 = cgc_transmit(a0, v5, v6, v7);\n
            if (v4)\n
                return v4;\n
            v1 = *(&v2) + v1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 == 1)\n
                    return v4;\n
                v4 = cgc_transmit(a0, v5, v6, v7);\n
                if (v4)\n
                    return v4;\n
            }\n
        }\n
    }\n
}\n
", "4211506:sub_404332": null, "4211520:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4211636:sub_4043b4": null, "4211648:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4212358:sub_404686": null, "4212368:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        if (cgc_transmit(a0, a1, v4, v5))\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 = *(&v1) + v0;\n
    }\n
}\n
", "4212522:sub_40472a": null, "4212528:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4212677:sub_4047c5": null, "4212688:cgc_read_until": "long long cgc_read_until(unsigned long a0, char *a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    char v1;  // [bp-0x38]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v7;  // rcx\n
\n
    for (v2 = 0; v2 < a2 - 1; *((a0 + v7)) = v0)\n
    {\n
        if (cgc_receive(a0, a1, a2, rcx<8>))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (!*(&v1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (cgc_strchr(a1, v0))\n
            break;\n
        v7 = v2;\n
        v2 = v7 + 1;\n
    }\n
    *((a0 + v2)) = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4212891:sub_40489b": null, "4212896:cgc_StoreTemp": "extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
\n
long long cgc_StoreTemp(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, char *a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long v3;  // xmm0lq\n
\n
    cgc_cgcatof(a4);\n
    v0 = v3;\n
    if ((((CmpF(13863703411818286285, v0) & 69) | ((CmpF(13863703411818286285, v0) & 69) >> 6)) & 1) == 1 && (((CmpF(v0, 0x4077500000000000) & 69) | ((CmpF(v0, 0x4077500000000000) & 69) >> 6)) & 1) == 1)\n
    {\n
        STORE(addr=(((rdi<8> + (Conv(32->64, esi<4>) * 0x8<64>)) + (Conv(32->64, (Load(addr=0x40a794<64>, size=4, endness=Iend_LE) * edx<4>)) * 0x8<64>)) + (Conv(32->64, (Load(addr=0x40a7e8<64>, size=4, endness=Iend_LE) * (Load(addr=0x40a794<64>, size=4, endness=Iend_LE) * ecx<4>))) * 0x8<64>)), data=Conv(128->64, ((0x0<64> CONCAT 0x4071126666666666<64>) + Conv(64->128, Load(addr=stack_base-56, size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4213084:sub_40495c": null, "4213088:cgc_read_temps": "extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_read_temps(unsigned int a0)\n
{\n
    char v0;  // [bp-0xa8]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char v4;  // [bp-0x9]\n
\n
    for (v1 = 0; v1 < cgc_Z; v1 += 1)\n
    {\n
        for (v2 = 0; v2 < cgc_Y; v2 += 1)\n
        {\n
            for (v3 = 0; v3 < cgc_X; v3 += 1)\n
            {\n
                if (cgc_read_until(&v0, \",\\n
\", 99) == -1)\n
                {\n
                    v4 = 255;\n
                    return v4;\n
                }\n
                if (cgc_StoreTemp(a0, v3, v2, v1, &v0))\n
                {\n
                    cgc_puts(\"Invalid temperature\");\n
                    v4 = 255;\n
                    return v4;\n
                }\n
            }\n
        }\n
    }\n
    cgc_flush_stdin();\n
    v4 = 0;\n
    return v4;\n
}\n
", "4213355:sub_404a6b": null, "4213360:cgc_flush_stdin": "long long cgc_flush_stdin()\n
{\n
    unsigned int v0;  // [bp-0xac]\n
    unsigned int v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90], Other Possible Types: unsigned long long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r8\n
\n
    while (true)\n
    {\n
        for (v0 = 0; v0 < 16; v0 += 1)\n
        {\n
            *(&(&v3)[8 * v0]) = 0;\n
        }\n
        v3 = *(&v3) | 1;\n
        v1 = 0;\n
        v2 = 0;\n
        if (cgc_fdwait(v6, v7, v8, v9, v10))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        else if (!(v3 & 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (cgc_receive(v6, v7, v8, v9))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4213635:sub_404b83": null, "4213648:cgc_kbhit": "long long cgc_kbhit()\n
{\n
    unsigned int v0;  // [bp-0xac]\n
    unsigned int v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x94]\n
    unsigned long long v3;  // [bp-0x90], Other Possible Types: char\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r8\n
\n
    do\n
    {\n
        for (v0 = 0; v0 < 16; v0 += 1)\n
        {\n
            *(&(&v3)[8 * v0]) = 0;\n
        }\n
        v3 = *(&v3) | 1;\n
        v1 = 1;\n
        v2 = 0;\n
        if (cgc_fdwait(v6, v7, v8, v9, v10))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    } while (!(v3 & 1));\n
    if (cgc_receive(v6, v7, v8, v9))\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4213918:sub_404c9e": null, "4213920:cgc_ValidStr": "long long cgc_ValidStr(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        if (!cgc_strchr(a1, *(v0)))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4214025:sub_404d09": null, "4214032:cgc_ParseDimensions": "extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_ParseDimensions(char *a0)\n
{\n
    char *v0;  // [bp-0x40]\n
    char *v1;  // [bp-0x38]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x26]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    strncpy(&v3, \"0123456789,. \", 13);\n
    v2 = a0;\n
    if (!cgc_ValidStr(a0, &v3))\n
    {\n
        cgc_puts(\"Invalid characters in dimensions\");\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = cgc_strtok(a0, \",\");\n
    if (!v2)\n
    {\n
        cgc_puts(\"Invalid X dimension\\n
\");\n
        v4 = -1;\n
        return v4;\n
    }\n
    cgc_X = cgc_atoi(v2);\n
    v1 = cgc_strtok(NULL, \",\");\n
    if (!v1)\n
    {\n
        cgc_puts(\"Invalid Y dimension\\n
\");\n
        v4 = -1;\n
        return v4;\n
    }\n
    cgc_Y = cgc_atoi(v1);\n
    v0 = cgc_strtok(NULL, \",\");\n
    if (!v0)\n
    {\n
        cgc_puts(\"Invalid Z dimension\\n
\");\n
        v4 = -1;\n
        return v4;\n
    }\n
    cgc_Z = cgc_atoi(v0);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4214352:cgc_InitAir": "extern unsigned long long cgc_HC;\n
extern void* cgc_TC;\n
extern unsigned long long g_40a758;\n
extern unsigned long long g_40a760;\n
extern unsigned long long g_40a768;\n
extern unsigned long long g_40a770;\n
extern unsigned long long g_40a778;\n
extern unsigned long long g_40a780;\n
extern unsigned long long g_40a788;\n
extern unsigned long long g_40a7a8;\n
extern unsigned long long g_40a7b0;\n
extern unsigned long long g_40a7b8;\n
extern unsigned long long g_40a7c0;\n
extern unsigned long long g_40a7c8;\n
extern unsigned long long g_40a7d0;\n
extern unsigned long long g_40a7d8;\n
\n
long long cgc_InitAir()\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_TC = 0;\n
    g_40a7a8 = 4574951056986852242;\n
    g_40a7b0 = 4580268907426851324;\n
    g_40a7b8 = 4582661219548910531;\n
    g_40a7c0 = 4583468264602135324;\n
    g_40a7c8 = 4584916622242297676;\n
    g_40a7d0 = 4585781313370752811;\n
    g_40a7d8 = 4586703650574438289;\n
    cgc_HC = 0x40add60000000000;\n
    g_40a758 = 0x40a6620000000000;\n
    g_40a760 = 4656501320727165665;\n
    g_40a768 = 4653808833134630587;\n
    g_40a770 = 0x4091433afb7e9100;\n
    g_40a778 = 4651187636116821902;\n
    g_40a780 = 4649888259663395291;\n
    g_40a788 = 4648799525008790100;\n
    return v1;\n
}\n
", "4214609:sub_404f51": null, "4214624:cgc_InitAluminum": "extern unsigned long long cgc_HC;\n
extern unsigned long long cgc_TC;\n
extern unsigned long long g_40a758;\n
extern unsigned long long g_40a760;\n
extern unsigned long long g_40a768;\n
extern unsigned long long g_40a770;\n
extern unsigned long long g_40a778;\n
extern unsigned long long g_40a780;\n
extern unsigned long long g_40a788;\n
extern unsigned long long g_40a7a8;\n
extern unsigned long long g_40a7b0;\n
extern unsigned long long g_40a7b8;\n
extern unsigned long long g_40a7c0;\n
extern unsigned long long g_40a7c8;\n
extern unsigned long long g_40a7d0;\n
extern unsigned long long g_40a7d8;\n
\n
long long cgc_InitAluminum()\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_TC = 0x40b00e0000000000;\n
    g_40a7a8 = 0x407b000000000000;\n
    g_40a7b0 = 0x406f000000000000;\n
    g_40a7b8 = 0x406d600000000000;\n
    g_40a7c0 = 0x406dc00000000000;\n
    g_40a7c8 = 0x406e000000000000;\n
    g_40a7d0 = 0x406d800000000000;\n
    g_40a7d8 = 0x406d400000000000;\n
    cgc_HC = 4638975017419486003;\n
    g_40a758 = 0x41308d8000000000;\n
    g_40a760 = 0x413cf7a000000000;\n
    g_40a768 = 4702247888072631910;\n
    g_40a770 = 4702615963333925274;\n
    g_40a778 = 0x4143c52a00000000;\n
    g_40a780 = 4702989862570872013;\n
    g_40a788 = 0x4145300000000000;\n
    return v1;\n
}\n
", "4214886:sub_405066": null, "4214896:cgc_InitCopper": "extern unsigned long long cgc_HC;\n
extern unsigned long long cgc_TC;\n
extern unsigned long long g_40a758;\n
extern unsigned long long g_40a760;\n
extern unsigned long long g_40a768;\n
extern unsigned long long g_40a770;\n
extern unsigned long long g_40a778;\n
extern unsigned long long g_40a780;\n
extern unsigned long long g_40a788;\n
extern unsigned long long g_40a7a8;\n
extern unsigned long long g_40a7b0;\n
extern unsigned long long g_40a7b8;\n
extern unsigned long long g_40a7c0;\n
extern unsigned long long g_40a7c8;\n
extern unsigned long long g_40a7d0;\n
extern unsigned long long g_40a7d8;\n
\n
long long cgc_InitCopper()\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_TC = 0x40d8510000000000;\n
    g_40a7a8 = 0x4081680000000000;\n
    g_40a7b0 = 0x407ac00000000000;\n
    g_40a7b8 = 0x4079600000000000;\n
    g_40a7c0 = 0x4078f00000000000;\n
    g_40a7c8 = 0x4078900000000000;\n
    g_40a7d0 = 0x4078400000000000;\n
    g_40a7d8 = 0x4077e00000000000;\n
    cgc_HC = 4638922240861352755;\n
    g_40a758 = 0x4143191000000000;\n
    g_40a760 = 0x4147df5400000000;\n
    g_40a768 = 0x4149842300000000;\n
    g_40a770 = 0x414aa43e00000000;\n
    g_40a778 = 0x414b2fee00000000;\n
    g_40a780 = 0x414b88fb00000000;\n
    g_40a788 = 0x414c262100000000;\n
    return v1;\n
}\n
", "4215158:sub_405176": null, "4215168:cgc_SetTC": "extern char cgc_TC;\n
\n
long long cgc_SetTC(unsigned long a0, char *a1)\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    cgc_cgcatof(a1);\n
    *(&(&cgc_TC)[8 * a0]) = v1;\n
    return &cgc_TC;\n
}\n
", "4215225:sub_4051b9": null, "4215232:cgc_SetHC": "extern char cgc_HC;\n
\n
long long cgc_SetHC(unsigned long a0, char *a1)\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    cgc_cgcatof(a1);\n
    *(&(&cgc_HC)[8 * a0]) = v1;\n
    return &cgc_HC;\n
}\n
", "4215289:sub_4051f9": null, "4215296:cgc_InitCustom": "extern unsigned long long cgc_HC[4];\n
extern unsigned long long cgc_TC[4];\n
extern void g_40a3a0;\n
\n
long long cgc_InitCustom(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xd4]\n
    unsigned long v1;  // [bp-0xd0]\n
    char v2;  // [bp-0xc8]\n
    char v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v8[4];  // rcx\n
    unsigned long long v9[4];  // rcx\n
    int v10;  // xmm1lq, Other Possible Types: unsigned long long\n
    int v11;  // xmm0\n
    unsigned long long v12[4];  // rcx\n
    int v13;  // xmm1\n
    unsigned long long v14[4];  // rcx\n
    int v15;  // xmm1\n
    unsigned long v16;  // rax, Other Possible Types: unsigned long long\n
\n
    v6 = 64;\n
    memcpy(&v3, &g_40a3a0, 64);\n
    cgc_puts(\"Enter the thermal conductivities in W/(m*K) for your material at the following temperatures (Celcius):\");\n
    for (v4 = 0; v4 < 8; v4 += 1)\n
    {\n
        v0 = 0;\n
        while (((v0 ^ 255) & 1))\n
        {\n
            v0 = 1;\n
            cgc_printf(\"@s: \", *(&(&v3)[8 * v4]), v6, a3, a4);\n
            v6 = 99;\n
            if (cgc_read_until(&v2, \"\\n
\", 99) == -1)\n
                cgc__terminate(\"@s: \");\n
            cgc_cgcatof(&v2);\n
            v1 = v11;\n
            v11 = 0;\n
            if ((((CmpF(0, v1) & 69) | ((CmpF(0, v1) & 69) >> 6)) & 1) != 1)\n
            {\n
                v16 = cgc_puts(\"Invalid value...must be greater than zero\");\n
                v0 = 0;\n
                return v16;\n
            }\n
            else if (v4 > 0)\n
            {\n
                *(&v11) = cgc_TC[1 + v4];\n
                if ((((CmpF(v11, 0) & 69) | ((CmpF(v11, 0) & 69) >> 6)) & 1) != 1)\n
                {\n
                    *(&v11) = v1;\n
                    v8 = v4 - 1;\n
                    if ((((CmpF(v11, *((&cgc_TC[0] + 0x8 * v9))) & 69) | ((CmpF(v11, *((&cgc_TC[0] + 0x8 * v9))) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        *(&v11) = v1;\n
                        a3 = v4 - 1;\n
                        xmm1<16> = ((0x0<64> CONCAT 0x3ff4000000000000<64>) * Conv(64->128, Load(addr=(0x40a7a0<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                        if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                            v0 = 0;\n
                    }\n
                    else\n
                    {\n
                        v10 = v1;\n
                        a3 = v4 - 1;\n
                        *(&v11) = cgc_TC[a3];\n
                        if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                        {\n
                            v10 = v1;\n
                            a3 = v4 - 1;\n
                            xmm0<16> = ((0x0<64> CONCAT 0x3fe8000000000000<64>) * Conv(64->128, Load(addr=(0x40a7a0<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                v0 = 0;\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    a3 = v4 - 1;\n
                    v11 = 0;\n
                    if ((((CmpF(0, *((&cgc_TC[0] + 0x8 * a3))) & 69) | ((CmpF(0, *((&cgc_TC[0] + 0x8 * a3))) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        *(&v11) = v1;\n
                        v9 = v4 - 1;\n
                        if ((((CmpF(v11, *((&cgc_TC[0] + 0x8 * v9))) & 69) | ((CmpF(v11, *((&cgc_TC[0] + 0x8 * v9))) & 69) >> 6)) & 1) != 1)\n
                        {\n
                            *(&v11) = v1;\n
                            a3 = v4 - 1;\n
                            xmm1<16> = ((0x0<64> CONCAT 0x3fe8000000000000<64>) * Conv(64->128, Load(addr=(0x40a7a0<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                v0 = 0;\n
                        }\n
                        else\n
                        {\n
                            v10 = v1;\n
                            a3 = v4 - 1;\n
                            *(&v11) = cgc_TC[a3];\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                            {\n
                                v10 = v1;\n
                                a3 = v4 - 1;\n
                                xmm0<16> = ((0x0<64> CONCAT 0x3ff4000000000000<64>) * Conv(64->128, Load(addr=(0x40a7a0<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                                if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                    v0 = 0;\n
                            }\n
                        }\n
                    }\n
                }\n
                if (!v0)\n
                    cgc_printf(\"Invalid value...must be within @d% of the previous value\\n
\", 25, 99, a3, a4);\n
            }\n
        }\n
        cgc_SetTC(v4, &v2);\n
    }\n
    v16 = cgc_puts(\"Enter the heat capacity in J/(m^3*K) for your material when it is at the following temperatures (Celcius):\");\n
    for (v4 = 0; v4 < 8; v4 = v16)\n
    {\n
        v0 = 0;\n
        while (((v0 ^ 255) & 1))\n
        {\n
            v0 = 1;\n
            cgc_printf(\"@s: \", *(&(&v3)[8 * v4]), v6, a3, a4);\n
            v6 = 99;\n
            if (cgc_read_until(&v2, \"\\n
\", 99) == -1)\n
                cgc__terminate(\"@s: \");\n
            cgc_cgcatof(&v2);\n
            v1 = v11;\n
            v11 = 0;\n
            if ((((CmpF(0, v1) & 69) | ((CmpF(0, v1) & 69) >> 6)) & 1) != 1)\n
            {\n
                v16 = cgc_puts(\"Invalid value...must be greater than zero\");\n
                v0 = 0;\n
                return v16;\n
            }\n
            else if (v4 > 0)\n
            {\n
                *(&v11) = cgc_HC[1 + v4];\n
                if ((((CmpF(v11, 0) & 69) | ((CmpF(v11, 0) & 69) >> 6)) & 1) != 1)\n
                {\n
                    *(&v11) = v1;\n
                    v12 = v4 - 1;\n
                    if ((((CmpF(v11, *((&cgc_HC[0] + 0x8 * v14))) & 69) | ((CmpF(v11, *((&cgc_HC[0] + 0x8 * v14))) & 69) >> 6)) & 1) == 1)\n
                    {\n
                        *(&v10) = v1;\n
                        a3 = v4 - 1;\n
                        *(&v11) = cgc_HC[a3];\n
                        if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                        {\n
                            *(&v10) = v1;\n
                            a3 = v4 - 1;\n
                            xmm0<16> = ((0x0<64> CONCAT 0x3fe8000000000000<64>) * Conv(64->128, Load(addr=(0x40a750<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                v0 = 0;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        *(&v11) = v1;\n
                        a3 = v4 - 1;\n
                        xmm1<16> = ((0x0<64> CONCAT 0x3ff4000000000000<64>) * Conv(64->128, Load(addr=(0x40a750<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                        if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                            v0 = 0;\n
                    }\n
                }\n
                else\n
                {\n
                    a3 = v4 - 1;\n
                    v11 = 0;\n
                    if ((((CmpF(0, *((&cgc_HC[0] + 0x8 * a3))) & 69) | ((CmpF(0, *((&cgc_HC[0] + 0x8 * a3))) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        *(&v11) = v1;\n
                        v14 = v4 - 1;\n
                        if ((((CmpF(v11, *((&cgc_HC[0] + 0x8 * v14))) & 69) | ((CmpF(v11, *((&cgc_HC[0] + 0x8 * v14))) & 69) >> 6)) & 1) == 1)\n
                        {\n
                            *(&v10) = v1;\n
                            a3 = v4 - 1;\n
                            *(&v11) = cgc_HC[a3];\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                            {\n
                                *(&v10) = v1;\n
                                a3 = v4 - 1;\n
                                xmm0<16> = ((0x0<64> CONCAT 0x3ff4000000000000<64>) * Conv(64->128, Load(addr=(0x40a750<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                                if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                    v0 = 0;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            *(&v11) = v1;\n
                            a3 = v4 - 1;\n
                            xmm1<16> = ((0x0<64> CONCAT 0x3fe8000000000000<64>) * Conv(64->128, Load(addr=(0x40a750<64> + (rcx<8> * 0x8<64>)), size=8, endness=Iend_LE)))\n
                            if ((((CmpF(v11, v15) & 69) | ((CmpF(v11, v15) & 69) >> 6)) & 1) != 1)\n
                                v0 = 0;\n
                        }\n
                    }\n
                }\n
                if (!v0)\n
                    cgc_printf(\"Invalid value...must be within @d% of the previous value\\n
\", 25, 99, a3, a4);\n
            }\n
        }\n
        cgc_SetHC(v4, &v2);\n
        v16 = v4 + 1;\n
    }\n
    return v16;\n
}\n
", "4216902:sub_405846": null, "4216912:cgc_AllocateGrid": "long long cgc_AllocateGrid(unsigned long long *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rax\n
\n
    *(&v0) = a3 * a2 * a1 * 8;\n
    v3 = cgc_calloc(*(&v0), 1);\n
    *(a0) = v3;\n
    if (!v3)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4217013:sub_4058b5": null, "4217024:cgc_InitMaterial": "extern unsigned long long cgc_HGrid;\n
extern unsigned long long cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
extern char g_408270;\n
\n
long long cgc_InitMaterial(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    int tmp_61;  // tmp #61\n
    int tmp_63;  // tmp #63\n
    int tmp_62;  // tmp #62\n
    char v0;  // [bp-0xaa]\n
    char v1;  // [bp-0xa9]\n
    unsigned long v2;  // [bp-0xa8]\n
    char v3;  // [bp-0x9a]\n
    char v4;  // [bp-0x99]\n
    unsigned long v5;  // [bp-0x98]\n
    unsigned long v6;  // [bp-0x90], Other Possible Types: unsigned long long\n
    char v7;  // [bp-0x86]\n
    char v8;  // [bp-0x85]\n
    unsigned int v9;  // [bp-0x84]\n
    unsigned int v10;  // [bp-0x80]\n
    unsigned int v11;  // [bp-0x7c]\n
    char v12;  // [bp-0x78]\n
    unsigned int v13;  // [bp-0xc]\n
    char v14;  // [bp-0x8]\n
    unsigned long long v16;  // rbp\n
    unsigned long long *v17;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r9\n
\n
    v16 = &v14;\n
    v4 = 0;\n
    cgc_puts(\"For what material would you like to run this simulation?\");\n
    cgc_puts(\"  1. Air\");\n
    cgc_puts(\"  2. Aluminum\");\n
    cgc_puts(\"  3. Copper\");\n
    cgc_puts(\"  4. Custom\");\n
    while (true)\n
    {\n
        v17 = v4;\n
        v3 = 1;\n
        if (v17 >= 1)\n
            v3 = 4 < v4;\n
        if (!(v3 & 1))\n
            break;\n
        cgc_printf(\"Selection: \", \"\\n
\", 99, v17, a4);\n
        if (cgc_read_until(&v12, \"\\n
\", 99) == -1)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
        v4 = cgc_atoi(&v12);\n
    }\n
    v2 = v4 - 1;\n
    switch (v2)\n
    {\n
    case 0:\n
        cgc_InitAir();\n
        break;\n
    case 1:\n
        cgc_InitAluminum();\n
        break;\n
    case 2:\n
        cgc_InitCopper();\n
        break;\n
    case 3:\n
        cgc_InitCustom(a0, \"\\n
\", 99, 4227696, a4);\n
        break;\n
    default:\n
        v13 = -1;\n
        return v13;\n
    }\n
    cgc_flush_stdin();\n
    v5 = cgc_Z * cgc_Y * cgc_X * 8;\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (cgc_X)\n
        {\n
            v1 = 1;\n
            if (cgc_Y)\n
            {\n
                v1 = 1;\n
                if (cgc_Z)\n
                    v1 = !(v5 <= 27000);\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        cgc_printf(\"How large is the material (X,Y,Z meters): \", \"\\n
\", 99, &g_408270, a4);\n
        if (cgc_read_until(&v12, \"\\n
\", 99) == -1)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
        else if (!cgc_ParseDimensions(&v12))\n
        {\n
            v5 = cgc_Z * cgc_Y * cgc_X * 8;\n
        }\n
        else\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
    }\n
    cgc_flush_stdin();\n
    cgc_pow(a0, \"\\n
\", 99, &g_408270, a4, v18);\n
    tmp_61 = DivV(tmp_63, tmp_62);\n
    if ((CmpF(cgc_Z, tmp_61) & 1))\n
    {\n
        cgc_pow();\n
        tmp_61 = DivV(tmp_63, tmp_62);\n
        if ((CmpF(cgc_X, tmp_61) & 1))\n
        {\n
            cgc_pow();\n
            tmp_61 = DivV(tmp_63, tmp_62);\n
            if ((CmpF(cgc_Y, tmp_61) & 1))\n
            {\n
                if (!cgc_AllocateGrid(&cgc_TGrid, cgc_X, cgc_Y, cgc_Z))\n
                {\n
                    v8 = 255;\n
                    while (v8 < 0)\n
                    {\n
                        cgc_printf(\"Should the material be isothermic? (y,n): \", \"\\n
\", 3, cgc_Z, a4);\n
                        if (cgc_read_until(&v12, \"\\n
\", 3) == -1)\n
                        {\n
                            cgc_free(cgc_TGrid);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                        if (v12 == 121)\n
                        {\n
LABEL_405d0f:\n
                            v8 = 1;\n
                            goto LABEL_405d36;\n
                        }\n
                        else\n
                        {\n
                            if (v12 == 1734565721)\n
                                goto LABEL_405d0f;\n
                            if (v12 != 110 && !(v12 == 78))\n
                                goto LABEL_405d36;\n
                            v8 = 0;\n
LABEL_405d36:\n
                        }\n
                    }\n
                    cgc_flush_stdin();\n
                    if (v8)\n
                    {\n
                        v6 = 0xc071200000000000;\n
                        while (true)\n
                        {\n
                            v0 = 1;\n
                            if ((((CmpF(13863668227446197453, v6) & 69) | ((CmpF(13863668227446197453, v6) & 69) >> 6)) & 1) == 1)\n
                                v0 = !((CmpF(v6, 0x4077500000000000) & 69 | (CmpF(v6, 0x4077500000000000) & 69) >> 6) & 1);\n
                            if (!(v0 & 1))\n
                                break;\n
                            cgc_printf(\"  What temperature? (@f - @f degrees C): \", \"\\n
\", 99, cgc_Z, a4);\n
                            if (cgc_read_until(&v12, \"\\n
\", 99) == -1)\n
                            {\n
                                cgc_free(cgc_TGrid);\n
                                v13 = -1;\n
                                return v13;\n
                            }\n
                            cgc_cgcatof(&v12);\n
                            v6 = 13863668227446197453;\n
                        }\n
                        cgc_flush_stdin();\n
                        for (v11 = 0; v11 < cgc_X; v11 += 1)\n
                        {\n
                            for (v10 = 0; v10 < cgc_Y; v10 += 1)\n
                            {\n
                                for (v9 = 0; v9 < cgc_Z; v9 += 1)\n
                                {\n
                                    v17 = cgc_Y * cgc_X * v9;\n
                                    STORE(addr=(((Load(addr=0x40a7f0<64>, size=8, endness=Iend_LE) + (Conv(32->64, Load(addr=stack_base-124, size=4, endness=Iend_LE)) * 0x8<64>)) + (Conv(32->64, (Load(addr=0x40a794<64>, size=4, endness=Iend_LE) * Load(addr=stack_base-128, size=4, endness=Iend_LE))) * 0x8<64>)) + (rcx<8> * 0x8<64>)), data=Conv(128->64, ((0x0<64> CONCAT 0x4071126666666666<64>) + Conv(64->128, Load(addr=stack_base-144, size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
                                }\n
                            }\n
                        }\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(\"  Send the grid temperatures as a comma separated list of Celcius decimal values.\\n
\", \"\\n
\", 3, cgc_Z, a4);\n
                        cgc_printf(\"  The program will populate the X, then Y, then Z dimensions of the room.\\n
\", \"\\n
\", 3, cgc_Z, a4);\n
                        if (cgc_read_temps(cgc_TGrid))\n
                        {\n
                            cgc_free(cgc_TGrid);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                    }\n
                    v7 = 255;\n
                    while (v7 < 0)\n
                    {\n
                        cgc_printf(\"Are there any constant energy sources in the room? (y,n): \", \"\\n
\", 3, v17, a4);\n
                        if (cgc_read_until(&v12, \"\\n
\", 3) == -1)\n
                        {\n
                            cgc_free(cgc_TGrid);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                        if (v12 == 121)\n
                        {\n
LABEL_405fa3:\n
                            v7 = 1;\n
                            goto LABEL_405fca;\n
                        }\n
                        else\n
                        {\n
                            if (v12 == 1734565721)\n
                                goto LABEL_405fa3;\n
                            if (v12 != 110 && !(v12 == 78))\n
                                goto LABEL_405fca;\n
                            v7 = 0;\n
LABEL_405fca:\n
                        }\n
                    }\n
                    cgc_flush_stdin();\n
                    if (v7)\n
                    {\n
                        if (cgc_AllocateGrid(&cgc_HGrid, cgc_X, cgc_Y, cgc_Z))\n
                        {\n
                            cgc_free(cgc_TGrid);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                        cgc_printf(\"  Send the heat sources as temperatures in a comma separated list of Celcius decimal values.\\n
\", cgc_X, cgc_Y, cgc_Z, a4);\n
                        cgc_printf(\"  The program will populate the X, then Y, then Z dimensions of the room.\\n
\", cgc_X, cgc_Y, cgc_Z, a4);\n
                        cgc_printf(\"  Send @f for any grid location which doesn't have a heat source.\\n
\", cgc_X, cgc_Y, cgc_Z, a4);\n
                        if (cgc_read_temps(cgc_HGrid))\n
                        {\n
                            cgc_free(cgc_TGrid);\n
                            cgc_free(cgc_HGrid);\n
                            v13 = -1;\n
                            return v13;\n
                        }\n
                    }\n
                    v13 = 0;\n
                    return v13;\n
                }\n
                else\n
                {\n
                    v13 = -1;\n
                    return v13;\n
                }\n
            }\n
        }\n
    }\n
    cgc_puts(\"Invalid room dimensions\");\n
    v13 = -1;\n
    return v13;\n
}\n
", "4219044:sub_4060a4": null, "4219056:main": "extern void* cgc_HGrid;\n
extern void* cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // r9\n
\n
    v2 = 0;\n
    v1 = a0;\n
    v0 = a1;\n
    cgc_TGrid = 0;\n
    cgc_HGrid = 0;\n
    cgc_X = 0;\n
    cgc_Y = 0;\n
    cgc_Z = 0;\n
    if (cgc_InitMaterial(a0, a1, a2, a3, a4))\n
        cgc__terminate(a0);\n
    if (cgc_GetSimLength())\n
        cgc__terminate(a0);\n
    cgc_GraphTemps(cgc_TGrid);\n
    cgc_printf(\"At 0.00000 seconds\\n
\", a1, a2, a3, a4);\n
    cgc_kbhit();\n
    cgc_RunSim(\"At 0.00000 seconds\\n
\", a1, a2, a3, a4, v4);\n
    cgc_GraphTemps(cgc_TGrid);\n
    return 0;\n
}\n
", "4219255:sub_406177": null, "4219264:cgc_pGRID": "extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
\n
long long cgc_pGRID(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    return a0 + a1 * 8 + cgc_X * a2 * 8 + cgc_Y * cgc_X * a3 * 8;\n
}\n
", "4219351:sub_4061d7": null, "4219360:cgc_GetSimLength": "extern void* SIM_TIME;\n
\n
long long cgc_GetSimLength(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    SIM_TIME = 0;\n
    while (true)\n
    {\n
        if ((CmpF(0, SIM_TIME) & 1))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        cgc_printf(\"For how long would you like to run the simulation? (s): \", \"\\n
\", 99, a3, a4);\n
        if (cgc_read_until(&v0, \"\\n
\", 99) == -1)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        cgc_cgcatof(&v0);\n
        SIM_TIME = 0;\n
    }\n
}\n
", "4219491:sub_406263": null, "4219504:cgc_L": "extern char cgc_TC;\n
extern unsigned int cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_L(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_37;  // tmp #37\n
    int tmp_39;  // tmp #39\n
    int tmp_38;  // tmp #38\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long long v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v5;  // rax\n
\n
    v5 = a0;\n
    if (v5 < cgc_X)\n
    {\n
        v5 = a1;\n
        if (v5 < cgc_Y)\n
        {\n
            v5 = a2;\n
            if (v5 < cgc_Z)\n
            {\n
                v2 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1, a2));\n
                tmp_24 = DivV(tmp_26, tmp_25);\n
                v0 = tmp_24;\n
                tmp_37 = DivV(tmp_39, tmp_38);\n
                v1 = *(&(&cgc_TC)[8 * tmp_37]);\n
                v3 = v1;\n
                return &cgc_TC;\n
            }\n
        }\n
    }\n
    v3 = 0xbff0000000000000;\n
    return v5;\n
}\n
", "4219712:cgc_C": "extern char cgc_HC;\n
extern unsigned int cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_C(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_37;  // tmp #37\n
    int tmp_39;  // tmp #39\n
    int tmp_38;  // tmp #38\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long long v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v5;  // rax\n
\n
    v5 = a0;\n
    if (v5 < cgc_X)\n
    {\n
        v5 = a1;\n
        if (v5 < cgc_Y)\n
        {\n
            v5 = a2;\n
            if (v5 < cgc_Z)\n
            {\n
                v2 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1, a2));\n
                tmp_24 = DivV(tmp_26, tmp_25);\n
                v0 = tmp_24;\n
                tmp_37 = DivV(tmp_39, tmp_38);\n
                v1 = *(&(&cgc_HC)[8 * tmp_37]);\n
                v3 = v1;\n
                return &cgc_HC;\n
            }\n
        }\n
    }\n
    v3 = 0xbff0000000000000;\n
    return v5;\n
}\n
", "4219920:cgc_K": "extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_K(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    int tmp_25;  // tmp #25\n
    int tmp_27;  // tmp #27\n
    int tmp_26;  // tmp #26\n
    unsigned long v0;  // [bp-0x30]\n
    int tmp_20;  // tmp #20\n
    int tmp_22;  // tmp #22\n
    int tmp_21;  // tmp #21\n
    int tmp_14;  // tmp #14\n
    int tmp_16;  // tmp #16\n
    int tmp_15;  // tmp #15\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    int v4;  // xmm0\n
\n
    if (a3 == -1 && !a0)\n
        goto LABEL_4064cb;\n
    if (a3 == 1 && a0 == cgc_X - 1)\n
        goto LABEL_4064cb;\n
    if (a4 == -1 && !a1)\n
        goto LABEL_4064cb;\n
    if (a4 == 1 && a1 == cgc_Y - 1)\n
        goto LABEL_4064cb;\n
    if (a5 == -1 && !a2)\n
        goto LABEL_4064cb;\n
    if (a5 != 1)\n
    {\n
LABEL_40650a:\n
        cgc_L(a0, a1, a2);\n
        tmp_25 = DivV(tmp_27, tmp_26);\n
        *(&v0) = tmp_25;\n
        v3 = cgc_L(a0 + a3, a1 + a4, a2 + a5);\n
        tmp_20 = DivV(tmp_22, tmp_21);\n
        v4 = tmp_20;\n
    }\n
    else\n
    {\n
        if (!(a2 == cgc_Z - 1))\n
            goto LABEL_40650a;\n
LABEL_4064cb:\n
        v3 = cgc_L(a0, a1, a2);\n
        tmp_14 = DivV(tmp_16, tmp_15);\n
        v4 = tmp_14;\n
    }\n
    v1 = v4;\n
    return v3;\n
}\n
", "4220297:sub_406589": null, "4220304:cgc_H": "extern unsigned int cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_H(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_22;  // tmp #22\n
    int tmp_23;  // tmp #23\n
    int tmp_20;  // tmp #20\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    int v5;  // xmm0lq, Other Possible Types: unsigned long long\n
    unsigned long long *v11;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v5 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1, a2));\n
    v0 = v5;\n
    if (a0)\n
    {\n
        cgc_K(a0, a1, a2, 4294967295, 0, 0);\n
        v2 = v5;\n
        v1 = *(cgc_pGRID(*(&cgc_TGrid), a0 - 1, a1, a2));\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v5 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        v3 = v5;\n
    }\n
    if (a0 != cgc_X - 1)\n
    {\n
        cgc_K(a0, a1, a2, 1, 0, 0);\n
        v2 = v5;\n
        v1 = *(cgc_pGRID(*(&cgc_TGrid), a0 + 1, a1, a2));\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v5 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        v3 = v5;\n
    }\n
    if (a1)\n
    {\n
        cgc_K(a0, a1, a2, 0, 4294967295, 0);\n
        v2 = v5;\n
        v1 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1 - 1, a2));\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v5 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        v3 = v5;\n
    }\n
    if (a1 != cgc_Y - 1)\n
    {\n
        cgc_K(a0, a1, a2, 0, 1, 0);\n
        v2 = v5;\n
        v1 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1 + 1, a2));\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v5 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        v3 = v5;\n
    }\n
    if (a2)\n
    {\n
        cgc_K(a0, a1, a2, 0, 0, 4294967295);\n
        v2 = v5;\n
        v1 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1, a2 - 1));\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v5 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        v3 = v5;\n
    }\n
    v11 = a2;\n
    if (v11 != cgc_Z - 1)\n
    {\n
        cgc_K(a0, a1, a2, 0, 0, 1);\n
        v2 = v5;\n
        v11 = cgc_pGRID(*(&cgc_TGrid), a0, a1, a2 + 1);\n
        v1 = *(v11);\n
        tmp_22 = SubV(tmp_23, tmp_20);\n
        v3 = (0 CONCAT v2) * tmp_22 + (0 CONCAT v3);\n
        return v11;\n
    }\n
    return a2;\n
}\n
", "4221070:sub_40688e": null, "4221072:cgc_Tnew": "extern unsigned long long TimeStep;\n
extern unsigned int cgc_HGrid;\n
extern unsigned int cgc_TGrid;\n
\n
long long cgc_Tnew(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_11;  // tmp #11\n
    int tmp_13;  // tmp #13\n
    int tmp_12;  // tmp #12\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long long *v5;  // rax, Other Possible Types: unsigned long\n
\n
    if (*(&cgc_HGrid) && (CmpF(4636677477922085272, *(cgc_pGRID(*(&cgc_HGrid), a0, a1, a2))) & 1))\n
    {\n
        v5 = cgc_pGRID(*(&cgc_HGrid), a0, a1, a2);\n
        v3 = *(v5);\n
        return v5;\n
    }\n
    v1 = *(cgc_pGRID(*(&cgc_TGrid), a0, a1, a2));\n
    v0 = TimeStep;\n
    cgc_C(a0, a1, a2);\n
    tmp_11 = DivV(tmp_13, tmp_12);\n
    *(&v2) = tmp_11;\n
    v5 = cgc_H(a0, a1, a2);\n
    s_20 =L Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))) + (0x0<64> CONCAT Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
    return v5;\n
}\n
", "4221314:sub_406982": null, "4221328:cgc_CalcTimeStep": "extern unsigned long long TimeStep;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_CalcTimeStep()\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    int tmp_11;  // tmp #11\n
    int tmp_12;  // tmp #12\n
    int tmp_9;  // tmp #9\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20], Other Possible Types: unsigned long long\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    int v7;  // xmm0\n
\n
    v2 = 0x4024000000000000;\n
    for (v3 = 0; v3 < cgc_Z; v3 += 1)\n
    {\n
        for (v4 = 0; v4 < cgc_Y; v4 += 1)\n
        {\n
            for (v5 = 0; v5 < cgc_X; v5 += 1)\n
            {\n
                v0 = 0;\n
                cgc_K(v5, v4, v3, 4294967295, 0, 0);\n
                s_30 =L Conv(128->64, (0x0<128> + Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
                cgc_K(v5, v4, v3, 1, 0, 0);\n
                v0 += v0;\n
                cgc_K(v5, v4, v3, 0, 4294967295, 0);\n
                v0 += v0;\n
                cgc_K(v5, v4, v3, 0, 1, 0);\n
                v0 += v0;\n
                cgc_K(v5, v4, v3, 0, 0, 4294967295);\n
                v0 += v0;\n
                cgc_K(v5, v4, v3, 0, 0, 1);\n
                v0 += v0;\n
                cgc_C(v5, v4, v3);\n
                tmp_11 = DivV(tmp_12, tmp_9);\n
                v7 = tmp_11;\n
                v1 = v7;\n
                *(&v7) = v2;\n
                if ((((CmpF(v7, 0xbff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0xbff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                    v2 = v1;\n
                *(&v7) = v2;\n
                if ((((CmpF(v7, v1) & 69) | ((CmpF(v7, v1) & 69) >> 6)) & 1) != 1)\n
                {\n
                    *(&v7) = v1;\n
                    if ((((CmpF(v7, 0) & 69) | ((CmpF(v7, 0) & 69) >> 6)) & 1) != 1)\n
                        v2 = v1;\n
                }\n
            }\n
        }\n
    }\n
    TimeStep = v2;\n
    return v3;\n
}\n
", "4221833:sub_406b89": null, "4221840:cgc_SimStep": "extern unsigned long long cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern unsigned int cgc_Z;\n
\n
long long cgc_SimStep()\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    *(&v2) = cgc_Z * cgc_Y * cgc_X * 8;\n
    *(&v1) = cgc_calloc(*(&v2), 1);\n
    if (!*(&v1))\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    for (v3 = 0; v3 < cgc_Z; v3 += 1)\n
    {\n
        for (v4 = 0; v4 < cgc_Y; v4 += 1)\n
        {\n
            for (v5 = 0; v5 < cgc_X; v5 += 1)\n
            {\n
                cgc_Tnew(v5, v4, v3);\n
                *(&v0) = xmm0lq<8>;\n
                *(cgc_pGRID(*(&v1), v5, v4, v3)) = v0;\n
            }\n
        }\n
    }\n
    cgc_free(cgc_TGrid);\n
    cgc_TGrid = *(&v1);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4222145:sub_406cc1": null, "4222160:cgc_IncrementTimestep": "extern unsigned long long TimeStep;\n
\n
double cgc_IncrementTimestep(long long a0)\n
{\n
    int v1;  // xmm0\n
\n
    xmm0<16> = ((0x0<64> CONCAT Load(addr=0x40a800<64>, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=rdi<8>, size=8, endness=Iend_LE)))\n
    *(a0) = v1;\n
    return v1;\n
}\n
", "4222190:sub_406cee": null, "4222192:cgc_RunSim": "extern unsigned long long SIM_TIME;\n
extern unsigned long long cgc_TGrid;\n
\n
long long cgc_RunSim(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    cgc_CalcTimeStep();\n
    while (true)\n
    {\n
        if ((((CmpF(SIM_TIME, v0) & 69) | ((CmpF(SIM_TIME, v0) & 69) >> 6)) & 1) == 1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (!cgc_SimStep())\n
        {\n
            cgc_IncrementTimestep(&v0);\n
            cgc_GraphTemps(cgc_TGrid);\n
            cgc_printf(\"At @f seconds\\n
\", a1, a2, a3, a4);\n
            cgc_kbhit();\n
        }\n
        else\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4222331:sub_406d7b": null, "4222336:cgc_output_str": "long long cgc_output_str(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = a0;\n
    v0 = a1;\n
    return cgc_float_to_str(a2);\n
}\n
", "4222408:sub_406dc8": null, "4222416:cgc_TGridAverage": "extern unsigned long long cgc_TGrid;\n
extern unsigned int cgc_X;\n
extern unsigned int cgc_Y;\n
extern char output;\n
\n
double cgc_TGridAverage(long long a0, long long a1, long long a2, long long a3, long long a4, long long a5, int v8)\n
{\n
    unsigned int v0;  // [bp-0x80]\n
    int tmp_28;  // tmp #28\n
    int tmp_29;  // tmp #29\n
    int tmp_26;  // tmp #26\n
    int tmp_53;  // tmp #53\n
    int tmp_54;  // tmp #54\n
    int tmp_51;  // tmp #51\n
    unsigned int v1;  // [bp-0x7c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30]\n
    void* v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
\n
    v7 = a4;\n
    v6 = a5;\n
    v5 = 0;\n
    v4 = 0;\n
    if (a2 + v7 <= cgc_X)\n
        v1 = v7;\n
    else\n
        v1 = cgc_X - a2;\n
    v7 = v1;\n
    if (a3 + v6 <= cgc_Y)\n
        v0 = v6;\n
    else\n
        v0 = cgc_Y - a3;\n
    v6 = v0;\n
    for (v3 = a2; v3 < a2 + v7; v3 += 1)\n
    {\n
        for (v2 = a3; v2 < a3 + v6; v2 += 1)\n
        {\n
            s_28 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=(((Load(addr=0x40a7f0<64>, size=8, endness=Iend_LE) + (Conv(32->64, Load(addr=stack_base-52, size=4, endness=Iend_LE)) * 0x8<64>)) + (Conv(32->64, (Load(addr=0x40a794<64>, size=4, endness=Iend_LE) * Load(addr=stack_base-56, size=4, endness=Iend_LE))) * 0x8<64>)) + (Conv(32->64, (Load(addr=0x40a7e8<64>, size=4, endness=Iend_LE) * (Load(addr=0x40a794<64>, size=4, endness=Iend_LE) * Load(addr=stack_base+8, size=4, endness=Iend_LE)))) * 0x8<64>)), size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))))<8>\n
            s_30 =L Conv(128->64, ((0x0<64> CONCAT 0x3ff0000000000000<64>) + Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
        }\n
    }\n
    tmp_28 = DivV(tmp_29, tmp_26);\n
    *(&(&output)[80 * a0 + 8 * a1]) = tmp_28;\n
    tmp_53 = DivV(tmp_54, tmp_51);\n
    return tmp_53;\n
}\n
", "4222793:sub_406f49": null, "4222800:cgc_GraphTemps": null, "4223620:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:memcpy": null, "5242936:cgc_rint": null, "5242944:cgc_deallocate": null, "5242952:cgc_log10": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}