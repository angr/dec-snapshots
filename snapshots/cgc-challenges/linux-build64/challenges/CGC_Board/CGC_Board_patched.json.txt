{"4202496:_init": "extern struct_0 *g_40b230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40b230;\n
    if (g_40b230)\n
        v1 = g_40b230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40b250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40b250;\n
    goto *(4239960);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202560:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4239936);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40b228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_40b238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40b240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40b240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202933:sub_4021b5": null, "4202944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202991:sub_4021ef": null, "4202992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4231184];\n
    char field_409010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203199:sub_4022bf": null, "4203200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203221:sub_4022d5": null, "4203232:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4231312];\n
    char field_409090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203247:sub_4022ef": null, "4203248:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203279:sub_40230f": null, "4203280:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203354:sub_40235a": null, "4203360:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_40b4a8;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_1 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rsi\n
    unsigned long long v13;  // rdx\n
    struct_2 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_1 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_0 *v20;  // rax\n
\n
    if (!a0)\n
    {\n
LABEL_402445:\n
        return 0;\n
    }\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            return 0;\n
        v7 = *(&v0);\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v6 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v6 = a0;\n
    if (!(v6 <= 2147483647))\n
        goto LABEL_402445;\n
    v9 = v6 + 24;\n
    v10 = cgc_get_size_class(v9);\n
    if (v10 <= 31)\n
    {\n
        v11 = *((&cgc_free_lists + 0x8 * v10));\n
        if (!v11)\n
            goto LABEL_402402;\n
        else\n
            goto LABEL_0x402420;\n
    }\n
    else\n
    {\n
        if (!cgc_allocate(v9, v12, v13))\n
        {\n
            v15 = *(&v0);\n
            if (v15)\n
            {\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_40b4a8;\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
        goto LABEL_402445;\n
    }\n
    while (true)\n
    {\n
        while (*(v11) < v9)\n
        {\n
            v11 = *((v11 + 16));\n
            if (!v11)\n
                goto LABEL_402402;\n
        }\n
        while (true)\n
        {\n
LABEL_402402:\n
            v10 += 1;\n
            if (v10 == 32)\n
                break;\n
            v11 = *(&(&cgc_free_lists)[8 * v10]);\n
        }\n
    }\n
}\n
", "4203780:sub_402504": null, "4203792:cgc_get_size_class": "extern unsigned long long g_40b2a8;\n
extern unsigned long long g_40b2b0;\n
extern unsigned long long g_40b2b8;\n
extern unsigned long long g_40b2c0;\n
extern unsigned long long g_40b2c8;\n
extern unsigned long long g_40b2d0;\n
extern unsigned long long g_40b2d8;\n
extern unsigned long long g_40b2e0;\n
extern unsigned long long g_40b2e8;\n
extern unsigned long long g_40b2f0;\n
extern unsigned long long g_40b2f8;\n
extern unsigned long long g_40b300;\n
extern unsigned long long g_40b308;\n
extern unsigned long long g_40b310;\n
extern unsigned long long g_40b318;\n
extern unsigned long long g_40b320;\n
extern unsigned long long g_40b328;\n
extern unsigned long long g_40b330;\n
extern unsigned long long g_40b338;\n
extern unsigned long long g_40b340;\n
extern unsigned long long g_40b348;\n
extern unsigned long long g_40b350;\n
extern unsigned long long g_40b358;\n
extern unsigned long long g_40b360;\n
extern unsigned long long g_40b368;\n
extern unsigned long long g_40b370;\n
extern unsigned long long g_40b378;\n
extern unsigned long long g_40b380;\n
extern unsigned long long g_40b388;\n
extern unsigned long long g_40b390;\n
extern unsigned long long g_40b398;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_40b2a8 < a0)\n
    {\n
        v1 = 2;\n
        if (g_40b2b0 < a0)\n
        {\n
            v1 = 3;\n
            if (g_40b2b8 < a0)\n
            {\n
                v1 = 4;\n
                if (g_40b2c0 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_40b2c8 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_40b2d0 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_40b2d8 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_40b2e0 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_40b2e8 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_40b2f0 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_40b2f8 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_40b300 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_40b308 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_40b310 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_40b318 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_40b320 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_40b328 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_40b330 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_40b338 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_40b340 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_40b348 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_40b350 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_40b358 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_40b360 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_40b368 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_40b370 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_40b378 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_40b380 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_40b388 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_40b390 < a0)\n
                                                                                                                            v1 = 31 + (g_40b398 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204327:sub_402727": null, "4204336:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    struct struct_0 **v1;  // rax\n
    struct_0 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4204405:sub_402775": null, "4204416:cgc_remove_from_flist": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_0 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_3 *v2;  // rcx\n
    struct_2 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4204493:sub_4027cd": null, "4204496:cgc_coalesce": "extern char cgc_free_lists;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rdx\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rdx\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdx\n
    unsigned long v25;  // r12\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rbx\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rbx\n
    unsigned long v32;  // r12\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // r12\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rax\n
    unsigned long v42;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rax\n
    unsigned long v45;  // rcx\n
\n
    v0 = v2;\n
    v3 = *((a0 + 40));\n
    if (!v3)\n
        return v2;\n
    v13 = *((a0 + 32));\n
    if (!*((v3 + 8)))\n
    {\n
        if (!v13)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v13 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v5 = cgc_get_size_class(*(v13));\n
            v7 = *((v13 + 24));\n
            if (v7)\n
                *((v7 + 16)) = *((v13 + 16));\n
            v11 = *((v13 + 16));\n
            if (v11)\n
                *((v11 + 24)) = v7;\n
            if ((&cgc_free_lists)[v5] == v13)\n
                (&cgc_free_lists)[v5] = v11;\n
            *((v13 + 16)) = 0;\n
            *((v13 + 8)) = 0;\n
            v15 = *(a0);\n
            v16 = cgc_get_size_class(v15);\n
            v18 = *((a0 + 24));\n
            if (v18)\n
                *((v18 + 16)) = *((a0 + 16));\n
            v23 = *((a0 + 16));\n
            if (v23)\n
                *((v23 + 24)) = v18;\n
            if ((&cgc_free_lists)[v16] == a0)\n
                (&cgc_free_lists)[v16] = v23;\n
            *((a0 + 16)) = 0;\n
            *((a0 + 8)) = 0;\n
            v27 = v15 + *(*((a0 + 32)));\n
            *(a0) = v27;\n
            v28 = cgc_get_size_class(v27);\n
            *((a0 + 8)) = 1;\n
            v30 = (&cgc_free_lists)[v28];\n
            if (v30)\n
            {\n
                *((a0 + 16)) = v30;\n
                *(((&cgc_free_lists)[v28] + 24)) = a0;\n
                (&cgc_free_lists)[v28] = a0;\n
                *((a0 + 24)) = 0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b66;\n
            }\n
            else\n
            {\n
                (&cgc_free_lists)[v28] = a0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b66;\n
            }\n
            *((v2 + 32)) = *((v34 + 32));\n
LABEL_402b66:\n
            v37 = *((v34 + 32));\n
            if (!v37)\n
                return v2;\n
        }\n
LABEL_402b6f:\n
        *((v37 + 40)) = v2;\n
        return v2;\n
    }\n
    if (v13 && *((v13 + 8)))\n
    {\n
        v4 = cgc_get_size_class(*(v3));\n
        v6 = *((v3 + 24));\n
        if (v6)\n
            *((v6 + 16)) = *((v3 + 16));\n
        v9 = *((v3 + 16));\n
        if (v9)\n
            *((v9 + 24)) = v6;\n
        if ((&cgc_free_lists)[v4] == v3)\n
        {\n
            (&cgc_free_lists)[v4] = v9;\n
            v13 = *((a0 + 32));\n
        }\n
        *((v3 + 16)) = 0;\n
        *((v3 + 8)) = 0;\n
        v14 = cgc_get_size_class(*(v13));\n
        v17 = *((v13 + 24));\n
        if (v17)\n
            *((v17 + 16)) = *((v13 + 16));\n
        v21 = *((v13 + 16));\n
        if (v21)\n
            *((v21 + 24)) = v17;\n
        if ((&cgc_free_lists)[v14] == v13)\n
            (&cgc_free_lists)[v14] = v21;\n
        *((v13 + 16)) = 0;\n
        *((v13 + 8)) = 0;\n
        v25 = *(a0);\n
        v26 = cgc_get_size_class(v25);\n
        v29 = *((a0 + 24));\n
        if (v29)\n
            *((v29 + 16)) = *((a0 + 16));\n
        v35 = *((a0 + 16));\n
        if (v35)\n
            *((v35 + 24)) = v29;\n
        if ((&cgc_free_lists)[v26] == a0)\n
            (&cgc_free_lists)[v26] = v35;\n
        *((a0 + 16)) = 0;\n
        *((a0 + 8)) = 0;\n
        v38 = *((a0 + 40));\n
        v39 = v25 + *(v38);\n
        *(v38) = v39;\n
        v40 = v39 + *(*((a0 + 32)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 8)) = 1;\n
        v42 = (&cgc_free_lists)[v41];\n
        if (v42)\n
        {\n
            *((v38 + 16)) = v42;\n
            *(((&cgc_free_lists)[v41] + 24)) = v38;\n
            (&cgc_free_lists)[v41] = v38;\n
            *((v38 + 24)) = 0;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_402942;\n
        }\n
        else\n
        {\n
            (&cgc_free_lists)[v41] = v38;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_402942;\n
        }\n
        *((v44 + 32)) = *((v43 + 32));\n
LABEL_402942:\n
        v45 = *((v43 + 32));\n
        if (v45)\n
        {\n
            *((v45 + 40)) = v44;\n
            v2 = *((a0 + 40));\n
            if (!v2)\n
                goto LABEL_402a59;\n
            goto LABEL_402a51;\n
        }\n
    }\n
    v2 = *((a0 + 32));\n
    if (!v2)\n
        return *((a0 + 32));\n
    if (*((v2 + 8)))\n
        return *((a0 + 32));\n
    v8 = cgc_get_size_class(*(v3));\n
    v10 = *((v3 + 24));\n
    if (v10)\n
        *((v10 + 16)) = *((v3 + 16));\n
    v12 = *((v3 + 16));\n
    if (v12)\n
        *((v12 + 24)) = v10;\n
    if ((&cgc_free_lists)[v8] == v3)\n
        (&cgc_free_lists)[v8] = v12;\n
    *((v3 + 16)) = 0;\n
    *((v3 + 8)) = 0;\n
    v19 = *(a0);\n
    v20 = cgc_get_size_class(v19);\n
    v22 = *((a0 + 24));\n
    if (v22)\n
        *((v22 + 16)) = *((a0 + 16));\n
    v24 = *((a0 + 16));\n
    if (v24)\n
        *((v24 + 24)) = v22;\n
    if ((&cgc_free_lists)[v20] == a0)\n
        (&cgc_free_lists)[v20] = v24;\n
    *((a0 + 16)) = 0;\n
    *((a0 + 8)) = 0;\n
    v31 = *((a0 + 40));\n
    v32 = v19 + *(v31);\n
    *(v31) = v32;\n
    v33 = cgc_get_size_class(v32);\n
    *((v31 + 8)) = 1;\n
    v36 = (&cgc_free_lists)[v33];\n
    if (v36)\n
    {\n
        *((v31 + 16)) = v36;\n
        *(((&cgc_free_lists)[v33] + 24)) = v31;\n
        (&cgc_free_lists)[v33] = v31;\n
        *((v31 + 24)) = 0;\n
    }\n
    else\n
    {\n
        (&cgc_free_lists)[v33] = v31;\n
        v2 = *((a0 + 40));\n
        if (!v2)\n
            goto LABEL_402a59;\n
LABEL_402a51:\n
        *((v2 + 32)) = *((a0 + 32));\n
LABEL_402a59:\n
        v37 = *((a0 + 32));\n
        if (!v37)\n
            return v2;\n
        goto LABEL_402b6f;\n
    }\n
    v2 = *((a0 + 40));\n
    if (!v2)\n
        goto LABEL_402a59;\n
    goto LABEL_402a51;\n
}\n
", "4205506:sub_402bc2": null, "4205520:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205562:sub_402bfa": null, "4205568:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205614:sub_402c2e": null, "4205616:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_402cc4:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_402c57;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_402c57:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_402cc4;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_402c57;\n
}\n
", "4206047:sub_402ddf": null, "4206048:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_402f2f:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_402e19;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_402e19:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_402f2f;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_402e19;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_402eb7:\n
            v38 = a2;\n
            goto LABEL_402eba;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_402eb7;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_402eb7;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_402eba:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4206983:sub_403187": null, "4206992:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_403309;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_403309:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_403309;\n
}\n
", "4207390:sub_40331e": null, "4207392:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned long v3;  // r12, Other Possible Types: unsigned long long\n
    void* v4;  // r14, Other Possible Types: unsigned long, unsigned int\n
    unsigned long v5;  // rbp, Other Possible Types: unsigned long long\n
    char v6;  // al\n
    char v7;  // cl\n
\n
    v3 = a1;\n
    v4 = 0;\n
    v1 = a4;\n
    if (a1 >= a2)\n
    {\n
        a3 -= 1;\n
        v3 = (0 CONCAT a1) /m a2 >> 32;\n
        v4 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
    }\n
    if (a3 > 0 && !v4)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            if ((v1 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
        }\n
    }\n
    v6 = (!(v1 & 2) ? v3 + 55 : v3 + 87);\n
    v7 = v3 + 48;\n
    if (10 <= v3)\n
        v7 = v6;\n
    v0 = v7;\n
    cgc_transmit();\n
    return v4 + 1;\n
}\n
", "4207643:sub_40341b": null, "4207648:cgc_fdprintf": "extern unsigned long long g_409110;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    char *v31;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    void* v33;  // r12, Other Possible Types: unsigned long long, unsigned long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v37;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v38;  // rcx\n
    unsigned long long v39;  // rcx\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v41;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v42;  // rax\n
    struct struct_0 **v43;  // rax\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v46;  // rax, Other Possible Types: unsigned long\n
    unsigned long v47;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v49;  // rdx, Other Possible Types: unsigned long long\n
    char *v50;  // rbp\n
    unsigned long long v51;  // r12, Other Possible Types: unsigned long\n
    unsigned long v52;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v53;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v51 = &v5;\n
    do\n
    {\n
        v31 = a1 + 1;\n
        v4 = v31;\n
        if (*(a1) == 37)\n
        {\n
            v32 = v51;\n
            v33 = 0;\n
            v34 = 0;\n
            a0 = v31;\n
            while (true)\n
            {\n
                v31 = a0 + 1;\n
                v4 = v31;\n
                a3 = *(a0);\n
                a2 = a3;\n
                if ((a2 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol();\n
                a0 = v4;\n
            }\n
            a1 = a2 - 88;\n
            switch (a1)\n
            {\n
            case 0:\n
                v33 = v33 | 2;\n
                v36 = v1;\n
                if (v36 > 40)\n
                {\n
LABEL_4035a2:\n
                    v40 = v2;\n
                    v2 = v40 + 8;\n
LABEL_4035b0:\n
                    v47 = *(v40);\n
                    v48 = v30;\n
                    v49 = 16;\n
                    goto LABEL_40375a;\n
                }\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_40358b:\n
                v0 = a3;\n
                goto LABEL_403658;\n
            case 11:\n
                a3 = v1;\n
                if (a3 <= 40)\n
                {\n
                    v41 = a3 + v3;\n
                    a3 = a3 + 8;\n
                    v1 = a3;\n
                }\n
                else\n
                {\n
                    v41 = v2;\n
                    v2 = v41 + 8;\n
                }\n
                v51 = rbx<8>;\n
                v0 = *(v41);\n
                goto LABEL_4034d4;\n
            case 12:\n
                v37 = v1;\n
                if (v37 <= 40)\n
                {\n
                    v42 = v37 + v3;\n
                    v37 = v37 + 8;\n
                    v1 = v37;\n
                    v52 = *(v42);\n
                    if (!(v52 < 0))\n
                        goto LABEL_4036bd;\n
                }\n
                else\n
                {\n
                    v43 = v2;\n
                    v2 = v43 + 1;\n
                    v52 = *(v43);\n
                    if (!(v52 < 0))\n
                        goto LABEL_4036bd;\n
                }\n
                v0 = 45;\n
                cgc_transmit(a0, a1, &g_409110, v37);\n
                v52 = -(v52);\n
LABEL_4036bd:\n
                cgc_output_number_printf(v30, v52, 10, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 27:\n
                v38 = v1;\n
                if (v38 > 40)\n
                {\n
                    v44 = v2;\n
                    v45 = v44 + 8;\n
                    v2 = v45;\n
                }\n
                else\n
                {\n
                    v44 = v38 + v3;\n
                    v45 = v38 + 8;\n
                    v1 = v45;\n
                }\n
                v51 = rbx<8>;\n
                v50 = *(v44);\n
                if (cgc_strlen(v50))\n
                {\n
                    v53 = 0;\n
                    do\n
                    {\n
                        v0 = v50[v53];\n
                        cgc_transmit(a0, a1, &g_409110, v45);\n
                        v53 += 1;\n
                    } while (cgc_strlen(v50) > v53);\n
                }\n
                break;\n
            case 29:\n
                v39 = v1;\n
                if (v39 <= 40)\n
                {\n
                    v46 = v39 + v3;\n
                    v1 = v39 + 8;\n
                }\n
                else\n
                {\n
                    v46 = v2;\n
                    v2 = v46 + 8;\n
                }\n
                v47 = *(v46);\n
                v48 = v30;\n
                v49 = 10;\n
LABEL_40375a:\n
                cgc_output_number_printf(v48, v47, v49, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 32:\n
                v36 = v1;\n
                if (!(v36 <= 40))\n
                    goto LABEL_4035a2;\n
                goto LABEL_40357a;\n
            default:\n
                if (a2 == 37)\n
                {\n
                    v0 = 37;\n
LABEL_403658:\n
                    v51 = rbx<8>;\n
                    goto LABEL_4034d4;\n
                }\n
                if (a2 == 48)\n
                    goto LABEL_0x403556;\n
                else\n
                    goto LABEL_40358b;\n
            }\n
LABEL_40357a:\n
            v40 = v36 + v3;\n
            v1 = v36 + 8;\n
            goto LABEL_4035b0;\n
        }\n
        v0 = *(a1);\n
LABEL_4034d4:\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4207822:sub_4034ce": null, "4207934:sub_40353e": null, "4207966:sub_40355e": null, "4208512:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_35;  // tmp #35\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    char v14[2];  // rdx, Other Possible Types: unsigned long\n
    char v15[2];  // rdx\n
    char v16[2];  // rdx\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            v14 = *(a1);\n
            if ((v9 & 1))\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 48;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 48;\n
                        v16 = *(a1);\n
                        *(a1) = &v16[1];\n
                        *(a0) = *(a0) + 1;\n
                        v16[1] = 48;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 32;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 32;\n
                        v15 = *(a1);\n
                        *(a1) = &v15[1];\n
                        *(a0) = *(a0) + 1;\n
                        v15[1] = 32;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v17 + v12;\n
    *(a1) = &*(a1)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v11 + 1;\n
    return v18;\n
}\n
", "4208831:sub_4038bf": null, "4208832:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_sprintf(char *a0, struct_0 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_2 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned int *v4;  // [bp-0xf8]\n
    struct_0 *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_1 *v31;  // r14\n
    struct struct_2 **v32;  // r13\n
    struct_0 *v33;  // rdi, Other Possible Types: unsigned long\n
    char *v34;  // rcx\n
    void* v36;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v37;  // rbp\n
    struct_0 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v40;  // rcx\n
    unsigned int v41;  // esi\n
    unsigned long long v43;  // rax\n
    char *v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rdx\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned long v48;  // rdx, Other Possible Types: unsigned long long\n
    struct struct_2 **v49;  // rcx\n
    struct struct_2 **v50;  // rax, Other Possible Types: unsigned long\n
    struct struct_2 **v51;  // rcx, Other Possible Types: unsigned long\n
    char *v52;  // rcx\n
    char *v53;  // rbp\n
    unsigned long v54;  // r14\n
    unsigned int v55;  // r13d\n
    struct_1 *v56;  // rdi, Other Possible Types: unsigned long\n
    struct struct_2 **v57;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v58;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v59;  // rbx\n
    unsigned long v60;  // r15\n
    struct struct_0 **v61;  // r15\n
    struct_1 *v62;  // r14\n
    struct struct_2 **v63;  // r13\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v5 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v34 = v1;\n
                *(v34) = *(a1);\n
                v1 = v34 + 1;\n
            }\n
            else\n
            {\n
                v36 = 0;\n
                while (true)\n
                {\n
                    v37 = v36 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v36;\n
                    do\n
                    {\n
                        v36 = v39;\n
                        v5 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = v40;\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    switch (v41)\n
                    {\n
                    case 37:\n
                        v44 = v1;\n
                        *(v44) = 37;\n
                        goto LABEL_403a9d;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v43 = cgc_strtol(v38 - 2, &v5, 10);\n
                        v33 = v5;\n
                        continue;\n
                    case 100:\n
                        v45 = v2;\n
                        if (v45 <= 40)\n
                        {\n
                            v2 = v45 + 8;\n
                            v48 = *((v45 + v4));\n
                            if (!(v48 < 0))\n
                                goto LABEL_403ad7;\n
                        }\n
                        else\n
                        {\n
                            v49 = v3;\n
                            v3 = v49 + 1;\n
                            v48 = *(v49);\n
                            if (!(v48 < 0))\n
                                goto LABEL_403ad7;\n
                        }\n
                        v52 = v1;\n
                        *(v52) = 45;\n
                        v1 = v52 + 1;\n
                        v0 += 1;\n
                        v48 = -(v48);\n
LABEL_403ad7:\n
                        v56 = *(&v0);\n
                        v57 = v1;\n
                        v58 = 10;\n
LABEL_403ae2:\n
                        cgc_output_number_sprintf(v56, v57, v48, v58, 0, v36);\n
                        break;\n
                    case 115:\n
                        v46 = v2;\n
                        if (v46 > 40)\n
                        {\n
                            v50 = v3;\n
                            v3 = v50 + 8;\n
                        }\n
                        else\n
                        {\n
                            v50 = v46 + v4;\n
                            v2 = v46 + 8;\n
                        }\n
                        v53 = *(v50);\n
                        v54 = v1;\n
                        v55 = v0;\n
                        if (cgc_strlen(v53))\n
                        {\n
                            v59 = r15<8>;\n
                            v60 = 0;\n
                            do\n
                            {\n
                                *((v54 + v60)) = v53[v60];\n
                                v60 += 1;\n
                            } while (cgc_strlen(v53) > v60);\n
                            v54 += v60;\n
                            v55 += v60;\n
                            v61 = rbx<8>;\n
                        }\n
                        v1 = v54;\n
                        v0 = v55;\n
                        v62 = &v0;\n
                        v63 = &v1;\n
                        break;\n
                    case 88:\n
                        v36 = v36 | 2;\n
                    case 120:\n
                        v47 = v2;\n
                        if (v47 <= 40)\n
                        {\n
                            v51 = v47 + v4;\n
                            v2 = v47 + 8;\n
                        }\n
                        else\n
                        {\n
                            v51 = v3;\n
                            v3 = v51 + 8;\n
                        }\n
                        v48 = *(v51);\n
                        v56 = r14<8>;\n
                        v57 = r13<8>;\n
                        v58 = 16;\n
                        goto LABEL_403ae2;\n
                    default:\n
                        v44 = v1;\n
                        *(v44) = v40;\n
LABEL_403a9d:\n
                        v1 = v44 + 1;\n
                        goto LABEL_403990;\n
                    }\n
                }\n
            }\n
LABEL_403990:\n
            v0 += 1;\n
            a1 = v5;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4209020:sub_40397c": null, "4209535:sub_403b7f": null, "4209536:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4209647:sub_403bef": null, "4209648:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_403c47;\n
        }\n
    }\n
LABEL_403c47:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4209670:sub_403c06": null, "4209765:sub_403c65": null, "4209776:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4209814:sub_403c96": null, "4209824:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    char v1[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        do\n
        {\n
            if (v2 == a1)\n
                return v1;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
        } while (v2);\n
    }\n
    if (!a1)\n
        return v1;\n
    return 0;\n
}\n
", "4209868:sub_403ccc": null, "4209872:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4209925:sub_403d05": null, "4209936:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4209983:sub_403d3f": null, "4209984:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210043:sub_403d7b": null, "4210048:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210076:sub_403d9c": null, "4210080:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4210137:sub_403dd9": null, "4210197:sub_403e15": null, "4210208:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a0) - *(a1);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a0) - *(a1);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v2) - *(v3);\n
        }\n
    }\n
}\n
", "4210290:sub_403e72": null, "4210304:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_403fc0:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_403fc0;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_403fc0;\n
}\n
", "4210639:sub_403fcf": null, "4210640:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_404029;\n
                }\n
                goto LABEL_404027;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_404027:\n
    v3 = 0;\n
LABEL_404029:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4210738:sub_404032": null, "4210752:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_404120;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_404120:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_40413a;\n
                    else\n
                        goto LABEL_404160;\n
                }\n
LABEL_40413a:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_404160;\n
            }\n
        }\n
LABEL_404160:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4210787:sub_404063": null, "4210969:sub_404119": null, "4211074:sub_404182": null, "4211088:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4211093:sub_404195": null, "4211104:cgc_engine_destroy": "extern struct_0 *engine;\n
\n
long long cgc_engine_destroy()\n
{\n
    unsigned long v1;  // rax\n
\n
    if (engine)\n
    {\n
        cgc_free(*(&engine->field_268));\n
        cgc_free(engine);\n
        engine = 0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4211154:sub_4041d2": null, "4211168:cgc_engine_init": null, "4211292:sub_40425c": null, "4211410:sub_4042d2": null, "4211602:sub_404392": null, "4211869:sub_40449d": null, "4212039:sub_404547": null, "4212826:sub_40485a": null, "4212832:cgc_engine_new": "extern struct_0 *engine;\n
\n
long long cgc_engine_new()\n
{\n
    unsigned long v0;  // [bp-0x138]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v3;  // rax\n
    char *v4;  // r14\n
    void* v5;  // rdx\n
    unsigned long long v7;  // rbx\n
    unsigned int *v8;  // rcx, Other Possible Types: unsigned long, char\n
    unsigned int *v9;  // rsi, Other Possible Types: unsigned long\n
    unsigned int *v10;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax\n
    unsigned long long v12;  // r10\n
    unsigned long long v13;  // r14\n
    unsigned long long v14;  // rdx\n
\n
    v1 = v3;\n
    *((&engine->field_4 + 4)) = 0x30000000100000000;\n
    engine->field_0 = 1;\n
    *((&engine->field_2c8 + 8)) = 0x4200ff000000000000;\n
    *(&engine->padding_2e0) = 0x244200000000000000;\n
    *(&engine->padding_2f0) = 0x812400000000000000;\n
    *(&engine->padding_300) = 0x88100000000000000;\n
    *(&engine->padding_310) = 0x100800000000000000;\n
    *(&engine->padding_320[0]) = 0x1000000000000000;\n
    *((&engine->field_2b8 + 8)) = 0xff00ffff000000000000;\n
    *(&engine->padding_278[56]) = 1208925819333154198061055;\n
    *(&(&engine->field_0)[1]) = 0;\n
    cgc_memset(&engine->field_270, 6, 0x40);\n
    v4 = &engine->field_270;\n
    v5 = 0;\n
    do\n
    {\n
        v11 = 0;\n
        do\n
        {\n
            v7 = 1 << ((v5 + v11) & 63);\n
            v0 = engine->field_2c8;\n
            if (((*(&v0 + ((v5 + v11 & 63) >> 3)) >> (v5 + v11 & 63 & 7)) & 1))\n
            {\n
                v8 = 0;\n
                goto LABEL_40497a;\n
            }\n
            if ((v7 & *((&engine->field_2c8 + 8))))\n
            {\n
                v9 = 0;\n
                goto LABEL_40499b;\n
            }\n
            v8 = 1;\n
            if ((v7 & engine->field_2d8))\n
            {\n
LABEL_40497a:\n
                v9 = v8;\n
                v10 = &(&engine->field_0)[1];\n
                goto LABEL_4049a1;\n
            }\n
            else\n
            {\n
                v9 = 1;\n
                if ((v7 & engine->padding_2e0))\n
                {\n
LABEL_40499b:\n
                    v8 = v9 - 128;\n
                    v10 = &engine->field_4;\n
LABEL_4049a1:\n
                    v4[v11] = v8;\n
                    *(v10) = *(v10) + *((4232224 + 4 * v9));\n
                }\n
                else\n
                {\n
                    v8 = 2;\n
                    if (!(v7 & engine->field_2e8))\n
                    {\n
                        v9 = 2;\n
                        if (!(!(v7 & engine->padding_2f0)))\n
                            goto LABEL_40499b;\n
                        v8 = 3;\n
                        if (!(v7 & engine->field_2f8))\n
                        {\n
                            v9 = 3;\n
                            if (!(!(v7 & engine->padding_300)))\n
                                goto LABEL_40499b;\n
                            v8 = 4;\n
                            if (!(v7 & engine->field_308))\n
                            {\n
                                v9 = 4;\n
                                if (!(!(v7 & engine->padding_310)))\n
                                    goto LABEL_40499b;\n
                                v8 = 5;\n
                                if (!(v7 & engine->field_318))\n
                                {\n
                                    v9 = 5;\n
                                    if (!(v7 & engine->padding_320))\n
                                        continue;\n
                                    goto LABEL_40499b;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v11 += 1;\n
        } while (v11 != 8);\n
        v12 = 0 + 1;\n
        v13 = v4 + 8;\n
        v14 = v5 + 8;\n
    } while (v12 != 8);\n
    engine->padding_1c[1] = 6;\n
    cgc_memset(&engine->padding_1c[4], 0, 0x40);\n
    *(&engine->padding_22[586]) = 0;\n
    return engine;\n
}\n
", "4213041:sub_404931": null, "4213122:sub_404982": null, "4213386:sub_404a8a": null, "4213392:cgc_engine_move": null, "4214650:sub_404f7a": null, "4214656:cgc_apply_move": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    unsigned int field_c;\n
    char padding_10[12];\n
    char field_1c;\n
    char field_1d;\n
    char field_1e;\n
    char field_1f;\n
    unsigned short field_20;\n
    char field_22;\n
    char field_23;\n
    char padding_24[592];\n
    unsigned int field_274;\n
    char padding_278[64];\n
    unsigned long long field_2b8;\n
} struct_0;\n
\n
extern struct_0 *engine;\n
\n
long long cgc_apply_move(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x150]\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned long v2;  // [bp-0x60]\n
    unsigned long v3;  // [bp-0x58]\n
    unsigned long v4;  // [bp-0x50]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned long v6;  // [bp-0x40]\n
    unsigned long v7;  // [bp-0x38]\n
    unsigned long v8;  // [bp-0x30]\n
    unsigned long v10;  // rbx\n
    char v11;  // r11, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12\n
    unsigned long long v13;  // rcx\n
    unsigned long v14;  // r13\n
    unsigned long long v15;  // r9\n
    struct_0 *v16;  // rax\n
    unsigned long v17;  // r10\n
    unsigned long long v18;  // rdx\n
    unsigned long long v19;  // rdx\n
    unsigned int *v21;  // r11\n
    unsigned long long v22;  // rbp\n
    unsigned int v23;  // ecx\n
    char v25;  // r8b, Other Possible Types: unsigned long\n
    unsigned long long v26;  // r12\n
    unsigned int v27;  // ecx\n
    unsigned long v28;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v29;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v30;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v31;  // r15, Other Possible Types: unsigned long long\n
    unsigned long v32;  // r9, Other Possible Types: unsigned long long\n
    unsigned long long v33;  // rdx\n
    unsigned short v34;  // _bp\n
    char v35;  // r9b\n
    char v36;  // bl\n
    unsigned long long v37;  // rcx\n
\n
    v8 = v10;\n
    v11 = a0 / 0x100;\n
    v25 = a0 / 0x1000000;\n
    v12 = v25;\n
    v2 = a0 / 0x10000;\n
    v13 = v12 + v2 * 8;\n
    v5 = v11;\n
    v14 = v5 + a0 * 8;\n
    v15 = a1 & 15;\n
    v16 = engine;\n
    v17 = a1 / 128;\n
    v18 = &(&engine->field_0)[4 * v15];\n
    v0 = *((v18 + v17 * 8 + 720));\n
    *(&v0 + ((v14 & 63) >> 3)) = *(&v0 + ((v14 & 63) >> 3)) & ~(1 << (v14 & 63 & 7));\n
    v0 = v0;\n
    *(&v0 + ((v13 & 63) >> 3)) = *(&v0 + ((v13 & 63) >> 3)) | 1 << (v13 & 63 & 7);\n
    *((v18 + v17 * 8 + 720)) = v0;\n
    v0 = *(&(&engine[1].field_0)[2 * v17]);\n
    *(&v0 + ((v14 & 63) >> 3)) = *(&v0 + ((v14 & 63) >> 3)) & ~(1 << (v14 & 63 & 7));\n
    v0 = v0;\n
    *(&v0 + ((v13 & 63) >> 3)) = *(&v0 + ((v13 & 63) >> 3)) | 1 << (v13 & 63 & 7);\n
    *(&(&engine[1].field_0)[2 * v17]) = v0;\n
    v0 = engine->field_2b8;\n
    *(&v0 + ((v14 & 63) >> 3)) = *(&v0 + ((v14 & 63) >> 3)) & ~(1 << (v14 & 63 & 7));\n
    v0 = v0;\n
    *(&v0 + ((v13 & 63) >> 3)) = *(&v0 + ((v13 & 63) >> 3)) | 1 << (v13 & 63 & 7);\n
    engine->field_2b8 = v0;\n
    v7 = a0 / 0x100000000;\n
    v6 = a0 / 0x100000000000000;\n
    v19 = ~(a1) >> 7;\n
    v0 = *(&(&engine[1].field_0)[2 * v19]);\n
    if (!((*(&v0 + ((v13 & 63) >> 3)) >> (v13 & 63 & 7)) & 1))\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        *(&v4) = v25;\n
        *(&v3) = v11;\n
        v21 = engine->padding_278[v13] & 15;\n
        v22 = ~(1 << (v13 & 63));\n
        v1 = v21 + 64;\n
        v23 = *((4232224 + 0x4 * v21));\n
        *((720 + 0x10 * v21 + &engine->field_0 + 8 * v19)) = *((720 + 0x10 * v21 + &engine->field_0 + 8 * v19)) & v22;\n
        v11 = v3;\n
        v25 = v4;\n
        *(&(&engine[1].field_0)[2 * v19]) = v0 & v22;\n
        *(&v16->padding_4[4 * v19]) = *(&v16->padding_4[4 * v19]) - v23;\n
    }\n
    engine->padding_278[v13] = a1;\n
    engine->padding_278[v14] = 6;\n
    if (v15 == 5)\n
    {\n
        v26 = v12 - v5;\n
        v27 = -(v26);\n
        if (-(v26) < 0)\n
            v27 = v26;\n
        if (v27 == 2)\n
        {\n
            v28 = v2 * 8;\n
            if (v25 != 2)\n
            {\n
                v33 = v28 | 7;\n
                v29 = -2 << (v33 & 63) | -2 >> 64 - (v33 & 63);\n
                v0 = v0;\n
                *(&v0 + ((v33 & 63) >> 3)) = *(&v0 + ((v33 & 63) >> 3)) & ~(1 << (v33 & 63 & 7));\n
                v30 = v28 | 5;\n
                v31 = 1 << (v30 & 63);\n
                v0 = v0;\n
                *(&v0 + ((((v2 * 8) | 5) & 63) >> 3)) = *(&v0 + ((((v2 * 8) | 5) & 63) >> 3)) | 1 << (((v2 * 8) | 5) & 63 & 7);\n
                v32 = v0;\n
                v28 = v33;\n
            }\n
            else\n
            {\n
                v29 = -2 << (v28 & 63) | -2 >> 64 - (v28 & 63);\n
                v0 = *(&engine[1].padding_24[28 + 8 * v17]);\n
                *(&v0 + ((v28 & 63) >> 3)) = *(&v0 + ((v28 & 63) >> 3)) & ~(1 << (v28 & 63 & 7));\n
                v30 = v28 | 3;\n
                v31 = 1 << (v30 & 63);\n
                v0 = v0;\n
                *(&v0 + ((((v2 * 8) | 3) & 63) >> 3)) = *(&v0 + ((((v2 * 8) | 3) & 63) >> 3)) | 1 << (((v2 * 8) | 3) & 63 & 7);\n
                v32 = v0;\n
            }\n
            *(&engine[1].padding_24[28 + 8 * v17]) = v32;\n
            *(&(&engine[1].field_0)[2 * v17]) = *(&(&engine[1].field_0)[2 * v17]) & v29 | v31;\n
            engine->field_2b8 = v29 & engine->field_2b8 | v31;\n
            engine->padding_278[v28] = 6;\n
            engine->padding_278[v30] = a1 & 128 | 3;\n
        }\n
    }\n
    engine->field_1c = a0;\n
    engine->field_1d = v11;\n
    engine->field_1e = v2;\n
    engine->field_1f = v25;\n
    v34 = v7;\n
    engine->field_20 = v34;\n
    v35 = v1;\n
    engine->field_22 = v35;\n
    v36 = v6;\n
    engine->field_23 = v36;\n
    *(&engine->field_20 + 1) = a1;\n
    v16->padding_24[v14] = v16->padding_24[v14] + 1;\n
    v37 = engine->field_274;\n
    if (v37 == 64)\n
    {\n
        engine->field_0 = 0;\n
        return engine;\n
    }\n
    engine->field_274 = v37 + 1;\n
    engine->padding_24[64 + 8 * v37] = a0;\n
    engine->padding_24[65 + 8 * v37] = v11;\n
    engine->padding_24[66 + 8 * v37] = v2;\n
    engine->padding_24[67 + 8 * v37] = v25;\n
    *(&engine->padding_24[68 + 8 * v37]) = v34;\n
    engine->padding_24[70 + 8 * v37] = v35;\n
    engine->padding_24[71 + 8 * v37] = v36;\n
    engine->field_c = !engine->field_c;\n
    return engine;\n
}\n
", "4215349:sub_405235": null, "4215360:cgc_engine_set_color": "extern struct_0 *engine;\n
\n
long long cgc_engine_set_color(unsigned long a0)\n
{\n
    if (engine->field_0)\n
        engine->field_c = a0;\n
    return engine;\n
}\n
", "4215376:cgc_engine_set_go": "extern struct_0 *engine;\n
\n
long long cgc_engine_set_go(unsigned long a0)\n
{\n
    if (engine->field_0)\n
        engine->field_10 = a0;\n
    return engine;\n
}\n
", "4215392:cgc_engine_set_depth": "extern struct_0 *engine;\n
\n
long long cgc_engine_set_depth(unsigned long a0)\n
{\n
    if (!engine->field_0)\n
    {\n
        return engine;\n
    }\n
    else if (a0 <= 0)\n
    {\n
        return cgc_send_error(\"depth too small\", \"sd\");\n
    }\n
    else if (a0 >= 9)\n
    {\n
        return cgc_send_error(\"depth too large\", \"sd\");\n
    }\n
    else\n
    {\n
        engine->field_14 = a0;\n
        return engine;\n
    }\n
}\n
", "4215455:sub_40529f": null, "4215456:cgc_engine_set_cgc_random": "extern struct_0 *engine;\n
\n
long long cgc_engine_set_cgc_random(unsigned long a0)\n
{\n
    if (engine->field_0)\n
        engine->field_18 = a0;\n
    return engine;\n
}\n
", "4215472:cgc_engine_go": "extern struct_0 *engine;\n
\n
long long cgc_engine_go()\n
{\n
    char v0;  // [bp-0x10]\n
    unsigned long long v2;  // rax\n
    unsigned long long v3;  // rbx\n
\n
    if (!engine->field_0)\n
        return engine;\n
    v2 = cgc_search(0, 4284967296, 10000000, &v0);\n
    engine->field_270 = v2 < -199;\n
    if (v2 != -10000000)\n
    {\n
        v3 = *(&v0);\n
        cgc_send_move(v3);\n
        return cgc_apply_move(v3, engine[1].padding_4[8 * v3 + (v3 >> 8)]);\n
    }\n
    return cgc_send_resign();\n
}\n
", "4215617:sub_405341": null, "4215632:cgc_search": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    char padding_1c[588];\n
    unsigned long long field_268;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 *engine;\n
\n
long long cgc_search(unsigned long a0, unsigned long a1, unsigned long a2, struct_1 *a3)\n
{\n
    char v0;  // [bp-0x99]\n
    unsigned int v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x94]\n
    unsigned int v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0x8c]\n
    char *v5;  // [bp-0x88]\n
    char v6;  // [bp-0x7c]\n
    unsigned long v7;  // [bp-0x78]\n
    unsigned long v8;  // [bp-0x70]\n
    unsigned long v9;  // [bp-0x68]\n
    struct_1 *v10;  // [bp-0x60]\n
    unsigned long v11;  // [bp-0x58]\n
    unsigned long v12;  // [bp-0x50]\n
    unsigned long v13;  // [bp-0x48]\n
    unsigned long v14;  // [bp-0x40]\n
    unsigned long v16;  // r13, Other Possible Types: unsigned long long\n
    struct_0 *v17;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v18;  // rbp\n
    unsigned long long v19;  // r15\n
    unsigned long v20;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v22;  // rbp\n
    unsigned long long v23;  // rdi\n
    unsigned long long v24;  // rdx\n
    unsigned long v25;  // rsi\n
    unsigned long v26;  // rdi\n
    unsigned long long v27;  // rdx\n
    unsigned int v28;  // ebx\n
    unsigned long v29;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v30;  // r9\n
    unsigned long long v31;  // r14\n
    unsigned long v32;  // r12, Other Possible Types: unsigned long long\n
    void* v33;  // rax, Other Possible Types: unsigned long\n
    char *v34;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v35;  // rax\n
    unsigned long long v36;  // rax\n
    unsigned long v37;  // r15\n
\n
    v3 = a2;\n
    v16 = a1;\n
    v4 = 0;\n
    v17 = engine;\n
    v18 = engine->field_268;\n
    v19 = a0 * 0x100;\n
    cgc_generate_moves(&v4, v19 * 8 + v18);\n
    v7 = v4;\n
    if (!v7)\n
        return 4284967296;\n
    v20 = *((v18 + v19 * 8 + 2));\n
    v21 = *((v18 + v19 * 8 + 3));\n
    if ((engine[1].padding_0[8 + 8 * v20 + v21] & 15) == 5)\n
        return 10000000;\n
    v0 = a0;\n
    v10 = a3;\n
    v11 = a0;\n
    v2 = a0 + 1;\n
    v1 = -(v3);\n
    v34 = v19 * 8 + 11 + v18;\n
    v7 -= 1;\n
    v32 = 4284967296;\n
    v37 = 0;\n
    v5 = v34;\n
    do\n
    {\n
        v22 = *((v34 + v37 * 8 - 11));\n
        v23 = *((v34 + v37 * 8 - 10));\n
        v24 = *((v34 + v37 * 8 - 7));\n
        v25 = *((v17 + v23 + v22 * 8 + 632));\n
        v12 = v24;\n
        v8 = v21;\n
        v9 = v20;\n
        v13 = v23;\n
        v26 = v23 * 0x100;\n
        v14 = v22;\n
        cgc_apply_move(v26 | v14 | v20 * 0x10000 | v21 * 0x1000000 | v12 * 0x100000000, v25);\n
        v27 = -(v16);\n
        v28 = v11;\n
        if (engine->field_14 == v28)\n
        {\n
            v29 = cgc_quiesce(v2, v1);\n
            cgc_undo_move(v26, v25, v27, a3, v20, v30);\n
            if (!v28)\n
                goto LABEL_4054eb;\n
            goto LABEL_4054ba;\n
        }\n
        else\n
        {\n
            v29 = cgc_search(v2, v1, v27, NULL);\n
            cgc_undo_move(v26, v25, v27, 0, v20, v30);\n
            if (!v28)\n
            {\n
LABEL_4054eb:\n
                if (!engine->field_18)\n
                {\n
                    v33 = 0;\n
                }\n
                else\n
                {\n
                    cgc_random(v26, v25, v27);\n
                    v35 = *(&v6);\n
                    a3 = 3435973837 * v35 >> 34;\n
                    v33 = (v35 - a3 * 5) - 2;\n
                }\n
                v34 = v5;\n
                v36 = v33 - v29;\n
                *(&a3) = v36 <= v32;\n
                if (v32 < v36)\n
                    v32 = v36;\n
                if (!a3 && !v0)\n
                {\n
                    a3 = v10;\n
                    a3->field_0 = v14;\n
                    a3->field_1 = v13;\n
                    a3->field_2 = v9;\n
                    a3->field_3 = v8;\n
                    a3->field_4 = v12;\n
                    v32 = v36;\n
                }\n
            }\n
            else\n
            {\n
LABEL_4054ba:\n
                v31 = -(v29);\n
                if (v32 < v32)\n
                    v32 = v31;\n
                v34 = v5;\n
                continue;\n
            }\n
        }\n
        if (v16 < v32)\n
            v16 = v32;\n
        if (v16 >= v3)\n
            return v16;\n
        if (v7 == v37)\n
            return v32;\n
        v17 = engine;\n
        v20 = *((v34 + v37 * 8 - 1));\n
        v21 = *((v34 + v37 * 8));\n
        v37 += 1;\n
    } while ((engine[1].padding_0[8 + 8 * v20 + v21] & 15) != 5);\n
}\n
", "4216014:sub_4054ce": null, "4216297:sub_4055e9": null, "4216304:cgc_engine_result": "extern struct_0 *engine;\n
\n
long long cgc_engine_result()\n
{\n
    engine->field_0 = 0;\n
    return engine;\n
}\n
", "4216318:sub_4055fe": null, "4216320:cgc_engine_offer_draw": "extern struct_0 *engine;\n
\n
long long cgc_engine_offer_draw()\n
{\n
    if (!engine->field_0)\n
    {\n
        return engine;\n
    }\n
    else if (!engine->field_270)\n
    {\n
        return engine;\n
    }\n
    else\n
    {\n
        return cgc_send_draw();\n
    }\n
}\n
", "4216349:sub_40561d": null, "4216352:cgc_engine_undo": "extern struct_0 *engine;\n
\n
long long cgc_engine_undo()\n
{\n
    if (engine->field_0)\n
        return cgc_undo_move();\n
    return engine;\n
}\n
", "4216370:sub_405632": null, "4216384:cgc_engine_get_cgc_random": "extern struct_0 *engine;\n
\n
long long cgc_engine_get_cgc_random()\n
{\n
    return engine->field_18;\n
}\n
", "4216395:sub_40564b": null, "4216400:cgc_calculate_attacks": "extern char KING_MOVES;\n
extern char KNIGHT_MOVES;\n
extern struct_0 *engine;\n
\n
long long cgc_calculate_attacks(unsigned long a0)\n
{\n
    int tmp_8;  // tmp #8\n
    int tmp_0;  // tmp #0\n
    int tmp_21;  // tmp #21\n
    int tmp_34;  // tmp #34\n
    unsigned long v0;  // [bp-0x150]\n
    int tmp_14;  // tmp #14\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // r12\n
    unsigned long v11;  // rbx\n
    unsigned long long v12;  // rcx\n
    unsigned long long v13;  // rcx\n
    unsigned long v14;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v15;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v16;  // r9\n
    unsigned long v17;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long *v18;  // esi, Other Possible Types: unsigned int, unsigned long\n
    unsigned int v19;  // ecx\n
    unsigned long long v20;  // r10\n
    unsigned int v22;  // r11d\n
    unsigned long long v24;  // r15\n
    unsigned long v25;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v26;  // rdi\n
    char v27;  // cl\n
    unsigned long v28;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v29;  // rsi, Other Possible Types: unsigned long long\n
    char v30;  // cl\n
    unsigned long v31;  // rdx\n
    unsigned long v32;  // rsi, Other Possible Types: unsigned long long\n
    char v33;  // cl\n
    unsigned long v34;  // rdx, Other Possible Types: unsigned long long\n
    unsigned int v35;  // esi\n
    char v36;  // cl\n
    unsigned long v37;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v38;  // rdx\n
    unsigned long v39;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v40;  // rcx, Other Possible Types: unsigned long long, unsigned int\n
    unsigned long v41;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v42;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v43;  // r12d, Other Possible Types: unsigned long long, unsigned int\n
    unsigned int v44;  // r11d\n
    unsigned long v45;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v46;  // rbp\n
    unsigned long long v47;  // rdx\n
    unsigned long long v48;  // r15\n
    unsigned long v49;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v50;  // r13\n
    unsigned int v51;  // ebx\n
    char v52;  // cl\n
    unsigned long v53;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v54;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long long v55;  // r14\n
    unsigned int v56;  // ebp\n
    char v57;  // cl\n
    unsigned long v58;  // rdx\n
    unsigned long long v59;  // rbp\n
    unsigned long long v60;  // r13\n
    unsigned long long v61;  // rsi\n
    unsigned long long v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned long long v64;  // rdx\n
    unsigned long long v65;  // rdx\n
    unsigned long long v66;  // rdx\n
    unsigned long long v67;  // rdx\n
    unsigned long v68;  // r11, Other Possible Types: unsigned long long\n
    unsigned long long v69;  // r14\n
    unsigned long long v70;  // rsi\n
    unsigned long long v71;  // rcx\n
    unsigned long v72;  // rdx\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rdx\n
    unsigned long v75;  // rdx\n
    unsigned long v76;  // rdx\n
    unsigned long long *v77;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v78;  // rax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v2 = v10;\n
    v1 = v11;\n
    if (a0)\n
    {\n
        v12 = engine->field_2d8;\n
        v14 = 71775015237779198 & v12 / 128;\n
        v40 = v12 / 0x200;\n
        v15 = 35887507618889599;\n
    }\n
    else\n
    {\n
        v13 = engine->field_2d0;\n
        v14 = -0x101010101010200 & v13 * 0x200;\n
        v40 = v13 * 128;\n
        v15 = 0x7f7f7f7f7f7f7f00;\n
    }\n
    v37 = v15 & v40 | v14;\n
    v16 = a0;\n
    v17 = *(&engine[1].padding_0[8 * a0]);\n
    if (v17)\n
    {\n
        v18 = -1;\n
        while (true)\n
        {\n
            if (!(ExpCmpNE(v17, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v19 = (ExpCmpNE(v17, 0) ? tmp_8 : v40);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v19 = (ExpCmpNE(v17, 0) ? tmp_8 : v40);\n
            }\n
            v18 = v18 + v19 + 1;\n
            v40 = v19 + 1;\n
            v37 |= *((&KNIGHT_MOVES + 0x8 * v18));\n
            v17 >>= v40 & 63;\n
            if (!v17)\n
                break;\n
            if (v18 >= 63)\n
                break;\n
        }\n
    }\n
    v20 = *(&engine[1].padding_0[48 + 8 * a0]);\n
    v41 = *(&engine[1].padding_0[32 + 8 * a0]) | v20;\n
    if (v41)\n
    {\n
        v40 = -1;\n
        do\n
        {\n
            if (!(ExpCmpNE(v41, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v22 = (ExpCmpNE(v41, 0) ? tmp_8 : r11<8>);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v22 = (ExpCmpNE(v41, 0) ? tmp_8 : r11<8>);\n
            }\n
            v24 = v22 + v40 + 1;\n
            v25 = v22 + v40 + 8;\n
            if ((v24 >> 31 & 1 ^ 1))\n
                v25 = v24;\n
            v26 = v24 - (v25 & -8);\n
            if (v26 <= 6)\n
            {\n
                v27 = v24 + 1;\n
                v28 = ((v27 & 63) ? 1 << (v27 & 63) : 1 << (v27 & 63));\n
                v29 = v26;\n
                while (true)\n
                {\n
                    v37 |= v28;\n
                    if ((v28 & engine->field_2b8))\n
                        break;\n
                    v28 *= 2;\n
                    v29 += 1;\n
                    if (v26 >= 6)\n
                        break;\n
                }\n
                if (v26 <= 0)\n
                    goto LABEL_4057a5;\n
            }\n
            v30 = v24 - 1;\n
            v31 = ((v30 & 63) ? 1 << (v30 & 63) : 1 << (v30 & 63));\n
            v32 = v26;\n
            while (true)\n
            {\n
                v37 |= v31;\n
                if ((v31 & engine->field_2b8))\n
                    break;\n
                v31 /= 2;\n
                v32 -= 1;\n
                if (v26 <= 1)\n
                    break;\n
            }\n
LABEL_4057a5:\n
            v39 = v25 >> 3;\n
            v68 = v22 + 1;\n
            if (v24 <= 55)\n
            {\n
                v33 = v26 + (v39 + 1) * 8;\n
                v34 = ((v33 & 63) ? 1 << (v33 & 63) : 1 << (v33 & 63));\n
                v35 = v39;\n
                while (true)\n
                {\n
                    v37 |= v34;\n
                    if ((v34 & engine->field_2b8))\n
                        break;\n
                    v34 *= 0x100;\n
                    v35 += 1;\n
                    if (v35 >= 7)\n
                        break;\n
                }\n
                if (v24 < 8)\n
                    goto LABEL_405811;\n
            }\n
            v36 = (v26 + v39 * 8) - 8;\n
            v38 = ((v36 & 63) ? 1 << (v36 & 63) : 1 << (v36 & 63));\n
            while (true)\n
            {\n
                v37 |= v38;\n
                if ((v38 & engine->field_2b8))\n
                    break;\n
                v38 /= 0x100;\n
                tmp_21 = v39;\n
                v39 = v39 - 1;\n
                if ([D] amd64g_calculate_condition(0xe<64>, 0x3<64>, t21, 0xffffffff<64>, 0x0<64>))\n
                    break;\n
            }\n
LABEL_405811:\n
            v40 = v68;\n
            v41 >>= v40 & 63;\n
            if (!v41)\n
                break;\n
            continue;\n
            v40 = v24;\n
        } while (v24 < 63);\n
    }\n
    v42 = v20 | *(&engine[1].padding_0[16 + 8 * v16]);\n
    if (v42)\n
    {\n
        v43 = -1;\n
        while (true)\n
        {\n
            if (!(ExpCmpNE(v42, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v44 = (ExpCmpNE(v42, 0) ? tmp_8 : v68);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v44 = (ExpCmpNE(v42, 0) ? tmp_8 : v68);\n
            }\n
            v45 = v44 + v43 + 8;\n
            v43 = v44 + v43 + 1;\n
            if ((v43 >> 31 & 1 ^ 1))\n
                v45 = v43;\n
            v46 = v45 >> 3;\n
            v47 = v45 & -8;\n
            v48 = v43 - v47;\n
            v49 = v48 + 1;\n
            v50 = v46 * 8 + 8;\n
            if (v43 <= 55 && v48 <= 6)\n
            {\n
                v51 = v46 + 1;\n
                v52 = v49 + v50;\n
                v53 = ((v52 & 63) ? 1 << (v52 & 63) : 1 << (v52 & 63));\n
                v54 = v49;\n
                while (true)\n
                {\n
                    v37 |= v53;\n
                    if ((v53 & engine->field_2b8))\n
                        break;\n
                    if (v51 > 6)\n
                        break;\n
                    v51 += 1;\n
                    v53 *= 0x200;\n
                    v54 += 1;\n
                    if (v49 >= 7)\n
                        break;\n
                }\n
            }\n
            v55 = v46 * 8 - 8;\n
            if (v43 >= 8 && v48 <= 6)\n
            {\n
                v56 = v46 - 1;\n
                v57 = v55 + v49;\n
                v58 = ((v57 & 63) ? 1 << (v57 & 63) : 1 << (v57 & 63));\n
                while (true)\n
                {\n
                    v37 |= v58;\n
                    if ((v58 & engine->field_2b8))\n
                        break;\n
                    if (v56 <= 0)\n
                        break;\n
                    v56 -= 1;\n
                    v58 /= 128;\n
                    tmp_34 = v49;\n
                    v49 += 1;\n
                    if (tmp_34 >= 7)\n
                        break;\n
                }\n
            }\n
            v59 = v48 - 1;\n
            if (v43 <= 55 && v48 > 0)\n
            {\n
                v60 = v50 + v59;\n
                v61 = 1 << (v60 & 63);\n
                v62 = engine->field_2b8;\n
                v0 = v37;\n
                *(&v0 + ((v60 & 63) >> 3)) = *(&v0 + ((v60 & 63) >> 3)) | 1 << (v60 & 63 & 7);\n
                v37 = v0;\n
                v0 = v62;\n
                if (!((*(&v0 + ((v60 & 63) >> 3)) >> (v60 & 63 & 7)) & 1) && v43 <= 47 && v48 >= 2)\n
                {\n
                    v63 = v61 * 128;\n
                    v37 |= v63;\n
                    if (!(v63 & v0) && v43 <= 39 && v48 >= 3)\n
                    {\n
                        v64 = v61 * 0x4000;\n
                        v37 |= v64;\n
                        if (!(v64 & v0) && v43 <= 31 && v48 >= 4)\n
                        {\n
                            v65 = v61 * 0x200000;\n
                            v37 |= v65;\n
                            if (!(v65 & v0) && v43 <= 23 && v48 >= 5)\n
                            {\n
                                v66 = v61 * 0x10000000;\n
                                v37 |= v66;\n
                                if (!(v66 & v0) && v43 <= 15 && v48 >= 6)\n
                                {\n
                                    v67 = v61 * 0x800000000;\n
                                    v37 |= v67;\n
                                    if (!(v67 & v0) && v43 <= 7 && v48 >= 7)\n
                                        v37 |= v61 * 0x40000000000;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v68 = v44 + 1;\n
            if (v43 >= 8 && v48 > 0)\n
            {\n
                v69 = v55 + v59;\n
                v70 = 1 << (v69 & 63);\n
                v71 = engine->field_2b8;\n
                v0 = v37;\n
                *(&v0 + ((v69 & 63) >> 3)) = *(&v0 + ((v69 & 63) >> 3)) | 1 << (v69 & 63 & 7);\n
                v37 = v0;\n
                v0 = v71;\n
                if (!((*(&v0 + ((v69 & 63) >> 3)) >> (v69 & 63 & 7)) & 1) && v43 >= 16 && v48 >= 2)\n
                {\n
                    v72 = v70 / 0x200;\n
                    v37 |= v72;\n
                    if (!(v72 & v0) && v43 >= 24 && v48 >= 3)\n
                    {\n
                        v73 = v70 / 0x40000;\n
                        v37 |= v73;\n
                        if (!(v73 & v0) && v43 >= 32 && v48 >= 4)\n
                        {\n
                            v74 = v70 / 0x8000000;\n
                            v37 |= v74;\n
                            if (!(v74 & v0) && v43 >= 40 && v48 >= 5)\n
                            {\n
                                v75 = v70 / 0x1000000000;\n
                                v37 |= v75;\n
                                if (!(v75 & v0) && v43 >= 48 && v48 >= 6)\n
                                {\n
                                    v76 = v70 / 0x200000000000;\n
                                    v37 |= v76;\n
                                    if (!(v76 & v0) && v43 >= 56 && v48 >= 7)\n
                                        v37 |= v70 / 0x40000000000000;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v40 = v68;\n
            v42 >>= v40 & 63;\n
            if (!v42)\n
                break;\n
            if (v43 >= 63)\n
                break;\n
        }\n
    }\n
    if (ExpCmpNE(*(&engine[1].padding_0[64 + 8 * v16]), 0))\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v77 = (ExpCmpNE(*(&engine[1].padding_0[64 + 8 * v16]), 0) ? tmp_14 : v40);\n
    }\n
    else\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v77 = (ExpCmpNE(*(&engine[1].padding_0[64 + 8 * v16]), 0) ? tmp_14 : v40);\n
    }\n
    v78 = v37 | *((&KING_MOVES + 0x8 * v77));\n
    return v78;\n
}\n
", "4217693:sub_405b5d": null, "4217696:cgc_undo_move": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[12];\n
    char field_1c;\n
    char padding_1d[599];\n
    unsigned int field_274;\n
    char padding_278[64];\n
    unsigned long long field_2b8;\n
} struct_0;\n
\n
extern struct_0 *engine;\n
\n
long long cgc_undo_move()\n
{\n
    unsigned long v0;  // [bp-0x150]\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned long v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    struct_0 *v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // r14\n
    unsigned long long v8;  // r12\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rbp\n
    unsigned long long v11;  // r15\n
    unsigned long long v12;  // r10\n
    unsigned long long v13;  // r13\n
    unsigned long long v14;  // rdx\n
    unsigned long long v15;  // rcx\n
    unsigned int v16;  // esi\n
    unsigned long long v17;  // r9\n
    unsigned long v18;  // r9, Other Possible Types: unsigned long long\n
    unsigned long v19;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v20;  // r11, Other Possible Types: unsigned long long\n
    unsigned long v21;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long long v22;  // r9\n
    unsigned long v23;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rcx\n
    unsigned long long v25;  // rdx\n
    unsigned long long v26;  // rsi\n
    unsigned long long v27;  // rsi\n
    unsigned int *v28;  // r10\n
    unsigned long v29;  // rax\n
    unsigned int v31;  // ecx\n
    unsigned long long v32;  // rcx\n
    unsigned long long v33;  // rdx\n
    unsigned int v34;  // eax\n
    unsigned long long v35;  // rax, Other Possible Types: unsigned long\n
\n
    v5 = engine;\n
    v6 = engine->padding_1d[0];\n
    v7 = engine->padding_1d[1];\n
    v8 = engine->padding_1d[2];\n
    v9 = v8 + v7 * 8;\n
    v10 = 1 << (v9 & 63);\n
    v11 = v6 + engine->field_1c * 8;\n
    v35 = 1 << (v11 & 63);\n
    if (engine->field_274 <= 0)\n
        return 1 << (v11 & 63);\n
    v12 = engine->padding_1d[5];\n
    v23 = v9;\n
    v13 = engine->padding_278[v9];\n
    v14 = v13 & 15;\n
    if (v14 == 5)\n
    {\n
        v15 = v8 - v6;\n
        v16 = -(v15);\n
        if (-(v15) < 0)\n
            v16 = v15;\n
        if (v16 == 2)\n
        {\n
            v3 = v23;\n
            v17 = v7 * 8;\n
            if (v8 != 2)\n
            {\n
                v2 = v17 | 5;\n
                v19 = -2 << (v2 & 63) | -2 >> 64 - (v2 & 63);\n
                v0 = v0;\n
                *(&v0 + (((v17 | 5) & 63) >> 3)) = *(&v0 + (((v17 | 5) & 63) >> 3)) & ~(1 << ((v17 | 5) & 63 & 7));\n
                v22 = v17 | 7;\n
                v20 = 1 << (v22 & 63);\n
                v1 = v22;\n
                v0 = v0;\n
                *(&v0 + ((v1 & 63) >> 3)) = *(&v0 + ((v1 & 63) >> 3)) | 1 << (v1 & 63 & 7);\n
                v21 = v0;\n
                v18 = v2;\n
            }\n
            else\n
            {\n
                v1 = v17;\n
                v18 = v17 | 3;\n
                v19 = -2 << (v18 & 63) | -2 >> 64 - (v18 & 63);\n
                v0 = *(&engine[1].padding_1d[35 + 8 * v15]);\n
                *(&v0 + ((v18 & 63) >> 3)) = *(&v0 + ((v18 & 63) >> 3)) & ~(1 << (v18 & 63 & 7));\n
                v20 = 1 << (v1 & 63);\n
                v0 = v0;\n
                *(&v0 + ((v1 & 63) >> 3)) = *(&v0 + ((v1 & 63) >> 3)) | 1 << (v1 & 63 & 7);\n
                v21 = v0;\n
            }\n
            *(&engine[1].padding_1d[35 + 8 * v15]) = v21;\n
            *(&engine[1].padding_0[8 * v15]) = *(&engine[1].padding_0[8 * v15]) & v19 | v20;\n
            engine->field_2b8 = v19 & engine->field_2b8 | v20;\n
            engine->padding_278[v18] = 6;\n
            engine->padding_278[v1] = v13 & 128 | 3;\n
            v23 = v3;\n
        }\n
    }\n
    engine->padding_278[v23] = 6;\n
    engine->padding_278[v11] = v13;\n
    v15 = v13 / 128;\n
    v25 = 16 * v14 + engine;\n
    v26 = ~(v10);\n
    *((v25 + v15 * 8 + 720)) = *((v25 + v15 * 8 + 720)) & v26 | v35;\n
    *(&engine[1].padding_0[8 * v24]) = *(&engine[1].padding_0[8 * v24]) & v26 | v35;\n
    v27 = v26 & engine->field_2b8 | v35;\n
    engine->field_2b8 = v27;\n
    if ((v12 & 64))\n
    {\n
        if ((v12 & 128))\n
        {\n
            v32 = (v8 + (v7 != 2) * 8) + 24;\n
            v33 = 1 << (v32 & 63);\n
            *(&v13) = ~(v13);\n
            v29 = v13 / 128;\n
            *(&v5[1].padding_10[8 * v29]) = *(&v5[1].padding_10[8 * v29]) | v33;\n
            *(&v5[1].padding_0[8 * v29]) = *(&v5[1].padding_0[8 * v29]) | v33;\n
            v0 = v27;\n
            *(&v0 + ((v32 & 63) >> 3)) = *(&v0 + ((v32 & 63) >> 3)) | 1 << (v32 & 63 & 7);\n
            engine->field_2b8 = v0;\n
            engine->padding_278[v32] = ~(v13) & 128;\n
            v31 = 100;\n
        }\n
        else\n
        {\n
            v28 = v12 & 15;\n
            *(&v13) = ~(v13);\n
            v29 = v13 / 128;\n
            *((720 + 0x10 * v28 + &engine->padding_0[0] + 8 * v29)) = *((720 + 0x10 * v28 + &engine->padding_0[0] + 8 * v29)) | v10;\n
            *(&v5[1].padding_0[8 * v29]) = *(&v5[1].padding_0[8 * v29]) | v10;\n
            engine->field_2b8 = v27 | v10;\n
            *(&v13) = ~(v13) & 128;\n
            engine->padding_278[v23] = (v28 + v13);\n
            v31 = *((4232224 + 0x4 * v28));\n
        }\n
        *(&v5->padding_0[4 + 4 * v29]) = *(&v5->padding_0[4 + 4 * v29]) + v31;\n
    }\n
    v5->padding_1d[7 + v11] = v5->padding_1d[7 + v11] - 1;\n
    v34 = engine->field_274;\n
    engine->field_274 = v34 - 1;\n
    if (v34 < 2)\n
        engine->padding_1d[4] = 6;\n
    else\n
        *(&engine->field_1c) = *(&engine->padding_1d[55 + 8 * v34]);\n
    v35 = 0;\n
    *(&v35) = !engine->field_c;\n
    engine->field_c = v35;\n
    return !engine->field_c;\n
}\n
", "4218396:sub_405e1c": null, "4218400:cgc_generate_moves": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[680];\n
    unsigned long long field_2b8;\n
} struct_0;\n
\n
extern struct_0 *engine;\n
\n
long long cgc_generate_moves(unsigned int *a0, unsigned long a1)\n
{\n
    int tmp_8;  // tmp #8\n
    int tmp_0;  // tmp #0\n
    unsigned long v0;  // [bp-0x150]\n
    int tmp_12;  // tmp #12\n
    int tmp_42;  // tmp #42\n
    int tmp_19;  // tmp #19\n
    int tmp_14;  // tmp #14\n
    unsigned long v1;  // [bp-0x80]\n
    struct_0 *v2;  // [bp-0x78]\n
    unsigned int v3;  // [bp-0x70], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x68]\n
    unsigned long v5;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x54]\n
    unsigned long v7;  // [bp-0x50]\n
    unsigned int *v8;  // [bp-0x48]\n
    unsigned long v9;  // [bp-0x40]\n
    unsigned long v10;  // [bp-0x38]\n
    unsigned long long v12;  // r12\n
    unsigned long long v13;  // r10\n
    unsigned int v16;  // r15d\n
    unsigned long v17;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v18;  // edx\n
    unsigned long long v19;  // rbp, Other Possible Types: unsigned long, unsigned int\n
    unsigned long long v20;  // rdi\n
    unsigned long long v21;  // rcx\n
    unsigned long long v22;  // rbx\n
    unsigned long long v23;  // r8\n
    char v24;  // r11b\n
    char v25;  // r11b\n
    unsigned long long v26;  // rax\n
    unsigned long long v27;  // r15\n
    unsigned int v29;  // r15d\n
    unsigned long v31;  // rdi, Other Possible Types: unsigned long long\n
    unsigned int v32;  // eax\n
    unsigned long long v33;  // rdi\n
    unsigned long long v34;  // rbx\n
    unsigned long long v35;  // r8\n
    char v36;  // r11b\n
    char v37;  // r11b\n
    unsigned long long v38;  // rdi\n
    unsigned long long v39;  // r15\n
    unsigned long long v40;  // rdx, Other Possible Types: unsigned long\n
    char *v41;  // r9, Other Possible Types: unsigned long, unsigned int\n
    unsigned long v42;  // r14, Other Possible Types: char, unsigned long long\n
    unsigned long v43;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v44;  // ebx, Other Possible Types: unsigned long, unsigned int\n
    unsigned int v45;  // edx\n
    unsigned long v46;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v47;  // ecx\n
    unsigned long long v48;  // r8\n
    unsigned long long v49;  // rax\n
    unsigned long long v50;  // rbp\n
    char v51;  // r11b\n
    char v52;  // cl\n
    char v53;  // r11b\n
    char v54;  // cl\n
    char v55;  // r11b\n
    char v56;  // cl\n
    char v57;  // r11b\n
    char v58;  // cl\n
    char v59;  // r11b\n
    char v60;  // cl\n
    char v61;  // r11b\n
    char v62;  // cl\n
    char v63;  // r11b\n
    char v64;  // cl\n
    char v65;  // r11b\n
    char v66;  // cl\n
    struct_0 *v67;  // rax\n
    unsigned long long v68;  // rcx\n
    unsigned long v69;  // r12, Other Possible Types: unsigned long long\n
    unsigned int v70;  // eax\n
    unsigned long v71;  // rdx\n
    unsigned long long v72;  // r15\n
    unsigned long v73;  // r14, Other Possible Types: unsigned long long\n
    unsigned long long v74;  // r13\n
    unsigned long v75;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v76;  // r11\n
    unsigned long v77;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v78;  // rax\n
    unsigned int v79;  // r8d\n
    unsigned long long v80;  // rbp\n
    unsigned long v81;  // ecx, Other Possible Types: unsigned int\n
    unsigned long v82;  // rdi, Other Possible Types: unsigned long long\n
    char v83;  // cl\n
    unsigned long v84;  // r8, Other Possible Types: unsigned long long\n
    unsigned long long v85;  // r12\n
    unsigned int v86;  // ebx\n
    unsigned long long v87;  // rax, Other Possible Types: unsigned long\n
    char v88;  // cl\n
    void* v98;  // rdx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v99;  // rax, Other Possible Types: unsigned long long\n
    unsigned int v100;  // r15d\n
    unsigned long v101;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v102;  // rax\n
    unsigned long long v103;  // r12\n
    unsigned long long v104;  // rcx\n
    unsigned long long v105;  // r11\n
    unsigned long v106;  // r15, Other Possible Types: unsigned long long\n
    unsigned long v107;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v108;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v109;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v110;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v111;  // rbp, Other Possible Types: unsigned long long\n
    char v112;  // al\n
    char v113;  // al\n
    unsigned long v114;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v115;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v116;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v117;  // r13d, Other Possible Types: char\n
    unsigned long v118;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v119;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v120;  // r8, Other Possible Types: unsigned long long\n
    char v121;  // cl\n
    char v122;  // r13b\n
    char v123;  // cl\n
    unsigned long v124;  // rbx\n
    unsigned long v125;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v126;  // rax, Other Possible Types: unsigned long long\n
    char v127;  // cl\n
    struct_0 *v128;  // rax\n
    unsigned long long v129;  // rcx\n
    unsigned long v130;  // rdx\n
    unsigned long v131;  // rbp\n
    unsigned long long v132;  // rdi\n
    unsigned long long v133;  // rax\n
    unsigned long long v134;  // r8\n
    char v135;  // bl\n
    unsigned long v136;  // rbx, Other Possible Types: unsigned long long\n
    char v137;  // bl\n
    unsigned long long v138;  // r11\n
    unsigned long long v139;  // r8\n
    char v140;  // bl\n
    unsigned long v141;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v142;  // r8, Other Possible Types: unsigned long long\n
    char v143;  // al\n
    unsigned long v144;  // r11, Other Possible Types: unsigned long long\n
    unsigned long long v145;  // rdx\n
    char v146;  // al\n
    unsigned long v147;  // rdx, Other Possible Types: unsigned long long\n
    char v148;  // al\n
    char v149;  // al\n
    unsigned long long v150;  // rdx\n
    char v151;  // al\n
\n
    v12 = engine->field_c;\n
    v13 = *(&engine[1].padding_0[8 * v12]);\n
    v42 = *(&engine[1].padding_10[8 * v12]);\n
    v2 = engine;\n
    v1 = *(&engine[1].padding_0[8 * (!v12)]);\n
    v8 = a0;\n
    if (!v42)\n
    {\n
        v41 = 0;\n
    }\n
    else\n
    {\n
        v19 = -1;\n
        v41 = 0;\n
        if (v12)\n
        {\n
            while (true)\n
            {\n
                if (!(ExpCmpNE(v42, 0)))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v16 = (ExpCmpNE(v42, 0) ? tmp_8 : r15<8>);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v16 = (ExpCmpNE(v42, 0) ? tmp_8 : r15<8>);\n
                }\n
                v17 = v16 + v19 + 8;\n
                v18 = v16 + v19 - 71;\n
                v19 = v16 + v19 + 1;\n
                if ((v19 >> 31 & 1 ^ 1))\n
                    v17 = v19;\n
                v20 = v17 >> 3;\n
                v21 = v17 & -8;\n
                v22 = v19 - v21;\n
                v23 = v20 - 1;\n
                if (v18 >= -64)\n
                {\n
                    if (v22 > 0)\n
                    {\n
                        v24 = v22 - 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v22 - 1 + (v20 - 1 << 3) & 63) >> 3)) >> (v22 - 1 + (v20 - 1 << 3) & 63 & 7)) & 1) && (1 << (v24 + (v23 << 3) & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v20;\n
                            *((a1 + v41 * 8 + 1)) = v22;\n
                            *((a1 + v41 * 8 + 2)) = v23;\n
                            *((a1 + v41 * 8 + 3)) = v24;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                        }\n
                    }\n
                    if ((v22 - 7) >= -8)\n
                    {\n
                        v25 = v22 + 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v22 + 1 + (v20 - 1 << 3) & 63) >> 3)) >> (v22 + 1 + (v20 - 1 << 3) & 63 & 7)) & 1) && (1 << (v25 + (v23 << 3) & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v20;\n
                            *((a1 + v41 * 8 + 1)) = v22;\n
                            *((a1 + v41 * 8 + 2)) = v23;\n
                            *((a1 + v41 * 8 + 3)) = v25;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                        }\n
                    }\n
                }\n
                v26 = 1 << ((v22 + v23 * 8) & 63);\n
                v40 = v1;\n
                v0 = v40;\n
                if (!((*(&v0 + ((v22 + (v20 - 1 << 3) & 63) >> 3)) >> (v22 + (v20 - 1 << 3) & 63 & 7)) & 1) && v19 >= 8 && v19 <= 71 && v22 >= 0 && !(v26 & v13))\n
                {\n
                    *((a1 + v41 * 8)) = v20;\n
                    *((a1 + v41 * 8 + 1)) = v22;\n
                    *((a1 + v41 * 8 + 2)) = v23;\n
                    *((a1 + v41 * 8 + 3)) = v22;\n
                    *((a1 + v41 * 8 + 7)) = 0;\n
                    v41 = v41 + 1;\n
                }\n
                v27 = v16 + 1;\n
                if ((v19 & -8) == 48)\n
                {\n
                    v40 = v1;\n
                    v0 = v40;\n
                    if (!((*(&v0 + ((v22 + 32 & 63) >> 3)) >> (v22 + 32 & 63 & 7)) & 1) && !(v26 & v2->field_2b8) && v22 >= 0 && !(1 << ((v22 + 32) & 63) & v13))\n
                    {\n
                        *((a1 + v41 * 8)) = 6;\n
                        *((a1 + v41 * 8 + 1)) = v22;\n
                        *((a1 + v41 * 8 + 2)) = 4;\n
                        *((a1 + v41 * 8 + 3)) = v22;\n
                        *((a1 + v41 * 8 + 7)) = 0;\n
                        v41 = v41 + 1;\n
                    }\n
                }\n
                v42 >>= v27 & 63;\n
                if (!v42)\n
                    break;\n
                if (v19 >= 63)\n
                    break;\n
            }\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                if (ExpCmpNE(v42, 0))\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v29 = (ExpCmpNE(v42, 0) ? tmp_8 : r15<8>);\n
                }\n
                else\n
                {\n
                    tmp_8 = UnaryOp Ctz;\n
                    v29 = (ExpCmpNE(v42, 0) ? tmp_8 : r15<8>);\n
                }\n
                v31 = v29 + v19 + 8;\n
                v32 = v29 + v19 - 55;\n
                v19 = v29 + v19 + 1;\n
                if ((v19 >> 31 & 1 ^ 1))\n
                    v31 = v19;\n
                v40 = v31 >> 3;\n
                v33 = v31 & -8;\n
                v34 = v19 - v33;\n
                v35 = v40 + 1;\n
                if (v32 >= -71)\n
                {\n
                    if (v34 > 0)\n
                    {\n
                        v36 = v34 - 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v34 - 1 + (v40 + 1 << 3) & 63) >> 3)) >> (v34 - 1 + (v40 + 1 << 3) & 63 & 7)) & 1) && (1 << (v36 + (v35 << 3) & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v40;\n
                            *((a1 + v41 * 8 + 1)) = v34;\n
                            *((a1 + v41 * 8 + 2)) = v35;\n
                            *((a1 + v41 * 8 + 3)) = v36;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                        }\n
                    }\n
                    if ((v34 - 7) >= -8)\n
                    {\n
                        v37 = v34 + 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v34 + 1 + (v40 + 1 << 3) & 63) >> 3)) >> (v34 + 1 + (v40 + 1 << 3) & 63 & 7)) & 1) && (1 << (v37 + (v35 << 3) & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v40;\n
                            *((a1 + v41 * 8 + 1)) = v34;\n
                            *((a1 + v41 * 8 + 2)) = v35;\n
                            *((a1 + v41 * 8 + 3)) = v37;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                        }\n
                    }\n
                }\n
                v38 = 1 << ((v34 + v35 * 8) & 63);\n
                v0 = v1;\n
                if (!((*(&v0 + ((v34 + (v40 + 1 << 3) & 63) >> 3)) >> (v34 + (v40 + 1 << 3) & 63 & 7)) & 1) && v19 >= -15 && v19 <= 55 && v34 >= 0 && !(v38 & v13))\n
                {\n
                    *((a1 + v41 * 8)) = v40;\n
                    *((a1 + v41 * 8 + 1)) = v34;\n
                    *((a1 + v41 * 8 + 2)) = v35;\n
                    *((a1 + v41 * 8 + 3)) = v34;\n
                    *((a1 + v41 * 8 + 7)) = 0;\n
                    v41 = v41 + 1;\n
                }\n
                v39 = v29 + 1;\n
                if ((v19 & -8) == 8)\n
                {\n
                    v40 = 1 << (v34 + 24 & 63);\n
                    v0 = v1;\n
                    if (!((*(&v0 + (((v34 + 24) & 63) >> 3)) >> ((v34 + 24) & 63 & 7)) & 1) && !(v38 & v2->field_2b8) && v34 >= 0)\n
                    {\n
                        v40 &= v13;\n
                        if (!v40)\n
                        {\n
                            *((a1 + v41 * 8)) = 1;\n
                            *((a1 + v41 * 8 + 1)) = v34;\n
                            *((a1 + v41 * 8 + 2)) = 3;\n
                            *((a1 + v41 * 8 + 3)) = v34;\n
                            *((a1 + v41 * 8 + 7)) = 0;\n
                            v41 = v41 + 1;\n
                        }\n
                    }\n
                }\n
                v42 >>= v39 & 63;\n
                if (!v42)\n
                    break;\n
                if (v19 >= 63)\n
                    break;\n
            }\n
        }\n
    }\n
    v43 = *(&v2[1].padding_10[16 + 8 * v12]);\n
    if (v43)\n
    {\n
        v44 = -1;\n
        do\n
        {\n
            if (!(ExpCmpNE(v43, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v45 = (ExpCmpNE(v43, 0) ? tmp_8 : v40);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v45 = (ExpCmpNE(v43, 0) ? tmp_8 : v40);\n
            }\n
            v46 = v45 + v44 + 8;\n
            v47 = v45 + v44 - 47;\n
            v44 = v44 + v45 + 1;\n
            if ((v44 >> 31 & 1 ^ 1))\n
                v46 = v44;\n
            v48 = v46 >> 3;\n
            v49 = v46 & -8;\n
            v50 = v44 - v49;\n
            if (v47 < -71)\n
            {\n
LABEL_406290:\n
                if ((v44 - 80) < -64)\n
                {\n
LABEL_406340:\n
                    if ((v44 - 56) < -71)\n
                    {\n
LABEL_4063f0:\n
                        v40 = v45 + 1;\n
                        if ((v44 - 72) < -64)\n
                        {\n
LABEL_4064a0:\n
                            v43 >>= v40 & 63;\n
                            if (!v43)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v42 = v48 - 1;\n
                            if ((v50 - 6) >= -8)\n
                            {\n
                                v63 = v50 + 2;\n
                                v0 = v13;\n
                                if (!((*(&v0 + ((v50 + 2 + (v48 - 1 << 3) & 63) >> 3)) >> (v50 + 2 + (v48 - 1 << 3) & 63 & 7)) & 1))\n
                                {\n
                                    v64 = 0;\n
                                    if ((1 << (v63 + (v42 << 3) & 63) & v1))\n
                                        v64 = 100;\n
                                    *((a1 + v41 * 8)) = v48;\n
                                    *((a1 + v41 * 8 + 1)) = v50;\n
                                    *((a1 + v41 * 8 + 2)) = v42;\n
                                    *((a1 + v41 * 8 + 3)) = v63;\n
                                    *((a1 + v41 * 8 + 7)) = v64;\n
                                    v41 = v41 + 1;\n
                                    if (v50 < 2)\n
                                        goto LABEL_4064a0;\n
LABEL_406426:\n
                                    v65 = v50 - 2;\n
                                    v0 = v13;\n
                                    if (!((*(&v0 + ((v50 - 2 + (v48 - 1 << 3) & 63) >> 3)) >> (v50 - 2 + (v48 - 1 << 3) & 63 & 7)) & 1))\n
                                    {\n
                                        v66 = 0;\n
                                        if ((1 << (v65 + (v42 << 3) & 63) & v1))\n
                                            v66 = 100;\n
                                        *((a1 + v41 * 8)) = v48;\n
                                        *((a1 + v41 * 8 + 1)) = v50;\n
                                        *((a1 + v41 * 8 + 2)) = v42;\n
                                        *((a1 + v41 * 8 + 3)) = v65;\n
                                        *((a1 + v41 * 8 + 7)) = v66;\n
                                        v41 = v41 + 1;\n
                                        goto LABEL_4064a0;\n
                                    }\n
                                }\n
                            }\n
                            if (v50 < 2)\n
                                goto LABEL_4064a0;\n
                            goto LABEL_406426;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v42 = v48 + 1;\n
                        if ((v50 - 6) >= -8)\n
                        {\n
                            v59 = v50 + 2;\n
                            v0 = v13;\n
                            if (!((*(&v0 + ((v50 + 2 + (v48 + 1 << 3) & 63) >> 3)) >> (v50 + 2 + (v48 + 1 << 3) & 63 & 7)) & 1))\n
                            {\n
                                v60 = 0;\n
                                if ((1 << (v59 + (v42 << 3) & 63) & v1))\n
                                    v60 = 100;\n
                                *((a1 + v41 * 8)) = v48;\n
                                *((a1 + v41 * 8 + 1)) = v50;\n
                                *((a1 + v41 * 8 + 2)) = v42;\n
                                *((a1 + v41 * 8 + 3)) = v59;\n
                                *((a1 + v41 * 8 + 7)) = v60;\n
                                v41 = v41 + 1;\n
                                if (v50 < 2)\n
                                    goto LABEL_4063f0;\n
LABEL_406377:\n
                                v61 = v50 - 2;\n
                                v0 = v13;\n
                                if (!((*(&v0 + ((v50 - 2 + (v48 + 1 << 3) & 63) >> 3)) >> (v50 - 2 + (v48 + 1 << 3) & 63 & 7)) & 1))\n
                                {\n
                                    v62 = 0;\n
                                    if ((1 << (v61 + (v42 << 3) & 63) & v1))\n
                                        v62 = 100;\n
                                    *((a1 + v41 * 8)) = v48;\n
                                    *((a1 + v41 * 8 + 1)) = v50;\n
                                    *((a1 + v41 * 8 + 2)) = v42;\n
                                    *((a1 + v41 * 8 + 3)) = v61;\n
                                    *((a1 + v41 * 8 + 7)) = v62;\n
                                    v41 = v41 + 1;\n
                                    goto LABEL_4063f0;\n
                                }\n
                            }\n
                        }\n
                        if (v50 < 2)\n
                            goto LABEL_4063f0;\n
                        goto LABEL_406377;\n
                    }\n
                }\n
                else\n
                {\n
                    v42 = v48 - 2;\n
                    if ((v50 - 7) >= -8)\n
                    {\n
                        v55 = v50 + 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v50 + 1 + (v48 - 2 << 3) & 63) >> 3)) >> (v50 + 1 + (v48 - 2 << 3) & 63 & 7)) & 1))\n
                        {\n
                            v56 = 0;\n
                            if ((1 << (v55 + (v42 << 3) & 63) & v1))\n
                                v56 = 100;\n
                            *((a1 + v41 * 8)) = v48;\n
                            *((a1 + v41 * 8 + 1)) = v50;\n
                            *((a1 + v41 * 8 + 2)) = v42;\n
                            *((a1 + v41 * 8 + 3)) = v55;\n
                            *((a1 + v41 * 8 + 7)) = v56;\n
                            v41 = v41 + 1;\n
                            if (v50 <= 0)\n
                                goto LABEL_406340;\n
LABEL_4062c6:\n
                            v57 = v50 - 1;\n
                            v0 = v13;\n
                            if (!((*(&v0 + ((v50 - 1 + (v48 - 2 << 3) & 63) >> 3)) >> (v50 - 1 + (v48 - 2 << 3) & 63 & 7)) & 1))\n
                            {\n
                                v58 = 0;\n
                                if ((1 << (v57 + (v42 << 3) & 63) & v1))\n
                                    v58 = 100;\n
                                *((a1 + v41 * 8)) = v48;\n
                                *((a1 + v41 * 8 + 1)) = v50;\n
                                *((a1 + v41 * 8 + 2)) = v42;\n
                                *((a1 + v41 * 8 + 3)) = v57;\n
                                *((a1 + v41 * 8 + 7)) = v58;\n
                                v41 = v41 + 1;\n
                                goto LABEL_406340;\n
                            }\n
                        }\n
                    }\n
                    if (v50 <= 0)\n
                        goto LABEL_406340;\n
                    goto LABEL_4062c6;\n
                }\n
            }\n
            else\n
            {\n
                v42 = v48 + 2;\n
                if ((v50 - 7) >= -8)\n
                {\n
                    v51 = v50 + 1;\n
                    v0 = v13;\n
                    if (!((*(&v0 + ((v50 + 1 + (v48 + 2 << 3) & 63) >> 3)) >> (v50 + 1 + (v48 + 2 << 3) & 63 & 7)) & 1))\n
                    {\n
                        v52 = 0;\n
                        if ((1 << (v51 + (v42 << 3) & 63) & v1))\n
                            v52 = 100;\n
                        *((a1 + v41 * 8)) = v48;\n
                        *((a1 + v41 * 8 + 1)) = v50;\n
                        *((a1 + v41 * 8 + 2)) = v42;\n
                        *((a1 + v41 * 8 + 3)) = v51;\n
                        *((a1 + v41 * 8 + 7)) = v52;\n
                        v41 = v41 + 1;\n
                        if (v50 <= 0)\n
                            goto LABEL_406290;\n
LABEL_406217:\n
                        v53 = v50 - 1;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v50 - 1 + (v48 + 2 << 3) & 63) >> 3)) >> (v50 - 1 + (v48 + 2 << 3) & 63 & 7)) & 1))\n
                        {\n
                            v54 = 0;\n
                            if ((1 << (v53 + (v42 << 3) & 63) & v1))\n
                                v54 = 100;\n
                            *((a1 + v41 * 8)) = v48;\n
                            *((a1 + v41 * 8 + 1)) = v50;\n
                            *((a1 + v41 * 8 + 2)) = v42;\n
                            *((a1 + v41 * 8 + 3)) = v53;\n
                            *((a1 + v41 * 8 + 7)) = v54;\n
                            v41 = v41 + 1;\n
                            goto LABEL_406290;\n
                        }\n
                    }\n
                }\n
                if (v50 <= 0)\n
                    goto LABEL_406290;\n
                goto LABEL_406217;\n
            }\n
        } while (v44 < 63);\n
    }\n
    v67 = v2;\n
    v68 = *(&v67[1].padding_10[64 + 8 * v12]);\n
    v7 = v12;\n
    v69 = *(&v67[1].padding_10[48 + 8 * v12]) | v68;\n
    v5 = v68;\n
    if (v69)\n
    {\n
        v70 = -1;\n
        if (ExpCmpNE(v69, 0))\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v71 = (ExpCmpNE(v69, 0) ? tmp_8 : v40);\n
        }\n
        else\n
        {\n
            tmp_8 = UnaryOp Ctz;\n
            v71 = (ExpCmpNE(v69, 0) ? tmp_8 : v40);\n
        }\n
        v72 = v71 + v70 + 1;\n
        v3 = v71;\n
        v73 = v71 + v70 + 8;\n
        if ((v72 >> 31 & 1 ^ 1))\n
            v73 = v72;\n
        v74 = v73 >> 3;\n
        v75 = 1 << (v72 + 1 & 63);\n
        v42 = v73 & -8;\n
        v76 = v72 - v42;\n
        v77 = 6;\n
        if (v76 > 6)\n
        {\n
            v80 = v69;\n
LABEL_4065e3:\n
            v84 = 1 << (v72 - 1 & 63);\n
            v85 = v2->field_2b8;\n
            v86 = v72 - 64;\n
            if (v86 >= -71)\n
            {\n
                for (v87 = v77 + 1; !(v84 & v85); v87 -= 1)\n
                {\n
                    v0 = v13;\n
                    if (!((*(&v0 + ((v42 + v77 & 63) >> 3)) >> (v42 + v77 & 63 & 7)) & 1))\n
                    {\n
                        v88 = (!(1 << ((v42 + v77) & 63) & v1) ? 100 : 0);\n
                        *((a1 + v41 * 8)) = v74;\n
                        *((a1 + v41 * 8 + 1)) = v76;\n
                        *((a1 + v41 * 8 + 2)) = v74;\n
                        *((a1 + v41 * 8 + 3)) = v77;\n
                        *((a1 + v41 * 8 + 7)) = v88;\n
                        v41 = v41 + 1;\n
                    }\n
                    v84 /= 2;\n
                    v77 = v77 - 1;\n
                    tmp_12 = v87;\n
                }\n
            }\n
            else if (!(v84 & v85))\n
            {\n
                if ((v84 >> 1 & v85))\n
                {\n
                    v77 = v77 - 1;\n
                }\n
                else if ((v84 >> 2 & v85))\n
                {\n
                    v77 = v77 - 2;\n
                }\n
                else if ((v84 >> 3 & v85))\n
                {\n
                    v77 = v77 - 3;\n
                }\n
                else if ((v84 >> 4 & v85))\n
                {\n
                    v77 = v77 - 4;\n
                }\n
                else if ((v84 >> 5 & v85))\n
                {\n
                    v77 = v77 - 5;\n
                }\n
                else\n
                {\n
                    v77 = v77 - 6;\n
                }\n
            }\n
            if (v86 >= -71)\n
            {\n
                v0 = v13;\n
                if (!((*(&v0 + ((v77 + v42 & 63) >> 3)) >> (v77 + v42 & 63 & 7)) & 1) && (1 << ((v77 + v42) & 63) & v1))\n
                {\n
                    *((a1 + v41 * 8)) = v74;\n
                    *((a1 + v41 * 8 + 1)) = v76;\n
                    *((a1 + v41 * 8 + 2)) = v74;\n
                    *((a1 + v41 * 8 + 3)) = v77;\n
                    *((a1 + v41 * 8 + 7)) = 100;\n
                    v41 = v41 + 1;\n
                }\n
            }\n
        }\n
        v78 = v2->field_2b8;\n
        v79 = v72 - 64;\n
        if (v79 >= -71)\n
        {\n
            v82 = v76 + 1;\n
            while (true)\n
            {\n
                v81 = v82 - 1;\n
                if ((v75 & v78))\n
                    break;\n
                if (v81 >= -1)\n
                {\n
                    v0 = v13;\n
                    if (!((*(&v0 + ((v42 + v82 & 63) >> 3)) >> (v42 + v82 & 63 & 7)) & 1))\n
                    {\n
                        v83 = (!(1 << ((v42 + v82) & 63) & v1) ? 100 : 0);\n
                        *((a1 + v41 * 8)) = v74;\n
                        *((a1 + v41 * 8 + 1)) = v76;\n
                        *((a1 + v41 * 8 + 2)) = v74;\n
                        *((a1 + v41 * 8 + 3)) = v82;\n
                        *((a1 + v41 * 8 + 7)) = v83;\n
                        v41 = v41 + 1;\n
                    }\n
                }\n
                v75 *= 2;\n
                v82 = v82 + 1;\n
                if (v82 == 8)\n
                    goto LABEL_4065c0;\n
            }\n
        }\n
        else\n
        {\n
            v81 = v76;\n
            if (!(!(v75 & v78)))\n
                goto LABEL_4065c0;\n
            do\n
            {\n
                if (v81 == 6)\n
                    goto LABEL_4065c0;\n
                v75 *= 2;\n
                v81 = v81 + 1;\n
            } while (!(v75 & v78));\n
            v82 = v81 + 1;\n
        }\n
        if (v79 >= -71 && v81 >= -1)\n
        {\n
            v0 = v13;\n
            if (!((*(&v0 + ((v82 + v42 & 63) >> 3)) >> (v82 + v42 & 63 & 7)) & 1) && (1 << ((v82 + v42) & 63) & v1))\n
            {\n
                *((a1 + v41 * 8)) = v74;\n
                *((a1 + v41 * 8 + 1)) = v76;\n
                *((a1 + v41 * 8 + 2)) = v74;\n
                *((a1 + v41 * 8 + 3)) = v82;\n
                *((a1 + v41 * 8 + 7)) = 100;\n
                v41 = v41 + 1;\n
            }\n
        }\n
LABEL_4065c0:\n
        v80 = v69;\n
        v77 = v76 - 1;\n
        goto LABEL_4065e3;\n
    }\n
    v98 = v5 | *(&v2[1].padding_10[32 + 8 * v7]);\n
    if (v98)\n
    {\n
        v99 = v98;\n
        v100 = -1;\n
        do\n
        {\n
            v5 = v99;\n
            if (!(ExpCmpNE(v99, 0)))\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v98 = (ExpCmpNE(v99, 0) ? tmp_8 : v98);\n
            }\n
            else\n
            {\n
                tmp_8 = UnaryOp Ctz;\n
                v98 = (ExpCmpNE(v99, 0) ? tmp_8 : v98);\n
            }\n
            v101 = v98 + v100 + 8;\n
            v4 = v98;\n
            v102 = v100 + v98 + 1;\n
            if ((v102 >> 31 & 1 ^ 1))\n
                v101 = v102;\n
            v103 = v101 >> 3;\n
            v104 = v101 & -8;\n
            v105 = v102 - v104;\n
            v106 = v103 + 1;\n
            v107 = v105 + 1;\n
            v3 = v102;\n
            v9 = v103 * 8 + 8;\n
            if (v102 <= 55 && v105 <= 6)\n
            {\n
                v108 = 1 << ((v9 + v107) & 63);\n
                v109 = (v105 + v103 * 8) + 9;\n
                v110 = v107;\n
                v111 = v106;\n
                do\n
                {\n
                    v112 = (v111 | v110) >> 31;\n
                    if (!(v108 & v2->field_2b8))\n
                    {\n
                        if (!v112)\n
                        {\n
                            v0 = v13;\n
                            if (!((*(&v0 + ((v109 & 63) >> 3)) >> (v109 & 63 & 7)) & 1))\n
                            {\n
                                v98 = 0;\n
                                v113 = (!(1 << (v109 & 63) & v1) ? 100 : 0);\n
                                *((a1 + v41 * 8)) = v103;\n
                                *((a1 + v41 * 8 + 1)) = v105;\n
                                *((a1 + v41 * 8 + 2)) = v111;\n
                                *((a1 + v41 * 8 + 3)) = v110;\n
                                *((a1 + v41 * 8 + 7)) = v113;\n
                                v41 = v41 + 1;\n
                            }\n
                        }\n
                        if (v111 > 6)\n
                            break;\n
                        continue;\n
                    }\n
                    else if (!v112)\n
                    {\n
                        v98 = v13;\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v109 & 63) >> 3)) >> (v109 & 63 & 7)) & 1) && (1 << (v109 & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v103;\n
                            *((a1 + v41 * 8 + 1)) = v105;\n
                            *((a1 + v41 * 8 + 2)) = v111;\n
                            *((a1 + v41 * 8 + 3)) = v110;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                            break;\n
                        }\n
                    }\n
                    v111 = v111 + 1;\n
                    v108 *= 0x200;\n
                    v109 = v109 + 9;\n
                    v110 += 1;\n
                } while (v107 < 7);\n
            }\n
            v114 = v103 - 1;\n
            v6 = v114;\n
            v10 = v103 * 8 - 8;\n
            if (v3 >= 8 && v105 <= 6)\n
            {\n
                v115 = 1 << ((v10 + v107) & 63);\n
                v116 = (v105 + v103 * 8) - 7;\n
                v117 = v4;\n
                do\n
                {\n
                    if (!(v115 & v2->field_2b8))\n
                    {\n
                        if (v114 <= 7 && v107 >= 0)\n
                        {\n
                            v98 = 1 << (v116 & 63);\n
                            v0 = v13;\n
                            if (!((*(&v0 + ((v116 & 63) >> 3)) >> (v116 & 63 & 7)) & 1))\n
                            {\n
                                v98 = (!(v98 & v1) ? 100 : 0);\n
                                *((a1 + v41 * 8)) = v103;\n
                                *((a1 + v41 * 8 + 1)) = v105;\n
                                *((a1 + v41 * 8 + 2)) = v114;\n
                                *((a1 + v41 * 8 + 3)) = v107;\n
                                *((a1 + v41 * 8 + 7)) = v98;\n
                                v41 = v41 + 1;\n
                            }\n
                        }\n
                        if (v114 <= 0)\n
                            break;\n
                        continue;\n
                    }\n
                    else if (v114 <= 7 && v107 >= 0)\n
                    {\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v116 & 63) >> 3)) >> (v116 & 63 & 7)) & 1) && (1 << (v116 & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v103;\n
                            *((a1 + v41 * 8 + 1)) = v105;\n
                            *((a1 + v41 * 8 + 2)) = v114;\n
                            *((a1 + v41 * 8 + 3)) = v107;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                            break;\n
                        }\n
                    }\n
                    v98 = v107 + 1;\n
                    v115 /= 128;\n
                    v114 = v114 - 1;\n
                    v116 = v116 - 7;\n
                    tmp_42 = v107;\n
                    v107 = v98;\n
                } while (tmp_42 < 7);\n
                goto LABEL_406c48;\n
            }\n
            v117 = v4;\n
LABEL_406c48:\n
            v42 = v105 - 1;\n
            if (v3 <= 55 && v105 > 0)\n
            {\n
                v118 = 1 << ((v9 + v42) & 63);\n
                v119 = v42;\n
                v98 = (v105 + v103 * 8) + 7;\n
                v120 = v103 * 8 + 8;\n
                do\n
                {\n
                    if (!(v118 & v2->field_2b8))\n
                    {\n
                        if (v106 >= 0)\n
                        {\n
                            v0 = v13;\n
                            if (!((*(&v0 + ((v119 + v120 & 63) >> 3)) >> (v119 + v120 & 63 & 7)) & 1))\n
                            {\n
                                v121 = (!(1 << ((v119 + v120) & 63) & v1) ? 100 : 0);\n
                                *((a1 + v41 * 8)) = v103;\n
                                *((a1 + v41 * 8 + 1)) = v105;\n
                                *((a1 + v41 * 8 + 2)) = v106;\n
                                *((a1 + v41 * 8 + 3)) = v119;\n
                                *((a1 + v41 * 8 + 7)) = v121;\n
                                v41 = v41 + 1;\n
                            }\n
                        }\n
                        if (v106 > 6)\n
                            break;\n
                        continue;\n
                    }\n
                    else if (v106 >= 0)\n
                    {\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v98 & 63) >> 3)) >> (v98 & 63 & 7)) & 1) && (1 << (v98 & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v103;\n
                            *((a1 + v41 * 8 + 1)) = v105;\n
                            *((a1 + v41 * 8 + 2)) = v106;\n
                            *((a1 + v41 * 8 + 3)) = v119;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                            break;\n
                        }\n
                    }\n
                    v106 = v106 + 1;\n
                    v118 *= 128;\n
                    v98 = v98 + 7;\n
                    v120 = v120 + 8;\n
                    v119 -= 1;\n
                } while (v42 > 0);\n
            }\n
            v122 = v117 + 1;\n
            v100 = v3;\n
            if (v100 >= 8 && v105 > 0)\n
            {\n
                v123 = v10 + v42;\n
                v124 = ((v123 & 63) ? 1 << (v123 & 63) : 1 << (v123 & 63));\n
                v125 = v6;\n
                v126 = v125 * 8;\n
                v98 = v42 + v125 * 8;\n
                do\n
                {\n
                    if (!(v124 & v2->field_2b8))\n
                    {\n
                        if (v125 <= 7)\n
                        {\n
                            v0 = v13;\n
                            if (!((*(&v0 + (((v126 & -8) + v42 & 63) >> 3)) >> ((v126 & -8) + v42 & 63 & 7)) & 1))\n
                            {\n
                                v127 = (!(1 << (((v126 & -8) + v42) & 63) & v1) ? 100 : 0);\n
                                *((a1 + v41 * 8)) = v103;\n
                                *((a1 + v41 * 8 + 1)) = v105;\n
                                *((a1 + v41 * 8 + 2)) = v125;\n
                                *((a1 + v41 * 8 + 3)) = v42;\n
                                *((a1 + v41 * 8 + 7)) = v127;\n
                                v41 = v41 + 1;\n
                            }\n
                        }\n
                        if (v125 <= 0)\n
                            break;\n
                        continue;\n
                    }\n
                    else if (!(v125 & -8))\n
                    {\n
                        v0 = v13;\n
                        if (!((*(&v0 + ((v98 & 63) >> 3)) >> (v98 & 63 & 7)) & 1) && (1 << (v98 & 63) & v1))\n
                        {\n
                            *((a1 + v41 * 8)) = v103;\n
                            *((a1 + v41 * 8 + 1)) = v105;\n
                            *((a1 + v41 * 8 + 2)) = v125;\n
                            *((a1 + v41 * 8 + 3)) = v42;\n
                            *((a1 + v41 * 8 + 7)) = 100;\n
                            v41 = v41 + 1;\n
                            break;\n
                        }\n
                    }\n
                    v125 -= 1;\n
                    v124 /= 0x200;\n
                    v98 -= 9;\n
                    v126 -= 8;\n
                    tmp_19 = v42;\n
                    v42 -= 1;\n
                } while (tmp_19 > 0);\n
            }\n
            v99 = v5 >> (v117 & 63);\n
            if (!v99)\n
                break;\n
            continue;\n
        } while (v100 < 63);\n
    }\n
    v128 = v2;\n
    v129 = v7;\n
    if (!(ExpCmpNE(*(&v128[1].padding_10[80 + 8 * v129]), 0)))\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v130 = (ExpCmpNE(*(&v128[1].padding_10[80 + 8 * v129]), 0) ? tmp_14 : v98);\n
    }\n
    else\n
    {\n
        tmp_14 = UnaryOp Ctz;\n
        v130 = (ExpCmpNE(*(&v128[1].padding_10[80 + 8 * v129]), 0) ? tmp_14 : v98);\n
    }\n
    v131 = v130 / 8;\n
    v132 = v130 & 7;\n
    v133 = v132 - 1;\n
    if (v130 < 8)\n
    {\n
LABEL_406fd2:\n
        if (!v132)\n
            goto LABEL_407082;\n
        goto LABEL_406fda;\n
    }\n
    else\n
    {\n
        v42 = v131 - 1;\n
        v134 = v42 * 8;\n
        if (v132)\n
        {\n
            v0 = v13;\n
            if (!((*(&v0 + (((v131 - 1 << 3) + v132 - 1 & 63) >> 3)) >> ((v131 - 1 << 3) + v132 - 1 & 63 & 7)) & 1))\n
            {\n
                v135 = (!(1 << ((v134 + v133) & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v42;\n
                *((a1 + v41 * 8 + 3)) = v133;\n
                *((a1 + v41 * 8 + 7)) = v135;\n
                v41 = v41 + 1;\n
            }\n
        }\n
        v0 = v13;\n
        if (((*(&v0 + (((v134 | v132) & 63) >> 3)) >> ((v134 | v132) & 63 & 7)) & 1))\n
        {\n
            v136 = 6;\n
            if (v132 == 7)\n
                goto LABEL_406fdc;\n
        }\n
        else\n
        {\n
            v137 = (!(1 << ((v134 | v132) & 63) & v1) ? 100 : 0);\n
            *((a1 + v41 * 8)) = v131;\n
            *((a1 + v41 * 8 + 1)) = v132;\n
            *((a1 + v41 * 8 + 2)) = v42;\n
            *((a1 + v41 * 8 + 3)) = v132;\n
            *((a1 + v41 * 8 + 7)) = v137;\n
            v41 = v41 + 1;\n
            v136 = 6;\n
            if (v132 == 7)\n
                goto LABEL_406fdc;\n
        }\n
        v138 = v132 + 1;\n
        v139 = v134 + v138;\n
        v0 = v13;\n
        if ((*(&v0 + ((v139 & 63) >> 3)) >> (v139 & 63 & 7) & 1 & 1))\n
            goto LABEL_406fd2;\n
        v140 = (!(1 << (v139 & 63) & v1) ? 100 : 0);\n
        *((a1 + v41 * 8)) = v131;\n
        *((a1 + v41 * 8 + 1)) = v132;\n
        *((a1 + v41 * 8 + 2)) = v42;\n
        *((a1 + v41 * 8 + 3)) = v138;\n
        *((a1 + v41 * 8 + 7)) = v140;\n
        v41 = v41 + 1;\n
        if (!v132)\n
        {\n
LABEL_407082:\n
            v141 = v130 & 56;\n
            v42 = 1;\n
            v136 = 4294967295;\n
            v142 = 1;\n
LABEL_407093:\n
            v145 = v141 + v142;\n
            v0 = v13;\n
            if (!((*(&v0 + ((v145 & 63) >> 3)) >> (v145 & 63 & 7)) & 1))\n
            {\n
                v146 = (!(1 << (v145 & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v131;\n
                *((a1 + v41 * 8 + 3)) = v142;\n
                *((a1 + v41 * 8 + 7)) = v146;\n
                v41 = v41 + 1;\n
                if (v131 == 7)\n
                    goto LABEL_4071d5;\n
            }\n
            else if (v131 == 7)\n
            {\n
                goto LABEL_4071d5;\n
            }\n
            v144 = v131 + 1;\n
            if (!v42)\n
            {\n
                v42 = 0;\n
            }\n
            else\n
            {\n
                v147 = v144 * 8;\n
                v42 = 0;\n
                goto LABEL_407148;\n
            }\n
LABEL_407100:\n
            v147 = v144 * 8;\n
            v0 = v13;\n
            if (!((*(&v0 + ((v136 + (v144 << 3) & 63) >> 3)) >> (v136 + (v144 << 3) & 63 & 7)) & 1))\n
            {\n
                v148 = (!(1 << ((v136 + (v144 << 3)) & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v144;\n
                *((a1 + v41 * 8 + 3)) = v136;\n
                *((a1 + v41 * 8 + 7)) = v148;\n
                v41 = v41 + 1;\n
            }\n
LABEL_407148:\n
            v0 = v13;\n
            if (!((*(&v0 + (((v147 | v132) & 63) >> 3)) >> ((v147 | v132) & 63 & 7)) & 1))\n
            {\n
                v149 = (!(1 << ((v147 | v132) & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v144;\n
                *((a1 + v41 * 8 + 3)) = v132;\n
                *((a1 + v41 * 8 + 7)) = v149;\n
                v41 = v41 + 1;\n
                if (!(!v42))\n
                    goto LABEL_4071d5;\n
            }\n
            else if (!(!v42))\n
            {\n
                goto LABEL_4071d5;\n
            }\n
            v150 = v147 + v142;\n
            v0 = v13;\n
            if (!((*(&v0 + ((v150 & 63) >> 3)) >> (v150 & 63 & 7)) & 1))\n
            {\n
                v151 = (!(1 << (v150 & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v144;\n
                *((a1 + v41 * 8 + 3)) = v142;\n
                *((a1 + v41 * 8 + 7)) = v151;\n
                v41 = v41 + 1;\n
            }\n
        }\n
        else\n
        {\n
LABEL_406fda:\n
            v136 = v133;\n
LABEL_406fdc:\n
            v141 = v130 & 56;\n
            v0 = v13;\n
            if (!((*(&v0 + ((v136 + v141 & 63) >> 3)) >> (v136 + v141 & 63 & 7)) & 1))\n
            {\n
                v143 = (!(1 << ((v136 + v141) & 63) & v1) ? 100 : 0);\n
                *((a1 + v41 * 8)) = v131;\n
                *((a1 + v41 * 8 + 1)) = v132;\n
                *((a1 + v41 * 8 + 2)) = v131;\n
                *((a1 + v41 * 8 + 3)) = v136;\n
                *((a1 + v41 * 8 + 7)) = v143;\n
                v41 = v41 + 1;\n
                if (v132 != 7)\n
                {\n
LABEL_407043:\n
                    v142 = v132 + 1;\n
                    v42 = 0;\n
                    goto LABEL_407093;\n
                }\n
            }\n
            else if (!(v132 == 7))\n
            {\n
                goto LABEL_407043;\n
            }\n
            if (v131 == 7)\n
                goto LABEL_4071d5;\n
            v144 = v131 + 1;\n
            v142 = 8;\n
            v42 = 1;\n
            goto LABEL_407100;\n
        }\n
    }\n
LABEL_4071d5:\n
    *(v8) = v41;\n
    return v8;\n
}\n
", "4218893:sub_40600d": null, "4220370:sub_4065d2": null, "4220509:sub_40665d": null, "4220520:sub_406668": null, "4220618:sub_4066ca": null, "4220630:sub_4066d6": null, "4220890:sub_4067da": null, "4220959:sub_40681f": null, "4221061:sub_406885": null, "4221077:sub_406895": null, "4221201:sub_406911": null, "4221318:sub_406986": null, "4221723:sub_406b1b": null, "4222013:sub_406c3d": null, "4222221:sub_406d0d": null, "4222308:sub_406d64": null, "4222594:sub_406e82": null, "4223464:sub_4071e8": null, "4223472:cgc_quiesce": "extern char engine;\n
\n
long long cgc_quiesce(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_153;  // tmp #153\n
    int tmp_155;  // tmp #155\n
    int tmp_154;  // tmp #154\n
    int tmp_29;  // tmp #29\n
    int tmp_28;  // tmp #28\n
    int tmp_31;  // tmp #31\n
    int tmp_30;  // tmp #30\n
    int tmp_189;  // tmp #189\n
    int tmp_191;  // tmp #191\n
    int tmp_190;  // tmp #190\n
    unsigned long v0;  // [bp-0x188]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0x54]\n
    char v5;  // [bp-0x50], Other Possible Types: unsigned long\n
    int v6;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x38]\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // rax\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rax\n
    unsigned long v14;  // rdx\n
    unsigned long v15;  // rdx\n
    int v17;  // xmm4\n
    int v19;  // xmm2\n
    int v21;  // xmm1\n
    int v22;  // xmm1\n
    unsigned long v24;  // rbp\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rbx\n
    unsigned long v27;  // r14\n
    unsigned long v28;  // r15\n
    unsigned long v32;  // rbx\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // r12\n
    unsigned long v35;  // r12\n
    unsigned long v36;  // r15\n
    unsigned long v37;  // rdi\n
    unsigned long v38;  // rdx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rsi\n
    unsigned long v41;  // rdi\n
    unsigned long v42;  // rbx\n
    unsigned long v44;  // rdi\n
    unsigned long v45;  // rbx\n
\n
    v4 = a2;\n
    v9 = a1;\n
    v1 = a0;\n
    v2 = 0;\n
    v7 = *((engine + 616));\n
    v10 = cgc_calculate_attacks(0);\n
    v12 = 0x7e7e000000 & v10;\n
    v13 = v12 - (0x1515000000 & v12 / 2);\n
    *(&v6) = *((engine + 704));\n
    v14 = v6 & v10;\n
    v15 = v14 - (6148914691236517205 & v14 / 2);\n
    cgc_calculate_attacks(1);\n
    tmp_153 = SubV(tmp_155, tmp_154);\n
    v17 = tmp_153 & 68056473384187692692674921486353642291;\n
    tmp_29 = ShrNV(tmp_28, 2);\n
    v19 = (tmp_29 & 68056473384187692692674921486353642291) + v17;\n
    tmp_31 = ShrNV(tmp_30, 4);\n
    v21 = tmp_31 + v19 & 20016609818878733144904388672456953615;\n
    v22 = [D] amd64g_calculate_mmx_psadbw(0x0<64>, Conv(128->64, (xmm1<16> >> 0x40<8>))) CONCAT [D] amd64g_calculate_mmx_psadbw(0x0<64>, Conv(128->64, xmm1<16>));\n
    tmp_189 = SubV(tmp_191, tmp_190);\n
    v24 = v4;\n
    v25 = (72340172838076673 * (((v13 >> 2 & 0x3333333333000000) + (v13 & 0x3333333333000000) >> 4) + (v13 >> 2 & 0x3333333333000000) + (v13 & 0x3333333333000000) & 1085102592571150095) >> 56) + *((engine + 4)) - *((engine + 8)) + (72340172838076673 * (((v15 >> 2 & 3689348814741910323) + (v15 & 3689348814741910323) >> 4) + (v15 >> 2 & 3689348814741910323) + (v15 & 3689348814741910323) & 1085102592571150095) >> 56) - ((((v22 >> 64) >> 32) CONCAT (v22 >> 64) CONCAT ((v22 >> 64) >> 32) CONCAT (v22 >> 64)) + v22) + tmp_189 * 2;\n
    v26 = *((engine + 12));\n
    v27 = -(v25);\n
    if (v26 != 1)\n
        v27 = v25;\n
    if (a1 < v27)\n
        v9 = v27;\n
    if (v9 >= v24)\n
        return v24;\n
    v28 = v7;\n
    v32 = v1;\n
    if (v32 > 7)\n
        return v27;\n
    v33 = cgc_calculate_attacks(v26) & *((engine + (!v26) * 8 + 704));\n
    if (*(&v5))\n
    {\n
        v5 = v33;\n
        v34 = v32 * 0x100;\n
        cgc_generate_moves(&v2, v28 + v34 * 8);\n
        v6 = v2;\n
        if (v6)\n
        {\n
            v1 = v32 + 1;\n
            v3 = -(v24);\n
            v35 = v28 + v34 * 8 + 4;\n
            v36 = 0;\n
            v37 = v5;\n
            while (true)\n
            {\n
                v38 = *((v35 + v36 * 8 - 2));\n
                v39 = *((v35 + v36 * 8 - 1));\n
                v40 = v39 + v38 * 8;\n
                v0 = v37;\n
                if (((*(&v0 + ((v40 & 63) >> 3)) >> (v40 & 63 & 7)) & 1))\n
                {\n
                    if ((*((engine + v40 + 632)) & 15) == 5)\n
                        return 10000000;\n
                    v41 = *((v35 + v36 * 8 - 4));\n
                    v42 = *((v35 + v36 * 8 - 3));\n
                    v44 = v41 | v42 * 0x100 | v38 * 0x10000 | v39 * 0x1000000 | *((v35 + v36 * 8)) * 0x100000000;\n
                    cgc_apply_move(v44, *((engine + v42 + v41 * 8 + 632)));\n
                    v45 = -(cgc_quiesce(v1, v3, -(v9)));\n
                    cgc_undo_move();\n
                    v37 = v5;\n
                    if (v27 < v45)\n
                        v27 = v45;\n
                    if (v9 < v27)\n
                        v9 = v27;\n
                    if (v9 >= v24)\n
                        return v9;\n
                }\n
                v36 += 1;\n
                if (v6 == v36)\n
                    return v27;\n
            }\n
        }\n
    }\n
}\n
", "4224140:sub_40748c": null, "4224384:cgc_init_states": "extern char g_40d44a;\n
extern char g_40e62c;\n
extern char g_40e6a7;\n
extern char g_40e732;\n
extern char g_40e82f;\n
extern char g_40e8af;\n
extern unsigned long long g_40eb71;\n
extern unsigned long long g_40ebf1;\n
extern char g_40ec25;\n
extern unsigned long long g_40ec71;\n
extern unsigned long long g_40ecf1;\n
extern unsigned long long g_40ed71;\n
extern char g_40edb5;\n
extern unsigned long long g_40edf1;\n
extern char g_40ee21;\n
extern char g_40ee25;\n
extern unsigned long long g_40ee71;\n
extern char g_40eea4;\n
extern unsigned long long g_40eef1;\n
extern char g_40efae;\n
extern char g_40f0a8;\n
extern char input_states;\n
\n
long long cgc_init_states()\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_memset(&input_states, 1, 0x4000);\n
    g_40eb71 = 144680345676153346;\n
    g_40ebf1 = 144680345676153346;\n
    g_40ec71 = 144680345676153346;\n
    g_40ecf1 = 144680345676153346;\n
    g_40ed71 = 144680345676153346;\n
    g_40edf1 = 144680345676153346;\n
    g_40ee71 = 144680345676153346;\n
    g_40eef1 = 144680345676153346;\n
    g_40e62c = 6;\n
    g_40e6a7 = 10;\n
    g_40e732 = 17;\n
    g_40e82f = 20;\n
    g_40e8af = 24;\n
    g_40ec25 = 25;\n
    g_40edb5 = 27;\n
    g_40ee21 = 30;\n
    g_40ee25 = 43;\n
    g_40eea4 = 35;\n
    g_40efae = 36;\n
    g_40f0a8 = 39;\n
    g_40d44a = 52;\n
    return v1;\n
}\n
", "4224566:sub_407636": null, "4224576:cgc_read_all": "long long cgc_read_all(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_23;  // tmp #23\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    do\n
    {\n
        do\n
        {\n
            if (!v3)\n
                return 1;\n
            tmp_23 = cgc_receive(a0, a1, v4, v5);\n
            v6 = v0;\n
            v3 -= v6;\n
        } while ((!v6 | tmp_23) != 1);\n
    } while (v6);\n
    return 0;\n
}\n
", "4224679:sub_4076a7": null, "4224688:cgc_write_string": "long long cgc_write_string(unsigned long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    cgc_strlen(a0);\n
    return cgc_transmit(a0, v1, v2, v3);\n
}\n
", "4224728:sub_4076d8": null, "4224736:cgc_send_move": "long long cgc_send_move(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    char v3[11];  // rax, Other Possible Types: unsigned long\n
    char v4;  // cl\n
    unsigned long long v5;  // rdx\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(32);\n
    if (v3)\n
    {\n
        cgc_strcpy(v3, \"move \");\n
        v3[5] = (a0 >> 8) + 109;\n
        v3[6] = a0 + 49;\n
        v3[7] = (a0 >> 24) + 109;\n
        v3[8] = (a0 >> 16) + 49;\n
        v4 = ((a0 >> 32) - 1 < 4 ? 0 : (1903321707 >> ((a0 / 0x100000000 - 1) * 8 & 31)));\n
        v3[9] = v4;\n
        v3[10] = 0;\n
        cgc_strcat(v3, \"\\n
\");\n
        cgc_strlen(v3);\n
        cgc_transmit(v3, \"\\n
\", v5, *(&v4));\n
        v3 = cgc_free(v3);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4224923:sub_40779b": null, "4224928:cgc_send_result": "long long cgc_send_result(unsigned long a0)\n
{\n
    unsigned long v1;  // rbx\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rax\n
\n
    switch (a0)\n
    {\n
    case 0:\n
        v1 = \"1-0\\n
\";\n
        break;\n
    case 1:\n
        v1 = \"0-1\\n
\";\n
        break;\n
    case 2:\n
        v1 = \"1/2-1/2\\n
\";\n
        break;\n
    case 3:\n
        v1 = \"*\\n
\";\n
        break;\n
    default:\n
        return v5;\n
    }\n
    cgc_strlen(v1);\n
    v5 = cgc_transmit(v1, v2, v3, v4);\n
    return v5;\n
}\n
", "4225025:sub_407801": null, "4225040:cgc_send_draw": "long long cgc_send_draw()\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    cgc_strlen(\"offer draw\\n
\");\n
    return cgc_transmit(\"offer draw\\n
\", v1, v2, v3);\n
}\n
", "4225087:sub_40783f": null, "4225088:cgc_send_resign": "long long cgc_send_resign()\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    cgc_strlen(\"resign\\n
\");\n
    return cgc_transmit(\"resign\\n
\", v1, v2, v3);\n
}\n
", "4225135:sub_40786f": null, "4225136:cgc_send_illegal": "long long cgc_send_illegal(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1f]\n
    char v2;  // [bp-0x1e]\n
    char v3;  // [bp-0x1d]\n
    char v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x1b]\n
    char v8;  // sil\n
    char v9;  // al\n
    char v10;  // cl\n
    unsigned long long v11;  // rdx\n
\n
    v0 = (a1 >> 8) + 109;\n
    v1 = a1 + 49;\n
    v2 = (a1 >> 24) + 109;\n
    v8 = a1 / 0x10000;\n
    v9 = a1 / 0x100000000 - 1;\n
    v3 = v8 + 49;\n
    v10 = (v9 < 4 ? 0 : (1903321707 >> (v9 * 8 & 31)));\n
    v4 = v10;\n
    v5 = 0;\n
    cgc_strlen(\"Illegal move (\");\n
    cgc_transmit(\"Illegal move (\", *(&v8), v11, *(&v10));\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, *(&v8), v11, *(&v10));\n
    cgc_strlen(\"): \");\n
    cgc_transmit(\"): \", *(&v8), v11, *(&v10));\n
    cgc_strlen(&v0);\n
    cgc_transmit(\"): \", *(&v8), v11, *(&v10));\n
    cgc_strlen(\"\\n
\");\n
    return cgc_transmit(\"\\n
\", *(&v8), v11, *(&v10));\n
}\n
", "4225415:sub_407987": null, "4225424:cgc_send_error": "long long cgc_send_error(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rdx\n
    unsigned long long v2;  // rcx\n
\n
    cgc_strlen(\"Error (\");\n
    cgc_transmit(\"Error (\", a1, v1, v2);\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, a1, v1, v2);\n
    cgc_strlen(\"): \");\n
    cgc_transmit(\"): \", a1, v1, v2);\n
    cgc_strlen(a1);\n
    cgc_transmit(a1, a1, v1, v2);\n
    cgc_strlen(\"\\n
\");\n
    return cgc_transmit(\"\\n
\", a1, v1, v2);\n
}\n
", "4225615:sub_407a4f": null, "4225616:cgc_sink_error": "long long cgc_sink_error(unsigned long a0)\n
{\n
    int tmp_23;  // tmp #23\n
    char v0;  // [bp-0x2a]\n
    char v1;  // [bp-0x29]\n
    char v2;  // [bp-0x28]\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // rax\n
    unsigned long v10;  // rbx, Other Possible Types: unsigned long long\n
\n
    v4 = cgc_strlen(a0);\n
    cgc_strlen(\"Error (invalid command): \");\n
    cgc_transmit(\"Error (invalid command): \", v6, v7, v8);\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v6, v7, v8);\n
    if (v4 && *((v4 + a0 - 1)) == 10)\n
        return 1;\n
    v1 = 0;\n
    v10 = 1;\n
    do\n
    {\n
        while (true)\n
        {\n
            if (v10)\n
            {\n
                tmp_23 = cgc_receive(a0, v6, v7, v8);\n
                v9 = *(&v2);\n
                v10 -= v9;\n
                if ((!v9 | tmp_23) == 1)\n
                    break;\n
            }\n
            else\n
            {\n
                cgc_strlen(&v0);\n
                cgc_transmit(a0, v6, v7, v8);\n
                v10 = 1;\n
                if (v0 == 10)\n
                    return 1;\n
            }\n
        }\n
    } while (v9);\n
    return 0;\n
}\n
", "4225742:sub_407ace": null, "4225855:sub_407b3f": null, "4225856:cgc_read_keyword": "extern char input_states;\n
\n
long long cgc_read_keyword(char a0[2], char *a1)\n
{\n
    int tmp_23;  // tmp #23\n
    char v2;  // [bp-0x38]\n
    char v4[2];  // r13\n
    unsigned long v5;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rax\n
    char v8[2];  // rax\n
    unsigned long long v15;  // r15\n
\n
    v4 = a0;\n
    cgc_memset(a0, 0, a1);\n
    v5 = 2;\n
    while (v5)\n
    {\n
        tmp_23 = cgc_receive(a0, 0, a1, v6);\n
        v7 = *(&v2);\n
        v5 -= v7;\n
        if ((!v7 | tmp_23) == 1 && !v7)\n
            return 0;\n
    }\n
    v15 = (&input_states)[v4[1] | v4[0] * 128];\n
    if (v15 == 1)\n
        return cgc_sink_error(v4);\n
    if (v15 == 52)\n
        return 52;\n
    v8 = 2;\n
    if (a1 + 1 < 3)\n
        goto LABEL_0x407f83;\n
    else\n
        goto LABEL_0x407bf2;\n
}\n
", "4227004:sub_407fbc": null, "4227008:cgc_str_to_move": "long long cgc_str_to_move(char a0[5])\n
{\n
    unsigned long long v6;  // rdi\n
    unsigned long v7;  // r8\n
\n
    v6 = a0[4] - 98;\n
    switch (v6)\n
    {\n
    case 0:\n
        v7 = 0x200000000;\n
        break;\n
    case 9:\n
        break;\n
    case 15:\n
        v7 = 0x400000000;\n
        break;\n
    case 16:\n
        v7 = 0x300000000;\n
        break;\n
    default:\n
        v7 = 0;\n
        break;\n
    }\n
    return a0[1] - 49 | (a0[0] - 109) * 0x100 | (a0[3] - 49) * 0x10000 | (a0[2] - 109) * 0x1000000 | v7;\n
}\n
", "4227147:sub_40804b": null, "4227152:main": "extern unsigned int g_4095b6;\n
extern unsigned int g_4096d4;\n
extern char g_4096d9;\n
extern char g_4096dd;\n
extern char g_4096e1;\n
extern char g_4096e9;\n
extern unsigned int g_4096eb;\n
\n
int main()\n
{\n
    char v16;  // [bp-0x48]\n
    unsigned long long v19;  // rax\n
\n
    if (!cgc_engine_init())\n
        return 1;\n
    cgc_init_states();\n
    v19 = cgc_read_keyword(&v16, 0x10);\n
}\n
", "4228655:sub_40862f": null, "4228904:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_random": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}