{"4206592:_init": "extern struct_0 *g_40a610;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a610;\n
    if (g_40a610)\n
        v1 = g_40a610();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40a630;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a630;\n
    goto *(4236856);\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4206656:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206672:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4206688:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206704:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206720:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4206736:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206752:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4206768:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206784:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4236832);\n
}\n
", "4206800:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206837:sub_4030f5": null, "4206838:sub_4030f6": null, "4206848:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a608;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206889:sub_403129": null, "4206896:register_tm_clones": "extern unsigned long long g_40a618;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206953:sub_403169": null, "4206960:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40a620;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a620)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207013:sub_4031a5": null, "4207017:sub_4031a9": null, "4207024:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207033:sub_4031b9": null, "4207040:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4207188:sub_403254": null, "4207200:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4207324:sub_4032dc": null, "4207328:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4207456:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4207518:sub_40339e": null, "4207520:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4207745:sub_403481": null, "4207760:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 = v4 >> 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4207967:sub_40355f": null, "4207968:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40385c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40385c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4208748:sub_40386c": null, "4208752:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    struct struct_1 **v0;  // [bp-0x120], Other Possible Types: unsigned long\n
    struct_2 *v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x10c]\n
    unsigned long long *v3;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v4;  // [bp-0x100]\n
    unsigned int *v5;  // [bp-0xf8]\n
    unsigned int v6;  // [bp-0xec]\n
    unsigned int *v7;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v8;  // [bp-0xe0]\n
    unsigned int v9;  // [bp-0xd4]\n
    unsigned int *v10;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v11;  // [bp-0xc8]\n
    unsigned int v12;  // [bp-0xbc]\n
    unsigned int *v13;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_2 *v14;  // [bp-0xb0]\n
    unsigned int v15;  // [bp-0xa8]\n
    unsigned int v16;  // [bp-0xa4]\n
    char *v17;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_0 *v18;  // [bp-0x98], Other Possible Types: unsigned long\n
    unsigned long v19;  // [bp-0x90]\n
    struct_0 *v20;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned int v21;  // [bp-0x7c]\n
    struct_0 *v22;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v23;  // [bp-0x70]\n
    char v24;  // [bp-0x69]\n
    char v25;  // [bp-0x68]\n
    unsigned int v26;  // [bp-0x24]\n
    char *v27;  // [bp-0x18]\n
    unsigned int v28;  // [bp-0xc]\n
    struct_2 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    unsigned int *v32;  // rax\n
    struct_2 *v33;  // rcx\n
    unsigned int *v34;  // rdx\n
    struct_2 *v35;  // rcx\n
    unsigned long long v36;  // rdx\n
    unsigned int *v37;  // rax\n
    struct_2 *v38;  // rcx\n
    unsigned int *v39;  // rdx\n
    unsigned long long v40;  // rdx\n
    unsigned long long *v41;  // rax\n
    struct_2 *v42;  // rcx\n
    unsigned long long *v43;  // rdx\n
    struct_2 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    struct struct_1 **v46;  // rax\n
    struct_2 *v47;  // rcx\n
    struct struct_1 **v48;  // rdx\n
    struct_2 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned int *v51;  // rax\n
    struct_2 *v52;  // rcx\n
    unsigned int *v53;  // rdx\n
\n
    v27 = a0;\n
    v26 = 0;\n
    if (!v27)\n
    {\n
        v28 = -1;\n
        return v28;\n
    }\n
    while (true)\n
    {\n
        if (!*(v27))\n
        {\n
            v28 = v26;\n
            return v28;\n
        }\n
        else if (*(v27) != 64)\n
        {\n
            cgc_putc(*(v27));\n
            v27 += 1;\n
            v26 += 1;\n
        }\n
        else\n
        {\n
            v27 += 1;\n
            v16 = *(v27);\n
            if (!v16)\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            if (v16 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v16 == 99)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v33 = v14;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[2];\n
                    v13 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v14;\n
                    v31 = v15;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v13 = v32;\n
                }\n
                v24 = *(v13);\n
                cgc_putc(v24);\n
                v26 += 1;\n
            }\n
            else if (v16 == 100)\n
            {\n
                v11 = a1;\n
                v12 = v11->field_0;\n
                if (v12 <= 40)\n
                {\n
                    v35 = v11;\n
                    v36 = v12;\n
                    v37 = v36 + v35->field_10;\n
                    v35->field_0 = v36 + 8;\n
                    v10 = v37;\n
                }\n
                else\n
                {\n
                    v38 = v11;\n
                    v39 = v38->field_8;\n
                    v38->field_8 = &v39[2];\n
                    v10 = v39;\n
                }\n
                v23 = *(v10);\n
                cgc_int_to_str(v23, &v25);\n
                for (v22 = &v25; v22->field_0; v22 += 1)\n
                {\n
                    cgc_putc(v22->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 <= 160)\n
                {\n
                    v40 = v6;\n
                    v41 = v40 + v4->field_10;\n
                    *(v5) = v40 + 16;\n
                    v3 = v41;\n
                }\n
                else\n
                {\n
                    v42 = v4;\n
                    v43 = v42->field_8;\n
                    v42->field_8 = &v43[1];\n
                    v3 = v43;\n
                }\n
                v19 = *(v3);\n
                cgc_float_to_str(&v25);\n
                for (v18 = &v25; v18->field_0; v18 += 1)\n
                {\n
                    cgc_putc(v18->field_0);\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v47 = v1;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v0 = v48;\n
                }\n
                else\n
                {\n
                    v44 = v1;\n
                    v45 = v2;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v0 = v46;\n
                }\n
                for (v17 = *(v0); *(v17); v17 += 1)\n
                {\n
                    cgc_putc(*(v17));\n
                    v26 += 1;\n
                }\n
            }\n
            else if (v16 == 120)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 > 40)\n
                {\n
                    v52 = v8;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[2];\n
                    v7 = v53;\n
                }\n
                else\n
                {\n
                    v49 = v8;\n
                    v50 = v9;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v7 = v51;\n
                }\n
                v21 = *(v7);\n
                cgc_int_to_hex(v21, &v25);\n
                for (v20 = &v25; *(v20); v20 += 1)\n
                {\n
                    cgc_putc(*(v20));\n
                    v26 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v28 = -1;\n
                return v28;\n
            }\n
            v27 += 1;\n
        }\n
    }\n
}\n
", "4210010:sub_403d5a": null, "4210016:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4210176:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4210313:sub_403e89": null, "4210320:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long long v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4210496:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4210608:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return v0;\n
}\n
", "4210691:sub_404003": null, "4210704:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210755:sub_404043": null, "4210768:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210819:sub_404083": null, "4210832:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4210875:sub_4040bb": null, "4210880:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4210923:sub_4040eb": null, "4210928:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210979:sub_404123": null, "4210992:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4211083:sub_40418b": null, "4211088:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4211116:sub_4041ac": null, "4211120:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4211172:sub_4041e4": null, "4211184:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_4043d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_4043d9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_4043d9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_404349:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_4043d9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_404349;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_4043d9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4211741:sub_40441d": null, "4211744:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4212136:sub_4045a8": null, "4212144:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4212247:sub_404617": null, "4212256:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4212429:sub_4046cd": null, "4212432:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212550:sub_404746": null, "4212560:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4212648:sub_4047a8": null, "4212656:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4212774:sub_404826": null, "4212784:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4212993:sub_404901": null, "4213008:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4213091:sub_404963": null, "4213104:cgc_receive_fixed_input": "long long cgc_receive_fixed_input(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
            v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 == a1)\n
        {\n
            return v2;\n
        }\n
        else if (v2 < a2)\n
        {\n
            v2[a0] = v0;\n
            v2 += 1;\n
        }\n
    }\n
}\n
", "4213290:sub_404a2a": null, "4213296:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        *((a0 + v2)) = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4213473:sub_404ae1": null, "4213488:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4213650:sub_404b92": null, "4213664:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4213896:sub_404c88": null, "4213904:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4213986:sub_404ce2": null, "4214000:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4214116:sub_404d64": null, "4214128:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4214838:sub_405036": null, "4214848:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4214931:sub_405093": null, "4214944:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4215093:sub_405135": null, "4215104:cgc_is_an_ace": "long long cgc_is_an_ace(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 1;\n
    if (a0 != 13)\n
    {\n
        v0 = 1;\n
        if (a0 != 26)\n
        {\n
            v0 = 1;\n
            if (a0 != 39)\n
                v0 = a0 == 52;\n
        }\n
    }\n
    return v0 & 1;\n
}\n
", "4215191:sub_405197": null, "4215200:cgc_hand_total": "extern unsigned int bj_value;\n
\n
long long cgc_hand_total(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = a2;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
        if (cgc_is_an_ace(a0[v2]))\n
            break;\n
        v3 = (&bj_value)[a0[v2]] + v3;\n
        v2 += 1;\n
    }\n
    v2 += 1;\n
    v1 = cgc_hand_total(&a0[v2], a1 - v2, v3 + 11);\n
    v0 = cgc_hand_total(&a0[v2], a1 - v2, v3 + 1);\n
    if (v1 <= 21)\n
    {\n
        v4 = v1;\n
        return v4;\n
    }\n
    v4 = v0;\n
    return v4;\n
}\n
", "4215442:sub_405292": null, "4215456:cgc_blackjack": "extern char card_names;\n
extern unsigned int g_40a87c;\n
extern unsigned int g_40a880;\n
extern unsigned int g_40a884;\n
\n
long long cgc_blackjack(unsigned int a0[13], unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    int tmp_9;  // tmp #9\n
    unsigned int v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    unsigned int v2;  // [bp-0xac]\n
    unsigned int v3;  // [bp-0xa8]\n
    char v4;  // [bp-0xa1]\n
    char v5;  // [bp-0xa0]\n
    char v6;  // [bp-0x68]\n
    char v7;  // [bp-0x26]\n
    char v8;  // [bp-0x25]\n
    char v9;  // [bp-0x1b]\n
    char v10;  // [bp-0x1a]\n
    unsigned int v11[13];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v13[13];  // rax\n
    unsigned int v14[13];  // rax\n
    unsigned int *v15;  // rcx\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rsi, Other Possible Types: unsigned long long\n
    void* v18;  // rdx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v19;  // rax\n
    unsigned long v20;  // rax\n
    unsigned long long v21;  // rax\n
    unsigned long v22;  // rax\n
    unsigned int v23[13];  // rax, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v24;  // rax\n
    unsigned long v25;  // rax\n
\n
    *(&v11[0]) = a0;\n
    cgc_bzero(&v9, 11);\n
    cgc_bzero(&v7, 11);\n
    if (!v11)\n
        v11 = &v6;\n
    cgc_shuffle(&v5);\n
    v13 = v11;\n
    v13[9] = v13[9] + 50;\n
    if (*((v11 + 48)) >= 10)\n
    {\n
        v14 = v11;\n
        v14[12] = v14[12] - 10;\n
    }\n
    v9 = cgc_draw(&v5);\n
    v7 = cgc_draw(&v5);\n
    v10 = cgc_draw(&v5);\n
    v8 = cgc_draw(&v5);\n
    v15 = v8;\n
    cgc_printf(\"D: * @s \\n
\", *((&card_names + 0x8 * v15)), a2, v15, a4);\n
    v16 = v10;\n
    cgc_printf(\"P: @s @s \\n
\", *(&(&card_names)[8 * v9]), *(&(&card_names)[8 * v16]), v16, a4);\n
    if (cgc_hand_total(&v7, 11, 0) != 21)\n
    {\n
        v17 = 11;\n
        v18 = 0;\n
        if (cgc_hand_total(&v9, 11, 0) == 21)\n
        {\n
            cgc_printf(\"Blackjack! You Win!\\n
\", 11, 0, v16, a4);\n
            v23 = v11;\n
            *((v23 + 48)) = g_40a880 + *((v23 + 48));\n
            return v11;\n
        }\n
        v4 = 0;\n
        v3 = 2;\n
        do\n
        {\n
            cgc_printf(\"Enter h for hit or s for stand:\", v17, v18, v16, a4);\n
            v17 = 10;\n
            v18 = 1;\n
            cgc_receive_fixed_input(&v4, 10, 1);\n
            if (v4 == 104)\n
            {\n
                v19 = cgc_draw(&v5);\n
                tmp_9 = v19;\n
                *(&v16) = v19;\n
                v20 = v3;\n
                v3 = v20 + 1;\n
                (&v9)[v20] = tmp_9;\n
                cgc_printf(\"P: \", 10, v3, v16, a4);\n
                cgc_print_hand(&v9, 11);\n
                v17 = 11;\n
                v18 = 0;\n
                if (cgc_hand_total(&v9, 11, 0) > 21)\n
                {\n
                    cgc_printf(\"Bust\\n
\", 11, 0, v16, a4);\n
                    break;\n
                }\n
            }\n
        } while (v4 != 115);\n
        v3 = 2;\n
        cgc_printf(\"D: \", v17, v18, v16, a4);\n
        while (true)\n
        {\n
            cgc_print_hand(&v7, 11);\n
            if (cgc_hand_total(&v7, 11, 0) >= 17)\n
                break;\n
            v21 = cgc_draw(&v5);\n
            tmp_9 = v21;\n
            *(&v16) = v21;\n
            v22 = v3;\n
            v3 = v22 + 1;\n
            (&v7)[v22] = tmp_9;\n
            cgc_printf(\"D: \", 11, v3, v16, a4);\n
        }\n
        v2 = cgc_hand_total(&v9, 11, 0);\n
        cgc_printf(\"P:@d D:@d\\n
\", v2, cgc_hand_total(&v7, 11, 0), v16, a4);\n
        if (cgc_hand_total(&v9, 11, 0) > 21)\n
        {\n
            v23 = cgc_printf(\"Player Bust. You Lose.\\n
\", 11, 0, v16, a4);\n
            return v23;\n
        }\n
        if (cgc_hand_total(&v7, 11, 0) <= 21)\n
        {\n
            v1 = cgc_hand_total(&v9, 11, 0);\n
            v24 = cgc_hand_total(&v7, 11, 0);\n
            if (v1 <= v24)\n
            {\n
                v0 = cgc_hand_total(&v9, 11, 0);\n
                v25 = cgc_hand_total(&v7, 11, 0);\n
                if (v0 != v25)\n
                {\n
                    v23 = cgc_printf(\"You Lose.\\n
\", 11, 0, v25, a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(\"Push.\\n
\", 11, 0, v25, a4);\n
                    v23 = v11;\n
                    v23[12] = g_40a87c + v23[12];\n
                }\n
            }\n
            else\n
            {\n
                cgc_printf(\"You Win.\\n
\", 11, 0, v24, a4);\n
                v23 = v11;\n
                v23[12] = g_40a884 + v23[12];\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(\"Dealer Bust. You Win.\\n
\", 11, 0, v16, a4);\n
            v23 = v11;\n
            v23[12] = g_40a884 + v23[12];\n
        }\n
        return v23;\n
    }\n
    else if (cgc_hand_total(&v9, 11, 0) == 21)\n
    {\n
        cgc_printf(\"Dealer Blackjack! Player Blackjack! You Tie :/\\n
\", 11, 0, v16, a4);\n
        v23 = v11;\n
        *((v23 + 48)) = g_40a87c + *((v23 + 48));\n
        return v11;\n
    }\n
    else\n
    {\n
        v23 = cgc_printf(\"Dealer Blackjack! You Lose!\\n
\", 11, 0, v16, a4);\n
        return v23;\n
    }\n
}\n
", "4216612:sub_405724": null, "4216624:cgc_lookup_by_number": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[52];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
long long cgc_lookup_by_number(unsigned long a0, struct_0 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a1;\n
    while (true)\n
    {\n
        if (!v0)\n
            return v0;\n
        if (v0->field_0 == a0)\n
            return v0;\n
        v0 = v0->field_38;\n
    }\n
}\n
", "4216697:sub_405779": null, "4216704:cgc_login_player_by_number": "long long cgc_login_player_by_number(void* a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
\n
    cgc_printf(\"Enter Player Number:\", a1, a2, a3, a4);\n
    memset(&v2, 0, 12);\n
    cgc_receive_fixed_input(&v2, 10, 11);\n
    v1 = cgc_atoi(&v2);\n
    v0 = cgc_lookup_by_number(v1, a0);\n
    if (v0)\n
    {\n
        cgc_printf(\"Hello, @s!\\n
\", v0 + 4, 11, a3, a4);\n
        return v0;\n
    }\n
    cgc_printf(\"Player not found\\n
\", a1, 11, a3, a4);\n
    return v0;\n
}\n
", "4216855:sub_405817": null, "4216864:cgc_print_player_info": "long long cgc_print_player_info(unsigned int a0[13], unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (!a0)\n
    {\n
        v1 = cgc_printf(\"Player does not exist\\n
\", a1, a2, a3, a4);\n
        return v1;\n
    }\n
    cgc_printf(\"Player Name: @s\\n
\", &a0[1], a2, a3, a4);\n
    cgc_printf(\"Player Number: @d\\n
\", a0[0], a2, a3, a4);\n
    cgc_printf(\"Blackjack Score: @d\\n
\", a0[9], a2, a3, a4);\n
    cgc_printf(\"Poker Score: @d\\n
\", a0[10], a2, a3, a4);\n
    cgc_printf(\"Slots Score: @d\\n
\", a0[11], a2, a3, a4);\n
    cgc_printf(\"Player Wallet Balance: @d\\n
\", a0[12], a2, a3, a4);\n
    v1 = cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    return v1;\n
}\n
", "4217052:sub_4058dc": null, "4217056:cgc_register_player": "long long cgc_register_player(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x2c]\n
    unsigned int *v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rax\n
\n
    if (cgc_allocate(a0, a1, a2))\n
    {\n
        cgc_printf(\"Error allocating memory for new player\\n
\", a1, a2, a3, a4);\n
        v2 = a0;\n
        return v2;\n
    }\n
    cgc_memset(v1, 0, 0x40);\n
    do\n
    {\n
        *(v1) = cgc_prng() & 2147483647;\n
    } while (cgc_lookup_by_number(*(v1), a0));\n
    cgc_printf(\"Enter your name:\", a0, 64, a3, a4);\n
    cgc_receive_fixed_input(v1 + 1, 10, 31);\n
    cgc_printf(\"How much cash do you want to spend?:\", 10, 31, a3, a4);\n
    memset(&v0, 0, 12);\n
    cgc_receive_fixed_input(&v0, 10, 11);\n
    v4 = cgc_atoi(&v0);\n
    v1[12] = v4;\n
    if (v1[12] <= 1000 && !(v1[12] < 0))\n
        goto LABEL_4059f0;\n
    v1[12] = 1000;\n
LABEL_4059f0:\n
    cgc_print_player_info(v1, 10, 11, v4, a4);\n
    *(&v1[14]) = a0;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4217367:sub_405a17": null, "4217376:cgc_print_all_players": "typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
long long cgc_print_all_players(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; v0; v0 = *((v0 + 56)))\n
    {\n
        cgc_print_player_info(v0, a1, a2, a3, a4);\n
    }\n
    return *((v0 + 56));\n
}\n
", "4217431:sub_405a57": null, "4217440:cgc_lookup": "long long cgc_lookup(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0xc]\n
\n
    v0 = a0 - 33;\n
    if (v0 > 93)\n
    {\n
        cgc__terminate(a0);\n
        return *(&v1);\n
    }\n
    goto *((4227776 + (stack_base)[24] * 4)) + 4227776;\n
}\n
", "4217707:sub_405b6b": null, "4217712:cgc_decode": "long long cgc_decode(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28]\n
    char *v4;  // rax\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v2 = a0;\n
    for (v1 = a1; v2 < &a0[a2]; *(v6) = v0)\n
    {\n
        if (*(v2) == 96)\n
        {\n
            v2 += 1;\n
            v0 = 0;\n
        }\n
        else\n
        {\n
            v4 = v2;\n
            v2 = v4 + 1;\n
            v0 = cgc_lookup(*(v4));\n
            v5 = v2;\n
            v2 = v5 + 1;\n
            v0 = cgc_lookup(*(v5)) * 16 | v0;\n
        }\n
        v6 = v1;\n
        v1 = v6 + 1;\n
    }\n
    return v2;\n
}\n
", "4217898:sub_405c2a": null, "4217904:cgc_programming_interface": "extern char cgc_payouts;\n
\n
long long cgc_programming_interface()\n
{\n
    char v0;  // [bp-0xa8]\n
    unsigned long v1;  // [bp-0x38], Other Possible Types: unsigned long long\n
    unsigned int v2;  // [bp-0x2c]\n
    char v3;  // [bp-0x28]\n
    char v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long long v8;  // rdi\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
\n
    v6 = cgc_receive(v8, v9, v10, v11);\n
    if (!v6 && !(!*(&v5)))\n
        goto LABEL_405c71;\n
    cgc__terminate(v8);\n
LABEL_405c71:\n
    if (*(&v4) > 0 && *(&v4) <= 112)\n
        goto LABEL_405c93;\n
    cgc__terminate(v8);\n
LABEL_405c93:\n
    v6 = cgc_allocate(v8, v9, v10);\n
    if (!v6 && !(!*(&v3)))\n
        goto LABEL_405cc7;\n
    cgc__terminate(v8);\n
LABEL_405cc7:\n
    v2 = 0;\n
    for (v1 = *(&v3); v2 < *(&v4); v1 = *(&v5) + v1)\n
    {\n
        v6 = cgc_receive(v8, v9, v10, v11);\n
        if (v6)\n
            cgc__terminate(v8);\n
        v2 += *(&v5);\n
    }\n
    cgc_decode(*(&v3), &v0, *(&v4));\n
    cgc_memcpy(&cgc_payouts, &v0, 56);\n
    return cgc_deallocate(&cgc_payouts, v9);\n
}\n
", "4218226:sub_405d72": null, "4218240:main": "extern unsigned int g_408438;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0xc9]\n
    unsigned long v1;  // [bp-0xc8]\n
    char v2;  // [bp-0xb9]\n
    unsigned long v3;  // [bp-0xb8]\n
    char v4;  // [bp-0xa9]\n
    void* v5;  // [bp-0xa8], Other Possible Types: unsigned long\n
    unsigned int v6[13];  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x90], Other Possible Types: unsigned long\n
    char v9;  // [bp-0x88]\n
    unsigned int v10;  // [bp-0x7c]\n
    char v11;  // [bp-0x78]\n
    unsigned long v12;  // [bp-0x18]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned long long v16;  // rax\n
    unsigned long long v18;  // rax\n
\n
    v14 = 0;\n
    v13 = a0;\n
    v12 = a1;\n
    cgc_printf(\"Enter your name:\", a1, a2, a3, a4);\n
    v10 = cgc_receive(\"Enter your name:\", a1, a2, a3);\n
    if (!v10 && !(!*(&v9)))\n
        goto LABEL_405ddd;\n
    cgc__terminate(\"Enter your name:\");\n
LABEL_405ddd:\n
    (&v11)[*(&v9)] = 0;\n
    if (*(&v16 + cgc_strlen(&v11)) == 10)\n
        *(&v16 + cgc_strlen(&v11)) = 0;\n
    cgc_printf(\"Hello, @s!\\n
\", &v11, a2, a3, a4);\n
    v8 = 0;\n
    v7 = 0;\n
    while (true)\n
    {\n
        v3 = v7;\n
        if (v3 >= cgc_strlen(&v11))\n
            break;\n
        v8 = v8 * 0x100 | v8 >> 56 ^ (&v11)[v7];\n
        v7 += 1;\n
    }\n
    cgc_sprng(v8);\n
    if (v8 == 7233398034581030482)\n
    {\n
        cgc_printf(\"Access Granted\\n
\", a1, a2, a3, a4);\n
        cgc_programming_interface();\n
    }\n
    *(&v6[0]) = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v2 = 1;\n
        if (v6)\n
            v2 = *((v6 + 48)) <= 5000;\n
        if (!(v2 & 1))\n
        {\n
            cgc_printf(\"You broke the bank!\\n
\", 10, 1, a3, a4);\n
            break;\n
        }\n
        else\n
        {\n
            v0 = 0;\n
            cgc_printf(\"\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"1. Play Blackjack\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"2. Play Poker\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"3. Play Slots\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"4. Enter a Players Club Number\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"5. Register a new Player\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"6. Show Player Status\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"7. Show All Players\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"8. Exit\\n
\", 10, 1, a3, a4);\n
            cgc_printf(\"Select a number:\", 10, 1, a3, a4);\n
            a1 = 10;\n
            a2 = 1;\n
            cgc_receive_fixed_input(&v4, 10, 1);\n
            v18 = v4 - 49;\n
            a3 = v18;\n
            v1 = v18;\n
            switch (v18)\n
            {\n
            case 0:\n
                cgc_printf(\"Play Blackjack\\n
\", 10, 1, &g_408438, a4);\n
                cgc_blackjack(v6, 10, 1, &g_408438, a4);\n
                goto LABEL_4061e4;\n
            case 1:\n
                cgc_printf(\"Play Poker\\n
\", 10, 1, &g_408438, a4);\n
                cgc_poker(v6);\n
                goto LABEL_4061e4;\n
            case 2:\n
                cgc_printf(\"Play Slots\\n
\", 10, 1, &g_408438, a4);\n
                cgc_slots(v6);\n
                goto LABEL_4061e4;\n
            case 3:\n
                *(&v6[0]) = cgc_login_player_by_number(v5, 10, 1, 4228152, a4);\n
                goto LABEL_4061e4;\n
            case 4:\n
                cgc_printf(\"Register a new Player\\n
\", 10, 1, &g_408438, a4);\n
                v5 = cgc_register_player(v5, 10, 1, 4228152, a4);\n
                goto LABEL_4061e4;\n
            case 5:\n
                cgc_print_player_info(v6, 10, 1, 4228152, a4);\n
                goto LABEL_4061e4;\n
            case 6:\n
                cgc_printf(\"Show All Players\\n
\", 10, 1, &g_408438, a4);\n
                cgc_print_all_players(v5, 10, 1, &g_408438, a4);\n
                goto LABEL_4061e4;\n
            case 7:\n
                cgc_printf(\"you don't really want to leave do you?\\n
\", 10, 1, &g_408438, a4);\n
                a1 = 10;\n
                a2 = 1;\n
                cgc_receive_fixed_input(&v4, 10, 1);\n
                if (v4 == 121)\n
                {\n
                    if (!v6)\n
                    {\n
                        cgc_printf(\"Goodbye, stranger\\n
\", 10, 1, &g_408438, a4);\n
                        cgc__terminate(\"Goodbye, stranger\\n
\");\n
                    }\n
                    if (!*((v6 + 36)))\n
                    {\n
                        cgc_printf(\"But you didn't even play blackjack :(\\n
\", 10, 1, &g_408438, a4);\n
                        cgc__terminate(\"But you didn't even play blackjack :(\\n
\");\n
                    }\n
                    if (!*((v6 + 40)))\n
                    {\n
                        cgc_printf(\"But you didn't even play poker :(\\n
\", 10, 1, &g_408438, a4);\n
                        cgc__terminate(\"But you didn't even play poker :(\\n
\");\n
                    }\n
                    if (!*((v6 + 44)))\n
                    {\n
                        cgc_printf(\"But you didn't even play slots :(\\n
\", 10, 1, &g_408438, a4);\n
                        cgc__terminate(\"But you didn't even play slots :(\\n
\");\n
                    }\n
                    cgc_printf(\"Okay, you've had enough ;)\\n
\", 10, 1, &g_408438, a4);\n
                    break;\n
                }\n
            default:\n
LABEL_4061e4:\n
                continue;\n
            }\n
        }\n
    }\n
    cgc_printf(\"Goodbye\\n
\", a1, a2, a3, a4);\n
    return v14;\n
}\n
", "4219409:sub_406211": null, "4219424:cgc_shuffle": "long long cgc_shuffle(char a0[53])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    for (v1 = 0; v1 < 52; v1 += 1)\n
    {\n
        v0 = cgc_random_in_range(0, v1);\n
        a0[v1] = a0[v0];\n
        a0[v0] = v1 + 1;\n
    }\n
    a0[52] = 0;\n
    return a0;\n
}\n
", "4219535:sub_40628f": null, "4219536:cgc_print_deck": "extern char card_names;\n
\n
long long cgc_print_deck(char a0[53], unsigned int a1, unsigned int a2, unsigned int *a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    cgc_printf(\"deck: \", a1, a2, a3, a4);\n
    for (v0 = 0; v0 < 52; v0 += 1)\n
    {\n
        a3 = a0[v0];\n
        cgc_printf(\"@s \", *(&(&card_names)[8 * a3]), a2, a3, a4);\n
    }\n
    return cgc_printf(\"\\n
top: @d\\n
\", a0[52], a2, a3, a4);\n
}\n
", "4219659:sub_40630b": null, "4219664:cgc_print_hand": "extern char card_names;\n
\n
long long cgc_print_hand(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        a3 = v0;\n
        if (a3[a0] > 0)\n
        {\n
            a3 = v0;\n
            if (*((a0 + a3)) < 53)\n
            {\n
                a3 = *((a0 + v0));\n
                cgc_printf(\"@s \", *((&card_names + 0x8 * a3)), a2, a3, a4);\n
            }\n
        }\n
    }\n
    return cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
}\n
", "4219820:sub_4063ac": null, "4219824:cgc_draw": "long long cgc_draw(char a0[53], unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[53];  // [bp-0x10]\n
    char v2[53];  // rax\n
\n
    *(&v0[0]) = a0;\n
    if (cgc_is_empty(a0))\n
    {\n
        cgc_printf(\"Error: Drawing from an empty deck!\\n
\", a1, a2, a3, a4);\n
        cgc__terminate(\"Error: Drawing from an empty deck!\\n
\");\n
    }\n
    v2 = a0;\n
    v2[52] = v2[52] + 1;\n
    return v0[1 + a0[52]];\n
}\n
", "4219920:cgc_is_empty": "typedef struct struct_0 {\n
    char padding_0[52];\n
    char field_34;\n
} struct_0;\n
\n
long long cgc_is_empty(struct_0 *a0)\n
{\n
    return 52 <= a0->field_34;\n
}\n
", "4219949:sub_40642d": null, "4219952:cgc_get_suit": "long long cgc_get_suit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 > 0 && a0 <= 53)\n
    {\n
        if (a0 < 14)\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else if (a0 < 27)\n
        {\n
            v0 = 2;\n
            return v0;\n
        }\n
        else if (a0 >= 40)\n
        {\n
            v0 = 4;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 3;\n
            return v0;\n
        }\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4220087:sub_4064b7": null, "4220096:cgc_sort_by_suit": "long long cgc_sort_by_suit(char *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x22]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
\n
    for (v3 = 1; v3 < a1; v3 += 1)\n
    {\n
        v2 = v3;\n
        v1 = a0[v2];\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v2 > 0)\n
                v0 = a0[v2] < a0[1 + v2];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v2] = a0[1 + v2];\n
            v2 -= 1;\n
            a0[v2] = v1;\n
        }\n
    }\n
    return v3;\n
}\n
", "4220293:sub_406585": null, "4220304:cgc_sort_by_value": "extern unsigned int poker_value;\n
\n
long long cgc_sort_by_value(char *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x22]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
\n
    for (v3 = 1; v3 < a1; v3 += 1)\n
    {\n
        v2 = v3;\n
        v1 = a0[v2];\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v2 > 0)\n
                v0 = (&poker_value)[a0[v2]] < (&poker_value)[a0[1 + v2]];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v2] = a0[1 + v2];\n
            v2 -= 1;\n
            a0[v2] = v1;\n
        }\n
    }\n
    return v3;\n
}\n
", "4220521:sub_406669": null, "4220528:cgc_count_cards": "extern unsigned int poker_value[4];\n
\n
long long cgc_count_cards(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
\n
    v1 = 0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (poker_value[a0[v0]] == poker_value[a2])\n
            v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4220650:sub_4066ea": null, "4220656:cgc_poker": "extern unsigned int g_40a858;\n
extern unsigned int g_40a85c;\n
extern unsigned int g_40a860;\n
extern unsigned int g_40a864;\n
extern unsigned int g_40a868;\n
extern unsigned int g_40a86c;\n
extern unsigned int g_40a870;\n
extern unsigned int g_40a874;\n
extern unsigned int g_40a878;\n
extern char poker_value;\n
\n
long long cgc_poker(unsigned int a0[13], unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xd0]\n
    unsigned int v1;  // [bp-0xcc]\n
    unsigned int v2;  // [bp-0xc8]\n
    unsigned int v3;  // [bp-0xc4]\n
    unsigned int v4;  // [bp-0xc0]\n
    unsigned int v5;  // [bp-0xbc]\n
    unsigned int v6;  // [bp-0xb8]\n
    unsigned int v7;  // [bp-0xb4]\n
    unsigned int v8;  // [bp-0xb0]\n
    unsigned int v9;  // [bp-0xac]\n
    unsigned int v10;  // [bp-0xa8]\n
    unsigned int v11;  // [bp-0xa4]\n
    char v12;  // [bp-0x9d]\n
    char v13;  // [bp-0x98]\n
    char v14;  // [bp-0x52]\n
    char v15;  // [bp-0x4d]\n
    char v16;  // [bp-0x4c]\n
    char v17;  // [bp-0x4b]\n
    char v18;  // [bp-0x4a]\n
    char v19;  // [bp-0x49]\n
    char v20[53];  // [bp-0x48]\n
    unsigned int v21[13];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v23;  // rax\n
    unsigned int v24[13];  // rax\n
    unsigned int v25[13];  // rax\n
    unsigned int v26[13];  // rax\n
    unsigned int v27[13];  // rax\n
    unsigned int v28[13];  // rax\n
    unsigned int v29[13];  // rax\n
    unsigned int v30[13];  // rax\n
    unsigned int v31[13];  // rax\n
    unsigned int v32[13];  // rax\n
    unsigned int v33[13];  // rax\n
    unsigned int v34[13];  // rax\n
    unsigned int v35[13];  // rax\n
\n
    *(&v21[0]) = a0;\n
    if (!v21)\n
        v21 = &v13;\n
    while (true)\n
    {\n
        cgc_shuffle(v20);\n
        v15 = cgc_draw(v20, 5, a2, a3, a4);\n
        v16 = cgc_draw(v20, 5, a2, a3, a4);\n
        v17 = cgc_draw(v20, 5, a2, a3, a4);\n
        v18 = cgc_draw(v20, 5, a2, a3, a4);\n
        v19 = cgc_draw(v20, 5, a2, a3, a4);\n
        cgc_print_hand(&v15, 5, a2, a3, a4);\n
        cgc_bzero(&v14, 5);\n
        cgc_printf(\"Enter cards to hold by number (ex: 13 or 12345). Others will be replaced.\\n
\", 5, a2, a3, a4);\n
        a2 = 5;\n
        cgc_receive_fixed_input(&v14, 10, 5);\n
        v23 = v14;\n
        if (v23 == 113)\n
            break;\n
        v24 = v21;\n
        v24[10] = v24[10] + 100;\n
        if (*((v21 + 48)) >= 5)\n
        {\n
            v25 = v21;\n
            v25[12] = v25[12] - 5;\n
        }\n
        cgc_bzero(&v12, 5);\n
        for (v11 = 0; v11 < 5; v11 += 1)\n
        {\n
            if ((&v14)[v11] >= 49 && (&v14)[v11] <= 53)\n
                (&v12)[49 + (&v14)[v11]] = 1;\n
        }\n
        for (v10 = 0; v10 < 5; v10 += 1)\n
        {\n
            if (!(&v12)[v10])\n
            {\n
                a3 = cgc_draw(v20, 5, 5, a3, a4);\n
                (&v15)[v10] = a3;\n
            }\n
        }\n
        cgc_print_hand(&v15, 5, 5, a3, a4);\n
        cgc_sort_by_suit(&v15, 5);\n
        v3 = cgc_get_suit(v15);\n
        if (v3 == cgc_get_suit(v16))\n
        {\n
            v2 = cgc_get_suit(v15);\n
            if (v2 == cgc_get_suit(v17))\n
            {\n
                v1 = cgc_get_suit(v15);\n
                if (v1 == cgc_get_suit(v18))\n
                {\n
                    v0 = cgc_get_suit(v15);\n
                    a3 = cgc_get_suit(v19);\n
                    if (v0 == a3)\n
                    {\n
                        if (v15 != 9 && v15 != 22 && v15 != 35 && v15 != 48)\n
                        {\n
                            a3 = v15 + 4;\n
                            if (v19 != a3)\n
                            {\n
                                cgc_printf(\"Flush!\\n
\", 5, 5, a3, a4);\n
                                v33 = v21;\n
                                v33[12] = g_40a860 + v33[12];\n
                                goto LABEL_406cb4;\n
                            }\n
                            else\n
                            {\n
                                cgc_printf(\"Straight Flush!\\n
\", 5, 5, a3, a4);\n
                                v32 = v21;\n
                                v32[12] = g_40a85c + v32[12];\n
                                goto LABEL_406cb4;\n
                            }\n
                        }\n
                        cgc_printf(\"Royal Flush!\\n
\", 5, 5, a3, a4);\n
                        v30 = v21;\n
                        v30[12] = g_40a858 + v30[12];\n
                        goto LABEL_406cb4;\n
                    }\n
                }\n
            }\n
        }\n
        cgc_sort_by_value(&v15, 5);\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 0;\n
        v6 = 0;\n
        v5 = 0;\n
        while (true)\n
        {\n
            if (v9 < 5)\n
            {\n
                a2 = (&v15)[v9];\n
                v4 = cgc_count_cards(&v15, 5, a2);\n
                if (v4 == 4)\n
                {\n
                    cgc_printf(\"Four of a kind!\\n
\", 5, a2, a3, a4);\n
                    v26 = v21;\n
                    v26[12] = g_40a864 + v26[12];\n
                    break;\n
                }\n
                else\n
                {\n
                    if (v4 == 3)\n
                    {\n
                        if (v6 != 1)\n
                        {\n
                            v7 = 1;\n
                        }\n
                        else\n
                        {\n
                            cgc_printf(\"Full House!\\n
\", 5, a2, a3, a4);\n
                            v27 = v21;\n
                            v27[12] = g_40a868 + v27[12];\n
                            break;\n
                        }\n
                    }\n
                    if (v4 == 2)\n
                    {\n
                        if (v7 == 1)\n
                        {\n
                            cgc_printf(\"Full House!\\n
\", 5, a2, a3, a4);\n
                            v28 = v21;\n
                            v28[12] = g_40a868 + v28[12];\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            a3 = (&v15)[v9];\n
                            if (*((&poker_value + 0x4 * a3)) >= 11)\n
                                v5 = 1;\n
                            if (v6 != 1)\n
                            {\n
                                v6 = 1;\n
                            }\n
                            else\n
                            {\n
                                cgc_printf(\"Two Pair!\\n
\", 5, a2, a3, a4);\n
                                v29 = v21;\n
                                v29[12] = g_40a86c + v29[12];\n
                                break;\n
                            }\n
                        }\n
                    }\n
                    v9 = v4 + v9;\n
                }\n
            }\n
            else if (v7 == 1)\n
            {\n
                cgc_printf(\"Three of a kind!\\n
\", 5, a2, a3, a4);\n
                v31 = v21;\n
                v31[12] = g_40a870 + v31[12];\n
                break;\n
            }\n
            else if (v5 == 1)\n
            {\n
                cgc_printf(\"Jacks or better!\\n
\", 5, a2, a3, a4);\n
                v34 = v21;\n
                v34[12] = g_40a874 + v34[12];\n
                break;\n
            }\n
            else\n
            {\n
                if (!v6)\n
                {\n
                    a2 = v15;\n
                    a3 = *(&(&poker_value)[4 * a2]) + 4;\n
                    if (*(&(&poker_value)[4 * v19]) == a3)\n
                    {\n
                        cgc_printf(\"Straight!\\n
\", 5, a2, a3, a4);\n
                        v35 = v21;\n
                        v35[12] = g_40a878 + v35[12];\n
                        break;\n
                    }\n
                }\n
                cgc_printf(\"You Lose!\\n
\", 5, a2, a3, a4);\n
                break;\n
            }\n
        }\n
LABEL_406cb4:\n
    }\n
    return v23;\n
}\n
", "4222146:sub_406cc2": null, "4222160:cgc_print_board": "long long cgc_print_board(unsigned long a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v3;  // rdx\n
    char *v4;  // rcx\n
\n
    for (v1 = 0; v1 < a0; v1 += 1)\n
    {\n
        for (v0 = 0; v0 < a0; v0 += 1)\n
        {\n
            v3 = a0;\n
            v4 = v1;\n
            cgc_printf(\"@c \", v4[v3 * v0 + a1], v3, v4, a4);\n
        }\n
        cgc_printf(\"\\n
\", a1, a0, v1, a4);\n
    }\n
    return v1;\n
}\n
", "4222309:sub_406d65": null, "4222320:cgc_slots": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_payouts;\n
extern char g_406e51;\n
extern unsigned int g_40a854;\n
\n
long long cgc_slots(unsigned int a0[13], unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x98]\n
    struct_0 *v1;  // [bp-0x90]\n
    unsigned int v2;  // [bp-0x88]\n
    unsigned int v3;  // [bp-0x84]\n
    unsigned int v4;  // [bp-0x80]\n
    unsigned int v5;  // [bp-0x7c]\n
    unsigned int v6;  // [bp-0x78]\n
    char v7;  // [bp-0x71]\n
    struct_0 *v8;  // [bp-0x70]\n
    struct_0 *v9;  // [bp-0x68]\n
    unsigned long v10;  // [bp-0x60]\n
    unsigned int v11;  // [bp-0x58]\n
    char v12;  // [bp-0x51]\n
    char v13;  // [bp-0x50]\n
    unsigned int v14[13];  // [bp-0x10], Other Possible Types: unsigned long\n
    char v15;  // [bp+0x0]\n
    struct_0 *v17;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v18;  // rax, Other Possible Types: unsigned long\n
    unsigned int v19[13];  // rax\n
    unsigned int v20[13];  // rax\n
    struct_0 *v21;  // rsi\n
    char *v22;  // esi, Other Possible Types: unsigned int, unsigned long, struct_0 *\n
    unsigned long v23;  // rcx\n
    unsigned int v24;  // eax\n
    unsigned int v25[13];  // rax\n
    struct_0 *v26;  // rcx\n
    struct_0 *v27;  // rdx\n
    unsigned int v28;  // eax\n
    unsigned int v30[13];  // rax\n
    unsigned long long v31;  // rdx\n
\n
    *(&v14[0]) = a0;\n
    if (!v14)\n
        v14 = &v13;\n
    cgc_printf(\"Enter number of rows (2 to 5):\", a1, a2, a3, a4);\n
    v17 = 1;\n
    cgc_receive_fixed_input(&v12, 10, 1);\n
    v18 = v12;\n
    if (v18 < 50)\n
        return v18;\n
    v18 = v12;\n
    if (v18 <= 53)\n
    {\n
        v11 = v12 - 48;\n
        while (true)\n
        {\n
            v18 = v12;\n
            if (v18 == 113)\n
                break;\n
            if (*((v14 + 48)) >= 2)\n
            {\n
                v19 = v14;\n
                v19[12] = v19[12] - 2;\n
            }\n
            v20 = v14;\n
            v20[11] = v20[11] + 1;\n
            v0 = v11;\n
            v10 = &v15;\n
            v21 = v0 * v0;\n
            v1 = &(&v15)[-1 * (&v21[1].field_-8 + 6 & -0x10)];\n
            v9 = v0;\n
            v8 = v0;\n
            *(&v1->field_0) = &g_406e51;\n
            cgc_bzero(v1, v21);\n
            v7 = 47;\n
            v2 = v11;\n
            if (v2 == 3)\n
            {\n
                v7 = 39;\n
            }\n
            else if (v2 == 4)\n
            {\n
                v7 = 37;\n
            }\n
            else if (v2 == 5)\n
            {\n
                v7 = 35;\n
            }\n
            for (v6 = 0; v6 < v11; v6 += 1)\n
            {\n
                for (v5 = 0; v5 < v11; v5 += 1)\n
                {\n
                    *(&v17) = cgc_random_in_range(33, v7);\n
                    a3 = v5;\n
                    *((v1 + v0 * v6 + a3)) = *(&v17);\n
                }\n
            }\n
            v22 = v1;\n
            cgc_print_board(v11, v22, v17, a3, a4);\n
            for (v4 = 0; v4 < v11; v4 += 1)\n
            {\n
                for (v3 = 1; v3 < v11; v3 += 1)\n
                {\n
                    v23 = v1;\n
                    v22 = v0;\n
                    v24 = *((v23 + v22 * v4 + v3));\n
                    v17 = v22 * v4;\n
                    a3 = *((v23 + v17));\n
                    if (v24 != a3)\n
                        break;\n
                }\n
                if (v3 == v11)\n
                {\n
                    cgc_printf(\"Column match: @d!\\n
\", v4, v17, a3, a4);\n
                    if (v14)\n
                    {\n
                        v25 = v14;\n
                        a3 = cgc_payouts + v25[12];\n
                        v25[12] = a3;\n
                    }\n
                }\n
            }\n
            for (v3 = 0; v3 < v11; v3 += 1)\n
            {\n
                for (v4 = 1; v4 < v11; v4 += 1)\n
                {\n
                    v26 = v1;\n
                    v27 = v0;\n
                    v22 = v3;\n
                    v28 = *((v26 + v27 * v4 + v22));\n
                    v17 = v3;\n
                    a3 = *(&v26->field_-8 + NULL * v27 + v17);\n
                    if (v28 != a3)\n
                        break;\n
                }\n
                if (v4 == v11)\n
                {\n
                    cgc_printf(\"Row match: @d!\\n
\", v3, v17, a3, a4);\n
                    if (v14)\n
                    {\n
                        v30 = v14;\n
                        a3 = g_40a854 + v30[12];\n
                        v30[12] = a3;\n
                    }\n
                }\n
            }\n
            cgc_printf(\"Enter q to quit, any other key to play again:\", v22, v17, a3, a4);\n
            v31 = 1;\n
            cgc_receive_fixed_input(&v12, 10, 1);\n
        }\n
        return v18;\n
    }\n
}\n
", "4223220:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:memset": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_deallocate": null, "5242944:cgc_log10": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}