{"4210688:_init": "extern struct_0 *g_409230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409230;\n
    if (g_409230)\n
        v1 = g_409230();\n
    return v1;\n
}\n
", "4210720:sub_404020": "extern unsigned long long g_409250;\n
\n
long long sub_404020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409250;\n
    goto *(4231768);\n
}\n
", "4210732:sub_40402c": null, "4210736:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4210752:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4210768:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4210784:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4210800:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231744);\n
}\n
", "4210816:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4210853:sub_4040a5": null, "4210854:sub_4040a6": null, "4210864:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4210905:sub_4040d9": null, "4210912:register_tm_clones": "extern unsigned long long g_409238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4210969:sub_404119": null, "4210976:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_409240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409240)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4211029:sub_404155": null, "4211033:sub_404159": null, "4211040:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4211049:sub_404169": null, "4211056:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v2;  // rbx\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v2 = a1 * a0;\n
        v3 = cgc_malloc(v2);\n
        if (v3)\n
            return cgc_memset(v3, 0, v2);\n
        return 0;\n
    }\n
}\n
", "4211112:sub_4041a8": null, "4211120:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4211149:sub_4041cd": null, "4211152:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4211167:sub_4041df": null, "4211168:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4211180:sub_4041ec": null, "4211184:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4211196:sub_4041fc": null, "4211200:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4211212:sub_40420c": null, "4211216:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4211228:sub_40421c": null, "4211232:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4211250:sub_404232": null, "4211264:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4211282:sub_404252": null, "4211296:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4211314:sub_404272": null, "4211328:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4211346:sub_404292": null, "4211360:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4211375:sub_4042af": null, "4211376:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4211397:sub_4042c5": null, "4211408:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4223120];\n
    char field_407090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4211423:sub_4042df": null, "4211424:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4211430:sub_4042e6": null, "4211440:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4211455:sub_4042ff": null, "4211456:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4211471:sub_40430f": null, "4211472:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4211532:sub_40434c": null, "4211536:cgc_malloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern struct_2 *g_40a388;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v2;  // rax\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    struct_0 *v7;  // rax\n
    unsigned long v9;  // r14, Other Possible Types: unsigned long long\n
    struct_2 *v10;  // r14\n
    struct struct_2 **v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // rbx\n
    unsigned long long v13;  // rsi\n
    unsigned long long v14;  // rdx\n
    struct_0 *v16;  // rdi\n
    unsigned long long v17;  // rax\n
    unsigned long long v18;  // rdi\n
    struct_1 *v19;  // rax\n
    unsigned long long v20;  // rbx\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 0;\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v4, v5))\n
            return 0;\n
        v7 = v0;\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v9 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v9 = a0;\n
    if (v9 <= 2147483647)\n
    {\n
        v10 = v9 + 24;\n
        v11 = cgc_get_size_class(v10);\n
        if (v11 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[8 * v11]);\n
                if (v12)\n
                {\n
                    while (*(v12) < v10)\n
                    {\n
                        v12 = *((v12 + 16));\n
                        if (!v12)\n
                            goto LABEL_4043e6;\n
                    }\n
                }\n
LABEL_4043e6:\n
                v11 += 1;\n
            } while (v11 != 32);\n
            goto LABEL_404412;\n
        }\n
        v12 = 0;\n
LABEL_404412:\n
        if (v12)\n
        {\n
LABEL_404417:\n
            cgc_remove_from_flist(v12);\n
            v17 = *(v12) - v10;\n
            if (v17 >= 49)\n
            {\n
                v18 = v12 + v10;\n
                *((v12 + &v10->field_0)) = v17;\n
                *(&v10->padding_8[v12]) = 1;\n
                *((16 + v12 + &v10->field_0)) = 0;\n
                *(v12) = v10;\n
                *((40 + v12 + &v10->field_0)) = v12;\n
                *((32 + v12 + &v10->field_0)) = *((v12 + 32));\n
                v19 = *((v12 + 32));\n
                if (v19)\n
                    v19->field_28 = v18;\n
                *((v12 + 32)) = v18;\n
                cgc_insert_into_flist(v18);\n
            }\n
            v20 = v12 + 24;\n
            return v20;\n
        }\n
        else if (!cgc_allocate(v10, v13, v14))\n
        {\n
            v16 = v0;\n
            if (v16)\n
            {\n
                v16->field_0 = 0x40000;\n
                v16->field_8 = 1;\n
                v16->field_10 = 0;\n
                v16->field_20 = 0;\n
                cgc_insert_into_flist(v16);\n
                v12 = g_40a388;\n
                goto LABEL_404417;\n
            }\n
        }\n
    }\n
}\n
", "4211919:sub_4044cf": null, "4211920:cgc_get_size_class": "extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*(v1) >= a0)\n
            return v2;\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
            return 32;\n
    }\n
}\n
", "4211961:sub_4044f9": null, "4211968:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rdx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (*(v1) < a0->field_0)\n
    {\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    a0->field_8 = 1;\n
    v3 = *(&(&cgc_free_lists)[8 * v2]);\n
    if (v3)\n
    {\n
        a0->field_10 = v3;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        a0->field_18 = 0;\n
        return v2;\n
    }\n
    *(&(&cgc_free_lists)[8 * v2]) = a0;\n
    return v2;\n
}\n
", "4212063:sub_40455f": null, "4212064:cgc_remove_from_flist": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_remove_from_flist(struct_0 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v2[4];  // rax, Other Possible Types: unsigned long\n
    struct_2 *v3;  // rdx\n
    struct_3 *v4;  // rcx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    do\n
    {\n
        if (*(v1) >= a0->field_0)\n
        {\n
            v3 = a0[1].field_0;\n
            if (v3)\n
                v3->field_10 = a0->field_10;\n
            v4 = a0->field_10;\n
            if (v4)\n
                v4->field_18 = v3;\n
            if (*(&(&cgc_free_lists)[8 * v2]) == a0)\n
            {\n
                *(&(&cgc_free_lists)[8 * v2]) = v4;\n
                goto LABEL_4045b9;\n
            }\n
        }\n
        v2 += 1;\n
        v1 += 8;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4045b9:\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v2;\n
}\n
", "4212168:sub_4045c8": null, "4212176:cgc_coalesce": "extern char cgc_free_lists;\n
extern char size_class_limits;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v1;  // rcx\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rsi\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rsi\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rsi\n
    unsigned long v11;  // rsi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long v16;  // rdx\n
    unsigned long v17;  // rsi\n
    unsigned long v18;  // rax\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rdx\n
    unsigned long v23;  // rsi\n
    unsigned long v24;  // rax\n
    unsigned long v25;  // rcx\n
    unsigned long v26;  // rsi\n
    unsigned long v27;  // rdx\n
    unsigned long v28;  // rcx\n
    unsigned long v29;  // rax\n
    unsigned long v30;  // rdx\n
    unsigned long v31;  // rsi\n
    unsigned long v32;  // rsi\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rax\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rax\n
    unsigned long v38;  // rsi\n
    unsigned long v39;  // rsi\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v42;  // rdx\n
    unsigned long v43;  // rdx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    unsigned long v46;  // rax\n
    unsigned long v47;  // rsi\n
    unsigned long v48;  // rsi\n
    unsigned long v49;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rax\n
    unsigned long v54;  // rcx\n
    unsigned long v55;  // rcx\n
\n
    v1 = *((a0 + 40));\n
    if (!v1)\n
        return v2;\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && *((v2 + 8)))\n
        {\n
            v3 = &size_class_limits;\n
            v4 = 0;\n
            do\n
            {\n
                if (*(v3) >= *(v1))\n
                {\n
LABEL_404628:\n
                    v5 = *((v1 + 24));\n
                    if (v5)\n
                        *((v5 + 16)) = *((v1 + 16));\n
                    v8 = *((v1 + 16));\n
                    if (v8)\n
                        *((v8 + 24)) = v5;\n
                    if ((&cgc_free_lists)[v4] == v1)\n
                        (&cgc_free_lists)[v4] = v8;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v13 = *((a0 + 32));\n
                    v14 = &size_class_limits;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        if (*(v14) >= *(v13))\n
                        {\n
LABEL_404698:\n
                            v18 = *((v13 + 24));\n
                            if (v18)\n
                                *((v18 + 16)) = *((v13 + 16));\n
                            v23 = *((v13 + 16));\n
                            if (v23)\n
                                *((v23 + 24)) = v18;\n
                            if ((&cgc_free_lists)[v15] == v13)\n
                                (&cgc_free_lists)[v15] = v23;\n
                            *((v13 + 16)) = 0;\n
                            *((v13 + 8)) = 0;\n
                            v28 = *(a0);\n
                            v29 = &size_class_limits;\n
                            v30 = 0;\n
                            do\n
                            {\n
                                if (*(v29) >= v28)\n
                                {\n
LABEL_4046f8:\n
                                    v33 = *((a0 + 24));\n
                                    if (v33)\n
                                        *((v33 + 16)) = *((a0 + 16));\n
                                    v39 = *((a0 + 16));\n
                                    if (v39)\n
                                        *((v39 + 24)) = v33;\n
                                    if ((&cgc_free_lists)[v30] == a0)\n
                                        (&cgc_free_lists)[v30] = v39;\n
                                    *((a0 + 16)) = 0;\n
                                    *((a0 + 8)) = 0;\n
                                    v43 = *((a0 + 40));\n
                                    v44 = v28 + *(v43);\n
                                    *(v43) = v44;\n
                                    v45 = v44 + *(*((a0 + 32)));\n
                                    *(v43) = v45;\n
                                    v46 = &size_class_limits;\n
                                    v47 = 0;\n
                                    do\n
                                    {\n
                                        if (*(v46) >= v45)\n
                                        {\n
LABEL_404768:\n
                                            *((v43 + 8)) = 1;\n
                                            v50 = (&cgc_free_lists)[v47];\n
                                            if (!v50)\n
                                            {\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                            }\n
                                            else\n
                                            {\n
                                                *((v43 + 16)) = v50;\n
                                                *(((&cgc_free_lists)[v47] + 24)) = v43;\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                                *((v43 + 24)) = 0;\n
                                            }\n
                                            v52 = *((a0 + 32));\n
                                            v53 = *((v52 + 40));\n
                                            if (v53)\n
                                                *((v53 + 32)) = *((v52 + 32));\n
                                            v55 = *((v52 + 32));\n
                                            if (v55)\n
                                            {\n
                                                *((v55 + 40)) = v53;\n
                                                goto LABEL_404a89;\n
                                            }\n
                                        }\n
                                        v47 += 1;\n
                                        v46 += 8;\n
                                    } while (v47 != 32);\n
                                    v47 = 32;\n
                                    goto LABEL_404768;\n
                                }\n
                                v30 += 1;\n
                                v29 += 8;\n
                            } while (v30 != 32);\n
                            v30 = 32;\n
                            goto LABEL_4046f8;\n
                        }\n
                        v15 += 1;\n
                        v14 += 8;\n
                    } while (v15 != 32);\n
                    v15 = 32;\n
                    goto LABEL_404698;\n
                }\n
                v4 += 1;\n
                v3 += 8;\n
            } while (v4 != 32);\n
            v4 = 32;\n
            goto LABEL_404628;\n
        }\n
    }\n
    if (!v1)\n
        return *((a0 + 32));\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && !*((v2 + 8)))\n
        {\n
            v6 = &size_class_limits;\n
            v7 = 0;\n
            do\n
            {\n
                if (*(v6) >= *(v1))\n
                {\n
                    v10 = *((v1 + 24));\n
                    if (v10)\n
                        *((v10 + 16)) = *((v1 + 16));\n
                    v16 = *((v1 + 16));\n
                    if (v16)\n
                        *((v16 + 24)) = v10;\n
                    if ((&cgc_free_lists)[v7] == v1)\n
                        (&cgc_free_lists)[v7] = v16;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v20 = *(a0);\n
                    v21 = &size_class_limits;\n
                    v22 = 0;\n
                    do\n
                    {\n
                        if (*(v21) >= v20)\n
                        {\n
LABEL_4049e8:\n
                            v24 = *((a0 + 24));\n
                            if (v24)\n
                                *((v24 + 16)) = *((a0 + 16));\n
                            v31 = *((a0 + 16));\n
                            if (v31)\n
                                *((v31 + 24)) = v24;\n
                            if ((&cgc_free_lists)[v22] == a0)\n
                                (&cgc_free_lists)[v22] = v31;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v35 = *((a0 + 40));\n
                            v36 = v20 + *(v35);\n
                            *(v35) = v36;\n
                            v37 = &size_class_limits;\n
                            v38 = 0;\n
                            do\n
                            {\n
                                if (*(v37) >= v36)\n
                                {\n
LABEL_404a58:\n
                                    *((v35 + 8)) = 1;\n
                                    v40 = (&cgc_free_lists)[v38];\n
                                    if (!v40)\n
                                    {\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        goto LABEL_404a89;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((v35 + 16)) = v40;\n
                                        *(((&cgc_free_lists)[v38] + 24)) = v35;\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        *((v35 + 24)) = 0;\n
                                        goto LABEL_404a89;\n
                                    }\n
                                }\n
                                v38 += 1;\n
                                v37 += 8;\n
                            } while (v38 != 32);\n
                            v38 = 32;\n
                            goto LABEL_404a58;\n
                        }\n
                        v22 += 1;\n
                        v21 += 8;\n
                    } while (v22 != 32);\n
                    v22 = 32;\n
                    goto LABEL_4049e8;\n
                }\n
                v7 += 1;\n
                v6 += 8;\n
            } while (v7 != 32);\n
            v7 = 32;\n
LABEL_404a89:\n
            v2 = *((a0 + 40));\n
            if (v2)\n
                *((v2 + 32)) = *((a0 + 32));\n
            v54 = *((a0 + 32));\n
            if (v54)\n
            {\n
LABEL_404aa7:\n
                *((v54 + 40)) = v2;\n
                return v2;\n
            }\n
            return *((a0 + 40));\n
        }\n
    }\n
    if (!v1)\n
    {\n
        return v2;\n
    }\n
    else if (*((v1 + 8)))\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v9 = *((a0 + 32));\n
        if (!v9)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v9 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v11 = &size_class_limits;\n
            v12 = 0;\n
            do\n
            {\n
                if (*(v11) >= *(v9))\n
                {\n
                    v17 = *((v9 + 24));\n
                    if (v17)\n
                        *((v17 + 16)) = *((v9 + 16));\n
                    v19 = *((v9 + 16));\n
                    if (v19)\n
                        *((v19 + 24)) = v17;\n
                    if ((&cgc_free_lists)[v12] == v9)\n
                        (&cgc_free_lists)[v12] = v19;\n
                    *((v9 + 16)) = 0;\n
                    *((v9 + 8)) = 0;\n
                    v25 = *(a0);\n
                    v26 = &size_class_limits;\n
                    v27 = 0;\n
                    do\n
                    {\n
                        if (*(v26) >= v25)\n
                        {\n
LABEL_404878:\n
                            v32 = *((a0 + 24));\n
                            if (v32)\n
                                *((v32 + 16)) = *((a0 + 16));\n
                            v34 = *((a0 + 16));\n
                            if (v34)\n
                                *((v34 + 24)) = v32;\n
                            if ((&cgc_free_lists)[v27] == a0)\n
                                (&cgc_free_lists)[v27] = v34;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v41 = v25 + *(*((a0 + 32)));\n
                            *(a0) = v41;\n
                            v48 = &size_class_limits;\n
                            v42 = 0;\n
                            do\n
                            {\n
                                if (*(v48) >= v41)\n
                                {\n
LABEL_4048e8:\n
                                    *((a0 + 8)) = 1;\n
                                    v49 = (&cgc_free_lists)[v42];\n
                                    if (!v49)\n
                                    {\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((a0 + 16)) = v49;\n
                                        *(((&cgc_free_lists)[v42] + 24)) = a0;\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                        *((a0 + 24)) = 0;\n
                                    }\n
                                    v51 = *((a0 + 32));\n
                                    v2 = *((v51 + 40));\n
                                    if (v2)\n
                                    {\n
                                        *((v2 + 32)) = *((v51 + 32));\n
                                        goto LABEL_404ac5;\n
                                    }\n
                                }\n
                                v42 += 1;\n
                                v48 += 8;\n
                            } while (v42 != 32);\n
                            v42 = 32;\n
                            goto LABEL_4048e8;\n
                        }\n
                        v27 += 1;\n
                        v26 += 8;\n
                    } while (v27 != 32);\n
                    v27 = 32;\n
                    goto LABEL_404878;\n
                }\n
                v12 += 1;\n
                v11 += 8;\n
            } while (v12 != 32);\n
            v12 = 32;\n
LABEL_404ac5:\n
            v54 = *((v51 + 32));\n
            if (!v54)\n
                return v2;\n
        }\n
    }\n
    goto LABEL_404aa7;\n
}\n
", "4213459:sub_404ad3": null, "4213472:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4213514:sub_404b0a": null, "4213520:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a1 + v1)) != *((a0 + v1)))\n
            return *((a1 + v1)) - *((a0 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4213566:sub_404b3e": null, "4213568:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4213601:sub_404b61": null, "4213616:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            a0[v1] = a1;\n
            v1 += 1;\n
        } while (a2 != v1);\n
        return a0;\n
    }\n
}\n
", "4213649:sub_404b91": null, "4213664:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char v3;  // bpl\n
    unsigned long long v5;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v3 = a4;\n
    v6 = a1;\n
    if (a1 < a2)\n
    {\n
        v1 = 0;\n
        if (a3 <= 0)\n
            goto LABEL_404c3a;\n
    }\n
    else\n
    {\n
        a3 -= 1;\n
        v6 = (0 CONCAT a1) /m a2 >> 32;\n
        v1 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
        if (a3 <= 0)\n
            goto LABEL_404c3a;\n
    }\n
    if (!v1)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            do\n
            {\n
                if (!(v3 & 1))\n
                    v0 = 32;\n
                else\n
                    v0 = 48;\n
                cgc_transmit(a0, a1, a2, a3);\n
                tmp_5 = v5;\n
                v5 = v5 - 1;\n
            } while (tmp_5 + -1);\n
        }\n
    }\n
LABEL_404c3a:\n
    v7 = (!(v3 & 2) ? v6 + 55 : v6 + 87);\n
    v8 = v6 + 48;\n
    if (10 <= v6)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc_transmit();\n
    return v1 + 1;\n
}\n
", "4213772:sub_404c0c": null, "4213894:sub_404c86": null, "4213904:cgc_fdprintf": "extern unsigned long long g_407110;\n
\n
long long cgc_fdprintf(char *a0, char *a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    char *v30;  // r13\n
    unsigned long long v31;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    unsigned long v33;  // r12, Other Possible Types: unsigned long long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v35;  // rax\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v37;  // rcx\n
    unsigned long long v38;  // rcx\n
    struct struct_0 **v39;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    unsigned long v41;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v42;  // rax, Other Possible Types: unsigned long\n
    unsigned long v43;  // r14, Other Possible Types: unsigned long long\n
    char *v44;  // rbp\n
    unsigned long v45;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v31 = &v5;\n
    do\n
    {\n
        v4 = a1 + 1;\n
        if (*(a1) != 37)\n
        {\n
            v0 = *(a1);\n
        }\n
        else\n
        {\n
            v32 = v31;\n
            v33 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                a0 = v4;\n
                v4 = a0 + 1;\n
                v35 = *(a0);\n
                a3 = v35;\n
                if ((a3 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol(a0, &v4, 10, a3);\n
            }\n
            a2 = a3 - 88;\n
            switch (a2)\n
            {\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 29: case 30: case 31:\n
                v0 = v35;\n
                goto LABEL_404e74;\n
            case 12:\n
                v36 = v1;\n
                if (v36 <= 40)\n
                {\n
                    v39 = v36 + v3;\n
                    v36 = v36 + 8;\n
                    v1 = v36;\n
                }\n
                else\n
                {\n
                    v39 = v2;\n
                    v2 = v39 + 8;\n
                }\n
                v43 = *(v39);\n
                if (v43 < 0)\n
                {\n
                    v0 = 45;\n
                    cgc_transmit(a0, &g_407110, a2, v36);\n
                    v43 = -(v43);\n
                }\n
                cgc_output_number_printf(v30, v43, 10, v34, v33);\n
                v31 = rbx<8>;\n
                break;\n
            case 27:\n
                v37 = v1;\n
                if (v37 > 40)\n
                {\n
                    v40 = v2;\n
                    v41 = v40 + 8;\n
                    v2 = v41;\n
                }\n
                else\n
                {\n
                    v40 = v37 + v3;\n
                    v41 = v37 + 8;\n
                    v1 = v41;\n
                }\n
                v31 = rbx<8>;\n
                v44 = *(v40);\n
                if (cgc_strlen(v44))\n
                {\n
                    v45 = 0;\n
                    do\n
                    {\n
                        v0 = v44[v45];\n
                        cgc_transmit(a0, &g_407110, a2, v41);\n
                        v45 += 1;\n
                    } while (cgc_strlen(v44) > v45);\n
                }\n
            case 0:\n
                v33 = v33 | 2;\n
            case 32:\n
                v38 = v1;\n
                if (v38 <= 40)\n
                {\n
                    v42 = v38 + v3;\n
                    v1 = v38 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v2;\n
                    v2 = v42 + 8;\n
                }\n
                cgc_output_number_printf(v30, *(v42), 16, v34, v33);\n
                v31 = rbx<8>;\n
                break;\n
            default:\n
                if (a3 == 37)\n
                    goto LABEL_0x404e6f;\n
                else\n
                    goto LABEL_0x404dbd;\n
            }\n
LABEL_404e74:\n
            v31 = rbx<8>;\n
        }\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4214078:sub_404d3e": null, "4214142:sub_404d7e": null, "4214218:sub_404dca": null, "4214614:sub_404f56": null, "4214624:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_19;  // tmp #19\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // r12\n
    unsigned long v11;  // rbx\n
    unsigned long v12;  // rax\n
    char v13;  // r15b\n
    unsigned long long v14;  // rax\n
    unsigned long v15;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rbp, Other Possible Types: unsigned long long\n
    char v17;  // cl\n
    char v18;  // cl\n
    char *v19;  // rax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v2 = v10;\n
    v1 = v11;\n
    v0 = v12;\n
    v13 = a5;\n
    v15 = a2;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v14 = (0 CONCAT a2) /m a3;\n
        v15 = v14 / 0x100000000;\n
        cgc_output_number_sprintf(a0, a1, v14, a3, a4, a5);\n
    }\n
    if (a4 > 0 && v15 < a3)\n
    {\n
        v16 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            do\n
            {\n
                *(a1)->field_0 = ((v13 & 1) * 16) | 32;\n
                *(a1) = *(a1) + 1;\n
                *(a0) = *(a0) + 1;\n
                tmp_19 = v16;\n
                v16 = v16 - 1;\n
            } while (tmp_19 + -1);\n
        }\n
    }\n
    v17 = (10 <= v15 ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    v18 = v17 + v15;\n
    v19 = *(a1);\n
    *(v19) = v18;\n
    *(a1) = *(a1) + 1;\n
    *(a0) = *(a0) + 1;\n
    return v19;\n
}\n
", "4214796:sub_40500c": null, "4214800:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_1 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0xf8]\n
    char *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct struct_1 **v30;  // r15\n
    struct_0 *v31;  // r14\n
    struct struct_1 **v32;  // r13\n
    char *v33;  // rcx\n
    void* v35;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v36;  // rbp\n
    unsigned long v37;  // rdx, Other Possible Types: unsigned long long\n
    char *v38;  // rdi\n
    unsigned long long v39;  // rcx\n
    unsigned int v40;  // esi\n
    unsigned long long v42;  // rax\n
    char *v43;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v44;  // rdx\n
    unsigned long long v45;  // rcx\n
    unsigned long long v46;  // rdx\n
    struct struct_1 **v47;  // rcx, Other Possible Types: unsigned long\n
    struct struct_1 **v48;  // rax, Other Possible Types: unsigned long\n
    struct struct_1 **v49;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v50;  // rdx, Other Possible Types: unsigned long long\n
    char *v51;  // rbp\n
    unsigned long v52;  // r14\n
    unsigned int v53;  // r13d\n
    struct_0 *v54;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v55;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v56;  // rcx, Other Possible Types: unsigned long long\n
    char *v57;  // rcx\n
    struct struct_1 **v58;  // rbx\n
    unsigned long v59;  // r15\n
    struct struct_1 **v60;  // r15\n
    struct_0 *v61;  // r14\n
    struct struct_1 **v62;  // r13\n
    char *v63;  // rax\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!*(a1))\n
    {\n
        v63 = v1;\n
        v1 = v63 + 1;\n
        *(v63) = 0;\n
        return v0;\n
    }\n
    v30 = &v5;\n
    v31 = &v0;\n
    v32 = &v1;\n
    do\n
    {\n
        v5 = a1 + 1;\n
        if (*(a1) != 37)\n
        {\n
            v33 = v1;\n
            *(v33) = *(a1);\n
            v1 = v33 + 1;\n
        }\n
        else\n
        {\n
            v35 = 0;\n
            while (true)\n
            {\n
                v36 = v35 | 1;\n
                v37 = v35;\n
                do\n
                {\n
                    v35 = v37;\n
                    v38 = v5;\n
                    v5 = v38 + 1;\n
                    v39 = *(v38);\n
                    v40 = v39;\n
                    v37 = v36;\n
                } while (v40 == 48);\n
                switch (v40)\n
                {\n
                case 37:\n
                    v43 = v1;\n
                    *(v43) = 37;\n
                    goto LABEL_40515b;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v42 = cgc_strtol();\n
                    continue;\n
                case 100:\n
                    v44 = v2;\n
                    if (v44 > 40)\n
                    {\n
                        v47 = v3;\n
                        v3 = v47 + 8;\n
                    }\n
                    else\n
                    {\n
                        v47 = v44 + v4;\n
                        v2 = v44 + 8;\n
                    }\n
                    v50 = *(v47);\n
                    if (v50 < 0)\n
                    {\n
                        v57 = v1;\n
                        *(v57) = 45;\n
                        v1 = v57 + 1;\n
                        v0 += 1;\n
                        v50 = -(v50);\n
                    }\n
                    v54 = *(&v0);\n
                    v55 = v1;\n
                    v56 = 10;\n
LABEL_405214:\n
                    cgc_output_number_sprintf(v54, v55, v50, v56, 0, v35);\n
                    break;\n
                case 115:\n
                    v45 = v2;\n
                    if (v45 <= 40)\n
                    {\n
                        v48 = v45 + v4;\n
                        v2 = v45 + 8;\n
                    }\n
                    else\n
                    {\n
                        v48 = v3;\n
                        v3 = v48 + 8;\n
                    }\n
                    v51 = *(v48);\n
                    v52 = v1;\n
                    v53 = v0;\n
                    if (cgc_strlen(v51))\n
                    {\n
                        v58 = r15<8>;\n
                        v59 = 0;\n
                        do\n
                        {\n
                            *((v52 + v59)) = v51[v59];\n
                            v59 += 1;\n
                        } while (cgc_strlen(v51) > v59);\n
                        v52 += v59;\n
                        v53 += v59;\n
                        v60 = rbx<8>;\n
                    }\n
                    v1 = v52;\n
                    v0 = v53;\n
                    v61 = &v0;\n
                    v62 = &v1;\n
                    break;\n
                case 88:\n
                    v35 = v35 | 2;\n
                case 120:\n
                    v46 = v2;\n
                    if (v46 > 40)\n
                    {\n
                        v49 = v3;\n
                        v3 = v49 + 8;\n
                    }\n
                    else\n
                    {\n
                        v49 = v46 + v4;\n
                        v2 = v46 + 8;\n
                    }\n
                    v50 = *(v49);\n
                    v54 = r14<8>;\n
                    v55 = r13<8>;\n
                    v56 = 16;\n
                    goto LABEL_405214;\n
                default:\n
                    v43 = v1;\n
                    *(v43) = v39;\n
LABEL_40515b:\n
                    v1 = v43 + 1;\n
                    goto LABEL_4050e0;\n
                }\n
            }\n
        }\n
LABEL_4050e0:\n
        v0 += 1;\n
        a1 = v5;\n
    } while (*(a1));\n
}\n
", "4214988:sub_4050cc": null, "4215492:sub_4052c4": null, "4215504:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    unsigned long v3;  // rdx\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4215615:sub_40533f": null, "4215616:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    v1 = a0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a1)\n
            return v1;\n
    }\n
}\n
", "4215651:sub_405363": null, "4215664:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // al\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return *(a1) - v1;\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return *(a1) - v1;\n
}\n
", "4215715:sub_4053a3": null, "4215728:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4215775:sub_4053df": null, "4215776:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4215804:sub_4053fc": null, "4215808:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v1[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // al, Other Possible Types: char\n
    unsigned long long v3;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = v1[0];\n
    if (v1[0])\n
    {\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a1, v2);\n
            if (v3)\n
                break;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        v5 = v1 + 1;\n
    }\n
    *(a0) = v5;\n
    return *(a0);\n
}\n
", "4215900:sub_40545c": null, "4215904:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    char *v1;  // r9d, Other Possible Types: unsigned long\n
    void* v2;  // rax, Other Possible Types: unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp\n
    unsigned long long v7;  // r9\n
    unsigned long v8;  // r8\n
    void* v9;  // r11, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v10;  // rcx\n
    char v11;  // bpl\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v13;  // r11\n
    unsigned long long v14;  // rcx\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (*(v8) == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (*(v8) == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        while (true)\n
        {\n
            v10 = *((v8 + v1));\n
            v11 = v10 - 48;\n
            if (v11 >= 10 && (v10 & 223) - 65 >= 26)\n
                break;\n
            if (v11 <= 9)\n
            {\n
                v12 = v10 - 48;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else if ((v10 & 223) - 65 >= 26)\n
            {\n
                v12 = v11 < 10;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else\n
            {\n
                v12 = v10 + (v10 - 65 < 26) * 32 - 87;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            v13 = a2 * v9;\n
            v14 = v12 + v13;\n
            v1 += 1;\n
            v9 = v14;\n
        }\n
        v15 = -(v9);\n
        if (v5 != 45)\n
            v15 = v9;\n
        v2 = v15;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4215944:sub_405488": null, "4216170:sub_40556a": null, "4216279:sub_4055d7": null, "4216288:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4216296:sub_4055e8": null, "4216304:cgc_print_menu": "long long cgc_print_menu(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_fdprintf(0x1, \"All commands begin with '**' and may be entered at any time\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"**prev <Return to the previous page>\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"**next <Move to the next page>\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"**update [id] <Update field, ex: \\\"Update First Name\\\">\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"**help <Print this dialogue>\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"**exit <Exit application>\\n
\", a2, a3, a4);\n
    return v1;\n
}\n
", "4216421:sub_405665": null, "4216432:main": "extern char cgc_g_page_idx;\n
extern char g_4075b5;\n
extern char g_4075f2;\n
extern char g_407618;\n
extern char g_407638;\n
extern char g_40766f;\n
extern char g_40768d;\n
extern char g_407804;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"Thanks for your interest in the Sea Eye Association.\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"In order to be considered for the job complete the preliminary online background check\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"Due to the secure nature of the position you are applying for you may be asked to\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"submit additional paperwork after your preliminary background check has been approved.\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"Thank you for your cooperation\\n
\", a2, a3, a4);\n
    cgc_g_page_idx = 0;\n
    v3 = (&job_application_page)[cgc_g_page_idx]();\n
}\n
", "4216601:sub_405719": null, "4216779:sub_4057cb": null, "4216851:sub_405813": null, "4216864:cgc_fill_out_form": "typedef struct struct_1 {\n
    unsigned long long field_-18;\n
    char field_-10;\n
    char padding_-f[7];\n
    char field_-8;\n
    char padding_-7[7];\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern unsigned int g_4076aa;\n
extern char g_user_resp;\n
\n
long long cgc_fill_out_form(unsigned long long *a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned long long *v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v3;  // rcx, Other Possible Types: unsigned long long\n
    void* v4;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v5;  // r12\n
    struct_1 *v6;  // r13\n
    unsigned long long v7;  // r9\n
    char *v8;  // rax\n
    unsigned long long v9;  // rax, Other Possible Types: unsigned long\n
    char v10;  // r14b\n
\n
    if (a1 <= 0)\n
        return 0;\n
    v2 = a0;\n
    v3 = a1;\n
    v4 = 0;\n
    v0 = a1;\n
    do\n
    {\n
        v5 = 3 * v4 * 16;\n
        v10 = 1;\n
        if (!*((v2 + v5 + 32)))\n
        {\n
            v6 = v2 + v5 + 32;\n
            do\n
            {\n
                cgc_fdprintf(0x1, \"%s%s: \", *((v2 + v5)), v6->field_0, a4);\n
                v9 = cgc_get_response(1, \"%s%s: \", a2, v3, a4, v7);\n
                v10 = v9 == 1;\n
                if (v9 != 1)\n
                {\n
                    v2 = a0;\n
                    goto LABEL_405925;\n
                }\n
                if (!v6->field_-8 && !cgc_memcmp(&g_user_resp, &g_4076aa, 1))\n
                {\n
                    v2 = a0;\n
                    v6->field_-18 = cgc_calloc(1, *((24 + a0 + v5)));\n
                    v9 = 1;\n
                    v10 = 1;\n
                    goto LABEL_405925;\n
                }\n
                if (!*(&v6->field_-10)(&g_user_resp, *(&v6->field_-10)))\n
                {\n
                    v8 = cgc_calloc(1, *(&v6->field_-10));\n
                    v6->field_-18 = v8;\n
                    cgc_strcpy(v8, &g_user_resp);\n
                }\n
            } while (!v6->field_-18);\n
            v9 = 1;\n
LABEL_405925:\n
            v3 = v0;\n
        }\n
        if (!v10)\n
            return v9;\n
        v4 += 1;\n
    } while (v4 != v3);\n
}\n
", "4216963:sub_405883": null, "4217201:sub_405971": null, "4217216:cgc_update_field": "extern unsigned int g_4076aa;\n
extern char g_user_resp;\n
\n
long long cgc_update_field(unsigned int a0, void* a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34], Other Possible Types: unsigned long\n
    unsigned long v3;  // rax\n
    char *v4;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned long long v7;  // r9\n
    char v8;  // r12b\n
    unsigned long v9;  // r14\n
\n
    v0 = v3;\n
    v4 = \"Bad field\\n
\";\n
    if (a0)\n
    {\n
        v5 = a1;\n
        if (cgc_strlen(a0))\n
        {\n
            v4 = \"Could not find specified field\\n
\";\n
            if (a2 > 0)\n
            {\n
                v9 = 0;\n
                do\n
                {\n
                    v8 = 1;\n
                    if (cgc_strlen(a0) != cgc_strlen(*((a1 + v9))))\n
                    {\n
LABEL_405ac0:\n
                        if (!v8)\n
                            goto LABEL_405b15;\n
                        goto LABEL_405ac5;\n
                    }\n
                    a1 = *((a1 + v9));\n
                    if (!(!cgc_memcmp(a0, a1, cgc_strlen(a1))))\n
                        goto LABEL_405ac0;\n
                    cgc_fdprintf(0x1, \"%s%s: \", *((v5 + v9)), *((v5 + v9 + 8)), a4);\n
                    if (cgc_get_response(1, \"%s%s: \", a2, a3, a4, v7) != 1)\n
                    {\n
                        v8 = 0;\n
                        cgc_fdprintf(0x1, \"Bad command\\n
\", a2, a3, a4);\n
                        v1 = -2;\n
                        goto LABEL_405ac0;\n
                    }\n
                    if (*((v5 + v9 + 16)))\n
                    {\n
LABEL_405a69:\n
                        if (!*((v5 + v9 + 40))(&g_user_resp, *((v5 + v9 + 24))))\n
                        {\n
                            v1 = 0;\n
                            cgc_memset(*((v5 + v9 + 32)), 0, *((v5 + v9 + 24)));\n
                            cgc_strcpy(*((v5 + v9 + 32)), &g_user_resp);\n
                            goto LABEL_405b15;\n
                        }\n
                        else\n
                        {\n
                            cgc_fdprintf(0x1, \"Bad input.\\n
\", a2, a3, a4);\n
                            v1 = -0x4;\n
                            if (!0)\n
                                goto LABEL_405b15;\n
                            goto LABEL_405ac5;\n
                        }\n
                    }\n
                    if (!(!cgc_memcmp(&g_user_resp, &g_4076aa, 1)))\n
                        goto LABEL_405a69;\n
                    v1 = 0;\n
                    cgc_memset(*((v5 + v9 + 32)), 0, *((v5 + v9 + 24)));\n
LABEL_405b15:\n
                    return v1;\n
LABEL_405ac5:\n
                    v9 += 48;\n
                } while (a2 * 48 != v9);\n
                v4 = \"Could not find specified field\\n
\";\n
            }\n
        }\n
    }\n
    cgc_fdprintf(0x1, v4, a2, a3, a4);\n
    return 4294967295;\n
}\n
", "4217677:sub_405b4d": null, "4217680:cgc_print_page": "long long cgc_print_page(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long *v3;  // rbp, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0)\n
        v2 = cgc_fdprintf(0x1, \"%s\", a0, a3, a4);\n
    if (a2 <= 0)\n
        return v2;\n
    v3 = 0;\n
    do\n
    {\n
        v2 = cgc_fdprintf(0x1, \"%s=%s\\n
\", *((a1 + v3)), *((a1 + v3 + 32)), a4);\n
        v3 += 48;\n
    } while (a2 * 48 != v3);\n
    return v2;\n
}\n
", "4217788:sub_405bbc": null, "4217792:cgc_form": "extern char cgc_g_page_idx;\n
extern char g_last_page_completed;\n
extern char g_user_resp;\n
\n
long long cgc_form(unsigned long long a0, unsigned long long a1[5], unsigned long long a2, unsigned long a3, unsigned long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0[2];  // [bp-0x30]\n
    unsigned long v2;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v3;  // r14\n
    unsigned long long *v4;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rax\n
    unsigned long v9;  // rbx\n
    unsigned long long v10;  // r9\n
    unsigned long long v11;  // rax\n
\n
    v2 = g_last_page_completed + 1;\n
    if (v2 < cgc_g_page_idx)\n
    {\n
        cgc_fdprintf(0x1, \"You must complete the previous page before proceeding to this page\\n
\", a2, v2, a4);\n
        cgc_g_page_idx = g_last_page_completed + 1;\n
        return 4294967295;\n
    }\n
    v3 = a2;\n
    *(&v2) = a2;\n
    if (a2)\n
    {\n
        if (a1[4])\n
        {\n
            v4 = a1 + 2;\n
            v2 = 1;\n
            do\n
            {\n
                if (v3 == v2)\n
                {\n
                    *(&v2) = 1 > v2;\n
                    goto LABEL_405c5b;\n
                }\n
                v2 += 1;\n
                tmp_5 = *(v4);\n
                v4 += 48;\n
            } while (tmp_5);\n
            v2 -= 1;\n
            *(&v2) = v2 < v3;\n
        }\n
        g_last_page_completed = cgc_g_page_idx - 1;\n
    }\n
LABEL_405c5b:\n
    v5 = g_last_page_completed + 1;\n
    if (v5 != cgc_g_page_idx && !v2)\n
    {\n
        if (!a0)\n
            goto LABEL_405c90;\n
        goto LABEL_405c7a;\n
    }\n
    v6 = cgc_fill_out_form(a1, v3, v5, v2, a4);\n
    if (v6 == 4)\n
    {\n
        cgc_fdprintf(0x1, \"Cannot update field until all fields are inputted\\n
\", v5, v2, a4);\n
        return 4;\n
    }\n
    if (v6)\n
        return v6;\n
    g_last_page_completed = g_last_page_completed + 1;\n
    if (!a0)\n
        goto LABEL_405c90;\n
LABEL_405c7a:\n
    cgc_fdprintf(0x1, \"%s\", a0, v2, a4);\n
LABEL_405c90:\n
    if (v3 > 0)\n
    {\n
        v9 = 0;\n
        do\n
        {\n
            cgc_fdprintf(0x1, \"%s=%s\\n
\", *((&a1[0] + v9)), *((32 + &a1[0] + v9)), a4);\n
            v9 += 48;\n
        } while (v3 * 16 + (v3 * 16 << 1) != v9);\n
    }\n
    cgc_fdprintf(0x1, \"\\n
Type **next to continue\\n
\", v5, v2, a4);\n
    v11 = cgc_get_response(1, \"\\n
Type **next to continue\\n
\", v5, v2, a4, v10);\n
    if (v11 != 4)\n
        return v11;\n
    *(&v0) = &g_user_resp;\n
    cgc_strsep(v0, \" \");\n
    if (cgc_update_field(v0, a1, v3, v2, a4))\n
    {\n
        cgc_fdprintf(0x1, \"Update Unsuccessful\\n
\", v3, v2, a4);\n
        return v11;\n
    }\n
    return v11;\n
}\n
", "4218252:sub_405d8c": null, "4218256:cgc_candidate_info": "extern unsigned long long applicant_id[5];\n
\n
long long cgc_candidate_info(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Candidate Info Form\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Candidate Info:*********\\n
\", &applicant_id[0], 13, a3, a4);\n
}\n
", "4218302:sub_405dbe": null, "4218304:cgc_contact": "extern unsigned long long contact_info[5];\n
\n
long long cgc_contact(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Contact Info Form\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Contact Info:*********\\n
\", &contact_info[0], 4, a3, a4);\n
}\n
", "4218350:sub_405dee": null, "4218352:cgc_address": "extern unsigned long long current_address[5];\n
\n
long long cgc_address(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Address Form\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Address:*********\\n
\", &current_address[0], 7, a3, a4);\n
}\n
", "4218398:sub_405e1e": null, "4218400:cgc_education": "extern unsigned long long highest_education[5];\n
\n
long long cgc_education(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Education Form\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Highest Education:*********\\n
\", &highest_education[0], 12, a3, a4);\n
}\n
", "4218446:sub_405e4e": null, "4218448:cgc_employment_history": "extern unsigned long long last_employer[5];\n
\n
long long cgc_employment_history(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Employment Form\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Most Recent Employer:*********\\n
\", &last_employer[0], 14, a3, a4);\n
}\n
", "4218494:sub_405e7e": null, "4218496:cgc_final_screening": "extern unsigned long long screening_questions[5];\n
\n
long long cgc_final_screening(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
Final Questions\\n
\", a2, a3, a4);\n
    return cgc_form(\"\\n
*********Final Screening:*********\\n
\", &screening_questions[0], 2, a3, a4);\n
}\n
", "4218542:sub_405eae": null, "4218544:cgc_finished": "extern char cgc_g_page_idx;\n
extern char g_last_page_completed;\n
\n
long long cgc_finished(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rcx\n
\n
    v0 = v2;\n
    cgc_fdprintf(0x1, \"\\n
\\n
You have completed your application with the Sea Eye Association.\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"You may review the form. Navigate through the application with **prev and **next.\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"Once your are satisfied type **exit to exit and submit the form\\n
\", a2, a3, a4);\n
    cgc_fdprintf(0x1, \"If you wish to discard your application, please use Control-C\\n
\", a2, a3, a4);\n
    v3 = g_last_page_completed + 1;\n
    if (v3 >= cgc_g_page_idx)\n
        return cgc_get_response();\n
    cgc_fdprintf(0x1, \"You must complete the previous page before proceeding to this page\\n
\", a2, v3, a4);\n
    cgc_g_page_idx = g_last_page_completed + 1;\n
    return 4294967295;\n
}\n
", "4218689:sub_405f41": null, "4218704:cgc_get_response": "extern char g_40a3a1;\n
extern unsigned int g_40a3a2;\n
extern char g_user_resp;\n
\n
long long cgc_get_response()\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    char *v8;  // r12\n
    char *v9;  // r15, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v9 = &(&g_user_resp)[v3];\n
        if (cgc_receive(v4, v5, v6, v7))\n
            break;\n
        if (!v0)\n
            break;\n
        if (*(v9) == 10)\n
            break;\n
        v3 += 1;\n
        if (v3 == 0x400)\n
        {\n
            v8 = &(&g_user_resp)[v3];\n
            v3 = 0x400;\n
            v9 = v8;\n
            break;\n
        }\n
    }\n
    if (v3 == 0x400 && *(v9) != 10)\n
        return 4294967295;\n
    if (*(v9) != 10)\n
        return 4294967294;\n
    *(v9) = 0;\n
    if (!(v3 >= 3 && g_user_resp == 42 && g_40a3a1 == 42))\n
        return 1;\n
    if (!cgc_memcmp(&g_40a3a2, \"prev\", cgc_strlen(\"prev\")))\n
    {\n
        return 2;\n
    }\n
    else if (!cgc_memcmp(&g_40a3a2, \"next\", cgc_strlen(\"next\")))\n
    {\n
        return 3;\n
    }\n
    else if (!cgc_memcmp(&g_40a3a2, \"update \", cgc_strlen(\"update \")))\n
    {\n
        return 4;\n
    }\n
    else if (!cgc_memcmp(&g_40a3a2, \"help\", cgc_strlen(\"help\")))\n
    {\n
        return 5;\n
    }\n
    else if (!cgc_memcmp(&g_40a3a2, \"cgc_exit\", cgc_strlen(\"exit\")))\n
    {\n
        return 6;\n
    }\n
}\n
", "4219120:cgc_verify_hair": "typedef struct struct_0 {\n
    char padding_0[4235168];\n
    unsigned int field_409fa0;\n
} struct_0;\n
\n
extern char valid_hair_colors;\n
\n
long long cgc_verify_hair(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_strlen(*(&(&valid_hair_colors)[v3])) == cgc_strlen(a0))\n
        {\n
            v4 = *(&(&valid_hair_colors)[v3]);\n
            if (!cgc_memcmp(v4, a0, cgc_strlen(v4)))\n
                return 0;\n
        }\n
        v3 += 8;\n
        if (v3 == 112)\n
            return 4294967295;\n
    }\n
}\n
", "4219142:sub_406106": null, "4219238:sub_406166": null, "4219248:cgc_verify_eye": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    unsigned int field_40a010;\n
} struct_0;\n
\n
extern char valid_eye_colors;\n
\n
long long cgc_verify_eye(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_strlen(*(&(&valid_eye_colors)[v3])) == cgc_strlen(a0))\n
        {\n
            v4 = *(&(&valid_eye_colors)[v3]);\n
            if (!cgc_memcmp(v4, a0, cgc_strlen(v4)))\n
                return 0;\n
        }\n
        v3 += 8;\n
        if (v3 == 80)\n
            return 4294967295;\n
    }\n
}\n
", "4219270:sub_406186": null, "4219366:sub_4061e6": null, "4219376:cgc_verify_suffix": "typedef struct struct_0 {\n
    char padding_0[4235360];\n
    unsigned int field_40a060;\n
} struct_0;\n
\n
extern char valid_suffixes;\n
\n
long long cgc_verify_suffix(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_strlen(*(&(&valid_suffixes)[v3])) == cgc_strlen(a0))\n
        {\n
            v4 = *(&(&valid_suffixes)[v3]);\n
            if (!cgc_memcmp(v4, a0, cgc_strlen(v4)))\n
                return 0;\n
        }\n
        v3 += 8;\n
        if (v3 == 96)\n
            return 4294967295;\n
    }\n
}\n
", "4219398:sub_406206": null, "4219494:sub_406266": null, "4219504:cgc_verify_state": "typedef struct struct_0 {\n
    char padding_0[4235456];\n
    unsigned int field_40a0c0;\n
} struct_0;\n
\n
extern char valid_states;\n
\n
long long cgc_verify_state(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_strlen(*(&(&valid_states)[v3])) == cgc_strlen(a0))\n
        {\n
            v4 = *(&(&valid_states)[v3]);\n
            if (!cgc_memcmp(v4, a0, cgc_strlen(v4)))\n
                return 0;\n
        }\n
        v3 += 8;\n
        if (v3 == 408)\n
            return 4294967295;\n
    }\n
}\n
", "4219526:sub_406286": null, "4219625:sub_4062e9": null, "4219632:cgc_verify_education": "typedef struct struct_0 {\n
    char padding_0[4235872];\n
    unsigned int field_40a260;\n
} struct_0;\n
\n
extern char education_levels;\n
\n
long long cgc_verify_education(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_strlen(*(&(&education_levels)[v3])) == cgc_strlen(a0))\n
        {\n
            v4 = *(&(&education_levels)[v3]);\n
            if (!cgc_memcmp(v4, a0, cgc_strlen(v4)))\n
                return 0;\n
        }\n
        v3 += 8;\n
        if (v3 == 24)\n
            return 4294967295;\n
    }\n
}\n
", "4219654:sub_406306": null, "4219750:sub_406366": null, "4219760:cgc_verify_month": "long long cgc_verify_month(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 == a1)\n
        return -(cgc_strtol(a0, NULL, 10) - 13 < -12);\n
    return 4294967295;\n
}\n
", "4219822:sub_4063ae": null, "4219824:cgc_verify_day": "long long cgc_verify_day(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 == a1)\n
        return -(cgc_strtol(a0, NULL, 10) - 32 < -31);\n
    return 4294967295;\n
}\n
", "4219886:sub_4063ee": null, "4219888:cgc_verify_year": "long long cgc_verify_year(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 == a1)\n
        return -(cgc_strtol(a0, NULL, 10) - 2015 < -115);\n
    return 4294967295;\n
}\n
", "4219952:cgc_verify_height_feet": "long long cgc_verify_height_feet(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 <= a1)\n
        return -(cgc_strtol(a0, NULL, 10) - 10 < -9);\n
    return 4294967295;\n
}\n
", "4220014:sub_40646e": null, "4220016:cgc_verify_height_inches": "long long cgc_verify_height_inches(unsigned long a0, unsigned long a1)\n
{\n
    if (cgc_strlen(a0) + 1 <= a1)\n
        return -1 + (cgc_strtol(a0, NULL, 10) < 12);\n
    return 4294967295;\n
}\n
", "4220078:sub_4064ae": null, "4220080:cgc_verify_weight": "long long cgc_verify_weight(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 <= a1)\n
        return -(cgc_strtol(a0, NULL, 10) - 501 < -451);\n
    return 4294967295;\n
}\n
", "4220146:sub_4064f2": null, "4220160:cgc_verify_sex": "long long cgc_verify_sex(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 == a1)\n
        return -(*(a0) != 70 & *(a0) != 77);\n
    return 4294967295;\n
}\n
", "4220218:sub_40653a": null, "4220224:cgc_verify_yes_no": "long long cgc_verify_yes_no(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0) + 1;\n
    if (v4 == a1)\n
        return -(*(a0) != 78 & *(a0) != 89);\n
    return 4294967295;\n
}\n
", "4220282:sub_40657a": null, "4220288:cgc_verify_name": "long long cgc_verify_name(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rcx\n
    unsigned long v5;  // rbp\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(a0);\n
    v4 = v3 + 1;\n
    if (v4 < 2)\n
    {\n
        return 4294967295;\n
    }\n
    else if (v4 > a1)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        if (v3 <= 0)\n
            return 0;\n
        v5 = 0;\n
        do\n
        {\n
            if (!cgc_isalpha(a0[v5]) && a0[v5] != 39)\n
                return 4294967295;\n
            v5 += 1;\n
        } while (v3 != v5);\n
    }\n
}\n
", "4220339:sub_4065b3": null, "4220399:sub_4065ef": null, "4220400:cgc_verify_street": "long long cgc_verify_street(char *a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x158]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rcx\n
    unsigned long v6;  // rbx\n
    unsigned long long v7;  // r13\n
\n
    v1 = v3;\n
    v4 = cgc_strlen(a0);\n
    v5 = v4 + 1;\n
    if (v5 < 5)\n
    {\n
        return 4294967295;\n
    }\n
    else if (v5 > a1)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        if (v4 <= 0)\n
            return 0;\n
        v6 = 0;\n
        do\n
        {\n
            v7 = a0[v6];\n
            if (!cgc_isalnum(v7))\n
            {\n
                if (v7 > 44)\n
                    return 4294967295;\n
                v0 = 0x108100000000;\n
                if (!((*(&v0 + ((a0[v6] & 63) >> 3)) >> (a0[v6] & 63 & 7) & 1 & 1)))\n
                    goto LABEL_0x406660;\n
            }\n
            v6 += 1;\n
        } while (v4 != v6);\n
    }\n
}\n
", "4220530:sub_406672": null, "4220544:cgc_verify_city": "long long cgc_verify_city(char *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    unsigned long long v2;  // rcx\n
    unsigned long v3;  // rbx\n
    unsigned long long v4;  // r12\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = v1 + 1;\n
    if (v2 < 5)\n
    {\n
        return 4294967295;\n
    }\n
    else if (v2 > a1)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        if (v1 <= 0)\n
            return 0;\n
        v3 = 0;\n
        do\n
        {\n
            v4 = a0[v3];\n
            if (!cgc_isalpha(v4) && v4 != 39 && v4 != 32)\n
                return 4294967295;\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
}\n
", "4220595:sub_4066b3": null, "4220664:sub_4066f8": null, "4220672:cgc_verify_zip_code": "long long cgc_verify_zip_code(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long v5;  // rbp\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(a0);\n
    if (v3 + 1 != a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (*(a0) == 48)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        if (v3 <= 0)\n
            return 0;\n
        v5 = 0;\n
        do\n
        {\n
            if (!cgc_isdigit(a0[v5]))\n
                return 4294967295;\n
            v5 += 1;\n
        } while (v3 != v5);\n
    }\n
}\n
", "4220775:sub_406767": null, "4220784:cgc_verify_gpa": "long long cgc_verify_gpa(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rax\n
    unsigned long v6;  // rdi\n
    void* v7;  // rax\n
    unsigned long v8;  // rbx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0);\n
    if (v4 + 1 > a1)\n
        return 4294967295;\n
    if (v4 <= 0)\n
        return 0;\n
    v8 = 0;\n
    do\n
    {\n
        v6 = a0[v8];\n
        if (v8 == 1)\n
        {\n
            v7 = 0;\n
            *(&v7) = v6 == 46;\n
            if (((v7 + (v7 << 1)) + 1 & -5))\n
                return 4294967295;\n
        }\n
        else if (!cgc_isdigit(v6))\n
        {\n
            return 4294967295;\n
        }\n
        v8 += 1;\n
    } while (v4 != v8);\n
}\n
", "4220868:sub_4067c4": null, "4220926:sub_4067fe": null, "4220928:cgc_verify_email": "long long cgc_verify_email(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rbp\n
    void* v6;  // r13, Other Possible Types: unsigned long, unsigned int, unsigned long long\n
    unsigned long v7;  // rbx\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(a0);\n
    v4 = v3 + 1;\n
    if (v4 < 3)\n
    {\n
        return 4294967295;\n
    }\n
    else if (v4 > a1)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        if (v3 <= 0)\n
        {\n
            v6 = 0;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            v6 = 0;\n
            do\n
            {\n
                v5 = a0[v7];\n
                if (cgc_isalnum(v5))\n
                {\n
                    if (!(v5 == 64))\n
                        goto LABEL_406850;\n
                }\n
                else\n
                {\n
                    if (v5 - 45 < 2)\n
                    {\n
LABEL_406850:\n
                        continue;\n
                    }\n
                    else if (v5 != 64)\n
                    {\n
                        if (!(v5 == 95))\n
                            goto LABEL_4068a3;\n
                        goto LABEL_406850;\n
                    }\n
                }\n
                v6 = v6 + 1;\n
                if (!(v6 == 2))\n
                    goto LABEL_406850;\n
                v6 = 2;\n
LABEL_4068a3:\n
                return 4294967295;\n
                v7 += 1;\n
            } while (v3 != v7);\n
        }\n
        return -(v6 != 1);\n
    }\n
}\n
", "4220994:sub_406842": null, "4221065:sub_406889": null, "4221134:sub_4068ce": null, "4221136:cgc_verify_phone": "long long cgc_verify_phone(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // rax\n
    unsigned long v6;  // rdi\n
    void* v7;  // rax\n
    unsigned long v8;  // rbx\n
\n
    v0 = v2;\n
    v4 = cgc_strlen(a0);\n
    if (v4 + 1 != a1)\n
        return 4294967295;\n
    if (v4 <= 0)\n
        return 0;\n
    v8 = 0;\n
    do\n
    {\n
        v6 = a0[v8];\n
        if ((v8 & 2147483643) == 3)\n
        {\n
            v7 = 0;\n
            *(&v7) = v6 == 45;\n
            if (((v7 + (v7 << 1)) + 1 & -5))\n
                return 4294967295;\n
        }\n
        else if (!cgc_isdigit(v6))\n
        {\n
            return 4294967295;\n
        }\n
        v8 += 1;\n
    } while (v4 != v8);\n
}\n
", "4221226:sub_40692a": null, "4221278:sub_40695e": null, "4221280:cgc_verify_number": "long long cgc_verify_number(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long v5;  // rbx\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(a0);\n
    if (v3 + 1 > a1)\n
        return 4294967295;\n
    if (v3 <= 0)\n
        return 0;\n
    v5 = 0;\n
    do\n
    {\n
        if (!cgc_isdigit(a0[v5]))\n
            return 4294967295;\n
        v5 += 1;\n
    } while (v3 != v5);\n
}\n
", "4221368:sub_4069b8": null, "4221376:cgc_verify_text": "long long cgc_verify_text(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long v5;  // rbx\n
\n
    v0 = v2;\n
    v3 = cgc_strlen(a0);\n
    if (v3 + 1 > a1)\n
        return 4294967295;\n
    if (v3 <= 0)\n
        return 0;\n
    v5 = 0;\n
    do\n
    {\n
        if (!cgc_isprint(a0[v5]))\n
            return 4294967295;\n
        v5 += 1;\n
    } while (v3 != v5);\n
}\n
", "4221464:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_allocate": null, "5242904:cgc_deallocate": null, "5242912:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}