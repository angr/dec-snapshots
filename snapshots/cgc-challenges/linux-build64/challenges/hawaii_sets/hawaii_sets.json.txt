{"4202496:_init": "extern struct_0 *g_408230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408230;\n
    if (g_408230)\n
        v1 = g_408230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408250;\n
    goto *(4227672);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4227648);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_408238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203076:sub_402244": null, "4203088:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203344:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203406:sub_40238e": null, "4203408:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v8 = v4;\n
        v4 = (v8 >> 31 CONCAT v8) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v11 = v0;\n
        v0 = v11 - 1;\n
        if (v11 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203633:sub_402471": null, "4203648:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40277c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40277c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204428:sub_40278c": null, "4204432:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    struct struct_0 **v0;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xd8]\n
    unsigned int v2;  // [bp-0xcc]\n
    unsigned long long *v3;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0xc0]\n
    unsigned int *v5;  // [bp-0xb8]\n
    unsigned int v6;  // [bp-0xac]\n
    struct struct_0 **v7;  // [bp-0xa8], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0xa0]\n
    unsigned int v9;  // [bp-0x98]\n
    unsigned int v10;  // [bp-0x94]\n
    char *v11;  // [bp-0x90], Other Possible Types: unsigned long\n
    struct_3 *v12;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned long v13;  // [bp-0x80]\n
    struct_3 *v14;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v15;  // [bp-0x6c]\n
    char v16;  // [bp-0x68]\n
    unsigned int v17;  // [bp-0x24]\n
    char *v18;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v19;  // [bp-0xc]\n
    struct_1 *v21;  // rcx\n
    unsigned long long v22;  // rdx\n
    struct struct_0 **v23;  // rax\n
    struct_1 *v24;  // rcx\n
    struct struct_0 **v25;  // rdx\n
    unsigned long long v26;  // rdx\n
    unsigned long long *v27;  // rax\n
    struct_1 *v28;  // rcx\n
    unsigned long long *v29;  // rdx\n
    struct_1 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    struct struct_0 **v32;  // rax\n
    struct_1 *v33;  // rcx\n
    struct struct_0 **v34;  // rdx\n
\n
    v18 = a0;\n
    v17 = 0;\n
    if (!v18)\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    while (true)\n
    {\n
        if (!*(v18))\n
        {\n
            v19 = v17;\n
            return v19;\n
        }\n
        else if (*(v18) != 64)\n
        {\n
            cgc_putc(*(v18));\n
            v18 += 1;\n
            v17 += 1;\n
        }\n
        else\n
        {\n
            v18 += 1;\n
            v10 = *(v18);\n
            if (!v10)\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            if (v10 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v10 == 100)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 <= 40)\n
                {\n
                    v21 = v8;\n
                    v22 = v9;\n
                    v23 = v22 + v21->field_10;\n
                    v21->field_0 = v22 + 8;\n
                    v7 = v23;\n
                }\n
                else\n
                {\n
                    v24 = v8;\n
                    v25 = v24->field_8;\n
                    v24->field_8 = &v25[1];\n
                    v7 = v25;\n
                }\n
                v15 = *(v7);\n
                cgc_int_to_str(v15, &v16);\n
                for (v14 = &v16; v14->field_0; v14 += 1)\n
                {\n
                    cgc_putc(v14->field_0);\n
                    v17 += 1;\n
                }\n
            }\n
            else if (v10 == 102)\n
            {\n
                v4 = a1;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 > 160)\n
                {\n
                    v28 = v4;\n
                    v29 = v28->field_8;\n
                    v28->field_8 = &v29[1];\n
                    v3 = v29;\n
                }\n
                else\n
                {\n
                    v26 = v6;\n
                    v27 = v26 + v4->field_10;\n
                    *(v5) = v26 + 16;\n
                    v3 = v27;\n
                }\n
                v13 = *(v3);\n
                cgc_float_to_str(&v16);\n
                for (v12 = &v16; *(v12); v12 += 1)\n
                {\n
                    cgc_putc(*(v12));\n
                    v17 += 1;\n
                }\n
            }\n
            else if (v10 == 115)\n
            {\n
                v1 = a1;\n
                v2 = v1->field_0;\n
                if (v2 <= 40)\n
                {\n
                    v30 = v1;\n
                    v31 = v2;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v0 = v32;\n
                }\n
                else\n
                {\n
                    v33 = v1;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[1];\n
                    v0 = v34;\n
                }\n
                for (v11 = *(v0); *(v11); v11 += 1)\n
                {\n
                    cgc_putc(*(v11));\n
                    v17 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            v18 += 1;\n
        }\n
    }\n
}\n
", "4205318:sub_402b06": null, "4205328:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4205488:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4205571:sub_402c03": null, "4205584:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205635:sub_402c43": null, "4205648:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205699:sub_402c83": null, "4205712:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4205755:sub_402cbb": null, "4205760:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4205803:sub_402ceb": null, "4205808:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205859:sub_402d23": null, "4205872:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4205963:sub_402d8b": null, "4205968:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4205996:sub_402dac": null, "4206000:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4206052:sub_402de4": null, "4206064:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_402fd9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_402fd9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_402fd9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_402f49:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_402fd9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_402f49;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_402fd9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4206621:sub_40301d": null, "4206624:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4207016:sub_4031a8": null, "4207024:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4207145:sub_403229": null, "4207152:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4207255:sub_403297": null, "4207264:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4207382:sub_403316": null, "4207392:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4207510:sub_403396": null, "4207520:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4207729:sub_403471": null, "4207744:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4207827:sub_4034d3": null, "4207840:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 != a1)\n
        {\n
            *((a0 + v2)) = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return v2;\n
        }\n
    }\n
}\n
", "4208017:sub_403591": null, "4208032:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4208194:sub_403642": null, "4208208:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4208440:sub_403738": null, "4208448:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4208504:sub_403778": null, "4208512:cgc_parse_command_line": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
    char padding_9[7];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_parse_command_line(char *a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1d]\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    if (!a0)\n
    {\n
        return v2;\n
    }\n
    else if (!cgc_allocate(a0, a1, a2))\n
    {\n
        cgc_bzero(v2, 24);\n
        while (true)\n
        {\n
            v4 = a0[v1];\n
            v0 = 0;\n
            if (v4)\n
                v0 = v1 < 0x100;\n
            if (!(v0 & 1))\n
            {\n
                if (v2->field_0)\n
                    return v2;\n
LABEL_403a54:\n
                cgc_printf(\"!!Error parsing commandline\\n
\", 24, a2, v4, a4);\n
                cgc_deallocate(\"!!Error parsing commandline\\n
\", 24);\n
                v2 = 0;\n
                break;\n
            }\n
            v4 = v1;\n
            if (a0[v4] == 61)\n
            {\n
LABEL_403840:\n
                if (v2->field_0)\n
                {\n
                    v2->field_8 = a0[v1];\n
                    a0[v1] = 0;\n
                    goto LABEL_403a15;\n
                }\n
            }\n
            else\n
            {\n
                v4 = v1;\n
                if (a0[v4] == 64)\n
                    goto LABEL_403840;\n
                if (a0[v1] == 32)\n
                {\n
                    if (!v2->field_10)\n
                        a0[v1] = 0;\n
                    goto LABEL_403a15;\n
                }\n
                if (cgc_isalnum(a0[v1]))\n
                {\n
                    if (!v2->field_0)\n
                    {\n
                        v2->field_0 = &a0[v1];\n
                    }\n
                    else if (!v2->field_10 && v2->field_8)\n
                    {\n
                        v2->field_10 = &a0[v1];\n
                    }\n
                    goto LABEL_403a15;\n
                }\n
                v4 = v1;\n
                if (a0[v4] != 124)\n
                {\n
                    v4 = v1;\n
                    if (a0[v4] != 45)\n
                    {\n
                        v4 = v1;\n
                        if (a0[v4] != 34)\n
                        {\n
                            v4 = v1;\n
                            if (a0[v4] != 44)\n
                            {\n
                                v4 = v1;\n
                                if (a0[v4] != 42)\n
                                {\n
                                    v4 = v1;\n
                                    if (a0[v4] != 94)\n
                                    {\n
                                        v4 = v1;\n
                                        if (a0[v4] != 43)\n
                                        {\n
                                            v4 = v1;\n
                                            if (!(a0[v4] == 126))\n
                                                goto LABEL_403a54;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                if (!v2->field_0)\n
                {\n
LABEL_4039ee:\n
                    goto LABEL_403a54;\n
                }\n
                else\n
                {\n
                    if (!v2->field_8)\n
                        goto LABEL_4039ee;\n
                    if (!v2->field_10)\n
                        v2->field_10 = &a0[v1];\n
LABEL_403a15:\n
                    v1 += 1;\n
                }\n
            }\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4209282:sub_403a82": null, "4209296:cgc_print_sets": "extern struct_0 *cgc_root;\n
\n
long long cgc_print_sets()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct struct_0 **v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct struct_0 **v3;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = cgc_root;\n
    v1 = &cgc_root->field_0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v1)\n
            return v3;\n
        cgc_print_set(v1);\n
        v1 = *(v1);\n
        v3 = v1;\n
        if (v3 == cgc_root)\n
            return v1;\n
    }\n
}\n
", "4209386:sub_403aea": null, "4209392:cgc_copymem": "long long cgc_copymem(char *a0, char *a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v1 = a2;\n
    for (v0 = 0; v0 < a3; v0 += 1)\n
    {\n
        a0[v1] = a1[v0];\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4209479:sub_403b47": null, "4209488:cgc_print_subsets": "typedef struct struct_1 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_print_subsets(struct_1 *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0xd30]\n
    char *v1;  // [bp-0xd28]\n
    struct_0 *v2;  // [bp-0xd20]\n
    struct_0 *v3;  // [bp-0xd18]\n
    char *v4;  // [bp-0xd10]\n
    unsigned int v5;  // [bp-0xd04]\n
    unsigned long v6;  // [bp-0xd00]\n
    struct_0 *v7;  // [bp-0xcf8]\n
    char *v8;  // [bp-0xcf0]\n
    unsigned int v9;  // [bp-0xce4]\n
    struct_0 *v10;  // [bp-0xce0]\n
    char *v11;  // [bp-0xcd8]\n
    unsigned int v12;  // [bp-0xccc]\n
    unsigned long long v13;  // [bp-0xcc8]\n
    unsigned int v14;  // [bp-0xcc0]\n
    unsigned int v15;  // [bp-0xcbc]\n
    char v16;  // [bp-0xcb8]\n
    void* v17;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v19;  // [bp-0x1c]\n
    void* v20;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v22;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rax\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rax\n
\n
    v19 = a1;\n
    v18 = 0;\n
    v17 = 0;\n
    v15 = 0;\n
    v14 = 0;\n
    if (!a0)\n
    {\n
        v20 = 0;\n
        return v20;\n
    }\n
    v22 = 3200;\n
    cgc_bzero(&v16, 3200);\n
    if (v19)\n
    {\n
        v10 = &v16;\n
        v11 = &a0->padding_0[16];\n
        v12 = v15;\n
        v15 = cgc_copymem(v10, v11, v12, cgc_strlen(&a0->padding_0[16]));\n
        v23 = v15;\n
        v22 = \" = \";\n
        v15 = cgc_copymem(&v16, \" = \", v23, 3);\n
    }\n
    v24 = v15;\n
    v15 = v24 + 1;\n
    (&v16)[v24] = 124;\n
    v14 = 0;\n
    while (true)\n
    {\n
        if (v14 >= a0->field_20)\n
        {\n
            if ((&v16)[1 + v15] == 44)\n
            {\n
                (&v16)[1 + v15] = 124;\n
                (&v16)[v15] = 0;\n
            }\n
            else\n
            {\n
                (&v16)[v15] = 124;\n
                (&v16)[1 + v15] = 0;\n
            }\n
            cgc_strlen(&v16);\n
            if (!cgc_allocate(a0, v22, v23))\n
            {\n
                v0 = v18;\n
                cgc_bzero(v0, cgc_strlen(&v16) + 1);\n
                v1 = v18;\n
                v2 = &v16;\n
                cgc_copymem(v1, v2, 0, cgc_strlen(&v16));\n
                break;\n
            }\n
            else\n
            {\n
                v18 = 0;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            if (*((*(&a0[1].padding_0[4 + 8 * v14]) + 8)) == 1)\n
            {\n
                v25 = v15;\n
                v15 = v25 + 1;\n
                (&v16)[v25] = 34;\n
                *(&v17) = *(*(&a0[1].padding_0[4 + 8 * v14]));\n
                v7 = &v16;\n
                v8 = *(&v17);\n
                v9 = v15;\n
                v15 = cgc_copymem(v7, v8, v9, cgc_strlen(*(&v17)));\n
                v26 = v15;\n
                v15 = v26 + 1;\n
                (&v16)[v26] = 34;\n
            }\n
            else\n
            {\n
                v13 = cgc_retrieve_set(*(*(&a0[1].padding_0[4 + 8 * v14])));\n
                *(&v17) = cgc_print_subsets(v13, 0);\n
                if (*(&v17))\n
                {\n
                    v3 = &v16;\n
                    v4 = *(&v17);\n
                    v5 = v15;\n
                    v15 = cgc_copymem(v3, v4, v5, cgc_strlen(*(&v17)));\n
                    v6 = *(&v17);\n
                    cgc_strlen(*(&v17));\n
                    cgc_deallocate(a0, v22);\n
                }\n
                else\n
                {\n
                    v18 = 0;\n
                    break;\n
                }\n
            }\n
            v27 = v15;\n
            v15 = v27 + 1;\n
            (&v16)[v27] = 44;\n
            v14 += 1;\n
        }\n
    }\n
    v20 = v18;\n
    return v20;\n
}\n
", "4210473:sub_403f29": null, "4210480:cgc_retrieve_set": "extern struct_0 *cgc_root;\n
\n
long long cgc_retrieve_set(char *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (!a0)\n
        return v0;\n
    v0 = cgc_root;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            return v0;\n
        }\n
        else if (!cgc_strcmp(a0, v0 + 16))\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = *(v0);\n
            if (v0 == cgc_root)\n
            {\n
                v0 = 0;\n
                return v0;\n
            }\n
        }\n
    }\n
}\n
", "4210630:sub_403fc6": null, "4210640:cgc_memcmp": "long long cgc_memcmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (a0[v0] == a1[v0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0[v0] - a1[v0];\n
            return v1;\n
        }\n
    }\n
}\n
", "4210766:sub_40404e": null, "4210768:cgc_exec_command": "long long cgc_exec_command(char *a0, unsigned long long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    void* v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v6;  // rax, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v4)\n
        return v6;\n
    if (!cgc_strcmp(v4, \".l\"))\n
        cgc__terminate(a0);\n
    if (!cgc_strcmp(v4, \".h\"))\n
    {\n
        cgc_printf(\"setx = |\\\"data\\\", sety|\\tInitialize a set\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\"setx = seta+setb\\tunion\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\"setx = seta^setb\\tintersect\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\"setx = seta-setb\\tset difference\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\"setx = seta~setb\\tsymmetric difference\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\"seta @@ setb\\t\\tsubset. Returns TRUE or FALSE\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\".h\\t\\tPrint this menu\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\".l\\t\\tExit the program\\n
\", \".h\", a2, a3, a4);\n
        cgc_printf(\".p\\t\\tPrint sets and their elements\\n
\", \".h\", a2, a3, a4);\n
        v6 = cgc_printf(\".ps <setvar>\\tPrint an expanded set\\n
\", \".h\", a2, a3, a4);\n
    }\n
    else if (cgc_memcmp(v4, \".ps\", 3))\n
    {\n
        if (cgc_strcmp(v4, \".p\"))\n
        {\n
            v6 = cgc_printf(\"!!Unrecognized command: @s\\n
\", v4, 3, a3, a4);\n
            return v6;\n
        }\n
        v6 = cgc_print_sets();\n
    }\n
    else\n
    {\n
        for (v4 += 3; *(v4) == 32; v4 += 1);\n
        for (; cgc_isalnum(*((v4 + v2))); v2 += 1);\n
        *((v4 + v2)) = 0;\n
        v1 = cgc_retrieve_set(v4);\n
        if (!v1)\n
        {\n
            v6 = cgc_printf(\"!!Failed to find set: @s\\n
\", v4, 3, a3, a4);\n
            return v6;\n
        }\n
        v6 = cgc_print_subsets(v1, 1);\n
        *(&v3) = v6;\n
        if (*(&v3))\n
        {\n
            cgc_printf(\"@s\\n
\", *(&v3), 3, a3, a4);\n
            v0 = *(&v3);\n
            cgc_strlen(*(&v3));\n
            v6 = cgc_deallocate(a0, a1);\n
        }\n
    }\n
    return v6;\n
}\n
", "4211369:sub_4042a9": null, "4211376:cgc_add_set": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
extern struct_0 *cgc_root;\n
\n
long long cgc_add_set(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    if (!a0)\n
        return cgc_root;\n
    if (!cgc_root)\n
    {\n
        cgc_root = a0;\n
        a0->field_0 = a0;\n
        v0->field_8 = &a0->field_0;\n
    }\n
    a0->field_0 = cgc_root;\n
    a0->field_8 = cgc_root->field_8;\n
    cgc_root->field_8->field_0 = a0;\n
    cgc_root->field_8 = &a0->field_0;\n
    return cgc_root;\n
}\n
", "4211516:sub_40433c": null, "4211520:cgc_parse_set": "extern unsigned int g_407060;\n
\n
long long cgc_parse_set(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x164]\n
    unsigned int v1;  // [bp-0x160]\n
    unsigned int v2;  // [bp-0x15c]\n
    unsigned long v3;  // [bp-0x158]\n
    char v4;  // [bp-0x149]\n
    char v5;  // [bp-0x148]\n
    void* v6;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v7;  // [bp-0x40], Other Possible Types: unsigned long long\n
    unsigned int v8;  // [bp-0x34]\n
    char *v9;  // [bp-0x30]\n
    char *v10;  // [bp-0x28]\n
    char *v11;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v12;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v14;  // rcx\n
    char *v15;  // rcx\n
    char *v16;  // rcx\n
    char *v17;  // rcx\n
    char *v18;  // rcx\n
\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (a0)\n
    {\n
        if (cgc_allocate(a0, a1, a2))\n
        {\n
            v12 = 0;\n
        }\n
        else\n
        {\n
            cgc_bzero(v12, 160);\n
            v11 = a0;\n
            while (true)\n
            {\n
                v14 = *(v11);\n
                v4 = 0;\n
                if (v14)\n
                {\n
                    v4 = 0;\n
                    if (v8 != 8)\n
                        v4 = v8 != 2;\n
                }\n
                if (!(v4 & 1))\n
                    break;\n
                if (*(v11) == 124)\n
                {\n
                    v3 = v8;\n
                    switch (v3)\n
                    {\n
                    case 0:\n
                        v8 = 1;\n
                        break;\n
                    case 3:\n
                        break;\n
                    case 5:\n
                        v8 = 8;\n
                        cgc_printf(\"!!Additional variable expected\\n
\", a1, a2, &g_407060, a4);\n
                        break;\n
                    case 6:\n
                        cgc_bzero(&v5, 0x100);\n
                        v15 = v10;\n
                        if (v11 - v15 > 10)\n
                        {\n
                            cgc_printf(\"!!Invalid set data length\\n
\", 0x100, a2, v15, a4);\n
                            v8 = 8;\n
                            goto LABEL_404b21;\n
                        }\n
                        a1 = v10;\n
                        a2 = v11 - v10;\n
                        cgc_memcpy(&v5, a1, a2);\n
                        v6 = cgc_retrieve_set(&v5);\n
                        if (!v6)\n
                        {\n
                            cgc_printf(\"!!Cannot have a non-existant set as an element\\n
\", a1, a2, v15, a4);\n
                            v8 = 8;\n
                            break;\n
                        }\n
                        a1 = 0;\n
                        v7 = cgc_create_element(&v5, 0);\n
                        if (!v7)\n
                        {\n
                            cgc_printf(\"!!Failed to create element\\n
\", 0, a2, v15, a4);\n
                            v8 = 8;\n
                            break;\n
                        }\n
                        else if (cgc_element_in_set(v12, v7))\n
                        {\n
                            cgc_printf(\"!!Elements must be unique\\n
\", 0, a2, v15, a4);\n
                            cgc_free_element(v7);\n
                            cgc_free_set_array(v12);\n
                            v7 = 0;\n
                            v12 = 0;\n
                            v8 = 8;\n
                            goto LABEL_404b21;\n
                        }\n
                        else if (cgc_add_element_to_set(v12, v7))\n
                        {\n
                            cgc_printf(\"Failed to ad el\\n
\", 0, a2, v15, a4);\n
                            v8 = 8;\n
                            goto LABEL_404b21;\n
                        }\n
                    default:\n
                        v8 = 2;\n
                        goto LABEL_404af7;\n
                    }\n
                }\n
                if (*(v11) != 34)\n
                {\n
                    if (*(v11) == 32)\n
                    {\n
                        if (v8 == 6)\n
                        {\n
                            v9 = v11;\n
                            cgc_bzero(&v5, 0x100);\n
                            v17 = v10;\n
                            if (v11 - v17 > 15)\n
                            {\n
                                cgc_printf(\"!!Invalid set name length\\n
\", 0x100, a2, v17, a4);\n
                                v8 = 8;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                a2 = v11 - v10;\n
                                cgc_memcpy(&v5, v10, a2);\n
                                v7 = cgc_create_element(&v5, 0);\n
                                if (!v7)\n
                                {\n
                                    cgc_printf(\"!!Create element failed\\n
\", 0, a2, v17, a4);\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                                else if (cgc_element_in_set(v12, v7))\n
                                {\n
                                    cgc_printf(\"!!Elements must be unique\\n
\", a1, a2, v17, a4);\n
                                    cgc_free_element(v7);\n
                                    cgc_free_set_array(v12);\n
                                    v7 = 0;\n
                                    v12 = 0;\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                                else if (!cgc_add_element_to_set(v12, v7))\n
                                {\n
                                    v8 = 7;\n
                                }\n
                                else\n
                                {\n
                                    cgc_printf(\"!!Failed to add element\\n
\", a1, a2, v17, a4);\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                            }\n
                        }\n
                        goto LABEL_404af7;\n
                    }\n
                    if (*(v11) == 44)\n
                    {\n
                        v1 = v8;\n
                        if (v1 == 1)\n
                        {\n
                            v8 = 8;\n
                            cgc_printf(\"!!Malformed set\\n
\", a1, a2, v14, a4);\n
                        }\n
                        else if (v1 == 3)\n
                        {\n
                            cgc_printf(\"!!Improperly formated set\\n
\", a1, a2, v14, a4);\n
                            v8 = 8;\n
                            break;\n
                        }\n
                        else if (v1 != 6)\n
                        {\n
                            v8 = 5;\n
                        }\n
                        else\n
                        {\n
                            cgc_bzero(&v5, 0x100);\n
                            v18 = v10;\n
                            if (v11 - v18 > 15)\n
                            {\n
                                cgc_printf(\"!!Invalid set name length\\n
\", 0x100, a2, v18, a4);\n
                                v8 = 8;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                a2 = v11 - v10;\n
                                cgc_memcpy(&v5, v10, a2);\n
                                v7 = cgc_create_element(&v5, 0);\n
                                if (!v7)\n
                                {\n
                                    cgc_printf(\"!!Failed to create element\\n
\", 0, a2, v18, a4);\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                                else if (cgc_element_in_set(v12, v7))\n
                                {\n
                                    cgc_printf(\"!!Elements must be unique\\n
\", a1, a2, v18, a4);\n
                                    cgc_free_element(v7);\n
                                    cgc_free_set_array(v12);\n
                                    v7 = 0;\n
                                    v12 = 0;\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                                else if (!cgc_add_element_to_set(v12, v7))\n
                                {\n
                                    v8 = 5;\n
                                }\n
                                else\n
                                {\n
                                    cgc_printf(\"!!Failed to add element\\n
\", a1, a2, v18, a4);\n
                                    v8 = 8;\n
                                    break;\n
                                }\n
                            }\n
                        }\n
                        goto LABEL_404af7;\n
                    }\n
                    v0 = v8;\n
                    if (v0 != 1)\n
                    {\n
                        if (v0 == 4)\n
                        {\n
                            v8 = 8;\n
                            cgc_printf(\"!!Invalid character\\n
\", a1, a2, v14, a4);\n
                            break;\n
                        }\n
                        if (!(v0 == 5))\n
                            goto LABEL_404af7;\n
                    }\n
                    v8 = 6;\n
                    v10 = v11;\n
LABEL_404af7:\n
                    v11 += 1;\n
                }\n
                else\n
                {\n
                    v2 = v8;\n
                    if (v2 == 3)\n
                    {\n
                        v8 = 4;\n
                        cgc_bzero(&v5, 0x100);\n
                        v16 = v10;\n
                        if (v11 - v16 > 10)\n
                        {\n
                            cgc_printf(\"!!Invalid set data length\\n
\", 0x100, a2, v16, a4);\n
                            v8 = 8;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            a2 = v11 - v10;\n
                            cgc_memcpy(&v5, v10, a2);\n
                            v7 = cgc_create_element(&v5, 1);\n
                            if (!v7)\n
                            {\n
                                cgc_printf(\"Failed to cel\\n
\", 1, a2, v16, a4);\n
                                v8 = 8;\n
                                break;\n
                            }\n
                            else if (cgc_element_in_set(v12, v7))\n
                            {\n
                                cgc_printf(\"!!Elements must be unique\\n
\", a1, a2, v16, a4);\n
                                cgc_free_element(v7);\n
                                cgc_free_set_array(v12);\n
                                v7 = 0;\n
                                v12 = 0;\n
                                v8 = 8;\n
                                break;\n
                            }\n
                            else if (cgc_add_element_to_set(v12, v7))\n
                            {\n
                                cgc_printf(\"Failed to ad el\\n
\", a1, a2, v16, a4);\n
                                v8 = 8;\n
                                break;\n
                            }\n
                        }\n
                    }\n
                    if (v2 != 4 && v2 - 6 >= 2)\n
                    {\n
                        v8 = 3;\n
                        v10 = v11 + 1;\n
LABEL_40477e:\n
                        goto LABEL_404af7;\n
                    }\n
                    v8 = 8;\n
                    cgc_printf(\"!!Malformed set\\n
\", a1, a2, v14, a4);\n
                    goto LABEL_40477e;\n
                }\n
            }\n
        }\n
    }\n
LABEL_404b21:\n
    if (v8 != 2)\n
    {\n
        cgc_free_set_array(v12);\n
        v12 = 0;\n
        return v12;\n
    }\n
    return v12;\n
}\n
", "4213577:sub_404b49": null, "4213584:cgc_symmetric_difference": "long long cgc_symmetric_difference(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!(a0 && a1))\n
        return v3;\n
    v2 = cgc_set_difference(a0, a1);\n
    if (!v2)\n
        return v3;\n
    v1 = cgc_set_difference(a1, a0);\n
    if (!v1)\n
    {\n
        cgc_free_set_array(v2);\n
        v2 = 0;\n
        return v3;\n
    }\n
    v3 = cgc_unionset(v2, v1);\n
    cgc_free_set_array(v2);\n
    cgc_free_set_array(v1);\n
    return v3;\n
}\n
", "4213786:sub_404c1a": null, "4213792:cgc_set_difference": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_set_difference(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!(a0 && a1))\n
        return v3;\n
    if (!cgc_allocate(a0, a1, v5))\n
    {\n
        cgc_bzero(v3, 160);\n
        while (true)\n
        {\n
            if (v2 >= a0->field_20)\n
                return v3;\n
            v1 = cgc_element_in_set(a1, *(&a0[1].padding_0[4 + 8 * v2]));\n
            if (v1 == -1)\n
            {\n
                cgc_free_set_array(v3);\n
                v3 = 0;\n
                return v3;\n
            }\n
            if (!v1)\n
            {\n
                v0 = v3;\n
                if (cgc_add_element_to_set(v0, cgc_copy_element(*(&a0[1].padding_0[4 + 8 * v2]))))\n
                {\n
                    cgc_free_set_array(v3);\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
            v2 += 1;\n
        }\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4214095:sub_404d4f": null, "4214096:cgc_unionset": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_unionset(struct_0 *a0, struct_0 *a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!(a0 && a1))\n
        return v4;\n
    if (cgc_allocate(a0, a1, a2))\n
    {\n
        cgc_printf(\"!!Failed to allocate new nset\\n
\", a1, a2, a3, a4);\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_bzero(v4, 160);\n
    while (true)\n
    {\n
        if (v3 >= a0->field_20)\n
        {\n
            v3 = 0;\n
            while (true)\n
            {\n
                if (v3 >= a1->field_20)\n
                    return v4;\n
                v7 = v3;\n
                v2 = cgc_element_in_set(v4, *(&a1[1].padding_0[4 + 8 * v7]));\n
                if (v2 == -1)\n
                {\n
                    cgc_printf(\"!!!Error in intersect\\n
\", a1, a2, v7, a4);\n
                    cgc_free_set_array(v4);\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (!v2)\n
                {\n
                    v0 = v4;\n
                    v8 = v3;\n
                    if (cgc_add_element_to_set(v0, cgc_copy_element(*(&a1[1].padding_0[4 + 8 * v8]))))\n
                    {\n
                        cgc_printf(\"!!!Failed to add element in intersect\\n
\", a1, a2, v8, a4);\n
                        cgc_free_set_array(v4);\n
                        v4 = 0;\n
                        return v4;\n
                    }\n
                }\n
                v3 += 1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = v4;\n
            v6 = v3;\n
            if (cgc_add_element_to_set(v1, cgc_copy_element(*(&a0[1].padding_0[4 + 8 * v6]))))\n
            {\n
                cgc_printf(\"!!Failed to add element in union\\n
\", a1, a2, v6, a4);\n
                cgc_free_set_array(v4);\n
                v4 = 0;\n
                return v4;\n
            }\n
            v3 += 1;\n
        }\n
    }\n
}\n
", "4214566:sub_404f26": null, "4214576:cgc_intersect": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_intersect(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v5;  // rcx\n
    unsigned long v6;  // rcx\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!(a0 && a1))\n
        return v3;\n
    if (cgc_allocate(a0, a1, a2))\n
    {\n
        cgc_printf(\"!!Failed to allocate newset\\n
\", a1, a2, a3, a4);\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_bzero(v3, 160);\n
    while (true)\n
    {\n
        if (v2 >= a0->field_20)\n
            return v3;\n
        v5 = v2;\n
        v1 = cgc_element_in_set(a1, *(&a0[1].padding_0[4 + 8 * v5]));\n
        if (v1 == -1)\n
        {\n
            cgc_printf(\"!!Unknown error\\n
\", a1, a2, v5, a4);\n
            cgc_free_set_array(v3);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v1 == 1)\n
        {\n
            v0 = v3;\n
            v6 = v2;\n
            if (cgc_add_element_to_set(v0, cgc_copy_element(*(&a0[1].padding_0[4 + 8 * v6]))))\n
            {\n
                cgc_printf(\"!!Error adding element in intersect\\n
\", a1, a2, v6, a4);\n
                cgc_free_set_array(v3);\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4214926:sub_40508e": null, "4214928:cgc_parse_operations": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_parse_operations(unsigned int a0, char *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    char *v1;  // [bp-0x60]\n
    struct_0 *v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x4c]\n
    char v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x34]\n
    void* v7;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x24]\n
    void* v9;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v10;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_0 *v12;  // rcx\n
\n
    v10 = a1;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!a0)\n
    {\n
LABEL_4050ea:\n
    }\n
    else\n
    {\n
        if (!v10)\n
            goto LABEL_4050ea;\n
        while (true)\n
        {\n
            if (!*(v10))\n
            {\n
                if (v4 == 43)\n
                {\n
                    v2 = cgc_unionset(v9, v7, a2, a3, a4);\n
                }\n
                else if (v4 == 94)\n
                {\n
                    v2 = cgc_intersect(v9, v7, a2, a3, a4);\n
                }\n
                else if (v4 == 45)\n
                {\n
                    v2 = cgc_set_difference(v9, v7);\n
                }\n
                else if (v4 == 126)\n
                {\n
                    v2 = cgc_symmetric_difference(v9, v7);\n
                }\n
                else\n
                {\n
                    v2 = cgc_copy_set(v9);\n
                    if (!v2)\n
                    {\n
                        cgc_printf(\"!!Copy failed\\n
\", a1, a2, a3, a4);\n
                        break;\n
                    }\n
                }\n
                if (v2)\n
                {\n
                    cgc_strncpy(v2 + 16, a0, 15);\n
                    v0 = 0;\n
                    v0 = 0;\n
                    while (true)\n
                    {\n
                        v12 = v2;\n
                        if (v0 >= v12->field_20)\n
                            break;\n
                        if (!*((*((v2 + (v0 << 3) + 40)) + 8)) && !cgc_strcmp(*(*((v2 + (v0 << 3) + 40))), v2 + 16))\n
                        {\n
                            cgc_printf(\"!!A set cannot contain itself\\n
\", a1, 15, v12, a4);\n
                            cgc_free_set_array(v2);\n
                            v2 = 0;\n
                            break;\n
                        }\n
                        v0 += 1;\n
                    }\n
                }\n
            }\n
            if (*(v10) == 124)\n
            {\n
                if (!v9)\n
                {\n
                    v9 = cgc_parse_set(v10, a1, a2, a3, a4);\n
                    if (v9)\n
                    {\n
                        for (v10 += 1; *(v10) != 124; v10 += 1);\n
                        v8 = 1;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(\"!!Set parsing failed\\n
\", a1, a2, a3, a4);\n
                        break;\n
                    }\n
                }\n
                else if (v7)\n
                {\n
                    cgc_printf(\"!!Too many sets\\n
\", a1, a2, a3, a4);\n
                    break;\n
                }\n
                else\n
                {\n
                    v7 = cgc_parse_set(v10, a1, a2, a3, a4);\n
                    if (v7)\n
                    {\n
                        for (v10 += 1; *(v10) != 124; v10 += 1);\n
                        v6 = 1;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(\"!!Set parsing failed\\n
\", a1, a2, a3, a4);\n
                        break;\n
                    }\n
                }\n
                goto LABEL_4053f9;\n
            }\n
            if (*(v10) == 94)\n
            {\n
LABEL_405260:\n
                if (!v4)\n
                {\n
                    v4 = *(v10);\n
                    goto LABEL_4053f9;\n
                }\n
                else\n
                {\n
                    cgc_printf(\"!!Only one operation allowed.\\n
\", a1, a2, a3, a4);\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                if (*(v10) == 43)\n
                    goto LABEL_405260;\n
                if (*(v10) == 45)\n
                    goto LABEL_405260;\n
                if (*(v10) == 126)\n
                    goto LABEL_405260;\n
                if (cgc_isalnum(*(v10)))\n
                {\n
                    for (v1 = v10; cgc_isalnum(*(v10)); v10 += 1);\n
                    cgc_bzero(&v5, 16);\n
                    a3 = v1;\n
                    v3 = (v10 - a3);\n
                    v10 -= 1;\n
                    if (v3 > 15)\n
                    {\n
                        cgc_printf(\"!!Invalid set name length\\n
\", 16, a2, a3, a4);\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        a1 = v1;\n
                        a2 = v3;\n
                        cgc_memcpy(&v5, a1, a2);\n
                        if (v9)\n
                        {\n
                            if (v7)\n
                            {\n
                                cgc_printf(\"!!Too many sets\\n
\", a1, a2, a3, a4);\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v7 = cgc_retrieve_set(&v5);\n
                                if (!v7)\n
                                {\n
                                    cgc_printf(\"!!Nonexistant set: @s\\n
\", &v5, a2, a3, a4);\n
                                    break;\n
                                }\n
                            }\n
                        }\n
                        else\n
                        {\n
                            v9 = cgc_retrieve_set(&v5);\n
                            if (!v9)\n
                            {\n
                                cgc_printf(\"!!Nonexistant set: @s\\n
\", &v5, a2, a3, a4);\n
                                break;\n
                            }\n
                        }\n
                    }\n
                }\n
                else if (*(v10) != 32)\n
                {\n
                    cgc_printf(\"!!Invalid sets\\n
\", a1, a2, a3, a4);\n
                    break;\n
                }\n
                else\n
                {\n
                    v10 += 1;\n
                    continue;\n
                }\n
LABEL_4053f9:\n
                v10 += 1;\n
            }\n
        }\n
    }\n
    if (v7 && v6)\n
    {\n
        cgc_free_set_array(v7);\n
        v7 = 0;\n
    }\n
    if (!v9)\n
    {\n
        return v2;\n
    }\n
    else if (!v8)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_free_set_array(v9);\n
        v9 = 0;\n
        return v2;\n
    }\n
}\n
", "4216294:sub_4055e6": null, "4216304:cgc_handle_set_var": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    char *field_10;\n
} struct_1;\n
\n
long long cgc_handle_set_var(struct_1 *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x14]\n
\n
    v2 = -1;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        return v2;\n
    }\n
    else if (!a0->field_0)\n
    {\n
        return v2;\n
    }\n
    else if (!a0->field_10)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = cgc_parse_operations(a0->field_0, a0->field_10, a2, a3, a4);\n
        if (!v1)\n
        {\n
            cgc_printf(\"!!Error parsing sets\\n
\", a1, a2, a3, a4);\n
            return v2;\n
        }\n
        v0 = cgc_retrieve_set(&v1->padding_0[16]);\n
        if (!v0)\n
        {\n
            cgc_add_set(v1);\n
        }\n
        else\n
        {\n
            for (v2 = 0; v2 < v0->field_20; v2 += 1)\n
            {\n
                cgc_free_element(*(&v0[1].padding_0[4 + 8 * v2]));\n
                *(&v0[1].padding_0[4 + 8 * v2]) = 0;\n
            }\n
            for (v2 = 0; v2 < v1->field_20; v2 += 1)\n
            {\n
                *(&v0[1].padding_0[4 + 8 * v2]) = *(&v1[1].padding_0[4 + 8 * v2]);\n
            }\n
            v0->field_20 = v1->field_20;\n
            cgc_deallocate(a0, a1);\n
        }\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4216669:sub_40575d": null, "4216672:cgc_issubset": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_issubset(char *a0, char *a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x44]\n
    char v1;  // [bp-0x43]\n
    char v2;  // [bp-0x42]\n
    char v3;  // [bp-0x41]\n
    void* v4;  // [bp-0x40]\n
    void* v5;  // [bp-0x38]\n
    void* v6;  // [bp-0x30], Other Possible Types: unsigned long, unsigned long long *\n
    struct_0 *v7;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x1c]\n
    char *v9;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v10;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v12;  // rcx\n
    unsigned long v13;  // rcx\n
    struct_0 *v14;  // rcx\n
    unsigned long v15;  // rcx\n
    unsigned long long *v16;  // rax, Other Possible Types: unsigned long long, unsigned long\n
\n
    v10 = a0;\n
    v9 = a1;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!v10)\n
    {\n
LABEL_4057ad:\n
    }\n
    else\n
    {\n
        if (!v9)\n
            goto LABEL_4057ad;\n
        while (true)\n
        {\n
            v12 = *(v10);\n
            v3 = 0;\n
            if (v12)\n
                v3 = *(v10) == 32;\n
            if (!(v3 & 1))\n
                break;\n
            v10 += 1;\n
        }\n
        if (*(v10) == 124)\n
        {\n
            v7 = cgc_parse_set(v10, a1, a2, v12, a4);\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*((v10 + v8)) != 32)\n
                    v2 = *((v10 + v8));\n
                if (!(v2 & 1))\n
                    break;\n
                v8 += 1;\n
            }\n
            *((v10 + v8)) = 0;\n
            v7 = cgc_retrieve_set(v10);\n
        }\n
        if (!v7)\n
        {\n
            v16 = cgc_printf(\"!!Failed to parse left set\\n
\", a1, a2, v12, a4);\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v13 = *(v9);\n
                v1 = 0;\n
                if (v13)\n
                    v1 = *(v9) == 32;\n
                if (!(v1 & 1))\n
                    break;\n
                v9 += 1;\n
            }\n
            if (*(v9) == 124)\n
            {\n
                v6 = cgc_parse_set(v9, a1, a2, v13, a4);\n
            }\n
            else\n
            {\n
                v8 = 0;\n
                while (true)\n
                {\n
                    v0 = 0;\n
                    if (*((v9 + v8)) != 32)\n
                        v0 = *((v9 + v8));\n
                    if (!(v0 & 1))\n
                        break;\n
                    v8 += 1;\n
                }\n
                *((v9 + v8)) = 0;\n
                v6 = cgc_retrieve_set(v9);\n
            }\n
            if (!v6)\n
            {\n
                v16 = cgc_printf(\"!!Failed to parse right set\\n
\", a1, a2, v13, a4);\n
            }\n
            else\n
            {\n
                v8 = 0;\n
                while (true)\n
                {\n
                    v14 = v7;\n
                    if (v8 >= v14->field_20)\n
                    {\n
                        v16 = cgc_printf(\"TRUE\\n
\", a1, a2, v14, a4);\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v15 = v8;\n
                        if (cgc_element_in_set(v6, *((v7 + (v15 << 3) + 40))))\n
                        {\n
                            v8 += 1;\n
                        }\n
                        else\n
                        {\n
                            v16 = cgc_printf(\"FALSE\\n
\", a1, a2, v15, a4);\n
                            break;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v6)\n
        return v16;\n
    v16 = v6;\n
    if (*(v16))\n
        return v16;\n
    v16 = cgc_free_set_array(v6);\n
    v6 = 0;\n
}\n
", "4217402:sub_405a3a": null, "4217408:cgc_command_loop": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
    char padding_9[7];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    char field_8;\n
    char padding_9[7];\n
    char *field_10;\n
} struct_1;\n
\n
long long cgc_command_loop(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_1 *v0;  // [bp-0x120], Other Possible Types: struct_0 *\n
    char v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        cgc_bzero(&v1, 0x100);\n
        cgc_printf(\"> \", 0x100, 255, a3, a4);\n
        v2 = cgc_receive_until(&v1, 10, 255);\n
        if (v1 == 46)\n
        {\n
            cgc_exec_command(&v1, 10, 255, a3, a4);\n
        }\n
        else\n
        {\n
            v0 = cgc_parse_command_line(&v1, 10, 255, a3, a4);\n
            if (!v0)\n
                cgc__terminate(\"> \");\n
            if (v0->field_8 == 61)\n
            {\n
                cgc_handle_set_var(v0, 10, 255, a3, a4);\n
            }\n
            else if (v0->field_8 == 64)\n
            {\n
                cgc_issubset(v0->field_0, v0->field_10, 255, a3, a4);\n
            }\n
            cgc_deallocate(a0, 10);\n
        }\n
    }\n
}\n
", "4217676:sub_405b4c": null, "4217680:main": "int main(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = a0;\n
    *(&v0) = a1;\n
    cgc_command_loop(a0, a1, a2, a3, a4); /* do not return */\n
}\n
", "4217707:sub_405b6b": "int sub_405b6b()\n
{\n
    char v1;  // [bp+0x10]\n
    unsigned long long v2;  // rbp\n
\n
    v2 = *(&v1);\n
    return;\n
}\n
", "4217715:sub_405b73": null, "4217728:cgc_print_set": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_print_set(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned long v2;  // rcx\n
    unsigned long v3;  // rcx\n
    unsigned long long v4;  // rax\n
\n
    v0 = 0;\n
    if (!a0)\n
        return v4;\n
    cgc_printf(\"@s = |\", &a0->padding_0[16], a2, a3, a4);\n
    while (v0 < a0->field_20)\n
    {\n
        if (!*((*(&a0[1].padding_0[4 + 8 * v0]) + 8)))\n
        {\n
            v2 = v0;\n
            cgc_printf(\"@s\", *(*(&a0[1].padding_0[4 + 8 * v2])), a2, v2, a4);\n
        }\n
        else\n
        {\n
            v3 = v0;\n
            cgc_printf(\"\\\"@s\\\"\", *(*(&a0[1].padding_0[4 + 8 * v3])), a2, v3, a4);\n
        }\n
        v0 += 1;\n
        if (v0 != a0->field_20)\n
            cgc_printf(\",\", a1, a2, a0, a4);\n
    }\n
    v4 = cgc_printf(\"|\\n
\", a1, a2, a0, a4);\n
    return v4;\n
}\n
", "4217953:sub_405c61": null, "4217968:cgc_free_element": "long long cgc_free_element(unsigned int *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rax\n
\n
    if (a0)\n
    {\n
        v0 = *(&a0);\n
        cgc_strlen(*(&a0));\n
        cgc_deallocate(a0, v2);\n
        v3 = cgc_deallocate(a0, v2);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4218055:sub_405cc7": null, "4218064:cgc_copy_set": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_copy_set(struct_0 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    if (!a0)\n
        return v2;\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_bzero(v2, 160);\n
    while (true)\n
    {\n
        if (v1 >= a0->field_20)\n
            return v2;\n
        v0 = v2;\n
        if (cgc_add_element_to_set(v0, cgc_copy_element(*(&a0[1].padding_0[4 + 8 * v1]))))\n
        {\n
            cgc_free_set_array(v2);\n
            v2 = 0;\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4218273:sub_405da1": null, "4218288:cgc_add_element_to_set": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_add_element_to_set(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_0 *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 1;\n
    if (a0 && a1)\n
    {\n
        if (a0->field_20 >= 15)\n
            return v0;\n
        *(&v1[1].padding_0[4 + 8 * a0->field_20]) = a1;\n
        v3 = a0;\n
        v3->field_20 = v3->field_20 + 1;\n
        v0 = 0;\n
    }\n
    return v0;\n
}\n
", "4218399:sub_405e1f": null, "4218400:cgc_copy_element": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_copy_element(unsigned int a0[3])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        return v1;\n
    }\n
    else if (!cgc_allocate(a0, v3, v4))\n
    {\n
        v0 = cgc_strlen(*(&a0[0])) + 1;\n
        if (cgc_allocate(a0, v3, v4))\n
        {\n
            cgc_deallocate(a0, v3);\n
            v1 = 0;\n
            return v1;\n
        }\n
        cgc_bzero(*(&v1->field_0), v0);\n
        cgc_memcpy(*(&v1->field_0), *(&a0[0]), v0 - 1);\n
        v1->field_8 = a0[2];\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4218619:sub_405efb": null, "4218624:cgc_free_set_array": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_free_set_array(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: struct_0 *\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rax\n
\n
    v2 = a0;\n
    v1 = 0;\n
    if (!v2)\n
        return v5;\n
    for (v1 = 0; v1 < v2->field_20; v1 += 1)\n
    {\n
        v0 = *(*(&v2[1].padding_0[4 + 8 * v1]));\n
        cgc_strlen(*(*(&v2[1].padding_0[4 + 8 * v1])));\n
        cgc_deallocate(a0, v4);\n
        cgc_deallocate(a0, v4);\n
        *(&v2[1].padding_0[4 + 8 * v1]) = 0;\n
    }\n
    v5 = cgc_deallocate(a0, v4);\n
    v2 = 0;\n
    return v5;\n
}\n
", "4218821:sub_405fc5": null, "4218832:cgc_element_in_set": "typedef struct struct_1 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_element_in_set(struct_1 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
\n
    v3 = -1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v3;\n
    if (!a1)\n
        return v3;\n
    while (true)\n
    {\n
        if (v0 < a0->field_20)\n
        {\n
            if (!cgc_strcmp(a1->field_0, *(*(&a0[1].padding_0[4 + 8 * v0]))) && a1->field_8 == *((*(&a0[1].padding_0[4 + 8 * v0]) + 8)))\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4219042:sub_4060a2": null, "4219056:cgc_create_element": "long long cgc_create_element(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[3];  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rdx\n
\n
    *(&v1[0]) = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v1;\n
    if (a1 && a1 != 1)\n
        return v1;\n
    if (cgc_allocate(a0, a1, v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = cgc_strlen(a0);\n
    if (cgc_allocate(a0, a1, v3))\n
    {\n
        cgc_deallocate(a0, a1);\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_memcpy(*(&v1[0]), a0, v0);\n
    *((*(&v1[0]) + v0)) = 0;\n
    v1[2] = a1;\n
    return v1;\n
}\n
", "4219288:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_deallocate": null, "5242936:cgc_log10": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}