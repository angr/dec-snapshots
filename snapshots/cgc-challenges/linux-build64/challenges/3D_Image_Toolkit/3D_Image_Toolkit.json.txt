{"4202496:_init": "extern struct_0 *g_40a340;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a340;\n
    if (g_40a340)\n
        v1 = g_40a340();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a360;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a360;\n
    goto *(4236136);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_cos": "// attributes: PLT stub\n
int cgc_cos()\n
{\n
    ::libc.so.0::cgc_cos();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libc.so.0::cgc_sin();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4236112);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a338;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_40a348;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a350;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a350)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202995:sub_4021f3": null, "4203008:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203059:sub_402233": null, "4203072:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203123:sub_402273": null, "4203136:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0) && !cgc_islower(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203209:sub_4022c9": null, "4203216:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(a0) && !cgc_isdigit(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203289:sub_402319": null, "4203296:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 32 && a0 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203347:sub_402353": null, "4203360:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + -32;\n
    return v0;\n
}\n
", "4203420:sub_40239c": null, "4203424:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4203484:sub_4023dc": null, "4203488:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203579:sub_40243b": null, "4203584:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a1)\n
        {\n
            v0 = 0;\n
            if (cgc_receive(a0, a1, v5, v6))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            if (!v0)\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4203739:sub_4024db": null, "4203744:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 != a1)\n
        {\n
            v2[a0] = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return v2;\n
        }\n
    }\n
}\n
", "4203945:sub_4025a9": null, "4203952:cgc_link": "extern char lookaside;\n
\n
long long cgc_link(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long v5;  // rax\n
\n
    v3 = lookaside;\n
    if (!a0)\n
        return lookaside;\n
    v5 = a0;\n
    if (*(a0) <= 1016)\n
    {\n
        if (*(a0) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(a0) >> 3;\n
        *((a0 + 8)) = (&lookaside)[v2];\n
        v1 = a0;\n
        if (*(a0) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(a0) >> 3;\n
        (&lookaside)[v0] = v1;\n
        return &lookaside;\n
    }\n
    while (true)\n
    {\n
        if (!v3)\n
            return v5;\n
        if (!*((v3 + 8)))\n
        {\n
            *((v3 + 8)) = a0;\n
            *((a0 + 16)) = v3;\n
            *((a0 + 8)) = 0;\n
            return a0;\n
        }\n
        if (*(a0) < *(*((v3 + 8))))\n
        {\n
            *((a0 + 8)) = *((v3 + 8));\n
            *((a0 + 16)) = v3;\n
            *((*((v3 + 8)) + 16)) = a0;\n
            v5 = v3;\n
            *((v5 + 8)) = a0;\n
            return v3;\n
        }\n
        v5 = *((v3 + 8));\n
        v3 = v5;\n
    }\n
}\n
", "4204331:sub_40272b": null, "4204336:cgc_add_freelist_block": "extern struct_0 *lookaside;\n
\n
long long cgc_add_freelist_block(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned long long *v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long *v8;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = 0;\n
    v0 = 0;\n
    v2 += 4;\n
    v2 = v2 + 4095 & 0xfffff000;\n
    if (cgc_allocate(a0, v4, v5, v6))\n
    {\n
        cgc_printf(\"[ERROR] Allocating a free list block failed: $d\\n
\", v2);\n
        cgc__terminate(\"[ERROR] Allocating a free list block failed: $d\\n
\");\n
    }\n
    cgc_bzero(v1, v2);\n
    *(v1) = v2 - 4;\n
    if (!lookaside)\n
    {\n
        v8 = v1;\n
        lookaside = v8;\n
        return v1;\n
    }\n
    v8 = cgc_link(v1);\n
    return v8;\n
}\n
", "4204528:cgc_free": "long long cgc_free(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (a0)\n
        *(&v0) = a0 - 4;\n
    return cgc_link(*(&v0));\n
}\n
", "4204586:sub_40282a": null, "4204592:cgc_init_freelist": "extern struct_0 *lookaside;\n
\n
long long cgc_init_freelist()\n
{\n
    unsigned long long v0[3];  // [bp-0x18]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    v1[0] = 0;\n
    v0[0] = 0;\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        cgc_printf(\"[ERROR] Malloc fail terminate\\n
\");\n
        cgc__terminate(\"[ERROR] Malloc fail terminate\\n
\");\n
    }\n
    cgc_bzero(lookaside, 0x1000);\n
    v1[0] = lookaside;\n
    v0[0] = v1 + 1;\n
    v1[0] = 0;\n
    v1[1] = v0;\n
    v1[2] = 0;\n
    v0[0] = 4068;\n
    v0[2] = v1;\n
    v0[1] = 0;\n
    return v0;\n
}\n
", "4204784:cgc_unlink": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_unlink(struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_1 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (!a0)\n
        return v2;\n
    if (a0->field_10)\n
        v0->field_10->field_8 = a0->field_8;\n
    v2 = a0;\n
    if (!a0->field_8)\n
        return v2;\n
    v2 = a0->field_8;\n
    *((v2 + 16)) = a0->field_10;\n
}\n
", "4204885:sub_402955": null, "4204896:cgc_freelist_alloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern struct_0 *lookaside;\n
\n
long long cgc_freelist_alloc(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!lookaside)\n
        cgc_init_freelist();\n
    for (v1 = lookaside; v1; v1 = v1->field_8)\n
    {\n
        if (v1->field_0 >= a0)\n
            break;\n
    }\n
    if (!v1)\n
    {\n
        cgc_add_freelist_block(a0);\n
        v2 = cgc_freelist_alloc(a0);\n
        return v2;\n
    }\n
    cgc_unlink(v1);\n
    if (*(v1) - a0 < 24)\n
    {\n
        v2 = v1 + 4;\n
        return v2;\n
    }\n
    v0 = v1 + 4 + a0;\n
    *(v0) = *(v1) - (a0 + 4);\n
    *(v1) = a0;\n
    cgc_link(v0);\n
    v2 = v1 + 4;\n
    return v2;\n
}\n
", "4205177:sub_402a79": null, "4205184:cgc_calloc": "long long cgc_calloc(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v0 = cgc_malloc(v1);\n
    if (!v0)\n
    {\n
        v2 = v0;\n
        return v2;\n
    }\n
    v1 = v1 + 7 & 4294967288;\n
    cgc_bzero(v0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4205289:sub_402ae9": null, "4205296:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern struct_1 lookaside;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30], Other Possible Types: unsigned long long\n
    struct_0 *v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long v3;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v4;  // [bp-0x10]\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 < 8)\n
        v3 = 8;\n
    v3 = v3 + 7 & 4294967288;\n
    if (v3 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v3 >> 3;\n
    if (!v2)\n
    {\n
        v4 = cgc_freelist_alloc(v3);\n
        return v4;\n
    }\n
    for (v2 = v0; v2 < 128; v2 += 1)\n
    {\n
        if ((&lookaside.field_0)[v2])\n
            break;\n
    }\n
    if (v2 != 128)\n
    {\n
        v1 = (&lookaside.field_0)[v2];\n
        (&lookaside.field_0)[v2] = v1->field_8;\n
        v4 = &v1->padding_0[4];\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v3);\n
    return v4;\n
}\n
", "4205598:sub_402c1e": null, "4205600:cgc_round": "long long cgc_round()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205726:sub_402c9e": null, "4205728:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v7;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v7 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v7;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205878:sub_402d36": null, "4205888:cgc_seed_prng_array": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_seed_prng_array(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14], Other Possible Types: unsigned long\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a1;\n
    cgc_bzero(&state, 128);\n
    state_n = 0;\n
    if (v2 > 32)\n
        v2 = 32;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        (&state)[v1] = a0[v1];\n
    }\n
    v4 = v2;\n
    while (true)\n
    {\n
        v1 = v4;\n
        if (v1 >= 32)\n
            break;\n
        v0 = (&state)[v1 - 1 & 31];\n
        (&state)[v1] = (v0 ^ (v0 >> 30) + v1) * 524287;\n
        v4 = v1 + 1;\n
    }\n
    return v4;\n
}\n
", "4206102:sub_402e16": null, "4206112:cgc_seed_prng": "long long cgc_seed_prng(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    return cgc_seed_prng_array(&a0, 1);\n
}\n
", "4206143:sub_402e3f": null, "4206144:cgc_prng": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v8 = (&state)[state_n];\n
    v7 = (&state)[state_n + 3 & 31];\n
    v6 = (&state)[state_n + 24 & 31];\n
    v5 = (&state)[state_n + 10 & 31];\n
    v4 = (&state)[state_n + 31 & 31];\n
    v3 = v8 ^ v7 ^ (v7 >> 8);\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    (&state)[state_n] = v1;\n
    (&state)[state_n + 31 & 31] = v0;\n
    state_n = state_n + 31 & 31;\n
    return v0;\n
}\n
", "4206453:sub_402f75": null, "4206464:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    if (a0 > a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0 != a1)\n
    {\n
        v2 = a1 - a0 + 1;\n
        if (!v2)\n
        {\n
            v4 = cgc_prng();\n
            return v4;\n
        }\n
        v1 = (0 CONCAT -1) /m v2;\n
        do\n
        {\n
            v3 = cgc_prng();\n
        } while (v3 >= v2 * v1);\n
        v0 = a0;\n
        v4 = v0 + (0 CONCAT v3) /m v1;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = a0;\n
        return v4;\n
    }\n
}\n
", "4206632:sub_403028": null, "4206640:cgc_WRAPPER_PUTC": "long long cgc_WRAPPER_PUTC(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rcx\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (cgc_transmit(a0, a1, a2, v4))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4206723:sub_403083": null, "4206736:cgc_WRAPPER_OUTC": "long long cgc_WRAPPER_OUTC(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    a0[a2] = a1;\n
    return a2 + 1;\n
}\n
", "4206777:sub_4030b9": null, "4206784:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    struct struct_0 *field_100;\n
} struct_0;\n
\n
long long cgc_WRAPPER_BUFFER_PUTC(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    if (a0->field_100 >= 0x100)\n
    {\n
        for (v1 = a0; a0->field_100 > 0; v1 = *(&v0) + v1)\n
        {\n
            if (cgc_transmit(a0, a1, a2, rcx<8>))\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
            else if (*(&v0))\n
            {\n
                v6 = a0->field_100 - *(&v0);\n
                *(&a0->field_100) = v6;\n
            }\n
            else\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
        }\n
    }\n
    *(&v6) = a0->field_100;\n
    *(&a0->field_100) = v6 + 1;\n
    (&a0->field_0)[v6] = a1;\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4207043:sub_4031c3": null, "4207056:cgc_putchar": "long long cgc_putchar(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    if (cgc_transmit(a0, v2, v3, v4))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4207126:sub_403216": null, "4207136:cgc_puts": "long long cgc_puts(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 0;\n
    v1 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        if (v0 == v1)\n
        {\n
            cgc_putchar(10);\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (cgc_transmit(a0, v5, v6, v7))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (*(&v2))\n
        {\n
            v0 = *(&v2) + v0;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4207300:sub_4032c4": null, "4207312:cgc_vprintf_buffered": "long long cgc_vprintf_buffered(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x158]\n
    unsigned long v1;  // [bp-0x150]\n
    unsigned int v2;  // [bp-0x144]\n
    void* v3;  // [bp-0x140]\n
    unsigned long long v4;  // [bp-0x138]\n
    char v5;  // [bp-0x130]\n
    unsigned short v6;  // [bp-0x30]\n
    unsigned long long v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v7 = cgc_WRAPPER_BUFFER_PUTC;\n
    v6 = 0;\n
    v4 = &v5;\n
    v3 = 0;\n
    v2 = cgc_wrapper_output(v4, v7, v3, a0, a1);\n
    v1 = &v5;\n
    while (true)\n
    {\n
        if (v6 > 0)\n
        {\n
            if (cgc_transmit(v4, v7, v3, a0))\n
            {\n
                v8 = -1;\n
                return v8;\n
            }\n
            if (!*(&v0))\n
            {\n
                v8 = -1;\n
                return v8;\n
            }\n
            v6 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v8 = v2;\n
            return v8;\n
        }\n
    }\n
}\n
", "4207579:sub_4033db": null, "4207584:cgc_wrapper_output": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
long long cgc_wrapper_output(unsigned long long a0, struct struct_3 **a1, unsigned long a2, char *a3, struct_1 *a4)\n
{\n
    unsigned int v0;  // [bp-0x170]\n
    unsigned int *v1;  // [bp-0x168], Other Possible Types: unsigned long\n
    struct_1 *v2;  // [bp-0x160]\n
    unsigned int v3;  // [bp-0x154]\n
    struct struct_0 **v4;  // [bp-0x150], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0x148]\n
    unsigned int v6;  // [bp-0x13c]\n
    unsigned int *v7;  // [bp-0x138], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0x130]\n
    unsigned int *v9;  // [bp-0x128]\n
    unsigned int v10;  // [bp-0x11c]\n
    unsigned long long *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int *v13;  // [bp-0x108]\n
    unsigned int v14;  // [bp-0xfc]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xcc]\n
    unsigned int *v21;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v22;  // [bp-0xc0]\n
    unsigned int v23;  // [bp-0xb4]\n
    unsigned long long *v24;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v25;  // [bp-0xa8]\n
    unsigned int v26;  // [bp-0x9c]\n
    unsigned long v27;  // [bp-0x98]\n
    char v28;  // [bp-0x8b]\n
    char v29;  // [bp-0x8a]\n
    char v30;  // [bp-0x89]\n
    unsigned int *v31;  // [bp-0x88]\n
    unsigned long v32;  // [bp-0x80]\n
    unsigned long v33;  // [bp-0x78]\n
    unsigned int v34;  // [bp-0x6c]\n
    unsigned int v35;  // [bp-0x68]\n
    unsigned int v36;  // [bp-0x64]\n
    unsigned long long v37;  // [bp-0x60]\n
    char *v38;  // [bp-0x58]\n
    char *v39;  // [bp-0x50]\n
    char v40;  // [bp-0x41]\n
    unsigned int v41;  // [bp-0x40]\n
    unsigned int v42;  // [bp-0x3c]\n
    unsigned int v43;  // [bp-0x38]\n
    unsigned int v44;  // [bp-0x34]\n
    char *v45;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v46;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_3 **v47;  // [bp-0x18]\n
    struct_1 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned long long *v51;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned long long *v53;  // rdx\n
    struct_1 *v54;  // rcx\n
    unsigned long long v55;  // rdx\n
    unsigned int *v56;  // rax\n
    struct_1 *v57;  // rcx\n
    unsigned int *v58;  // rdx\n
    struct_1 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned int *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned int *v63;  // rdx\n
    struct_1 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    unsigned int *v66;  // rax\n
    struct_1 *v67;  // rcx\n
    unsigned int *v68;  // rdx\n
    unsigned long long v69;  // rdx\n
    unsigned long long *v70;  // rax\n
    struct_1 *v71;  // rcx\n
    unsigned long long *v72;  // rdx\n
    unsigned long long v73;  // rdx\n
    unsigned int *v74;  // rax\n
    struct_1 *v75;  // rcx\n
    unsigned int *v76;  // rdx\n
    struct_1 *v77;  // rcx\n
    unsigned long long v78;  // rdx\n
    struct struct_0 **v79;  // rax\n
    struct_1 *v80;  // rcx\n
    struct struct_0 **v81;  // rdx\n
    struct_1 *v82;  // rcx\n
    unsigned long long v83;  // rdx\n
    unsigned int *v84;  // rax\n
    struct_1 *v85;  // rcx\n
    unsigned int *v86;  // rdx\n
\n
    v47 = a1;\n
    v46 = a2;\n
    v45 = a3;\n
    v44 = 0;\n
    v43 = 0;\n
    v42 = 0;\n
    v41 = 0;\n
    while (true)\n
    {\n
        if (!*(v45))\n
            return v46;\n
        v40 = *(v45);\n
        v45 += 1;\n
        if (v40 != 36)\n
        {\n
            v46 = v47(a0, v40, v46);\n
        }\n
        else\n
        {\n
            v41 = 0;\n
            v42 = 0;\n
            v43 = 0;\n
            v44 = 0;\n
            if (!*(v45))\n
                return v46;\n
            if (*(v45) != 36)\n
            {\n
                if (*(v45) == 45)\n
                {\n
                    v44 |= 1;\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (cgc_isdigit(*(v45)))\n
                {\n
                    if (*(v45) == 48)\n
                        v44 |= 4;\n
                    for (v39 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v43 = cgc_atoi(v39);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (*(v45) == 46)\n
                {\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                    for (v38 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v41 = cgc_atoi(v38);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                v27 = *(v45) - 88;\n
                switch (v27)\n
                {\n
                case 0:\n
                    v44 |= 8;\n
                    v16 = a4;\n
                    v17 = v16->field_0;\n
                    if (v17 > 40)\n
                    {\n
                        v67 = v16;\n
                        v68 = v67->field_8;\n
                        v67->field_8 = &v68[2];\n
                        v15 = v68;\n
                    }\n
                    else\n
                    {\n
                        v64 = v16;\n
                        v65 = v17;\n
                        v66 = v65 + v64->field_10;\n
                        v64->field_0 = v65 + 8;\n
                        v15 = v66;\n
                    }\n
                    v34 = *(v15);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v34, 16, v43, v41);\n
                    break;\n
                case 11:\n
                    v2 = a4;\n
                    v3 = v2->field_0;\n
                    if (v3 > 40)\n
                    {\n
                        v85 = v2;\n
                        v86 = v85->field_8;\n
                        v85->field_8 = &v86[2];\n
                        v1 = v86;\n
                    }\n
                    else\n
                    {\n
                        v82 = v2;\n
                        v83 = v3;\n
                        v84 = v83 + v82->field_10;\n
                        v82->field_0 = v83 + 8;\n
                        v1 = v84;\n
                    }\n
                    v30 = *(v1);\n
                    v28 = v30;\n
                    v29 = 0;\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, &v28, v43, 0);\n
                    break;\n
                case 12:\n
                    v22 = a4;\n
                    v23 = v22->field_0;\n
                    if (v23 > 40)\n
                    {\n
                        v57 = v22;\n
                        v58 = v57->field_8;\n
                        v57->field_8 = &v58[2];\n
                        v21 = v58;\n
                    }\n
                    else\n
                    {\n
                        v54 = v22;\n
                        v55 = v23;\n
                        v56 = v55 + v54->field_10;\n
                        v54->field_0 = v55 + 8;\n
                        v21 = v56;\n
                    }\n
                    v36 = *(v21);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v36, 10, v43, v41);\n
                    break;\n
                case 13:\n
                    v44 |= 16;\n
                    v8 = a4;\n
                    v9 = &v8->field_4;\n
                    v10 = v8->field_4;\n
                    if (v10 > 160)\n
                    {\n
                        v75 = v8;\n
                        v76 = v75->field_8;\n
                        v75->field_8 = &v76[2];\n
                        v7 = v76;\n
                    }\n
                    else\n
                    {\n
                        v73 = v10;\n
                        v74 = v73 + v8->field_10;\n
                        *(v9) = v73 + 16;\n
                        v7 = v74;\n
                    }\n
                    v32 = *(v7);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 14:\n
                    v12 = a4;\n
                    v13 = &v12->field_4;\n
                    v14 = v12->field_4;\n
                    if (v14 > 160)\n
                    {\n
                        v71 = v12;\n
                        v72 = v71->field_8;\n
                        v71->field_8 = &v72[1];\n
                        v11 = v72;\n
                    }\n
                    else\n
                    {\n
                        v69 = v14;\n
                        v70 = v69 + v12->field_10;\n
                        *(v13) = v69 + 16;\n
                        v11 = v70;\n
                    }\n
                    v33 = *(v11);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 22:\n
                    v5 = a4;\n
                    v6 = v5->field_0;\n
                    if (v6 > 40)\n
                    {\n
                        v80 = v5;\n
                        v81 = v80->field_8;\n
                        v80->field_8 = &v81[1];\n
                        v4 = v81;\n
                    }\n
                    else\n
                    {\n
                        v77 = v5;\n
                        v78 = v6;\n
                        v79 = v78 + v77->field_10;\n
                        v77->field_0 = v78 + 8;\n
                        v4 = v79;\n
                    }\n
                    v31 = *(v4);\n
                    *(v31) = v46;\n
                    break;\n
                case 27:\n
                    v25 = a4;\n
                    v26 = v25->field_0;\n
                    if (v26 > 40)\n
                    {\n
                        v52 = v25;\n
                        v53 = v52->field_8;\n
                        v52->field_8 = &v53[1];\n
                        v24 = v53;\n
                    }\n
                    else\n
                    {\n
                        v49 = v25;\n
                        v50 = v26;\n
                        v51 = v50 + v49->field_10;\n
                        v49->field_0 = v50 + 8;\n
                        v24 = v51;\n
                    }\n
                    v37 = *(v24);\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, v37, v43, v41);\n
                    break;\n
                case 32:\n
                    v19 = a4;\n
                    v20 = v19->field_0;\n
                    if (v20 > 40)\n
                    {\n
                        v62 = v19;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[2];\n
                        v18 = v63;\n
                    }\n
                    else\n
                    {\n
                        v59 = v19;\n
                        v60 = v20;\n
                        v61 = v60 + v59->field_10;\n
                        v59->field_0 = v60 + 8;\n
                        v18 = v61;\n
                    }\n
                    v35 = *(v18);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v35, 16, v43, v41);\n
                    break;\n
                default:\n
                    break;\n
                }\n
                v45 += 1;\n
            }\n
            else\n
            {\n
                v46 = v47(a0, 36, v46);\n
                continue;\n
            }\n
        }\n
    }\n
}\n
", "4209530:sub_403b7a": null, "4209536:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf_buffered(a0, &v15);\n
    return v14;\n
}\n
", "4209696:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4209860:sub_403cc4": null, "4209872:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, char *a1, void* a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x28]\n
\n
    v2 = &cgc_WRAPPER_OUTC;\n
    v1 = 0;\n
    v0 = cgc_wrapper_output(a0, v2, v1, a1, a2);\n
    v2(a0, 0, v0);\n
    return v0;\n
}\n
", "4209972:sub_403d34": null, "4209984:cgc_printf_int_to_string": "long long cgc_printf_int_to_string(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x14], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rcx\n
\n
    v3 = a0;\n
    v2 = a3;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a2) = 48;\n
        v4 = 1;\n
        return v4;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a1 >> 32;\n
        v3 = (0 CONCAT v3) /m a1;\n
        if (a1 != 16)\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a2[v6] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a2[v7] = v0 + 48;\n
        }\n
        else if ((v2 & 8))\n
        {\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            a2[v8] = v0 + 55;\n
        }\n
        else\n
        {\n
            v9 = v1;\n
            v1 = v9 + 1;\n
            a2[v9] = v0 + 87;\n
        }\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4210276:sub_403e64": null, "4210288:cgc_printf_helper_int": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf_helper_int(unsigned long long a0, struct struct_1 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned int v9, unsigned int a6)\n
{\n
    struct_0 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    struct_0 *v2;  // [bp-0x50]\n
    char v3;  // [bp-0x41]\n
    void* v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_1 **v8;  // [bp-0x18]\n
    unsigned long long v10;  // rax\n
    unsigned long v11;  // rcx\n
    unsigned long long v12;  // rax\n
\n
    v8 = a1;\n
    v7 = a2;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a4 == 10 && v6 < 0)\n
    {\n
        v3 = 1;\n
        v6 = -(v6);\n
        v5 += 1;\n
    }\n
    v2 = cgc_printf_int_to_string(v6, a4, &v1, a6);\n
    v5 = &v2[v5];\n
    if (a5 > 0 && v5 < a5)\n
        v4 = a5 - v5;\n
    if (v9 > 0)\n
    {\n
        a6 |= 4;\n
        if (v2 < v9)\n
            v4 = v9 - v2;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a6 & 4))\n
        {\n
            v7 = v8(a0, 45, v7);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v10 = v4;\n
            v4 = v10 - 1;\n
            if (v10 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                v7 = v8(a0, 32, v7);\n
            else\n
                v7 = v8(a0, 48, v7);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v7 = v8(a0, 45, v7);\n
        v3 = 0;\n
    }\n
    for (v0 = v2; v0 > 0; v0 += 1)\n
    {\n
        v11 = v0 + 1;\n
        v7 = v8(a0, (&v1)[v11], v7, v11);\n
    }\n
    if (!(a6 & 1))\n
        return v7;\n
    while (true)\n
    {\n
        v12 = v4;\n
        v4 = v12 - 1;\n
        if (v12 <= 0)\n
            break;\n
        v7 = v8(a0, 32, v7);\n
    }\n
    return v7;\n
}\n
", "4210925:sub_4040ed": null, "4210928:cgc_printf_float_to_string": "long long cgc_printf_float_to_string(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_10;  // tmp #10\n
    int tmp_12;  // tmp #12\n
    int tmp_11;  // tmp #11\n
    char v0;  // [bp-0x7d]\n
    char v1;  // [bp-0x7c]\n
    char v2;  // [bp-0x7b]\n
    unsigned short v3;  // [bp-0x7a]\n
    char v4;  // [bp-0x77]\n
    unsigned short v5;  // [bp-0x76]\n
    char v6;  // [bp-0x73]\n
    char v7;  // [bp-0x72]\n
    char v8;  // [bp-0x71]\n
    unsigned long long v9;  // [bp-0x70]\n
    unsigned short v10;  // [bp-0x62]\n
    char v11;  // [bp-0x5f]\n
    unsigned short v12;  // [bp-0x5e]\n
    unsigned short v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x5a]\n
    unsigned long v15;  // [bp-0x58]\n
    unsigned short v16;  // [bp-0x4c]\n
    char v17;  // [bp-0x49]\n
    unsigned long v18;  // [bp-0x48], Other Possible Types: unsigned long long\n
    char *v19;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v20;  // [bp-0x2c]\n
    unsigned long v21;  // [bp-0x18]\n
    char *v22;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v24;  // xmm0lq\n
    unsigned long long v25;  // xmm0lq\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rcx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rcx\n
    int v33;  // xmm0\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rcx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rcx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    char *v46;  // rax, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rcx\n
    unsigned long v54;  // rcx\n
    unsigned long v56;  // rcx\n
    unsigned long v57;  // rcx\n
    unsigned long v58;  // rcx\n
    unsigned long v59;  // rcx\n
    unsigned long v60;  // rcx\n
    unsigned long v61;  // rcx\n
    unsigned long v62;  // rcx\n
    unsigned int v64;  // eax\n
    unsigned long v65;  // rcx\n
\n
    v21 = v24;\n
    v20 = a2;\n
    v19 = 0;\n
    cgc_pow();\n
    v18 = 0x4024000000000000;\n
    v25 = v21;\n
    if ((((CmpF(v25, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v26 = v19;\n
        v19 = v26 + 1;\n
        *((a1 + v26)) = 48;\n
        v27 = v19;\n
        v19 = v27 + 1;\n
        *((a1 + v27)) = 46;\n
        for (v17 = 0; v17 < a0; v17 += 1)\n
        {\n
            v29 = v19;\n
            v19 = v29 + 1;\n
            *((a1 + v29)) = 48;\n
        }\n
        if ((v20 & 16))\n
        {\n
            v34 = v19;\n
            v19 = v34 + 1;\n
            *((a1 + v34)) = 101;\n
            v35 = v19;\n
            v19 = v35 + 1;\n
            *((a1 + v35)) = 43;\n
            v36 = v19;\n
            v19 = v36 + 1;\n
            *((a1 + v36)) = 48;\n
            v37 = v19;\n
            v19 = v37 + 1;\n
            *((a1 + v37)) = 48;\n
            v38 = v19;\n
            v19 = v38 + 1;\n
            *((a1 + v38)) = 48;\n
        }\n
        v22 = v19;\n
        return v22;\n
    }\n
    if ((((CmpF(v21, v21) & 69) >> 2) & 1))\n
    {\n
        v30 = v19;\n
        v19 = v30 + 1;\n
        *((a1 + v30)) = 78;\n
        v31 = v19;\n
        v19 = v31 + 1;\n
        *((a1 + v31)) = 97;\n
        v32 = v19;\n
        v19 = v32 + 1;\n
        *((a1 + v32)) = 78;\n
        v22 = v19;\n
        return v22;\n
    }\n
    v33 = (0 CONCAT v21) & 170141183460469231722463931679029329919;\n
    if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v39 = v19;\n
        v19 = v39 + 1;\n
        *((a1 + v39)) = 73;\n
        v40 = v19;\n
        v19 = v40 + 1;\n
        *((a1 + v40)) = 78;\n
        v41 = v19;\n
        v19 = v41 + 1;\n
        *((a1 + v41)) = 70;\n
        v22 = v19;\n
        return v22;\n
    }\n
    if (!(CmpF(v21, 0x4202a05f20000000) & 1))\n
        v20 |= 16;\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) == 1)\n
        v21 = (0 CONCAT v18) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    else\n
        v21 = (0 CONCAT v18 ^ 0x8000000000000000) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    cgc_log10();\n
    v16 = v21;\n
    if ((v20 & 16))\n
    {\n
        v14 = v16 - a0;\n
        if ((((CmpF(0x3ff0000000000000, v21) & 69) | ((CmpF(0x3ff0000000000000, v21) & 69) >> 6)) & 1) == 1)\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        else\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        v18 = v15;\n
    }\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v21 ^= 0x8000000000000000;\n
        v19[a1] = 45;\n
        v19 += 1;\n
    }\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    *(&v33) = v18;\n
    if ((((CmpF(v33, v21) & 69) | ((CmpF(v33, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v43 = v19;\n
        v19 = v43 + 1;\n
        *((a1 + v43)) = 48;\n
        v44 = v19;\n
        v19 = v44 + 1;\n
        *((a1 + v44)) = 46;\n
        v11 = 1;\n
    }\n
    else if (v16 < 0)\n
    {\n
        *(&v33) = v21;\n
        if ((((CmpF(v33, v18) & 69) | ((CmpF(v33, v18) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
        {\n
            v45 = v19;\n
            v19 = v45 + 1;\n
            *((a1 + v45)) = 48;\n
            v46 = a1;\n
            v47 = v19;\n
            v19 = v47 + 1;\n
            *((a1 + v47)) = 46;\n
            v10 = v16;\n
            while (true)\n
            {\n
                *(&v46) = v10 + 1;\n
                v10 = v46;\n
                if (v46 >= 0)\n
                    break;\n
                v46 = a1;\n
                v48 = v19;\n
                v19 = v48 + 1;\n
                *((a1 + v48)) = 48;\n
                v12 += 1;\n
            }\n
            v11 = 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v16 < 0)\n
        {\n
            *(&v33) = v21;\n
            v1 = !((CmpF(v33, v18) & 69 | (CmpF(v33, v18) & 69) >> 6) & 1);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        cgc_pow();\n
        v9 = 0x4024000000000000;\n
        *(&v33) = v9;\n
        if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) == 1)\n
        {\n
LABEL_404781:\n
            if ((((CmpF(v16, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                *(&v33) = v21;\n
                if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
                {\n
                    v56 = v19;\n
                    v19 = v56 + 1;\n
                    *((a1 + v56)) = 46;\n
                    v11 = 1;\n
                }\n
            }\n
            if (v12 >= a0)\n
                break;\n
            v16 -= 1;\n
        }\n
        else\n
        {\n
            v33 = (0 CONCAT v9) & 170141183460469231722463931679029329919;\n
            if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x7ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                goto LABEL_404781;\n
            tmp_10 = DivV(tmp_12, tmp_11);\n
            v33 = tmp_10;\n
            cgc_floor();\n
            v8 = v33;\n
            v21 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v9) + (0 CONCAT v21);\n
            if ((v20 & 16) && !v11)\n
            {\n
                if (!v13)\n
                    v13 = v16;\n
                if (!v8)\n
                {\n
                    v13 -= 1;\n
                }\n
                else\n
                {\n
                    v52 = v19;\n
                    v19 = v52 + 1;\n
                    *((a1 + v52)) = v8 + 48;\n
                    v53 = v19;\n
                    v19 = v53 + 1;\n
                    *((a1 + v53)) = 46;\n
                    v11 = 1;\n
                }\n
                goto LABEL_404777;\n
            }\n
            if ((((CmpF(0, v16) & 69) | ((CmpF(0, v16) & 69) >> 6)) & 1) != 1 && !v11)\n
            {\n
                v50 = v19;\n
                v19 = v50 + 1;\n
                *((a1 + v50)) = 48;\n
                v51 = v19;\n
                v19 = v51 + 1;\n
                *((a1 + v51)) = 46;\n
                v11 = 1;\n
            }\n
            v54 = v19;\n
            v19 = v54 + 1;\n
            *((a1 + v54)) = v8 + 48;\n
            if (v11)\n
                v12 += 1;\n
LABEL_404777:\n
            goto LABEL_404781;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v11)\n
            v0 = v12 < a0;\n
        if (!(v0 & 1))\n
            break;\n
        v57 = v19;\n
        v19 = v57 + 1;\n
        *((a1 + v57)) = 48;\n
        v12 += 1;\n
    }\n
    if ((v20 & 16))\n
    {\n
        v58 = v19;\n
        v19 = v58 + 1;\n
        *((a1 + v58)) = 101;\n
        if (v13 >= 0)\n
        {\n
            v60 = v19;\n
            v19 = v60 + 1;\n
            *((a1 + v60)) = 43;\n
        }\n
        else\n
        {\n
            v13 = -(v13);\n
            v59 = v19;\n
            v19 = v59 + 1;\n
            *((a1 + v59)) = 45;\n
        }\n
        if (v13)\n
        {\n
            v6 = 0;\n
            cgc_log10();\n
            v5 = v13;\n
            for (v4 = v5; v4 < 2; v4 += 1)\n
            {\n
                v62 = v19;\n
                v19 = v62 + 1;\n
                *((a1 + v62)) = 48;\n
                v6 += 1;\n
            }\n
            while (true)\n
            {\n
                tmp_10 = v6;\n
                v6 += 1;\n
                if (tmp_10 >= 3)\n
                    break;\n
                cgc_pow();\n
                v3 = 0;\n
                v64 = v13;\n
                v2 = (v64 >> 31 CONCAT v64) /m v3;\n
                v65 = v19;\n
                v19 = v65 + 1;\n
                *((a1 + v65)) = v2 + 48;\n
                v13 -= (v3 * v2);\n
                v5 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            for (v7 = 0; v7 < 3; v7 += 1)\n
            {\n
                v61 = v19;\n
                v19 = v61 + 1;\n
                *((a1 + v61)) = 48;\n
            }\n
        }\n
    }\n
    v22 = v19;\n
    return v22;\n
}\n
", "4213274:sub_404a1a": null, "4213280:cgc_printf_helper_float": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_printf_helper_float(unsigned long long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    struct_1 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x49]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned long v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_0 **v9;  // [bp-0x18]\n
    unsigned long v11;  // xmm0lq\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rax\n
\n
    v9 = a1;\n
    v8 = a2;\n
    v7 = v11;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
    {\n
        v7 ^= 0x8000000000000000;\n
        v3 = 1;\n
        v5 += 1;\n
    }\n
    if (!a4)\n
        v2 = cgc_printf_float_to_string(6, &v1, a5);\n
    else\n
        v2 = cgc_printf_float_to_string(a4, &v1, a5);\n
    v5 = v2 + v5;\n
    if (v6 > 0 && v5 < v6)\n
        v4 = v6 - v5;\n
    if (!(a5 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a5 & 4))\n
        {\n
            v8 = v9(a0, 45, v8);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v12 = v4;\n
            v4 = v12 - 1;\n
            if (v12 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
                v8 = v9(a0, 32, v8);\n
            else\n
                v8 = v9(a0, 48, v8);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v8 = v9(a0, 45, v8);\n
        v3 = 0;\n
    }\n
    for (v0 = 0; v0 < v2; v0 += 1)\n
    {\n
        v13 = v0;\n
        v8 = v9(a0, (&v1)[v13], v8, v13);\n
    }\n
    if (!(a5 & 1))\n
        return v8;\n
    while (true)\n
    {\n
        v14 = v4;\n
        v4 = v14 - 1;\n
        if (v14 <= 0)\n
            break;\n
        v8 = v9(a0, 32, v8);\n
    }\n
    return v8;\n
}\n
", "4213927:sub_404ca7": null, "4213936:cgc_printf_helper_string": "long long cgc_printf_helper_string(unsigned long long a0, struct struct_0 **a1, unsigned long a2, char *a3, unsigned long a4, unsigned long a5, unsigned int v6)\n
{\n
    void* v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct struct_0 **v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x10]\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx\n
    unsigned long long v11;  // rax\n
\n
    v4 = a1;\n
    v3 = a2;\n
    if (!a5 && !a4)\n
    {\n
        for (v2 = a3; *(v2); v2 += 1)\n
        {\n
            v7 = v2;\n
            v3 = v4(a0, *(v7), v3, v7);\n
        }\n
        v5 = v3;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v2);\n
    v0 = 0;\n
    if (a5 > 0 && v1 > a5)\n
        v1 = a5;\n
    if (a4 > 0 && v1 < a4)\n
        v0 = a4 - v1;\n
    if (!(v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v8 = v0;\n
            v0 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(v6 & 4))\n
                v3 = v4(a0, 32, v3);\n
            else\n
                v3 = v4(a0, 48, v3);\n
        }\n
    }\n
    while (true)\n
    {\n
        v9 = v1;\n
        v1 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v10 = v2;\n
        v2 = v10 + 1;\n
        v3 = v4(a0, *(v10), v3, v10);\n
    }\n
    if ((v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v11 = v0;\n
            v0 = v11 - 1;\n
            if (v11 <= 0)\n
                break;\n
            v3 = v4(a0, 32, v3);\n
        }\n
    }\n
    v5 = v3;\n
    return v5;\n
}\n
", "4214470:sub_404ec6": null, "4214480:cgc_rand": "long long cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4214498:sub_404ee2": null, "4214512:cgc_srand": "long long cgc_srand(unsigned long a0)\n
{\n
    return cgc_seed_prng(a0);\n
}\n
", "4214537:sub_404f09": null, "4214544:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    for (v0 = 0; cgc_isspace(*(v2)); v2 += 1);\n
    if (!*(v2))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v2) == 45)\n
    {\n
        v0 = 1;\n
        v2 += 1;\n
    }\n
    for (; cgc_isdigit(*(v2)); v1 = v1 * 10 + *(v5) - 48)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    if (v0)\n
    {\n
        v3 = -(v1);\n
        return v3;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214770:sub_404ff2": null, "4214784:cgc_atof": "double cgc_atof(long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    for (v1 = a0; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == 46)\n
        {\n
            *(v1) = 0;\n
            v1 += 1;\n
            break;\n
        }\n
    }\n
    v4 = cgc_atoi(v2);\n
    if (!*(v1))\n
        return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
    v3 = cgc_atoi(v1);\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1)\n
            v0 = cgc_isdigit(*(v1));\n
        if (!(v0 & 1))\n
            break;\n
        tmp_12 = DivV(tmp_14, tmp_13);\n
        *(&v3) = tmp_12;\n
        v1 += 1;\n
    }\n
    return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
}\n
", "4215058:sub_405112": null, "4215072:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    for (v0 = v2; *(v1); *(v5) = tmp_19)\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    *(v2) = 0;\n
    return v0;\n
}\n
", "4215160:sub_405178": null, "4215168:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4215325:sub_40521d": null, "4215328:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    for (v0 = v3; v1 >= 4; v1 -= 4)\n
    {\n
        *(v3) = *(v2);\n
        v3 += 4;\n
        v2 += 4;\n
    }\n
    for (; v1 > 0; v1 -= 1)\n
    {\n
        *(v3) = *(v2);\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return v0;\n
}\n
", "4215491:sub_4052c3": null, "4215504:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned long v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x40], Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x24], Other Possible Types: unsigned long\n
    char v6[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v6) = a0;\n
    v5 = a2;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v6)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    if (v5 >= 16)\n
        v5 = 16;\n
    for (; cgc_isspace(*(v6)); v6 += 1);\n
    if (*(v6) == 45)\n
    {\n
        v3 = 1;\n
        *(&v6) = v6 + 1;\n
    }\n
    else if (*(v6) == 43)\n
    {\n
        *(&v6) = v6 + 1;\n
    }\n
    if (v5 != 16 && !(!v5))\n
        goto LABEL_4053ed;\n
    if (*(v6) != 48)\n
    {\n
LABEL_4053ed:\n
        if (v5 && !(v5 == 2))\n
            goto LABEL_405446;\n
        if (*(v6) == 48)\n
        {\n
            if (*((v6 + 1)) != 98 && !(*((v6 + 1)) == 66))\n
                goto LABEL_405446;\n
            *(&v6) = v6 + 2;\n
            v5 = 2;\n
        }\n
LABEL_405446:\n
    }\n
    else\n
    {\n
        if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
            goto LABEL_4053ed;\n
        *(&v6) = v6 + 2;\n
        v5 = 16;\n
    }\n
    if (!v5)\n
    {\n
        if (*(v6) == 48)\n
            v5 = 8;\n
        else\n
            v5 = 10;\n
    }\n
    v2 = 0;\n
    if (v3)\n
        v2 = -0x80000000;\n
    else\n
        v2 = 2147483647;\n
    v1 = (0 CONCAT v2) /m v5 >> 64;\n
    v2 = (0 CONCAT v2) /m v5;\n
    while (*(v6))\n
    {\n
        v0 = *(v6);\n
        if (cgc_isdigit(v0))\n
        {\n
            v0 -= 48;\n
        }\n
        else\n
        {\n
            if (!cgc_isalpha(v0))\n
                break;\n
            if (cgc_isupper(v0))\n
                v0 -= 55;\n
            else\n
                v0 -= 87;\n
        }\n
        if (v0 >= v5)\n
            break;\n
        if (v4 > v2)\n
        {\n
LABEL_405582:\n
            break;\n
        }\n
        else if (v4 != v2)\n
        {\n
LABEL_405587:\n
            v4 *= v5;\n
            v4 = v0 + v4;\n
            v6 += 1;\n
        }\n
        else\n
        {\n
            if (v0 <= v1)\n
                goto LABEL_405587;\n
            goto LABEL_405582;\n
        }\n
    }\n
    if (a1)\n
        *(a1) = v6;\n
    if (v3)\n
    {\n
        v7 = -(v4);\n
        return v7;\n
    }\n
    v7 = v4;\n
    return v7;\n
}\n
", "4216306:sub_4055f2": null, "4216320:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4216386:sub_405642": null, "4216400:cgc_bzero": "long long cgc_bzero(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // rcx\n
\n
    for (v0 = a1; v0; v2[1 + a0] = 0)\n
    {\n
        v2 = v0;\n
        v0 = v2 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4216466:sub_405692": null, "4216480:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
\n
    v3 = a0;\n
    v2 = a2;\n
    v1 = v3;\n
    for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v2 >= 4; v2 -= 4)\n
    {\n
        *(v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; v2 > 0; v2 -= 1)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = a1;\n
    }\n
    return v1;\n
}\n
", "4216651:sub_40574b": null, "4216656:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = v1;\n
        if (v0 >= cgc_strlen(a0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (a0[v1] != a1)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4216810:sub_4057ea": null, "4216816:cgc_strtok": "extern struct_0 *StrtokNext;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!a1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v4)\n
    {\n
        if (StrtokNext)\n
        {\n
            v4 = StrtokNext;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a1, *(v4)))\n
            v0 = *(v4);\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 1;\n
    }\n
    if (!*(v4))\n
    {\n
        StrtokNext = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v4);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= v1)\n
        {\n
            StrtokNext = 0;\n
            v5 = v4;\n
            return v5;\n
        }\n
        if (cgc_strchr(a1, *((v4 + v3))))\n
            break;\n
        v3 += 1;\n
    }\n
    *((v4 + v3)) = 0;\n
    for (v2 = v3 + 1; v2 < v1; v2 += 1)\n
    {\n
        if (!cgc_strchr(a1, *((v4 + v2))))\n
        {\n
            StrtokNext = v4 + v2;\n
            v5 = v4;\n
            return v5;\n
        }\n
        *((v4 + v2)) = 0;\n
    }\n
    if (v2 == v1)\n
        StrtokNext = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4217310:sub_4059de": null, "4217312:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x21]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    if (v2 && !v1)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!v2 && v1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (!v2 && !v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(v1))\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        else if (*(v2) >= *(v1))\n
        {\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    if (*(v2) && !*(v1))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!*(v2) && *(v1))\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217681:sub_405b51": null, "4217696:cgc_strcat": "long long cgc_strcat(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v2 = cgc_strlen(a0);\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = v1;\n
            if (v0 >= cgc_strlen(a1))\n
                break;\n
            a0[v2] = a1[v1];\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        a0[v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217870:sub_405c0e": null, "4217872:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x32]\n
    char v1;  // [bp-0x31]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v1 = v2[a0];\n
            v0 = v2[a1];\n
            if (v1 < v0)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            else if (v1 <= v0)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v3 = 1;\n
                return v3;\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4218033:sub_405cb1": null, "4218048:cgc_Push": "long long cgc_Push(unsigned long long *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned long long *v3;  // rax, Other Possible Types: unsigned long\n
\n
    if (!a1)\n
    {\n
        return v3;\n
    }\n
    else if (!a0)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v0 = cgc_malloc(10);\n
        cgc_memcpy(v0, a1, 10);\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 > 409)\n
                break;\n
            if (a0[v1])\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v3 = a0;\n
                a0[v1] = v0;\n
                break;\n
            }\n
        }\n
        return v3;\n
    }\n
}\n
", "4218221:sub_405d6d": null, "4218224:cgc_RunTask": "long long cgc_RunTask(unsigned long a0, struct struct_0 **a1, unsigned long a2)\n
{\n
    unsigned short v0;  // [bp-0x1e]\n
    unsigned short v1;  // [bp-0x1c]\n
    unsigned short v2;  // [bp-0x1a]\n
    struct struct_0 **v3;  // [bp-0x18]\n
    unsigned short v5;  // ax\n
    unsigned short v6;  // dx\n
    unsigned long long *v7;  // rdx\n
    unsigned long long v8;  // rax\n
\n
    v3 = a1;\n
    v2 = a2;\n
    v1 = 409;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v5 = v1;\n
        v1 = v5 - 1;\n
        if (!v5)\n
            break;\n
        v6 = v0;\n
        v0 = v6 + 1;\n
        v7 = v6;\n
        v8 = v3(*((a0 + v7 * 8)), v2, v7, a0);\n
    }\n
    return rax<8>;\n
}\n
", "4218332:sub_405ddc": null, "4218336:cgc_ReadFile": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
    char field_8;\n
    char field_9;\n
} struct_0;\n
\n
long long cgc_ReadFile(unsigned long long *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = 0x1000;\n
    v4 = cgc_seed_prng(*(0x4347c000));\n
    v0 = 0;\n
    while (v2 > 0)\n
    {\n
        v1 = cgc_malloc(10);\n
        v1->field_0 = cgc_prng();\n
        v1->field_2 = cgc_prng();\n
        v1->field_4 = cgc_prng();\n
        v1->field_6 = cgc_prng();\n
        v1->field_7 = cgc_prng();\n
        v1->field_8 = cgc_prng();\n
        v1->field_9 = cgc_prng();\n
        cgc_Push(a0, v1);\n
        v2 -= 10;\n
        v4 = cgc_free(v1);\n
    }\n
    return v4;\n
}\n
", "4218545:sub_405eb1": null, "4218560:cgc_NewFile": "long long cgc_NewFile(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned long long *v1;  // [bp-0x1e], Other Possible Types: unsigned short\n
    unsigned short v2;  // [bp-0x1c]\n
    unsigned short v3;  // [bp-0x1a]\n
    unsigned long long *v5;  // rcx\n
    unsigned long long v6;  // rax\n
\n
    v3 = 4090;\n
    cgc_printf(\"Please submit your new file data ($d bytes):\\n
\", v3, a2, a3, a4);\n
    cgc_receive_bytes(a1, v3);\n
    v2 = 0;\n
    *(&v1) = 0;\n
    while (true)\n
    {\n
        v5 = v3;\n
        if (v2 >= v5)\n
            break;\n
        *(&v5) = v1;\n
        v1 = v5 + 1;\n
        v0 = *((a0 + v5 * 8));\n
        cgc_memcpy(v0, a1 + v2, 2);\n
        v2 += 2;\n
        cgc_memcpy(v0 + 2, a1 + v2, 2);\n
        v2 += 2;\n
        cgc_memcpy(v0 + 4, a1 + v2, 2);\n
        v2 += 2;\n
        cgc_memcpy(v0 + 6, a1 + v2, 1);\n
        v2 += 1;\n
        cgc_memcpy(v0 + 7, a1 + v2, 1);\n
        v2 += 1;\n
        cgc_memcpy(v0 + 8, a1 + v2, 1);\n
        v2 += 1;\n
        cgc_memcpy(v0 + 9, a1 + v2, 1);\n
        v2 += 1;\n
    }\n
    v6 = cgc_printf(\"New file loaded\\n
\", a1, 1, v5, a4);\n
    return v6;\n
}\n
", "4218995:sub_406073": null, "4219008:cgc_ShowPixel": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
    char field_8;\n
    char field_9;\n
} struct_0;\n
\n
long long cgc_ShowPixel(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"XYZ:  ($d, $d, $d)\\n
\", a0->field_0, a0->field_2, a0->field_4, a4);\n
    cgc_printf(\"RGBA: (#$02x$02x$02x$02x)\\n
\", a0->field_6, a0->field_7, a0->field_8, a0->field_9);\n
    return cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
}\n
", "4219124:sub_4060f4": null, "4219136:cgc_CheckFile": "long long cgc_CheckFile(struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned short v1;  // [bp-0x12]\n
    unsigned long v3;  // ax, Other Possible Types: unsigned long long, unsigned short\n
\n
    v3 = a1;\n
    v1 = a1;\n
    if (!a0)\n
        return v3;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= v1)\n
            break;\n
        cgc_printf(\"XYZ:  ($d, $d, $d)\\n
\", a0[v0]->field_0, a0[v0]->field_2, a0[v0]->field_4, a4);\n
        cgc_printf(\"RGBA: (#$02x$02x$02x$02x)\\n
\", a0[v0]->field_6, a0[v0]->field_7, a0[v0]->field_8, a0[v0]->field_9);\n
        cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
        v0 += 1;\n
    }\n
    return v3;\n
}\n
", "4219367:sub_4061e7": null, "4219376:cgc_RotateX": "long long cgc_RotateX(unsigned short a0[3], unsigned long long a1)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned long v4;  // [bp-0x38]\n
    unsigned long v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned long v7;  // [bp-0x20]\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
\n
    v7 = cgc_degree_to_radian(a1);\n
    v1 = a0[1];\n
    cgc_cos(a0, a1, v9, v10, v11, v12, *(&v0));\n
    v3 = cgc_multiply(a0, a1, v9, v10, v11, v12);\n
    v2 = a0[2];\n
    cgc_sin(a0, a1, v9, v10, v11, v12);\n
    a0[1] = v3 - cgc_multiply(a0, a1, v9, v10, v11, v12);\n
    v4 = a0[1];\n
    cgc_sin(a0, a1, v9, v10, v11, v12);\n
    v6 = cgc_multiply(a0, a1, v9, v10, v11, v12);\n
    v5 = a0[2];\n
    cgc_cos(a0, a1, v9, v10, v11, v12);\n
    a0[2] = v6 + cgc_multiply(a0, a1, v9, v10, v11, v12);\n
    return a0;\n
}\n
", "4219623:sub_4062e7": null, "4219632:cgc_degree_to_radian": "long long cgc_degree_to_radian(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc_divide();\n
    return cgc_multiply(a0, v2, v3, v4, v5, v6);\n
}\n
", "4219703:sub_406337": null, "4219712:cgc_multiply": "double cgc_multiply()\n
{\n
    return Conv(128->64, (0x0<128> * Conv(64->128, xmm1lq<8>)));\n
}\n
", "4219742:sub_40635e": null, "4219744:cgc_RotateY": "long long cgc_RotateY(unsigned short a0[3], unsigned long long a1)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned long v4;  // [bp-0x38]\n
    unsigned long v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned long v7;  // [bp-0x20]\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
\n
    v7 = cgc_degree_to_radian(a1);\n
    v1 = a0[2];\n
    cgc_sin(a0, a1, v9, v10, v11, v12, *(&v0));\n
    v3 = cgc_multiply();\n
    v2 = a0[0];\n
    cgc_cos(a0, a1, v9, v10, v11, v12);\n
    a0[0] = v3 + cgc_multiply();\n
    v4 = a0[2];\n
    cgc_cos(a0, a1, v9, v10, v11, v12);\n
    v6 = cgc_multiply();\n
    v5 = a0[0];\n
    cgc_sin(a0, a1, v9, v10, v11, v12);\n
    a0[2] = v6 - cgc_multiply();\n
    return a0;\n
}\n
", "4219988:sub_406454": null, "4220000:cgc_RotateZ": "long long cgc_RotateZ(unsigned short a0[2], unsigned long long a1)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned long v4;  // [bp-0x38]\n
    unsigned long v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned long v7;  // [bp-0x20]\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
\n
    v7 = cgc_degree_to_radian(a1);\n
    v1 = a0[0];\n
    cgc_cos(a0, a1, v9, v10, v11, v12, *(&v0));\n
    v3 = cgc_multiply();\n
    v2 = a0[1];\n
    cgc_sin(a0, a1, v9, v10, v11, v12);\n
    a0[0] = v3 - cgc_multiply();\n
    v4 = a0[0];\n
    cgc_sin(a0, a1, v9, v10, v11, v12);\n
    v6 = cgc_multiply();\n
    v5 = a0[1];\n
    cgc_cos(a0, a1, v9, v10, v11, v12);\n
    a0[1] = v6 + cgc_multiply();\n
    return a0;\n
}\n
", "4220244:sub_406554": null, "4220256:cgc_SkewX": "long long cgc_SkewX(unsigned short *a0, unsigned long a1)\n
{\n
    *(a0) = a1 + *(a0);\n
    return a0;\n
}\n
", "4220296:sub_406588": null, "4220304:cgc_SkewY": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long cgc_SkewY(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_2 = a0->field_2 + a1;\n
    return a0;\n
}\n
", "4220339:sub_4065b3": null, "4220352:cgc_SkewZ": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
} struct_0;\n
\n
long long cgc_SkewZ(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_4 = a0->field_4 + a1;\n
    return a0;\n
}\n
", "4220387:sub_4065e3": null, "4220400:cgc_Scale": "long long cgc_Scale(unsigned short a0[3], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned short v5[3];  // rax, Other Possible Types: unsigned long\n
\n
    v5 = a1;\n
    if (v5 < 1)\n
        return v5;\n
    v5 = a1;\n
    if (v5 <= 200)\n
    {\n
        v3 = cgc_divide();\n
        v2 = cgc_multiply();\n
        v1 = cgc_multiply();\n
        v0 = cgc_multiply();\n
        if (v2 <= 65535)\n
        {\n
            a0[0] = v2;\n
        }\n
        else if (a0[0] < 0)\n
        {\n
            a0[0] = 0x8000;\n
        }\n
        else\n
        {\n
            a0[0] = 32767;\n
        }\n
        if (v1 <= 65535)\n
        {\n
            a0[1] = v1;\n
        }\n
        else if (a0[1] < 0)\n
        {\n
            a0[1] = 0x8000;\n
        }\n
        else\n
        {\n
            a0[1] = 32767;\n
        }\n
        if (v0 <= 65535)\n
        {\n
            a0[2] = v0;\n
            return a0;\n
        }\n
        if (a0[2] < 0)\n
        {\n
            v5 = a0;\n
            a0[2] = 0x8000;\n
        }\n
        else\n
        {\n
            v5 = a0;\n
            a0[2] = 32767;\n
        }\n
        return v5;\n
    }\n
}\n
", "4220781:sub_40676d": null, "4220784:cgc_divide": "double cgc_divide()\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    int tmp_28;  // tmp #28\n
    int tmp_30;  // tmp #30\n
    int tmp_29;  // tmp #29\n
    unsigned long v2;  // xmm0lq\n
\n
    v0 = v2;\n
    tmp_28 = DivV(tmp_30, tmp_29);\n
    return tmp_28;\n
}\n
", "4220819:sub_406793": null, "4220832:cgc_Brightness": "long long cgc_Brightness(char a0[9], unsigned long a1)\n
{\n
    unsigned short v0;  // [bp-0x18]\n
    unsigned short v1;  // [bp-0x16]\n
    unsigned short v2;  // [bp-0x14]\n
    char v4[9];  // rax, Other Possible Types: unsigned long\n
\n
    v4 = a1;\n
    if (v4 < -255)\n
        return v4;\n
    v4 = a1;\n
    if (v4 <= 255)\n
    {\n
        v2 = a0[6] + a1;\n
        v1 = a0[7] + a1;\n
        v0 = a0[8] + a1;\n
        if (v2 > 255)\n
        {\n
            a0[6] = 255;\n
        }\n
        else if (v2 < 0)\n
        {\n
            a0[6] = 0;\n
        }\n
        else\n
        {\n
            a0[6] = v2;\n
        }\n
        if (v1 > 255)\n
        {\n
            a0[7] = 255;\n
        }\n
        else if (v1 < 0)\n
        {\n
            a0[7] = 0;\n
        }\n
        else\n
        {\n
            a0[7] = v1;\n
        }\n
        if (v0 > 255)\n
        {\n
            v4 = a0;\n
            a0[8] = 255;\n
        }\n
        else if (v0 < 0)\n
        {\n
            v4 = a0;\n
            a0[8] = 0;\n
        }\n
        else\n
        {\n
            v4 = a0;\n
            a0[8] = v0;\n
        }\n
        return v4;\n
    }\n
}\n
", "4221159:sub_4068e7": null, "4221168:cgc_Opacity": "typedef struct struct_0 {\n
    char padding_0[9];\n
    char field_9;\n
} struct_0;\n
\n
long long cgc_Opacity(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_9 = a1;\n
    return a0;\n
}\n
", "4221198:sub_40690e": null, "4221200:cgc_cosine": "long long cgc_cosine(unsigned long a0)\n
{\n
    unsigned short v0;  // [bp-0xa]\n
\n
    v0 = a0;\n
    return cgc_cos();\n
}\n
", "4221234:sub_406932": null, "4221248:cgc_sine": "long long cgc_sine(unsigned long a0)\n
{\n
    unsigned short v0;  // [bp-0xa]\n
\n
    v0 = a0;\n
    return cgc_sin();\n
}\n
", "4221282:sub_406962": null, "4221296:cgc_ClosestMatch": "extern unsigned int green[4];\n
extern unsigned int red_blue[4];\n
\n
long long cgc_ClosestMatch(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    char v5;  // [bp-0xf]\n
    char v6;  // [bp-0xe]\n
    char v7;  // [bp-0xd]\n
\n
    v7 = 255;\n
    v6 = 0;\n
    v2 = 1;\n
    if (a0)\n
        v2 = a0 == 2;\n
    *(&v5) = ((v2 & 1) ? 4 : 8);\n
    v4 = v5;\n
    v3 = 0;\n
    while (v3 < v5)\n
    {\n
        if (!a0)\n
        {\n
LABEL_4069f4:\n
            if (a1 - red_blue[v3] < 0)\n
                v1 = -(a1 - red_blue[v3]);\n
            else\n
                v1 = a1 - red_blue[v3];\n
            v6 = v1;\n
            goto LABEL_406aa1;\n
        }\n
        else\n
        {\n
            if (a0 == 2)\n
                goto LABEL_4069f4;\n
            if (a1 - green[v3] >= 0)\n
                v0 = a1 - green[v3];\n
            else\n
                v0 = -(a1 - green[v3]);\n
            v6 = v0;\n
LABEL_406aa1:\n
            if (v6 < v7)\n
            {\n
                v7 = v6;\n
                v4 = v3;\n
            }\n
            v3 += 1;\n
        }\n
    }\n
    return v4;\n
}\n
", "4221654:sub_406ad6": null, "4221664:cgc_Compress": "long long cgc_Compress(struct struct_0 **a0, unsigned long a1, char *a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned short v1;  // [bp-0x34], Other Possible Types: char\n
    unsigned short v2;  // [bp-0x32]\n
    char v3[9];  // [bp-0x30]\n
    char v4;  // [bp-0x22]\n
    char v5;  // [bp-0x21]\n
    unsigned long v7;  // rcx\n
    unsigned long long v8;  // rax\n
\n
    if (!a0)\n
        return v8;\n
    v5 = 0;\n
    v4 = 0;\n
    *(&v3[0]) = 0;\n
    v2 = 2863;\n
    v1 = 0;\n
    for (v0 = 0; v1 < v2; v1 += 1)\n
    {\n
        v5 = 0;\n
        v7 = v0;\n
        v0 = v7 + 1;\n
        *(&v3[0]) = a0[v7];\n
        v5 += (cgc_ClosestMatch(0, v3[6]) * 32);\n
        v5 += (cgc_ClosestMatch(1, v3[7]) * 8);\n
        v5 += cgc_ClosestMatch(2, v3[8]);\n
        cgc_memcpy(a1 + v1, v3, 2);\n
        *(&v1) = v1 + 2;\n
        cgc_memcpy(a1 + v1, &v3[2], 2);\n
        *(&v1) = v1 + 2;\n
        cgc_memcpy(a1 + v1, &v3[4], 2);\n
        *(&v1) = v1 + 2;\n
        cgc_memcpy(a1 + v1, &v5, 1);\n
    }\n
    v8 = cgc_memcpy(a2, &v1, 2);\n
    return v8;\n
}\n
", "4222079:sub_406c7f": null, "4222080:cgc_Decompress": "extern unsigned int green;\n
extern unsigned int red_blue;\n
\n
long long cgc_Decompress(char *a0, char *a1, unsigned short *a2)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2f]\n
    char v2;  // [bp-0x2e]\n
    char v3;  // [bp-0x2d]\n
    unsigned int v4;  // [bp-0x2c]\n
    char v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rcx\n
    unsigned long v12;  // rcx\n
\n
    v6 = 0;\n
    v5 = 0;\n
    for (v4 = 0; v6 < *(a2); a1[v12] = 255)\n
    {\n
        cgc_memcpy(&a1[v5], &a0[v6], 2);\n
        *(&v5) = v5 + 2;\n
        v6 += 2;\n
        cgc_memcpy(&a1[v5], &a0[v6], 2);\n
        *(&v5) = v5 + 2;\n
        v6 += 2;\n
        cgc_memcpy(&a1[v5], &a0[v6], 2);\n
        *(&v5) = v5 + 2;\n
        v6 += 2;\n
        v8 = v6;\n
        v6 = v8 + 1;\n
        v3 = a0[v8];\n
        v2 = (v3 & 224) >> 5;\n
        v1 = (v3 & 24) >> 3;\n
        v0 = v3 & 7;\n
        v9 = v5;\n
        *(&v5) = v9 + 1;\n
        a1[v9] = (&red_blue)[v2];\n
        v10 = v5;\n
        *(&v5) = v10 + 1;\n
        a1[v10] = (&green)[v1];\n
        v11 = v5;\n
        *(&v5) = v11 + 1;\n
        a1[v11] = (&red_blue)[v0];\n
        v12 = v5;\n
        v5 = v12 + 1;\n
    }\n
    return cgc_memcpy(a2, &v5, 2);\n
}\n
", "4222517:sub_406e35": null, "4222528:cgc_WriteOut": "typedef struct struct_0 {\n
    char padding_0[9];\n
    char field_9;\n
} struct_0;\n
\n
long long cgc_WriteOut(struct struct_0 **a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned short v1;  // [bp-0x1e]\n
    unsigned short v2;  // [bp-0x1c]\n
    unsigned short v3;  // [bp-0x1a]\n
    unsigned long v5;  // ax, Other Possible Types: unsigned long long, unsigned short\n
\n
    v5 = a2;\n
    v3 = a2;\n
    if (!a0)\n
        return v5;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v5 = v2;\n
        if (v5 >= v3)\n
            break;\n
        v0 = a0[v1];\n
        v2 += 6;\n
        cgc_memcpy(&v0->padding_0[6], a1 + v2, 1);\n
        v2 += 1;\n
        cgc_memcpy(&v0->padding_0[7], a1 + v2, 1);\n
        v2 += 1;\n
        cgc_memcpy(&v0->padding_0[8], a1 + v2, 1);\n
        v2 += 1;\n
        v0->field_9 = 255;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return v5;\n
}\n
", "4222794:sub_406f4a": null, "4222800:cgc_menu": "extern unsigned int g_4081a8;\n
\n
long long cgc_menu(unsigned long a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x2858]\n
    unsigned int v1;  // [bp-0x2854]\n
    unsigned int v2;  // [bp-0x2850]\n
    unsigned long v3;  // [bp-0x2848]\n
    unsigned long v4;  // [bp-0x2840]\n
    char **v5;  // [bp-0x2838]\n
    unsigned short v6;  // [bp-0x282e]\n
    char v7;  // [bp-0x282b]\n
    unsigned short v8;  // [bp-0x282a]\n
    char v9;  // [bp-0x2828]\n
    char v10;  // [bp-0x1c28]\n
    void* v11;  // [bp-0x1020], Other Possible Types: unsigned long\n
    char v12;  // [bp-0x1018]\n
    char v13;  // [bp-0xc]\n
    char v14;  // [bp-0xa]\n
    char v15;  // [bp-0x9]\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
\n
    v11 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 409;\n
    v5 = cgc_malloc(v6 * 8);\n
    cgc_memset(v5, 0, v6 * 8);\n
    cgc_ReadFile(v5);\n
    while (true)\n
    {\n
        if (!v15)\n
        {\n
            v18 = cgc_free(v5);\n
            return v18;\n
        }\n
        cgc_receive_bytes(&v15, 1);\n
        *(&v2) = v15 - 1;\n
        switch (*(&v2))\n
        {\n
        case 0:\n
            cgc_printf(\"NEW_FILE selected\\n
\", 1, a2, &g_4081a8, a4);\n
            a2 = 0x1000;\n
            cgc_memset(&v12, 0, 0x1000);\n
            cgc_NewFile(v5, &v12, 0x1000, 4227496, a4);\n
            break;\n
        case 1:\n
            cgc_printf(\"CHECK_FILE selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_CheckFile(v5, 409, a2, 4227496, a4);\n
            break;\n
        case 2:\n
            cgc_printf(\"SKEW_IMAGE selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v14, 1);\n
            cgc_receive_bytes(&v13, 2);\n
            v1 = v14;\n
            if (!v1)\n
            {\n
                cgc_RunTask(v5, cgc_SkewX, *(&v13));\n
            }\n
            else if (v1 == 1)\n
            {\n
                cgc_RunTask(v5, cgc_SkewY, *(&v13));\n
            }\n
            else if (v1 != 2)\n
            {\n
                cgc_printf(\"Incorrect coordinate provided.\\n
\", 2, a2, &g_4081a8, a4);\n
            }\n
            else\n
            {\n
                cgc_RunTask(v5, cgc_SkewZ, *(&v13));\n
            }\n
            break;\n
        case 3:\n
            cgc_printf(\"ROTATE_IMAGE selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v14, 1);\n
            cgc_receive_bytes(&v13, 2);\n
            v0 = v14;\n
            if (!v0)\n
            {\n
                cgc_RunTask(v5, cgc_RotateX, *(&v13));\n
            }\n
            else if (v0 == 1)\n
            {\n
                cgc_RunTask(v5, cgc_RotateY, *(&v13));\n
            }\n
            else if (v0 != 2)\n
            {\n
                cgc_printf(\"Incorrect coordinate provided.\\n
\", 2, a2, &g_4081a8, a4);\n
            }\n
            else\n
            {\n
                cgc_RunTask(v5, cgc_RotateZ, *(&v13));\n
            }\n
            break;\n
        case 4:\n
            cgc_printf(\"BRIGHTNESS selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v13, 2);\n
            cgc_RunTask(v5, cgc_Brightness, *(&v13));\n
            break;\n
        case 5:\n
            cgc_printf(\"OPACITY selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v13, 1);\n
            cgc_RunTask(v5, cgc_Opacity, *(&v13));\n
            break;\n
        case 6:\n
            cgc_printf(\"COMPRESS selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_Compress(v5, &v9, &v8);\n
            v7 = 0;\n
            break;\n
        case 7:\n
            cgc_printf(\"DECOMPRESS selected\\n
\", 1, a2, &g_4081a8, a4);\n
            if (!v8)\n
            {\n
                cgc_printf(\"No compressed data.\\n
\", 1, a2, &g_4081a8, a4);\n
                break;\n
            }\n
            else if (v7)\n
            {\n
                cgc_printf(\"You have already decompressed the latest data.\\n
\", 1, a2, &g_4081a8, a4);\n
                break;\n
            }\n
            else\n
            {\n
                v4 = cgc_malloc(4090);\n
                cgc_Decompress(&v9, v4, &v8);\n
                cgc_WriteOut(v5, v4, v8);\n
                a2 = v8;\n
                cgc_memcpy(&v10, v4, a2);\n
                cgc_free(v4);\n
                v7 = 1;\n
                break;\n
            }\n
        case 8:\n
            cgc_printf(\"SHOW_PIXEL selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_printf(\"Select the pixel to view:\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v13, 2);\n
            v17 = v6;\n
            if (*(&v13) < v17 && *(&v13) >= 0)\n
            {\n
                v3 = cgc_malloc(10);\n
                cgc_memcpy(v3, v5[*(&v13)], 10);\n
                cgc_ShowPixel(v3, a1, 10, v17, a4);\n
                v11 = v5[*(&v13)];\n
                cgc_free(v3);\n
                goto LABEL_407498;\n
            }\n
            if (!v11)\n
            {\n
                cgc_printf(\"No pixel to show.\\n
\\n
\\n
\\n
\", 2, a2, v17, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(\"Out of range. Showing last displayed pixel.\\n
\", 2, a2, v17, a4);\n
                cgc_ShowPixel(v11, 2, a2, v17, a4);\n
            }\n
LABEL_407498:\n
            continue;\n
        case 9:\n
            cgc_printf(\"SCALE_IMAGE selected\\n
\", 1, a2, &g_4081a8, a4);\n
            cgc_receive_bytes(&v13, 2);\n
            cgc_RunTask(v5, cgc_Scale, *(&v13));\n
            break;\n
        case 10:\n
            cgc_printf(\"EXIT selected\\n
\", 1, a2, &g_4081a8, a4);\n
            v15 = 0;\n
            v18 = cgc_free(v5);\n
            return v18;\n
        default:\n
            cgc_printf(\"UNKNOWN command\\n
\", 1, a2, *(&v2), a4);\n
            v15 = 0;\n
            v18 = cgc_free(v5);\n
            return v18;\n
        }\n
    }\n
}\n
", "4224258:sub_407502": null, "4224272:main": "int main(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = a0;\n
    *(&v0) = a1;\n
    cgc_printf(\"3D Coordinates (3DC) Image File Format Tools\\n
\", a1, a2, a3, a4);\n
    cgc_menu(\"3D Coordinates (3DC) Image File Format Tools\\n
\", a1, a2, a3, a4);\n
    return 0;\n
}\n
", "4224324:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_cos": null, "5242920:cgc_allocate": null, "5242928:cgc_rint": null, "5242936:cgc_log10": null, "5242944:cgc_sin": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}