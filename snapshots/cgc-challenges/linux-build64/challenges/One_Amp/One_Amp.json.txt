{"4206592:_init": "extern struct_0 *g_40c280;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40c280;\n
    if (g_40c280)\n
        v1 = g_40c280();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40c298;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40c298;\n
    goto *(4244128);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4206672:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4206688:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4206704:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4206720:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206736:_Znwm": "// attributes: PLT stub\n
int operator new(unsigned long a0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4206752:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4206768:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206784:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4206800:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4244072);\n
}\n
", "4206816:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206853:sub_403105": null, "4206854:sub_403106": null, "4206864:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40c278;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206905:sub_403139": null, "4206912:register_tm_clones": "extern unsigned long long g_40c288;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206969:sub_403179": null, "4206976:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40c268;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40c268)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207029:sub_4031b5": null, "4207033:sub_4031b9": null, "4207040:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207049:sub_4031c9": null, "4207056:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 * a0;\n
    if (a1 * a0 > -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_malloc_alloc(&g_heap, v1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(v0, 0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4207194:sub_40325a": null, "4207200:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 1;\n
}\n
", "4207234:sub_403282": null, "4207248:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 2;\n
}\n
", "4207282:sub_4032b2": null, "4207296:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 16;\n
}\n
", "4207330:sub_4032e2": null, "4207344:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 14;\n
}\n
", "4207378:sub_403312": null, "4207392:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 12;\n
}\n
", "4207426:sub_403342": null, "4207440:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 4;\n
}\n
", "4207474:sub_403372": null, "4207488:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 8;\n
}\n
", "4207522:sub_4033a2": null, "4207536:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 64;\n
}\n
", "4207570:sub_4033d2": null, "4207584:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 32;\n
}\n
", "4207618:sub_403402": null, "4207632:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 128;\n
}\n
", "4207668:sub_403434": null, "4207680:cgc_isxdigit": "long long cgc_isxdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    v2 = a0;\n
    v2 = cgc_toupper(v2);\n
    v1 = 1;\n
    if (cgc_isdigit(v2))\n
        return v1 & 1;\n
    v0 = 0;\n
    if (v2 >= 65)\n
        v0 = v2 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4207771:sub_40349b": null, "4207776:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4207847:sub_4034e7": null, "4207856:cgc_digittoint": "long long cgc_digittoint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 = cgc_toupper(v0);\n
    if (cgc_isdigit(v0))\n
    {\n
        v1 = v0 - 48;\n
        return v1;\n
    }\n
    if (v0 >= 65 && v0 <= 70)\n
    {\n
        v1 = v0 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4207962:sub_40355a": null, "4207968:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208039:sub_4035a7": null, "4208048:__cxa_pure_virtual": "long long __cxa_pure_virtual()\n
{\n
    unsigned long long v1;  // rdi\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    cgc__terminate(v1);\n
    return cgc_exit(v1, v2, v3, v4, v5, v6);\n
}\n
", "4208064:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_fflush(a0, v2, v3, v4, v5, v6);\n
}\n
", "4208096:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rcx\n
\n
    v1 = a0;\n
    if (a0->field_8 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a0->field_4 != 1)\n
    {\n
        v0 = 0;\n
        v4 = a0;\n
        ::0x4036e0::cgc_xlat(v1->field_10, &v1[1].field_8 + a0->field_8, v1->field_c - v4->field_8, v4);\n
        v5 = a0;\n
        if (::0x403750::cgc_transmit_all(v1->field_0, &a0[1].field_8 + v1->field_8, v1->field_c - v5->field_8, v5))\n
            v0 = -1;\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = v0;\n
        return v2;\n
    }\n
    else\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4208338:sub_4036d2": null, "4208352:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4208463:sub_40374f": null, "4208464:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v1 = *(&v0) + v1;\n
    }\n
}\n
", "4208595:sub_4037d3": null, "4208608:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    if (a1)\n
        a0[2] = 0;\n
    else\n
        a0[2] = -1;\n
    a0[3] = 0;\n
    return a0;\n
}\n
", "4208711:sub_403847": null, "4208720:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(1056);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = (a1 ? 1 : 2);\n
    v0->field_8 = 0;\n
    v0->field_c = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208871:sub_4038e7": null, "4208880:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    v5 = a2;\n
    if (a2->field_8 == a2->field_c)\n
        cgc__refill(a2);\n
    if (a2->field_8 != -1)\n
    {\n
        v5 = a2;\n
        v0 = a2->field_c - a2->field_8;\n
        if (v0 > a1)\n
            v0 = a1;\n
        cgc_memcpy(a0, &v2->padding_0[1 + a2->field_8], v0);\n
        v1 = v0 + v1;\n
        v6 = a2;\n
        v6->field_8 = v6->field_8 + v0;\n
        if (v2->field_8 == a2->field_c)\n
        {\n
            a2->field_c = 0;\n
            a2->field_8 = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!v0)\n
            break;\n
        ::0x403b40::cgc_xlat(a2->field_18, a0 + v1, v0);\n
        v1 = v0 + v1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4209253:sub_403a65": null, "4209264:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v7;  // rcx\n
\n
    if (a0->field_8 == a0->field_c)\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
    }\n
    if (!cgc_receive(a0, v3, v4, v5) && *(&v0))\n
    {\n
        v7 = *(&v0);\n
        a0->field_c = v7;\n
        ::0x403b40::cgc_xlat(a0->field_18, a0 + 1, a0->field_c, v7);\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4209458:sub_403b32": null, "4209472:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4209583:sub_403baf": null, "4209584:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v2 = 0; v2 < a1 - 1; v2 += 1)\n
    {\n
        v1 = cgc__getc(a3);\n
        if (v1 == -1)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (v1 == a2)\n
            break;\n
        *((a0 + v2)) = v1;\n
    }\n
    if (v2 == a1 - 1)\n
    {\n
        do\n
        {\n
            v0 = cgc__getc(a3);\n
            if (v0 == -1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
        } while (v0 != a2);\n
    }\n
    *((a0 + v2)) = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4209852:sub_403cbc": null, "4209856:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    char *field_18;\n
} struct_0;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v8;  // rcx\n
\n
    if (a0->field_8 == -1)\n
    {\n
        if (!cgc_receive(a0, v4, v5, v6) && *(&v0))\n
        {\n
            ::0x403b40::cgc_xlat(a0->field_18, &v1, 1);\n
            v2 = v1;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        if (a0->field_8 == a0->field_c && cgc__refill(a0) < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v8 = a0->field_8;\n
        a0->field_8 = v8 + 1;\n
        v2 = a0[1].padding_0[v8];\n
        return v2;\n
    }\n
}\n
", "4210066:sub_403d92": null, "4210080:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4210114:sub_403dc2": null, "4210128:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            if (a2->field_c + a1 >= 0x400)\n
            {\n
                v5 = a2->field_c;\n
                v0 = 0x400 - v5;\n
                cgc_memcpy(&v2[1].field_8 + a2->field_c, a0, v0, v5);\n
                v6 = a2;\n
                v6->field_c = v6->field_c + v0;\n
                v1 = v0 + v1;\n
                cgc_fflush(a2);\n
            }\n
            if (v1 < a1)\n
            {\n
                v0 = a1 - v1;\n
                cgc_memcpy(&v2[1].field_8 + a2->field_c, a0 + v1, v0);\n
                v7 = a2;\n
                v7->field_c = v7->field_c + v0;\n
                v1 = v0 + v1;\n
            }\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    if (a2->field_10)\n
    {\n
        if (cgc_transmit_xlat(v2->field_0, a2->field_10, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        if (::0x403f90::cgc_transmit_all(a2->field_0, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    v3 = a1;\n
    return v3;\n
}\n
", "4210564:sub_403f84": null, "4210576:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4210707:sub_404013": null, "4210720:cgc_transmit_xlat": "long long cgc_transmit_xlat(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x448], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a3)\n
        {\n
            v0 = a3 - v1;\n
            if (v0 > 0x400)\n
                v0 = 0x400;\n
            cgc_memcpy(&v2, a2 + v1, v0);\n
            ::0x404120::cgc_xlat(a1, &v2, v0);\n
            if (::0x403f90::cgc_transmit_all(a0, &v2, v0))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4210969:sub_404119": null, "4210976:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4211087:sub_40418f": null, "4211088:cgc_fxlat": "long long cgc_fxlat(unsigned long long a0[4], unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v7;  // rax\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
    char *v9;  // rax\n
\n
    if (!a1)\n
    {\n
        cgc_free(a0[2]);\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        return a0;\n
    }\n
    v7 = cgc_realloc(a0[2], 0x100);\n
    a0[2] = v7;\n
    v3 = v7;\n
    v9 = cgc_realloc(a0[3], 0x100);\n
    a0[3] = v9;\n
    v2 = v9;\n
    v8 = cgc_hash_seed(a1);\n
    v5 = v8;\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v3[v4] = v4;\n
        v8 = v4 + 1;\n
    }\n
    for (v4 = 255; v4 >= 1; v4 = v8)\n
    {\n
        v1 = (0 CONCAT v5) /m v4 >> 32;\n
        v5 *= 3;\n
        v5 = v5 * 0x2000 ^ (v5 >> 19) ^ (v5 >> 21);\n
        v0 = v3[v4];\n
        v3[v4] = v3[v1];\n
        v3[v1] = v0;\n
        v8 = v4 - 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v2[v3[v4]] = v4;\n
        v8 = v4 + 1;\n
    }\n
    return v8;\n
}\n
", "4211464:sub_404308": null, "4211472:cgc_hash_seed": "long long cgc_hash_seed(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 826981510;\n
    for (v1 = 0; a0[v1]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = a0[v1] ^ v0;\n
        v0 = v0 * 0x2000 ^ (v0 >> 19);\n
    }\n
    return v0;\n
}\n
", "4211574:sub_404376": null, "4211584:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4211618:sub_4043a2": null, "4211632:cgc_malloc_alloc": "long long cgc_malloc_alloc(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (v1 > 2147483647)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = v1 - -3 & -4;\n
    if (v1 < 4)\n
    {\n
        v0 = cgc_tiny_alloc(a0, 4);\n
    }\n
    else if (v1 < 16)\n
    {\n
        v0 = cgc_tiny_alloc(a0, v1);\n
    }\n
    else if (v1 < 0x20000)\n
    {\n
        v0 = cgc_small_alloc(a0, v1);\n
    }\n
    else\n
    {\n
        v0 = cgc_large_alloc(a0, v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4211843:sub_404483": null, "4211856:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned long long field_1430;\n
    unsigned long long field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_tiny_alloc(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40]\n
    unsigned short v1[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned long long *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned short v7[2];  // rax\n
    struct_0 *v8;  // rax\n
    unsigned short v9[2];  // rax\n
\n
    v4 = a0;\n
    v3 = cgc_size_to_bin(a1);\n
    v2 = &(&a0->field_0)[v3]->field_0;\n
    if (v2)\n
    {\n
        (&a0->field_0)[v3] = *(v2);\n
        v5 = v2;\n
        return v5;\n
    }\n
    *(&v1) = *(&a0->padding_8[5136 + 8 * v3]);\n
    if (!v1)\n
    {\n
        if (!a0->field_1430)\n
        {\n
            a0->field_1430 = cgc_run_alloc(a0, 1);\n
            if (!a0->field_1430)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a0->field_1438 = 0;\n
        }\n
        v7 = v4->field_1430 + a0->field_1438;\n
        *(&a0->padding_8[5136 + 8 * v3]) = v7;\n
        v1 = v7;\n
        *(v1) = a1;\n
        *((v1 + 2)) = a1;\n
        v8 = a0;\n
        v8->field_1438 = v8->field_1438 + 0x1000;\n
        if (a0->field_1438 == 0x100000)\n
            a0->field_1430 = 0;\n
    }\n
    v0 = v1 + *((v1 + 2));\n
    v9 = v1;\n
    v9[1] = v9[1] + a1;\n
    if (*((v1 + 2)) + *(v1) > 0x1000)\n
        *(&a0->padding_8[5136 + 8 * v3]) = 0;\n
    v5 = v0;\n
    return v5;\n
}\n
", "4212310:sub_404656": null, "4212320:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_alloc(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 - -31 & -0x10;\n
    for (v2 = cgc_size_to_bin(v1); v2 < 131; v2 += 1)\n
    {\n
        for (v0 = a0[v2]; v0; v0 = *((v0 + 24)))\n
        {\n
            if (*((v0 + 8)) >= v1)\n
                break;\n
        }\n
        if (v0)\n
            break;\n
    }\n
    if (v2 == 131)\n
    {\n
        if (!cgc_small_alloc_run(a0))\n
        {\n
            v2 = 130;\n
            v0 = a0[v2];\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    cgc_small_unlink_free(a0, v2, v0);\n
    if (*((v0 + 8)) - v1 > 32)\n
        cgc_small_split(a0, v0, v1);\n
    v3 = v0 + 16;\n
    return v3;\n
}\n
", "4212636:sub_40479c": null, "4212640:cgc_large_alloc": "long long cgc_large_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v2 = a1 - -4111 & -0x1000;\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0[0] = *(&v1);\n
    v0[0] = a0;\n
    v0[1] = v2;\n
    v3 = v0 + 1;\n
    return v3;\n
}\n
", "4212774:sub_404826": null, "4212784:malloc_free": "long long malloc_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return *((a0 + (a1 >> 20) + 1048));\n
    }\n
    else if (v0)\n
    {\n
        if (v0 == 2)\n
        {\n
            v2 = cgc_small_free(a0, a1);\n
        }\n
        else if (v0 == 1)\n
        {\n
            v2 = cgc_tiny_free(a0, a1);\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_large_free(a0, a1);\n
        return v2;\n
    }\n
}\n
", "4212955:sub_4048db": null, "4212960:cgc_large_free": "long long cgc_large_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
\n
    if ((a1 & 4095) != 16)\n
        cgc_heap_error(\"BAD FREE: large address is not aligned ptr=%08X\\n
\", a1);\n
    v0[0] = a1 - 16;\n
    if (v0[0] != a0)\n
        cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1, v0[0], a0);\n
    if (v0[1] >= 0x20000 && v0[1] <= 2147487743 && !(v0[1] & 4095))\n
        return cgc_deallocate(a0, a1);\n
    cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", a1, v0[1]);\n
    return cgc_deallocate(a0, a1);\n
}\n
", "4213186:sub_4049c2": null, "4213200:cgc_small_free": "long long cgc_small_free(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x58]\n
    unsigned long long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4[2];  // [bp-0x38]\n
    unsigned long long v5[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v6[2];  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[2];  // rax\n
\n
    v6[0] = a1 - 16;\n
    v3 = a1 & -0x100000;\n
    if ((a1 & 7))\n
        cgc_heap_error(\"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\", a1);\n
    if ((v6[1] & 1))\n
        cgc_heap_error(\"BAD SMALL FREE: double free ptr=%08x\\n
\", a1);\n
    if (v6[1] <= 0x20000 && !(v6[1] < 16))\n
        goto LABEL_404a79;\n
    cgc_heap_error(\"BAD SMALL FREE: corrupted size ptr=%08x\\n
\", a1);\n
LABEL_404a79:\n
    if (!v6[0])\n
        v5[0] = 0;\n
    else\n
        v5 = v6 - v6[0];\n
    v4[0] = v6 + v6[1];\n
    if (v5 && (*((v5 + 8)) & -2) != v6[0])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\", v5, a1);\n
    if (v4[0] != v6[1])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v4, a1);\n
    if (v5 && (*((v5 + 8)) & 1))\n
    {\n
        v2 = a0;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin(*((v5 + 8)) & -2), v5);\n
        v8 = v5;\n
        v8[1] = v6[1] + v8[1];\n
        v6 = v5;\n
        v4[0] = *((v6 + 8));\n
    }\n
    if ((v4[1] & 1))\n
    {\n
        v1 = a0;\n
        cgc_small_unlink_free(v1, cgc_size_to_bin(v4[1] & -2), v4);\n
        v9 = v6;\n
        v9[1] = v4[1] + v9[1];\n
        v4[0] = v6 + v6[1];\n
        v4[0] = *((v6 + 8));\n
    }\n
    v0 = a0;\n
    return cgc_small_insert_free(v0, cgc_size_to_bin(*((v6 + 8))), v6);\n
}\n
", "4213807:sub_404c2f": null, "4213808:cgc_tiny_free": "long long cgc_tiny_free(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned short *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v0 = a1 & -0x1000;\n
    v1 = cgc_size_to_bin(*(v0));\n
    *(a1) = a0[v1];\n
    a0[v1] = a1;\n
    return a0;\n
}\n
", "4213905:sub_404c91": null, "4213920:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned short *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a1 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = a1 - 16;\n
    v3 = v1->field_8 - 16;\n
    return v3;\n
}\n
", "4214076:sub_404d3c": null, "4214080:cgc_malloc_realloc": "long long cgc_malloc_realloc(unsigned long a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a2 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        v3 = cgc_malloc_alloc(a0, a2);\n
        return v3;\n
    }\n
    else if (cgc_malloc_size(a0, a1) < a2)\n
    {\n
        v2 = cgc_malloc_alloc(a0, a2);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = v2;\n
        v1 = a1;\n
        cgc_memcpy(v0, v1, cgc_malloc_size(a0, a1));\n
        malloc_free(a0, a1);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        return v3;\n
    }\n
}\n
", "4214350:sub_404e4e": null, "4214352:cgc_size_to_bin": "long long cgc_size_to_bin(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 16)\n
    {\n
        v0 = a0 / 4 - 1;\n
        return v0;\n
    }\n
    else if (a0 <= 0x200)\n
    {\n
        v0 = a0 / 16 - -2;\n
        return v0;\n
    }\n
    else if (a0 <= 0x1200)\n
    {\n
        v0 = (a0 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (a0 <= 0x20000)\n
    {\n
        v0 = (a0 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4214535:sub_404f07": null, "4214544:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(&v0);\n
    v1 = v2 - -1048575 & -0x100000;\n
    if (v2 < v1)\n
        cgc_deallocate(a0, a1);\n
    if (v1 + 0x100000 < v2 + 0x200000)\n
        cgc_deallocate(a0, a1);\n
    *((a0 + (v1 >> 20) + 1048)) = a1;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214771:sub_404ff3": null, "4214784:cgc_small_alloc_run": "long long cgc_small_alloc_run(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned long long v2[2];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v0 = cgc_run_alloc(a0, 2);\n
    if (!v0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    v2[0] = v0 - -19 & -0x10;\n
    v2[0] = 0;\n
    v2[1] = 0x100000 - (v2 - v0) - 32;\n
    v1[0] = v2 + v2[1];\n
    v5 = v2[1];\n
    v1[0] = v5;\n
    v1[1] = 0;\n
    cgc_small_insert_free(a0, 130, v2, v5);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4214988:sub_4050cc": null, "4214992:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    struct_2 *v2;  // rax\n
\n
    v0 = a2;\n
    if (!(a2->field_8 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    v2 = a2;\n
    v2->field_8 = v2->field_8 & -2;\n
    if (a2->field_10)\n
        v0->field_10->field_18 = a2->field_18;\n
    if (a2->field_18)\n
        a2->field_18->field_10 = v0->field_10;\n
    if (a0[a1] == a2)\n
        a0[a1] = a2->field_18;\n
    a2->field_10 = 0;\n
    a2->field_18 = 0;\n
    return a2;\n
}\n
", "4215211:sub_4051ab": null, "4215216:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_small_split(unsigned long long a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
\n
    *(&v2) = a1->field_8 - a2;\n
    v1[0] = &a1->padding_0[a2];\n
    v0 = &a1->padding_0[a1->field_8];\n
    a1->field_8 = a2;\n
    v1[0] = a1->field_8;\n
    v1[1] = *(&v2);\n
    *(v0) = *(&v2);\n
    return cgc_small_insert_free(a0, cgc_size_to_bin(*(&v2)), v1);\n
}\n
", "4215372:sub_40524c": null, "4215376:cgc_small_insert_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if ((a2->field_8 & 1) == 1)\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    v1 = a2;\n
    v1->field_8 = v1->field_8 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = *((a0 + a1 * 8));\n
    *((a0 + a1 * 8)) = a2;\n
    v2 = a2;\n
    if (a2->field_18)\n
    {\n
        v2 = a2->field_18;\n
        *((v2 + 16)) = a2;\n
    }\n
    return v2;\n
}\n
", "4215538:sub_4052f2": null, "4215552:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct_0 *v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    cgc_vfprintf(cgc_stderr, a0, &v14, &v18);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, a2, a3, a4, v28);\n
}\n
", "4215728:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4215847:sub_405427": null, "4215856:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) == *((a1 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *((a0 + v0)) - *((a1 + v0));\n
            return v1;\n
        }\n
    }\n
}\n
", "4216010:sub_4054ca": null, "4216016:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4216115:sub_405533": null, "4216128:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    if (a0 > a1)\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[1 + a2 + -1 * v0] = *((a1 + a2 - v0 - 1));\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4216328:sub_405608": null, "4216336:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4216420:sub_405664": null, "4216432:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4216592:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4216637:sub_40573d": null, "4216640:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4216801:sub_4057e1": null, "4216816:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v0 = 1;\n
    if (a0->field_8 == -1)\n
    {\n
        v0 = 0;\n
        a0->field_8 = 0;\n
    }\n
    v1 = cgc__vsfprintf(a1, a2, a0, 0, 2147483647);\n
    if (!v0)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4216944:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4217105:sub_405911": null, "4217120:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0, 2147483647);\n
}\n
", "4217173:sub_405955": null, "4217184:cgc__vsfprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_1 *a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x178]\n
    struct_1 *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x164]\n
    unsigned int *v3;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x14c]\n
    unsigned int *v6;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x140]\n
    unsigned int v8;  // [bp-0x134]\n
    unsigned int *v9;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0x128]\n
    unsigned int v11;  // [bp-0x11c]\n
    unsigned int v12;  // [bp-0x118]\n
    unsigned int v13;  // [bp-0x114]\n
    unsigned int v14;  // [bp-0x110]\n
    char v15;  // [bp-0x109]\n
    unsigned long v16;  // [bp-0x108]\n
    unsigned long v17;  // [bp-0x100]\n
    char v18;  // [bp-0xf1]\n
    unsigned long v19;  // [bp-0xf0]\n
    unsigned long v20;  // [bp-0xe8]\n
    char v21;  // [bp-0xd9]\n
    unsigned long v22;  // [bp-0xd8]\n
    unsigned long v23;  // [bp-0xd0]\n
    unsigned long v24;  // [bp-0xc8]\n
    unsigned long v25;  // [bp-0xc0]\n
    char v26;  // [bp-0xb1]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned long v29;  // [bp-0xa8]\n
    struct_0 *v30;  // [bp-0xa0]\n
    char v31;  // [bp-0x91]\n
    unsigned long v32;  // [bp-0x90]\n
    char v33;  // [bp-0x88]\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v35;  // [bp-0x3c]\n
    unsigned int v36;  // [bp-0x38]\n
    char v37;  // [bp-0x31]\n
    char *v38;  // [bp-0x28]\n
    void* v39;  // [bp-0x20]\n
    struct_1 *v40;  // [bp-0x18]\n
    struct_0 *v41;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v43;  // rax\n
    char *v44;  // rax\n
    struct_0 *v45;  // rax\n
    struct_0 *v46;  // rax\n
    struct_0 *v48;  // rax\n
    struct_0 *v50;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_1 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    struct_1 *v57;  // rcx\n
    unsigned long long v58;  // rdx\n
    unsigned int *v59;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v60;  // rcx\n
    char *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned int *v64;  // rax\n
    struct_1 *v65;  // rcx\n
    unsigned int *v66;  // rdx\n
    struct_1 *v67;  // rcx\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    struct_1 *v70;  // rcx\n
    unsigned int *v71;  // rdx\n
    unsigned long long v72;  // rsi\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rcx\n
    char *v75;  // rax\n
    char *v76;  // rax\n
\n
    v41 = a0;\n
    v40 = a1;\n
    v39 = a2;\n
    v38 = a3;\n
    v34 = 0;\n
    while (true)\n
    {\n
        v43 = v41;\n
        v41 = v43 + 1;\n
        v37 = v43->field_0;\n
        if (!v37)\n
            break;\n
        v31 = 32;\n
        while (v37 != 1)\n
        {\n
            if (v34 < a4)\n
            {\n
                v26 = v37;\n
                if (v39)\n
                    cgc_fwrite(&v26, 1, v39);\n
                if (v38)\n
                    v38[v34] = v26;\n
                v34 += 1;\n
            }\n
            else\n
            {\n
                v44 = v34;\n
                v34 = v44 + 1;\n
                if (v44 == -1)\n
                    cgc__terminate(a0);\n
            }\n
            v45 = v41;\n
            v41 = v45 + 1;\n
            v37 = v45->field_0;\n
            if (!v37)\n
                goto LABEL_40644c;\n
        }\n
        v30 = v41;\n
        v36 = 4;\n
        v35 = 0;\n
        v46 = v41;\n
        v41 = v46 + 1;\n
        v14 = v46->field_0;\n
        v37 = v14;\n
        if (!v14)\n
            break;\n
        if (v14 == 32)\n
        {\n
            v31 = 32;\n
        }\n
        else if (v14 == 48)\n
        {\n
            v31 = 48;\n
        }\n
        else\n
        {\n
            v41 += 1;\n
        }\n
        if (*(v41) >= 48 && *(v41) <= 57)\n
            v35 = cgc_strtoul(v41, &v41, 10);\n
        v48 = v41;\n
        v41 = v48 + 1;\n
        v13 = v48->field_0;\n
        v37 = v13;\n
        if (!v13)\n
            break;\n
        if (v13 == 104)\n
        {\n
            if (v41->field_0 != 104)\n
            {\n
                v36 = 2;\n
            }\n
            else\n
            {\n
                v41 += 1;\n
                v36 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v13 != 108)\n
            {\n
                v41 += 1;\n
            }\n
            else if (v41->field_0 == 108)\n
            {\n
                v41 += 1;\n
                v36 = 8;\n
            }\n
            else\n
            {\n
                v36 = 4;\n
            }\n
        }\n
        v50 = v41;\n
        v41 = v50 + 1;\n
        v12 = v50->field_0;\n
        v37 = v12;\n
        if (!v12)\n
        {\n
            v25 = v41 - v30;\n
            if (v34 < a4)\n
            {\n
                v24 = a4 - v34;\n
                if (v24 > v25)\n
                    v24 = v25;\n
                if (v39)\n
                    cgc_fwrite(v30, v24, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], v30, v24);\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            break;\n
        }\n
        if (v12 == 88)\n
        {\n
LABEL_405ead:\n
            if (v37 == 100)\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v10 = v40;\n
                v11 = v10->field_0;\n
                if (v11 <= 40)\n
                {\n
                    v62 = v10;\n
                    v63 = v11;\n
                    v64 = v63 + v62->field_10;\n
                    v62->field_0 = v63 + 8;\n
                    v9 = v64;\n
                }\n
                else\n
                {\n
                    v65 = v10;\n
                    v66 = v65->field_8;\n
                    v65->field_8 = &v66[2];\n
                    v9 = v66;\n
                }\n
                v27 = *(v9);\n
                cgc__convert_signed(&v33, v27, 10, 0);\n
            }\n
            else\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v7 = v40;\n
                v8 = v7->field_0;\n
                if (v8 > 40)\n
                {\n
                    v70 = v7;\n
                    v71 = v70->field_8;\n
                    v70->field_8 = &v71[2];\n
                    v6 = v71;\n
                }\n
                else\n
                {\n
                    v67 = v7;\n
                    v68 = v8;\n
                    v69 = v68 + v67->field_10;\n
                    v67->field_0 = v68 + 8;\n
                    v6 = v69;\n
                }\n
                v28 = *(v6);\n
                a0 = &v33;\n
                v72 = v28;\n
                v73 = (v37 == 117 ? 16 : 10);\n
                v74 = v37 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v32 = cgc_strlen(&v33);\n
            if (v32 < v35)\n
            {\n
                v35 -= v32;\n
                do\n
                {\n
                    if (v34 < a4)\n
                    {\n
                        v21 = v31;\n
                        if (v39)\n
                            cgc_fwrite(&v21, 1, v39);\n
                        if (v38)\n
                            v38[v34] = v21;\n
                        v34 += 1;\n
                    }\n
                    else\n
                    {\n
                        v75 = v34;\n
                        v34 = v75 + 1;\n
                        if (v75 == -1)\n
                            cgc__terminate(a0);\n
                    }\n
                    v35 -= 1;\n
                } while (v35 > 0);\n
            }\n
            v20 = v32;\n
            if (v34 < a4)\n
            {\n
                v19 = a4 - v34;\n
                if (v19 > v20)\n
                    v19 = v20;\n
                if (v39)\n
                    cgc_fwrite(&v33, v19, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], &v33, v19);\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            goto LABEL_40643d;\n
        }\n
        else\n
        {\n
            if (v12 == 99)\n
            {\n
                v4 = v40;\n
                v5 = v4->field_0;\n
                if (v5 > 40)\n
                {\n
                    v55 = v4;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v3 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v4;\n
                    v53 = v5;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v3 = v54;\n
                }\n
                v37 = *(v3);\n
                if (v34 < a4)\n
                {\n
                    v18 = v37;\n
                    if (v39)\n
                        cgc_fwrite(&v18, 1, v39);\n
                    if (v38)\n
                        v38[v34] = v18;\n
                    v34 += 1;\n
                }\n
                else\n
                {\n
                    v61 = v34;\n
                    v34 = v61 + 1;\n
                    if (v61 == -1)\n
                        cgc__terminate(a0);\n
                }\n
                goto LABEL_40643d;\n
            }\n
            if (v12 == 100)\n
                goto LABEL_405ead;\n
            if (v12 == 115)\n
            {\n
                v1 = v40;\n
                v2 = v1->field_0;\n
                if (v2 <= 40)\n
                {\n
                    v57 = v1;\n
                    v58 = v2;\n
                    v59 = v58 + v57->field_10;\n
                    v57->field_0 = v58 + 8;\n
                }\n
                else\n
                {\n
                    v60 = v1;\n
                    v59 = v60->field_8;\n
                    v60->field_8 = v59 + 8;\n
                }\n
                v0 = v59;\n
                v29 = *(&v0);\n
                v17 = cgc_strlen(v29);\n
                if (v34 < a4)\n
                {\n
                    v16 = a4 - v34;\n
                    if (v16 > v17)\n
                        v16 = v17;\n
                    if (v39)\n
                        cgc_fwrite(v29, v16, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v29, v16);\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
LABEL_40643d:\n
            }\n
            else if (v12 != 117 && v12 != 120)\n
            {\n
                v23 = v41 - v30;\n
                if (v34 >= a4)\n
                {\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                else\n
                {\n
                    v22 = a4 - v34;\n
                    if (v22 > v23)\n
                        v22 = v23;\n
                    if (v39)\n
                        cgc_fwrite(v30, v22, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v30, v22);\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                goto LABEL_40643d;\n
            }\n
        }\n
    }\n
LABEL_40644c:\n
    v39 = 0;\n
    if (v34 >= a4)\n
    {\n
        v76 = v34;\n
        v34 = v76 + 1;\n
        if (v76 != -1)\n
            return v34 - 1;\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        if (v39)\n
            cgc_fwrite(&v15, 1, v39);\n
        if (v38)\n
            v38[v34] = v15;\n
        v34 += 1;\n
        return v34 - 1;\n
    }\n
}\n
", "4220137:sub_4064e9": null, "4220144:cgc__convert_signed": "long long cgc__convert_signed(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x14], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (v0 < 0)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 45;\n
        v0 = -(v0);\n
    }\n
    return cgc__convert_unsigned(v1, v0, a2, a3);\n
}\n
", "4220225:sub_406541": null, "4220240:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v3 = a1;\n
    v1 = &a0[20];\n
    if (a3)\n
        v2 = \"0123456789ABCDEF\";\n
    else\n
        v2 = \"0123456789abcdef\";\n
    v5 = v1;\n
    v1 = v5 + 1;\n
    v5[1].field_-1 = 0;\n
    if (!v3)\n
    {\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        v6[1].field_-1 = *(v2);\n
        return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
    }\n
    while (true)\n
    {\n
        v0 = v2;\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT v3) /m a2 >> 32];\n
        v3 = (0 CONCAT v3) /m a2;\n
    }\n
}\n
", "4220485:sub_406645": null, "4220496:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(unsigned int a0, unsigned long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4220538:sub_40667a": null, "4220544:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(v2));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4220709:sub_406725": null, "4220720:cgc_strcasestr": "long long cgc_strcasestr(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_strlen(a1);\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!a0[v1])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strncasecmp(&a0[v1], a1, v0))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4220864:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; a0[v0]; v0 += 1)\n
    {\n
        if (a0[v0] == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = &a0[v0];\n
    return v1;\n
}\n
", "4221003:sub_40684b": null, "4221008:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4221147:sub_4068db": null, "4221152:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    for (v0 = a0; *(v1); v0 += 1)\n
    {\n
        *(v0) = *(v1);\n
        v1 += 1;\n
    }\n
    *(v0) = 0;\n
    return a0;\n
}\n
", "4221242:sub_40693a": null, "4221248:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    v1[v0] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221361:sub_4069b1": null, "4221376:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4221439:sub_4069ff": null, "4221440:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char v1;  // [bp-0x31]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = &v4[a2];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v4))\n
        {\n
            v1 = 0;\n
            if (*(v3))\n
            {\n
                v0 = cgc_tolower(*(v4));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(v3)))\n
                    v1 = v4 < v2;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    if (v4 == v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = *(v4) - *(v3);\n
    return v5;\n
}\n
", "4221672:sub_406ae8": null, "4221680:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    v1 = a0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = v1 - a0 < a2;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(v2);\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - a0 < a2; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return a0;\n
}\n
", "4221859:sub_406ba3": null, "4221872:cgc_strndup": "long long cgc_strndup(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
        v1 = a1;\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    *((v0 + v1)) = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4222011:sub_406c3b": null, "4222016:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = &*(a0)->field_0;\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v0[v1]; v1 += 1)\n
    {\n
        if (cgc_strchr(a1, v0[v1]))\n
            break;\n
    }\n
    if (!v0[v1])\n
        *(a0) = 0;\n
    else\n
        *(a0) = &v0[1 + v1];\n
    v0[v1] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4222235:sub_406d1b": null, "4222240:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(&a0[v0], a1))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
}\n
", "4222367:sub_406d9f": null, "4222368:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x68], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x60], Other Possible Types: unsigned long long\n
    char v2[2];  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8[2];  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x24]\n
    char v10[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v11;  // [bp-0x10]\n
\n
    *(&v10) = a0;\n
    v9 = a2;\n
    *(&v8) = v10;\n
    v7 = 1;\n
    v6 = 1;\n
    v5 = 0;\n
    for (v4 = 0; cgc_isspace(*(v10)); v10 += 1)\n
    {\n
        if (!*(v10))\n
            goto LABEL_406f5c;\n
    }\n
    if (*(v10) == 43)\n
    {\n
        v7 = 1;\n
        v10 += 1;\n
    }\n
    else if (*(v10) == 45)\n
    {\n
        v7 = -1;\n
        v10 += 1;\n
    }\n
    if (v9 == 16)\n
    {\n
        if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
            v10 += 2;\n
        goto LABEL_406f6b;\n
    }\n
    if (v9)\n
    {\n
LABEL_406f6b:\n
        for (; *(v10); v10 += 1)\n
        {\n
            if (cgc_isdigit(*(v10)))\n
            {\n
                v3 = *(v10) - 48;\n
            }\n
            else if (cgc_islower(*(v10)))\n
            {\n
                v3 = *(v10) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v10)))\n
                    break;\n
                v3 = *(v10) + -55;\n
            }\n
            if (v3 >= v9)\n
                break;\n
            v6 = 0;\n
            v4 = v9 * v4 + v3;\n
            if (v4 > 2147483647)\n
                v5 = 1;\n
        }\n
    }\n
    if (*(v10) == 48 && *((v10 + 1)) >= 48 && *((v10 + 1)) <= 55)\n
    {\n
        *(&v10) = v10 + 1;\n
        v9 = 8;\n
        goto LABEL_406f5c;\n
    }\n
    if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
    {\n
        v10 += 2;\n
        v9 = 16;\n
        goto LABEL_406f5c;\n
    }\n
    if (!cgc_isdigit(*(v10)))\n
        goto LABEL_406f5c;\n
    v9 = 10;\n
LABEL_406f5c:\n
    if (a1)\n
    {\n
        if (v6)\n
            *(&v2) = v8;\n
        else\n
            v2 = v10;\n
        *(a1) = v2;\n
    }\n
    if (v7 >= 0)\n
    {\n
        if (v5)\n
            v0 = 2147483647;\n
        else\n
            v0 = v4;\n
        v11 = v0;\n
        return v11;\n
    }\n
    else\n
    {\n
        if (v5)\n
            v1 = -0x80000000;\n
        else\n
            v1 = -(v4);\n
        v11 = v1;\n
        return v11;\n
    }\n
}\n
", "4223240:sub_407108": null, "4223248:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x58], Other Possible Types: unsigned long long\n
    char v1[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7[2];  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char v9[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v9) = a0;\n
    v8 = a2;\n
    *(&v7) = v9;\n
    v6 = 1;\n
    v5 = 1;\n
    v4 = 0;\n
    for (v3 = 0; cgc_isspace(v9[0]); v9 = &v9[1])\n
    {\n
        if (!v9[0])\n
            goto LABEL_4072cc;\n
    }\n
    if (*(v9) == 43)\n
    {\n
        v6 = 1;\n
        v9 = &v9[1];\n
    }\n
    else if (*(v9) == 45)\n
    {\n
        v6 = -1;\n
        v9 = &v9[1];\n
    }\n
    if (v8 == 16)\n
    {\n
        if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
            v9 += 2;\n
        goto LABEL_4072db;\n
    }\n
    if (v8)\n
    {\n
LABEL_4072db:\n
        for (; *(v9); v9 = &v9[1])\n
        {\n
            if (cgc_isdigit(v9[0]))\n
            {\n
                v2 = *(v9) - 48;\n
            }\n
            else if (cgc_islower(v9[0]))\n
            {\n
                v2 = *(v9) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v9[0]))\n
                    break;\n
                v2 = *(v9) + -55;\n
            }\n
            if (v2 >= v8)\n
                break;\n
            v5 = 0;\n
            v3 = v8 * v3 + v2;\n
            if (v3 > 4294967295)\n
                v4 = 1;\n
        }\n
    }\n
    if (*(v9) == 48 && *((v9 + 1)) >= 48 && *((v9 + 1)) <= 55)\n
    {\n
        *(&v9) = &v9[1];\n
        v8 = 8;\n
        goto LABEL_4072cc;\n
    }\n
    if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
    {\n
        v9 += 2;\n
        v8 = 16;\n
        goto LABEL_4072cc;\n
    }\n
    if (!cgc_isdigit(v9[0]))\n
        goto LABEL_4072cc;\n
    v8 = 10;\n
LABEL_4072cc:\n
    if (a1)\n
    {\n
        if (v5)\n
            *(&v1) = v7;\n
        else\n
            v1 = v9;\n
        *(a1) = v1;\n
    }\n
    if (v6 < 0)\n
    {\n
        if (v3 > 2147483647 && v3 != -0x80000000)\n
            v4 = 1;\n
        v3 = -(v3);\n
    }\n
    if (v4)\n
    {\n
        v0 = 4294967295;\n
        return v0;\n
    }\n
    v0 = v3;\n
    return v0;\n
}\n
", "4224109:sub_40746d": null, "4224112:_Z10CompareIdsP12tag_and_fileS0_": "typedef struct struct_0 {\n
    char padding_0[136];\n
    unsigned int field_88;\n
} struct_0;\n
\n
long long CompareIds(struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0->field_88 > a1->field_88)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (a0->field_88 != a1->field_88)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4224212:sub_4074d4": null, "4224224:_Z13CompareTitlesP12tag_and_fileS0_": "long long CompareTitles(unsigned long a0, unsigned long a1)\n
{\n
    return cgc_memcmp(a0 + 11, a1 + 11, 30);\n
}\n
", "4224280:sub_407518": null, "4224288:_Z14CompareArtistsP12tag_and_fileS0_": "long long CompareArtists(unsigned long a0, unsigned long a1)\n
{\n
    return cgc_memcmp(a0 + 41, a1 + 41, 30);\n
}\n
", "4224344:sub_407558": null, "4224352:_Z13CompareAlbumsP12tag_and_fileS0_": "long long CompareAlbums(unsigned long a0, unsigned long a1)\n
{\n
    return cgc_memcmp(a0 + 71, a1 + 71, 30);\n
}\n
", "4224408:sub_407598": null, "4224416:_Z18CompareAlbumTracksP12tag_and_fileS0_": "typedef struct struct_0 {\n
    char padding_0[134];\n
    char field_86;\n
} struct_0;\n
\n
long long CompareAlbumTracks(struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0->field_86 > a1->field_86)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (a0->field_86 != a1->field_86)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4224524:sub_40760c": null, "4224528:_ZN7MgcFileC1Ev": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long MgcFile::__ctor__(struct_0 *a0)\n
{\n
    a0->field_0 = 0;\n
    a0->field_8 = 0;\n
    a0->field_c = 0;\n
    return a0;\n
}\n
", "4224563:sub_407633": null, "4224576:_ZN7MgcFile11ReadMgcFileEP4FILE": "long long MgcFile::ReadMgcFile(unsigned long long a0, void* a1)\n
{\n
    unsigned long long v0;  // [bp-0x1958]\n
    unsigned int v1;  // [bp-0x1950]\n
    unsigned int v2;  // [bp-0x1948]\n
    unsigned long v3;  // [bp-0x1938]\n
    char v4;  // [bp-0x1930]\n
    char v5;  // [bp-0x192d]\n
    char v6;  // [bp-0x1928]\n
    char v7;  // [bp-0x9]\n
\n
    while (true)\n
    {\n
        cgc_fread(&v4, 5, a1);\n
        if (!(MgcHeaderInfo::Synced(&v4) & 1))\n
            break;\n
        if (!(MgcHeaderInfo::SongV1(&v4) & 1))\n
            break;\n
        v0 = &v6;\n
        cgc_fread(v0, MgcHeaderInfo::CalcFrameSize(&v4), a1);\n
        v3 = cgc_malloc(MgcHeaderInfo::CalcFrameSize(&v4) + 5);\n
        cgc_memcpy(v3, &v4, 5);\n
        *(&v1) = v3 + 5;\n
        *(&v2) = &v6;\n
        cgc_memcpy(*(&v1), *(&v2), MgcHeaderInfo::CalcFrameSize(&v4));\n
        MgcFile::AddFrame(a0, v3);\n
        if (!*(&v5))\n
        {\n
            v7 = 1;\n
            return v7 & 1;\n
        }\n
    }\n
    MgcFile::Clear(a0);\n
    v7 = 0;\n
    return v7 & 1;\n
}\n
", "4224916:sub_407794": null, "4224928:_ZN7MgcFile5ClearEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long MgcFile::Clear(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    if (a0->field_0)\n
    {\n
        for (v1 = 0; v1 < a0->field_8; v1 += 1)\n
        {\n
            cgc_free(*((a0->field_0 + v1 * 8)));\n
        }\n
        *(&v0) = a0->field_0;\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
        a0->field_0 = 0;\n
    }\n
    a0->field_8 = 0;\n
    a0->field_c = 0;\n
    return a0;\n
}\n
", "4225079:sub_407837": null, "4225088:_ZN7MgcFile8AddFrameEP9mgc_frame": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long MgcFile::AddFrame(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    struct_0 *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x9]\n
    struct_0 *v7;  // rax\n
    unsigned long v9;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v10;  // rcx\n
    struct_0 *v11;  // rax\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v14;  // rax\n
    struct_0 *v17;  // rsi\n
    unsigned long long *v18;  // rax\n
    unsigned long v19;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = v4;\n
    if (!v3)\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    if (!v1->field_0)\n
    {\n
        v7 = v1;\n
        v7->field_c = 16;\n
        v9 = v7->field_c * 8;\n
        if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x8<64>, cc_ndep<8>))\n
            v9 = -1;\n
        v1->field_0 = operator new[](v9);\n
    }\n
    v10 = v1;\n
    if (v10->field_8 == v10->field_c)\n
    {\n
        v11 = v1;\n
        v11->field_c = v11->field_c * 2;\n
        v12 = v11->field_c;\n
        v13 = v12 * 8;\n
        if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x8<64>, cc_ndep<8>))\n
            v13 = -1;\n
        v14 = v1;\n
        *(&v2) = operator new[](v13);\n
        cgc_memcpy(*(&v2), v14->field_0, v14->field_8 * 8);\n
        *(&v0) = v1->field_0;\n
        if (*(&v0))\n
            operator delete(*(&v0));\n
        v1->field_0 = *(&v2);\n
    }\n
    v17 = v1;\n
    v18 = v17->field_0;\n
    v19 = v17->field_8;\n
    v17->field_8 = v19 + 1;\n
    v18[v19] = v3;\n
    v5 = 1;\n
    return v5 & 1;\n
}\n
", "4225381:sub_407965": null, "4225392:_ZNK7MgcFile8GetFrameEj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long MgcFile::GetFrame const(struct_0 *a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a1 >= a0->field_8)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *((a0->field_0 + a1 * 8));\n
    return v0;\n
}\n
", "4225460:sub_4079b4": null, "4225472:_ZN7MgcFile5RemixEPhPjj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long MgcFile::Remix(struct_0 *a0, char *a1, unsigned int *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    char *v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    char *v5;  // rax\n
\n
    for (v3 = 0; v3 < a0->field_8; v3 += 1)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v0 = v2;\n
            if (v0 >= MgcHeaderInfo::CalcFrameSize(*((a0->field_0 + (v3 << 3)))))\n
                break;\n
            v1 = *((a0->field_0 + v3 * 8)) + 5 + v2;\n
            v5 = v1;\n
            *(v5) = a1[*(a2)] * *(v5);\n
            *(a2) = (0 CONCAT *(a2) + 33) /m a3 >> 32;\n
            v2 += 1;\n
        }\n
    }\n
    return v3;\n
}\n
", "4225684:sub_407a94": null, "4225696:_ZN7MgcFile14PrintFrameDataEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern void* cgc_stdout;\n
extern unsigned long long g_40a201;\n
extern unsigned long long g_40a213;\n
extern unsigned long long g_40a21a;\n
\n
long long MgcFile::PrintFrameData(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned long v5;  // rcx\n
\n
    cgc_printf(&g_40a201, a1, a2, a3, a4);\n
    for (v3 = 0; v3 < a0->field_8; v3 += 1)\n
    {\n
        v2 = *((a0->field_0 + v3 * 8)) + 5;\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = v1;\n
            if (v0 >= MgcHeaderInfo::CalcFrameSize(*((a0->field_0 + (v3 << 3)))))\n
                break;\n
            v5 = v1;\n
            cgc_printf(&g_40a213, v2[v5], a2, v5, a4);\n
            v1 += 1;\n
        }\n
    }\n
    cgc_printf(&g_40a21a, a1, a2, a0, a4);\n
    return cgc_fflush(cgc_stdout);\n
}\n
", "4225924:sub_407b84": null, "4225936:_ZN7MgcFile11TotalFramesEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long MgcFile::TotalFrames(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4225953:sub_407ba1": null, "4225968:_ZN13MgcHeaderInfo6SyncedEP9mgc_frame": "long long MgcHeaderInfo::Synced(char a0[2])\n
{\n
    char v0;  // [bp-0x11]\n
\n
    v0 = 0;\n
    if (a0[0] == 255)\n
        v0 = (a0[1] & 240) == 240;\n
    return v0 & 1;\n
}\n
", "4226040:sub_407bf8": null, "4226048:_ZN13MgcHeaderInfo6SongV1EP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long MgcHeaderInfo::SongV1(struct_0 *a0)\n
{\n
    return (a0->field_1 & 8);\n
}\n
", "4226080:_ZN13MgcHeaderInfo5LayerEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long MgcHeaderInfo::Layer(struct_0 *a0)\n
{\n
    return (a0->field_1 & 6) >> 1;\n
}\n
", "4226104:sub_407c38": null, "4226112:_ZN13MgcHeaderInfo7BitrateEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
long long MgcHeaderInfo::Bitrate(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a0->field_2 >> 4;\n
    v0 = v1 - 1;\n
    if (v0 > 13)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    goto *((4235824 + (stack_base)[40] * 4)) + 4235824;\n
}\n
", "4226356:sub_407d34": null, "4226368:_ZN13MgcHeaderInfo4FreqEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
long long MgcHeaderInfo::Freq(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a0->field_2;\n
    v0 = (v1 & 12) >> 2;\n
    if (!v0)\n
    {\n
        v2 = 44100;\n
        return v2;\n
    }\n
    else if (v0 == 1)\n
    {\n
        v2 = 48000;\n
        return v2;\n
    }\n
    else if (v0 != 2)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0x7d00;\n
        return v2;\n
    }\n
}\n
", "4226494:sub_407dbe": null, "4226496:_ZN13MgcHeaderInfo15SamplesPerFrameEP9mgc_frame": "long long MgcHeaderInfo::SamplesPerFrame(void* a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned short v2;  // [bp-0xa]\n
\n
    v1 = MgcHeaderInfo::Layer(a0);\n
    v0 = v1;\n
    if (v0 == 1)\n
    {\n
        v2 = 384;\n
        return v2;\n
    }\n
    else if (v0 == 2)\n
    {\n
        v2 = 1152;\n
        return v2;\n
    }\n
    else if (v0 != 3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1152;\n
        return v2;\n
    }\n
}\n
", "4226623:sub_407e3f": null, "4226624:_ZN13MgcHeaderInfo19NumAdditionalFramesEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[3];\n
    unsigned short field_3;\n
} struct_0;\n
\n
long long MgcHeaderInfo::NumAdditionalFrames(struct_0 *a0)\n
{\n
    return *(&(&a0->padding_0)[1]);\n
}\n
", "4226642:sub_407e52": null, "4226656:_ZN13MgcHeaderInfo13CalcFrameSizeEP9mgc_frame": "long long MgcHeaderInfo::CalcFrameSize(void* a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rax\n
    unsigned int v7;  // eax\n
\n
    if (a0 && MgcHeaderInfo::Freq(a0))\n
    {\n
        v6 = MgcHeaderInfo::SamplesPerFrame(a0);\n
        v1 = (v6 >> 31 CONCAT v6) /m 8;\n
        v2 = MgcHeaderInfo::Bitrate(a0) * v1;\n
        v7 = v2;\n
        v3 = (v7 >> 31 CONCAT v7) /m MgcHeaderInfo::Freq(a0);\n
        if (!(v3 & 3))\n
            v0 = v3;\n
        else\n
            v0 = v3 + 4 - (v3 & 3);\n
        v4 = v0;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4226834:sub_407f12": null, "4226848:_ZN7mgc_tag11header_sizeEv": "long long mgc_tag::header_size(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    return 128;\n
}\n
", "4226863:sub_407f2f": null, "4226864:_ZN8PlaylistC1Ev": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long Playlist::__ctor__(struct_0 *a0)\n
{\n
    a0->field_8 = 0;\n
    a0->field_c = 0;\n
    a0->field_0 = 0;\n
    return a0;\n
}\n
", "4226899:sub_407f53": null, "4226912:_ZN8Playlist7AddSongEPK12tag_and_file": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long Playlist::AddSong(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20]\n
    struct_0 *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x9]\n
    struct_0 *v7;  // rax\n
    unsigned long v9;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v10;  // rcx\n
    struct_0 *v11;  // rax\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v14;  // rax\n
    struct_0 *v17;  // rcx\n
    unsigned long long v18;  // rdi\n
    unsigned long long v19;  // rax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = v4;\n
    if (v3 && v1->field_8 < 16000)\n
    {\n
        if (!v1->field_0)\n
        {\n
            v7 = v1;\n
            v7->field_c = 16;\n
            v9 = v7->field_c * 144;\n
            if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x90<64>, cc_ndep<8>))\n
                v9 = -1;\n
            v1->field_0 = operator new[](v9);\n
        }\n
        v10 = v1;\n
        if (v10->field_8 == v10->field_c)\n
        {\n
            v11 = v1;\n
            v11->field_c = v11->field_c * 2;\n
            v12 = v11->field_c;\n
            v13 = v12 * 144;\n
            if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x90<64>, cc_ndep<8>))\n
                v13 = -1;\n
            v14 = v1;\n
            *(&v2) = operator new[](v13);\n
            cgc_memcpy(*(&v2), v14->field_0, v14->field_8 * 144);\n
            *(&v0) = v1->field_0;\n
            if (*(&v0))\n
                operator delete[](*(&v0));\n
            v1->field_0 = *(&v2);\n
        }\n
        v17 = v1;\n
        v18 = v17->field_0;\n
        v19 = v17->field_8;\n
        v17->field_8 = v19 + 1;\n
        memcpy(v18 + v19 * 144, v3, 144);\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    v5 = 0;\n
    return v5 & 1;\n
}\n
", "4227239:sub_4080a7": null, "4227248:_ZN8Playlist10RemoveSongEjP12tag_and_file": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::RemoveSong(struct_0 *a0, unsigned long a1, void* a2)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    char v2;  // [bp-0x21]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v4;  // [bp-0x10]\n
    struct_0 *v6;  // rax\n
    struct_0 *v10;  // rax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v0 = v4;\n
    v2 = 0;\n
    for (v1 = 0; v1 < v0->field_8; v1 += 1)\n
    {\n
        if (*((v0->field_0 + v1 * 144 + 136)) == v3)\n
        {\n
            if (a2)\n
                memcpy(a2, v0->field_0 + v1 * 144, 144);\n
            v2 = 1;\n
            break;\n
        }\n
    }\n
    if (!(v2 & 1))\n
        return v2 & 1;\n
    if (v1 < v0->field_8 - 1)\n
    {\n
        v6 = v0;\n
        cgc_memmove(v6->field_0 + v1 * 144, v6->field_0 + (v1 + 1) * 144, (v6->field_8 - (v1 + 1)) * 144);\n
    }\n
    v10 = v0;\n
    v10->field_8 = v10->field_8 - 1;\n
    return v2 & 1;\n
}\n
", "4227534:sub_4081ce": null, "4227536:_ZN8Playlist7GetSongEj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::GetSong(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a0->field_8)\n
            return v1;\n
        if (*((a0->field_0 + v0 * 144 + 136)) == a1)\n
        {\n
            v1 = a0->field_0 + v0 * 144;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4227675:sub_40825b": null, "4227680:_ZN8Playlist8SortByIdEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortById(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    struct_0 *v2;  // rdi\n
\n
    v0 = a0;\n
    v2 = v0;\n
    return Playlist::Sort(v2, v2->field_0, v2->field_8, CompareIds);\n
}\n
", "4227720:sub_408288": null, "4227728:_ZN8Playlist4SortEP12tag_and_filejPFiS1_S1_E": "long long Playlist::Sort(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned long long v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v0 = v3;\n
    v5 = a2;\n
    v6 = v5 * 144;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x90<64>, cc_ndep<8>))\n
        v6 = -1;\n
    v2 = operator new[](v6);\n
    Playlist::SortHelper(v0, a1, v2, 0, a2, a3);\n
    v7 = v2;\n
    *(&v1) = v7;\n
    if (v7)\n
    {\n
        v7 = operator delete[](*(&v1));\n
        return v7;\n
    }\n
    return v2;\n
}\n
", "4227856:_ZN8Playlist11SortByTitleEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortByTitle(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    struct_0 *v2;  // rdi\n
\n
    v0 = a0;\n
    v2 = v0;\n
    return Playlist::Sort(v2, v2->field_0, v2->field_8, CompareTitles);\n
}\n
", "4227896:sub_408338": null, "4227904:_ZN8Playlist20SortByArtistAndAlbumEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortByArtistAndAlbum(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    struct_0 *v7;  // rdi\n
    struct_0 *v8;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v9;  // rdi\n
\n
    v5 = a0;\n
    v0 = v5;\n
    Playlist::Sort(v0, v0->field_0, v0->field_8, CompareArtists);\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v0->field_8)\n
        v3 = v0->field_0 + 41;\n
    for (v1 = 0; v1 < v0->field_8; v1 += 1)\n
    {\n
        *(&v2) = v0->field_0 + v1 * 144 + 41;\n
        if (cgc_memcmp(v3, *(&v2), 1))\n
        {\n
            v7 = v0;\n
            Playlist::Sort(v7, v7->field_0 + v4 * 144, v1 - v4, CompareAlbums);\n
            v4 = v1;\n
            v3 = *(&v2);\n
        }\n
    }\n
    v8 = v0;\n
    if (v8->field_8)\n
    {\n
        v9 = v0;\n
        v8 = Playlist::Sort(v9, v9->field_0 + v4 * 144, v9->field_8 - v4, CompareAlbums);\n
    }\n
    return v8;\n
}\n
", "4228209:sub_408471": null, "4228224:_ZN8Playlist20SortByArtistAndTitleEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortByArtistAndTitle(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    struct_0 *v7;  // rdi\n
    struct_0 *v8;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v9;  // rdi\n
\n
    v5 = a0;\n
    v0 = v5;\n
    Playlist::Sort(v0, v0->field_0, v0->field_8, CompareArtists);\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v0->field_8)\n
        v3 = v0->field_0 + 41;\n
    for (v1 = 0; v1 < v0->field_8; v1 += 1)\n
    {\n
        *(&v2) = v0->field_0 + v1 * 144 + 41;\n
        if (cgc_memcmp(v3, *(&v2), 1))\n
        {\n
            v7 = v0;\n
            Playlist::Sort(v7, v7->field_0 + v4 * 144, v1 - v4, CompareTitles);\n
            v4 = v1;\n
            v3 = *(&v2);\n
        }\n
    }\n
    v8 = v0;\n
    if (v8->field_8)\n
    {\n
        v9 = v0;\n
        v8 = Playlist::Sort(v9, v9->field_0 + v4 * 144, v9->field_8 - v4, CompareTitles);\n
    }\n
    return v8;\n
}\n
", "4228529:sub_4085b1": null, "4228544:_ZN8Playlist11SortByAlbumEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortByAlbum(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    struct_0 *v2;  // rdi\n
\n
    v0 = a0;\n
    v2 = v0;\n
    return Playlist::Sort(v2, v2->field_0, v2->field_8, CompareAlbums);\n
}\n
", "4228584:sub_4085e8": null, "4228592:_ZN8Playlist19SortByAlbumAndTitleEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::SortByAlbumAndTitle(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    struct_0 *v7;  // rdi\n
    struct_0 *v8;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v9;  // rdi\n
\n
    v5 = a0;\n
    v0 = v5;\n
    Playlist::Sort(v0, v0->field_0, v0->field_8, CompareAlbums);\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v0->field_8)\n
        v3 = v0->field_0 + 71;\n
    for (v1 = 0; v1 < v0->field_8; v1 += 1)\n
    {\n
        *(&v2) = v0->field_0 + v1 * 144 + 71;\n
        if (cgc_memcmp(v3, *(&v2), 1))\n
        {\n
            v7 = v0;\n
            Playlist::Sort(v7, v7->field_0 + v4 * 144, v1 - v4, CompareTitles);\n
            v4 = v1;\n
            v3 = *(&v2);\n
        }\n
    }\n
    v8 = v0;\n
    if (v8->field_8)\n
    {\n
        v9 = v0;\n
        v8 = Playlist::Sort(v9, v9->field_0 + v4 * 144, v9->field_8 - v4, CompareTitles);\n
    }\n
    return v8;\n
}\n
", "4228897:sub_408721": null, "4228912:_ZN8Playlist12ListAllSongsEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern unsigned long long g_40a221;\n
extern unsigned long long g_40a268;\n
extern unsigned long long g_40a27d;\n
extern unsigned long long g_40a280;\n
extern unsigned long long g_40a28a;\n
extern unsigned long long g_40a293;\n
extern unsigned long long g_40a29e;\n
\n
long long Playlist::ListAllSongs(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    char *v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x14]\n
    char *v8;  // rcx\n
    char *v9;  // rcx, Other Possible Types: unsigned long\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rcx\n
    char *v12;  // rcx\n
    char *v13;  // rcx\n
\n
    for (v6 = 0; v6 < a0->field_8; v6 += 1)\n
    {\n
        v8 = v6 * 144;\n
        cgc_printf(&g_40a268, *(&v8[136 + a0->field_0]), a2, v8, a4);\n
        cgc_printf(\"Title: \", a1, a2, v8, a4);\n
        v9 = v6 * 144;\n
        v5 = &v9[a0->field_0 + 11];\n
        for (v4 = 0; v4 < 30; v4 += 1)\n
        {\n
            v9 = v4;\n
            cgc_printf(&g_40a27d, *((v5 + v9)), a2, v9, a4);\n
        }\n
        cgc_printf(&g_40a280, a1, a2, v9, a4);\n
        v10 = v6 * 144;\n
        v3 = &v10[a0->field_0 + 41];\n
        for (v2 = 0; v2 < 30; v2 += 1)\n
        {\n
            v10 = v2;\n
            cgc_printf(&g_40a27d, *((v3 + v10)), a2, v10, a4);\n
        }\n
        cgc_printf(&g_40a28a, a1, a2, v10, a4);\n
        v1 = a0->field_0 + v6 * 144 + 71;\n
        for (v0 = 0; v0 < 30; v0 += 1)\n
        {\n
            v11 = v0;\n
            cgc_printf(&g_40a27d, v1[v11], a2, v11, a4);\n
        }\n
        v12 = v6 * 144;\n
        cgc_printf(&g_40a293, *(&v12[101 + a0->field_0]), a2, v12, a4);\n
        v13 = v6 * 144;\n
        cgc_printf(&g_40a29e, v13[134 + a0->field_0], a2, v13, a4);\n
        cgc_printf(&g_40a221, a1, a2, v13, a4);\n
    }\n
    return v6;\n
}\n
", "4229444:sub_408944": null, "4229456:_ZN8Playlist13ClearPlaylistEb": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
long long Playlist::ClearPlaylist(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char v1;  // [bp-0x11]\n
\n
    v1 = a1 & 1;\n
    if ((v1 & 1) && a0->field_0)\n
    {\n
        *(&v0) = a0->field_0;\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    a0->field_0 = 0;\n
    a0->field_8 = 0;\n
    a0->field_c = 0;\n
    return a0;\n
}\n
", "4229574:sub_4089c6": null, "4229584:_ZN8Playlist6lengthEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long Playlist::length(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4229601:sub_4089e1": null, "4229616:_ZN8Playlist10SortHelperEP12tag_and_fileS1_jjPFiS1_S1_E": "long long Playlist::SortHelper(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long a3, unsigned long a4, struct struct_0 **a5)\n
{\n
    unsigned int v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x34]\n
    struct struct_0 **v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v8;  // rax\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
\n
    v5 = a3;\n
    v4 = a5;\n
    v7 = a4 - a3;\n
    if (v7 < 2)\n
        return a4 - a3;\n
    v3 = a4 + a3 >> 1;\n
    Playlist::SortHelper(a0, a1, a2, a3, v3, a5);\n
    Playlist::SortHelper(a0, a1, a2, v3, a4, a5);\n
    v2 = a3;\n
    v1 = v3;\n
    v0 = a3;\n
    while (v0 < a4)\n
    {\n
        if (v2 >= v3)\n
        {\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            memcpy(a2 + v0 * 144, a1 + v8 * 144, 144);\n
LABEL_408b84:\n
            v0 = v0 + 1;\n
        }\n
        else\n
        {\n
            if (v1 < a4 && v4(a1 + v2 * 144, a1 + v1 * 144) > 0)\n
            {\n
                v9 = v1;\n
                v1 = v9 + 1;\n
LABEL_408b49:\n
                memcpy(a2 + v0 * 144, a1 + v9 * 144, 144);\n
                goto LABEL_408b84;\n
            }\n
            v9 = v2;\n
            v2 = v9 + 1;\n
            goto LABEL_408b49;\n
        }\n
    }\n
    v7 = cgc_memcpy(a1 + a3 * 144, a2 + v5 * 144, (a4 - v5) * 144);\n
    return v7;\n
}\n
", "4230099:sub_408bd3": null, "4230112:_Z11RecvNewSongP12tag_and_file": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[128];\n
    unsigned int field_88;\n
} struct_0;\n
\n
extern unsigned int cgc_g_song_idx;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long RecvNewSong(struct_0 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x20]\n
    char v3;  // [bp-0x9]\n
    unsigned int v5;  // ecx\n
\n
    v2 = operator new(16);\n
    MgcFile::__ctor__(v2);\n
    a0->field_0 = v2;\n
    if (!(MgcFile::ReadMgcFile(a0->field_0, cgc_stdin) & 1))\n
    {\n
        v3 = 0;\n
        return v3 & 1;\n
    }\n
    cgc_fflush(cgc_stdout);\n
    v0 = &a0->padding_8;\n
    v1 = cgc_fread(v0, mgc_tag::header_size(&a0->padding_8), cgc_stdin);\n
    if (v1 == mgc_tag::header_size(&a0->padding_8))\n
    {\n
        v5 = cgc_g_song_idx;\n
        cgc_g_song_idx = cgc_g_song_idx + 1;\n
        a0->field_88 = v5;\n
        v3 = 1;\n
        return v3 & 1;\n
    }\n
    if (a0)\n
        operator delete(a0);\n
    v3 = 0;\n
    return v3 & 1;\n
}\n
", "4230379:sub_408ceb": null, "4230384:_Z13PrintPlaylistP8Playlistj": "extern void* cgc_stdout;\n
extern unsigned long long g_40a2ab;\n
extern unsigned long long g_40a86f;\n
\n
long long PrintPlaylist(void* a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (a0)\n
    {\n
        cgc_printf(&g_40a86f, a1, a2, a3, a4);\n
        cgc_printf(&g_40a2ab, Playlist::length(a0), a2, a3, a4);\n
        v1 = cgc_fflush(cgc_stdout);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4230478:sub_408d4e": null, "4230480:main": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
extern void cgc_stdin;\n
extern unsigned int cgc_stdout[4];\n
extern unsigned long long g_40a2dc;\n
extern unsigned long long g_40a2e9;\n
extern unsigned long long g_40a2ec;\n
extern unsigned long long g_40a2f8;\n
extern unsigned long long g_40a310;\n
extern unsigned long long g_40a32d;\n
extern unsigned long long g_40a341;\n
extern unsigned long long g_40a35a;\n
extern unsigned long long g_40a378;\n
extern unsigned long long g_40a393;\n
extern unsigned long long g_40a3a2;\n
extern unsigned long long g_40a3c5;\n
extern unsigned long long g_40a3dc;\n
extern unsigned long long g_40a3f9;\n
extern unsigned long long g_40a41b;\n
extern unsigned long long g_40a42d;\n
extern unsigned long long g_40a44f;\n
extern unsigned long long g_40a460;\n
extern unsigned long long g_40a475;\n
extern unsigned long long g_40a48a;\n
extern unsigned long long g_40a49e;\n
extern unsigned long long g_40a4a8;\n
extern unsigned long long g_40a4c7;\n
extern unsigned long long g_40a4d8;\n
extern unsigned long long g_40a4ef;\n
extern unsigned long long g_40a50e;\n
extern unsigned long long g_40a53a;\n
extern unsigned long long g_40a562;\n
extern unsigned long long g_40a586;\n
extern unsigned long long g_40a59a;\n
extern unsigned long long g_40a5ab;\n
extern unsigned long long g_40a5cd;\n
extern unsigned long long g_40a5e5;\n
extern unsigned long long g_40a605;\n
extern unsigned long long g_40a62c;\n
extern unsigned long long g_40a655;\n
extern unsigned long long g_40a67a;\n
extern unsigned long long g_40a69f;\n
extern unsigned long long g_40a6c7;\n
extern unsigned long long g_40a6fa;\n
extern unsigned long long g_40a732;\n
extern unsigned long long g_40a755;\n
extern unsigned long long g_40a787;\n
extern unsigned long long g_40a79f;\n
extern unsigned long long g_40a7b5;\n
extern unsigned long long g_40a7d0;\n
extern unsigned long long g_40a7ea;\n
extern unsigned long long g_40a801;\n
extern unsigned long long g_40a826;\n
extern unsigned long long g_40a880;\n
\n
int main(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x5e8]\n
    void* v1;  // [bp-0x5e0]\n
    unsigned long v2;  // [bp-0x5d8]\n
    void* v3;  // [bp-0x5d0]\n
    unsigned long v4;  // [bp-0x5c8]\n
    unsigned long v5;  // [bp-0x5c0]\n
    unsigned long v6;  // [bp-0x5b8]\n
    unsigned int v7;  // [bp-0x5ac]\n
    unsigned int v8;  // [bp-0x5a8]\n
    unsigned int v9;  // [bp-0x5a4]\n
    void* *v10;  // [bp-0x5a0]\n
    unsigned int v11;  // [bp-0x598]\n
    unsigned int v12;  // [bp-0x594]\n
    unsigned long v13;  // [bp-0x590]\n
    unsigned int v14;  // [bp-0x588]\n
    unsigned int v15;  // [bp-0x580]\n
    unsigned int v16;  // [bp-0x57c]\n
    unsigned int v17;  // [bp-0x578]\n
    unsigned int v18;  // [bp-0x574]\n
    char v19;  // [bp-0x570]\n
    char v20;  // [bp-0x4e0]\n
    unsigned int v21;  // [bp-0x450]\n
    unsigned int v22;  // [bp-0x44c]\n
    char v23[2];  // [bp-0x448]\n
    unsigned int v24;  // [bp-0x44]\n
    unsigned long v25;  // [bp-0x40]\n
    void* v26;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v27;  // [bp-0x30]\n
    unsigned int v28;  // [bp-0x24]\n
    struct_0 *v29;  // [bp-0x20]\n
    unsigned long v30;  // [bp-0x18]\n
    unsigned int v31;  // [bp-0x10]\n
    unsigned int v32;  // [bp-0xc]\n
    unsigned long v34;  // rcx\n
\n
    v32 = 0;\n
    v31 = a0;\n
    v30 = a1;\n
    v31 = 0x4347c000;\n
    v29 = v31;\n
    cgc_fxlat(*(&cgc_stdin), \"393748225\");\n
    cgc_fxlat(cgc_stdout, \"393748225\");\n
    v28 = v29->field_2;\n
    cgc_fbuffered(cgc_stdout, 1);\n
    cgc_printf(&g_40a2dc, 1, a2, a3, a4);\n
    cgc_printf(&g_40a2e9, 1, a2, a3, a4);\n
    cgc_fflush(cgc_stdout);\n
    v3 = operator new(16);\n
    Playlist::__ctor__(v3);\n
    v27 = v3;\n
    v26 = v27;\n
    v4 = operator new[](160);\n
    v5 = v4 + 160;\n
    v6 = v4;\n
    do\n
    {\n
        v1 = v6;\n
        Playlist::__ctor__(v1);\n
        v34 = v5;\n
        v2 = v1 + 16;\n
        v6 = v2;\n
    } while (v2 != v34);\n
    v25 = v4;\n
    v24 = 0;\n
    v22 = 0;\n
    v21 = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            if (!((v22 ^ 255) & 1))\n
            {\n
LABEL_409b1f:\n
                cgc_printf(&g_40a880, a1, a2, v34, a4);\n
                cgc_fflush(cgc_stdout);\n
                return 0;\n
            }\n
            cgc_printf(&g_40a2ec, a1, a2, v34, a4);\n
            if (v26 == v27)\n
            {\n
                cgc_printf(&g_40a2f8, a1, a2, v34, a4);\n
                cgc_printf(&g_40a310, a1, a2, v34, a4);\n
                cgc_printf(&g_40a32d, a1, a2, v34, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(&g_40a341, a1, a2, v34, a4);\n
                cgc_printf(&g_40a35a, a1, a2, v34, a4);\n
                cgc_printf(&g_40a378, a1, a2, v34, a4);\n
            }\n
            cgc_printf(&g_40a393, a1, a2, v34, a4);\n
            cgc_printf(&g_40a3a2, a1, a2, v34, a4);\n
            cgc_printf(&g_40a3c5, a1, a2, v34, a4);\n
            cgc_printf(&g_40a3dc, a1, a2, v34, a4);\n
            cgc_printf(&g_40a3f9, a1, a2, v34, a4);\n
            cgc_printf(&g_40a41b, a1, a2, v34, a4);\n
            cgc_printf(&g_40a42d, a1, a2, v34, a4);\n
            cgc_printf(&g_40a44f, a1, a2, v34, a4);\n
            if (v26 == v27)\n
            {\n
                cgc_printf(&g_40a460, a1, a2, v34, a4);\n
                cgc_printf(&g_40a475, a1, a2, v34, a4);\n
                cgc_printf(&g_40a48a, a1, a2, v34, a4);\n
                cgc_printf(&g_40a49e, a1, a2, v34, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(&g_40a4a8, a1, a2, v34, a4);\n
                cgc_printf(&g_40a4c7, a1, a2, v34, a4);\n
            }\n
            cgc_printf(\"[::]  \", a1, a2, v34, a4);\n
            cgc_fflush(cgc_stdout);\n
            v34 = *(&cgc_stdin);\n
            a1 = 0x400;\n
            a2 = 2;\n
            if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) < 0)\n
                goto LABEL_409b1f;\n
            if (!v23[0])\n
                continue;\n
            a1 = 0;\n
            a2 = 10;\n
            v21 = cgc_strtol(v23, NULL, 10);\n
            if (v21 == 1 && v26 == v27)\n
            {\n
                if ((RecvNewSong(&v20) & 1) && (Playlist::AddSong(v27, &v20) & 1))\n
                {\n
                    cgc_printf(&g_40a4d8, 0, 10, *(&cgc_stdin), a4);\n
                    goto LABEL_4090fc;\n
                }\n
                cgc_printf(&g_40a4ef, 0, 10, *(&cgc_stdin), a4);\n
LABEL_4090fc:\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409b1a;\n
            }\n
            if (v21 == 2 && v26 == v27)\n
            {\n
                cgc_printf(&g_40a50e, 0, 10, *(&cgc_stdin), a4);\n
                cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                v34 = *(&cgc_stdin);\n
                a1 = 0x400;\n
                a2 = 2;\n
                if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0)\n
                    continue;\n
                a2 = 10;\n
                v18 = cgc_strtol(v23, NULL, 10);\n
                if (!(Playlist::RemoveSong(v27, v18, &v19) & 1))\n
                {\n
                    cgc_printf(&g_40a562, 0x400, 10, *(&cgc_stdin), a4);\n
                }\n
                else\n
                {\n
                    for (v17 = 0; v17 < v24; v17 += 1)\n
                    {\n
                        Playlist::RemoveSong(v25 + v17 * 16, v18, NULL);\n
                    }\n
                    v0 = *(&v19);\n
                    if (v0)\n
                        operator delete(v0);\n
                    cgc_printf(&g_40a53a, 0x400, 10, *(&cgc_stdin), a4);\n
                }\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 3 && v26 == v27)\n
            {\n
                cgc_printf(&g_40a586, 0, 10, *(&cgc_stdin), a4);\n
                cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                v34 = *(&cgc_stdin);\n
                a1 = 0x400;\n
                a2 = 2;\n
                if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0)\n
                    continue;\n
                a1 = 0;\n
                a2 = 10;\n
                v16 = cgc_strtol(v23, NULL, 10);\n
                if (v16 < v24)\n
                    v26 = v25 + v16 * 16;\n
                else\n
                    cgc_printf(&g_40a59a, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 1)\n
            {\n
                cgc_printf(&g_40a5ab, 0, 10, *(&cgc_stdin), a4);\n
                cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                v34 = *(&cgc_stdin);\n
                a1 = 0x400;\n
                a2 = 2;\n
                if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0)\n
                    continue;\n
                a2 = 10;\n
                v15 = cgc_strtol(v23, NULL, 10);\n
                *(&v14) = Playlist::GetSong(v27, v15);\n
                v13 = Playlist::GetSong(v26, v15);\n
                if (*(&v14) && !v13 && (Playlist::AddSong(v26, *(&v14)) & 1))\n
                {\n
                    cgc_printf(&g_40a5cd, 0x400, 10, *(&cgc_stdin), a4);\n
                    goto LABEL_409458;\n
                }\n
                cgc_printf(&g_40a5e5, 0x400, 10, *(&cgc_stdin), a4);\n
LABEL_409458:\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 2)\n
            {\n
                cgc_printf(&g_40a605, 0, 10, *(&cgc_stdin), a4);\n
                cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                v34 = *(&cgc_stdin);\n
                a1 = 0x400;\n
                a2 = 2;\n
                if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0)\n
                    continue;\n
                v12 = cgc_strtol(v23, NULL, 10);\n
                if ((Playlist::RemoveSong(v26, v12, NULL) & 1))\n
                    cgc_printf(&g_40a62c, 0x400, 0, *(&cgc_stdin), a4);\n
                else\n
                    cgc_printf(&g_40a655, 0x400, 0, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 3)\n
            {\n
                v26 = v27;\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 4)\n
            {\n
                Playlist::ListAllSongs(v26, 0, 10, *(&cgc_stdin), a4);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 5)\n
            {\n
                Playlist::SortById(v26);\n
                cgc_printf(&g_40a67a, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 6)\n
            {\n
                Playlist::SortByTitle(v26);\n
                cgc_printf(&g_40a69f, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 7)\n
            {\n
                Playlist::SortByArtistAndAlbum(v26);\n
                cgc_printf(&g_40a6c7, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 8)\n
            {\n
                Playlist::SortByArtistAndTitle(v26);\n
                cgc_printf(&g_40a6fa, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 9)\n
            {\n
                Playlist::SortByAlbum(v26);\n
                cgc_printf(&g_40a732, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 10)\n
            {\n
                Playlist::SortByAlbumAndTitle(v26);\n
                cgc_printf(&g_40a755, 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 11)\n
            {\n
                cgc_printf(&g_40a787, 0, 10, *(&cgc_stdin), a4);\n
                cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                v34 = *(&cgc_stdin);\n
                a1 = 0x400;\n
                a2 = 2;\n
                if (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0)\n
                    continue;\n
                a2 = 10;\n
                v11 = cgc_strtol(v23, NULL, 10);\n
                v10 = Playlist::GetSong(v26, v11);\n
                if (!v10)\n
                {\n
                    cgc_printf(&g_40a7ea, 0x400, 10, *(&cgc_stdin), a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(&g_40a79f, 0x400, 10, *(&cgc_stdin), a4);\n
                    MgcFile::PrintFrameData(*(v10), 0x400, 10, *(&cgc_stdin), a4);\n
                    v9 = 0x1000;\n
                    MgcFile::Remix(*(v10), v29, &v28, v9);\n
                    cgc_printf(&g_40a7b5, 0x400, 10, *(&cgc_stdin), a4);\n
                    cgc_printf(&g_40a7d0, 0x400, 10, *(&cgc_stdin), a4);\n
                    MgcFile::PrintFrameData(*(v10), 0x400, 10, *(&cgc_stdin), a4);\n
                }\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 == 12 && v26 == v27)\n
            {\n
                if (v24 < 10)\n
                {\n
                    Playlist::ClearPlaylist(v25 + v24 * 16, 1);\n
                    a1 = v24;\n
                    v24 = a1 + 1;\n
                    cgc_printf(&g_40a801, a1, 10, *(&cgc_stdin), a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(&g_40a826, 0, 10, *(&cgc_stdin), a4);\n
                }\n
                cgc_fflush(cgc_stdout);\n
                goto LABEL_409ac0;\n
            }\n
            if (v21 != 13)\n
            {\n
LABEL_4099f6:\n
                if (v21 == 14 && v26 == v27)\n
                {\n
                    for (v7 = 0; v7 < v24; v7 += 1)\n
                    {\n
                        PrintPlaylist(v25 + v7 * 16, v7, 10, *(&cgc_stdin), a4);\n
                    }\n
                    goto LABEL_409ac0;\n
                }\n
                if (v21 == 15 && v26 == v27)\n
                {\n
                    v22 = 1;\n
                    goto LABEL_409ac0;\n
                }\n
                if (v21 == 12)\n
                {\n
                    Playlist::ListAllSongs(v27, 0, 10, *(&cgc_stdin), a4);\n
                }\n
                else if (v21 == 13)\n
                {\n
                    v22 = 1;\n
                }\n
LABEL_409ac0:\n
                goto LABEL_409b1a;\n
            }\n
            if (!(v26 == v27))\n
                goto LABEL_4099f6;\n
            cgc_printf(\"Enter Playlist ID to delete\", 0, 10, *(&cgc_stdin), a4);\n
            cgc_printf(\"[::] \", 0, 10, *(&cgc_stdin), a4);\n
            cgc_fflush(cgc_stdout);\n
            v34 = *(&cgc_stdin);\n
            a1 = 0x400;\n
            a2 = 2;\n
        } while (cgc_freaduntil(v23, 0x400, 2, *(&cgc_stdin)) <= 0);\n
        a1 = 0;\n
        a2 = 10;\n
        v8 = cgc_strtol(v23, NULL, 10);\n
        if (v8 >= v24)\n
        {\n
            cgc_printf(&g_40a59a, 0, 10, *(&cgc_stdin), a4);\n
        }\n
        else\n
        {\n
            Playlist::ClearPlaylist(v25 + v8 * 16, 1);\n
            if (v8 < v24 - 1)\n
                cgc_memmove(v25 + v8 * 16, v25 + (v8 + 1) * 16, (v24 - (v8 + 1)) * 16);\n
            v24 -= 1;\n
            Playlist::ClearPlaylist(v25 + v24 * 16, 0);\n
            cgc_printf(\"Deleted \", v8, 10, *(&cgc_stdin), a4);\n
        }\n
        cgc_fflush(cgc_stdout);\n
        goto LABEL_409ac0;\n
LABEL_409b1a:\n
    }\n
}\n
", "4234056:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:cgc_receive": null, "5242904:memcpy": null, "5242912:cgc_allocate": null, "5242920:cgc__terminate": null, "5242928:_ZdlPv": null, "5242936:_Znwm": null, "5242944:cgc_deallocate": null, "5242952:_ZdaPv": null, "5242960:cgc_transmit": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}