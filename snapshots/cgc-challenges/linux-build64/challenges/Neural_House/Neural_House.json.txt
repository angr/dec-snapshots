{"4206592:_init": "extern struct_0 *g_40cb58;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40cb58;\n
    if (g_40cb58)\n
        v1 = g_40cb58();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40cb70;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40cb70;\n
    goto *(4246392);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4206672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4206688:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4206704:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4206720:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4206736:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206752:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4206768:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4246336);\n
}\n
", "4206784:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206821:sub_4030e5": null, "4206822:sub_4030e6": null, "4206832:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40cb50;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206873:sub_403119": null, "4206880:register_tm_clones": "extern unsigned long long g_40cb60;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206937:sub_403159": null, "4206944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40cb40;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40cb40)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4206997:sub_403195": null, "4207001:sub_403199": null, "4207008:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207017:sub_4031a9": null, "4207024:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 * a0;\n
    if (a1 * a0 > -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_malloc_alloc(&g_heap, v1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(v0, 0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4207162:sub_40323a": null, "4207168:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 1;\n
}\n
", "4207202:sub_403262": null, "4207216:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 2;\n
}\n
", "4207250:sub_403292": null, "4207264:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 16;\n
}\n
", "4207298:sub_4032c2": null, "4207312:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 14;\n
}\n
", "4207346:sub_4032f2": null, "4207360:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 12;\n
}\n
", "4207394:sub_403322": null, "4207408:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 4;\n
}\n
", "4207442:sub_403352": null, "4207456:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 8;\n
}\n
", "4207490:sub_403382": null, "4207504:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 64;\n
}\n
", "4207538:sub_4033b2": null, "4207552:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 32;\n
}\n
", "4207586:sub_4033e2": null, "4207600:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 128;\n
}\n
", "4207636:sub_403414": null, "4207648:cgc_isxdigit": "long long cgc_isxdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    v2 = a0;\n
    v2 = cgc_toupper(v2);\n
    v1 = 1;\n
    if (cgc_isdigit(v2))\n
        return v1 & 1;\n
    v0 = 0;\n
    if (v2 >= 65)\n
        v0 = v2 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4207739:sub_40347b": null, "4207744:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4207815:sub_4034c7": null, "4207824:cgc_digittoint": "long long cgc_digittoint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 = cgc_toupper(v0);\n
    if (cgc_isdigit(v0))\n
    {\n
        v1 = v0 - 48;\n
        return v1;\n
    }\n
    if (v0 >= 65 && v0 <= 70)\n
    {\n
        v1 = v0 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4207930:sub_40353a": null, "4207936:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208007:sub_403587": null, "4208016:__cxa_pure_virtual": "long long __cxa_pure_virtual()\n
{\n
    unsigned long long v1;  // rdi\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    cgc__terminate(v1);\n
    return cgc_exit(v1, v2, v3, v4, v5, v6);\n
}\n
", "4208032:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_fflush(a0, v2, v3, v4, v5, v6);\n
}\n
", "4208064:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rcx\n
\n
    v1 = a0;\n
    if (a0->field_8 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a0->field_4 != 1)\n
    {\n
        v0 = 0;\n
        v4 = a0;\n
        ::0x4036c0::cgc_xlat(v1->field_10, &a0[1].field_8 + v1->field_8, v1->field_c - v4->field_8, v4);\n
        v5 = a0;\n
        if (::0x403730::cgc_transmit_all(v1->field_0, &v1[1].field_8 + v1->field_8, a0->field_c - v5->field_8, v5))\n
            v0 = -1;\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = v0;\n
        return v2;\n
    }\n
    else\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4208306:sub_4036b2": null, "4208320:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4208431:sub_40372f": null, "4208432:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4208563:sub_4037b3": null, "4208576:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    if (a1)\n
        a0[2] = 0;\n
    else\n
        a0[2] = -1;\n
    a0[3] = 0;\n
    return a0;\n
}\n
", "4208679:sub_403827": null, "4208688:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(1056);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = (a1 ? 1 : 2);\n
    v0->field_8 = 0;\n
    v0->field_c = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208839:sub_4038c7": null, "4208848:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    v5 = a2;\n
    if (a2->field_8 == a2->field_c)\n
        cgc__refill(a2);\n
    if (a2->field_8 != -1)\n
    {\n
        v5 = a2;\n
        v0 = a2->field_c - a2->field_8;\n
        if (v0 > a1)\n
            v0 = a1;\n
        cgc_memcpy(a0, &a2->padding_0[1 + v2->field_8], v0);\n
        v1 = v0 + v1;\n
        v6 = a2;\n
        v6->field_8 = v6->field_8 + v0;\n
        if (v2->field_8 == a2->field_c)\n
        {\n
            a2->field_c = 0;\n
            a2->field_8 = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!v0)\n
            break;\n
        ::0x403b20::cgc_xlat(a2->field_18, a0 + v1, v0);\n
        v1 = v0 + v1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4209221:sub_403a45": null, "4209232:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v7;  // rcx\n
\n
    if (a0->field_8 == a0->field_c)\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
    }\n
    if (!cgc_receive(a0, v3, v4, v5) && *(&v0))\n
    {\n
        v7 = *(&v0);\n
        a0->field_c = v7;\n
        ::0x403b20::cgc_xlat(a0->field_18, a0 + 1, a0->field_c, v7);\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4209426:sub_403b12": null, "4209440:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4209551:sub_403b8f": null, "4209552:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v2 = 0; v2 < a1 - 1; v2 += 1)\n
    {\n
        v1 = cgc__getc(a3);\n
        if (v1 == -1)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (v1 == a2)\n
            break;\n
        v2[a0] = v1;\n
    }\n
    if (v2 == a1 - 1)\n
    {\n
        do\n
        {\n
            v0 = cgc__getc(a3);\n
            if (v0 == -1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
        } while (v0 != a2);\n
    }\n
    v2[a0] = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4209820:sub_403c9c": null, "4209824:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    char *field_18;\n
} struct_0;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v8;  // rcx\n
\n
    if (a0->field_8 == -1)\n
    {\n
        if (!cgc_receive(a0, v4, v5, v6) && *(&v0))\n
        {\n
            ::0x403b20::cgc_xlat(a0->field_18, &v1, 1);\n
            v2 = v1;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        if (a0->field_8 == a0->field_c && cgc__refill(a0) < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v8 = a0->field_8;\n
        a0->field_8 = v8 + 1;\n
        v2 = a0[1].padding_0[v8];\n
        return v2;\n
    }\n
}\n
", "4210034:sub_403d72": null, "4210048:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4210082:sub_403da2": null, "4210096:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            if (a2->field_c + a1 >= 0x400)\n
            {\n
                v5 = a2->field_c;\n
                v0 = 0x400 - v5;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0, v0, v5);\n
                v6 = a2;\n
                v6->field_c = v6->field_c + v0;\n
                v1 = v0 + v1;\n
                cgc_fflush(a2);\n
            }\n
            if (v1 < a1)\n
            {\n
                v0 = a1 - v1;\n
                cgc_memcpy(&v2[1].field_8 + a2->field_c, a0 + v1, v0);\n
                v7 = a2;\n
                v7->field_c = v7->field_c + v0;\n
                v1 = v0 + v1;\n
            }\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    if (a2->field_10)\n
    {\n
        if (cgc_transmit_xlat(v2->field_0, a2->field_10, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        if (::0x403f70::cgc_transmit_all(a2->field_0, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    v3 = a1;\n
    return v3;\n
}\n
", "4210532:sub_403f64": null, "4210544:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4210675:sub_403ff3": null, "4210688:cgc_transmit_xlat": "long long cgc_transmit_xlat(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x448], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a3)\n
        {\n
            v0 = a3 - v1;\n
            if (v0 > 0x400)\n
                v0 = 0x400;\n
            cgc_memcpy(&v2, a2 + v1, v0);\n
            ::0x404100::cgc_xlat(a1, &v2, v0);\n
            if (::0x403f70::cgc_transmit_all(a0, &v2, v0))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4210937:sub_4040f9": null, "4210944:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4211055:sub_40416f": null, "4211056:cgc_fxlat": "long long cgc_fxlat(unsigned long long a0[4], unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v7;  // rax\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
    char *v9;  // rax\n
\n
    if (!a1)\n
    {\n
        cgc_free(a0[2]);\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        return a0;\n
    }\n
    v7 = cgc_realloc(a0[2], 0x100);\n
    a0[2] = v7;\n
    v3 = v7;\n
    v9 = cgc_realloc(a0[3], 0x100);\n
    a0[3] = v9;\n
    v2 = v9;\n
    v8 = cgc_hash_seed(a1);\n
    v5 = v8;\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v3[v4] = v4;\n
        v8 = v4 + 1;\n
    }\n
    for (v4 = 255; v4 >= 1; v4 = v8)\n
    {\n
        v1 = (0 CONCAT v5) /m v4 >> 32;\n
        v5 *= 3;\n
        v5 = v5 * 0x2000 ^ (v5 >> 19) ^ (v5 >> 21);\n
        v0 = v3[v4];\n
        v3[v4] = v3[v1];\n
        v3[v1] = v0;\n
        v8 = v4 - 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v2[v3[v4]] = v4;\n
        v8 = v4 + 1;\n
    }\n
    return v8;\n
}\n
", "4211432:sub_4042e8": null, "4211440:cgc_hash_seed": "long long cgc_hash_seed(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 826981510;\n
    for (v1 = 0; a0[v1]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = a0[v1] ^ v0;\n
        v0 = v0 * 0x2000 ^ (v0 >> 19);\n
    }\n
    return v0;\n
}\n
", "4211542:sub_404356": null, "4211552:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4211586:sub_404382": null, "4211600:cgc_malloc_alloc": "long long cgc_malloc_alloc(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (v1 > 2147483647)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = v1 - -3 & -4;\n
    if (v1 < 4)\n
    {\n
        v0 = cgc_tiny_alloc(a0, 4);\n
    }\n
    else if (v1 < 16)\n
    {\n
        v0 = cgc_tiny_alloc(a0, v1);\n
    }\n
    else if (v1 < 0x20000)\n
    {\n
        v0 = cgc_small_alloc(a0, v1);\n
    }\n
    else\n
    {\n
        v0 = cgc_large_alloc(a0, v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4211811:sub_404463": null, "4211824:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned long long field_1430;\n
    unsigned long long field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_tiny_alloc(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40]\n
    unsigned short v1[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned long long *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned short v7[2];  // rax\n
    struct_0 *v8;  // rax\n
    unsigned short v9[2];  // rax\n
\n
    v4 = a0;\n
    v3 = cgc_size_to_bin(a1);\n
    v2 = &(&a0->field_0)[v3]->field_0;\n
    if (v2)\n
    {\n
        (&a0->field_0)[v3] = *(v2);\n
        v5 = v2;\n
        return v5;\n
    }\n
    *(&v1) = *(&a0->padding_8[5136 + 8 * v3]);\n
    if (!v1)\n
    {\n
        if (!a0->field_1430)\n
        {\n
            a0->field_1430 = cgc_run_alloc(a0, 1);\n
            if (!a0->field_1430)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a0->field_1438 = 0;\n
        }\n
        v7 = v4->field_1430 + a0->field_1438;\n
        *(&a0->padding_8[5136 + 8 * v3]) = v7;\n
        v1 = v7;\n
        *(v1) = a1;\n
        *((v1 + 2)) = a1;\n
        v8 = a0;\n
        v8->field_1438 = v8->field_1438 + 0x1000;\n
        if (a0->field_1438 == 0x100000)\n
            a0->field_1430 = 0;\n
    }\n
    v0 = v1 + *((v1 + 2));\n
    v9 = v1;\n
    v9[1] = v9[1] + a1;\n
    if (*((v1 + 2)) + *(v1) > 0x1000)\n
        *(&a0->padding_8[5136 + 8 * v3]) = 0;\n
    v5 = v0;\n
    return v5;\n
}\n
", "4212278:sub_404636": null, "4212288:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_alloc(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 - -31 & -0x10;\n
    for (v2 = cgc_size_to_bin(v1); v2 < 131; v2 += 1)\n
    {\n
        for (v0 = a0[v2]; v0; v0 = v0->field_18)\n
        {\n
            if (v0->field_8 >= v1)\n
                break;\n
        }\n
        if (v0)\n
            break;\n
    }\n
    if (v2 == 131)\n
    {\n
        if (!cgc_small_alloc_run(a0))\n
        {\n
            v2 = 130;\n
            v0 = a0[v2];\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    cgc_small_unlink_free(a0, v2, v0);\n
    if (*((v0 + 8)) - v1 > 32)\n
        cgc_small_split(a0, v0, v1);\n
    v3 = v0 + 16;\n
    return v3;\n
}\n
", "4212604:sub_40477c": null, "4212608:cgc_large_alloc": "long long cgc_large_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v2 = a1 - -4111 & -0x1000;\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0[0] = *(&v1);\n
    v0[0] = a0;\n
    v0[1] = v2;\n
    v3 = v0 + 1;\n
    return v3;\n
}\n
", "4212742:sub_404806": null, "4212752:malloc_free": "long long malloc_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return *((a0 + (a1 >> 20) + 1048));\n
    }\n
    else if (v0)\n
    {\n
        if (v0 == 2)\n
        {\n
            v2 = cgc_small_free(a0, a1);\n
        }\n
        else if (v0 == 1)\n
        {\n
            v2 = cgc_tiny_free(a0, a1);\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_large_free(a0, a1);\n
        return v2;\n
    }\n
}\n
", "4212923:sub_4048bb": null, "4212928:cgc_large_free": "long long cgc_large_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
\n
    if ((a1 & 4095) != 16)\n
        cgc_heap_error(\"BAD FREE: large address is not aligned ptr=%08X\\n
\", a1);\n
    v0[0] = a1 - 16;\n
    if (v0[0] != a0)\n
        cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1, v0[0], a0);\n
    if (v0[1] >= 0x20000 && v0[1] <= 2147487743 && !(v0[1] & 4095))\n
        return cgc_deallocate(a0, a1);\n
    cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", a1, v0[1]);\n
    return cgc_deallocate(a0, a1);\n
}\n
", "4213154:sub_4049a2": null, "4213168:cgc_small_free": "long long cgc_small_free(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x58]\n
    unsigned long long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4[2];  // [bp-0x38]\n
    unsigned long long v5[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v6[2];  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[2];  // rax\n
\n
    v6[0] = a1 - 16;\n
    v3 = a1 & -0x100000;\n
    if ((a1 & 7))\n
        cgc_heap_error(\"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\", a1);\n
    if ((v6[1] & 1))\n
        cgc_heap_error(\"BAD SMALL FREE: double free ptr=%08x\\n
\", a1);\n
    if (v6[1] <= 0x20000 && !(v6[1] < 16))\n
        goto LABEL_404a59;\n
    cgc_heap_error(\"BAD SMALL FREE: corrupted size ptr=%08x\\n
\", a1);\n
LABEL_404a59:\n
    if (!v6[0])\n
        v5[0] = 0;\n
    else\n
        v5 = v6 - v6[0];\n
    v4[0] = v6 + v6[1];\n
    if (v5 && (*((v5 + 8)) & -2) != v6[0])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\", v5, a1);\n
    if (v4[0] != v6[1])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v4, a1);\n
    if (v5 && (*((v5 + 8)) & 1))\n
    {\n
        v2 = a0;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin(*((v5 + 8)) & -2), v5);\n
        v8 = v5;\n
        v8[1] = v6[1] + v8[1];\n
        v6 = v5;\n
        v4[0] = *((v6 + 8));\n
    }\n
    if ((v4[1] & 1))\n
    {\n
        v1 = a0;\n
        cgc_small_unlink_free(v1, cgc_size_to_bin(v4[1] & -2), v4);\n
        v9 = v6;\n
        v9[1] = v4[1] + v9[1];\n
        v4[0] = v6 + v6[1];\n
        v4[0] = *((v6 + 8));\n
    }\n
    v0 = a0;\n
    return cgc_small_insert_free(v0, cgc_size_to_bin(*((v6 + 8))), v6);\n
}\n
", "4213775:sub_404c0f": null, "4213776:cgc_tiny_free": "long long cgc_tiny_free(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned short *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v0 = a1 & -0x1000;\n
    v1 = cgc_size_to_bin(*(v0));\n
    *(a1) = a0[v1];\n
    a0[v1] = a1;\n
    return a0;\n
}\n
", "4213873:sub_404c71": null, "4213888:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned short *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a1 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = a1 - 16;\n
    v3 = v1->field_8 - 16;\n
    return v3;\n
}\n
", "4214044:sub_404d1c": null, "4214048:cgc_malloc_realloc": "long long cgc_malloc_realloc(unsigned long a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a2 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        v3 = cgc_malloc_alloc(a0, a2);\n
        return v3;\n
    }\n
    else if (cgc_malloc_size(a0, a1) < a2)\n
    {\n
        v2 = cgc_malloc_alloc(a0, a2);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = v2;\n
        v1 = a1;\n
        cgc_memcpy(v0, v1, cgc_malloc_size(a0, a1));\n
        malloc_free(a0, a1);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        return v3;\n
    }\n
}\n
", "4214318:sub_404e2e": null, "4214320:cgc_size_to_bin": "long long cgc_size_to_bin(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 16)\n
    {\n
        v0 = a0 / 4 - 1;\n
        return v0;\n
    }\n
    else if (a0 <= 0x200)\n
    {\n
        v0 = a0 / 16 - -2;\n
        return v0;\n
    }\n
    else if (a0 <= 0x1200)\n
    {\n
        v0 = (a0 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (a0 <= 0x20000)\n
    {\n
        v0 = (a0 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4214503:sub_404ee7": null, "4214512:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(&v0);\n
    v1 = v2 - -1048575 & -0x100000;\n
    if (v2 < v1)\n
        cgc_deallocate(a0, a1);\n
    if (v1 + 0x100000 < v2 + 0x200000)\n
        cgc_deallocate(a0, a1);\n
    *((a0 + (v1 >> 20) + 1048)) = a1;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214739:sub_404fd3": null, "4214752:cgc_small_alloc_run": "long long cgc_small_alloc_run(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned long long v2[2];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v0 = cgc_run_alloc(a0, 2);\n
    if (!v0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    v2[0] = v0 - -19 & -0x10;\n
    v2[0] = 0;\n
    v2[1] = 0x100000 - (v2 - v0) - 32;\n
    v1[0] = v2 + v2[1];\n
    v5 = v2[1];\n
    v1[0] = v5;\n
    v1[1] = 0;\n
    cgc_small_insert_free(a0, 130, v2, v5);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4214956:sub_4050ac": null, "4214960:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    struct_2 *v2;  // rax\n
\n
    v0 = a2;\n
    if (!(a2->field_8 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    v2 = a2;\n
    v2->field_8 = v2->field_8 & -2;\n
    if (a2->field_10)\n
        a2->field_10->field_18 = v0->field_18;\n
    if (a2->field_18)\n
        v0->field_18->field_10 = a2->field_10;\n
    if (a0[a1] == a2)\n
        a0[a1] = a2->field_18;\n
    a2->field_10 = 0;\n
    a2->field_18 = 0;\n
    return a2;\n
}\n
", "4215179:sub_40518b": null, "4215184:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_small_split(unsigned long long a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
\n
    *(&v2) = a1->field_8 - a2;\n
    v1[0] = &a1->padding_0[a2];\n
    v0 = &a1->padding_0[a1->field_8];\n
    a1->field_8 = a2;\n
    v1[0] = a1->field_8;\n
    v1[1] = *(&v2);\n
    *(v0) = *(&v2);\n
    return cgc_small_insert_free(a0, cgc_size_to_bin(*(&v2)), v1);\n
}\n
", "4215340:sub_40522c": null, "4215344:cgc_small_insert_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if ((a2->field_8 & 1) == 1)\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    v1 = a2;\n
    v1->field_8 = v1->field_8 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = *((a0 + a1 * 8));\n
    *((a0 + a1 * 8)) = a2;\n
    v2 = a2;\n
    if (a2->field_18)\n
    {\n
        v2 = a2->field_18;\n
        *((v2 + 16)) = a2;\n
    }\n
    return v2;\n
}\n
", "4215506:sub_4052d2": null, "4215520:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct_0 *v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    cgc_vfprintf(cgc_stderr, a0, &v14, &v18);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, a2, a3, a4, v28);\n
}\n
", "4215696:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (v0[a0] == a1)\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4215815:sub_405407": null, "4215824:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((a0 + v0)) != *((a1 + v0)))\n
        {\n
            v1 = *((a0 + v0)) - *((a1 + v0));\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4215978:sub_4054aa": null, "4215984:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4216083:sub_405513": null, "4216096:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    if (a0 > a1)\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            *((a0 + -1 + a2 - v0)) = *(-1 + a1 + a2 - v0);\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4216296:sub_4055e8": null, "4216304:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = a1;\n
    }\n
    return a0;\n
}\n
", "4216388:sub_405644": null, "4216400:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4216560:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4216605:sub_40571d": null, "4216608:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4216769:sub_4057c1": null, "4216784:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v0 = 1;\n
    if (a0->field_8 == -1)\n
    {\n
        v0 = 0;\n
        a0->field_8 = 0;\n
    }\n
    v1 = cgc__vsfprintf(a1, a2, a0, 0, 2147483647);\n
    if (!v0)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4216912:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4217073:sub_4058f1": null, "4217088:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0, 2147483647);\n
}\n
", "4217141:sub_405935": null, "4217152:cgc__vsfprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_1 *a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned long long *v0;  // [bp-0x178]\n
    struct_1 *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x164]\n
    unsigned int *v3;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x14c]\n
    unsigned int *v6;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x140]\n
    unsigned int v8;  // [bp-0x134]\n
    unsigned int *v9;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0x128]\n
    unsigned int v11;  // [bp-0x11c]\n
    unsigned int v12;  // [bp-0x118]\n
    unsigned int v13;  // [bp-0x114]\n
    unsigned int v14;  // [bp-0x110]\n
    char v15;  // [bp-0x109]\n
    unsigned long v16;  // [bp-0x108]\n
    unsigned long v17;  // [bp-0x100]\n
    char v18;  // [bp-0xf1]\n
    unsigned long v19;  // [bp-0xf0]\n
    unsigned long v20;  // [bp-0xe8]\n
    char v21;  // [bp-0xd9]\n
    unsigned long v22;  // [bp-0xd8]\n
    unsigned long v23;  // [bp-0xd0]\n
    unsigned long v24;  // [bp-0xc8]\n
    unsigned long v25;  // [bp-0xc0]\n
    char v26;  // [bp-0xb1]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned long v29;  // [bp-0xa8]\n
    struct_0 *v30;  // [bp-0xa0]\n
    char v31;  // [bp-0x91]\n
    unsigned long v32;  // [bp-0x90]\n
    char v33;  // [bp-0x88]\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v35;  // [bp-0x3c]\n
    unsigned int v36;  // [bp-0x38]\n
    char v37;  // [bp-0x31]\n
    char *v38;  // [bp-0x28]\n
    void* v39;  // [bp-0x20]\n
    struct_1 *v40;  // [bp-0x18]\n
    struct_0 *v41;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v43;  // rax\n
    char *v44;  // rax\n
    struct_0 *v45;  // rax\n
    struct_0 *v46;  // rax\n
    struct_0 *v48;  // rax\n
    struct_0 *v50;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_1 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    struct_1 *v57;  // rcx\n
    unsigned long long v58;  // rdx\n
    unsigned long long *v59;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v60;  // rcx\n
    char *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned int *v64;  // rax\n
    struct_1 *v65;  // rcx\n
    unsigned int *v66;  // rdx\n
    struct_1 *v67;  // rcx\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    struct_1 *v70;  // rcx\n
    unsigned int *v71;  // rdx\n
    unsigned long long v72;  // rsi\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rcx\n
    char *v75;  // rax\n
    char *v76;  // rax\n
\n
    v41 = a0;\n
    v40 = a1;\n
    v39 = a2;\n
    v38 = a3;\n
    v34 = 0;\n
    while (true)\n
    {\n
        v43 = v41;\n
        v41 = v43 + 1;\n
        v37 = v43->field_0;\n
        if (!v37)\n
            break;\n
        v31 = 32;\n
        while (v37 != 37)\n
        {\n
            if (v34 >= a4)\n
            {\n
                v44 = v34;\n
                v34 = v44 + 1;\n
                if (v44 == -1)\n
                    cgc__terminate(a0);\n
            }\n
            else\n
            {\n
                v26 = v37;\n
                if (v39)\n
                    cgc_fwrite(&v26, 1, v39);\n
                if (v38)\n
                    v38[v34] = v26;\n
                v34 += 1;\n
            }\n
            v45 = v41;\n
            v41 = v45 + 1;\n
            v37 = v45->field_0;\n
            if (!v37)\n
                goto LABEL_40642c;\n
        }\n
        v30 = v41;\n
        v36 = 4;\n
        v35 = 0;\n
        v46 = v41;\n
        v41 = v46 + 1;\n
        v14 = v46->field_0;\n
        v37 = v14;\n
        if (!v14)\n
            break;\n
        if (v14 == 32)\n
        {\n
            v31 = 32;\n
        }\n
        else if (v14 != 48)\n
        {\n
            v41 += 1;\n
        }\n
        else\n
        {\n
            v31 = 48;\n
        }\n
        if (*(v41) >= 48 && *(v41) <= 57)\n
            v35 = cgc_strtoul(v41, &v41, 10);\n
        v48 = v41;\n
        v41 = v48 + 1;\n
        v13 = v48->field_0;\n
        v37 = v13;\n
        if (!v13)\n
            break;\n
        if (v13 == 104)\n
        {\n
            if (v41->field_0 == 104)\n
            {\n
                v41 += 1;\n
                v36 = 1;\n
            }\n
            else\n
            {\n
                v36 = 2;\n
            }\n
        }\n
        else\n
        {\n
            if (v13 != 108)\n
            {\n
                v41 += 1;\n
            }\n
            else if (v41->field_0 != 108)\n
            {\n
                v36 = 4;\n
            }\n
            else\n
            {\n
                v41 += 1;\n
                v36 = 8;\n
            }\n
        }\n
        v50 = v41;\n
        v41 = v50 + 1;\n
        v12 = v50->field_0;\n
        v37 = v12;\n
        if (!v12)\n
        {\n
            v25 = v41 - v30;\n
            if (v34 >= a4)\n
            {\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            else\n
            {\n
                v24 = a4 - v34;\n
                if (v24 > v25)\n
                    v24 = v25;\n
                if (v39)\n
                    cgc_fwrite(v30, v24, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], v30, v24);\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            break;\n
        }\n
        if (v12 == 88)\n
        {\n
LABEL_405e8d:\n
            if (v37 == 100)\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v10 = v40;\n
                v11 = v10->field_0;\n
                if (v11 > 40)\n
                {\n
                    v65 = v10;\n
                    v66 = v65->field_8;\n
                    v65->field_8 = &v66[2];\n
                    v9 = v66;\n
                }\n
                else\n
                {\n
                    v62 = v10;\n
                    v63 = v11;\n
                    v64 = v63 + v62->field_10;\n
                    v62->field_0 = v63 + 8;\n
                    v9 = v64;\n
                }\n
                v27 = *(v9);\n
                cgc__convert_signed(&v33, v27, 10, 0);\n
            }\n
            else\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v7 = v40;\n
                v8 = v7->field_0;\n
                if (v8 > 40)\n
                {\n
                    v70 = v7;\n
                    v71 = v70->field_8;\n
                    v70->field_8 = &v71[2];\n
                    v6 = v71;\n
                }\n
                else\n
                {\n
                    v67 = v7;\n
                    v68 = v8;\n
                    v69 = v68 + v67->field_10;\n
                    v67->field_0 = v68 + 8;\n
                    v6 = v69;\n
                }\n
                v28 = *(v6);\n
                a0 = &v33;\n
                v72 = v28;\n
                v73 = (v37 == 117 ? 16 : 10);\n
                v74 = v37 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v32 = cgc_strlen(&v33);\n
            if (v32 < v35)\n
            {\n
                v35 -= v32;\n
                do\n
                {\n
                    if (v34 >= a4)\n
                    {\n
                        v75 = v34;\n
                        v34 = v75 + 1;\n
                        if (v75 == -1)\n
                            cgc__terminate(a0);\n
                    }\n
                    else\n
                    {\n
                        v21 = v31;\n
                        if (v39)\n
                            cgc_fwrite(&v21, 1, v39);\n
                        if (v38)\n
                            v38[v34] = v21;\n
                        v34 += 1;\n
                    }\n
                    v35 -= 1;\n
                } while (v35 > 0);\n
            }\n
            v20 = v32;\n
            if (v34 < a4)\n
            {\n
                v19 = a4 - v34;\n
                if (v19 > v20)\n
                    v19 = v20;\n
                if (v39)\n
                    cgc_fwrite(&v33, v19, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], &v33, v19);\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            goto LABEL_40641d;\n
        }\n
        else\n
        {\n
            if (v12 == 99)\n
            {\n
                v4 = v40;\n
                v5 = v4->field_0;\n
                if (v5 > 40)\n
                {\n
                    v55 = v4;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v3 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v4;\n
                    v53 = v5;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v3 = v54;\n
                }\n
                v37 = *(v3);\n
                if (v34 >= a4)\n
                {\n
                    v61 = v34;\n
                    v34 = v61 + 1;\n
                    if (v61 == -1)\n
                        cgc__terminate(a0);\n
                }\n
                else\n
                {\n
                    v18 = v37;\n
                    if (v39)\n
                        cgc_fwrite(&v18, 1, v39);\n
                    if (v38)\n
                        v38[v34] = v18;\n
                    v34 += 1;\n
                }\n
                goto LABEL_40641d;\n
            }\n
            if (v12 == 100)\n
                goto LABEL_405e8d;\n
            if (v12 == 115)\n
            {\n
                v1 = v40;\n
                v2 = v1->field_0;\n
                if (v2 <= 40)\n
                {\n
                    v57 = v1;\n
                    v58 = v2;\n
                    v59 = v58 + v57->field_10;\n
                    v57->field_0 = v58 + 8;\n
                }\n
                else\n
                {\n
                    v60 = v1;\n
                    v59 = v60->field_8;\n
                    v60->field_8 = v59 + 8;\n
                }\n
                v0 = v59;\n
                v29 = *(v0);\n
                v17 = cgc_strlen(v29);\n
                if (v34 < a4)\n
                {\n
                    v16 = a4 - v34;\n
                    if (v16 > v17)\n
                        v16 = v17;\n
                    if (v39)\n
                        cgc_fwrite(v29, v16, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v29, v16);\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
LABEL_40641d:\n
            }\n
            else if (v12 != 117 && v12 != 120)\n
            {\n
                v23 = v41 - v30;\n
                if (v34 < a4)\n
                {\n
                    v22 = a4 - v34;\n
                    if (v22 > v23)\n
                        v22 = v23;\n
                    if (v39)\n
                        cgc_fwrite(v30, v22, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v30, v22);\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                goto LABEL_40641d;\n
            }\n
        }\n
    }\n
LABEL_40642c:\n
    v39 = 0;\n
    if (v34 >= a4)\n
    {\n
        v76 = v34;\n
        v34 = v76 + 1;\n
        if (v76 != -1)\n
            return v34 - 1;\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        if (v39)\n
            cgc_fwrite(&v15, 1, v39);\n
        if (v38)\n
            v38[v34] = v15;\n
        v34 += 1;\n
        return v34 - 1;\n
    }\n
}\n
", "4220105:sub_4064c9": null, "4220112:cgc__convert_signed": "long long cgc__convert_signed(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (v0 < 0)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 45;\n
        v0 = -(v0);\n
    }\n
    return cgc__convert_unsigned(v1, v0, a2, a3);\n
}\n
", "4220193:sub_406521": null, "4220208:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v3 = a1;\n
    v1 = &a0[20];\n
    if (a3)\n
        v2 = \"0123456789ABCDEF\";\n
    else\n
        v2 = \"0123456789abcdef\";\n
    v5 = v1;\n
    v1 = v5 + 1;\n
    v5[1].field_-1 = 0;\n
    if (!v3)\n
    {\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        v6[1].field_-1 = *(v2);\n
        return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
    }\n
    while (true)\n
    {\n
        v0 = v2;\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT v3) /m a2 >> 32];\n
        v3 = (0 CONCAT v3) /m a2;\n
    }\n
}\n
", "4220453:sub_406625": null, "4220464:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(unsigned int a0, unsigned long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4220506:sub_40665a": null, "4220512:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(v2));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4220677:sub_406705": null, "4220688:cgc_strcasestr": "long long cgc_strcasestr(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_strlen(a1);\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!a0[v1])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strncasecmp(&a0[v1], a1, v0))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4220832:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; a0[v0]; v0 += 1)\n
    {\n
        if (a0[v0] == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = &a0[v0];\n
    return v1;\n
}\n
", "4220971:sub_40682b": null, "4220976:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4221115:sub_4068bb": null, "4221120:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    for (v0 = a0; *(v1); v0 += 1)\n
    {\n
        *(v0) = *(v1);\n
        v1 += 1;\n
    }\n
    *(v0) = 0;\n
    return a0;\n
}\n
", "4221210:sub_40691a": null, "4221216:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    v1[v0] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221329:sub_406991": null, "4221344:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4221407:sub_4069df": null, "4221408:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char v1;  // [bp-0x31]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = &v4[a2];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v4))\n
        {\n
            v1 = 0;\n
            if (*(v3))\n
            {\n
                v0 = cgc_tolower(*(v4));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(v3)))\n
                    v1 = v4 < v2;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    if (v4 == v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = *(v4) - *(v3);\n
    return v5;\n
}\n
", "4221640:sub_406ac8": null, "4221648:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    v1 = a0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = v1 - a0 < a2;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(v2);\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - a0 < a2; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return a0;\n
}\n
", "4221827:sub_406b83": null, "4221840:cgc_strndup": "long long cgc_strndup(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
        v1 = a1;\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    *((v0 + v1)) = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221979:sub_406c1b": null, "4221984:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = &*(a0)->field_0;\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v0[v1]; v1 += 1)\n
    {\n
        if (cgc_strchr(a1, v0[v1]))\n
            break;\n
    }\n
    if (!v0[v1])\n
        *(a0) = 0;\n
    else\n
        *(a0) = &v0[1 + v1];\n
    v0[v1] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4222203:sub_406cfb": null, "4222208:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(&a0[v0], a1))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
}\n
", "4222335:sub_406d7f": null, "4222336:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x68], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x60], Other Possible Types: unsigned long long\n
    char v2[2];  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8[2];  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x24]\n
    char v10[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v11;  // [bp-0x10]\n
\n
    *(&v10) = a0;\n
    v9 = a2;\n
    *(&v8) = v10;\n
    v7 = 1;\n
    v6 = 1;\n
    v5 = 0;\n
    for (v4 = 0; cgc_isspace(*(v10)); v10 += 1)\n
    {\n
        if (!*(v10))\n
            goto LABEL_406f3c;\n
    }\n
    if (*(v10) == 43)\n
    {\n
        v7 = 1;\n
        v10 += 1;\n
    }\n
    else if (*(v10) == 45)\n
    {\n
        v7 = -1;\n
        v10 += 1;\n
    }\n
    if (v9 == 16)\n
    {\n
        if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
            v10 += 2;\n
        goto LABEL_406f4b;\n
    }\n
    if (v9)\n
    {\n
LABEL_406f4b:\n
        for (; *(v10); v10 += 1)\n
        {\n
            if (cgc_isdigit(*(v10)))\n
            {\n
                v3 = *(v10) - 48;\n
            }\n
            else if (cgc_islower(*(v10)))\n
            {\n
                v3 = *(v10) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v10)))\n
                    break;\n
                v3 = *(v10) + -55;\n
            }\n
            if (v3 >= v9)\n
                break;\n
            v6 = 0;\n
            v4 = v9 * v4 + v3;\n
            if (v4 > 2147483647)\n
                v5 = 1;\n
        }\n
    }\n
    if (*(v10) == 48 && *((v10 + 1)) >= 48 && *((v10 + 1)) <= 55)\n
    {\n
        *(&v10) = v10 + 1;\n
        v9 = 8;\n
        goto LABEL_406f3c;\n
    }\n
    if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
    {\n
        v10 += 2;\n
        v9 = 16;\n
        goto LABEL_406f3c;\n
    }\n
    if (!cgc_isdigit(*(v10)))\n
        goto LABEL_406f3c;\n
    v9 = 10;\n
LABEL_406f3c:\n
    if (a1)\n
    {\n
        if (v6)\n
            *(&v2) = v8;\n
        else\n
            v2 = v10;\n
        *(a1) = v2;\n
    }\n
    if (v7 >= 0)\n
    {\n
        if (v5)\n
            v0 = 2147483647;\n
        else\n
            v0 = v4;\n
        v11 = v0;\n
        return v11;\n
    }\n
    else\n
    {\n
        if (v5)\n
            v1 = -0x80000000;\n
        else\n
            v1 = -(v4);\n
        v11 = v1;\n
        return v11;\n
    }\n
}\n
", "4223208:sub_4070e8": null, "4223216:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x58], Other Possible Types: unsigned long long\n
    char v1[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7[2];  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char v9[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v9) = a0;\n
    v8 = a2;\n
    *(&v7) = v9;\n
    v6 = 1;\n
    v5 = 1;\n
    v4 = 0;\n
    for (v3 = 0; cgc_isspace(*(v9)); v9 += 1)\n
    {\n
        if (!*(v9))\n
            goto LABEL_4072ac;\n
    }\n
    if (*(v9) == 43)\n
    {\n
        v6 = 1;\n
        v9 += 1;\n
    }\n
    else if (*(v9) == 45)\n
    {\n
        v6 = -1;\n
        v9 += 1;\n
    }\n
    if (v8 == 16)\n
    {\n
        if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
            v9 += 2;\n
        goto LABEL_4072bb;\n
    }\n
    if (v8)\n
    {\n
LABEL_4072bb:\n
        for (; *(v9); v9 += 1)\n
        {\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v2 = *(v9) - 48;\n
            }\n
            else if (cgc_islower(*(v9)))\n
            {\n
                v2 = *(v9) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v9)))\n
                    break;\n
                v2 = *(v9) + -55;\n
            }\n
            if (v2 >= v8)\n
                break;\n
            v5 = 0;\n
            v3 = v8 * v3 + v2;\n
            if (v3 > 4294967295)\n
                v4 = 1;\n
        }\n
    }\n
    if (*(v9) == 48 && *((v9 + 1)) >= 48 && *((v9 + 1)) <= 55)\n
    {\n
        *(&v9) = v9 + 1;\n
        v8 = 8;\n
        goto LABEL_4072ac;\n
    }\n
    if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
    {\n
        v9 += 2;\n
        v8 = 16;\n
        goto LABEL_4072ac;\n
    }\n
    if (!cgc_isdigit(*(v9)))\n
        goto LABEL_4072ac;\n
    v8 = 10;\n
LABEL_4072ac:\n
    if (a1)\n
    {\n
        if (v5)\n
            *(&v1) = v7;\n
        else\n
            v1 = v9;\n
        *(a1) = v1;\n
    }\n
    if (v6 < 0)\n
    {\n
        if (v3 > 2147483647 && v3 != -0x80000000)\n
            v4 = 1;\n
        v3 = -(v3);\n
    }\n
    if (v4)\n
    {\n
        v0 = 4294967295;\n
        return v0;\n
    }\n
    v0 = v3;\n
    return v0;\n
}\n
", "4224077:sub_40744d": null, "4224080:_ZN6NeuronC2Ejj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long Neuron::__base_ctor__(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long long v0;  // [bp-0x50]\n
    int tmp_30;  // tmp #30\n
    int tmp_32;  // tmp #32\n
    int tmp_31;  // tmp #31\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned long v2;  // [bp-0x38]\n
    char v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    vector::__base_ctor__(&a0[1].padding_0[4]);\n
    a0->field_10 = a1;\n
    for (v4 = 0; v4 < a2; v4 += 1)\n
    {\n
        v0 = &a0[1].padding_0[4];\n
        memset(&v3, 0, 16);\n
        vector::push_back(v0, &v3);\n
        g_prng(a0, 0, 16, v6, v7, v8);\n
        tmp_30 = DivV(tmp_32, tmp_31);\n
        *(&v2) = tmp_30;\n
        v1 = v2;\n
        *(vector::back(&a0[1].padding_0[4])) = v1;\n
    }\n
    return v4;\n
}\n
", "4224280:sub_407518": null, "4224288:_ZN6Neuron7sigmoidEd": "double Neuron::sigmoid(long long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_27;  // tmp #27\n
    int tmp_29;  // tmp #29\n
    int tmp_28;  // tmp #28\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10]\n
    unsigned long v4;  // xmm0lq\n
\n
    v2 = a0;\n
    if ((((CmpF(0, v4) & 69) | ((CmpF(0, v4) & 69) >> 6)) & 1) == 1)\n
        v0 = v4;\n
    else\n
        v0 = v4 ^ 0x8000000000000000;\n
    v1 = v0;\n
    tmp_27 = DivV(tmp_29, tmp_28);\n
    return tmp_27;\n
}\n
", "4224397:sub_40758d": null, "4224400:_ZN6Neuron8dsigmoidEd": "double Neuron::dsigmoid(long long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_38;  // tmp #38\n
    int tmp_40;  // tmp #40\n
    int tmp_39;  // tmp #39\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10]\n
    unsigned long v4;  // xmm0lq\n
\n
    v2 = a0;\n
    if ((((CmpF(0, v4) & 69) | ((CmpF(0, v4) & 69) >> 6)) & 1) == 1)\n
        v0 = v4;\n
    else\n
        v0 = v4 ^ 0x8000000000000000;\n
    v1 = v0;\n
    tmp_38 = DivV(tmp_40, tmp_39);\n
    return tmp_38;\n
}\n
", "4224529:sub_407611": null, "4224544:_ZN6Neuron11feedForwardER6vectorIS_E": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long Neuron::feedForward(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x1c]\n
    int v4;  // xmm0, Other Possible Types: unsigned long\n
\n
    v4 = 0;\n
    v1 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= vector::size const(a1))\n
            break;\n
        Neuron::getValue(vector::operator[](a1, v2));\n
        v4 = v4;\n
        v4 = (0 CONCAT v4) * (0 CONCAT *(vector::operator[](vector::operator[](a1, v2) + 24, a0->field_10))) + (0 CONCAT v1);\n
        v1 = v4;\n
        v2 += 1;\n
    }\n
    Neuron::sigmoid(a0);\n
    a0->field_0 = v1;\n
    return a0;\n
}\n
", "4224740:sub_4076e4": null, "4224752:_ZN6Neuron14computeOutGradEd": "double Neuron::computeOutGrad(long long a0)\n
{\n
    int tmp_36;  // tmp #36\n
    int tmp_37;  // tmp #37\n
    int tmp_34;  // tmp #34\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v3;  // xmm0lq\n
    int v5;  // xmm0\n
\n
    v1 = v3;\n
    tmp_36 = SubV(tmp_37, tmp_34);\n
    *(&v0) = tmp_36;\n
    Neuron::dsigmoid(a0);\n
    v5 = (0 CONCAT v0) * (0 CONCAT a0[0]);\n
    a0[1] = v5;\n
    return v5;\n
}\n
", "4224827:sub_40773b": null, "4224832:_ZN6Neuron17computeHiddenGradER6vectorIS_E": "double Neuron::computeHiddenGrad(long long a0, long long a1)\n
{\n
    unsigned long v0;  // [bp-0x48]\n
    unsigned long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    unsigned long long v3[2];  // [bp-0x30]\n
    void* v4;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned long long v6[2];  // [bp-0x10]\n
    unsigned long long v8[2];  // rdi\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v6[0] = a0;\n
    v3[0] = v6;\n
    v4 = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v2 = v5;\n
        if (v2 >= vector::size const(a1) - 1)\n
            break;\n
        v1 = *((vector::operator[](a1, v5) + 8));\n
        v4 = (0 CONCAT v1) * (0 CONCAT *(vector::operator[](&v3[1 + 1], v5))) + (0 CONCAT v4);\n
        v5 += 1;\n
    }\n
    v8 = v3;\n
    v0 = v4;\n
    v9 = 0;\n
    *(&v9) = v8[0];\n
    Neuron::dsigmoid(v8);\n
    v10 = (0 CONCAT v0) * v9;\n
    v3[1] = v10;\n
    return v10;\n
}\n
", "4225036:sub_40780c": null, "4225040:_ZN6Neuron13updateWeightsER6vectorIS_E": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern unsigned long long _ZN6Neuron5k_etaE;\n
extern unsigned long long _ZN6Neuron7k_alphaE;\n
\n
long long Neuron::updateWeights(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x58]\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned long v5;  // [bp-0x28]\n
    unsigned long v6;  // [bp-0x20]\n
    unsigned long long *v8;  // rax\n
\n
    v4 = 0;\n
    while (true)\n
    {\n
        v3 = v4;\n
        if (v3 >= vector::size const(a1))\n
            break;\n
        v6 = *((vector::operator[](vector::operator[](a1, v4) + 24, a0->field_10) + 8));\n
        v0 = _ZN6Neuron5k_etaE;\n
        Neuron::getValue(vector::operator[](a1, v4));\n
        s_28 =L Conv(128->64, ((((0x0<64> CONCAT Load(addr=stack_base-88, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=0x40d930<64>, size=8, endness=Iend_LE))) * (0x0<64> CONCAT Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=0x40d938<64>, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))))<8>\n
        v1 = v5;\n
        *((vector::operator[](vector::operator[](a1, v4) + 24, a0->field_10) + 8)) = v1;\n
        v2 = v5;\n
        v8 = vector::operator[](vector::operator[](a1, v4) + 24, a0->field_10);\n
        STORE(addr=rax<8>, data=Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-72, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=rax<8>, size=8, endness=Iend_LE)))), size=8, endness=Iend_LE, guard=None)\n
        v4 += 1;\n
    }\n
    return v3;\n
}\n
", "4225349:sub_407945": null, "4225360:_ZN6vectorI4EdgeEC2Ev": "long long vector::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4225397:sub_407975": null, "4225408:_ZN6vectorI4EdgeE9push_backERKS0_": "long long vector::push_back(unsigned long long a0[3], unsigned long long a1[2])\n
{\n
    unsigned long long v0[3];  // [bp-0x20]\n
    unsigned long long v1[2];  // [bp-0x18]\n
    unsigned long long v2[3];  // [bp-0x10]\n
    unsigned long long v4[3];  // rcx\n
    unsigned long long v5[3];  // rdi\n
    unsigned long long v6[3];  // rsi\n
    unsigned long long v7[2];  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10[2];  // rax\n
\n
    v2[0] = a0;\n
    v1[0] = a1;\n
    v0[0] = v2;\n
    if (!v0[1])\n
        vector::reserve(v0, 16);\n
    v4 = v0;\n
    if (v4[0] == v4[1])\n
    {\n
        v5 = v0;\n
        vector::reserve(v5, v5[1] * 2);\n
    }\n
    v6 = v0;\n
    v7 = v1;\n
    v8 = v6[2];\n
    v9 = v6[0];\n
    v6[0] = v9 + 1;\n
    v10 = v8 + v9 * 16;\n
    v10[0] = v7[0];\n
    v10[1] = v7[1];\n
    return v10;\n
}\n
", "4225543:sub_407a07": null, "4225552:_ZN6vectorI4EdgeE4backEv": "long long vector::back(unsigned long long a0[3])\n
{\n
    return a0[2] + (a0[0] - 1) * 16;\n
}\n
", "4225584:_ZNK6vectorI6NeuronE4sizeEv": "long long vector::size const(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4225601:sub_407a41": null, "4225616:_ZN6vectorI6NeuronEixEj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::operator[](struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_10 + a1 * 48;\n
}\n
", "4225647:sub_407a6f": null, "4225648:_ZN6Neuron8getValueEv": "long long Neuron::getValue(unsigned long a0)\n
{\n
    return a0;\n
}\n
", "4225666:sub_407a82": null, "4225680:_ZN6vectorI4EdgeEixEj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::operator[](struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_10 + a1 * 16;\n
}\n
", "4225711:sub_407aaf": null, "4225712:_ZN6vectorI4EdgeE7reserveEm": "long long vector::reserve(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned long long v1[3];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long long v4[3];  // [bp-0x10]\n
    unsigned long v6;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v7[2];  // rcx\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[3];  // rax\n
\n
    v4[0] = a0;\n
    v1[0] = v4;\n
    v6 = a1 * 16;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, 0x10<64>, cc_ndep<8>))\n
        v6 = -1;\n
    v3 = operator new[](v6);\n
    for (v2 = 0; v2 < v1[0]; v2 += 1)\n
    {\n
        v7 = v1[2] + v2 * 16;\n
        v8 = v3 + v2 * 16;\n
        v8[0] = v7[0];\n
        v8[1] = v7[1];\n
    }\n
    v9 = v1;\n
    v9[1] = a1;\n
    if (v9[2])\n
    {\n
        *(&v0) = v1[2];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    v1[2] = v3;\n
    return v1;\n
}\n
", "4225934:sub_407b8e": null, "4225936:_ZN9NeuralNetC1ER6vectorIjE": "long long NeuralNet::__ctor__(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x9c]\n
    unsigned long long v1;  // [bp-0x98]\n
    unsigned int v2;  // [bp-0x8c]\n
    unsigned long v3;  // [bp-0x88]\n
    unsigned int v4;  // [bp-0x7c]\n
    unsigned long v5;  // [bp-0x78]\n
    char v6;  // [bp-0x68]\n
    char v7;  // [bp-0x38]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
\n
    vector::__base_ctor__(a0);\n
    v9 = 0;\n
    while (true)\n
    {\n
        v5 = v9;\n
        if (v5 >= vector::size const(a1))\n
            break;\n
        vector::__base_ctor__(&v7);\n
        vector::push_back(a0, &v7);\n
        vector::__base_dtor__(&v7);\n
        v8 = 0;\n
        while (true)\n
        {\n
            v4 = v8;\n
            if (v4 > *(vector::operator[](a1, v9)))\n
                break;\n
            v1 = vector::back(a0);\n
            v2 = v8;\n
            v3 = v9;\n
            if (v3 != vector::size const(a1) - 1)\n
                v0 = *(vector::operator[](a1, v9 + 1));\n
            else\n
                v0 = 0;\n
            Neuron::__base_ctor__(&v6, v2, v0);\n
            vector::push_back(v1, &v6);\n
            Neuron::__base_dtor__(&v6);\n
            v8 += 1;\n
        }\n
        Neuron::setValue(vector::back(vector::back(a0)));\n
        v9 += 1;\n
    }\n
    return v5;\n
}\n
", "4226290:sub_407cf2": null, "4226304:_ZN9NeuralNet11feedForwardER6vectorIdE": "long long NeuralNet::feedForward(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x58]\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4;  // [bp-0x30]\n
    void* v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
\n
    v5 = vector::front(a0);\n
    v7 = 0;\n
    while (true)\n
    {\n
        v3 = v7;\n
        if (v3 >= vector::size const(a1))\n
            break;\n
        v2 = vector::operator[](v5, v7);\n
        vector::operator[](a1, v7);\n
        Neuron::setValue(v2);\n
        v7 += 1;\n
    }\n
    v7 = 1;\n
    while (true)\n
    {\n
        v1 = v7;\n
        if (v1 >= vector::size const(a0))\n
            break;\n
        v4 = vector::operator[](a0, v7 - 1);\n
        v6 = 0;\n
        while (true)\n
        {\n
            v0 = v6;\n
            if (v0 >= vector::size const(vector::operator[](a0, v7)) - 1)\n
                break;\n
            Neuron::feedForward(vector::operator[](vector::operator[](a0, v7), v6), v4);\n
            v6 += 1;\n
        }\n
        v7 += 1;\n
    }\n
    return v1;\n
}\n
", "4226617:sub_407e39": null, "4226624:_ZN9NeuralNet8backPropER6vectorIdE": "long long NeuralNet::backProp(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x60]\n
    unsigned long v3;  // [bp-0x58]\n
    unsigned long v4;  // [bp-0x48]\n
    unsigned long v5;  // [bp-0x40]\n
    unsigned long v6;  // [bp-0x38]\n
    unsigned long v7;  // [bp-0x30]\n
    unsigned long v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned long v12;  // rax\n
\n
    v8 = vector::back(a0);\n
    v10 = 0;\n
    while (true)\n
    {\n
        v3 = v10;\n
        if (v3 >= vector::size const(v8) - 1)\n
            break;\n
        v2 = vector::operator[](v8, v10);\n
        vector::operator[](a1, v10);\n
        Neuron::computeOutGrad(v2);\n
        v10 += 1;\n
    }\n
    for (v10 = vector::size const(a0) - 2; v10 > 0; v10 -= 1)\n
    {\n
        v7 = vector::operator[](a0, v10);\n
        v6 = vector::operator[](a0, v10 + 1);\n
        v9 = 0;\n
        while (true)\n
        {\n
            v1 = v9;\n
            if (v1 >= vector::size const(v7))\n
                break;\n
            Neuron::computeHiddenGrad(vector::operator[](v7, v9), v6);\n
            v9 += 1;\n
        }\n
    }\n
    v12 = vector::size const(a0) - 1;\n
    while (true)\n
    {\n
        v10 = v12;\n
        if (v10 <= 0)\n
            break;\n
        v5 = vector::operator[](a0, v10);\n
        v4 = vector::operator[](a0, v10 - 1);\n
        v9 = 0;\n
        while (true)\n
        {\n
            v0 = v9;\n
            if (v0 >= vector::size const(v5) - 1)\n
                break;\n
            Neuron::updateWeights(vector::operator[](v5, v9), v4);\n
            v9 += 1;\n
        }\n
        v12 = v10 - 1;\n
    }\n
    return v12;\n
}\n
", "4227079:sub_408007": null, "4227088:_ZN9NeuralNet9getOutputER6vectorIdE": "long long NeuralNet::getOutput(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long long *v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned long v5;  // xmm0lq\n
\n
    vector::clear(a1);\n
    v2 = vector::back(a0);\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= vector::size const(v2) - 1)\n
            break;\n
        Neuron::getValue(vector::operator[](v2, v3));\n
        v1 = v5;\n
        vector::push_back(a1, &v1);\n
        v3 += 1;\n
    }\n
    return v0;\n
}\n
", "4227243:sub_4080ab": null, "4227248:_ZN6vectorIS_I6NeuronEEC2Ev": "long long vector::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4227285:sub_4080d5": null, "4227296:_ZNK6vectorIjE4sizeEv": "long long vector::size const(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4227313:sub_4080f1": null, "4227328:_ZN6vectorIS_I6NeuronEE9push_backERKS1_": "long long vector::push_back(unsigned long long a0[3], unsigned long long a1)\n
{\n
    unsigned long long v0[3];  // [bp-0x20]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3[3];  // rcx\n
    unsigned long long v4[3];  // rdi\n
    unsigned long long v5[3];  // rcx\n
\n
    v1[0] = a0;\n
    v0[0] = v1;\n
    if (!v0[1])\n
        vector::reserve(v0, 16);\n
    v3 = v0;\n
    if (v3[0] == v3[1])\n
    {\n
        v4 = v0;\n
        vector::reserve(v4, v4[1] * 2);\n
    }\n
    v5 = v0;\n
    v5[0] = v5[0] + 1;\n
    return vector::operator=(v5[2] + v5[0] * 24, a1, v5[0] + 1, v0);\n
}\n
", "4227454:sub_40817e": null, "4227456:_ZN6vectorI6NeuronEC2Ev": "long long vector::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4227493:sub_4081a5": null, "4227504:_ZN6vectorI6NeuronED2Ev": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long vector::__base_dtor__(struct_1 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    struct_0 *v3;  // [bp-0x18]\n
    struct_0 *v5;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rcx\n
\n
    v5 = a0->field_10;\n
    v3 = v5;\n
    if (!v5)\n
        return a0->field_10;\n
    v6 = v3;\n
    *(&v1) = v6 + 1;\n
    v2 = &v6[6 * v6[1].field_-8];\n
    if (v6 != v2)\n
    {\n
        do\n
        {\n
            v0 = v2 - 48;\n
            Neuron::__base_dtor__(v0);\n
            v2 = v0;\n
        } while (v2 != v3);\n
    }\n
    v5 = operator delete[](*(&v1));\n
    return v5;\n
}\n
", "4227630:sub_40822e": null, "4227632:_ZN6vectorIjEixEj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::operator[](struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_10 + a1 * 4;\n
}\n
", "4227663:sub_40824f": null, "4227664:_ZN6vectorIS_I6NeuronEE4backEv": "long long vector::back(unsigned long long a0[3])\n
{\n
    return a0[2] + (a0[0] - 1) * 24;\n
}\n
", "4227696:_ZN6vectorI6NeuronE9push_backERKS0_": "long long vector::push_back(unsigned long long a0[3], unsigned long long a1)\n
{\n
    unsigned long long v0[3];  // [bp-0x20]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3[3];  // rcx\n
    unsigned long long v4[3];  // rdi\n
    unsigned long long v5[3];  // rcx\n
\n
    v1[0] = a0;\n
    v0[0] = v1;\n
    if (!v0[1])\n
        vector::reserve(v0, 16);\n
    v3 = v0;\n
    if (v3[0] == v3[1])\n
    {\n
        v4 = v0;\n
        vector::reserve(v4, v4[1] * 2);\n
    }\n
    v5 = v0;\n
    v5[0] = v5[0] + 1;\n
    return Neuron::operator=(v5[2] + v5[0] * 48, a1, v5[0] + 1, v0);\n
}\n
", "4227822:sub_4082ee": null, "4227824:_ZN6NeuronD2Ev": "long long Neuron::__base_dtor__(unsigned long a0)\n
{\n
    return vector::__base_dtor__(a0 + 24);\n
}\n
", "4227855:sub_40830f": null, "4227856:_ZN6vectorI6NeuronE4backEv": "long long vector::back(unsigned long long a0[3])\n
{\n
    return a0[2] + (a0[0] - 1) * 48;\n
}\n
", "4227888:_ZN6Neuron8setValueEd": "long long Neuron::setValue(unsigned long long *a0)\n
{\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4227916:sub_40834c": null, "4227920:_ZN6vectorIS_I6NeuronEE5frontEv": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::front(struct_0 *a0)\n
{\n
    return a0->field_10;\n
}\n
", "4227938:sub_408362": null, "4227952:_ZNK6vectorIdE4sizeEv": "long long vector::size const(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4227969:sub_408381": null, "4227984:_ZN6vectorIdEixEj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::operator[](struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_10 + a1 * 8;\n
}\n
", "4228015:sub_4083af": null, "4228016:_ZNK6vectorIS_I6NeuronEE4sizeEv": "long long vector::size const(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4228033:sub_4083c1": null, "4228048:_ZN6vectorIS_I6NeuronEEixEj": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::operator[](struct_0 *a0, unsigned long a1)\n
{\n
    return a0->field_10 + a1 * 24;\n
}\n
", "4228079:sub_4083ef": null, "4228080:_ZN6vectorIdE5clearEv": "long long vector::clear(unsigned long long a0[3])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    if (a0[2])\n
    {\n
        *(&v0) = a0[2];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4228180:sub_408454": null, "4228192:_ZN6vectorIdE9push_backERKd": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long vector::push_back(struct_0 *a0, unsigned long long *a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_0 *v3;  // rcx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v5;  // rdx\n
    unsigned long long v6;  // xmm0lq\n
    unsigned long long *v7;  // rax\n
    unsigned long v8;  // rcx\n
\n
    v1 = a0;\n
    v0 = v1;\n
    if (!v0->field_8)\n
        vector::reserve(v0, 16);\n
    v3 = v0;\n
    if (v3->field_0 == v3->field_8)\n
    {\n
        v4 = v0;\n
        vector::reserve(v4, v4->field_8 * 2);\n
    }\n
    v5 = v0;\n
    v6 = *(a1);\n
    v7 = v5->field_10;\n
    v8 = v5->field_0;\n
    v5->field_0 = v8 + 1;\n
    v7[v8] = v6;\n
    return v7;\n
}\n
", "4228315:sub_4084db": null, "4228320:_ZN6vectorI4EdgeED2Ev": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0->field_10;\n
    *(&v0) = v2;\n
    if (v2)\n
        v2 = operator delete[](*(&v0));\n
    return v2;\n
}\n
", "4228369:sub_408511": null, "4228384:_ZN6vectorIS_I6NeuronEE7reserveEm": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long vector::reserve(struct_1 *a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x80]\n
    unsigned int v1;  // [bp-0x78]\n
    unsigned long v2;  // [bp-0x70]\n
    struct_0 *v3;  // [bp-0x68]\n
    unsigned long long v4[3];  // [bp-0x60]\n
    unsigned long v5;  // [bp-0x58]\n
    unsigned long v6;  // [bp-0x50]\n
    unsigned long v7;  // [bp-0x48]\n
    struct_1 *v8;  // [bp-0x40]\n
    unsigned long v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x24]\n
    unsigned long v11;  // [bp-0x20]\n
    struct_1 *v12;  // [bp-0x10]\n
    unsigned long long v14;  // rax\n
    unsigned long v15;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long *v17;  // rcx\n
    unsigned long long v18;  // rax\n
    struct_1 *v19;  // rax\n
    struct_0 *v20;  // rcx\n
\n
    v12 = a0;\n
    v8 = v12;\n
    v14 = a1 * 24;\n
    v15 = v14 + 8;\n
    if ((([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, 0x18<64>, cc_ndep<8>) | __CFADD__(v14, 8)) & 1))\n
        v15 = -1;\n
    v17 = operator new[](v15);\n
    *(v17) = a1;\n
    v9 = v17 + 1;\n
    if (a1)\n
    {\n
        v18 = v9;\n
        v6 = v18 + a1 * 24;\n
        v7 = v18;\n
        do\n
        {\n
            v4[0] = v7;\n
            vector::__base_ctor__(v4);\n
            v5 = v4 + 1;\n
            v7 = v5;\n
        } while (v5 != v6);\n
    }\n
    v11 = v9;\n
    for (v10 = 0; v10 < v8->field_0; v10 += 1)\n
    {\n
        vector::operator=(v11 + v10 * 24, &v8->field_10[3 * v10]);\n
    }\n
    v19 = v8;\n
    v19->field_8 = a1;\n
    if (v19->field_10)\n
    {\n
        v3 = v8->field_10;\n
        if (v3)\n
        {\n
            v20 = v3;\n
            *(&v1) = v20 + 1;\n
            v2 = &v20[3 * v20[1].field_-8];\n
            if (v20 != v2)\n
            {\n
                do\n
                {\n
                    v0 = v2 - 24;\n
                    vector::__base_dtor__(v0);\n
                    v2 = v0;\n
                } while (v2 != v3);\n
            }\n
            operator delete[](*(&v1));\n
        }\n
    }\n
    v8->field_10 = v11;\n
    return v8;\n
}\n
", "4228796:sub_4086bc": null, "4228800:_ZN6vectorI6NeuronEaSERKS1_": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long vector::operator=(struct_1 *a0, unsigned long long a1[3])\n
{\n
    int tmp_11;  // tmp #11\n
    int tmp_20;  // tmp #20\n
    unsigned long long v0;  // [bp-0x78]\n
    unsigned long v1;  // [bp-0x70]\n
    unsigned long v2;  // [bp-0x68]\n
    unsigned long v3;  // [bp-0x60]\n
    unsigned long v4;  // [bp-0x58]\n
    unsigned long v5;  // [bp-0x50]\n
    unsigned int v6;  // [bp-0x48]\n
    unsigned int v7;  // [bp-0x40]\n
    unsigned long v8;  // [bp-0x38]\n
    struct_0 *v9;  // [bp-0x30]\n
    struct_1 *v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x1c]\n
    struct_1 *v12;  // [bp-0x10]\n
    struct_0 *v14;  // rcx\n
    struct_1 *v15;  // rax\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rax\n
    unsigned long v18;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long *v19;  // rcx\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rax\n
\n
    v12 = a0;\n
    v10 = v12;\n
    if (v10->field_10)\n
    {\n
        v9 = v10->field_10;\n
        if (v9)\n
        {\n
            v14 = v9;\n
            *(&v7) = v14 + 1;\n
            v8 = &v14[6 * v14[1].field_-8];\n
            if (v14 != v8)\n
            {\n
                do\n
                {\n
                    *(&v6) = v8 - 48;\n
                    Neuron::__base_dtor__(*(&v6));\n
                    v8 = *(&v6);\n
                } while (v8 != v9);\n
            }\n
            operator delete[](*(&v7));\n
        }\n
    }\n
    v15 = v10;\n
    v15->field_0 = a1[0];\n
    v15->field_8 = a1[1];\n
    v16 = v15->field_8;\n
    v4 = v16;\n
    tmp_11 = v16;\n
    v17 = v16 * 48;\n
    v18 = v17 + 8;\n
    tmp_20 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, 0x30<64>, cc_ndep<8>) | __CFADD__(v17, 8);\n
    *(&v14) = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, 0x30<64>, cc_ndep<8>) | __CFADD__(v17, 8);\n
    if ((tmp_20 & 1))\n
        v18 = -1;\n
    v19 = operator new[](v18);\n
    v20 = v4;\n
    *(v19) = v20;\n
    v5 = v19 + 1;\n
    if (v20)\n
    {\n
        v21 = v5;\n
        v2 = v21 + v4 * 48;\n
        v3 = v21;\n
        do\n
        {\n
            v0 = v3;\n
            Neuron::__base_ctor__(v0);\n
            v1 = v0 + 48;\n
            v3 = v1;\n
        } while (v1 != v2);\n
    }\n
    v10->field_10 = v5;\n
    for (v11 = 0; v11 < v10->field_0; v11 += 1)\n
    {\n
        Neuron::operator=(&v10->field_10[6 * v11], a1[2] + v11 * 48);\n
    }\n
    return v10;\n
}\n
", "4229220:sub_408864": null, "4229232:_ZN6NeuronC2Ev": "long long Neuron::__base_ctor__(unsigned long a0)\n
{\n
    return vector::__base_ctor__(a0 + 24);\n
}\n
", "4229263:sub_40888f": null, "4229264:_ZN6NeuronaSERKS_": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long Neuron::operator=(struct_0 *a0, struct_0 *a1)\n
{\n
    a0->field_0 = a1->field_0;\n
    a0->field_8 = a1->field_8;\n
    a0->field_10 = a1->field_10;\n
    vector::operator=(&a0[1].field_0 + 4, &a1[1].field_0 + 4);\n
    return a0;\n
}\n
", "4229339:sub_4088db": null, "4229344:_ZN6vectorI4EdgeEaSERKS1_": "long long vector::operator=(unsigned long long a0[3], unsigned long long a1[3])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned long long v1[3];  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long long v3[3];  // [bp-0x10]\n
    unsigned long long v5[3];  // rax\n
    unsigned long long v6;  // rax\n
    unsigned long v7;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v8[2];  // rcx\n
    unsigned long long v9[2];  // rax\n
\n
    v3[0] = a0;\n
    v1[0] = v3;\n
    if (v1[2])\n
    {\n
        *(&v0) = v1[2];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    v5 = v1;\n
    v5[0] = a1[0];\n
    v5[1] = a1[1];\n
    v6 = v5[1];\n
    v7 = v6 * 16;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x10<64>, cc_ndep<8>))\n
        v7 = -1;\n
    v1[2] = operator new[](v7);\n
    for (v2 = 0; v2 < v1[0]; v2 += 1)\n
    {\n
        v8 = a1[2] + v2 * 16;\n
        v9 = v1[2] + v2 * 16;\n
        v9[0] = v8[0];\n
        v9[1] = v8[1];\n
    }\n
    return v1;\n
}\n
", "4229583:sub_4089cf": null, "4229584:_ZN6vectorI6NeuronE7reserveEm": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long vector::reserve(struct_1 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x80]\n
    unsigned int v1;  // [bp-0x78]\n
    unsigned long v2;  // [bp-0x70]\n
    struct_0 *v3;  // [bp-0x68]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned long v5;  // [bp-0x58]\n
    unsigned long v6;  // [bp-0x50]\n
    unsigned long v7;  // [bp-0x48]\n
    struct_1 *v8;  // [bp-0x40]\n
    unsigned long v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x24]\n
    unsigned long v11;  // [bp-0x20]\n
    struct_1 *v12;  // [bp-0x10]\n
    unsigned long long v14;  // rax\n
    unsigned long v15;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long *v17;  // rcx\n
    unsigned long long v18;  // rax\n
    struct_1 *v19;  // rax\n
    struct_0 *v20;  // rcx\n
\n
    v12 = a0;\n
    v8 = v12;\n
    v14 = a1 * 48;\n
    v15 = v14 + 8;\n
    if ((([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, 0x30<64>, cc_ndep<8>) | __CFADD__(v14, 8)) & 1))\n
        v15 = -1;\n
    v17 = operator new[](v15);\n
    *(v17) = a1;\n
    v9 = v17 + 1;\n
    if (a1)\n
    {\n
        v18 = v9;\n
        v6 = v18 + a1 * 48;\n
        v7 = v18;\n
        do\n
        {\n
            *(&v4) = v7;\n
            Neuron::__base_ctor__(*(&v4));\n
            v5 = *(&v4) + 48;\n
            v7 = v5;\n
        } while (v5 != v6);\n
    }\n
    v11 = v9;\n
    for (v10 = 0; v10 < v8->field_0; v10 += 1)\n
    {\n
        Neuron::operator=(v11 + v10 * 48, &v8->field_10[6 * v10]);\n
    }\n
    v19 = v8;\n
    v19->field_8 = a1;\n
    if (v19->field_10)\n
    {\n
        v3 = v8->field_10;\n
        if (v3)\n
        {\n
            v20 = v3;\n
            *(&v1) = v20 + 1;\n
            v2 = &v20[6 * v20[1].field_-8];\n
            if (v20 != v2)\n
            {\n
                do\n
                {\n
                    *(&v0) = v2 - 48;\n
                    Neuron::__base_dtor__(*(&v0));\n
                    v2 = *(&v0);\n
                } while (v2 != v3);\n
            }\n
            operator delete[](*(&v1));\n
        }\n
    }\n
    v8->field_10 = v11;\n
    return v8;\n
}\n
", "4229996:sub_408b6c": null, "4230000:_ZN6vectorIdE7reserveEm": "long long vector::reserve(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned long long v1[3];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned long long *v3;  // [bp-0x20]\n
    unsigned long long v4[3];  // [bp-0x10]\n
    unsigned long v6;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v7[3];  // rax\n
\n
    v4[0] = a0;\n
    v1[0] = v4;\n
    v6 = a1 * 8;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, 0x8<64>, cc_ndep<8>))\n
        v6 = -1;\n
    v3 = operator new[](v6);\n
    for (v2 = 0; v2 < v1[0]; v2 += 1)\n
    {\n
        v3[v2] = *((v1[2] + v2 * 8));\n
    }\n
    v7 = v1;\n
    v7[1] = a1;\n
    if (v7[2])\n
    {\n
        *(&v0) = v1[2];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    v1[2] = v3;\n
    return v1;\n
}\n
", "4230204:sub_408c3c": null, "4230208:_Z12init_g_statePc": "extern unsigned int cgc_g_state;\n
\n
long long init_g_state(unsigned int *a0)\n
{\n
    cgc_g_state = *(a0) * 1103515247 + 13579;\n
    return cgc_g_state;\n
}\n
", "4230239:sub_408c5f": null, "4230240:_Z6g_prngv": "extern unsigned int cgc_g_state;\n
\n
long long g_prng()\n
{\n
    cgc_g_state = cgc_g_state * 1103515247 + 13579;\n
    return (cgc_g_state >> 16) & 32767;\n
}\n
", "4230281:sub_408c89": null, "4230288:_Z14start_trainingR9NeuralNet": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
\n
long long start_training(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x98]\n
    int tmp_20;  // tmp #20\n
    int tmp_22;  // tmp #22\n
    int tmp_21;  // tmp #21\n
    int tmp_17;  // tmp #17\n
    int tmp_19;  // tmp #19\n
    int tmp_18;  // tmp #18\n
    unsigned int v1;  // [bp-0x8c]\n
    unsigned long long v2;  // [bp-0x88]\n
    unsigned long long v3;  // [bp-0x80]\n
    unsigned long long v4;  // [bp-0x78]\n
    unsigned long long v5;  // [bp-0x70]\n
    unsigned long long v6;  // [bp-0x68]\n
    char v7;  // [bp-0x60]\n
    unsigned long long v8[3];  // [bp-0x48]\n
    char v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x28]\n
    char v11;  // [bp-0x22]\n
    char v12;  // [bp-0x20]\n
    char v13;  // [bp-0x1e]\n
    char v14;  // [bp-0x1c]\n
    char v15;  // [bp-0x1a]\n
    unsigned int v16;  // [bp-0xc]\n
    unsigned long long v23;  // xmm0\n
    unsigned long long v24;  // xmm0\n
\n
    vector::__base_ctor__(v8);\n
    vector::__base_ctor__(&v7);\n
    if (cgc_fread(&v9, 8, cgc_stdin) != 8)\n
    {\n
LABEL_408f76:\n
        v16 = 1;\n
    }\n
    else\n
    {\n
        if (*(&v9) >= 500 && *(&v9) <= 1000)\n
        {\n
            v10 = 0;\n
            while (true)\n
            {\n
                if (v10 >= *(&v9))\n
                {\n
                    v16 = 0;\n
                    goto LABEL_408f76;\n
                }\n
                if (cgc_fread(&v15, 2, cgc_stdin) != 2)\n
                {\n
LABEL_408d49:\n
                    goto LABEL_408f76;\n
                }\n
                else\n
                {\n
                    if (!(((CmpF(*(&v15), 0x4034000000000000) & 69 | (CmpF(*(&v15), 0x4034000000000000) & 69) >> 6) & 1) == 1))\n
                        goto LABEL_408d49;\n
                    if (cgc_fread(&v14, 2, cgc_stdin) != 2)\n
                    {\n
LABEL_408d8a:\n
                        goto LABEL_408f76;\n
                    }\n
                    else\n
                    {\n
                        if (!(((CmpF(*(&v14), 0x4039000000000000) & 69 | (CmpF(*(&v14), 0x4039000000000000) & 69) >> 6) & 1) == 1))\n
                            goto LABEL_408d8a;\n
                        if (cgc_fread(&v13, 2, cgc_stdin) != 2)\n
                        {\n
LABEL_408dcb:\n
                            goto LABEL_408f76;\n
                        }\n
                        else\n
                        {\n
                            if (!(((CmpF(*(&v13), 0x40d3880000000000) & 69 | (CmpF(*(&v13), 0x40d3880000000000) & 69) >> 6) & 1) == 1))\n
                                goto LABEL_408dcb;\n
                            if (cgc_fread(&v12, 2, cgc_stdin) != 2)\n
                            {\n
LABEL_408e0c:\n
                                goto LABEL_408f76;\n
                            }\n
                            else\n
                            {\n
                                if (!(((CmpF(*(&v12), 0x407f400000000000) & 69 | (CmpF(*(&v12), 0x407f400000000000) & 69) >> 6) & 1) == 1))\n
                                    goto LABEL_408e0c;\n
                                if (cgc_fread(&v11, 2, cgc_stdin) != 2)\n
                                {\n
LABEL_408e4d:\n
                                    goto LABEL_408f76;\n
                                }\n
                                else\n
                                {\n
                                    if (!(((CmpF(*(&v11), 0x40e86a0000000000) & 69 | (CmpF(*(&v11), 0x40e86a0000000000) & 69) >> 6) & 1) == 1))\n
                                        goto LABEL_408e4d;\n
                                    *(&v0) = v8;\n
                                    vector::clear(v8);\n
                                    tmp_20 = DivV(tmp_22, tmp_21);\n
                                    *(&v6) = tmp_20;\n
                                    vector::push_back(v0, &v23);\n
                                    tmp_20 = DivV(tmp_22, tmp_21);\n
                                    *(&v5) = tmp_20;\n
                                    vector::push_back(v0, &v24);\n
                                    tmp_20 = DivV(tmp_22, tmp_21);\n
                                    *(&v4) = tmp_20;\n
                                    vector::push_back(v0, &v4);\n
                                    tmp_20 = DivV(tmp_22, tmp_21);\n
                                    *(&v3) = tmp_20;\n
                                    vector::push_back(v0, &v3);\n
                                    NeuralNet::feedForward(a0, v0);\n
                                    vector::clear(&v7);\n
                                    tmp_17 = DivV(tmp_19, tmp_18);\n
                                    *(&v2) = tmp_17;\n
                                    vector::push_back(&v7, &v2);\n
                                    NeuralNet::backProp(a0, &v7);\n
                                    v10 += 1;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        goto LABEL_408f76;\n
    }\n
    v1 = 1;\n
    vector::__base_dtor__(&v7);\n
    vector::__base_dtor__(v8);\n
    return v16;\n
}\n
", "4231077:sub_408fa5": null, "4231088:_Z12handle_queryR9NeuralNetR6vectorIdE": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
\n
long long handle_query(unsigned long long a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0x70]\n
    int tmp_20;  // tmp #20\n
    int tmp_22;  // tmp #22\n
    int tmp_21;  // tmp #21\n
    int tmp_17;  // tmp #17\n
    int tmp_19;  // tmp #19\n
    int tmp_18;  // tmp #18\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned long long v2;  // [bp-0x60]\n
    unsigned long long v3;  // [bp-0x58]\n
    unsigned long long v4;  // [bp-0x50]\n
    unsigned long long v5;  // [bp-0x48]\n
    char v6;  // [bp-0x40]\n
    char v7;  // [bp-0x28]\n
    char v8;  // [bp-0x26]\n
    char v9;  // [bp-0x24]\n
    char v10;  // [bp-0x22]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned long long v19;  // xmm0\n
    unsigned long long v20;  // xmm0\n
\n
    vector::__base_ctor__(&v6);\n
    if (cgc_fread(&v10, 2, cgc_stdin) != 2)\n
    {\n
LABEL_409005:\n
        goto LABEL_4090c8;\n
    }\n
    else\n
    {\n
        if (!(((CmpF(*(&v10), 0x4034000000000000) & 69 | (CmpF(*(&v10), 0x4034000000000000) & 69) >> 6) & 1) == 1))\n
            goto LABEL_409005;\n
        if (cgc_fread(&v9, 2, cgc_stdin) != 2)\n
        {\n
LABEL_409046:\n
            goto LABEL_4090c8;\n
        }\n
        else\n
        {\n
            if (!(((CmpF(*(&v9), 0x4039000000000000) & 69 | (CmpF(*(&v9), 0x4039000000000000) & 69) >> 6) & 1) == 1))\n
                goto LABEL_409046;\n
            if (cgc_fread(&v8, 2, cgc_stdin) != 2)\n
            {\n
LABEL_409087:\n
                goto LABEL_4090c8;\n
            }\n
            else\n
            {\n
                if (!(((CmpF(*(&v8), 0x40d3880000000000) & 69 | (CmpF(*(&v8), 0x40d3880000000000) & 69) >> 6) & 1) == 1))\n
                    goto LABEL_409087;\n
                if (cgc_fread(&v7, 2, cgc_stdin) == 2 && (((CmpF(*(&v7), 0x407f400000000000) & 69) | ((CmpF(*(&v7), 0x407f400000000000) & 69) >> 6)) & 1) == 1)\n
                {\n
                    v0 = &v6;\n
                    vector::clear(&v6);\n
                    *(&v5) = tmp_20;\n
                    vector::push_back(v0, &v5);\n
                    *(&v4) = tmp_20;\n
                    vector::push_back(v0, &v4);\n
                    tmp_20 = DivV(tmp_22, tmp_21);\n
                    *(&v3) = tmp_20;\n
                    vector::push_back(v0, &v19);\n
                    tmp_17 = DivV(tmp_19, tmp_18);\n
                    *(&v2) = tmp_17;\n
                    vector::push_back(&v6, &v20);\n
                    NeuralNet::feedForward(a0, &v6);\n
                    NeuralNet::getOutput(a0, a1);\n
                    v11 = 0;\n
                    goto LABEL_4091ad;\n
                }\n
LABEL_4090c8:\n
                v11 = 1;\n
            }\n
        }\n
    }\n
LABEL_4091ad:\n
    v1 = 1;\n
    vector::__base_dtor__(&v6);\n
    return v11;\n
}\n
", "4231615:sub_4091bf": null, "4231616:main": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern unsigned long long g_40a250;\n
extern unsigned long long g_40a255;\n
extern unsigned long long g_40a25a;\n
extern unsigned long long g_40a25f;\n
extern unsigned int g_40a264;\n
extern unsigned long long g_40a269;\n
extern unsigned long long g_40a26e;\n
extern unsigned int g_40a273;\n
extern unsigned long long g_40a278;\n
extern unsigned long long g_40a27d;\n
\n
int main(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0xb0]\n
    char v1;  // [bp-0x98]\n
    char v2;  // [bp-0x80]\n
    char v3;  // [bp-0x68]\n
    unsigned int v4;  // [bp-0x4c]\n
    unsigned int v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x44]\n
    char v7;  // [bp-0x40]\n
    char v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0x24]\n
    unsigned int *v10;  // [bp-0x20]\n
    unsigned long v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x10]\n
    unsigned int v13;  // [bp-0xc]\n
\n
    v13 = 0;\n
    v12 = a0;\n
    v11 = a1;\n
    v12 = 0x4347c000;\n
    v10 = v12;\n
    init_g_state(v10);\n
    vector::__base_ctor__(&v7);\n
    v6 = 4;\n
    vector::push_back(&v7, &v6);\n
    v5 = 2;\n
    vector::push_back(&v7, &v5);\n
    v4 = 1;\n
    vector::push_back(&v7, &v4);\n
    NeuralNet::__ctor__(&v3, &v7);\n
    vector::__base_ctor__(&v2);\n
    vector::__base_ctor__(&v1);\n
    vector::__base_ctor__(&v0);\n
    cgc_fwrite(&g_40a250, 4, cgc_stdout);\n
    if (start_training(&v3))\n
    {\n
        cgc_fwrite(&g_40a255, 4, cgc_stdout);\n
        cgc_exit(0);\n
    }\n
    while (true)\n
    {\n
        cgc_fwrite(&g_40a25a, 4, cgc_stdout);\n
        if (cgc_fread(&v8, 4, cgc_stdin) != 4)\n
        {\n
            cgc_fwrite(&g_40a25f, 4, cgc_stdout);\n
            cgc_exit(0);\n
        }\n
        if (!cgc_memcmp(&v8, &g_40a264, 4))\n
        {\n
            if (handle_query(&v3, &v0))\n
            {\n
                cgc_fwrite(&g_40a269, 4, cgc_stdout);\n
                cgc_exit(0);\n
            }\n
            cgc_fwrite(&g_40a26e, 4, cgc_stdout);\n
            if ((((CmpF(0, *(vector::operator[](&v0, 0))) & 69) | ((CmpF(0, *(vector::operator[](&v0, 0))) & 69) >> 6)) & 1) != 1)\n
                *(vector::operator[](&v0, 0)) = 4566758108544739836;\n
            v9 = (0 CONCAT *(vector::operator[](&v0, 0))) * (0 CONCAT 0x40e86a0000000000) + (0 CONCAT 0x3fe0000000000000);\n
            cgc_fwrite(&v9, 4, cgc_stdout);\n
            if (v9 == 1337)\n
            {\n
                cgc_fwrite(&g_40a27d, 4, cgc_stdout);\n
                cgc_fread(&v9, 4, cgc_stdin);\n
                cgc_fread(&v8, v9, cgc_stdin);\n
            }\n
        }\n
        else if (!cgc_memcmp(&v8, &g_40a273, 4))\n
        {\n
            break;\n
        }\n
    }\n
    cgc_fwrite(&g_40a278, 4, cgc_stdout);\n
    v13 = 0;\n
    vector::__base_dtor__(&v0);\n
    vector::__base_dtor__(&v1);\n
    vector::__base_dtor__(&v2);\n
    NeuralNet::__base_dtor__(&v3);\n
    vector::__base_dtor__(&v7);\n
    return v13;\n
}\n
", "4232442:sub_4094fa": null, "4232448:_ZN6vectorIdEC2Ev": "long long vector::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4232485:sub_409525": null, "4232496:_ZN6vectorIdED2Ev": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0->field_10;\n
    *(&v0) = v2;\n
    if (v2)\n
        v2 = operator delete[](*(&v0));\n
    return v2;\n
}\n
", "4232545:sub_409561": null, "4232560:_ZN6vectorIjEC2Ev": "long long vector::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[1] = 0;\n
    a0[0] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4232597:sub_409595": null, "4232608:_ZN6vectorIjE9push_backERKj": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long vector::push_back(struct_0 *a0, unsigned int *a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x10]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rdi\n
    struct_0 *v6;  // rsi\n
    unsigned int v7;  // edx\n
    unsigned int *v8;  // rax\n
    unsigned long v9;  // rcx\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = v2;\n
    if (!v0->field_8)\n
        vector::reserve(v0, 16);\n
    v4 = v0;\n
    if (v4->field_0 == v4->field_8)\n
    {\n
        v5 = v0;\n
        vector::reserve(v5, v5->field_8 * 2);\n
    }\n
    v6 = v0;\n
    v7 = *(v1);\n
    v8 = v6->field_10;\n
    v9 = v6->field_0;\n
    v6->field_0 = v9 + 1;\n
    v8[v9] = v7;\n
    return v8;\n
}\n
", "4232727:sub_409617": null, "4232736:_ZN9NeuralNetD2Ev": "long long NeuralNet::__base_dtor__(unsigned long long a0)\n
{\n
    return vector::__base_dtor__(a0);\n
}\n
", "4232763:sub_40963b": null, "4232768:_ZN6vectorIjED2Ev": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long vector::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0->field_10;\n
    *(&v0) = v2;\n
    if (v2)\n
        v2 = operator delete[](*(&v0));\n
    return v2;\n
}\n
", "4232817:sub_409671": null, "4232832:_ZN6vectorIS_I6NeuronEED2Ev": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long vector::__base_dtor__(struct_1 *a0)\n
{\n
    void* v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    struct_0 *v3;  // [bp-0x18]\n
    struct_0 *v5;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rcx\n
\n
    v5 = a0->field_10;\n
    v3 = v5;\n
    if (!v5)\n
        return a0->field_10;\n
    v6 = v3;\n
    *(&v1) = v6 + 1;\n
    v2 = &v6[3 * v6[1].field_-8];\n
    if (v6 != v2)\n
    {\n
        do\n
        {\n
            v0 = v2 - 24;\n
            vector::__base_dtor__(v0);\n
            v2 = v0;\n
        } while (v2 != v3);\n
    }\n
    v5 = operator delete[](*(&v1));\n
    return v5;\n
}\n
", "4232958:sub_4096fe": null, "4232960:_ZN6vectorIjE7reserveEm": "long long vector::reserve(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned long long v1[3];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int *v3;  // [bp-0x20]\n
    unsigned long long v4[3];  // [bp-0x10]\n
    unsigned long v6;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v7[3];  // rax\n
\n
    v4[0] = a0;\n
    v1[0] = v4;\n
    v6 = a1 * 4;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, 0x4<64>, cc_ndep<8>))\n
        v6 = -1;\n
    v3 = operator new[](v6);\n
    for (v2 = 0; v2 < v1[0]; v2 += 1)\n
    {\n
        v3[v2] = *((v1[2] + v2 * 4));\n
    }\n
    v7 = v1;\n
    v7[1] = a1;\n
    if (v7[2])\n
    {\n
        *(&v0) = v1[2];\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    v1[2] = v3;\n
    return v1;\n
}\n
", "4233160:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:memset": null, "5242904:cgc_receive": null, "5242912:cgc_allocate": null, "5242920:cgc__terminate": null, "5242928:cgc_deallocate": null, "5242936:_ZdaPv": null, "5242944:cgc_transmit": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}