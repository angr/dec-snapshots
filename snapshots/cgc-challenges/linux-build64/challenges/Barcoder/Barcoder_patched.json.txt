{"4202496:_init": "extern struct_0 *g_40b750;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40b750;\n
    if (g_40b750)\n
        v1 = g_40b750();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40b770;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40b770;\n
    goto *(4241272);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4241248);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40b748;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_40b758;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40b760;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40b760)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 * a0;\n
    if (a1 * a0 > -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_malloc_alloc(&g_heap, v1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(v0, 0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4203034:sub_40221a": null, "4203040:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 1;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 2;\n
}\n
", "4203122:sub_402272": null, "4203136:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 16;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 14;\n
}\n
", "4203218:sub_4022d2": null, "4203232:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 12;\n
}\n
", "4203266:sub_402302": null, "4203280:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 4;\n
}\n
", "4203314:sub_402332": null, "4203328:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 8;\n
}\n
", "4203362:sub_402362": null, "4203376:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 64;\n
}\n
", "4203410:sub_402392": null, "4203424:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 32;\n
}\n
", "4203458:sub_4023c2": null, "4203472:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 128;\n
}\n
", "4203508:sub_4023f4": null, "4203520:cgc_isxdigit": "long long cgc_isxdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    v2 = a0;\n
    v2 = cgc_toupper(v2);\n
    v1 = 1;\n
    if (cgc_isdigit(v2))\n
        return v1 & 1;\n
    v0 = 0;\n
    if (v2 >= 65)\n
        v0 = v2 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4203611:sub_40245b": null, "4203616:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203687:sub_4024a7": null, "4203696:cgc_digittoint": "long long cgc_digittoint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 = cgc_toupper(v0);\n
    if (cgc_isdigit(v0))\n
    {\n
        v1 = v0 - 48;\n
        return v1;\n
    }\n
    if (v0 >= 65 && v0 <= 70)\n
    {\n
        v1 = v0 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203802:sub_40251a": null, "4203808:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203879:sub_402567": null, "4203888:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_fflush(a0, v2, v3, v4, v5, v6);\n
}\n
", "4203920:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rcx\n
\n
    v1 = a0;\n
    if (a0->field_8 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a0->field_4 != 1)\n
    {\n
        v0 = 0;\n
        v4 = a0;\n
        ::0x402690::cgc_xlat(v1->field_10, &a0[1].field_8 + v1->field_8, v1->field_c - v4->field_8, v4);\n
        v5 = a0;\n
        if (::0x402700::cgc_transmit_all(v1->field_0, &v1[1].field_8 + v1->field_8, a0->field_c - v5->field_8, v5))\n
            v0 = -1;\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = v0;\n
        return v2;\n
    }\n
    else\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4204162:sub_402682": null, "4204176:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204287:sub_4026ff": null, "4204288:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204419:sub_402783": null, "4204432:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    if (a1)\n
        a0[2] = 0;\n
    else\n
        a0[2] = -1;\n
    a0[3] = 0;\n
    return a0;\n
}\n
", "4204535:sub_4027f7": null, "4204544:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(1056);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = (a1 ? 1 : 2);\n
    v0->field_8 = 0;\n
    v0->field_c = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4204695:sub_402897": null, "4204704:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    v5 = a2;\n
    if (a2->field_8 == a2->field_c)\n
        cgc__refill(a2);\n
    if (a2->field_8 != -1)\n
    {\n
        v5 = a2;\n
        v0 = a2->field_c - a2->field_8;\n
        if (v0 > a1)\n
            v0 = a1;\n
        cgc_memcpy(a0, &v2->padding_0[1 + a2->field_8], v0);\n
        v1 = v0 + v1;\n
        v6 = a2;\n
        v6->field_8 = v6->field_8 + v0;\n
        if (a2->field_8 == v2->field_c)\n
        {\n
            a2->field_c = 0;\n
            a2->field_8 = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!v0)\n
            break;\n
        ::0x402af0::cgc_xlat(a2->field_18, a0 + v1, v0);\n
        v1 = v0 + v1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205077:sub_402a15": null, "4205088:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v7;  // rcx\n
\n
    if (a0->field_8 == a0->field_c)\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
    }\n
    if (!cgc_receive(a0, v3, v4, v5) && *(&v0))\n
    {\n
        v7 = *(&v0);\n
        a0->field_c = v7;\n
        ::0x402af0::cgc_xlat(a0->field_18, a0 + 1, a0->field_c, v7);\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4205282:sub_402ae2": null, "4205296:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205407:sub_402b5f": null, "4205408:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v2 = 0; v2 < a1 - 1; v2 += 1)\n
    {\n
        v1 = cgc__getc(a3);\n
        if (v1 == -1)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (v1 == a2)\n
            break;\n
        *((a0 + v2)) = v1;\n
    }\n
    if (v2 == a1 - 1)\n
    {\n
        do\n
        {\n
            v0 = cgc__getc(a3);\n
            if (v0 == -1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
        } while (v0 != a2);\n
    }\n
    *((a0 + v2)) = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4205676:sub_402c6c": null, "4205680:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    char *field_18;\n
} struct_0;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v8;  // rcx\n
\n
    if (a0->field_8 == -1)\n
    {\n
        if (!cgc_receive(a0, v4, v5, v6) && *(&v0))\n
        {\n
            ::0x402af0::cgc_xlat(a0->field_18, &v1, 1);\n
            v2 = v1;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        if (a0->field_8 == a0->field_c && cgc__refill(a0) < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v8 = a0->field_8;\n
        a0->field_8 = v8 + 1;\n
        v2 = a0[1].padding_0[v8];\n
        return v2;\n
    }\n
}\n
", "4205890:sub_402d42": null, "4205904:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4205938:sub_402d72": null, "4205952:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            if (a2->field_c + a1 >= 0x400)\n
            {\n
                v5 = a2->field_c;\n
                v0 = 0x400 - v5;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0, v0, v5);\n
                v6 = a2;\n
                v6->field_c = v6->field_c + v0;\n
                v1 = v0 + v1;\n
                cgc_fflush(a2);\n
            }\n
            if (v1 < a1)\n
            {\n
                v0 = a1 - v1;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0 + v1, v0);\n
                v7 = a2;\n
                v7->field_c = v7->field_c + v0;\n
                v1 = v0 + v1;\n
            }\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    if (a2->field_10)\n
    {\n
        if (cgc_transmit_xlat(v2->field_0, a2->field_10, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        if (::0x402f40::cgc_transmit_all(a2->field_0, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    v3 = a1;\n
    return v3;\n
}\n
", "4206388:sub_402f34": null, "4206400:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4206531:sub_402fc3": null, "4206544:cgc_transmit_xlat": "long long cgc_transmit_xlat(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x448], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a3)\n
        {\n
            v0 = a3 - v1;\n
            if (v0 > 0x400)\n
                v0 = 0x400;\n
            cgc_memcpy(&v2, a2 + v1, v0);\n
            ::0x4030d0::cgc_xlat(a1, &v2, v0);\n
            if (::0x402f40::cgc_transmit_all(a0, &v2, v0))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206793:sub_4030c9": null, "4206800:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4206911:sub_40313f": null, "4206912:cgc_fxlat": "long long cgc_fxlat(unsigned long long a0[4], unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v7;  // rax\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
    char *v9;  // rax\n
\n
    if (!a1)\n
    {\n
        cgc_free(a0[2]);\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        return a0;\n
    }\n
    v7 = cgc_realloc(a0[2], 0x100);\n
    a0[2] = v7;\n
    v3 = v7;\n
    v9 = cgc_realloc(a0[3], 0x100);\n
    a0[3] = v9;\n
    v2 = v9;\n
    v8 = cgc_hash_seed(a1);\n
    v5 = v8;\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v3[v4] = v4;\n
        v8 = v4 + 1;\n
    }\n
    for (v4 = 255; v4 >= 1; v4 = v8)\n
    {\n
        v1 = (0 CONCAT v5) /m v4 >> 32;\n
        v5 *= 3;\n
        v5 = v5 * 0x2000 ^ (v5 >> 19) ^ (v5 >> 21);\n
        v0 = v3[v4];\n
        v3[v4] = v3[v1];\n
        v3[v1] = v0;\n
        v8 = v4 - 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v2[v3[v4]] = v4;\n
        v8 = v4 + 1;\n
    }\n
    return v8;\n
}\n
", "4207288:sub_4032b8": null, "4207296:cgc_hash_seed": "long long cgc_hash_seed(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 826981510;\n
    for (v1 = 0; a0[v1]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = a0[v1] ^ v0;\n
        v0 = v0 * 0x2000 ^ (v0 >> 19);\n
    }\n
    return v0;\n
}\n
", "4207398:sub_403326": null, "4207408:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4207442:sub_403352": null, "4207456:cgc_malloc_alloc": "long long cgc_malloc_alloc(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20], Other Possible Types: unsigned long long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (v1 > 2147483647)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = v1 - -3 & -4;\n
    if (v1 < 4)\n
    {\n
        v0 = cgc_tiny_alloc(a0, 4);\n
    }\n
    else if (v1 < 16)\n
    {\n
        v0 = cgc_tiny_alloc(a0, v1);\n
    }\n
    else if (v1 < 0x20000)\n
    {\n
        v0 = cgc_small_alloc(a0, v1);\n
    }\n
    else\n
    {\n
        v0 = cgc_large_alloc(a0, v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4207667:sub_403433": null, "4207680:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned long long field_1430;\n
    unsigned long long field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_tiny_alloc(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40]\n
    unsigned short v1[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned long long *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned short v7[2];  // rax\n
    struct_0 *v8;  // rax\n
    unsigned short v9[2];  // rax\n
\n
    v4 = a0;\n
    v3 = cgc_size_to_bin(a1);\n
    v2 = &(&a0->field_0)[v3]->field_0;\n
    if (v2)\n
    {\n
        (&a0->field_0)[v3] = *(v2);\n
        v5 = v2;\n
        return v5;\n
    }\n
    *(&v1) = *(&a0->padding_8[5136 + 8 * v3]);\n
    if (!v1)\n
    {\n
        if (!a0->field_1430)\n
        {\n
            a0->field_1430 = cgc_run_alloc(a0, 1);\n
            if (!a0->field_1430)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a0->field_1438 = 0;\n
        }\n
        v7 = v4->field_1430 + a0->field_1438;\n
        *(&a0->padding_8[5136 + 8 * v3]) = v7;\n
        v1 = v7;\n
        *(v1) = a1;\n
        *((v1 + 2)) = a1;\n
        v8 = a0;\n
        v8->field_1438 = v8->field_1438 + 0x1000;\n
        if (a0->field_1438 == 0x100000)\n
            a0->field_1430 = 0;\n
    }\n
    v0 = v1 + *((v1 + 2));\n
    v9 = v1;\n
    v9[1] = v9[1] + a1;\n
    if (*((v1 + 2)) + *(v1) > 0x1000)\n
        *(&a0->padding_8[5136 + 8 * v3]) = 0;\n
    v5 = v0;\n
    return v5;\n
}\n
", "4208134:sub_403606": null, "4208144:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_alloc(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 - -31 & -0x10;\n
    for (v2 = cgc_size_to_bin(v1); v2 < 131; v2 += 1)\n
    {\n
        for (v0 = a0[v2]; v0; v0 = v0->field_18)\n
        {\n
            if (v0->field_8 >= v1)\n
                break;\n
        }\n
        if (v0)\n
            break;\n
    }\n
    if (v2 == 131)\n
    {\n
        if (!cgc_small_alloc_run(a0))\n
        {\n
            v2 = 130;\n
            v0 = a0[v2];\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    cgc_small_unlink_free(a0, v2, v0);\n
    if (*((v0 + 8)) - v1 > 32)\n
        cgc_small_split(a0, v0, v1);\n
    v3 = v0 + 16;\n
    return v3;\n
}\n
", "4208460:sub_40374c": null, "4208464:cgc_large_alloc": "long long cgc_large_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v2 = a1 - -4111 & -0x1000;\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0[0] = *(&v1);\n
    v0[0] = a0;\n
    v0[1] = v2;\n
    v3 = v0 + 1;\n
    return v3;\n
}\n
", "4208598:sub_4037d6": null, "4208608:malloc_free": "long long malloc_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return *((a0 + (a1 >> 20) + 1048));\n
    }\n
    else if (v0)\n
    {\n
        if (v0 == 2)\n
        {\n
            v2 = cgc_small_free(a0, a1);\n
        }\n
        else if (v0 == 1)\n
        {\n
            v2 = cgc_tiny_free(a0, a1);\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_large_free(a0, a1);\n
        return v2;\n
    }\n
}\n
", "4208779:sub_40388b": null, "4208784:cgc_large_free": "long long cgc_large_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
\n
    if ((a1 & 4095) != 16)\n
        cgc_heap_error(\"BAD FREE: large address is not aligned ptr=%08X\\n
\", a1);\n
    v0[0] = a1 - 16;\n
    if (v0[0] != a0)\n
        cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1, v0[0], a0);\n
    if (v0[1] >= 0x20000 && v0[1] <= 2147487743 && !(v0[1] & 4095))\n
        return cgc_deallocate(a0, a1);\n
    cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", a1, v0[1]);\n
    return cgc_deallocate(a0, a1);\n
}\n
", "4209010:sub_403972": null, "4209024:cgc_small_free": "long long cgc_small_free(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x58]\n
    unsigned long long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4[2];  // [bp-0x38]\n
    unsigned long long v5[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v6[2];  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[2];  // rax\n
\n
    v6[0] = a1 - 16;\n
    v3 = a1 & -0x100000;\n
    if ((a1 & 7))\n
        cgc_heap_error(\"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\", a1);\n
    if ((v6[1] & 1))\n
        cgc_heap_error(\"BAD SMALL FREE: double free ptr=%08x\\n
\", a1);\n
    if (v6[1] <= 0x20000 && !(v6[1] < 16))\n
        goto LABEL_403a29;\n
    cgc_heap_error(\"BAD SMALL FREE: corrupted size ptr=%08x\\n
\", a1);\n
LABEL_403a29:\n
    if (!v6[0])\n
        v5[0] = 0;\n
    else\n
        v5 = v6 - v6[0];\n
    v4[0] = v6 + v6[1];\n
    if (v5 && (*((v5 + 8)) & -2) != v6[0])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\", v5, a1);\n
    if (v4[0] != v6[1])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v4, a1);\n
    if (v5 && (*((v5 + 8)) & 1))\n
    {\n
        v2 = a0;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin(*((v5 + 8)) & -2), v5);\n
        v8 = v5;\n
        v8[1] = v6[1] + v8[1];\n
        v6 = v5;\n
        v4[0] = *((v6 + 8));\n
    }\n
    if ((v4[1] & 1))\n
    {\n
        v1 = a0;\n
        cgc_small_unlink_free(v1, cgc_size_to_bin(v4[1] & -2), v4);\n
        v9 = v6;\n
        v9[1] = v4[1] + v9[1];\n
        v4[0] = v6 + v6[1];\n
        v4[0] = *((v6 + 8));\n
    }\n
    v0 = a0;\n
    return cgc_small_insert_free(v0, cgc_size_to_bin(*((v6 + 8))), v6);\n
}\n
", "4209631:sub_403bdf": null, "4209632:cgc_tiny_free": "long long cgc_tiny_free(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned short *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v0 = a1 & -0x1000;\n
    v1 = cgc_size_to_bin(*(v0));\n
    *(a1) = a0[v1];\n
    a0[v1] = a1;\n
    return a0;\n
}\n
", "4209729:sub_403c41": null, "4209744:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned short *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a1 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = a1 - 16;\n
    v3 = v1->field_8 - 16;\n
    return v3;\n
}\n
", "4209900:sub_403cec": null, "4209904:cgc_malloc_realloc": "long long cgc_malloc_realloc(unsigned long a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a2 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        v3 = cgc_malloc_alloc(a0, a2);\n
        return v3;\n
    }\n
    else if (cgc_malloc_size(a0, a1) < a2)\n
    {\n
        v2 = cgc_malloc_alloc(a0, a2);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = v2;\n
        v1 = a1;\n
        cgc_memcpy(v0, v1, cgc_malloc_size(a0, a1));\n
        malloc_free(a0, a1);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        return v3;\n
    }\n
}\n
", "4210174:sub_403dfe": null, "4210176:cgc_size_to_bin": "long long cgc_size_to_bin(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 16)\n
    {\n
        v0 = a0 / 4 - 1;\n
        return v0;\n
    }\n
    else if (a0 <= 0x200)\n
    {\n
        v0 = a0 / 16 - -2;\n
        return v0;\n
    }\n
    else if (a0 <= 0x1200)\n
    {\n
        v0 = (a0 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (a0 <= 0x20000)\n
    {\n
        v0 = (a0 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210359:sub_403eb7": null, "4210368:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(&v0);\n
    v1 = v2 - -1048575 & -0x100000;\n
    if (v2 < v1)\n
        cgc_deallocate(a0, a1);\n
    if (v1 + 0x100000 < v2 + 0x200000)\n
        cgc_deallocate(a0, a1);\n
    *((a0 + (v1 >> 20) + 1048)) = a1;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4210595:sub_403fa3": null, "4210608:cgc_small_alloc_run": "long long cgc_small_alloc_run(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned long long v2[2];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v0 = cgc_run_alloc(a0, 2);\n
    if (!v0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    v2[0] = v0 - -19 & -0x10;\n
    v2[0] = 0;\n
    v2[1] = 0x100000 - (v2 - v0) - 32;\n
    v1[0] = v2 + v2[1];\n
    v5 = v2[1];\n
    v1[0] = v5;\n
    v1[1] = 0;\n
    cgc_small_insert_free(a0, 130, v2, v5);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4210812:sub_40407c": null, "4210816:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    struct_2 *v2;  // rax\n
\n
    v0 = a2;\n
    if (!(a2->field_8 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    v2 = a2;\n
    v2->field_8 = v2->field_8 & -2;\n
    if (a2->field_10)\n
        v0->field_10->field_18 = a2->field_18;\n
    if (a2->field_18)\n
        v0->field_18->field_10 = a2->field_10;\n
    if (a0[a1] == a2)\n
        a0[a1] = a2->field_18;\n
    a2->field_10 = 0;\n
    a2->field_18 = 0;\n
    return a2;\n
}\n
", "4211035:sub_40415b": null, "4211040:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_small_split(unsigned long long a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
\n
    *(&v2) = a1->field_8 - a2;\n
    v1[0] = &a1->padding_0[a2];\n
    v0 = &a1->padding_0[a1->field_8];\n
    a1->field_8 = a2;\n
    v1[0] = a1->field_8;\n
    v1[1] = *(&v2);\n
    *(v0) = *(&v2);\n
    return cgc_small_insert_free(a0, cgc_size_to_bin(*(&v2)), v1);\n
}\n
", "4211196:sub_4041fc": null, "4211200:cgc_small_insert_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if ((a2->field_8 & 1) == 1)\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    v1 = a2;\n
    v1->field_8 = v1->field_8 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = *((a0 + a1 * 8));\n
    *((a0 + a1 * 8)) = a2;\n
    v2 = a2;\n
    if (a2->field_18)\n
    {\n
        v2 = a2->field_18;\n
        *((v2 + 16)) = a2;\n
    }\n
    return v2;\n
}\n
", "4211362:sub_4042a2": null, "4211376:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct_0 *v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    cgc_vfprintf(cgc_stderr, a0, &v14, &v18);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, a2, a3, a4, v28);\n
}\n
", "4211552:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[a0] != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4211671:sub_4043d7": null, "4211680:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[a0] == v0[a1])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *((a0 + v0)) - *((a1 + v0));\n
            return v1;\n
        }\n
    }\n
}\n
", "4211834:sub_40447a": null, "4211840:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4211939:sub_4044e3": null, "4211952:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    if (a0 > a1)\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[1 + a2 + -1 * v0] = *((a1 + a2 - v0 - 1));\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4212152:sub_4045b8": null, "4212160:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4212244:sub_404614": null, "4212256:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4212416:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4212461:sub_4046ed": null, "4212464:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4212625:sub_404791": null, "4212640:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v0 = 1;\n
    if (a0->field_8 == -1)\n
    {\n
        v0 = 0;\n
        a0->field_8 = 0;\n
    }\n
    v1 = cgc__vsfprintf(a1, a2, a0, 0, 2147483647);\n
    if (!v0)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4212768:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4212929:sub_4048c1": null, "4212944:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0, 2147483647);\n
}\n
", "4212997:sub_404905": null, "4213008:cgc__vsfprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_1 *a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned long long *v0;  // [bp-0x178]\n
    struct_1 *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x164]\n
    unsigned int *v3;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x14c]\n
    unsigned int *v6;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x140]\n
    unsigned int v8;  // [bp-0x134]\n
    unsigned int *v9;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0x128]\n
    unsigned int v11;  // [bp-0x11c]\n
    unsigned int v12;  // [bp-0x118]\n
    unsigned int v13;  // [bp-0x114]\n
    unsigned int v14;  // [bp-0x110]\n
    char v15;  // [bp-0x109]\n
    unsigned long v16;  // [bp-0x108]\n
    unsigned long v17;  // [bp-0x100]\n
    char v18;  // [bp-0xf1]\n
    unsigned long v19;  // [bp-0xf0]\n
    unsigned long v20;  // [bp-0xe8]\n
    char v21;  // [bp-0xd9]\n
    unsigned long v22;  // [bp-0xd8]\n
    unsigned long v23;  // [bp-0xd0]\n
    unsigned long v24;  // [bp-0xc8]\n
    unsigned long v25;  // [bp-0xc0]\n
    char v26;  // [bp-0xb1]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned long v29;  // [bp-0xa8]\n
    struct_0 *v30;  // [bp-0xa0]\n
    char v31;  // [bp-0x91]\n
    unsigned long v32;  // [bp-0x90]\n
    char v33;  // [bp-0x88]\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v35;  // [bp-0x3c]\n
    unsigned int v36;  // [bp-0x38]\n
    char v37;  // [bp-0x31]\n
    char *v38;  // [bp-0x28]\n
    void* v39;  // [bp-0x20]\n
    struct_1 *v40;  // [bp-0x18]\n
    struct_0 *v41;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v43;  // rax\n
    char *v44;  // rax\n
    struct_0 *v45;  // rax\n
    struct_0 *v46;  // rax\n
    struct_0 *v48;  // rax\n
    struct_0 *v50;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_1 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    struct_1 *v57;  // rcx\n
    unsigned long long v58;  // rdx\n
    unsigned long long *v59;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v60;  // rcx\n
    char *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned int *v64;  // rax\n
    struct_1 *v65;  // rcx\n
    unsigned int *v66;  // rdx\n
    struct_1 *v67;  // rcx\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    struct_1 *v70;  // rcx\n
    unsigned int *v71;  // rdx\n
    unsigned long long v72;  // rsi\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rcx\n
    char *v75;  // rax\n
    char *v76;  // rax\n
\n
    v41 = a0;\n
    v40 = a1;\n
    v39 = a2;\n
    v38 = a3;\n
    v34 = 0;\n
    while (true)\n
    {\n
        v43 = v41;\n
        v41 = v43 + 1;\n
        v37 = v43->field_0;\n
        if (!v37)\n
            break;\n
        v31 = 32;\n
        while (v37 != 37)\n
        {\n
            if (v34 >= a4)\n
            {\n
                v44 = v34;\n
                v34 = v44 + 1;\n
                if (v44 == -1)\n
                    cgc__terminate(a0);\n
            }\n
            else\n
            {\n
                v26 = v37;\n
                if (v39)\n
                    cgc_fwrite(&v26, 1, v39);\n
                if (v38)\n
                    v38[v34] = v26;\n
                v34 += 1;\n
            }\n
            v45 = v41;\n
            v41 = v45 + 1;\n
            v37 = v45->field_0;\n
            if (!v37)\n
                goto LABEL_4053fc;\n
        }\n
        v30 = v41;\n
        v36 = 4;\n
        v35 = 0;\n
        v46 = v41;\n
        v41 = v46 + 1;\n
        v14 = v46->field_0;\n
        v37 = v14;\n
        if (!v14)\n
            break;\n
        if (v14 == 32)\n
        {\n
            v31 = 32;\n
        }\n
        else if (v14 == 48)\n
        {\n
            v31 = 48;\n
        }\n
        else\n
        {\n
            v41 += 1;\n
        }\n
        if (*(v41) >= 48 && *(v41) <= 57)\n
            v35 = cgc_strtoul(v41, &v41, 10);\n
        v48 = v41;\n
        v41 = v48 + 1;\n
        v13 = v48->field_0;\n
        v37 = v13;\n
        if (!v13)\n
            break;\n
        if (v13 == 104)\n
        {\n
            if (v41->field_0 != 104)\n
            {\n
                v36 = 2;\n
            }\n
            else\n
            {\n
                v41 += 1;\n
                v36 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v13 != 108)\n
            {\n
                v41 += 1;\n
            }\n
            else if (v41->field_0 == 108)\n
            {\n
                v41 += 1;\n
                v36 = 8;\n
            }\n
            else\n
            {\n
                v36 = 4;\n
            }\n
        }\n
        v50 = v41;\n
        v41 = v50 + 1;\n
        v12 = v50->field_0;\n
        v37 = v12;\n
        if (!v12)\n
        {\n
            v25 = v41 - v30;\n
            if (v34 < a4)\n
            {\n
                v24 = a4 - v34;\n
                if (v24 > v25)\n
                    v24 = v25;\n
                if (v39)\n
                    cgc_fwrite(v30, v24, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], v30, v24);\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            break;\n
        }\n
        if (v12 == 88)\n
        {\n
LABEL_404e5d:\n
            if (v37 == 100)\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v10 = v40;\n
                v11 = v10->field_0;\n
                if (v11 > 40)\n
                {\n
                    v65 = v10;\n
                    v66 = v65->field_8;\n
                    v65->field_8 = &v66[2];\n
                    v9 = v66;\n
                }\n
                else\n
                {\n
                    v62 = v10;\n
                    v63 = v11;\n
                    v64 = v63 + v62->field_10;\n
                    v62->field_0 = v63 + 8;\n
                    v9 = v64;\n
                }\n
                v27 = *(v9);\n
                cgc__convert_signed(&v33, v27, 10, 0);\n
            }\n
            else\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v7 = v40;\n
                v8 = v7->field_0;\n
                if (v8 > 40)\n
                {\n
                    v70 = v7;\n
                    v71 = v70->field_8;\n
                    v70->field_8 = &v71[2];\n
                    v6 = v71;\n
                }\n
                else\n
                {\n
                    v67 = v7;\n
                    v68 = v8;\n
                    v69 = v68 + v67->field_10;\n
                    v67->field_0 = v68 + 8;\n
                    v6 = v69;\n
                }\n
                v28 = *(v6);\n
                a0 = &v33;\n
                v72 = v28;\n
                v73 = (v37 == 117 ? 16 : 10);\n
                v74 = v37 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v32 = cgc_strlen(&v33);\n
            if (v32 < v35)\n
            {\n
                v35 -= v32;\n
                do\n
                {\n
                    if (v34 < a4)\n
                    {\n
                        v21 = v31;\n
                        if (v39)\n
                            cgc_fwrite(&v21, 1, v39);\n
                        if (v38)\n
                            v38[v34] = v21;\n
                        v34 += 1;\n
                    }\n
                    else\n
                    {\n
                        v75 = v34;\n
                        v34 = v75 + 1;\n
                        if (v75 == -1)\n
                            cgc__terminate(a0);\n
                    }\n
                    v35 -= 1;\n
                } while (v35 > 0);\n
            }\n
            v20 = v32;\n
            if (v34 < a4)\n
            {\n
                v19 = a4 - v34;\n
                if (v19 > v20)\n
                    v19 = v20;\n
                if (v39)\n
                    cgc_fwrite(&v33, v19, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], &v33, v19);\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            goto LABEL_4053ed;\n
        }\n
        else\n
        {\n
            if (v12 == 99)\n
            {\n
                v4 = v40;\n
                v5 = v4->field_0;\n
                if (v5 > 40)\n
                {\n
                    v55 = v4;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v3 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v4;\n
                    v53 = v5;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v3 = v54;\n
                }\n
                v37 = *(v3);\n
                if (v34 < a4)\n
                {\n
                    v18 = v37;\n
                    if (v39)\n
                        cgc_fwrite(&v18, 1, v39);\n
                    if (v38)\n
                        v38[v34] = v18;\n
                    v34 += 1;\n
                }\n
                else\n
                {\n
                    v61 = v34;\n
                    v34 = v61 + 1;\n
                    if (v61 == -1)\n
                        cgc__terminate(a0);\n
                }\n
                goto LABEL_4053ed;\n
            }\n
            if (v12 == 100)\n
                goto LABEL_404e5d;\n
            if (v12 == 115)\n
            {\n
                v1 = v40;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v60 = v1;\n
                    v59 = v60->field_8;\n
                    v60->field_8 = v59 + 8;\n
                }\n
                else\n
                {\n
                    v57 = v1;\n
                    v58 = v2;\n
                    v59 = v58 + v57->field_10;\n
                    v57->field_0 = v58 + 8;\n
                }\n
                v0 = v59;\n
                v29 = *(v0);\n
                v17 = cgc_strlen(v29);\n
                if (v34 < a4)\n
                {\n
                    v16 = a4 - v34;\n
                    if (v16 > v17)\n
                        v16 = v17;\n
                    if (v39)\n
                        cgc_fwrite(v29, v16, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v29, v16);\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
                else\n
                {\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
LABEL_4053ed:\n
            }\n
            else if (v12 != 117 && v12 != 120)\n
            {\n
                v23 = v41 - v30;\n
                if (v34 >= a4)\n
                {\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                else\n
                {\n
                    v22 = a4 - v34;\n
                    if (v22 > v23)\n
                        v22 = v23;\n
                    if (v39)\n
                        cgc_fwrite(v30, v22, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v30, v22);\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                goto LABEL_4053ed;\n
            }\n
        }\n
    }\n
LABEL_4053fc:\n
    v39 = 0;\n
    if (v34 >= a4)\n
    {\n
        v76 = v34;\n
        v34 = v76 + 1;\n
        if (v76 != -1)\n
            return v34 - 1;\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        if (v39)\n
            cgc_fwrite(&v15, 1, v39);\n
        if (v38)\n
            v38[v34] = v15;\n
        v34 += 1;\n
        return v34 - 1;\n
    }\n
}\n
", "4215961:sub_405499": null, "4215968:cgc__convert_signed": "long long cgc__convert_signed(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (v0 < 0)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 45;\n
        v0 = -(v0);\n
    }\n
    return cgc__convert_unsigned(v1, v0, a2, a3);\n
}\n
", "4216049:sub_4054f1": null, "4216064:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x14], Other Possible Types: unsigned long\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v3 = a1;\n
    v1 = &a0[20];\n
    if (a3)\n
        v2 = \"0123456789ABCDEF\";\n
    else\n
        v2 = \"0123456789abcdef\";\n
    v5 = v1;\n
    v1 = v5 + 1;\n
    if (!v3)\n
    {\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        v6[1].field_-1 = *(v2);\n
        return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
    }\n
    for (v5[1].field_-1 = 0; v3; v3 = (0 CONCAT v3) /m a2)\n
    {\n
        v0 = v2;\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT v3) /m a2 >> 32];\n
    }\n
    return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
}\n
", "4216309:sub_4055f5": null, "4216320:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(unsigned int a0, unsigned long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4216362:sub_40562a": null, "4216368:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(v2));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4216533:sub_4056d5": null, "4216544:cgc_strcasestr": "long long cgc_strcasestr(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_strlen(a1);\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!a0[v1])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strncasecmp(&a0[v1], a1, v0))\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4216688:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; a0[v0]; v0 += 1)\n
    {\n
        if (a0[v0] == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = &a0[v0];\n
    return v1;\n
}\n
", "4216827:sub_4057fb": null, "4216832:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4216971:sub_40588b": null, "4216976:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    for (v0 = a0; *(v1); v0 += 1)\n
    {\n
        *(v0) = *(v1);\n
        v1 += 1;\n
    }\n
    *(v0) = 0;\n
    return a0;\n
}\n
", "4217066:sub_4058ea": null, "4217072:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    v1[v0] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4217185:sub_405961": null, "4217200:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217263:sub_4059af": null, "4217264:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char v1;  // [bp-0x31]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = &v4[a2];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v4))\n
        {\n
            v1 = 0;\n
            if (*(v3))\n
            {\n
                v0 = cgc_tolower(*(v4));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(v3)))\n
                    v1 = v4 < v2;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    if (v4 == v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = *(v4) - *(v3);\n
    return v5;\n
}\n
", "4217496:sub_405a98": null, "4217504:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    v1 = a0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = v1 - a0 < a2;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(v2);\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - a0 < a2; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return a0;\n
}\n
", "4217683:sub_405b53": null, "4217696:cgc_strndup": "long long cgc_strndup(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
        v1 = a1;\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    *((v0 + v1)) = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4217835:sub_405beb": null, "4217840:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = &*(a0)->field_0;\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v0[v1]; v1 += 1)\n
    {\n
        if (cgc_strchr(a1, v0[v1]))\n
            break;\n
    }\n
    if (!v0[v1])\n
        *(a0) = 0;\n
    else\n
        *(a0) = &v0[1 + v1];\n
    v0[v1] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4218059:sub_405ccb": null, "4218064:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!cgc_strcmp(&a0[v0], a1))\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4218191:sub_405d4f": null, "4218192:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x68], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x60], Other Possible Types: unsigned long long\n
    char v2[2];  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8[2];  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x24], Other Possible Types: unsigned long\n
    char v10[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v11;  // [bp-0x10]\n
\n
    *(&v10) = a0;\n
    v9 = a2;\n
    *(&v8) = v10;\n
    v7 = 1;\n
    v6 = 1;\n
    v5 = 0;\n
    for (v4 = 0; cgc_isspace(v10[0]); v10 = &v10[1])\n
    {\n
        if (!v10[0])\n
            goto LABEL_405f0c;\n
    }\n
    if (*(v10) == 43)\n
    {\n
        v7 = 1;\n
        v10 = &v10[1];\n
    }\n
    else if (*(v10) == 45)\n
    {\n
        v7 = -1;\n
        v10 = &v10[1];\n
    }\n
    if (v9 == 16)\n
    {\n
        if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
            v10 += 2;\n
        goto LABEL_405f1b;\n
    }\n
    if (v9)\n
    {\n
LABEL_405f1b:\n
        for (; *(v10); v10 = &v10[1])\n
        {\n
            if (cgc_isdigit(v10[0]))\n
            {\n
                v3 = *(v10) - 48;\n
            }\n
            else if (cgc_islower(v10[0]))\n
            {\n
                v3 = *(v10) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v10[0]))\n
                    break;\n
                v3 = *(v10) + -55;\n
            }\n
            if (v3 >= v9)\n
                break;\n
            v6 = 0;\n
            v4 = v9 * v4 + v3;\n
            if (v4 > 2147483647)\n
                v5 = 1;\n
        }\n
    }\n
    if (*(v10) == 48 && *((v10 + 1)) >= 48 && *((v10 + 1)) <= 55)\n
    {\n
        *(&v10) = &v10[1];\n
        v9 = 8;\n
        goto LABEL_405f0c;\n
    }\n
    if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
    {\n
        v10 += 2;\n
        v9 = 16;\n
        goto LABEL_405f0c;\n
    }\n
    if (!cgc_isdigit(v10[0]))\n
        goto LABEL_405f0c;\n
    v9 = 10;\n
LABEL_405f0c:\n
    if (a1)\n
    {\n
        if (v6)\n
            *(&v2) = v8;\n
        else\n
            v2 = v10;\n
        *(a1) = v2;\n
    }\n
    if (v7 >= 0)\n
    {\n
        if (v5)\n
            v0 = 2147483647;\n
        else\n
            v0 = v4;\n
        v11 = v0;\n
        return v11;\n
    }\n
    else\n
    {\n
        if (v5)\n
            v1 = -0x80000000;\n
        else\n
            v1 = -(v4);\n
        v11 = v1;\n
        return v11;\n
    }\n
}\n
", "4219064:sub_4060b8": null, "4219072:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x58], Other Possible Types: unsigned long long\n
    char v1[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7[2];  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char v9[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v9) = a0;\n
    v8 = a2;\n
    *(&v7) = v9;\n
    v6 = 1;\n
    v5 = 1;\n
    v4 = 0;\n
    for (v3 = 0; cgc_isspace(v9[0]); v9 = &v9[1])\n
    {\n
        if (!v9[0])\n
            goto LABEL_40627c;\n
    }\n
    if (*(v9) == 43)\n
    {\n
        v6 = 1;\n
        v9 = &v9[1];\n
    }\n
    else if (*(v9) == 45)\n
    {\n
        v6 = -1;\n
        v9 = &v9[1];\n
    }\n
    if (v8 == 16)\n
    {\n
        if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
            v9 += 2;\n
        goto LABEL_40628b;\n
    }\n
    if (v8)\n
    {\n
LABEL_40628b:\n
        for (; *(v9); v9 = &v9[1])\n
        {\n
            if (cgc_isdigit(v9[0]))\n
            {\n
                v2 = *(v9) - 48;\n
            }\n
            else if (cgc_islower(v9[0]))\n
            {\n
                v2 = *(v9) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v9[0]))\n
                    break;\n
                v2 = *(v9) + -55;\n
            }\n
            if (v2 >= v8)\n
                break;\n
            v5 = 0;\n
            v3 = v8 * v3 + v2;\n
            if (v3 > 4294967295)\n
                v4 = 1;\n
        }\n
    }\n
    if (*(v9) == 48 && *((v9 + 1)) >= 48 && *((v9 + 1)) <= 55)\n
    {\n
        *(&v9) = &v9[1];\n
        v8 = 8;\n
        goto LABEL_40627c;\n
    }\n
    if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
    {\n
        v9 += 2;\n
        v8 = 16;\n
        goto LABEL_40627c;\n
    }\n
    if (!cgc_isdigit(v9[0]))\n
        goto LABEL_40627c;\n
    v8 = 10;\n
LABEL_40627c:\n
    if (a1)\n
    {\n
        if (v5)\n
            *(&v1) = v7;\n
        else\n
            v1 = v9;\n
        *(a1) = v1;\n
    }\n
    if (v6 < 0)\n
    {\n
        if (v3 > 2147483647 && v3 != -0x80000000)\n
            v4 = 1;\n
        v3 = -(v3);\n
    }\n
    if (v4)\n
    {\n
        v0 = 4294967295;\n
        return v0;\n
    }\n
    v0 = v3;\n
    return v0;\n
}\n
", "4219933:sub_40641d": null, "4219936:cgc_find_entry_by_bin_rep": "extern char g_barcode_lut;\n
\n
long long cgc_find_entry_by_bin_rep(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 108)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp((4244772 + 24 * v0), a0))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = (4244768 + 24 * v0);\n
            return v1;\n
        }\n
    }\n
}\n
", "4220080:cgc_create_barcode_from_str": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char g_barcode_lut;\n
extern unsigned int g_blut_quiet;\n
extern unsigned long long g_blut_startb;\n
extern unsigned long long g_blut_startc;\n
extern unsigned long long g_blut_stop;\n
\n
long long cgc_create_barcode_from_str(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x60]\n
    unsigned int v3;  // [bp-0x58]\n
    char *v4;  // [bp-0x50]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x40]\n
    unsigned int v7;  // [bp-0x3c]\n
    unsigned int v8;  // [bp-0x38]\n
    char v9;  // [bp-0x33]\n
    char v10;  // [bp-0x32]\n
    char *v11;  // [bp-0x30]\n
    unsigned int v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x24]\n
    struct_0 *v14;  // [bp-0x20]\n
    char *v15;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_0 *v16;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v18;  // rax\n
    unsigned long long *v19;  // rcx\n
    unsigned long long *v20;  // rcx\n
    unsigned long long *v21;  // rcx\n
    struct_0 *v22;  // rax\n
    unsigned long long *v23;  // rcx\n
    unsigned long long *v24;  // rcx\n
    unsigned long long *v25;  // rcx\n
    unsigned int v26;  // eax\n
    unsigned int v28;  // ecx\n
    struct_0 *v29;  // rax\n
    unsigned long long *v30;  // rcx\n
    unsigned long long *v31;  // rcx\n
    unsigned long long *v32;  // rcx\n
    struct_0 *v33;  // rcx\n
\n
    v15 = a0;\n
    if (v15 && cgc_strlen(v15) && cgc_strlen(v15) <= 250)\n
    {\n
        v14 = cgc_malloc(32);\n
        v13 = 0;\n
        v12 = 1;\n
        v11 = 0;\n
        memset(&v9, 0, 3);\n
        v13 = 0;\n
        while (true)\n
        {\n
            v5 = v13;\n
            v18 = cgc_strlen(v15);\n
            if (v5 >= v18)\n
                break;\n
            if (!cgc_isdigit(v15[v13]))\n
                v12 = 0;\n
            if (v15[v13] >= 32 && v15[v13] <= 126)\n
                goto LABEL_4065e3;\n
            if (v15[v13] != 9 && v15[v13] != -64)\n
            {\n
                cgc_free(v14);\n
                v16 = 0;\n
                return v16;\n
            }\n
LABEL_4065e3:\n
            v13 += 1;\n
        }\n
        cgc_printf(\"but the q isdid i make it here?\\n
\", 0, 3, v18, a4);\n
        v8 = 0;\n
        if (v12)\n
        {\n
            v7 = 0;\n
            v14->field_4 = 101;\n
            if (!(cgc_strlen(v15) & 1))\n
            {\n
                v14->field_8 = cgc_strdup(v15);\n
            }\n
            else\n
            {\n
                v11 = cgc_malloc(cgc_strlen(v15) + 2);\n
                *(v11) = 48;\n
                *(&v3) = v11 + 1;\n
                v4 = v15;\n
                cgc_memcpy(*(&v3), v4, cgc_strlen(v15) + 1);\n
                v15 = v11;\n
                v14->field_8 = v11;\n
            }\n
            v14->field_18 = 105;\n
            v14->field_0 = (cgc_strlen(v15) >> 1) + 5;\n
            v14->field_10 = cgc_malloc(v14->field_0 * 8);\n
            v23 = v8;\n
            v8 = v23 + 1;\n
            *((v14->field_10 + v23 * 8)) = *(&g_blut_quiet);\n
            v24 = v8;\n
            v8 = v24 + 1;\n
            *((v14->field_10 + v24 * 8)) = g_blut_startc;\n
            v13 = 0;\n
            while (true)\n
            {\n
                v2 = v13;\n
                if (v2 >= cgc_strlen(v15))\n
                    break;\n
                v9 = *((v15 + v13));\n
                v10 = *((v15 + v13 + 1));\n
                v7 = cgc_strtoul(&v9, NULL, 10);\n
                if (v7 >= 100)\n
                    v7 = 0;\n
                v25 = v8;\n
                v8 = v25 + 1;\n
                *((v14->field_10 + v25 * 8)) = (4244768 + 24 * v7);\n
                v26 = v13 + 2;\n
                v28 = (v26 >> 31 CONCAT v26) /m 2 * v7;\n
                v29 = v14;\n
                v29->field_18 = v28 + v29->field_18;\n
                v13 += 2;\n
            }\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            v14->field_4 = 100;\n
            v14->field_8 = cgc_strdup(v15);\n
            v14->field_18 = 104;\n
            v14->field_0 = cgc_strlen(v15) + 5;\n
            v14->field_10 = cgc_malloc(v14->field_0 * 8);\n
            v19 = v8;\n
            v8 = v19 + 1;\n
            *((v14->field_10 + v19 * 8)) = *(&g_blut_quiet);\n
            v20 = v8;\n
            v8 = v20 + 1;\n
            *((v14->field_10 + v20 * 8)) = g_blut_startb;\n
            v13 = 0;\n
            while (true)\n
            {\n
                v1 = v13;\n
                if (v1 >= cgc_strlen(v15))\n
                    break;\n
                if (v15[v13] == 9)\n
                {\n
                    v6 = 100;\n
                }\n
                else if (v15[v13] == -64)\n
                {\n
                    v6 = 101;\n
                }\n
                else\n
                {\n
                    v6 = v15[v13] - 32;\n
                }\n
                v21 = v8;\n
                v8 = v21 + 1;\n
                *((v14->field_10 + v21 * 8)) = (4244768 + 24 * v6);\n
                v22 = v14;\n
                v22->field_18 = (v13 + 1) * v6 + v22->field_18;\n
                v13 += 1;\n
            }\n
        }\n
        v0 = v14;\n
        v0->field_18 = (v0->field_18 >> 31 CONCAT v0->field_18) /m 103 >> 32;\n
        v30 = v8;\n
        v8 = v30 + 1;\n
        *((v14->field_10 + v30 * 8)) = (4244768 + 24 * v14->field_18);\n
        v31 = v8;\n
        v8 = v31 + 1;\n
        *((v14->field_10 + v31 * 8)) = g_blut_stop;\n
        v32 = v8;\n
        v8 = v32 + 1;\n
        *((v14->field_10 + v32 * 8)) = *(&g_blut_quiet);\n
        v33 = v14;\n
        if (v8 != v33->field_0)\n
        {\n
            cgc_printf(\"Bad barcode processing\\n
\", v8, *(&g_blut_quiet), v33, a4);\n
            v14->field_0 = v8;\n
        }\n
        v16 = v14;\n
        return v16;\n
    }\n
    v16 = 0;\n
    return v16;\n
}\n
", "4221510:sub_406a46": null, "4221520:cgc_find_stop_code": "extern unsigned long long g_blut_stop;\n
\n
long long cgc_find_stop_code(char *a0)\n
{\n
    char v0;  // [bp-0x2a]\n
    char v1;  // [bp-0x29]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x20]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rdx\n
\n
    v4 = g_blut_stop + 4;\n
    v3 = cgc_strlen(v4) - 1;\n
    v2 = cgc_strlen(a0) - 1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v2 >= 0)\n
            v1 = a0[v2] == 32;\n
        if (!(v1 & 1))\n
            break;\n
        v2 -= 1;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v3 >= 0)\n
            v0 = 0 <= v2;\n
        if (!(v0 & 1))\n
        {\n
            v5 = &a0[1 + v2];\n
            return v5;\n
        }\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        v8 = v2;\n
        v2 = v8 - 1;\n
        if (v4[v7] != a0[v8])\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4221791:sub_406b5f": null, "4221792:cgc_create_barcode_from_encoded_data": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char g_barcode_lut;\n
extern unsigned int g_blut_quiet;\n
extern unsigned long long g_blut_startb;\n
extern unsigned long long g_blut_startc;\n
extern unsigned long long g_blut_stop;\n
\n
long long cgc_create_barcode_from_encoded_data(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x60]\n
    char v1;  // [bp-0x55]\n
    unsigned int v2;  // [bp-0x54]\n
    struct_0 *v3;  // [bp-0x50]\n
    char *v4;  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    char v7;  // [bp-0x34]\n
    char v8;  // [bp-0x29]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    unsigned long v11;  // [bp-0x20]\n
    struct_0 *v12;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v14;  // eax\n
    unsigned long long *v16;  // rcx\n
    unsigned long long *v17;  // rcx\n
    struct_0 *v18;  // rax\n
    struct_0 *v19;  // rax\n
    unsigned long long *v20;  // rcx\n
    unsigned long long *v21;  // rcx\n
    unsigned long long *v22;  // rcx\n
    unsigned long long *v23;  // rcx\n
    struct_0 *v24;  // rcx\n
\n
    v11 = cgc_find_stop_code(a0);\n
    if (!v11)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v10 = (-11 + v11 - a0);\n
    v9 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (a0[v9])\n
            v1 = a0[v9] != 124;\n
        if (!(v1 & 1))\n
            break;\n
        v9 += 1;\n
    }\n
    if (v9 < v10 && a0[v9])\n
    {\n
        v6 = 0;\n
        v5 = 0;\n
        v4 = 0;\n
        v3 = cgc_malloc(32);\n
        v3->field_18 = 0;\n
        v14 = v10 - v9;\n
        v3->field_0 = (v14 >> 31 CONCAT v14) /m 11 + 4;\n
        v3->field_10 = cgc_malloc(v3->field_0 * 8);\n
        v16 = v5;\n
        v5 = v16 + 1;\n
        *((v3->field_10 + v16 * 8)) = *(&g_blut_quiet);\n
        v3->field_4 = 0;\n
        v8 = 0;\n
        cgc_memcpy(&v7, &a0[v9], 11);\n
        v4 = cgc_find_entry_by_bin_rep(&v7);\n
        if (v4)\n
        {\n
            v17 = v5;\n
            v5 = v17 + 1;\n
            *((v3->field_10 + v17 * 8)) = v4;\n
            if (v4 == g_blut_startb)\n
            {\n
                v3->field_4 = 100;\n
                v18 = v3;\n
                v18->field_18 = v18->field_18 + 104;\n
            }\n
            else\n
            {\n
                if (!(v4 == g_blut_startc))\n
                    goto LABEL_4070bd;\n
                v3->field_4 = 101;\n
                v19 = v3;\n
                v19->field_18 = v19->field_18 + 105;\n
            }\n
            v9 += 11;\n
            while (true)\n
            {\n
                if (v9 >= v10)\n
                {\n
                    v8 = 0;\n
                    cgc_memcpy(&v7, &a0[v9], 11);\n
                    v4 = cgc_find_entry_by_bin_rep(&v7);\n
                    v0 = v3;\n
                    v0->field_18 = (v0->field_18 >> 31 CONCAT v0->field_18) /m 103 >> 32;\n
                    if (v4 && v4 == (4244768 + 24 * v3->field_18))\n
                    {\n
                        v21 = v5;\n
                        v5 = v21 + 1;\n
                        *((v3->field_10 + v21 * 8)) = v4;\n
                        v22 = v5;\n
                        v5 = v22 + 1;\n
                        *((v3->field_10 + v22 * 8)) = g_blut_stop;\n
                        v23 = v5;\n
                        v5 = v23 + 1;\n
                        *((v3->field_10 + v23 * 8)) = *(&g_blut_quiet);\n
                        v24 = v3;\n
                        if (v5 != v24->field_0)\n
                        {\n
                            cgc_printf(\"Bad barcode processing\\n
\", v5, *(&g_blut_quiet), v24, a4);\n
                            v3->field_0 = v5;\n
                        }\n
                        v2 = 0;\n
                        if (v3->field_4 == 100)\n
                        {\n
                            v2 = v3->field_0 + -4;\n
                        }\n
                        else if (v3->field_4 == 101)\n
                        {\n
                            v2 = ((v3->field_0 - 5) * 2) + 1;\n
                        }\n
                        v3->field_8 = cgc_malloc(v2);\n
                        *((v3->field_8 + v2 - 1)) = 0;\n
                        for (v9 = 2; v9 < v3->field_0 - 3; v9 += 1)\n
                        {\n
                            if (v3->field_4 == 100)\n
                                *((v3->field_8 + v9 - 2)) = *(*((v3->field_10 + v9 * 8)));\n
                            if (v3->field_4 == 101)\n
                            {\n
                                *((v3->field_8 + (v9 - 2) * 2)) = *((*((v3->field_10 + v9 * 8)) + 1));\n
                                *((v3->field_8 + ((v9 - 2) * 2) + 1)) = *((*((v3->field_10 + v9 * 8)) + 2));\n
                            }\n
                        }\n
                        v12 = v3;\n
                        return v12;\n
                    }\n
                    break;\n
                }\n
                else\n
                {\n
                    cgc_memcpy(&v7, &a0[v9], 11);\n
                    v4 = cgc_find_entry_by_bin_rep(&v7);\n
                    if (!v4)\n
                        break;\n
                    v20 = v5;\n
                    v5 = v20 + 1;\n
                    *((v3->field_10 + v20 * 8)) = v4;\n
                    if (*(v4) == 9)\n
                    {\n
                        v6 += 1;\n
                        v3->field_18 = v3->field_18 + v6 * 100;\n
                    }\n
                    else if (*(v4) == 192)\n
                    {\n
                        v6 += 1;\n
                        v3->field_18 = v3->field_18 + v6 * 101;\n
                    }\n
                    else\n
                    {\n
                        v6 += 1;\n
                        v3->field_18 = v3->field_18 + v6 * (*(v4) - 32);\n
                    }\n
                    v9 += 11;\n
                }\n
            }\n
        }\n
LABEL_4070bd:\n
        cgc_free(v3->field_10);\n
        cgc_free(v3);\n
        v12 = 0;\n
        return v12;\n
    }\n
    v12 = 0;\n
    return v12;\n
}\n
", "4223205:sub_4070e5": null, "4223216:cgc_create_barcode_ascii": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_create_barcode_ascii(struct_0 *a0)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    char *v6;  // rax\n
    char *v7;  // rax\n
\n
    v4 = 0;\n
    v3 = (a0->field_0 - 1) * 11 + 14;\n
    v2 = cgc_calloc(1, v3);\n
    v1 = v2;\n
    for (v4 = 0; v4 < a0->field_0; v4 += 1)\n
    {\n
        for (v0 = *((a0->field_10 + v4 * 8)) + 4; *(v0); *(v7) = tmp_19)\n
        {\n
            v6 = v0;\n
            v0 = v6 + 1;\n
            tmp_19 = *(v6);\n
            v7 = v1;\n
            v1 = v7 + 1;\n
        }\n
    }\n
    return v2;\n
}\n
", "4223406:sub_4071ae": null, "4223408:cgc_print_barcode_ascii": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
long long cgc_print_barcode_ascii(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned long v2;  // rcx\n
    struct struct_0 **v3;  // rcx\n
    struct struct_0 **v4;  // rcx\n
    unsigned long long *v5;  // rcx\n
\n
    v0 = 0;\n
    if (a1)\n
    {\n
        v0 = 2;\n
        while (true)\n
        {\n
            v2 = a0->field_0 - 3;\n
            if (v0 >= v2)\n
                break;\n
            if (a0->field_4 == 100)\n
            {\n
                v3 = v0;\n
                cgc_printf(\"%c\", *(*((a0->field_10 + v3 * 8))), a2, v3, a4);\n
            }\n
            if (a0->field_4 == 101)\n
            {\n
                v4 = v0;\n
                cgc_printf(\"%s\", *((a0->field_10 + v4 * 8)) + 1, a2, v4, a4);\n
            }\n
            v0 += 1;\n
        }\n
        cgc_printf(\"\\n
\", a1, a2, v2, a4);\n
    }\n
    for (v0 = 1; v0 < a0->field_0 - 1; v0 += 1)\n
    {\n
        v5 = v0;\n
        cgc_printf(\"%s\", *((a0->field_10 + v5 * 8)) + 4, a2, v5, a4);\n
    }\n
    return cgc_printf(\"\\n
\", a1, a2, a0->field_0 - 1, a4);\n
}\n
", "4223690:sub_4072ca": null, "4223696:cgc_validate_bmp_headers": "typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned int field_2;\n
    unsigned int field_6;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned short field_c;\n
    unsigned short field_e;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
} struct_0;\n
\n
long long cgc_validate_bmp_headers(struct_1 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    if (cgc_memcmp(a0, \"BM\", 2))\n
    {\n
LABEL_407442:\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (!(!*((&a0->field_2 + 2))))\n
        goto LABEL_407442;\n
    if (!(*(&(&a0->padding_0)[1]) == a1->field_14 + 54))\n
        goto LABEL_407442;\n
    if (!(a1->field_0 == 40))\n
        goto LABEL_407442;\n
    if (a1->field_4 <= 11056 && a1->field_8 == 120)\n
    {\n
        if (!(a1->field_c == 1))\n
            goto LABEL_407442;\n
        if (!(a1->field_e == 24))\n
            goto LABEL_407442;\n
        if (!(!a1->field_10))\n
            goto LABEL_407442;\n
        v0 = a1->field_14;\n
        v3 = a1->field_e;\n
        if (!(v0 == (v3 >> 31 CONCAT v3) /m 8 * a1->field_8 * a1->field_4))\n
            goto LABEL_407442;\n
        if (a1->field_18 == 2835 && a1->field_1c == 2835)\n
        {\n
            if (!a1->field_20 && !a1->field_24)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
            goto LABEL_407442;\n
        }\n
        goto LABEL_407442;\n
    }\n
    goto LABEL_407442;\n
}\n
", "4224082:sub_407452": null, "4224096:cgc_create_barcode_bmp": "long long cgc_create_barcode_bmp(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    unsigned long v3;  // [bp-0x60]\n
    unsigned int v4;  // [bp-0x58]\n
    unsigned int v5;  // [bp-0x54]\n
    unsigned int v6;  // [bp-0x50]\n
    unsigned int v7;  // [bp-0x4c]\n
    unsigned int v8;  // [bp-0x48]\n
    unsigned short v9;  // [bp-0x44]\n
    unsigned short v10;  // [bp-0x42]\n
    unsigned int v11;  // [bp-0x40]\n
    unsigned int v12;  // [bp-0x3c]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned int v15;  // [bp-0x30]\n
    unsigned int v16;  // [bp-0x2c]\n
    char v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x26]\n
    unsigned int v19;  // [bp-0x22]\n
    unsigned int v20;  // [bp-0x1e]\n
    void* v21;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v23;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = cgc_create_barcode_bmp_data(a0, &v5, &v4);\n
    if (v3 && v5)\n
    {\n
        cgc_memcpy(&v17, \"BM\", 2);\n
        v19 = 0;\n
        v18 = v5 + 54;\n
        v20 = 54;\n
        v6 = 40;\n
        v10 = 24;\n
        v0 = v4;\n
        v23 = v10;\n
        v25 = v0;\n
        v26 = (v25 >> 31 CONCAT v25) /m (v23 >> 31 CONCAT v23) /m 8;\n
        v7 = v26;\n
        v8 = 120;\n
        v9 = 1;\n
        v11 = 0;\n
        v1 = v8 * v7;\n
        v27 = v10;\n
        v12 = (v27 >> 31 CONCAT v27) /m 8 * v1;\n
        v13 = 2835;\n
        v14 = 2835;\n
        v15 = 0;\n
        v16 = 0;\n
        *(&v2) = cgc_malloc(v5 + 54);\n
        cgc_memcpy(*(&v2), &v17, 14);\n
        cgc_memcpy(*(&v2) + 14, &v6, 40);\n
        cgc_memcpy(*(&v2) + 54, v3, v5);\n
        cgc_free(v3);\n
        v21 = *(&v2);\n
        return v21;\n
    }\n
    v21 = 0;\n
    return v21;\n
}\n
", "4224452:sub_4075c4": null, "4224464:cgc_create_barcode_bmp_data": "typedef struct struct_0 {\n
    char padding_0[8];\n
    char *field_8;\n
} struct_0;\n
\n
extern char g_409243;\n
extern char g_409247;\n
\n
long long cgc_create_barcode_bmp_data(struct_0 *a0, unsigned int *a1, unsigned int *a2)\n
{\n
    unsigned long v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x54]\n
    unsigned int v4;  // [bp-0x50]\n
    unsigned int v5;  // [bp-0x4c]\n
    unsigned long v6;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x40]\n
    char *v8;  // [bp-0x38]\n
    char *v9;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(a1) = 0;\n
    *(a2) = 0;\n
    v9 = cgc_create_barcode_ascii(a0);\n
    v8 = v9;\n
    if (v9 && cgc_strlen(a0->field_8) <= 250)\n
    {\n
        *(a1) = cgc_strlen(v9) * 1440;\n
        *(&v7) = cgc_calloc(1, *(a1));\n
        *(&v6) = *(&v7);\n
        v5 = cgc_strlen(v9) * 12;\n
        *(a2) = v5;\n
        v4 = 0;\n
        v3 = 0;\n
        v1 = &g_409247;\n
        for (v0 = &g_409243; *(v9); v9 += 1)\n
        {\n
            if (*(v9) == 124)\n
                *(&v2) = v1;\n
            else\n
                v2 = v0;\n
            for (v3 = 0; v3 < 4; v3 += 1)\n
            {\n
                cgc_memcpy(v6, v2, 3);\n
                v6 += 3;\n
            }\n
        }\n
        for (v4 = 1; v4 < 120; v4 += 1)\n
        {\n
            cgc_memcpy(*(&v7) + v5 * v4, *(&v7), v5);\n
        }\n
        cgc_free(v8);\n
        v10 = *(&v7);\n
        return v10;\n
    }\n
    v10 = 0;\n
    return v10;\n
}\n
", "4224914:sub_407792": null, "4224928:cgc_create_barcode_from_bmp": "typedef struct struct_0 {\n
    char padding_0[18];\n
    unsigned int field_12;\n
    char padding_16[6];\n
    unsigned short field_1c;\n
} struct_0;\n
\n
long long cgc_create_barcode_from_bmp(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x58]\n
    char v2;  // [bp-0x51]\n
    char *v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned long v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x38]\n
    char v7;  // [bp-0x2d]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    char *v11;  // [bp-0x20]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v14;  // eax\n
    unsigned long v16;  // rax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned int v22;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
\n
    if (cgc_validate_bmp_headers(a0, &a0->padding_0[14]))\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v14 = *(&(&a0->padding_0)[1]);\n
    v16 = (v14 >> 31 CONCAT v14) /m 4 + 1;\n
    v11 = cgc_calloc(1, v16);\n
    v10 = 0;\n
    v9 = 0;\n
    v17 = *(&a0->padding_16[4]);\n
    v8 = (v17 >> 31 CONCAT v17) /m 8 * 4;\n
    v9 = 0;\n
    while (true)\n
    {\n
        v4 = v9;\n
        v18 = *(&a0->padding_16[4]);\n
        v19 = (v18 >> 31 CONCAT v18) /m 8;\n
        v20 = v19 * *(&(&a0->padding_0)[1]);\n
        if (v4 >= v20)\n
        {\n
            v10 = 1;\n
            while (true)\n
            {\n
                if (v10 >= 120)\n
                {\n
                    v5 = cgc_create_barcode_from_encoded_data(v11, 8, v19, v20, a4);\n
                    cgc_free(v11);\n
                    v12 = v5;\n
                    return v12;\n
                }\n
                v0 = &a0[1].field_12 + 2;\n
                v24 = *(&a0->padding_16[4]);\n
                *(&v6) = v0 + (v24 >> 31 CONCAT v24) /m 8 * *(&(&a0->padding_0)[1]) * v10;\n
                v1 = *(&(&a0->padding_0)[1]);\n
                v25 = *(&a0->padding_16[4]);\n
                if (cgc_memcmp(*(&v6), &a0[1].field_12 + 2, (v25 >> 31 CONCAT v25) /m 8 * v1))\n
                    break;\n
                v10 += 1;\n
            }\n
        }\n
        else\n
        {\n
            v7 = *(&a0->padding_0[v9 + 54]);\n
            if (v7 && v7 != 255)\n
                break;\n
            v10 = 1;\n
            if (v10 >= v8)\n
            {\n
                *(&v2) = (!v7 ? 32 : 124);\n
                v3 = v11;\n
                v22 = v9;\n
                v3[(v22 >> 31 CONCAT v22) /m v8] = v2;\n
                v9 = v8 + v9;\n
            }\n
            else\n
            {\n
                if (*(&a0->padding_0[v9 + v10 + 54]) != v7)\n
                    break;\n
                v10 += 1;\n
            }\n
        }\n
    }\n
    cgc_free(v11);\n
    v12 = 0;\n
    return v12;\n
}\n
", "4225514:sub_4079ea": null, "4225520:cgc_add_to_cache": "extern struct_0 *g_barcode_cache;\n
extern unsigned int g_c_idx;\n
extern unsigned int g_c_oldest;\n
extern unsigned int g_replace_oldest;\n
\n
long long cgc_add_to_cache(unsigned long a0)\n
{\n
    unsigned long long v0[3];  // [bp-0x18], Other Possible Types: void*\n
    unsigned long v2;  // rax\n
\n
    if (!g_replace_oldest && g_c_idx < 10)\n
    {\n
        v2 = g_c_idx;\n
        g_c_idx = g_c_idx + 1;\n
        (&g_barcode_cache)[v2] = a0;\n
        return &g_barcode_cache;\n
    }\n
    g_replace_oldest = 1;\n
    v0[0] = (&g_barcode_cache)[g_c_oldest];\n
    cgc_free(v0[1]);\n
    cgc_free(v0[2]);\n
    cgc_free(v0);\n
    v0 = 0;\n
    g_c_idx = g_c_oldest;\n
    g_c_oldest = (g_c_oldest + 1 >> 31 CONCAT g_c_oldest + 1) /m 10 >> 32;\n
    (&g_barcode_cache)[g_c_idx] = a0;\n
    return &g_barcode_cache;\n
}\n
", "4225736:sub_407ac8": null, "4225744:cgc_select_from_cache": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern void cgc_stdin;\n
extern void* cgc_stdout;\n
extern char g_barcode_cache;\n
extern unsigned int g_c_idx;\n
extern unsigned int g_c_oldest;\n
extern char g_input;\n
extern unsigned int g_replace_oldest;\n
\n
long long cgc_select_from_cache(unsigned long a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct struct_0 **v6;  // rdx\n
\n
    v3 = -1;\n
    if (g_replace_oldest)\n
        v0 = 10;\n
    else\n
        v0 = g_c_idx;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (v3 >= v2)\n
        {\n
            cgc_printf(\"Select Cached Barcode\\n
\", 0, 10, *(&cgc_stdin), a4);\n
            v1 = 0;\n
            for (v1 = 0; v1 < v2; v1 += 1)\n
            {\n
                v6 = (v1 + g_c_oldest >> 31 CONCAT v1 + g_c_oldest) /m 10 >> 32;\n
                a3 = v6;\n
                a2 = *((*((&g_barcode_cache + 0x8 * v6)) + 8));\n
                cgc_printf(\"    %d. Text: %s\\n
\", v1 + 1, a2, a3, a4);\n
            }\n
            cgc_printf(\"    0. Return to main menu\\n
\", a1, a2, a3, a4);\n
            cgc_printf(\":-$  \", a1, a2, a3, a4);\n
            cgc_fflush(cgc_stdout);\n
            if (cgc_freaduntil(&g_input, 0x800, 10, *(&cgc_stdin)) == -1)\n
            {\n
                cgc_printf(\"Invalid Selection\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
                cgc_fflush(cgc_stdout);\n
                cgc_exit(0);\n
            }\n
            else\n
            {\n
                v3 = cgc_strtoul(&g_input, NULL, 10);\n
                if (!v3)\n
                {\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                v3 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            v4 = *(&(&g_barcode_cache)[8 * ((0 CONCAT v3 + g_c_oldest) /m 10 >> 32)]);\n
            return v4;\n
        }\n
    }\n
}\n
", "4226155:sub_407c6b": null, "4226160:cgc_input_barcode": "typedef struct struct_2 {\n
    char padding_0[34];\n
    unsigned int field_22;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern void cgc_stdin;\n
extern void* cgc_stdout;\n
extern char g_input;\n
\n
long long cgc_input_barcode(unsigned long a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x15c]\n
    int tmp_10;  // tmp #10\n
    char v1;  // [bp-0x158]\n
    struct_0 *v2;  // [bp-0x58], Other Possible Types: struct_1 *\n
    char v3;  // [bp-0x50]\n
    char v4;  // [bp-0x4e]\n
    char v5;  // [bp-0x42]\n
    struct_2 *v6;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned long long v9;  // rax\n
    unsigned long long v10;  // rax, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdx\n
\n
    v7 = -1;\n
    while (v7 > 4)\n
    {\n
        cgc_printf(\"Input barcode as:\\n
\", 0, 10, *(&cgc_stdin), a4);\n
        cgc_printf(\"    1. String to encode\\n
\", 0, 10, *(&cgc_stdin), a4);\n
        cgc_printf(\"    2. Barcode encoded in ascii (\\\"|\\\" and \\\" \\\")\\n
\", 0, 10, *(&cgc_stdin), a4);\n
        cgc_printf(\"    3. Barcode bitmap\\n
\", 0, 10, *(&cgc_stdin), a4);\n
        cgc_printf(\"    0. Return to main menu\\n
\", 0, 10, *(&cgc_stdin), a4);\n
        cgc_printf(\":-$  \", 0, 10, *(&cgc_stdin), a4);\n
        cgc_fflush(cgc_stdout);\n
        if (cgc_freaduntil(&g_input, 0x800, 10, *(&cgc_stdin)) != -1)\n
        {\n
            v7 = cgc_strtoul(&g_input, NULL, 10);\n
        }\n
        else\n
        {\n
            cgc_printf(\"Invalid Selection\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            cgc_fflush(cgc_stdout);\n
            cgc_exit(0);\n
        }\n
    }\n
    v6 = 0;\n
    v2 = 0;\n
    cgc_fflush(cgc_stdout);\n
    v0 = v7;\n
    if (v0 == 1)\n
    {\n
        if (cgc_freaduntil(&g_input, 0x800, 10, *(&cgc_stdin)) == -1)\n
        {\n
            cgc_printf(\"Bad input\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            cgc_fflush(cgc_stdout);\n
            cgc_exit(0);\n
        }\n
        v2 = cgc_create_barcode_from_str(&g_input, 0x800, 10, *(&cgc_stdin), a4);\n
        if (!v2)\n
        {\n
            v10 = cgc_printf(\"Bad barcode string\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
        }\n
        else\n
        {\n
            cgc_add_to_cache(v2);\n
            cgc_printf(\"Successfully added barcode to cache\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            v10 = cgc_printf(\"Barcode text: %s\\n
\", *(&v2->field_8), 10, *(&cgc_stdin), a4);\n
        }\n
        return v10;\n
    }\n
    else if (v0 == 2)\n
    {\n
        if (cgc_freaduntil(&g_input, 0x800, 10, *(&cgc_stdin)) == -1)\n
        {\n
            cgc_printf(\"Bad input\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            cgc_fflush(cgc_stdout);\n
            cgc_exit(0);\n
        }\n
        v2 = cgc_create_barcode_from_encoded_data(&g_input, 0x800, 10, *(&cgc_stdin), a4);\n
        if (!v2)\n
        {\n
            v10 = cgc_printf(\"Bad barcode encoding\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
        }\n
        else\n
        {\n
            cgc_add_to_cache(v2);\n
            cgc_printf(\"Successfully added barcode to cache\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            v10 = cgc_printf(\"Barcode text: %s\\n
\", *(&v2->field_8), 10, *(&cgc_stdin), a4);\n
        }\n
        return v10;\n
    }\n
    else\n
    {\n
        v9 = v0;\n
        tmp_10 = v9;\n
        v10 = v9 - 3;\n
        if (tmp_10 != 3)\n
            return v10;\n
        v11 = *(&cgc_stdin);\n
        if (cgc_fread(&v3, 54, *(&cgc_stdin)) == -1)\n
        {\n
            cgc_sprintf(&v1, \"Bad input\\n
\", *(&cgc_stdin), *(&cgc_stdin), a4);\n
        }\n
        else if (cgc_validate_bmp_headers(&v3, &v5))\n
        {\n
            cgc_sprintf(&v1, \"Bad input\\n
\", *(&cgc_stdin), *(&cgc_stdin), a4);\n
        }\n
        else\n
        {\n
            v6 = cgc_malloc(*(&v4));\n
            cgc_memcpy(v6, &v3, 54);\n
            cgc_fflush(cgc_stdout);\n
            if (cgc_fread(v6 + 54, *((v6 + 34)), *(&cgc_stdin)) == -1)\n
            {\n
                cgc_sprintf(&v1, \"Bad input\\n
\", *(&cgc_stdin), *(&cgc_stdin), a4);\n
            }\n
            else\n
            {\n
                v2 = cgc_create_barcode_from_bmp(v6, a1, *(&cgc_stdin), *(&cgc_stdin), a4);\n
                if (!v2)\n
                {\n
                    cgc_sprintf(&v1, \"Bad barcode bitmap\\n
\", *(&cgc_stdin), *(&cgc_stdin), a4);\n
                }\n
                else\n
                {\n
                    cgc_add_to_cache(v2);\n
                    v11 = v2->field_8;\n
                    cgc_sprintf(&v1, \"Successfully added bitmap barcode to cache\\n
Barcode text: %s\\n
\", v11, *(&cgc_stdin), a4);\n
                }\n
            }\n
        }\n
        if (v6)\n
            cgc_free(v6);\n
        v10 = cgc_printf(\"%s\", &v1, v11, *(&cgc_stdin), a4);\n
        return v10;\n
    }\n
}\n
", "4227211:sub_40808b": null, "4227216:cgc_view_cached_barcodes": "extern char g_barcode_cache;\n
extern unsigned int g_c_idx;\n
extern unsigned int g_c_oldest;\n
extern unsigned int g_replace_oldest;\n
\n
long long cgc_view_cached_barcodes(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    struct struct_0 **v4;  // rcx\n
\n
    if (g_replace_oldest)\n
        v0 = 10;\n
    else\n
        v0 = g_c_idx;\n
    v2 = v0;\n
    cgc_printf(\"Cached Barcodes\\n
\", a1, a2, a3, a4);\n
    v1 = 0;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        v4 = (v1 + g_c_oldest >> 31 CONCAT v1 + g_c_oldest) /m 10 >> 32;\n
        cgc_printf(\"    %d. Text: %s\\n
\", v1 + 1, *((*((&g_barcode_cache + 0x8 * v4)) + 8)), v4, a4);\n
    }\n
    return v1;\n
}\n
", "4227380:sub_408134": null, "4227392:cgc_clear_cached_barcodes": "extern struct_0 *g_barcode_cache;\n
extern unsigned int g_c_idx;\n
extern unsigned int g_c_oldest;\n
extern unsigned int g_replace_oldest;\n
\n
long long cgc_clear_cached_barcodes()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long long v3[3];  // [bp-0x10]\n
\n
    if (g_replace_oldest)\n
        v0 = 10;\n
    else\n
        v0 = g_c_idx;\n
    v2 = v0;\n
    v1 = 0;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        v3[0] = (&g_barcode_cache)[v1];\n
        cgc_free(v3[1]);\n
        cgc_free(v3[2]);\n
        cgc_free(v3);\n
        v3[0] = 0;\n
    }\n
    g_replace_oldest = 0;\n
    g_c_idx = 0;\n
    g_c_oldest = 0;\n
    return v1;\n
}\n
", "4227579:sub_4081fb": null, "4227584:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_check_seed()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    v2 = v0;\n
    if (v2 == *(0x4347c000))\n
    {\n
        v2 = cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v0;\n
}\n
", "4227670:sub_408256": null, "4227680:main": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned int field_2;\n
} struct_1;\n
\n
extern void cgc_stdin;\n
extern void cgc_stdout;\n
extern unsigned int g_40924c;\n
extern char g_input;\n
\n
int main(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    struct_1 *v1;  // [bp-0x30]\n
    struct_0 *v2;  // [bp-0x28], Other Possible Types: struct_2 *\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned long v9;  // rax\n
\n
    v7 = 0;\n
    v6 = a0;\n
    *(&v5) = a1;\n
    v4 = 1;\n
    cgc_fbuffered(*(&cgc_stdout), 1);\n
    cgc_check_seed();\n
    v2 = 0;\n
    cgc_printf(\"Welcome to the EZ Barcode Encoder/Decoder Service\\n
\", 1, a2, a3, a4);\n
    while (v4)\n
    {\n
        cgc_printf(\"--Select an option--\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"1. Input a new barcode\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"2. View barcode ascii\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"3. Generate barcode image\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"4. View cached barcodes\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"5. Clear cached barcodes\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"6. Quit\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\":-$  \", a1, a2, a3, a4);\n
        cgc_fflush(*(&cgc_stdout));\n
        if (cgc_freaduntil(&g_input, 0x800, 10, *(&cgc_stdin)) == -1)\n
        {\n
            cgc_printf(\"Invalid Selection\\n
\", 0x800, 10, *(&cgc_stdin), a4);\n
            cgc_fflush(*(&cgc_stdout));\n
            cgc_exit(0);\n
        }\n
        v3 = cgc_strtol(&g_input, NULL, 10);\n
        v9 = v3 - 1;\n
        a3 = v9;\n
        v0 = v9;\n
        switch (v9)\n
        {\n
        case 0:\n
            cgc_input_barcode(&g_input, 0, 10, &g_40924c, a4);\n
            break;\n
        case 1:\n
            v2 = cgc_select_from_cache(&g_input, 0, 10, &g_40924c, a4);\n
            if (v2)\n
            {\n
                cgc_printf(\"Raw String: \", 0, 10, &g_40924c, a4);\n
                a1 = 1;\n
                cgc_print_barcode_ascii(v2, 1, 10, &g_40924c, a4);\n
            }\n
            break;\n
        case 2:\n
            v2 = cgc_select_from_cache(&g_input, 0, 10, &g_40924c, a4);\n
            if (v2)\n
            {\n
                v1 = cgc_create_barcode_bmp(v2);\n
                if (!v1)\n
                {\n
                    cgc_printf(\"Bad barcode\\n
\", 0, 10, &g_40924c, a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(\"    Printable Barcode:\\n
\", 0, 10, &g_40924c, a4);\n
                    cgc_fwrite(v1, *(&(&v1->padding_0)[1]), *(&cgc_stdout));\n
                    cgc_printf(\"\\n
    Barcode String: %s\\n
\", *(&v2->field_8), *(&cgc_stdout), &g_40924c, a4);\n
                    cgc_free(v1);\n
                }\n
            }\n
            break;\n
        case 3:\n
            cgc_view_cached_barcodes(&g_input, 0, 10, 4231756, a4);\n
            break;\n
        case 4:\n
            cgc_clear_cached_barcodes();\n
            break;\n
        case 5:\n
            v4 = 0;\n
            break;\n
        default:\n
            cgc_printf(\"Invalid Selection\\n
\", 0, 10, v9, a4);\n
        }\n
    }\n
    cgc_printf(\"Thanks for using the EZ Barcode Encoder/Decoder Service\\n
\", a1, a2, a3, a4);\n
    cgc_fflush(*(&cgc_stdout));\n
    return 0;\n
}\n
", "4228336:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:memset": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}