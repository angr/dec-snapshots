{"4202496:_init": "extern struct_0 *g_408230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408230;\n
    if (g_408230)\n
        v1 = g_408230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408250;\n
    goto *(4227672);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4227648);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_408238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_is_non_printable": "long long cgc_is_non_printable(unsigned long a0)\n
{\n
    return 0 == cgc_is_printable(a0);\n
}\n
", "4202923:sub_4021ab": null, "4202928:cgc_is_printable": "long long cgc_is_printable(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 1;\n
    if (cgc_is_digit(a0))\n
        return v0 & 1;\n
    v0 = 1;\n
    if (cgc_is_letter(a0))\n
        return v0 & 1;\n
    v0 = 1;\n
    if (!cgc_is_symbol(a0))\n
    {\n
        v0 = cgc_is_white_space(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203049:sub_402229": null, "4203056:cgc_is_digit": "long long cgc_is_digit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 0;\n
    if (48 <= a0)\n
        v0 = a0 <= 57;\n
    return v0 & 1;\n
}\n
", "4203111:sub_402267": null, "4203120:cgc_is_letter": "long long cgc_is_letter(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 1;\n
    if (!cgc_is_upper(a0))\n
    {\n
        v0 = cgc_is_lower(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203191:sub_4022b7": null, "4203200:cgc_is_symbol": "long long cgc_is_symbol(unsigned long a0)\n
{\n
    char v0;  // [bp-0xb]\n
    char v1;  // [bp-0xa]\n
\n
    if (33 <= a0)\n
    {\n
        v1 = 1;\n
        if (a0 <= 64)\n
            return v1 & 1;\n
    }\n
    if (91 <= a0)\n
    {\n
        v1 = 1;\n
        if (a0 <= 96)\n
            return v1 & 1;\n
    }\n
    v0 = 0;\n
    if (123 <= a0)\n
        v0 = a0 <= 126;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4203331:sub_402343": null, "4203344:cgc_is_white_space": "long long cgc_is_white_space(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 1;\n
    if (a0 != 32)\n
    {\n
        v0 = 1;\n
        if (a0 != 10)\n
        {\n
            v0 = 1;\n
            if (a0 != 9)\n
                v0 = 13 == a0;\n
        }\n
    }\n
    return v0 & 1;\n
}\n
", "4203447:sub_4023b7": null, "4203456:cgc_is_upper": "long long cgc_is_upper(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 0;\n
    if (65 <= a0)\n
        v0 = a0 <= 90;\n
    return v0 & 1;\n
}\n
", "4203511:sub_4023f7": null, "4203520:cgc_is_lower": "long long cgc_is_lower(unsigned long a0)\n
{\n
    char v0;  // [bp-0xa]\n
\n
    v0 = 0;\n
    if (97 <= a0)\n
        v0 = a0 <= 122;\n
    return v0 & 1;\n
}\n
", "4203575:sub_402437": null, "4203584:cgc_is_hex_digit": "long long cgc_is_hex_digit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (65 <= a0 && 70 >= a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (97 <= a0 && 102 >= a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (48 <= a0 && 57 >= a0)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203744:cgc_ascii_hex_to_bin": "long long cgc_ascii_hex_to_bin(unsigned long a0)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (65 <= a0 && 70 >= a0)\n
    {\n
        v0 = a0 + -55;\n
        return v0;\n
    }\n
    if (97 <= a0 && 102 >= a0)\n
    {\n
        v0 = a0 + -87;\n
        return v0;\n
    }\n
    if (48 <= a0 && 57 >= a0)\n
    {\n
        v0 = a0 - 48;\n
        return v0;\n
    }\n
    v0 = 255;\n
    return v0;\n
}\n
", "4203917:sub_40258d": null, "4203920:cgc_int2str": "long long cgc_int2str(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0xc]\n
    char *v6;  // rcx\n
    unsigned int v8;  // eax\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rcx\n
    unsigned int v12;  // eax\n
\n
    v3 = a2;\n
    v2 = 0;\n
    if (a1 < 2)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    if (v3 >= 0)\n
    {\n
        v3 *= -1;\n
    }\n
    else if (a1 >= 3)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        v6[a0] = 45;\n
    }\n
    else\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v1 = v3;\n
    do\n
    {\n
        v2 += 1;\n
        v8 = v1;\n
        v1 = (v8 >> 31 CONCAT v8) /m 10;\n
    } while (v1 < 0);\n
    if (v2 >= a1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v10 = v2;\n
    v2 = v10 - 1;\n
    *((a0 + v10)) = 0;\n
    do\n
    {\n
        v0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) * -1;\n
        v11 = v2;\n
        v2 = v11 - 1;\n
        *((a0 + v11)) = v0 + 48;\n
        v12 = v3;\n
        v3 = (v12 >> 31 CONCAT v12) /m 10;\n
    } while (v3 < 0);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4204211:sub_4026b3": null, "4204224:cgc_malloc": "extern char freelists;\n
extern unsigned long long size_class_sizes;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x60], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x58]\n
    unsigned long long *v2;  // [bp-0x50], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x45]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned long long *v5;  // [bp-0x40]\n
    unsigned long long *v6;  // [bp-0x38]\n
    unsigned long v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned long long *v9;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v10;  // [bp-0x18], Other Possible Types: unsigned long long\n
    void* v11;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v13;  // rax\n
\n
    v10 = a0;\n
    v9 = 0;\n
    if ((v10 + 7 & -8) + 16 < v10)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v10 = (v10 + 7 & -8) + 16;\n
    if (v10 < size_class_sizes)\n
        v10 = size_class_sizes;\n
    if (v10 > 4095)\n
    {\n
        v11 = cgc_allocate_large_chunk(v10);\n
        return v11;\n
    }\n
    v4 = cgc_log_base_two(v10);\n
    v8 = v4 - cgc_log_base_two(size_class_sizes);\n
    if (v8 >= 8)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (!v9)\n
            v3 = v8 < 8;\n
        if (!(v3 & 1))\n
            break;\n
        v13 = v8;\n
        v8 = v13 + 1;\n
        v7 = cgc_list_find(&(&freelists)[16 * v13], cgc_find_fit, v10, v8);\n
        if (!v7)\n
            v2 = 0;\n
        else\n
            v2 = -9 + v7;\n
        v6 = v2;\n
        v9 = v6;\n
    }\n
    if (!v9)\n
    {\n
        v9 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v5 = v9;\n
        v1 = &(&freelists)[16 + 16 * v8];\n
        if (!v5)\n
            v0 = 0;\n
        else\n
            v0 = v5 + 1;\n
        cgc_list_remove(v1, v0);\n
    }\n
    cgc_mark_allocated(v9);\n
    if ((*(v9) & -2) > v10)\n
        v9 = cgc_split_chunk(v9, v10);\n
    v11 = cgc_chunk_to_ptr(v9);\n
    return v11;\n
}\n
", "4204775:sub_4028e7": null, "4204784:cgc_allocate_large_chunk": "long long cgc_allocate_large_chunk(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
\n
    if (cgc_allocate(a0, v3, v4))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    *(v0) = a0;\n
    cgc_mark_allocated(v0);\n
    v1 = cgc_chunk_to_ptr(v0);\n
    return v1;\n
}\n
", "4204876:sub_40294c": null, "4204880:cgc_log_base_two": "long long cgc_log_base_two(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc], Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 = v1 >> 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204936:sub_402988": null, "4204944:cgc_list_find": "long long cgc_list_find(struct struct_0 **a0, struct struct_0 **a1, unsigned long long a2)\n
{\n
    struct struct_0 **v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x20]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v0 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v1(v0, a2))\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 = *(v0);\n
    }\n
}\n
", "4205061:sub_402a05": null, "4205072:cgc_find_fit": "long long cgc_find_fit(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned long long *v1;  // [bp-0x38]\n
    unsigned long long *v2;  // [bp-0x28]\n
\n
    if (!a0)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a0;\n
    v1 = v0;\n
    v2 = v1;\n
    return a1 <= (*(v2) & -2);\n
}\n
", "4205188:sub_402a84": null, "4205200:cgc_grow_heap": "long long cgc_grow_heap()\n
{\n
    unsigned long long *v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    *(v0) = 0x1000;\n
    cgc_mark_free(v0);\n
    v1 = v0;\n
    return v1;\n
}\n
", "4205284:sub_402ae4": null, "4205296:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long cgc_list_remove(unsigned long long a0[2], struct_0 *a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    if (!a1)\n
        return v1;\n
    if (!a1->field_8)\n
        a0[0] = a1->field_0;\n
    else\n
        a1->field_8->field_0 = a1->field_0;\n
    if (a1->field_0)\n
    {\n
        v1 = a1->field_0;\n
        *((v1 + 8)) = a1->field_8;\n
        return a1->field_0;\n
    }\n
    a0[1] = a1->field_8;\n
    return a0;\n
}\n
", "4205432:sub_402b78": null, "4205440:cgc_mark_allocated": "long long cgc_mark_allocated(unsigned long long *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x10]\n
    unsigned long long *v2;  // rax\n
\n
    v0 = a0;\n
    v2 = a0;\n
    *(v2) = *(v2) | 1;\n
    *((-8 + v0 + (*(a0) & -2))) = *(v0);\n
    return a0;\n
}\n
", "4205491:sub_402bb3": null, "4205504:cgc_split_chunk": "extern unsigned long long size_class_sizes;\n
\n
long long cgc_split_chunk(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    unsigned long long *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0 + a1;\n
    v0 = *(a0) & -2;\n
    if ((*(a0) & -2) <= a1 + size_class_sizes)\n
    {\n
        v2 = a0;\n
        return v2;\n
    }\n
    *(a0) = a1;\n
    cgc_mark_allocated(a0);\n
    *(v1) = v0 - a1;\n
    cgc_mark_allocated(v1);\n
    cgc_free(cgc_chunk_to_ptr(v1));\n
    v2 = a0;\n
    return v2;\n
}\n
", "4205670:sub_402c66": null, "4205680:cgc_chunk_to_ptr": "long long cgc_chunk_to_ptr(unsigned long a0)\n
{\n
    return a0 + 8;\n
}\n
", "4205703:sub_402c87": null, "4205712:cgc_free": "extern char freelists;\n
extern unsigned int size_class_sizes;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned long long *v2;  // [bp-0x18], Other Possible Types: unsigned int *\n
    unsigned long long *v4;  // rax, Other Possible Types: unsigned long\n
\n
    v4 = cgc_ptr_to_chunk(a0);\n
    v2 = v4;\n
    if (!a0)\n
        return v4;\n
    cgc_mark_free(v2);\n
    v2 = cgc_coalesce(v2);\n
    v0 = cgc_log_base_two(*(&v2) & -2);\n
    v1 = v0 - cgc_log_base_two(*(&size_class_sizes));\n
    if (v1 >= 8)\n
        v1 = 7;\n
    v4 = cgc_list_insert_in_order(&(&freelists)[16 * v1], v2 + 2, cgc_size_cmp);\n
    return v4;\n
}\n
", "4205883:sub_402d3b": null, "4205888:cgc_ptr_to_chunk": "long long cgc_ptr_to_chunk(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
\n
    if (!a0)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4205965:sub_402d8d": null, "4205968:cgc_mark_free": "long long cgc_mark_free(unsigned long long *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x10]\n
    unsigned long long *v2;  // rax\n
\n
    v0 = a0;\n
    v2 = a0;\n
    *(v2) = *(v2) & -2;\n
    *((-8 + v0 + (*(a0) & -2))) = *(v0);\n
    return a0;\n
}\n
", "4206019:sub_402dc3": null, "4206032:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
    unsigned long long field_0;\n
} struct_0;\n
\n
extern char freelists;\n
extern unsigned int size_class_sizes;\n
\n
long long cgc_coalesce(struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x68], Other Possible Types: unsigned long\n
    unsigned long long v1[2];  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x54]\n
    void* v3;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long long v4[2];  // [bp-0x48]\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned long long *v6;  // [bp-0x38]\n
    unsigned long long *v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int *v9;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int *v10;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long *v11;  // [bp-0x10], Other Possible Types: unsigned long, struct_0 *\n
\n
    v11 = a0;\n
    v10 = 0;\n
    v9 = 0;\n
    if ((v11 & 4095))\n
        v9 = v11 + -(v11->field_0 & -2);\n
    if (((v11 + (v11->field_-8 & -2)) & 4095))\n
        v10 = v11 + (v11->field_-8 & -2);\n
    if (v9 && !(*(v9) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v9) & -2);\n
        v8 = v5 - cgc_log_base_two(*(&size_class_sizes));\n
        if (v8 < 8)\n
        {\n
            v7 = v9;\n
            v4[0] = &(&freelists)[16 * v8];\n
            if (!v7)\n
                v3 = 0;\n
            else\n
                v3 = v7 + 1;\n
            cgc_list_remove(v4, v3);\n
            *(v9) = (v11->field_-8 & -2) + (*(v9) & -2);\n
            cgc_mark_free(v9);\n
            v11 = v9;\n
        }\n
    }\n
    if (!v10)\n
    {\n
        return v11;\n
    }\n
    else if ((*(v10) & 1))\n
    {\n
        return v11;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v10) & -2);\n
        v8 = v2 - cgc_log_base_two(*(&size_class_sizes));\n
        if (v8 >= 8)\n
            return v11;\n
        v6 = v10;\n
        v1[0] = &(&freelists)[16 * v8];\n
        if (!v6)\n
            v0 = 0;\n
        else\n
            v0 = v6 + 1;\n
        cgc_list_remove(v1, v0);\n
        *(v11) = (*(v11) & -2) + (*(v10) & -2);\n
        cgc_mark_free(v11);\n
    }\n
}\n
", "4206620:sub_40301c": null, "4206624:cgc_list_insert_in_order": "long long cgc_list_insert_in_order(struct struct_0 **a0, unsigned long long a1, struct struct_0 **a2)\n
{\n
    struct struct_0 **v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x20]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = a2;\n
    v0 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v3 = cgc_list_push_back(a0, a1);\n
            return v3;\n
        }\n
        else if (v1(a1, v0) < 0)\n
        {\n
            v0 = *(v0);\n
        }\n
        else\n
        {\n
            v3 = cgc_list_insert_before(a0, v0, a1);\n
            return v3;\n
        }\n
    }\n
}\n
", "4206751:sub_40309f": null, "4206752:cgc_size_cmp": "long long cgc_size_cmp(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long long *v1;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x48]\n
    unsigned long long *v3;  // [bp-0x38]\n
    unsigned long long *v4;  // [bp-0x30]\n
    unsigned long long *v5;  // [bp-0x20]\n
\n
    if (!a0)\n
        v1 = 0;\n
    else\n
        v1 = -9 + a0;\n
    v4 = v1;\n
    v5 = v4;\n
    if (!a1)\n
        v0 = 0;\n
    else\n
        v0 = -9 + a1;\n
    v2 = v0;\n
    v3 = v2;\n
    return (*(v3) & -2) - (*(v5) & -2);\n
}\n
", "4206933:sub_403155": null, "4206944:cgc_calloc": "long long cgc_calloc(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
\n
    v0 = cgc_malloc(a0);\n
    if (v0)\n
    {\n
        cgc_memset(v0, 0, a0);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4207005:sub_40319d": null, "4207008:cgc_realloc": "long long cgc_realloc(unsigned long a0, unsigned int a1)\n
{\n
    unsigned long v0;  // [bp-0x48], Other Possible Types: unsigned long long\n
    unsigned long long v1;  // [bp-0x40]\n
    unsigned long long v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x10]\n
\n
    if (!a0)\n
    {\n
        v5 = cgc_malloc(a1);\n
        return v5;\n
    }\n
    v4 = (*(cgc_ptr_to_chunk(a0)) & -2) - 16;\n
    if (a1 == v4)\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
    v3 = cgc_malloc(a1);\n
    v1 = v3;\n
    v2 = a0;\n
    if (a1 >= v4)\n
        v0 = v4;\n
    else\n
        *(&v0) = a1;\n
    cgc_memcpy(v1, v2, v0);\n
    cgc_free(a0);\n
    v5 = v3;\n
    return v5;\n
}\n
", "4207212:sub_40326c": null, "4207216:cgc_list_insert_before": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_list_insert_before(struct_3 *a0, struct_0 *a1, unsigned long long a2[2])\n
{\n
    struct_3 *v1;  // rax, Other Possible Types: unsigned long, struct_0 *\n
\n
    if (!a2)\n
        return v1;\n
    a2[1] = 0;\n
    a2[0] = 0;\n
    if (!a0->field_0 && !a0->field_8)\n
    {\n
        a0->field_8 = &a2[0];\n
        a0->field_0 = &a2[0];\n
        return a0;\n
    }\n
    if (!a1)\n
    {\n
        a2[1] = a0->field_8;\n
        a0->field_8->field_0 = a2;\n
        a2[0] = 0;\n
        v1 = a0;\n
        a0->field_8 = &a2[0];\n
    }\n
    else if (a1 == a0->field_0)\n
    {\n
        a2[0] = a0->field_0;\n
        a0->field_0->field_8 = a2;\n
        a2[1] = 0;\n
        v1 = a0;\n
        a0->field_0 = &a2[0];\n
    }\n
    else\n
    {\n
        a2[1] = a1->field_8;\n
        a2[0] = a1;\n
        a1->field_8->field_0 = a2;\n
        v1 = a1;\n
        a1->field_8 = &a2[0];\n
    }\n
    return v1;\n
}\n
", "4207534:sub_4033ae": null, "4207536:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_list_push_back(struct_0 *a0, unsigned long long a1)\n
{\n
    return cgc_list_insert_after(a0, a0->field_8, a1);\n
}\n
", "4207579:sub_4033db": null, "4207584:cgc_list_insert_after": "long long cgc_list_insert_after(void* *a0, void* *a1, unsigned long long a2[2])\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    if (a1)\n
    {\n
        v1 = cgc_list_insert_before(a0, *(a1), a2);\n
        return v1;\n
    }\n
    v1 = cgc_list_insert_before(a0, *(a0), a2);\n
    return v1;\n
}\n
", "4207666:sub_403432": null, "4207680:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    if (!a2)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a2 > v1)\n
            v0 = v1[a0] == v1[a1];\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    if (a2 == v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*((a0 + v1)) <= *((a1 + v1)))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4207899:sub_40351b": null, "4207904:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long long v4;  // rax\n
\n
    v2 = a2;\n
    v1 = a0;\n
    v0 = a1;\n
    while (true)\n
    {\n
        v4 = v2;\n
        v2 = v4 - 1;\n
        if (!v4)\n
            break;\n
        *(v1) = *(v0);\n
        v1 += 1;\n
        v0 += 1;\n
    }\n
    return a0;\n
}\n
", "4208008:sub_403588": null, "4208016:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
\n
    v1 = a2;\n
    for (v0 = a0; v1 > 0; v1 -= 1)\n
    {\n
        *(v0) = a1;\n
        v0 += 1;\n
    }\n
    return a0;\n
}\n
", "4208096:cgc_read_all": "long long cgc_read_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v4 = a0;\n
    v3 = a2;\n
    v2 = a1;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v3)\n
            return v1;\n
        if (cgc_receive(a0, a1, a2, v6))\n
            break;\n
        if (!v0)\n
            break;\n
        v1 = v0 + v1;\n
        v3 -= v0;\n
    }\n
    return v1;\n
}\n
", "4208241:sub_403671": null, "4208256:cgc_recv_all": "long long cgc_recv_all(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_read_all(0, a0, a1);\n
}\n
", "4208293:sub_4036a5": null, "4208304:cgc_send": "long long cgc_send(unsigned long long a0, unsigned long long a1)\n
{\n
    if (cgc_sendall(1, a0, a1))\n
    {\n
        cgc__terminate(1);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4208365:sub_4036ed": null, "4208368:cgc_sendall": "long long cgc_sendall(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    void* v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v4 = -6;\n
        return v4;\n
    }\n
    if (!a2)\n
    {\n
        v4 = -6;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v0 = cgc_transmit(a0, a1, a2, v6);\n
            if (v0)\n
            {\n
                v4 = -6;\n
                return v4;\n
            }\n
            v2 = v1 + v2;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4208554:sub_4037aa": null, "4208560:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    for (v0 = 0; *(v1); v1 += 1)\n
    {\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4208627:sub_4037f3": null, "4208640:cgc_strncmp": "long long cgc_strncmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    if (!a2)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a2 > v1)\n
        {\n
            v0 = 0;\n
            if (v1[a0])\n
            {\n
                v0 = 0;\n
                if (v1[a1])\n
                    v0 = v1[a0] == v1[a1];\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    if (a2 == v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*((a0 + v1)) <= *((a1 + v1)))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4208913:sub_403911": null, "4208928:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4209101:sub_4039cd": null, "4209104:cgc_vsnprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern char g_407004;\n
\n
long long cgc_vsnprintf(unsigned long a0, unsigned long a1, char *a2, struct_1 *a3)\n
{\n
    struct struct_0 **v0;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xc0]\n
    unsigned int v2;  // [bp-0xb4]\n
    struct struct_0 **v3;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0xa8]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int *v6;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x90]\n
    unsigned int v8;  // [bp-0x88]\n
    unsigned int v9;  // [bp-0x84]\n
    unsigned int v10;  // [bp-0x80]\n
    unsigned int v11;  // [bp-0x7c]\n
    char v12;  // [bp-0x78]\n
    struct_0 *v13;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v14;  // [bp-0x49]\n
    void* v15;  // [bp-0x48], Other Possible Types: unsigned long, unsigned long long\n
    char v16;  // [bp-0x39]\n
    char *v17;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v18;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0x28]\n
    char *v20;  // [bp-0x20]\n
    char *v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_1 *v24;  // rcx\n
    unsigned long long v25;  // rdx\n
    struct struct_0 **v26;  // rax\n
    struct_1 *v27;  // rcx\n
    struct struct_0 **v28;  // rdx\n
    struct_1 *v29;  // rcx\n
    unsigned long long v30;  // rdx\n
    unsigned int *v31;  // rax\n
    struct_1 *v32;  // rcx\n
    unsigned int *v33;  // rdx\n
    struct_1 *v34;  // rcx\n
    unsigned long long v35;  // rdx\n
    struct struct_0 **v36;  // rax\n
    struct_1 *v37;  // rcx\n
    struct struct_0 **v38;  // rdx\n
\n
    v20 = a2;\n
    v19 = a3;\n
    v18 = 0;\n
    v17 = v20;\n
    if (!v17)\n
        v17 = &g_407004;\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!*(v17))\n
                {\n
                    if (a1 <= 0)\n
                        return v18;\n
                    if (v18 < a1)\n
                        *((a0 + v18)) = 0;\n
                    else\n
                        *((a0 + a1 - 1)) = 0;\n
                    return v18;\n
                }\n
                if (*(v17) != 126)\n
                {\n
                    if (v18 < a1)\n
                    {\n
                        v22 = v17;\n
                        v17 = v22 + 1;\n
                        v23 = v18;\n
                        v18 = v23 + 1;\n
                        *((a0 + v23)) = *(v22);\n
                    }\n
                    else\n
                    {\n
                        v18 += 1;\n
                        v17 += 1;\n
                    }\n
LABEL_403a88:\n
                    continue;\n
                }\n
                v16 = 0;\n
                v15 = 0;\n
                v14 = 0;\n
                v13 = 0;\n
                v11 = 0;\n
                v10 = 0;\n
                v17 += 1;\n
            } while (!*(v17));\n
            v16 = *(v17);\n
            v9 = v16;\n
            if (v9 == 99)\n
            {\n
                v4 = v19;\n
                v5 = v4->field_0;\n
                if (v5 <= 40)\n
                {\n
                    v24 = v4;\n
                    v25 = v5;\n
                    v26 = v25 + v24->field_10;\n
                    v24->field_0 = v25 + 8;\n
                    v3 = v26;\n
                }\n
                else\n
                {\n
                    v27 = v4;\n
                    v28 = v27->field_8;\n
                    v27->field_8 = &v28[1];\n
                    v3 = v28;\n
                }\n
                v13 = *(v3);\n
                if (v13)\n
                    v15 = cgc_strlen(v13);\n
                else\n
                    v15 = 0;\n
            }\n
            else if (v9 == 110)\n
            {\n
                v7 = v19;\n
                v8 = v7->field_0;\n
                if (v8 <= 40)\n
                {\n
                    v29 = v7;\n
                    v30 = v8;\n
                    v31 = v30 + v29->field_10;\n
                    v29->field_0 = v30 + 8;\n
                    v6 = v31;\n
                }\n
                else\n
                {\n
                    v32 = v7;\n
                    v33 = v32->field_8;\n
                    v32->field_8 = &v33[2];\n
                    v6 = v33;\n
                }\n
                v11 = *(v6);\n
                cgc_int2str(&v12, 32, v11);\n
                v13 = &v12;\n
                v15 = cgc_strlen(v13);\n
            }\n
            else if (v9 == 111)\n
            {\n
                v1 = v19;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v37 = v1;\n
                    v38 = v37->field_8;\n
                    v37->field_8 = &v38[1];\n
                    v0 = v38;\n
                }\n
                else\n
                {\n
                    v34 = v1;\n
                    v35 = v2;\n
                    v36 = v35 + v34->field_10;\n
                    v34->field_0 = v35 + 8;\n
                    v0 = v36;\n
                }\n
                v14 = *(v0);\n
                if (!v13)\n
                    v15 = 0;\n
                else\n
                    v15 = 1;\n
            }\n
            v17 += 1;\n
            v10 = a1 - v18;\n
            if (0 <= v10)\n
                break;\n
            v18 = v15 + v18;\n
        }\n
        if (v16 != 110 && !(v16 == 99))\n
            goto LABEL_403d72;\n
        if (v15 <= v10)\n
        {\n
            cgc_memcpy(a0 + v18, v13, v15);\n
            v18 = v15 + v18;\n
        }\n
        else\n
        {\n
            cgc_memcpy(a0 + v18, v13, v10);\n
            v18 = v10 + v18;\n
        }\n
LABEL_403d72:\n
        if (v16 == 111 && v15 <= v10)\n
        {\n
            *((a0 + v18)) = v14;\n
            v18 = v15 + v18;\n
        }\n
        goto LABEL_403a88;\n
    }\n
}\n
", "4210186:sub_403e0a": null, "4210192:cgc_snprintf": "long long cgc_snprintf(unsigned int a0, unsigned int a1, char *a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    int v4;  // [bp-0xc8]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    unsigned int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x44]\n
    unsigned long v14;  // [bp-0x40]\n
    unsigned long v15;  // [bp-0x38]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp+0x8]\n
    char v18;  // al\n
    int v19;  // xmm0\n
    int v20;  // xmm1\n
    int v21;  // xmm2\n
    int v22;  // xmm3\n
    int v23;  // xmm4\n
    int v24;  // xmm5\n
    int v25;  // xmm6\n
    int v26;  // xmm7\n
    unsigned long v27;  // r9\n
\n
    if (v18)\n
    {\n
        v4 = v19;\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
    }\n
    v3 = v27;\n
    v2 = a4;\n
    v1 = a3;\n
    v15 = &v0;\n
    v14 = &v17;\n
    v13 = 48;\n
    v12 = 24;\n
    v16 = cgc_vsnprintf(a0, a1, a2, &v12);\n
    return v16;\n
}\n
", "4210357:sub_403eb5": null, "4210368:cgc_session_append": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_8[46];\n
    struct struct_0 *field_36;\n
} struct_0;\n
\n
long long cgc_session_append(struct_0 *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v2 = a0->field_0;\n
    v1 = a0->field_0;\n
    v0 = cgc_calloc(62);\n
    if (!v0)\n
        cgc__terminate(62);\n
    cgc_memcpy(v0, a1, 46);\n
    if (!v2)\n
    {\n
        a0->field_0 = &v0;\n
        return a0;\n
    }\n
    for (; v2; v2 = *((v2 + 54)))\n
    {\n
        v1 = v2;\n
    }\n
    *((v1 + 54)) = v0;\n
    return v1;\n
}\n
", "4210553:sub_403f79": null, "4210560:cgc_session_remove": "typedef struct struct_0 {\n
    char padding_0[54];\n
    struct struct_0 *field_36;\n
} struct_0;\n
\n
long long cgc_session_remove(struct struct_0 **a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    v0 = *(a0);\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_memcmp(a1, v1, 12))\n
            break;\n
        v0 = v1;\n
        v1 = *((v1 + 54));\n
    }\n
    if (v1 != v0)\n
        *((v0 + 54)) = *((v1 + 54));\n
    else\n
        *(a0) = *((v1 + 54));\n
    v2 = v1;\n
    return v2;\n
}\n
", "4210746:sub_40403a": null, "4210752:cgc_session_get_by_username": "typedef struct struct_0 {\n
    char padding_0[54];\n
    struct struct_0 *field_36;\n
} struct_0;\n
\n
long long cgc_session_get_by_username(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!v0)\n
            return v1;\n
        if (!cgc_memcmp(a1 + 12, &v0->padding_0[12], 12))\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 = *(&(&v0->padding_0)[1]);\n
    }\n
}\n
", "4210874:sub_4040ba": null, "4210880:cgc_get_new_audit_record": "long long cgc_get_new_audit_record()\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = cgc_calloc(24);\n
    if (!v0)\n
    {\n
        cgc__terminate(24);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4210939:sub_4040fb": null, "4210944:cgc_add_auditrecord_to_audit_list": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
extern struct_0 *cgc_audit_list;\n
\n
long long cgc_add_auditrecord_to_audit_list(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = cgc_audit_list;\n
    if (!v1)\n
    {\n
        cgc_audit_list = a0;\n
        return a0;\n
    }\n
    for (v0 = cgc_audit_list; v1; v1 = *((v1 + 16)))\n
    {\n
        v0 = v1;\n
    }\n
    *((v0 + 16)) = a0;\n
    return v0;\n
}\n
", "4211058:sub_404172": null, "4211072:cgc_is_taxpayer_scheduled_for_audit": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
extern struct_0 *cgc_audit_list;\n
\n
long long cgc_is_taxpayer_scheduled_for_audit(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = cgc_audit_list;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (a0 == v0->field_0)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        v0 = v0->field_10;\n
    }\n
}\n
", "4211161:sub_4041d9": null, "4211168:cgc_find_three_tax_years_for_audit": "typedef struct struct_0 {\n
    char padding_0[672];\n
    unsigned long long field_2a0;\n
} struct_0;\n
\n
long long cgc_find_three_tax_years_for_audit(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned long long *v1;  // [bp-0x20]\n
    unsigned long long *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    v0 = cgc_taxpayer_count_submitted_tax_years(a0);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = cgc_get_new_audit_record();\n
    *(v1) = a0;\n
    cgc_tenfourd_get_last_three_from_list(a0->field_2a0, v0, v1 + 1, a0);\n
    v2 = v1;\n
    return v2;\n
}\n
", "4211296:cgc_we_have_a_winner": "extern unsigned long long tp_list;\n
\n
long long cgc_we_have_a_winner(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v3 = cgc_taxpayer_get_by_username(tp_list, a0);\n
    if (v3 && !cgc_is_taxpayer_scheduled_for_audit(v3))\n
    {\n
        v0 = cgc_find_three_tax_years_for_audit(v3);\n
        if (!v0)\n
        {\n
            cgc_memcpy(a1 + 12, \"LUCKY DAY!\", 10);\n
        }\n
        else\n
        {\n
            *(v0) = v3;\n
            cgc_add_auditrecord_to_audit_list(v0);\n
            cgc_memcpy(a1 + 12, \"YOU WON A NEW AUDIT!\", 20);\n
            cgc_memcpy(a1 - -32, v0 + 1, 6);\n
        }\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_memcpy(a1 + 12, \"AUDIT_FAIL\", 10);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4211574:sub_404376": null, "4211584:cgc_recv_cmd_data": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned short field_2c;\n
    unsigned long long field_2e;\n
} struct_0;\n
\n
long long cgc_recv_cmd_data(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a1 != a0->field_2c)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    if (0 < a1)\n
    {\n
        *(&(&a0->field_2c)[1]) = cgc_calloc(a1);\n
        if (!*(&(&a0->field_2c)[1]))\n
            cgc__terminate(a0);\n
        if (a1 != cgc_recv_all(*(&(&a0->field_2c)[1]), a1))\n
            cgc__terminate(a0);\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211778:sub_404442": null, "4211792:cgc_session_auth": "extern void* s_list;\n
\n
long long cgc_session_auth(unsigned int a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a1;\n
    *(&v0) = cgc_session_get_by_username(s_list, a0);\n
    if (*(&v0) && !cgc_memcmp(a0, *(&v0), 12) && !cgc_memcmp(a0 + 24, *(&v0) + 24, 12))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4211941:sub_4044e5": null, "4211952:cgc_response_set_key": "long long cgc_response_set_key(char *a0, char *a1)\n
{\n
    return cgc_memcpy(a1, a0, 12);\n
}\n
", "4211992:sub_404518": null, "4212000:cgc_get_refund": "extern unsigned long long tp_list;\n
\n
long long cgc_get_refund(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0xc0]\n
    char v1;  // [bp-0xb8]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned long long v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = 0;\n
    memset(&v1, 0, 128);\n
    v0 = 113;\n
    v3 = cgc_taxpayer_get_by_username(tp_list, a0);\n
    if (v3)\n
    {\n
        v2 = cgc_taxpayer_get_refund(v3, a0, &v1, &v0);\n
        if (!v2 && v0 < 113)\n
        {\n
            cgc_memcpy(a1 + 12, \"GET_REFUND_OK\", 13);\n
            cgc_memcpy(a1 - -25, &v1, v0);\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
    cgc_memcpy(a1 + 12, \"GET_REFUND_FAIL\", 15);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4212264:sub_404628": null, "4212272:cgc_pay_taxes": "extern unsigned long long tp_list;\n
\n
long long cgc_pay_taxes(void* a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0xc0]\n
    char v1;  // [bp-0xb8]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned long long v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = 0;\n
    memset(&v1, 0, 128);\n
    v0 = 114;\n
    v2 = cgc_recv_cmd_data(a0, 4);\n
    if (!v2)\n
    {\n
        v3 = cgc_taxpayer_get_by_username(tp_list, a0);\n
        if (v3)\n
        {\n
            v2 = cgc_taxpayer_pay_taxes(v3, a0, &v1, &v0);\n
            if (!v2 && v0 < 114)\n
            {\n
                cgc_memcpy(a1 + 12, \"PAY_TAXES_OK\", 12);\n
                cgc_memcpy(a1 - -24, &v1, v0);\n
                v4 = 0;\n
                return v4;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a1 + 12, \"PAY_TAXES_FAIL\", 14);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4212569:sub_404759": null, "4212576:cgc_copy_yr_list_into_answer": "long long cgc_copy_yr_list_into_answer(unsigned long a0, char *a1, unsigned int a2)\n
{\n
    cgc_memcpy(a0 + 12, \"TAXES_SUBMITTED_OK\", 18);\n
    return cgc_memcpy(a0 - -30, a1, a2);\n
}\n
", "4212656:cgc_taxes_submitted": "extern unsigned long long tp_list;\n
\n
long long cgc_taxes_submitted(void* a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0xc0]\n
    char v1;  // [bp-0xb8]\n
    struct struct_0 **v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned long long v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v3 = 0;\n
    v2 = &cgc_copy_yr_list_into_answer;\n
    memset(&v1, 0, 128);\n
    v0 = 0;\n
    v3 = cgc_recv_cmd_data(a0, 4);\n
    if (!v3)\n
    {\n
        v4 = cgc_taxpayer_get_by_username(tp_list, a0);\n
        if (v4)\n
        {\n
            v3 = cgc_taxpayer_list_submitted_tax_years(v4, a0, &v1, &v0);\n
            if (!v3)\n
            {\n
                v2(a1, &v1, v0);\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a1 + 12, \"TAXES_SUBMITTED_FAIL\", 21);\n
    v5 = -1;\n
    return v5;\n
}\n
", "4212914:sub_4048b2": null, "4212928:cgc_taxes_due": "extern unsigned long long tp_list;\n
\n
long long cgc_taxes_due(void* a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    v1 = cgc_recv_cmd_data(a0, 4);\n
    if (!v1)\n
    {\n
        v2 = cgc_taxpayer_get_by_username(tp_list, a0);\n
        if (v2)\n
        {\n
            v1 = cgc_taxpayer_sum_taxes_due(v2, a0, &v0);\n
            if (!v1)\n
            {\n
                cgc_memcpy(a1 + 12, \"TAXES_DUE_OK\", 12);\n
                cgc_memcpy(a1 - -24, &v0, 4);\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a1 + 12, \"TAXES_DUE_FAIL\", 14);\n
    cgc_memcpy(a1 - -26, &v0, 4);\n
    v3 = -1;\n
    return v3;\n
}\n
", "4213197:sub_4049cd": null, "4213200:cgc_upload_form": "extern unsigned long long tp_list;\n
\n
long long cgc_upload_form(void* a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = 747;\n
    v1 = cgc_recv_cmd_data(a0, v0);\n
    if (!v1)\n
    {\n
        v2 = cgc_taxpayer_get_by_username(tp_list, a0);\n
        if (v2)\n
        {\n
            v1 = cgc_taxpayer_add_tenfourdee(v2, a0, v0);\n
            if (!v1)\n
            {\n
                cgc_memcpy(a1 + 12, \"UPLOAD_OK\", 9);\n
                v3 = 0;\n
                return v3;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a1 + 12, \"UPLOAD_FAIL\", 11);\n
    v3 = -1;\n
    return v3;\n
}\n
", "4213409:sub_404aa1": null, "4213424:cgc_login": "extern void* s_list;\n
extern unsigned long long tp_list;\n
\n
long long cgc_login(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = cgc_taxpayer_get_by_username(tp_list, a0);\n
    if (v1 && !cgc_taxpayer_compare_creds(v1, a0))\n
    {\n
        *(&v0) = cgc_session_get_by_username(s_list, a0);\n
        if (*(&v0) && !(0 == cgc_memcmp(a0, *(&v0), 12)))\n
            goto LABEL_404b76;\n
        cgc_session_append(&s_list, a0);\n
        cgc_memcpy(a1 + 12, \"LOGIN_OK\", 8);\n
        v2 = 0;\n
        return v2;\n
    }\n
LABEL_404b76:\n
    cgc_memcpy(a1 + 12, \"LOGIN_FAIL\", 10);\n
    v2 = -1;\n
    return v2;\n
}\n
", "4213663:sub_404b9f": null, "4213664:cgc_logout": "typedef struct struct_0 {\n
    char padding_0[46];\n
    unsigned long long field_2e;\n
} struct_0;\n
\n
extern struct_0 *s_list;\n
\n
long long cgc_logout(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
\n
    v0 = cgc_session_remove(&s_list, a0);\n
    if (v0)\n
    {\n
        if (*(&(&v0->padding_0)[1]))\n
            cgc_free(*(&(&v0->padding_0)[1]));\n
        cgc_free(v0);\n
    }\n
    cgc_memcpy(a1 + 12, \"LOGOUT_OK\", 9);\n
    return 0;\n
}\n
", "4213783:sub_404c17": null, "4213792:cgc_create_account": "extern unsigned long long tp_list;\n
\n
long long cgc_create_account(void* a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned long v1;  // [bp-0x20]\n
\n
    v0 = 0;\n
    v0 = cgc_recv_cmd_data(a0, 648);\n
    if (v0)\n
        return v0;\n
    v1 = cgc_taxpayer_get_by_username(tp_list, a0);\n
    if (v1)\n
    {\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        cgc_taxpayer_new(a0, a1, &tp_list);\n
        v0 = 0;\n
    }\n
    return v0;\n
}\n
", "4213928:sub_404ca8": null, "4213936:main": "extern unsigned int cgc_CREATE_ACCOUNT;\n
extern char cgc_ERR;\n
extern unsigned int cgc_GET_REFUND;\n
extern unsigned int cgc_LOGIN;\n
extern unsigned int cgc_LOGOUT;\n
extern char cgc_OK;\n
extern unsigned int cgc_PAY_TAXES;\n
extern unsigned int cgc_TAXES_DUE;\n
extern unsigned int cgc_TAXES_SUBMITTED;\n
extern unsigned int cgc_TRIGGER_AUDIT;\n
extern unsigned int cgc_TRIGGER_AUDIT2;\n
extern unsigned int cgc_UPLOAD_FORM;\n
\n
int main(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x100]\n
    char v1;  // [bp-0xf4]\n
    char v2;  // [bp-0x74]\n
    char v3;  // [bp-0x68]\n
    char v4;  // [bp-0x44]\n
    char v5;  // [bp-0x3a]\n
    void* v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned long v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned long v12;  // rsi\n
\n
    v10 = 0;\n
    v9 = a0;\n
    v8 = v12;\n
    v7 = 0;\n
    v6 = 0;\n
    while (true)\n
    {\n
        memset(&v3, 0, 62);\n
        if (cgc_recv_all(&v3, 46) != 46)\n
            cgc__terminate(a0);\n
        v7 = cgc_session_auth(&v3, &v0);\n
        if (v7)\n
        {\n
            a0 = &cgc_LOGIN;\n
            if (!cgc_memcmp(&cgc_LOGIN, &v4, 8))\n
            {\n
                v7 = cgc_login(&v3, &v0);\n
            }\n
            else\n
            {\n
                a0 = &cgc_CREATE_ACCOUNT;\n
                if (cgc_memcmp(&cgc_CREATE_ACCOUNT, &v4, 8))\n
                {\n
                    cgc_memcpy(&v1, \"NICE_TRY\", 8);\n
                    v7 = -1;\n
                }\n
                else\n
                {\n
                    v7 = cgc_create_account(&v3, &v0);\n
                }\n
            }\n
        }\n
        else\n
        {\n
            a0 = &cgc_LOGOUT;\n
            if (!cgc_memcmp(&cgc_LOGOUT, &v4, 8))\n
            {\n
                v7 = cgc_logout(&v3, &v0);\n
            }\n
            else\n
            {\n
                a0 = &cgc_UPLOAD_FORM;\n
                if (!cgc_memcmp(&cgc_UPLOAD_FORM, &v4, 8))\n
                {\n
                    v7 = cgc_upload_form(&v3, &v0);\n
                }\n
                else\n
                {\n
                    a0 = &cgc_TAXES_DUE;\n
                    if (!cgc_memcmp(&cgc_TAXES_DUE, &v4, 8))\n
                    {\n
                        v7 = cgc_taxes_due(&v3, &v0);\n
                    }\n
                    else\n
                    {\n
                        a0 = &cgc_TAXES_SUBMITTED;\n
                        if (!cgc_memcmp(&cgc_TAXES_SUBMITTED, &v4, 8))\n
                        {\n
                            v7 = cgc_taxes_submitted(&v3, &v0);\n
                        }\n
                        else\n
                        {\n
                            a0 = &cgc_PAY_TAXES;\n
                            if (!cgc_memcmp(&cgc_PAY_TAXES, &v4, 8))\n
                            {\n
                                v7 = cgc_pay_taxes(&v3, &v0);\n
                            }\n
                            else\n
                            {\n
                                a0 = &cgc_GET_REFUND;\n
                                if (!cgc_memcmp(&cgc_GET_REFUND, &v4, 8))\n
                                {\n
                                    v7 = cgc_get_refund(&v3, &v0);\n
                                }\n
                                else\n
                                {\n
                                    a0 = &cgc_TRIGGER_AUDIT;\n
                                    if (!cgc_memcmp(&cgc_TRIGGER_AUDIT, &v4, 8))\n
                                    {\n
                                        v7 = cgc_we_have_a_winner(&v3, &v0);\n
                                    }\n
                                    else\n
                                    {\n
                                        a0 = &cgc_TRIGGER_AUDIT2;\n
                                        if (!cgc_memcmp(&cgc_TRIGGER_AUDIT2, &v4, 8))\n
                                        {\n
                                            v7 = cgc_we_have_a_winner(&v3, &v0);\n
                                        }\n
                                        else\n
                                        {\n
                                            cgc_memcpy(&v1, \"NICE_TRY\", 8);\n
                                            v7 = -1;\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        if (0 > v7)\n
        {\n
            cgc_memcpy(&v2, &cgc_ERR, 8);\n
        }\n
        else\n
        {\n
            cgc_memcpy(&v2, &cgc_OK, 8);\n
            cgc_response_set_key(&v3, &v0);\n
        }\n
        cgc_send(&v0, 148);\n
        if (*(&v5))\n
            cgc_free(*(&v5));\n
    }\n
}\n
", "4214935:sub_405097": null, "4214944:cgc_taxpayer_append": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_8[672];\n
    unsigned long long field_2a8;\n
} struct_0;\n
\n
long long cgc_taxpayer_append(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = a0->field_0;\n
    v0 = a0->field_0;\n
    if (!v1)\n
    {\n
        a0->field_0 = a1;\n
        return a0;\n
    }\n
    while (true)\n
    {\n
        v0 = v1;\n
        v1 = v1->field_2a8;\n
    }\n
}\n
", "4215068:sub_40511c": null, "4215072:cgc_taxpayer_new": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[45];\n
    char *field_2e;\n
} struct_0;\n
\n
long long cgc_taxpayer_new(struct_0 *a0, unsigned long a1, void* a2)\n
{\n
    char v0;  // [bp-0x31]\n
    unsigned long v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28]\n
\n
    v2 = 0x4347c000;\n
    v1 = cgc_calloc(688);\n
    if (!v1)\n
        cgc__terminate(688);\n
    cgc_memcpy(v1, *(&(&a0->padding_1)[1]), 648);\n
    cgc_memcpy(v1 + 648, &a0->padding_1[11], 12);\n
    for (v0 = 0; v0 < 12; v0 += 1)\n
    {\n
        *((v1 + v0 + 660)) = (&a0->field_0)[v0] ^ v2[(&a0->field_0)[v0]];\n
    }\n
    cgc_memcpy(a1 + 12, v1 + 660, 12);\n
    return cgc_taxpayer_append(a2, v1);\n
}\n
", "4215327:sub_40521f": null, "4215328:cgc_taxpayer_get_by_username": "typedef struct struct_0 {\n
    char padding_0[680];\n
    struct struct_0 *field_2a8;\n
} struct_0;\n
\n
long long cgc_taxpayer_get_by_username(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!v0)\n
            return v1;\n
        if (!cgc_memcmp(a1 + 12, &v0->padding_0[648], 12))\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 = v0->field_2a8;\n
    }\n
}\n
", "4215456:cgc_taxpayer_compare_creds": "long long cgc_taxpayer_compare_creds(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_memcmp(a0 + 648, a1 + 12, 12) && !cgc_memcmp(a0 + 660, a1 + 24, 12))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4215586:sub_405322": null, "4215600:cgc_taxpayer_add_tenfourdee": "long long cgc_taxpayer_add_tenfourdee(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = cgc_tenfourd_ingest(a1, a2);\n
    if (!v1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v0 = cgc_tenfourd_validate(v1, a0);\n
    if (v0)\n
    {\n
        cgc_free(v1);\n
        v2 = -1;\n
        return v2;\n
    }\n
    cgc_tenfourd_append(a0 + 672, v1);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4215745:sub_4053c1": null, "4215760:cgc_tenfourd_ingest": "typedef struct struct_0 {\n
    char padding_0[46];\n
    char *field_2e;\n
} struct_0;\n
\n
long long cgc_tenfourd_ingest(struct_0 *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x20]\n
\n
    v0 = cgc_calloc(759);\n
    if (!v0)\n
        cgc__terminate(759);\n
    cgc_memcpy(v0, *(&(&a0->padding_0)[1]), a1);\n
    return v0;\n
}\n
", "4215848:sub_405428": null, "4215856:cgc_tenfourd_validate": "typedef struct struct_1 {\n
    char padding_0[644];\n
    unsigned int field_284;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
    char padding_4[1];\n
    char field_5;\n
    char padding_6[124];\n
    char field_82;\n
    char field_83;\n
    char padding_84[2];\n
    char field_86;\n
    char padding_87[124];\n
    char field_103;\n
    char field_104;\n
    char padding_105[2];\n
    char field_107;\n
    char padding_108[123];\n
    char field_183;\n
    char field_184;\n
    char padding_185[3];\n
    char field_188;\n
    char padding_189[121];\n
    char field_202;\n
    char field_203;\n
    char field_204;\n
    char field_205;\n
    char padding_206[124];\n
    unsigned int field_282;\n
    char field_286;\n
    unsigned int field_287;\n
    unsigned int field_28b;\n
    unsigned int field_28f;\n
    unsigned int field_293;\n
    unsigned int field_297;\n
    unsigned int field_29b;\n
    unsigned int field_29f;\n
    unsigned int field_2a3;\n
    unsigned int field_2a7;\n
    unsigned int field_2ab;\n
    unsigned int field_2af;\n
    unsigned int field_2b3;\n
    unsigned int field_2b7;\n
    unsigned int field_2bb;\n
    unsigned int field_2bf;\n
    char padding_2c3[32];\n
    unsigned int field_2e3;\n
    unsigned int field_2e7;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char field_4;\n
    char field_5;\n
    char field_6;\n
    char field_7;\n
} struct_0;\n
\n
long long cgc_tenfourd_validate(struct_2 *a0, struct_1 *a1)\n
{\n
    unsigned long v0;  // [bp-0xc0]\n
    unsigned long long v1;  // [bp-0xb8]\n
    unsigned long long v2;  // [bp-0xb0]\n
    unsigned long long v3;  // [bp-0xa8]\n
    unsigned long long v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x95]\n
    unsigned int v6;  // [bp-0x94]\n
    struct_0 *v7;  // [bp-0x90]\n
    void* v8;  // [bp-0x88], Other Possible Types: unsigned long\n
    struct_0 *v9;  // [bp-0x80]\n
    void* v10;  // [bp-0x78], Other Possible Types: unsigned long\n
    struct_0 *v11;  // [bp-0x70]\n
    void* v12;  // [bp-0x68], Other Possible Types: unsigned long\n
    struct_0 *v13;  // [bp-0x60]\n
    void* v14;  // [bp-0x58], Other Possible Types: unsigned long\n
    void* v15;  // [bp-0x50], Other Possible Types: unsigned long\n
    struct_3 *v16;  // [bp-0x48]\n
    unsigned int v17;  // [bp-0x40]\n
    unsigned int v18;  // [bp-0x3c]\n
    char v19;  // [bp-0x38]\n
    char v20;  // [bp-0x37]\n
    char v21;  // [bp-0x36]\n
    char v22;  // [bp-0x35]\n
    char v23;  // [bp-0x34]\n
    char v24;  // [bp-0x33]\n
    char v25;  // [bp-0x32]\n
    char v26;  // [bp-0x31]\n
    char v27;  // [bp-0x30]\n
    char v28;  // [bp-0x2f]\n
    char v29;  // [bp-0x2e]\n
    char v30;  // [bp-0x2d]\n
    char v31;  // [bp-0x2c]\n
    char v32;  // [bp-0x2b]\n
    char v33;  // [bp-0x2a]\n
    char v34;  // [bp-0x29]\n
    char v35;  // [bp-0x28]\n
    char v36;  // [bp-0x27]\n
    char v37;  // [bp-0x26]\n
    char v38;  // [bp-0x25]\n
    char v39;  // [bp-0x24]\n
    char v40;  // [bp-0x23]\n
    char v41;  // [bp-0x22]\n
    char v42;  // [bp-0x21]\n
    unsigned int v43;  // [bp-0xc]\n
\n
    memset(&v19, 0, 24);\n
    v18 = 0;\n
    if (cgc_taxpayer_get_tenfourd_by_taxyear(a1, a0->field_0))\n
    {\n
        v18 = -1;\n
        goto LABEL_405c20;\n
    }\n
    if (!cgc_memcmp(a1, &a0->field_2, 128) && !cgc_memcmp(&a1->padding_0[128], &a0->field_82, 128) && !cgc_memcmp(&a1->padding_0[0x100], &a0->padding_87[123], 128) && !cgc_memcmp(&a1->padding_0[384], &a0->padding_108[122], 128) && !cgc_memcmp(&a1->padding_0[0x200], &a0->field_202, 128) && a1->field_284 == *(&(&a0->padding_206)[1]))\n
    {\n
        v17 = a1->field_284;\n
        v16 = &v17;\n
        v19 = v16->field_0 ^ a0->field_2;\n
        v20 = v16->field_1 ^ a0->field_82;\n
        v21 = v16->field_2 ^ a0->field_103;\n
        v22 = v16->field_3 ^ a0->field_183;\n
        v23 = a0->field_202 ^ a0->field_3;\n
        v24 = a0->field_203 ^ a0->field_83;\n
        v25 = a0->field_204 ^ a0->field_104;\n
        v26 = a0->field_205 ^ a0->field_184;\n
        v15 = 0;\n
        if (*(&a0->field_282 + 2) == 78 && *((&a0->field_282 + 3)))\n
        {\n
            v18 = -3;\n
            goto LABEL_405c20;\n
        }\n
        if (*(&a0->field_282 + 2) != 89)\n
        {\n
LABEL_405701:\n
            v15 = *((&a0->field_282 + 3));\n
            v14 = 0;\n
            v13 = &v14;\n
            v14 = *((&a0->field_287 + 3)) + v14;\n
            v14 = *((&a0->field_28b + 3)) + v14;\n
            v14 = *((&a0->field_28f + 3)) + v14;\n
            v14 = *((&a0->field_293 + 3)) + v14;\n
            v23 ^= v13->field_0;\n
            v24 ^= v13->field_1;\n
            v25 ^= v13->field_2;\n
            v26 ^= v13->field_3;\n
            v27 = v13->field_4;\n
            v28 = v13->field_5;\n
            v29 = v13->field_6;\n
            v30 = v13->field_7;\n
            v12 = 0;\n
            v11 = &v12;\n
            v12 = *((&a0->field_297 + 3)) + v12;\n
            v12 = *((&a0->field_29b + 3)) + v12;\n
            v12 = *((&a0->field_29f + 3)) + v12;\n
            v27 ^= v11->field_0;\n
            v28 ^= v11->field_1;\n
            v29 ^= v11->field_2;\n
            v30 ^= v11->field_3;\n
            v31 = v11->field_4;\n
            v32 = v11->field_5;\n
            v33 = v11->field_6;\n
            v34 = v11->field_7;\n
            v10 = 0;\n
            v9 = &v10;\n
            v10 = *((&a0->field_2a3 + 3)) + v10;\n
            v10 = *((&a0->field_2a7 + 3)) + v10;\n
            v10 = *((&a0->field_2ab + 3)) + v10;\n
            v10 = *((&a0->field_2af + 3)) + v10;\n
            v31 ^= v9->field_0;\n
            v32 ^= v9->field_1;\n
            v33 ^= v9->field_2;\n
            v34 ^= v9->field_3;\n
            v35 = v9->field_4;\n
            v36 = v9->field_5;\n
            v37 = v9->field_6;\n
            v38 = v9->field_7;\n
            v8 = 0;\n
            v7 = &v8;\n
            v8 = *((&a0->field_2b3 + 3)) + v8;\n
            v8 = *((&a0->field_2b7 + 3)) + v8;\n
            v35 ^= v7->field_0;\n
            v36 ^= v7->field_1;\n
            v37 ^= v7->field_2;\n
            v38 ^= v7->field_3;\n
            v39 = v7->field_4 ^ a0->field_5;\n
            v40 = v7->field_5 ^ a0->field_86;\n
            v41 = v7->field_6 ^ a0->field_107;\n
            v42 = v7->field_7 ^ a0->field_188;\n
            if (cgc_memcmp(&v19, &a0->field_2bb + 3, 24))\n
            {\n
                v18 = -5;\n
                goto LABEL_405c20;\n
            }\n
            v6 = 0;\n
            for (v5 = 0; v5 < 8; v5 += 1)\n
            {\n
                v6 = a0->padding_2c3[19 + v5] + v6;\n
            }\n
            if (!v6)\n
            {\n
                v18 = -6;\n
                goto LABEL_405c20;\n
            }\n
            if (*(&a0->padding_2c3[27]) && *(&a0->padding_2c3[31]))\n
            {\n
                v18 = -7;\n
                goto LABEL_405c20;\n
            }\n
            v4 = 12345;\n
            v3 = v14 >> 3;\n
            v2 = v12 >> 4;\n
            v1 = v10 >> 2;\n
            v0 = v4 + v15 + v3 - v2 - v1 - v8;\n
            if (0 < v0 && *(&a0->padding_2c3[27]) != v0)\n
            {\n
                v18 = -8;\n
                goto LABEL_405c20;\n
            }\n
            if (0 > v0 && *(&a0->padding_2c3[31]) != !(v0))\n
            {\n
                v18 = -9;\n
                goto LABEL_405c20;\n
            }\n
            if (!v0 && *(&a0->padding_2c3[27]) && *(&a0->padding_2c3[31]))\n
            {\n
                v18 = -10;\n
LABEL_405c20:\n
                v43 = v18;\n
                return v43;\n
            }\n
            v43 = 0;\n
            return v43;\n
        }\n
        if (*((&a0->field_282 + 3)) && *(&(&a0->field_286)[3]) && !(5 <= *(&(&a0->field_286)[3])))\n
            goto LABEL_405701;\n
        v18 = -0x4;\n
        goto LABEL_405c20;\n
    }\n
    v18 = -2;\n
    goto LABEL_405c20;\n
}\n
", "4217906:sub_405c32": null, "4217920:cgc_tenfourd_append": "long long cgc_tenfourd_append(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
\n
    v1 = *(a0);\n
    v0 = *(a0);\n
    if (!v1)\n
    {\n
        *(a0) = a1;\n
        return a0;\n
    }\n
    while (true)\n
    {\n
        v0 = v1;\n
        v1 = *((v1 + 751));\n
    }\n
}\n
", "4218044:sub_405cbc": null, "4218048:cgc_taxpayer_get_tenfourd_by_taxyear": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
long long cgc_taxpayer_get_tenfourd_by_taxyear(struct_1 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0->field_2a0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (a1 != *(v0))\n
        {\n
            v0 = *((v0 + 751));\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4218156:sub_405d2c": null, "4218160:cgc_taxpayer_sum_taxes_due": "typedef struct struct_0 {\n
    char padding_0[46];\n
    struct struct_1 *field_2e;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[672];\n
    struct struct_2 *field_2a0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
    char padding_2[737];\n
    unsigned int field_2e3;\n
    unsigned int field_2e7;\n
    unsigned int field_2eb;\n
    struct struct_2 *field_2ef;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
} struct_1;\n
\n
long long cgc_taxpayer_sum_taxes_due(struct_3 *a0, struct_0 *a1, unsigned int *a2)\n
{\n
    struct_2 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned short v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int *v4;  // rax\n
    unsigned int *v5;  // rax\n
\n
    *(&v1) = *(&(&a1->padding_0)[1]);\n
    if (v1[1] < v1[0])\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    for (v0 = a0->field_2a0; v0; v0 = *((&v0->field_2eb + 3)))\n
    {\n
        if (v1[0] <= v0->field_0 && v0->field_0 <= v1[1])\n
        {\n
            if (!*(&(&v0->padding_2)[1]))\n
            {\n
                v4 = a2;\n
                *(v4) = *(v4) - (*((&v0->field_2e3 + 3)) - *((&v0->field_2e7 + 3)));\n
            }\n
            else\n
            {\n
                v5 = a2;\n
                *(v5) = *(&(&v0->padding_2)[1]) - *((&v0->field_2e7 + 3)) + *(v5);\n
            }\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4218413:sub_405e2d": null, "4218416:cgc_taxpayer_list_submitted_tax_years": "typedef struct struct_2 {\n
    char padding_0[46];\n
    struct struct_3 *field_2e;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
} struct_3;\n
\n
long long cgc_taxpayer_list_submitted_tax_years(struct_1 *a0, struct_2 *a1, unsigned short *a2, unsigned long long *a3)\n
{\n
    void* v0;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned short *v1;  // [bp-0x48]\n
    struct_0 *v2;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned short v3[2];  // [bp-0x38]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned short *v6;  // rax\n
\n
    *(&v3) = *(&(&a1->padding_0)[1]);\n
    if (v3[1] < v3[0])\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = a0->field_2a0;\n
    v1 = a2;\n
    for (v0 = 0; v2; v2 = *(&(&v2->padding_2)[1]))\n
    {\n
        if (v3[0] <= *(v2) && *(v2) <= v3[1])\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            *(v6) = *(v2);\n
            v0 += 2;\n
        }\n
    }\n
    *(a3) = v0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4218651:sub_405f1b": null, "4218656:cgc_taxpayer_count_submitted_tax_years": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[751];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
long long cgc_taxpayer_count_submitted_tax_years(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a0->field_2a0;\n
    for (v0 = 0; v1; v1 = *((v1 + 751)))\n
    {\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4218732:sub_405f6c": null, "4218736:cgc_taxpayer_get_refund": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[741];\n
    unsigned int field_2e7;\n
    unsigned int field_2eb;\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
long long cgc_taxpayer_get_refund(struct_1 *a0, unsigned long a1, unsigned short *a2, unsigned long long *a3)\n
{\n
    char v0;  // [bp-0x59]\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x54]\n
    void* v3;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x48]\n
    unsigned short *v5;  // [bp-0x40]\n
    struct_0 *v6;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0xc]\n
    struct_0 *v10;  // rax\n
    unsigned short *v11;  // rax\n
\n
    v7 = a1;\n
    v6 = a0->field_2a0;\n
    v5 = a2;\n
    v4 = *(a3) - 4;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v5 += 1;\n
    v5 += 1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v6)\n
            v0 = v3 < v4 - 2;\n
        if (!(v0 & 1))\n
            break;\n
        if (*((v6 + 743)) && *((v6 + 747)) < *((v6 + 743)))\n
        {\n
            v2 = *((v6 + 743)) - *((v6 + 747));\n
            v10 = v6;\n
            *((&v10->field_2e7 + 3)) = v2 + *((&v10->field_2e7 + 3));\n
            v1 = v2 + v1;\n
            v11 = v5;\n
            v5 = v11 + 1;\n
            *(v11) = *(v6);\n
            v3 += 2;\n
        }\n
        v6 = *((&v6->field_2eb + 3));\n
    }\n
    if (!v1)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    *(&a2) = v1;\n
    *(a3) = v3 + 4;\n
    v8 = 0;\n
    return v8;\n
}\n
", "4219105:sub_4060e1": null, "4219120:cgc_taxpayer_pay_taxes": "typedef struct struct_1 {\n
    char padding_0[46];\n
    struct struct_2 *field_2e;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[737];\n
    unsigned int field_2e3;\n
    char padding_2e7[4];\n
    unsigned int field_2eb;\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc_taxpayer_pay_taxes(struct_3 *a0, struct_1 *a1, unsigned short *a2, unsigned long long *a3)\n
{\n
    char v0;  // [bp-0x5d]\n
    unsigned int v1;  // [bp-0x5c]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x50]\n
    unsigned short *v4;  // [bp-0x48]\n
    struct_0 *v5;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0xc]\n
    struct_0 *v9;  // rax\n
    unsigned short *v10;  // rax\n
\n
    v6 = *(*(&(&a1->padding_0)[1]));\n
    if (!v6)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    v5 = a0->field_2a0;\n
    v4 = a2;\n
    v3 = *(a3);\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v5)\n
            v0 = (v2 < v3 & 0 < v6);\n
        if (!(v0 & 1))\n
            break;\n
        if (*((v5 + 739)) && *((v5 + 747)) < *((v5 + 739)))\n
        {\n
            v1 = *((v5 + 739)) - *((v5 + 747));\n
            if (v1 > v6)\n
                v1 = v6;\n
            v9 = v5;\n
            *(&v9->padding_2e7[3]) = v1 + *(&v9->padding_2e7[3]);\n
            v6 -= v1;\n
            v10 = v4;\n
            v4 = v10 + 1;\n
            *(v10) = *(v5);\n
            v2 += 2;\n
        }\n
        v5 = *((v5 + 751));\n
    }\n
    if (!v1)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    *(a3) = v2;\n
    v7 = 0;\n
    return v7;\n
}\n
", "4219517:sub_40627d": null, "4219520:cgc_tenfourd_get_last_three_from_list": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
long long cgc_tenfourd_get_last_three_from_list(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x2c]\n
    struct_0 *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned short *v4;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    for (v0 = a1; 3 < v0; v0 -= 1)\n
    {\n
        v2 = *((v2 + 751));\n
    }\n
    for (; v1 < v0; v2 = *((v2 + 751)))\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        *((a2 + v4 * 2)) = *(v2);\n
    }\n
    return v1;\n
}\n
", "4219668:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:memset": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}