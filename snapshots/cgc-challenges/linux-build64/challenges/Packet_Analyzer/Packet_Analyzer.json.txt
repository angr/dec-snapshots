{"4202496:_init": "extern struct_0 *g_407230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407230;\n
    if (g_407230)\n
        v1 = g_407230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407250;\n
    goto *(4223576);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4223552);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_407238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1);\n
    return v0 - a0;\n
}\n
", "4202942:sub_4021be": null, "4202944:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    for (v0 = a1; v0 > 0; v0 -= 1)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 0;\n
    }\n
    return v0 - 1;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    int tmp_24;  // tmp #24\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    for (v0 = a2; v0 > 0; v0 -= 1)\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        tmp_24 = *(v4);\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        *(v5) = tmp_24;\n
    }\n
    return v0 - 1;\n
}\n
", "4203088:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; *(v3); v3 += 1)\n
    {\n
        if (*(v3) == 45 && !v1)\n
        {\n
            v2 = 1;\n
            continue;\n
        }\n
        if (*(v3) < 48)\n
        {\n
LABEL_4022e6:\n
            v4 = v0;\n
            return v4;\n
        }\n
        if (!(*(v3) <= 57))\n
            goto LABEL_4022e6;\n
        v0 = v0 * 10 + *(v3) - 48;\n
        v1 += 1;\n
        v3 += 1;\n
        if (v1 > 10)\n
        {\n
            v4 = v0;\n
            return v4;\n
        }\n
    }\n
    if (v2)\n
    {\n
        v4 = v0 * -1;\n
        return v4;\n
    }\n
    v4 = v0;\n
    return v4;\n
}\n
", "4203351:sub_402357": null, "4203360:cgc_count_strings": "long long cgc_count_strings(char a0[2])\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v2) = a0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (!*(v2))\n
            v0 = *((v2 + 1));\n
        if (!(v0 & 1))\n
            break;\n
        if (!*((v2 + 1)))\n
            v1 += 1;\n
        v2 += 1;\n
    }\n
    return v1;\n
}\n
", "4203477:sub_4023d5": null, "4203488:cgc_next_string": "long long cgc_next_string(char *a0)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1);\n
    v0 += 1;\n
    if (!*(v0))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4203592:sub_402448": null, "4203600:cgc_FailAndTerminate": "long long cgc_FailAndTerminate(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
    unsigned long long v4;  // r8\n
    unsigned long long v5;  // r9\n
\n
    cgc_TransmitFormattedBytes(\"+s\\n
\", a0);\n
    cgc__terminate(\"+s\\n
\");\n
    return cgc_TransmitFormattedBytes(\"+s\\n
\", v1, v2, v3, v4, v5);\n
}\n
", "4203648:cgc_TransmitFormattedBytes": "long long cgc_TransmitFormattedBytes(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    unsigned long v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    return cgc_vTransmitFormattedBytes(a0, &v14);\n
}\n
", "4203799:sub_402517": null, "4203808:cgc_ReceiveBytes": "long long cgc_ReceiveBytes(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    for (v2 = a1; v2 > 0; v3 = *(&v1) + v3)\n
    {\n
        v0 = cgc_receive(a0, a1, v5, v6);\n
        if (v0)\n
            cgc_FailAndTerminate(\"failed during receive\");\n
        if (!*(&v1))\n
            cgc_FailAndTerminate(\"zero bytes received\");\n
        v2 -= *(&v1);\n
    }\n
    return v3;\n
}\n
", "4203940:sub_4025a4": null, "4203952:cgc_itoh": "long long cgc_itoh(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0xa]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = a0;\n
    if (a1 == 1)\n
        v1 >>= 4;\n
    v0 = (v1 & 15) - 10;\n
    switch (v0)\n
    {\n
    case 0:\n
        v2 = 65;\n
        return v2;\n
    case 1:\n
        v2 = 66;\n
        return v2;\n
    case 2:\n
        v2 = 67;\n
        return v2;\n
    case 3:\n
        v2 = 68;\n
        return v2;\n
    case 4:\n
        v2 = 69;\n
        return v2;\n
    case 5:\n
        v2 = 70;\n
        return v2;\n
    default:\n
        v2 = (v1 & 15) + 48;\n
        return v2;\n
    }\n
}\n
", "4204103:sub_402647": null, "4204112:cgc_HexDump": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_HexDump(char *a0, unsigned long a1)\n
{\n
    int tmp_18;  // tmp #18\n
    int tmp_17;  // tmp #17\n
    struct_0 *v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned int v2;  // [bp-0x60]\n
    unsigned int v3;  // [bp-0x5c]\n
    char v4;  // [bp-0x58]\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rax\n
\n
    for (v3 = 0; v3 < a1; v3 += v2)\n
    {\n
        cgc_bzero(&v4, 50);\n
        v1 = 0;\n
        for (v2 = 0; v2 < 16; v2 += 1)\n
        {\n
            if (v3 + v2 >= a1)\n
                break;\n
            tmp_18 = cgc_itoh(a0[v2 + v3], 1);\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            (&v4)[v6] = tmp_18;\n
            tmp_17 = cgc_itoh(a0[v2 + v3], 0);\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            (&v4)[v7] = tmp_17;\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            (&v4)[v8] = 32;\n
        }\n
        (&v4)[v1] = 10;\n
        v0 = &v4;\n
        cgc_TransmitBytes(v0, cgc_strlen(&v4));\n
    }\n
    return v3;\n
}\n
", "4204389:sub_402765": null, "4204400:cgc_TransmitBytes": "long long cgc_TransmitBytes(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    for (v2 = a1; v2 > 0; v2 -= *(&v1))\n
    {\n
        v0 = cgc_transmit(a0, a1, v5, v6);\n
        if (v0)\n
            cgc__terminate(a0);\n
        v3 = *(&v1) + v3;\n
    }\n
    return v2;\n
}\n
", "4204510:sub_4027de": null, "4204512:cgc_vTransmitFormattedBytes": "typedef struct struct_3 {\n
    char field_0;\n
    struct struct_1 *field_1;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_vTransmitFormattedBytes(struct_3 *a0, struct_0 *a1)\n
{\n
    int tmp_10;  // tmp #10\n
    unsigned long v0;  // [bp-0x100]\n
    unsigned int *v1;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0xf0]\n
    unsigned int v3;  // [bp-0xe4]\n
    unsigned long long v4;  // [bp-0xe0]\n
    unsigned long long *v5;  // [bp-0xd8], Other Possible Types: unsigned long\n
    struct_0 *v6;  // [bp-0xd0]\n
    unsigned int v7;  // [bp-0xc4]\n
    struct_2 *v8;  // [bp-0xc0]\n
    unsigned int *v9;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_0 *v10;  // [bp-0xb0]\n
    unsigned int v11;  // [bp-0xa4]\n
    struct_2 *v12;  // [bp-0xa0]\n
    unsigned int *v13;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_0 *v14;  // [bp-0x90]\n
    unsigned int v15;  // [bp-0x88]\n
    unsigned int v16;  // [bp-0x84]\n
    char v17;  // [bp-0x7d]\n
    unsigned int v18;  // [bp-0x7c]\n
    unsigned int *v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x6c]\n
    char v21;  // [bp-0x67]\n
    char v22;  // [bp-0x66]\n
    char v23;  // [bp-0x5d]\n
    unsigned int v24;  // [bp-0x5c]\n
    char *v25;  // [bp-0x58]\n
    unsigned int v26;  // [bp-0x50]\n
    unsigned int v27;  // [bp-0x4c]\n
    unsigned int v28;  // [bp-0x48]\n
    char v29;  // [bp-0x43]\n
    unsigned int v30;  // [bp-0x38]\n
    unsigned int v31;  // [bp-0x34]\n
    unsigned int v32;  // [bp-0x30]\n
    char v33;  // [bp-0x2b]\n
    struct_3 *v34;  // [bp-0x20]\n
    struct_3 *v35;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v37;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v38;  // rcx\n
    unsigned long long v39;  // rdx\n
    unsigned int *v40;  // rax\n
    struct_0 *v41;  // rcx\n
    unsigned int *v42;  // rdx\n
    unsigned long long v43;  // rax\n
    struct_0 *v44;  // rcx\n
    unsigned long long v45;  // rdx\n
    unsigned long long *v46;  // rax\n
    struct_0 *v47;  // rcx\n
    unsigned long long *v48;  // rdx\n
    struct_0 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned int *v51;  // rax\n
    struct_0 *v52;  // rcx\n
    unsigned int *v53;  // rdx\n
    struct_0 *v54;  // rcx\n
    unsigned long long v55;  // rdx\n
    unsigned int *v56;  // rax\n
    struct_0 *v57;  // rcx\n
    unsigned int *v58;  // rdx\n
    struct_2 *v59;  // rax\n
    unsigned int v60;  // eax\n
    unsigned long v62;  // rax\n
    struct_2 *v63;  // rax\n
    unsigned long v64;  // rax\n
    unsigned int v65;  // eax\n
\n
    v35 = a0;\n
    if (!v35)\n
        return v37;\n
    while (true)\n
    {\n
        v37 = v35->field_0;\n
        if (!v37)\n
            return v35->field_0;\n
        v34 = v35;\n
        while (true)\n
        {\n
            v17 = 0;\n
            if (*(v35) != 43)\n
                v17 = *(v35);\n
            if (!(v17 & 1))\n
                break;\n
            v35 += 1;\n
        }\n
        cgc_TransmitBytes(v34, v35 - v34);\n
        if (*(v35) == 43)\n
        {\n
            v35 += 1;\n
            v16 = v35->field_0;\n
            if (v16 == 33)\n
            {\n
                v19 = *(&(&v35->field_0)[1]);\n
                v18 = *(&(&v35->field_0)[5]);\n
                *(v19) = v18;\n
            }\n
            else if (v16 == 43)\n
            {\n
                cgc_TransmitBytes(\"+\", 1);\n
            }\n
            else if (v16 == 100)\n
            {\n
                v14 = a1;\n
                v15 = v14->field_0;\n
                if (v15 <= 40)\n
                {\n
                    v38 = v14;\n
                    v39 = v15;\n
                    v40 = v39 + v38->field_10;\n
                    v38->field_0 = v39 + 8;\n
                    v13 = v40;\n
                }\n
                else\n
                {\n
                    v41 = v14;\n
                    v42 = v41->field_8;\n
                    v41->field_8 = &v42[2];\n
                    v13 = v42;\n
                }\n
                v32 = *(v13);\n
                if (v32 < 0)\n
                {\n
                    cgc_TransmitBytes(\"-\", 1);\n
                    v32 = -(v32);\n
                }\n
                v31 = v32;\n
                if (!v32)\n
                {\n
                    v30 = 1;\n
                }\n
                else\n
                {\n
                    for (v30 = 0; v31; v31 = (v60 >> 31 CONCAT v60) /m 10)\n
                    {\n
                        v30 += 1;\n
                        v60 = v31;\n
                    }\n
                }\n
                v31 = v32;\n
                v63 = v30;\n
                v30 = v63 - 1;\n
                for (*((&v33 + v63)) = 0; v30 >= 0; v31 = (v65 >> 31 CONCAT v65) /m 10)\n
                {\n
                    v64 = v30;\n
                    v30 = v64 - 1;\n
                    (&v33)[v64] = ((v31 >> 31 CONCAT v31) /m 10 >> 32) + 48;\n
                    v65 = v31;\n
                }\n
                v12 = &v33;\n
                cgc_TransmitBytes(v12, cgc_strlen(&v33));\n
            }\n
            else if (v16 == 115)\n
            {\n
                v6 = a1;\n
                v7 = v6->field_0;\n
                if (v7 > 40)\n
                {\n
                    v47 = v6;\n
                    v48 = v47->field_8;\n
                    v47->field_8 = &v48[1];\n
                    v5 = v48;\n
                }\n
                else\n
                {\n
                    v44 = v6;\n
                    v45 = v7;\n
                    v46 = v45 + v44->field_10;\n
                    v44->field_0 = v45 + 8;\n
                    v5 = v46;\n
                }\n
                v25 = *(v5);\n
                v4 = v25;\n
                cgc_TransmitBytes(v4, cgc_strlen(v25));\n
            }\n
            else if (v16 == 117)\n
            {\n
                v10 = a1;\n
                v11 = v10->field_0;\n
                if (v11 > 40)\n
                {\n
                    v52 = v10;\n
                    v53 = v52->field_8;\n
                    v52->field_8 = &v53[2];\n
                    v9 = v53;\n
                }\n
                else\n
                {\n
                    v49 = v10;\n
                    v50 = v11;\n
                    v51 = v50 + v49->field_10;\n
                    v49->field_0 = v50 + 8;\n
                    v9 = v51;\n
                }\n
                v28 = *(v9);\n
                v27 = v28;\n
                if (!v28)\n
                {\n
                    v26 = 1;\n
                }\n
                else\n
                {\n
                    for (v26 = 0; v27; v27 = (0 CONCAT v27) /m 10)\n
                    {\n
                        v26 += 1;\n
                    }\n
                }\n
                v27 = v28;\n
                v59 = v26;\n
                v26 = v59 - 1;\n
                for (*((&v29 + v59)) = 0; v26 >= 0; v27 = (0 CONCAT v27) /m 10)\n
                {\n
                    v62 = v26;\n
                    v26 = v62 - 1;\n
                    (&v29)[v62] = ((0 CONCAT v27) /m 10 >> 32) + 48;\n
                }\n
                v8 = &v29;\n
                cgc_TransmitBytes(v8, cgc_strlen(&v29));\n
            }\n
            else\n
            {\n
                v43 = v16;\n
                tmp_10 = v43;\n
                v37 = v43 - 120;\n
                if (tmp_10 != 120)\n
                    return v37;\n
                v2 = a1;\n
                v3 = v2->field_0;\n
                if (v3 > 40)\n
                {\n
                    v57 = v2;\n
                    v58 = v57->field_8;\n
                    v57->field_8 = &v58[2];\n
                    v1 = v58;\n
                }\n
                else\n
                {\n
                    v54 = v2;\n
                    v55 = v3;\n
                    v56 = v55 + v54->field_10;\n
                    v54->field_0 = v55 + 8;\n
                    v1 = v56;\n
                }\n
                v24 = *(v1);\n
                v21 = 48;\n
                v22 = 120;\n
                v23 = 0;\n
                for (v20 = 9; v20 > 1; v20 -= 1)\n
                {\n
                    v0 = (v24 & 15) - 10;\n
                    switch (v0)\n
                    {\n
                    case 0:\n
                        (&v21)[v20] = 65;\n
                        break;\n
                    case 1:\n
                        (&v21)[v20] = 66;\n
                        break;\n
                    case 2:\n
                        (&v21)[v20] = 67;\n
                        break;\n
                    case 3:\n
                        (&v21)[v20] = 68;\n
                        break;\n
                    case 4:\n
                        (&v21)[v20] = 69;\n
                        break;\n
                    case 5:\n
                        (&v21)[v20] = 70;\n
                        break;\n
                    default:\n
                        (&v21)[v20] = (v24 & 15) + 48;\n
                        break;\n
                    }\n
                    v24 >>= 4;\n
                }\n
                cgc_TransmitBytes(&v21, 10);\n
            }\n
            v35 += 1;\n
        }\n
    }\n
}\n
", "4206032:cgc_DisplayFormatted": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_DisplayFormatted(struct_0 *a0, unsigned long a1, void* a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    int v4;  // [bp-0xb8]\n
    int v5;  // [bp-0xa8]\n
    int v6;  // [bp-0x98]\n
    int v7;  // [bp-0x88]\n
    int v8;  // [bp-0x78]\n
    int v9;  // [bp-0x68]\n
    int v10;  // [bp-0x58]\n
    int v11;  // [bp-0x48]\n
    unsigned int v12;  // [bp-0x38]\n
    unsigned int v13;  // [bp-0x34]\n
    unsigned long v14;  // [bp-0x30]\n
    unsigned long v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    char v17;  // al\n
    int v18;  // xmm0\n
    int v19;  // xmm1\n
    int v20;  // xmm2\n
    int v21;  // xmm3\n
    int v22;  // xmm4\n
    int v23;  // xmm5\n
    int v24;  // xmm6\n
    int v25;  // xmm7\n
    unsigned long v26;  // r9\n
\n
    if (v17)\n
    {\n
        v4 = v18;\n
        v5 = v19;\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
    }\n
    v3 = v26;\n
    v2 = a4;\n
    v1 = a3;\n
    if ((a0->field_2 & a1))\n
    {\n
        v15 = &v0;\n
        v14 = &v16;\n
        v13 = 48;\n
        v12 = 24;\n
        cgc_vTransmitFormattedBytes(a2, &v12);\n
        return &v12;\n
    }\n
    return a0->field_2 & a1;\n
}\n
", "4206206:sub_402e7e": null, "4206208:cgc_TransmitOptionHeader": "typedef struct struct_2 {\n
    char padding_0[16];\n
    char field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    char *field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_3;\n
\n
extern char authority_names;\n
extern unsigned long long g_406111;\n
extern unsigned long long g_40613d;\n
extern unsigned long long g_40614a;\n
extern unsigned long long g_406163;\n
extern unsigned long long g_406180;\n
extern unsigned long long g_406192;\n
extern unsigned long long g_4061a9;\n
extern unsigned long long g_4061c1;\n
extern unsigned long long g_4061e1;\n
extern unsigned long long g_406666;\n
\n
int cgc_TransmitOptionHeader()\n
{\n
    struct_2 *v5;  // [bp+0x100000]\n
    unsigned int v20;  // rdx\n
    unsigned int v21;  // rcx\n
    unsigned int v22;  // r8\n
\n
    cgc_TransmitFormattedBytes(\"Capturing Device: +s\\n
\", *(&v5->field_10), v20, v21, v22);\n
    return;\n
}\n
", "4206684:sub_40305c": null, "4206688:cgc_DisplayStatistics": "typedef struct struct_2 {\n
    char padding_0[136];\n
    struct struct_1 *field_88;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    char padding_14[8];\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    char padding_24[4];\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
long long cgc_DisplayStatistics(struct_2 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    cgc_TransmitFormattedBytes(\"Final Statistics:\\n
\", a1, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tTotal Packets: +d\\n
\", a0->field_88->field_0, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tStart Time: +x\\n
\", a0->field_88->field_4, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tEnd Time: +x\\n
\", a0->field_88->field_8, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tLargest Packet: +d\\n
\", a0->field_88->field_c, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tSmallest Packet: +d\\n
\", a0->field_88->field_10, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tNumber of malformed packets: +d\\n
\", a0->field_88->field_20, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"\\tNumber of packets shown +d\\n
\", a0->field_88->field_1c, a2, a3, a4);\n
    cgc_TransmitFormattedBytes(\"Option Headers:\\n
\", a1, a2, a3, a4);\n
    for (v0 = a0->field_88->field_28; v0; v0 = *((v0 + 8)))\n
    {\n
        cgc_TransmitOptionHeader(\"Option Headers:\\n
\");\n
    }\n
    return cgc_TransmitBytes(\"\\n
\", 1);\n
}\n
", "4207002:sub_40319a": null, "4207008:cgc_FilterMatch": "typedef struct struct_1 {\n
    unsigned short field_0;\n
    char padding_2[6];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_FilterMatch(struct_1 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a0->field_0 > a1->field_4)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a1->field_8)\n
    {\n
        v0 = 0;\n
        while (true)\n
        {\n
            if (v0 >= a0->field_0)\n
            {\n
                v1 = 1;\n
                return v1;\n
            }\n
            else if ((*((a1->field_8 + v0)) & *((a0->field_8 + v0))) == (*((a0->field_10 + v0)) & *((a0->field_8 + v0))))\n
            {\n
                v0 += 1;\n
            }\n
            else\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4207226:sub_40327a": null, "4207232:cgc_ProcessAllFilters": "typedef struct struct_1 {\n
    char padding_0[4];\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
long long cgc_ProcessAllFilters(void* a0, struct_1 *a1, unsigned int *a2, unsigned int *a3)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
\n
    v3 = 0;\n
    v2 = 0;\n
    for (v1 = 0; v1 < a1->field_4; v1 += 1)\n
    {\n
        v0 = *(&a1->padding_0[8 * v1 + 8]);\n
        if (cgc_FilterMatch(v0, a0) == 1)\n
        {\n
            if (v0->field_2 == 1)\n
                v3 += 1;\n
            else\n
                v2 += 1;\n
        }\n
    }\n
    *(a2) = v2;\n
    *(a3) = v3;\n
    return a3;\n
}\n
", "4207423:sub_40333f": null, "4207424:cgc_CalculateChecksum": "long long cgc_CalculateChecksum(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
\n
    v1 = 0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v1 = a0[v0] + v1;\n
    }\n
    return v1;\n
}\n
", "4207505:sub_403391": null, "4207520:cgc_AnalyzePhysicalLayer": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned short field_e;\n
    unsigned int field_10;\n
    char padding_14[2];\n
    unsigned int field_16;\n
    unsigned int field_1a;\n
    unsigned int field_1e;\n
    unsigned int field_22;\n
} struct_0;\n
\n
extern unsigned int physical_type_names;\n
extern unsigned int physical_wire_speeds;\n
\n
long long cgc_AnalyzePhysicalLayer(struct_2 *a0, struct_1 *a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned short v2;  // [bp-0x28]\n
    unsigned short v3;  // [bp-0x26]\n
    unsigned int v4;  // [bp-0x24]\n
    struct_1 *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0xc]\n
    struct_1 *v8;  // rax\n
    struct_1 *v9;  // rax\n
    struct_1 *v10;  // rax\n
    struct_1 *v11;  // rax\n
\n
    v5 = a1;\n
    v4 = a1->field_8->field_8;\n
    if (v4 > a1->field_4)\n
    {\n
        cgc_DisplayFormatted(a0, 1, \"Invalid Packet Length: +x (+x)\\n
\", v4, a1->field_4);\n
        v6 = -1;\n
        return v6;\n
    }\n
    else if (v4 >= 14)\n
    {\n
        cgc_DisplayFormatted(a0, 1, \"Physical Length:+d\\n
\", v4, a4);\n
        v3 = a1->field_8->field_c - 1;\n
        if (v3 >= 3)\n
        {\n
            cgc_DisplayFormatted(a0, 1, \"Invalid Physical Type\\n
\", a3, a4);\n
            v6 = -1;\n
            return v6;\n
        }\n
        cgc_DisplayFormatted(a0, 1, \"Physical Type: +s\\n
\", *(&(&physical_type_names)[2 * v3]), a4);\n
        if (v3)\n
        {\n
            if (v3 != 1)\n
            {\n
                if (v3 == 2)\n
                {\n
                    if ((a0->field_2 & 1))\n
                        cgc_HexDump(&v5->field_8->field_c + 2, a1->field_4 - 14);\n
                    v6 = -1;\n
                    return v6;\n
                }\n
                else\n
                {\n
                    cgc_DisplayFormatted(a0, 1, \"Invalid Physical Type\\n
\", v3, a4);\n
                    v6 = -1;\n
                    return v6;\n
                }\n
            }\n
            if (v4 < 42)\n
            {\n
                cgc_DisplayFormatted(a0, 1, \"Packet too short: +d\\n
\", v4, a4);\n
                v6 = -1;\n
                return v6;\n
            }\n
            cgc_DisplayFormatted(a0, 1, \"Source Address: +x\\n
\", *((&a1->field_8->field_c + 2)), a4);\n
            cgc_DisplayFormatted(a0, 1, \"Destination Address: +x\\n
\", *(&(&a1->field_8->field_e)[1]), a4);\n
            cgc_DisplayFormatted(a0, 1, \"Transmit strength: +u\\n
\", *((&a1->field_8->field_10 + 2)), a4);\n
            cgc_DisplayFormatted(a0, 1, \"Receive strength: +u\\n
\", *(&(&a1->field_8->padding_14)[1]), a4);\n
            cgc_DisplayFormatted(a0, 1, \"Frequency: +d\\n
\", *((&a1->field_8->field_16 + 2)), a4);\n
            cgc_DisplayFormatted(a0, 1, \"SNR: +u\\n
\", *((&a1->field_8->field_1a + 2)), a4);\n
            v10 = a1;\n
            v10->field_8 = &v10->field_8->field_22 + 2;\n
            v11 = a1;\n
            v11->field_4 = v11->field_4 - 42;\n
        }\n
        else if (v4 < 20)\n
        {\n
            cgc_DisplayFormatted(a0, 1, \"Packet too short: +d\\n
\", v4, a4);\n
            v6 = -1;\n
            return v6;\n
        }\n
        else\n
        {\n
            v2 = *((&a1->field_8->field_c + 2)) - 1;\n
            if (v2 >= 4)\n
            {\n
                cgc_DisplayFormatted(a0, 1, \"Invalid Wire speed\\n
\", a3, a4);\n
                v6 = -1;\n
                return v6;\n
            }\n
            cgc_DisplayFormatted(a0, 1, \"Wire Speed: +s\\n
\", *(&(&physical_wire_speeds)[2 * v2]), a4);\n
            v1 = *(&a1->field_8->field_e);\n
            v8 = a1;\n
            v8->field_8 = &v8->field_8->field_10;\n
            v9 = a1;\n
            v9->field_4 = v9->field_4 - 20;\n
            if (cgc_CalculateChecksum(a1->field_8, v5->field_4) != v1)\n
            {\n
                v0 = v1;\n
                cgc_DisplayFormatted(a0, 1, \"Invalid Physical Layer Checksum: got +x, expected +x\\n
\", v0, cgc_CalculateChecksum(a1->field_8, v5->field_4));\n
                v6 = -1;\n
                return v6;\n
            }\n
        }\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        cgc_DisplayFormatted(a0, 1, \"Packet too short: +d\\n
\", v4, a4);\n
        v6 = -1;\n
        return v6;\n
    }\n
}\n
", "4208557:sub_4037ad": null, "4208560:cgc_AnalyzeTransportLayer": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned short field_c;\n
    unsigned int field_e;\n
    unsigned int field_12;\n
} struct_0;\n
\n
long long cgc_AnalyzeTransportLayer(void* a0, struct_1 *a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_1 *v3;  // rax\n
    struct_1 *v4;  // rax\n
    struct_1 *v5;  // rax\n
    struct_1 *v6;  // rax\n
\n
    if (a1->field_4 < 4)\n
    {\n
        cgc_DisplayFormatted(a0, 2, \"Transport Layer too short\\n
\", a3, a4);\n
        v1 = -1;\n
        return v1;\n
    }\n
    v0 = a1->field_8->field_0;\n
    if (v0 != 1)\n
    {\n
        if (v0 != 2)\n
        {\n
            cgc_DisplayFormatted(a0, 2, \"Invalid Transport Type\\n
\", a3, a4);\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (a1->field_4 < 8)\n
        {\n
            cgc_DisplayFormatted(a0, 2, \"Transport Layer too short\\n
\", a3, a4);\n
            v1 = -1;\n
            return v1;\n
        }\n
        cgc_DisplayFormatted(a0, 2, \"Transport Type: MESSAGE\\n
\", a3, a4);\n
        cgc_DisplayFormatted(a0, 2, \"Length: +d\\n
\", a1->field_8->field_4, a4);\n
        v3 = a1;\n
        v3->field_8 = &v3->field_8->field_8;\n
        v4 = a1;\n
        v4->field_4 = v4->field_4 - 8;\n
    }\n
    else if (a1->field_4 >= 22)\n
    {\n
        cgc_DisplayFormatted(a0, 2, \"Transport Type: STREAM\\n
\", a3, a4);\n
        cgc_DisplayFormatted(a0, 2, \"Stream number: +u\\n
\", a1->field_8->field_4, a4);\n
        cgc_DisplayFormatted(a0, 2, \"Sequence number: +u\\n
\", a1->field_8->field_8, a4);\n
        cgc_DisplayFormatted(a0, 2, \"Window: +d\\n
\", a1->field_8->field_c, a4);\n
        cgc_DisplayFormatted(a0, 2, \"Acknowledgment: +x\\n
\", *(&(&a1->field_8->field_c)[1]), a4);\n
        cgc_DisplayFormatted(a0, 2, \"Length: +d\\n
\", *((&a1->field_8->field_e + 2)), a4);\n
        v5 = a1;\n
        v5->field_8 = &v5->field_8->field_12 + 2;\n
        v6 = a1;\n
        v6->field_4 = v6->field_4 - 22;\n
    }\n
    else\n
    {\n
        cgc_DisplayFormatted(a0, 2, \"Transport Layer too short\\n
\", a3, a4);\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4209144:sub_4039f8": null, "4209152:cgc_AnalyzeNetworkLayer": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned int field_8;\n
    unsigned int field_a;\n
    char padding_e[2];\n
    unsigned short field_10;\n
    unsigned int field_12;\n
} struct_0;\n
\n
extern unsigned int debug_type_names;\n
\n
long long cgc_AnalyzeNetworkLayer(void* a0, struct_1 *a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned short v0;  // [bp-0x24]\n
    unsigned short v1;  // [bp-0x22]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_1 *v4;  // rax\n
    struct_1 *v5;  // rax\n
    struct_1 *v6;  // rax\n
    struct_1 *v7;  // rax\n
    struct_1 *v8;  // rax\n
    struct_1 *v9;  // rax\n
\n
    if (a1->field_4 < 6)\n
    {\n
        cgc_DisplayFormatted(a0, 4, \"Network layer too short\\n
\", a3, a4);\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = a1->field_8->field_4;\n
    if (v1 == 1)\n
    {\n
        cgc_DisplayFormatted(a0, 4, \"Network type: Endpoint\\n
\", a3, a4);\n
        if (a1->field_4 < 14)\n
        {\n
            cgc_DisplayFormatted(a0, 4, \"Network layer too short\\n
\", a3, a4);\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_DisplayFormatted(a0, 4, \"Source Address: +x\\n
\", *(&a1->field_8->field_6), a4);\n
        cgc_DisplayFormatted(a0, 4, \"Destination Address: +x\\n
\", *((&a1->field_8->field_8 + 2)), a4);\n
        v4 = a1;\n
        v4->field_8 = &v4->field_8->field_a + 2;\n
        v5 = a1;\n
        v5->field_4 = v5->field_4 - 14;\n
    }\n
    else if (v1 != 2)\n
    {\n
        if (v1 != 3)\n
        {\n
            cgc_DisplayFormatted(a0, 4, \"Invalid network type\\n
\", a3, a4);\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_DisplayFormatted(a0, 4, \"Network type: Debug\\n
\", a3, a4);\n
        if (a1->field_4 < 22)\n
        {\n
            cgc_DisplayFormatted(a0, 4, \"Network layer too short\\n
\", a3, a4);\n
            v2 = -1;\n
            return v2;\n
        }\n
        v0 = a1->field_8->field_6 - 1;\n
        if (v0 >= 6)\n
        {\n
            cgc_DisplayFormatted(a0, 4, \"Invalid network debug type\\n
\", a3, a4);\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_DisplayFormatted(a0, 4, \"Network debug type: +s\\n
\", *(&(&debug_type_names)[2 * v0]), a4);\n
        cgc_DisplayFormatted(a0, 4, \"Source Address: +x\\n
\", a1->field_8->field_8, a4);\n
        cgc_DisplayFormatted(a0, 4, \"Destination Address: +x\\n
\", a1->field_8->field_a, a4);\n
        cgc_DisplayFormatted(a0, 4, \"Hop Count: +u\\n
\", a1->field_8->padding_e, a4);\n
        cgc_DisplayFormatted(a0, 4, \"Timestamp: +u\\n
\", *(&a1->field_8->field_10), a4);\n
        v8 = a1;\n
        v8->field_8 = &v8->field_8->field_12 + 2;\n
        v9 = a1;\n
        v9->field_4 = v9->field_4 - 22;\n
    }\n
    else\n
    {\n
        cgc_DisplayFormatted(a0, 4, \"Network type: Broadcast\\n
\", a3, a4);\n
        if (a1->field_4 < 10)\n
        {\n
            cgc_DisplayFormatted(a0, 4, \"Network layer too short\\n
\", a3, a4);\n
            v2 = -1;\n
            return v2;\n
        }\n
        cgc_DisplayFormatted(a0, 4, \"Source Address: +x\\n
\", *(&a1->field_8->field_6), a4);\n
        v6 = a1;\n
        v6->field_8 = &v6->field_8->field_8 + 2;\n
        v7 = a1;\n
        v7->field_4 = v7->field_4 - 10;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4210015:sub_403d5f": null, "4210016:cgc_AnalyzeApplicationLayer": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    char padding_a[2];\n
    unsigned short field_c;\n
} struct_0;\n
\n
long long cgc_AnalyzeApplicationLayer(void* a0, struct_1 *a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x28b]\n
    unsigned short v1;  // [bp-0x28a]\n
    char v2;  // [bp-0x288]\n
    unsigned short v3;  // [bp-0x27a]\n
    char v4;  // [bp-0x278]\n
    unsigned short v5;  // [bp-0x26a]\n
    char v6;  // [bp-0x268]\n
    char v7;  // [bp-0x159]\n
    char v8;  // [bp-0x158]\n
    char v9;  // [bp-0x129]\n
    char v10;  // [bp-0x128]\n
    unsigned short v11;  // [bp-0x28]\n
    unsigned short v12;  // [bp-0x26]\n
    unsigned int v13;  // [bp-0x24]\n
    unsigned int v14;  // [bp-0xc]\n
    struct_1 *v16;  // rax\n
    struct_1 *v17;  // rax\n
    struct_1 *v18;  // rax\n
    unsigned long v19;  // rcx\n
    struct_1 *v20;  // rax\n
    struct_1 *v21;  // rax\n
    unsigned long v22;  // rcx\n
    struct_1 *v23;  // rax\n
    struct_1 *v24;  // rax\n
    struct_1 *v25;  // rax\n
    struct_1 *v26;  // rax\n
    struct_1 *v27;  // rax\n
    unsigned long v28;  // rcx\n
    struct_1 *v29;  // rax\n
    struct_1 *v30;  // rax\n
    unsigned long v31;  // rcx\n
    struct_1 *v32;  // rax\n
    struct_1 *v33;  // rax\n
    unsigned long v34;  // rcx\n
    struct_1 *v35;  // rax\n
    struct_1 *v36;  // rax\n
    struct_1 *v37;  // rax\n
    unsigned long v38;  // rcx\n
    struct_1 *v39;  // rax\n
    struct_1 *v40;  // rax\n
    struct_1 *v41;  // rax\n
    unsigned long v42;  // rcx\n
    struct_1 *v43;  // rax\n
    struct_1 *v44;  // rax\n
    struct_1 *v45;  // rax\n
    struct_1 *v46;  // rax\n
    struct_1 *v47;  // rax\n
    unsigned long v48;  // rcx\n
    struct_1 *v49;  // rax\n
    struct_1 *v50;  // rax\n
    unsigned long v51;  // rcx\n
    struct_1 *v52;  // rax\n
    struct_1 *v53;  // rax\n
    struct_1 *v54;  // rax\n
    struct_1 *v55;  // rax\n
    unsigned long v56;  // rcx\n
\n
    if (a1->field_4 < 6)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", a3, a4);\n
        v14 = -1;\n
        return v14;\n
    }\n
    v13 = *(&a1->field_8->field_0);\n
    v12 = a1->field_8->field_4;\n
    if (v12 == 1)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application type: Audio Stream\\n
\", a3, a4);\n
        if (a1->field_4 < 12)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", a3, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        cgc_DisplayFormatted(a0, 8, \"Encoding type: +u\\n
\", a1->field_8->field_6, a4);\n
        cgc_DisplayFormatted(a0, 8, \"Bit rate: +u\\n
\", *(&a1->field_8->field_8), a4);\n
        v16 = a1;\n
        v16->field_8 = &v16->field_8->field_c;\n
        v17 = a1;\n
        v17->field_4 = v17->field_4 - 12;\n
    }\n
    else if (v12 == 2)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application type: Video Stream\\n
\", a3, a4);\n
        if (a1->field_4 < 14)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", a3, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        cgc_DisplayFormatted(a0, 8, \"X Resolution: +u\\n
\", a1->field_8->field_8, a4);\n
        cgc_DisplayFormatted(a0, 8, \"Y Resolution: +u\\n
\", a1->field_8->padding_a, a4);\n
        cgc_DisplayFormatted(a0, 8, \"Video Option Headers: \\n
\", a3, a4);\n
        v11 = a1->field_8->field_c;\n
        v23 = a1;\n
        v23->field_8 = v23->field_8 + 1;\n
        v24 = a1;\n
        v24->field_4 = v24->field_4 - 14;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v11 > 0)\n
                v0 = a1->field_4;\n
            if (!(v0 & 1))\n
                break;\n
            cgc_bzero(&v10, 0x100);\n
            v9 = a1->field_8->field_0;\n
            v29 = a1;\n
            v29->field_8 = &v29->field_8->padding_1;\n
            v30 = a1;\n
            v30->field_4 = v30->field_4 - 1;\n
            v31 = a1->field_4;\n
            if (v9 > v31)\n
            {\n
                cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v31, a4);\n
                v14 = -1;\n
                return v14;\n
            }\n
            cgc_memcpy(&v10, a1->field_8, v9);\n
            cgc_DisplayFormatted(a0, 8, \"\\t+s\\n
\", &v10, a4);\n
            v32 = a1;\n
            v32->field_8 = &(&v32->field_8->field_0)[v9];\n
            v33 = a1;\n
            v33->field_4 = v33->field_4 - v9;\n
            v11 -= 1;\n
        }\n
    }\n
    else if (v12 == 3)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application type: File\\n
\", a3, a4);\n
        if (a1->field_4 < 70)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", a3, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        cgc_bzero(&v8, 33);\n
        cgc_memcpy(&v8, &a1->field_8->field_6, 32);\n
        cgc_DisplayFormatted(a0, 8, \"Filename: +s\\n
\", &v8, a4);\n
        cgc_memcpy(&v8, &a1->field_8[2].padding_a, 32);\n
        cgc_DisplayFormatted(a0, 8, \"File type: +s\\n
\", &v8, a4);\n
        v35 = a1;\n
        v35->field_8 = v35->field_8 + 5;\n
        v36 = a1;\n
        v36->field_4 = v36->field_4 - 70;\n
    }\n
    else if (v12 == 4)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application type: Email\\n
\", a3, a4);\n
        v18 = a1;\n
        v18->field_8 = &v18->field_8->field_6;\n
        v19 = a1->field_4 - 6;\n
        a1->field_4 = v19;\n
        if (!a1->field_4)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v19, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v7 = a1->field_8->field_0;\n
        v20 = a1;\n
        v20->field_8 = &v20->field_8->padding_1;\n
        v21 = a1;\n
        v21->field_4 = v21->field_4 - 1;\n
        v22 = v7;\n
        if (a1->field_4 < v22)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v22, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        cgc_bzero(&v6, 0x100);\n
        cgc_memcpy(&v6, a1->field_8, v7);\n
        cgc_DisplayFormatted(a0, 8, \"From: +s\\n
\", &v6, a4);\n
        v37 = a1;\n
        v37->field_8 = &(&v37->field_8->field_0)[v7];\n
        v38 = a1->field_4 - v7;\n
        a1->field_4 = v38;\n
        if (!a1->field_4)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v38, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v7 = a1->field_8->field_0;\n
        v39 = a1;\n
        v39->field_8 = &v39->field_8->padding_1;\n
        v40 = a1;\n
        v40->field_4 = v40->field_4 - 1;\n
        cgc_bzero(&v6, 0x100);\n
        cgc_memcpy(&v6, a1->field_8, v7);\n
        cgc_DisplayFormatted(a0, 8, \"To: +s\\n
\", &v6, a4);\n
        v41 = a1;\n
        v41->field_8 = &(&v41->field_8->field_0)[v7];\n
        v42 = a1->field_4 - v7;\n
        a1->field_4 = v42;\n
        if (!a1->field_4)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v42, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v7 = a1->field_8->field_0;\n
        v43 = a1;\n
        v43->field_8 = &v43->field_8->padding_1;\n
        v44 = a1;\n
        v44->field_4 = v44->field_4 - 1;\n
        cgc_bzero(&v6, 0x100);\n
        cgc_memcpy(&v6, a1->field_8, v7);\n
        cgc_DisplayFormatted(a0, 8, \"Subject: +s\\n
\", &v6, a4);\n
        v49 = a1;\n
        v49->field_8 = &(&v49->field_8->field_0)[v7];\n
        v50 = a1;\n
        v50->field_4 = v50->field_4 - v7;\n
    }\n
    else if (v12 != 5)\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Unsupported application type\\n
\", a3, a4);\n
        v14 = -1;\n
        return v14;\n
    }\n
    else\n
    {\n
        cgc_DisplayFormatted(a0, 8, \"Application type: Webpage\\n
\", a3, a4);\n
        if (a1->field_4 < 8)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", a3, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v25 = a1;\n
        v25->field_8 = &v25->field_8->field_6;\n
        v26 = a1;\n
        v26->field_4 = v26->field_4 - 6;\n
        v5 = *(&a1->field_8->field_0);\n
        v27 = a1;\n
        v27->field_8 = &v27->field_8->padding_1[1];\n
        v28 = a1->field_4 - 2;\n
        a1->field_4 = v28;\n
        if (v5 > 0x400)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Invalid url\\n
\", v28, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v34 = a1->field_4;\n
        if (v5 > v34)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v34, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        if (cgc_allocate(a0, 8, \"Application type: Webpage\\n
\"))\n
            cgc__terminate(a0);\n
        cgc_bzero(*(&v4), v5 + 1);\n
        cgc_memcpy(*(&v4), a1->field_8, v5);\n
        cgc_DisplayFormatted(a0, 8, \"URL: +s\\n
\", *(&v4), a4);\n
        v45 = a1;\n
        v45->field_8 = &(&v45->field_8->field_0)[v5];\n
        v46 = a1;\n
        v46->field_4 = v46->field_4 - v5;\n
        cgc_deallocate(a0, 8, \"URL: +s\\n
\", v34);\n
        if (a1->field_4 < 2)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v34, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v3 = *(&a1->field_8->field_0);\n
        v47 = a1;\n
        v47->field_8 = &v47->field_8->padding_1[1];\n
        v48 = a1->field_4 - 2;\n
        a1->field_4 = v48;\n
        if (v3 > 0x400)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Invalid header length\\n
\", v48, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v51 = a1->field_4;\n
        if (v3 > v51)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v51, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        if (cgc_allocate(a0, 8, \"URL: +s\\n
\"))\n
            cgc__terminate(a0);\n
        cgc_bzero(*(&v2), v3 + 1);\n
        cgc_memcpy(*(&v2), a1->field_8, v3);\n
        cgc_DisplayFormatted(a0, 8, \"Headers: +s\\n
\", *(&v2), a4);\n
        v52 = a1;\n
        v52->field_8 = &(&v52->field_8->field_0)[v3];\n
        v53 = a1;\n
        v53->field_4 = v53->field_4 - v3;\n
        cgc_deallocate(a0, 8, \"Headers: +s\\n
\", v51);\n
        if (a1->field_4 < 2)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Application layer too short\\n
\", v51, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
        v1 = *(&a1->field_8->field_0);\n
        v54 = a1;\n
        v54->field_8 = &v54->field_8->padding_1[1];\n
        v55 = a1;\n
        v55->field_4 = v55->field_4 - 2;\n
        v56 = a1->field_4;\n
        if (v1 != v56)\n
        {\n
            cgc_DisplayFormatted(a0, 8, \"Invalid webpage length\\n
\", v56, a4);\n
            v14 = -1;\n
            return v14;\n
        }\n
    }\n
    v14 = 0;\n
    return v14;\n
}\n
", "4213037:sub_40492d": null, "4213040:cgc_AnalyzePacket": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    char *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    char padding_4[132];\n
    struct struct_2 *field_88;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    char padding_18[4];\n
    unsigned int field_1c;\n
} struct_2;\n
\n
long long cgc_AnalyzePacket(struct_1 *a0, struct_0 *a1, unsigned int a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4[8];  // rax\n
    unsigned int v5;  // ecx\n
\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_ProcessAllFilters(a1, a0, &v1, &v0);\n
    if (v1 > 0)\n
    {\n
        cgc_TransmitBytes(\"skip\\n
\", 5);\n
        v2 = -1;\n
        return v2;\n
    }\n
    if (a0->field_88->field_14 > 0 && !v0)\n
    {\n
        cgc_TransmitBytes(\"skip\\n
\", 5);\n
        v2 = -1;\n
        return v2;\n
    }\n
    v4 = a0->field_88;\n
    v5 = v4[7] + 1;\n
    v4[7] = v5;\n
    if (!cgc_AnalyzePhysicalLayer(a0, a1, a2, v5, a4) && !cgc_AnalyzeTransportLayer(a0, a1, a2, v5, a4) && !cgc_AnalyzeNetworkLayer(a0, a1, a2, v5, a4) && !cgc_AnalyzeApplicationLayer(a0, a1, a2, v5, a4))\n
    {\n
        if ((a0->field_2 & 32))\n
        {\n
            cgc_HexDump(a1->field_8, a1->field_4);\n
            cgc_TransmitBytes(\"\\n
\", 1);\n
        }\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -2;\n
    return v2;\n
}\n
", "4213401:sub_404a99": null, "4213408:cgc_ReceiveAndVerifyInitializationPacket": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    char field_4;\n
    char padding_5[131];\n
    char *field_88;\n
} struct_0;\n
\n
long long cgc_ReceiveAndVerifyInitializationPacket(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x14]\n
    unsigned long long v2;  // rdx\n
\n
    cgc_ReceiveBytes(&v0, 4);\n
    if (*(&v0) != 2774181210)\n
        cgc_FailAndTerminate(\"improper initialization format\");\n
    cgc_ReceiveBytes(a0, 1);\n
    if (a0->field_0 > 2)\n
        cgc_FailAndTerminate(\"unsupported mode\");\n
    cgc_ReceiveBytes(&a0->padding_1[1], 2);\n
    cgc_ReceiveBytes(&a0->field_4, 1);\n
    if (a0->field_4 > 16)\n
        cgc_FailAndTerminate(\"too many filters\");\n
    if (cgc_allocate(a0, 1, v2))\n
        cgc_FailAndTerminate(\"Failed to allocate statistics\");\n
    cgc_bzero(a0->field_88, 48);\n
    return 0;\n
}\n
", "4213642:sub_404b8a": null, "4213648:cgc_ReceiveAndVerifyFilters": "typedef struct struct_0 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[131];\n
    struct struct_1 *field_88;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
    unsigned int field_18;\n
} struct_1;\n
\n
long long cgc_ReceiveAndVerifyFilters(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned int v5[7];  // rax\n
    unsigned int v6[7];  // rax\n
\n
    for (v1 = 0; v1 < a0->field_4; v1 += 1)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            cgc_FailAndTerminate(\"failed to allocate packet filter\");\n
        *(&a0->padding_5[3 + 8 * v1]) = *(&v0);\n
        cgc_ReceiveBytes(*(&v0), 2);\n
        if (*(*(&v0)) > 0x1000)\n
            cgc_FailAndTerminate(\"filter too large\");\n
        cgc_ReceiveBytes(*(&v0) + 2, 1);\n
        if (*((*(&v0) + 2)) > 2)\n
            cgc_FailAndTerminate(\"invalid filter type\");\n
        if (cgc_allocate(a0, 1, v4))\n
            cgc_FailAndTerminate(\"failed allocating filter mask\");\n
        cgc_bzero(*((*(&v0) + 8)), *(*(&v0)));\n
        if (cgc_allocate(a0, v3, v4))\n
            cgc_FailAndTerminate(\"failed allocating filter content\");\n
        cgc_bzero(*((*(&v0) + 16)), *(*(&v0)));\n
        cgc_ReceiveBytes(*((*(&v0) + 8)), *(*(&v0)));\n
        cgc_ReceiveBytes(*((*(&v0) + 16)), *(*(&v0)));\n
        if (*((*(&v0) + 2)) == 1)\n
        {\n
            v5 = a0->field_88;\n
            v5[5] = v5[5] + 1;\n
        }\n
        else\n
        {\n
            v6 = a0->field_88;\n
            v6[6] = v6[6] + 1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4214107:sub_404d5b": null, "4214112:cgc_ReceiveAndProcessFile": "typedef struct struct_3 {\n
    char padding_0[136];\n
    struct struct_2 *field_88;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[6];\n
    struct struct_0 *field_8;\n
    char *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    char field_24;\n
    char padding_25[3];\n
    struct struct_1 *field_28;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[6];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
long long cgc_ReceiveAndProcessFile(struct_3 *a0, unsigned long long a1, unsigned long long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x48]\n
    char v1;  // [bp-0x44]\n
    char v2;  // [bp-0x40]\n
    unsigned short v3;  // [bp-0x38]\n
    unsigned long long v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    struct_0 *v7;  // [bp-0x20], Other Possible Types: unsigned long\n
    char v8;  // [bp-0x14]\n
\n
    cgc_ReceiveBytes(&v8, 4);\n
    if (*(&v8) != 3702512809)\n
        cgc_FailAndTerminate(\"invalid DCAP file\");\n
    cgc_ReceiveBytes(&a0->field_88->padding_4, 4);\n
    cgc_ReceiveBytes(&a0->field_88->padding_4[4], 4);\n
    cgc_ReceiveBytes(a0->field_88, 4);\n
    if (a0->field_88->field_0 > 0x800)\n
        cgc_FailAndTerminate(\"too many packets\");\n
    cgc_ReceiveBytes(&a0->field_88->field_24, 1);\n
    if (a0->field_88->field_24 > 50)\n
        cgc_FailAndTerminate(\"too many option headers\");\n
    v7 = 0;\n
    for (v6 = 0; v6 < a0->field_88->field_24; v6 += 1)\n
    {\n
        if (!v7)\n
        {\n
            if (cgc_allocate(a0, a1, a2))\n
                cgc_FailAndTerminate(\"error allocating first option header\");\n
            v7 = a0->field_88->field_28;\n
        }\n
        else\n
        {\n
            if (cgc_allocate(a0, a1, a2))\n
                cgc_FailAndTerminate(\"error allocating option header\");\n
            v7 = v7->field_8;\n
        }\n
        cgc_bzero(v7, 24);\n
        cgc_ReceiveBytes(v7, 1);\n
        cgc_ReceiveBytes(v7 + 1, 1);\n
        if (cgc_allocate(a0, 1, a2))\n
            cgc_FailAndTerminate(\"failed to allocate option header value\");\n
        cgc_bzero(*((v7 + 16)), *((v7 + 1)) + 1);\n
        cgc_ReceiveBytes(*((v7 + 16)), *((v7 + 1)));\n
    }\n
    for (v5 = 0; v5 < a0->field_88->field_0; v5 += 1)\n
    {\n
        cgc_ReceiveBytes(&v0, 4);\n
        cgc_ReceiveBytes(&v1, 2);\n
        if (*(&v1) > 0x1000)\n
            cgc_FailAndTerminate(\"packet too large\");\n
        if (cgc_allocate(a0, 2, a2))\n
            cgc_FailAndTerminate(\"Failed allocating packet data\");\n
        cgc_ReceiveBytes(*(&v2), *(&v1));\n
        v3 = *(&v1);\n
        v4 = *(&v2);\n
        cgc_AnalyzePacket(a0, &v0, a2, a3, a4);\n
        cgc_deallocate(a0, a1);\n
    }\n
    return 0;\n
}\n
", "4214890:sub_40506a": null, "4214896:cgc_ReceiveAndProcessStream": "typedef struct struct_0 {\n
    char padding_0[136];\n
    struct struct_1 *field_88;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_ReceiveAndProcessStream(struct_0 *a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2;  // [bp-0x2c]\n
    char v3;  // [bp-0x28]\n
    unsigned short v4;  // [bp-0x20]\n
    unsigned long long v5;  // [bp-0x18]\n
    unsigned int *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v0 = 1;\n
    while (true)\n
    {\n
        cgc_ReceiveBytes(&v2, 2);\n
        if (!*(&v2))\n
            break;\n
        if (*(&v2) > 0x1000)\n
            cgc_FailAndTerminate(\"packet too large\");\n
        v7 = a0->field_88;\n
        *(v7) = *(v7) + 1;\n
        if (cgc_allocate(a0, 2, a2, a3))\n
            cgc_FailAndTerminate(\"Failed allocating packet data\");\n
        cgc_ReceiveBytes(*(&v3), *(&v2));\n
        v8 = v0;\n
        v0 = v8 + 1;\n
        v1 = v8;\n
        v4 = *(&v2);\n
        v5 = *(&v3);\n
        cgc_AnalyzePacket(a0, &v1, a2, v0, a4);\n
        cgc_deallocate(a0, a1);\n
    }\n
    return 0;\n
}\n
", "4215140:sub_405164": null, "4215152:main": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xac]\n
    char v1;  // [bp-0xa8]\n
    char v2;  // [bp-0xa6]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v5 = 0;\n
    v4 = a0;\n
    v3 = a1;\n
    if (cgc_ReceiveAndVerifyInitializationPacket(&v1))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    else if (!cgc_ReceiveAndVerifyFilters(&v1))\n
    {\n
        v0 = v1;\n
        if (v0 == 1)\n
        {\n
            cgc_ReceiveAndProcessFile(&v1, a1, a2, a3, a4);\n
        }\n
        else if (v0 == 2)\n
        {\n
            cgc_ReceiveAndProcessStream(&v1, a1, a2, a3, a4);\n
        }\n
        if ((*(&v2) & 16))\n
            cgc_DisplayStatistics(&v1, a1, a2, a3, a4);\n
        cgc_TransmitFormattedBytes(\"Goodbye.\\n
\", a1, a2, a3, a4);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
}\n
", "4215396:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}