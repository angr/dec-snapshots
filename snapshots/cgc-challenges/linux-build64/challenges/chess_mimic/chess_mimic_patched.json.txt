{"4198400:_init": "extern struct_0 *g_4058d8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_4058d8;\n
    if (g_4058d8)\n
        v1 = g_4058d8();\n
    return v1;\n
}\n
", "4198432:sub_401020": "extern unsigned long long g_4058f8;\n
\n
long long sub_401020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_4058f8;\n
    goto *(0x405900);\n
}\n
", "4198444:sub_40102c": null, "4198448:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198464:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198480:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198496:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198512:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4217064);\n
}\n
", "4198560:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4198597:sub_4010c5": null, "4198598:sub_4010c6": null, "4198608:deregister_tm_clones": "extern char __TMC_END__;\n
extern unsigned long long g_4058d0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__TMC_END__;\n
}\n
", "4198649:sub_4010f9": null, "4198656:register_tm_clones": "extern unsigned long long g_4058e0;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4198713:sub_401139": null, "4198720:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned long long g_4058e8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__TMC_END__)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_4058e8)\n
    {\n
        __TMC_END__ = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4198773:sub_401175": null, "4198777:sub_401179": null, "4198784:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198793:sub_401189": null, "4198800:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4198948:sub_401224": null, "4198960:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4199084:sub_4012ac": null, "4199088:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4199216:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    if (v0 > 0)\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 *= -1;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4199259:sub_40135b": null, "4199264:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4199326:sub_40139e": null, "4199328:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v8 = v4;\n
        v4 = (v8 >> 31 CONCAT v8) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v10 = v0;\n
        v0 = v10 - 1;\n
        if (v10 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4199553:sub_401481": null, "4199568:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40178c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40178c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4200348:sub_40179c": null, "4200352:cgc_vprintf": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_0 *a1)\n
{\n
    unsigned int *v0;  // [bp-0xc0], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0xb8]\n
    unsigned int *v2;  // [bp-0xb0]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int *v4;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_0 *v5;  // [bp-0x98]\n
    unsigned int v6;  // [bp-0x90]\n
    unsigned int v7;  // [bp-0x8c]\n
    struct_2 *v8;  // [bp-0x88], Other Possible Types: unsigned long\n
    unsigned long v9;  // [bp-0x80]\n
    struct_2 *v10;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned int v11;  // [bp-0x6c]\n
    char v12;  // [bp-0x68]\n
    unsigned int v13;  // [bp-0x24]\n
    char *v14;  // [bp-0x18]\n
    unsigned int v15;  // [bp-0xc]\n
    struct_0 *v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    unsigned int *v19;  // rax\n
    struct_0 *v20;  // rcx\n
    unsigned int *v21;  // rdx\n
    unsigned long long v22;  // rdx\n
    unsigned int *v23;  // rax\n
    struct_0 *v24;  // rcx\n
    unsigned int *v25;  // rdx\n
\n
    v14 = a0;\n
    v13 = 0;\n
    if (!v14)\n
    {\n
        v15 = -1;\n
        return v15;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v15 = v13;\n
            return v15;\n
        }\n
        else if (*(v14) != 64)\n
        {\n
            cgc_putc(*(v14));\n
            v14 += 1;\n
            v13 += 1;\n
        }\n
        else\n
        {\n
            v14 += 1;\n
            v7 = *(v14);\n
            if (!v7)\n
            {\n
                v15 = -1;\n
                return v15;\n
            }\n
            if (v7 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v7 == 100)\n
            {\n
                v5 = a1;\n
                v6 = v5->field_0;\n
                if (v6 <= 40)\n
                {\n
                    v17 = v5;\n
                    v18 = v6;\n
                    v19 = v18 + v17->field_10;\n
                    v17->field_0 = v18 + 8;\n
                    v4 = v19;\n
                }\n
                else\n
                {\n
                    v20 = v5;\n
                    v21 = v20->field_8;\n
                    v20->field_8 = &v21[2];\n
                    v4 = v21;\n
                }\n
                v11 = *(v4);\n
                cgc_int_to_str(v11, &v12);\n
                for (v10 = &v12; *(v10); v10 += 1)\n
                {\n
                    cgc_putc(*(v10));\n
                    v13 += 1;\n
                }\n
            }\n
            else if (v7 == 102)\n
            {\n
                v1 = a1;\n
                v2 = &v1->field_4;\n
                v3 = v1->field_4;\n
                if (v3 > 160)\n
                {\n
                    v24 = v1;\n
                    v25 = v24->field_8;\n
                    v24->field_8 = &v25[2];\n
                    v0 = v25;\n
                }\n
                else\n
                {\n
                    v22 = v3;\n
                    v23 = v22 + v1->field_10;\n
                    *(v2) = v22 + 16;\n
                    v0 = v23;\n
                }\n
                v9 = *(v0);\n
                cgc_float_to_str(&v12);\n
                for (v8 = &v12; v8->field_0; v8 += 1)\n
                {\n
                    cgc_putc(v8->field_0);\n
                    v13 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v15 = -1;\n
                return v15;\n
            }\n
            v14 += 1;\n
        }\n
    }\n
}\n
", "4201039:sub_401a4f": null, "4201040:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4201200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4201291:sub_401b4b": null, "4201296:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201347:sub_401b83": null, "4201360:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4201388:sub_401bac": null, "4201392:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4201444:sub_401be4": null, "4201456:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_401dd9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_401dd9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_401dd9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_401d49:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_401dd9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_401d49;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_401dd9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4202013:sub_401e1d": null, "4202016:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4202408:sub_401fa8": null, "4202416:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4202519:sub_402017": null, "4202528:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4202646:sub_402096": null, "4202656:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4202774:sub_402116": null, "4202784:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4202993:sub_4021f1": null, "4203008:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4203091:sub_402253": null, "4203104:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        *((a0 + v2)) = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4203281:sub_402311": null, "4203296:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4203458:sub_4023c2": null, "4203472:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4203704:sub_4024b8": null, "4203712:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4203768:sub_4024f8": null, "4203776:cgc_getColor": "long long cgc_getColor(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 <= 102 && a0 >= 97)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (a0 <= 108 && a0 >= 103)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 46;\n
    return v0;\n
}\n
", "4203874:sub_402562": null, "4203888:cgc_displayboard": "long long cgc_displayboard(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    for (v1 = 7; v1 >= 0; v1 -= 1)\n
    {\n
        for (v0 = 0; v0 < 8; v0 += 1)\n
        {\n
            cgc_transmit(\"\\n
\", a1, a2, a3);\n
        }\n
        cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    }\n
    return v1 - 1;\n
}\n
", "4204019:sub_4025f3": null, "4204032:cgc_initboard": "extern struct_0 *ptr_array;\n
\n
long long cgc_initboard()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        for (v0 = 0; v0 < 8; v0 += 1)\n
        {\n
            (&ptr_array->field_0)[8 * v1 + v0] = 46;\n
        }\n
    }\n
    ptr_array->field_0 = 100;\n
    ptr_array->field_8 = 98;\n
    ptr_array->field_10 = 99;\n
    ptr_array->field_18 = 102;\n
    ptr_array->field_20 = 101;\n
    ptr_array->field_28 = 99;\n
    ptr_array->field_30 = 98;\n
    ptr_array->field_38 = 100;\n
    ptr_array->field_1 = 97;\n
    ptr_array->field_9 = 97;\n
    ptr_array->field_11 = 97;\n
    ptr_array->field_19 = 97;\n
    ptr_array->field_21 = 97;\n
    ptr_array->field_29 = 97;\n
    ptr_array->field_31 = 97;\n
    ptr_array->field_39 = 97;\n
    ptr_array->field_6 = 103;\n
    ptr_array->field_e = 103;\n
    ptr_array->field_16 = 103;\n
    ptr_array->field_1e = 103;\n
    ptr_array->field_26 = 103;\n
    ptr_array->field_2e = 103;\n
    ptr_array->field_36 = 103;\n
    ptr_array->field_3e = 103;\n
    ptr_array->field_7 = 106;\n
    ptr_array->field_f = 104;\n
    ptr_array->field_17 = 105;\n
    ptr_array->field_1f = 108;\n
    ptr_array->field_27 = 107;\n
    ptr_array->field_2f = 105;\n
    ptr_array->field_37 = 104;\n
    ptr_array->field_3f = 106;\n
    return ptr_array;\n
}\n
", "4204482:sub_4027c2": null, "4204496:cgc_getPiece": "extern unsigned long long ptr_array;\n
\n
long long cgc_getPiece(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    return *((ptr_array + v0 * 8 + *((&v0 + 4))));\n
}\n
", "4204532:sub_4027f4": null, "4204544:cgc_checkNoCollision": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_checkNoCollision(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb4]\n
    unsigned int v2;  // [bp-0xb0]\n
    char v3;  // [bp-0xa9]\n
    unsigned int v4;  // [bp-0xa8]\n
    unsigned int v5;  // [bp-0xa4]\n
    unsigned int v6;  // [bp-0xa0]\n
    unsigned int v7;  // [bp-0x9c]\n
    unsigned int v8;  // [bp-0x98]\n
    unsigned int v9;  // [bp-0x94]\n
    unsigned int v10;  // [bp-0x90]\n
    unsigned int v11;  // [bp-0x8c]\n
    unsigned int v12;  // [bp-0x88]\n
    unsigned int v13;  // [bp-0x84]\n
    char v14;  // [bp-0x7d]\n
    unsigned int v15;  // [bp-0x7c]\n
    char v16;  // [bp-0x78]\n
    char v17;  // [bp-0x74]\n
    unsigned int v18;  // [bp-0x30]\n
    unsigned long v19;  // [bp-0x28]\n
    unsigned int v20;  // [bp-0x20]\n
    unsigned int v21;  // [bp-0x18]\n
    unsigned int v22;  // [bp-0xc]\n
    struct_0 *v24;  // rax\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rax\n
    unsigned long v30;  // rax\n
    unsigned long v31;  // rax\n
\n
    *(&v20) = a0;\n
    *(&v21) = a1;\n
    v19 = *(&v20);\n
    *(&v18) = *(&v21);\n
    v15 = 0;\n
    v14 = cgc_getPiece(*(&v20));\n
    if (v14 != 98 && v14 != 104)\n
    {\n
        if (cgc_getColor(v14) == 1 && cgc_getColor(cgc_getPiece(*(&v21))) == 1)\n
        {\n
            v22 = 0;\n
            return v22;\n
        }\n
        if (!cgc_getColor(v14) && !cgc_getColor(cgc_getPiece(*(&v21))))\n
        {\n
            v22 = 0;\n
            return v22;\n
        }\n
        if (v20 != v21)\n
        {\n
            if ((&v20)[1] != (&v21)[1])\n
            {\n
                v9 = cgc_abs(v21 - v20);\n
                v1 = v9;\n
                if (v1 == cgc_abs((&v21)[1] - (&v20)[1]))\n
                {\n
                    for (v8 = 1; v8 <= v9; v8 += 1)\n
                    {\n
                        if ((&v18)[1] > *((&v19 + 4)) && v18 > v19)\n
                        {\n
                            *(&(&v16)[8 * v15]) = v19 + v8;\n
                            v28 = v15;\n
                            v15 = v28 + 1;\n
                            *(&(&v17)[8 * v28]) = *((&v19 + 4)) + v8;\n
                            goto LABEL_402beb;\n
                        }\n
                        if ((&v18)[1] > *((&v19 + 4)) && v18 < v19)\n
                        {\n
                            *(&(&v16)[8 * v15]) = v19 - v8;\n
                            v29 = v15;\n
                            v15 = v29 + 1;\n
                            *(&(&v17)[8 * v29]) = *((&v19 + 4)) + v8;\n
                            goto LABEL_402beb;\n
                        }\n
                        if ((&v18)[1] < *((&v19 + 4)) && v18 > v19)\n
                        {\n
                            *(&(&v16)[8 * v15]) = v19 + v8;\n
                            v30 = v15;\n
                            v15 = v30 + 1;\n
                            *(&(&v17)[8 * v30]) = *((&v19 + 4)) - v8;\n
                            goto LABEL_402beb;\n
                        }\n
                        if ((&v18)[1] < *((&v19 + 4)) && v18 < v19)\n
                        {\n
                            *(&(&v16)[8 * v15]) = v19 - v8;\n
                            v31 = v15;\n
                            v15 = v31 + 1;\n
                            *(&(&v17)[8 * v31]) = *((&v19 + 4)) - v8;\n
                        }\n
LABEL_402beb:\n
                    }\n
                }\n
            }\n
            else if (v20 >= v21)\n
            {\n
                for (v10 = v20 - 1; v10 >= v21; v10 -= 1)\n
                {\n
                    *(&(&v16)[8 * v15]) = v10;\n
                    v27 = v15;\n
                    v15 = v27 + 1;\n
                    *(&(&v17)[8 * v27]) = (&v20)[1];\n
                }\n
            }\n
            else\n
            {\n
                for (v11 = v20 + 1; v11 <= v21; v11 += 1)\n
                {\n
                    *(&(&v16)[8 * v15]) = v11;\n
                    v26 = v15;\n
                    v15 = v26 + 1;\n
                    *(&(&v17)[8 * v26]) = (&v20)[1];\n
                }\n
            }\n
        }\n
        else\n
        {\n
            if ((&v20)[1] >= (&v21)[1])\n
            {\n
                for (v12 = (&v20)[1] - 1; v12 >= (&v21)[1]; v12 -= 1)\n
                {\n
                    *(&(&v16)[8 * v15]) = v20;\n
                    v25 = v15;\n
                    v15 = v25 + 1;\n
                    *(&(&v17)[8 * v25]) = v12;\n
                }\n
            }\n
            else\n
            {\n
                for (v13 = (&v20)[1] + 1; v13 <= (&v21)[1]; v13 += 1)\n
                {\n
                    *(&(&v16)[8 * v15]) = v20;\n
                    v24 = v15;\n
                    v15 = v24 + 1;\n
                    *((&v17 + 0x8 * v24)) = v13;\n
                }\n
            }\n
        }\n
        v7 = 0;\n
        v6 = 0;\n
        while (true)\n
        {\n
            if (v6 >= v15)\n
            {\n
                v22 = 1;\n
                return v22;\n
            }\n
            else if (v7 < 1)\n
            {\n
                v4 = *(&(&v16)[8 * v6]);\n
                v5 = *(&(&v17)[8 * v6]);\n
                v3 = cgc_getPiece(*(&v4));\n
                if (v3 != 46)\n
                {\n
                    v0 = cgc_getColor(v14);\n
                    if (v0 == cgc_getColor(v3))\n
                    {\n
                        v22 = 0;\n
                        return v22;\n
                    }\n
                    v7 += 1;\n
                }\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                v22 = 0;\n
                return v22;\n
            }\n
        }\n
    }\n
    v2 = cgc_getColor(v14);\n
    if (v2 == cgc_getColor(cgc_getPiece(*(&v18))))\n
    {\n
        v22 = 0;\n
        return v22;\n
    }\n
    v22 = 1;\n
    return v22;\n
}\n
", "4205854:sub_402d1e": null, "4205856:cgc_performMove": "extern char current_team;\n
\n
long long cgc_performMove(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned long v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x28]\n
    unsigned int v9;  // [bp-0xc]\n
\n
    *(&v8) = a0;\n
    v7 = a1;\n
    v6 = cgc_getPiece(*(&v8));\n
    if (current_team != 1)\n
    {\n
        if (cgc_getColor(v6) == 1)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_getColor(v6))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (v7 <= 7 && v7 >= 0 && *((&v7 + 4)) <= 7 && *((&v7 + 4)) >= 0)\n
    {\n
        if (v6 == 46)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        else if (v6 != 97)\n
        {\n
LABEL_402e5f:\n
            if (v6 != 103)\n
            {\n
LABEL_402ecb:\n
                if (v6 == 98)\n
                {\n
                    if (v7 != v8 + 2 && !(v7 == v8 - 2))\n
                        goto LABEL_402f4d;\n
                    if (*((&v7 + 4)) != (&v8)[1] + 1 && !(*((&v7 + 4)) == (&v8)[1] - 1))\n
                        goto LABEL_402f4d;\n
                    if (cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
LABEL_402f4d:\n
                    if (*((&v7 + 4)) != (&v8)[1] + 2 && !(*((&v7 + 4)) == (&v8)[1] - 2))\n
                        goto LABEL_402fca;\n
                    if (v7 != v8 + 1 && !(v7 == v8 - 1))\n
                        goto LABEL_402fca;\n
                    if (cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
LABEL_402fca:\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                else if (v6 == 104)\n
                {\n
                    if (v7 != v8 + 2 && !(v7 == v8 - 2))\n
                        goto LABEL_40305d;\n
                    if (*((&v7 + 4)) != (&v8)[1] + 1 && !(*((&v7 + 4)) == (&v8)[1] - 1))\n
                        goto LABEL_40305d;\n
                    if (cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
LABEL_40305d:\n
                    if (*((&v7 + 4)) != (&v8)[1] + 2 && !(*((&v7 + 4)) == (&v8)[1] - 2))\n
                        goto LABEL_4030da;\n
                    if (v7 != v8 + 1 && !(v7 == v8 - 1))\n
                        goto LABEL_4030da;\n
                    if (cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
LABEL_4030da:\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                else\n
                {\n
                    if (v6 != 99 && v6 != 105)\n
                    {\n
                        if (v6 != 102 && v6 != 108)\n
                        {\n
                            if (v6 != 101 && v6 != 107)\n
                            {\n
                                if (v6 != 106 && v6 != 100)\n
                                {\n
                                    v9 = 0;\n
                                    return v9;\n
                                }\n
                                if (v7 != v8 && !(*((&v7 + 4)) == (&v8)[1]))\n
                                    goto LABEL_403326;\n
                                if (cgc_checkNoCollision(a0, a1))\n
                                {\n
                                    cgc_swap(a0, a1);\n
                                    v9 = 1;\n
                                    return v9;\n
                                }\n
LABEL_403326:\n
                                v9 = 0;\n
                                return v9;\n
                            }\n
                            v3 = v7 - v8;\n
                            v2 = *((&v7 + 4)) - (&v8)[1];\n
                            if (cgc_abs(v3) <= 1 && cgc_abs(v2) <= 1)\n
                            {\n
                                if (cgc_checkNoCollision(a0, a1))\n
                                {\n
                                    cgc_swap(a0, a1);\n
                                    v9 = 1;\n
                                    return v9;\n
                                }\n
                                v9 = 0;\n
                                return v9;\n
                            }\n
                            v9 = 0;\n
                            return v9;\n
                        }\n
                        v4 = cgc_abs(v7 - v8);\n
                        v0 = v4;\n
                        if (v0 == cgc_abs(*((&v7 + 4)) - (&v8)[1]) && cgc_checkNoCollision(a0, a1))\n
                        {\n
                            cgc_swap(a0, a1);\n
                            v9 = 1;\n
                            return v9;\n
                        }\n
                        if (v7 != v8 && !(*((&v7 + 4)) == (&v8)[1]))\n
                            goto LABEL_40322b;\n
                        if (cgc_checkNoCollision(a0, a1))\n
                        {\n
                            cgc_swap(a0, a1);\n
                            v9 = 1;\n
                            return v9;\n
                        }\n
LABEL_40322b:\n
                        v9 = 0;\n
                        return v9;\n
                    }\n
                    v5 = cgc_abs(v7 - v8);\n
                    v1 = v5;\n
                    if (v1 == cgc_abs(*((&v7 + 4)) - (&v8)[1]) && cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
                    v9 = 0;\n
                    return v9;\n
                }\n
            }\n
            else\n
            {\n
                if (v7 == v8 && *((&v7 + 4)) == (&v8)[1] - 1)\n
                {\n
                    if (cgc_checkNoCollision(a0, a1))\n
                    {\n
                        cgc_swap(a0, a1);\n
                        v9 = 1;\n
                        return v9;\n
                    }\n
                    goto LABEL_402ecb;\n
                }\n
                v9 = 0;\n
                return v9;\n
            }\n
        }\n
        else\n
        {\n
            if (v7 == v8 && *((&v7 + 4)) == (&v8)[1] + 1)\n
            {\n
                if (cgc_checkNoCollision(a0, a1))\n
                {\n
                    cgc_swap(a0, a1);\n
                    v9 = 1;\n
                    return v9;\n
                }\n
                goto LABEL_402e5f;\n
            }\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    v9 = 0;\n
    return v9;\n
}\n
", "4207426:sub_403342": null, "4207440:cgc_swap": "extern unsigned long long ptr_array;\n
\n
long long cgc_swap(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v0 = *((ptr_array + v2 * 8 + *((&v2 + 4))));\n
    *((ptr_array + v2 * 8 + *((&v2 + 4)))) = *((ptr_array + v1 * 8 + *((&v1 + 4))));\n
    *((ptr_array + v1 * 8 + *((&v1 + 4)))) = v0;\n
    return ptr_array + v1 * 8;\n
}\n
", "4207560:sub_4033c8": null, "4207568:cgc_verifyFormat": "long long cgc_verifyFormat(char a0[7], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    a0[a1] = 0;\n
    if (a0[0] >= 48 && a0[0] <= 57 && a0[1] == 44 && a0[2] >= 48 && a0[2] <= 57 && a0[3] == 32 && a0[4] >= 48 && a0[4] <= 57 && a0[5] == 44 && a0[6] >= 48 && a0[6] <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207830:sub_4034d6": null, "4207840:cgc_parseUserInput": "long long cgc_parseUserInput(unsigned long long a0[2], unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned long v2;  // [bp-0x48], Other Possible Types: unsigned int, unsigned long long\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned long v4;  // [bp-0x40], Other Possible Types: unsigned int, unsigned long long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x34]\n
    char v7;  // [bp-0x30]\n
    char v8;  // [bp-0x2f]\n
    char v9;  // [bp-0x2e]\n
    char v10;  // [bp-0x2d]\n
    char *v11;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v12;  // [bp-0xc]\n
    char *v14;  // rsi\n
\n
    v11 = 0;\n
    v6 = 0;\n
    v2 = 330712481869;\n
    v4 = 330712481869;\n
    cgc_bzero(&v8, 15);\n
    v1 = cgc_receive(a0, 15, a2, a3);\n
    if (v1)\n
    {\n
        v12 = -1;\n
        return v12;\n
    }\n
    if (*((&v7 + v11)) == 10)\n
        v11 += 1;\n
    if (v11 != 1)\n
    {\n
        if (v11 != 3)\n
        {\n
            if (v11 != 7)\n
            {\n
                cgc_printf(\"incorrect input\\n
\", 15, a2, a3, a4);\n
                v12 = 0;\n
                return v12;\n
            }\n
        }\n
        else\n
        {\n
            if (v8 == 54 && v9 == 54 && v10 == 54)\n
            {\n
                v12 = 3;\n
                return v12;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (v8 == 57)\n
        {\n
            v12 = 2;\n
            return v12;\n
        }\n
    }\n
    v14 = v11;\n
    if (!cgc_verifyFormat(&v8, v14))\n
    {\n
        cgc_printf(\"incorrect input\\n
\", v14, a2, a3, a4);\n
        v12 = 0;\n
        return v12;\n
    }\n
    for (v0 = 0; v0 < 15; v0 += 1)\n
    {\n
        if ((&v8)[v0] <= 57 && (&v8)[v0] >= 48)\n
        {\n
            if (!v0)\n
            {\n
                v2 = cgc_atoi(&(&v8)[v0]);\n
            }\n
            else if (v0 == 2)\n
            {\n
                v3 = cgc_atoi(&(&v8)[v0]);\n
            }\n
            else if (v0 == 4)\n
            {\n
                v4 = cgc_atoi(&(&v8)[v0]);\n
            }\n
            else if (v0 == 6)\n
            {\n
                v5 = cgc_atoi(&(&v8)[v0]);\n
            }\n
        }\n
    }\n
    if (v2 != 77 && *((&v2 + 4)) != 77 && v4 != 77 && *((&v4 + 4)) != 77)\n
    {\n
        a0[0] = v2;\n
        a0[1] = v4;\n
        v12 = 1;\n
        return v12;\n
    }\n
    v12 = 0;\n
    return v12;\n
}\n
", "4208505:sub_403779": null, "4208512:main": "extern char current_team;\n
extern unsigned long long ptr_array;\n
\n
int main(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x7c]\n
    unsigned long long v1[2];  // [bp-0x78]\n
    char v2;  // [bp-0x70]\n
    char v3;  // [bp-0x68]\n
    struct struct_0 **v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned long v9;  // rdx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // r8\n
    unsigned long long v12;  // r9\n
\n
    v7 = 0;\n
    v6 = a0;\n
    v5 = a1;\n
    v4 = &cgc_displayboard;\n
    ptr_array = &v3;\n
    cgc_initboard();\n
    v4(a0, a1, v9, v10, v11, v12);\n
    while (true)\n
    {\n
        if (current_team == 1)\n
            cgc_printf(\"WHITE: \", a1, v9, v10, v11);\n
        else\n
            cgc_printf(\"BLACK: \", a1, v9, v10, v11);\n
        v0 = cgc_parseUserInput(v1, a1, v9, v10, v11);\n
        if (!v0)\n
        {\n
            cgc_printf(\"Not a legal move format\\n
\", a1, v9, v10, v11);\n
        }\n
        else if (v0 == 2)\n
        {\n
            v4();\n
        }\n
        else\n
        {\n
            if (v0 == 3)\n
            {\n
                cgc_printf(\"good game\\n
\", a1, v9, v10, v11);\n
                cgc__terminate(\"good game\\n
\");\n
            }\n
            if (v0 == -1)\n
                cgc__terminate(a0);\n
            if (!cgc_performMove(v1[0], *(&v2)))\n
            {\n
                cgc_printf(\"NO\\n
\", a1, v9, v10, v11);\n
            }\n
            else\n
            {\n
                cgc_printf(\"OK\\n
\", a1, v9, v10, v11);\n
                if (current_team == 1)\n
                    current_team = 0;\n
                else\n
                    current_team = 1;\n
            }\n
        }\n
    }\n
}\n
", "4208840:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_rint": null, "5242920:cgc_log10": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}