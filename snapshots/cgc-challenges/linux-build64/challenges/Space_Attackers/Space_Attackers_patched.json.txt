{"4202496:_init": "extern struct_0 *g_409548;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409548;\n
    if (g_409548)\n
        v1 = g_409548();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409568;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409568;\n
    goto *(4232560);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4232536);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __TMC_END__;\n
extern unsigned long long g_409540;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__TMC_END__;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_409550;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned long long g_409558;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__TMC_END__)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409558)\n
    {\n
        __TMC_END__ = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (!v4)\n
        return 0;\n
    cgc_memset(v4, 0, v3);\n
    return v4;\n
}\n
", "4202943:sub_4021bf": null, "4202944:cgc_isascii": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isascii(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 1;\n
}\n
", "4202962:sub_4021d2": null, "4202976:cgc_isdigit": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isdigit(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 2;\n
}\n
", "4202994:sub_4021f2": null, "4203008:cgc_isprint": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isprint(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 16;\n
}\n
", "4203026:sub_402212": null, "4203040:cgc_isalnum": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isalnum(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 14;\n
}\n
", "4203058:sub_402232": null, "4203072:cgc_isalpha": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isalpha(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 12;\n
}\n
", "4203090:sub_402252": null, "4203104:cgc_islower": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_islower(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 4;\n
}\n
", "4203122:sub_402272": null, "4203136:cgc_isupper": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isupper(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 8;\n
}\n
", "4203154:sub_402292": null, "4203168:cgc_isspace": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isspace(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 64;\n
}\n
", "4203186:sub_4022b2": null, "4203200:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 32;\n
}\n
", "4203218:sub_4022d2": null, "4203232:cgc_iscntrl": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_iscntrl(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 4294967168;\n
}\n
", "4203250:sub_4022f2": null, "4203264:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return (a0 ^ 32) - 65 < 6 | (((&__ctype)[a0 ^ 32] & 2) >> 1);\n
    return a0 - 65 < 6 | (((&__ctype)[a0] & 2) >> 1);\n
}\n
", "4203312:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return a0 ^ 32;\n
    return a0;\n
}\n
", "4203335:sub_402347": null, "4203344:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(struct_0 *a0)\n
{\n
    struct_0 *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
    unsigned long long v3;  // rax\n
    unsigned long long v5;  // rax\n
\n
    v1 = a0 ^ 32;\n
    if (!(*((a0 + &__ctype)) & 8))\n
        v1 = a0;\n
    if (!((&__ctype)[v1] & 2))\n
    {\n
        v2 = v1 - 65;\n
        v3 = v1 - 55;\n
        return (v2 < 6 ? 0 : v3);\n
    }\n
    v5 = v1 - 48;\n
    return v5;\n
}\n
", "4203396:sub_402384": null, "4203408:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return a0 ^ 32;\n
    return a0;\n
}\n
", "4203431:sub_4023a7": null, "4203440:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4203456:cgc_fflush": "long long cgc_fflush(unsigned int a0[3])\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rbx\n
    unsigned long long v5;  // rbp\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rax\n
    void* v10;  // rcx, Other Possible Types: unsigned long\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0[2];\n
    if (v3 == -1)\n
        return 0;\n
    if (a0[1] == 1)\n
    {\n
        v11 = 0;\n
    }\n
    else\n
    {\n
        v4 = a0[1] - v3;\n
        v10 = 0;\n
        while (true)\n
        {\n
            v5 = v10;\n
            if (v10 >= v4)\n
                break;\n
            v8 = cgc_transmit(a0, v6, v7, v10);\n
            v10 = (!v8 ? 0 : v0) + v5;\n
            if (v8)\n
                break;\n
        }\n
        v11 = -(v5 < v4);\n
    }\n
    *(&a0[2]) = 0;\n
    return v11;\n
}\n
", "4203519:sub_4023ff": null, "4203598:sub_40244e": null, "4203600:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[3], unsigned long long a1)\n
{\n
    char v0;  // [bp-0x38]\n
    unsigned long long v2;  // rax\n
    unsigned long long v3;  // rbp\n
    void* v4;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
    unsigned long long v7;  // rax\n
\n
    v2 = a0[2];\n
    if (v2 != -1)\n
    {\n
        if (a0[1] != 1)\n
        {\n
            v3 = a0[1] - v2;\n
            v4 = 0;\n
            while (v4 < v3)\n
            {\n
                v7 = cgc_transmit(a0, a1, v5, rcx<8>);\n
                v4 += (!v7 ? 0 : *(&v0));\n
                if (v7)\n
                    break;\n
            }\n
        }\n
        *(&a0[2]) = 0;\n
    }\n
    a0[2] = -(a1 < 1);\n
    a0[1] = 0;\n
    return -(a1 < 1);\n
}\n
", "4203716:sub_4024c4": null, "4203774:sub_4024fe": null, "4203776:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, struct_0 *a1, struct_0 *a2)\n
{\n
    struct_0 *v0;  // [bp-0x30], Other Possible Types: char, unsigned long\n
    struct_0 *v2;  // r14\n
    struct_0 *v3;  // r13\n
    struct_0 *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rax\n
    struct_0 *v8;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v9;  // eax\n
\n
    v2 = a2;\n
    v3 = a1;\n
    if (a2->field_8 == *(&a2[1].padding_0[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        if (!cgc_receive(a0, a1, a2, v4))\n
        {\n
            v6 = *(&v0);\n
            if (v6)\n
                *(&a2[1].padding_0[0]) = v6;\n
        }\n
    }\n
    v7 = a2->field_8;\n
    if (v7 != -1)\n
    {\n
        a2 = *(&a2[1].padding_0[0]) - v7;\n
        if (a2 > a1)\n
            a2 = a1;\n
        v0 = a2;\n
        a1 = &v2->padding_0[v7 + 16];\n
        cgc_memcpy();\n
        v8 = v0;\n
        v9 = v2->field_8 + v8;\n
        v2->field_8 = v9;\n
        if (v9 == *(&v2[1].padding_0[0]))\n
            *(&v2->field_8) = 0;\n
        if (!(v8 < v3))\n
            goto LABEL_4025f0;\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        if (0 >= a1)\n
        {\n
LABEL_4025f0:\n
            return v8;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (cgc_receive(a0, a1, a2, v4))\n
            return -1;\n
        v4 = v0;\n
        if (!v4)\n
            return -1;\n
        v8 += v4;\n
        if (v8 >= v3)\n
            return v8;\n
    }\n
}\n
", "4204033:sub_402601": null, "4204048:cgc_freaduntil": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_freaduntil(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_0 *a3)\n
{\n
    char v0;  // [bp-0x41]\n
    char v1;  // [bp-0x40]\n
    struct_0 *v3;  // rbx\n
    unsigned int v4;  // r15d\n
    unsigned long long v5;  // r12\n
    unsigned int v6;  // eax\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rax\n
    unsigned int v10;  // eax\n
    char *v11;  // r14, Other Possible Types: unsigned long\n
    unsigned int v12;  // eax\n
    unsigned long long v14;  // rax\n
    unsigned long long v15;  // rax\n
\n
    v3 = a3;\n
    v4 = a2;\n
    v5 = a1 - 1;\n
    if (a1 == 1)\n
    {\n
        v11 = 0;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        while (true)\n
        {\n
            v6 = v3->field_8;\n
            if (v6 == -1)\n
            {\n
                a3 = 4294967295;\n
                if (!cgc_receive(a0, a1, a2, a3) && *(&v1))\n
                    a3 = v0;\n
                if (a3 == -1)\n
                    goto LABEL_402710;\n
                goto LABEL_4026e5;\n
            }\n
            if (v6 != *(&v3[1].padding_0[0]))\n
            {\n
LABEL_402690:\n
                v9 = v3->field_8;\n
                v3->field_8 = v9 + 1;\n
                a3 = v3[1].padding_0[4 + v9];\n
                if (a3 == -1)\n
                    goto LABEL_402710;\n
                goto LABEL_4026e5;\n
            }\n
            *(&v3->field_8) = 0;\n
            if (!cgc_receive(a0, a1, a2, a3))\n
            {\n
                v8 = *(&v1);\n
                if (v8)\n
                {\n
                    *(&v3[1].padding_0[0]) = v8;\n
                    if (v8 < 0)\n
                        goto LABEL_402700;\n
                    goto LABEL_402690;\n
                }\n
            }\n
LABEL_402700:\n
            a3 = 4294967295;\n
            if (false)\n
            {\n
LABEL_4026e5:\n
                v10 = 2;\n
                if (a3 != v4)\n
                {\n
                    *((a0 + v11)) = a3;\n
                    v10 = 0;\n
                    goto LABEL_402715;\n
                }\n
            }\n
LABEL_402710:\n
            v10 = 1;\n
LABEL_402715:\n
            if (v10)\n
                break;\n
            v11 += 1;\n
            if (v5 == v11)\n
                goto LABEL_402736;\n
        }\n
        if (!(v10 == 2))\n
            goto LABEL_4027ef;\n
    }\n
LABEL_402736:\n
    if (v11 != v5)\n
    {\n
        *((a0 + v11)) = 0;\n
        return v11;\n
    }\n
    do\n
    {\n
        v12 = v3->field_8;\n
        if (v12 == -1)\n
        {\n
            a3 = 4294967295;\n
            if (!cgc_receive(a0, a1, a2, a3) && *(&v1))\n
            {\n
                a3 = v0;\n
                goto LABEL_4027d5;\n
            }\n
        }\n
        if (v12 != *(&v3[1].padding_0[0]))\n
        {\n
LABEL_40278c:\n
            v15 = v3->field_8;\n
            v3->field_8 = v15 + 1;\n
            a3 = v3[1].padding_0[4 + v15];\n
            goto LABEL_4027d5;\n
        }\n
        else\n
        {\n
            *(&v3->field_8) = 0;\n
            if (!cgc_receive(a0, a1, a2, a3))\n
            {\n
                v14 = *(&v1);\n
                if (v14)\n
                {\n
                    *(&v3[1].padding_0[0]) = v14;\n
                    if (v14 < 0)\n
                        goto LABEL_4027d0;\n
                    goto LABEL_40278c;\n
                }\n
            }\n
LABEL_4027d0:\n
            a3 = 4294967295;\n
LABEL_4027d5:\n
            if (a3 == -1)\n
                goto LABEL_4027ef;\n
            else\n
                goto LABEL_4027da;\n
        }\n
LABEL_4027da:\n
    } while (a3 != v4);\n
LABEL_4027ef:\n
    return -1;\n
}\n
", "4204198:sub_4026a6": null, "4204284:sub_4026fc": null, "4204445:sub_40279d": null, "4204490:sub_4027ca": null, "4204552:sub_402808": null, "4204560:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long v1;  // rax\n
\n
    malloc_free(&g_heap, a0);\n
    return v1;\n
}\n
", "4204578:sub_402822": null, "4204592:cgc_fwrite": "long long cgc_fwrite(unsigned long long a0, unsigned long long a1, unsigned int a2[4])\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v3;  // rax\n
    void* v4;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v6;  // rax\n
    void* v8;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v9;  // r12\n
\n
    if (a2[2] != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v3 = a2[3];\n
            if (v3 + a1 >= 0x400)\n
            {\n
                v8 = 0x400 - v3;\n
                cgc_memcpy(16 + a2 + v3, a0, v8);\n
                a2[3] = a2[3] + v8;\n
                cgc_fflush(a2);\n
                if (v8 < a1)\n
                    goto LABEL_4028f4;\n
            }\n
            else\n
            {\n
                v8 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_4028f4:\n
                    v9 = a1 - v8;\n
                    cgc_memcpy(16 + a2 + a2[3], a0 + v8, v9);\n
                    a2[3] = a2[3] + v9;\n
                    return a1;\n
                }\n
            }\n
            return v8;\n
        }\n
    }\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return a1;\n
        v6 = cgc_transmit(a2, a1, a2, rcx<8>);\n
        v4 += (!v6 ? 0 : *(&v0));\n
        if (v6)\n
            return -1;\n
    }\n
}\n
", "4204648:sub_402868": null, "4204840:sub_402928": null, "4204848:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4204866:sub_402942": null, "4204880:cgc_malloc_alloc": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    char padding_8[8];\n
    struct struct_3 *field_10;\n
    char padding_18[1016];\n
    struct struct_2 *field_410;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_1 *field_18;\n
} struct_1;\n
\n
typedef struct struct_5 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
long long cgc_malloc_alloc(struct_2 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // r15\n
    unsigned long v3;  // rsi, Other Possible Types: unsigned long long\n
    struct_2 *v4;  // r15\n
    struct_2 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rbx\n
    unsigned long v10;  // r15, Other Possible Types: unsigned long long\n
    void* v11;  // rbx, Other Possible Types: unsigned long, struct_1 *\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v13;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v15;  // rbp\n
    unsigned long long v16;  // r15\n
    struct_5 *v17;  // rax\n
    unsigned long long v18;  // rbx\n
    unsigned long v19;  // rcx\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rax\n
    struct_0 *v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_4 *v24;  // rax\n
    struct_0 *v25;  // rdx\n
    unsigned long long v26;  // rax\n
    struct_2 *v27;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v28;  // rax\n
    struct_0 *v29;  // rax\n
    unsigned long long v30;  // r8\n
    unsigned long long v31;  // r9\n
    unsigned long long v32;  // rax\n
\n
    if (a1 > 2147483647)\n
    {\n
LABEL_402965:\n
        return 0;\n
    }\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
    {\n
        v3 = 4;\n
    }\n
    else if (v2 <= 15)\n
    {\n
        v3 = v2;\n
    }\n
    else\n
    {\n
        if (v2 > 131071)\n
        {\n
            if (!cgc_allocate(a0, a1, v7))\n
            {\n
                v11 = *(&v0);\n
                *(v11) = a0;\n
                *((v11 + 8)) = v2 + 4111 & -0x1000;\n
                goto LABEL_402c85;\n
            }\n
            else\n
            {\n
                return 0;\n
            }\n
        }\n
        v4 = v2 + 31;\n
        v5 = v4 & -0x10;\n
        if (!(v4 & -0x10))\n
        {\n
            v10 = 4294967295;\n
        }\n
        else if (v5 <= 0x200)\n
        {\n
            v10 = (v4 >> 4) + 2;\n
        }\n
        else if (v5 <= 0x1200)\n
        {\n
            v10 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
        }\n
        else\n
        {\n
            v10 = 130;\n
            if (v5 <= 0x20000)\n
                v10 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
        }\n
        if (v10 <= 130)\n
        {\n
            do\n
            {\n
                v11 = (&a0->field_0)[v10];\n
                if (v11)\n
                {\n
                    while (*((v11 + 8)) < v5)\n
                    {\n
                        v11 = *((v11 + 24));\n
                        if (!v11)\n
                            goto LABEL_402a7f;\n
                    }\n
                }\n
LABEL_402a7f:\n
                v10 += 1;\n
            } while (v10 != 131);\n
            v10 = 131;\n
        }\n
        v11 = 0;\n
        if (v10 != 131)\n
        {\n
LABEL_402b89:\n
            v19 = *((v11 + 8));\n
            if (!(v19 & 1))\n
            {\n
                cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", v11);\n
            }\n
            else\n
            {\n
                v23 = v19 & -2;\n
                *((v11 + 8)) = v23;\n
                v24 = *((v11 + 16));\n
                if (v24)\n
                    v24->field_18 = *((v11 + 24));\n
                v25 = *((v11 + 24));\n
                if (v25)\n
                    v25->field_10 = v24;\n
                if ((&a0->field_0)[v10] == v11)\n
                    (&a0->field_0)[v10] = *((v11 + 24));\n
                *((v11 + 16)) = 0;\n
                v26 = v23 - v5;\n
                if (v26 < 33)\n
                {\n
LABEL_402c85:\n
                    v9 = v11 + 16;\n
                    return v9;\n
                }\n
                v13 = v11;\n
                a1 = v11 + v5;\n
                *((v11 + 8)) = v5;\n
                *((v11 + &v5->field_0)) = v5;\n
                *(&v5->padding_8[v11]) = v26;\n
                *((v23 + v11)) = v26;\n
                if (v26 <= 0x200)\n
                {\n
                    v27 = (v26 >> 4) + 2;\n
                }\n
                else if (v26 <= 0x1200)\n
                {\n
                    v27 = (v26 + 0x7ffffffe00 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v19 = 130;\n
                    if (!(v26 <= 0x20000))\n
                        goto LABEL_402c51;\n
                    v27 = (v26 + 0x7ffffffee00 >> 11) + 66;\n
                }\n
                v19 = v27;\n
LABEL_402c51:\n
                v28 = *((a1 + 8));\n
                if (!(v28 & 1))\n
                {\n
                    *((a1 + 8)) = v28 | 1;\n
                    *((a1 + 16)) = 0;\n
                    *((a1 + 24)) = (&a0->field_0)[v19];\n
                    (&a0->field_0)[v19] = a1;\n
                    v29 = *((a1 + 24));\n
                    if (v29)\n
                    {\n
                        v29->field_10 = a1;\n
                        goto LABEL_402c85;\n
                    }\n
                }\n
            }\n
LABEL_402ca9:\n
            cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
            v32 = cgc_tiny_alloc(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a1, v13, v19, v30, v31);\n
            return v32;\n
        }\n
        else\n
        {\n
            v12 = 0;\n
            if (!cgc_allocate(a0, a1, v13))\n
            {\n
                v15 = *(&v0);\n
                v16 = v15 + 1048575;\n
                v12 = v16 & -0x100000;\n
                if (v12 > v15)\n
                    cgc_deallocate(a0);\n
                if ((v15 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *(1048 + &a0->field_0 + (v16 >> 20)) = 2;\n
            }\n
            if (v12)\n
            {\n
                v17 = v12 + 19;\n
                a1 = v17 & -0x10;\n
                a1->field_0 = 0;\n
                v18 = (v12 - a1) + 0x100000;\n
                v19 = v18 - 32;\n
                a1->field_8 = v19;\n
                v20 = v17 & -0x10;\n
                *((v18 + v20 - 32)) = v19;\n
                *((v18 + v20 - 24)) = 0;\n
                v21 = a1->field_8;\n
                if (!(!(v21 & 1)))\n
                    goto LABEL_402ca9;\n
                a1->field_8 = v21 | 1;\n
                a1->field_10 = 0;\n
                a1->field_18 = &a0->field_410->field_0;\n
                a0->field_410 = &a1;\n
                v22 = a1->field_18;\n
                if (v22)\n
                    v22->field_10 = a1;\n
                v11 = a0->field_410;\n
                v10 = 130;\n
                goto LABEL_402b89;\n
            }\n
        }\n
        goto LABEL_402965;\n
    }\n
    v9 = cgc_tiny_alloc(a0, v3);\n
    return v9;\n
}\n
", "4205760:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned int field_1430;\n
    char padding_1434[4];\n
    struct struct_2 *field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned short v3;  // bx\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    void* v7;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rbp\n
    unsigned long long v11;  // r13\n
    unsigned long long v12;  // r12\n
    unsigned long long *v13;  // rax, Other Possible Types: unsigned long\n
    unsigned short *v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rdx\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rbx\n
    unsigned int v19;  // ecx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v13 = *((a0 + v4 * 8));\n
    if (v13)\n
    {\n
        *((a0 + v5 * 8)) = *(v13);\n
        return v13;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (!v6)\n
    {\n
        if (!*((a0 + 5168)))\n
        {\n
            v7 = 0;\n
            if (!cgc_allocate(a0, a1, v8))\n
            {\n
                v10 = v0;\n
                v11 = v10 + 1048575;\n
                v12 = v11 & -0x100000;\n
                if (v12 > v10)\n
                    cgc_deallocate(a0);\n
                if ((v10 + 0x200000) > (v12 + 0x100000))\n
                    cgc_deallocate(a0);\n
                *((a0 + (v11 >> 20) + 1048)) = 1;\n
                v7 = v12;\n
            }\n
            *((a0 + 5168)) = v7;\n
            if (!v7)\n
                return 0;\n
            *((a0 + 5176)) = 0;\n
        }\n
        v14 = *((a0 + 5168));\n
        v15 = *((a0 + 5176));\n
        v6 = v14 + v15;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v14 + v15)) = v3;\n
        *((2 + v14 + v15)) = v3;\n
        v16 = v15 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
    }\n
    v17 = *((v6 + 2));\n
    v13 = v6 + v17;\n
    v18 = a1 + v17;\n
    *((v6 + 2)) = v18;\n
    v19 = *(v6);\n
    if (v19 + v18 < 4097)\n
        return v13;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4206192:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r8\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // r9\n
    unsigned long v10;  // r11\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rsi\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r10\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rax\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rdx\n
    unsigned long v26;  // rdi\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_403248;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                {\n
                    cgc_deallocate(a0, a1);\n
                    return v0;\n
                }\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v21 = a1 - 16;\n
        v7 = *((v21 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_403248;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_403248;\n
        }\n
        else\n
        {\n
            v8 = *(v21);\n
            v9 = v21;\n
            v10 = v21 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (v10 && !((*((v10 + 8)) & -2) == v8))\n
                goto LABEL_40326b;\n
            v9 = v21 + v7;\n
            if (*(v9) == v7)\n
            {\n
                if (v10)\n
                {\n
                    v15 = *((v10 + 8));\n
                    if ((v15 & 1))\n
                    {\n
                        v16 = v15 & -2;\n
                        if (v16 <= 15)\n
                        {\n
                            v17 = v15 / 4 - 1;\n
                        }\n
                        else if (v16 <= 0x200)\n
                        {\n
                            v17 = (v15 >> 4) + 2;\n
                        }\n
                        else if (v16 <= 0x1200)\n
                        {\n
                            v17 = (0x7ffffffe00 + v16 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v17 = 130;\n
                            if (v16 <= 0x20000)\n
                                v17 = (0x7ffffffee00 + v16 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v16;\n
                        v18 = *((v10 + 16));\n
                        if (v18)\n
                            *((v18 + 24)) = *((v10 + 24));\n
                        v19 = *((v10 + 24));\n
                        if (v19)\n
                            *((v19 + 16)) = v18;\n
                        if (*((v4 + (v17 << 3))) == v10)\n
                            *((v4 + v17 * 8)) = *((v10 + 24));\n
                        *((v10 + 16)) = 0;\n
                        v20 = v16 + *((v21 + 8));\n
                        *((v10 + 8)) = v20;\n
                        *(v9) = v20;\n
                        v21 = v10;\n
                    }\n
                }\n
                v22 = *((v9 + 8));\n
                if ((v22 & 1))\n
                {\n
                    v23 = v22 & -2;\n
                    if (v23 <= 15)\n
                    {\n
                        v24 = v22 / 4 - 1;\n
                    }\n
                    else if (v23 <= 0x200)\n
                    {\n
                        v24 = (v22 >> 4) + 2;\n
                    }\n
                    else if (v23 <= 0x1200)\n
                    {\n
                        v24 = (0x7ffffffe00 + v23 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v24 = 130;\n
                        if (v23 <= 0x20000)\n
                            v24 = (0x7ffffffee00 + v23 >> 11) + 66;\n
                    }\n
                    *((v9 + 8)) = v23;\n
                    v25 = *((v9 + 16));\n
                    if (v25)\n
                        *((v25 + 24)) = *((v9 + 24));\n
                    v26 = *((v9 + 24));\n
                    if (v26)\n
                        *((v26 + 16)) = v25;\n
                    if (*((v4 + (v24 << 3))) == v9)\n
                        *((v4 + v24 * 8)) = *((v9 + 24));\n
                    *((v9 + 16)) = 0;\n
                    v27 = v23 + *((v21 + 8));\n
                    *((v21 + 8)) = v27;\n
                    *((v21 + v27)) = v27;\n
                }\n
                v28 = *((v21 + 8));\n
                if (v28 <= 15)\n
                {\n
                    v3 = v28 / 4 - 1;\n
                }\n
                else if (v28 <= 0x200)\n
                {\n
                    v3 = (v28 >> 4) + 2;\n
                }\n
                else if (v28 <= 0x1200)\n
                {\n
                    v3 = (0x7ffffffe00 + v28 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v3 = 130;\n
                    if (v28 <= 0x20000)\n
                        v3 = (0x7ffffffee00 + v28 >> 11) + 66;\n
                }\n
                if ((v28 & 1))\n
                {\n
                    cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                }\n
                else\n
                {\n
                    *((v21 + 8)) = v28 | 1;\n
                    *((v21 + 16)) = 0;\n
                    *((v21 + 24)) = *((v4 + v3 * 8));\n
                    *((v4 + v3 * 8)) = v21;\n
                    v29 = *((v21 + 24));\n
                    if (!v29)\n
                        return v0;\n
                    *((v29 + 16)) = v21;\n
                    return v0;\n
                }\n
LABEL_40326b:\n
                v13 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                v14 = v10;\n
LABEL_403275:\n
                cgc_heap_error(v13, v14, v3);\n
                return cgc_malloc_size(v13, v14, v3, v3, v4, v9);\n
            }\n
            goto LABEL_403251;\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_403248:\n
    cgc_heap_error(v11, v3);\n
LABEL_403251:\n
    v13 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v14 = v9;\n
    goto LABEL_403275;\n
}\n
", "4207232:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4207276:sub_4032ac": null, "4207280:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v4;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_4032c1:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_403339;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_403339;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_403339:\n
                v4 = cgc_malloc_alloc(a0, a2);\n
                if (v4)\n
                {\n
                    cgc_memcpy(v4, a1);\n
                    malloc_free(a0, a1);\n
                    return v4;\n
                }\n
                goto LABEL_4032c1;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4207530:sub_4033aa": null, "4207536:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4207712:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4207748:sub_403484": null, "4207760:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4207806:sub_4034be": null, "4207808:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4207841:sub_4034e1": null, "4207856:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_4;  // tmp #4\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        do\n
        {\n
            a0[1 + a2] = *((a1 + a2 - 1));\n
            tmp_4 = a2;\n
            a2 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v1[v2] = *((a1 + v2));\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
}\n
", "4207921:sub_403531": null, "4207936:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return a0;\n
    v1 = 0;\n
    do\n
    {\n
        *((a0 + v1)) = a1;\n
        v1 += 1;\n
    } while (a2 != v1);\n
    return a0;\n
}\n
", "4207966:sub_40355e": null, "4207968:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned int v32;  // ebp\n
    unsigned long long v33;  // rax\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    v32 = cgc_stdout->field_8;\n
    if (v32 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v33 = cgc__vsfprintf();\n
    if (v32 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v33;\n
    }\n
    return v33;\n
}\n
", "4208176:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = cgc_stdout->field_8;\n
    if (v1 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v2 = cgc__vsfprintf();\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208246:sub_403676": null, "4208256:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned int v30;  // ebp\n
    unsigned long long v31;  // rax\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    v30 = a0->field_8;\n
    if (v30 == -1)\n
        a0->field_8 = 0;\n
    v31 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    if (v30 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v31;\n
    }\n
    return v31;\n
}\n
", "4208458:sub_40374a": null, "4208464:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v1;  // ebp\n
    unsigned long long v2;  // rax\n
\n
    v1 = a0->field_8;\n
    if (v1 == -1)\n
        a0->field_8 = 0;\n
    v2 = cgc__vsfprintf(a1, a2, a0, 0);\n
    if (v1 == -1)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208533:sub_403795": null, "4208544:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4208697:sub_403839": null, "4208704:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4208723:sub_403853": null, "4208736:cgc__vsfprintf": "long long cgc__vsfprintf(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned long v0;  // [bp-0x1c8]\n
    int tmp_70;  // tmp #70\n
    int tmp_50;  // tmp #50\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0xa1]\n
    unsigned long v2;  // [bp-0xa0]\n
    unsigned long v3;  // [bp-0x98], Other Possible Types: char\n
    unsigned long v4;  // [bp-0x90]\n
    unsigned long v5;  // [bp-0x88]\n
    unsigned long v6;  // [bp-0x80]\n
    char v7;  // [bp-0x78]\n
    char v8;  // [bp-0x77]\n
    char v9;  // [bp-0x66]\n
    char v10;  // [bp-0x65]\n
    unsigned long v12;  // r14\n
    unsigned long v13;  // r15\n
    unsigned long v14;  // rax, Other Possible Types: char\n
    unsigned long v15;  // rax\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // r12\n
    unsigned int v18;  // eax\n
    unsigned long v19;  // rcx\n
    unsigned int v20;  // esi\n
    char v21;  // r8b\n
    unsigned long v22;  // rcx\n
    char v23;  // dl\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rsi\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rcx\n
    unsigned long v28;  // rdx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rsi\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax\n
    unsigned long v33;  // rcx\n
    unsigned long v34;  // rbp\n
    unsigned long v37;  // rsi\n
    unsigned long v38;  // rdi\n
    unsigned long v40;  // rax\n
    unsigned long v42;  // r10\n
    unsigned long v43;  // rbp\n
    unsigned long v44;  // rbp\n
    unsigned long v45;  // rcx\n
    unsigned long v46;  // rsi\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rbp\n
    unsigned long v49;  // rdx\n
    unsigned long v50;  // rdx\n
    unsigned long v51;  // rsi\n
    unsigned long v52;  // rbp\n
    unsigned long v53;  // rax, Other Possible Types: char\n
    unsigned long v54;  // rsi\n
    unsigned long v55;  // rbp\n
    unsigned long v56;  // rbp\n
    unsigned long v57;  // r12\n
    unsigned long v58;  // rcx\n
    unsigned int v59;  // ebp\n
    unsigned long v60;  // rbx\n
\n
    v12 = a3;\n
    v13 = a2;\n
    v4 = a1;\n
    v2 = a0;\n
    v6 = 20 + -0x1 * &v7;\n
    v16 = 0;\n
    while (true)\n
    {\n
        v14 = v2;\n
        v2 = v14 + 1;\n
        *(&v14) = *(v14);\n
        if (!*(&v14))\n
        {\n
LABEL_403e49:\n
            if (v16 < 2147483647)\n
                goto LABEL_403e62;\n
            if (v16 != -1)\n
                break;\n
LABEL_403e58:\n
            cgc__terminate(a0);\n
LABEL_403e62:\n
            if (v12)\n
            {\n
                *((v12 + v16)) = 0;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            while (v14 != 37)\n
            {\n
                if (v16 < 2147483647)\n
                {\n
                    v1 = v14;\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                        *((v12 + v16)) = v1;\n
                }\n
                else if (v16 == -1)\n
                {\n
                    goto LABEL_403e58;\n
                }\n
                v16 += 1;\n
                v15 = v2;\n
                v2 = v15 + 1;\n
                v14 = *(v15);\n
                if (!v14)\n
                    goto LABEL_4038a0;\n
            }\n
            v17 = v2;\n
            v2 = v17 + 1;\n
            v18 = *(v17);\n
            if (v18 == 48)\n
            {\n
                v3 = 48;\n
            }\n
            else\n
            {\n
                v3 = 32;\n
                if (v18 != 32)\n
                {\n
                    if (!v18)\n
                        goto LABEL_4038a0;\n
                    v2 = v17;\n
                }\n
            }\n
            a0 = v2;\n
            if (*(a0) - 48 > 9)\n
                v53 = 0;\n
            else\n
                v53 = cgc_strtoul(a0, &v2, 10);\n
            v19 = v2;\n
            v2 = v19 + 1;\n
            v20 = *(v19);\n
            if (v20 == 108)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 108)\n
                {\n
                    v2 = v19 + 2;\n
                    v21 = 0;\n
                }\n
            }\n
            else if (v20 == 104)\n
            {\n
                v21 = 1;\n
                if (*(v2) == 104)\n
                    v2 = v19 + 2;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    goto LABEL_4038a0;\n
                v2 = v19;\n
                v21 = 1;\n
            }\n
            v22 = v2;\n
            v2 = v22 + 1;\n
            v23 = *(v22);\n
            v24 = *(v22);\n
            v25 = v24 - 88;\n
            if (v25 > 32)\n
            {\n
                v34 = v2 - v17;\n
                if (v24)\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v50 = 2147483647 - v16;\n
                        if (v50 > v34)\n
                            v50 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v50;\n
                            cgc_fwrite(v17, v50, v13);\n
                            v50 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(v12 + v16, v17, v50);\n
                    }\n
                    v56 = v34 + v16;\n
                    *(&v53) = 1;\n
                    tmp_4 = v16;\n
                    v16 = v56;\n
                    if (v56 < tmp_4)\n
                        goto LABEL_403e58;\n
                    goto LABEL_4038a2;\n
                }\n
                else\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v49 = 2147483647 - v16;\n
                        if (v49 > v34)\n
                            v49 = v34;\n
                        if (v13)\n
                        {\n
                            v3 = v49;\n
                            cgc_fwrite(v17, v49, v13);\n
                            v49 = v3;\n
                        }\n
                        if (v12)\n
                            cgc_memcpy(v12 + v16, v17, v49);\n
                    }\n
                    v55 = v34 + v16;\n
                    if (v16 >= v16)\n
                    {\n
                        v53 = 0;\n
                        v16 = v55;\n
                        goto LABEL_4038a2;\n
                    }\n
                    goto LABEL_403e58;\n
                }\n
            }\n
            v0 = 4831842305;\n
            if (!((*(&v0 + ((v25 & 63) >> 3)) >> (v25 & 63 & 7)) & 1))\n
            {\n
                if (v25 == 11)\n
                {\n
                    v26 = v4;\n
                    v27 = *(v26);\n
                    if (v27 <= 40)\n
                    {\n
                        v53 = v27 + *((v26 + 16));\n
                        *(v26) = v27 + 8;\n
                        if (!(v16 < 2147483647))\n
                            goto LABEL_403d36;\n
                    }\n
                    else\n
                    {\n
                        v53 = *((v26 + 8));\n
                        *((v26 + 8)) = v53 + 8;\n
                        if (v16 >= 2147483647)\n
                        {\n
LABEL_403d36:\n
                            if (v16 == -1)\n
                                goto LABEL_403e58;\n
LABEL_403d40:\n
                            v16 += 1;\n
                            *(&v53) = 1;\n
                            goto LABEL_4038a2;\n
                        }\n
                    }\n
                    v1 = *(v53);\n
                    if (v13)\n
                        cgc_fwrite(&v1, 1, v13);\n
                    if (v12)\n
                    {\n
                        *((v12 + v16)) = v1;\n
                        goto LABEL_403d40;\n
                    }\n
                }\n
                else if (v25 == 27)\n
                {\n
                    v32 = v4;\n
                    v33 = *(v32);\n
                    if (v33 <= 40)\n
                    {\n
                        v40 = v33 + *((v32 + 16));\n
                        *(v32) = v33 + 8;\n
                    }\n
                    else\n
                    {\n
                        v40 = *((v32 + 8));\n
                        *((v32 + 8)) = v40 + 8;\n
                    }\n
                    v43 = *(v40);\n
                    v53 = cgc_strlen(v43);\n
                    v57 = v53;\n
                    if (!(v16 < 2147483647))\n
                        goto LABEL_403e3c;\n
                    v3 = v43;\n
                    v48 = 2147483647 - v16;\n
                    if (v48 > v53)\n
                        v48 = v53;\n
                    if (v13)\n
                        cgc_fwrite(v3, v48, v13);\n
                    if (!v12)\n
                        goto LABEL_403e3c;\n
                    a0 = v12 + v16;\n
                    v54 = v3;\n
                    goto LABEL_403e34;\n
                }\n
            }\n
            if (v23 == 100)\n
            {\n
                a0 = &v7;\n
                if (v21)\n
                {\n
                    v28 = v4;\n
                    v29 = *(v28);\n
                    if (v29 > 40)\n
                    {\n
                        v37 = *((v28 + 8));\n
                        *((v28 + 8)) = v37 + 8;\n
                    }\n
                    else\n
                    {\n
                        v37 = v29 + *((v28 + 16));\n
                        *(v28) = v29 + 8;\n
                    }\n
                    v42 = *(v37);\n
                    if (v42 < 0)\n
                    {\n
                        v7 = 45;\n
                        v42 = -(v42);\n
                        a0 = &v8;\n
                    }\n
                    *((a0 + 19)) = 0;\n
                    v5 = v53;\n
                    if (!v42)\n
                    {\n
                        v51 = a0 + 18;\n
                        *((a0 + 18)) = 48;\n
                    }\n
                    else\n
                    {\n
                        v51 = a0 + 19;\n
                        do\n
                        {\n
                            v45 = 3435973837 * v42 >> 35;\n
                            *((v51 - 1)) = *((4223740 + v42 + -10 * v45));\n
                            v51 -= 1;\n
                            tmp_70 = v42;\n
                            v42 = v45;\n
                        } while (tmp_70 > 9);\n
                    }\n
                    cgc_memmove(a0, v51, v51 - a0 + 20);\n
                    v52 = &v7;\n
                    goto LABEL_403d8b;\n
                }\n
            }\n
            if (!v21)\n
            {\n
LABEL_4038a0:\n
                v53 = 0;\n
                goto LABEL_4038a2;\n
            }\n
            v30 = v4;\n
            v31 = *(v30);\n
            if (v31 > 40)\n
            {\n
                v38 = *((v30 + 8));\n
                *((v30 + 8)) = v38 + 8;\n
            }\n
            else\n
            {\n
                v38 = v31 + *((v30 + 16));\n
                *(v30) = v31 + 8;\n
            }\n
            v5 = v53;\n
            v47 = *(v38);\n
            if (v23 == 117)\n
                a0 = 10;\n
            else\n
                a0 = 16;\n
            v44 = (v23 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
            v10 = 0;\n
            v46 = &v10;\n
            if (!v47)\n
            {\n
                v9 = *(v44);\n
                v46 = &v9;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    *((v46 - 1)) = *((v44 + ((0 CONCAT v47) /m a0 >> 32)));\n
                    v46 = &v9;\n
                    tmp_50 = v47;\n
                    v47 = (0 CONCAT v47) /m a0;\n
                } while (tmp_50 >= a0);\n
            }\n
            v52 = &v7;\n
            cgc_memmove(&v7, v46, v6 + v46);\n
LABEL_403d8b:\n
            v53 = cgc_strlen(v52);\n
            v57 = v53;\n
            v58 = v5;\n
            if (v58 > v53)\n
            {\n
                v59 = v53 - v58;\n
                do\n
                {\n
                    if (v16 < 2147483647)\n
                    {\n
                        v1 = v3;\n
                        if (v13)\n
                            cgc_fwrite(&v1, 1, v13);\n
                        if (v12)\n
                            *((v12 + v16)) = v1;\n
                    }\n
                    else if (!(v16 == -1))\n
                    {\n
                        continue;\n
                    }\n
                    tmp_2 = v16;\n
                    v16 += 1;\n
                    tmp_12 = v59 + 1;\n
                    v59 += 1;\n
                } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                goto LABEL_403e58;\n
            }\n
            if (!(v16 < 2147483647))\n
                goto LABEL_403e3c;\n
            v48 = 2147483647 - v16;\n
            if (v48 > v53)\n
                v48 = v53;\n
            if (v13)\n
                cgc_fwrite(&v7, v48, v13);\n
            if (!v12)\n
                goto LABEL_403e3c;\n
            a0 = v12 + v16;\n
            v54 = &v7;\n
LABEL_403e34:\n
            cgc_memcpy(a0, v54, v48);\n
LABEL_403e3c:\n
            *(&v53) = 1;\n
            tmp_2 = v16;\n
            v16 += v57;\n
            if (__CFADD__(tmp_2, v57))\n
                goto LABEL_403e58;\n
LABEL_4038a2:\n
            if (!v53)\n
                goto LABEL_403e49;\n
        }\n
    }\n
    v60 = v16 + 1;\n
    return v60;\n
}\n
", "4208793:sub_403899": null, "4208835:sub_4038c3": null, "4208937:sub_403929": null, "4210089:sub_403da9": null, "4210304:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4210325:sub_403e95": null, "4210336:cgc_strcasecmp": "long long cgc_strcasecmp(char a0[2], char *a1)\n
{\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    char v2[2];  // r14, Other Possible Types: unsigned long\n
    unsigned long v3;  // al, Other Possible Types: char\n
    unsigned long long v4;  // rax\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = a0[0];\n
    if (!a0[0])\n
        return a0[0] - *(a1);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4210410:sub_403eea": null, "4210416:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4210512:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4210569:sub_403f89": null, "4210576:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // al, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return v1 - *(a1);\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return v1 - *(a1);\n
}\n
", "4210627:sub_403fc3": null, "4210640:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4210693:sub_404005": null, "4210704:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, a0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4210769:sub_404051": null, "4210784:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210818:sub_404082": null, "4210832:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4210943:sub_4040ff": null, "4210944:cgc_strncpy": "long long cgc_strncpy(char *a0, char a1[2], unsigned long a2)\n
{\n
    char *v1;  // rax\n
    char v2;  // r8b\n
    unsigned long v3;  // rdi\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v5;  // rsi, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = a1[0];\n
    v4 = a0;\n
    if (a1[0])\n
    {\n
        v4 = a0;\n
        if (a2)\n
        {\n
            v3 = 1;\n
            v4 = v1;\n
            while (true)\n
            {\n
                *(v4) = v2;\n
                v4 += 1;\n
                v2 = a1[v3];\n
                if (!v2)\n
                    break;\n
                v3 += 1;\n
                if (1 >= a2)\n
                    break;\n
            }\n
        }\n
    }\n
    v5 = v4 - v1;\n
    if (v5 < a2)\n
    {\n
        do\n
        {\n
            *(v4) = 0;\n
            v4 += 1;\n
            v5 += 1;\n
        } while (v5 < a2);\n
    }\n
    return v1;\n
}\n
", "4211041:sub_404161": null, "4211056:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (!v3)\n
        return 0;\n
    cgc_memcpy(v3, a0, v2);\n
    v2[v3] = 0;\n
    return v3;\n
}\n
", "4211132:sub_4041bc": null, "4211136:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r12\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rbx\n
    unsigned long v6;  // rax\n
    char *v7;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    v5 = 0;\n
    if (!v3)\n
        return 0;\n
    v2 = *(v3);\n
    if (*(v3))\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a1, v2);\n
            if (v4)\n
                break;\n
            v5 = v5 + 1;\n
            v2 = v3[v5];\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v6 = v5;\n
    v7 = v5 + 1;\n
    *(a0) = (v3[v6] ? 0 : v7 + v3);\n
    v3[v6] = 0;\n
    return *(a0);\n
}\n
", "4211259:sub_40423b": null, "4211264:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4211343:sub_40428f": null, "4211344:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    void* v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    void* v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    void* v21;  // rdi\n
    void* v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    void* v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ebp\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_404438;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_404438;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_40439b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_40439b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_40439b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_40439b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (cgc_isupper(v26))\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
                else\n
                {\n
                    v27 = 0;\n
                    goto LABEL_4043b0;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 > 2147483647)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_4043b0:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_404438:\n
    v32 = (!v30 ? -0x80000000 : -(v31));\n
    v33 = (!v30 ? 2147483647 : v31);\n
    if (v29 < 0)\n
        v33 = v32;\n
    return v33;\n
}\n
", "4211660:sub_4043cc": null, "4211830:sub_404476": null, "4211840:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long long *v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    unsigned long long *v14;  // r15, Other Possible Types: unsigned long\n
    char v15[2];  // rbp\n
    void* v16;  // rdi\n
    char v17[2];  // rbx, Other Possible Types: unsigned long\n
    void* v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned long v20;  // r13, Other Possible Types: unsigned long long\n
    void* v21;  // rdi\n
    void* v23;  // rdi\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    void* v26;  // rdi\n
    char v27;  // al\n
    char v28[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v29;  // ecx\n
    void* v30;  // rbp, Other Possible Types: unsigned long, unsigned int, unsigned long long\n
    void* v31;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v32;  // eax\n
    unsigned long v33;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v20 = a2;\n
    v14 = a1;\n
    v15 = a0;\n
    v16 = a0[0];\n
    v17 = v15;\n
    *(&v2) = v15;\n
    if (cgc_isspace(v16))\n
    {\n
        v17 = v15;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v30 = 0;\n
                v29 = 1;\n
                v19 = 1;\n
                v31 = 0;\n
                if (!a1)\n
                    goto LABEL_404628;\n
                v28 = v2;\n
                if (!v19)\n
                    v28 = v17;\n
                *(v14) = v28;\n
                goto LABEL_404628;\n
            }\n
            v18 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v18));\n
    }\n
    if (*(v17) == 45)\n
    {\n
        v17 += 1;\n
        v0 = -1;\n
    }\n
    else\n
    {\n
        v0 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
    }\n
    v1 = a1;\n
    if (a2 && a2 == 16)\n
    {\n
        v20 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_40458b;\n
        }\n
    }\n
    if (*(v17) == 48)\n
    {\n
        if ((*((v17 + 1)) & 248) == 48)\n
        {\n
            v17 += 1;\n
            v20 = 8;\n
            goto LABEL_40458b;\n
        }\n
        if (cgc_tolower(*((v17 + 1))) == 120)\n
        {\n
            v17 += 2;\n
            v20 = 16;\n
            goto LABEL_40458b;\n
        }\n
    }\n
    v20 = 10;\n
    if (!cgc_isdigit(*(v17)))\n
    {\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
    }\n
    else\n
    {\n
LABEL_40458b:\n
        v30 = 0;\n
        v19 = 1;\n
        v31 = 0;\n
        while (true)\n
        {\n
            v21 = *(v17);\n
            if (!v21)\n
                break;\n
            v23 = *(v17);\n
            if (cgc_isdigit(v21))\n
            {\n
                v24 = v23 - 48;\n
            }\n
            else\n
            {\n
                v26 = *(v17);\n
                if (cgc_islower(v23))\n
                {\n
                    v24 = v26 - 87;\n
                }\n
                else if (!cgc_isupper(v26))\n
                {\n
                    v27 = 0;\n
                    goto LABEL_4045a0;\n
                }\n
                else\n
                {\n
                    v24 = *(v17) - 55;\n
                }\n
            }\n
            v27 = 0;\n
            if (v24 < v20)\n
            {\n
                v31 = v20 * v31 + v24;\n
                if (v31 >> 32)\n
                    v30 = 1;\n
                v17 += 1;\n
                v27 = 1;\n
                v19 = 0;\n
            }\n
LABEL_4045a0:\n
            if (!v27)\n
                break;\n
        }\n
        v14 = v1;\n
    }\n
    v29 = v0;\n
LABEL_404628:\n
    if (v29 < 0)\n
    {\n
        v32 = (v31 == -0x80000000 ? 1 : v30);\n
        if (v31 <= 2147483647)\n
            v32 = v30;\n
        v31 = -(v31);\n
        v30 = v32;\n
    }\n
    v33 = (!v30 ? 4294967295 : v31);\n
    return v33;\n
}\n
", "4212156:sub_4045bc": null, "4212337:sub_404671": null, "4212352:cgc_seedRandomGen": "extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern char *playerName;\n
\n
long long cgc_seedRandomGen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // rax\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebp\n
    unsigned long long v7;  // rax\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v5 = a1;\n
    v6 = a0;\n
    v7 = cgc_strcmp(playerName, \"magic\");\n
    if (!v7)\n
        v6 = v7;\n
    if (!v7)\n
        v5 = v7;\n
    cgc_seed1 = v6;\n
    cgc_seed2 = v5;\n
    return v7;\n
}\n
", "4212405:sub_4046b5": null, "4212416:cgc_getRandomInt": "extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
\n
long long cgc_getRandomInt()\n
{\n
    cgc_seed1 = (cgc_seed1 >> 16) + cgc_seed1 * 42871;\n
    cgc_seed2 = (cgc_seed2 >> 16) + cgc_seed2 * 28172;\n
    return cgc_seed1 * 0x10000 + cgc_seed2;\n
}\n
", "4212474:sub_4046fa": null, "4212480:cgc_createEnemies": "extern unsigned int columns;\n
extern struct_1 *enemies;\n
extern unsigned int rowCount;\n
\n
long long cgc_createEnemies()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    v1 = cgc_calloc(rowCount, 8);\n
    enemies = v1;\n
    if (rowCount <= 0)\n
        return v1;\n
    v2 = 0;\n
    do\n
    {\n
        enemies[v2].field_0 = cgc_calloc((columns >> 31) + columns >> 1, 4);\n
        if (columns >= 2)\n
        {\n
            v3 = enemies[v2].field_0;\n
            v4 = 0;\n
            do\n
            {\n
                v3[v4] = 1;\n
                v4 += 1;\n
            } while (v4 < (columns >> 31) + columns >> 1);\n
        }\n
        v2 += 1;\n
    } while (v2 < rowCount);\n
    return rowCount;\n
}\n
", "4212522:sub_40472a": null, "4212646:sub_4047a6": null, "4212656:cgc_createBoard": "long long cgc_createBoard(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // r15\n
    struct struct_0 **v4;  // r12\n
    unsigned long v5;  // rbx\n
    unsigned int *v6;  // rdx\n
    unsigned long v7;  // rsi\n
    unsigned long v8;  // rcx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = cgc_malloc(a0 * 8);\n
    if (a0 > 0)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v4[v5] = cgc_malloc(a1 * 4);\n
            v5 += 1;\n
        } while (a0 != v5);\n
    }\n
    if (a0 <= 0)\n
        return v4;\n
    v8 = 0;\n
    do\n
    {\n
        if (v3 > 0)\n
        {\n
            v6 = v4[v8];\n
            v7 = 0;\n
            do\n
            {\n
                v6[v7] = 0;\n
                v7 += 1;\n
            } while (v3 != v7);\n
        }\n
        v8 += 1;\n
    } while (v8 != a0);\n
    return v4;\n
}\n
", "4212753:sub_404811": null, "4212836:sub_404864": null, "4212848:cgc_clearEnemies": "extern struct_1 *board;\n
extern unsigned int columns;\n
extern unsigned int rows;\n
\n
long long cgc_clearEnemies()\n
{\n
    struct struct_0 **v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v2;  // rdx\n
    unsigned long v3;  // rsi\n
\n
    if (rows <= 0)\n
        return board;\n
    v1 = 0;\n
    do\n
    {\n
        if (columns > 0)\n
        {\n
            v2 = board[v1].field_0;\n
            v3 = 0;\n
            do\n
            {\n
                if (v2[v3] == 3)\n
                    v2[v3] = 0;\n
                v3 += 1;\n
            } while (v3 < columns);\n
        }\n
        v1 += 1;\n
    } while (v1 < rows);\n
    return board;\n
}\n
", "4212868:sub_404884": null, "4212913:sub_4048b1": null, "4212960:cgc_setEnemies": "extern unsigned long long board;\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_1 *enemies;\n
extern unsigned int rowCount;\n
\n
long long cgc_setEnemies()\n
{\n
    unsigned long long v1;  // r9\n
    unsigned long long v2;  // r10\n
    struct struct_0 **v3;  // r15, Other Possible Types: unsigned long\n
    unsigned int *v4;  // rcx\n
    unsigned long long *v5;  // r11\n
    unsigned long long *v6;  // r14\n
    unsigned long long *v7;  // r12\n
    void* v9;  // rsi\n
    void* v10;  // rdx\n
\n
    if (rowCount <= 0)\n
        return rowCount;\n
    v1 = (cgc_turnCounter * 1717986919 >> 35) + (cgc_turnCounter * 1717986919 >> 63);\n
    v2 = v1 + 1;\n
    v3 = 0;\n
    while (columns < 2)\n
    {\n
        v3 += 1;\n
        if (v3 >= rowCount)\n
            return rowCount;\n
    }\n
    v4 = enemies[v3].field_0;\n
    v5 = v2 + v3 * 2;\n
    v6 = v2 + v3 * 2;\n
    v7 = v1 + v3 * 2;\n
    v10 = 0;\n
    v9 = 0;\n
}\n
", "4213032:sub_404928": null, "4213107:sub_404973": null, "4213198:sub_4049ce": null, "4213214:sub_4049de": null, "4213239:sub_4049f7": null, "4213248:cgc_movePieces": "long long cgc_movePieces()\n
{\n
    return 0;\n
}\n
", "4213251:sub_404a03": null, "4213264:cgc_canEnemyFire": "extern unsigned long long enemies;\n
extern unsigned int rowCount;\n
\n
long long cgc_canEnemyFire(unsigned long a0, unsigned long a1)\n
{\n
    struct struct_0 **v2;  // rdi, Other Possible Types: unsigned long\n
    unsigned int *v3;  // rcx\n
\n
    if (rowCount - 1 == a0)\n
        return 0;\n
    v2 = a0 + 1;\n
    while (v2 < rowCount)\n
    {\n
        v3 = *((enemies + v2 * 8));\n
        v2 += 1;\n
        if (v3[a1])\n
            break;\n
    }\n
    return v2 < rowCount;\n
}\n
", "4213343:sub_404a5f": null, "4213344:cgc_enemyFire": "extern unsigned int columns;\n
extern struct_2 *enemyBullets;\n
extern unsigned int rows;\n
\n
long long cgc_enemyFire(unsigned long a0, unsigned long a1)\n
{\n
    struct struct_0 **v1;  // r8, Other Possible Types: unsigned long\n
    unsigned int v2;  // r9d\n
    struct struct_0 **v3;  // rax, Other Possible Types: unsigned long\n
    unsigned int v4[2];  // rax\n
\n
    v1 = -1;\n
    if (v2 > 0)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            if (enemyBullets[v3].field_0->field_0 == -1)\n
            {\n
                v1 = v3;\n
                break;\n
            }\n
            v3 += 1;\n
        } while (rows * ((columns >> 31) + columns >> 1) != v3);\n
    }\n
    v4 = enemyBullets[v1].field_0;\n
    v4[0] = a1;\n
    v4[1] = a0;\n
    return v4;\n
}\n
", "4213435:sub_404abb": null, "4213440:cgc_updateEnemies": "extern unsigned int cgc_lost;\n
extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_2 *enemies;\n
extern struct_3 *enemyBullets;\n
extern unsigned int rowCount;\n
extern unsigned int rows;\n
\n
long long cgc_updateEnemies()\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    struct struct_1 **v3;  // r13, Other Possible Types: unsigned long\n
    struct struct_1 **v4;  // r14, Other Possible Types: unsigned long long, unsigned long\n
    unsigned int v5;  // ecx, Other Possible Types: unsigned long long, unsigned long\n
    unsigned int *v6;  // r11\n
    unsigned long long v7;  // rbp\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // r15d\n
    struct struct_1 **v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v11;  // eax\n
    struct struct_1 **v12;  // rdi\n
    unsigned int *v13;  // rsi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ebp\n
    unsigned int v17;  // r12d\n
    unsigned int v18;  // ebp\n
    unsigned long long v19;  // rcx\n
    struct struct_0 **v20;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v21;  // rdi, Other Possible Types: unsigned long\n
    unsigned int v22[2];  // rax\n
    unsigned long v23;  // rbx\n
\n
    if (rowCount <= 0)\n
    {\n
        v9 = 0;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        v4 = 1;\n
        v9 = 0;\n
        do\n
        {\n
            if (columns >= 2)\n
            {\n
                v5 = (columns >> 31) + columns >> 1;\n
                v6 = (&enemies->field_0)[v3];\n
                v1 = v3 * 2;\n
                v0 = v3 * 2 + 1;\n
                v23 = 0;\n
                do\n
                {\n
                    if (v6[v23])\n
                    {\n
                        cgc_seed1 = (cgc_seed1 >> 16) + cgc_seed1 * 42871;\n
                        cgc_seed2 = (cgc_seed2 >> 16) + cgc_seed2 * 28172;\n
                        v7 = cgc_seed1 * 0x10000 + cgc_seed2;\n
                        if (v7 * 3067833783 + 1227133513 <= 613566756)\n
                        {\n
                            v16 = 0;\n
                            if (v3 != rowCount - 1)\n
                            {\n
                                v10 = v4;\n
                                while (true)\n
                                {\n
                                    v12 = v10;\n
                                    if (v10 >= rowCount)\n
                                        break;\n
                                    v13 = (&enemies->field_0)[v10];\n
                                    v10 += 1;\n
                                    if (v13[v23])\n
                                        break;\n
                                }\n
                                v16 = 0;\n
                                *(&v16) = v12 < rowCount;\n
                            }\n
                            v9 = 1;\n
                            if (!v16)\n
                            {\n
                                switch (v6[v23])\n
                                {\n
                                case 1:\n
                                    v17 = v23 * 2;\n
                                    goto LABEL_404ca7;\n
                                case 2:\n
                                    v17 = v23 * 2 + 1;\n
                                    goto LABEL_404ca7;\n
                                case 3:\n
                                    v17 = v23 * 2 + 1;\n
                                    v18 = ((cgc_turnCounter * 1717986919 >> 35) + (cgc_turnCounter * 1717986919 >> 63)) + v0;\n
                                    break;\n
                                case 4:\n
                                    v18 = ((cgc_turnCounter * 1717986919 >> 35) + (cgc_turnCounter * 1717986919 >> 63)) + v0;\n
                                    v17 = v23 * 2;\n
                                    break;\n
                                default:\n
                                    v17 = -1;\n
                                    v18 = -1;\n
                                    break;\n
                                }\n
LABEL_404ca7:\n
                                v18 = ((cgc_turnCounter * 1717986919 >> 35) + (cgc_turnCounter * 1717986919 >> 63)) + v1;\n
                                v19 = rows * v5;\n
                                v20 = -1;\n
                                if (v19 > 0)\n
                                {\n
                                    v21 = 0;\n
                                    do\n
                                    {\n
                                        if (enemyBullets[v21].field_0->field_0 == -1)\n
                                        {\n
                                            v20 = v21;\n
                                            break;\n
                                        }\n
                                        v21 += 1;\n
                                    } while (v19 != v21);\n
                                }\n
                                v22 = enemyBullets[v20].field_0;\n
                                v22[0] = v18;\n
                                v22[1] = v17;\n
                            }\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v8 = v7 - (2863311531 * v7 >> 33) * 3;\n
                            v9 = 1;\n
                            if (v8 == 1)\n
                            {\n
                                v11 = v6[v23];\n
                                if (v11 != 4)\n
                                {\n
                                    v15 = v11 + 1;\n
                                }\n
                                else\n
                                {\n
                                    v6[v23] = 1;\n
                                    continue;\n
                                }\n
                            }\n
                            else\n
                            {\n
                                if (!(!v8))\n
                                    continue;\n
                                v14 = v6[v23];\n
                                if (v14 != 1)\n
                                {\n
                                    v15 = v14 - 1;\n
                                }\n
                                else\n
                                {\n
                                    v6[v23] = 4;\n
                                    continue;\n
                                }\n
                            }\n
                            v6[v23] = v15;\n
                        }\n
                    }\n
                    v23 += 1;\n
                    v5 = (columns >> 31) + columns >> 1;\n
                } while (v23 < v5);\n
            }\n
            v3 += 1;\n
            v4 += 1;\n
        } while (v3 < rowCount);\n
    }\n
    if (!v9)\n
        cgc_lost = -1;\n
    return rowCount;\n
}\n
", "4213497:sub_404af9": null, "4213820:sub_404c3c": null, "4214136:sub_404d78": null, "4214144:cgc_clearScreen": "long long cgc_clearScreen()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4214145:sub_404d81": null, "4214160:cgc_drawBoard": "extern struct_1 *board;\n
extern void* cgc_stdout;\n
extern unsigned int columns;\n
extern unsigned int rows;\n
\n
long long cgc_drawBoard()\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned int v3;  // ebp\n
    unsigned int *v4;  // rax\n
    unsigned long v5;  // rsi, Other Possible Types: unsigned long long\n
    unsigned int *v6;  // r14, Other Possible Types: unsigned long\n
    void* v7;  // rbp, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v8;  // ebp\n
\n
    v0 = v2;\n
    cgc_fprintf(cgc_stdout, \"\\tWelcome to Attackers General %s!\\n
\");\n
    if (columns >= -1)\n
    {\n
        v3 = -1;\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, \"-\");\n
            v3 += 1;\n
        } while (v3 <= columns);\n
    }\n
    cgc_fprintf(cgc_stdout, \"\\n
\");\n
    if (rows > 0)\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, \"|\");\n
            if (columns > 0)\n
            {\n
                v6 = 0;\n
                do\n
                {\n
                    v4 = *((*((&board->field_0 + 0x8 * v7)) + v6 * 4)) - 1;\n
                    v5 = \" \";\n
                    if (v4 <= 4)\n
                        v5 = &(&g_40739c)[*((4223900 + 0x4 * v4))];\n
                    cgc_fprintf(cgc_stdout, v5);\n
                    v6 += 1;\n
                } while (v6 < columns);\n
            }\n
            cgc_fprintf(cgc_stdout, \"|\\n
\");\n
            v7 += 1;\n
        } while (v7 < rows);\n
    }\n
    if (columns >= -1)\n
    {\n
        v8 = -1;\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, \"-\");\n
            v8 += 1;\n
        } while (v8 <= columns);\n
    }\n
    cgc_fprintf(cgc_stdout, \"\\n
\");\n
    return 0;\n
}\n
", "4214319:sub_404e2f": null, "4214380:sub_404e6c": null, "4214538:sub_404f0a": null, "4214544:cgc_setupNewGame": "extern struct_1 *board;\n
extern void* cgc_stdin;\n
extern unsigned int cgc_stdout[3];\n
extern unsigned int columns;\n
extern struct_1 *enemies;\n
extern struct_3 *enemyBullets;\n
extern struct_4 *playerName;\n
extern unsigned int rowCount;\n
extern unsigned int rows;\n
extern struct_5 *shipCords;\n
extern struct_3 *userBullets;\n
\n
long long cgc_setupNewGame()\n
{\n
    struct struct_0 **v1;  // r14\n
    unsigned long long *v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v3;  // rdx\n
    unsigned long v4;  // rsi\n
    struct struct_0 **v5;  // rcx, Other Possible Types: unsigned long\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    struct struct_0 **v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v8;  // rax\n
    unsigned long v9;  // rcx\n
    unsigned int v10;  // eax\n
    struct struct_2 **v11;  // rbx, Other Possible Types: unsigned long\n
    struct struct_2 **v12;  // rax\n
    struct struct_2 **v13;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = cgc_malloc(rows * 8);\n
    if (rows > 0)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            board[v2].field_0 = cgc_malloc(columns * 4);\n
            v2 += 1;\n
        } while (rows != v2);\n
        if (rows > 0)\n
        {\n
            v5 = 0;\n
            do\n
            {\n
                if (columns > 0)\n
                {\n
                    v3 = board[v5].field_0;\n
                    v4 = 0;\n
                    do\n
                    {\n
                        v3[v4] = 0;\n
                        v4 += 1;\n
                    } while (columns != v4);\n
                }\n
                v5 += 1;\n
            } while (v5 != rows);\n
        }\n
    }\n
    board = v1;\n
    shipCords = cgc_calloc(2, 4);\n
    shipCords->field_0 = 0;\n
    shipCords->field_4 = rows - 1;\n
    board[shipCords->field_4].field_0[shipCords->field_0].field_0 = 2;\n
    v6 = 0;\n
    cgc_fprintf(cgc_stdout, \"Please input your name:\\n
\");\n
    playerName = cgc_calloc(1, 0x100);\n
    cgc_fflush(cgc_stdout);\n
    cgc_freaduntil(playerName, 0x100, 10, cgc_stdin);\n
    do\n
    {\n
        if (playerName[v6].field_0 - 123 <= 229)\n
            playerName[v6].field_0 = 0;\n
        if (playerName[v6].field_0 == 10)\n
            playerName[v6].field_0 = 0;\n
        v6 += 1;\n
    } while (v6 != 8);\n
    enemies = cgc_calloc(rowCount, 8);\n
    if (rowCount > 0)\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            enemies[v7].field_0 = cgc_calloc((columns >> 31) + columns >> 1, 4);\n
            if (columns >= 2)\n
            {\n
                v8 = enemies[v7].field_0;\n
                v9 = 0;\n
                do\n
                {\n
                    v8[v9] = 1;\n
                    v9 += 1;\n
                } while (v9 < (columns >> 31) + columns >> 1);\n
            }\n
            v7 += 1;\n
        } while (v7 < rowCount);\n
    }\n
    cgc_setEnemies();\n
    userBullets = cgc_calloc(rows, 8);\n
    v10 = rows;\n
    if (rows > 0)\n
    {\n
        v11 = 0;\n
        do\n
        {\n
            userBullets[v11].field_0 = cgc_calloc(2, 4);\n
            userBullets[v11].field_0->field_0 = -1;\n
            v11 += 1;\n
            v10 = rows;\n
        } while (v11 < rows);\n
    }\n
    v12 = cgc_calloc(v10 * ((columns >> 31) + columns >> 1), 8);\n
    enemyBullets = v12;\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return 0;\n
    v13 = 0;\n
    do\n
    {\n
        enemyBullets[v13].field_0 = cgc_calloc(2, 4);\n
        enemyBullets[v13].field_0->field_0 = -1;\n
        v13 += 1;\n
    } while (v13 < rows * ((columns >> 31) + columns >> 1));\n
    return 0;\n
}\n
", "4214641:sub_404f71": null, "4214878:sub_40505e": null, "4214969:sub_4050b9": null, "4215358:sub_40523e": null, "4215360:cgc_getUserInput": "extern void* cgc_stdin;\n
extern unsigned int cgc_stdout[3];\n
\n
long long cgc_getUserInput()\n
{\n
    char *v1;  // rbx\n
    unsigned long long v2;  // rax\n
\n
    v1 = cgc_calloc(0x100, 1);\n
    cgc_fflush(cgc_stdout);\n
    v2 = cgc_freaduntil(v1, 200, 10, cgc_stdin);\n
    *(&v2) = *(v1);\n
    return v2;\n
}\n
", "4215426:sub_405282": null, "4215440:cgc_clearShip": "extern unsigned long long board;\n
extern struct_0 *shipCords;\n
\n
long long cgc_clearShip()\n
{\n
    unsigned int *v1;  // rax\n
\n
    v1 = *((board + shipCords->field_4 * 8));\n
    v1[shipCords->field_0] = 0;\n
    return v1;\n
}\n
", "4215473:sub_4052b1": null, "4215488:cgc_setShip": "extern unsigned long long board;\n
extern unsigned int cgc_lost;\n
extern struct_0 *shipCords;\n
\n
long long cgc_setShip()\n
{\n
    unsigned int *v1;  // rax\n
\n
    if (*((*((board + (shipCords->field_4 << 3))) + (shipCords->field_0 << 2))) == 5)\n
        cgc_lost = 1;\n
    v1 = *((board + shipCords->field_4 * 8));\n
    v1[shipCords->field_0] = 2;\n
    return v1;\n
}\n
", "4215548:sub_4052fc": null, "4215552:cgc_userFire": "extern unsigned int rows;\n
extern struct_1 *shipCords;\n
extern struct_3 *userBullets;\n
\n
long long cgc_userFire()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = -1;\n
    if (rows > 0)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            if (userBullets[v2].field_0->field_0 == -1)\n
            {\n
                v1 = v2;\n
                break;\n
            }\n
            v2 += 1;\n
        } while (rows != v2);\n
    }\n
    if (shipCords->field_4 > 0)\n
    {\n
        v1 = userBullets[v1].field_0;\n
        *(v1) = shipCords->field_0;\n
        *((v1 + 4)) = shipCords->field_4;\n
    }\n
    return v1;\n
}\n
", "4215644:sub_40535c": null, "4215648:cgc_moveUser": "extern struct_2 *board;\n
extern unsigned int cgc_lost;\n
extern void* cgc_stdin;\n
extern unsigned int cgc_stdout[3];\n
extern unsigned int columns;\n
extern unsigned int rows;\n
extern struct_0 *shipCords;\n
extern struct_2 *userBullets;\n
\n
long long cgc_moveUser()\n
{\n
    char *v1;  // rax\n
    unsigned long long v2;  // rax\n
    struct struct_0 **v3;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v4;  // rdx\n
    unsigned int *v5;  // rdx\n
    unsigned long long *v6;  // rdx\n
    unsigned long long *v7;  // rdx\n
    struct struct_1 **v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v9;  // rdx\n
    struct struct_0 **v10;  // rdx, Other Possible Types: unsigned long\n
    unsigned int *v11;  // rdx\n
    unsigned long long *v12;  // rdx\n
    unsigned int *v13;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long *v14;  // rdx\n
    unsigned int *v15;  // rcx\n
    unsigned long v16;  // rax\n
\n
    v1 = cgc_calloc(0x100, 1);\n
    cgc_fflush(cgc_stdout);\n
    cgc_freaduntil(v1, 200, 10, cgc_stdin);\n
    v2 = *(v1) - 97;\n
    switch (v2)\n
    {\n
    case 0:\n
        v3 = shipCords;\n
        v4 = shipCords->field_0;\n
        if (v4 <= 0)\n
            return shipCords;\n
        v8 = board;\n
        *((&board[*((&shipCords->field_0 + 4))].field_0->field_0 + 0x4 * v4)) = 0;\n
        v9 = shipCords->field_0;\n
        *(&shipCords->field_0) = v9 - 1;\n
        if (!(*((-4 + &board[*((&shipCords->field_0 + 4))].field_0->field_0 + 0x4 * v9)) == 5))\n
            goto LABEL_405528;\n
        break;\n
    case 3:\n
        v3 = shipCords;\n
        v5 = shipCords->field_0;\n
        if (v5 >= columns - 1)\n
            return shipCords;\n
        v8 = board;\n
        *((&board[*((&shipCords->field_0 + 4))].field_0->field_0 + 0x4 * v5)) = 0;\n
        v11 = shipCords->field_0;\n
        *(&shipCords->field_0) = v11 + 1;\n
        if (!(*((4 + &board[*((&shipCords->field_0 + 4))].field_0->field_0 + 0x4 * v11)) == 5))\n
            goto LABEL_405528;\n
        break;\n
    case 18:\n
        v3 = shipCords;\n
        v6 = *((&shipCords->field_0 + 4));\n
        if (v6 >= rows - 1)\n
            return shipCords;\n
        v8 = board;\n
        *((*((&board->field_0 + 0x8 * v6)) + shipCords->field_0 * 4)) = 0;\n
        v12 = *((&shipCords->field_0 + 4));\n
        *((&shipCords->field_0 + 4)) = v12 + 1;\n
        v13 = *((8 + &board->field_0 + 0x8 * v12));\n
        goto LABEL_405515;\n
    case 22:\n
        v3 = shipCords;\n
        v7 = *((&shipCords->field_0 + 4));\n
        if (v7 <= 0)\n
            return shipCords;\n
        v8 = board;\n
        *((*((&board->field_0 + 0x8 * v7)) + shipCords->field_0 * 4)) = 0;\n
        v14 = *((&shipCords->field_0 + 4));\n
        *((&shipCords->field_0 + 4)) = v14 - 1;\n
        v13 = *((-8 + &board->field_0 + 0x8 * v14));\n
        goto LABEL_405515;\n
    default:\n
        v3 = -1;\n
        if (rows > 0)\n
        {\n
            v10 = 0;\n
            do\n
            {\n
                if (userBullets[v10].field_0->field_0 == -1)\n
                {\n
                    v3 = v10;\n
                    break;\n
                }\n
                v10 += 1;\n
            } while (rows != v10);\n
        }\n
        if (*((&shipCords->field_0 + 4)) <= 0)\n
            return v3;\n
        v3 = userBullets[v3].field_0;\n
        *(v3) = shipCords->field_0;\n
        *((v3 + 4)) = *((&shipCords->field_0 + 4));\n
    }\n
LABEL_405515:\n
    if (!(*((v13 + (*(v3) << 2))) == 5))\n
        goto LABEL_405528;\n
    cgc_lost = 1;\n
LABEL_405528:\n
    v15 = *((v8 + *((v3 + 4)) * 8));\n
    v16 = *(v3);\n
    v15[v16] = 2;\n
    return v16;\n
}\n
", "4216165:sub_405565": null, "4216176:cgc_updateBullets": "extern unsigned int columns;\n
extern struct_3 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_1 *userBullets;\n
\n
long long cgc_updateBullets()\n
{\n
    struct struct_0 **v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned int v2[2];  // rdx\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // esi\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    struct struct_2 **v6;  // rdx, Other Possible Types: unsigned long\n
    unsigned int *v7;  // rsi\n
    unsigned int v8;  // edi\n
\n
    if (rows > 0)\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v2 = userBullets[v1].field_0;\n
            if (v2[0] != -1)\n
            {\n
                v3 = v2[1];\n
                if (!v3)\n
                {\n
                    v2[0] = -1;\n
                    v4 = -1;\n
                }\n
                else\n
                {\n
                    v4 = v3 - 1;\n
                }\n
                v2[1] = v4;\n
            }\n
            v1 += 1;\n
        } while (v1 < rows);\n
    }\n
    v5 = rows;\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return rows;\n
    v6 = 0;\n
    do\n
    {\n
        v7 = enemyBullets[v6].field_0;\n
        v8 = *(v7);\n
        if (v8 != -1)\n
        {\n
            if (v8 != v5 - 1)\n
                *(v7) = v8 + 1;\n
            else\n
                *(&v7) = -1;\n
        }\n
        v6 += 1;\n
        v5 = rows;\n
    } while (v6 < rows * ((columns >> 31) + columns >> 1));\n
    return rows;\n
}\n
", "4216196:sub_405584": null, "4216298:sub_4055ea": null, "4216373:sub_405635": null, "4216384:cgc_clearBullets": "extern unsigned long long board;\n
extern unsigned int columns;\n
extern struct_1 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_1 *userBullets;\n
\n
long long cgc_clearBullets()\n
{\n
    struct struct_0 **v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned int v2[2];  // rdi\n
    unsigned int *v3;  // rsi\n
    unsigned long v4;  // rdi\n
    struct struct_0 **v5;  // rdx, Other Possible Types: unsigned long\n
    unsigned int v6[2];  // rsi\n
    struct struct_2 **v7;  // rdi\n
    unsigned int *v8;  // rdi\n
    unsigned long v9;  // rsi\n
\n
    if (rows > 0)\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v2 = userBullets[v1].field_0;\n
            v3 = v2[0];\n
            if (v3 != -1)\n
            {\n
                v4 = *((board + v2[1] * 8));\n
                if (*((v4 + (v3 << 2))) == 4)\n
                    *((v4 + v3 * 4)) = 0;\n
            }\n
            v1 += 1;\n
        } while (v1 < rows);\n
    }\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return columns;\n
    v5 = 0;\n
    do\n
    {\n
        v6 = enemyBullets[v5].field_0;\n
        v7 = v6[0];\n
        if (v7 != -1)\n
        {\n
            v8 = *((board + v7 * 8));\n
            v9 = v6[1];\n
            if (v8[v9] == 5)\n
                v8[v9] = 0;\n
        }\n
        v5 += 1;\n
    } while (v5 < rows * ((columns >> 31) + columns >> 1));\n
    return enemyBullets;\n
}\n
", "4216411:sub_40565b": null, "4216587:sub_40570b": null, "4216592:cgc_setBullets": "extern unsigned long long board;\n
extern unsigned int cgc_lost;\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern unsigned long long enemies;\n
extern struct_3 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_2 *userBullets;\n
\n
long long cgc_setBullets()\n
{\n
    struct struct_1 **v1;  // rsi, Other Possible Types: unsigned long\n
    unsigned int *v2;  // rdi\n
    unsigned int *v3;  // rdx\n
    unsigned long v4;  // rcx\n
    unsigned int v5[2];  // rsi\n
    struct struct_1 **v6;  // rdi\n
    unsigned int *v7;  // rdi\n
    unsigned long v8;  // rsi\n
    struct struct_0 **v9;  // rdx, Other Possible Types: unsigned long\n
\n
    if (rows > 0)\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v2 = userBullets[v1].field_0;\n
            v3 = *(v2);\n
            if (v3 != -1)\n
            {\n
                v4 = *((board + v2[1] * 8));\n
                if (*((v4 + (v3 << 2))) != 3)\n
                {\n
                    *((v4 + v3 * 4)) = 4;\n
                }\n
                else\n
                {\n
                    *((v4 + v3 * 4)) = 0;\n
                    *((*((enemies + ((((cgc_turnCounter * -1717986919 >> 35) + (cgc_turnCounter * -1717986919 >> 63)) + v2[1] >> 31) + ((cgc_turnCounter * -1717986919 >> 35) + (cgc_turnCounter * -1717986919 >> 63)) + v2[1] >> 1) * 8)) + ((*(v2) >> 31) + *(v2) >> 1) * 4)) = 0;\n
                    *(&v2) = -1;\n
                }\n
            }\n
            v1 += 1;\n
        } while (v1 < rows);\n
    }\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return columns;\n
    v9 = 0;\n
    do\n
    {\n
        v5 = enemyBullets[v9].field_0;\n
        v6 = v5[0];\n
        if (v6 != -1)\n
        {\n
            v7 = *((board + v6 * 8));\n
            v8 = v5[1];\n
            if (v7[v8] == 2)\n
                cgc_lost = 1;\n
            else\n
                v7[v8] = 5;\n
        }\n
        v9 += 1;\n
    } while (v9 < rows * ((columns >> 31) + columns >> 1));\n
    return enemyBullets;\n
}\n
", "4216630:sub_405736": null, "4216817:sub_4057f1": null, "4216917:sub_405855": null, "4216928:main": "extern struct_2 *board;\n
extern unsigned int cgc_lost;\n
extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern unsigned long long cgc_stdin;\n
extern unsigned int cgc_stdout[3];\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_2 *enemyBullets;\n
extern unsigned long long g_4073db;\n
extern char g_4073df;\n
extern char g_4073e7;\n
extern unsigned long long g_4073e9;\n
extern unsigned long long g_407422;\n
extern unsigned long long g_407436;\n
extern unsigned long long g_407438;\n
extern unsigned long long g_40743a;\n
extern char *playerName;\n
extern unsigned int rows;\n
extern struct_0 *shipCords;\n
extern struct_3 *userBullets;\n
\n
int main()\n
{\n
    unsigned int v1;  // [bp-0x16c]\n
    unsigned long long v2;  // [bp-0x168]\n
    unsigned long long v3;  // [bp-0x160]\n
    char *v5;  // [bp-0x150]\n
    char *v6;  // [bp-0x148]\n
    void* v7;  // [bp-0x140]\n
    unsigned long v25;  // r14, Other Possible Types: unsigned int\n
    unsigned long v26;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long long v27;  // rax\n
    struct struct_1 **v28;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v29;  // rdx\n
    unsigned long v30;  // rsi\n
    struct struct_0 **v31;  // rdx, Other Possible Types: unsigned long\n
    unsigned int v32[2];  // rdi\n
    unsigned int *v33;  // rsi\n
    unsigned long v34;  // rdi\n
    struct struct_1 **v35;  // rdx, Other Possible Types: unsigned long\n
    unsigned int *v36;  // rsi\n
    struct struct_1 **v37;  // rdi\n
    unsigned int *v38;  // rdi\n
    unsigned long v39;  // rsi\n
    unsigned long long v40;  // rbp\n
    struct struct_0 **v41;  // rcx, Other Possible Types: unsigned long\n
    unsigned int v42[2];  // rdx\n
    unsigned int v43;  // esi\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // eax\n
    struct struct_1 **v46;  // rdx, Other Possible Types: unsigned long\n
    unsigned int *v47;  // rsi\n
    unsigned int v48;  // edi\n
    unsigned long long v49;  // rdx\n
    unsigned int v50;  // ecx\n
    unsigned int v51;  // eax\n
    unsigned long long v52;  // r13\n
    unsigned int v53;  // ecx\n
\n
    cgc_fbuffered(cgc_stdout, 1);\n
    if (!cgc_turnCounter)\n
    {\n
        cgc_setupNewGame();\n
        v25 = *(1128775684) ^ *(0x4347c000);\n
        v26 = *(1128775692) ^ *(1128775688);\n
        v27 = cgc_strcmp(playerName, \"magic\");\n
        if (!v27)\n
            v25 = v27;\n
        if (!v27)\n
            v26 = v27;\n
        cgc_seed1 = v25;\n
        cgc_seed2 = v26;\n
    }\n
    v50 = cgc_turnCounter;\n
    v51 = cgc_lost;\n
    if (!(cgc_turnCounter <= 9999))\n
        goto LABEL_405c27;\n
    if (!(!cgc_lost))\n
        goto LABEL_405c27;\n
    while (true)\n
    {\n
        if (v50)\n
        {\n
            if (rows > 0)\n
            {\n
                v28 = 0;\n
                do\n
                {\n
                    if (columns > 0)\n
                    {\n
                        v29 = board[v28].field_0;\n
                        v30 = 0;\n
                        do\n
                        {\n
                            if (v29[v30] == 3)\n
                                v29[v30] = 0;\n
                            v30 += 1;\n
                        } while (v30 < columns);\n
                    }\n
                    v28 += 1;\n
                } while (v28 < rows);\n
            }\n
            cgc_updateEnemies();\n
            cgc_setEnemies();\n
            if (rows > 0)\n
            {\n
                v31 = 0;\n
                do\n
                {\n
                    v32 = userBullets[v31].field_0;\n
                    v33 = v32[0];\n
                    if (v33 != -1)\n
                    {\n
                        v34 = board[v32[1]].field_0;\n
                        if (*((v34 + (v33 << 2))) == 4)\n
                            *((v34 + v33 * 4)) = 0;\n
                    }\n
                    v31 += 1;\n
                } while (v31 < rows);\n
            }\n
            if (rows * ((columns >> 31) + columns >> 1) > 0)\n
            {\n
                v35 = 0;\n
                do\n
                {\n
                    v36 = enemyBullets[v35].field_0;\n
                    v37 = *(v36);\n
                    if (v37 != -1)\n
                    {\n
                        v38 = *((&board->field_0 + 0x8 * v37));\n
                        v39 = v36[1];\n
                        if (v38[v39] == 5)\n
                            v38[v39] = 0;\n
                    }\n
                    v35 += 1;\n
                    v40 = columns;\n
                } while (v35 < rows * ((columns >> 31) + columns >> 1));\n
            }\n
            if (rows > 0)\n
            {\n
                v41 = 0;\n
                do\n
                {\n
                    v42 = userBullets[v41].field_0;\n
                    if (v42[0] != -1)\n
                    {\n
                        v43 = v42[1];\n
                        if (!v43)\n
                        {\n
                            v42[0] = -1;\n
                            v44 = -1;\n
                        }\n
                        else\n
                        {\n
                            v44 = v43 - 1;\n
                        }\n
                        v42[1] = v44;\n
                    }\n
                    v41 += 1;\n
                } while (v41 < rows);\n
            }\n
            v45 = rows;\n
            if (rows * ((columns >> 31) + columns >> 1) > 0)\n
            {\n
                v46 = 0;\n
                do\n
                {\n
                    v47 = enemyBullets[v46].field_0;\n
                    v48 = *(v47);\n
                    if (v48 != -1)\n
                    {\n
                        if (v48 == v45 - 1)\n
                            *(&v47) = -1;\n
                        else\n
                            *(v47) = v48 + 1;\n
                    }\n
                    v46 += 1;\n
                    v45 = rows;\n
                } while (v46 < rows * ((columns >> 31) + columns >> 1));\n
            }\n
            cgc_setBullets();\n
        }\n
        v49 = shipCords->field_0;\n
        if (v49 != -1)\n
        {\n
            if (board[shipCords->field_4].field_0[v49].field_0 == 5)\n
                cgc_lost = 1;\n
            board[shipCords->field_4].field_0[shipCords->field_0].field_0 = 2;\n
        }\n
        cgc_drawBoard();\n
        cgc_fprintf(cgc_stdout, \"\\t\\tLevel #%d\\n
\");\n
        cgc_moveUser();\n
        cgc_turnCounter = cgc_turnCounter + 1;\n
        if ((((cgc_turnCounter + 1) * 1717986919 >> 63) + ((cgc_turnCounter + 1) * 1717986919 >> 35)) + 1 == rows - 2)\n
            cgc_lost = 1;\n
        v50 = cgc_turnCounter;\n
        v51 = cgc_lost;\n
        if (!(cgc_turnCounter <= 9999))\n
            goto LABEL_405c27;\n
        if (cgc_lost)\n
        {\n
LABEL_405c27:\n
            if (v51 == -1)\n
            {\n
                v6 = cgc_calloc(100000, 1);\n
                v7 = cgc_stdin;\n
                v3 = 5;\n
                v2 = 4;\n
                v52 = \"-\";\n
                v5 = 0;\n
                v1 = 0;\n
                v53 = 0;\n
            }\n
            else\n
            {\n
                if (!(v51 == 1))\n
                    goto LABEL_0x405fd9;\n
                cgc_fprintf(cgc_stdout, \"\\t\\tyou lose\\n
\\n
\\n
\\n
\\n
\");\n
            }\n
        }\n
    }\n
}\n
", "4217132:sub_40592c": null, "4217169:sub_405951": null, "4217215:sub_40597f": null, "4217253:sub_4059a5": null, "4217316:sub_4059e4": null, "4217372:sub_405a1c": null, "4217450:sub_405a6a": null, "4217476:sub_405a84": null, "4217539:sub_405ac3": null, "4217591:sub_405af7": null, "4217668:sub_405b44": null, "4218872:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}