{"4202496:_init": "extern struct_0 *g_4083a0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_4083a0;\n
    if (g_4083a0)\n
        v1 = g_4083a0();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_4083c0;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_4083c0;\n
    goto *(4228040);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4228016);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408398;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_4083a8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_4083b0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_4083b0)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202933:sub_4021b5": null, "4202944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202991:sub_4021ef": null, "4202992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203199:sub_4022bf": null, "4203200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203221:sub_4022d5": null, "4203232:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4219024];\n
    char field_406090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203247:sub_4022ef": null, "4203248:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203279:sub_40230f": null, "4203280:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203354:sub_40235a": null, "4203360:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_408618;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_1 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_1 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_0 *v20;  // rax\n
\n
    if (!a0)\n
    {\n
LABEL_402445:\n
        return 0;\n
    }\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            return 0;\n
        v7 = *(&v0);\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v6 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v6 = a0;\n
    if (!(v6 <= 2147483647))\n
        goto LABEL_402445;\n
    v9 = v6 + 24;\n
    v10 = cgc_get_size_class(v9);\n
    if (v10 <= 31)\n
    {\n
        v11 = *((&cgc_free_lists + 0x8 * v10));\n
        if (!v11)\n
            goto LABEL_402402;\n
        else\n
            goto LABEL_0x402420;\n
    }\n
    else\n
    {\n
        if (!cgc_allocate(v9, rsi<8>, rdx<8>))\n
        {\n
            v15 = *(&v0);\n
            if (v15)\n
            {\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_408618;\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
        goto LABEL_402445;\n
    }\n
    while (true)\n
    {\n
        while (true)\n
        {\n
LABEL_402402:\n
            v10 += 1;\n
            if (v10 == 32)\n
                break;\n
            v11 = *(&(&cgc_free_lists)[8 * v10]);\n
        }\n
        while (*(v11) < v9)\n
        {\n
            v11 = *((v11 + 16));\n
            if (!v11)\n
                goto LABEL_402402;\n
        }\n
    }\n
}\n
", "4203780:sub_402504": null, "4203792:cgc_get_size_class": "extern unsigned long long g_408418;\n
extern unsigned long long g_408420;\n
extern unsigned long long g_408428;\n
extern unsigned long long g_408430;\n
extern unsigned long long g_408438;\n
extern unsigned long long g_408440;\n
extern unsigned long long g_408448;\n
extern unsigned long long g_408450;\n
extern unsigned long long g_408458;\n
extern unsigned long long g_408460;\n
extern unsigned long long g_408468;\n
extern unsigned long long g_408470;\n
extern unsigned long long g_408478;\n
extern unsigned long long g_408480;\n
extern unsigned long long g_408488;\n
extern unsigned long long g_408490;\n
extern unsigned long long g_408498;\n
extern unsigned long long g_4084a0;\n
extern unsigned long long g_4084a8;\n
extern unsigned long long g_4084b0;\n
extern unsigned long long g_4084b8;\n
extern unsigned long long g_4084c0;\n
extern unsigned long long g_4084c8;\n
extern unsigned long long g_4084d0;\n
extern unsigned long long g_4084d8;\n
extern unsigned long long g_4084e0;\n
extern unsigned long long g_4084e8;\n
extern unsigned long long g_4084f0;\n
extern unsigned long long g_4084f8;\n
extern unsigned long long g_408500;\n
extern unsigned long long g_408508;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_408418 < a0)\n
    {\n
        v1 = 2;\n
        if (g_408420 < a0)\n
        {\n
            v1 = 3;\n
            if (g_408428 < a0)\n
            {\n
                v1 = 4;\n
                if (g_408430 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_408438 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_408440 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_408448 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_408450 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_408458 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_408460 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_408468 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_408470 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_408478 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_408480 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_408488 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_408490 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_408498 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_4084a0 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_4084a8 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_4084b0 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_4084b8 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_4084c0 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_4084c8 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_4084d0 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_4084d8 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_4084e0 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_4084e8 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_4084f0 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_4084f8 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_408500 < a0)\n
                                                                                                                            v1 = 31 + (g_408508 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204327:sub_402727": null, "4204336:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    struct struct_0 **v1;  // rax\n
    struct_0 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4204405:sub_402775": null, "4204416:cgc_remove_from_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_1 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_0 *v2;  // rcx\n
    struct_3 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4204493:sub_4027cd": null, "4204496:cgc_coalesce": "typedef struct struct_5 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_5 *field_20;\n
    struct struct_4 *field_28;\n
} struct_5;\n
\n
typedef struct struct_8 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_5 *field_20;\n
    struct struct_2 *field_28;\n
} struct_8;\n
\n
typedef struct struct_7 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_7;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_6 *field_20;\n
    struct struct_4 *field_28;\n
} struct_6;\n
\n
typedef struct struct_9 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_9;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_coalesce(struct_8 *a0)\n
{\n
    struct_5 *v0;  // [bp-0x28]\n
    struct_4 *v2;  // rax, Other Possible Types: unsigned long, struct_2 *, struct_5 *\n
    struct_7 *v3;  // rbx\n
    struct_9 *v4;  // rax\n
    unsigned long v5;  // rax\n
    struct_0 *v6;  // rdx\n
    struct_0 *v7;  // rcx\n
    unsigned long v8;  // rax\n
    struct_1 *v9;  // rcx\n
    struct_0 *v10;  // rcx\n
    struct_1 *v11;  // rdx\n
    struct_1 *v12;  // rdx\n
    struct_6 *v13;  // r12, Other Possible Types: unsigned long\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // rax\n
    struct_0 *v17;  // rcx\n
    struct_0 *v18;  // rcx\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    struct_1 *v21;  // rdx\n
    struct_0 *v22;  // rcx\n
    struct_1 *v23;  // rdx\n
    struct_1 *v24;  // rdx\n
    unsigned long v25;  // r12\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rbx\n
    unsigned long v28;  // rax\n
    struct_0 *v29;  // rcx\n
    struct_1 *v30;  // rcx\n
    struct_2 *v31;  // rbx\n
    unsigned long v32;  // r12\n
    unsigned long v33;  // rax\n
    struct_5 *v34;  // rcx, Other Possible Types: unsigned long\n
    struct_1 *v35;  // rdx\n
    struct_1 *v36;  // rcx\n
    struct_5 *v37;  // rcx, Other Possible Types: unsigned long\n
    struct_2 *v38;  // rbx\n
    unsigned long long v39;  // r12\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rax\n
    struct_1 *v42;  // rcx\n
    struct_5 *v43;  // rcx, Other Possible Types: unsigned long\n
    struct_4 *v44;  // rax, Other Possible Types: unsigned long\n
    struct_5 *v45;  // rcx\n
\n
    v0 = v2;\n
    v3 = a0->field_28;\n
    if (!v3)\n
        return v2;\n
    v13 = a0->field_20;\n
    if (!v3->field_8)\n
    {\n
        if (!v13)\n
        {\n
            return v2;\n
        }\n
        else if (!v13->field_8)\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v5 = cgc_get_size_class(*(&v13->field_0));\n
            v7 = v13->padding_18;\n
            if (v7)\n
                v7->field_10 = v13->field_10;\n
            v11 = v13->field_10;\n
            if (v11)\n
                v11->field_18 = v7;\n
            if (*(&(&cgc_free_lists)[8 * v5]) == v13)\n
                *(&(&cgc_free_lists)[8 * v5]) = v11;\n
            *(&v13->field_10) = 0;\n
            v13->field_8 = 0;\n
            v15 = a0->field_0;\n
            v16 = cgc_get_size_class(v15);\n
            v18 = a0->padding_18;\n
            if (v18)\n
                v18->field_10 = a0->field_10;\n
            v23 = a0->field_10;\n
            if (v23)\n
                v23->field_18 = v18;\n
            if (*(&(&cgc_free_lists)[8 * v16]) == a0)\n
                *(&(&cgc_free_lists)[8 * v16]) = v23;\n
            *(&a0->field_10) = 0;\n
            a0->field_8 = 0;\n
            v27 = v15 + a0->field_20->field_0;\n
            a0->field_0 = v27;\n
            v28 = cgc_get_size_class(v27);\n
            a0->field_8 = 1;\n
            v30 = *(&(&cgc_free_lists)[8 * v28]);\n
            if (v30)\n
            {\n
                a0->field_10 = &v30->padding_0;\n
                *((*(&(&cgc_free_lists)[8 * v28]) + 24)) = a0;\n
                *(&(&cgc_free_lists)[8 * v28]) = a0;\n
                *(&a0->padding_18[0]) = 0;\n
                v34 = a0->field_20;\n
                v2 = v34->field_28;\n
                if (!v2)\n
                    goto LABEL_402b66;\n
            }\n
            else\n
            {\n
                *(&(&cgc_free_lists)[8 * v28]) = a0;\n
                v34 = a0->field_20;\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b66;\n
            }\n
            *((v2 + 32)) = *((v34 + 32));\n
LABEL_402b66:\n
            v37 = *((v34 + 32));\n
            if (!v37)\n
                return v2;\n
        }\n
LABEL_402b6f:\n
        *((v37 + 40)) = v2;\n
        return v2;\n
    }\n
    if (v13 && v13->field_8)\n
    {\n
        v4 = cgc_get_size_class(*(&v3->field_0));\n
        v6 = v3->padding_18;\n
        if (v6)\n
            v6->field_10 = v3->field_10;\n
        v9 = v3->field_10;\n
        if (v9)\n
            v9->field_18 = v6;\n
        if (*((&cgc_free_lists + 0x8 * v4)) == v3)\n
        {\n
            *((&cgc_free_lists + 0x8 * v4)) = v9;\n
            v13 = a0->field_20;\n
        }\n
        *(&v3->field_10) = 0;\n
        v3->field_8 = 0;\n
        v14 = cgc_get_size_class(*(v13));\n
        v17 = *((v13 + 24));\n
        if (v17)\n
            v17->field_10 = *((v13 + 16));\n
        v21 = *((v13 + 16));\n
        if (v21)\n
            v21->field_18 = v17;\n
        if (*(&(&cgc_free_lists)[8 * v14]) == v13)\n
            *(&(&cgc_free_lists)[8 * v14]) = v21;\n
        *((v13 + 16)) = 0;\n
        *((v13 + 8)) = 0;\n
        v25 = a0->field_0;\n
        v26 = cgc_get_size_class(v25);\n
        v29 = a0->padding_18;\n
        if (v29)\n
            v29->field_10 = a0->field_10;\n
        v35 = a0->field_10;\n
        if (v35)\n
            v35->field_18 = v29;\n
        if (*(&(&cgc_free_lists)[8 * v26]) == a0)\n
            *(&(&cgc_free_lists)[8 * v26]) = v35;\n
        *(&a0->field_10) = 0;\n
        a0->field_8 = 0;\n
        v38 = a0->field_28;\n
        v39 = v25 + v38->field_0;\n
        v38->field_0 = v39;\n
        v40 = v39 + a0->field_20->field_0;\n
        v38->field_0 = v40;\n
        v41 = cgc_get_size_class(v40);\n
        v38->field_8 = 1;\n
        v42 = *(&(&cgc_free_lists)[8 * v41]);\n
        if (v42)\n
        {\n
            v38->field_10 = &v42->padding_0;\n
            *((*(&(&cgc_free_lists)[8 * v41]) + 24)) = v38;\n
            *(&(&cgc_free_lists)[8 * v41]) = v38;\n
            *(&v38->padding_18[0]) = 0;\n
            v43 = a0->field_20;\n
            v44 = v43->field_28;\n
            if (!v44)\n
                goto LABEL_402942;\n
        }\n
        else\n
        {\n
            *(&(&cgc_free_lists)[8 * v41]) = v38;\n
            v43 = a0->field_20;\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_402942;\n
        }\n
        *((v44 + 32)) = *((v43 + 32));\n
LABEL_402942:\n
        v45 = *((v43 + 32));\n
        if (v45)\n
        {\n
            v45->field_28 = v44;\n
            v2 = a0->field_28;\n
            if (!v2)\n
                goto LABEL_402a59;\n
            goto LABEL_402a51;\n
        }\n
    }\n
    v2 = a0->field_20;\n
    if (!v2)\n
        return a0->field_20;\n
    if (*((v2 + 8)))\n
        return a0->field_20;\n
    v8 = cgc_get_size_class(*(&v3->field_0));\n
    v10 = v3->padding_18;\n
    if (v10)\n
        v10->field_10 = v3->field_10;\n
    v12 = v3->field_10;\n
    if (v12)\n
        v12->field_18 = v10;\n
    if (*(&(&cgc_free_lists)[8 * v8]) == v3)\n
        *(&(&cgc_free_lists)[8 * v8]) = v12;\n
    *(&v3->field_10) = 0;\n
    v3->field_8 = 0;\n
    v19 = a0->field_0;\n
    v20 = cgc_get_size_class(v19);\n
    v22 = a0->padding_18;\n
    if (v22)\n
        v22->field_10 = a0->field_10;\n
    v24 = a0->field_10;\n
    if (v24)\n
        v24->field_18 = v22;\n
    if (*(&(&cgc_free_lists)[8 * v20]) == a0)\n
        *(&(&cgc_free_lists)[8 * v20]) = v24;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    v31 = a0->field_28;\n
    v32 = v19 + v31->field_0;\n
    v31->field_0 = v32;\n
    v33 = cgc_get_size_class(v32);\n
    v31->field_8 = 1;\n
    v36 = *(&(&cgc_free_lists)[8 * v33]);\n
    if (v36)\n
    {\n
        v31->field_10 = &v36->padding_0;\n
        *((*(&(&cgc_free_lists)[8 * v33]) + 24)) = v31;\n
        *(&(&cgc_free_lists)[8 * v33]) = v31;\n
        *(&v31->padding_18[0]) = 0;\n
    }\n
    else\n
    {\n
        *(&(&cgc_free_lists)[8 * v33]) = v31;\n
        v2 = a0->field_28;\n
        if (!v2)\n
            goto LABEL_402a59;\n
LABEL_402a51:\n
        *((v2 + 32)) = a0->field_20;\n
LABEL_402a59:\n
        v37 = a0->field_20;\n
        if (!v37)\n
            return v2;\n
        goto LABEL_402b6f;\n
    }\n
    v2 = a0->field_28;\n
    if (!v2)\n
        goto LABEL_402a59;\n
    goto LABEL_402a51;\n
}\n
", "4205506:sub_402bc2": null, "4205520:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205562:sub_402bfa": null, "4205568:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205614:sub_402c2e": null, "4205616:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_402cc4:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_402c57;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_402c57:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_402cc4;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_402c57;\n
}\n
", "4206047:sub_402ddf": null, "4206048:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_402f2f:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_402e19;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_402e19:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_402f2f;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_402e19;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_402eb7:\n
            v38 = a2;\n
            goto LABEL_402eba;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_402eb7;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_402eb7;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_402eba:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4206983:sub_403187": null, "4206992:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_403309;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_403309:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_403309;\n
}\n
", "4207390:sub_40331e": null, "4207392:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned long v3;  // r12, Other Possible Types: unsigned long long\n
    void* v4;  // r14, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v5;  // rbp, Other Possible Types: unsigned long long\n
    char v6;  // al\n
    char v7;  // cl\n
\n
    v3 = a1;\n
    v4 = 0;\n
    v1 = a4;\n
    if (a1 >= a2)\n
    {\n
        a3 -= 1;\n
        v3 = (0 CONCAT a1) /m a2 >> 32;\n
        v4 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
    }\n
    if (a3 > 0 && !v4)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            if ((v1 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
        }\n
    }\n
    v6 = (!(v1 & 2) ? v3 + 55 : v3 + 87);\n
    v7 = v3 + 48;\n
    if (10 <= v3)\n
        v7 = v6;\n
    v0 = v7;\n
    cgc_transmit();\n
    return v4 + 1;\n
}\n
", "4207643:sub_40341b": null, "4207648:cgc_fdprintf": "extern unsigned long long g_406110;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    char *v31;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    void* v33;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v37;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v38;  // rcx\n
    unsigned long long v39;  // rcx\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v41;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v42;  // rax\n
    struct struct_0 **v43;  // rax\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v46;  // rax, Other Possible Types: unsigned long\n
    unsigned long v47;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v49;  // rdx, Other Possible Types: unsigned long long\n
    char *v50;  // rbp\n
    unsigned long long v51;  // r12, Other Possible Types: unsigned long\n
    unsigned long v52;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v53;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v51 = &v5;\n
    do\n
    {\n
        v31 = a1 + 1;\n
        v4 = v31;\n
        if (*(a1) == 37)\n
        {\n
            v32 = v51;\n
            v33 = 0;\n
            v34 = 0;\n
            a0 = v31;\n
            while (true)\n
            {\n
                v31 = a0 + 1;\n
                v4 = v31;\n
                a3 = *(a0);\n
                a2 = a3;\n
                if ((a2 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol();\n
                a0 = v4;\n
            }\n
            a1 = a2 - 88;\n
            switch (a1)\n
            {\n
            case 0:\n
                v33 = v33 | 2;\n
                v36 = v1;\n
                if (v36 > 40)\n
                {\n
LABEL_4035a2:\n
                    v40 = v2;\n
                    v2 = v40 + 8;\n
LABEL_4035b0:\n
                    v47 = *(v40);\n
                    v48 = v30;\n
                    v49 = 16;\n
                    goto LABEL_40375a;\n
                }\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_40358b:\n
                v0 = a3;\n
                goto LABEL_403658;\n
            case 11:\n
                a3 = v1;\n
                if (a3 <= 40)\n
                {\n
                    v41 = a3 + v3;\n
                    a3 = a3 + 8;\n
                    v1 = a3;\n
                }\n
                else\n
                {\n
                    v41 = v2;\n
                    v2 = v41 + 8;\n
                }\n
                v51 = rbx<8>;\n
                v0 = *(v41);\n
                goto LABEL_4034d4;\n
            case 12:\n
                v37 = v1;\n
                if (v37 <= 40)\n
                {\n
                    v42 = v37 + v3;\n
                    v37 = v37 + 8;\n
                    v1 = v37;\n
                    v52 = *(v42);\n
                    if (!(v52 < 0))\n
                        goto LABEL_4036bd;\n
                }\n
                else\n
                {\n
                    v43 = v2;\n
                    v2 = v43 + 1;\n
                    v52 = *(v43);\n
                    if (!(v52 < 0))\n
                        goto LABEL_4036bd;\n
                }\n
                v0 = 45;\n
                cgc_transmit(a0, a1, &g_406110, v37);\n
                v52 = -(v52);\n
LABEL_4036bd:\n
                cgc_output_number_printf(v30, v52, 10, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 27:\n
                v38 = v1;\n
                if (v38 > 40)\n
                {\n
                    v44 = v2;\n
                    v45 = v44 + 8;\n
                    v2 = v45;\n
                }\n
                else\n
                {\n
                    v44 = v38 + v3;\n
                    v45 = v38 + 8;\n
                    v1 = v45;\n
                }\n
                v51 = rbx<8>;\n
                v50 = *(v44);\n
                if (cgc_strlen(v50))\n
                {\n
                    v53 = 0;\n
                    do\n
                    {\n
                        v0 = v50[v53];\n
                        cgc_transmit(a0, a1, &g_406110, v45);\n
                        v53 += 1;\n
                    } while (cgc_strlen(v50) > v53);\n
                }\n
                break;\n
            case 29:\n
                v39 = v1;\n
                if (v39 <= 40)\n
                {\n
                    v46 = v39 + v3;\n
                    v1 = v39 + 8;\n
                }\n
                else\n
                {\n
                    v46 = v2;\n
                    v2 = v46 + 8;\n
                }\n
                v47 = *(v46);\n
                v48 = v30;\n
                v49 = 10;\n
LABEL_40375a:\n
                cgc_output_number_printf(v48, v47, v49, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 32:\n
                v36 = v1;\n
                if (!(v36 <= 40))\n
                    goto LABEL_4035a2;\n
                goto LABEL_40357a;\n
            default:\n
                if (a2 == 37)\n
                {\n
                    v0 = 37;\n
LABEL_403658:\n
                    v51 = rbx<8>;\n
                    goto LABEL_4034d4;\n
                }\n
                if (a2 == 48)\n
                    goto LABEL_0x403556;\n
                else\n
                    goto LABEL_40358b;\n
            }\n
LABEL_40357a:\n
            v40 = v36 + v3;\n
            v1 = v36 + 8;\n
            goto LABEL_4035b0;\n
        }\n
        v0 = *(a1);\n
LABEL_4034d4:\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4207822:sub_4034ce": null, "4207934:sub_40353e": null, "4207966:sub_40355e": null, "4208512:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_35;  // tmp #35\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    char v14[2];  // rdx, Other Possible Types: unsigned long\n
    char v15[2];  // rdx\n
    char v16[2];  // rdx\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            v14 = *(a1);\n
            if ((v9 & 1))\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 48;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 48;\n
                        v16 = *(a1);\n
                        *(a1) = &v16[1];\n
                        *(a0) = *(a0) + 1;\n
                        v16[1] = 48;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 32;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 32;\n
                        v15 = *(a1);\n
                        *(a1) = &v15[1];\n
                        *(a0) = *(a0) + 1;\n
                        v15[1] = 32;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v17 + v12;\n
    *(a1) = &*(a1)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v11 + 1;\n
    return v18;\n
}\n
", "4208831:sub_4038bf": null, "4208832:cgc_sprintf": "typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, struct_2 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_1 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned int *v4;  // [bp-0xf8]\n
    struct_2 *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_0 *v31;  // r14\n
    struct struct_1 **v32;  // r13\n
    struct_2 *v33;  // rdi, Other Possible Types: unsigned long\n
    char *v34;  // rcx\n
    void* v36;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v37;  // rbp\n
    struct_2 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v40;  // rcx\n
    unsigned int v41;  // esi\n
    unsigned long long v43;  // rax\n
    char *v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rdx\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned long v48;  // rdx, Other Possible Types: unsigned long long\n
    struct struct_1 **v49;  // rcx\n
    struct struct_1 **v50;  // rax, Other Possible Types: unsigned long\n
    struct struct_1 **v51;  // rcx, Other Possible Types: unsigned long\n
    char *v52;  // rcx\n
    char *v53;  // rbp\n
    unsigned long v54;  // r14\n
    unsigned int v55;  // r13d\n
    struct_0 *v56;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v57;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v58;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_2 **v59;  // rbx\n
    unsigned long v60;  // r15\n
    struct struct_2 **v61;  // r15\n
    struct_0 *v62;  // r14\n
    struct struct_1 **v63;  // r13\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v5 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v34 = v1;\n
                *(v34) = *(a1);\n
                v1 = v34 + 1;\n
            }\n
            else\n
            {\n
                v36 = 0;\n
                while (true)\n
                {\n
                    v37 = v36 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v36;\n
                    do\n
                    {\n
                        v36 = v39;\n
                        v5 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = v40;\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    switch (v41)\n
                    {\n
                    case 37:\n
                        v44 = v1;\n
                        *(v44) = 37;\n
                        goto LABEL_403a9d;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v43 = cgc_strtol(v38 - 2, &v5, 10);\n
                        v33 = v5;\n
                        continue;\n
                    case 100:\n
                        v45 = v2;\n
                        if (v45 <= 40)\n
                        {\n
                            v2 = v45 + 8;\n
                            v48 = *((v45 + v4));\n
                            if (!(v48 < 0))\n
                                goto LABEL_403ad7;\n
                        }\n
                        else\n
                        {\n
                            v49 = v3;\n
                            v3 = v49 + 1;\n
                            v48 = *(v49);\n
                            if (!(v48 < 0))\n
                                goto LABEL_403ad7;\n
                        }\n
                        v52 = v1;\n
                        *(v52) = 45;\n
                        v1 = v52 + 1;\n
                        v0 += 1;\n
                        v48 = -(v48);\n
LABEL_403ad7:\n
                        v56 = *(&v0);\n
                        v57 = v1;\n
                        v58 = 10;\n
LABEL_403ae2:\n
                        cgc_output_number_sprintf(v56, v57, v48, v58, 0, v36);\n
                        break;\n
                    case 115:\n
                        v46 = v2;\n
                        if (v46 > 40)\n
                        {\n
                            v50 = v3;\n
                            v3 = v50 + 8;\n
                        }\n
                        else\n
                        {\n
                            v50 = v46 + v4;\n
                            v2 = v46 + 8;\n
                        }\n
                        v53 = *(v50);\n
                        v54 = v1;\n
                        v55 = v0;\n
                        if (cgc_strlen(v53))\n
                        {\n
                            v59 = r15<8>;\n
                            v60 = 0;\n
                            do\n
                            {\n
                                *((v54 + v60)) = v53[v60];\n
                                v60 += 1;\n
                            } while (cgc_strlen(v53) > v60);\n
                            v54 += v60;\n
                            v55 += v60;\n
                            v61 = rbx<8>;\n
                        }\n
                        v1 = v54;\n
                        v0 = v55;\n
                        v62 = &v0;\n
                        v63 = &v1;\n
                        break;\n
                    case 88:\n
                        v36 = v36 | 2;\n
                    case 120:\n
                        v47 = v2;\n
                        if (v47 > 40)\n
                        {\n
                            v51 = v3;\n
                            v3 = v51 + 8;\n
                        }\n
                        else\n
                        {\n
                            v51 = v47 + v4;\n
                            v2 = v47 + 8;\n
                        }\n
                        v48 = *(v51);\n
                        v56 = r14<8>;\n
                        v57 = r13<8>;\n
                        v58 = 16;\n
                        goto LABEL_403ae2;\n
                    default:\n
                        v44 = v1;\n
                        *(v44) = v40;\n
LABEL_403a9d:\n
                        v1 = v44 + 1;\n
                        goto LABEL_403990;\n
                    }\n
                }\n
            }\n
LABEL_403990:\n
            v0 += 1;\n
            a1 = v5;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4209020:sub_40397c": null, "4209535:sub_403b7f": null, "4209536:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4209647:sub_403bef": null, "4209648:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_403c47;\n
        }\n
    }\n
LABEL_403c47:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4209670:sub_403c06": null, "4209765:sub_403c65": null, "4209776:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4209814:sub_403c96": null, "4209824:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    char v1[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        do\n
        {\n
            if (v2 == a1)\n
                return v1;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
        } while (v2);\n
    }\n
    if (!a1)\n
        return v1;\n
    return 0;\n
}\n
", "4209868:sub_403ccc": null, "4209872:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4209925:sub_403d05": null, "4209936:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4209983:sub_403d3f": null, "4209984:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210043:sub_403d7b": null, "4210048:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210076:sub_403d9c": null, "4210080:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4210137:sub_403dd9": null, "4210197:sub_403e15": null, "4210208:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a0) - *(a1);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a0) - *(a1);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v2) - *(v3);\n
        }\n
    }\n
}\n
", "4210290:sub_403e72": null, "4210304:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_403fc0:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_403fc0;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_403fc0;\n
}\n
", "4210639:sub_403fcf": null, "4210640:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_404029;\n
                }\n
                goto LABEL_404027;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_404027:\n
    v3 = 0;\n
LABEL_404029:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4210738:sub_404032": null, "4210752:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_404120;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_404120:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_40413a;\n
                    else\n
                        goto LABEL_404160;\n
                }\n
LABEL_40413a:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_404160;\n
            }\n
        }\n
LABEL_404160:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4210787:sub_404063": null, "4210969:sub_404119": null, "4211074:sub_404182": null, "4211088:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4211093:sub_404195": null, "4211104:cgc_send_n_bytes": "long long cgc_send_n_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    void* v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp, Other Possible Types: unsigned long long\n
\n
    if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        v3 = a1;\n
        do\n
        {\n
            if (cgc_transmit(a0, a1, a2, v4))\n
            {\n
                v6 = 4294967295;\n
                goto LABEL_404215;\n
            }\n
            v5 = v0;\n
            if (!v5)\n
            {\n
                v6 = a1 - v3;\n
                goto LABEL_404215;\n
            }\n
            tmp_2 = v3;\n
            v3 -= v5;\n
        } while (tmp_2 != v5);\n
        v3 = 0;\n
LABEL_404215:\n
        return v6;\n
    }\n
}\n
", "4211236:sub_404224": null, "4211248:cgc_read_n_bytes": "long long cgc_read_n_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    void* v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp, Other Possible Types: unsigned long long\n
\n
    if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        v3 = a1;\n
        do\n
        {\n
            if (cgc_receive(a0, a1, a2, v4))\n
            {\n
                v6 = 4294967295;\n
                goto LABEL_4042a5;\n
            }\n
            v5 = v0;\n
            if (!v5)\n
            {\n
                v6 = a1 - v3;\n
                goto LABEL_4042a5;\n
            }\n
            tmp_2 = v3;\n
            v3 -= v5;\n
        } while (tmp_2 != v5);\n
        v3 = 0;\n
LABEL_4042a5:\n
        return v6;\n
    }\n
}\n
", "4211380:sub_4042b4": null, "4211392:cgc_transmit_string": "long long cgc_transmit_string(unsigned long a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    unsigned long long v2;  // rax\n
    unsigned long long v3;  // r14\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // rax\n
    void* v7;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rax\n
\n
    v2 = cgc_strlen(a1);\n
    if (!v2)\n
        return 0;\n
    v3 = v2;\n
    if (a1)\n
    {\n
        v0 = 0;\n
        v7 = v2;\n
        while (!cgc_transmit(a1, a1, v4, v5))\n
        {\n
            v6 = v0;\n
            if (!v6)\n
            {\n
LABEL_40432c:\n
                v8 = v3 - v7;\n
                goto LABEL_40433f;\n
            }\n
            tmp_2 = v7;\n
            v7 -= v6;\n
            if (tmp_2 == v6)\n
            {\n
                v7 = 0;\n
                goto LABEL_40432c;\n
            }\n
        }\n
    }\n
    v8 = -1;\n
LABEL_40433f:\n
    v9 = -(v3 != v8);\n
    return v9;\n
}\n
", "4211545:sub_404359": null, "4211552:cgc_read_until": "long long cgc_read_until(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // r15\n
    unsigned long v5;  // rbp\n
    unsigned long v6;  // rdx\n
    void* v8;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v10;  // r12\n
\n
    v0 = v2;\n
    if (!a1)\n
        return 4294967295;\n
    v4 = a2;\n
    v8 = 0;\n
    do\n
    {\n
        v5 = a3 + v8;\n
        a3 = cgc_receive(v5, v4, a2, a3);\n
        if (a3)\n
            return 4294967295;\n
        v6 = v0;\n
        if (!v6)\n
            return 4294967295;\n
        a2 = v0;\n
        if (cgc_memchr(v5, v4, v6))\n
        {\n
            *(cgc_memchr(v5, v4, a2)) = 0;\n
            v10 = v8 + v0;\n
            return v10;\n
        }\n
        v8 += a2;\n
    } while (v8 < a1);\n
}\n
", "4211698:sub_4043f2": null, "4211712:cgc_get_note": "typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4228640];\n
    struct struct_1 *field_408620;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    char *field_18;\n
} struct_0;\n
\n
extern char cgc_note_store;\n
\n
long long cgc_get_note(char *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v4;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    v4 = 0;\n
    while (true)\n
    {\n
        v5 = *(&(&cgc_note_store)[v4]);\n
        if (v5 && !cgc_strcmp(a0, v5->field_18))\n
            return *(&(&cgc_note_store)[v4]);\n
        v4 += 8;\n
        if (v4 == 0x1000)\n
            return 0;\n
    }\n
}\n
", "4211737:sub_404419": null, "4211801:sub_404459": null, "4211808:cgc_new_note": "typedef struct struct_1 {\n
    char padding_0[4228640];\n
    struct struct_0 *field_408620;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[24];\n
    char *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern unsigned long long cgc_note_store[4];\n
\n
long long cgc_new_note(unsigned long a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r14\n
    struct_1 *v5;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v6;  // rax\n
    unsigned long long v7[4];  // rax\n
    unsigned long long v8;  // rax\n
    unsigned long v9;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rsi\n
    char *v12;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v13[4];  // rcx, Other Possible Types: unsigned long\n
    char *v14;  // rax\n
    unsigned long v15;  // rdx, Other Possible Types: unsigned long long\n
    void* v16;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v17[4];  // rax, Other Possible Types: unsigned long\n
    unsigned long long v18;  // rcx\n
    unsigned long long v19;  // rcx\n
    unsigned long long v20;  // r9\n
    unsigned long long v21;  // rax\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v6 = *((v5 + &cgc_note_store[0]));\n
            if (v6 && !cgc_strcmp(a0, v6->field_18))\n
            {\n
                if (*((v5 + &cgc_note_store[0])))\n
                    break;\n
LABEL_4044d1:\n
                v7 = cgc_calloc(32, 1);\n
                if (!v7)\n
                {\n
                    v9 = 75;\n
                    goto LABEL_404695;\n
                }\n
                v3 = v7;\n
                v8 = cgc_strlen(a1);\n
                v10 = v8;\n
                v11 = v8 + 1;\n
                if (v11 < 1025)\n
                {\n
                    v12 = cgc_calloc(1, 0x400);\n
                    *((v3 + 16)) = v12;\n
                    if (!v12)\n
                    {\n
                        v9 = 89;\n
LABEL_404695:\n
                        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", v9, a4);\n
                        cgc__terminate(2);\n
                        v21 = cgc_append_note(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", v9, a4, v20);\n
                        return v21;\n
                    }\n
                    *(v3) = v10;\n
                    v13 = v3 + 8;\n
                    v10 = 0x400;\n
                }\n
                else\n
                {\n
                    v12 = cgc_calloc(1, v11);\n
                    *((v3 + 16)) = v12;\n
                    if (v12)\n
                    {\n
                        *((v3 + 8)) = v10;\n
                        v13 = v3;\n
                    }\n
                    else\n
                    {\n
                        v9 = 82;\n
                        goto LABEL_404695;\n
                    }\n
                }\n
                *(v13) = v10;\n
                cgc_strcpy(v12, a1);\n
                v14 = cgc_calloc(1, cgc_strlen(a0) + 1);\n
                *((v3 + 24)) = v14;\n
                if (!v14)\n
                {\n
                    v9 = 96;\n
                    goto LABEL_404695;\n
                }\n
                else\n
                {\n
                    cgc_strcpy(v14, a0);\n
                    v15 = 3;\n
                    v16 = 0;\n
                    v17 = &cgc_note_store[0];\n
                    do\n
                    {\n
                        if (!cgc_note_store[3 + v15])\n
                        {\n
LABEL_4045f8:\n
                            *(v17) = v3;\n
                            if (v16 != 0x200)\n
                                return v3;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_note_store[2 + v15])\n
                            {\n
                                v18 = v16 | 1;\n
                                *((v17 + 8)) = v3;\n
                                if (v18 != 0x200)\n
                                    return v3;\n
                                break;\n
                            }\n
                            if (!cgc_note_store[1 + v15])\n
                            {\n
                                v17 += 16;\n
                                v16 = v15 - 1;\n
                                goto LABEL_4045f8;\n
                            }\n
                            else if (!cgc_note_store[v15])\n
                            {\n
                                v19 = v16 | 3;\n
                                *((v17 + 24)) = v3;\n
                                if (v19 != 0x200)\n
                                    return v3;\n
                                break;\n
                            }\n
                        }\n
                        v16 += 4;\n
                        v17 += 32;\n
                        v15 += 4;\n
                    } while (v15 != 515);\n
                }\n
            }\n
            v5 += 8;\n
            if (v5 == 0x1000)\n
                goto LABEL_4044d1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4211857:sub_404491": null, "4212400:cgc_append_note": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    void* field_10;\n
} struct_0;\n
\n
long long cgc_append_note(struct_0 *a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // r14\n
    unsigned long long v5[3];  // rbx\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // rsi\n
    unsigned long v9;  // rdi\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 0;\n
    v4 = a1;\n
    if (!a1)\n
        return 0;\n
    v5 = a0;\n
    v7 = a0->field_8;\n
    if (cgc_strlen(a1) + a0->field_0 + 1 > v7)\n
    {\n
        v8 = v7 * 2;\n
        a0->field_8 = v8;\n
        v9 = cgc_realloc(a0->field_10, v8);\n
        v5[2] = v9;\n
        if (!(!v9))\n
            goto LABEL_40472e;\n
        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 124, a4);\n
        cgc__terminate(2);\n
    }\n
    v9 = v5[2];\n
LABEL_40472e:\n
    cgc_strcat(v9, v4);\n
    v5[0] = v5[0] + cgc_strlen(v4);\n
    return v5;\n
}\n
", "4212556:sub_40474c": null, "4212560:cgc_delete_note": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_note_store;\n
\n
long long cgc_delete_note(unsigned long long a0[4])\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rbx\n
    unsigned long long v3[4];  // rbx\n
    struct_0 *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // rdi\n
    unsigned long v6;  // rdi\n
\n
    if (!a0)\n
        return 4294967295;\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = 0;\n
    do\n
    {\n
        if (*(&(&cgc_note_store)[8 * v4]) == a0)\n
        {\n
            *(&(&cgc_note_store)[8 * v4]) = 0;\n
            if (!(*(&(&cgc_note_store)[8 + 8 * v4]) == a0))\n
                continue;\n
        }\n
        else if (!(*(&(&cgc_note_store)[8 + 8 * v4]) == a0))\n
        {\n
            continue;\n
        }\n
        *(&(&cgc_note_store)[8 + 8 * v4]) = 0;\n
        v4 += 2;\n
    } while (v4 != 0x200);\n
    v5 = a0[2];\n
    if (v5)\n
        cgc_free(v5);\n
    v6 = v3[3];\n
    if (!v6)\n
    {\n
        cgc_free(v3);\n
        return 0;\n
    }\n
    cgc_free(v6);\n
}\n
", "4212580:sub_404764": null, "4212619:sub_40478b": null, "4212696:sub_4047d8": null, "4212704:cgc_free_thunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_free_thunk(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // r14\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v5;  // rdi\n
    unsigned long long *v6;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_0;\n
    if (v4)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v5 = v3->field_8[v6].field_0;\n
            if (v5)\n
            {\n
                cgc_free(v5);\n
                v4 = v3->field_0;\n
            }\n
            v6 += 1;\n
        } while (v6 < v4);\n
    }\n
    cgc_free(v3->field_8);\n
    return cgc_free(v3);\n
}\n
", "4212721:sub_4047f1": null, "4212794:sub_40483a": null, "4212800:cgc_new_thunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_new_thunk(unsigned long a0, unsigned int a1, unsigned long long a2[2], unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    struct_0 *v4;  // rax\n
    unsigned long long v5;  // rax\n
    char *v6;  // rdi\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // rbp\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi\n
    unsigned long long v12;  // r9\n
\n
    v0 = v2;\n
    if (a1 > 4)\n
    {\n
        return 0;\n
    }\n
    else if (!a2)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v4 = cgc_calloc(24, 1);\n
        if (!v4)\n
        {\n
LABEL_40497b:\n
            cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 180, a4);\n
            cgc__terminate(2);\n
        }\n
        else\n
        {\n
            v3 = v4;\n
            v4->field_10 = a0;\n
            v4->field_0 = a1;\n
            v5 = cgc_calloc(8, a1);\n
            *((v3 + 8)) = v5;\n
            if (v5)\n
            {\n
                v9 = *(v3);\n
                if (!v9)\n
                    return v3;\n
                v7 = a2[0];\n
                if (v7)\n
                {\n
                    v8 = 1;\n
                    do\n
                    {\n
                        *((*((v3 + 8)) + v8 * 8 - 8)) = cgc_calloc(1, cgc_strlen(v7) + 1);\n
                        v6 = *((*((v3 + 8)) + v8 * 8 - 8));\n
                        if (!v6)\n
                        {\n
                            cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 193, a4);\n
                            cgc__terminate(2);\n
                            goto LABEL_40497b;\n
                        }\n
                        cgc_strcpy(v6, a2[1 + v8]);\n
                        v9 = *(v3);\n
                        if (v8 >= v9)\n
                            return v3;\n
                        v7 = a2[v8];\n
                        v8 += 1;\n
                    } while (v7);\n
                }\n
                if (v9)\n
                {\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v11 = *((*((v3 + 8)) + v10 * 8));\n
                        if (v11)\n
                        {\n
                            cgc_free(v11);\n
                            v9 = *(v3);\n
                        }\n
                        v10 += 1;\n
                    } while (v10 < v9);\n
                }\n
                cgc_free(*((v3 + 8)));\n
                cgc_free(v3);\n
                return 0;\n
            }\n
        }\n
        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 185, a4);\n
        cgc__terminate(2);\n
        return cgc_run_thunk(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 185, a4, v12);\n
    }\n
}\n
", "4213200:cgc_run_thunk": "long long cgc_run_thunk(unsigned long long *a0)\n
{\n
    if (!a0)\n
        return *(a0);\n
    if (!*(a0))\n
        return *(a0);\n
    goto *((*((*(a0) + 16)) + 16));\n
}\n
", "4213231:sub_4049ef": null, "4213232:cgc_append_thunk": "typedef struct struct_5 {\n
    char padding_0[4228640];\n
    struct struct_0 *field_408620;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    char padding_0[24];\n
    char *field_18;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    struct struct_3 *field_8;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern char cgc_note_store;\n
\n
long long cgc_append_thunk(unsigned long long a0[2], struct struct_4 **a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    struct struct_4 **v0;  // [bp-0x2048]\n
    unsigned int v1;  // [bp-0x2040], Other Possible Types: char\n
    char v2;  // [bp-0x2038]\n
    char v3;  // [bp-0x38]\n
    char *v6;  // r12\n
    unsigned long v7;  // rax\n
    void* v8;  // r13, Other Possible Types: unsigned long\n
    char *v9;  // r14\n
    char *v10;  // rax\n
    unsigned long v11;  // r14d, Other Possible Types: unsigned int\n
    struct_5 *v12;  // rbx, Other Possible Types: unsigned long\n
    struct_6 *v13;  // rax\n
    unsigned long long v14;  // r9\n
    struct_0 *v16;  // rdi\n
    struct struct_4 **v17;  // rsi\n
    struct_4 *v18;  // rax\n
    struct_3 *v19;  // rax\n
    struct_3 *v20;  // rax\n
    struct_2 *v21;  // rax\n
\n
    if (!a0)\n
        return 4294967295;\n
    v6 = a0[0];\n
    if (!v6)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!*(&v1))\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = a1;\n
        *(&v1) = a0[1];\n
        cgc_strncpy(&v2, *(&v1), 0x2000);\n
        v3 = 0;\n
        v7 = cgc_strlen(\"cloud\");\n
        if (v7 != 0x2000)\n
        {\n
            v8 = 0;\n
            do\n
            {\n
                v9 = &v2;\n
                if (!cgc_strncmp(v9, \"cloud\", v7))\n
                {\n
                    cgc_memcpy(v9, \"butt \", v7);\n
                    v8 += v7;\n
                }\n
                v8 += 1;\n
            } while (v8 < !(v7 - 0x2000));\n
        }\n
        v11 = *(&v1);\n
        if (cgc_strcmp(v11, &v2))\n
        {\n
            v10 = cgc_realloc(v11, cgc_strlen(&v2) + 1);\n
            if (!v10)\n
            {\n
                cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 246, a4);\n
                cgc__terminate(2);\n
                return cgc_remove_head_list(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 246, a4, v14);\n
            }\n
            v11 = v10;\n
            cgc_strcpy(v10, &v2);\n
        }\n
        v12 = 0;\n
        do\n
        {\n
            v13 = *(&(&cgc_note_store)[v12]);\n
            if (v13 && !cgc_strcmp(v6, v13->field_18))\n
            {\n
                v16 = *(&(&cgc_note_store)[v12]);\n
                if (v16)\n
                {\n
                    cgc_append_note(v16, v11, 0x2000, a3, a4);\n
                    break;\n
                }\n
            }\n
            v12 += 8;\n
        } while (v12 != 0x1000);\n
        v17 = v0;\n
        if (!v17)\n
            return 0;\n
        v18 = *(v17);\n
        if (!v18)\n
            return 0;\n
        v19 = v18->field_8;\n
        if (!v19)\n
        {\n
            *(v17) = 0;\n
            return 0;\n
        }\n
        v19->field_0 = 0;\n
        v20 = *(v17)->field_8;\n
        *(v17) = &v20->field_0;\n
        if (v20)\n
        {\n
            v21->field_10(v20->field_10->field_8);\n
            return 0;\n
        }\n
        return 0;\n
    }\n
}\n
", "4213431:sub_404ab7": null, "4213728:cgc_remove_head_list": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_remove_head_list(struct struct_0 **a0)\n
{\n
    struct_0 *v1;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v2;  // rax\n
\n
    if (!a0)\n
        return v1;\n
    v1 = *(a0);\n
    if (!v1)\n
        return *(a0);\n
    v2 = v1->field_8;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
    }\n
    else\n
    {\n
        v2->field_0 = 0;\n
        v1 = *(a0)->field_8;\n
    }\n
    *(a0) = v1;\n
    return v1;\n
}\n
", "4213772:sub_404c0c": null, "4213776:cgc_delete_thunk": "typedef struct struct_6 {\n
    char padding_0[4228640];\n
    struct struct_7 *field_408620;\n
} struct_6;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    char *field_18;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[8];\n
    struct struct_4 *field_8;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_7 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_7;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 cgc_note_store;\n
\n
long long cgc_delete_thunk(unsigned long long *a0, struct struct_5 **a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char *v3;  // r12\n
    struct_6 *v4;  // rbx, Other Possible Types: unsigned long\n
    struct_3 *v5;  // rax\n
    unsigned long long v6[4];  // rbx\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rdi\n
    unsigned long v9;  // rdi\n
    struct_5 *v11;  // rax\n
    struct_4 *v12;  // rax\n
    struct_4 *v13;  // rax\n
    struct_1 *v14;  // rax\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return 4294967295;\n
    v4 = 0;\n
    do\n
    {\n
        v5 = *((v4 + &cgc_note_store.field_0));\n
        if (v5 && !cgc_strcmp(v3, v5->field_18))\n
        {\n
            v6 = *((v4 + &cgc_note_store.field_0));\n
            if (v6)\n
            {\n
                v7 = 0;\n
                do\n
                {\n
                    if ((&cgc_note_store.field_0)[v7] == v6)\n
                    {\n
                        (&cgc_note_store.field_0)[v7] = 0;\n
                        if (!((&cgc_note_store.field_0)[1 + v7] == v6))\n
                            continue;\n
                    }\n
                    else if (!((&cgc_note_store.field_0)[1 + v7] == v6))\n
                    {\n
                        continue;\n
                    }\n
                    (&cgc_note_store.field_0)[1 + v7] = 0;\n
                    v7 += 2;\n
                } while (v7 != 0x200);\n
                v8 = v6[2];\n
                if (v8)\n
                    cgc_free(v8);\n
                v9 = v6[3];\n
                if (v9)\n
                    cgc_free(v9);\n
                cgc_free(v6);\n
                break;\n
            }\n
        }\n
        v4 += 8;\n
    } while (v4 != 0x1000);\n
    if (!a1)\n
        return 0;\n
    v11 = *(a1);\n
    if (!v11)\n
        return 0;\n
    v12 = v11->field_8;\n
    if (!v12)\n
    {\n
        *(a1) = 0;\n
        return 0;\n
    }\n
    v12->field_0 = 0;\n
    v13 = *(a1)->field_8;\n
    *(a1) = &v13->field_0;\n
    if (v13)\n
    {\n
        v14->field_10(v13->field_10->field_8, a1);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4213810:sub_404c32": null, "4213879:sub_404c77": null, "4213915:sub_404c9b": null, "4214072:sub_404d38": null, "4214080:cgc_new_list": "long long cgc_new_list(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long long v1[3];  // rax\n
    unsigned long long v2;  // r9\n
\n
    v1 = cgc_calloc(24, 1);\n
    if (!v1)\n
    {\n
        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 288, a4);\n
        cgc__terminate(2);\n
        return cgc_append_list(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 288, a4, v2);\n
    }\n
    v1[0] = a0;\n
    v1[1] = a1;\n
    v1[2] = a2;\n
    return v1;\n
}\n
", "4214176:cgc_append_list": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_append_list(struct struct_0 **a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct_0 *v1;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v3[3];  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v4;  // r15, Other Possible Types: unsigned long\n
    unsigned long long v5;  // r9\n
\n
    v1 = *(a0);\n
    if (!v1)\n
    {\n
        v4 = a0;\n
        v3 = cgc_calloc(24, 1);\n
        if (v3)\n
        {\n
            v2 = 0;\n
LABEL_404def:\n
            *(v3) = v2;\n
            *((v3 + 8)) = 0;\n
            *((v3 + 16)) = a1;\n
            *(v4) = v3;\n
            return 0;\n
        }\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v2 = v1;\n
            v1 = *((v1 + 8));\n
        } while (v1);\n
        v3 = cgc_calloc(24, 1);\n
        if (v3)\n
        {\n
            v4 = &v2->field_8;\n
            goto LABEL_404def;\n
        }\n
    }\n
    cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 288, a4);\n
    cgc__terminate(2);\n
    return cgc_len_list(2, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\", 288, a4, v5);\n
}\n
", "4214336:cgc_len_list": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_len_list(struct_0 *a0)\n
{\n
    void* v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (!a0)\n
        return 0;\n
    while (true)\n
    {\n
        if (v1 == -1)\n
            return 0;\n
        a0 = *((a0 + 8));\n
        v1 += 1;\n
        if (!a0)\n
            return v1;\n
    }\n
}\n
", "4214375:sub_404e67": null, "4214384:cgc_prompt": "long long cgc_prompt(unsigned int a0)\n
{\n
    return cgc_transmit_string(a0, \"nk9001> \");\n
}\n
", "4214396:sub_404e7c": null, "4214400:cgc_yell": "long long cgc_yell(unsigned int a0)\n
{\n
    return cgc_transmit_string(a0, \"I don't know what you want, but you can't find it here.\\n
\");\n
}\n
", "4214412:sub_404e8c": null, "4214416:cgc_nth_word": "long long cgc_nth_word(struct struct_0 **a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char *v0;  // [bp-0x428]\n
    char *v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // r12\n
    unsigned long v6;  // rdi\n
    char *v7;  // rax\n
    unsigned long v8;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rbx\n
    unsigned long v11;  // rbp, Other Possible Types: unsigned long long\n
    char *v12;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v14;  // rbp\n
    char *v15;  // rax\n
    unsigned long long v16;  // r9\n
    unsigned long long v17;  // rax\n
\n
    v2 = a1;\n
    v8 = 0;\n
    cgc_memset(&v0, 0, 0x400);\n
    v5 = &a1[cgc_strlen(a1)];\n
    while (true)\n
    {\n
        v6 = *(v2);\n
        if (v6)\n
            v2 = v2 - -1 - (cgc_isspace(v6) < 1);\n
        if (v2 >= v5)\n
            break;\n
        (&v0)[v8] = v2;\n
        v7 = cgc_strchr(v2, 32);\n
        if (!v7)\n
            break;\n
        v2 = v7;\n
        v8 += 1;\n
        if (false)\n
            break;\n
    }\n
    v9 = *((&v0 + 0x8 * a0));\n
    if (!v9)\n
        return 0;\n
    if (!a2)\n
    {\n
        v11 = cgc_strchr(v9, 32);\n
        if (!(!v11))\n
            goto LABEL_404f64;\n
    }\n
    v11 = cgc_strchr(v9, 0);\n
    if (!v11)\n
    {\n
        v12 = \"ERROR %s:%d:\\tmalformed string\\n
\";\n
        v13 = 389;\n
        goto LABEL_404fb0;\n
    }\n
LABEL_404f64:\n
    v14 = v11 - v9;\n
    v15 = cgc_calloc(1, v14 + 1);\n
    if (v15)\n
        return cgc_strncpy(v15, v9, v14);\n
    v12 = \"ERROR %s:%d:\\tbad alloc\\n
\";\n
    v13 = 392;\n
LABEL_404fb0:\n
    cgc_fdprintf(2, v12, \"src/main.c\", v13, a4);\n
    cgc__terminate(2);\n
    v17 = cgc_make_argv(2, v12, \"src/main.c\", v13, a4, v16);\n
    return v17;\n
}\n
", "4214736:cgc_make_argv": "long long cgc_make_argv(char *a0, unsigned int a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v1;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v2;  // r13\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rdi\n
    void* v7;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = cgc_calloc(8, a1);\n
    v2 = a1 - 1;\n
    v3 = 1;\n
    while (true)\n
    {\n
        if (a1 != v3)\n
        {\n
            v4 = cgc_nth_word(v3, a0, 0, a3, a4);\n
            *((-8 + v1 + 8 * v3)) = v4;\n
            v3 += 1;\n
            if (!v4)\n
                goto LABEL_40503c;\n
        }\n
        else\n
        {\n
            v5 = cgc_nth_word(v2 + 1, a0, 1, a3, a4);\n
            *((-8 + v1 + 8 * a1)) = v5;\n
            if (v5)\n
                return v1;\n
LABEL_40503c:\n
            if (v2 >= 2)\n
            {\n
                v7 = 0;\n
                do\n
                {\n
                    v6 = *((8 + v1 + 8 * v7));\n
                    if (v6)\n
                        cgc_free(v6);\n
                    v7 += 1;\n
                } while (a1 - 2 != v7);\n
            }\n
        }\n
    }\n
    cgc_free(v1);\n
    return 0;\n
}\n
", "4214858:sub_40504a": null, "4214914:sub_405082": null, "4214928:cgc_print_argv": "long long cgc_print_argv()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4214929:sub_405091": null, "4214944:cgc_free_argv": "long long cgc_free_argv(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned long long *v1;  // r15\n
    unsigned long v2;  // rbx\n
    unsigned long v3;  // rax\n
    unsigned long v4;  // rdi\n
\n
    if (!a0)\n
    {\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v1 = a0;\n
        v2 = 0;\n
        do\n
        {\n
            v4 = v1[v2];\n
            if (v4)\n
                cgc_free(v4);\n
            v2 += 1;\n
        } while (a1 != v2);\n
        return cgc_free(v1);\n
    }\n
}\n
", "4214969:sub_4050b9": null, "4215020:sub_4050ec": null, "4215024:main": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
} struct_2;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_6;\n
\n
typedef struct struct_3 {\n
    char padding_0[4228640];\n
    struct struct_4 *field_408620;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    char *field_18;\n
} struct_0;\n
\n
typedef struct struct_7 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
    char padding_14[4];\n
    unsigned long long field_18;\n
} struct_7;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_4;\n
\n
extern char cgc_note_store;\n
extern struct_5 *cgc_thunks;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x4038]\n
    char *v2;  // rax\n
    struct_2 *v4;  // rax\n
    unsigned long long v5;  // rax\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rax\n
    unsigned long long v8;  // rax\n
    struct_6 *v9;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rax\n
    unsigned long long v11;  // rax\n
    unsigned long v12;  // rdi\n
    struct_2 *v13;  // rax\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // rdi\n
    unsigned long long *v17;  // r14\n
    unsigned long long v18;  // rax\n
    unsigned long v19;  // rdi\n
    unsigned long v20;  // r14, Other Possible Types: unsigned long long\n
    struct_3 *v22;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v23;  // rax\n
    struct_7 *v24;  // rax\n
\n
    cgc_transmit_string(1, \"nk9001> \");\n
    cgc_memset(&v0, 0, 0x4000);\n
    if (cgc_read_until(0, 0x4000, 10, &v0) < 0)\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strncmp(&v0, \"quit\", 4))\n
            cgc__terminate(0);\n
        v2 = cgc_nth_word(NULL, &v0, 0, a3, a4);\n
        if (v2)\n
            break;\n
LABEL_405170:\n
        cgc_transmit_string(1, \"nk9001> \");\n
        cgc_memset(&v0, 0, 0x4000);\n
        if (cgc_read_until(0, 0x4000, 10, &v0) < 0)\n
            return 0;\n
    }\n
    if (!cgc_strncmp(v2, \"new-note\", cgc_strlen(\"new-note\")))\n
    {\n
        if (cgc_thunks)\n
            v4->field_10(cgc_thunks->field_10->field_8, &cgc_thunks);\n
        v9 = cgc_calloc(8, 2);\n
        v5 = cgc_nth_word(0x1, &v0, 0, a3, a4);\n
        *(&v9->field_0) = v5;\n
        if (v5)\n
        {\n
            v7 = cgc_nth_word(0x2, &v0, 1, a3, a4);\n
            v9->field_8 = v7;\n
            if (v7)\n
            {\n
                v11 = cgc_new_note(*(&v9->field_0), v7, 1, a3, a4);\n
                v12 = *(&v9->field_0);\n
                if (v12)\n
                    cgc_free(v12);\n
                v15 = v9->field_8;\n
                if (v15)\n
                    cgc_free(v15);\n
                v20 = (!v11 ? \"Note successfully created.\\n
\" : \"Your note book is full.\\n
\");\n
                goto LABEL_40542e;\n
            }\n
        }\n
    }\n
    else if (!cgc_strncmp(v2, \"append-note\", cgc_strlen(\"append-note\")))\n
    {\n
        v9 = cgc_calloc(8, 2);\n
        v6 = cgc_nth_word(0x1, &v0, 0, a3, a4);\n
        *(v9) = v6;\n
        if (v6)\n
        {\n
            v8 = cgc_nth_word(0x2, &v0, 1, a3, a4);\n
            *((v9 + 8)) = v8;\n
            if (v8)\n
            {\n
                cgc_append_list(&cgc_thunks, cgc_new_thunk(cgc_append_thunk, 2, v9, a3, a4), v9, a3, a4);\n
                v14 = *(v9);\n
                if (v14)\n
                    cgc_free(v14);\n
                v19 = *((v9 + 8));\n
                if (v19)\n
                    cgc_free(v19);\n
                v20 = \"Note successfully appended.\\n
\";\n
                goto LABEL_40542e;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_strncmp(v2, \"delete-note\", cgc_strlen(\"delete-note\")))\n
        {\n
            if (cgc_strncmp(v2, \"get-note\", cgc_strlen(\"get-note\")))\n
            {\n
                cgc_transmit_string(1, \"I don't know what you want, but you can't find it here.\\n
\");\n
                goto LABEL_405443;\n
            }\n
            if (cgc_thunks)\n
                v13->field_10(cgc_thunks->field_10->field_8, &cgc_thunks);\n
            v17 = cgc_calloc(8, 1);\n
            v18 = cgc_nth_word(0x1, &v0, 1, a3, a4);\n
            *(v17) = v18;\n
            if (v18)\n
            {\n
                v22 = 0;\n
                do\n
                {\n
                    v23 = *(&(&cgc_note_store)[v22]);\n
                    if (v23 && !cgc_strcmp(v18, v23->field_18))\n
                    {\n
                        v24 = *(&(&cgc_note_store)[v22]);\n
                        v20 = \"Unknown note.\\n
\";\n
                        if (!v24)\n
                            goto LABEL_405436;\n
                        cgc_fdprintf(1, \"%s\\n
\", *(&v24->field_10), a3, a4);\n
                        goto LABEL_405443;\n
                    }\n
                    v22 += 8;\n
                } while (v22 != 0x1000);\n
                v20 = \"Unknown note.\\n
\";\n
                goto LABEL_405436;\n
            }\n
            else\n
            {\n
                cgc_free(v17);\n
LABEL_405443:\n
                cgc_free(v2);\n
                goto LABEL_405170;\n
            }\n
        }\n
        v9 = cgc_calloc(8, 1);\n
        v10 = cgc_nth_word(0x1, &v0, 1, a3, a4);\n
        *(v9) = v10;\n
        if (v10)\n
        {\n
            cgc_append_list(&cgc_thunks, cgc_new_thunk(cgc_delete_thunk, 1, v9, a3, a4), v9, a3, a4);\n
            v16 = *(v9);\n
            if (v16)\n
                cgc_free(v16);\n
            v20 = \"Note successfully deleted.\\n
\";\n
LABEL_40542e:\n
            cgc_free(v9);\n
LABEL_405436:\n
            cgc_transmit_string(1, v20);\n
            goto LABEL_405443;\n
        }\n
    }\n
    cgc_free(v9);\n
    goto LABEL_405443;\n
}\n
", "4215130:sub_40515a": null, "4215415:sub_405277": null, "4215986:sub_4054b2": null, "4216160:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}