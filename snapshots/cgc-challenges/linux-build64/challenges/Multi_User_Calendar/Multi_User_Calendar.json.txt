{"4206592:_init": "extern struct_0 *g_40d248;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40d248;\n
    if (g_40d248)\n
        v1 = g_40d248();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40d268;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40d268;\n
    goto *(4248176);\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206656:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206672:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206720:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4248152);\n
}\n
", "4206736:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206773:sub_4030b5": null, "4206774:sub_4030b6": null, "4206784:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40d240;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206825:sub_4030e9": null, "4206832:register_tm_clones": "extern unsigned long long g_40d250;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206889:sub_403129": null, "4206896:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40d258;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40d258)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4206949:sub_403165": null, "4206953:sub_403169": null, "4206960:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4206969:sub_403179": null, "4206976:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 * a0;\n
    if (a1 * a0 > -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = cgc_malloc_alloc(&g_heap, v1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memset(v0, 0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4207114:sub_40320a": null, "4207120:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 1;\n
}\n
", "4207154:sub_403232": null, "4207168:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 2;\n
}\n
", "4207202:sub_403262": null, "4207216:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 16;\n
}\n
", "4207250:sub_403292": null, "4207264:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 14;\n
}\n
", "4207298:sub_4032c2": null, "4207312:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 12;\n
}\n
", "4207346:sub_4032f2": null, "4207360:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 4;\n
}\n
", "4207394:sub_403322": null, "4207408:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 8;\n
}\n
", "4207442:sub_403352": null, "4207456:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 64;\n
}\n
", "4207490:sub_403382": null, "4207504:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 32;\n
}\n
", "4207538:sub_4033b2": null, "4207552:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return (&__ctype)[a0 & 255] & 128;\n
}\n
", "4207588:sub_4033e4": null, "4207600:cgc_isxdigit": "long long cgc_isxdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    char v3;  // [bp-0x8]\n
    unsigned long long v5;  // rbp\n
\n
    v5 = &v3;\n
    v2 = a0;\n
    v2 = cgc_toupper(v2);\n
    v1 = 1;\n
    if (cgc_isdigit(v2))\n
        return v1 & 1;\n
    v0 = 0;\n
    if (v2 >= 65)\n
        v0 = v2 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4207691:sub_40344b": null, "4207696:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4207767:sub_403497": null, "4207776:cgc_digittoint": "long long cgc_digittoint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 = cgc_toupper(v0);\n
    if (cgc_isdigit(v0))\n
    {\n
        v1 = v0 - 48;\n
        return v1;\n
    }\n
    if (v0 >= 65 && v0 <= 70)\n
    {\n
        v1 = v0 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4207882:sub_40350a": null, "4207888:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v0 &= 255;\n
    if (!cgc_isupper(v0))\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v0 ^= 32;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4207959:sub_403557": null, "4207968:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_fflush(a0, v2, v3, v4, v5, v6);\n
}\n
", "4208000:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rcx\n
    struct_0 *v5;  // rcx\n
\n
    v1 = a0;\n
    if (a0->field_8 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a0->field_4 != 1)\n
    {\n
        v0 = 0;\n
        v4 = a0;\n
        ::0x403680::cgc_xlat(v1->field_10, &v1[1].field_8 + a0->field_8, v1->field_c - v4->field_8, v4);\n
        v5 = a0;\n
        if (::0x4036f0::cgc_transmit_all(v1->field_0, &v1[1].field_8 + a0->field_8, v1->field_c - v5->field_8, v5))\n
            v0 = -1;\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = v0;\n
        return v2;\n
    }\n
    else\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4208242:sub_403672": null, "4208256:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4208367:sub_4036ef": null, "4208368:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4208499:sub_403773": null, "4208512:cgc_fbuffered": "long long cgc_fbuffered(unsigned int a0[4], unsigned long a1)\n
{\n
    if (a0[2] != -1)\n
        cgc_fflush(a0);\n
    if (a1)\n
        a0[2] = 0;\n
    else\n
        a0[2] = -1;\n
    a0[3] = 0;\n
    return a0;\n
}\n
", "4208615:sub_4037e7": null, "4208624:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_malloc(1056);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = (a1 ? 1 : 2);\n
    v0->field_8 = 0;\n
    v0->field_c = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208775:sub_403887": null, "4208784:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v5;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    v5 = a2;\n
    if (a2->field_8 == a2->field_c)\n
        cgc__refill(a2);\n
    if (a2->field_8 != -1)\n
    {\n
        v5 = a2;\n
        v0 = a2->field_c - a2->field_8;\n
        if (v0 > a1)\n
            v0 = a1;\n
        cgc_memcpy(a0, &v2->padding_0[1 + a2->field_8], v0);\n
        v1 = v0 + v1;\n
        v6 = a2;\n
        v6->field_8 = v6->field_8 + v0;\n
        if (a2->field_8 == v2->field_c)\n
        {\n
            a2->field_c = 0;\n
            a2->field_8 = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!v0)\n
            break;\n
        ::0x403ae0::cgc_xlat(a2->field_18, a0 + v1, v0);\n
        v1 = v0 + v1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4209157:sub_403a05": null, "4209168:cgc__refill": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__refill(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long long v7;  // rcx\n
\n
    if (a0->field_8 == a0->field_c)\n
    {\n
        a0->field_c = 0;\n
        a0->field_8 = 0;\n
    }\n
    if (!cgc_receive(a0, v3, v4, v5) && *(&v0))\n
    {\n
        v7 = *(&v0);\n
        a0->field_c = v7;\n
        ::0x403ae0::cgc_xlat(a0->field_18, a0 + 1, a0->field_c, v7);\n
        v1 = *(&v0);\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4209362:sub_403ad2": null, "4209376:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4209487:sub_403b4f": null, "4209488:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    char *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v2 = 0; v2 < a1 - 1; v2 += 1)\n
    {\n
        v1 = cgc__getc(a3);\n
        if (v1 == -1)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (v1 == a2)\n
            break;\n
        *((a0 + v2)) = v1;\n
    }\n
    if (v2 == a1 - 1)\n
    {\n
        do\n
        {\n
            v0 = cgc__getc(a3);\n
            if (v0 == -1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
        } while (v0 != a2);\n
    }\n
    *((a0 + v2)) = 0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4209756:sub_403c5c": null, "4209760:cgc__getc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[8];\n
    char *field_18;\n
} struct_0;\n
\n
long long cgc__getc(struct_0 *a0)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v8;  // rcx\n
\n
    if (a0->field_8 == -1)\n
    {\n
        if (!cgc_receive(a0, v4, v5, v6) && *(&v0))\n
        {\n
            ::0x403ae0::cgc_xlat(a0->field_18, &v1, 1);\n
            v2 = v1;\n
            return v2;\n
        }\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        if (a0->field_8 == a0->field_c && cgc__refill(a0) < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        v8 = a0->field_8;\n
        a0->field_8 = v8 + 1;\n
        v2 = a0[1].padding_0[v8];\n
        return v2;\n
    }\n
}\n
", "4209970:sub_403d32": null, "4209984:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4210018:sub_403d62": null, "4210032:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v2 = a2;\n
    v1 = 0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            if (a2->field_c + a1 >= 0x400)\n
            {\n
                v5 = a2->field_c;\n
                v0 = 0x400 - v5;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0, v0, v5);\n
                v6 = a2;\n
                v6->field_c = v6->field_c + v0;\n
                v1 = v0 + v1;\n
                cgc_fflush(a2);\n
            }\n
            if (v1 < a1)\n
            {\n
                v0 = a1 - v1;\n
                cgc_memcpy(&a2[1].field_8 + v2->field_c, a0 + v1, v0);\n
                v7 = a2;\n
                v7->field_c = v7->field_c + v0;\n
                v1 = v0 + v1;\n
            }\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    if (a2->field_10)\n
    {\n
        if (cgc_transmit_xlat(v2->field_0, a2->field_10, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    else\n
    {\n
        if (::0x403f30::cgc_transmit_all(a2->field_0, a0, a1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
    v3 = a1;\n
    return v3;\n
}\n
", "4210468:sub_403f24": null, "4210480:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4210611:sub_403fb3": null, "4210624:cgc_transmit_xlat": "long long cgc_transmit_xlat(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x448], Other Possible Types: unsigned long long\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < a3)\n
        {\n
            v0 = a3 - v1;\n
            if (v0 > 0x400)\n
                v0 = 0x400;\n
            cgc_memcpy(&v2, a2 + v1, v0);\n
            ::0x4040c0::cgc_xlat(a1, &v2, v0);\n
            if (::0x403f30::cgc_transmit_all(a0, &v2, v0))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            v1 = v0 + v1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4210873:sub_4040b9": null, "4210880:cgc_xlat": "long long cgc_xlat(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
\n
    v1 = a1;\n
    if (!a0)\n
        return a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
            break;\n
        v1[v0] = a0[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4210991:sub_40412f": null, "4210992:cgc_fxlat": "long long cgc_fxlat(unsigned long long a0[4], unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    char *v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v7;  // rax\n
    unsigned long long v8;  // rax, Other Possible Types: unsigned long\n
    char *v9;  // rax\n
\n
    if (!a1)\n
    {\n
        cgc_free(a0[2]);\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        return a0;\n
    }\n
    v7 = cgc_realloc(a0[2], 0x100);\n
    a0[2] = v7;\n
    v3 = v7;\n
    v9 = cgc_realloc(a0[3], 0x100);\n
    a0[3] = v9;\n
    v2 = v9;\n
    v8 = cgc_hash_seed(a1);\n
    v5 = v8;\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v3[v4] = v4;\n
        v8 = v4 + 1;\n
    }\n
    for (v4 = 255; v4 >= 1; v4 = v8)\n
    {\n
        v1 = (0 CONCAT v5) /m v4 >> 32;\n
        v5 *= 3;\n
        v5 = v5 * 0x2000 ^ (v5 >> 19) ^ (v5 >> 21);\n
        v0 = v3[v4];\n
        v3[v4] = v3[v1];\n
        v3[v1] = v0;\n
        v8 = v4 - 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        v2[v3[v4]] = v4;\n
        v8 = v4 + 1;\n
    }\n
    return v8;\n
}\n
", "4211368:sub_4042a8": null, "4211376:cgc_hash_seed": "long long cgc_hash_seed(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 826981510;\n
    for (v1 = 0; a0[v1]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = a0[v1] ^ v0;\n
        v0 = v0 * 0x2000 ^ (v0 >> 19);\n
    }\n
    return v0;\n
}\n
", "4211478:sub_404316": null, "4211488:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4211522:sub_404342": null, "4211536:cgc_malloc_alloc": "long long cgc_malloc_alloc(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20], Other Possible Types: unsigned long long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (v1 > 2147483647)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = v1 - -3 & -4;\n
    if (v1 < 4)\n
    {\n
        v0 = cgc_tiny_alloc(a0, 4);\n
    }\n
    else if (v1 < 16)\n
    {\n
        v0 = cgc_tiny_alloc(a0, v1);\n
    }\n
    else if (v1 < 0x20000)\n
    {\n
        v0 = cgc_small_alloc(a0, v1);\n
    }\n
    else\n
    {\n
        v0 = cgc_large_alloc(a0, v1);\n
    }\n
    v2 = v0;\n
    return v2;\n
}\n
", "4211747:sub_404423": null, "4211760:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[5160];\n
    unsigned long long field_1430;\n
    unsigned long long field_1438;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_tiny_alloc(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x40]\n
    unsigned short v1[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned long long *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned short v7[2];  // rax\n
    struct_0 *v8;  // rax\n
    unsigned short v9[2];  // rax\n
\n
    v4 = a0;\n
    v3 = cgc_size_to_bin(a1);\n
    v2 = &(&a0->field_0)[v3]->field_0;\n
    if (v2)\n
    {\n
        (&a0->field_0)[v3] = *(v2);\n
        v5 = v2;\n
        return v5;\n
    }\n
    *(&v1) = *(&a0->padding_8[5136 + 8 * v3]);\n
    if (!v1)\n
    {\n
        if (!a0->field_1430)\n
        {\n
            a0->field_1430 = cgc_run_alloc(a0, 1);\n
            if (!a0->field_1430)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a0->field_1438 = 0;\n
        }\n
        v7 = a0->field_1430 + v4->field_1438;\n
        *(&a0->padding_8[5136 + 8 * v3]) = v7;\n
        v1 = v7;\n
        *(v1) = a1;\n
        *((v1 + 2)) = a1;\n
        v8 = a0;\n
        v8->field_1438 = v8->field_1438 + 0x1000;\n
        if (a0->field_1438 == 0x100000)\n
            a0->field_1430 = 0;\n
    }\n
    v0 = v1 + *((v1 + 2));\n
    v9 = v1;\n
    v9[1] = v9[1] + a1;\n
    if (*((v1 + 2)) + *(v1) > 0x1000)\n
        *(&a0->padding_8[5136 + 8 * v3]) = 0;\n
    v5 = v0;\n
    return v5;\n
}\n
", "4212214:sub_4045f6": null, "4212224:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_alloc(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a1 - -31 & -0x10;\n
    for (v2 = cgc_size_to_bin(v1); v2 < 131; v2 += 1)\n
    {\n
        for (v0 = a0[v2]; v0; v0 = v0->field_18)\n
        {\n
            if (v0->field_8 >= v1)\n
                break;\n
        }\n
        if (v0)\n
            break;\n
    }\n
    if (v2 == 131)\n
    {\n
        if (!cgc_small_alloc_run(a0))\n
        {\n
            v2 = 130;\n
            v0 = a0[v2];\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    cgc_small_unlink_free(a0, v2, v0);\n
    if (*((v0 + 8)) - v1 > 32)\n
        cgc_small_split(a0, v0, v1);\n
    v3 = v0 + 16;\n
    return v3;\n
}\n
", "4212540:sub_40473c": null, "4212544:cgc_large_alloc": "long long cgc_large_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    char v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    v2 = a1 - -4111 & -0x1000;\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0[0] = *(&v1);\n
    v0[0] = a0;\n
    v0[1] = v2;\n
    v3 = v0 + 1;\n
    return v3;\n
}\n
", "4212678:sub_4047c6": null, "4212688:malloc_free": "long long malloc_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long long v2;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    v0 = v2;\n
    if (!a1)\n
    {\n
        return *((a0 + (a1 >> 20) + 1048));\n
    }\n
    else if (v0)\n
    {\n
        if (v0 == 2)\n
        {\n
            v2 = cgc_small_free(a0, a1);\n
        }\n
        else if (v0 == 1)\n
        {\n
            v2 = cgc_tiny_free(a0, a1);\n
        }\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_large_free(a0, a1);\n
        return v2;\n
    }\n
}\n
", "4212859:sub_40487b": null, "4212864:cgc_large_free": "long long cgc_large_free(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
\n
    if ((a1 & 4095) != 16)\n
        cgc_heap_error(\"BAD FREE: large address is not aligned ptr=%08X\\n
\", a1);\n
    v0[0] = a1 - 16;\n
    if (v0[0] != a0)\n
        cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1, v0[0], a0);\n
    if (v0[1] >= 0x20000 && v0[1] <= 2147487743 && !(v0[1] & 4095))\n
        return cgc_deallocate(a0, a1);\n
    cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", a1, v0[1]);\n
    return cgc_deallocate(a0, a1);\n
}\n
", "4213090:sub_404962": null, "4213104:cgc_small_free": "long long cgc_small_free(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x58]\n
    unsigned long long v1;  // [bp-0x50]\n
    unsigned long long v2;  // [bp-0x48]\n
    unsigned long v3;  // [bp-0x40]\n
    unsigned long long v4[2];  // [bp-0x38]\n
    unsigned long long v5[2];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v6[2];  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v8[2];  // rax\n
    unsigned long long v9[2];  // rax\n
\n
    v6[0] = a1 - 16;\n
    v3 = a1 & -0x100000;\n
    if ((a1 & 7))\n
        cgc_heap_error(\"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\", a1);\n
    if ((v6[1] & 1))\n
        cgc_heap_error(\"BAD SMALL FREE: double free ptr=%08x\\n
\", a1);\n
    if (v6[1] <= 0x20000 && !(v6[1] < 16))\n
        goto LABEL_404a19;\n
    cgc_heap_error(\"BAD SMALL FREE: corrupted size ptr=%08x\\n
\", a1);\n
LABEL_404a19:\n
    if (!v6[0])\n
        v5[0] = 0;\n
    else\n
        v5 = v6 - v6[0];\n
    v4[0] = v6 + v6[1];\n
    if (v5 && (*((v5 + 8)) & -2) != v6[0])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\", v5, a1);\n
    if (v4[0] != v6[1])\n
        cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v4, a1);\n
    if (v5 && (*((v5 + 8)) & 1))\n
    {\n
        v2 = a0;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin(*((v5 + 8)) & -2), v5);\n
        v8 = v5;\n
        v8[1] = v6[1] + v8[1];\n
        v6 = v5;\n
        v4[0] = *((v6 + 8));\n
    }\n
    if ((v4[1] & 1))\n
    {\n
        v1 = a0;\n
        cgc_small_unlink_free(v1, cgc_size_to_bin(v4[1] & -2), v4);\n
        v9 = v6;\n
        v9[1] = v4[1] + v9[1];\n
        v4[0] = v6 + v6[1];\n
        v4[0] = *((v6 + 8));\n
    }\n
    v0 = a0;\n
    return cgc_small_insert_free(v0, cgc_size_to_bin(*((v6 + 8))), v6);\n
}\n
", "4213711:sub_404bcf": null, "4213712:cgc_tiny_free": "long long cgc_tiny_free(unsigned long long *a0, unsigned long long *a1)\n
{\n
    unsigned short *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
\n
    v0 = a1 & -0x1000;\n
    v1 = cgc_size_to_bin(*(v0));\n
    *(a1) = a0[v1];\n
    a0[v1] = a1;\n
    return a0;\n
}\n
", "4213809:sub_404c31": null, "4213824:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned short *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = *((a0 + (a1 >> 20) + 1048));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a1 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = a1 - 16;\n
    v3 = v1->field_8 - 16;\n
    return v3;\n
}\n
", "4213980:sub_404cdc": null, "4213984:cgc_malloc_realloc": "long long cgc_malloc_realloc(unsigned long a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a2 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (!a1)\n
    {\n
        v3 = cgc_malloc_alloc(a0, a2);\n
        return v3;\n
    }\n
    else if (cgc_malloc_size(a0, a1) < a2)\n
    {\n
        v2 = cgc_malloc_alloc(a0, a2);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = v2;\n
        v1 = a1;\n
        cgc_memcpy(v0, v1, cgc_malloc_size(a0, a1));\n
        malloc_free(a0, a1);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        return v3;\n
    }\n
}\n
", "4214254:sub_404dee": null, "4214256:cgc_size_to_bin": "long long cgc_size_to_bin(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 16)\n
    {\n
        v0 = a0 / 4 - 1;\n
        return v0;\n
    }\n
    else if (a0 <= 0x200)\n
    {\n
        v0 = a0 / 16 - -2;\n
        return v0;\n
    }\n
    else if (a0 <= 0x1200)\n
    {\n
        v0 = (a0 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (a0 <= 0x20000)\n
    {\n
        v0 = (a0 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4214439:sub_404ea7": null, "4214448:cgc_run_alloc": "long long cgc_run_alloc(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rdx\n
\n
    if (cgc_allocate(a0, a1, v5))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(&v0);\n
    v1 = v2 - -1048575 & -0x100000;\n
    if (v2 < v1)\n
        cgc_deallocate(a0, a1);\n
    if (v1 + 0x100000 < v2 + 0x200000)\n
        cgc_deallocate(a0, a1);\n
    *((a0 + (v1 >> 20) + 1048)) = a1;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214675:sub_404f93": null, "4214688:cgc_small_alloc_run": "long long cgc_small_alloc_run(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned long long v2[2];  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v0 = cgc_run_alloc(a0, 2);\n
    if (!v0)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    v2[0] = v0 - -19 & -0x10;\n
    v2[0] = 0;\n
    v2[1] = 0x100000 - (v2 - v0) - 32;\n
    v1[0] = v2 + v2[1];\n
    v5 = v2[1];\n
    v1[0] = v5;\n
    v1[1] = 0;\n
    cgc_small_insert_free(a0, 130, v2, v5);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4214892:sub_40506c": null, "4214896:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_small_unlink_free(unsigned long long *a0, unsigned long a1, struct_2 *a2)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    struct_2 *v2;  // rax\n
\n
    v0 = a2;\n
    if (!(a2->field_8 & 1))\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\", a2);\n
    v2 = a2;\n
    v2->field_8 = v2->field_8 & -2;\n
    if (a2->field_10)\n
        v0->field_10->field_18 = a2->field_18;\n
    if (a2->field_18)\n
        a2->field_18->field_10 = v0->field_10;\n
    if (a0[a1] == a2)\n
        a0[a1] = a2->field_18;\n
    a2->field_10 = 0;\n
    a2->field_18 = 0;\n
    return a2;\n
}\n
", "4215115:sub_40514b": null, "4215120:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_small_split(unsigned long long a0, struct_0 *a1, unsigned long a2)\n
{\n
    unsigned long long *v0;  // [bp-0x38]\n
    unsigned long long v1[2];  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
\n
    *(&v2) = a1->field_8 - a2;\n
    v1[0] = &a1->padding_0[a2];\n
    v0 = &a1->padding_0[a1->field_8];\n
    a1->field_8 = a2;\n
    v1[0] = a1->field_8;\n
    v1[1] = *(&v2);\n
    *(v0) = *(&v2);\n
    return cgc_small_insert_free(a0, cgc_size_to_bin(*(&v2)), v1);\n
}\n
", "4215276:sub_4051ec": null, "4215280:cgc_small_insert_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
long long cgc_small_insert_free(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if ((a2->field_8 & 1) == 1)\n
        cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\", a2);\n
    v1 = a2;\n
    v1->field_8 = v1->field_8 | 1;\n
    a2->field_10 = 0;\n
    a2->field_18 = *((a0 + a1 * 8));\n
    *((a0 + a1 * 8)) = a2;\n
    v2 = a2;\n
    if (a2->field_18)\n
    {\n
        v2 = a2->field_18;\n
        *((v2 + 16)) = a2;\n
    }\n
    return v2;\n
}\n
", "4215442:sub_405292": null, "4215456:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    unsigned long v3;  // [bp-0xc0]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x28]\n
    unsigned int v15;  // [bp-0x24]\n
    struct_0 *v16;  // [bp-0x20]\n
    unsigned long v17;  // [bp-0x18]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v6 = v20;\n
        v7 = v21;\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
    }\n
    v5 = v28;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 8;\n
    cgc_vfprintf(cgc_stderr, a0, &v14, &v18);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, a2, a3, a4, v28);\n
}\n
", "4215632:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (v0[a0] == a1)\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4215751:sub_4053c7": null, "4215760:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[a0] == v0[a1])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *((a0 + v0)) - *((a1 + v0));\n
            return v1;\n
        }\n
    }\n
}\n
", "4215914:sub_40546a": null, "4215920:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4216019:sub_4054d3": null, "4216032:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    if (a0 > a1)\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[1 + a2 + -1 * v0] = *((a1 + a2 - v0 - 1));\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4216232:sub_4055a8": null, "4216240:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4216324:sub_405604": null, "4216336:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4216496:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4216541:sub_4056dd": null, "4216544:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4216705:sub_405781": null, "4216720:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v0 = 1;\n
    if (a0->field_8 == -1)\n
    {\n
        v0 = 0;\n
        a0->field_8 = 0;\n
    }\n
    v1 = cgc__vsfprintf(a1, a2, a0, 0, 2147483647);\n
    if (!v0)\n
    {\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4216848:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4217009:sub_4058b1": null, "4217024:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0, 2147483647);\n
}\n
", "4217077:sub_4058f5": null, "4217088:cgc__vsfprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_1 *a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x178]\n
    struct_1 *v1;  // [bp-0x170]\n
    unsigned int v2;  // [bp-0x164]\n
    unsigned int *v3;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x158]\n
    unsigned int v5;  // [bp-0x14c]\n
    unsigned int *v6;  // [bp-0x148], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x140]\n
    unsigned int v8;  // [bp-0x134]\n
    unsigned int *v9;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0x128]\n
    unsigned int v11;  // [bp-0x11c]\n
    unsigned int v12;  // [bp-0x118]\n
    unsigned int v13;  // [bp-0x114]\n
    unsigned int v14;  // [bp-0x110]\n
    char v15;  // [bp-0x109]\n
    unsigned long v16;  // [bp-0x108]\n
    unsigned long v17;  // [bp-0x100]\n
    char v18;  // [bp-0xf1]\n
    unsigned long v19;  // [bp-0xf0]\n
    unsigned long v20;  // [bp-0xe8]\n
    char v21;  // [bp-0xd9]\n
    unsigned long v22;  // [bp-0xd8]\n
    unsigned long v23;  // [bp-0xd0]\n
    unsigned long v24;  // [bp-0xc8]\n
    unsigned long v25;  // [bp-0xc0]\n
    char v26;  // [bp-0xb1]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned long v29;  // [bp-0xa8]\n
    struct_0 *v30;  // [bp-0xa0]\n
    char v31;  // [bp-0x91]\n
    unsigned long v32;  // [bp-0x90]\n
    char v33;  // [bp-0x88]\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v35;  // [bp-0x3c]\n
    unsigned int v36;  // [bp-0x38]\n
    char v37;  // [bp-0x31]\n
    char *v38;  // [bp-0x28]\n
    void* v39;  // [bp-0x20]\n
    struct_1 *v40;  // [bp-0x18]\n
    struct_0 *v41;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v43;  // rax\n
    char *v44;  // rax\n
    struct_0 *v45;  // rax\n
    struct_0 *v46;  // rax\n
    struct_0 *v48;  // rax\n
    struct_0 *v50;  // rax\n
    struct_1 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_1 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    struct_1 *v57;  // rcx\n
    unsigned long long v58;  // rdx\n
    unsigned int *v59;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v60;  // rcx\n
    char *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned int *v64;  // rax\n
    struct_1 *v65;  // rcx\n
    unsigned int *v66;  // rdx\n
    struct_1 *v67;  // rcx\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    struct_1 *v70;  // rcx\n
    unsigned int *v71;  // rdx\n
    unsigned long long v72;  // rsi\n
    unsigned long v73;  // rdx\n
    unsigned long v74;  // rcx\n
    char *v75;  // rax\n
    char *v76;  // rax\n
\n
    v41 = a0;\n
    v40 = a1;\n
    v39 = a2;\n
    v38 = a3;\n
    v34 = 0;\n
    while (true)\n
    {\n
        v43 = v41;\n
        v41 = v43 + 1;\n
        v37 = v43->field_0;\n
        if (!v37)\n
            break;\n
        v31 = 32;\n
        while (v37 != 37)\n
        {\n
            if (v34 < a4)\n
            {\n
                v26 = v37;\n
                if (v39)\n
                    cgc_fwrite(&v26, 1, v39);\n
                if (v38)\n
                    v38[v34] = v26;\n
                v34 += 1;\n
            }\n
            else\n
            {\n
                v44 = v34;\n
                v34 = v44 + 1;\n
                if (v44 == -1)\n
                    cgc__terminate(a0);\n
            }\n
            v45 = v41;\n
            v41 = v45 + 1;\n
            v37 = v45->field_0;\n
            if (!v37)\n
                goto LABEL_4063ec;\n
        }\n
        v30 = v41;\n
        v36 = 4;\n
        v35 = 0;\n
        v46 = v41;\n
        v41 = v46 + 1;\n
        v14 = v46->field_0;\n
        v37 = v14;\n
        if (!v14)\n
            break;\n
        if (v14 == 32)\n
        {\n
            v31 = 32;\n
        }\n
        else if (v14 == 48)\n
        {\n
            v31 = 48;\n
        }\n
        else\n
        {\n
            v41 += 1;\n
        }\n
        if (*(v41) >= 48 && *(v41) <= 57)\n
            v35 = cgc_strtoul(v41, &v41, 10);\n
        v48 = v41;\n
        v41 = v48 + 1;\n
        v13 = v48->field_0;\n
        v37 = v13;\n
        if (!v13)\n
            break;\n
        if (v13 == 104)\n
        {\n
            if (v41->field_0 != 104)\n
            {\n
                v36 = 2;\n
            }\n
            else\n
            {\n
                v41 += 1;\n
                v36 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v13 != 108)\n
            {\n
                v41 += 1;\n
            }\n
            else if (v41->field_0 == 108)\n
            {\n
                v41 += 1;\n
                v36 = 8;\n
            }\n
            else\n
            {\n
                v36 = 4;\n
            }\n
        }\n
        v50 = v41;\n
        v41 = v50 + 1;\n
        v12 = v50->field_0;\n
        v37 = v12;\n
        if (!v12)\n
        {\n
            v25 = v41 - v30;\n
            if (v34 < a4)\n
            {\n
                v24 = a4 - v34;\n
                if (v24 > v25)\n
                    v24 = v25;\n
                if (v39)\n
                    cgc_fwrite(v30, v24, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], v30, v24);\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v25 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v25 + v34;\n
            }\n
            break;\n
        }\n
        if (v12 == 88)\n
        {\n
LABEL_405e4d:\n
            if (v37 == 100)\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v10 = v40;\n
                v11 = v10->field_0;\n
                if (v11 > 40)\n
                {\n
                    v65 = v10;\n
                    v66 = v65->field_8;\n
                    v65->field_8 = &v66[2];\n
                    v9 = v66;\n
                }\n
                else\n
                {\n
                    v62 = v10;\n
                    v63 = v11;\n
                    v64 = v63 + v62->field_10;\n
                    v62->field_0 = v63 + 8;\n
                    v9 = v64;\n
                }\n
                v27 = *(v9);\n
                cgc__convert_signed(&v33, v27, 10, 0);\n
            }\n
            else\n
            {\n
                if (!(v36 <= 4))\n
                    break;\n
                v7 = v40;\n
                v8 = v7->field_0;\n
                if (v8 > 40)\n
                {\n
                    v70 = v7;\n
                    v71 = v70->field_8;\n
                    v70->field_8 = &v71[2];\n
                    v6 = v71;\n
                }\n
                else\n
                {\n
                    v67 = v7;\n
                    v68 = v8;\n
                    v69 = v68 + v67->field_10;\n
                    v67->field_0 = v68 + 8;\n
                    v6 = v69;\n
                }\n
                v28 = *(v6);\n
                a0 = &v33;\n
                v72 = v28;\n
                v73 = (v37 == 117 ? 16 : 10);\n
                v74 = v37 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v32 = cgc_strlen(&v33);\n
            if (v32 < v35)\n
            {\n
                v35 -= v32;\n
                do\n
                {\n
                    if (v34 >= a4)\n
                    {\n
                        v75 = v34;\n
                        v34 = v75 + 1;\n
                        if (v75 == -1)\n
                            cgc__terminate(a0);\n
                    }\n
                    else\n
                    {\n
                        v21 = v31;\n
                        if (v39)\n
                            cgc_fwrite(&v21, 1, v39);\n
                        if (v38)\n
                            v38[v34] = v21;\n
                        v34 += 1;\n
                    }\n
                    v35 -= 1;\n
                } while (v35 > 0);\n
            }\n
            v20 = v32;\n
            if (v34 < a4)\n
            {\n
                v19 = a4 - v34;\n
                if (v19 > v20)\n
                    v19 = v20;\n
                if (v39)\n
                    cgc_fwrite(&v33, v19, v39);\n
                if (v38)\n
                    cgc_memcpy(&v38[v34], &v33, v19);\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            else\n
            {\n
                if (v34 + v20 < v34)\n
                    cgc__terminate(a0);\n
                v34 = v20 + v34;\n
            }\n
            goto LABEL_4063dd;\n
        }\n
        else\n
        {\n
            if (v12 == 99)\n
            {\n
                v4 = v40;\n
                v5 = v4->field_0;\n
                if (v5 > 40)\n
                {\n
                    v55 = v4;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v3 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v4;\n
                    v53 = v5;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v3 = v54;\n
                }\n
                v37 = *(v3);\n
                if (v34 >= a4)\n
                {\n
                    v61 = v34;\n
                    v34 = v61 + 1;\n
                    if (v61 == -1)\n
                        cgc__terminate(a0);\n
                }\n
                else\n
                {\n
                    v18 = v37;\n
                    if (v39)\n
                        cgc_fwrite(&v18, 1, v39);\n
                    if (v38)\n
                        v38[v34] = v18;\n
                    v34 += 1;\n
                }\n
                goto LABEL_4063dd;\n
            }\n
            if (v12 == 100)\n
                goto LABEL_405e4d;\n
            if (v12 == 115)\n
            {\n
                v1 = v40;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v60 = v1;\n
                    v59 = v60->field_8;\n
                    v60->field_8 = v59 + 8;\n
                }\n
                else\n
                {\n
                    v57 = v1;\n
                    v58 = v2;\n
                    v59 = v58 + v57->field_10;\n
                    v57->field_0 = v58 + 8;\n
                }\n
                v0 = v59;\n
                v29 = *(&v0);\n
                v17 = cgc_strlen(v29);\n
                if (v34 >= a4)\n
                {\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
                else\n
                {\n
                    v16 = a4 - v34;\n
                    if (v16 > v17)\n
                        v16 = v17;\n
                    if (v39)\n
                        cgc_fwrite(v29, v16, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v29, v16);\n
                    if (v34 + v17 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v17 + v34;\n
                }\n
LABEL_4063dd:\n
            }\n
            else if (v12 != 117 && v12 != 120)\n
            {\n
                v23 = v41 - v30;\n
                if (v34 >= a4)\n
                {\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                else\n
                {\n
                    v22 = a4 - v34;\n
                    if (v22 > v23)\n
                        v22 = v23;\n
                    if (v39)\n
                        cgc_fwrite(v30, v22, v39);\n
                    if (v38)\n
                        cgc_memcpy(&v38[v34], v30, v22);\n
                    if (v34 + v23 < v34)\n
                        cgc__terminate(a0);\n
                    v34 = v23 + v34;\n
                }\n
                goto LABEL_4063dd;\n
            }\n
        }\n
    }\n
LABEL_4063ec:\n
    v39 = 0;\n
    if (v34 >= a4)\n
    {\n
        v76 = v34;\n
        v34 = v76 + 1;\n
        if (v76 != -1)\n
            return v34 - 1;\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        v15 = 0;\n
        if (v39)\n
            cgc_fwrite(&v15, 1, v39);\n
        if (v38)\n
            v38[v34] = v15;\n
        v34 += 1;\n
        return v34 - 1;\n
    }\n
}\n
", "4220041:sub_406489": null, "4220048:cgc__convert_signed": "long long cgc__convert_signed(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (v0 < 0)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = 45;\n
        v0 = -(v0);\n
    }\n
    return cgc__convert_unsigned(v1, v0, a2, a3);\n
}\n
", "4220129:sub_4064e1": null, "4220144:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
long long cgc__convert_unsigned(char *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x38]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x14]\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v3 = a1;\n
    v1 = &a0[20];\n
    if (a3)\n
        v2 = \"0123456789ABCDEF\";\n
    else\n
        v2 = \"0123456789abcdef\";\n
    v5 = v1;\n
    v1 = v5 + 1;\n
    v5[1].field_-1 = 0;\n
    if (!v3)\n
    {\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        v6[1].field_-1 = *(v2);\n
        return cgc_memmove(a0, v1, 20 + -0x1 * &a0[-1 * v1]);\n
    }\n
    while (true)\n
    {\n
        v0 = v2;\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT v3) /m a2 >> 32];\n
        v3 = (0 CONCAT v3) /m a2;\n
    }\n
}\n
", "4220389:sub_4065e5": null, "4220400:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(unsigned int a0, unsigned long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4220442:sub_40661a": null, "4220448:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(v2));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4220613:sub_4066c5": null, "4220624:cgc_strcasestr": "long long cgc_strcasestr(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = cgc_strlen(a1);\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!a0[v1])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strncasecmp(&a0[v1], a1, v0))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4220768:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; a0[v0]; v0 += 1)\n
    {\n
        if (a0[v0] == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = &a0[v0];\n
    return v1;\n
}\n
", "4220907:sub_4067eb": null, "4220912:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4221051:sub_40687b": null, "4221056:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    for (v0 = a0; *(v1); v0 += 1)\n
    {\n
        *(v0) = *(v1);\n
        v1 += 1;\n
    }\n
    *(v0) = 0;\n
    return a0;\n
}\n
", "4221146:sub_4068da": null, "4221152:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    v1[v0] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221265:sub_406951": null, "4221280:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4221343:sub_40699f": null, "4221344:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    char v1;  // [bp-0x31]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = &v4[a2];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v4))\n
        {\n
            v1 = 0;\n
            if (*(v3))\n
            {\n
                v0 = cgc_tolower(*(v4));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(v3)))\n
                    v1 = v4 < v2;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    if (v4 == v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = *(v4) - *(v3);\n
    return v5;\n
}\n
", "4221576:sub_406a88": null, "4221584:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    v1 = a0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = v1 - a0 < a2;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(v2);\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - a0 < a2; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return a0;\n
}\n
", "4221763:sub_406b43": null, "4221776:cgc_strndup": "long long cgc_strndup(unsigned long a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
        v1 = a1;\n
    v0 = cgc_malloc(v1 + 1);\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(v0, a0, v1);\n
    *((v0 + v1)) = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4221915:sub_406bdb": null, "4221920:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = &*(a0)->field_0;\n
    if (!v0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    for (v1 = 0; v0[v1]; v1 += 1)\n
    {\n
        if (cgc_strchr(a1, v0[v1]))\n
            break;\n
    }\n
    if (!v0[v1])\n
        *(a0) = 0;\n
    else\n
        *(a0) = &v0[1 + v1];\n
    v0[v1] = 0;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4222139:sub_406cbb": null, "4222144:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!cgc_strcmp(&a0[v0], a1))\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4222271:sub_406d3f": null, "4222272:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x68], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x60], Other Possible Types: unsigned long long\n
    char v2[2];  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x4c]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8[2];  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x24], Other Possible Types: unsigned long\n
    char v10[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v11;  // [bp-0x10]\n
\n
    *(&v10) = a0;\n
    v9 = a2;\n
    *(&v8) = v10;\n
    v7 = 1;\n
    v6 = 1;\n
    v5 = 0;\n
    for (v4 = 0; cgc_isspace(v10[0]); v10 = &v10[1])\n
    {\n
        if (!v10[0])\n
            goto LABEL_406efc;\n
    }\n
    if (*(v10) == 43)\n
    {\n
        v7 = 1;\n
        v10 = &v10[1];\n
    }\n
    else if (*(v10) == 45)\n
    {\n
        v7 = -1;\n
        v10 = &v10[1];\n
    }\n
    if (v9 == 16)\n
    {\n
        if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
            v10 += 2;\n
        goto LABEL_406f0b;\n
    }\n
    if (v9)\n
    {\n
LABEL_406f0b:\n
        for (; *(v10); v10 = &v10[1])\n
        {\n
            if (cgc_isdigit(v10[0]))\n
            {\n
                v3 = *(v10) - 48;\n
            }\n
            else if (cgc_islower(v10[0]))\n
            {\n
                v3 = *(v10) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v10[0]))\n
                    break;\n
                v3 = *(v10) + -55;\n
            }\n
            if (v3 >= v9)\n
                break;\n
            v6 = 0;\n
            v4 = v9 * v4 + v3;\n
            if (v4 > 2147483647)\n
                v5 = 1;\n
        }\n
    }\n
    if (*(v10) == 48 && *((v10 + 1)) >= 48 && *((v10 + 1)) <= 55)\n
    {\n
        *(&v10) = &v10[1];\n
        v9 = 8;\n
        goto LABEL_406efc;\n
    }\n
    if (*(v10) == 48 && cgc_tolower(*((v10 + 1))) == 120)\n
    {\n
        v10 += 2;\n
        v9 = 16;\n
        goto LABEL_406efc;\n
    }\n
    if (!cgc_isdigit(v10[0]))\n
        goto LABEL_406efc;\n
    v9 = 10;\n
LABEL_406efc:\n
    if (a1)\n
    {\n
        if (v6)\n
            *(&v2) = v8;\n
        else\n
            v2 = v10;\n
        *(a1) = v2;\n
    }\n
    if (v7 >= 0)\n
    {\n
        if (v5)\n
            v0 = 2147483647;\n
        else\n
            v0 = v4;\n
        v11 = v0;\n
        return v11;\n
    }\n
    else\n
    {\n
        if (v5)\n
            v1 = -0x80000000;\n
        else\n
            v1 = -(v4);\n
        v11 = v1;\n
        return v11;\n
    }\n
}\n
", "4223144:sub_4070a8": null, "4223152:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x58], Other Possible Types: unsigned long long\n
    char v1[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x44]\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7[2];  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char v9[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v9) = a0;\n
    v8 = a2;\n
    *(&v7) = v9;\n
    v6 = 1;\n
    v5 = 1;\n
    v4 = 0;\n
    for (v3 = 0; cgc_isspace(v9[0]); v9 = &v9[1])\n
    {\n
        if (!v9[0])\n
            goto LABEL_40726c;\n
    }\n
    if (*(v9) == 43)\n
    {\n
        v6 = 1;\n
        v9 = &v9[1];\n
    }\n
    else if (*(v9) == 45)\n
    {\n
        v6 = -1;\n
        v9 = &v9[1];\n
    }\n
    if (v8 == 16)\n
    {\n
        if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
            v9 += 2;\n
        goto LABEL_40727b;\n
    }\n
    if (v8)\n
    {\n
LABEL_40727b:\n
        for (; *(v9); v9 = &v9[1])\n
        {\n
            if (cgc_isdigit(v9[0]))\n
            {\n
                v2 = *(v9) - 48;\n
            }\n
            else if (cgc_islower(v9[0]))\n
            {\n
                v2 = *(v9) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(v9[0]))\n
                    break;\n
                v2 = *(v9) + -55;\n
            }\n
            if (v2 >= v8)\n
                break;\n
            v5 = 0;\n
            v3 = v8 * v3 + v2;\n
            if (v3 > 4294967295)\n
                v4 = 1;\n
        }\n
    }\n
    if (*(v9) == 48 && *((v9 + 1)) >= 48 && *((v9 + 1)) <= 55)\n
    {\n
        *(&v9) = &v9[1];\n
        v8 = 8;\n
        goto LABEL_40726c;\n
    }\n
    if (*(v9) == 48 && cgc_tolower(*((v9 + 1))) == 120)\n
    {\n
        v9 += 2;\n
        v8 = 16;\n
        goto LABEL_40726c;\n
    }\n
    if (!cgc_isdigit(v9[0]))\n
        goto LABEL_40726c;\n
    v8 = 10;\n
LABEL_40726c:\n
    if (a1)\n
    {\n
        if (v5)\n
            *(&v1) = v7;\n
        else\n
            v1 = v9;\n
        *(a1) = v1;\n
    }\n
    if (v6 < 0)\n
    {\n
        if (v3 > 2147483647 && v3 != -0x80000000)\n
            v4 = 1;\n
        v3 = -(v3);\n
    }\n
    if (v4)\n
    {\n
        v0 = 4294967295;\n
        return v0;\n
    }\n
    v0 = v3;\n
    return v0;\n
}\n
", "4224013:sub_40740d": null, "4224016:cgc_view_day": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[400];\n
    unsigned long long field_190;\n
    unsigned int field_198;\n
} struct_0;\n
\n
long long cgc_view_day(struct_2 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    struct_1 *v3;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v4;  // [bp-0x28]\n
    struct_0 *v6;  // rax\n
\n
    a1 = a1;\n
    cgc_get_date_str(&v4, &a1);\n
    v3 = a0->field_8;\n
    v2 = 0;\n
    cgc_printf(\"Viewing Calendar Appointments for %s\\n
\", &v4, a2, a3, a4);\n
    while (true)\n
    {\n
        if (v3)\n
        {\n
            v2 = cgc_compare_date(*((v3 + 8)) + 400, &a1);\n
            if (v2 > 0)\n
                return cgc_printf(\"------------------------\\n
\", a1, a2, a3, a4);\n
            v6 = *((v3 + 8));\n
            a3 = v6->field_190;\n
            v0 = a3;\n
            v1 = v6->field_198;\n
            a2 = a1;\n
            if (cgc_date_within(v0, v1, a1, v0))\n
            {\n
                cgc_printf(\"------------------------\\n
\", v1, a2, a3, a4);\n
                cgc_print_event(*((v3 + 8)));\n
            }\n
            v3 = v3->field_0;\n
        }\n
        else\n
        {\n
            return cgc_printf(\"------------------------\\n
\", a1, a2, a3, a4);\n
        }\n
    }\n
}\n
", "4224248:sub_4074f8": null, "4224256:cgc_view_month": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[402];\n
    char field_192;\n
    char padding_193[5];\n
    char field_198;\n
} struct_1;\n
\n
long long cgc_view_month(struct_2 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x34]\n
    struct_0 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v4 = a1;\n
    cgc_get_date_str(&v3, &v4);\n
    v2 = a0->field_8;\n
    v1 = 0;\n
    *(&v0) = cgc_get_month(&v4);\n
    cgc_printf(\"Viewing Monthly Calendar for %s %d\\n
\", *(&v0), v4, a3, a4);\n
    for (; v2; v2 = v2->field_0)\n
    {\n
        a3 = *(&v4 + 2);\n
        if (v2->field_8->field_192 >= a3)\n
        {\n
            a3 = *(&v4 + 2);\n
            if (v2->field_8->field_198 <= a3)\n
            {\n
                cgc_printf(\"------------------------\\n
\", a1, a2, a3, a4);\n
                cgc_print_event(v2->field_8);\n
            }\n
        }\n
    }\n
    return cgc_printf(\"------------------------\\n
\", a1, a2, a3, a4);\n
}\n
", "4224466:sub_4075d2": null, "4224480:cgc_calc_agenda_lookahead": "long long cgc_calc_agenda_lookahead(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned short v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v2;  // [bp-0xe]\n
\n
    v0 = a0;\n
    v1 = v0;\n
    v1 = v1;\n
    v2 = *(&v0 + 2) + 3;\n
    if (v2 > 12)\n
    {\n
        v1 += 1;\n
        v2 = (v2 >> 31 CONCAT v2) /m 12 >> 32;\n
    }\n
    return *(&v1);\n
}\n
", "4224561:sub_407631": null, "4224576:cgc_view_agenda": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_view_agenda(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x59]\n
    unsigned long v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x4c]\n
    struct_0 *v3;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x40]\n
    char v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    char v8;  // [bp-0x10]\n
    unsigned long v10;  // rcx\n
\n
    v7 = 0;\n
    v6 = 0;\n
    cgc_get_date_str(&v5, &v8);\n
    v4 = cgc_calc_agenda_lookahead(a1);\n
    v3 = a0->field_8;\n
    v2 = 0;\n
    v1 = cgc_get_month(&v8);\n
    cgc_printf(\"Agenda View\\n
\", a1, a2, a3, a4);\n
    while (true)\n
    {\n
        v10 = v7;\n
        v7 = v10 + 1;\n
        v0 = 0;\n
        if (v10 < a0->field_0)\n
            v0 = v6 < 8;\n
        if (!(v0 & 1))\n
            return cgc_printf(\"------------------------\\n
\", a1, a0, v10, a4);\n
        v2 = cgc_compare_date(*((v3 + 8)) + 400, &v8);\n
        if (v2 < 0)\n
        {\n
            v3 = *(v3);\n
        }\n
        else\n
        {\n
            if (cgc_compare_date(*((v3 + 8)) + 400, &v4) > 0)\n
                return cgc_printf(\"------------------------\\n
\", a1, a0, v10, a4);\n
            cgc_printf(\"------------------------\\n
\", a1, a0, v10, a4);\n
            cgc_print_event(*((v3 + 8)));\n
            v6 += 1;\n
            v3 = *(v3);\n
        }\n
    }\n
}\n
", "4224897:sub_407781": null, "4224912:cgc_add_calendar_event": "long long cgc_add_calendar_event(unsigned int *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!cgc_insert_in_order(a0 + 2, a1, cgc_compare_event_dates))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    *(a0) = *(a0) + 1;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4224994:sub_4077e2": null, "4225008:cgc_remove_calendar_event": "long long cgc_remove_calendar_event(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x20], Other Possible Types: unsigned long long\n
    char v1;  // [bp-0x9]\n
\n
    v0 = a1;\n
    v0 = cgc_pop(a0 + 2, v0, cgc_compare_events);\n
    if (!cgc_delete_event(&v0))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    *(a0) = *(a0) - 1;\n
    v1 = 1;\n
    return v1;\n
}\n
", "4225103:sub_40784f": null, "4225104:cgc_is_valid_date": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
} struct_0;\n
\n
long long cgc_is_valid_date(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x9]\n
\n
    if (a0 && a0->field_0 >= 2015 && a0->field_0 <= 2025 && a0->field_2 >= 1 && a0->field_2 <= 12 && a0->field_3 >= 1)\n
    {\n
        v0 = a0->field_2;\n
        if (v0 == 1)\n
        {\n
LABEL_407989:\n
            if (a0->field_3 > 31)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
            goto LABEL_407a35;\n
        }\n
        else\n
        {\n
            if (v0 == 2)\n
            {\n
                if ((a0->field_0 >> 31 CONCAT a0->field_0) /m 400 >> 32 && !(a0->field_0 >> 31 CONCAT a0->field_0) /m 4 >> 32)\n
                {\n
                    if (a0->field_3 > 29)\n
                    {\n
                        v1 = 0;\n
                        return v1;\n
                    }\n
                    else if (a0->field_3 > 28)\n
                    {\n
                        v1 = 0;\n
                        return v1;\n
                    }\n
                }\n
LABEL_407a35:\n
                v1 = 1;\n
                return v1;\n
            }\n
            if (v0 == 3)\n
                goto LABEL_407989;\n
            if (v0 != 4)\n
            {\n
                if (v0 == 5)\n
                    goto LABEL_407989;\n
                if (v0 != 6)\n
                {\n
                    if (v0 - 7 < 2)\n
                        goto LABEL_407989;\n
                    if (v0 != 9)\n
                    {\n
                        if (v0 == 10)\n
                            goto LABEL_407989;\n
                        if (v0 != 11)\n
                        {\n
                            if (v0 != 12)\n
                            {\n
                                v1 = 0;\n
                                return v1;\n
                            }\n
                            goto LABEL_407989;\n
                        }\n
                    }\n
                }\n
            }\n
            if (a0->field_3 > 30)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
            goto LABEL_407a35;\n
        }\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4225613:sub_407a4d": null, "4225616:cgc_is_valid_time": "long long cgc_is_valid_time(char a0[2])\n
{\n
    char v0;  // [bp-0x11]\n
\n
    v0 = 0;\n
    if (a0)\n
    {\n
        v0 = 0;\n
        if (a0[0] >= 0)\n
        {\n
            v0 = 0;\n
            if (a0[0] <= 23)\n
            {\n
                v0 = 0;\n
                if (a0[1] >= 0)\n
                    v0 = a0[1] <= 59;\n
            }\n
        }\n
    }\n
    return v0 & 1;\n
}\n
", "4225734:sub_407ac6": null, "4225744:cgc_set_date": "long long cgc_set_date(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned short v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1e]\n
    char v2;  // [bp-0x1d]\n
    char v3;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = a3;\n
    v1 = a1;\n
    v2 = a2;\n
    if (!cgc_is_valid_date(&v0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(a0) = *(&v0);\n
    v3 = 1;\n
    return v3;\n
}\n
", "4225863:sub_407b47": null, "4225872:cgc_set_time": "long long cgc_set_time(char a0[2], unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (a0 && a1 >= 0 && a1 <= 23 && a2 >= 0 && a2 <= 59)\n
    {\n
        a0[0] = a1;\n
        a0[1] = a2;\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4225992:sub_407bc8": null, "4226000:cgc_set_datetime": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned short field_4;\n
} struct_0;\n
\n
long long cgc_set_datetime(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0[2];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    if (a0 && cgc_is_valid_date(&v1) && cgc_is_valid_time(v0))\n
    {\n
        a0->field_0 = a1;\n
        a0->field_4 = a2;\n
        v2 = 1;\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4226111:sub_407c3f": null, "4226112:cgc_set_duration": "long long cgc_set_duration(void* a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned short v0;  // [bp-0x24]\n
    char v1;  // [bp-0x20]\n
    unsigned short v2;  // [bp-0x1c]\n
    unsigned short v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned short v5;  // [bp-0xc]\n
    char v6;  // [bp-0x9]\n
\n
    v3 = a1 / 0x100000000;\n
    v5 = v3;\n
    v0 = a2 / 0x100000000;\n
    v2 = v0;\n
    if (!a0)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_compare_date(&v4, &v1) >= 0)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (!cgc_set_datetime(a0, a1, v5))\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (cgc_set_datetime(a0 + 6, a2, v2))\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
}\n
", "4226319:sub_407d0f": null, "4226320:cgc_compare_date": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
} struct_0;\n
\n
long long cgc_compare_date(struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        if (a0->field_0 < a1->field_0)\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (a0->field_0 > a1->field_0)\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else if (a0->field_2 < a1->field_2)\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (a0->field_2 > a1->field_2)\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else if (a0->field_3 < a1->field_3)\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (a0->field_3 <= a1->field_3)\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4226606:sub_407e2e": null, "4226608:cgc_compare_time": "long long cgc_compare_time(char a0[2], char a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        if (a0[0] < a1[0])\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (a0[0] > a1[0])\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else if (a0[1] < a1[1])\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (a0[1] <= a1[1])\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4226822:sub_407f06": null, "4226832:cgc_compare_datetime": "long long cgc_compare_datetime(void* a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    v0 = cgc_compare_date(a0, a1);\n
    if (v0)\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
    v1 = cgc_compare_time(a0 + 4, a1 + 4);\n
    return v1;\n
}\n
", "4226941:sub_407f7d": null, "4226944:cgc_durations_overlap": "long long cgc_durations_overlap(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned long v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x10]\n
    char v6;  // [bp-0x9]\n
\n
    v4 = a0;\n
    v5 = a1;\n
    v2 = a2;\n
    v3 = a3;\n
    v1 = cgc_compare_datetime(&v4, &v2);\n
    v0 = cgc_compare_datetime(&v4, &v2);\n
    if (v1 == -1 && v0 == 1)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    v1 = cgc_compare_datetime(&v2, &v4);\n
    v0 = cgc_compare_datetime(&v2, &v4);\n
    if (v1 == -1 && v0 == 1)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4227146:sub_40804a": null, "4227152:cgc_date_within": "long long cgc_date_within(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    char v5;  // [bp-0x9]\n
\n
    v3 = a0;\n
    v4 = a1;\n
    v2 = a2;\n
    v1 = cgc_compare_date(&v3, &v2);\n
    v0 = cgc_compare_date(&v3, &v2);\n
    if (v1 <= 0 && v0 >= 0)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4227263:sub_4080bf": null, "4227264:cgc_datetime_within": "long long cgc_datetime_within(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned short v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned short v4;  // [bp-0x2c]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    char v7;  // [bp-0x9]\n
\n
    v6 = a1;\n
    v5 = a0;\n
    v2 = a2 / 0x100000000;\n
    v3 = a2;\n
    v4 = v2;\n
    v1 = cgc_compare_datetime(&v5, &v3);\n
    v0 = cgc_compare_datetime(&v5, &v3);\n
    if (v1 == -1 && v0 == 1)\n
    {\n
        v7 = 1;\n
        return v7;\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4227402:sub_40814a": null, "4227408:cgc_strtodate": "long long cgc_strtodate(char *a0, unsigned int *a1)\n
{\n
    char v0[2];  // [bp-0x40]\n
    char v1[2];  // [bp-0x38]\n
    char v2[2];  // [bp-0x30]\n
    char v3;  // [bp-0x28], Other Possible Types: unsigned short\n
    char v4;  // [bp-0x26]\n
    char v5;  // [bp-0x25]\n
    char *v6;  // [bp-0x18]\n
    char v7;  // [bp-0x9]\n
\n
    if (a0 && a1 && cgc_strlen(a0) >= 8)\n
    {\n
        cgc_memset(&v3, 0, 4);\n
        *(&v1) = cgc_strsep(&v6, \"-\");\n
        if (!v1)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        *(&v0) = cgc_strsep(&v6, \"-\");\n
        if (!v0)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        *(&v2) = cgc_strsep(&v6, \"-\");\n
        if (!v2)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        v3 = cgc_strtol(v2, NULL, 10);\n
        v4 = cgc_strtol(v1, NULL, 10);\n
        v5 = cgc_strtol(v0, NULL, 10);\n
        if (!cgc_is_valid_date(&v3))\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        *(a1) = *(&v3);\n
        v7 = 1;\n
        return v7;\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4227720:sub_408288": null, "4227728:cgc_strtotime": "long long cgc_strtotime(char *a0, unsigned short *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30]\n
    char v6[2];  // [bp-0x28]\n
    char v7;  // [bp-0x27]\n
    char *v8;  // [bp-0x18]\n
    char v9;  // [bp-0x9]\n
\n
    if (a0 && a1 && cgc_strlen(a0) >= 4)\n
    {\n
        v5 = cgc_strsep(&v8, \":\");\n
        if (!v5)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v4 = cgc_strsep(&v8, \"-\");\n
        if (!v4)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        *(v6) = cgc_strtol(v5, NULL, 10);\n
        v7 = cgc_strtol(v4, NULL, 10);\n
        if (!v6[0])\n
        {\n
            v3 = 0;\n
            while (true)\n
            {\n
                v1 = v3;\n
                if (v1 >= cgc_strlen(v5))\n
                    break;\n
                if (v5[v3] != 48)\n
                {\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                v3 += 1;\n
            }\n
        }\n
        if (!v7)\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                v0 = v2;\n
                if (v0 >= cgc_strlen(v4))\n
                    break;\n
                if (v4[v2] != 48)\n
                {\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                v2 += 1;\n
            }\n
        }\n
        if (!cgc_is_valid_time(v6))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        *(a1) = v6;\n
        v9 = 1;\n
        return v9;\n
    }\n
    v9 = 0;\n
    return v9;\n
}\n
", "4228179:sub_408453": null, "4228192:cgc_print_date": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
} struct_0;\n
\n
long long cgc_print_date(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    return cgc_printf(\"%d-%d-%d\", a0->field_2, a0->field_3, a0->field_0, a4);\n
}\n
", "4228247:sub_408497": null, "4228256:cgc_get_date_str": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
} struct_0;\n
\n
long long cgc_get_date_str(unsigned long long a0, struct_0 *a1)\n
{\n
    return cgc_sprintf(a0, \"%d-%d-%d\", a1->field_2, a1->field_3, a1->field_0);\n
}\n
", "4228320:cgc_get_month": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
long long cgc_get_month(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    if (!a0)\n
    {\n
        v1 = \"Undefined Month\";\n
        return v1;\n
    }\n
    v0 = a0->field_2 - 1;\n
    switch (v0)\n
    {\n
    case 0:\n
        v1 = \"January\";\n
        return v1;\n
    case 1:\n
        v1 = \"Februrary\";\n
        return v1;\n
    case 2:\n
        v1 = \"March\";\n
        return v1;\n
    case 3:\n
        v1 = \"April\";\n
        return v1;\n
    case 4:\n
        v1 = \"May\";\n
        return v1;\n
    case 5:\n
        v1 = \"June\";\n
        return v1;\n
    case 6:\n
        v1 = \"July\";\n
        return v1;\n
    case 7:\n
        v1 = \"August\";\n
        return v1;\n
    case 8:\n
        v1 = \"Septempber\";\n
        return v1;\n
    case 9:\n
        v1 = \"October\";\n
        return v1;\n
    case 10:\n
        v1 = \"November\";\n
        return v1;\n
    case 11:\n
        v1 = \"December\";\n
        return v1;\n
    default:\n
        v1 = \"Undefined Month\";\n
        return v1;\n
    }\n
}\n
", "4228610:sub_408602": null, "4228624:cgc_print_time": "extern char g_40b811;\n
\n
long long cgc_print_time(char a0[2], unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
\n
    v2 = \"0\";\n
    v1 = &g_40b811;\n
    if (a0[1] < 10)\n
    {\n
        *(&v0) = v2;\n
        return cgc_printf(\"%d:%s%d\", a0[0], v0, a0[1], a4);\n
    }\n
    v0 = v1;\n
    return cgc_printf(\"%d:%s%d\", a0[0], v0, a0[1], a4);\n
}\n
", "4228735:sub_40867f": null, "4228736:cgc_get_time_str": "extern char g_40b811;\n
\n
long long cgc_get_time_str(unsigned long long a0, char a1[2])\n
{\n
    unsigned long v0;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
\n
    v2 = \"0\";\n
    v1 = &g_40b811;\n
    if (a1[1] < 10)\n
    {\n
        *(&v0) = v2;\n
        return cgc_sprintf(a0, \"%d:%s%d\", a1[0], v0, a1[1]);\n
    }\n
    v0 = v1;\n
    return cgc_sprintf(a0, \"%d:%s%d\", a1[0], v0, a1[1]);\n
}\n
", "4228856:sub_4086f8": null, "4228864:cgc_create_event": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    char padding_10[384];\n
    unsigned long long field_190;\n
    unsigned int field_198;\n
    char field_19c;\n
} struct_1;\n
\n
extern unsigned int cgc_g_event_id;\n
\n
long long cgc_create_event(unsigned long a0, char *a1, char *a2, struct_0 *a3, unsigned long a4)\n
{\n
    struct_1 *v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x30]\n
    struct_1 *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v4;  // ecx\n
    struct_1 *v5;  // rax\n
    struct_0 *v6;  // rcx\n
\n
    v1 = a3;\n
    if (a0 && a1 && cgc_strlen(a1) && a2 && cgc_strlen(a2) && v1)\n
    {\n
        v0 = cgc_malloc(416);\n
        v4 = cgc_g_event_id;\n
        cgc_g_event_id = cgc_g_event_id + 1;\n
        v0->field_0 = v4;\n
        v0->field_8 = a0;\n
        cgc_strcpy(&v0->padding_10, a1);\n
        cgc_strcpy(&v0->padding_10[128], a2);\n
        v5 = v0;\n
        v6 = v1;\n
        v5->field_190 = v6->field_0;\n
        v5->field_198 = v6->field_8;\n
        v0->field_19c = a4;\n
        v2 = v0;\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4229133:sub_40880d": null, "4229136:cgc_delete_event": "long long cgc_delete_event(unsigned long long *a0)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!*(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    cgc_free(*(a0));\n
    *(a0) = 0;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4229208:sub_408858": null, "4229216:cgc_compare_events": "long long cgc_compare_events(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        if (*(a0) < *(a1))\n
        {\n
            v0 = -1;\n
            return v0;\n
        }\n
        else if (*(a0) != *(a1))\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4229350:sub_4088e6": null, "4229360:cgc_compare_event_dates": "long long cgc_compare_event_dates(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        v0 = cgc_compare_date(a0 + 400, a1 + 400);\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4229465:sub_408959": null, "4229472:cgc_find_event_from_list": "long long cgc_find_event_from_list(unsigned long long a0, unsigned long long a1, unsigned int *a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x1dc]\n
    unsigned int v1;  // [bp-0x1d8]\n
    void* v2;  // [bp-0x38], Other Possible Types: char [2]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1 >= 2)\n
    {\n
        v2 = 0;\n
        v0 = 0;\n
        *(&v2) = cgc_q_and_a(\"Enter eventid: \", 10, a0, a1, a2, 1);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (!*(a2))\n
        {\n
            v1 = cgc_strtol(v2, NULL, 10);\n
            cgc_free(v2);\n
            v3 = cgc_find(a3, &v1, cgc_compare_events);\n
            return v3;\n
        }\n
        else\n
        {\n
            cgc_free(v2);\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4229723:sub_408a5b": null, "4229728:cgc_print_event": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[408];\n
    char field_19c;\n
} struct_0;\n
\n
long long cgc_print_event(struct_0 *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x28]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_printf(\"Event ID: %d - %s\\n
\", a0->field_0, &a0->padding_4[12], a3, a4);\n
    cgc_printf(\"About the event: %s\\n
\", &a0->padding_4[140], a2, a3, a4);\n
    if (!a0->field_19c)\n
    {\n
        cgc_get_date_str(&v1, &a0->padding_4[396]);\n
        cgc_get_time_str(&v0, &a0->padding_4[400]);\n
        cgc_printf(\"Starts %s @ %s\\n
\", &v1, &v0, a3, a4);\n
        cgc_get_date_str(&v1, &a0->padding_4[402]);\n
        cgc_get_time_str(&v0, &a0->padding_4[406]);\n
        v3 = cgc_printf(\"Ends %s @ %s\\n
\", &v1, &v0, a3, a4);\n
        return v3;\n
    }\n
    cgc_get_date_str(&v1, &a0->padding_4[396]);\n
    cgc_printf(\"Starts %s\\n
\", &v1, a2, a3, a4);\n
    cgc_get_date_str(&v1, &a0->padding_4[402]);\n
    v3 = cgc_printf(\"Ends %s\\n
\", &v1, a2, a3, a4);\n
    return v3;\n
}\n
", "4230041:sub_408b99": null, "4230048:cgc_insert": "long long cgc_insert(unsigned long long *a0, unsigned long long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x28]\n
    char v1;  // [bp-0x9]\n
\n
    if (!a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = cgc_create_node(a1);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (*(a0))\n
        *(v0) = *(a0);\n
    *(a0) = v0;\n
    v1 = 1;\n
    return v1;\n
}\n
", "4230170:sub_408c1a": null, "4230176:cgc_create_node": "long long cgc_create_node(unsigned long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x20]\n
    unsigned long long v1[2];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0[0] = cgc_malloc(16);\n
    if (!v0)\n
    {\n
        v1[0] = 0;\n
        return v1;\n
    }\n
    v0[0] = 0;\n
    v0[1] = a0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4230267:sub_408c7b": null, "4230272:cgc_insert_in_order": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_insert_in_order(struct struct_1 **a0, unsigned long a1, struct struct_0 **a2)\n
{\n
    struct_1 *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x30]\n
    struct struct_0 **v3;  // [bp-0x28]\n
    char v4;  // [bp-0x9]\n
\n
    v3 = a2;\n
    if (!a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = cgc_create_node(a1);\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (*(a0))\n
    {\n
        v1 = *(a0);\n
        v0 = *(a0);\n
        while (true)\n
        {\n
            if (!v1)\n
            {\n
                v4 = 0;\n
                return v4;\n
            }\n
            if (v3(a1, *((v1 + 8))) <= 0)\n
                break;\n
            if (!*(v1))\n
            {\n
                v4 = cgc_append(&v1, a1);\n
                return v4;\n
            }\n
            v0 = v1;\n
            v1 = *(v1);\n
        }\n
        if (*(a0) != v1)\n
        {\n
            *(v2) = v1;\n
            *(v0) = v2;\n
            v4 = 1;\n
            return v4;\n
        }\n
        *(v2) = *(a0);\n
        *(a0) = &v2;\n
        v4 = 1;\n
        return v4;\n
    }\n
    else\n
    {\n
        *(a0) = &v2;\n
        v4 = 1;\n
        return v4;\n
    }\n
}\n
", "4230599:sub_408dc7": null, "4230608:cgc_append": "long long cgc_append(struct struct_0 **a0, unsigned int a1)\n
{\n
    struct struct_0 **v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char v2;  // [bp-0x9]\n
\n
    if (!a1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = cgc_create_node(a1);\n
    if (!v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*(a0))\n
    {\n
        for (v0 = &*(a0)->field_0; *(v0); v0 = *(v0));\n
        *(v0) = v1;\n
        v2 = 1;\n
        return v2;\n
    }\n
    else\n
    {\n
        *(a0) = v1;\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4230777:sub_408e79": null, "4230784:cgc_popfront": "long long cgc_popfront(struct struct_0 **a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = 0;\n
    v0[0] = *(a0);\n
    *(a0) = v0[0];\n
    v0[0] = 0;\n
    v1 = v0[1];\n
    cgc_free(v0);\n
    v2 = v1;\n
    return v2;\n
}\n
", "4230906:sub_408efa": null, "4230912:cgc_popback": "long long cgc_popback(struct struct_0 **a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    v1 = &*(a0)->field_0;\n
    for (v0 = 0; *(v1); v1 = *(v1))\n
    {\n
        v0 = v1;\n
    }\n
    if (v0)\n
        *(v0) = 0;\n
    else\n
        *(a0) = 0;\n
    cgc_free(v1);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4231081:sub_408fa9": null, "4231088:cgc_find": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_find(struct_1 *a0, unsigned long long a1, struct struct_0 **a2)\n
{\n
    char v0;  // [bp-0x31]\n
    struct_1 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a2;\n
    if (a0 && a1)\n
    {\n
        v1 = a0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1)\n
                v0 = v1->field_8;\n
            if (!(v0 & 1))\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            if (!v2(a1, v1->field_8))\n
            {\n
                v3 = *((v1 + 8));\n
                return v3;\n
            }\n
            v1 = v1->field_0;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4231276:sub_40906c": null, "4231280:cgc_pop": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_pop(struct struct_1 **a0, unsigned long long a1, struct struct_0 **a2)\n
{\n
    struct_1 *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct struct_0 **v3;  // [bp-0x28]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a2;\n
    v2 = 0;\n
    if (a0 && a1)\n
    {\n
        v1 = *(a0);\n
        v0 = *(a0);\n
        while (true)\n
        {\n
            if (!v1)\n
            {\n
                v4 = 0;\n
                return v4;\n
            }\n
            if (!v3(a1, v1->field_8))\n
                break;\n
            v0 = v1;\n
            v1 = v1->field_0;\n
        }\n
        if (v1 != *(a0))\n
            *(v0) = *(v1);\n
        else\n
            *(a0) = *(v1);\n
        v2 = *((v1 + 8));\n
        cgc_free(v1);\n
        v4 = v2;\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4231529:sub_409169": null, "4231536:cgc_print": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_print(struct_1 *a0, struct struct_0 **a1)\n
{\n
    struct_1 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0x18]\n
    struct_1 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    if (!a0)\n
        return v3;\n
    v3 = a0;\n
    for (v0 = a0; v0; v0 = v3)\n
    {\n
        v1(v0->field_8);\n
        v3 = v0->field_0;\n
    }\n
    return v3;\n
}\n
", "4231623:sub_4091c7": null, "4231632:cgc_add_user": "extern void cgc_g_all_users;\n
extern unsigned int cgc_g_num_users;\n
extern char line;\n
\n
long long cgc_add_user()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v8;  // rdx\n
    unsigned int v9;  // rsi\n
    unsigned int v10;  // rsi\n
\n
    v6 = 1;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    do\n
    {\n
        if (!v6)\n
        {\n
            v3 = cgc_q_and_a(\"Enter a short \\\"about me\\\" section.: \", 0x200, &line, 0x800, &v6, 0);\n
            if (!v6)\n
            {\n
                *(&v1) = cgc_create_user(v4, v3);\n
                if (cgc_insert_in_order(&cgc_g_all_users, *(&v1), cgc_compare_users))\n
                {\n
                    cgc_printf(\"Successfully added user\\n
\", v9, cgc_compare_users, 0x800, cgc_g_num_users);\n
                    cgc_g_num_users = cgc_g_num_users + 1;\n
                }\n
                else\n
                {\n
                    if (*(&v1))\n
                        cgc_delete_user(&v1);\n
                    cgc_printf(\"Cannot add user at this time\\n
\", v10, cgc_compare_users, 0x800, cgc_g_num_users);\n
                }\n
                break;\n
            }\n
        }\n
        v2 = cgc_find_user_from_list(&line, 0x800, &v6, *(&cgc_g_all_users), cgc_g_num_users);\n
        v0 = v6;\n
        if (v0 == -1)\n
            break;\n
        if (!v0)\n
        {\n
            if (!v2 && cgc_strlen(&line) && cgc_strlen(&line) <= 128)\n
            {\n
                v4 = cgc_strdup(&line);\n
                continue;\n
            }\n
            v6 = 1;\n
        }\n
        else if (!(v0 == 1))\n
        {\n
            goto LABEL_4092c8;\n
        }\n
LABEL_4092c8:\n
        cgc_printf(\"Try again\\n
\", 0x800, v8, *(&cgc_g_all_users), cgc_g_num_users);\n
        v5 += 1;\n
    } while (v5 != 5);\n
    if (v4)\n
        cgc_free(v4);\n
    if (v3)\n
        cgc_free(v3);\n
    return v6 != -1;\n
}\n
", "4232164:sub_4093e4": null, "4232176:cgc_remove_user": "extern void cgc_g_all_users;\n
extern void* cgc_g_cur_user;\n
extern unsigned int cgc_g_num_users;\n
extern unsigned long long line;\n
\n
long long cgc_remove_user()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v4;  // rdx\n
    unsigned int v5;  // rsi\n
\n
    v1 = 1;\n
    v0 = cgc_find_user_from_list(&line, 0x800, &v1, *(&cgc_g_all_users), cgc_g_num_users);\n
    if (v1 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (v0)\n
    {\n
        v0 = cgc_pop(&cgc_g_all_users, v0, cgc_compare_users);\n
        if (!cgc_compare_users(v0, cgc_g_cur_user))\n
            cgc_g_cur_user = 0;\n
        if (cgc_delete_user(&v0))\n
        {\n
            cgc_printf(\"Suceessfully deleted user\\n
\", v5, cgc_compare_users, *(&cgc_g_all_users), cgc_g_num_users);\n
            cgc_g_num_users = cgc_g_num_users - 1;\n
        }\n
        v2 = 1;\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_printf(\"User not found\\n
\", 0x800, v4, *(&cgc_g_all_users), cgc_g_num_users);\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4232406:sub_4094d6": null, "4232416:cgc_set_current_user": "extern void cgc_g_all_users;\n
extern unsigned long long cgc_g_cur_user;\n
extern unsigned int cgc_g_num_users;\n
extern unsigned long long line;\n
\n
long long cgc_set_current_user(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = 1;\n
    v0 = 0;\n
    cgc_print_user_list(\"------All Users------\\n
\", *(&cgc_g_all_users));\n
    cgc_printf(\"Entering a username will set it as the current user\\n
\", *(&cgc_g_all_users), a2, a3, a4);\n
    v0 = cgc_find_user_from_list(&line, 0x800, &v1, *(&cgc_g_all_users), cgc_g_num_users);\n
    if (v1 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (v0)\n
        cgc_g_cur_user = v0;\n
    else\n
        cgc_printf(\"User not set\\n
\", 0x800, a2, *(&cgc_g_all_users), cgc_g_num_users);\n
    v2 = 1;\n
    return v2;\n
}\n
", "4232585:sub_409589": null, "4232592:cgc_change_cur_date": "extern unsigned int g_cur_date;\n
extern unsigned int g_view_date;\n
extern char line;\n
\n
long long cgc_change_cur_date()\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v4;  // r8\n
    unsigned int v5;  // r8\n
    unsigned int v6;  // r8\n
\n
    v1 = 1;\n
    v0 = cgc_q_and_a(\"Enter new date (MM-DD-YYYY): \", 10, &line, 0x800, &v1, 1, 0, 1);\n
    if (v1 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (!v0)\n
    {\n
        cgc_printf(\"Try again\\n
\", 10, &line, 0x800, v4);\n
    }\n
    else\n
    {\n
        if (!cgc_strtodate(v0, &g_cur_date))\n
        {\n
            cgc_printf(\"Date not changed\\n
\", &g_cur_date, &line, 0x800, v6);\n
        }\n
        else\n
        {\n
            cgc_printf(\"Date successfully changed\\n
\", &g_cur_date, &line, 0x800, v5);\n
            g_view_date = g_cur_date;\n
        }\n
        cgc_free(v0);\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4232799:sub_40965f": null, "4232800:cgc_change_view_date": "extern char g_view_date;\n
extern char line;\n
\n
long long cgc_change_view_date()\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v4;  // r8\n
    unsigned int v5;  // r8\n
    unsigned int v6;  // r8\n
\n
    v1 = 1;\n
    v0 = cgc_q_and_a(\"Enter date to view (MM-DD-YYYY): \", 10, &line, 0x800, &v1, 1, 0, 1);\n
    if (v1 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    if (!v0)\n
    {\n
        cgc_printf(\"Try again\\n
\", 10, &line, 0x800, v4);\n
    }\n
    else\n
    {\n
        if (!cgc_strtodate(v0, &g_view_date))\n
            cgc_printf(\"Date not changed\\n
\", &g_view_date, &line, 0x800, v6);\n
        else\n
            cgc_printf(\"Successfully changed calendar view date\\n
\", &g_view_date, &line, 0x800, v5);\n
        cgc_free(v0);\n
    }\n
    v2 = 1;\n
    return v2;\n
}\n
", "4232995:sub_409723": null, "4233008:cgc_add_user_event": "extern char line;\n
\n
long long cgc_add_user_event(unsigned int a0, unsigned int a1, unsigned int a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0xd8]\n
    char v1;  // [bp-0xb8]\n
    unsigned int v2;  // [bp-0x90]\n
    unsigned short v3;  // [bp-0x8c]\n
    unsigned int v4;  // [bp-0x8a]\n
    unsigned short v5;  // [bp-0x86]\n
    char v6;  // [bp-0x80]\n
    char v7;  // [bp-0x78]\n
    void* v8;  // [bp-0x70], Other Possible Types: unsigned long, char *\n
    char v9;  // [bp-0x61]\n
    char *v10;  // [bp-0x60], Other Possible Types: unsigned long, void*\n
    unsigned int v11;  // [bp-0x58], Other Possible Types: char\n
    char v12;  // [bp-0x50]\n
    void* v13;  // [bp-0x48], Other Possible Types: unsigned long, char *\n
    void* v14;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v15;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v16;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v17;  // [bp-0x24]\n
    void* v18;  // [bp-0x20]\n
    char v19;  // [bp-0x9]\n
    unsigned long v21;  // r8\n
\n
    if (!a0)\n
    {\n
        cgc_printf(\"Must set a user first\\n
\", a1, a2, a3, a4);\n
        v19 = 1;\n
        return v19;\n
    }\n
    v17 = 1;\n
    v16 = 0;\n
    v15 = 0;\n
    v13 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    while (((v16 ^ 255) & 1))\n
    {\n
        v16 = cgc_q_and_a(\"Event Name: \", 128, &line, 0x800, &v17, 0);\n
        if (v17 == -1)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
    }\n
    while (((v15 ^ 255) & 1))\n
    {\n
        v15 = cgc_q_and_a(\"Event Description: \", 0x100, &line, 0x800, &v17, 0);\n
        if (v17 == -1)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
    }\n
    while (((v13 ^ 255) & 1))\n
    {\n
        v13 = cgc_q_and_a(\"Start Date (MM-DD-YYYY): \", 10, &line, 0x800, &v17, 0);\n
        if (v17 == -1)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
        v14 = cgc_strdup(v13);\n
        if (!cgc_strtodate(v13, &v12))\n
        {\n
            if (v13)\n
            {\n
                cgc_free(v14);\n
                v14 = 0;\n
                cgc_free(v13);\n
                v13 = 0;\n
            }\n
            cgc_printf(\"Try again\\n
\", 10, &line, 0x800, a4);\n
        }\n
    }\n
    cgc_free(v13);\n
    v13 = 0;\n
    while (true)\n
    {\n
        if (!((v13 ^ 255) & 1))\n
        {\n
            cgc_free(v14);\n
            v14 = 0;\n
            cgc_free(v13);\n
            v13 = 0;\n
            while (((v10 ^ 255) & 1))\n
            {\n
                v10 = cgc_q_and_a(\"All day event? (y/n) [n]: \", 0x800, &line, 0x800, &v17, 1);\n
                if (v17 == -1)\n
                {\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (v10 && !cgc_strlen(v10))\n
                {\n
                    v9 = 0;\n
                    goto LABEL_409af9;\n
                }\n
                if (!v10)\n
                {\n
LABEL_409af9:\n
                }\n
                else\n
                {\n
                    if (v17)\n
                    {\n
                        cgc_free(v10);\n
                        v10 = 0;\n
                        continue;\n
                    }\n
                    if (*(v10) != 121 && !(*(v10) == 89))\n
                        goto LABEL_409af4;\n
                    v9 = 1;\n
LABEL_409af4:\n
                    goto LABEL_409af9;\n
                }\n
            }\n
        }\n
        cgc_sprintf(&v1, \"End Date (MM-DD-YYYY) [%s]: \", v14, 0x800, a4);\n
        a3 = 0x800;\n
        v13 = cgc_q_and_a(&v1, 10, &line, 0x800, &v17, 1);\n
        if (v17 == -1)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
        if (v13 && !cgc_strlen(v13))\n
        {\n
            v11 = *(&v12);\n
            goto LABEL_4099fd;\n
        }\n
        if (cgc_strtodate(v13, &v11) && !(cgc_compare_date(&v11, &v12) < 0))\n
            goto LABEL_4099fd;\n
        if (v13)\n
        {\n
            cgc_free(v13);\n
            v13 = 0;\n
        }\n
        cgc_printf(\"Try again\\n
\", 10, &line, 0x800, a4);\n
LABEL_4099fd:\n
    }\n
    cgc_free(v10);\n
    v10 = 0;\n
    if (v9)\n
    {\n
        cgc_set_time(&v7, 0, 0);\n
        cgc_set_time(&v6, 23, 59);\n
    }\n
    else\n
    {\n
        while (((v8 ^ 255) & 1))\n
        {\n
            v8 = cgc_q_and_a(\"Start Time (HH:MM): \", 5, &line, 0x800, &v17, 0);\n
            if (v17 == -1)\n
            {\n
                v19 = 0;\n
                return v19;\n
            }\n
            else if (!cgc_strtotime(v8, &v7))\n
            {\n
                if (v8)\n
                {\n
                    cgc_free(v8);\n
                    v8 = 0;\n
                }\n
                cgc_printf(\"Try again\\n
\", 5, &line, 0x800, a4);\n
            }\n
        }\n
        cgc_free(v8);\n
        v8 = 0;\n
        while (true)\n
        {\n
            if (!((v8 ^ 255) & 1))\n
            {\n
                cgc_free(v8);\n
                v8 = 0;\n
                break;\n
            }\n
            cgc_sprintf(&v0, \"End time (HH:MM): \", v8, a3, a4);\n
            a3 = 0x800;\n
            v8 = cgc_q_and_a(&v0, 5, &line, 0x800, &v17, 0);\n
            if (v17 == -1)\n
            {\n
                v19 = 0;\n
                return v19;\n
            }\n
            if (cgc_strtotime(v8, &v6))\n
            {\n
                if (!(!cgc_compare_date(&v12, &v11)))\n
                    goto LABEL_409ca0;\n
                if (!(cgc_compare_time(&v6, &v7) <= 0))\n
                    goto LABEL_409ca0;\n
            }\n
            if (v8)\n
            {\n
                cgc_free(v8);\n
                v8 = 0;\n
            }\n
            cgc_printf(\"Try again\\n
\", 5, &line, 0x800, a4);\n
LABEL_409ca0:\n
        }\n
    }\n
    v2 = *(&v12);\n
    v3 = *(&v7);\n
    v4 = v11;\n
    v5 = *(&v6);\n
    v21 = v9;\n
    v18 = cgc_create_event(a0, v16, v15, &v2, v21);\n
    if (cgc_add_calendar_event(a0 + 648, v18))\n
    {\n
        cgc_print_event(v18, a1, a2, a3, v21);\n
    }\n
    else\n
    {\n
        if (v18)\n
        {\n
            cgc_free(v18);\n
            v18 = 0;\n
        }\n
        cgc_printf(\"Could not add event\\n
\", a1, a2, a3, v21);\n
    }\n
    v19 = 1;\n
    return v19;\n
}\n
", "4234630:sub_409d86": null, "4234640:cgc_remove_user_event": "extern struct_0 *cgc_g_cur_user;\n
extern unsigned long long line;\n
\n
long long cgc_remove_user_event(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = 1;\n
    *(&v0) = cgc_find_event_from_list(&line, 0x800, &v1, cgc_g_cur_user->field_290);\n
    if (v1 == -1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*(&v0))\n
    {\n
        if (cgc_remove_calendar_event(a0 + 648, *(&v0)))\n
            cgc_printf(\"Successfully removed event\\n
\", a1, a2, a3, a4);\n
        else\n
            cgc_printf(\"Could not remove event\\n
\", a1, a2, a3, a4);\n
        v2 = 1;\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_printf(\"Event not found\\n
\", 0x800, a2, a3, a4);\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4234826:sub_409e4a": null, "4234832:cgc_user_menu": "extern unsigned long long cgc_g_all_users;\n
extern unsigned long long cgc_g_cur_user;\n
extern unsigned int g_40b390;\n
extern void g_cur_date;\n
extern char line;\n
\n
long long cgc_user_menu(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x9]\n
\n
    v2 = 0;\n
    if (!cgc_g_cur_user)\n
    {\n
LABEL_409e8b:\n
        *(&v1) = \"None\";\n
    }\n
    else\n
    {\n
        if (!cgc_strlen(cgc_g_cur_user + 4))\n
            goto LABEL_409e8b;\n
        v1 = cgc_g_cur_user + 4;\n
    }\n
    cgc_printf(\"Options:\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"1. View users\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"2. Add user\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"3. Remove user\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"4. Set user\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"5. View Calendar\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"6. Change Date\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"7. Exit\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"---Current User is *%s*---\\n
\", v1, a2, a3, a4);\n
    cgc_printf(\"---Today's date is \", a1, a2, a3, a4);\n
    cgc_print_date(&g_cur_date, a1, a2, a3, a4);\n
    cgc_printf(\"---\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Selection: \", a1, a2, a3, a4);\n
    if (cgc_readnum(&line, 0x800, &v2) == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(&v0) = v2 - 1;\n
    switch (*(&v0))\n
    {\n
    case 0:\n
        cgc_print_user_list(\"------All Users------\\n
\", cgc_g_all_users);\n
        v3 = 1;\n
        return v3;\n
    case 1:\n
        v3 = cgc_add_user();\n
        return v3;\n
    case 2:\n
        v3 = cgc_remove_user();\n
        return v3;\n
    case 3:\n
        v3 = cgc_set_current_user(&line, 0x800, a2, 4240272, a4);\n
        return v3;\n
    case 4:\n
        *(a0) = 1;\n
        v3 = 1;\n
        return v3;\n
    case 5:\n
        v3 = cgc_change_cur_date();\n
        return v3;\n
    case 6:\n
        v3 = 0;\n
        return v3;\n
    default:\n
        cgc_printf(\"Try again\\n
\", 0x800, a2, *(&v0), a4);\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4235319:sub_40a037": null, "4235328:cgc_calendar_menu": "extern unsigned int cgc_g_cur_user;\n
extern char g_40b3ac;\n
extern void g_cur_date;\n
extern unsigned int g_view_date;\n
extern unsigned long long line;\n
\n
long long cgc_calendar_menu(char *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x9]\n
\n
    v2 = 0;\n
    if (*(&cgc_g_cur_user) && cgc_strlen(*(&cgc_g_cur_user) + 4))\n
    {\n
        *(&v1) = *(&cgc_g_cur_user) + 4;\n
        cgc_printf(\"Options:\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"1. View Day\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"2. View Month\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"3. View Agenda\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"4. Change Date\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"5. Change View Date\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"6. Add Calendar Event\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"7. Remove Calendar Event\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"8. Return to User Selection\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"---Current User is *%s*---\\n
\", *(&v1), a2, a3, a4);\n
        cgc_printf(\"---Today's date is \", a1, a2, a3, a4);\n
        cgc_print_date(&g_cur_date, a1, a2, a3, a4);\n
        cgc_printf(\"---\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"---Calendar view date is \", a1, a2, a3, a4);\n
        cgc_print_date(&g_view_date, a1, a2, a3, a4);\n
        cgc_printf(\"---\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"Selection: \", a1, a2, a3, a4);\n
        if (cgc_readnum(&line, 0x800, &v2) == -1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        *(&v0) = v2 - 1;\n
        switch (*(&v0))\n
        {\n
        case 0:\n
            cgc_view_day(*(&cgc_g_cur_user) + 648, g_view_date, a2, 4240300, a4);\n
            v3 = 1;\n
            return v3;\n
        case 1:\n
            cgc_view_month(*(&cgc_g_cur_user) + 648, g_view_date, a2, 4240300, a4);\n
            v3 = 1;\n
            return v3;\n
        case 2:\n
            cgc_view_agenda(*(&cgc_g_cur_user) + 648, g_view_date, a2, 4240300, a4);\n
            v3 = 1;\n
            return v3;\n
        case 3:\n
            v3 = cgc_change_cur_date();\n
            return v3;\n
        case 4:\n
            v3 = cgc_change_view_date();\n
            return v3;\n
        case 5:\n
            v3 = cgc_add_user_event(*(&cgc_g_cur_user), 0x800, a2, &g_40b3ac, a4);\n
            return v3;\n
        case 6:\n
            v3 = cgc_remove_user_event(*(&cgc_g_cur_user), 0x800, a2, 4240300, a4);\n
            return v3;\n
        case 7:\n
            *(a0) = 0;\n
            v3 = 1;\n
            return v3;\n
        default:\n
            cgc_printf(\"Try again\\n
\", 0x800, a2, *(&v0), a4);\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
    cgc_printf(\"Must select a user before viewing a calendar\\n
\", a1, a2, a3, a4);\n
    *(a0) = 0;\n
    v3 = 1;\n
    return v3;\n
}\n
", "4235962:sub_40a2ba": null, "4235968:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_check_seed()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    v2 = v0;\n
    if (v2 == *(0x4347c000))\n
    {\n
        v2 = cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v0;\n
}\n
", "4236054:sub_40a316": null, "4236064:main": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x22]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v6 = 0;\n
    v5 = a0;\n
    v4 = a1;\n
    v3 = 0;\n
    v2 = 1;\n
    v1 = 0;\n
    v0 = 1;\n
    cgc_check_seed();\n
    while (v0)\n
    {\n
        if (v1)\n
            v0 = cgc_calendar_menu(&v1, a1, a2, a3, a4);\n
        else\n
            v0 = cgc_user_menu(&v1, a1, a2, a3, a4);\n
    }\n
    return 0;\n
}\n
", "4236175:sub_40a38f": null, "4236176:cgc_readline": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_readline(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a0 && a1 >= 2)\n
    {\n
        v0 = 0;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            if (cgc_fread(&a0[v0], 1, cgc_stdin) != 1)\n
            {\n
                cgc_fflush(cgc_stdout);\n
                cgc_exit(0);\n
            }\n
            else if (a0[v0] == 10)\n
            {\n
                a0[v0] = 0;\n
                break;\n
            }\n
        }\n
        if (v0 == a1)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4236423:sub_40a487": null, "4236432:cgc_readnum": "long long cgc_readnum(char a0[2], unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
\n
    v0 = cgc_readline(a0, a1);\n
    if (v0)\n
    {\n
        *(a2) = 0;\n
        return v0;\n
    }\n
    *(a2) = cgc_strtol(a0, NULL, 10);\n
    return v0;\n
}\n
", "4236528:cgc_q_and_a": "long long cgc_q_and_a(unsigned int a0, unsigned int a1, unsigned long a2, unsigned int a3, unsigned int *a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    void* v1;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a3;\n
    v1 = 0;\n
    *(a4) = 1;\n
    if (a0 && a2 && a1 <= *(&v2))\n
    {\n
        while (true)\n
        {\n
            if (!*(a4))\n
            {\n
                v3 = v1;\n
                return v3;\n
            }\n
            cgc_printf(\"%s\", a0, a2, a3, a4);\n
            a3 = cgc_readline(a2, *(&v2));\n
            *(a4) = a3;\n
            v0 = *(a4);\n
            if (v0 == -1)\n
            {\n
                v3 = 0;\n
                return v3;\n
            }\n
            if (v0)\n
            {\n
                if (!(v0 == 1))\n
                    goto LABEL_40a626;\n
                goto LABEL_40a626;\n
            }\n
            a3 = a1;\n
            if (cgc_strlen(a2) <= a3)\n
            {\n
                if (a5)\n
                {\n
LABEL_40a614:\n
                    v1 = cgc_strdup(a2);\n
                    goto LABEL_40a63e;\n
                }\n
                else if (!(!cgc_strlen(a2)))\n
                {\n
                    goto LABEL_40a614;\n
                }\n
            }\n
            *(a4) = 1;\n
LABEL_40a626:\n
            cgc_printf(\"Try again\\n
\", a1, a2, a3, a4);\n
LABEL_40a63e:\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4236885:sub_40a655": null, "4236896:cgc_create_user": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[644];\n
    unsigned int field_288;\n
    char padding_28c[4];\n
    unsigned long long field_290;\n
} struct_0;\n
\n
extern unsigned long long cgc_g_user_id;\n
\n
long long cgc_create_user(char *a0, char *a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v3;  // eax\n
\n
    if (a0 && cgc_strlen(a0) && a1 && cgc_strlen(a1))\n
    {\n
        v0 = cgc_calloc(1, 664);\n
        v3 = cgc_g_user_id;\n
        cgc_g_user_id = cgc_g_user_id + 1;\n
        v0->field_0 = v3;\n
        cgc_strcpy(&v0->padding_4, a0);\n
        cgc_strcpy(&v0->padding_4[128], a1);\n
        v0->field_288 = 0;\n
        v0->field_290 = 0;\n
        v1 = v0;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4237117:sub_40a73d": null, "4237120:cgc_delete_user": "long long cgc_delete_user(unsigned long long *a0)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!*(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    cgc_free(*(a0));\n
    *(a0) = 0;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4237192:sub_40a788": null, "4237200:cgc_compare_users": "long long cgc_compare_users(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 && a1)\n
    {\n
        v0 = cgc_strcmp(a0 + 4, a1 + 4);\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4237299:sub_40a7f3": null, "4237312:cgc_print_user": "long long cgc_print_user(unsigned int *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"User id = %d\\n
\", *(a0), a2, a3, a4);\n
    cgc_printf(\"Username is \\\"%s\\\"\\n
\", a0 + 1, a2, a3, a4);\n
    cgc_printf(\"About %s: %s\\n
\", a0 + 1, a0 + 33, a3, a4);\n
    return cgc_printf(\"---------------------\\n
\", a1, a2, a3, a4);\n
}\n
", "4237427:sub_40a873": null, "4237440:cgc_print_simple": "long long cgc_print_simple(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    return cgc_printf(\"Id=%d, username=%s\\n
\", *(a0), a0 + 1, a3, a4);\n
}\n
", "4237494:sub_40a8b6": null, "4237504:cgc_clear_list": "long long cgc_clear_list(unsigned long long *a0[2])\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = cgc_popfront(a0);\n
    for (v0 = v2; v0; v0 = v2)\n
    {\n
        cgc_free(v0);\n
        v2 = cgc_popfront(a0);\n
    }\n
    return v2;\n
}\n
", "4237573:sub_40a905": null, "4237584:cgc_find_user_from_list": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned int g_40b834;\n
\n
long long cgc_find_user_from_list(unsigned int a0, unsigned long a1, unsigned int *a2, struct_0 *a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x2f4]\n
    struct_0 *v1;  // [bp-0x2f0], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x2e4]\n
    void* v3;  // [bp-0x2e0], Other Possible Types: char *\n
    struct_0 *v4;  // [bp-0x2d8]\n
    char v5;  // [bp-0x2d0]\n
    char v6;  // [bp-0x2cc]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1 >= 2)\n
    {\n
        v4 = a3;\n
        v3 = 0;\n
        v2 = 0;\n
        v3 = cgc_q_and_a(4241460, a1, a0, a1, a2, 1);\n
        if (!v3)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (*(a2))\n
        {\n
            cgc_free(v3);\n
            v7 = 0;\n
            return v7;\n
        }\n
        if (a4 > 100)\n
        {\n
            cgc_strcpy(&v6, v3);\n
            cgc_free(v3);\n
            v3 = 0;\n
            v7 = cgc_find(v4, &v5, cgc_compare_users);\n
            return v7;\n
        }\n
        v1 = a3;\n
        v0 = 0;\n
        while (true)\n
        {\n
            if (v0 >= a4)\n
            {\n
                cgc_free(v3);\n
                v7 = 0;\n
                return v7;\n
            }\n
            else if (cgc_strcmp(v3, v1->field_8 + 4))\n
            {\n
                v0 += 1;\n
                v1 = v1->field_0;\n
            }\n
            else\n
            {\n
                cgc_free(v3);\n
                v7 = *((v1 + 8));\n
                return v7;\n
            }\n
        }\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4238060:sub_40aaec": null, "4238064:cgc_add_user_to_list": "long long cgc_add_user_to_list(unsigned long a0, unsigned int a1, unsigned int *a2, unsigned long a3, struct struct_1 **a4)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    void* v1;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x50]\n
    void* v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x3c]\n
    char v5;  // [bp-0x9]\n
\n
    *(a2) = 1;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!*(a2))\n
        {\n
LABEL_40ac10:\n
            v5 = 0;\n
            return v5;\n
        }\n
        *(&v1) = cgc_find_user_from_list(a0, a1, a2, a3, 1000);\n
        v0 = *(a2);\n
        if (v0 == -1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (!v0)\n
        {\n
            if (*(&v1) && !cgc_insert_in_order(a4, *(&v1), cgc_compare_users))\n
            {\n
                *(a2) = 1;\n
                break;\n
            }\n
        }\n
        else\n
        {\n
            if (!(v0 == 1))\n
                goto LABEL_40abe6;\n
        }\n
LABEL_40abe6:\n
        cgc_printf(\"Try again\\n
\", a1, a2, a3, 1000);\n
        v4 += 1;\n
        if (v4 == 5)\n
            goto LABEL_40ac10;\n
    }\n
    v5 = 1;\n
    return v5;\n
}\n
", "4238366:sub_40ac1e": null, "4238368:cgc_print_user_list": "char cgc_print_user_list(unsigned int a0, void* a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"%s\", a0, a2, a3, a4);\n
    return cgc_print(a1, cgc_print_user);\n
}\n
", "4238424:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}