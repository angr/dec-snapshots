{"4202496:_init": "extern struct_0 *g_409250;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409250;\n
    if (g_409250)\n
        v1 = g_409250();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409278;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409278;\n
    goto *(4231808);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202600:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231784);\n
}\n
", "4202624:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202661:sub_4020a5": null, "4202662:sub_4020a6": null, "4202672:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409240;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202713:sub_4020d9": null, "4202720:register_tm_clones": "extern unsigned long long g_409260;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202777:sub_402119": null, "4202784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409268;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409268)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202837:sub_402155": null, "4202841:sub_402159": null, "4202848:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202857:sub_402169": null, "4202864:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4202922:sub_4021aa": null, "4202928:cgc_isascii": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isascii(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 1;\n
}\n
", "4202946:sub_4021c2": null, "4202960:cgc_isdigit": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isdigit(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 2;\n
}\n
", "4202978:sub_4021e2": null, "4202992:cgc_isprint": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isprint(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 16;\n
}\n
", "4203010:sub_402202": null, "4203024:cgc_isalnum": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isalnum(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 14;\n
}\n
", "4203042:sub_402222": null, "4203056:cgc_isalpha": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isalpha(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 12;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_islower": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_islower(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 4;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isupper": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isupper(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 8;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isspace": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isspace(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 64;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 32;\n
}\n
", "4203202:sub_4022c2": null, "4203216:cgc_iscntrl": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_iscntrl(struct_0 *a0)\n
{\n
    return *((a0 + &__ctype)) & 4294967168;\n
}\n
", "4203234:sub_4022e2": null, "4203248:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return (a0 ^ 32) - 65 < 6 | (((&__ctype)[a0 ^ 32] & 2) >> 1);\n
    return a0 - 65 < 6 | (((&__ctype)[a0] & 2) >> 1);\n
}\n
", "4203296:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return a0 ^ 32;\n
    return a0;\n
}\n
", "4203319:sub_402337": null, "4203328:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(struct_0 *a0)\n
{\n
    struct_0 *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
    unsigned long long v3;  // rax\n
    unsigned long long v5;  // rax\n
\n
    v1 = a0 ^ 32;\n
    if (!(*((a0 + &__ctype)) & 8))\n
        v1 = a0;\n
    if (!((&__ctype)[v1] & 2))\n
    {\n
        v2 = v1 - 65;\n
        v3 = v1 - 55;\n
        return (v2 < 6 ? 0 : v3);\n
    }\n
    v5 = v1 - 48;\n
    return v5;\n
}\n
", "4203380:sub_402374": null, "4203392:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4222992];\n
    char field_407010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(struct_0 *a0)\n
{\n
    if ((*((a0 + &__ctype)) & 8))\n
        return a0 ^ 32;\n
    return a0;\n
}\n
", "4203415:sub_402397": null, "4203424:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4203440:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v3;  // r8\n
    void* v4;  // r15, Other Possible Types: unsigned long long, unsigned long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // r13\n
    unsigned long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r13, Other Possible Types: unsigned long long\n
    void* v14;  // r14, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        v6 = a0->padding_c;\n
        v13 = v6 - v3;\n
        if (v5 && v13)\n
        {\n
            v8 = v13 & 3;\n
            if (~(v3) + v6 < 3)\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v9 = v13 & -4;\n
                v10 = &a0->padding_0[v3 + 35];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v10 + v11 - 3)) = v5[*((v10 + v11 - 3))];\n
                    *((v10 + v11 - 2)) = v5[*((v10 + v11 - 2))];\n
                    *((v10 + v11 - 1)) = v5[*((v10 + v11 - 1))];\n
                    *((v10 + v11)) = v5[*((v10 + v11))];\n
                    v11 += 4;\n
                } while (v9 != v11);\n
            }\n
            if (v8)\n
            {\n
                v12 = &a0->padding_0[v3 + v11 + 32];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v12 + v11)) = v5[*((v12 + v11))];\n
                    v11 += 1;\n
                } while (v8 != v11);\n
            }\n
            v13 = (a0->padding_c - a0->field_8);\n
        }\n
        v0 = a0;\n
        v4 = 0;\n
        v14 = 0;\n
        do\n
        {\n
            if (v13 <= v14)\n
            {\n
LABEL_4024e5:\n
                a0 = v0;\n
                goto LABEL_4024ea;\n
            }\n
            v14 += *(&v1);\n
        } while (!cgc_transmit(a0, v11));\n
        v4 = 4294967295;\n
        goto LABEL_4024e5;\n
    }\n
LABEL_4024ea:\n
    *((a0 + 8)) = 0;\n
    return v4;\n
}\n
", "4203780:sub_402504": null, "4203792:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int *v1;  // [bp-0x40]\n
    char v2;  // [bp-0x38]\n
    struct_0 *v4;  // r15\n
    unsigned long long v5;  // r8\n
    unsigned int *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rbx\n
    char *v12;  // rax\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    void* v14;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v5 = a0->field_8;\n
    if (v5 == -1)\n
    {\n
        v4->field_8 = -(a1 < 1);\n
        v4->field_c = 0;\n
        return -(a1 < 1);\n
    }\n
    if (a0->field_4 == 1)\n
    {\n
        v6 = &a0->field_c;\n
    }\n
    else\n
    {\n
        v7 = a0->field_10;\n
        v8 = a0->field_c;\n
        v13 = v8 - v5;\n
        v0 = a1;\n
        if (v7 && v13)\n
        {\n
            v10 = v13 & 3;\n
            if (~(v5) + v8 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v11 = v13 & -4;\n
                a0 = &a0->padding_0[v5 + 35];\n
                a1 = 0;\n
                do\n
                {\n
                    *((a0 + a1 - 3)) = v7[*((a0 + a1 - 3))];\n
                    *((a0 + a1 - 2)) = v7[*((a0 + a1 - 2))];\n
                    *((a0 + a1 - 1)) = v7[*((a0 + a1 - 1))];\n
                    *((a0 + a1)) = v7[*((a0 + a1))];\n
                    a1 += 4;\n
                } while (v11 != a1);\n
            }\n
            if (v10)\n
            {\n
                v12 = &v4->padding_0[v5 + a1 + 32];\n
                a1 = 0;\n
                do\n
                {\n
                    v12[a1] = v7[v12[a1]];\n
                    a1 += 1;\n
                } while (v10 != a1);\n
            }\n
            v13 = v4->field_c - v4->field_8;\n
        }\n
        v1 = &v4->field_c;\n
        v14 = 0;\n
        while (v13 > v14)\n
        {\n
            v14 += *(&v2);\n
            if (cgc_transmit(a0, a1))\n
                break;\n
        }\n
        a1 = v0;\n
        v6 = v1;\n
    }\n
    *(v6) = 0;\n
}\n
", "4204142:sub_40266e": null, "4204144:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v3;  // r12\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v13;  // eax\n
    unsigned long long v15;  // r8\n
    char *v16;  // rax\n
    unsigned long v17;  // rbp\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v11 = a2->field_8;\n
    if (v11 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v10);\n
        if (!v6)\n
        {\n
            v7 = *(&v0);\n
            if (v7)\n
            {\n
                *(&a2->padding_c[0]) = v7;\n
                v10 = v7 * 0x100000000;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rax<8>, 0x20<8>), Shl(rax<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v10 = a2->field_18;\n
                    if (v10)\n
                    {\n
                        a2 = v7;\n
                        v9 = v7 & 3;\n
                        if (v7 + 1 < 3)\n
                        {\n
                            a1 = 0;\n
                        }\n
                        else\n
                        {\n
                            a2 = &a2[-1 * v9];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[a1] = *((v10 + v3[1].padding_0[a1]));\n
                                v3[1].padding_0[1 + a1] = *((v10 + v3[1].padding_0[1 + a1]));\n
                                v3[1].padding_0[2 + a1] = *((v10 + v3[1].padding_0[2 + a1]));\n
                                v3[1].padding_0[3 + a1] = *((v10 + v3[1].padding_0[3 + a1]));\n
                                a1 += 4;\n
                            } while (a2 != a1);\n
                        }\n
                        if (v9)\n
                        {\n
                            a2 = &v3->padding_0[a1 + 32];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                a2[a1] = *((v10 + a2[a1]));\n
                                a1 += 1;\n
                            } while (v9 != a1);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = v3->field_8;\n
    }\n
    if (v11 != -1)\n
    {\n
        v12 = *(&v3->padding_c[0]) - v11;\n
        if (v12 > v4)\n
            v12 = v4;\n
        v0 = v12;\n
        a1 = &v3->padding_0[v11 + 32];\n
        a2 = v12;\n
        cgc_memcpy();\n
        v13 = v3->field_8 + v12;\n
        v3->field_8 = v13;\n
        if (v13 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v12 < v4))\n
            goto LABEL_4028f4;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        if (0 >= v4)\n
        {\n
LABEL_4028f4:\n
            return v12;\n
        }\n
    }\n
    v1 = v5 + 3;\n
    while (true)\n
    {\n
        v10 = cgc_receive(a0, a1, a2, v10);\n
        if (v10)\n
            return -1;\n
        v15 = v0;\n
        if (!v15)\n
            return -1;\n
        v16 = v3->field_18;\n
        if (v16)\n
        {\n
            a2 = v15 & 3;\n
            if (v15 - 1 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v17 = v1 + v12;\n
                a1 = 0;\n
                do\n
                {\n
                    *((v17 + a1 - 3)) = v16[*((v17 + a1 - 3))];\n
                    *((v17 + a1 - 2)) = v16[*((v17 + a1 - 2))];\n
                    *((v17 + a1 - 1)) = v16[*((v17 + a1 - 1))];\n
                    *((v17 + a1)) = v16[*((v17 + a1))];\n
                    a1 += 4;\n
                } while ((v15 & -4) != a1);\n
            }\n
            if (a2)\n
            {\n
                a1 = a1 + v12 + v5;\n
                a0 = 0;\n
                do\n
                {\n
                    a1[a0] = v16[a1[a0]];\n
                    a0 += 1;\n
                } while (a2 != a0);\n
            }\n
        }\n
        v12 += v15;\n
        if (v12 >= v4)\n
            return v12;\n
    }\n
}\n
", "4204626:sub_402852": null, "4204806:sub_402906": null, "4204816:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_402960;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_402971;\n
    while (true)\n
    {\n
LABEL_402960:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_402971;\n
    }\n
LABEL_402971:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4204939:sub_40298b": null, "4204944:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v15;  // r8\n
    unsigned long v16;  // rcx\n
    struct struct_0 **v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    void* v19;  // rdi, Other Possible Types: unsigned long\n
    char *v20;  // rsi\n
    unsigned long v21;  // rdi\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        v14 = 4294967295;\n
        if (v13)\n
            return 4294967295;\n
        if (!*(&v1))\n
            return 4294967295;\n
        v16 = a0->field_18;\n
        *(&v14) = v0;\n
        if (!v16)\n
            return v14;\n
        *(&v14) = *(v16 + v14);\n
    }\n
    else if (v4 != *(&a0->padding_c[0]))\n
    {\n
LABEL_402adc:\n
        v3->field_8 = v4 + 1;\n
        v14 = v3[1].padding_0[v4];\n
        return v14;\n
    }\n
    else\n
    {\n
        *(&a0->field_8) = 0;\n
        if (cgc_receive(a0, v9, v10, v11))\n
            return 4294967295;\n
        v15 = *(&v1);\n
        if (v15)\n
        {\n
            *(&a0->padding_c[0]) = v15;\n
            if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
            {\n
                v17 = a0->field_18;\n
                if (v17)\n
                {\n
                    v18 = v15 & 3;\n
                    if (v15 - 1 < 3)\n
                    {\n
                        v19 = 0;\n
                    }\n
                    else\n
                    {\n
                        v19 = 0;\n
                        do\n
                        {\n
                            v3[1].padding_0[v19] = *(v17 + v3[1].padding_0[v19]);\n
                            v3[1].padding_0[1 + v19] = *(v17 + v3[1].padding_0[1 + v19]);\n
                            v3[1].padding_0[2 + v19] = *(v17 + v3[1].padding_0[2 + v19]);\n
                            v3[1].padding_0[3 + v19] = *(v17 + v3[1].padding_0[3 + v19]);\n
                            v19 += 4;\n
                        } while (v15 - v18 != v19);\n
                    }\n
                    if (v18)\n
                    {\n
                        v20 = &v3->padding_0[v19 + 32];\n
                        v21 = 0;\n
                        do\n
                        {\n
                            v20[v21] = *(v17 + v20[v21]);\n
                            v21 += 1;\n
                        } while (v18 != v21);\n
                    }\n
                }\n
            }\n
            if (v15 >= 0)\n
            {\n
                v4 = v3->field_8;\n
                goto LABEL_402adc;\n
            }\n
        }\n
    }\n
}\n
", "4205302:sub_402af6": null, "4205312:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4205327:sub_402b0f": null, "4205328:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    unsigned long long v3;  // [bp-0x438]\n
    unsigned long long v4;  // [bp-0x437]\n
    unsigned long long v5;  // [bp-0x436]\n
    unsigned long long v6;  // [bp-0x435]\n
    struct_0 *v8;  // rbx\n
    unsigned long long v9;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v10;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax\n
    char *v12;  // r15\n
    void* v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rcx\n
    struct_2 *v15;  // rdi, Other Possible Types: unsigned long\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // rsi\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rcx\n
    char *v22;  // rcx\n
    unsigned long v23;  // rdx\n
    void* v24;  // r14, Other Possible Types: unsigned long\n
    void* v25;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v26;  // rcx\n
    struct_2 *v27;  // rdi\n
    unsigned long long v28;  // r15\n
\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v11 = a2->field_c;\n
            if (v11 + a1 >= 0x400)\n
            {\n
                v13 = 0x400 - v11;\n
                cgc_memcpy(&a2->padding_0[v11 + 32], a0, v13);\n
                v8->field_c = v8->field_c + v13;\n
                cgc_fflush(a2);\n
                if (v13 < a1)\n
                    goto LABEL_402d02;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_402d02:\n
                    v28 = a1 - v13;\n
                    cgc_memcpy(&v8->padding_0[v8->field_c + 32], a0 + v13, v28);\n
                    v8->field_c = v8->field_c + v28;\n
                    return a1;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v12 = a2->field_10;\n
    if (!v12)\n
    {\n
        v16 = 0;\n
        do\n
        {\n
            if (v16 >= a1)\n
                return a1;\n
            v16 += v3;\n
        } while (!cgc_transmit(a2, a1, a2, v17));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v25 = 0;\n
        v14 = 0x400;\n
        v15 = &v3;\n
        v0 = v10;\n
LABEL_402b73:\n
        v18 = v9 - v25;\n
        if (0x400 <= v18)\n
            v18 = 0x400;\n
        v1 = v25;\n
        v19 = v10 + v25;\n
        v20 = v18;\n
        cgc_memcpy();\n
        if (v18)\n
        {\n
            v15 = v18 & 3;\n
            if (v18 - 1 < 3)\n
            {\n
                v21 = 0;\n
            }\n
            else\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    *(&v3 + v21) = v12[*(&v3 + v21)];\n
                    *(&v4 + v21) = v12[*(&v4 + v21)];\n
                    *(&v5 + v21) = v12[*(&v5 + v21)];\n
                    *(&v6 + v21) = v12[*(&v6 + v21)];\n
                    v21 += 4;\n
                } while ((v18 & 2044) != v21);\n
            }\n
            if (v15)\n
            {\n
                v22 = &v3 + v21;\n
                v23 = 0;\n
                do\n
                {\n
                    v22[v23] = v12[v22[v23]];\n
                    v23 += 1;\n
                } while (v15 != v23);\n
            }\n
        }\n
        v24 = 0;\n
        do\n
        {\n
            if (v18 <= v24)\n
            {\n
                v25 = v1 + v18;\n
                v10 = v0;\n
                v26 = 0x400;\n
                v27 = &v3;\n
                if (v25 >= v9)\n
                    return v9;\n
                goto LABEL_402b73;\n
            }\n
            v24 += *(&v2);\n
        } while (!cgc_transmit(v15, v19));\n
    }\n
    return -1;\n
}\n
", "4205656:sub_402c58": null, "4205883:sub_402d3b": null, "4205888:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[15];\n
    uint128_t field_10;\n
    char padding_20[80];\n
    uint128_t field_70;\n
    uint128_t field_80;\n
    uint128_t field_90;\n
    uint128_t field_a0;\n
    uint128_t field_b0;\n
    uint128_t field_c0;\n
    uint128_t field_d0;\n
    uint128_t field_e0;\n
    uint128_t field_f0;\n
} struct_1;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    unsigned long v4;  // rbx\n
    unsigned long v7;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v8;  // rdx, Other Possible Types: char\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rdi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // esi\n
    unsigned long v13;  // rdx\n
    char v14;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v4 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v4;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v8 = a1[0];\n
    v7 = 826981510;\n
    if (v3[0])\n
    {\n
        v9 = 1;\n
        do\n
        {\n
            v7 = __ROL__((v7 + v7 * 36) ^ v8, 13);\n
            v8 = v3[v9];\n
            v9 = v9 + 1;\n
        } while (v8);\n
    }\n
    *(v4) = 0xf0e0d0c0b0a09080706050403020100;\n
    *((v4 + 16)) = 41362427191743139026751447860679676176;\n
    strncpy(v4 + 32, \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmno\", 80);\n
    *((v4 + 112)) = 169468730032567031154139535364404179312;\n
    *((v4 + 128)) = 190819780506037679842037549948358263168;\n
    *((v4 + 144)) = 212170830979508328529935564532312347024;\n
    *((v4 + 160)) = 233521881452978977217833579116266430880;\n
    *((v4 + 176)) = 254872931926449625905731593700220514736;\n
    *((v4 + 192)) = 276223982399920274593629608284174598592;\n
    *((v4 + 208)) = 297575032873390923281527622868128682448;\n
    *((v4 + 224)) = 318926083346861571969425637452082766304;\n
    *((v4 + 240)) = 340277133820332220657323652036036850160;\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v7;\n
        v12 = v7 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v7 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = *((v4 + v10));\n
        *((v4 + v10)) = *((v4 + v13));\n
        *((v4 + v13)) = v14;\n
        v10 -= 1;\n
    }\n
}\n
", "4206333:sub_402efd": null, "4206336:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4206351:sub_402f0f": null, "4206352:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    struct struct_2 *field_8;\n
    struct struct_3 *field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[1032];\n
    unsigned long long field_410;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_5 *field_18;\n
} struct_6;\n
\n
typedef struct struct_5 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_7 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_5 *field_18;\n
} struct_7;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
long long cgc_malloc_alloc(struct_1 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // rbx\n
    struct_2 *v4;  // rbx\n
    struct_2 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rbx\n
    struct_6 *v11;  // r15, Other Possible Types: unsigned long, void*, unsigned long long, struct_0 *\n
    unsigned long long v12;  // rdx\n
    unsigned long long v14;  // rbp\n
    unsigned long long v15;  // r15\n
    struct_6 *v16;  // rbx\n
    unsigned long long v17;  // rbx\n
    unsigned long long v18;  // rax\n
    unsigned long long v19;  // rax\n
    struct_5 *v20;  // rax\n
    struct_2 *v21;  // rcx\n
    unsigned long v22;  // rcx\n
    struct_4 *v23;  // rdx\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    struct_5 *v25;  // rsi\n
    unsigned long long v26;  // rax\n
    struct_7 *v27;  // rsi\n
    struct_1 *v28;  // rax, Other Possible Types: unsigned long\n
    unsigned long v29;  // rcx\n
    unsigned long long v30;  // rax\n
    struct_5 *v31;  // rax\n
    unsigned long v32;  // r15\n
\n
    if (a1 > 2147483647)\n
    {\n
LABEL_402f25:\n
        return 0;\n
    }\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
        return cgc_tiny_alloc(a0, 4);\n
    if (v2 <= 15)\n
        return cgc_tiny_alloc(a0, v2);\n
    if (v2 > 131071)\n
    {\n
        if (!cgc_allocate(a0, a1, v7))\n
        {\n
            v11 = *(&v0);\n
            *(v11) = a0;\n
            *((v11 + 8)) = v2 + 4111 & -0x1000;\n
            goto LABEL_40324b;\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
    v4 = v2 + 31;\n
    v5 = v4 & -0x10;\n
    if (!(v4 & -0x10))\n
    {\n
        v9 = 4294967295;\n
    }\n
    else if (v5 < 513)\n
    {\n
        v10 = v4 / 16;\n
        v9 = v10 + 2;\n
        if (v10 > 128)\n
        {\n
            v11 = 0;\n
            if (!(v9 == 131))\n
                goto LABEL_40309c;\n
            goto LABEL_402fbb;\n
        }\n
    }\n
    else if (v5 <= 0x1200)\n
    {\n
        v9 = (v5 + 22906492224 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v9 = 130;\n
        if (v5 <= 0x20000)\n
            v9 = (&v5[366503875733].field_8 >> 11) + 66;\n
    }\n
    do\n
    {\n
        v11 = (&a0->field_0)[v9];\n
        if (v11)\n
        {\n
            while (*((v11 + 8)) < v5)\n
            {\n
                v11 = *((v11 + 24));\n
                if (!v11)\n
                    goto LABEL_4031c3;\n
            }\n
        }\n
LABEL_4031c3:\n
        v9 += 1;\n
    } while (v9 != 131);\n
LABEL_402fbb:\n
    if (!cgc_allocate(a0, a1, v12))\n
    {\n
        v14 = *(&v0);\n
        v15 = v14 + 1048575;\n
        v16 = v15 & -0x100000;\n
        if (v16 > v14)\n
            cgc_deallocate(a0);\n
        if ((v14 + 0x200000) > (v16 + 0x8000))\n
            cgc_deallocate(a0);\n
        *(1048 + &a0->field_0 + (v15 >> 20)) = 2;\n
        if (v16)\n
        {\n
            v11 = v16 | 16;\n
            v11->field_0 = 0;\n
            v17 = (v16 - v11) + 0x100000 & -0x10;\n
            v18 = v17 - 32;\n
            v11->field_8 = v18;\n
            *((-32 + v17 + &v11->field_0)) = v18;\n
            *((-24 + v17 + &v11->field_0)) = 0;\n
            v19 = v11->field_8;\n
            if (!(!(v19 & 1)))\n
                goto LABEL_403273;\n
            v11->field_8 = v19 | 1;\n
            v11->field_10 = 0;\n
            v11->field_18 = a0->field_410;\n
            a0->field_410 = v11;\n
            v20 = v11->field_18;\n
            if (v20)\n
            {\n
                v20->field_10 = v11;\n
                v11 = a0->field_410;\n
            }\n
            v9 = 130;\n
LABEL_40309c:\n
            v21 = *((v11 + 8));\n
            if (!(v21 & 1))\n
            {\n
                v24 = \"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\";\n
                goto LABEL_40325b;\n
            }\n
            else\n
            {\n
                v22 = v21 & -2;\n
                *((v11 + 8)) = v22;\n
                v23 = *((v11 + 16));\n
                if (v23)\n
                    v23->field_18 = *((v11 + 24));\n
                v25 = *((v11 + 24));\n
                if (v25)\n
                    v25->field_10 = v23;\n
                if ((&a0->field_0)[v9] == v11)\n
                    (&a0->field_0)[v9] = &v25;\n
                *((v11 + 16)) = 0;\n
                v26 = v22 - v5;\n
                if (v26 < 33)\n
                    goto LABEL_40324b;\n
                v27 = v11 + v5;\n
                *((v11 + 8)) = v5;\n
                *((v11 + &v5->field_0)) = v5;\n
                *((8 + v11 + &v5->field_0)) = v26;\n
                *((v22 + v11)) = v26;\n
                if (v26 <= 0x200)\n
                {\n
                    v28 = (v26 >> 4) + 2;\n
                }\n
                else if (v26 <= 0x1200)\n
                {\n
                    v28 = (v26 + 0x7ffffffe00 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v29 = 130;\n
                    if (!(v26 <= 0x20000))\n
                        goto LABEL_403217;\n
                    v28 = (v26 + 0x7ffffffee00 >> 11) + 66;\n
                }\n
                v29 = v28;\n
LABEL_403217:\n
                v30 = v27->field_8;\n
                if (!(v30 & 1))\n
                {\n
                    v27->field_8 = v30 | 1;\n
                    v27->field_10 = 0;\n
                    v27->field_18 = &(&a0->field_0)[v29]->padding_0;\n
                    (&a0->field_0)[v29] = &v27->padding_0;\n
                    v31 = v27->field_18;\n
                    if (v31)\n
                        v31->field_10 = v27;\n
LABEL_40324b:\n
                    v32 = v11 + 16;\n
                    return v32;\n
                }\n
            }\n
            while (true)\n
            {\n
LABEL_403273:\n
                v24 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
LABEL_40325b:\n
                cgc_heap_error(v24, v11);\n
                cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
            }\n
        }\n
    }\n
    goto LABEL_402f25;\n
}\n
", "4207228:sub_40327c": null, "4207232:cgc_tiny_alloc": "long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    struct struct_0 *v4[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned int v7;  // edx\n
    unsigned short *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
    unsigned long long v12;  // rbp\n
    unsigned long long v13;  // r13\n
    unsigned short *v14;  // r12\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rbx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v9 = *((a0 + v4 * 8));\n
    if (v9)\n
    {\n
        *((a0 + v5 * 8)) = *(&v9);\n
        return v9;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (v6)\n
    {\n
        v7 = v6[0];\n
        a1 = v6[1];\n
    }\n
    else\n
    {\n
        v8 = *((a0 + 5168));\n
        if (v8)\n
        {\n
            v9 = *((a0 + 5176));\n
        }\n
        else if (cgc_allocate(a0, a1, v10))\n
        {\n
            *((a0 + 5168)) = 0;\n
            return 0;\n
        }\n
        else\n
        {\n
            v12 = v0;\n
            v13 = v12 + 1048575;\n
            v14 = v13 & -0x100000;\n
            if (v14 > v12)\n
                cgc_deallocate(a0);\n
            if ((v12 + 0x200000) > (v14 + 0x80000))\n
                cgc_deallocate(a0);\n
            *((a0 + (v13 >> 20) + 1048)) = 1;\n
            v8 = v14;\n
            *((a0 + 5168)) = v14;\n
            v9 = 0;\n
            if (!v14)\n
                return 0;\n
        }\n
        v15 = v8;\n
        v6 = v8 + v9;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v15 + v9)) = v3;\n
        *((v15 + v9 + 2)) = v3;\n
        v16 = v9 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v7 = a1;\n
    }\n
    v17 = v3 + a1;\n
    *((v6 + 2)) = v17;\n
    if (v7 + v17 < 4097)\n
        return a1 + v6;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4207671:sub_403437": null, "4207680:malloc_free": "typedef struct struct_0 {\n
    unsigned long long field_-10;\n
    unsigned long long field_-8;\n
    unsigned long long field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
    unsigned long long field_8;\n
    struct struct_3 *field_10;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
long long malloc_free(struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v4;  // r9\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdi\n
    struct_2 *v8;  // r11\n
    struct_2 *v9;  // r8\n
    struct_2 *v10;  // rax, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // r10\n
    unsigned long v14;  // rdi, Other Possible Types: unsigned long long\n
    struct_2 *v15;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v16;  // r10\n
    struct_4 *v17;  // rcx\n
    struct_1 *v18;  // rdi\n
    unsigned long long v19;  // r11\n
    struct_2 *v20;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v21;  // rcx\n
    unsigned long long v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_4 *v24;  // rdx\n
    struct_1 *v25;  // rdi\n
    unsigned long v26;  // rax\n
    unsigned long long v27;  // rax\n
    struct_1 *v28;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *(1048 + &a0->field_-10 + (a1 >> 20));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            a1->field_-10 = (&a0->field_-10)[v6];\n
            (&a0->field_-10)[v6] = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40380f;\n
        }\n
        else\n
        {\n
            if (a1->field_0 != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = a1->field_-8;\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v20 = &a1->field_0;\n
        v7 = v20->field_8;\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40380f;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_40380f;\n
        }\n
        else\n
        {\n
            v8 = v20->field_0;\n
            v9 = v7 + v20;\n
            v10 = v20 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (v10)\n
            {\n
                v13 = *((v10 + 8));\n
                if (!((v13 & -2) == v8))\n
                    goto LABEL_403826;\n
                if (v9->field_0 == v7)\n
                {\n
                    if ((v13 & 1))\n
                    {\n
                        if (v8 <= 15)\n
                        {\n
                            v16 = v13 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v8 <= 0x200)\n
                            {\n
                                v16 = (v13 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v8 <= 0x1200)\n
                                {\n
                                    v16 = (v8 + 22906492224 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v16 = 130;\n
                                    if (v8 <= 0x20000)\n
                                        v16 = (&v8[366503875733].field_8 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v10 + 8)) = v8;\n
                        v17 = *((v10 + 16));\n
                        if (v17)\n
                            v17->field_18 = *((v10 + 24));\n
                        v18 = *((v10 + 24));\n
                        if (v18)\n
                            v18->field_10 = v17;\n
                        if ((&v4->field_-10)[v16] == v10)\n
                            (&v4->field_-10)[v16] = v18;\n
                        *((v10 + 16)) = 0;\n
                        v19 = v8 + v20->field_8;\n
                        *((v10 + 8)) = v19;\n
                        v9->field_0 = v19;\n
                        v20 = v10;\n
                    }\n
LABEL_403664:\n
                    v21 = v9->field_8;\n
                    if ((v21 & 1))\n
                    {\n
                        v22 = v21 & -2;\n
                        if (v22 <= 15)\n
                        {\n
                            v23 = v21 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v22 <= 0x1200)\n
                                {\n
                                    v23 = (0x7ffffffe00 + v22 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v23 = 130;\n
                                    if (v22 <= 0x20000)\n
                                        v23 = (0x7ffffffee00 + v22 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        v9->field_8 = v22;\n
                        v24 = v9->field_10;\n
                        if (v24)\n
                            v24->field_18 = v9[1].field_0;\n
                        v25 = v9[1].field_0;\n
                        if (v25)\n
                            v25->field_10 = v24;\n
                        if ((&v4->field_-10)[v23] == v9)\n
                            (&v4->field_-10)[v23] = v25;\n
                        *(&v9->field_10) = 0;\n
                        v26 = v22 + *((v20 + 8));\n
                        *((v20 + 8)) = v26;\n
                        *((v20 + v26)) = v26;\n
                    }\n
                    v27 = *((v20 + 8));\n
                    if (v27 <= 15)\n
                    {\n
                        v3 = v27 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v27 <= 0x200)\n
                        {\n
                            v3 = (v27 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v27 <= 0x1200)\n
                            {\n
                                v3 = (0x7ffffffe00 + v27 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v3 = 130;\n
                                if (v27 <= 0x20000)\n
                                    v3 = (0x7ffffffee00 + v27 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(v27 & 1))\n
                    {\n
                        *((v20 + 8)) = v27 | 1;\n
                        *((v20 + 16)) = 0;\n
                        *((v20 + 24)) = (&v4->field_-10)[v3];\n
                        (&v4->field_-10)[v3] = v20;\n
                        v28 = *((v20 + 24));\n
                        if (!v28)\n
                            return v0;\n
                        v28->field_10 = v20;\n
                        return v0;\n
                    }\n
                    goto LABEL_403818;\n
                }\n
            }\n
            else if (v9->field_0 == v7)\n
            {\n
                goto LABEL_403664;\n
            }\n
            v14 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
            v15 = v9;\n
            goto LABEL_40382f;\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40380f:\n
    cgc_heap_error(v11, v3);\n
LABEL_403818:\n
    v10 = cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
LABEL_403826:\n
    v14 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    v15 = v10;\n
LABEL_40382f:\n
    cgc_heap_error(v14, v15, v3);\n
    return cgc_malloc_size(v14, v15, v3, v3, v9, v4);\n
}\n
", "4208704:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4208748:sub_40386c": null, "4208752:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(void* a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_403881:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*(1048 + a0 + v3) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_403903;\n
    }\n
    else\n
    {\n
        if (*(1048 + a0 + v3) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_403903;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_403903:\n
                v5 = cgc_malloc_alloc(a0, a2);\n
                if (v5)\n
                {\n
                    cgc_memcpy(v5, a1);\n
                    malloc_free(a0, a1);\n
                    return v5;\n
                }\n
                goto LABEL_403881;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4209012:sub_403974": null, "4209024:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4209200:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4209236:sub_403a54": null, "4209248:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4209294:sub_403a8e": null, "4209296:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_403b24:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_403ab7;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_403ab7:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_403b24;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_403ab7;\n
}\n
", "4209727:sub_403c3f": null, "4209728:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    char *v2;  // r8, Other Possible Types: unsigned long\n
    unsigned long v3;  // r11\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // r9\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    uint128_t *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r10\n
    unsigned long v13;  // r11\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // r9, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm1\n
    int v19;  // xmm1\n
    int v20;  // xmm1\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    unsigned long long v25;  // rdi\n
    uint128_t *v27;  // rcx, Other Possible Types: unsigned long\n
    int v28;  // xmm1\n
    unsigned long v29;  // r8\n
    char *v30;  // rcx\n
    char *v31;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v32;  // r8\n
    char *v33;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r9\n
    char *v35;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v36;  // rdx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 4)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403d95:\n
                if (a2 < 16)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x10;\n
                    v4 = v2 - 16;\n
                    v5 = (v4 >> 4) + 1;\n
                    v6 = v5 & 3;\n
                    if (v4 < 48)\n
                    {\n
                        v10 = 0;\n
                    }\n
                    else\n
                    {\n
                        v11 = v5 & -4;\n
                        v12 = v1 + a2 - 16;\n
                        v13 = &a2[a1 + 16];\n
                        v14 = 0;\n
                        do\n
                        {\n
                            *((v12 + v14)) = *((v13 + v14));\n
                            *((-16 + v12 + v14)) = *((v13 + v14 - 16));\n
                            *((-32 + v12 + v14)) = *((v13 + v14 - 32));\n
                            *((-48 + v12 + v14)) = *((v13 + v14 - 48));\n
                            v14 -= 64;\n
                            tmp_13 = v11;\n
                            v11 -= 4;\n
                        } while (tmp_13 != 4);\n
                        v10 = -(v14);\n
                    }\n
                    if (v6)\n
                    {\n
                        v25 = &a2[-1 * v10];\n
                        v27 = 0;\n
                        do\n
                        {\n
                            *(&v1[16 + v27 + v25]) = *((a1 + v25 - 16 + v27));\n
                            v27 -= 16;\n
                        } while (v6 * 16 + v27);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 12))\n
                        goto LABEL_403c79;\n
                }\n
                v30 = v2;\n
                v2 = a2 & -4;\n
                v31 = -(v30);\n
                do\n
                {\n
                    *((v1 + a2 - 4 + v31)) = *(&a2[4 + v31 + a1]);\n
                    v31 -= 4;\n
                } while (!(v2) != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_403c79:\n
                v34 = &a2[~(v2)];\n
                if ((a2 & 3))\n
                {\n
                    v35 = 0;\n
                    do\n
                    {\n
                        v1[v35 + v34] = *((a1 + v34 + v35));\n
                        v35 -= 1;\n
                    } while (!(a2 & 3) != v35);\n
                    v2 -= v35;\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                v36 = &a2[-1 * v2];\n
                do\n
                {\n
                    v1[1 + v36] = *((a1 + v36 - 1));\n
                    v1[2 + v36] = *((a1 + v36 - 2));\n
                    v1[3 + v36] = *((a1 + v36 - 3));\n
                    v1[4 + v36] = *((a1 + v36 - 4));\n
                    tmp_10 = v36;\n
                    v36 -= 4;\n
                } while (tmp_10 != 4);\n
                return v1;\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403d95;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_403c79;\n
    }\n
    else\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403da3:\n
                if (a2 < 32)\n
                {\n
                    v3 = 0;\n
                }\n
                else\n
                {\n
                    v3 = a2 & -0x20;\n
                    v7 = v3 - 32;\n
                    v8 = (v7 >> 5) + 1;\n
                    v9 = v8 & 3;\n
                    if (v7 < 96)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v16 = v8 & -4;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v17 = *((a1 + v15 + 16));\n
                            *(&v1[v15]) = *((a1 + v15));\n
                            *(&v1[16 + v15]) = v17;\n
                            v18 = *((a1 + v15 + 48));\n
                            *(&v1[32 + v15]) = *((a1 + v15 + 32));\n
                            *(&v1[48 + v15]) = v18;\n
                            v19 = *((a1 + v15 + 80));\n
                            *(&v1[64 + v15]) = *((a1 + v15 + 64));\n
                            *(&v1[80 + v15]) = v19;\n
                            v20 = *((a1 + v15 + 112));\n
                            *(&v1[96 + v15]) = *((a1 + v15 + 96));\n
                            *(&v1[112 + v15]) = v20;\n
                            v15 -= -128;\n
                            tmp_21 = v16;\n
                            v16 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v9)\n
                    {\n
                        v21 = &v1[v15 + 16];\n
                        v22 = a1 + v15 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v28 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v28;\n
                            v24 += 32;\n
                        } while (v9 * 32 != v24);\n
                    }\n
                    if (v3 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_403d27;\n
                }\n
                v29 = v3;\n
                v3 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v29]) = *((a1 + v29));\n
                    v29 += 8;\n
                } while (v3 != v29);\n
                if (v3 == a2)\n
                    return v1;\n
LABEL_403d27:\n
                v32 = &a2[~(v3)];\n
                v33 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v3] = *((a1 + v3));\n
                        v3 += 1;\n
                        tmp_7 = v33;\n
                        v33 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v32 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v3] = *((a1 + v3));\n
                    v1[1 + v3] = *((a1 + v3 + 1));\n
                    v1[2 + v3] = *((a1 + v3 + 2));\n
                    v1[3 + v3] = *((a1 + v3 + 3));\n
                    v3 += 4;\n
                } while (a2 != v3);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403da3;\n
            }\n
        }\n
        v3 = 0;\n
        goto LABEL_403d27;\n
    }\n
}\n
", "4210655:sub_403fdf": null, "4210656:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long v2;  // rcx\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // r10\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // r10, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rdi\n
    int v15;  // xmm0\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (a2 < 32)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v2 = a2 & -0x20;\n
            tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
            v3 = tmp_43;\n
            v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
            v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
            v6 = v2 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *(&v1[v9]) = v5;\n
                    *(&v1[16 + v9]) = v5;\n
                    *(&v1[32 + v9]) = v5;\n
                    *(&v1[48 + v9]) = v5;\n
                    *(&v1[64 + v9]) = v5;\n
                    *(&v1[80 + v9]) = v5;\n
                    *(&v1[96 + v9]) = v5;\n
                    *(&v1[112 + v9]) = v5;\n
                    *(&v1[128 + v9]) = v5;\n
                    *(&v1[144 + v9]) = v5;\n
                    *(&v1[160 + v9]) = v5;\n
                    *(&v1[176 + v9]) = v5;\n
                    *(&v1[192 + v9]) = v5;\n
                    *(&v1[208 + v9]) = v5;\n
                    *(&v1[224 + v9]) = v5;\n
                    *(&v1[240 + v9]) = v5;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = &v1[v9 + 16];\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = v5;\n
                    *((v11 + v13)) = v5;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            if (v2 == a2)\n
                return v1;\n
            if (!(a2 & 24))\n
                goto LABEL_404150;\n
        }\n
        v14 = v2;\n
        v2 = a2 & -8;\n
        tmp_20 = InterleaveLOV(tmp_21, tmp_21);\n
        v15 = tmp_20;\n
        do\n
        {\n
            *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
            v14 += 8;\n
        } while (v2 != v14);\n
        if (v2 == a2)\n
            return v1;\n
    }\n
    do\n
    {\n
LABEL_404150:\n
        v1[v2] = a1;\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4211038:sub_40415e": null, "4211040:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned long v32;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v32 = cgc__vsfprintf();\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v32;\n
    }\n
    v32 = cgc__vsfprintf();\n
    return v32;\n
}\n
", "4211252:sub_404234": null, "4211264:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return cgc__vsfprintf();\n
    }\n
    return cgc__vsfprintf();\n
}\n
", "4211342:sub_40428e": null, "4211344:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned long v30;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v30;\n
    }\n
    v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    return v30;\n
}\n
", "4211553:sub_404361": null, "4211568:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4211651:sub_4043c3": null, "4211664:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4211817:sub_404469": null, "4211824:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4211837:sub_40447d": null, "4211840:cgc__vsfprintf": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_4 *field_8;\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
} struct_4;\n
\n
long long cgc__vsfprintf(struct_1 *a0, struct_3 *a1, unsigned long a2, char *a3)\n
{\n
    int tmp_16;  // tmp #16\n
    int tmp_2;  // tmp #2\n
    unsigned long long v0;  // [bp-0x1c8]\n
    int tmp_50;  // tmp #50\n
    int tmp_70;  // tmp #70\n
    int tmp_12;  // tmp #12\n
    struct_1 *v1;  // [bp-0xa1]\n
    char *v2;  // [bp-0xa0]\n
    struct_1 *v3;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_3 *v4;  // [bp-0x90]\n
    char v5;  // [bp-0x88]\n
    char v6;  // [bp-0x87]\n
    char v7;  // [bp-0x76]\n
    char v8;  // [bp-0x75]\n
    char v9;  // [bp-0x74]\n
    unsigned long v10;  // [bp-0x40]\n
    unsigned long v11;  // [bp-0x38]\n
    char *v13;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v14;  // rbp, Other Possible Types: unsigned long\n
    void* v15;  // r15\n
    unsigned int v16;  // eax\n
    struct_1 *v17;  // r13b, Other Possible Types: char\n
    void* v18;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v19;  // rcx, Other Possible Types: unsigned long\n
    struct_1 *v20;  // edx, Other Possible Types: unsigned long\n
    char v21;  // cc_dep1\n
    char v22;  // cc_dep2\n
    struct_1 *v23;  // r12\n
    unsigned long long v24;  // rcx\n
    unsigned long long v25;  // rsi\n
    struct_3 *v26;  // rdx\n
    struct_3 *v27;  // rsi\n
    struct_3 *v28;  // rdx\n
    unsigned long long v29;  // rcx\n
    unsigned long long v30;  // rcx\n
    unsigned long long v31;  // rcx\n
    struct_3 *v32;  // rdx\n
    unsigned long long v33;  // rcx\n
    struct struct_1 **v34;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v35;  // rsi, Other Possible Types: unsigned long\n
    unsigned int *v36;  // rdi, Other Possible Types: unsigned long\n
    unsigned int *v37;  // rax, Other Possible Types: unsigned long\n
    unsigned long v38;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v39;  // r13\n
    unsigned long long v40;  // rax\n
    unsigned long v41;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v42;  // rcx\n
    char *v43;  // rbp\n
    struct_0 *v44;  // rbp, Other Possible Types: unsigned long\n
    struct_2 *v45;  // rsi, Other Possible Types: unsigned long\n
    struct_2 *v46;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v47;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rbp, Other Possible Types: unsigned long long\n
    char *v49;  // r14, Other Possible Types: unsigned long, unsigned long long\n
    struct_0 *v50;  // rsi, Other Possible Types: unsigned long, unsigned long long, struct_1 *\n
    char *v51;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v52;  // rax\n
    unsigned long v53;  // r12, Other Possible Types: unsigned long long\n
    unsigned long long v54;  // rcx\n
    unsigned int v55;  // ebp\n
    struct_1 *v56;  // rax, Other Possible Types: unsigned long, char\n
    unsigned long long v57;  // r12\n
    char *v58;  // r13, Other Possible Types: unsigned long\n
\n
    v13 = a3;\n
    v4 = a1;\n
    v14 = &a0->field_0 + 1;\n
    v3 = v14;\n
    v56 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v49 = 0;\n
    }\n
    else\n
    {\n
        v15 = a2;\n
        v10 = 20 + -0x1 * &v5;\n
        v49 = 0;\n
        v2 = a3;\n
        while (true)\n
        {\n
            if (v56 != 37)\n
            {\n
                if (v49 < 2147483647)\n
                {\n
                    *(&v1) = v56;\n
                    if (v15)\n
                        cgc_fwrite(&v1, 1, v15);\n
                    if (v13)\n
                        *((v13 + v49)) = v1;\n
                    v14 = v3;\n
                }\n
                else if (v49 == -1)\n
                {\n
                    goto LABEL_404a36;\n
                }\n
                v49 += 1;\n
                v3 = v14 + 1;\n
                tmp_16 = *(v14);\n
                v56 = *(v14);\n
                v14 = v3;\n
                if (!(!tmp_16))\n
                    continue;\n
                goto LABEL_4049c1;\n
            }\n
            a0 = v14 + 1;\n
            v3 = a0;\n
            v16 = *(v14);\n
            v17 = 32;\n
            if (v16 != 32)\n
            {\n
                if (v16 == 48)\n
                {\n
                    v17 = 48;\n
                }\n
                else\n
                {\n
                    if (!v16)\n
                        goto LABEL_4049c1;\n
                    v3 = v14;\n
                    a0 = v14;\n
                }\n
            }\n
            if (*(a0) - 48 > 9)\n
            {\n
                v18 = 0;\n
            }\n
            else\n
            {\n
                v18 = cgc_strtoul();\n
                a0 = v3;\n
            }\n
            v19 = a0 + 1;\n
            v3 = v19;\n
            v20 = *(a0);\n
            *(&v13) = 1;\n
            if (v20 == 104)\n
            {\n
                v20 = a0 + 2;\n
                v21 = *((a0 + 1));\n
                v22 = 104;\n
            }\n
            else if (v20 == 108)\n
            {\n
                v21 = *((a0 + 1));\n
                v22 = 108;\n
                v20 = a0 + 2;\n
                *(&v13) = *((a0 + 1)) != 108;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    goto LABEL_4049bc;\n
                goto LABEL_4045cf;\n
            }\n
            if (v21 == v22)\n
                v19 = v20;\n
            a0 = v19;\n
LABEL_4045cf:\n
            v23 = a0 + 1;\n
            v3 = v23;\n
            *(&v20) = *(a0);\n
            v24 = *(a0);\n
            v25 = v24 - 88;\n
            if (v25 > 32)\n
            {\n
                v13 = v2;\n
                if (!v24)\n
                {\n
                    v57 = v23 - v14;\n
                    if (v49 < 2147483647)\n
                    {\n
                        v58 = 2147483647 - v49;\n
                        if (v58 > v57)\n
                            v58 = v57;\n
                        if (v15)\n
                            cgc_fwrite(v14, v58, v15);\n
                        if (v13)\n
                            cgc_memcpy(&v13[v49], v14, v58);\n
                    }\n
                    tmp_2 = v49;\n
                    v49 += v57;\n
                    if (__CFADD__(tmp_2, v57))\n
                        goto LABEL_404a36;\n
                    goto LABEL_4049c1;\n
                }\n
                else\n
                {\n
                    v53 = v23 - v14;\n
                    if (!(v49 < 2147483647))\n
                        goto LABEL_40493f;\n
                    v41 = 2147483647 - v49;\n
                    if (v41 > v53)\n
                        v41 = v53;\n
                    if (v15)\n
                        cgc_fwrite(v14, v41, v15);\n
                    if (!v13)\n
                        goto LABEL_40493f;\n
                    a0 = &v13[v49];\n
                    v50 = v14;\n
                    v51 = v41;\n
                    goto LABEL_40493a;\n
                }\n
            }\n
            else\n
            {\n
                v0 = 4831842305;\n
                if (!((*(&v0 + ((v25 & 63) >> 3)) >> (v25 & 63 & 7)) & 1))\n
                {\n
                    if (v25 == 11)\n
                    {\n
                        v28 = v4;\n
                        v29 = v28->field_0;\n
                        if (v29 <= 40)\n
                        {\n
                            v34 = v29 + v28->field_10;\n
                            v28->field_0 = v29 + 8;\n
                        }\n
                        else\n
                        {\n
                            v34 = v28->field_8;\n
                            v28->field_8 = v34 + 8;\n
                        }\n
                        v13 = v2;\n
                        if (v49 < 2147483647)\n
                        {\n
                            *(&v1) = *(v34);\n
                            if (v15)\n
                                cgc_fwrite(&v1, 1, v15);\n
                            if (v13)\n
                                *((v13 + v49)) = v1;\n
                        }\n
                        else if (v49 == -1)\n
                        {\n
                            goto LABEL_404a36;\n
                        }\n
                        v49 += 1;\n
                        goto LABEL_404948;\n
                    }\n
                    if (v25 == 27)\n
                    {\n
                        v32 = v4;\n
                        v33 = v32->field_0;\n
                        if (v33 > 40)\n
                        {\n
                            v37 = v32->field_8;\n
                            v32->field_8 = v37 + 8;\n
                        }\n
                        else\n
                        {\n
                            v37 = v33 + v32->field_10;\n
                            v32->field_0 = v33 + 8;\n
                        }\n
                        v13 = v2;\n
                        v39 = *(v37);\n
                        v40 = cgc_strlen(v39);\n
                        v53 = v40;\n
                        if (!(v49 < 2147483647))\n
                            goto LABEL_40493f;\n
                        v48 = 2147483647 - v49;\n
                        if (v48 > v40)\n
                            v48 = v40;\n
                        if (v15)\n
                            cgc_fwrite(v39, v48, v15);\n
                        if (!v13)\n
                            goto LABEL_40493f;\n
                        a0 = &v13[v49];\n
                        v50 = v39;\n
                        goto LABEL_404937;\n
                    }\n
                }\n
                else\n
                {\n
                    v11 = v18;\n
                    if (v20 != 100)\n
                    {\n
                        v27 = v4;\n
                        if (v13)\n
                        {\n
                            v31 = v27->field_0;\n
                            v13 = v2;\n
                            if (v31 > 40)\n
                            {\n
                                v36 = v27->field_8;\n
                                v27->field_8 = v36 + 8;\n
                            }\n
                            else\n
                            {\n
                                v36 = v31 + v27->field_10;\n
                                v27->field_0 = v31 + 8;\n
                            }\n
                            v47 = *(v36);\n
                            if (v20 == 117)\n
                                a0 = 10;\n
                            else\n
                                a0 = 16;\n
                            v43 = (v20 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
                            v8 = 0;\n
                            v46 = &v8;\n
                            if (!v47)\n
                            {\n
                                v7 = *(v43);\n
                                v46 = &v7;\n
                            }\n
                            else\n
                            {\n
                                do\n
                                {\n
                                    *((v46 - 1)) = v43[(0 CONCAT v47) /m a0 >> 32];\n
                                    v46 = &v7;\n
                                    tmp_50 = v47;\n
                                    v47 = (0 CONCAT v47) /m a0;\n
                                } while (tmp_50 >= a0);\n
                            }\n
                            v44 = &v5;\n
                            cgc_memmove(&v5, v46, v10 + v46);\n
                            goto LABEL_404825;\n
                        }\n
LABEL_4049bc:\n
                        v13 = v2;\n
LABEL_4049c1:\n
                        if (v49 < 2147483647)\n
                            break;\n
                        if (v49 == -1)\n
                        {\n
LABEL_404a36:\n
                            cgc__terminate(a0);\n
                        }\n
                        return v49;\n
                    }\n
                    else\n
                    {\n
                        v26 = v4;\n
                        v44 = &v5;\n
                        if (!v13)\n
                            goto LABEL_4049bc;\n
                        v30 = v26->field_0;\n
                        if (v30 <= 40)\n
                        {\n
                            v35 = v30 + v26->field_10;\n
                            v26->field_0 = v30 + 8;\n
                        }\n
                        else\n
                        {\n
                            v35 = v26->field_8;\n
                            v26->field_8 = v35 + 8;\n
                        }\n
                        v38 = *(v35);\n
                        if (v38 < 0)\n
                        {\n
                            v5 = 45;\n
                            v38 = -(v38);\n
                            v9 = 0;\n
                            v45 = &v9;\n
                            a0 = &v6;\n
                        }\n
                        else\n
                        {\n
                            v8 = 0;\n
                            v45 = &v8;\n
                            a0 = &v5;\n
                            if (!v38)\n
                            {\n
                                v7 = 48;\n
                                a0 = &v5;\n
                                v45 = &v7;\n
                                goto LABEL_4047ed;\n
                            }\n
                        }\n
                        do\n
                        {\n
                            v42 = 3435973837 * v38 >> 35;\n
                            *((v45 - 1)) = *((4223996 + v38 + -10 * v42));\n
                            v45 -= 1;\n
                            tmp_70 = v38;\n
                            v38 = v42;\n
                        } while (tmp_70 > 9);\n
                        v44 = &v5;\n
LABEL_4047ed:\n
                        cgc_memmove(a0, v45, v45 - a0 + 20);\n
                        v13 = v2;\n
LABEL_404825:\n
                        v52 = cgc_strlen(v44);\n
                        v53 = v52;\n
                        v54 = v11;\n
                        if (v54 > v52)\n
                        {\n
                            v55 = v52 - v54;\n
                            do\n
                            {\n
                                if (v49 < 2147483647)\n
                                {\n
                                    *(&v1) = v17;\n
                                    if (v15)\n
                                        cgc_fwrite(&v1, 1, v15);\n
                                    if (v13)\n
                                        *((v13 + v49)) = v1;\n
                                }\n
                                else if (!(v49 == -1))\n
                                {\n
                                    continue;\n
                                }\n
                                tmp_2 = v49;\n
                                v49 += 1;\n
                                tmp_12 = v55 + 1;\n
                                v55 += 1;\n
                            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                        }\n
                        if (!(v49 < 2147483647))\n
                            goto LABEL_40493f;\n
                        v48 = 2147483647 - v49;\n
                        if (v48 > v52)\n
                            v48 = v52;\n
                        if (v15)\n
                            cgc_fwrite(&v5, v48, v15);\n
                        if (!v13)\n
                            goto LABEL_40493f;\n
                        a0 = v13 + v49;\n
                        v50 = &v5;\n
LABEL_404937:\n
                        v51 = v48;\n
LABEL_40493a:\n
                        cgc_memcpy(a0, v50, v51);\n
LABEL_40493f:\n
                        tmp_2 = v49;\n
                        v49 += v53;\n
                        if (__CFADD__(tmp_2, v53))\n
                            goto LABEL_404a36;\n
LABEL_404948:\n
                        v56 = v3;\n
                        v14 = v56 + 1;\n
                        v3 = v14;\n
                        *(&v56) = *(v56);\n
                        if (!*(&v56))\n
                            goto LABEL_4049c1;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v13)\n
        *((v13 + v49)) = 0;\n
    return v49;\n
}\n
", "4211912:sub_4044c8": null, "4212005:sub_404525": null, "4212108:sub_40458c": null, "4212803:sub_404843": null, "4212887:sub_404897": null, "4213312:cgc_realloc": "extern void g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4213330:sub_404a52": null, "4213344:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    struct_0 *v5;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v5 = a0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v3 = cgc_tolower(v2);\n
            v2 = cgc_tolower(*(v1));\n
            if (v3 != v2)\n
            {\n
                *(&v2) = *((v5 - 1));\n
                return v2 - *(v1);\n
            }\n
            v1 += 1;\n
            v2 = *(v5);\n
            v5 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4213441:sub_404ac1": null, "4213456:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4213552:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4213609:sub_404b69": null, "4213616:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4213669:sub_404ba5": null, "4213680:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4213733:sub_404be5": null, "4213744:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4213805:sub_404c2d": null, "4213808:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4213842:sub_404c52": null, "4213856:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4213967:sub_404ccf": null, "4213968:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    char *v1;  // rax\n
    char v2;  // cl\n
    char *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    unsigned long v5;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r10\n
    char *v7;  // r10\n
    unsigned long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r11\n
    unsigned long long v11;  // r9\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // r11, Other Possible Types: unsigned long long\n
    uint128_t *v14;  // rcx\n
    unsigned long v16;  // rsi\n
    char *v17;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r8\n
    unsigned long long v19;  // rcx\n
    unsigned long v20;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    v4 = 0;\n
    v3 = v1;\n
    if (*(a1) && a2)\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1[v4] = v2;\n
            v2 = a1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
            if (v4 >= a2)\n
                break;\n
        }\n
        v3 = &v1[v4];\n
    }\n
    if (v4 >= a2)\n
        return v1;\n
    v5 = 1 + v3 - v1;\n
    v6 = (!(a2 <= v5) ? v5 : a2);\n
    v7 = &v1[v6 + -1 * v3];\n
    if (v7 < 8)\n
    {\n
LABEL_404d34:\n
        v17 = v3;\n
        goto LABEL_404e66;\n
    }\n
    else\n
    {\n
        if (v7 < 32)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7 & -0x20;\n
            v9 = v8 - 32;\n
            v10 = (v9 >> 5) + 1;\n
            v11 = v10 & 7;\n
            if (v9 < 224)\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                v13 = v10 & -8;\n
                v12 = 0;\n
                do\n
                {\n
                    *((v3 + v12)) = 0;\n
                    *((v3 + v12 + 16)) = 0;\n
                    *((v3 + v12 + 32)) = 0;\n
                    *((v3 + v12 + 48)) = 0;\n
                    *((v3 + v12 + 64)) = 0;\n
                    *((v3 + v12 + 80)) = 0;\n
                    *((v3 + v12 + 96)) = 0;\n
                    *((v3 + v12 + 112)) = 0;\n
                    *((v3 + v12 + 128)) = 0;\n
                    *((v3 + v12 + 144)) = 0;\n
                    *((v3 + v12 + 160)) = 0;\n
                    *((v3 + v12 + 176)) = 0;\n
                    *((v3 + v12 + 192)) = 0;\n
                    *((v3 + v12 + 208)) = 0;\n
                    *((v3 + v12 + 224)) = 0;\n
                    *((v3 + v12 + 240)) = 0;\n
                    v12 += 0x100;\n
                    tmp_21 = v13;\n
                    v13 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v11)\n
            {\n
                v14 = v12 + v3 + 16;\n
                v16 = 0;\n
                do\n
                {\n
                    *((-16 + v14 + v16)) = 0;\n
                    *((v14 + v16)) = 0;\n
                    v16 += 32;\n
                } while (v11 * 32 != v16);\n
            }\n
            if (v7 == v8)\n
                return v1;\n
            if (!(v7 & 24))\n
            {\n
                v3 += v8;\n
                goto LABEL_404d34;\n
            }\n
        }\n
        if (a2 > v5)\n
            v5 = a2;\n
        v18 = &v1[v5 + -1 * v3];\n
        v19 = v18 & -8;\n
        v17 = v3 + v19;\n
        do\n
        {\n
            *((v3 + v8)) = 0;\n
            v8 += 8;\n
        } while (v19 != v8);\n
        if (v18 == v19)\n
            return v1;\n
LABEL_404e66:\n
        v20 = v17 - v1;\n
        do\n
        {\n
            *(v17) = 0;\n
            v17 += 1;\n
            v20 += 1;\n
        } while (v20 < a2);\n
        return v1;\n
    }\n
}\n
", "4214410:sub_404e8a": null, "4214416:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4214487:sub_404ed7": null, "4214496:cgc_strsep": "long long cgc_strsep(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    unsigned long v3;  // r15\n
    unsigned long v4;  // rbx\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rbx\n
    unsigned long v9;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = cgc_strchr(a1, v2);\n
            if (v5)\n
            {\n
                v7 = v3 + v4;\n
                if (!*((v3 + v4)))\n
                    goto LABEL_404f25;\n
                v8 = v4 + 1;\n
                v9 = v8 + v3;\n
                goto LABEL_404f27;\n
            }\n
            v4 = v4 + 1;\n
            v2 = *((v3 + v4));\n
        } while (v2);\n
        v6 = v4;\n
    }\n
    v7 = v6 + v3;\n
LABEL_404f25:\n
    v9 = 0;\n
LABEL_404f27:\n
    *(a0) = v9;\n
    *(v7) = 0;\n
    return *(a0);\n
}\n
", "4214609:sub_404f51": null, "4214624:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4214703:sub_404faf": null, "4214704:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    void* v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    void* v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    void* v24;  // rdi\n
    unsigned int v25;  // r14d\n
    unsigned long long *v26;  // r15, Other Possible Types: unsigned long\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    void* v29;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    char v30[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v26 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v28 = 0;\n
                v27 = 1;\n
                v25 = 1;\n
                v29 = 0;\n
                if (!a1)\n
                    goto LABEL_405195;\n
                v30 = v2;\n
                if (!v25)\n
                    v30 = v16;\n
                *(v26) = v30;\n
                goto LABEL_405195;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_405071;\n
        goto LABEL_405011;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (a2)\n
        {\n
LABEL_405011:\n
            if (!(a2 == 16))\n
                goto LABEL_4050c6;\n
            *(&v18) = *(v16);\n
            v19 = 16;\n
            if (!(*(v16) == 48))\n
                goto LABEL_4050c8;\n
            v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
            goto LABEL_4050a6;\n
        }\n
        else\n
        {\n
LABEL_405071:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_4050b0:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_405172;\n
LABEL_4050c6:\n
                *(&v18) = *(v16);\n
LABEL_4050c8:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_4050d5:\n
                    v29 = 0;\n
                    v28 = 0;\n
                    v25 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v29 = v22 + v19 * v29;\n
                        if (v29 > 2147483647)\n
                            v28 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v25 = 0;\n
                    } while (v18);\n
                    v26 = v1;\n
                    goto LABEL_40517d;\n
                }\n
LABEL_405172:\n
                v28 = 0;\n
                v25 = 1;\n
                v29 = 0;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_4050d5;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_4050b0;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
LABEL_4050a6:\n
                v19 = 16;\n
                goto LABEL_4050c6;\n
            }\n
        }\n
    }\n
LABEL_40517d:\n
    v27 = v0;\n
LABEL_405195:\n
    v31 = (!v28 ? -0x80000000 : -(v29));\n
    v32 = (!v28 ? 2147483647 : v29);\n
    if (v27 < 0)\n
        v32 = v31;\n
    return v32;\n
}\n
", "4215049:sub_405109": null, "4215238:sub_4051c6": null, "4215248:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    void* v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    void* v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    void* v24;  // rdi\n
    unsigned int v25;  // r14d\n
    unsigned long long *v26;  // r15, Other Possible Types: unsigned long\n
    unsigned int v27;  // ecx\n
    void* v28;  // rbp, Other Possible Types: unsigned long, unsigned int, unsigned long long\n
    void* v29;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    char v30[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v31;  // eax\n
    unsigned long v32;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v26 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v28 = 0;\n
                v27 = 1;\n
                v25 = 1;\n
                v29 = 0;\n
                if (!a1)\n
                    goto LABEL_4053b5;\n
                v30 = v2;\n
                if (!v25)\n
                    v30 = v16;\n
                *(v26) = v30;\n
                goto LABEL_4053b5;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_405291;\n
        goto LABEL_405231;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (a2)\n
        {\n
LABEL_405231:\n
            if (!(a2 == 16))\n
                goto LABEL_4052e6;\n
            *(&v18) = *(v16);\n
            v19 = 16;\n
            if (!(*(v16) == 48))\n
                goto LABEL_4052e8;\n
            v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
            goto LABEL_4052c6;\n
        }\n
        else\n
        {\n
LABEL_405291:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_4052d0:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_405392;\n
LABEL_4052e6:\n
                *(&v18) = *(v16);\n
LABEL_4052e8:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_4052f5:\n
                    v29 = 0;\n
                    v28 = 0;\n
                    v25 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v29 = v22 + v19 * v29;\n
                        if (v29 >> 32)\n
                            v28 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v25 = 0;\n
                    } while (v18);\n
                    v26 = v1;\n
                    goto LABEL_40539d;\n
                }\n
LABEL_405392:\n
                v28 = 0;\n
                v25 = 1;\n
                v29 = 0;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_4052f5;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_4052d0;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
LABEL_4052c6:\n
                v19 = 16;\n
                goto LABEL_4052e6;\n
            }\n
        }\n
    }\n
LABEL_40539d:\n
    v27 = v0;\n
LABEL_4053b5:\n
    if (v27 < 0)\n
    {\n
        v31 = (v29 == -0x80000000 ? 1 : v28);\n
        if (v29 <= 2147483647)\n
            v31 = v28;\n
        v29 = -(v29);\n
        v28 = v31;\n
    }\n
    v32 = (!v28 ? 4294967295 : v29);\n
    return v32;\n
}\n
", "4215593:sub_405329": null, "4215793:sub_4053f1": null, "4215808:cgc_unpack": "long long cgc_unpack(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v2;  // r14\n
    unsigned long v3;  // rax, Other Possible Types: unsigned int, unsigned long long\n
    char *v4;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v5;  // rdx\n
\n
    v2 = a1;\n
    strcpy(&v0, \"CS10FUN!\");\n
    v3 = cgc_strlen(&v0);\n
    if (!a1)\n
        return v3;\n
    v3 = v3;\n
    if (a1 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((a0 + v4)) = *((a0 + v4)) ^ (&v0)[(v4 >> 31 CONCAT v4) /m v3 >> 32];\n
            v3 = (&v0)[(v4 + 1 >> 31 CONCAT v4 + 1) /m v3 >> 32];\n
            *((a0 + v4 + 1)) = *((a0 + v4 + 1)) ^ v3;\n
            v4 += 2;\n
        } while (v4 != (v2 & -2));\n
    }\n
    if (!(v2 & 1))\n
        return v3;\n
    v3 = (v4 >> 31 CONCAT v4) /m v3;\n
    v5 = (v4 >> 31 CONCAT v4) /m v3 >> 32;\n
    *(&v3) = (&v0)[v5];\n
    *((a0 + v4)) = *((a0 + v4)) ^ (&v0)[v5];\n
}\n
", "4215951:sub_40548f": null, "4215952:cgc_init": "extern unsigned int heap_propagate_bytes;\n
extern struct_0 *heap_propagate_memory;\n
extern struct_0 *heap_propagate_unpacked;\n
extern unsigned int heap_sort_bytes;\n
extern struct_0 *heap_sort_memory;\n
extern struct_0 *heap_sort_unpacked;\n
extern unsigned int heapify_bytes;\n
extern struct_0 *heapify_memory;\n
extern struct_0 *heapify_unpacked;\n
extern unsigned int insertion_sort_bytes;\n
extern struct_0 *insertion_sort_memory;\n
extern struct_0 *insertion_sort_unpacked;\n
extern unsigned int merge_helper_bytes;\n
extern struct_0 *merge_helper_memory;\n
extern struct_0 *merge_helper_unpacked;\n
extern unsigned int merge_sort_bytes;\n
extern struct_0 *merge_sort_memory;\n
extern struct_0 *merge_sort_unpacked;\n
extern unsigned int selection_sort_bytes;\n
extern struct_0 *selection_sort_memory;\n
extern struct_0 *selection_sort_unpacked;\n
\n
long long cgc_init()\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rax\n
    char *v6;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // rax\n
    char *v9;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rdi\n
    unsigned long long v13;  // rax\n
    char *v14;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v15;  // rax\n
    char *v16;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rdi\n
    unsigned long long v18;  // rax\n
    char *v19;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    char *v21;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rdi\n
\n
    cgc_allocate(v2, v3, v4);\n
    cgc_memcpy(selection_sort_memory, &selection_sort_bytes, 0x157);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v5 = cgc_strlen(&v0);\n
    v6 = 0;\n
    while (true)\n
    {\n
        selection_sort_memory[v6].field_0 = selection_sort_memory[v6].field_0 ^ (&v0)[(v6 >> 31 CONCAT v6) /m v5 >> 32];\n
        v7 = v6 + 1;\n
        if (v7 == 343)\n
            break;\n
        selection_sort_memory[1 + v6].field_0 = selection_sort_memory[1 + v6].field_0 ^ (&v0)[(v7 >> 31 CONCAT v7) /m v5 >> 32];\n
        v6 = v7 + 1;\n
    }\n
    selection_sort_unpacked = selection_sort_memory;\n
    cgc_allocate(v7, v6, 343);\n
    cgc_memcpy(heap_propagate_memory, &heap_propagate_bytes, 0x1e0);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v8 = cgc_strlen(&v0);\n
    v9 = 0;\n
    do\n
    {\n
        heap_propagate_memory[v9].field_0 = heap_propagate_memory[v9].field_0 ^ (&v0)[(v9 >> 31 CONCAT v9) /m v8 >> 32];\n
        heap_propagate_memory[1 + v9].field_0 = heap_propagate_memory[1 + v9].field_0 ^ (&v0)[(v9 + 1 >> 31 CONCAT v9 + 1) /m v8 >> 32];\n
        v9 += 2;\n
    } while (v9 != 480);\n
    heap_propagate_unpacked = heap_propagate_memory;\n
    cgc_allocate(heap_propagate_memory, v9, 480);\n
    cgc_memcpy(heapify_memory, &heapify_bytes, 0x2b7);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v10 = cgc_strlen(&v0);\n
    v11 = 0;\n
    while (true)\n
    {\n
        heapify_memory[v11].field_0 = heapify_memory[v11].field_0 ^ (&v0)[(v11 >> 31 CONCAT v11) /m v10 >> 32];\n
        v12 = v11 + 1;\n
        if (v12 == 695)\n
            break;\n
        heapify_memory[1 + v11].field_0 = heapify_memory[1 + v11].field_0 ^ (&v0)[(v12 >> 31 CONCAT v12) /m v10 >> 32];\n
        v11 = v12 + 1;\n
    }\n
    heapify_unpacked = heapify_memory;\n
    cgc_allocate(v12, v11, 695);\n
    cgc_memcpy(heap_sort_memory, &heap_sort_bytes, 0x12a);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v13 = cgc_strlen(&v0);\n
    v14 = 0;\n
    do\n
    {\n
        heap_sort_memory[v14].field_0 = heap_sort_memory[v14].field_0 ^ (&v0)[(v14 >> 31 CONCAT v14) /m v13 >> 32];\n
        heap_sort_memory[1 + v14].field_0 = heap_sort_memory[1 + v14].field_0 ^ (&v0)[(v14 + 1 >> 31 CONCAT v14 + 1) /m v13 >> 32];\n
        v14 += 2;\n
    } while (v14 != 298);\n
    heap_sort_unpacked = heap_sort_memory;\n
    cgc_allocate(heap_sort_memory, v14, 298);\n
    cgc_memcpy(merge_helper_memory, &merge_helper_bytes, 0x1ef);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v15 = cgc_strlen(&v0);\n
    v16 = 0;\n
    while (true)\n
    {\n
        merge_helper_memory[v16].field_0 = merge_helper_memory[v16].field_0 ^ (&v0)[(v16 >> 31 CONCAT v16) /m v15 >> 32];\n
        v17 = v16 + 1;\n
        if (v17 == 495)\n
            break;\n
        merge_helper_memory[1 + v16].field_0 = merge_helper_memory[1 + v16].field_0 ^ (&v0)[(v17 >> 31 CONCAT v17) /m v15 >> 32];\n
        v16 = v17 + 1;\n
    }\n
    merge_helper_unpacked = merge_helper_memory;\n
    cgc_allocate(v17, v16, 495);\n
    cgc_memcpy(merge_sort_memory, &merge_sort_bytes, 0x190);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v18 = cgc_strlen(&v0);\n
    v19 = 0;\n
    do\n
    {\n
        merge_sort_memory[v19].field_0 = merge_sort_memory[v19].field_0 ^ (&v0)[(v19 >> 31 CONCAT v19) /m v18 >> 32];\n
        merge_sort_memory[1 + v19].field_0 = merge_sort_memory[1 + v19].field_0 ^ (&v0)[(v19 + 1 >> 31 CONCAT v19 + 1) /m v18 >> 32];\n
        v19 += 2;\n
    } while (v19 != 400);\n
    merge_sort_unpacked = merge_sort_memory;\n
    cgc_allocate(merge_sort_memory, v19, 400);\n
    cgc_memcpy(insertion_sort_memory, &insertion_sort_bytes, 0x15d);\n
    strcpy(&v0, \"CS10FUN!\");\n
    v20 = cgc_strlen(&v0);\n
    v21 = 0;\n
    while (true)\n
    {\n
        insertion_sort_memory[v21].field_0 = insertion_sort_memory[v21].field_0 ^ (&v0)[(v21 >> 31 CONCAT v21) /m v20 >> 32];\n
        v22 = v21 + 1;\n
        if (v22 == 349)\n
            break;\n
        insertion_sort_memory[1 + v21].field_0 = insertion_sort_memory[1 + v21].field_0 ^ (&v0)[(v22 >> 31 CONCAT v22) /m v20 >> 32];\n
        v21 = v22 + 1;\n
    }\n
    insertion_sort_unpacked = insertion_sort_memory;\n
    return insertion_sort_memory;\n
}\n
", "4216983:sub_405897": null, "4216992:cgc_swap": "long long cgc_swap(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    v1 = *(a0);\n
    *(a0) = *(a1);\n
    *(a1) = v1;\n
    return v1;\n
}\n
", "4217001:sub_4058a9": null, "4217008:cgc_print_array": "long long cgc_print_array(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    void* v3;  // r15, Other Possible Types: unsigned long\n
    unsigned int v4;  // rdi\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return cgc_printf(\"Empty Array\\n
\");\n
    }\n
    else if (a1)\n
    {\n
        cgc_printf(\"Array data\\n
[\");\n
        v3 = 0;\n
        do\n
        {\n
            cgc_printf(\"%d\");\n
            v4 = (!(a1 - 1 <= v3) ? \"]\\n
\" : \", \");\n
            v3 += 1;\n
        } while (a1 != v3);\n
        return cgc_printf(v4);\n
    }\n
    else\n
    {\n
        return cgc_printf(\"Empty Array\\n
\");\n
    }\n
}\n
", "4217159:sub_405947": null, "4217168:cgc_create_number_array": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_create_number_array(unsigned long long *a0)\n
{\n
    unsigned long long *v0;  // [bp-0x80]\n
    unsigned long long *v1;  // [bp-0x78]\n
    unsigned int *v3;  // rbp, Other Possible Types: unsigned long, unsigned long long\n
    struct struct_0 **v4;  // r12, Other Possible Types: unsigned long\n
    char *v5;  // rbx\n
    unsigned long long *v6;  // al\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // r14\n
    char *v9;  // rax\n
    unsigned int *v10;  // r15, Other Possible Types: unsigned long, unsigned long long\n
\n
    v3 = cgc_malloc(8);\n
    v0 = a0;\n
    *(a0) = 2;\n
    v4 = 0;\n
    cgc_printf(\"Enter a list of numbers to sort. End the list with ';;'\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    v10 = 0;\n
    do\n
    {\n
        v5 = &v1;\n
        cgc_fread(v5, 1, cgc_stdin);\n
        v6 = v1;\n
        if (!v4)\n
        {\n
            if (v6 == 44)\n
            {\n
                *(v5) = 0;\n
                v4 = 0;\n
                continue;\n
            }\n
        }\n
        else\n
        {\n
            if (v6 == 44)\n
            {\n
                *(v5) = 0;\n
                v4 = 0;\n
                v7 = v10;\n
                v10 = v10 + 1;\n
                *((v3 + v7 * 4)) = cgc_strtol(&v1, NULL, 10);\n
                if (*(v8) == v10)\n
                {\n
                    v8 = v0;\n
                    v9 = cgc_malloc(v10 * 8);\n
                    cgc_memcpy(v9, v3, *(v8) * 4);\n
                    cgc_free(v3);\n
                    *(v8) = *(v8) * 2;\n
                    v3 = v9;\n
                }\n
                continue;\n
            }\n
            else if (v6 == 59 && *(&v0 + v4) == 59)\n
            {\n
                break;\n
            }\n
        }\n
        v4 = v4 + 1;\n
    } while (v4 < 63);\n
    do\n
    { } while (cgc_freaduntil(&v1, 64, 10, cgc_stdin) == -1);\n
    *(v0) = v10;\n
    return v3;\n
}\n
", "4217257:sub_4059a9": null, "4217338:sub_4059fa": null, "4217356:sub_405a0c": null, "4217528:sub_405ab8": null, "4217536:cgc_multiply_array": "extern unsigned long long cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_multiply_array(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x88]\n
    unsigned long long *v1;  // [bp-0x80]\n
    char v2[2];  // [bp-0x78]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long *v5;  // r14, Other Possible Types: unsigned long\n
    unsigned long v6;  // r15\n
    unsigned long long v7;  // rax\n
    unsigned long long v8;  // rbp\n
    char *v10;  // rdx\n
    void* v11;  // r14, Other Possible Types: unsigned long\n
    void* v12;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = *(a1);\n
    if (v4 >= 10001)\n
        return cgc_printf(\"Array is too long. Can't multiply any more\\n
\");\n
    v5 = a0;\n
    v6 = *(a0);\n
    if (!v6)\n
    {\n
        return *(a1);\n
    }\n
    else if (!v4)\n
    {\n
        return *(a1);\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        cgc_printf(\"Quick Grow! Enter a list multiplier. End number with ';'\\n
\");\n
        cgc_fflush(cgc_stdout);\n
        if (cgc_freaduntil(v2, 64, 59, cgc_stdin) == -1)\n
        {\n
LABEL_405be8:\n
            do\n
            { } while (cgc_freaduntil(v2, 64, 10, cgc_stdin) == -1);\n
            v4 = cgc_free(v6);\n
            *(v5) = v12;\n
            return v4;\n
        }\n
        else\n
        {\n
            v7 = cgc_strtol(v2, NULL, 10);\n
            v8 = v7;\n
            if (v7 && v7 <= 10000)\n
            {\n
                v1 = a0;\n
                v0 = v7 * *(a1);\n
                v12 = cgc_malloc(v0 * 4);\n
                if (v8 > 0)\n
                {\n
                    v11 = 0;\n
                    do\n
                    {\n
                        v10 = *(&a1);\n
                        cgc_memcpy(v11 * v10 * 4 + v12, v6, v10 * 4);\n
                        v11 += 1;\n
                    } while (v8 != v11);\n
                }\n
                *(&a1) = v0;\n
                v5 = v1;\n
                goto LABEL_405be8;\n
            }\n
            cgc_printf(\"Multiplier too big, try again\\n
\");\n
            do\n
            {\n
                v4 = cgc_freaduntil(v2, 64, 10, cgc_stdin);\n
            } while (v4 == -1);\n
            return v4;\n
        }\n
    }\n
}\n
", "4217946:sub_405c5a": null, "4217952:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_check_seed()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v0 == *(0x4347c000))\n
    {\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return cgc_fflush(cgc_stdout);\n
    }\n
    return cgc_fflush(cgc_stdout);\n
}\n
", "4218045:sub_405cbd": null, "4218048:main": null, "4219385:sub_4061f9": null, "4219388:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}