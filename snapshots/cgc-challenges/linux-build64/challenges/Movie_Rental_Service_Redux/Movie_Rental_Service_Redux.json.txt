{"4202496:_init": "extern struct_0 *g_409410;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409410;\n
    if (g_409410)\n
        v1 = g_409410();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409430;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409430;\n
    goto *(4232248);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202560:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4232224);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409408;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_409418;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409420;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409420)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v1 = a1 * a0;\n
        if ((0 CONCAT v1) /m a1 != a0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = cgc_malloc(v1);\n
        if (!v0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v2 = cgc_memset(v0, 0, v1);\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4203045:sub_402225": null, "4203056:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (!cgc_isalpha(a0))\n
    {\n
        v0 = cgc_isdigit(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203122:sub_402272": null, "4203136:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = cgc_isupper(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203202:sub_4022c2": null, "4203216:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203242:sub_4022ea": null, "4203248:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203274:sub_40230a": null, "4203280:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203306:sub_40232a": null, "4203312:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return ((a0 & -128) ^ 255) & 1;\n
}\n
", "4203340:sub_40234c": null, "4203344:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (a0 != 32)\n
        v0 = a0 == 9;\n
    return v0 & 1;\n
}\n
", "4203386:sub_40237a": null, "4203392:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (a0 != 127)\n
        v0 = a0 < 32;\n
    return v0 & 1;\n
}\n
", "4203434:sub_4023aa": null, "4203440:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 != 32)\n
    {\n
        v0 = cgc_isprint(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203497:sub_4023e9": null, "4203504:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 32)\n
        v0 = a0 != 127;\n
    return v0 & 1;\n
}\n
", "4203546:sub_40241a": null, "4203552:cgc_ispunct": "extern char _punct;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&_punct)[a0];\n
}\n
", "4203576:sub_402438": null, "4203584:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    if (a0 > 8)\n
    {\n
        v0 = 1;\n
        if (a0 < 14)\n
            return v0 & 1;\n
    }\n
    v0 = a0 == 32;\n
    return v0 & 1;\n
}\n
", "4203636:sub_402474": null, "4203648:cgc_isxdigit": "extern char _xdigit;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    return (&_xdigit)[a0];\n
}\n
", "4203672:sub_402498": null, "4203680:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203695:sub_4024af": null, "4203696:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 | 32;\n
    return v0;\n
}\n
", "4203753:sub_4024e9": null, "4203760:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 & 95;\n
    return v0;\n
}\n
", "4203817:sub_402529": null, "4203824:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v2;\n
    v0 = a0 - 24;\n
    v2 = v0;\n
    if (v2->field_8)\n
    {\n
        return v0;\n
    }\n
    else if (v0->field_0 < 0x40000)\n
    {\n
        cgc_insert_into_flist(v0);\n
        v2 = cgc_coalesce(v0);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_free_huge(v0);\n
        return v2;\n
    }\n
}\n
", "4203939:sub_4025a3": null, "4203952:cgc_free_huge": "long long cgc_free_huge(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long long v2;  // rsi\n
\n
    v0 = a0;\n
    return cgc_deallocate(a0, v2);\n
}\n
", "4203986:sub_4025d2": null, "4204000:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern struct_1 *cgc_free_lists;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct_2 *v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_1 *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v4 + 24 < 0x40000)\n
    {\n
        if ((v4 & 7))\n
            v4 = v4 - -7 & -8;\n
        if (v4 >= 0x80000000)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v4 += 24;\n
        v3 = 0;\n
        v2 = cgc_find_fit(v4, &v3);\n
        if (!v3)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v2 = 31;\n
                v3 = (&cgc_free_lists)[v2];\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_remove_from_flist(v3);\n
        v1 = *(v3) - v4;\n
        if (v1 > 48)\n
        {\n
            v0 = v3 + v4;\n
            v0->field_0 = v1;\n
            v0->field_8 = 1;\n
            v0->field_10 = 0;\n
            v0->field_18 = 0;\n
            *(v3) = v4;\n
            v0->field_28 = v3;\n
            v0->field_20 = *((v3 + 32));\n
            if (*((v3 + 32)))\n
                *((*((v3 + 32)) + 40)) = v0;\n
            *((v3 + 32)) = v0;\n
            cgc_insert_into_flist(v0);\n
        }\n
        v5 = v3 + 24;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = cgc_malloc_huge(v4);\n
        return v5;\n
    }\n
}\n
", "4204454:sub_4027a6": null, "4204464:cgc_malloc_huge": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_malloc_huge(unsigned long long a0)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v2 = a0;\n
    v2 += 24;\n
    if (cgc_allocate(a0, v5, v6))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = *(&v1);\n
    v0->field_0 = v2;\n
    v0->field_8 = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v0->field_28 = 0;\n
    v0->field_20 = 0;\n
    v3 = v0 + 24;\n
    return v3;\n
}\n
", "4204626:sub_402852": null, "4204640:cgc_find_fit": "extern unsigned long long cgc_free_lists;\n
\n
long long cgc_find_fit(unsigned long long a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    for (v0 = cgc_get_size_class(a0); v0 < 32; v0 += 1)\n
    {\n
        for (*(a1) = (&cgc_free_lists)[v0]; *(a1); *(a1) = *(a1)->field_10)\n
        {\n
            if (*(a1)->field_0 >= a0)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
    }\n
    *(a1) = 0;\n
    v1 = -1;\n
    return v1;\n
}\n
", "4204819:sub_402913": null, "4204832:cgc_allocate_new_blk": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_allocate_new_blk()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
\n
    v0 = 0x40000;\n
    if (cgc_allocate(v5, v6, v7))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    else if (*(&v2))\n
    {\n
        v1 = *(&v2);\n
        v1->field_0 = v0;\n
        v1->field_8 = 1;\n
        v1->field_18 = 0;\n
        v1->field_10 = 0;\n
        v1->field_28 = 0;\n
        v1->field_20 = 0;\n
        cgc_insert_into_flist(v1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4205010:sub_4029d2": null, "4205024:cgc_get_size_class": "extern unsigned long long size_class_limits[4];\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < 32)\n
            v0 = !(a0 <= size_class_limits[v1]);\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4205119:sub_402a3f": null, "4205120:cgc_insert_into_flist": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern struct_1 cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(a0->field_0);\n
    a0->field_8 = 1;\n
    if (!(&cgc_free_lists.field_0)[v0])\n
    {\n
        (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
        return &cgc_free_lists.field_0;\n
    }\n
    a0->field_10 = (&cgc_free_lists.field_0)[v0];\n
    (&cgc_free_lists.field_0)[v0]->field_18 = a0;\n
    (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
    a0->field_18 = 0;\n
    return a0;\n
}\n
", "4205287:sub_402ae7": null, "4205296:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
extern unsigned long long cgc_free_lists[4];\n
\n
long long cgc_remove_from_flist(struct_2 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(*(&a0->field_0));\n
    if (a0->field_18)\n
        a0->field_18->field_10 = a0->field_10;\n
    if (a0->field_10)\n
        a0->field_10->field_18 = a0->field_18;\n
    if (cgc_free_lists[v0] == a0)\n
        cgc_free_lists[v0] = a0->field_10;\n
    a0->field_10 = 0;\n
    a0->field_18 = 0;\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4205482:sub_402baa": null, "4205488:cgc_coalesce": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_coalesce(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax\n
    struct_0 *v3;  // rax\n
    struct_1 *v4;  // rax\n
    struct_0 *v5;  // rax, Other Possible Types: unsigned long long, struct_1 *, unsigned long\n
\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0->field_20);\n
        cgc_remove_from_flist(a0);\n
        v1 = a0->field_28;\n
        v1->field_0 = a0->field_0 + v1->field_0;\n
        v2 = a0->field_28;\n
        v2->field_0 = a0->field_20->field_0 + v2->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        cgc_remove_from_blist(a0->field_20);\n
        v5 = cgc_remove_from_blist(a0);\n
        return v5;\n
    }\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && !a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0);\n
        v3 = a0->field_28;\n
        v3->field_0 = a0->field_0 + v3->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        v5 = cgc_remove_from_blist(a0);\n
        goto LABEL_402d82;\n
    }\n
    v5 = a0;\n
    if (a0->field_28)\n
    {\n
        v5 = a0->field_28;\n
        if (!v5->field_8)\n
        {\n
            v5 = a0;\n
            if (a0->field_20)\n
            {\n
                v5 = a0->field_20;\n
                if (v5->field_8)\n
                {\n
                    cgc_remove_from_flist(a0->field_20);\n
                    cgc_remove_from_flist(a0);\n
                    v4 = a0;\n
                    v4->field_0 = a0->field_20->field_0 + v4->field_0;\n
                    cgc_insert_into_flist(a0);\n
                    v5 = cgc_remove_from_blist(a0->field_20);\n
                }\n
            }\n
        }\n
    }\n
LABEL_402d82:\n
    return v5;\n
}\n
", "4205970:sub_402d92": null, "4205984:cgc_remove_from_blist": "long long cgc_remove_from_blist(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    if (*((a0 + 40)))\n
        *((*((a0 + 40)) + 32)) = *((v0 + 32));\n
    v2 = a0;\n
    if (*((a0 + 32)))\n
    {\n
        v2 = *((a0 + 32));\n
        *((v2 + 40)) = *((a0 + 40));\n
    }\n
    return v2;\n
}\n
", "4206064:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[a0] != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206172:sub_402e5c": null, "4206176:cgc_memcmp": "long long cgc_memcmp(char *a0, char *a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < a2)\n
        {\n
            if (*(v2) != *(v1))\n
            {\n
                v3 = *(v2) - *(v1);\n
                return v3;\n
            }\n
            v2 += 1;\n
            v1 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206318:sub_402eee": null, "4206320:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4206419:sub_402f53": null, "4206432:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a0 >= a1)\n
    {\n
        if (a0 <= a1)\n
            return a0;\n
        for (v0 = a2; v0 > 0; v0 += 1)\n
        {\n
            *((a0 + v0 + 1)) = v0[1 + a1];\n
        }\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            a0[v0] = *((a1 + v0));\n
        }\n
        return a0;\n
    }\n
}\n
", "4206640:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a2)\n
    {\n
        v1 = a0;\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a1;\n
        }\n
        v2 = a0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = a0;\n
        return v2;\n
    }\n
}\n
", "4206786:sub_4030c2": null, "4206800:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    char v2;  // [bp-0x59]\n
    char v3;  // [bp-0x49]\n
    char v4;  // [bp-0x39]\n
    char v5;  // [bp-0x29]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v8 = a1;\n
    v7 = a3;\n
    v6 = 0;\n
    if (v8 >= a2)\n
    {\n
        v6 = cgc_output_number_printf(a0, (0 CONCAT v8) /m a2, a2, v7 - 1, a4);\n
        v8 = (0 CONCAT v8) /m a2 >> 32;\n
    }\n
    if (!v6 && v7 > 0)\n
    {\n
        while (true)\n
        {\n
            v7 = v7 - 1;\n
            if (!v7)\n
                break;\n
            if ((a4 & 1))\n
                v5 = 48;\n
            else\n
                v4 = 32;\n
            cgc_transmit(a0, a1, a2, a3);\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v3 = v1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v2 = v0;\n
    }\n
    cgc_transmit(a0, a1, a2, a3);\n
    return v6 + 1;\n
}\n
", "4207201:sub_403261": null, "4207216:cgc_fdprintf": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_fdprintf(unsigned long long a0, char *a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x200], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x1f8]\n
    unsigned int v2;  // [bp-0x1ec]\n
    unsigned int *v3;  // [bp-0x1e8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x1e0]\n
    unsigned int v5;  // [bp-0x1d4]\n
    unsigned int *v6;  // [bp-0x1d0], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x1c8]\n
    unsigned int v8;  // [bp-0x1bc]\n
    unsigned int *v9;  // [bp-0x1b8], Other Possible Types: unsigned long\n
    struct_1 *v10;  // [bp-0x1b0]\n
    unsigned int v11;  // [bp-0x1a4]\n
    unsigned long v12;  // [bp-0x1a0]\n
    struct struct_0 **v13;  // [bp-0x198]\n
    struct_1 *v14;  // [bp-0x190]\n
    unsigned int v15;  // [bp-0x184]\n
    unsigned int v16;  // [bp-0x180]\n
    unsigned int v17;  // [bp-0x17c]\n
    char v18;  // [bp-0x178]\n
    unsigned long v19;  // [bp-0x168]\n
    unsigned long v20;  // [bp-0x160]\n
    unsigned long v21;  // [bp-0x158]\n
    unsigned long v22;  // [bp-0x150]\n
    int v23;  // [bp-0x148]\n
    int v24;  // [bp-0x138]\n
    int v25;  // [bp-0x128]\n
    int v26;  // [bp-0x118]\n
    int v27;  // [bp-0x108]\n
    int v28;  // [bp-0xf8]\n
    int v29;  // [bp-0xe8]\n
    int v30;  // [bp-0xd8]\n
    char v31;  // [bp-0xb9]\n
    char v32;  // [bp-0xa9]\n
    char v33;  // [bp-0x99]\n
    char v34;  // [bp-0x89]\n
    char v35;  // [bp-0x79]\n
    char v36;  // [bp-0x69]\n
    char v37;  // [bp-0x59]\n
    unsigned int v38;  // [bp-0x58]\n
    unsigned int v39;  // [bp-0x54]\n
    unsigned long v40;  // [bp-0x50]\n
    unsigned long v41;  // [bp-0x48]\n
    unsigned int v42;  // [bp-0x3c]\n
    unsigned int v43;  // [bp-0x38]\n
    unsigned int v44;  // [bp-0x34]\n
    unsigned int v45;  // [bp-0x30]\n
    unsigned int v46;  // [bp-0x2c]\n
    unsigned int v47;  // [bp-0x28]\n
    char v48;  // [bp-0x21]\n
    char *v49;  // [bp-0x20]\n
    char *v50;  // [bp-0x18], Other Possible Types: unsigned long\n
    char v51;  // [bp-0x8]\n
    unsigned long v52;  // [bp+0x8]\n
    unsigned long long v53;  // rbp\n
    char v54;  // al\n
    int v55;  // xmm0\n
    int v56;  // xmm1\n
    int v57;  // xmm2\n
    int v58;  // xmm3\n
    int v59;  // xmm4\n
    int v60;  // xmm5\n
    int v61;  // xmm6\n
    int v62;  // xmm7\n
    unsigned long v63;  // r9\n
    char *v64;  // rax\n
    char *v65;  // rax\n
    unsigned long long v66;  // rdx\n
    unsigned int *v67;  // rax\n
    unsigned long long v68;  // rdx\n
    unsigned int *v69;  // rax\n
    unsigned long long v70;  // rdx\n
    struct struct_0 **v71;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v72;  // rdx\n
    unsigned int *v73;  // rax\n
    unsigned int *v74;  // rax\n
\n
    v53 = &v51;\n
    if (v54)\n
    {\n
        v23 = v55;\n
        v24 = v56;\n
        v25 = v57;\n
        v26 = v58;\n
        v27 = v59;\n
        v28 = v60;\n
        v29 = v61;\n
        v30 = v62;\n
    }\n
    v22 = v63;\n
    v21 = a4;\n
    v20 = a3;\n
    v19 = a2;\n
    v50 = a1;\n
    v45 = 0;\n
    v44 = 0;\n
    v43 = 0;\n
    v41 = &v18;\n
    v40 = &v52;\n
    v39 = 48;\n
    v38 = 16;\n
    while (*(v50))\n
    {\n
        v64 = v50;\n
        v50 = v64 + 1;\n
        v37 = *(v64);\n
        if (v37 != 37)\n
        {\n
            v31 = v37;\n
            cgc_transmit(a0, a1, a2, a3);\n
LABEL_403821:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v65 = v50;\n
                    a3 = v65 + 1;\n
                    v50 = a3;\n
                    v37 = *(v65);\n
                    v17 = v37;\n
                    if (v17 != 48)\n
                        break;\n
                    v44 |= 1;\n
                }\n
                if (v17 - 49 >= 9)\n
                    break;\n
                a2 = 10;\n
                v43 = cgc_strtol(v50 - 1, &v50, 10);\n
            }\n
            v16 = v37;\n
            if (v16 == 37)\n
            {\n
                v36 = 37;\n
                cgc_transmit(a0, a1, a2, a3);\n
                goto LABEL_4037e0;\n
            }\n
            if (v16 == 88)\n
            {\n
                v44 |= 2;\n
            }\n
            else if (v16 == 99)\n
            {\n
                v1 = &v38;\n
                v2 = v38;\n
                if (v2 <= 40)\n
                {\n
                    a3 = v1;\n
                    v66 = v2;\n
                    v67 = v66 + a3->field_10;\n
                    a2 = v66 + 8;\n
                    *(&a3->field_0) = a2;\n
                    v0 = v67;\n
                }\n
                else\n
                {\n
                    a3 = v1;\n
                    a2 = *((a3 + 8));\n
                    *((a3 + 8)) = a2 + 2;\n
                    v0 = a2;\n
                }\n
                v48 = *(v0);\n
                v33 = v48;\n
                cgc_transmit(a0, a1, a2, a3);\n
                goto LABEL_4037e0;\n
            }\n
            else\n
            {\n
                if (v16 == 100)\n
                {\n
                    v10 = &v38;\n
                    v11 = v38;\n
                    if (v11 <= 40)\n
                    {\n
                        a3 = v10;\n
                        v68 = v11;\n
                        v69 = v68 + a3->field_10;\n
                        a2 = v68 + 8;\n
                        *(&a3->field_0) = a2;\n
                        v9 = v69;\n
                    }\n
                    else\n
                    {\n
                        a3 = v10;\n
                        a2 = *((a3 + 8));\n
                        *((a3 + 8)) = a2 + 2;\n
                        v9 = a2;\n
                    }\n
                    v47 = *(v9);\n
                    if (v47 < 0)\n
                    {\n
                        v34 = 45;\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v47 = -(v47);\n
                    }\n
                    cgc_output_number_printf(a0, v47, 10, v43, v44);\n
                    goto LABEL_4037e0;\n
                }\n
                if (v16 == 115)\n
                {\n
                    v14 = &v38;\n
                    v15 = v38;\n
                    if (v15 <= 40)\n
                    {\n
                        a3 = v14;\n
                        v70 = v15;\n
                        v71 = v70 + a3->field_10;\n
                        a2 = v70 + 8;\n
                        *(&a3->field_0) = a2;\n
                    }\n
                    else\n
                    {\n
                        a3 = v14;\n
                        v72 = *((a3 + 8));\n
                        v71 = v72;\n
                        a2 = v72 + 1;\n
                        *((a3 + 8)) = a2;\n
                    }\n
                    v13 = v71;\n
                    v49 = &*(v13)->field_0;\n
                    v46 = 0;\n
                    while (true)\n
                    {\n
                        v12 = v46;\n
                        if (v12 >= cgc_strlen(v49))\n
                            break;\n
                        v35 = v49[v46];\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v46 += 1;\n
                    }\n
                    goto LABEL_4037e0;\n
                }\n
                if (v16 == 117)\n
                {\n
                    v7 = &v38;\n
                    v8 = v38;\n
                    if (v8 <= 40)\n
                    {\n
                        a3 = v7;\n
                        a2 = v8;\n
                        v73 = a2 + a3->field_10;\n
                        *(&a3->field_0) = a2 + 8;\n
                        v6 = v73;\n
                    }\n
                    else\n
                    {\n
                        a3 = v7;\n
                        a2 = a3->field_8;\n
                        a3->field_8 = &a2[2];\n
                        v6 = a2;\n
                    }\n
                    v42 = *(v6);\n
                    cgc_output_number_printf(a0, v42, 10, v43, v44);\n
                    goto LABEL_4037e0;\n
                }\n
                if (v16 != 120)\n
                {\n
                    v32 = v37;\n
                    cgc_transmit(a0, a1, a2, a3);\n
LABEL_4037e0:\n
                    v43 = 0;\n
                    v44 = 0;\n
                    goto LABEL_403821;\n
                }\n
            }\n
            v4 = &v38;\n
            v5 = v38;\n
            if (v5 > 40)\n
            {\n
                a3 = v4;\n
                a2 = a3->field_8;\n
                a3->field_8 = &a2[2];\n
                v3 = a2;\n
            }\n
            else\n
            {\n
                a3 = v4;\n
                a2 = v5;\n
                v74 = a2 + a3->field_10;\n
                *(&a3->field_0) = a2 + 8;\n
                v3 = v74;\n
            }\n
            v42 = *(v3);\n
            cgc_output_number_printf(a0, v42, 16, v43, v44);\n
            goto LABEL_4037e0;\n
        }\n
    }\n
    return v45;\n
}\n
", "4208695:sub_403837": null, "4208704:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    char v2;  // [bp-0x69]\n
    char v3;  // [bp-0x59]\n
    char v4;  // [bp-0x49]\n
    char v5;  // [bp-0x39]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    struct struct_0 **v10;  // rax\n
    unsigned int *v11;  // rax\n
    struct struct_0 **v12;  // rax\n
    unsigned int *v13;  // rax\n
\n
    v8 = a2;\n
    v7 = a4;\n
    v6 = 0;\n
    if (v8 >= a3)\n
    {\n
        v6 = cgc_output_number_sprintf(a0, a1, (0 CONCAT v8) /m a3, a3, v7 - 1, a5);\n
        v8 = (0 CONCAT v8) /m a3 >> 32;\n
    }\n
    if (!v6 && v7 > 0)\n
    {\n
        while (true)\n
        {\n
            v7 = v7 - 1;\n
            if (!v7)\n
                break;\n
            if ((a5 & 1))\n
            {\n
                v5 = 48;\n
                *(a1)->field_0 = v5;\n
            }\n
            else\n
            {\n
                v4 = 32;\n
                *(a1)->field_0 = v4;\n
            }\n
            v10 = a1;\n
            *(v10) = *(v10) + 1;\n
            v11 = a0;\n
            *(v11) = *(v11) + 1;\n
        }\n
    }\n
    if ((a5 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v3 = v1;\n
        *(a1)->field_0 = v3;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v2 = v0;\n
        *(a1)->field_0 = v2;\n
    }\n
    v12 = a1;\n
    *(v12) = *(v12) + 1;\n
    v13 = a0;\n
    *(v13) = *(v13) + 1;\n
    return v6 + 1;\n
}\n
", "4209182:sub_403a1e": null, "4209184:cgc_sprintf": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct struct_0 **v0;  // [bp-0x1c0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x1b8]\n
    unsigned int v2;  // [bp-0x1ac]\n
    struct struct_0 **v3;  // [bp-0x1a8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x1a0]\n
    unsigned int v5;  // [bp-0x194]\n
    unsigned long v6;  // [bp-0x190]\n
    struct struct_0 **v7;  // [bp-0x188]\n
    struct_1 *v8;  // [bp-0x180]\n
    unsigned int v9;  // [bp-0x174]\n
    unsigned int v10;  // [bp-0x170]\n
    unsigned int v11;  // [bp-0x16c]\n
    char v12;  // [bp-0x168]\n
    unsigned long v13;  // [bp-0x158]\n
    unsigned long v14;  // [bp-0x150]\n
    unsigned long v15;  // [bp-0x148]\n
    unsigned long v16;  // [bp-0x140]\n
    int v17;  // [bp-0x138]\n
    int v18;  // [bp-0x128]\n
    int v19;  // [bp-0x118]\n
    int v20;  // [bp-0x108]\n
    int v21;  // [bp-0xf8]\n
    int v22;  // [bp-0xe8]\n
    int v23;  // [bp-0xd8]\n
    int v24;  // [bp-0xc8]\n
    char v25;  // [bp-0xa9]\n
    char v26;  // [bp-0x99]\n
    char v27;  // [bp-0x89]\n
    char v28;  // [bp-0x79]\n
    char v29;  // [bp-0x69]\n
    char v30;  // [bp-0x59]\n
    unsigned int v31;  // [bp-0x58]\n
    unsigned int v32;  // [bp-0x54]\n
    unsigned long v33;  // [bp-0x50]\n
    unsigned long v34;  // [bp-0x48]\n
    unsigned int v35;  // [bp-0x38]\n
    unsigned int v36;  // [bp-0x34]\n
    unsigned int v37;  // [bp-0x30]\n
    unsigned int v38;  // [bp-0x2c]\n
    unsigned int v39;  // [bp-0x28]\n
    unsigned int v40;  // [bp-0x24]\n
    char *v41;  // [bp-0x20]\n
    char *v42;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v43;  // [bp-0x10], Other Possible Types: unsigned long\n
    char v44;  // [bp-0x8]\n
    unsigned long v45;  // [bp+0x8]\n
    unsigned long long v46;  // rbp\n
    char v47;  // al\n
    int v48;  // xmm0\n
    int v49;  // xmm1\n
    int v50;  // xmm2\n
    int v51;  // xmm3\n
    int v52;  // xmm4\n
    int v53;  // xmm5\n
    int v54;  // xmm6\n
    int v55;  // xmm7\n
    unsigned long v56;  // r9\n
    char *v57;  // rax\n
    char *v58;  // rax\n
    struct_1 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    struct struct_0 **v61;  // rax\n
    struct_1 *v62;  // rcx\n
    struct struct_0 **v63;  // rdx\n
    struct_1 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    struct struct_0 **v66;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v67;  // rcx\n
    struct_1 *v68;  // rcx\n
    unsigned long long v69;  // rdx\n
    struct struct_0 **v70;  // rax\n
    struct_1 *v71;  // rcx\n
    struct struct_0 **v72;  // rdx\n
    char *v73;  // rax\n
\n
    v46 = &v44;\n
    if (v47)\n
    {\n
        v17 = v48;\n
        v18 = v49;\n
        v19 = v50;\n
        v20 = v51;\n
        v21 = v52;\n
        v22 = v53;\n
        v23 = v54;\n
        v24 = v55;\n
    }\n
    v16 = v56;\n
    v15 = a4;\n
    v14 = a3;\n
    v13 = a2;\n
    v43 = a0;\n
    v42 = a1;\n
    v38 = 0;\n
    v37 = 0;\n
    v36 = 0;\n
    v34 = &v12;\n
    v33 = &v45;\n
    v32 = 48;\n
    v31 = 16;\n
    while (*(v42))\n
    {\n
        v57 = v42;\n
        v42 = v57 + 1;\n
        v30 = *(v57);\n
        if (v30 != 37)\n
        {\n
            v25 = v30;\n
            *(v43) = v25;\n
            v43 += 1;\n
            v38 += 1;\n
LABEL_403ec7:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v58 = v42;\n
                    v42 = v58 + 1;\n
                    v30 = *(v58);\n
                    v11 = v30;\n
                    if (v11 != 48)\n
                        break;\n
                    v37 |= 1;\n
                }\n
                if (v11 - 49 >= 9)\n
                    break;\n
                v36 = cgc_strtol(v42 - 1, &v42, 10);\n
            }\n
            v10 = v30;\n
            if (v10 == 37)\n
            {\n
                v29 = 37;\n
                *(v43) = v29;\n
                v43 += 1;\n
                v38 += 1;\n
                goto LABEL_403e80;\n
            }\n
            if (v10 == 88)\n
            {\n
                v37 |= 2;\n
            }\n
            else\n
            {\n
                if (v10 == 100)\n
                {\n
                    v4 = &v31;\n
                    v5 = v31;\n
                    if (v5 <= 40)\n
                    {\n
                        v59 = v4;\n
                        v60 = v5;\n
                        v61 = v60 + v59->field_10;\n
                        *(&v59->field_0) = v60 + 8;\n
                        v3 = v61;\n
                    }\n
                    else\n
                    {\n
                        v62 = v4;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[1];\n
                        v3 = v63;\n
                    }\n
                    v40 = *(v3);\n
                    if (v40 < 0)\n
                    {\n
                        v27 = 45;\n
                        *(v43) = v27;\n
                        v43 += 1;\n
                        v38 += 1;\n
                        v40 = -(v40);\n
                    }\n
                    cgc_output_number_sprintf(&v38, &v43, v40, 10, v36, v37);\n
                    goto LABEL_403e80;\n
                }\n
                if (v10 == 115)\n
                {\n
                    v8 = &v31;\n
                    v9 = v31;\n
                    if (v9 <= 40)\n
                    {\n
                        v64 = v8;\n
                        v65 = v9;\n
                        v66 = v65 + v64->field_10;\n
                        *(&v64->field_0) = v65 + 8;\n
                    }\n
                    else\n
                    {\n
                        v67 = v8;\n
                        v66 = v67->field_8;\n
                        v67->field_8 = v66 + 8;\n
                    }\n
                    v7 = v66;\n
                    v41 = &*(v7)->field_0;\n
                    v39 = 0;\n
                    while (true)\n
                    {\n
                        v6 = v39;\n
                        if (v6 >= cgc_strlen(v41))\n
                            break;\n
                        v28 = v41[v39];\n
                        *(v43) = v28;\n
                        v43 += 1;\n
                        v38 += 1;\n
                        v39 += 1;\n
                    }\n
                    goto LABEL_403e80;\n
                }\n
                if (v10 != 120)\n
                {\n
                    v26 = v30;\n
                    *(v43) = v26;\n
                    v43 += 1;\n
                    v38 += 1;\n
LABEL_403e80:\n
                    v36 = 0;\n
                    v37 = 0;\n
                    goto LABEL_403ec7;\n
                }\n
            }\n
            v1 = &v31;\n
            v2 = v31;\n
            if (v2 <= 40)\n
            {\n
                v68 = v1;\n
                v69 = v2;\n
                v70 = v69 + v68->field_10;\n
                *(&v68->field_0) = v69 + 8;\n
                v0 = v70;\n
            }\n
            else\n
            {\n
                v71 = v1;\n
                v72 = v71->field_8;\n
                v71->field_8 = &v72[1];\n
                v0 = v72;\n
            }\n
            v35 = *(v0);\n
            cgc_output_number_sprintf(&v38, &v43, v35, 16, v36, v37);\n
            goto LABEL_403e80;\n
        }\n
    }\n
    v73 = v43;\n
    v43 = v73 + 1;\n
    *(v73) = 0;\n
    return v38;\n
}\n
", "4210410:sub_403eea": null, "4210416:cgc_realloc": "long long cgc_realloc(unsigned int a0, unsigned int a1)\n
{\n
    unsigned long long *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = cgc_malloc(a1);\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        *(&v1) = cgc_malloc(a1);\n
        if (!*(&v1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = a0 - 24;\n
        if (a1 >= *(v0) - 24)\n
            cgc_memcpy(*(&v1), a0, *(v0) - 24);\n
        else\n
            cgc_memcpy(*(&v1), a0, a1);\n
        cgc_free(a0);\n
        v2 = *(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_free(a0);\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4210641:sub_403fd1": null, "4210656:cgc_strcasecmp": "long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2;  // [bp-0x29]\n
    char *v3;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v3 = a1;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v4))\n
            v2 = *(v3);\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v4) != *(v3))\n
        {\n
            v1 = cgc_tolower(*(v4));\n
            if (v1 != cgc_tolower(*(v3)))\n
                break;\n
        }\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    v0 = cgc_tolower(*(v4));\n
    return v0 - cgc_tolower(*(v3));\n
}\n
", "4210877:sub_4040bd": null, "4210880:cgc_strcat": "long long cgc_strcat(unsigned long long a0, unsigned long long a1)\n
{\n
    cgc_strcpy(a0 + cgc_strlen(a0), a1);\n
    return a0;\n
}\n
", "4210939:sub_4040fb": null, "4210944:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4211059:sub_404173": null, "4211072:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(v1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4211211:sub_40420b": null, "4211216:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    v1 = a1;\n
    for (v0 = 0; *(v1); *((a0 + v4)) = *(v3))\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4211311:sub_40426f": null, "4211312:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v1) = cgc_strlen(a0) + 1;\n
    *(&v0) = cgc_malloc(*(&v1));\n
    if (!*(&v0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_memcpy(*(&v0), a0, *(&v1));\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4211413:sub_4042d5": null, "4211424:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1);\n
    return v0 - a0;\n
}\n
", "4211483:sub_40431b": null, "4211488:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    char v2;  // [bp-0x39]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long long v8;  // rax\n
\n
    v5 = a2;\n
    v4 = a0;\n
    v3 = a1;\n
    v8 = v5;\n
    v5 = v8 - 1;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v5)\n
        {\n
            v2 = 0;\n
            if (*(v4))\n
                v2 = *(v3);\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v4) != *(v3))\n
        {\n
            v1 = cgc_tolower(*(v4));\n
            if (v1 != cgc_tolower(*(v3)))\n
                break;\n
        }\n
        v4 += 1;\n
        v3 += 1;\n
    }\n
    v0 = cgc_tolower(*(v4));\n
    v6 = v0 - cgc_tolower(*(v3));\n
    return v6;\n
}\n
", "4211777:sub_404441": null, "4211792:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    unsigned long v1;  // [bp-0x28]\n
    char *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    v6 = v1;\n
    v1 = v6 - 1;\n
    if (!v6)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        v7 = v1;\n
        v1 = v7 - 1;\n
        v0 = 0;\n
        if (v7)\n
        {\n
            v0 = 0;\n
            if (*(v3))\n
                v0 = *(v2);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v3) != *(v2))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    v4 = *(v3) - *(v2);\n
    return v4;\n
}\n
", "4212013:sub_40452d": null, "4212016:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
        if (!v0[a0])\n
            break;\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4212178:sub_4045d2": null, "4212192:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    if (!*(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v1))\n
            v0 = cgc_strchr(v2, *(v1)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    v2 = &*(a0)->field_0;\n
    if (!*(v1))\n
    {\n
        *(a0) = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        *(a0) = &v1[1];\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4212413:sub_4046bd": null, "4212416:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    char v0[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x48]\n
    char v2;  // [bp-0x47]\n
    char v3;  // [bp-0x46]\n
    char v4;  // [bp-0x45]\n
    unsigned int v5;  // [bp-0x44]\n
    char v6[2];  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x34]\n
    unsigned int v8;  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    unsigned int v12;  // [bp-0x1c], Other Possible Types: unsigned long\n
\n
    v12 = a2;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = a0;\n
    if (v12 == 1)\n
    {\n
LABEL_40470a:\n
    }\n
    else\n
    {\n
        if (!(v12 <= 36))\n
            goto LABEL_40470a;\n
        if (v12 < 0)\n
            goto LABEL_40470a;\n
        while (true)\n
        {\n
            if (*(v6) != 32 && *(v6) != 9 && *(v6) != 12 && *(v6) != 10 && *(v6) != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = v12;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                v12 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_404814:\n
                v6 += 2;\n
                v12 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_404814;\n
                v6 += 1;\n
                v12 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_404895;\n
                    v6 += 2;\n
                    v12 = 16;\n
                }\n
LABEL_404895:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_404a01;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4049be;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4049be:\n
                if (v8 >= v12)\n
                    goto LABEL_404a01;\n
                v10 *= v12;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = v6 + 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4049b5;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4049b5:\n
                v8 += 10;\n
                goto LABEL_4049be;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_40492f;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_40492f:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_404a01:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a1)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = a0;\n
    *(a1) = v0;\n
    return v10;\n
}\n
", "4213331:sub_404a53": null, "4213344:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4213385:sub_404a89": null, "4213392:cgc_run_admin_mode": "extern char g_407120;\n
\n
long long cgc_run_admin_mode(unsigned int *a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x428]\n
    unsigned int v1;  // [bp-0x41c]\n
    char v2;  // [bp-0x418]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    cgc_fdprintf(1, \"1. Add movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"2. Remove movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"3. Update movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"4. Quit admin mode\\n
\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"Choice: \", a2, a3, a4);\n
    if (cgc_readline(0, &v2, 0x400) < 0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v1 = cgc_strtol(&v2, NULL, 10);\n
    v0 = v1 - 1;\n
    switch (v0)\n
    {\n
    case 0:\n
        cgc_add_new_movie();\n
        break;\n
    case 1:\n
        cgc_remove_movie();\n
        break;\n
    case 2:\n
        cgc_update_movie();\n
        break;\n
    case 3:\n
        *(a0) = 2;\n
        break;\n
    default:\n
        if (cgc_memcmp(&v2, &g_407120, 11))\n
            cgc_fdprintf(1, \"[ERROR] Invalid menu. Please select again.\\n
\", 11, a3, a4);\n
        else\n
            *(a0) = 0;\n
        break;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4213755:sub_404bfb": null, "4213760:cgc_add_new_movie": "long long cgc_add_new_movie(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xc2a]\n
    char v1;  // [bp-0xc29]\n
    unsigned int v2;  // [bp-0xc28]\n
    unsigned int v3;  // [bp-0xc24]\n
    void* v4;  // [bp-0xc20], Other Possible Types: unsigned long long\n
    void* v5;  // [bp-0xc18], Other Possible Types: unsigned long\n
    void* v6;  // [bp-0xc10], Other Possible Types: unsigned long\n
    char v7[2];  // [bp-0xc08]\n
    char v8;  // [bp-0x808]\n
    char v9;  // [bp-0x408]\n
    unsigned long v11;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // r9\n
\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 1000;\n
    cgc_fdprintf(1, \"Add a movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"--------------\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"Enter new title: \", a2, a3, a4);\n
    cgc_readline(0, &v9, 0x400);\n
    cgc_fdprintf(1, \"Enter new description: \", 0x400, a3, a4);\n
    v11 = 0x400;\n
    cgc_readline(0, &v8, 0x400);\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v3 >= 1800)\n
            v1 = 2015 < v3;\n
        if (!(v1 & 1))\n
        {\n
            while (true)\n
            {\n
                v0 = 1;\n
                if (v2 >= 0)\n
                    v0 = 100 < v2;\n
                if (!(v0 & 1))\n
                {\n
                    while (true)\n
                    {\n
                        if (((v6 ^ 255) & 1))\n
                        {\n
                            cgc_fdprintf(1, \"Select a genre: \", v11, a3, a4);\n
                            cgc_print_genres(1, \"Select a genre: \", v11, a3, a4, v13);\n
                            cgc_fdprintf(1, \"Choice: \", v11, a3, a4);\n
                            v12 = cgc_readline(0, v7, 0x400);\n
                            if (v12 < 0)\n
                                return v12;\n
                            v11 = 10;\n
                            v4 = cgc_strtol(v7, NULL, 10);\n
                            v6 = cgc_get_genre(v4);\n
                            if (!v6)\n
                                cgc_fdprintf(1, \"Invalid genre. Try again.\\n
\", 10, a3, a4);\n
                        }\n
                        else\n
                        {\n
                            while (true)\n
                            {\n
                                if (((v5 ^ 255) & 1))\n
                                {\n
                                    cgc_fdprintf(1, \"Select a film rating: \", v11, a3, a4);\n
                                    cgc_print_ratings(1, \"Select a film rating: \", v11, a3, a4, v13);\n
                                    cgc_fdprintf(1, \"Choice: \", v11, a3, a4);\n
                                    v12 = cgc_readline(0, v7, 0x400);\n
                                    if (v12 < 0)\n
                                        return v12;\n
                                    v11 = 10;\n
                                    v4 = cgc_strtol(v7, NULL, 10);\n
                                    v5 = cgc_get_rating(v4);\n
                                    if (!v5)\n
                                        cgc_fdprintf(1, \"Invalid film rating. Try again.\\n
\", 10, a3, a4);\n
                                }\n
                                else\n
                                {\n
                                    v12 = cgc_add_movie(&v9, &v8, v3, v2, v6, v5);\n
                                    return v12;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                cgc_fdprintf(1, \"Enter new review score: \", v11, a3, a4);\n
                v12 = cgc_readline(0, v7, 0x400);\n
                if (v12 < 0)\n
                    return v12;\n
                v11 = 10;\n
                v2 = cgc_strtol(v7, NULL, 10);\n
                if (v2 >= 0 && v2 <= 100)\n
                    goto LABEL_404e30;\n
                cgc_fdprintf(1, \"[ERROR] Invalid rating. Try again.\\n
\", 10, a3, a4);\n
LABEL_404e30:\n
            }\n
        }\n
        cgc_fdprintf(1, \"Enter new year: \", v11, a3, a4);\n
        v12 = cgc_readline(0, v7, 0x400);\n
        if (v12 < 0)\n
            return v12;\n
        v11 = 10;\n
        v3 = cgc_strtol(v7, NULL, 10);\n
        if (v3 >= 1800 && v3 <= 2015)\n
            goto LABEL_404d72;\n
        cgc_fdprintf(1, \"[ERROR] Invalid year. Try again.\\n
\", 10, a3, a4);\n
LABEL_404d72:\n
    }\n
}\n
", "4214780:sub_404ffc": null, "4214784:cgc_remove_movie": "long long cgc_remove_movie(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x419]\n
    unsigned long v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x410], Other Possible Types: unsigned long\n
    char v3[2];  // [bp-0x408]\n
    unsigned long long v5;  // r9\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = 0;\n
    v1 = cgc_get_list_length();\n
    cgc_list_owned_movies(a0, a1, a2, a3, a4, v5);\n
    if (!v1)\n
    {\n
        v6 = cgc_fdprintf(1, \"[ERROR] Movie list is empty\\n
\", a2, a3, a4);\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v2)\n
            v0 = !(v2 <= v1);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter movie id: \", 10, a3, a4);\n
        cgc_readline(0, v3, 0x400);\n
        v2 = cgc_strtol(v3, NULL, 10);\n
        if (v2 && v2 <= v1)\n
            goto LABEL_40510d;\n
        cgc_fdprintf(1, \"[ERROR] Invalid movie id. Try again.\\n
\", 10, a3, a4);\n
LABEL_40510d:\n
    }\n
    v6 = cgc_delete_entry(v2);\n
    return v6;\n
}\n
", "4215081:sub_405129": null, "4215088:cgc_update_movie": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned short field_10;\n
    char field_12;\n
    char padding_13[5];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    char field_8;\n
    char padding_9[7];\n
    unsigned short field_10;\n
    char field_12;\n
    char padding_13[5];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_0;\n
\n
long long cgc_update_movie(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xc3b]\n
    char v1;  // [bp-0xc3a]\n
    char v2;  // [bp-0xc39]\n
    unsigned int v3;  // [bp-0xc38]\n
    unsigned int v4;  // [bp-0xc34]\n
    unsigned long v5;  // [bp-0xc30]\n
    void* v6;  // [bp-0xc28], Other Possible Types: unsigned long, unsigned long long\n
    struct_1 *v7;  // [bp-0xc20], Other Possible Types: struct_0 *\n
    void* v8;  // [bp-0xc18], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0xc10], Other Possible Types: unsigned long\n
    char v10;  // [bp-0xc08]\n
    char v11;  // [bp-0x808]\n
    char v12;  // [bp-0x408]\n
    unsigned long long v14;  // r9\n
    unsigned long v15;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rdx, Other Possible Types: unsigned long long\n
\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = cgc_get_list_length();\n
    v4 = 0;\n
    v3 = 1000;\n
    cgc_list_owned_movies(a0, a1, a2, a3, a4, v14);\n
    if (!v5)\n
    {\n
        v15 = cgc_fdprintf(1, \"[ERROR] Nothing to update.\\n
\", a2, a3, a4);\n
        return v15;\n
    }\n
    while (true)\n
    {\n
        v2 = 1;\n
        if (v6 > 0)\n
            v2 = !(v6 <= v5);\n
        if (!(v2 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter movie id: \", 10, a3, a4);\n
        cgc_readline(0, &v10, 0x400);\n
        v6 = cgc_strtol(&v10, NULL, 10);\n
        if (v6 && v6 <= v5)\n
            goto LABEL_405272;\n
        cgc_fdprintf(1, \"[ERROR] Invalid movie id. Try again.\\n
\", 10, a3, a4);\n
LABEL_405272:\n
    }\n
    v7 = cgc_get_entry(v6);\n
    cgc_fdprintf(1, \"Just leave it empty to keep the old value.\\n
\", 10, a3, a4);\n
    cgc_fdprintf(1, \"Enter new title (current: [%s]): \", *(&v7->field_0), a3, a4);\n
    cgc_readline(0, &v12, 0x400);\n
    if (cgc_strlen(&v12))\n
    {\n
        cgc_free(*(&v7->field_0));\n
        a3 = cgc_strdup(&v12);\n
        *(&v7->field_0) = a3;\n
    }\n
    cgc_fdprintf(1, \"Enter new description (current: [%s]): \", *(&v7->field_8), a3, a4);\n
    v16 = 0x400;\n
    cgc_readline(0, &v11, 0x400);\n
    if (cgc_strlen(&v11))\n
    {\n
        cgc_free(*(&v7->field_8));\n
        a3 = cgc_strdup(&v11);\n
        *(&v7->field_8) = a3;\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v4 >= 1800)\n
            v1 = 2015 < v4;\n
        if (!(v1 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter new year (current: [%d]): \", v7->field_10, a3, a4);\n
        v16 = 0x400;\n
        v15 = cgc_readline(0, &v10, 0x400);\n
        if (v15 < 0)\n
            return v15;\n
        if (!cgc_strlen(&v10))\n
            break;\n
        v16 = 10;\n
        v4 = cgc_strtol(&v10, NULL, 10);\n
        if (v4 < 1800)\n
        {\n
LABEL_405456:\n
            cgc_fdprintf(1, \"[ERROR] Invalid year. Try again.\\n
\", 10, a3, a4);\n
            goto LABEL_405482;\n
        }\n
        else\n
        {\n
            if (!(v4 <= 2015))\n
                goto LABEL_405456;\n
            *(&a3) = v4;\n
            v7->field_10 = a3;\n
LABEL_405482:\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v3 >= 0)\n
            v0 = 100 < v3;\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter new review score (current: [%d/100]): \", v7->field_12, a3, a4);\n
        v16 = 0x400;\n
        v15 = cgc_readline(0, &v10, 0x400);\n
        if (v15 < 0)\n
            return v15;\n
        if (!cgc_strlen(&v10))\n
            break;\n
        v16 = 10;\n
        v3 = cgc_strtol(&v10, NULL, 10);\n
        if (v3 < 0)\n
        {\n
LABEL_405553:\n
            cgc_fdprintf(1, \"[ERROR] Invalid rating. Try again.\\n
\", 10, a3, a4);\n
            goto LABEL_40557d;\n
        }\n
        else\n
        {\n
            if (!(v3 <= 100))\n
                goto LABEL_405553;\n
            *(&a3) = v3;\n
            v7->field_12 = *(&a3);\n
LABEL_40557d:\n
        }\n
    }\n
    while (((v9 ^ 255) & 1))\n
    {\n
        cgc_fdprintf(1, \"Select a genre (current: [%s]): \", v7->field_18, a3, a4);\n
        cgc_print_genres(1, \"Select a genre (current: [%s]): \", v16, a3, a4, v14);\n
        cgc_fdprintf(1, \"Choice: \", v16, a3, a4);\n
        v16 = 0x400;\n
        v15 = cgc_readline(0, &v10, 0x400);\n
        if (v15 < 0)\n
            return v15;\n
        if (!cgc_strlen(&v10))\n
            break;\n
        v16 = 10;\n
        v6 = cgc_strtol(&v10, NULL, 10);\n
        *(&v9) = cgc_get_genre(v6);\n
        if (!v9)\n
        {\n
            cgc_fdprintf(1, \"Invalid genre. Try again.\\n
\", 10, a3, a4);\n
        }\n
        else\n
        {\n
            a3 = v9;\n
            v7->field_18 = a3;\n
        }\n
    }\n
    while (((v8 ^ 255) & 1))\n
    {\n
        cgc_fdprintf(1, \"Select a film rating (current: [%s]): \", v7->field_20, a3, a4);\n
        cgc_print_ratings(1, \"Select a film rating (current: [%s]): \", v16, a3, a4, v14);\n
        cgc_fdprintf(1, \"Choice: \", v16, a3, a4);\n
        v16 = 0x400;\n
        v15 = cgc_readline(0, &v10, 0x400);\n
        if (v15 < 0)\n
            return v15;\n
        if (!cgc_strlen(&v10))\n
            break;\n
        v16 = 10;\n
        v6 = cgc_strtol(&v10, NULL, 10);\n
        *(&v8) = cgc_get_rating(v6);\n
        if (!v8)\n
        {\n
            cgc_fdprintf(1, \"Invalid film rating. Try again.\\n
\", 10, a3, a4);\n
        }\n
        else\n
        {\n
            a3 = v8;\n
            v7->field_20 = a3;\n
        }\n
    }\n
    v15 = cgc_fdprintf(1, \"Successfully updated the movie information!\\n
\", v16, a3, a4);\n
    return v15;\n
}\n
", "4216736:cgc_init_movies": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned short field_10;\n
    char field_12;\n
    char padding_13[5];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_0;\n
\n
extern void g_409010;\n
\n
long long cgc_init_movies()\n
{\n
    struct_0 *v0;  // [bp-0x1f8]\n
    unsigned int v1;  // [bp-0x1ec]\n
    char v2;  // [bp-0x1e8]\n
\n
    memcpy(&v2, &g_409010, 480);\n
    for (v1 = 0; v1 < 10; v1 += 1)\n
    {\n
        v0 = &(&v2)[48 * v1];\n
        cgc_add_movie(v0->field_0, v0->field_8, v0->field_10, v0->field_12, v0->field_18, v0->field_20);\n
    }\n
    return v1;\n
}\n
", "4216930:sub_405862": null, "4216944:cgc_rent_movie": "long long cgc_rent_movie(unsigned long a0)\n
{\n
    return cgc_rent_entry(a0);\n
}\n
", "4216969:sub_405889": null, "4216976:cgc_return_movie": "long long cgc_return_movie(unsigned long a0)\n
{\n
    return cgc_return_entry(a0);\n
}\n
", "4217001:sub_4058a9": null, "4217008:cgc_list_all_movies": "long long cgc_list_all_movies()\n
{\n
    return cgc_print_movies(0);\n
}\n
", "4217021:sub_4058bd": null, "4217024:cgc_list_owned_movies": "long long cgc_list_owned_movies()\n
{\n
    return cgc_print_movies(1);\n
}\n
", "4217040:cgc_list_rented_movies": "long long cgc_list_rented_movies()\n
{\n
    return cgc_print_movies(2);\n
}\n
", "4217056:cgc_get_num_owned_movies": "char cgc_get_num_owned_movies()\n
{\n
    return cgc_get_list_length();\n
}\n
", "4217069:sub_4058ed": null, "4217072:cgc_get_num_rented_movies": "char cgc_get_num_rented_movies()\n
{\n
    return cgc_get_num_rented();\n
}\n
", "4217085:sub_4058fd": null, "4217088:cgc_get_genre": "extern unsigned long long g_all_genres;\n
extern unsigned long long g_num_genres;\n
\n
long long cgc_get_genre(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 >= 1 && a0 <= g_num_genres)\n
    {\n
        v0 = (&g_all_genres)[1 + a0];\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4217165:sub_40594d": null, "4217168:cgc_get_rating": "extern unsigned long long g_all_mpaa_ratings;\n
extern unsigned long long g_num_mpaa_ratings;\n
\n
long long cgc_get_rating(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 >= 1 && a0 <= g_num_mpaa_ratings)\n
    {\n
        v0 = (&g_all_mpaa_ratings)[1 + a0];\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4217245:sub_40599d": null, "4217248:cgc_get_list_length": "extern unsigned long long g_list_length;\n
\n
long long cgc_get_list_length()\n
{\n
    return g_list_length;\n
}\n
", "4217261:sub_4059ad": null, "4217264:cgc_get_num_rented": "extern unsigned long long g_num_rented;\n
\n
long long cgc_get_num_rented()\n
{\n
    return g_num_rented;\n
}\n
", "4217277:sub_4059bd": null, "4217280:cgc_add_movie": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned short field_10;\n
    char field_12;\n
    char padding_13[5];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    char field_28;\n
} struct_0;\n
\n
long long cgc_add_movie(unsigned int a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    struct_0 *v0;  // [bp-0x50]\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned long v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = cgc_check_genre(a4);\n
    v1 = cgc_check_rating(a5);\n
    if (v2 && v1)\n
    {\n
        if (a2 >= 1800 && a2 <= 2015)\n
        {\n
            if (a3 >= 0 && a3 <= 100)\n
            {\n
                v0 = cgc_malloc(48);\n
                if (!v0)\n
                {\n
                    v3 = -1;\n
                    return v3;\n
                }\n
                v0->field_0 = cgc_strdup(a0);\n
                v0->field_8 = cgc_strdup(a1);\n
                v0->field_10 = a2;\n
                v0->field_12 = a3;\n
                v0->field_18 = v2;\n
                v0->field_20 = v1;\n
                v0->field_28 = 0;\n
                if (!cgc_add_entry(v0))\n
                {\n
                    v3 = 0;\n
                    return v3;\n
                }\n
                cgc_free(v0);\n
                v3 = -1;\n
                return v3;\n
            }\n
            v3 = -1;\n
            return v3;\n
        }\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4217641:sub_405b29": null, "4217648:cgc_check_genre": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char g_all_genres;\n
extern unsigned long long g_num_genres;\n
\n
long long cgc_check_genre(char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long, unsigned long long [4]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0[0] = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= g_num_genres)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(a0, *(&(&g_all_genres)[8 * v0])))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *(&(&g_all_genres)[8 * v0]);\n
            return v1;\n
        }\n
    }\n
}\n
", "4217790:sub_405bbe": null, "4217792:cgc_check_rating": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char g_all_mpaa_ratings;\n
extern unsigned long long g_num_mpaa_ratings;\n
\n
long long cgc_check_rating(char *a0)\n
{\n
    unsigned long long v0[4];  // [bp-0x20], Other Possible Types: unsigned long, struct_0 *\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0[0] = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= g_num_mpaa_ratings)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(a0, *(&(&g_all_mpaa_ratings)[8 * v0])))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = *(&(&g_all_mpaa_ratings)[8 * v0]);\n
            return v1;\n
        }\n
    }\n
}\n
", "4217934:sub_405c4e": null, "4217936:cgc_add_entry": "extern unsigned int g_cmdb;\n
extern unsigned long long g_list_length;\n
extern unsigned long long g_list_size;\n
\n
long long cgc_add_entry(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rax\n
\n
    if (!g_list_size)\n
    {\n
        *(&g_cmdb) = cgc_malloc(0x300);\n
        if (!*(&g_cmdb))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        g_list_size = 16;\n
    }\n
    else if (g_list_size == g_list_length)\n
    {\n
        *(&v0) = *(&g_cmdb);\n
        *(&g_cmdb) = cgc_malloc(g_list_size * 96);\n
        if (!*(&g_cmdb))\n
        {\n
            *(&g_cmdb) = *(&v0);\n
            v1 = -1;\n
            return v1;\n
        }\n
        cgc_memcpy(*(&g_cmdb), *(&v0), g_list_size * 48);\n
        g_list_size = g_list_size * 2;\n
        cgc_free(*(&v0));\n
    }\n
    v3 = g_list_length;\n
    g_list_length = g_list_length + 1;\n
    cgc_memcpy(*(&g_cmdb) + v3 * 48, a0, 48);\n
    v1 = 0;\n
    return v1;\n
}\n
", "4218234:sub_405d7a": null, "4218240:cgc_delete_entry": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
\n
long long cgc_delete_entry(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    if (!g_list_length)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    if (v0 >= 1 && v0 <= g_list_length)\n
    {\n
        v0 -= 1;\n
        cgc_free(*((g_cmdb + v0 * 48)));\n
        cgc_free(*((g_cmdb + v0 * 48 + 8)));\n
        if (v0 + 1 < g_list_length)\n
            cgc_memcpy(g_cmdb + v0 * 48, g_cmdb + (v0 + 1) * 48, (g_list_length - (v0 + 1)) * 48);\n
        g_list_length = g_list_length - 1;\n
        cgc_fdprintf(1, \"Successfully removed the movie!\\n
\", a2, a3, a4);\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4218520:sub_405e98": null, "4218528:cgc_rent_entry": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
extern unsigned long long g_num_rented;\n
\n
long long cgc_rent_entry(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long *v3;  // rcx\n
    unsigned long long *v4;  // rcx\n
\n
    v0 = a0;\n
    if (v0 >= 1 && v0 <= g_list_length)\n
    {\n
        v0 -= 1;\n
        if (!*((g_cmdb + v0 * 48 + 40)))\n
        {\n
            *((g_cmdb + v0 * 48 + 40)) = 1;\n
            g_num_rented = g_num_rented + 1;\n
            v4 = v0 * 48;\n
            cgc_fdprintf(1, \"Successfully rented [%s]! Enjoy!\\n
\", *((g_cmdb + v4)), v4, a4);\n
            v1 = 0;\n
            return v1;\n
        }\n
        v3 = v0 * 48;\n
        cgc_fdprintf(1, \"Sorry, [%s] is already rented at this time. Please try again later.\\n
\", *((g_cmdb + v3)), v3, a4);\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4218763:sub_405f8b": null, "4218768:cgc_return_entry": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
extern unsigned long long g_num_rented;\n
\n
long long cgc_return_entry(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long *v4;  // rcx\n
\n
    if (a0 >= 1 && a0 <= g_num_rented)\n
    {\n
        v1 = 0;\n
        v0 = 0;\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= g_list_length)\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
            if (*((g_cmdb + v1 * 48 + 40)))\n
            {\n
                v0 += 1;\n
                if (v0 == a0)\n
                {\n
                    *((g_cmdb + v1 * 48 + 40)) = 0;\n
                    g_num_rented = g_num_rented - 1;\n
                    v4 = v1 * 48;\n
                    cgc_fdprintf(1, \"Successfully returned [%s]! Thank you!\\n
\", *((g_cmdb + v4)), v4, a4);\n
                    v2 = 0;\n
                    return v2;\n
                }\n
            }\n
            v1 += 1;\n
        }\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4219042:sub_4060a2": null, "4219056:cgc_find_entry": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
\n
long long cgc_find_entry(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= g_list_length)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(*((g_cmdb + v0 * 48)), a0))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = g_cmdb + v0 * 48;\n
            return v1;\n
        }\n
    }\n
}\n
", "4219195:sub_40613b": null, "4219200:cgc_get_entry": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
\n
long long cgc_get_entry(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (v0 >= 1 && v0 <= g_list_length)\n
    {\n
        v0 -= 1;\n
        v1 = g_cmdb + v0 * 48;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4219283:sub_406193": null, "4219296:cgc_print_entry": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned short field_10;\n
    char field_12;\n
    char padding_13[13];\n
    unsigned int field_20;\n
} struct_0;\n
\n
long long cgc_print_entry(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned long long v2;  // rcx\n
    unsigned int v3;  // r8\n
\n
    v0 = a0->field_12;\n
    cgc_fdprintf(1, \"%s (%d, %s) - %s [%d/100]\\n
\", a0->field_0, a0->field_10, *(&a0->field_20));\n
    return cgc_fdprintf(1, \"  => %s\\n
\", a0->field_8, v2, v3);\n
}\n
", "4219402:sub_40620a": null, "4219408:cgc_print_movies": "extern unsigned long long g_cmdb;\n
extern unsigned long long g_list_length;\n
extern unsigned long long g_num_rented;\n
\n
long long cgc_print_movies(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // rcx\n
\n
    if (a0 && !(a0 == 1))\n
        goto LABEL_4062d8;\n
    cgc_fdprintf(1, \"\\n
Movies (Full)\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"--------------\\n
\", a2, a3, a4);\n
    for (v2 = 0; v2 < g_list_length; v2 += 1)\n
    {\n
        cgc_fdprintf(1, \"[%d] \", v2 + 1, a3, a4);\n
        cgc_print_entry(g_cmdb + v2 * 48);\n
    }\n
    cgc_fdprintf(1, \"--------------\\n
\", a2, a3, a4);\n
    v4 = cgc_fdprintf(1, \"%d movie(s)\\n
\", g_list_length, a3, a4);\n
LABEL_4062d8:\n
    if (a0 && a0 != 2)\n
        return v4;\n
    v1 = 0;\n
    cgc_fdprintf(1, \"\\n
Movies (Rented)\\n
\", g_list_length, a3, a4);\n
    cgc_fdprintf(1, \"--------------\\n
\", g_list_length, a3, a4);\n
    v2 = 0;\n
    while (true)\n
    {\n
        v5 = v2;\n
        v0 = 0;\n
        if (v5 < g_list_length)\n
            v0 = g_num_rented;\n
        if (!(v0 & 1))\n
            break;\n
        v6 = v2 * 48;\n
        if (*((g_cmdb + v6 + 40)))\n
        {\n
            v1 += 1;\n
            cgc_fdprintf(1, \"[%d] \", v1, v6, a4);\n
            cgc_print_entry(g_cmdb + v2 * 48);\n
        }\n
        v2 += 1;\n
    }\n
    cgc_fdprintf(1, \"--------------\\n
\", a2, v5, a4);\n
    v4 = cgc_fdprintf(1, \"%d movie(s)\\n
\", g_num_rented, v5, a4);\n
    return v4;\n
}\n
", "4219881:sub_4063e9": null, "4219888:cgc_print_genres": "extern char g_all_genres;\n
extern unsigned long long g_num_genres;\n
\n
long long cgc_print_genres(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char **v2;  // rcx\n
\n
    for (v0 = 0; v0 < g_num_genres; v0 += 1)\n
    {\n
        cgc_fdprintf(1, \"\\n
 %d. \", v0 + 1, v0, a4);\n
        v2 = v0;\n
        cgc_fdprintf(1, *((&g_all_genres + 0x8 * v2)), a2, v2, a4);\n
    }\n
    return cgc_fdprintf(1, \"\\n
\", a2, v0, a4);\n
}\n
", "4220011:sub_40646b": null, "4220016:cgc_print_ratings": "extern unsigned long long g_all_mpaa_ratings;\n
extern unsigned long long g_num_mpaa_ratings;\n
\n
long long cgc_print_ratings(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    for (v0 = 0; v0 < g_num_mpaa_ratings; v0 += 1)\n
    {\n
        cgc_fdprintf(1, \"\\n
 %d. %s\", v0 + 1, (&g_all_mpaa_ratings)[v0], a4);\n
    }\n
    return cgc_fdprintf(1, \"\\n
\", v0 + 1, (&g_all_mpaa_ratings)[v0], a4);\n
}\n
", "4220127:sub_4064df": null, "4220128:cgc_dag": "extern char g_all_genres;\n
extern struct_0 *g_num_genres;\n
\n
long long cgc_dag(unsigned int a0)\n
{\n
    unsigned long long *v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return &g_all_genres;\n
    }\n
    else if (g_num_genres >= 10)\n
    {\n
        return &g_all_genres;\n
    }\n
    else\n
    {\n
        v1 = g_num_genres;\n
        g_num_genres = &g_num_genres->field_0 + 1;\n
        *((&g_all_genres + 0x8 * v1)) = cgc_strdup(a0);\n
        return &g_all_genres;\n
    }\n
}\n
", "4220220:sub_40653c": null, "4220224:cgc_dar": "extern char g_all_mpaa_ratings;\n
extern struct_0 *g_num_mpaa_ratings;\n
\n
long long cgc_dar(unsigned int a0)\n
{\n
    unsigned long long *v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return &g_all_mpaa_ratings;\n
    }\n
    else if (g_num_mpaa_ratings >= 10)\n
    {\n
        return &g_all_mpaa_ratings;\n
    }\n
    else\n
    {\n
        v1 = g_num_mpaa_ratings;\n
        g_num_mpaa_ratings = &g_num_mpaa_ratings->field_0 + 1;\n
        *((&g_all_mpaa_ratings + 0x8 * v1)) = cgc_strdup(a0);\n
        return &g_all_mpaa_ratings;\n
    }\n
}\n
", "4220316:sub_40659c": null, "4220320:cgc_run_debug_mode": "long long cgc_run_debug_mode(unsigned int *a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x224]\n
    unsigned int v1;  // [bp-0x220]\n
    unsigned int v2;  // [bp-0x21c]\n
    char v3;  // [bp-0x218]\n
    char v4;  // [bp-0x214]\n
    unsigned long long v6;  // rdx\n
\n
    v2 = 0;\n
    v0 = 0;\n
    cgc_fdprintf(1, \"##: \", a2, a3, a4);\n
    v6 = 0x200;\n
    cgc_readline(v0, &v3, 0x200);\n
    v2 = __buildin_bswap32(*(&v3));\n
    v1 = v2;\n
    if (v1 == 388502)\n
    {\n
        cgc_dar(&v4);\n
        return 0;\n
    }\n
    else if (v1 == 1294579383)\n
    {\n
        cgc_dag(&v4);\n
        return 0;\n
    }\n
    else\n
    {\n
        *(a0) = 1;\n
        return 0;\n
    }\n
}\n
", "4220520:sub_406668": null, "4220528:main": "int main(unsigned long a0, unsigned int a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v4 = 0;\n
    v3 = a0;\n
    *(&v2) = a1;\n
    v1 = 0;\n
    v0 = 2;\n
    cgc_init_movies();\n
    cgc_fdprintf(1, \"========= Movie Rental Service v0.1 =========\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"   . . . Initializing the inventory . . .\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"         (movie info from IMDb.com)\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"=============================================\\n
\", a2, a3, a4);\n
    while (((v1 ^ 255) & 1))\n
    {\n
        if (v0 == 2)\n
        {\n
            v1 = cgc_run_user_mode(&v0);\n
        }\n
        else if (v0 != 1)\n
        {\n
            if (!v0)\n
                cgc_run_debug_mode(&v0, a1, a2, a3, a4);\n
        }\n
        else\n
        {\n
            if (cgc_run_admin_mode(&v0, a1, a2, a3, a4) < 0)\n
                v1 = 1;\n
        }\n
        if (!v1)\n
            cgc_fdprintf(1, \"\\n
\", a2, a3, a4);\n
    }\n
    cgc_fdprintf(1, \"Bye!\\n
\", a2, a3, a4);\n
    return v4;\n
}\n
", "4220827:sub_40679b": null, "4220832:cgc_readline": "long long cgc_readline(unsigned long long a0, unsigned long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a2)\n
        {\n
            *((a1 + v1 - 1)) = 0;\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (cgc_receive(a0, a1, a2, v5))\n
            break;\n
        if (!*(&v0))\n
            break;\n
        if (*((a1 + v1)) == 10)\n
        {\n
            *((a1 + v1)) = 0;\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 += 1;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4221029:sub_406865": null, "4221040:cgc_run_user_mode": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long admin_password;\n
\n
long long cgc_run_user_mode(unsigned int *a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x440]\n
    char v1;  // [bp-0x439]\n
    struct_0 *v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0x42c]\n
    unsigned long long v4;  // [bp-0x428]\n
    unsigned int v5;  // [bp-0x41c]\n
    char v6;  // [bp-0x418]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    if (!admin_password)\n
        admin_password = cgc_random_password();\n
    v3 = 0;\n
    v1 = 0;\n
    v0 = 1;\n
    cgc_fdprintf(1, \"1. List movies\\n
\", a2, a3, a4);\n
    cgc_fdprintf(v0, \"2. Rent movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(v0, \"3. Return movie\\n
\", a2, a3, a4);\n
    cgc_fdprintf(v0, \"4. Admin mode\\n
\", a2, a3, a4);\n
    cgc_fdprintf(v0, \"5. Exit\\n
\\n
\", a2, a3, a4);\n
    cgc_fdprintf(v0, \"Choice: \", a2, a3, a4);\n
    v2 = &v6;\n
    cgc_readline(v3, &v6, 0x400);\n
    v5 = cgc_strtol(v2, v3, 10);\n
    v4 = v5 - 1;\n
    switch (v4)\n
    {\n
    case 0:\n
        cgc_list_movies();\n
        break;\n
    case 1:\n
        cgc_user_rent_movie();\n
        break;\n
    case 2:\n
        cgc_user_return_movie();\n
        break;\n
    case 3:\n
        if (!cgc_admin_login())\n
            *(a0) = 1;\n
        break;\n
    case 4:\n
        v7 = 1;\n
        return v7;\n
    default:\n
        cgc_fdprintf(1, \"[ERROR] Invalid menu. Please select again.\\n
\", 10, v4, a4);\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4221458:sub_406a12": null, "4221472:cgc_random_password": "extern struct_0 *admin_username;\n
\n
long long cgc_random_password()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1[8];  // [bp-0x18]\n
    char v2[8];  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v1[0]) = cgc_malloc(8);\n
    if (!v1)\n
    {\n
        *(&v1[0]) = admin_username;\n
        *(&v2[0]) = v1;\n
        return v2;\n
    }\n
    v1[7] = 0;\n
    v0 = 0;\n
    for (v0 = 0; v0 < 7; v0 += 1)\n
    {\n
        if (!(0 CONCAT cgc_rng()) /m 5 >> 32)\n
        {\n
            v1[v0] = ((0 CONCAT cgc_rng()) /m 17 >> 32) + 48;\n
        }\n
        else if (!(cgc_rng() & 1))\n
        {\n
            v1[v0] = ((0 CONCAT cgc_rng()) /m 26 >> 32) + 97;\n
        }\n
        else\n
        {\n
            v1[v0] = ((0 CONCAT cgc_rng()) /m 26 >> 32) + 65;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4221732:sub_406b24": null, "4221744:cgc_rng": "extern unsigned int a;\n
extern unsigned int b;\n
extern unsigned int c;\n
extern unsigned int d;\n
\n
long long cgc_rng()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a ^ a * 128;\n
    a = b;\n
    b = c;\n
    c = d;\n
    d = d ^ (d >> 8) ^ v0 ^ (v0 >> 19);\n
    return d;\n
}\n
", "4221842:sub_406b92": null, "4221856:cgc_list_movies": "char cgc_list_movies()\n
{\n
    return cgc_list_all_movies();\n
}\n
", "4221869:sub_406bad": null, "4221872:cgc_user_rent_movie": "long long cgc_user_rent_movie(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x419]\n
    char v1[2];  // [bp-0x418]\n
    unsigned long v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = 0;\n
    v2 = cgc_get_num_owned_movies();\n
    cgc_list_owned_movies();\n
    if (!v2)\n
    {\n
        v5 = cgc_fdprintf(1, \"[ERROR] Movie list is empty. Please try again later.\\n
\", a2, a3, a4);\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v3)\n
            v0 = !(v3 <= v2);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter movie id: \", 10, a3, a4);\n
        cgc_readline(0, v1, 0x400);\n
        v3 = cgc_strtol(v1, NULL, 10);\n
        if (v3 && v3 <= v2)\n
            goto LABEL_406ca1;\n
        cgc_fdprintf(1, \"[ERROR] Invalid movie id. Try again.\\n
\", 10, a3, a4);\n
LABEL_406ca1:\n
    }\n
    v5 = cgc_rent_movie(v3);\n
    return v5;\n
}\n
", "4222138:sub_406cba": null, "4222144:cgc_user_return_movie": "long long cgc_user_return_movie(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x419]\n
    char v1[2];  // [bp-0x418]\n
    unsigned long v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = 0;\n
    v2 = cgc_get_num_rented_movies();\n
    cgc_list_rented_movies();\n
    if (!v2)\n
    {\n
        v5 = cgc_fdprintf(1, \"[ERROR] All the movies are in our inventory.\\n
\", a2, a3, a4);\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        v0 = 1;\n
        if (v3)\n
            v0 = !(v3 <= v2);\n
        if (!(v0 & 1))\n
            break;\n
        cgc_fdprintf(1, \"Enter movie id: \", 10, a3, a4);\n
        cgc_readline(0, v1, 0x400);\n
        v3 = cgc_strtol(v1, NULL, 10);\n
        if (v3 && v3 <= v2)\n
            goto LABEL_406db1;\n
        cgc_fdprintf(1, \"[ERROR] Invalid movie id. Try again.\\n
\", 10, a3, a4);\n
LABEL_406db1:\n
    }\n
    v5 = cgc_return_movie(v3);\n
    return v5;\n
}\n
", "4222410:sub_406dca": null, "4222416:cgc_admin_login": "extern char *admin_password;\n
extern char *admin_username;\n
\n
long long cgc_admin_login(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x418]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    cgc_fdprintf(1, \"username: \", a2, a3, a4);\n
    cgc_readline(0, &v0, 0x400);\n
    if (cgc_strcmp(&v0, admin_username))\n
    {\n
        cgc_fdprintf(1, \"[ERROR] Permission Denied: Wrong credentials\\n
\", 0x400, a3, a4);\n
        v1 = -1;\n
        return v1;\n
    }\n
    cgc_fdprintf(1, \"password: \", 0x400, a3, a4);\n
    cgc_readline(0, &v0, 0x400);\n
    if (!cgc_strcmp(&v0, admin_password))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_fdprintf(1, \"[ERROR] Permission Denied: Wrong credentials\\n
\", 0x400, a3, a4);\n
    v1 = -1;\n
    return v1;\n
}\n
", "4222640:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_allocate": null, "5242904:memcpy": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}