{"4206592:_init": "extern struct_0 *g_416ae0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_416ae0;\n
    if (g_416ae0)\n
        v1 = g_416ae0();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_416b00;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_416b00;\n
    goto *(4287240);\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206656:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4206672:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206720:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4287216);\n
}\n
", "4206736:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206773:sub_4030b5": null, "4206774:sub_4030b6": null, "4206784:deregister_tm_clones": "extern char __TMC_END__;\n
extern unsigned long long g_416ad8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__TMC_END__;\n
}\n
", "4206825:sub_4030e9": null, "4206832:register_tm_clones": "extern unsigned long long g_416ae8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206889:sub_403129": null, "4206896:__do_global_dtors_aux": "extern char __TMC_END__;\n
extern unsigned long long g_416af0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__TMC_END__)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_416af0)\n
    {\n
        __TMC_END__ = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4206949:sub_403165": null, "4206953:sub_403169": null, "4206960:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4206969:sub_403179": null, "4206976:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4207029:sub_4031b5": null, "4207040:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26 | a0 - 48 < 10;\n
}\n
", "4207067:sub_4031db": null, "4207072:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return a0 - 65 < 26 | a0 - 97 < 26;\n
}\n
", "4207096:sub_4031f8": null, "4207104:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4207116:sub_40320c": null, "4207120:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4207132:sub_40321c": null, "4207136:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4207148:sub_40322c": null, "4207152:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4207164:sub_40323c": null, "4207168:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4207186:sub_403252": null, "4207200:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4207218:sub_403272": null, "4207232:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4207250:sub_403292": null, "4207264:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4207282:sub_4032b2": null, "4207296:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4263952];\n
    char field_411010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4207311:sub_4032cf": null, "4207312:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4207333:sub_4032e5": null, "4207344:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4264080];\n
    char field_411090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4207359:sub_4032ff": null, "4207360:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4207366:sub_403306": null, "4207376:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4207391:sub_40331f": null, "4207392:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4207407:sub_40332f": null, "4207408:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4207466:sub_40336a": null, "4207472:cgc_malloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern struct_2 *g_416d98;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    struct_0 *v7;  // rax\n
    unsigned long long *v9;  // r15\n
    struct struct_2 **v10;  // rax, Other Possible Types: unsigned long\n
    struct_2 *v11;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v15;  // rdi\n
    unsigned long long v16;  // rax\n
    struct_2 *v17;  // r14\n
    unsigned long v18;  // rcx\n
    unsigned long long v19;  // rdi\n
    struct_1 *v20;  // rax\n
\n
    if (!a0)\n
    {\n
LABEL_403455:\n
        return 0;\n
    }\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v3, v4))\n
            return 0;\n
        v7 = *(&v0);\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v6 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v6 = a0;\n
    if (!(v6 <= 2147483647))\n
        goto LABEL_403455;\n
    v9 = v6 + 24;\n
    v10 = cgc_get_size_class(v9);\n
    if (v10 <= 31)\n
    {\n
        v11 = *((&cgc_free_lists + 0x8 * v10));\n
        if (!v11)\n
            goto LABEL_403412;\n
        else\n
            goto LABEL_0x403430;\n
    }\n
    else\n
    {\n
        if (!cgc_allocate(v9, rsi<8>, rdx<8>))\n
        {\n
            v15 = *(&v0);\n
            if (v15)\n
            {\n
                v15->field_0 = 0x40000;\n
                v15->field_8 = 1;\n
                v15->field_10 = 0;\n
                v15->field_20 = 0;\n
                cgc_insert_into_flist(v15);\n
                v11 = g_416d98;\n
                cgc_remove_from_flist(v11);\n
                v16 = *(v11) - v9;\n
                v17 = v11 * 0x100000000;\n
                if (v16 < 49)\n
                    return &v17[2576980377].padding_18 >> 32;\n
                v18 = v17 >> 32;\n
                v19 = v18 + v9;\n
                *((v18 + v9)) = v16;\n
                *((8 + v18 + v9)) = 1;\n
                *((16 + v18 + v9)) = 0;\n
                *(v11) = v9;\n
                *((40 + v18 + v9)) = v11;\n
                *((32 + v18 + v9)) = *((v11 + 32));\n
                v20 = *((v11 + 32));\n
                if (v20)\n
                    v20->field_28 = v19;\n
                *((v11 + 32)) = v19;\n
                cgc_insert_into_flist(v19);\n
            }\n
        }\n
        goto LABEL_403455;\n
    }\n
    while (true)\n
    {\n
        while (true)\n
        {\n
LABEL_403412:\n
            v10 += 1;\n
            if (v10 == 32)\n
                break;\n
            v11 = *(&(&cgc_free_lists)[8 * v10]);\n
        }\n
        while (*(v11) < v9)\n
        {\n
            v11 = *((v11 + 16));\n
            if (!v11)\n
                goto LABEL_403412;\n
        }\n
    }\n
}\n
", "4207892:sub_403514": null, "4207904:cgc_get_size_class": "extern unsigned long long g_416b58;\n
extern unsigned long long g_416b60;\n
extern unsigned long long g_416b68;\n
extern unsigned long long g_416b70;\n
extern unsigned long long g_416b78;\n
extern unsigned long long g_416b80;\n
extern unsigned long long g_416b88;\n
extern unsigned long long g_416b90;\n
extern unsigned long long g_416b98;\n
extern unsigned long long g_416ba0;\n
extern unsigned long long g_416ba8;\n
extern unsigned long long g_416bb0;\n
extern unsigned long long g_416bb8;\n
extern unsigned long long g_416bc0;\n
extern unsigned long long g_416bc8;\n
extern unsigned long long g_416bd0;\n
extern unsigned long long g_416bd8;\n
extern unsigned long long g_416be0;\n
extern unsigned long long g_416be8;\n
extern unsigned long long g_416bf0;\n
extern unsigned long long g_416bf8;\n
extern unsigned long long g_416c00;\n
extern unsigned long long g_416c08;\n
extern unsigned long long g_416c10;\n
extern unsigned long long g_416c18;\n
extern unsigned long long g_416c20;\n
extern unsigned long long g_416c28;\n
extern unsigned long long g_416c30;\n
extern unsigned long long g_416c38;\n
extern unsigned long long g_416c40;\n
extern unsigned long long g_416c48;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_416b58 < a0)\n
    {\n
        v1 = 2;\n
        if (g_416b60 < a0)\n
        {\n
            v1 = 3;\n
            if (g_416b68 < a0)\n
            {\n
                v1 = 4;\n
                if (g_416b70 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_416b78 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_416b80 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_416b88 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_416b90 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_416b98 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_416ba0 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_416ba8 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_416bb0 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_416bb8 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_416bc0 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_416bc8 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_416bd0 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_416bd8 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_416be0 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_416be8 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_416bf0 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_416bf8 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_416c00 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_416c08 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_416c10 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_416c18 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_416c20 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_416c28 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_416c30 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_416c38 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_416c40 < a0)\n
                                                                                                                            v1 = 31 + (g_416c48 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4208439:sub_403737": null, "4208448:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    struct struct_0 **v1;  // rax\n
    struct_0 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4208517:sub_403785": null, "4208528:cgc_remove_from_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_1 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_0 *v2;  // rcx\n
    struct_3 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4208605:sub_4037dd": null, "4208608:cgc_coalesce": "extern char cgc_free_lists;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rdx\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rdx\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdx\n
    unsigned long v25;  // r12\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rbx\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rbx\n
    unsigned long v32;  // r12\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // r12\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rax\n
    unsigned long v42;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rax\n
    unsigned long v45;  // rcx\n
\n
    v0 = v2;\n
    v3 = *((a0 + 40));\n
    if (!v3)\n
        return v2;\n
    v13 = *((a0 + 32));\n
    if (!*((v3 + 8)))\n
    {\n
        if (!v13)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v13 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v5 = cgc_get_size_class(*(v13));\n
            v7 = *((v13 + 24));\n
            if (v7)\n
                *((v7 + 16)) = *((v13 + 16));\n
            v11 = *((v13 + 16));\n
            if (v11)\n
                *((v11 + 24)) = v7;\n
            if ((&cgc_free_lists)[v5] == v13)\n
                (&cgc_free_lists)[v5] = v11;\n
            *((v13 + 16)) = 0;\n
            *((v13 + 8)) = 0;\n
            v15 = *(a0);\n
            v16 = cgc_get_size_class(v15);\n
            v18 = *((a0 + 24));\n
            if (v18)\n
                *((v18 + 16)) = *((a0 + 16));\n
            v23 = *((a0 + 16));\n
            if (v23)\n
                *((v23 + 24)) = v18;\n
            if ((&cgc_free_lists)[v16] == a0)\n
                (&cgc_free_lists)[v16] = v23;\n
            *((a0 + 16)) = 0;\n
            *((a0 + 8)) = 0;\n
            v27 = v15 + *(*((a0 + 32)));\n
            *(a0) = v27;\n
            v28 = cgc_get_size_class(v27);\n
            *((a0 + 8)) = 1;\n
            v30 = (&cgc_free_lists)[v28];\n
            if (v30)\n
            {\n
                *((a0 + 16)) = v30;\n
                *(((&cgc_free_lists)[v28] + 24)) = a0;\n
                (&cgc_free_lists)[v28] = a0;\n
                *((a0 + 24)) = 0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_403b76;\n
            }\n
            else\n
            {\n
                (&cgc_free_lists)[v28] = a0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_403b76;\n
            }\n
            *((v2 + 32)) = *((v34 + 32));\n
LABEL_403b76:\n
            v37 = *((v34 + 32));\n
            if (!v37)\n
                return v2;\n
        }\n
LABEL_403b7f:\n
        *((v37 + 40)) = v2;\n
        return v2;\n
    }\n
    if (v13 && *((v13 + 8)))\n
    {\n
        v4 = cgc_get_size_class(*(v3));\n
        v6 = *((v3 + 24));\n
        if (v6)\n
            *((v6 + 16)) = *((v3 + 16));\n
        v9 = *((v3 + 16));\n
        if (v9)\n
            *((v9 + 24)) = v6;\n
        if ((&cgc_free_lists)[v4] == v3)\n
        {\n
            (&cgc_free_lists)[v4] = v9;\n
            v13 = *((a0 + 32));\n
        }\n
        *((v3 + 16)) = 0;\n
        *((v3 + 8)) = 0;\n
        v14 = cgc_get_size_class(*(v13));\n
        v17 = *((v13 + 24));\n
        if (v17)\n
            *((v17 + 16)) = *((v13 + 16));\n
        v21 = *((v13 + 16));\n
        if (v21)\n
            *((v21 + 24)) = v17;\n
        if ((&cgc_free_lists)[v14] == v13)\n
            (&cgc_free_lists)[v14] = v21;\n
        *((v13 + 16)) = 0;\n
        *((v13 + 8)) = 0;\n
        v25 = *(a0);\n
        v26 = cgc_get_size_class(v25);\n
        v29 = *((a0 + 24));\n
        if (v29)\n
            *((v29 + 16)) = *((a0 + 16));\n
        v35 = *((a0 + 16));\n
        if (v35)\n
            *((v35 + 24)) = v29;\n
        if ((&cgc_free_lists)[v26] == a0)\n
            (&cgc_free_lists)[v26] = v35;\n
        *((a0 + 16)) = 0;\n
        *((a0 + 8)) = 0;\n
        v38 = *((a0 + 40));\n
        v39 = v25 + *(v38);\n
        *(v38) = v39;\n
        v40 = v39 + *(*((a0 + 32)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 8)) = 1;\n
        v42 = (&cgc_free_lists)[v41];\n
        if (v42)\n
        {\n
            *((v38 + 16)) = v42;\n
            *(((&cgc_free_lists)[v41] + 24)) = v38;\n
            (&cgc_free_lists)[v41] = v38;\n
            *((v38 + 24)) = 0;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_403952;\n
        }\n
        else\n
        {\n
            (&cgc_free_lists)[v41] = v38;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_403952;\n
        }\n
        *((v44 + 32)) = *((v43 + 32));\n
LABEL_403952:\n
        v45 = *((v43 + 32));\n
        if (v45)\n
        {\n
            *((v45 + 40)) = v44;\n
            v2 = *((a0 + 40));\n
            if (!v2)\n
                goto LABEL_403a69;\n
            goto LABEL_403a61;\n
        }\n
    }\n
    v2 = *((a0 + 32));\n
    if (!v2)\n
        return *((a0 + 32));\n
    if (*((v2 + 8)))\n
        return *((a0 + 32));\n
    v8 = cgc_get_size_class(*(v3));\n
    v10 = *((v3 + 24));\n
    if (v10)\n
        *((v10 + 16)) = *((v3 + 16));\n
    v12 = *((v3 + 16));\n
    if (v12)\n
        *((v12 + 24)) = v10;\n
    if ((&cgc_free_lists)[v8] == v3)\n
        (&cgc_free_lists)[v8] = v12;\n
    *((v3 + 16)) = 0;\n
    *((v3 + 8)) = 0;\n
    v19 = *(a0);\n
    v20 = cgc_get_size_class(v19);\n
    v22 = *((a0 + 24));\n
    if (v22)\n
        *((v22 + 16)) = *((a0 + 16));\n
    v24 = *((a0 + 16));\n
    if (v24)\n
        *((v24 + 24)) = v22;\n
    if ((&cgc_free_lists)[v20] == a0)\n
        (&cgc_free_lists)[v20] = v24;\n
    *((a0 + 16)) = 0;\n
    *((a0 + 8)) = 0;\n
    v31 = *((a0 + 40));\n
    v32 = v19 + *(v31);\n
    *(v31) = v32;\n
    v33 = cgc_get_size_class(v32);\n
    *((v31 + 8)) = 1;\n
    v36 = (&cgc_free_lists)[v33];\n
    if (v36)\n
    {\n
        *((v31 + 16)) = v36;\n
        *(((&cgc_free_lists)[v33] + 24)) = v31;\n
        (&cgc_free_lists)[v33] = v31;\n
        *((v31 + 24)) = 0;\n
    }\n
    else\n
    {\n
        (&cgc_free_lists)[v33] = v31;\n
        v2 = *((a0 + 40));\n
        if (!v2)\n
            goto LABEL_403a69;\n
LABEL_403a61:\n
        *((v2 + 32)) = *((a0 + 32));\n
LABEL_403a69:\n
        v37 = *((a0 + 32));\n
        if (!v37)\n
            return v2;\n
        goto LABEL_403b7f;\n
    }\n
    v2 = *((a0 + 40));\n
    if (!v2)\n
        goto LABEL_403a69;\n
    goto LABEL_403a61;\n
}\n
", "4209618:sub_403bd2": null, "4209632:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4209674:sub_403c0a": null, "4209680:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4209726:sub_403c3e": null, "4209728:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_403cd4:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_403c67;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_403c67:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_403cd4;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_403c67;\n
}\n
", "4210159:sub_403def": null, "4210160:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403f3f:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_403e29;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_403e29:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403f3f;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_403e29;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_403ec7:\n
            v38 = a2;\n
            goto LABEL_403eca;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_403ec7;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_403ec7;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_403eca:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4211095:sub_404197": null, "4211104:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_404319;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_404319:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_404319;\n
}\n
", "4211502:sub_40432e": null, "4211504:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned long v3;  // r12, Other Possible Types: unsigned long long\n
    void* v4;  // r14, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v5;  // rbp, Other Possible Types: unsigned long long\n
    char v6;  // al\n
    char v7;  // cl\n
\n
    v3 = a1;\n
    v4 = 0;\n
    v1 = a4;\n
    if (a1 >= a2)\n
    {\n
        a3 -= 1;\n
        v3 = (0 CONCAT a1) /m a2 >> 32;\n
        v4 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
    }\n
    if (a3 > 0 && !v4)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            if ((v1 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
        }\n
    }\n
    v6 = (!(v1 & 2) ? v3 + 55 : v3 + 87);\n
    v7 = v3 + 48;\n
    if (10 <= v3)\n
        v7 = v6;\n
    v0 = v7;\n
    cgc_transmit();\n
    return v4 + 1;\n
}\n
", "4211755:sub_40442b": null, "4211760:cgc_fdprintf": "extern char g_411110;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    unsigned long long v31;  // r12, Other Possible Types: unsigned long\n
    char *v32;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v33;  // rbx\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v35;  // edx\n
    unsigned long long v36;  // r12\n
    unsigned long long v37;  // rcx\n
    unsigned long v38;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v39;  // rcx\n
    unsigned long long v40;  // rcx\n
    struct struct_0 **v41;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v43;  // rcx\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v45;  // rax\n
    struct struct_0 **v46;  // rax\n
    struct struct_0 **v47;  // rax, Other Possible Types: unsigned long\n
    unsigned long v48;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v49;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v50;  // rax, Other Possible Types: unsigned long\n
    char *v51;  // rbp\n
    unsigned long v52;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v53;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v54;  // rdi, Other Possible Types: unsigned long long\n
    void* v55;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v56;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v57;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v31 = &v5;\n
    do\n
    {\n
        v32 = a1 + 1;\n
        v4 = v32;\n
        if (*(a1) != 37)\n
        {\n
            v0 = *(a1);\n
        }\n
        else\n
        {\n
            v33 = v31;\n
            v55 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                a0 = v32;\n
                while (true)\n
                {\n
                    v32 = a0 + 1;\n
                    v4 = v32;\n
                    a3 = *(a0);\n
                    v35 = a3;\n
                    if (v35 - 49 >= 9)\n
                        break;\n
                    a1 = &v4;\n
                    v34 = cgc_strtol();\n
                    a0 = v4;\n
                }\n
                a2 = v35 - 37;\n
                switch (a2)\n
                {\n
                case 0:\n
                    v0 = 37;\n
                    goto LABEL_40467b;\n
                case 11:\n
                    v36 = 1;\n
                    continue;\n
                case 43:\n
                    v37 = v1;\n
                    if (v37 <= 40)\n
                    {\n
                        v41 = v37 + v3;\n
                        v1 = v37 + 8;\n
                    }\n
                    else\n
                    {\n
                        v41 = v2;\n
                        v2 = v41 + 8;\n
                    }\n
                    v31 = rbx<8>;\n
                    *(*(v41)) = 0;\n
                    break;\n
                case 62:\n
                    a3 = v1;\n
                    if (a3 <= 40)\n
                    {\n
                        v44 = a3 + v3;\n
                        a3 = a3 + 8;\n
                        v1 = a3;\n
                    }\n
                    else\n
                    {\n
                        v44 = v2;\n
                        v2 = v44 + 8;\n
                    }\n
                    v31 = rbx<8>;\n
                    v0 = *(v44);\n
                    goto LABEL_4044e4;\n
                case 63:\n
                    v38 = v1;\n
                    if (v38 <= 40)\n
                    {\n
                        v45 = v38 + v3;\n
                        v38 = v38 + 8;\n
                        v1 = v38;\n
                        v56 = *(v45);\n
                        if (!(v56 < 0))\n
                            goto LABEL_4046ff;\n
                    }\n
                    else\n
                    {\n
                        v46 = v2;\n
                        v2 = v46 + 1;\n
                        v56 = *(v46);\n
                        if (!(v56 < 0))\n
                            goto LABEL_4046ff;\n
                    }\n
                    v0 = 45;\n
                    cgc_transmit(a0, &g_411110, a2, v38);\n
                    v56 = -(v56);\n
LABEL_4046ff:\n
                    cgc_output_number_printf(v30, v56, 10, v34, v55);\n
                    v31 = rbx<8>;\n
                    break;\n
                case 78:\n
                    v39 = v1;\n
                    if (v39 <= 40)\n
                    {\n
                        v47 = v39 + v3;\n
                        v48 = v39 + 8;\n
                        v1 = v48;\n
                    }\n
                    else\n
                    {\n
                        v47 = v2;\n
                        v48 = v47 + 8;\n
                        v2 = v48;\n
                    }\n
                    v31 = rbx<8>;\n
                    v51 = *(v47);\n
                    if (cgc_strlen(v51))\n
                    {\n
                        v57 = 0;\n
                        do\n
                        {\n
                            v0 = v51[v57];\n
                            cgc_transmit(a0, &g_411110, a2, v48);\n
                            v57 += 1;\n
                        } while (cgc_strlen(v51) > v57);\n
                    }\n
                    break;\n
                case 80:\n
                    v40 = v1;\n
                    if (v40 > 40)\n
                    {\n
                        v49 = v2;\n
                        v2 = v49 + 8;\n
                    }\n
                    else\n
                    {\n
                        v49 = v40 + v3;\n
                        v1 = v40 + 8;\n
                    }\n
                    v53 = *(v49);\n
                    v54 = v30;\n
                    v52 = 10;\n
LABEL_40479a:\n
                    cgc_output_number_printf(v54, v53, v52, v34, v55);\n
                    v31 = rbx<8>;\n
                    break;\n
                case 51:\n
                    v55 = v55 | 2;\n
                case 83:\n
                    v43 = v1;\n
                    if (v43 <= 40)\n
                    {\n
                        v50 = v43 + v3;\n
                        v1 = v43 + 8;\n
                    }\n
                    else\n
                    {\n
                        v50 = v2;\n
                        v2 = v50 + 8;\n
                    }\n
                    v53 = *(v50);\n
                    v54 = v30;\n
                    v52 = 16;\n
                    goto LABEL_40479a;\n
                default:\n
                    v0 = a3;\n
LABEL_40467b:\n
                    v31 = rbx<8>;\n
                    goto LABEL_4044e4;\n
                }\n
            }\n
        }\n
LABEL_4044e4:\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4211934:sub_4044de": null, "4212046:sub_40454e": null, "4212672:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_35;  // tmp #35\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    char v14[2];  // rdx, Other Possible Types: unsigned long\n
    char v15[2];  // rdx\n
    char v16[2];  // rdx\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            v14 = *(a1);\n
            if ((v9 & 1))\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 48;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 48;\n
                        v16 = *(a1);\n
                        *(a1) = &v16[1];\n
                        *(a0) = *(a0) + 1;\n
                        v16[1] = 48;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 32;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 32;\n
                        v15 = *(a1);\n
                        *(a1) = &v15[1];\n
                        *(a0) = *(a0) + 1;\n
                        v15[1] = 32;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v17 + v12;\n
    *(a1) = &*(a1)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v11 + 1;\n
    return v18;\n
}\n
", "4212991:sub_4048ff": null, "4212992:cgc_sprintf": null, "4213180:sub_4049bc": null, "4213743:sub_404bef": null, "4213744:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4213855:sub_404c5f": null, "4213856:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_404cb7;\n
        }\n
    }\n
LABEL_404cb7:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4213878:sub_404c76": null, "4213973:sub_404cd5": null, "4213984:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4214022:sub_404d06": null, "4214032:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    char v1[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        do\n
        {\n
            if (v2 == a1)\n
                return v1;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
        } while (v2);\n
    }\n
    if (!a1)\n
        return v1;\n
    return 0;\n
}\n
", "4214076:sub_404d3c": null, "4214080:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4214133:sub_404d75": null, "4214144:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4214191:sub_404daf": null, "4214192:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214251:sub_404deb": null, "4214256:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4214284:sub_404e0c": null, "4214288:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4214345:sub_404e49": null, "4214405:sub_404e85": null, "4214416:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a0) - *(a1);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a0) - *(a1);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a0) - *(a1);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v2) - *(v3);\n
        }\n
    }\n
}\n
", "4214498:sub_404ee2": null, "4214512:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_405030:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_405030;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_405030;\n
}\n
", "4214847:sub_40503f": null, "4214848:cgc_strsep": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strsep(struct struct_1 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_405099;\n
                }\n
                goto LABEL_405097;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_405097:\n
    v3 = 0;\n
LABEL_405099:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4214946:sub_4050a2": null, "4214960:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_405190;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_405190:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_4051aa;\n
                    else\n
                        goto LABEL_4051d0;\n
                }\n
LABEL_4051aa:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_4051d0;\n
            }\n
        }\n
LABEL_4051d0:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4214995:sub_4050d3": null, "4215177:sub_405189": null, "4215282:sub_4051f2": null, "4215296:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4215301:sub_405205": null, "4215312:cgc_bn_init": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_bn_init(struct_0 *a0)\n
{\n
    unsigned long v1;  // rax\n
\n
    a0->field_0 = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4215327:sub_40521f": null, "4215328:cgc_bn_destroy": "long long cgc_bn_destroy(unsigned int a0[3])\n
{\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    return cgc_free(*(&a0[0]));\n
}\n
", "4215356:sub_40523c": null, "4215360:cgc_bn_const": "long long cgc_bn_const(unsigned int a0[3], unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned int *v3;  // rax\n
\n
    v0 = v2;\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    v3 = cgc_calloc(1, 4);\n
    *(&a0[0]) = v3;\n
    if (v3)\n
    {\n
        a0[2] = 1;\n
        *(v3) = a1;\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4215443:sub_405293": null, "4215456:cgc_bn_init_bits": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_bn_init_bits(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = (a1 + 7 >> 3) + 3 >> 2;\n
    v4 = cgc_calloc(v3, 4);\n
    a0->field_0 = v4;\n
    if (v4)\n
    {\n
        a0->field_8 = v3;\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4215525:sub_4052e5": null, "4215536:cgc_bn_length": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char g_400000;\n
extern char g_800000;\n
\n
long long cgc_bn_length(struct_0 *a0)\n
{\n
    unsigned long long v1;  // r8\n
    unsigned int *v2;  // rsi, Other Possible Types: unsigned long\n
    void* v3;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
\n
    v1 = a0->field_8;\n
    v2 = v1 - 1;\n
    v3 = 0;\n
    do\n
    {\n
        if (!(v1 << 5) + v3)\n
            return 0;\n
        v4 = *((a0->field_0 + v2 * 4));\n
        v3 -= 32;\n
        v2 -= 1;\n
    } while (!v4);\n
    v5 = v1 * 32;\n
    if (v4 < 0)\n
    {\n
        return v5 + v3 + 32;\n
    }\n
    else if ((v4 & 0x40000000))\n
    {\n
        return v5 + v3 + 31;\n
    }\n
    else if ((v4 & 0x20000000))\n
    {\n
        return v5 + v3 + 30;\n
    }\n
    else if ((v4 & 0x10000000))\n
    {\n
        return v5 + v3 + 29;\n
    }\n
    else if ((v4 & 0x8000000))\n
    {\n
        return v5 + v3 + 28;\n
    }\n
    else if ((v4 & 0x4000000))\n
    {\n
        return v5 + v3 + 27;\n
    }\n
    else if ((v4 & 0x2000000))\n
    {\n
        return v5 + v3 + 26;\n
    }\n
    else if ((v4 & 0x1000000))\n
    {\n
        return v5 + v3 + 25;\n
    }\n
    else if ((v4 & 0x800000))\n
    {\n
        return v5 + v3 + 24;\n
    }\n
    else if ((v4 & 0x400000))\n
    {\n
        return v5 + v3 + 23;\n
    }\n
    else if ((v4 & 0x200000))\n
    {\n
        return v5 + v3 + 22;\n
    }\n
    else if ((v4 & 0x100000))\n
    {\n
        return v5 + v3 + 21;\n
    }\n
    else if ((v4 & 0x80000))\n
    {\n
        return v5 + v3 + 20;\n
    }\n
    else if ((v4 & 0x40000))\n
    {\n
        return v5 + v3 + 19;\n
    }\n
    else if ((v4 & 0x20000))\n
    {\n
        return v5 + v3 + 18;\n
    }\n
    else if ((v4 & 0x10000))\n
    {\n
        return v5 + v3 + 17;\n
    }\n
    else if ((v4 & 0x8000))\n
    {\n
        return v5 + v3 + 16;\n
    }\n
    else if ((v4 & 0x4000))\n
    {\n
        return v5 + v3 + 15;\n
    }\n
    else if ((v4 & 0x2000))\n
    {\n
        return v5 + v3 + 14;\n
    }\n
    else if ((v4 & 0x1000))\n
    {\n
        return v5 + v3 + 13;\n
    }\n
    else if ((v4 & 0x800))\n
    {\n
        return v5 + v3 + 12;\n
    }\n
    else if ((v4 & 0x400))\n
    {\n
        return v5 + v3 + 11;\n
    }\n
    else if ((v4 & 0x200))\n
    {\n
        return v5 + v3 + 10;\n
    }\n
    else if ((v4 & 0x100))\n
    {\n
        return v5 + v3 + 9;\n
    }\n
    else if ((v4 & 128))\n
    {\n
        return v5 + v3 + 8;\n
    }\n
    else if ((v4 & 64))\n
    {\n
        return v5 + v3 + 7;\n
    }\n
    else if ((v4 & 32))\n
    {\n
        return v5 + v3 + 6;\n
    }\n
    else if ((v4 & 16))\n
    {\n
        return v5 + v3 + 5;\n
    }\n
    else if ((v4 & 8))\n
    {\n
        return v5 + v3 + 4;\n
    }\n
    else if ((v4 & 4))\n
    {\n
        return v5 + v3 + 3;\n
    }\n
    else if ((v4 & 2))\n
    {\n
        return v5 + v3 + 2;\n
    }\n
    else\n
    {\n
        return v3 + (v5 | v4 & 1);\n
    }\n
}\n
", "4216274:sub_4055d2": null, "4216288:cgc_bn_copy": "long long cgc_bn_copy(unsigned int a0[3], unsigned int a1[3])\n
{\n
    unsigned long v1;  // rbx\n
    char *v2;  // rax\n
\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    v1 = a1[2] & 134217727;\n
    v2 = cgc_calloc(v1, 4);\n
    *(&a0[0]) = v2;\n
    if (v2)\n
    {\n
        a0[2] = v1;\n
        cgc_memcpy(v2, *(&a1[0]), a1[2] * 4);\n
        a0[2] = a1[2];\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4216403:sub_405653": null, "4216416:cgc_bn_from_bytes": "long long cgc_bn_from_bytes(unsigned int a0[3], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // r12\n
    unsigned int *v4;  // rax\n
    unsigned long long v5;  // cc_op\n
    unsigned long long v6;  // cc_dep1\n
    char *v8;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v9;  // rcx, Other Possible Types: unsigned long\n
    char *v10;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v11;  // cc_op\n
    char *v12;  // cc_dep1\n
\n
    v0 = v2;\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    v3 = (a2 & 536870911) + 3 >> 2;\n
    v4 = cgc_calloc(v3, 4);\n
    *(&a0[0]) = v4;\n
    if (!v4)\n
        return 1;\n
    v9 = v4;\n
    a0[2] = v3;\n
    if (!a2)\n
        return 0;\n
    v5 = 3;\n
    v6 = a2;\n
    v10 = a2 - 2;\n
    while (true)\n
    {\n
        a1 = *((a1 + v10 + 1));\n
        if ([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, Conv(32->64, (Conv(64->32, rbx<8>) + 0x1<32>)), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>)))\n
        {\n
            v8 = a1;\n
            break;\n
        }\n
        else\n
        {\n
            v8 = *((a1 + v10)) * 0x100 | a1;\n
            if (!v10)\n
                break;\n
            v8 |= *((a1 + v10 - 1)) * 0x10000;\n
            if (v10 == 1)\n
                break;\n
            *(v9) = *((a1 + v10 - 2)) * 0x1000000 | v8;\n
            v9 += 4;\n
            v10 = v10 - 4;\n
            v11 = 7;\n
            v12 = v10;\n
            if (v10 == -2)\n
                return 0;\n
        }\n
    }\n
    *(v9) = v8;\n
    return 0;\n
}\n
", "4216609:sub_405721": null, "4216624:cgc_bn_to_bytes": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_bn_to_bytes(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned long v1;  // r11, Other Possible Types: unsigned int\n
    unsigned long long v2;  // rax\n
    unsigned long long v3;  // r9\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r10\n
    char *v9;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdx\n
    unsigned long v14;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v15;  // r8, Other Possible Types: unsigned int\n
    unsigned int *v16;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rdx\n
    unsigned int v18;  // ebx\n
    unsigned long v19;  // r9, Other Possible Types: char\n
    unsigned long v20;  // rdx, Other Possible Types: unsigned long long\n
    unsigned int v21;  // ebx\n
    char v22;  // dl\n
\n
    v1 = a2;\n
    v2 = a0->field_8 * 4;\n
    if (v2 < a2)\n
    {\n
        v3 = ~(v2) + a2;\n
        if (v3 >= 31)\n
        {\n
            v4 = v3 + 1;\n
            v5 = v4 & -0x20;\n
            v6 = v5 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *((a1 + v9)) = 0;\n
                    *((a1 + v9 + 16)) = 0;\n
                    *((a1 + v9 + 32)) = 0;\n
                    *((a1 + v9 + 48)) = 0;\n
                    *((a1 + v9 + 64)) = 0;\n
                    *((a1 + v9 + 80)) = 0;\n
                    *((a1 + v9 + 96)) = 0;\n
                    *((a1 + v9 + 112)) = 0;\n
                    *((a1 + v9 + 128)) = 0;\n
                    *((a1 + v9 + 144)) = 0;\n
                    *((a1 + v9 + 160)) = 0;\n
                    *((a1 + v9 + 176)) = 0;\n
                    *((a1 + v9 + 192)) = 0;\n
                    *((a1 + v9 + 208)) = 0;\n
                    *((a1 + v9 + 224)) = 0;\n
                    *((a1 + v9 + 240)) = 0;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = v9 + a1 + 16;\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = 0;\n
                    *((v11 + v13)) = 0;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            a1 += v5;\n
            if (v4 == v5)\n
                goto LABEL_405850;\n
            v1 -= v5;\n
        }\n
        do\n
        {\n
            *(a1) = 0;\n
            a1 += 1;\n
            v1 = v1 - 1;\n
        } while (v1 > v2);\n
LABEL_405850:\n
        v1 = v2;\n
    }\n
    v14 = v1 + 3;\n
    if (v14 < 4)\n
        return v14;\n
    v15 = v14 / 4;\n
    v14 = v14 & -0x4;\n
    v16 = v15 - 1;\n
    do\n
    {\n
        v17 = *((a0->field_0 + v16 * 4));\n
        v18 = v14 - 1;\n
        if (v14 > v1)\n
        {\n
            v19 = v17;\n
            v20 = v14 - 2;\n
            if (!(v18 <= v1))\n
                goto LABEL_4058c0;\n
        }\n
        else\n
        {\n
            v19 = v17;\n
            *(a1) = v17 / 0x1000000;\n
            a1 += 1;\n
            v20 = v14 - 2;\n
            if (!(v18 <= v1))\n
                goto LABEL_4058c0;\n
        }\n
        *(a1) = v19 / 0x10000;\n
        a1 += 1;\n
LABEL_4058c0:\n
        v21 = v14 - 3;\n
        if (v20 > v1)\n
        {\n
            v22 = v19;\n
            v15 = v15 - 1;\n
            if (!(v21 <= v1))\n
                continue;\n
        }\n
        else\n
        {\n
            v22 = v19;\n
            *(a1) = dh<1>;\n
            a1 += 1;\n
            v15 = v15 - 1;\n
            if (!(v21 <= v1))\n
                continue;\n
        }\n
        *(a1) = v22;\n
        a1 += 1;\n
        v16 -= 1;\n
        v14 = v14 - 4;\n
    } while (v15);\n
    return v14;\n
}\n
", "4216942:sub_40586e": null, "4216983:sub_405897": null, "4217046:sub_4058d6": null, "4217089:sub_405901": null, "4217104:cgc_bn_cgc_random": "typedef struct struct_4 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_bn_cgc_random(struct_0 *a0, struct_4 *a1, struct struct_3 **a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct struct_3 **v3;  // r14\n
    struct_4 *v4;  // r15\n
    struct_0 *v5;  // rbx\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // r13\n
    unsigned long long v9;  // r12\n
    unsigned long long v10;  // rax\n
    unsigned long long v11;  // rbp\n
    unsigned long long v12;  // rcx\n
    unsigned int v13;  // r12d\n
    unsigned long v14;  // r13\n
    unsigned long long v15;  // rdx\n
    unsigned long v16;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // rdi, Other Possible Types: unsigned long long\n
    unsigned int *v19;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v20;  // rcx\n
    unsigned long long v21;  // rdi\n
    unsigned long long v22;  // rcx\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v6 = cgc_bn_length(a1);\n
    v7 = v6;\n
    cgc_free(a0->field_0);\n
    a0->field_0 = 0;\n
    a0->field_8 = 0;\n
    v9 = (v6 + 7 >> 3) + 3 >> 2;\n
    v10 = cgc_calloc(v9, 4);\n
    a0->field_0 = v10;\n
    if (!v10)\n
        return 1;\n
    a0->field_8 = v9;\n
    v11 = (v6 + 7 >> 3) + 3 & -0x4;\n
    if (!*(a2)->field_18(a2, v10, v11, *(a2)))\n
    {\n
        v12 = v7 & 31;\n
        v13 = 4294967295 << (v12 & 31);\n
        if (v12)\n
        {\n
            v14 = v7 / 32;\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v15 = v5->field_8;\n
                v16 = a1->field_8;\n
                v17 = (v15 < v16 ? v16 : v15);\n
                v18 = v15;\n
                while (v18 > v16)\n
                {\n
                    v18 -= 1;\n
                    if (!(!v5->field_0[v18].field_0))\n
                        goto LABEL_405a70;\n
                }\n
                for (; v16 > v15; v16 -= 1);\n
                v19 = v17 - 1;\n
                do\n
                {\n
                    if (v19 == -1)\n
                        goto LABEL_405a70;\n
                    v20 = v19 * 4;\n
                    v21 = *((v5->field_0 + v20));\n
                    v22 = *((a1->field_0 + v20));\n
                    v19 -= 1;\n
                } while (v21 == v22);\n
                if ([D] amd64g_calculate_condition(0x6<64>, 0x7<64>, rdi<8>, rcx<8>, cc_ndep<8>))\n
                    goto LABEL_0x405b0b;\n
LABEL_405a70:\n
            }\n
        }\n
    }\n
}\n
", "4217366:sub_405a16": null, "4217526:sub_405ab6": null, "4217630:sub_405b1e": null, "4217632:cgc_bn_cmp": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_bn_cmp(struct_0 *a0, struct_0 *a1)\n
{\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    unsigned int *v2;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v3;  // rdx\n
    unsigned int *v4;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a1->field_8;\n
    v2 = a0->field_8;\n
    while (true)\n
    {\n
        if (v2 > v1)\n
        {\n
            v2 -= 1;\n
            if (*((a0->field_0 + (v2 << 2))))\n
                return 1;\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                if (v1 <= v2)\n
                {\n
                    v4 = v2 - 1;\n
                    while (true)\n
                    {\n
                        if (v4 == -1)\n
                            return 0;\n
                        v3 = v4 * 4;\n
                        v4 -= 1;\n
                        if (*((a0->field_0 + v3)) != *((a1->field_0 + v3)))\n
                            return (*((a0->field_0 + v3)) > *((a1->field_0 + v3))) * 2 - 1;\n
                    }\n
                }\n
                else\n
                {\n
                    v1 -= 1;\n
                    if (*((a1->field_0 + (v1 << 2))))\n
                        return 4294967295;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4217675:sub_405b4b": null, "4217764:sub_405ba4": null, "4217776:cgc_bn_modexp": "long long cgc_bn_modexp(unsigned int a0[3], unsigned long long a1, struct struct_0 **a2, void* a3)\n
{\n
    unsigned int v0;  // [bp-0x188]\n
    void* v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x58]\n
    void* v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x48]\n
    void* v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned long long v8;  // rbx\n
    unsigned int *v9;  // rax\n
    void* v10;  // rbp, Other Possible Types: unsigned long long, unsigned long\n
    void* v11;  // rbx, Other Possible Types: unsigned long\n
    struct struct_0 **v12;  // rbp, Other Possible Types: unsigned long\n
    void* v13;  // r12, Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v4 = 0;\n
    v5 = 0;\n
    v6 = 0;\n
    v1 = 0;\n
    v2 = 0;\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    v8 = (cgc_bn_length(a3) + 7 >> 3) + 3 >> 2;\n
    v9 = cgc_calloc(v8, 4);\n
    *(&a0[0]) = v9;\n
    v10 = 1;\n
    if (!v9)\n
    {\n
        v13 = 0;\n
    }\n
    else\n
    {\n
        a0[2] = v8;\n
        *(v9) = 1;\n
        v13 = 0;\n
        if (!cgc_bn_div(&v1, &v3, a1, a3))\n
        {\n
            v12 = a2;\n
            if (!cgc_bn_length(a2))\n
            {\n
                v10 = 0;\n
            }\n
            else\n
            {\n
                v11 = 0;\n
                do\n
                {\n
                    v0 = *((*(v12) + (v11 >> 5) * 4));\n
                    if (((*(&v0 + ((v11 & 31) >> 3)) >> (v11 & 31 & 7)) & 1))\n
                    {\n
                        v10 = 1;\n
                        if (cgc_bn_mul(&v5, a0, &v3))\n
                            goto LABEL_405d22;\n
                        if (cgc_bn_div(&v1, a0, &v5, a3))\n
                            goto LABEL_405d22;\n
                    }\n
                    v10 = 1;\n
                    if (cgc_bn_mul(&v5, &v3, &v3))\n
                        goto LABEL_405d22;\n
                    if (cgc_bn_div(&v1, &v3, &v5, a3))\n
                        goto LABEL_405d22;\n
                    v11 = v11 + 1;\n
                    v12 = a2;\n
                } while (v11 < cgc_bn_length(a2));\n
                v10 = 0;\n
LABEL_405d22:\n
                v13 = v5;\n
            }\n
        }\n
    }\n
    cgc_free(v3);\n
    cgc_free(0);\n
    cgc_free(v13);\n
    cgc_free(v1);\n
    return v10;\n
}\n
", "4218212:sub_405d64": null, "4218224:cgc_bn_div": "typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
long long cgc_bn_div(unsigned int a0[3], struct_1 *a1, struct struct_0 **a2, struct_1 *a3)\n
{\n
    unsigned int *v0;  // [bp-0x50]\n
    int tmp_13;  // tmp #13\n
    int tmp_130;  // tmp #130\n
    int tmp_148;  // tmp #148\n
    int tmp_42;  // tmp #42\n
    int tmp_60;  // tmp #60\n
    int tmp_61;  // tmp #61\n
    int tmp_5;  // tmp #5\n
    struct struct_0 **v1;  // [bp-0x48]\n
    unsigned int *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    struct_1 *v5;  // r14\n
    struct_1 *v6;  // r13\n
    unsigned long long v7;  // rbp\n
    unsigned long long v8;  // rax\n
    unsigned int v9;  // ebp\n
    unsigned long long v10;  // rax\n
    unsigned long v11;  // r15, Other Possible Types: unsigned long long\n
    unsigned int *v12;  // rax\n
    struct struct_0 **v13;  // rbp\n
    unsigned long v14;  // rbx, Other Possible Types: unsigned int\n
    unsigned int v15[2];  // r15\n
    unsigned long v16;  // rcx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    unsigned int v20;  // esi\n
    unsigned long v21;  // r11\n
    char v22;  // cl\n
    unsigned long long v23;  // r10\n
    unsigned long long v24;  // r9\n
    unsigned long v25;  // rbp\n
    unsigned long v26;  // rdi, Other Possible Types: unsigned long long\n
    unsigned int v27[2];  // rdi, Other Possible Types: unsigned long\n
    unsigned int v28[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v29;  // rdx\n
    unsigned long v31;  // r9\n
    unsigned long v33;  // rdx\n
    unsigned int v34;  // edi\n
    unsigned int v35;  // ebp\n
    unsigned long long v36;  // r8\n
    unsigned int v37;  // edi\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // ebp\n
    unsigned int v40;  // edi\n
    unsigned long long v42;  // rcx\n
    struct struct_0 **v43;  // r8d\n
    unsigned long long v44;  // rbp\n
    unsigned int v45;  // ecx\n
    unsigned long long v46;  // rdi\n
    unsigned int *v48;  // r12, Other Possible Types: unsigned long\n
    unsigned long v49;  // rcx\n
    unsigned int v50[2];  // rsi, Other Possible Types: unsigned long\n
    struct struct_0 **v51;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v52;  // r8, Other Possible Types: unsigned long\n
    unsigned long v53;  // rax, Other Possible Types: unsigned long long\n
\n
    v5 = a3;\n
    v6 = a1;\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    cgc_free(a1->field_0);\n
    a1->field_0 = 0;\n
    a1->field_8 = 0;\n
    v7 = (cgc_bn_length(a3) + 8 >> 3) + 3 >> 2;\n
    v8 = cgc_calloc(v7, 4);\n
    a1->field_0 = v8;\n
    if (!v8)\n
        return 1;\n
    a1->field_8 = v7;\n
    v1 = a2;\n
    v9 = cgc_bn_length(a2);\n
    v10 = cgc_bn_length(a3);\n
    v11 = (v9 - v10 + 7 >> 3) + 3 >> 2;\n
    if (v9 <= v10)\n
        v11 = 1;\n
    v12 = cgc_calloc(v11, 4);\n
    *(&a0[0]) = v12;\n
    if (!v12)\n
    {\n
        cgc_free(a1->field_0);\n
        a1->field_0 = 0;\n
        a1->field_8 = 0;\n
        return 1;\n
    }\n
    v0 = v12;\n
    a0[2] = v11;\n
    v13 = v1;\n
    v53 = cgc_bn_length(v13);\n
    if (!v53)\n
        return 0;\n
    v48 = *(v13);\n
    v15 = a1->field_0;\n
    v52 = v0;\n
    v2 = v48;\n
    do\n
    {\n
        v53 = v53 - 1;\n
        if (v6->field_8)\n
        {\n
            v16 = 0;\n
            v17 = 0;\n
            do\n
            {\n
                v18 = v15[v16];\n
                v20 = v18 * 2 | v17;\n
                v15[v16] = v20;\n
                v16 += 1;\n
                v17 = v18 / 0x80000000;\n
            } while (v16 < v6->field_8);\n
        }\n
        v21 = v53 / 32;\n
        v22 = v53 & 31;\n
        v23 = (*((v48 + (v53 >> 5) * 4)) >> (v22 & 31)) & 1 | v15[0];\n
        v15[0] = v23;\n
        v24 = v6->field_8;\n
        v50 = v5->field_8;\n
        v25 = (v24 < v50 ? v50 : v24);\n
        v26 = v24;\n
        while (true)\n
        {\n
            if (v26 > v50)\n
            {\n
                v26 -= 1;\n
                if (!(!v15[v26]))\n
                    goto LABEL_405f16;\n
            }\n
            else\n
            {\n
                v27 = v50;\n
                while (v27 > v24)\n
                {\n
                    v27 -= 1;\n
                    if (!(!(&v5->field_0->field_0)[v27]))\n
                        goto LABEL_405e84;\n
                }\n
                v28 = v25 - 1;\n
                while (v28 != -1)\n
                {\n
                    v29 = v28 * 4;\n
                    v28 -= 1;\n
                    if (*((&v15[0] + v29)) != *((&v5->field_0->field_0 + v29)))\n
                        break;\n
                }\n
LABEL_405f16:\n
                v51 = (1 << (v22 & 31));\n
                if (v50)\n
                {\n
                    v31 = v5->field_0;\n
                    tmp_13 = v23;\n
                    *(&v14) = tmp_13 < *(v31);\n
                    v15[0] = v23 - *(v31);\n
                    if (v50 != 1)\n
                    {\n
                        v33 = 1;\n
                        v1 = v51;\n
                        v3 = &v50[0] + 1;\n
                        if (v50 != 2)\n
                        {\n
                            v33 = 1;\n
                            do\n
                            {\n
                                v34 = v14 & 1;\n
                                v14 = *((v31 + v33 * 4));\n
                                v35 = v15[v33];\n
                                v36 = v15[1 + v33];\n
                                v37 = v34 + v14;\n
                                v15[v33] = v9 - v37;\n
                                v38 = v35 < v37 | v35 < v14;\n
                                v39 = *((v31 + v33 * 4 + 4));\n
                                tmp_130 = v36 < v39;\n
                                v40 = v34 + v39;\n
                                tmp_148 = v36;\n
                                *(&v14) = tmp_148 < v40 | tmp_130;\n
                                v15[1 + v33] = v36 - v40;\n
                                v42 = -(v3 & -2) + v33 + 2;\n
                                v33 += 2;\n
                            } while (v42 != 1);\n
                        }\n
                        v52 = v0;\n
                        v48 = v2;\n
                        v51 = v1;\n
                        if ((v3 & 1))\n
                        {\n
                            v43 = v51;\n
                            v44 = v15[v33];\n
                            v45 = *((v31 + v33 * 4));\n
                            tmp_42 = v44 < v45;\n
                            v46 = v14 + v45;\n
                            tmp_60 = v44;\n
                            tmp_61 = v46;\n
                            v51 = v43;\n
                            v52 = v0;\n
                            *(&v14) = tmp_60 < tmp_61 | tmp_42;\n
                            v15[v33] = v44 - v46;\n
                        }\n
                    }\n
                    if ((v14 & 1))\n
                    {\n
                        do\n
                        {\n
                            v49 = v50;\n
                            v50 = v50 + 1;\n
                            tmp_5 = v15[v49];\n
                            v15[v49] = v15[v49] - 1;\n
                        } while (tmp_5 < 1);\n
                    }\n
                }\n
                *((v52 + v21 * 4)) = *((v52 + v21 * 4)) | v51;\n
                break;\n
            }\n
        }\n
LABEL_405e84:\n
    } while (v53);\n
    return 0;\n
}\n
", "4218487:sub_405e77": null, "4218897:sub_406011": null, "4218953:sub_406049": null, "4219072:cgc_bn_mul": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long cgc_bn_mul(unsigned int a0[3], struct_0 *a1, struct_0 *a2)\n
{\n
    int tmp_15;  // tmp #15\n
    int tmp_62;  // tmp #62\n
    int tmp_5;  // tmp #5\n
    struct_0 *v1;  // r13\n
    struct_0 *v2;  // r14\n
    unsigned long long v4;  // r12\n
    unsigned int v5;  // r12\n
    unsigned int *v6;  // rax\n
    unsigned int *v7;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v8;  // rcx\n
    unsigned long v9;  // rsi\n
    unsigned long v10;  // rbx\n
    unsigned long long v11;  // rcx\n
    unsigned int v12;  // edx\n
    unsigned int v13[3];  // rbx\n
    unsigned int v14[3];  // rdx, Other Possible Types: unsigned long\n
    unsigned long v15;  // rcx\n
    unsigned long v16;  // rdx, Other Possible Types: unsigned long long\n
    void* v17;  // r10, Other Possible Types: unsigned long long, unsigned long\n
\n
    v1 = a2;\n
    v2 = a1;\n
    cgc_free(*(&a0[0]));\n
    *(&a0[0]) = 0;\n
    a0[2] = 0;\n
    v4 = (cgc_bn_length(a1) + cgc_bn_length(a2) + 7 >> 3) + 3;\n
    v5 = v4 / 4;\n
    v6 = cgc_calloc(v5, 4);\n
    *(&a0[0]) = v6;\n
    if (!v6)\n
        return 1;\n
    a0[2] = v5;\n
    v16 = a1->field_8;\n
    if (!v16)\n
    {\n
        return 0;\n
    }\n
    else if (!v1->field_8)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v17 = 0;\n
        do\n
        {\n
            v7 = 0;\n
            do\n
            {\n
                v8 = *((&v2->field_0->field_0 + 0x4 * v17)) * v1->field_0[v7].field_0;\n
                v9 = v8 / 0x100000000;\n
                v10 = v7 + v17;\n
                tmp_15 = v6[v10];\n
                v6[v10] = v6[v10] + v8;\n
                tmp_62 = v8;\n
                v11 = v6[1 + v10];\n
                v12 = v11 + v9 + (((tmp_15 + tmp_62) <= tmp_15 ? 1 : 0) & 1);\n
                v6[1 + v10] = v12;\n
                if (!(__CFADD__(v9, v11)) && !(v12 < v11))\n
                    continue;\n
                v13 = &v6[v10];\n
                v14 = 2;\n
                do\n
                {\n
                    v15 = v14;\n
                    v14 = v14 + 1;\n
                    tmp_5 = v13[v15];\n
                    v13[v15] = v13[v15] + 1;\n
                } while (!tmp_5 + 1);\n
                v7 += 1;\n
            } while (v7 < v1->field_8);\n
            v16 = v2->field_8;\n
            v17 += 1;\n
        } while (v17 < v16);\n
        return 0;\n
    }\n
}\n
", "4219215:sub_40614f": null, "4219255:sub_406177": null, "4219378:sub_4061f2": null, "4219392:cgc_bn_slr": null, "4219450:sub_40623a": null, "4219906:sub_406402": null, "4219920:cgc_bn_self_test": "long long cgc_bn_self_test(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0[3];  // [bp-0x1a8], Other Possible Types: unsigned long, unsigned int *, void*\n
    unsigned int v1;  // [bp-0x1a0]\n
    void* v2;  // [bp-0x198]\n
    unsigned int v3;  // [bp-0x190]\n
    unsigned int *v4;  // [bp-0x188]\n
    unsigned int v5;  // [bp-0x180]\n
    unsigned long long *v6;  // [bp-0x178]\n
    unsigned int v7;  // [bp-0x170]\n
    unsigned int *v8;  // [bp-0x168]\n
    unsigned int v9;  // [bp-0x160]\n
    unsigned int *v10;  // [bp-0x158]\n
    unsigned int v11;  // [bp-0x150]\n
    char v12;  // [bp-0x148]\n
    char v13;  // [bp-0x138]\n
    char v14;  // [bp-0x128]\n
    int v15;  // [bp-0x118]\n
    int v16;  // [bp-0x108]\n
    int v17;  // [bp-0xf8]\n
    int v18;  // [bp-0xe8]\n
    int v19;  // [bp-0xd8]\n
    int v20;  // [bp-0xc8]\n
    int v21;  // [bp-0xb8]\n
    char v22;  // [bp-0xa8]\n
    int v23;  // [bp-0x98]\n
    int v24;  // [bp-0x88]\n
    int v25;  // [bp-0x78]\n
    int v26;  // [bp-0x68]\n
    int v27;  // [bp-0x58]\n
    int v28;  // [bp-0x48]\n
    int v29;  // [bp-0x38]\n
    unsigned long v31;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v32;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v33;  // rax\n
    unsigned int *v34;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v35;  // rsi\n
    unsigned long long v36;  // rsi\n
    unsigned long long v37;  // rbx\n
    unsigned int *v38;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v39;  // rax\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rax\n
    unsigned int *v42;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v43;  // rsi\n
    unsigned long long v44;  // rbp\n
    unsigned long v45;  // rax\n
    unsigned int *v46;  // rax, Other Possible Types: unsigned long\n
    unsigned long v47;  // rbx, Other Possible Types: unsigned long long\n
    unsigned int *v48;  // rsi\n
    unsigned int *v49;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v50;  // rbx\n
    unsigned long v51;  // rbp, Other Possible Types: unsigned long long\n
    unsigned int *v52;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v53;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v54;  // rsi\n
    unsigned long long v55;  // rbp\n
    unsigned long v56;  // rbp, Other Possible Types: unsigned long long\n
\n
    *(&v29) = 305321073193503918853489694545573416837;\n
    *(&v28) = 266571549090727505542208360027143824086;\n
    *(&v27) = 184278315227228437919280734495310652070;\n
    *(&v26) = 156905864362914166259044871542981262295;\n
    *(&v25) = 324711472213623567575292350279760413206;\n
    *(&v24) = 26511955628480867767574802202941353766;\n
    *(&v23) = 65698904546218910713752761765313974520;\n
    *(&v22) = 7444332600212677802856251894021214628;\n
    *(&v21) = 150552152014421994118925368981721025766;\n
    *(&v20) = 134388897621685271774311634038537802145;\n
    *(&v19) = 256272868884500222939196754338868821838;\n
    *(&v18) = 152132231812271911837214279723361618860;\n
    *(&v17) = 254565898671927048685553683357253299219;\n
    *(&v16) = 255642212141381769827130612638269207392;\n
    *(&v15) = 129245726971222764285767559639474358610;\n
    *(&v14) = 314135860020511154631436625806560791473;\n
    *(&v12) = 209746551243068885086898511873944721653;\n
    strncpy(&v13, \"IF#S\", 4);\n
    v8 = 0;\n
    v9 = 0;\n
    v0 = 0;\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = 0;\n
    v4 = 0;\n
    v5 = 0;\n
    cgc_free(0);\n
    v7 = 0;\n
    v6 = cgc_calloc(2, 4);\n
    if (v6)\n
    {\n
        v7 = 2;\n
        *(v6) = 69259509840;\n
    }\n
    v31 = 0;\n
    cgc_free(0);\n
    v11 = 0;\n
    v10 = cgc_calloc(2, 4);\n
    if (v10)\n
    {\n
        v11 = 2;\n
        strncpy(v10, \"UUUUU\", 5);\n
        v31 = 2;\n
    }\n
    v32 = 0;\n
    cgc_free(0);\n
    v1 = 0;\n
    v0 = cgc_calloc(3, 4);\n
    if (v0)\n
    {\n
        v1 = 3;\n
        *(&v0) = 1158955601333578384;\n
        v0[2] = 1376;\n
        v32 = 3;\n
    }\n
    cgc_bn_mul(&v8, &v6, &v10);\n
    v38 = v9;\n
    v40 = v8;\n
    v33 = (v38 < v32 ? v32 : v38);\n
    v34 = v38;\n
    while (v34 > v32)\n
    {\n
        v34 -= 1;\n
        if (!(!*((v40 + (v34 << 2)))))\n
            goto LABEL_406a23;\n
    }\n
    if (v32 > v38)\n
    {\n
        v35 = v32 - 1;\n
        if (!(!v0[v35]))\n
            goto LABEL_406a23;\n
        if (v35 > v38)\n
        {\n
            v36 = v32 - 2;\n
            if (!(!v0[v36]))\n
                goto LABEL_406a23;\n
            if (v36 > v38)\n
            {\n
                v37 = v32 - 3;\n
                if (!(!v0[v37]))\n
                    goto LABEL_406a23;\n
                if (!(v37 <= v38))\n
                    goto LABEL_406a23;\n
            }\n
        }\n
    }\n
    if (v33)\n
    {\n
        v38 = v33 - 1;\n
        if (!(*((v40 + (v38 << 2))) == v0[v38]))\n
            goto LABEL_406a23;\n
        if (v38)\n
        {\n
            v38 = v33 - 2;\n
            if (!(*((v40 + (v38 << 2))) == v0[v38]))\n
                goto LABEL_406a23;\n
            if (v38)\n
            {\n
                v39 = v33 - 3;\n
                v38 = v39;\n
                v40 = *((v40 + v39 * 4));\n
                if (!(v40 == v0[v39]))\n
                    goto LABEL_406a23;\n
                if (!(!v39))\n
                    goto LABEL_406a23;\n
            }\n
        }\n
    }\n
    cgc_bn_div(&v2, &v4, &v0, &v6);\n
    v38 = v3;\n
    v40 = v2;\n
    v41 = (v38 < v31 ? v31 : v38);\n
    v42 = v38;\n
    while (v42 > v31)\n
    {\n
        v42 -= 1;\n
        if (!(!*((v40 + (v42 << 2)))))\n
            goto LABEL_406a23;\n
    }\n
    if (v31 > v38)\n
    {\n
        v43 = v31 - 1;\n
        if (!(!v10[v43]))\n
            goto LABEL_406a23;\n
        if (v43 > v38)\n
        {\n
            v44 = v31 - 2;\n
            if (!(!v10[v44 & -2]))\n
                goto LABEL_406a23;\n
            if (!(v44 <= v38))\n
                goto LABEL_406a23;\n
        }\n
    }\n
    if (v41)\n
    {\n
        v38 = v41 - 1;\n
        if (!(*((v40 + (v38 << 2))) == v10[v38]))\n
            goto LABEL_406a23;\n
        if (v38)\n
        {\n
            v45 = v41 - 2;\n
            v38 = v45;\n
            v40 = *((v40 + v45 * 4));\n
            if (!(v40 == v10[v45]))\n
                goto LABEL_406a23;\n
            if (!(!v45))\n
                goto LABEL_406a23;\n
        }\n
    }\n
    v40 = v4;\n
    v46 = v5 - 1;\n
    while (v46 != -1)\n
    {\n
        v38 = v46;\n
        v46 -= 1;\n
        if (!(!*((v40 + (v38 << 2)))))\n
            goto LABEL_406a23;\n
    }\n
    cgc_bn_div(&v2, &v4, &v10, &v6);\n
    cgc_free(v0);\n
    v47 = 1;\n
    *(&v0[0]) = cgc_calloc(1, 4);\n
    if (!v0)\n
        v47 = 0;\n
    else\n
        v0[0] = 5;\n
    v48 = v3;\n
    v38 = v2;\n
    v40 = (v48 < v47 ? v47 : v48);\n
    v49 = v48;\n
    while (v49 > v47)\n
    {\n
        v49 -= 1;\n
        if (!(!*((v38 + (v49 << 2)))))\n
            goto LABEL_406a23;\n
    }\n
    if (v47 > v48)\n
    {\n
        v50 = v47 - 1;\n
        if (!(!v0[v50]))\n
            goto LABEL_406a23;\n
        if (!(v50 <= v48))\n
            goto LABEL_406a23;\n
    }\n
    if (v40)\n
    {\n
        v40 -= 1;\n
        v38 = *((v38 + v40 * 4));\n
        if (!(v38 == v0[v40]))\n
            goto LABEL_406a23;\n
        if (!(!v40))\n
            goto LABEL_406a23;\n
    }\n
    cgc_free(v0);\n
    v1 = 0;\n
    v51 = 2;\n
    *(&v0[0]) = cgc_calloc(2, 4);\n
    if (!v0)\n
    {\n
        v51 = 0;\n
    }\n
    else\n
    {\n
        v1 = 2;\n
        *(&v0[0]) = 20206326725;\n
    }\n
    v38 = v5;\n
    v52 = v4;\n
    v40 = (v38 < v51 ? v51 : v38);\n
    v53 = v38;\n
    while (v53 > v51)\n
    {\n
        v53 -= 1;\n
        if (!(!v52[v53]))\n
            goto LABEL_406a23;\n
    }\n
    if (v51 > v38)\n
    {\n
        v54 = v51 - 1;\n
        if (!(!v0[v54]))\n
            goto LABEL_406a23;\n
        if (v54 > v38)\n
        {\n
            v55 = v51 - 2;\n
            if (!(!v0[v55 & -2]))\n
                goto LABEL_406a23;\n
            if (!(v55 <= v38))\n
                goto LABEL_406a23;\n
        }\n
    }\n
    if (v40)\n
    {\n
        v38 = v40 - 1;\n
        if (!(v52[v38] == v0[v38]))\n
            goto LABEL_406a23;\n
        if (v38)\n
        {\n
            v40 -= 2;\n
            v38 = v40;\n
            if (!(v52[v40] == v0[v40]))\n
                goto LABEL_406a23;\n
            if (!(!v40))\n
                goto LABEL_406a23;\n
        }\n
    }\n
    cgc_bn_from_bytes(&v6, &v22, 128);\n
    cgc_bn_from_bytes(&v2, &v12, 20);\n
    v38 = 128;\n
    cgc_bn_from_bytes(&v10, &v14, 128);\n
    cgc_bn_modexp(&v8, &v6, &v2, &v10);\n
    cgc_bn_const(&v0, 1);\n
    if (!cgc_bn_cmp(&v8, &v0))\n
    {\n
        v56 = 0;\n
        goto LABEL_406a40;\n
    }\n
LABEL_406a23:\n
    cgc_fdprintf(2, \"BN self-test FAILED!\\n
\", v38, v40, a4);\n
    v56 = 1;\n
    v52 = v4;\n
LABEL_406a40:\n
    cgc_free(v6);\n
    cgc_free(v10);\n
    cgc_free(v8);\n
    cgc_free(v0);\n
    cgc_free(v2);\n
    cgc_free(v52);\n
    return v56;\n
}\n
", "4221583:sub_406a8f": null, "4221584:cgc_best_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
int cgc_best_init()\n
{\n
    char v0;  // [bp-0x29]\n
    int tmp_269;  // tmp #269\n
    int tmp_295;  // tmp #295\n
    int tmp_323;  // tmp #323\n
    int tmp_351;  // tmp #351\n
    int tmp_379;  // tmp #379\n
    int tmp_407;  // tmp #407\n
    int tmp_435;  // tmp #435\n
    int tmp_463;  // tmp #463\n
    int tmp_491;  // tmp #491\n
    int tmp_712;  // tmp #712\n
    int tmp_165;  // tmp #165\n
    int tmp_277;  // tmp #277\n
    int tmp_477;  // tmp #477\n
    int tmp_677;  // tmp #677\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    char v5[144];  // [bp-0x24], Other Possible Types: char\n
    char v6;  // [bp-0x23]\n
    char v7;  // [bp-0x22]\n
    char v8;  // [bp-0x21]\n
    char v10[144];  // rax\n
    struct_0 *v11;  // rdi\n
    char v12[144];  // rbx\n
    unsigned int v13;  // rsi\n
    char v14;  // cl\n
    char v15;  // bpl\n
    char v16[144];  // r11b\n
    char v17;  // r9b\n
    char v18;  // dil\n
    char v19;  // sil\n
    char v20;  // r8b\n
    char v21;  // r10b\n
    char v22;  // bpl\n
    char v23;  // r11b\n
    char v24;  // cl\n
    char v26;  // dil\n
    char v27;  // r9b\n
    char v28;  // bpl\n
    char v29[144];  // r10b\n
    char v30;  // r8b\n
    char v31;  // sil\n
    char v32;  // r11b\n
    char v33;  // dil\n
    char v34;  // r9b\n
    char v35;  // bpl\n
    char v36;  // r10b\n
    char v37;  // dl\n
\n
    v10 = cgc_malloc(144);\n
    v11->field_8 = v10;\n
    if (!v10)\n
        return;\n
    v12 = v10;\n
    cgc_memcpy(&v0, v13 + 8, 0x8);\n
    v8 = v1 ^ v0 ^ v2 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;\n
    tmp_269 = __ROL__(v0, 3);\n
    v0 = __ROL__(v0, 3);\n
    v10[0] = tmp_269 ^ 183;\n
    tmp_295 = __ROL__(v1, 3);\n
    v1 = __ROL__(v1, 3);\n
    v10[1] = tmp_295 ^ 110;\n
    tmp_323 = __ROL__(v2, 3);\n
    v2 = __ROL__(v2, 3);\n
    v10[2] = tmp_323 ^ 37;\n
    tmp_351 = __ROL__(v3, 3);\n
    v3 = __ROL__(v3, 3);\n
    v10[3] = tmp_351 ^ 220;\n
    tmp_379 = __ROL__(v4, 3);\n
    v4 = __ROL__(v4, 3);\n
    v10[4] = tmp_379 ^ 147;\n
    tmp_407 = __ROL__(v5, 3);\n
    v5[0] = __ROL__(v5, 3);\n
    v10[5] = tmp_407 ^ 74;\n
    tmp_435 = __ROL__(v6, 3);\n
    v6 = __ROL__(v6, 3);\n
    v10[6] = tmp_435 ^ 1;\n
    tmp_463 = __ROL__(v7, 3);\n
    v7 = __ROL__(v7, 3);\n
    v10[7] = tmp_463 ^ 184;\n
    tmp_491 = __ROL__(v1, 3);\n
    v1 = __ROL__(v1, 3);\n
    v10[8] = tmp_491 ^ 111;\n
    v10[9] = __ROL__(v2, 3) ^ 38;\n
    v14 = v3;\n
    v10[10] = __ROL__(v14, 3) ^ 221;\n
    v15 = v4;\n
    v10[11] = __ROL__(*(&v15), 3) ^ 148;\n
    v16 = v5;\n
    *(&v10[12]) = __ROL__(v16, 3) ^ 75;\n
    v17 = v6;\n
    v10[13] = __ROL__(v17, 3) ^ 2;\n
    v18 = v7;\n
    v10[14] = __ROL__(v7, 3) ^ 185;\n
    v19 = v8;\n
    v10[15] = __ROL__(rsi<8>, 3) ^ 112;\n
    tmp_712 = __ROL__(v2, 6);\n
    v2 = __ROL__(v2, 6);\n
    v10[16] = tmp_712 ^ 39;\n
    v10[17] = __ROL__(v14, 6) ^ 222;\n
    v10[18] = __ROL__(*(&v15), 6) ^ 149;\n
    *(&v10[19]) = __ROL__(v16, 6) ^ 76;\n
    v10[20] = __ROL__(v17, 6) ^ 3;\n
    v10[21] = __ROL__(rdi<8>, 6) ^ 186;\n
    v10[22] = __ROL__(rsi<8>, 6) ^ 113;\n
    v20 = v0;\n
    v10[23] = __ROL__(v20, 3) ^ 40;\n
    v3 = __ROL__(v14, 1);\n
    v10[24] = __ROL__(v14, 1) ^ 223;\n
    v10[25] = __ROL__(*(&v15), 1) ^ 150;\n
    *(&v10[26]) = __ROL__(v16, 1) ^ 77;\n
    v10[27] = __ROL__(v17, 1) ^ 4;\n
    v10[28] = __ROL__(rdi<8>, 1) ^ 187;\n
    v10[29] = __ROL__(rsi<8>, 1) ^ 114;\n
    v10[30] = __ROL__(v20, 6) ^ 41;\n
    v21 = v1;\n
    v10[31] = __ROL__(v21, 3) ^ 224;\n
    v4 = __ROL__(v15, 4);\n
    v10[32] = __ROL__(v15, 4) ^ 151;\n
    *(&v10[33]) = __ROL__(v16, 4) ^ 78;\n
    v10[34] = __ROL__(v17, 4) ^ 5;\n
    v10[35] = __ROL__(rdi<8>, 4) ^ 188;\n
    v10[36] = __ROL__(rsi<8>, 4) ^ 115;\n
    v10[37] = __ROL__(v20, 1) ^ 42;\n
    v10[38] = __ROL__(v21, 6) ^ 225;\n
    v22 = v2;\n
    v10[39] = __ROL__(*(&v22), 3) ^ 152;\n
    *(&v5[0]) = __ROR__(v16, 1);\n
    *(&v10[40]) = __ROR__(v16, 1) ^ 79;\n
    v10[41] = __ROR__(v17, 1) ^ 6;\n
    v10[42] = __ROR__(rdi<8>, 1) ^ 189;\n
    v10[43] = __ROR__(rsi<8>, 1) ^ 116;\n
    v10[44] = __ROL__(v20, 4) ^ 43;\n
    v10[45] = __ROL__(v21, 1) ^ 226;\n
    v10[46] = __ROL__(*(&v22), 6) ^ 153;\n
    v23 = v3;\n
    *(&v10[47]) = __ROL__(v16, 3) ^ 80;\n
    v6 = __ROL__(v17, 2);\n
    v10[48] = __ROL__(v17, 2) ^ 7;\n
    v10[49] = __ROL__(rdi<8>, 2) ^ 190;\n
    v10[50] = __ROL__(rsi<8>, 2) ^ 117;\n
    v10[51] = __ROR__(v20, 1) ^ 44;\n
    v10[52] = __ROL__(v21, 4) ^ 227;\n
    v10[53] = __ROL__(*(&v22), 1) ^ 154;\n
    *(&v10[54]) = __ROL__(v16, 6) ^ 81;\n
    v24 = v4;\n
    v10[55] = __ROL__(v14, 3) ^ 8;\n
    v7 = __ROL__(v18, 5);\n
    v10[56] = __ROL__(v18, 5) ^ 191;\n
    v10[57] = __ROL__(rsi<8>, 5) ^ 118;\n
    v10[58] = __ROL__(v20, 2) ^ 45;\n
    v10[59] = __ROR__(v21, 1) ^ 228;\n
    v10[60] = __ROL__(*(&v22), 4) ^ 155;\n
    v10[61] = __ROL__(v23, 1) ^ 82;\n
    v10[62] = __ROL__(v14, 6) ^ 9;\n
    v10[0] = v5;\n
    v12[63] = __ROL__(v10[0], 3) ^ 192;\n
    v8 = v19;\n
    v12[64] = v19 ^ 119;\n
    v0 = __ROL__(v20, 5);\n
    v12[65] = __ROL__(v20, 5) ^ 46;\n
    v1 = __ROL__(v21, 2);\n
    v12[66] = __ROL__(v21, 2) ^ 229;\n
    v2 = __ROR__(v22, 1);\n
    v12[67] = __ROR__(v22, 1) ^ 156;\n
    v3 = __ROL__(v23, 4);\n
    v12[68] = __ROL__(v23, 4) ^ 83;\n
    v4 = __ROL__(v24, 1);\n
    v12[69] = __ROL__(v24, 1) ^ 10;\n
    v5[0] = __ROL__(v10[0], 6);\n
    v12[70] = __ROL__(v10[0], 6) ^ 193;\n
    tmp_165 = __ROL__(v6, 3);\n
    v6 = __ROL__(v6, 3);\n
    v12[71] = tmp_165 ^ 120;\n
    cgc_memcpy(&v0, rsi<8>, 0x8);\n
    v26 = v2;\n
    v27 = v3;\n
    v28 = v4;\n
    v29 = v5;\n
    v30 = v6;\n
    v31 = v7;\n
    v32 = *(&v28) ^ v5 ^ v6 ^ rdi<8> ^ v3 ^ v0 ^ v1 ^ v7;\n
    tmp_277 = __ROL__(v0, 3);\n
    v0 = __ROL__(v0, 3);\n
    v12[72] = tmp_277 ^ 47;\n
    v12[73] = __ROL__(v1, 3) ^ 230;\n
    v12[74] = __ROL__(rdi<8>, 3) ^ 157;\n
    v12[75] = __ROL__(v17, 3) ^ 84;\n
    v12[76] = __ROL__(*(&v28), 3) ^ 11;\n
    v12[77] = __ROL__(v21, 3) ^ 194;\n
    v12[78] = __ROL__(v20, 3) ^ 121;\n
    v12[79] = __ROL__(rsi<8>, 3) ^ 48;\n
    tmp_477 = __ROL__(v1, 6);\n
    v1 = __ROL__(v1, 6);\n
    v12[80] = tmp_477 ^ 231;\n
    v12[81] = __ROL__(rdi<8>, 6) ^ 158;\n
    v12[82] = __ROL__(v17, 6) ^ 85;\n
    v12[83] = __ROL__(*(&v28), 6) ^ 12;\n
    v12[84] = __ROL__(v21, 6) ^ 195;\n
    v12[85] = __ROL__(v20, 6) ^ 122;\n
    v12[86] = __ROL__(rsi<8>, 6) ^ 49;\n
    *(&v12[87]) = __ROL__(v16, 3) ^ 232;\n
    tmp_677 = __ROL__(v2, 1);\n
    v2 = __ROL__(v2, 1);\n
    v12[88] = tmp_677 ^ 159;\n
    v12[89] = __ROL__(v17, 1) ^ 86;\n
    v12[90] = __ROL__(*(&v28), 1) ^ 13;\n
    v12[91] = __ROL__(v21, 1) ^ 196;\n
    v12[92] = __ROL__(v20, 1) ^ 123;\n
    v12[93] = __ROL__(rsi<8>, 1) ^ 50;\n
    *(&v12[94]) = __ROL__(v16, 6) ^ 233;\n
    v33 = v0;\n
    v12[95] = __ROL__(rdi<8>, 3) ^ 160;\n
    v3 = __ROL__(v27, 4);\n
    v12[96] = __ROL__(v27, 4) ^ 87;\n
    v12[97] = __ROL__(*(&v28), 4) ^ 14;\n
    v12[98] = __ROL__(v21, 4) ^ 197;\n
    v12[99] = __ROL__(v20, 4) ^ 124;\n
    v12[100] = __ROL__(rsi<8>, 4) ^ 51;\n
    *(&v12[101]) = __ROL__(v16, 1) ^ 234;\n
    v12[102] = __ROL__(rdi<8>, 6) ^ 161;\n
    v34 = v1;\n
    v12[103] = __ROL__(v17, 3) ^ 88;\n
    v4 = __ROR__(v28, 1);\n
    v12[104] = __ROR__(v28, 1) ^ 15;\n
    v12[105] = __ROR__(v21, 1) ^ 198;\n
    v12[106] = __ROR__(v20, 1) ^ 125;\n
    v12[107] = __ROR__(rsi<8>, 1) ^ 52;\n
    *(&v12[108]) = __ROL__(v16, 4) ^ 235;\n
    v12[109] = __ROL__(rdi<8>, 1) ^ 162;\n
    v12[110] = __ROL__(v17, 6) ^ 89;\n
    v35 = v2;\n
    v12[111] = __ROL__(*(&v35), 3) ^ 16;\n
    *(&v5[0]) = __ROL__(v29, 2);\n
    *(&v12[112]) = __ROL__(v29, 2) ^ 199;\n
    v12[113] = __ROL__(v20, 2) ^ 126;\n
    v12[114] = __ROL__(rsi<8>, 2) ^ 53;\n
    *(&v12[115]) = __ROR__(v16, 1) ^ 236;\n
    v12[116] = __ROL__(rdi<8>, 4) ^ 163;\n
    v12[117] = __ROL__(v17, 1) ^ 90;\n
    v12[118] = __ROL__(*(&v35), 6) ^ 17;\n
    v36 = v3;\n
    v12[119] = __ROL__(v21, 3) ^ 200;\n
    v6 = __ROL__(v30, 5);\n
    v12[120] = __ROL__(v30, 5) ^ 127;\n
    v12[121] = __ROL__(rsi<8>, 5) ^ 54;\n
    *(&v12[122]) = __ROL__(v16, 2) ^ 237;\n
    v12[123] = __ROR__(rdi<8>, 1) ^ 164;\n
    v12[124] = __ROL__(v17, 4) ^ 91;\n
    v12[125] = __ROL__(*(&v35), 1) ^ 18;\n
    v12[126] = __ROL__(v36, 6) ^ 201;\n
    v37 = v4;\n
    v12[127] = __ROL__(v37, 3) ^ 128;\n
    v7 = v31;\n
    v12[128] = v31 ^ 55;\n
    *(&v12[129]) = __ROL__(v16, 5) ^ 238;\n
    v0 = __ROL__(rdi<8>, 2);\n
    v12[130] = __ROL__(rdi<8>, 2) ^ 165;\n
    v1 = __ROR__(v17, 1);\n
    v12[131] = __ROR__(v17, 1) ^ 92;\n
    v2 = __ROL__(*(&v35), 4);\n
    v12[132] = __ROL__(*(&v35), 4) ^ 19;\n
    v3 = __ROL__(v36, 1);\n
    v12[133] = __ROL__(v36, 1) ^ 202;\n
    v4 = __ROL__(v37, 6);\n
    v12[134] = __ROL__(v37, 6) ^ 129;\n
    v10[0] = v5;\n
    v5 = __ROL__(v10[0], 3);\n
    v12[135] = __ROL__(v10[0], 3) ^ 56;\n
    v8 = v32;\n
    v12[136] = v32 ^ 239;\n
    v12[137] = __ROL__(v33, 5) ^ 166;\n
    v12[138] = __ROL__(v34, 2) ^ 93;\n
    v12[139] = __ROR__(v35, 1) ^ 20;\n
    v12[140] = __ROL__(v36, 4) ^ 203;\n
    v12[141] = __ROL__(v37, 1) ^ 130;\n
    v12[142] = __ROL__(v10[0], 6) ^ 57;\n
    v12[143] = __ROL__(v6, 3) ^ 240;\n
    return;\n
}\n
", "4223609:sub_407279": null, "4223616:cgc_best_destroy": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_best_destroy(struct_0 *a0)\n
{\n
    return cgc_free(*(&a0->field_8));\n
}\n
", "4223625:sub_407289": null, "4223632:cgc_best_encode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[64];\n
    char field_40;\n
    char field_41;\n
    char field_42;\n
    char field_43;\n
    char field_44;\n
    char field_45;\n
    char field_46;\n
    char field_47;\n
} struct_1;\n
\n
long long cgc_best_encode(struct_0 *a0, char a1[8])\n
{\n
    char v0;  // [bp-0x20]\n
    int tmp_6;  // tmp #6\n
    int tmp_11;  // tmp #11\n
    int tmp_16;  // tmp #16\n
    int tmp_21;  // tmp #21\n
    int tmp_26;  // tmp #26\n
    int tmp_31;  // tmp #31\n
    int tmp_36;  // tmp #36\n
    char v1;  // [bp-0x1f]\n
    char v2;  // [bp-0x1e]\n
    char v3;  // [bp-0x1d]\n
    char v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x1b]\n
    char v6;  // [bp-0x1a]\n
    char v7;  // [bp-0x19]\n
    char v9[72];  // rbx\n
\n
    v9 = a0->field_8;\n
    v0 = a1[0];\n
    v1 = a1[1];\n
    v2 = a1[2];\n
    v3 = a1[3];\n
    v4 = a1[4];\n
    v5 = a1[5];\n
    v6 = a1[6];\n
    v7 = a1[7];\n
    cgc_R(v9, v9 + 1, &v0);\n
    cgc_R(&v9[8], &v9[1 + 8], &v0);\n
    cgc_R(&v9[16], &v9[1 + 16], &v0);\n
    cgc_R(&v9[24], &v9[1 + 24], &v0);\n
    cgc_R(&v9[32], &v9[1 + 32], &v0);\n
    cgc_R(&v9[40], &v9[1 + 40], &v0);\n
    cgc_R(&v9[48], &v9[1 + 48], &v0);\n
    cgc_R(&v9[56], &v9[1 + 56], &v0);\n
    tmp_6 = v1 + v9[65];\n
    tmp_11 = v2 + v9[66];\n
    tmp_16 = v3 ^ v9[67];\n
    tmp_21 = v4 ^ v9[68];\n
    tmp_26 = v5 + v9[69];\n
    tmp_31 = v6 + v9[70];\n
    tmp_36 = v7 ^ v9[71];\n
    a1[0] = v0 ^ v9[64];\n
    a1[1] = tmp_6;\n
    a1[2] = tmp_11;\n
    a1[3] = tmp_16;\n
    a1[4] = tmp_21;\n
    a1[5] = tmp_26;\n
    a1[6] = tmp_31;\n
    a1[7] = tmp_36;\n
    return 0;\n
}\n
", "4223947:sub_4073cb": null, "4223952:cgc_best_decode": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char field_4;\n
    char field_5;\n
    char field_6;\n
    char field_7;\n
    char field_8;\n
    char field_9;\n
    char field_a;\n
    char field_b;\n
    char field_c;\n
    char field_d;\n
    char field_e;\n
    char field_f;\n
    char field_10;\n
    char field_11;\n
    char field_12;\n
    char field_13;\n
    struct struct_0 *field_14;\n
    char field_15;\n
    char field_16;\n
    char field_17;\n
    char field_18;\n
    char field_19;\n
    char field_1a;\n
    char field_1b;\n
    char field_1c;\n
    char field_1d;\n
    char field_1e;\n
    char field_1f;\n
    char field_20;\n
    char field_21;\n
    char field_22;\n
    char field_23;\n
    char field_24;\n
    char field_25;\n
    char field_26;\n
    char field_27;\n
    char field_28;\n
    char field_29;\n
    char field_2a;\n
    char field_2b;\n
    char field_2c;\n
    char field_2d;\n
    char field_2e;\n
    char field_2f;\n
    char field_30;\n
    char field_31;\n
    char field_32;\n
    char field_33;\n
    char field_34;\n
    char field_35;\n
    char field_36;\n
    char field_37;\n
    char field_38;\n
    char field_39;\n
    char field_3a;\n
    char field_3b;\n
    char field_3c;\n
    char field_3d;\n
    char field_3e;\n
    char field_3f;\n
    char field_40;\n
    char field_41;\n
    char field_42;\n
    char field_43;\n
    char field_44;\n
    char field_45;\n
    char field_46;\n
    char field_47;\n
    char field_48;\n
    char field_49;\n
    char field_4a;\n
    char field_4b;\n
    char field_4c;\n
    char field_4d;\n
    char field_4e;\n
    char field_4f;\n
    char field_50;\n
    char field_51;\n
    char field_52;\n
    char field_53;\n
    char field_54;\n
    char field_55;\n
    char field_56;\n
    char field_57;\n
    char field_58;\n
    char field_59;\n
    char field_5a;\n
    char field_5b;\n
    char field_5c;\n
    char field_5d;\n
    char field_5e;\n
    char field_5f;\n
    char field_60;\n
    char field_61;\n
    char field_62;\n
    char field_63;\n
    char field_64;\n
    char field_65;\n
    char field_66;\n
    char field_67;\n
    char field_68;\n
    char field_69;\n
    char field_6a;\n
    char field_6b;\n
    char field_6c;\n
    char field_6d;\n
    char field_6e;\n
    char field_6f;\n
    char field_70;\n
    char field_71;\n
    char field_72;\n
    char field_73;\n
    char field_74;\n
    char field_75;\n
    char field_76;\n
    char field_77;\n
    char field_78;\n
    char field_79;\n
    char field_7a;\n
    char field_7b;\n
    char field_7c;\n
    char field_7d;\n
    char field_7e;\n
    char field_7f;\n
    char field_80;\n
    char field_81;\n
    char field_82;\n
    char field_83;\n
    char field_84;\n
    char field_85;\n
    char field_86;\n
    char field_87;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4265440];\n
    char field_4115e0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[4265184];\n
    char field_4114e0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[4265184];\n
    struct struct_4 *field_4114e0;\n
} struct_4;\n
\n
extern char S;\n
extern char Si;\n
\n
int cgc_best_decode()\n
{\n
    int tmp_83;  // tmp #83\n
    int tmp_98;  // tmp #98\n
    int tmp_104;  // tmp #104\n
    int tmp_132;  // tmp #132\n
    int tmp_161;  // tmp #161\n
    int tmp_170;  // tmp #170\n
    int tmp_30;  // tmp #30\n
    int tmp_56;  // tmp #56\n
    int tmp_305;  // tmp #305\n
    int tmp_85;  // tmp #85\n
    int tmp_94;  // tmp #94\n
    int tmp_141;  // tmp #141\n
    int tmp_147;  // tmp #147\n
    int tmp_153;  // tmp #153\n
    int tmp_168;  // tmp #168\n
    int tmp_174;  // tmp #174\n
    int tmp_183;  // tmp #183\n
    int tmp_14;  // tmp #14\n
    int tmp_264;  // tmp #264\n
    int tmp_73;  // tmp #73\n
    int tmp_82;  // tmp #82\n
    int tmp_97;  // tmp #97\n
    int tmp_100;  // tmp #100\n
    int tmp_103;  // tmp #103\n
    int tmp_120;  // tmp #120\n
    int tmp_389;  // tmp #389\n
    int tmp_149;  // tmp #149\n
    int tmp_158;  // tmp #158\n
    int tmp_448;  // tmp #448\n
    int tmp_186;  // tmp #186\n
    int tmp_199;  // tmp #199\n
    int tmp_202;  // tmp #202\n
    int tmp_41;  // tmp #41\n
    int tmp_289;  // tmp #289\n
    int tmp_70;  // tmp #70\n
    int tmp_79;  // tmp #79\n
    int tmp_348;  // tmp #348\n
    int tmp_126;  // tmp #126\n
    int tmp_138;  // tmp #138\n
    int tmp_159;  // tmp #159\n
    int tmp_162;  // tmp #162\n
    int tmp_165;  // tmp #165\n
    int tmp_1;  // tmp #1\n
    int tmp_245;  // tmp #245\n
    int tmp_48;  // tmp #48\n
    int tmp_60;  // tmp #60\n
    int tmp_69;  // tmp #69\n
    int tmp_81;  // tmp #81\n
    int tmp_84;  // tmp #84\n
    int tmp_87;  // tmp #87\n
    int tmp_90;  // tmp #90\n
    int tmp_107;  // tmp #107\n
    int tmp_111;  // tmp #111\n
    int tmp_370;  // tmp #370\n
    int tmp_127;  // tmp #127\n
    int tmp_136;  // tmp #136\n
    int tmp_145;  // tmp #145\n
    int tmp_173;  // tmp #173\n
    int tmp_189;  // tmp #189\n
    int tmp_192;  // tmp #192\n
    int tmp_201;  // tmp #201\n
    int tmp_204;  // tmp #204\n
    int tmp_39;  // tmp #39\n
    int tmp_50;  // tmp #50\n
    int tmp_59;  // tmp #59\n
    int tmp_68;  // tmp #68\n
    int tmp_77;  // tmp #77\n
    int tmp_89;  // tmp #89\n
    struct_2 *v1;  // rdi\n
    struct_1 *v2;  // rax\n
    char v3[8];  // rsi\n
    char v4;  // dil\n
    char v5;  // bl\n
    char v6;  // r10b\n
    struct_3 *v8;  // rdx\n
    struct_3 *v10;  // rdx\n
    struct_0 *v11;  // rcx\n
    char v12;  // r11b\n
    struct_0 *v13;  // rbx\n
    char v14;  // r15b\n
    char v15;  // r12b\n
    char v16;  // r10b\n
    char v17;  // r13b\n
    unsigned long v18;  // r15\n
    unsigned long long v19;  // rbp\n
    char v20;  // r9b\n
    unsigned long long v21;  // r14\n
    unsigned long v22;  // r12\n
    struct_0 *v23;  // rbp\n
    struct_0 *v25;  // rcx\n
    struct_3 *v26;  // rdx\n
    struct_0 *v27;  // rbx\n
    char v28;  // r12b\n
    char v29;  // r10b\n
    char v30;  // r10b\n
    char v32;  // r9b\n
    char v33;  // r12b\n
    char v35;  // r11b\n
    char v36;  // r15b\n
    struct_4 *v37;  // rbp\n
    char v39;  // r10b\n
    struct_0 *v40;  // rdx\n
    char v41;  // r12b\n
    char v42;  // r15b\n
    char v43;  // r11b\n
    struct_0 *v44;  // rbx\n
    struct_3 *v45;  // rdx\n
    struct_0 *v47;  // rcx\n
    char v48;  // r9b\n
    struct_3 *v51;  // rdx\n
    struct_0 *v52;  // rdx\n
    char v53;  // r12b\n
    char v54;  // r11b\n
    char v55;  // r15b\n
    char v56;  // r13b\n
    char v57;  // r10b\n
    char v58;  // r11b\n
    struct_0 *v59;  // rbx\n
    struct_3 *v60;  // rdx\n
    struct_0 *v61;  // rcx\n
    struct_0 *v62;  // rdx\n
    char v63;  // r12b\n
    char v64;  // r15b\n
    char v65;  // r15b\n
    char v66;  // r11b\n
    struct_0 *v68;  // rbx\n
    char v69;  // r12b\n
    struct_3 *v70;  // rdx\n
    char v72;  // r11b\n
    struct_0 *v73;  // rcx\n
    char v74;  // r9b\n
    struct_0 *v77;  // rdx\n
    char v78;  // r12b\n
    char v79;  // r11b\n
    unsigned long long v80;  // r14\n
    struct_0 *v84;  // rcx\n
    struct_3 *v87;  // rdx\n
    struct_0 *v88;  // rbx\n
    char v89;  // r9b\n
    unsigned long long v90;  // r15\n
    char v91;  // r11b\n
    char v92;  // r10b\n
    char v93;  // r12b\n
    unsigned long long v94;  // rbp\n
    struct_3 *v95;  // rbx\n
    struct_0 *v96;  // rcx\n
\n
    v2 = v1->field_8;\n
    v4 = v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38));\n
    v5 = (v3[0] ^ v2->field_35) - (v3[1] - v2->field_36) - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a));\n
    v6 = v3[1] - v2->field_36 - ((v3[0] ^ v2->field_35) - (v3[1] - v2->field_36) + v3[5] - v2->field_3a - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a)));\n
    tmp_83 = v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)) - (rdi<8> - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))));\n
    tmp_98 = rdi<8> - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))) - (v5 - (rdi<8> - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))));\n
    tmp_104 = (v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a) - (v5 + v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)) - (rdi<8> - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))));\n
    v8 = tmp_98 ^ v2->field_76;\n
    tmp_132 = *((v8 + &S)) - v2->field_2e;\n
    v10 = v2->field_77 ^ tmp_104;\n
    v11 = tmp_83 - (tmp_104 + v2->field_78);\n
    v12 = v2->field_30 ^ *((v11 + &Si));\n
    tmp_161 = v2->field_31 ^ *(&(&Si)[(v3[7] ^ v2->field_3c) + v2->field_3b + (v3[7] ^ v2->field_3c) + v3[2] + v6 + -1 * v2->field_79 + -1 * v3[6] + -1 * (v3[3] ^ v2->field_38) + -1 * v2->field_37 + -1 * (v3[3] ^ v2->field_38)]);\n
    tmp_170 = *(&(&S)[(v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))) - (v6 - ((v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))))) ^ v2->field_7a]) - v2->field_32;\n
    v13 = (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))) - ((v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))))) - (v3[5] - v2->field_3a - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a)) - (v3[1] - v2->field_36 - ((v3[0] ^ v2->field_35) - (v3[1] - v2->field_36) + v3[5] - v2->field_3a - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a))) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))) - ((v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))))) + v2->field_7c);\n
    v14 = (v2->field_2d ^ (&Si)[v3[6] + v5 + -1 * v2->field_75 + -1 * (v3[7] ^ v2->field_3c) + -1 * v2->field_3b + -1 * rdi<8>]) - tmp_132;\n
    v15 = *((v10 + &S)) - (v2->field_2f + (v2->field_30 ^ *((v11 + &Si))));\n
    *(&v11) = (v2->field_31 ^ *(&(&Si)[(v3[7] ^ v2->field_3c) + v2->field_3b + (v3[7] ^ v2->field_3c) + v3[2] + v6 + -1 * v2->field_79 + -1 * v3[6] + -1 * (v3[3] ^ v2->field_38) + -1 * v2->field_37 + -1 * (v3[3] ^ v2->field_38)])) - (*(&(&S)[(v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))) - (v6 - ((v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c)))))) ^ v2->field_7a]) - v2->field_32);\n
    v16 = ...;\n
    *(&v10) = *(&(&S)[v2->field_7b ^ v3[5] - v2->field_3a - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a)) - (v3[1] - v2->field_36 - ((v3[0] ^ v2->field_35) - (v3[1] - v2->field_36) + v3[5] - v2->field_3a - ((v3[4] ^ v2->field_39) - (v3[5] - v2->field_3a))) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))) - ((v3[3] ^ v2->field_38) - (v3[2] - (v2->field_37 + (v3[3] ^ v2->field_38)) + (v3[7] ^ v2->field_3c) - (v3[6] - (v2->field_3b + (v3[7] ^ v2->field_3c))))))]) - (v2->field_33 + (v2->field_34 ^ *((v13 + &Si))));\n
    v17 = (v2->field_34 ^ *((v13 + &Si))) - *(&v10);\n
    v19 = v18;\n
    *(&v19) = v19 - (tmp_161 - tmp_170);\n
    v20 = *((v8 + &S)) - v2->field_2e - (v18 + v16);\n
    v21 = v19;\n
    tmp_30 = v11 - (v19 + v10 - (v22 - v10));\n
    v23 = r14b<1> - (v22 - v10) - v2->field_6d;\n
    tmp_56 = *(&(&S)[v22 - v10 - (r14b<1> - (v22 - v10)) ^ v2->field_6e]) - v2->field_26;\n
    tmp_305 = (&S)[v2->field_6f ^ tmp_30];\n
    v25 = v10 - (v22 - v10) - (tmp_30 + v2->field_70);\n
    tmp_85 = v2->field_29 ^ *(&(&Si)[v17 + v22 + v20 + -1 * v2->field_71 + -1 * v12]);\n
    tmp_94 = *(&(&S)[v12 - (v22 + v17) - (v20 - (v12 - (v22 + v17))) ^ v2->field_72]) - v2->field_2a;\n
    v26 = v2->field_73 ^ v16 - (v20 + v17 - (v12 - (v22 + v17)));\n
    v27 = v17 - (v12 - (v22 + v17)) - (v16 - (v20 + v17 - (v12 - (v22 + v17))) + v2->field_74);\n
    *(&v19) = (v2->field_25 ^ *((v23 + &Si))) - tmp_56;\n
    v28 = tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si))));\n
    v29 = r14<8>;\n
    tmp_141 = v29 - (tmp_85 - tmp_94);\n
    v30 = v29 - (tmp_85 - tmp_94);\n
    tmp_147 = tmp_56 - ((v2->field_25 ^ *((v23 + &Si))) - tmp_56 + tmp_94 - (tmp_85 - tmp_94));\n
    *(&v23) = tmp_56 - ((v2->field_25 ^ *((v23 + &Si))) - tmp_56 + tmp_94 - (tmp_85 - tmp_94));\n
    tmp_153 = *((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))) - (r12<8> - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))));\n
    tmp_168 = r12<8> - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))) - (v30 - (r12<8> - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))))));\n
    tmp_174 = tmp_85 - tmp_94 - (tmp_141 + *((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))) - (r12<8> - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))))));\n
    *(&v19) = v23 - ((v2->field_28 ^ *((v25 + &Si))) - (tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si)))) + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))))));\n
    v32 = (v2->field_28 ^ *((v25 + &Si))) - (tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si)))) + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))))) - (v23 - ((v2->field_28 ^ *((v25 + &Si))) - (tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si)))) + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))))));\n
    tmp_183 = tmp_147 + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))) - ((v2->field_28 ^ *((v25 + &Si))) - (tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si)))) + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si)))))));\n
    v33 = v2->field_1d ^ *(&(&Si)[*((v26 + &S)) + v30 + -1 * v2->field_65 + -1 * (v2->field_2c ^ *((v27 + &Si))) + -1 * v2->field_2b + -1 * r12<8>]);\n
    v35 = (&S)[tmp_168 ^ v2->field_66] - v2->field_1e;\n
    v36 = tmp_94 - (tmp_85 - tmp_94) - tmp_183;\n
    v37 = v2->field_67 ^ tmp_174;\n
    *(&v37) = *((v37 + &S));\n
    v39 = v2->field_20 ^ (&Si)[tmp_153 - (tmp_174 + v2->field_68)];\n
    tmp_14 = *(&(&S)[v32 ^ v2->field_6a]) - v2->field_22;\n
    tmp_264 = *(&(&S)[v2->field_6b ^ v36]);\n
    v40 = (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))) - ((v2->field_28 ^ *((v25 + &Si))) - (tmp_305 - (v2->field_27 + (v2->field_28 ^ *((v25 + &Si)))) + (v2->field_2c ^ *((v27 + &Si))) - (*((v26 + &S)) - (v2->field_2b + (v2->field_2c ^ *((v27 + &Si))))))) - (v36 + v2->field_6c);\n
    v41 -= v43;\n
    *(&v37) = v37 - (v2->field_1f + v39);\n
    v42 = r12<8> - ((v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - (*(&(&S)[v32 ^ v2->field_6a]) - v2->field_22));\n
    v43 -= v41 - v43 + *(&(&S)[v32 ^ v2->field_6a]) - v2->field_22 - ((v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - (*(&(&S)[v32 ^ v2->field_6a]) - v2->field_22));\n
    tmp_73 = tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))) - (v37 - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))));\n
    tmp_82 = (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))) - (v39 - (v37 - (v2->field_1f + v39) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))));\n
    tmp_94 = (v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - (*(&(&S)[v32 ^ v2->field_6a]) - v2->field_22) - (v42 + tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))) - (v37 - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))));\n
    tmp_97 = v43 - (v39 - (v37 - (v2->field_1f + v39) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))));\n
    tmp_100 = v39 - (v37 - (v2->field_1f + v39) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))) - (v43 - (v39 - (v37 - (v2->field_1f + v39) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))))));\n
    tmp_103 = v43 - (v41 - v43 + *(&(&S)[v32 ^ v2->field_6a]) - v2->field_22 - ((v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - (*(&(&S)[v32 ^ v2->field_6a]) - v2->field_22))) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))) - (v39 - (v37 - (v2->field_1f + v39) + (v2->field_24 ^ *((v40 + &Si))) - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))));\n
    v44 = v42 - (v37 - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si)))))) - v2->field_5d;\n
    v45 = v37 - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))) - (v42 - (v37 - (tmp_264 - (v2->field_23 + (v2->field_24 ^ *((v40 + &Si))))))) ^ v2->field_5e;\n
    tmp_120 = *((v45 + &S)) - v2->field_16;\n
    tmp_389 = (&S)[v2->field_5f ^ tmp_94];\n
    v47 = tmp_73 - (tmp_94 + v2->field_60);\n
    v48 = v2->field_18 ^ *((v47 + &Si));\n
    tmp_149 = v2->field_19 ^ (&Si)[tmp_97 - v2->field_61];\n
    tmp_158 = (&S)[tmp_100 ^ v2->field_62] - v2->field_1a;\n
    v51 = v2->field_63 ^ tmp_14 - ((v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - tmp_14) - tmp_103;\n
    tmp_448 = *((v51 + &S));\n
    v52 = tmp_82 - (tmp_14 - ((v2->field_21 ^ *(&(&Si)[v19 + -1 * v2->field_69])) - tmp_14) - tmp_103 + v2->field_64);\n
    v53 = (v2->field_15 ^ *((v44 + &Si))) - tmp_120;\n
    tmp_186 = tmp_389 - (v2->field_17 + (v2->field_18 ^ *((v47 + &Si))));\n
    v54 = tmp_389 - (v2->field_17 + (v2->field_18 ^ *((v47 + &Si))));\n
    *(&v47) = tmp_149 - tmp_158;\n
    v55 = tmp_158 - (tmp_149 - tmp_158);\n
    tmp_199 = tmp_448 - (v2->field_1b + (v2->field_1c ^ *((v52 + &Si))));\n
    tmp_202 = (v2->field_1c ^ *((v52 + &Si))) - (tmp_448 - (v2->field_1b + (v2->field_1c ^ *((v52 + &Si)))));\n
    v56 = (v2->field_1c ^ *((v52 + &Si))) - (tmp_448 - (v2->field_1b + (v2->field_1c ^ *((v52 + &Si)))));\n
    *(&v19) = r12<8> - (tmp_149 - tmp_158);\n
    *(&v37) = tmp_120 - ((v2->field_15 ^ *((v44 + &Si))) - tmp_120 + tmp_158 - (tmp_149 - tmp_158));\n
    *(&v52) = v43 - (tmp_448 - (v2->field_1b + (v2->field_1c ^ *((v52 + &Si)))));\n
    v57 = tmp_199 - (v43 - tmp_199);\n
    v58 = tmp_186 + tmp_202;\n
    v59 = v19 - v52 - v2->field_55;\n
    v60 = v52 - (v19 - v52) ^ v2->field_56;\n
    tmp_41 = *((v60 + &S)) - *(&v2->field_14 + 1);\n
    tmp_289 = *(&(&S)[v2->field_57 ^ v47 - (v19 + v57)]);\n
    v61 = v57 - (v47 - (v19 + v57) + v2->field_58);\n
    tmp_70 = *(&v2->field_14 + 4) ^ *((v37 - v48 + v58 - v2->field_59 + &Si));\n
    tmp_79 = *(&(&S)[v48 - v58 - (v37 - (v48 - v58)) ^ v2->field_5a]) - *(&v2->field_14 + 5);\n
    tmp_348 = *(&(&S)[v2->field_5b ^ v55 - (v37 + v56 - (v48 - v58))]);\n
    v62 = v56 - (v48 - v58) - (v55 - (v37 + v56 - (v48 - v58)) + v2->field_5c);\n
    v63 = (v2->field_14 ^ *((v59 + &Si))) - tmp_41;\n
    *(&v37) = tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si))));\n
    v64 = r12<8>;\n
    tmp_126 = v64 - (tmp_70 - tmp_79);\n
    v65 = v64 - (tmp_70 - tmp_79);\n
    v66 = tmp_41 - ((v2->field_14 ^ *((v59 + &Si))) - tmp_41 + tmp_79 - (tmp_70 - tmp_79));\n
    tmp_138 = tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))) - (v37 - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))));\n
    tmp_159 = tmp_70 - tmp_79 - (tmp_126 + tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))) - (v37 - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))))));\n
    tmp_162 = v43 - ((*(&v2->field_14 + 3) ^ *((v61 + &Si))) - (tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si)))) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))))));\n
    tmp_165 = (*(&v2->field_14 + 3) ^ *((v61 + &Si))) - (tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si)))) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))))) - (v43 - ((*(&v2->field_14 + 3) ^ *((v61 + &Si))) - (tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si)))) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))))));\n
    tmp_168 = tmp_41 - ((v2->field_14 ^ *((v59 + &Si))) - tmp_41 + tmp_79 - (tmp_70 - tmp_79)) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))) - ((*(&v2->field_14 + 3) ^ *((v61 + &Si))) - (tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si)))) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))))));\n
    v68 = v42 - (v37 - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si)))))) - v2->field_4d;\n
    v69 = v2->field_10 ^ *((v68 + &Si));\n
    v70 = v37 - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))) - (v42 - (v37 - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))))) ^ v2->field_4e;\n
    *(&v37) = *((v70 + &S)) - v2->field_11;\n
    *(&v19) = tmp_79 - (tmp_70 - tmp_79) - tmp_168;\n
    v72 = (&S)[v2->field_4f ^ tmp_159];\n
    v73 = tmp_138 - (tmp_159 + v2->field_50);\n
    v74 = v2->field_13 ^ *((v73 + &Si));\n
    *(&v73) = (&v2->field_13)[1] ^ (&Si)[tmp_162 - v2->field_51];\n
    tmp_1 = (&S)[tmp_165 ^ v2->field_52] - (&v2->field_13)[2];\n
    tmp_245 = *(&(&S)[v2->field_53 ^ v19]);\n
    v77 = (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))) - ((*(&v2->field_14 + 3) ^ *((v61 + &Si))) - (tmp_289 - (*(&v2->field_14 + 2) + (*(&v2->field_14 + 3) ^ *((v61 + &Si)))) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))) - (tmp_348 - (*(&v2->field_14 + 6) + (*(&v2->field_14 + 7) ^ *((v62 + &Si))))))) - (v19 + v2->field_54);\n
    v78 -= v37;\n
    v79 -= v2->field_12 + v74;\n
    v80 = r12<8>;\n
    tmp_48 = r14b<1> - (v73 - tmp_1);\n
    *(&v80) = r14b<1> - (v73 - tmp_1);\n
    *(&v37) = v37 - (v78 - v37 + tmp_1 - (v73 - tmp_1));\n
    tmp_60 = tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))) - (v43 - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))));\n
    tmp_69 = ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))) - (v74 - (v79 - (v2->field_12 + v74) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))));\n
    tmp_81 = v73 - tmp_1 - (tmp_48 + tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))) - (v43 - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))));\n
    tmp_84 = v37 - (v74 - (v79 - (v2->field_12 + v74) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))));\n
    tmp_87 = v74 - (v79 - (v2->field_12 + v74) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))) - (v37 - (v74 - (v79 - (v2->field_12 + v74) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))))));\n
    tmp_90 = v37 - (v78 - v37 + tmp_1 - (v73 - tmp_1)) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))) - (v74 - (v79 - (v2->field_12 + v74) + ((&v2->field_13)[4] ^ *((v77 + &Si))) - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))));\n
    tmp_98 = v2->field_8 ^ (&Si)[r14<8> - (v43 - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si)))))) - v2->field_45];\n
    tmp_107 = (&S)[v43 - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))) - (r14<8> - (v43 - (tmp_245 - ((&v2->field_13)[3] + ((&v2->field_13)[4] ^ *((v77 + &Si))))))) ^ v2->field_46] - v2->field_9;\n
    tmp_111 = tmp_1 - (v73 - tmp_1) - tmp_90;\n
    tmp_370 = (&S)[v2->field_47 ^ tmp_81];\n
    v84 = tmp_60 - (tmp_81 + v2->field_48);\n
    tmp_127 = v2->field_b ^ *((v84 + &Si));\n
    tmp_136 = v2->field_c ^ (&Si)[tmp_84 - v2->field_49];\n
    tmp_145 = (&S)[tmp_87 ^ v2->field_4a] - v2->field_d;\n
    v87 = v2->field_4b ^ tmp_111;\n
    v88 = tmp_69 - (tmp_111 + v2->field_4c);\n
    *(&v80) = tmp_98 - tmp_107;\n
    tmp_173 = tmp_370 - (v2->field_a + (v2->field_b ^ *((v84 + &Si))));\n
    *(&v37) = tmp_370 - (v2->field_a + (v2->field_b ^ *((v84 + &Si))));\n
    *(&v84) = tmp_136 - tmp_145;\n
    v89 = tmp_145 - (tmp_136 - tmp_145);\n
    tmp_189 = (v2->field_f ^ *((v88 + &Si))) - (*((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si)))));\n
    v90 = r14<8>;\n
    tmp_192 = r15b<1> - (tmp_136 - tmp_145);\n
    *(&v90) = r15b<1> - (tmp_136 - tmp_145);\n
    v91 = tmp_107 - (tmp_98 - tmp_107 + tmp_145 - (tmp_136 - tmp_145));\n
    tmp_201 = v37 - (*((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si)))));\n
    tmp_204 = *((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si)))) - (v37 - (*((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si))))));\n
    *(&v87) = *((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si)))) - (v37 - (*((v87 + &S)) - (v2->field_e + (v2->field_f ^ *((v88 + &Si))))));\n
    v92 = tmp_127 - (tmp_173 + tmp_189);\n
    v93 = tmp_189 - (tmp_127 - (tmp_173 + tmp_189));\n
    v94 = r15<8>;\n
    *(&v90) = r15<8> - tmp_201;\n
    *(&v88) = tmp_201 - (r15<8> - tmp_201);\n
    *(&v90) = tmp_192 + tmp_204;\n
    v95 = v88 ^ v2->field_3e;\n
    tmp_30 = *((v95 + &S)) - v2->field_1;\n
    tmp_39 = *(&(&S)[v2->field_3f ^ v84 - v90]) - v2->field_2;\n
    v96 = v87 - (v84 - v90 + v2->field_40);\n
    tmp_50 = v2->field_3 ^ *((v96 + &Si));\n
    tmp_59 = v2->field_4 ^ *(&(&Si)[v43 + -1 * v2->field_41 + -1 * v92]);\n
    tmp_68 = *(&(&S)[v92 - (v43 - v92) ^ v2->field_42]) - v2->field_5;\n
    tmp_77 = *(&(&S)[v2->field_43 ^ v89 - (v91 + v93)]) - v2->field_6;\n
    tmp_89 = v2->field_7 ^ *(&(&Si)[v93 + v91 + v93 + -1 * v2->field_44 + -1 * v89]);\n
    v3[0] = v2->field_0 ^ *(&(&Si)[v90 + -1 * v2->field_3d]);\n
    v3[1] = tmp_30;\n
    v3[2] = tmp_39;\n
    v3[3] = tmp_50;\n
    v3[4] = tmp_59;\n
    v3[5] = tmp_68;\n
    v3[6] = tmp_77;\n
    v3[7] = tmp_89;\n
    return;\n
}\n
", "4225762:sub_407ae2": null, "4225776:cgc_R": "typedef struct struct_1 {\n
    char padding_0[4265184];\n
    char field_4114e0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char field_4;\n
    char field_5;\n
    struct struct_0 *field_6;\n
    char field_7;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[4265440];\n
    char field_4115e0;\n
} struct_0;\n
\n
extern char S;\n
extern char Si;\n
\n
int cgc_R()\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_17;  // tmp #17\n
    int tmp_29;  // tmp #29\n
    int tmp_40;  // tmp #40\n
    int tmp_51;  // tmp #51\n
    int tmp_62;  // tmp #62\n
    int tmp_73;  // tmp #73\n
    int tmp_84;  // tmp #84\n
    int tmp_95;  // tmp #95\n
    int tmp_100;  // tmp #100\n
    int tmp_114;  // tmp #114\n
    int tmp_128;  // tmp #128\n
    int tmp_131;  // tmp #131\n
    int tmp_142;  // tmp #142\n
    unsigned long v2;  // rbx\n
    char v3[8];  // rdi\n
    char v4[8];  // rdx\n
    struct_1 *v5;  // rax\n
    struct_2 *v6;  // rsi\n
    char v7;  // r10b\n
    struct_0 *v8;  // rax\n
    struct_0 *v9;  // rax\n
    char v10;  // r14b\n
    struct_1 *v11;  // rax\n
    struct_1 *v12;  // rax\n
    char v13;  // r15b\n
    struct_0 *v14;  // rbx\n
    struct_0 *v15;  // rcx\n
    char v17;  // r11b\n
    char v20;  // r10b\n
    char v21;  // sil\n
    char v24;  // dil\n
    char v25;  // r14b\n
    char v28;  // bl\n
    char v29;  // r11b\n
    char v32;  // al\n
\n
    v0 = v2;\n
    v5 = v3[0] ^ v4[0];\n
    tmp_17 = v6->field_0 + *((v5 + &S));\n
    v7 = v6->field_0 + *((v5 + &S));\n
    v4[0] = v6->field_0 + *((v5 + &S));\n
    v8 = v3[1] + v4[1];\n
    tmp_29 = v6->field_1 ^ *((v8 + &Si));\n
    v4[1] = v6->field_1 ^ *((v8 + &Si));\n
    v9 = v3[2] + v4[2];\n
    tmp_40 = v6->field_2 ^ *((v9 + &Si));\n
    v10 = v6->field_2 ^ *((v9 + &Si));\n
    v4[2] = v6->field_2 ^ *((v9 + &Si));\n
    v11 = v3[3] ^ v4[3];\n
    tmp_51 = v6->field_3 + *((v11 + &S));\n
    v4[3] = v6->field_3 + *((v11 + &S));\n
    v12 = v3[4] ^ v4[4];\n
    tmp_62 = v6->field_4 + *((v12 + &S));\n
    v13 = v6->field_4 + *((v12 + &S));\n
    v4[4] = v6->field_4 + *((v12 + &S));\n
    v14 = v3[5] + v4[5];\n
    tmp_73 = v6->field_5 ^ *((v14 + &Si));\n
    v4[5] = v6->field_5 ^ *((v14 + &Si));\n
    v15 = v3[6] + v4[6];\n
    tmp_84 = (&v6->field_5)[1] ^ *((v15 + &Si));\n
    *(&v14) = (&v6->field_5)[1] ^ *((v15 + &Si));\n
    v4[6] = (&v6->field_5)[1] ^ *((v15 + &Si));\n
    tmp_95 = (&v6->field_5)[2] + (&S)[v3[7] ^ v4[7]];\n
    v17 = v7 * 2;\n
    tmp_100 = v17 + tmp_29;\n
    v20 = v10 * 2;\n
    v21 = v13 * 2;\n
    tmp_114 = v21 + tmp_73;\n
    v24 = v14 * 2;\n
    v25 = (v17 + tmp_29) * 2;\n
    tmp_128 = v25 + v20 + tmp_51;\n
    tmp_131 = v20 + tmp_51 + tmp_100;\n
    v28 = (v21 + tmp_73) * 2;\n
    v29 = (tmp_29 + tmp_17) * 2;\n
    tmp_142 = v29 + tmp_51 + tmp_40;\n
    v32 = (tmp_73 + tmp_62) * 2;\n
    v4[1] = v28 + v24 + tmp_95 + tmp_128;\n
    v4[0] = (v25 + v20 + tmp_51) * 2 + v28 + v24 + tmp_95;\n
    v4[3] = v32 + tmp_95 + tmp_84 + tmp_142;\n
    v4[2] = (v29 + tmp_51 + tmp_40) * 2 + v32 + tmp_95 + tmp_84;\n
    v4[5] = v24 + tmp_95 + tmp_114 + tmp_131;\n
    v4[4] = (v20 + tmp_51 + tmp_100) * 2 + v24 + tmp_95 + tmp_114;\n
    v4[7] = tmp_95 + tmp_84 + tmp_73 + tmp_62 + tmp_51 + tmp_40 + tmp_29 + tmp_17;\n
    v4[6] = (tmp_51 + tmp_40 + tmp_29 + tmp_17) * 2 + tmp_95 + tmp_84 + tmp_73 + tmp_62;\n
    return;\n
}\n
", "4226108:sub_407c3c": null, "4226112:cgc_coffee_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_coffee_init(struct_0 *a0, unsigned int *a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned int *v3;  // rbx\n
    unsigned int *v4;  // rax\n
    unsigned long v5;  // rdx\n
    void* v6;  // rsi, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = cgc_malloc(0x100);\n
    a0->field_8 = v4;\n
    if (!v4)\n
        return 1;\n
    v5 = 0;\n
    v6 = 0;\n
    do\n
    {\n
        v4[2 * v5] = v3[v6 & 2] + v6;\n
        v4[1 + 2 * v5] = v3[(v6 + 1367130551 >> 14) & 3] + v6 + 1367130551;\n
        v6 = v6 - 1560706194;\n
        v5 += 1;\n
    } while (v5 != 32);\n
    return 0;\n
}\n
", "4226237:sub_407cbd": null, "4226240:cgc_coffee_destroy": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_coffee_destroy(struct_0 *a0)\n
{\n
    return cgc_free(*(&a0->field_8));\n
}\n
", "4226249:sub_407cc9": null, "4226256:cgc_coffee_encode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
    unsigned int field_5c;\n
    unsigned int field_60;\n
    unsigned int field_64;\n
    unsigned int field_68;\n
    unsigned int field_6c;\n
    unsigned int field_70;\n
    unsigned int field_74;\n
    unsigned int field_78;\n
    unsigned int field_7c;\n
    unsigned int field_80;\n
    unsigned int field_84;\n
    unsigned int field_88;\n
    unsigned int field_8c;\n
    unsigned int field_90;\n
    unsigned int field_94;\n
    unsigned int field_98;\n
    unsigned int field_9c;\n
    unsigned int field_a0;\n
    unsigned int field_a4;\n
    unsigned int field_a8;\n
    unsigned int field_ac;\n
    unsigned int field_b0;\n
    unsigned int field_b4;\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
    unsigned int field_c0;\n
    unsigned int field_c4;\n
    unsigned int field_c8;\n
    unsigned int field_cc;\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    unsigned int field_dc;\n
    unsigned int field_e0;\n
    unsigned int field_e4;\n
    unsigned int field_e8;\n
    unsigned int field_ec;\n
    unsigned int field_f0;\n
    unsigned int field_f4;\n
    unsigned int field_f8;\n
    unsigned int field_fc;\n
} struct_1;\n
\n
long long cgc_coffee_encode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned int v1[64];  // r9\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rdi\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rdi\n
    unsigned long long v12;  // rcx\n
    unsigned long long v14;  // rdx\n
    unsigned long long v15;  // rdx\n
    unsigned long long v16;  // rdi\n
    unsigned long long v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    unsigned long long v19;  // rdi\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // rdx\n
    unsigned long long v22;  // rdi\n
    unsigned long long v23;  // rcx\n
    unsigned long long v24;  // rdx\n
    unsigned long long v25;  // rdi\n
    unsigned long long v26;  // rcx\n
    unsigned long long v27;  // rdx\n
    unsigned long long v28;  // rdi\n
    unsigned long long v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    unsigned long long v32;  // rdi\n
    unsigned long long v33;  // rcx\n
    unsigned long long v34;  // rdx\n
    unsigned long long v35;  // rdi\n
    unsigned long long v36;  // rcx\n
    unsigned long long v37;  // rdx\n
    unsigned long long v38;  // rdi\n
    unsigned long long v39;  // rcx\n
    unsigned long long v40;  // rdx\n
    unsigned long long v41;  // rdi\n
    unsigned long long v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned long long v45;  // rdi\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned long long v48;  // rdi\n
    unsigned long long v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    unsigned long long v51;  // rdi\n
    unsigned long long v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned long long v54;  // rdi\n
    unsigned long long v55;  // rcx\n
    unsigned long long v56;  // rdx\n
    unsigned long long v57;  // rdi\n
    unsigned long long v58;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned long long v61;  // rdi\n
    unsigned long long v62;  // rcx\n
    unsigned long long v63;  // rdx\n
    unsigned long long v64;  // rdi\n
    unsigned long long v65;  // rcx\n
    unsigned long long v66;  // rdx\n
\n
    v1 = a0->field_8;\n
    v2 = ((((((a1[1] >> 4) ^ (a1[1] * 8)) + a1[1] ^ v1[0]) + a1[0] >> 4) ^ (((((a1[1] >> 4) ^ (a1[1] * 8)) + a1[1] ^ v1[0]) + a1[0]) * 8)) + (((a1[1] >> 4) ^ (a1[1] * 8)) + a1[1] ^ v1[0]) + a1[0] ^ v1[1]) + a1[1];\n
    v3 = (((v2 >> 4) ^ v2 * 8) + v2 ^ v1[2]) + (((a1[1] >> 4) ^ (a1[1] * 8)) + a1[1] ^ v1[0]) + a1[0];\n
    v5 = ...;\n
    v6 = ...;\n
    v7 = (((v6 >> 4) ^ v6 * 8) + v6 ^ v1[7]) + v5;\n
    v8 = (((v7 >> 4) ^ v7 * 8) + v7 ^ v1[8]) + v6;\n
    v9 = (((v8 >> 4) ^ v8 * 8) + v8 ^ v1[9]) + v7;\n
    v10 = (((v9 >> 4) ^ v9 * 8) + v9 ^ v1[10]) + v8;\n
    v11 = (((v10 >> 4) ^ v10 * 8) + v10 ^ v1[11]) + v9;\n
    v12 = (((v11 >> 4) ^ v11 * 8) + v11 ^ v1[12]) + v10;\n
    v14 = ((v12 >> 4) ^ v12 * 8) + v12 ^ v1[13];\n
    v15 = v14 + v11;\n
    v16 = (((v15 >> 4) ^ v15 * 8) + v15 ^ v1[14]) + v12;\n
    v17 = (((v16 >> 4) ^ v16 * 8) + v16 ^ v1[15]) + v15;\n
    v18 = (((v17 >> 4) ^ v17 * 8) + v17 ^ v1[16]) + v16;\n
    v19 = (((v18 >> 4) ^ v18 * 8) + v18 ^ v1[17]) + v17;\n
    v20 = (((v19 >> 4) ^ v19 * 8) + v19 ^ v1[18]) + v18;\n
    v21 = (((v20 >> 4) ^ v20 * 8) + v20 ^ v1[19]) + v19;\n
    v22 = (((v21 >> 4) ^ v21 * 8) + v21 ^ v1[20]) + v20;\n
    v23 = (((v22 >> 4) ^ v22 * 8) + v22 ^ v1[21]) + v21;\n
    v24 = (((v23 >> 4) ^ v23 * 8) + v23 ^ v1[22]) + v22;\n
    v25 = (((v24 >> 4) ^ v24 * 8) + v24 ^ v1[23]) + v23;\n
    v26 = (((v25 >> 4) ^ v25 * 8) + v25 ^ v1[24]) + v24;\n
    v27 = (((v26 >> 4) ^ v26 * 8) + v26 ^ v1[25]) + v25;\n
    v28 = (((v27 >> 4) ^ v27 * 8) + v27 ^ v1[26]) + v26;\n
    v30 = (((v28 >> 4) ^ v28 * 8) + v28 ^ v1[27]) + v27;\n
    v31 = (((v30 >> 4) ^ v30 * 8) + v30 ^ v1[28]) + v28;\n
    v32 = (((v31 >> 4) ^ v31 * 8) + v31 ^ v1[29]) + v30;\n
    v33 = (((v32 >> 4) ^ v32 * 8) + v32 ^ v1[30]) + v31;\n
    v34 = (((v33 >> 4) ^ v33 * 8) + v33 ^ v1[31]) + v32;\n
    v35 = (((v34 >> 4) ^ v34 * 8) + v34 ^ v1[32]) + v33;\n
    v36 = (((v35 >> 4) ^ v35 * 8) + v35 ^ v1[33]) + v34;\n
    v37 = (((v36 >> 4) ^ v36 * 8) + v36 ^ v1[34]) + v35;\n
    v38 = (((v37 >> 4) ^ v37 * 8) + v37 ^ v1[35]) + v36;\n
    v39 = (((v38 >> 4) ^ v38 * 8) + v38 ^ v1[36]) + v37;\n
    v40 = (((v39 >> 4) ^ v39 * 8) + v39 ^ v1[37]) + v38;\n
    v41 = (((v40 >> 4) ^ v40 * 8) + v40 ^ v1[38]) + v39;\n
    v42 = (((v41 >> 4) ^ v41 * 8) + v41 ^ v1[39]) + v40;\n
    v43 = (((v42 >> 4) ^ v42 * 8) + v42 ^ v1[40]) + v41;\n
    v45 = (((v43 >> 4) ^ v43 * 8) + v43 ^ v1[41]) + v42;\n
    v46 = (((v45 >> 4) ^ v45 * 8) + v45 ^ v1[42]) + v43;\n
    v47 = (((v46 >> 4) ^ v46 * 8) + v46 ^ v1[43]) + v45;\n
    v48 = (((v47 >> 4) ^ v47 * 8) + v47 ^ v1[44]) + v46;\n
    v49 = (((v48 >> 4) ^ v48 * 8) + v48 ^ v1[45]) + v47;\n
    v50 = (((v49 >> 4) ^ v49 * 8) + v49 ^ v1[46]) + v48;\n
    v51 = (((v50 >> 4) ^ v50 * 8) + v50 ^ v1[47]) + v49;\n
    v52 = (((v51 >> 4) ^ v51 * 8) + v51 ^ v1[48]) + v50;\n
    v53 = (((v52 >> 4) ^ v52 * 8) + v52 ^ v1[49]) + v51;\n
    v54 = (((v53 >> 4) ^ v53 * 8) + v53 ^ v1[50]) + v52;\n
    v55 = (((v54 >> 4) ^ v54 * 8) + v54 ^ v1[51]) + v53;\n
    v56 = (((v55 >> 4) ^ v55 * 8) + v55 ^ v1[52]) + v54;\n
    v57 = (((v56 >> 4) ^ v56 * 8) + v56 ^ v1[53]) + v55;\n
    v58 = (((v57 >> 4) ^ v57 * 8) + v57 ^ v1[54]) + v56;\n
    v60 = (((v58 >> 4) ^ v58 * 8) + v58 ^ v1[55]) + v57;\n
    v61 = (((v60 >> 4) ^ v60 * 8) + v60 ^ v1[56]) + v58;\n
    v62 = (((v61 >> 4) ^ v61 * 8) + v61 ^ v1[57]) + v60;\n
    v63 = (((v62 >> 4) ^ v62 * 8) + v62 ^ v1[58]) + v61;\n
    v64 = (((v63 >> 4) ^ v63 * 8) + v63 ^ v1[59]) + v62;\n
    v65 = (((v64 >> 4) ^ v64 * 8) + v64 ^ v1[60]) + v63;\n
    v66 = ((((((v65 >> 4) ^ v65 * 8) + v65 ^ v1[61]) + v64 >> 4) ^ (((((v65 >> 4) ^ v65 * 8) + v65 ^ v1[61]) + v64) * 8)) + ((((v65 >> 4) ^ v65 * 8) + v65 ^ v1[61]) + v64) ^ v1[62]) + (((v64 >> 4) ^ v64 * 8) + v64 ^ v1[60]) + v63;\n
    a1[0] = (((v66 >> 4) ^ v66 * 8) + v66 ^ v1[63]) + ((((v65 >> 4) ^ v65 * 8) + v65 ^ v1[61]) + v64);\n
    a1[1] = v66;\n
    return 0;\n
}\n
", "4227896:sub_408338": null, "4227904:cgc_coffee_decode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    unsigned int field_50;\n
    unsigned int field_54;\n
    unsigned int field_58;\n
    unsigned int field_5c;\n
    unsigned int field_60;\n
    unsigned int field_64;\n
    unsigned int field_68;\n
    unsigned int field_6c;\n
    unsigned int field_70;\n
    unsigned int field_74;\n
    unsigned int field_78;\n
    unsigned int field_7c;\n
    unsigned int field_80;\n
    unsigned int field_84;\n
    unsigned int field_88;\n
    unsigned int field_8c;\n
    unsigned int field_90;\n
    unsigned int field_94;\n
    unsigned int field_98;\n
    unsigned int field_9c;\n
    unsigned int field_a0;\n
    unsigned int field_a4;\n
    unsigned int field_a8;\n
    unsigned int field_ac;\n
    unsigned int field_b0;\n
    unsigned int field_b4;\n
    unsigned int field_b8;\n
    unsigned int field_bc;\n
    unsigned int field_c0;\n
    unsigned int field_c4;\n
    unsigned int field_c8;\n
    unsigned int field_cc;\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    unsigned int field_dc;\n
    unsigned int field_e0;\n
    unsigned int field_e4;\n
    unsigned int field_e8;\n
    unsigned int field_ec;\n
    unsigned int field_f0;\n
    unsigned int field_f4;\n
    unsigned int field_f8;\n
    unsigned int field_fc;\n
} struct_1;\n
\n
long long cgc_coffee_decode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned int v1[64];  // rcx\n
    unsigned long long v2;  // rax\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rax\n
    unsigned long long v11;  // rdx\n
    unsigned long long v12;  // rax\n
    unsigned long long v13;  // rdx\n
    unsigned long long v14;  // rax\n
    unsigned long long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rax\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rdx\n
    unsigned long long v22;  // rax\n
    unsigned long long v23;  // rdx\n
    unsigned long long v24;  // rax\n
    unsigned long long v25;  // rdx\n
    unsigned long long v26;  // rax\n
    unsigned long long v27;  // rdx\n
    unsigned long long v28;  // rax\n
    unsigned long long v29;  // rdx\n
    unsigned long long v30;  // rax\n
    unsigned long long v31;  // rdx\n
    unsigned long long v32;  // rax\n
    unsigned long long v33;  // rdx\n
    unsigned long long v34;  // rax\n
    unsigned long long v35;  // rdx\n
    unsigned long long v36;  // rax\n
    unsigned long long v37;  // rdx\n
    unsigned long long v38;  // rax\n
    unsigned long long v39;  // rdx\n
    unsigned long long v40;  // rax\n
    unsigned long long v41;  // rdx\n
    unsigned long long v42;  // rax\n
    unsigned long long v43;  // rdx\n
    unsigned long long v44;  // rax\n
    unsigned long long v45;  // rdx\n
    unsigned long long v46;  // rax\n
    unsigned long long v47;  // rdx\n
    unsigned long long v48;  // rax\n
    unsigned long long v49;  // rdx\n
    unsigned long long v50;  // rax\n
    unsigned long long v51;  // rdx\n
    unsigned long long v52;  // rax\n
    unsigned long long v53;  // rdx\n
    unsigned long long v54;  // rax\n
    unsigned long long v55;  // rdx\n
    unsigned long long v56;  // rax\n
    unsigned long long v57;  // rdx\n
    unsigned long long v58;  // rax\n
    unsigned long long v59;  // rdx\n
    unsigned long long v60;  // rax\n
    unsigned long long v61;  // rdx\n
\n
    v1 = a0->field_8;\n
    v2 = ...;\n
    v4 = ...;\n
    v5 = ...;\n
    v6 = v4 - (((v5 >> 4) ^ v5 * 8) + v5 ^ v1[56]);\n
    v7 = v5 - (((v6 >> 4) ^ v6 * 8) + v6 ^ v1[55]);\n
    v8 = v6 - (((v7 >> 4) ^ v7 * 8) + v7 ^ v1[54]);\n
    v9 = v7 - (((v8 >> 4) ^ v8 * 8) + v8 ^ v1[53]);\n
    v10 = v8 - (((v9 >> 4) ^ v9 * 8) + v9 ^ v1[52]);\n
    v11 = v9 - (((v10 >> 4) ^ v10 * 8) + v10 ^ v1[51]);\n
    v12 = v10 - ((((v11 >> 4) ^ v11 * 8) + v11) ^ v1[50]);\n
    v13 = v11 - (((v12 >> 4) ^ v12 * 8) + v12 ^ v1[49]);\n
    v14 = v12 - (((v13 >> 4) ^ v13 * 8) + v13 ^ v1[48]);\n
    v15 = v13 - (((v14 >> 4) ^ v14 * 8) + v14 ^ v1[47]);\n
    v16 = v14 - (((v15 >> 4) ^ v15 * 8) + v15 ^ v1[46]);\n
    v17 = v15 - (((v16 >> 4) ^ v16 * 8) + v16 ^ v1[45]);\n
    v18 = v16 - (((v17 >> 4) ^ v17 * 8) + v17 ^ v1[44]);\n
    v19 = v17 - (((v18 >> 4) ^ v18 * 8) + v18 ^ v1[43]);\n
    v20 = v18 - (((v19 >> 4) ^ v19 * 8) + v19 ^ v1[42]);\n
    v21 = v19 - (((v20 >> 4) ^ v20 * 8) + v20 ^ v1[41]);\n
    v22 = v20 - (((v21 >> 4) ^ v21 * 8) + v21 ^ v1[40]);\n
    v23 = v21 - (((v22 >> 4) ^ v22 * 8) + v22 ^ v1[39]);\n
    v24 = v22 - (((v23 >> 4) ^ v23 * 8) + v23 ^ v1[38]);\n
    v25 = v23 - (((v24 >> 4) ^ v24 * 8) + v24 ^ v1[37]);\n
    v26 = v24 - (((v25 >> 4) ^ v25 * 8) + v25 ^ v1[36]);\n
    v27 = v25 - (((v26 >> 4) ^ v26 * 8) + v26 ^ v1[35]);\n
    v28 = v26 - (((v27 >> 4) ^ v27 * 8) + v27 ^ v1[34]);\n
    v29 = v27 - (((v28 >> 4) ^ v28 * 8) + v28 ^ v1[33]);\n
    v30 = v28 - (((v29 >> 4) ^ v29 * 8) + v29 ^ v1[32]);\n
    v31 = v29 - (((v30 >> 4) ^ v30 * 8) + v30 ^ v1[31]);\n
    v32 = v30 - (((v31 >> 4) ^ v31 * 8) + v31 ^ v1[30]);\n
    v33 = v31 - (((v32 >> 4) ^ v32 * 8) + v32 ^ v1[29]);\n
    v34 = v32 - (((v33 >> 4) ^ v33 * 8) + v33 ^ v1[28]);\n
    v35 = v33 - (((v34 >> 4) ^ v34 * 8) + v34 ^ v1[27]);\n
    v36 = v34 - (((v35 >> 4) ^ v35 * 8) + v35 ^ v1[26]);\n
    v37 = v35 - (((v36 >> 4) ^ v36 * 8) + v36 ^ v1[25]);\n
    v38 = v36 - (((v37 >> 4) ^ v37 * 8) + v37 ^ v1[24]);\n
    v39 = v37 - (((v38 >> 4) ^ v38 * 8) + v38 ^ v1[23]);\n
    v40 = v38 - (((v39 >> 4) ^ v39 * 8) + v39 ^ v1[22]);\n
    v41 = v39 - (((v40 >> 4) ^ v40 * 8) + v40 ^ v1[21]);\n
    v42 = v40 - (((v41 >> 4) ^ v41 * 8) + v41 ^ v1[20]);\n
    v43 = v41 - (((v42 >> 4) ^ v42 * 8) + v42 ^ v1[19]);\n
    v44 = v42 - (((v43 >> 4) ^ v43 * 8) + v43 ^ v1[18]);\n
    v45 = v43 - (((v44 >> 4) ^ v44 * 8) + v44 ^ v1[17]);\n
    v46 = v44 - (((v45 >> 4) ^ v45 * 8) + v45 ^ v1[16]);\n
    v47 = v45 - (((v46 >> 4) ^ v46 * 8) + v46 ^ v1[15]);\n
    v48 = v46 - (((v47 >> 4) ^ v47 * 8) + v47 ^ v1[14]);\n
    v49 = v47 - (((v48 >> 4) ^ v48 * 8) + v48 ^ v1[13]);\n
    v50 = v48 - (((v49 >> 4) ^ v49 * 8) + v49 ^ v1[12]);\n
    v51 = v49 - (((v50 >> 4) ^ v50 * 8) + v50 ^ v1[11]);\n
    v52 = v50 - (((v51 >> 4) ^ v51 * 8) + v51 ^ v1[10]);\n
    v53 = v51 - (((v52 >> 4) ^ v52 * 8) + v52 ^ v1[9]);\n
    v54 = v52 - (((v53 >> 4) ^ v53 * 8) + v53 ^ v1[8]);\n
    v55 = v53 - (((v54 >> 4) ^ v54 * 8) + v54 ^ v1[7]);\n
    v56 = v54 - (((v55 >> 4) ^ v55 * 8) + v55 ^ v1[6]);\n
    v57 = v55 - (((v56 >> 4) ^ v56 * 8) + v56 ^ v1[5]);\n
    v58 = v56 - (((v57 >> 4) ^ v57 * 8) + v57 ^ v1[4]);\n
    v59 = v57 - (((v58 >> 4) ^ v58 * 8) + v58 ^ v1[3]);\n
    v60 = v58 - (((v59 >> 4) ^ v59 * 8) + v59 ^ v1[2]);\n
    v61 = v59 - (((v60 >> 4) ^ v60 * 8) + v60 ^ v1[1]);\n
    a1[0] = v60 - (((v61 >> 4) ^ v61 * 8) + v61 ^ v1[0]);\n
    a1[1] = v61;\n
    return 0;\n
}\n
", "4229486:sub_40896e": null, "4229488:cgc_dolphin_init": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    unsigned int field_10;\n
    char padding_14[12];\n
    unsigned int field_20;\n
    char padding_24[12];\n
    unsigned int field_30;\n
    char padding_34[12];\n
    unsigned int field_40;\n
    char padding_44[4];\n
    uint128_t field_48;\n
    uint128_t field_58;\n
    uint128_t field_68;\n
    uint128_t field_78;\n
    uint128_t field_88;\n
    uint128_t field_98;\n
    uint128_t field_a8;\n
    uint128_t field_b8;\n
    uint128_t field_c8;\n
    uint128_t field_d8;\n
    uint128_t field_e8;\n
    uint128_t field_f8;\n
    uint128_t field_108;\n
    uint128_t field_118;\n
    uint128_t field_128;\n
    uint128_t field_138;\n
    uint128_t field_148;\n
    uint128_t field_158;\n
    uint128_t field_168;\n
    uint128_t field_178;\n
    uint128_t field_188;\n
    uint128_t field_198;\n
    uint128_t field_1a8;\n
    uint128_t field_1b8;\n
    uint128_t field_1c8;\n
    uint128_t field_1d8;\n
    uint128_t field_1e8;\n
    uint128_t field_1f8;\n
    uint128_t field_208;\n
    uint128_t field_218;\n
    uint128_t field_228;\n
    uint128_t field_238;\n
    uint128_t field_248;\n
    uint128_t field_258;\n
    uint128_t field_268;\n
    uint128_t field_278;\n
    uint128_t field_288;\n
    uint128_t field_298;\n
    uint128_t field_2a8;\n
    uint128_t field_2b8;\n
    uint128_t field_2c8;\n
    uint128_t field_2d8;\n
    uint128_t field_2e8;\n
    uint128_t field_2f8;\n
    uint128_t field_308;\n
    uint128_t field_318;\n
    uint128_t field_328;\n
    uint128_t field_338;\n
    uint128_t field_348;\n
    uint128_t field_358;\n
    uint128_t field_368;\n
    uint128_t field_378;\n
    uint128_t field_388;\n
    uint128_t field_398;\n
    uint128_t field_3a8;\n
    uint128_t field_3b8;\n
    uint128_t field_3c8;\n
    uint128_t field_3d8;\n
    uint128_t field_3e8;\n
    uint128_t field_3f8;\n
    uint128_t field_408;\n
    uint128_t field_418;\n
    uint128_t field_428;\n
    uint128_t field_438;\n
    uint128_t field_448;\n
    uint128_t field_458;\n
    uint128_t field_468;\n
    uint128_t field_478;\n
    uint128_t field_488;\n
    uint128_t field_498;\n
    uint128_t field_4a8;\n
    uint128_t field_4b8;\n
    uint128_t field_4c8;\n
    uint128_t field_4d8;\n
    uint128_t field_4e8;\n
    uint128_t field_4f8;\n
    uint128_t field_508;\n
    uint128_t field_518;\n
    uint128_t field_528;\n
    uint128_t field_538;\n
    uint128_t field_548;\n
    uint128_t field_558;\n
    uint128_t field_568;\n
    uint128_t field_578;\n
    uint128_t field_588;\n
    uint128_t field_598;\n
    uint128_t field_5a8;\n
    uint128_t field_5b8;\n
    uint128_t field_5c8;\n
    uint128_t field_5d8;\n
    uint128_t field_5e8;\n
    uint128_t field_5f8;\n
    uint128_t field_608;\n
    uint128_t field_618;\n
    uint128_t field_628;\n
    uint128_t field_638;\n
    uint128_t field_648;\n
    uint128_t field_658;\n
    uint128_t field_668;\n
    uint128_t field_678;\n
    uint128_t field_688;\n
    uint128_t field_698;\n
    uint128_t field_6a8;\n
    uint128_t field_6b8;\n
    uint128_t field_6c8;\n
    uint128_t field_6d8;\n
    uint128_t field_6e8;\n
    uint128_t field_6f8;\n
    uint128_t field_708;\n
    uint128_t field_718;\n
    uint128_t field_728;\n
    uint128_t field_738;\n
    uint128_t field_748;\n
    uint128_t field_758;\n
    uint128_t field_768;\n
    uint128_t field_778;\n
    uint128_t field_788;\n
    uint128_t field_798;\n
    uint128_t field_7a8;\n
    uint128_t field_7b8;\n
    uint128_t field_7c8;\n
    uint128_t field_7d8;\n
    uint128_t field_7e8;\n
    uint128_t field_7f8;\n
    uint128_t field_808;\n
    uint128_t field_818;\n
    uint128_t field_828;\n
    uint128_t field_838;\n
    uint128_t field_848;\n
    uint128_t field_858;\n
    uint128_t field_868;\n
    uint128_t field_878;\n
    uint128_t field_888;\n
    uint128_t field_898;\n
    uint128_t field_8a8;\n
    uint128_t field_8b8;\n
    uint128_t field_8c8;\n
    uint128_t field_8d8;\n
    uint128_t field_8e8;\n
    uint128_t field_8f8;\n
    uint128_t field_908;\n
    uint128_t field_918;\n
    uint128_t field_928;\n
    uint128_t field_938;\n
    uint128_t field_948;\n
    uint128_t field_958;\n
    uint128_t field_968;\n
    uint128_t field_978;\n
    uint128_t field_988;\n
    uint128_t field_998;\n
    uint128_t field_9a8;\n
    uint128_t field_9b8;\n
    uint128_t field_9c8;\n
    uint128_t field_9d8;\n
    uint128_t field_9e8;\n
    uint128_t field_9f8;\n
    uint128_t field_a08;\n
    uint128_t field_a18;\n
    uint128_t field_a28;\n
    uint128_t field_a38;\n
    uint128_t field_a48;\n
    uint128_t field_a58;\n
    uint128_t field_a68;\n
    uint128_t field_a78;\n
    uint128_t field_a88;\n
    uint128_t field_a98;\n
    uint128_t field_aa8;\n
    uint128_t field_ab8;\n
    uint128_t field_ac8;\n
    uint128_t field_ad8;\n
    uint128_t field_ae8;\n
    uint128_t field_af8;\n
    uint128_t field_b08;\n
    uint128_t field_b18;\n
    uint128_t field_b28;\n
    uint128_t field_b38;\n
    uint128_t field_b48;\n
    uint128_t field_b58;\n
    uint128_t field_b68;\n
    uint128_t field_b78;\n
    uint128_t field_b88;\n
    uint128_t field_b98;\n
    uint128_t field_ba8;\n
    uint128_t field_bb8;\n
    uint128_t field_bc8;\n
    uint128_t field_bd8;\n
    uint128_t field_be8;\n
    uint128_t field_bf8;\n
    uint128_t field_c08;\n
    uint128_t field_c18;\n
    uint128_t field_c28;\n
    uint128_t field_c38;\n
    uint128_t field_c48;\n
    uint128_t field_c58;\n
    uint128_t field_c68;\n
    uint128_t field_c78;\n
    uint128_t field_c88;\n
    uint128_t field_c98;\n
    uint128_t field_ca8;\n
    uint128_t field_cb8;\n
    uint128_t field_cc8;\n
    uint128_t field_cd8;\n
    uint128_t field_ce8;\n
    uint128_t field_cf8;\n
    uint128_t field_d08;\n
    uint128_t field_d18;\n
    uint128_t field_d28;\n
    uint128_t field_d38;\n
    uint128_t field_d48;\n
    uint128_t field_d58;\n
    uint128_t field_d68;\n
    uint128_t field_d78;\n
    uint128_t field_d88;\n
    uint128_t field_d98;\n
    uint128_t field_da8;\n
    uint128_t field_db8;\n
    uint128_t field_dc8;\n
    uint128_t field_dd8;\n
    uint128_t field_de8;\n
    uint128_t field_df8;\n
    uint128_t field_e08;\n
    uint128_t field_e18;\n
    uint128_t field_e28;\n
    uint128_t field_e38;\n
    uint128_t field_e48;\n
    uint128_t field_e58;\n
    uint128_t field_e68;\n
    uint128_t field_e78;\n
    uint128_t field_e88;\n
    uint128_t field_e98;\n
    uint128_t field_ea8;\n
    uint128_t field_eb8;\n
    uint128_t field_ec8;\n
    uint128_t field_ed8;\n
    uint128_t field_ee8;\n
    uint128_t field_ef8;\n
    uint128_t field_f08;\n
    uint128_t field_f18;\n
    uint128_t field_f28;\n
    uint128_t field_f38;\n
    uint128_t field_f48;\n
    uint128_t field_f58;\n
    uint128_t field_f68;\n
    uint128_t field_f78;\n
    uint128_t field_f88;\n
    uint128_t field_f98;\n
    uint128_t field_fa8;\n
    uint128_t field_fb8;\n
    uint128_t field_fc8;\n
    uint128_t field_fd8;\n
    uint128_t field_fe8;\n
    uint128_t field_ff8;\n
    uint128_t field_1008;\n
    uint128_t field_1018;\n
    uint128_t field_1028;\n
    uint128_t field_1038;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_dolphin_init(struct_0 *a0, unsigned int a1[8])\n
{\n
    unsigned long long v0;  // [bp-0x70]\n
    unsigned long long v1;  // [bp-0x68]\n
    unsigned long long v2;  // [bp-0x60]\n
    unsigned long long v3;  // [bp-0x58]\n
    unsigned long long v4;  // [bp-0x50]\n
    unsigned long long v5;  // [bp-0x48]\n
    unsigned long long v6;  // [bp-0x40]\n
    unsigned long long v7;  // [bp-0x38]\n
    struct_1 *v9;  // rax\n
    unsigned long v10;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v14;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v15;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v17;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v18;  // r15, Other Possible Types: unsigned long long\n
\n
    v9 = cgc_malloc(4168);\n
    a0->field_8 = v9;\n
    if (!v9)\n
        return 1;\n
    v0 = &v9->padding_4[4];\n
    *(&v9->field_0) = 129174470650401792560739094110339332876;\n
    v1 = &v9->field_10;\n
    v2 = &v9->padding_14[4];\n
    *(&v9->field_10) = 253798264520875680337247717943732706692;\n
    v3 = &v9->field_20;\n
    v4 = &v9->padding_24[4];\n
    *(&v9->field_20) = 54189586958483687083977213676775777346;\n
    v5 = &v9->field_30;\n
    v6 = &v9->padding_34[4];\n
    *(&v9->field_30) = 280975067997518720719689204582303539722;\n
    v7 = &v9->field_40;\n
    *(&v9->field_40) = 2821340296286171101;\n
    v10 = &(&v9->padding_44)[1];\n
    *(&(&v9->padding_44)[1]) = 40681753049224710526016234122620141971;\n
    *((&v9->field_48 + 8)) = 193852894273428038023527835832168742526;\n
    *((&v9->field_58 + 8)) = 14682227310006952108287134730643227140;\n
    *((&v9->field_68 + 8)) = 105675867760035720076695472440570553699;\n
    *((&v9->field_78 + 8)) = 249917084642823786556793478078222731222;\n
    *((&v9->field_88 + 8)) = 331804792902057814107849105803459013249;\n
    *((&v9->field_98 + 8)) = 193485112751675912078591383323594005695;\n
    *((&v9->field_a8 + 8)) = 309156104901318877480442063839723560202;\n
    *((&v9->field_b8 + 8)) = 320960994101463052185824051240158796561;\n
    *((&v9->field_c8 + 8)) = 332413823615739926040278144725201042184;\n
    *((&v9->field_d8 + 8)) = 5470061000408329271287612949461034548;\n
    *((&v9->field_e8 + 8)) = 218564368869009358144682025242994685486;\n
    *((&v9->field_f8 + 8)) = 105303476068074130819745619137931423391;\n
    *((&v9->field_108 + 8)) = 148839516857263954864991649401851006149;\n
    *((&v9->field_118 + 8)) = 308803311146836629766065600524598557812;\n
    *((&v9->field_128 + 8)) = 287539325497803100684497922636761711125;\n
    *((&v9->field_138 + 8)) = 147679780883872833559696598245189659223;\n
    *((&v9->field_148 + 8)) = 233258455743322880219045927050858978322;\n
    *((&v9->field_158 + 8)) = 255824467169602357313028608775632106630;\n
    *((&v9->field_168 + 8)) = 267264558556909238867559914256271295036;\n
    *((&v9->field_178 + 8)) = 6790532218138862300918291164090641179;\n
    *((&v9->field_188 + 8)) = 203078215872589238055678163574849117193;\n
    *((&v9->field_198 + 8)) = 295145630827650031475479193624081303659;\n
    *((&v9->field_1a8 + 8)) = 44264046586401100355197409237211489480;\n
    *((&v9->field_1b8 + 8)) = 149574437804025862359246680684032421428;\n
    *((&v9->field_1c8 + 8)) = 117866600272496161102218821207649019194;\n
    *((&v9->field_1d8 + 8)) = 129986963539593457802010249343598668115;\n
    *((&v9->field_1e8 + 8)) = 4967413064941939508150171643420619057;\n
    *((&v9->field_1f8 + 8)) = 238474919832441228943898434447920591084;\n
    *((&v9->field_208 + 8)) = 328576901464928538381575975403037543267;\n
    *((&v9->field_218 + 8)) = 280217115206254395306047547403799470308;\n
    *((&v9->field_228 + 8)) = 52797813948752897980769447891251468066;\n
    *((&v9->field_238 + 8)) = 294870446299420074726169736321344152557;\n
    *((&v9->field_248 + 8)) = 264758877353965172475676081428519354198;\n
    *((&v9->field_258 + 8)) = 134812544403760355759797379183268176042;\n
    *((&v9->field_268 + 8)) = 132824479556361703738024483920616578278;\n
    *((&v9->field_278 + 8)) = 107012168180590738404804167347528491187;\n
    *((&v9->field_288 + 8)) = 4909478527050572529896060620793800666;\n
    *((&v9->field_298 + 8)) = 249530845860826112767356613595874248185;\n
    *((&v9->field_2a8 + 8)) = 289694319020233839207796718847754066238;\n
    *((&v9->field_2b8 + 8)) = 71698560489292997060660000118474929051;\n
    *((&v9->field_2c8 + 8)) = 131307659037726537873786178346794607234;\n
    *((&v9->field_2d8 + 8)) = 146523735146381393118607324214796464277;\n
    *((&v9->field_2e8 + 8)) = 29337585402084166066133211510770007915;\n
    *((&v9->field_2f8 + 8)) = 27808236485206813012358395813086780110;\n
    *((&v9->field_308 + 8)) = 23943407606807431638539462801348233353;\n
    *((&v9->field_318 + 8)) = 135502499888221816510928602049705201654;\n
    *((&v9->field_328 + 8)) = 285931752587766459372834077080143712162;\n
    *((&v9->field_338 + 8)) = 286069009367711081551699635372862354645;\n
    *((&v9->field_348 + 8)) = 120907680389843759239277806839694556994;\n
    *((&v9->field_358 + 8)) = 55590635309859314600177354696919926113;\n
    *((&v9->field_368 + 8)) = 109410644588116988324483641272323088617;\n
    *((&v9->field_378 + 8)) = 245018258103279039177707755404927636110;\n
    *((&v9->field_388 + 8)) = 208115823680175814248673050806414972499;\n
    *((&v9->field_398 + 8)) = 208054695032574750065443442053534042425;\n
    *((&v9->field_3a8 + 8)) = 340004212129473889861374017242019526335;\n
    *((&v9->field_3b8 + 8)) = 136210081469660834472560755022333520754;\n
    *((&v9->field_3c8 + 8)) = 335772785008354157900159162790010888201;\n
    *((&v9->field_3d8 + 8)) = 179100126178021766269809293363650352543;\n
    *((&v9->field_3e8 + 8)) = 120720906901306822913083382301195580278;\n
    *((&v9->field_3f8 + 8)) = 88177161947756417372612036977071136770;\n
    *((&v9->field_408 + 8)) = 198431055307500358256950313711360851058;\n
    *((&v9->field_418 + 8)) = 10452915212389483888969455902210326393;\n
    *((&v9->field_428 + 8)) = 213596216248410006225204135745746226667;\n
    v14 = &v9->field_438 + 8;\n
    *((&v9->field_438 + 8)) = 153649953352372075523330046135274349275;\n
    *((&v9->field_448 + 8)) = 38964832464939481268061660957852964385;\n
    *((&v9->field_458 + 8)) = 181748013076172126107651003076332260186;\n
    *((&v9->field_468 + 8)) = 146173643213370168505123158157099950872;\n
    *((&v9->field_478 + 8)) = 221792214930852145290006900784080892660;\n
    *((&v9->field_488 + 8)) = 242075051283475830558967746063600689333;\n
    *((&v9->field_498 + 8)) = 183274466763038092264777401331396726429;\n
    *((&v9->field_4a8 + 8)) = 50722779466340854622985315341479510291;\n
    *((&v9->field_4b8 + 8)) = 65611761599854431967540028347004827331;\n
    *((&v9->field_4c8 + 8)) = 53033535958386389247617124253913238254;\n
    *((&v9->field_4d8 + 8)) = 237137605756811375580700376344802652595;\n
    *((&v9->field_4e8 + 8)) = 96729079942579921927308963727941392324;\n
    *((&v9->field_4f8 + 8)) = 300650225587020400849179672952149104873;\n
    *((&v9->field_508 + 8)) = 62222033333305696744418292215567501281;\n
    *((&v9->field_518 + 8)) = 316971205987070301338728527593588612755;\n
    *((&v9->field_528 + 8)) = 32414758836100595357150836152995929566;\n
    *((&v9->field_538 + 8)) = 152548991199665388953187657845972529065;\n
    *((&v9->field_548 + 8)) = 31024927736826518862297903487811414102;\n
    *((&v9->field_558 + 8)) = 173220497577126509141504457940519715452;\n
    *((&v9->field_568 + 8)) = 283131622841032384489296636057732582988;\n
    *((&v9->field_578 + 8)) = 281328848768184504599754859250672534169;\n
    *((&v9->field_588 + 8)) = 163013020415916845459708378691363950763;\n
    *((&v9->field_598 + 8)) = 141998299799991132739507100657365869916;\n
    *((&v9->field_5a8 + 8)) = 25028952874961087594452205339286041166;\n
    *((&v9->field_5b8 + 8)) = 314300208918641638677371240502822094699;\n
    *((&v9->field_5c8 + 8)) = 189940729465671734308759729899350443473;\n
    *((&v9->field_5d8 + 8)) = 107930927789184107540272658365731333743;\n
    *((&v9->field_5e8 + 8)) = 132242029578666791525508378808169618600;\n
    *((&v9->field_5f8 + 8)) = 14721546985757816121882446226503800768;\n
    *((&v9->field_608 + 8)) = 141406778355491239318799565425050847437;\n
    *((&v9->field_618 + 8)) = 145459758101126865136159704121977839657;\n
    *((&v9->field_628 + 8)) = 230976527319744098163736693379356415903;\n
    *((&v9->field_638 + 8)) = 243869401311950146220447013803933928383;\n
    *((&v9->field_648 + 8)) = 149236011650842586072471235596806762787;\n
    *((&v9->field_658 + 8)) = 306345554077507941852455800210320756286;\n
    *((&v9->field_668 + 8)) = 45910992113863729776653594948400279774;\n
    *((&v9->field_678 + 8)) = 270950362587875888571373727261066984800;\n
    *((&v9->field_688 + 8)) = 299908554729236633683429729128889212917;\n
    *((&v9->field_698 + 8)) = 149529910168851839907162489450926946036;\n
    *((&v9->field_6a8 + 8)) = 236073826386149875590854941345757418209;\n
    *((&v9->field_6b8 + 8)) = 41664935231308048493999350486679328084;\n
    *((&v9->field_6c8 + 8)) = 230665596219799364983499804846925688662;\n
    *((&v9->field_6d8 + 8)) = 187349841655607877890542936014670302942;\n
    *((&v9->field_6e8 + 8)) = 41444158901189791065610761056201828493;\n
    *((&v9->field_6f8 + 8)) = 74563202484358051841642348576526730319;\n
    *((&v9->field_708 + 8)) = 6932108999340431968397337721042929436;\n
    *((&v9->field_718 + 8)) = 202606556862088129232237421388732698692;\n
    *((&v9->field_728 + 8)) = 87496948216822871861618170979434749767;\n
    *((&v9->field_738 + 8)) = 36420849808337381126930493475275437539;\n
    *((&v9->field_748 + 8)) = 247166383072724704699461422108599400039;\n
    *((&v9->field_758 + 8)) = 261602007235007112330765863324034145305;\n
    *((&v9->field_768 + 8)) = 334635224324755390329440789764729861778;\n
    *((&v9->field_778 + 8)) = 92741992086960946985455142364267823997;\n
    *((&v9->field_788 + 8)) = 192159022734931177632320072392929919112;\n
    *((&v9->field_798 + 8)) = 157021343287963127850824721987293986423;\n
    *((&v9->field_7a8 + 8)) = 22451108836072010425898038091062144261;\n
    *((&v9->field_7b8 + 8)) = 197881418156484250227065138428712033714;\n
    *((&v9->field_7c8 + 8)) = 155091257032987828134622201298739214395;\n
    *((&v9->field_7d8 + 8)) = 134845260500426036470413813572870439902;\n
    *((&v9->field_7e8 + 8)) = 142559032470202322338059461389389686468;\n
    *((&v9->field_7f8 + 8)) = 130416617894559395737604679725521133340;\n
    *((&v9->field_808 + 8)) = 157925794944851502437854485588897852526;\n
    *((&v9->field_818 + 8)) = 296707046854885413788522361341918054299;\n
    *((&v9->field_828 + 8)) = 18590385942476382339726498652799226553;\n
    v16 = &v9->field_838 + 8;\n
    *((&v9->field_838 + 8)) = 307523274651589934785085290298534044101;\n
    *((&v9->field_848 + 8)) = 71313030536395664166970856402450044889;\n
    *((&v9->field_858 + 8)) = 184810290729377995565478153171326312830;\n
    *((&v9->field_868 + 8)) = 270089436074865958327795053189935039209;\n
    *((&v9->field_878 + 8)) = 20876203079190458044951823477342544405;\n
    *((&v9->field_888 + 8)) = 299213920674728119023758398056391028821;\n
    *((&v9->field_898 + 8)) = 306739411648558862983289763061652605896;\n
    *((&v9->field_8a8 + 8)) = 67531142924751834843304235088838535381;\n
    *((&v9->field_8b8 + 8)) = 235870585429640999651500851833725129773;\n
    *((&v9->field_8c8 + 8)) = 150238970570625918358329041784364327419;\n
    *((&v9->field_8d8 + 8)) = 255612677166200594820630837813295730567;\n
    *((&v9->field_8e8 + 8)) = 202786272205045437678414235116269417199;\n
    *((&v9->field_8f8 + 8)) = 235026962126930680902890989015434680250;\n
    *((&v9->field_908 + 8)) = 304807927214882651004113455494946222819;\n
    *((&v9->field_918 + 8)) = 147921995968505264831203259315862252033;\n
    *((&v9->field_928 + 8)) = 273694653628601101757120500901541815468;\n
    *((&v9->field_938 + 8)) = 100149194469898735283299379932492284237;\n
    *((&v9->field_948 + 8)) = 129830636092261376705620964999115773601;\n
    *((&v9->field_958 + 8)) = 217004159710356286685377371480097257492;\n
    *((&v9->field_968 + 8)) = 224222248865134103818275691045418828154;\n
    *((&v9->field_978 + 8)) = 77936207420057256707362434145025992645;\n
    *((&v9->field_988 + 8)) = 200603746818806434424309799530639853001;\n
    *((&v9->field_998 + 8)) = 180134765193384195996195956128585088825;\n
    *((&v9->field_9a8 + 8)) = 197334147985212515882032751522338728886;\n
    *((&v9->field_9b8 + 8)) = 321738192199622729974695969287141188589;\n
    *((&v9->field_9c8 + 8)) = 46829387748882978078352419026898736653;\n
    *((&v9->field_9d8 + 8)) = 112233780422736137996857884614869412715;\n
    *((&v9->field_9e8 + 8)) = 6414617477527878936429381822017722884;\n
    *((&v9->field_9f8 + 8)) = 67987904728447984702908514777561441373;\n
    *((&v9->field_a08 + 8)) = 160476726310519675780141801368341370218;\n
    *((&v9->field_a18 + 8)) = 129334587085558942190911816153339309606;\n
    *((&v9->field_a28 + 8)) = 47919611328302609701963692857924216279;\n
    *((&v9->field_a38 + 8)) = 150063614928037866921157289100439040716;\n
    *((&v9->field_a48 + 8)) = 21289983465703828504285126846582677002;\n
    *((&v9->field_a58 + 8)) = 180781276392143730903312391109182922916;\n
    *((&v9->field_a68 + 8)) = 99792396182489734677780409721525157936;\n
    *((&v9->field_a78 + 8)) = 245898418415613962463998968233104401935;\n
    *((&v9->field_a88 + 8)) = 147800666511246283930195495838752487872;\n
    *((&v9->field_a98 + 8)) = 171463444489978135052155783130810566046;\n
    *((&v9->field_aa8 + 8)) = 42138393761636416876252611868787846453;\n
    *((&v9->field_ab8 + 8)) = 139082914044603254077258365491381469395;\n
    *((&v9->field_ac8 + 8)) = 61529458541473670344633556396819726166;\n
    *((&v9->field_ad8 + 8)) = 23441339236244003631519808636293440802;\n
    *((&v9->field_ae8 + 8)) = 291944061756083564509190670774765315820;\n
    *((&v9->field_af8 + 8)) = 245530147031003126606164578675157975734;\n
    *((&v9->field_b08 + 8)) = 297507297096103023900238488294488564599;\n
    *((&v9->field_b18 + 8)) = 241619490648188813520854530226011202955;\n
    *((&v9->field_b28 + 8)) = 83150255666507358328232159395872154165;\n
    *((&v9->field_b38 + 8)) = 262906905930722385094518102569428725609;\n
    *((&v9->field_b48 + 8)) = 187263493726023937399571510783360749924;\n
    *((&v9->field_b58 + 8)) = 244408955936877150888647078061592938294;\n
    *((&v9->field_b68 + 8)) = 78684622036169021826110079062696537128;\n
    *((&v9->field_b78 + 8)) = 162249842965892383957187070898420003626;\n
    *((&v9->field_b88 + 8)) = 247853826747693014395717840869397654838;\n
    *((&v9->field_b98 + 8)) = 115193281968625382679441060804492999929;\n
    *((&v9->field_ba8 + 8)) = 156665866367579305338847176353699302943;\n
    *((&v9->field_bb8 + 8)) = 98169566421508047233491179903009564985;\n
    *((&v9->field_bc8 + 8)) = 307260250541913891455989749016742164642;\n
    *((&v9->field_bd8 + 8)) = 71767782044058138372831603259926691029;\n
    *((&v9->field_be8 + 8)) = 10883340530906736003212127121155131837;\n
    *((&v9->field_bf8 + 8)) = 188431292606287429983551157114706361462;\n
    *((&v9->field_c08 + 8)) = 85568163897504401184544894792539390552;\n
    *((&v9->field_c18 + 8)) = 168939220224429019877926507133642635087;\n
    *((&v9->field_c28 + 8)) = 58858766654050196174390155026378975617;\n
    v18 = &v9->field_c38 + 8;\n
    *((&v9->field_c38 + 8)) = 10810565474372196246031730782115370503;\n
    *((&v9->field_c48 + 8)) = 0xc0c2146197a0d0810fb701e04733ec00;\n
    *((&v9->field_c58 + 8)) = 295097959087058903107687504118939658398;\n
    *((&v9->field_c68 + 8)) = 224276052613427006795831288657432133806;\n
    *((&v9->field_c78 + 8)) = 120997576749583251307267563763852959585;\n
    *((&v9->field_c88 + 8)) = 292935198318243803102068649727965292018;\n
    *((&v9->field_c98 + 8)) = 337602490849236506134776766365414540029;\n
    *((&v9->field_ca8 + 8)) = 231729036880971328799081111626580229450;\n
    *((&v9->field_cb8 + 8)) = 292276891596156708049443618624983858995;\n
    *((&v9->field_cc8 + 8)) = 39103618383740720265755465148321242923;\n
    *((&v9->field_cd8 + 8)) = 228081048179114159279786952799195997906;\n
    *((&v9->field_ce8 + 8)) = 70842385998492693032276634022371456884;\n
    *((&v9->field_cf8 + 8)) = 239074884637210474391861657870646440434;\n
    *((&v9->field_d08 + 8)) = 274047063459109826982711266274507526559;\n
    *((&v9->field_d18 + 8)) = 278069675802008734681766824727208700775;\n
    *((&v9->field_d28 + 8)) = 170878989003044702500589431923239456556;\n
    *((&v9->field_d38 + 8)) = 127856396870132599561470487274946339802;\n
    *((&v9->field_d48 + 8)) = 28688061307753597389964297096140754678;\n
    *((&v9->field_d58 + 8)) = 14236457789564134012556715885256804099;\n
    *((&v9->field_d68 + 8)) = 61404941616337526381131202463453984793;\n
    *((&v9->field_d78 + 8)) = 236400930914364163874024748326119445814;\n
    *((&v9->field_d88 + 8)) = 290943132901756523326798150260472050999;\n
    *((&v9->field_d98 + 8)) = 93144382416133034335569367067124449061;\n
    *((&v9->field_da8 + 8)) = 234843232616799758449796936545438028645;\n
    *((&v9->field_db8 + 8)) = 233815295043885967596834331647178104490;\n
    *((&v9->field_dc8 + 8)) = 269754713312467763280235571612347843818;\n
    *((&v9->field_dd8 + 8)) = 101719407546775689253791477348322198438;\n
    *((&v9->field_de8 + 8)) = 58438889158013460953201160115271005910;\n
    *((&v9->field_df8 + 8)) = 94333127073531910949402489571277160486;\n
    *((&v9->field_e08 + 8)) = 44494898565979704214826204486936600083;\n
    *((&v9->field_e18 + 8)) = 15711505611744113539696766770789368686;\n
    *((&v9->field_e28 + 8)) = 108379163323420887248893510390254918738;\n
    *((&v9->field_e38 + 8)) = 85431664512813003590414902764674141000;\n
    *((&v9->field_e48 + 8)) = 320448725449961831771123202640640784787;\n
    *((&v9->field_e58 + 8)) = 170136413897511648914753946434335959611;\n
    *((&v9->field_e68 + 8)) = 240206457180484982189308202861502781920;\n
    *((&v9->field_e78 + 8)) = 71541009062382900924045593411589750671;\n
    *((&v9->field_e88 + 8)) = 95074681666761348559861478252904645677;\n
    *((&v9->field_e98 + 8)) = 47521163890308098694497447914363725293;\n
    *((&v9->field_ea8 + 8)) = 171962928340927821812942874126567973163;\n
    *((&v9->field_eb8 + 8)) = 241498838511971447913128115840366396788;\n
    *((&v9->field_ec8 + 8)) = 77419036391494997633246187967539402571;\n
    *((&v9->field_ed8 + 8)) = 185462326274315763111302897510151946041;\n
    *((&v9->field_ee8 + 8)) = 316466499462740689522634642873713130807;\n
    *((&v9->field_ef8 + 8)) = 215847450506484067445115822035291413996;\n
    *((&v9->field_f08 + 8)) = 137010235913309595873928643197871686392;\n
    *((&v9->field_f18 + 8)) = 104833083247207516516408854088377625815;\n
    *((&v9->field_f28 + 8)) = 258879118907211471339736429510108369208;\n
    *((&v9->field_f38 + 8)) = 283667976780623794411336831446977813412;\n
    *((&v9->field_f48 + 8)) = 293636962649845887210150796023699499074;\n
    *((&v9->field_f58 + 8)) = 239244646143849356286150228936889976356;\n
    *((&v9->field_f68 + 8)) = 66326825618664047365584842667918206190;\n
    *((&v9->field_f78 + 8)) = 174224638787733931255779680096848974896;\n
    *((&v9->field_f88 + 8)) = 221745134961325151522393644054542143534;\n
    *((&v9->field_f98 + 8)) = 300438093050543994137652522554333351853;\n
    *((&v9->field_fa8 + 8)) = 323601858861980234133191333371970155816;\n
    *((&v9->field_fb8 + 8)) = 125607904712638346318775284291564696230;\n
    *((&v9->field_fc8 + 8)) = 233902603822981432307343372232401820827;\n
    *((&v9->field_fd8 + 8)) = 255887140092625573637061469586267646296;\n
    *((&v9->field_fe8 + 8)) = 285560223490387885257435692478160662375;\n
    *((&v9->field_ff8 + 8)) = 302466958564153603527136377040511549837;\n
    *((&v9->field_1008 + 8)) = 182050667477772849084543164427116660402;\n
    *((&v9->field_1018 + 8)) = 274658209980451554280630648467382034606;\n
    *((&v9->field_1028 + 8)) = 83282983710804482719747089074768728194;\n
    v9->field_0 = 421264140 ^ a1[0];\n
    *(&v9->padding_4[0]) = 1800109600 ^ a1[1];\n
    *(&v9->padding_4[4]) = 2489086769 ^ a1[2];\n
    *(&v9->padding_4[8]) = 1630411037 ^ a1[3];\n
    v9->field_10 = 2270272900 ^ a1[4];\n
    *(&v9->padding_14[0]) = 2556193721 ^ a1[5];\n
    *(&v9->padding_14[4]) = 409553872 ^ a1[6];\n
    *(&v9->padding_14[8]) = 3203384459 ^ a1[7];\n
    v9->field_20 = 2175509570 ^ a1[0];\n
    *(&v9->padding_24[0]) = 1802320676 ^ a1[1];\n
    *(&v9->padding_24[4]) = -232122211 ^ a1[2];\n
    *(&v9->padding_24[8]) = 683968745 ^ a1[3];\n
    v9->field_30 = 3550618122 ^ a1[4];\n
    *(&v9->padding_34[0]) = 2853861867 ^ a1[5];\n
    *(&v9->padding_34[4]) = 3268158320 ^ a1[6];\n
    *(&v9->padding_34[8]) = 3546403943 ^ a1[7];\n
    v9->field_40 = 648146909 ^ a1[0];\n
    *(&v9->padding_44[0]) = 656894477 ^ a1[1];\n
    cgc_dolphin_encode(a0);\n
    cgc_dolphin_encode(a0, v0);\n
    cgc_dolphin_encode(a0, v1);\n
    cgc_dolphin_encode(a0, v2);\n
    cgc_dolphin_encode(a0, v3);\n
    cgc_dolphin_encode(a0, v4);\n
    cgc_dolphin_encode(a0, v5);\n
    cgc_dolphin_encode(a0, v6);\n
    cgc_dolphin_encode(a0, v7);\n
    v12 = -2;\n
    do\n
    {\n
        cgc_dolphin_encode(a0, v10);\n
        v12 += 2;\n
        v10 += 8;\n
    } while (v12 < 254);\n
    v13 = -2;\n
    do\n
    {\n
        cgc_dolphin_encode(a0, v14);\n
        v13 += 2;\n
        v14 += 8;\n
    } while (v13 < 254);\n
    v15 = -2;\n
    do\n
    {\n
        cgc_dolphin_encode(a0, v16);\n
        v15 += 2;\n
        v16 += 8;\n
    } while (v15 < 254);\n
    v17 = -2;\n
    do\n
    {\n
        cgc_dolphin_encode(a0, v18);\n
        v17 += 2;\n
        v18 += 8;\n
    } while (v17 < 254);\n
    return 0;\n
}\n
", "4233972:sub_409af4": null, "4233984:cgc_dolphin_destroy": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_dolphin_destroy(struct_0 *a0)\n
{\n
    return cgc_free(*(&a0->field_8));\n
}\n
", "4233993:sub_409b09": null, "4234000:cgc_dolphin_encode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
long long cgc_dolphin_encode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned int v1[18];  // rax\n
    unsigned long long v2;  // rbx\n
    unsigned long long v3;  // rcx\n
    unsigned long long v4;  // rdx\n
    unsigned long long v6;  // rbx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rbx\n
    unsigned long long v11;  // rcx\n
    unsigned long long v12;  // rdx\n
    unsigned long long v14;  // rbx\n
    unsigned long long v15;  // rcx\n
    unsigned long long v16;  // rdx\n
    unsigned int v18;  // ebx\n
    unsigned long long v19;  // rbx\n
    unsigned int v20;  // edx\n
\n
    v1 = a0->field_8;\n
    v2 = ...;\n
    v3 = ...;\n
    v4 = ...;\n
    v6 = ...;\n
    v7 = (v1[15 + 4 + (v6 >> 16)] + v1[1 + (v6 >> 24)] ^ v1[29 + 8 + v6]) + v1[43 + 12 + v6] ^ v4 ^ v1[7];\n
    v8 = ...;\n
    v10 = ...;\n
    v11 = (v1[15 + 4 + (v10 >> 16)] + v1[1 + (v10 >> 24)] ^ v1[29 + 8 + v10]) + v1[43 + 12 + v10] ^ v8 ^ v1[10];\n
    v12 = ...;\n
    v14 = ...;\n
    v15 = (v1[15 + 4 + (v14 >> 16)] + v1[1 + (v14 >> 24)] ^ v1[29 + 8 + v14]) + v1[43 + 12 + v14] ^ v12 ^ v1[13];\n
    v16 = ...;\n
    v18 = ...;\n
    v19 = (v18 ^ v1[29 + 8 + (v16 >> 8)]) + v1[43 + 12 + v16] ^ v15 ^ v1[15];\n
    v20 = (v1[15 + 4 + (v19 >> 16)] + v1[1 + (v19 >> 24)] ^ v1[29 + 8 + v19]) + v1[43 + 12 + v19] ^ v16 ^ v1[16];\n
    a1[0] = v19 ^ v1[17];\n
    a1[1] = v20;\n
    return 0;\n
}\n
", "4234836:sub_409e54": null, "4234848:cgc_dolphin_decode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
long long cgc_dolphin_decode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned int v1[18];  // rax\n
    unsigned long long v2;  // rcx\n
    unsigned long long v3;  // rdx\n
    unsigned int v4;  // ecx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdx\n
    unsigned int v8;  // ecx\n
    unsigned long long v10;  // rcx\n
    unsigned int v11;  // ebx\n
    unsigned long long v12;  // rdx\n
    unsigned int v13;  // ecx\n
    unsigned long long v15;  // rcx\n
    unsigned long long v16;  // rdx\n
    unsigned int v17;  // ecx\n
    unsigned long long v19;  // rcx\n
    unsigned long long v20;  // rdx\n
    unsigned int v21;  // ecx\n
    unsigned int v25;  // ebx\n
    unsigned int v26;  // edx\n
\n
    v1 = a0->field_8;\n
    v2 = (v1[15 + 4 + ((v1[17] ^ a1[0]) >> 16)] + v1[1 + ((v1[17] ^ a1[0]) >> 24)] ^ v1[29 + 8 + ((v1[17] ^ a1[0]) >> 8)]) + v1[43 + 12 + (v1[17] ^ a1[0])] ^ v1[16] ^ a1[1];\n
    v3 = ...;\n
    v4 = v2 ^ v1[14];\n
    v6 = ...;\n
    v7 = (v1[15 + 4 + (v6 >> 16)] + v1[1 + (v6 >> 24)] ^ v1[29 + 8 + v6]) + v1[43 + 12 + v6] ^ (v1[15 + 4 + (v3 >> 16)] + v1[1 + (v3 >> 24)] ^ v1[29 + 8 + (v3 >> 8)]) + v1[43 + 12 + v3] ^ v4 ^ v1[12];\n
    v8 = v6 ^ v1[11];\n
    v10 = ...;\n
    v11 = (v1[15 + 4 + (v7 >> 16)] + v1[1 + (v7 >> 24)] ^ v1[29 + 8 + (v7 >> 8)]) + v1[43 + 12 + v7] ^ v8 ^ v1[9];\n
    v12 = (v1[15 + 4 + (v10 >> 16)] + v1[1 + (v10 >> 24)] ^ v1[29 + 8 + v10]) + v1[43 + 12 + v10] ^ v11;\n
    v13 = v10 ^ v1[8];\n
    v15 = ...;\n
    v16 = (v1[15 + 4 + (v15 >> 16)] + v1[1 + (v15 >> 24)] ^ v1[29 + 8 + v15]) + v1[43 + 12 + v15] ^ (v1[15 + 4 + (v12 >> 16)] + v1[1 + (v12 >> 24)] ^ v1[29 + 8 + (v12 >> 8)]) + v1[43 + 12 + v12] ^ v13 ^ v1[6];\n
    v17 = v15 ^ v1[5];\n
    v19 = ...;\n
    v20 = (v1[15 + 4 + (v19 >> 16)] + v1[1 + (v19 >> 24)] ^ v1[29 + 8 + v19]) + v1[43 + 12 + v19] ^ (v1[15 + 4 + (v16 >> 16)] + v1[1 + (v16 >> 24)] ^ v1[29 + 8 + (v16 >> 8)]) + v1[43 + 12 + v16] ^ v17 ^ v1[3];\n
    v21 = v19 ^ v1[2];\n
    v25 = (v1[15 + 4 + (v20 >> 16)] + v1[1 + (v20 >> 24)] ^ v1[29 + 8 + (v20 >> 8)]) + v1[43 + 12 + v20] ^ v21 ^ v1[0];\n
    v26 = ...;\n
    a1[0] = v25;\n
    a1[1] = v26;\n
    return 0;\n
}\n
", "4235691:sub_40a1ab": null, "4235696:cgc_faith_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_faith_init(struct_0 *a0, unsigned int a1[4])\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned long v3;  // rax\n
    unsigned short *v4;  // rax\n
    unsigned long v5;  // rcx, Other Possible Types: unsigned long long\n
    unsigned int v6;  // r11d\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ecx\n
    unsigned long long v10;  // rbx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned long long v16;  // rsi\n
    unsigned long long v17;  // r14, Other Possible Types: unsigned long\n
    unsigned long v18;  // r13\n
    unsigned long v19;  // r15, Other Possible Types: unsigned int\n
\n
    v0 = v3;\n
    v4 = cgc_malloc(80);\n
    a0->field_8 = v4;\n
    if (!v4)\n
        return 1;\n
    v5 = a1[0];\n
    v17 = a1[1];\n
    v6 = a1[2];\n
    v1 = a1[3];\n
    v18 = 0;\n
    v19 = 0;\n
    do\n
    {\n
        v7 = v19;\n
        v19 = v5;\n
        v8 = v18 - (2863311531 * v18 >> 33) * 3;\n
        v9 = v6;\n
        if (v8 != 1)\n
        {\n
            v9 = v1 ^ v6;\n
            if (v8)\n
                v9 = v1;\n
        }\n
        v10 = v7 ^ v17 ^ v9;\n
        v11 = (((v10 >> 16) ^ ((((v10 >> 24) ^ (v19 >> 8) ^ v19) + ((v19 >> 16) ^ (v19 >> 24)) + 1 >> 6) + (((v10 >> 24) ^ (v19 >> 8) ^ v19) + ((v19 >> 16) ^ (v19 >> 24)) + 1) * 4)) + ((v19 >> 8) ^ v19) >> 6) + (((v10 >> 16) ^ ((((v10 >> 24) ^ (v19 >> 8) ^ v19) + ((v19 >> 16) ^ (v19 >> 24)) + 1 >> 6) + (((v10 >> 24) ^ (v19 >> 8) ^ v19) + ((v19 >> 16) ^ (v19 >> 24)) + 1) * 4)) + ((v19 >> 8) ^ v19)) * 4;\n
        v12 = v19 + (v10 ^ v11) + 1;\n
        v16 = ...;\n
        v5 = v17;\n
        v17 = v16 + (v12 & 63) * 4;\n
        v4[2 * v18] = ...;\n
        v4[1 + 2 * v18] = v17;\n
        v18 += 1;\n
    } while (v18 != 20);\n
    return 0;\n
}\n
", "4235775:sub_40a1ff": null, "4236030:sub_40a2fe": null, "4236032:cgc_faith_destroy": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_faith_destroy(struct_0 *a0)\n
{\n
    return cgc_free(*(&a0->field_8));\n
}\n
", "4236041:sub_40a309": null, "4236048:cgc_faith_encode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    unsigned short field_a;\n
    unsigned short field_c;\n
    unsigned short field_e;\n
    unsigned short field_10;\n
    unsigned short field_12;\n
    unsigned short field_14;\n
    unsigned short field_16;\n
    unsigned short field_18;\n
    unsigned short field_1a;\n
    unsigned short field_1c;\n
    unsigned short field_1e;\n
    unsigned short field_20;\n
    unsigned short field_22;\n
    unsigned short field_24;\n
    unsigned short field_26;\n
    unsigned short field_28;\n
    unsigned short field_2a;\n
    unsigned short field_2c;\n
    unsigned short field_2e;\n
    unsigned short field_30;\n
    unsigned short field_32;\n
    unsigned short field_34;\n
    unsigned short field_36;\n
    unsigned short field_38;\n
    unsigned short field_3a;\n
    unsigned short field_3c;\n
    unsigned short field_3e;\n
    unsigned short field_40;\n
    unsigned short field_42;\n
    unsigned short field_44;\n
    unsigned short field_46;\n
    unsigned short field_48;\n
    unsigned short field_4a;\n
    unsigned short field_4c;\n
    unsigned short field_4e;\n
} struct_1;\n
\n
long long cgc_faith_encode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned short v1[40];  // r8\n
    unsigned int v2;  // r9d\n
    unsigned int v3;  // r10d\n
    unsigned int v4;  // r11d\n
    unsigned int v5;  // ecx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long long v10;  // r14\n
    unsigned long long v11;  // rcx\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // r11d\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ebx\n
    unsigned long long v19;  // rbx\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rax\n
    unsigned long long v22;  // r9\n
    unsigned long long v23;  // rcx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // edi\n
    unsigned int v29;  // r9d\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // ebx\n
    unsigned long long v33;  // rbx\n
    unsigned long long v34;  // rdi\n
    unsigned long v35;  // rax\n
    unsigned long long v36;  // r10\n
    unsigned long long v37;  // rdx\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // r10d\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // ebx\n
    unsigned long long v45;  // rbx\n
    unsigned long long v46;  // rcx\n
    unsigned long v47;  // rax\n
    unsigned long long v48;  // r11\n
    unsigned long long v49;  // rcx\n
    unsigned int v50;  // ecx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edi\n
    unsigned int v53;  // r11d\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ebx\n
    unsigned long long v57;  // rbx\n
    unsigned long long v58;  // rdx\n
    unsigned long v59;  // rax\n
    unsigned long long v60;  // r9\n
    unsigned long long v61;  // rcx\n
    unsigned int v62;  // ecx\n
    unsigned int v63;  // edx\n
    unsigned int v64;  // edi\n
    unsigned int v65;  // r9d\n
    unsigned int v66;  // ecx\n
    unsigned int v67;  // ebx\n
    unsigned long long v69;  // rbx\n
    unsigned long long v70;  // rdi\n
    unsigned long v71;  // rax\n
    unsigned long long v72;  // r10\n
    unsigned long long v73;  // rdx\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // ecx\n
    unsigned int v76;  // edi\n
    unsigned int v77;  // r10d\n
    unsigned int v78;  // edx\n
    unsigned int v79;  // ebx\n
    unsigned long long v82;  // rbx\n
    unsigned long long v83;  // rcx\n
    unsigned long v84;  // rax\n
    unsigned long long v85;  // r11\n
    unsigned long long v86;  // rcx\n
    unsigned int v87;  // ecx\n
    unsigned int v88;  // edx\n
    unsigned int v89;  // edi\n
    unsigned int v90;  // r11d\n
    unsigned int v91;  // edi\n
    unsigned int v92;  // ebx\n
    unsigned long long v94;  // rbx\n
    unsigned long long v95;  // rdx\n
    unsigned long v96;  // rax\n
    unsigned long long v97;  // r9\n
    unsigned long long v98;  // rcx\n
    unsigned int v99;  // ecx\n
    unsigned int v100;  // edx\n
    unsigned int v101;  // edi\n
    unsigned int v102;  // r9d\n
    unsigned int v103;  // ecx\n
    unsigned int v104;  // ebx\n
    unsigned long long v106;  // rbx\n
    unsigned long long v107;  // rdi\n
    unsigned long v108;  // rax\n
    unsigned long long v109;  // r10\n
    unsigned long long v110;  // rdx\n
    unsigned int v111;  // edx\n
    unsigned int v112;  // ecx\n
    unsigned int v113;  // edi\n
    unsigned int v114;  // r10d\n
    unsigned int v115;  // edx\n
    unsigned int v116;  // ebx\n
    unsigned long long v118;  // rbx\n
    unsigned long long v119;  // rcx\n
    unsigned long v120;  // rax\n
    unsigned long long v121;  // r11\n
    unsigned long long v122;  // rcx\n
    unsigned int v123;  // ecx\n
    unsigned int v124;  // edx\n
    unsigned int v125;  // edi\n
    unsigned int v126;  // r11d\n
    unsigned int v127;  // edi\n
    unsigned int v128;  // ebx\n
    unsigned long long v130;  // rbx\n
    unsigned long long v131;  // rdx\n
    unsigned long v132;  // rax\n
    unsigned long long v133;  // r9\n
    unsigned long long v134;  // rcx\n
    unsigned int v135;  // ecx\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // edi\n
    unsigned int v138;  // r9d\n
    unsigned int v139;  // ecx\n
    unsigned int v140;  // ebx\n
    unsigned long long v142;  // rbx\n
    unsigned long long v143;  // rdi\n
    unsigned long v144;  // rax\n
    unsigned long long v145;  // r10\n
    unsigned long long v146;  // rdx\n
    unsigned int v147;  // edx\n
    unsigned int v148;  // ecx\n
    unsigned int v149;  // edi\n
    unsigned int v150;  // r10d\n
    unsigned int v151;  // edx\n
    unsigned int v152;  // ebx\n
    unsigned long long v154;  // rbx\n
    unsigned long long v155;  // rcx\n
    unsigned long v156;  // rax\n
    unsigned long long v157;  // r11\n
    unsigned long long v158;  // rcx\n
    unsigned int v159;  // ecx\n
    unsigned int v160;  // edx\n
    unsigned int v161;  // edi\n
    unsigned int v164;  // r11d\n
    unsigned int v165;  // edi\n
    unsigned int v166;  // ebx\n
    unsigned long long v168;  // rbx\n
    unsigned long long v169;  // rdx\n
    unsigned long v170;  // rax\n
    unsigned long long v171;  // r9\n
    unsigned long long v172;  // rcx\n
    unsigned int v173;  // ecx\n
    unsigned int v174;  // edx\n
    unsigned int v175;  // edi\n
    unsigned int v176;  // r9d\n
    unsigned int v177;  // ecx\n
    unsigned int v178;  // ebx\n
    unsigned long long v180;  // rbx\n
    unsigned long long v181;  // rdi\n
    unsigned long v182;  // rax\n
    unsigned long long v183;  // r10\n
    unsigned long long v184;  // rdx\n
    unsigned int v185;  // edx\n
    unsigned int v186;  // ecx\n
    unsigned int v187;  // edi\n
    unsigned int v188;  // r10d\n
    unsigned int v189;  // edx\n
    unsigned int v190;  // ebx\n
    unsigned long long v192;  // rbx\n
    unsigned long long v193;  // rcx\n
    unsigned long v194;  // rax\n
    unsigned long long v195;  // r11\n
    unsigned long long v196;  // rcx\n
    unsigned int v197;  // ecx\n
    unsigned int v198;  // edx\n
    unsigned int v199;  // edi\n
    unsigned int v200;  // r11d\n
    unsigned int v201;  // edi\n
    unsigned int v202;  // ebx\n
    unsigned long long v204;  // rbx\n
    unsigned long long v205;  // rdx\n
    unsigned long v206;  // rax\n
    unsigned long long v207;  // r9\n
    unsigned long long v208;  // rcx\n
    unsigned int v209;  // ecx\n
    unsigned int v210;  // edx\n
    unsigned int v211;  // edi\n
    unsigned int v212;  // r9d\n
    unsigned int v213;  // ecx\n
    unsigned int v214;  // ebx\n
    unsigned long long v217;  // rbx\n
    unsigned long long v218;  // rdi\n
    unsigned long v219;  // rax\n
    unsigned long long v220;  // r10\n
    unsigned long long v221;  // rdx\n
    unsigned int v222;  // edx\n
    unsigned int v223;  // ecx\n
    unsigned int v224;  // edi\n
    unsigned int v225;  // r10d\n
    unsigned int v226;  // edx\n
    unsigned int v227;  // ebx\n
    unsigned long long v229;  // rbx\n
    unsigned long long v230;  // rcx\n
    unsigned long v231;  // rax\n
    unsigned long long v232;  // r11\n
    unsigned long long v233;  // rcx\n
    unsigned int v234;  // ecx\n
    unsigned int v235;  // edx\n
    unsigned int v236;  // edi\n
    unsigned int v237;  // r11d\n
    unsigned int v238;  // edi\n
    unsigned int v239;  // ebx\n
    unsigned long long v241;  // rbx\n
    unsigned long long v242;  // rdx\n
    unsigned long v243;  // rax\n
    unsigned long long v244;  // r9\n
    unsigned long long v245;  // rcx\n
    unsigned int v246;  // ecx\n
    unsigned int v247;  // edx\n
    unsigned int v248;  // edi\n
    unsigned int v249;  // r9d\n
    unsigned int v250;  // ecx\n
    unsigned int v251;  // ebx\n
    unsigned long long v253;  // rbx\n
    unsigned long long v254;  // rdi\n
    unsigned long v255;  // rax\n
    unsigned long long v256;  // r10\n
    unsigned long long v257;  // rdx\n
    unsigned int v258;  // edx\n
    unsigned int v259;  // ecx\n
    unsigned int v260;  // edi\n
    unsigned int v261;  // r10d\n
    unsigned int v262;  // edx\n
    unsigned int v263;  // ebx\n
    unsigned long long v265;  // rbx\n
    unsigned long long v266;  // rcx\n
    unsigned long v267;  // rax\n
    unsigned long long v268;  // r11\n
    unsigned long long v269;  // rcx\n
    unsigned int v270;  // ecx\n
    unsigned int v271;  // edx\n
    unsigned int v272;  // edi\n
    unsigned int v273;  // r11d\n
    unsigned int v274;  // edi\n
    unsigned int v275;  // ebx\n
    unsigned long long v277;  // rbx\n
    unsigned long long v278;  // rdx\n
    unsigned long v279;  // rax\n
    unsigned long long v280;  // r9\n
    unsigned long long v281;  // rcx\n
    unsigned int v282;  // ecx\n
    unsigned int v283;  // edx\n
    unsigned int v284;  // edi\n
    unsigned int v285;  // r9d\n
    unsigned int v286;  // ecx\n
    unsigned int v287;  // ebx\n
    unsigned long long v289;  // rbx\n
    unsigned long long v290;  // rdi\n
    unsigned long v291;  // rax\n
    unsigned long long v292;  // r10\n
    unsigned long long v293;  // rdx\n
    unsigned int v294;  // edx\n
    unsigned int v295;  // ecx\n
    unsigned int v296;  // edi\n
    unsigned int v299;  // r10d\n
    unsigned int v300;  // edx\n
    unsigned int v301;  // ebx\n
    unsigned long long v303;  // rbx\n
    unsigned long long v304;  // rcx\n
    unsigned long v305;  // rax\n
    unsigned long long v306;  // r11\n
    unsigned long long v307;  // rcx\n
    unsigned int v308;  // ecx\n
    unsigned int v309;  // edx\n
    unsigned int v310;  // edi\n
    unsigned int v311;  // r11d\n
    unsigned int v312;  // edi\n
    unsigned int v313;  // ebx\n
    unsigned long long v315;  // rbx\n
    unsigned long long v316;  // rdx\n
    unsigned long v317;  // rax\n
    unsigned long long v318;  // r9\n
    unsigned long long v319;  // rcx\n
    unsigned int v320;  // ecx\n
    unsigned int v321;  // edx\n
    unsigned int v322;  // edi\n
    unsigned int v323;  // r9d\n
    unsigned int v324;  // ecx\n
    unsigned int v325;  // ebx\n
    unsigned long long v327;  // rbx\n
    unsigned long long v328;  // rdi\n
    unsigned long v329;  // rax\n
    unsigned long long v330;  // r10\n
    unsigned long long v331;  // rdx\n
    unsigned int v332;  // edx\n
    unsigned int v333;  // ecx\n
    unsigned int v334;  // edi\n
    unsigned int v335;  // r10d\n
    unsigned int v336;  // edx\n
    unsigned int v337;  // ebx\n
    unsigned long long v339;  // rbx\n
    unsigned long long v340;  // rcx\n
    unsigned long v341;  // rax\n
    unsigned long long v342;  // r11\n
    unsigned long long v343;  // rcx\n
    unsigned int v344;  // ecx\n
    unsigned int v345;  // edx\n
    unsigned int v346;  // edi\n
    unsigned int v347;  // r11d\n
    unsigned int v348;  // edi\n
    unsigned int v349;  // ebx\n
    unsigned long long v352;  // rbx\n
    unsigned long long v353;  // rdx\n
    unsigned long v354;  // rax\n
    unsigned long long v355;  // r9\n
    unsigned long long v356;  // rcx\n
    unsigned int v357;  // ecx\n
    unsigned int v358;  // edx\n
    unsigned int v359;  // edi\n
    unsigned int v360;  // r9d\n
    unsigned int v361;  // ecx\n
    unsigned int v362;  // ebx\n
    unsigned long long v364;  // rbx\n
    unsigned long long v365;  // rdi\n
    unsigned long v366;  // rax\n
    unsigned long long v367;  // r10\n
    unsigned long long v368;  // rdx\n
    unsigned int v369;  // edx\n
    unsigned int v370;  // ecx\n
    unsigned int v371;  // edi\n
    unsigned int v372;  // r10d\n
    unsigned int v373;  // edx\n
    unsigned int v374;  // ebx\n
    unsigned long long v376;  // rbx\n
    unsigned long long v377;  // rcx\n
    unsigned long v378;  // rax\n
    unsigned long long v379;  // r11\n
    unsigned long long v380;  // rcx\n
    unsigned int v381;  // ecx\n
    unsigned int v382;  // edx\n
    unsigned int v383;  // edi\n
    unsigned int v384;  // edx\n
    unsigned int v385;  // r9d\n
    unsigned int v386;  // ebx\n
    unsigned long long v388;  // rbx\n
    unsigned long long v389;  // rdi\n
    unsigned long v390;  // rax\n
    unsigned long long v391;  // r11\n
    unsigned long long v392;  // rcx\n
    unsigned int v393;  // ecx\n
    unsigned int v394;  // edi\n
    unsigned int v395;  // ebx\n
    unsigned int v396;  // eax\n
    unsigned int v397;  // ebx\n
\n
    v1 = a0->field_8;\n
    v2 = (v1[33] | v1[32] * 0x10000) ^ a1[0];\n
    v3 = a1[1] ^ v2 ^ (v1[35] | v1[34] * 0x10000);\n
    v4 = v3 / 0x1000000;\n
    v5 = v1[0];\n
    v7 = v5 ^ v3 ^ v3 / 0x100;\n
    v8 = (v5 / 0x100 ^ v3 / 0x10000 ^ v4) + v7;\n
    v9 = v8;\n
    v10 = (v9 >> 6) + v9 * 4;\n
    v11 = (v7 + v10) + 1;\n
    v12 = (v11 >> 6) + v11 * 4;\n
    v13 = v4 + v10 + 1;\n
    v14 = v12 + v3;\n
    v15 = (v14 / 64 + (v14 & 63) * 4 | v12 * 0x100 | (v10 * 0x10000) | v13 * 0x40000 & 0x3000000 | v13 * 0x4000000) ^ v2;\n
    v16 = v15 / 0x1000000;\n
    v17 = v1[1];\n
    v19 = v17 ^ v15 ^ v15 / 0x100;\n
    v20 = (v17 / 0x100 ^ v15 / 0x10000 ^ v16) + v19;\n
    v21 = v20;\n
    v22 = (v21 >> 6) + v21 * 4;\n
    v23 = (v19 + v22) + 1;\n
    v24 = (v23 >> 6) + v23 * 4;\n
    v25 = v16 + v22 + 1;\n
    v26 = v24 + v15;\n
    v29 = (v26 / 64 + (v26 & 63) * 4 | v24 * 0x100 | (v22 * 0x10000) | v25 * 0x40000 & 0x3000000 | v25 * 0x4000000) ^ v3;\n
    v30 = v29 / 0x1000000;\n
    v31 = v1[2];\n
    v33 = v31 ^ v29 ^ v29 / 0x100;\n
    v34 = (v31 / 0x100 ^ v29 / 0x10000 ^ v30) + v33;\n
    v35 = v34;\n
    v36 = (v35 >> 6) + v35 * 4;\n
    v37 = (v33 + v36) + 1;\n
    v38 = (v37 >> 6) + v37 * 4;\n
    v39 = v30 + v36 + 1;\n
    v40 = v38 + v29;\n
    v41 = (v40 / 64 + (v40 & 63) * 4 | v38 * 0x100 | (v36 * 0x10000) | v39 * 0x40000 & 0x3000000 | v39 * 0x4000000) ^ v15;\n
    v42 = v41 / 0x1000000;\n
    v43 = v1[3];\n
    v45 = v43 ^ v41 ^ v41 / 0x100;\n
    v46 = (v43 / 0x100 ^ v41 / 0x10000 ^ v42) + v45;\n
    v47 = v46;\n
    v48 = (v47 >> 6) + v47 * 4;\n
    v49 = (v45 + v48) + 1;\n
    v50 = (v49 >> 6) + v49 * 4;\n
    v51 = v42 + v48 + 1;\n
    v52 = v50 + v3;\n
    v53 = (v52 / 64 + (v52 & 63) * 4 | v50 * 0x100 | (v48 * 0x10000) | v51 * 0x40000 & 0x3000000 | v51 * 0x4000000) ^ v29;\n
    v54 = v53 / 0x1000000;\n
    v55 = v1[4];\n
    v57 = v55 ^ v53 ^ v53 / 0x100;\n
    v58 = (v55 / 0x100 ^ v53 / 0x10000 ^ v54) + v57;\n
    v59 = v58;\n
    v60 = (v59 >> 6) + v59 * 4;\n
    v61 = (v57 + v60) + 1;\n
    v62 = (v61 >> 6) + v61 * 4;\n
    v63 = v54 + v60 + 1;\n
    v64 = v62 + v15;\n
    v65 = (v64 / 64 + (v64 & 63) * 4 | v62 * 0x100 | (v60 * 0x10000) | v63 * 0x40000 & 0x3000000 | v63 * 0x4000000) ^ v41;\n
    v66 = v65 / 0x1000000;\n
    v67 = v1[5];\n
    v69 = v67 ^ v65 ^ v65 / 0x100;\n
    v70 = (v67 / 0x100 ^ v65 / 0x10000 ^ v66) + v69;\n
    v71 = v70;\n
    v72 = (v71 >> 6) + v71 * 4;\n
    v73 = (v69 + v72) + 1;\n
    v74 = (v73 >> 6) + v73 * 4;\n
    v75 = v66 + v72 + 1;\n
    v76 = v74 + v29;\n
    v77 = (v76 / 64 + (v76 & 63) * 4 | v74 * 0x100 | (v72 * 0x10000) | v75 * 0x40000 & 0x3000000 | v75 * 0x4000000) ^ v53;\n
    v78 = v77 / 0x1000000;\n
    v79 = v1[6];\n
    v82 = v79 ^ v77 ^ v77 / 0x100;\n
    v83 = (v79 / 0x100 ^ v77 / 0x10000 ^ v78) + v82;\n
    v84 = v83;\n
    v85 = (v84 >> 6) + v84 * 4;\n
    v86 = (v82 + v85) + 1;\n
    v87 = (v86 >> 6) + v86 * 4;\n
    v88 = v78 + v85 + 1;\n
    v89 = v87 + v3;\n
    v90 = (v89 / 64 + (v89 & 63) * 4 | v87 * 0x100 | (v85 * 0x10000) | v88 * 0x40000 & 0x3000000 | v88 * 0x4000000) ^ v65;\n
    v91 = v90 / 0x1000000;\n
    v92 = v1[7];\n
    v94 = v92 ^ v90 ^ v90 / 0x100;\n
    v95 = (v92 / 0x100 ^ v90 / 0x10000 ^ v91) + v94;\n
    v96 = v95;\n
    v97 = (v96 >> 6) + v96 * 4;\n
    v98 = (v94 + v97) + 1;\n
    v99 = (v98 >> 6) + v98 * 4;\n
    v100 = v91 + v97 + 1;\n
    v101 = v99 + v15;\n
    v102 = (v101 / 64 + (v101 & 63) * 4 | v99 * 0x100 | (v97 * 0x10000) | v100 * 0x40000 & 0x3000000 | v100 * 0x4000000) ^ v77;\n
    v103 = v102 / 0x1000000;\n
    v104 = v1[8];\n
    v106 = v104 ^ v102 ^ v102 / 0x100;\n
    v107 = (v104 / 0x100 ^ v102 / 0x10000 ^ v103) + v106;\n
    v108 = v107;\n
    v109 = (v108 >> 6) + v108 * 4;\n
    v110 = (v106 + v109) + 1;\n
    v111 = (v110 >> 6) + v110 * 4;\n
    v112 = v103 + v109 + 1;\n
    v113 = v111 + v29;\n
    v114 = (v113 / 64 + (v113 & 63) * 4 | v111 * 0x100 | (v109 * 0x10000) | v112 * 0x40000 & 0x3000000 | v112 * 0x4000000) ^ v90;\n
    v115 = v114 / 0x1000000;\n
    v116 = v1[9];\n
    v118 = v116 ^ v114 ^ v114 / 0x100;\n
    v119 = (v116 / 0x100 ^ v114 / 0x10000 ^ v115) + v118;\n
    v120 = v119;\n
    v121 = (v120 >> 6) + v120 * 4;\n
    v122 = (v118 + v121) + 1;\n
    v123 = (v122 >> 6) + v122 * 4;\n
    v124 = v115 + v121 + 1;\n
    v125 = v123 + v3;\n
    v126 = (v125 / 64 + (v125 & 63) * 4 | v123 * 0x100 | (v121 * 0x10000) | v124 * 0x40000 & 0x3000000 | v124 * 0x4000000) ^ v102;\n
    v127 = v126 / 0x1000000;\n
    v128 = v1[10];\n
    v130 = v128 ^ v126 ^ v126 / 0x100;\n
    v131 = (v128 / 0x100 ^ v126 / 0x10000 ^ v127) + v130;\n
    v132 = v131;\n
    v133 = (v132 >> 6) + v132 * 4;\n
    v134 = (v130 + v133) + 1;\n
    v135 = (v134 >> 6) + v134 * 4;\n
    v136 = v127 + v133 + 1;\n
    v137 = v135 + v15;\n
    v138 = (v137 / 64 + (v137 & 63) * 4 | v135 * 0x100 | (v133 * 0x10000) | v136 * 0x40000 & 0x3000000 | v136 * 0x4000000) ^ v114;\n
    v139 = v138 / 0x1000000;\n
    v140 = v1[11];\n
    v142 = v140 ^ v138 ^ v138 / 0x100;\n
    v143 = (v140 / 0x100 ^ v138 / 0x10000 ^ v139) + v142;\n
    v144 = v143;\n
    v145 = (v144 >> 6) + v144 * 4;\n
    v146 = (v142 + v145) + 1;\n
    v147 = (v146 >> 6) + v146 * 4;\n
    v148 = v139 + v145 + 1;\n
    v149 = v147 + v29;\n
    v150 = (v149 / 64 + (v149 & 63) * 4 | v147 * 0x100 | (v145 * 0x10000) | v148 * 0x40000 & 0x3000000 | v148 * 0x4000000) ^ v126;\n
    v151 = v150 / 0x1000000;\n
    v152 = v1[12];\n
    v154 = v152 ^ v150 ^ v150 / 0x100;\n
    v155 = (v152 / 0x100 ^ v150 / 0x10000 ^ v151) + v154;\n
    v156 = v155;\n
    v157 = (v156 >> 6) + v156 * 4;\n
    v158 = (v154 + v157) + 1;\n
    v159 = (v158 >> 6) + v158 * 4;\n
    v160 = v151 + v157 + 1;\n
    v161 = v159 + v3;\n
    v164 = (v161 / 64 + (v161 & 63) * 4 | v159 * 0x100 | (v157 * 0x10000) | v160 * 0x40000 & 0x3000000 | v160 * 0x4000000) ^ v138;\n
    v165 = v164 / 0x1000000;\n
    v166 = v1[13];\n
    v168 = v166 ^ v164 ^ v164 / 0x100;\n
    v169 = (v166 / 0x100 ^ v164 / 0x10000 ^ v165) + v168;\n
    v170 = v169;\n
    v171 = (v170 >> 6) + v170 * 4;\n
    v172 = (v168 + v171) + 1;\n
    v173 = (v172 >> 6) + v172 * 4;\n
    v174 = v165 + v171 + 1;\n
    v175 = v173 + v15;\n
    v176 = (v175 / 64 + (v175 & 63) * 4 | v173 * 0x100 | (v171 * 0x10000) | v174 * 0x40000 & 0x3000000 | v174 * 0x4000000) ^ v150;\n
    v177 = v176 / 0x1000000;\n
    v178 = v1[14];\n
    v180 = v178 ^ v176 ^ v176 / 0x100;\n
    v181 = (v178 / 0x100 ^ v176 / 0x10000 ^ v177) + v180;\n
    v182 = v181;\n
    v183 = (v182 >> 6) + v182 * 4;\n
    v184 = (v180 + v183) + 1;\n
    v185 = (v184 >> 6) + v184 * 4;\n
    v186 = v177 + v183 + 1;\n
    v187 = v185 + v29;\n
    v188 = (v187 / 64 + (v187 & 63) * 4 | v185 * 0x100 | (v183 * 0x10000) | v186 * 0x40000 & 0x3000000 | v186 * 0x4000000) ^ v164;\n
    v189 = v188 / 0x1000000;\n
    v190 = v1[15];\n
    v192 = v190 ^ v188 ^ v188 / 0x100;\n
    v193 = (v190 / 0x100 ^ v188 / 0x10000 ^ v189) + v192;\n
    v194 = v193;\n
    v195 = (v194 >> 6) + v194 * 4;\n
    v196 = (v192 + v195) + 1;\n
    v197 = (v196 >> 6) + v196 * 4;\n
    v198 = v189 + v195 + 1;\n
    v199 = v197 + v3;\n
    v200 = (v199 / 64 + (v199 & 63) * 4 | v197 * 0x100 | (v195 * 0x10000) | v198 * 0x40000 & 0x3000000 | v198 * 0x4000000) ^ v176;\n
    v201 = v200 / 0x1000000;\n
    v202 = v1[16];\n
    v204 = v202 ^ v200 ^ v200 / 0x100;\n
    v205 = (v202 / 0x100 ^ v200 / 0x10000 ^ v201) + v204;\n
    v206 = v205;\n
    v207 = (v206 >> 6) + v206 * 4;\n
    v208 = (v204 + v207) + 1;\n
    v209 = (v208 >> 6) + v208 * 4;\n
    v210 = v201 + v207 + 1;\n
    v211 = v209 + v15;\n
    v212 = (v211 / 64 + (v211 & 63) * 4 | v209 * 0x100 | (v207 * 0x10000) | v210 * 0x40000 & 0x3000000 | v210 * 0x4000000) ^ v188;\n
    v213 = v212 / 0x1000000;\n
    v214 = v1[17];\n
    v217 = v214 ^ v212 ^ v212 / 0x100;\n
    v218 = (v214 / 0x100 ^ v212 / 0x10000 ^ v213) + v217;\n
    v219 = v218;\n
    v220 = (v219 >> 6) + v219 * 4;\n
    v221 = (v217 + v220) + 1;\n
    v222 = (v221 >> 6) + v221 * 4;\n
    v223 = v213 + v220 + 1;\n
    v224 = v222 + v29;\n
    v225 = (v224 / 64 + (v224 & 63) * 4 | v222 * 0x100 | (v220 * 0x10000) | v223 * 0x40000 & 0x3000000 | v223 * 0x4000000) ^ v200;\n
    v226 = v225 / 0x1000000;\n
    v227 = v1[18];\n
    v229 = v227 ^ v225 ^ v225 / 0x100;\n
    v230 = (v227 / 0x100 ^ v225 / 0x10000 ^ v226) + v229;\n
    v231 = v230;\n
    v232 = (v231 >> 6) + v231 * 4;\n
    v233 = (v229 + v232) + 1;\n
    v234 = (v233 >> 6) + v233 * 4;\n
    v235 = v226 + v232 + 1;\n
    v236 = v234 + v3;\n
    v237 = (v236 / 64 + (v236 & 63) * 4 | v234 * 0x100 | (v232 * 0x10000) | v235 * 0x40000 & 0x3000000 | v235 * 0x4000000) ^ v212;\n
    v238 = v237 / 0x1000000;\n
    v239 = v1[19];\n
    v241 = v239 ^ v237 ^ v237 / 0x100;\n
    v242 = (v239 / 0x100 ^ v237 / 0x10000 ^ v238) + v241;\n
    v243 = v242;\n
    v244 = (v243 >> 6) + v243 * 4;\n
    v245 = (v241 + v244) + 1;\n
    v246 = (v245 >> 6) + v245 * 4;\n
    v247 = v238 + v244 + 1;\n
    v248 = v246 + v15;\n
    v249 = (v248 / 64 + (v248 & 63) * 4 | v246 * 0x100 | (v244 * 0x10000) | v247 * 0x40000 & 0x3000000 | v247 * 0x4000000) ^ v225;\n
    v250 = v249 / 0x1000000;\n
    v251 = v1[20];\n
    v253 = v251 ^ v249 ^ v249 / 0x100;\n
    v254 = (v251 / 0x100 ^ v249 / 0x10000 ^ v250) + v253;\n
    v255 = v254;\n
    v256 = (v255 >> 6) + v255 * 4;\n
    v257 = (v253 + v256) + 1;\n
    v258 = (v257 >> 6) + v257 * 4;\n
    v259 = v250 + v256 + 1;\n
    v260 = v258 + v29;\n
    v261 = (v260 / 64 + (v260 & 63) * 4 | v258 * 0x100 | (v256 * 0x10000) | v259 * 0x40000 & 0x3000000 | v259 * 0x4000000) ^ v237;\n
    v262 = v261 / 0x1000000;\n
    v263 = v1[21];\n
    v265 = v263 ^ v261 ^ v261 / 0x100;\n
    v266 = (v263 / 0x100 ^ v261 / 0x10000 ^ v262) + v265;\n
    v267 = v266;\n
    v268 = (v267 >> 6) + v267 * 4;\n
    v269 = (v265 + v268) + 1;\n
    v270 = (v269 >> 6) + v269 * 4;\n
    v271 = v262 + v268 + 1;\n
    v272 = v270 + v3;\n
    v273 = (v272 / 64 + (v272 & 63) * 4 | v270 * 0x100 | (v268 * 0x10000) | v271 * 0x40000 & 0x3000000 | v271 * 0x4000000) ^ v249;\n
    v274 = v273 / 0x1000000;\n
    v275 = v1[22];\n
    v277 = v275 ^ v273 ^ v273 / 0x100;\n
    v278 = (v275 / 0x100 ^ v273 / 0x10000 ^ v274) + v277;\n
    v279 = v278;\n
    v280 = (v279 >> 6) + v279 * 4;\n
    v281 = (v277 + v280) + 1;\n
    v282 = (v281 >> 6) + v281 * 4;\n
    v283 = v274 + v280 + 1;\n
    v284 = v282 + v15;\n
    v285 = (v284 / 64 + (v284 & 63) * 4 | v282 * 0x100 | (v280 * 0x10000) | v283 * 0x40000 & 0x3000000 | v283 * 0x4000000) ^ v261;\n
    v286 = v285 / 0x1000000;\n
    v287 = v1[23];\n
    v289 = v287 ^ v285 ^ v285 / 0x100;\n
    v290 = (v287 / 0x100 ^ v285 / 0x10000 ^ v286) + v289;\n
    v291 = v290;\n
    v292 = (v291 >> 6) + v291 * 4;\n
    v293 = (v289 + v292) + 1;\n
    v294 = (v293 >> 6) + v293 * 4;\n
    v295 = v286 + v292 + 1;\n
    v296 = v294 + v29;\n
    v299 = (v296 / 64 + (v296 & 63) * 4 | v294 * 0x100 | (v292 * 0x10000) | v295 * 0x40000 & 0x3000000 | v295 * 0x4000000) ^ v273;\n
    v300 = v299 / 0x1000000;\n
    v301 = v1[24];\n
    v303 = v301 ^ v299 ^ v299 / 0x100;\n
    v304 = (v301 / 0x100 ^ v299 / 0x10000 ^ v300) + v303;\n
    v305 = v304;\n
    v306 = (v305 >> 6) + v305 * 4;\n
    v307 = (v303 + v306) + 1;\n
    v308 = (v307 >> 6) + v307 * 4;\n
    v309 = v300 + v306 + 1;\n
    v310 = v308 + v3;\n
    v311 = (v310 / 64 + (v310 & 63) * 4 | v308 * 0x100 | (v306 * 0x10000) | v309 * 0x40000 & 0x3000000 | v309 * 0x4000000) ^ v285;\n
    v312 = v311 / 0x1000000;\n
    v313 = v1[25];\n
    v315 = v313 ^ v311 ^ v311 / 0x100;\n
    v316 = (v313 / 0x100 ^ v311 / 0x10000 ^ v312) + v315;\n
    v317 = v316;\n
    v318 = (v317 >> 6) + v317 * 4;\n
    v319 = (v315 + v318) + 1;\n
    v320 = (v319 >> 6) + v319 * 4;\n
    v321 = v312 + v318 + 1;\n
    v322 = v320 + v15;\n
    v323 = (v322 / 64 + (v322 & 63) * 4 | v320 * 0x100 | (v318 * 0x10000) | v321 * 0x40000 & 0x3000000 | v321 * 0x4000000) ^ v299;\n
    v324 = v323 / 0x1000000;\n
    v325 = v1[26];\n
    v327 = v325 ^ v323 ^ v323 / 0x100;\n
    v328 = (v325 / 0x100 ^ v323 / 0x10000 ^ v324) + v327;\n
    v329 = v328;\n
    v330 = (v329 >> 6) + v329 * 4;\n
    v331 = (v327 + v330) + 1;\n
    v332 = (v331 >> 6) + v331 * 4;\n
    v333 = v324 + v330 + 1;\n
    v334 = v332 + v29;\n
    v335 = (v334 / 64 + (v334 & 63) * 4 | v332 * 0x100 | (v330 * 0x10000) | v333 * 0x40000 & 0x3000000 | v333 * 0x4000000) ^ v311;\n
    v336 = v335 / 0x1000000;\n
    v337 = v1[27];\n
    v339 = v337 ^ v335 ^ v335 / 0x100;\n
    v340 = (v337 / 0x100 ^ v335 / 0x10000 ^ v336) + v339;\n
    v341 = v340;\n
    v342 = (v341 >> 6) + v341 * 4;\n
    v343 = (v339 + v342) + 1;\n
    v344 = (v343 >> 6) + v343 * 4;\n
    v345 = v336 + v342 + 1;\n
    v346 = v344 + v3;\n
    v347 = (v346 / 64 + (v346 & 63) * 4 | v344 * 0x100 | (v342 * 0x10000) | v345 * 0x40000 & 0x3000000 | v345 * 0x4000000) ^ v323;\n
    v348 = v347 / 0x1000000;\n
    v349 = v1[28];\n
    v352 = v349 ^ v347 ^ v347 / 0x100;\n
    v353 = (v349 / 0x100 ^ v347 / 0x10000 ^ v348) + v352;\n
    v354 = v353;\n
    v355 = (v354 >> 6) + v354 * 4;\n
    v356 = (v352 + v355) + 1;\n
    v357 = (v356 >> 6) + v356 * 4;\n
    v358 = v348 + v355 + 1;\n
    v359 = v357 + v15;\n
    v360 = (v359 / 64 + (v359 & 63) * 4 | v357 * 0x100 | (v355 * 0x10000) | v358 * 0x40000 & 0x3000000 | v358 * 0x4000000) ^ v335;\n
    v361 = v360 / 0x1000000;\n
    v362 = v1[29];\n
    v364 = v362 ^ v360 ^ v360 / 0x100;\n
    v365 = (v362 / 0x100 ^ v360 / 0x10000 ^ v361) + v364;\n
    v366 = v365;\n
    v367 = (v366 >> 6) + v366 * 4;\n
    v368 = (v364 + v367) + 1;\n
    v369 = (v368 >> 6) + v368 * 4;\n
    v370 = v361 + v367 + 1;\n
    v371 = v369 + v29;\n
    v372 = (v371 / 64 + (v371 & 63) * 4 | v369 * 0x100 | (v367 * 0x10000) | v370 * 0x40000 & 0x3000000 | v370 * 0x4000000) ^ v347;\n
    v373 = v372 / 0x1000000;\n
    v374 = v1[30];\n
    v376 = v374 ^ v372 ^ v372 / 0x100;\n
    v377 = (v374 / 0x100 ^ v372 / 0x10000 ^ v373) + v376;\n
    v378 = v377;\n
    v379 = (v378 >> 6) + v378 * 4;\n
    v380 = (v376 + v379) + 1;\n
    v381 = (v380 >> 6) + v380 * 4;\n
    v382 = v373 + v379 + 1;\n
    v383 = v381 + v3;\n
    v384 = (v383 / 64 + (v383 & 63) * 4 | v381 * 0x100 | (v379 * 0x10000) | v382 * 0x40000 & 0x3000000 | v382 * 0x4000000) ^ v360;\n
    v385 = v384 / 0x1000000;\n
    v386 = v1[31];\n
    v388 = v386 ^ v384 ^ v384 / 0x100;\n
    v389 = (v386 / 0x100 ^ v384 / 0x10000 ^ v385) + v388;\n
    v390 = v389;\n
    v391 = (v390 >> 6) + v390 * 4;\n
    v392 = (v388 + v391) + 1;\n
    v393 = (v392 >> 6) + v392 * 4;\n
    v394 = v385 + v391 + 1;\n
    v395 = v393 + v384;\n
    v396 = (v395 / 64 + (v395 & 63) * 4 | v393 * 0x100 | (v391 * 0x10000) | v394 * 0x40000 & 0x3000000 | v394 * 0x4000000) ^ v372;\n
    v397 = (v1[39] | v1[38] * 0x10000) ^ v384 ^ v396;\n
    a1[0] = (v1[37] | v1[36] * 0x10000) ^ v396;\n
    a1[1] = v397;\n
    return 0;\n
}\n
", "4240453:sub_40b445": null, "4240464:cgc_faith_decode": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    unsigned short field_a;\n
    unsigned short field_c;\n
    unsigned short field_e;\n
    unsigned short field_10;\n
    unsigned short field_12;\n
    unsigned short field_14;\n
    unsigned short field_16;\n
    unsigned short field_18;\n
    unsigned short field_1a;\n
    unsigned short field_1c;\n
    unsigned short field_1e;\n
    unsigned short field_20;\n
    unsigned short field_22;\n
    unsigned short field_24;\n
    unsigned short field_26;\n
    unsigned short field_28;\n
    unsigned short field_2a;\n
    unsigned short field_2c;\n
    unsigned short field_2e;\n
    unsigned short field_30;\n
    unsigned short field_32;\n
    unsigned short field_34;\n
    unsigned short field_36;\n
    unsigned short field_38;\n
    unsigned short field_3a;\n
    unsigned short field_3c;\n
    unsigned short field_3e;\n
    unsigned short field_40;\n
    unsigned short field_42;\n
    unsigned short field_44;\n
    unsigned short field_46;\n
    unsigned short field_48;\n
    unsigned short field_4a;\n
    unsigned short field_4c;\n
    unsigned short field_4e;\n
} struct_1;\n
\n
long long cgc_faith_decode(struct_0 *a0, unsigned int a1[2])\n
{\n
    unsigned short v1[40];  // r8\n
    unsigned int v2;  // r9d\n
    unsigned int v3;  // r10d\n
    unsigned int v4;  // r11d\n
    unsigned int v5;  // ecx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long long v10;  // r14\n
    unsigned long long v11;  // rcx\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // r11d\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ebx\n
    unsigned long long v19;  // rbx\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rax\n
    unsigned long long v22;  // r9\n
    unsigned long long v23;  // rcx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // edi\n
    unsigned int v29;  // r9d\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // ebx\n
    unsigned long long v33;  // rbx\n
    unsigned long long v34;  // rdi\n
    unsigned long v35;  // rax\n
    unsigned long long v36;  // r10\n
    unsigned long long v37;  // rdx\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // r10d\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // ebx\n
    unsigned long long v45;  // rbx\n
    unsigned long long v46;  // rcx\n
    unsigned long v47;  // rax\n
    unsigned long long v48;  // r11\n
    unsigned long long v49;  // rcx\n
    unsigned int v50;  // ecx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edi\n
    unsigned int v53;  // r11d\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ebx\n
    unsigned long long v57;  // rbx\n
    unsigned long long v58;  // rdx\n
    unsigned long v59;  // rax\n
    unsigned long long v60;  // r9\n
    unsigned long long v61;  // rcx\n
    unsigned int v62;  // ecx\n
    unsigned int v63;  // edx\n
    unsigned int v64;  // edi\n
    unsigned int v65;  // r9d\n
    unsigned int v66;  // ecx\n
    unsigned int v67;  // ebx\n
    unsigned long long v69;  // rbx\n
    unsigned long long v70;  // rdi\n
    unsigned long v71;  // rax\n
    unsigned long long v72;  // r10\n
    unsigned long long v73;  // rdx\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // ecx\n
    unsigned int v76;  // edi\n
    unsigned int v77;  // r10d\n
    unsigned int v78;  // edx\n
    unsigned int v79;  // ebx\n
    unsigned long long v82;  // rbx\n
    unsigned long long v83;  // rcx\n
    unsigned long v84;  // rax\n
    unsigned long long v85;  // r11\n
    unsigned long long v86;  // rcx\n
    unsigned int v87;  // ecx\n
    unsigned int v88;  // edx\n
    unsigned int v89;  // edi\n
    unsigned int v90;  // r11d\n
    unsigned int v91;  // edi\n
    unsigned int v92;  // ebx\n
    unsigned long long v94;  // rbx\n
    unsigned long long v95;  // rdx\n
    unsigned long v96;  // rax\n
    unsigned long long v97;  // r9\n
    unsigned long long v98;  // rcx\n
    unsigned int v99;  // ecx\n
    unsigned int v100;  // edx\n
    unsigned int v101;  // edi\n
    unsigned int v102;  // r9d\n
    unsigned int v103;  // ecx\n
    unsigned int v104;  // ebx\n
    unsigned long long v106;  // rbx\n
    unsigned long long v107;  // rdi\n
    unsigned long v108;  // rax\n
    unsigned long long v109;  // r10\n
    unsigned long long v110;  // rdx\n
    unsigned int v111;  // edx\n
    unsigned int v112;  // ecx\n
    unsigned int v113;  // edi\n
    unsigned int v114;  // r10d\n
    unsigned int v115;  // edx\n
    unsigned int v116;  // ebx\n
    unsigned long long v118;  // rbx\n
    unsigned long long v119;  // rcx\n
    unsigned long v120;  // rax\n
    unsigned long long v121;  // r11\n
    unsigned long long v122;  // rcx\n
    unsigned int v123;  // ecx\n
    unsigned int v124;  // edx\n
    unsigned int v125;  // edi\n
    unsigned int v126;  // r11d\n
    unsigned int v127;  // edi\n
    unsigned int v128;  // ebx\n
    unsigned long long v130;  // rbx\n
    unsigned long long v131;  // rdx\n
    unsigned long v132;  // rax\n
    unsigned long long v133;  // r9\n
    unsigned long long v134;  // rcx\n
    unsigned int v135;  // ecx\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // edi\n
    unsigned int v138;  // r9d\n
    unsigned int v139;  // ecx\n
    unsigned int v140;  // ebx\n
    unsigned long long v142;  // rbx\n
    unsigned long long v143;  // rdi\n
    unsigned long v144;  // rax\n
    unsigned long long v145;  // r10\n
    unsigned long long v146;  // rdx\n
    unsigned int v147;  // edx\n
    unsigned int v148;  // ecx\n
    unsigned int v149;  // edi\n
    unsigned int v150;  // r10d\n
    unsigned int v151;  // edx\n
    unsigned int v152;  // ebx\n
    unsigned long long v154;  // rbx\n
    unsigned long long v155;  // rcx\n
    unsigned long v156;  // rax\n
    unsigned long long v157;  // r11\n
    unsigned long long v158;  // rcx\n
    unsigned int v159;  // ecx\n
    unsigned int v160;  // edx\n
    unsigned int v161;  // edi\n
    unsigned int v164;  // r11d\n
    unsigned int v165;  // edi\n
    unsigned int v166;  // ebx\n
    unsigned long long v168;  // rbx\n
    unsigned long long v169;  // rdx\n
    unsigned long v170;  // rax\n
    unsigned long long v171;  // r9\n
    unsigned long long v172;  // rcx\n
    unsigned int v173;  // ecx\n
    unsigned int v174;  // edx\n
    unsigned int v175;  // edi\n
    unsigned int v176;  // r9d\n
    unsigned int v177;  // ecx\n
    unsigned int v178;  // ebx\n
    unsigned long long v180;  // rbx\n
    unsigned long long v181;  // rdi\n
    unsigned long v182;  // rax\n
    unsigned long long v183;  // r10\n
    unsigned long long v184;  // rdx\n
    unsigned int v185;  // edx\n
    unsigned int v186;  // ecx\n
    unsigned int v187;  // edi\n
    unsigned int v188;  // r10d\n
    unsigned int v189;  // edx\n
    unsigned int v190;  // ebx\n
    unsigned long long v192;  // rbx\n
    unsigned long long v193;  // rcx\n
    unsigned long v194;  // rax\n
    unsigned long long v195;  // r11\n
    unsigned long long v196;  // rcx\n
    unsigned int v197;  // ecx\n
    unsigned int v198;  // edx\n
    unsigned int v199;  // edi\n
    unsigned int v200;  // r11d\n
    unsigned int v201;  // edi\n
    unsigned int v202;  // ebx\n
    unsigned long long v204;  // rbx\n
    unsigned long long v205;  // rdx\n
    unsigned long v206;  // rax\n
    unsigned long long v207;  // r9\n
    unsigned long long v208;  // rcx\n
    unsigned int v209;  // ecx\n
    unsigned int v210;  // edx\n
    unsigned int v211;  // edi\n
    unsigned int v212;  // r9d\n
    unsigned int v213;  // ecx\n
    unsigned int v214;  // ebx\n
    unsigned long long v217;  // rbx\n
    unsigned long long v218;  // rdi\n
    unsigned long v219;  // rax\n
    unsigned long long v220;  // r10\n
    unsigned long long v221;  // rdx\n
    unsigned int v222;  // edx\n
    unsigned int v223;  // ecx\n
    unsigned int v224;  // edi\n
    unsigned int v225;  // r10d\n
    unsigned int v226;  // edx\n
    unsigned int v227;  // ebx\n
    unsigned long long v229;  // rbx\n
    unsigned long long v230;  // rcx\n
    unsigned long v231;  // rax\n
    unsigned long long v232;  // r11\n
    unsigned long long v233;  // rcx\n
    unsigned int v234;  // ecx\n
    unsigned int v235;  // edx\n
    unsigned int v236;  // edi\n
    unsigned int v237;  // r11d\n
    unsigned int v238;  // edi\n
    unsigned int v239;  // ebx\n
    unsigned long long v241;  // rbx\n
    unsigned long long v242;  // rdx\n
    unsigned long v243;  // rax\n
    unsigned long long v244;  // r9\n
    unsigned long long v245;  // rcx\n
    unsigned int v246;  // ecx\n
    unsigned int v247;  // edx\n
    unsigned int v248;  // edi\n
    unsigned int v249;  // r9d\n
    unsigned int v250;  // ecx\n
    unsigned int v251;  // ebx\n
    unsigned long long v253;  // rbx\n
    unsigned long long v254;  // rdi\n
    unsigned long v255;  // rax\n
    unsigned long long v256;  // r10\n
    unsigned long long v257;  // rdx\n
    unsigned int v258;  // edx\n
    unsigned int v259;  // ecx\n
    unsigned int v260;  // edi\n
    unsigned int v261;  // r10d\n
    unsigned int v262;  // edx\n
    unsigned int v263;  // ebx\n
    unsigned long long v265;  // rbx\n
    unsigned long long v266;  // rcx\n
    unsigned long v267;  // rax\n
    unsigned long long v268;  // r11\n
    unsigned long long v269;  // rcx\n
    unsigned int v270;  // ecx\n
    unsigned int v271;  // edx\n
    unsigned int v272;  // edi\n
    unsigned int v273;  // r11d\n
    unsigned int v274;  // edi\n
    unsigned int v275;  // ebx\n
    unsigned long long v277;  // rbx\n
    unsigned long long v278;  // rdx\n
    unsigned long v279;  // rax\n
    unsigned long long v280;  // r9\n
    unsigned long long v281;  // rcx\n
    unsigned int v282;  // ecx\n
    unsigned int v283;  // edx\n
    unsigned int v284;  // edi\n
    unsigned int v285;  // r9d\n
    unsigned int v286;  // ecx\n
    unsigned int v287;  // ebx\n
    unsigned long long v289;  // rbx\n
    unsigned long long v290;  // rdi\n
    unsigned long v291;  // rax\n
    unsigned long long v292;  // r10\n
    unsigned long long v293;  // rdx\n
    unsigned int v294;  // edx\n
    unsigned int v295;  // ecx\n
    unsigned int v296;  // edi\n
    unsigned int v299;  // r10d\n
    unsigned int v300;  // edx\n
    unsigned int v301;  // ebx\n
    unsigned long long v303;  // rbx\n
    unsigned long long v304;  // rcx\n
    unsigned long v305;  // rax\n
    unsigned long long v306;  // r11\n
    unsigned long long v307;  // rcx\n
    unsigned int v308;  // ecx\n
    unsigned int v309;  // edx\n
    unsigned int v310;  // edi\n
    unsigned int v311;  // r11d\n
    unsigned int v312;  // edi\n
    unsigned int v313;  // ebx\n
    unsigned long long v315;  // rbx\n
    unsigned long long v316;  // rdx\n
    unsigned long v317;  // rax\n
    unsigned long long v318;  // r9\n
    unsigned long long v319;  // rcx\n
    unsigned int v320;  // ecx\n
    unsigned int v321;  // edx\n
    unsigned int v322;  // edi\n
    unsigned int v323;  // r9d\n
    unsigned int v324;  // ecx\n
    unsigned int v325;  // ebx\n
    unsigned long long v327;  // rbx\n
    unsigned long long v328;  // rdi\n
    unsigned long v329;  // rax\n
    unsigned long long v330;  // r10\n
    unsigned long long v331;  // rdx\n
    unsigned int v332;  // edx\n
    unsigned int v333;  // ecx\n
    unsigned int v334;  // edi\n
    unsigned int v335;  // r10d\n
    unsigned int v336;  // edx\n
    unsigned int v337;  // ebx\n
    unsigned long long v339;  // rbx\n
    unsigned long long v340;  // rcx\n
    unsigned long v341;  // rax\n
    unsigned long long v342;  // r11\n
    unsigned long long v343;  // rcx\n
    unsigned int v344;  // ecx\n
    unsigned int v345;  // edx\n
    unsigned int v346;  // edi\n
    unsigned int v347;  // r11d\n
    unsigned int v348;  // edi\n
    unsigned int v349;  // ebx\n
    unsigned long long v352;  // rbx\n
    unsigned long long v353;  // rdx\n
    unsigned long v354;  // rax\n
    unsigned long long v355;  // r9\n
    unsigned long long v356;  // rcx\n
    unsigned int v357;  // ecx\n
    unsigned int v358;  // edx\n
    unsigned int v359;  // edi\n
    unsigned int v360;  // r9d\n
    unsigned int v361;  // ecx\n
    unsigned int v362;  // ebx\n
    unsigned long long v364;  // rbx\n
    unsigned long long v365;  // rdi\n
    unsigned long v366;  // rax\n
    unsigned long long v367;  // r10\n
    unsigned long long v368;  // rdx\n
    unsigned int v369;  // edx\n
    unsigned int v370;  // ecx\n
    unsigned int v371;  // edi\n
    unsigned int v372;  // r10d\n
    unsigned int v373;  // edx\n
    unsigned int v374;  // ebx\n
    unsigned long long v376;  // rbx\n
    unsigned long long v377;  // rcx\n
    unsigned long v378;  // rax\n
    unsigned long long v379;  // r11\n
    unsigned long long v380;  // rcx\n
    unsigned int v381;  // ecx\n
    unsigned int v382;  // edx\n
    unsigned int v383;  // edi\n
    unsigned int v384;  // edx\n
    unsigned int v385;  // r9d\n
    unsigned int v386;  // ebx\n
    unsigned long long v388;  // rbx\n
    unsigned long long v389;  // rdi\n
    unsigned long v390;  // rax\n
    unsigned long long v391;  // r11\n
    unsigned long long v392;  // rcx\n
    unsigned int v393;  // ecx\n
    unsigned int v394;  // edi\n
    unsigned int v395;  // ebx\n
    unsigned int v396;  // eax\n
    unsigned int v397;  // ebx\n
\n
    v1 = a0->field_8;\n
    v2 = (v1[37] | v1[36] * 0x10000) ^ a1[0];\n
    v3 = a1[1] ^ v2 ^ (v1[39] | v1[38] * 0x10000);\n
    v4 = v3 / 0x1000000;\n
    v5 = v1[31];\n
    v7 = v5 ^ v3 ^ v3 / 0x100;\n
    v8 = (v5 / 0x100 ^ v3 / 0x10000 ^ v4) + v7;\n
    v9 = v8;\n
    v10 = (v9 >> 6) + v9 * 4;\n
    v11 = (v7 + v10) + 1;\n
    v12 = (v11 >> 6) + v11 * 4;\n
    v13 = v4 + v10 + 1;\n
    v14 = v12 + v3;\n
    v15 = (v14 / 64 + (v14 & 63) * 4 | v12 * 0x100 | (v10 * 0x10000) | v13 * 0x40000 & 0x3000000 | v13 * 0x4000000) ^ v2;\n
    v16 = v15 / 0x1000000;\n
    v17 = v1[30];\n
    v19 = v17 ^ v15 ^ v15 / 0x100;\n
    v20 = (v17 / 0x100 ^ v15 / 0x10000 ^ v16) + v19;\n
    v21 = v20;\n
    v22 = (v21 >> 6) + v21 * 4;\n
    v23 = (v19 + v22) + 1;\n
    v24 = (v23 >> 6) + v23 * 4;\n
    v25 = v16 + v22 + 1;\n
    v26 = v24 + v15;\n
    v29 = (v26 / 64 + (v26 & 63) * 4 | v24 * 0x100 | (v22 * 0x10000) | v25 * 0x40000 & 0x3000000 | v25 * 0x4000000) ^ v3;\n
    v30 = v29 / 0x1000000;\n
    v31 = v1[29];\n
    v33 = v31 ^ v29 ^ v29 / 0x100;\n
    v34 = (v31 / 0x100 ^ v29 / 0x10000 ^ v30) + v33;\n
    v35 = v34;\n
    v36 = (v35 >> 6) + v35 * 4;\n
    v37 = (v33 + v36) + 1;\n
    v38 = (v37 >> 6) + v37 * 4;\n
    v39 = v30 + v36 + 1;\n
    v40 = v38 + v29;\n
    v41 = (v40 / 64 + (v40 & 63) * 4 | v38 * 0x100 | (v36 * 0x10000) | v39 * 0x40000 & 0x3000000 | v39 * 0x4000000) ^ v15;\n
    v42 = v41 / 0x1000000;\n
    v43 = v1[28];\n
    v45 = v43 ^ v41 ^ v41 / 0x100;\n
    v46 = (v43 / 0x100 ^ v41 / 0x10000 ^ v42) + v45;\n
    v47 = v46;\n
    v48 = (v47 >> 6) + v47 * 4;\n
    v49 = (v45 + v48) + 1;\n
    v50 = (v49 >> 6) + v49 * 4;\n
    v51 = v42 + v48 + 1;\n
    v52 = v50 + v3;\n
    v53 = (v52 / 64 + (v52 & 63) * 4 | v50 * 0x100 | (v48 * 0x10000) | v51 * 0x40000 & 0x3000000 | v51 * 0x4000000) ^ v29;\n
    v54 = v53 / 0x1000000;\n
    v55 = v1[27];\n
    v57 = v55 ^ v53 ^ v53 / 0x100;\n
    v58 = (v55 / 0x100 ^ v53 / 0x10000 ^ v54) + v57;\n
    v59 = v58;\n
    v60 = (v59 >> 6) + v59 * 4;\n
    v61 = (v57 + v60) + 1;\n
    v62 = (v61 >> 6) + v61 * 4;\n
    v63 = v54 + v60 + 1;\n
    v64 = v62 + v15;\n
    v65 = (v64 / 64 + (v64 & 63) * 4 | v62 * 0x100 | (v60 * 0x10000) | v63 * 0x40000 & 0x3000000 | v63 * 0x4000000) ^ v41;\n
    v66 = v65 / 0x1000000;\n
    v67 = v1[26];\n
    v69 = v67 ^ v65 ^ v65 / 0x100;\n
    v70 = (v67 / 0x100 ^ v65 / 0x10000 ^ v66) + v69;\n
    v71 = v70;\n
    v72 = (v71 >> 6) + v71 * 4;\n
    v73 = (v69 + v72) + 1;\n
    v74 = (v73 >> 6) + v73 * 4;\n
    v75 = v66 + v72 + 1;\n
    v76 = v74 + v29;\n
    v77 = (v76 / 64 + (v76 & 63) * 4 | v74 * 0x100 | (v72 * 0x10000) | v75 * 0x40000 & 0x3000000 | v75 * 0x4000000) ^ v53;\n
    v78 = v77 / 0x1000000;\n
    v79 = v1[25];\n
    v82 = v79 ^ v77 ^ v77 / 0x100;\n
    v83 = (v79 / 0x100 ^ v77 / 0x10000 ^ v78) + v82;\n
    v84 = v83;\n
    v85 = (v84 >> 6) + v84 * 4;\n
    v86 = (v82 + v85) + 1;\n
    v87 = (v86 >> 6) + v86 * 4;\n
    v88 = v78 + v85 + 1;\n
    v89 = v87 + v3;\n
    v90 = (v89 / 64 + (v89 & 63) * 4 | v87 * 0x100 | (v85 * 0x10000) | v88 * 0x40000 & 0x3000000 | v88 * 0x4000000) ^ v65;\n
    v91 = v90 / 0x1000000;\n
    v92 = v1[24];\n
    v94 = v92 ^ v90 ^ v90 / 0x100;\n
    v95 = (v92 / 0x100 ^ v90 / 0x10000 ^ v91) + v94;\n
    v96 = v95;\n
    v97 = (v96 >> 6) + v96 * 4;\n
    v98 = (v94 + v97) + 1;\n
    v99 = (v98 >> 6) + v98 * 4;\n
    v100 = v91 + v97 + 1;\n
    v101 = v99 + v15;\n
    v102 = (v101 / 64 + (v101 & 63) * 4 | v99 * 0x100 | (v97 * 0x10000) | v100 * 0x40000 & 0x3000000 | v100 * 0x4000000) ^ v77;\n
    v103 = v102 / 0x1000000;\n
    v104 = v1[23];\n
    v106 = v104 ^ v102 ^ v102 / 0x100;\n
    v107 = (v104 / 0x100 ^ v102 / 0x10000 ^ v103) + v106;\n
    v108 = v107;\n
    v109 = (v108 >> 6) + v108 * 4;\n
    v110 = (v106 + v109) + 1;\n
    v111 = (v110 >> 6) + v110 * 4;\n
    v112 = v103 + v109 + 1;\n
    v113 = v111 + v29;\n
    v114 = (v113 / 64 + (v113 & 63) * 4 | v111 * 0x100 | (v109 * 0x10000) | v112 * 0x40000 & 0x3000000 | v112 * 0x4000000) ^ v90;\n
    v115 = v114 / 0x1000000;\n
    v116 = v1[22];\n
    v118 = v116 ^ v114 ^ v114 / 0x100;\n
    v119 = (v116 / 0x100 ^ v114 / 0x10000 ^ v115) + v118;\n
    v120 = v119;\n
    v121 = (v120 >> 6) + v120 * 4;\n
    v122 = (v118 + v121) + 1;\n
    v123 = (v122 >> 6) + v122 * 4;\n
    v124 = v115 + v121 + 1;\n
    v125 = v123 + v3;\n
    v126 = (v125 / 64 + (v125 & 63) * 4 | v123 * 0x100 | (v121 * 0x10000) | v124 * 0x40000 & 0x3000000 | v124 * 0x4000000) ^ v102;\n
    v127 = v126 / 0x1000000;\n
    v128 = v1[21];\n
    v130 = v128 ^ v126 ^ v126 / 0x100;\n
    v131 = (v128 / 0x100 ^ v126 / 0x10000 ^ v127) + v130;\n
    v132 = v131;\n
    v133 = (v132 >> 6) + v132 * 4;\n
    v134 = (v130 + v133) + 1;\n
    v135 = (v134 >> 6) + v134 * 4;\n
    v136 = v127 + v133 + 1;\n
    v137 = v135 + v15;\n
    v138 = (v137 / 64 + (v137 & 63) * 4 | v135 * 0x100 | (v133 * 0x10000) | v136 * 0x40000 & 0x3000000 | v136 * 0x4000000) ^ v114;\n
    v139 = v138 / 0x1000000;\n
    v140 = v1[20];\n
    v142 = v140 ^ v138 ^ v138 / 0x100;\n
    v143 = (v140 / 0x100 ^ v138 / 0x10000 ^ v139) + v142;\n
    v144 = v143;\n
    v145 = (v144 >> 6) + v144 * 4;\n
    v146 = (v142 + v145) + 1;\n
    v147 = (v146 >> 6) + v146 * 4;\n
    v148 = v139 + v145 + 1;\n
    v149 = v147 + v29;\n
    v150 = (v149 / 64 + (v149 & 63) * 4 | v147 * 0x100 | (v145 * 0x10000) | v148 * 0x40000 & 0x3000000 | v148 * 0x4000000) ^ v126;\n
    v151 = v150 / 0x1000000;\n
    v152 = v1[19];\n
    v154 = v152 ^ v150 ^ v150 / 0x100;\n
    v155 = (v152 / 0x100 ^ v150 / 0x10000 ^ v151) + v154;\n
    v156 = v155;\n
    v157 = (v156 >> 6) + v156 * 4;\n
    v158 = (v154 + v157) + 1;\n
    v159 = (v158 >> 6) + v158 * 4;\n
    v160 = v151 + v157 + 1;\n
    v161 = v159 + v3;\n
    v164 = (v161 / 64 + (v161 & 63) * 4 | v159 * 0x100 | (v157 * 0x10000) | v160 * 0x40000 & 0x3000000 | v160 * 0x4000000) ^ v138;\n
    v165 = v164 / 0x1000000;\n
    v166 = v1[18];\n
    v168 = v166 ^ v164 ^ v164 / 0x100;\n
    v169 = (v166 / 0x100 ^ v164 / 0x10000 ^ v165) + v168;\n
    v170 = v169;\n
    v171 = (v170 >> 6) + v170 * 4;\n
    v172 = (v168 + v171) + 1;\n
    v173 = (v172 >> 6) + v172 * 4;\n
    v174 = v165 + v171 + 1;\n
    v175 = v173 + v15;\n
    v176 = (v175 / 64 + (v175 & 63) * 4 | v173 * 0x100 | (v171 * 0x10000) | v174 * 0x40000 & 0x3000000 | v174 * 0x4000000) ^ v150;\n
    v177 = v176 / 0x1000000;\n
    v178 = v1[17];\n
    v180 = v178 ^ v176 ^ v176 / 0x100;\n
    v181 = (v178 / 0x100 ^ v176 / 0x10000 ^ v177) + v180;\n
    v182 = v181;\n
    v183 = (v182 >> 6) + v182 * 4;\n
    v184 = (v180 + v183) + 1;\n
    v185 = (v184 >> 6) + v184 * 4;\n
    v186 = v177 + v183 + 1;\n
    v187 = v185 + v29;\n
    v188 = (v187 / 64 + (v187 & 63) * 4 | v185 * 0x100 | (v183 * 0x10000) | v186 * 0x40000 & 0x3000000 | v186 * 0x4000000) ^ v164;\n
    v189 = v188 / 0x1000000;\n
    v190 = v1[16];\n
    v192 = v190 ^ v188 ^ v188 / 0x100;\n
    v193 = (v190 / 0x100 ^ v188 / 0x10000 ^ v189) + v192;\n
    v194 = v193;\n
    v195 = (v194 >> 6) + v194 * 4;\n
    v196 = (v192 + v195) + 1;\n
    v197 = (v196 >> 6) + v196 * 4;\n
    v198 = v189 + v195 + 1;\n
    v199 = v197 + v3;\n
    v200 = (v199 / 64 + (v199 & 63) * 4 | v197 * 0x100 | (v195 * 0x10000) | v198 * 0x40000 & 0x3000000 | v198 * 0x4000000) ^ v176;\n
    v201 = v200 / 0x1000000;\n
    v202 = v1[15];\n
    v204 = v202 ^ v200 ^ v200 / 0x100;\n
    v205 = (v202 / 0x100 ^ v200 / 0x10000 ^ v201) + v204;\n
    v206 = v205;\n
    v207 = (v206 >> 6) + v206 * 4;\n
    v208 = (v204 + v207) + 1;\n
    v209 = (v208 >> 6) + v208 * 4;\n
    v210 = v201 + v207 + 1;\n
    v211 = v209 + v15;\n
    v212 = (v211 / 64 + (v211 & 63) * 4 | v209 * 0x100 | (v207 * 0x10000) | v210 * 0x40000 & 0x3000000 | v210 * 0x4000000) ^ v188;\n
    v213 = v212 / 0x1000000;\n
    v214 = v1[14];\n
    v217 = v214 ^ v212 ^ v212 / 0x100;\n
    v218 = (v214 / 0x100 ^ v212 / 0x10000 ^ v213) + v217;\n
    v219 = v218;\n
    v220 = (v219 >> 6) + v219 * 4;\n
    v221 = (v217 + v220) + 1;\n
    v222 = (v221 >> 6) + v221 * 4;\n
    v223 = v213 + v220 + 1;\n
    v224 = v222 + v29;\n
    v225 = (v224 / 64 + (v224 & 63) * 4 | v222 * 0x100 | (v220 * 0x10000) | v223 * 0x40000 & 0x3000000 | v223 * 0x4000000) ^ v200;\n
    v226 = v225 / 0x1000000;\n
    v227 = v1[13];\n
    v229 = v227 ^ v225 ^ v225 / 0x100;\n
    v230 = (v227 / 0x100 ^ v225 / 0x10000 ^ v226) + v229;\n
    v231 = v230;\n
    v232 = (v231 >> 6) + v231 * 4;\n
    v233 = (v229 + v232) + 1;\n
    v234 = (v233 >> 6) + v233 * 4;\n
    v235 = v226 + v232 + 1;\n
    v236 = v234 + v3;\n
    v237 = (v236 / 64 + (v236 & 63) * 4 | v234 * 0x100 | (v232 * 0x10000) | v235 * 0x40000 & 0x3000000 | v235 * 0x4000000) ^ v212;\n
    v238 = v237 / 0x1000000;\n
    v239 = v1[12];\n
    v241 = v239 ^ v237 ^ v237 / 0x100;\n
    v242 = (v239 / 0x100 ^ v237 / 0x10000 ^ v238) + v241;\n
    v243 = v242;\n
    v244 = (v243 >> 6) + v243 * 4;\n
    v245 = (v241 + v244) + 1;\n
    v246 = (v245 >> 6) + v245 * 4;\n
    v247 = v238 + v244 + 1;\n
    v248 = v246 + v15;\n
    v249 = (v248 / 64 + (v248 & 63) * 4 | v246 * 0x100 | (v244 * 0x10000) | v247 * 0x40000 & 0x3000000 | v247 * 0x4000000) ^ v225;\n
    v250 = v249 / 0x1000000;\n
    v251 = v1[11];\n
    v253 = v251 ^ v249 ^ v249 / 0x100;\n
    v254 = (v251 / 0x100 ^ v249 / 0x10000 ^ v250) + v253;\n
    v255 = v254;\n
    v256 = (v255 >> 6) + v255 * 4;\n
    v257 = (v253 + v256) + 1;\n
    v258 = (v257 >> 6) + v257 * 4;\n
    v259 = v250 + v256 + 1;\n
    v260 = v258 + v29;\n
    v261 = (v260 / 64 + (v260 & 63) * 4 | v258 * 0x100 | (v256 * 0x10000) | v259 * 0x40000 & 0x3000000 | v259 * 0x4000000) ^ v237;\n
    v262 = v261 / 0x1000000;\n
    v263 = v1[10];\n
    v265 = v263 ^ v261 ^ v261 / 0x100;\n
    v266 = (v263 / 0x100 ^ v261 / 0x10000 ^ v262) + v265;\n
    v267 = v266;\n
    v268 = (v267 >> 6) + v267 * 4;\n
    v269 = (v265 + v268) + 1;\n
    v270 = (v269 >> 6) + v269 * 4;\n
    v271 = v262 + v268 + 1;\n
    v272 = v270 + v3;\n
    v273 = (v272 / 64 + (v272 & 63) * 4 | v270 * 0x100 | (v268 * 0x10000) | v271 * 0x40000 & 0x3000000 | v271 * 0x4000000) ^ v249;\n
    v274 = v273 / 0x1000000;\n
    v275 = v1[9];\n
    v277 = v275 ^ v273 ^ v273 / 0x100;\n
    v278 = (v275 / 0x100 ^ v273 / 0x10000 ^ v274) + v277;\n
    v279 = v278;\n
    v280 = (v279 >> 6) + v279 * 4;\n
    v281 = (v277 + v280) + 1;\n
    v282 = (v281 >> 6) + v281 * 4;\n
    v283 = v274 + v280 + 1;\n
    v284 = v282 + v15;\n
    v285 = (v284 / 64 + (v284 & 63) * 4 | v282 * 0x100 | (v280 * 0x10000) | v283 * 0x40000 & 0x3000000 | v283 * 0x4000000) ^ v261;\n
    v286 = v285 / 0x1000000;\n
    v287 = v1[8];\n
    v289 = v287 ^ v285 ^ v285 / 0x100;\n
    v290 = (v287 / 0x100 ^ v285 / 0x10000 ^ v286) + v289;\n
    v291 = v290;\n
    v292 = (v291 >> 6) + v291 * 4;\n
    v293 = (v289 + v292) + 1;\n
    v294 = (v293 >> 6) + v293 * 4;\n
    v295 = v286 + v292 + 1;\n
    v296 = v294 + v29;\n
    v299 = (v296 / 64 + (v296 & 63) * 4 | v294 * 0x100 | (v292 * 0x10000) | v295 * 0x40000 & 0x3000000 | v295 * 0x4000000) ^ v273;\n
    v300 = v299 / 0x1000000;\n
    v301 = v1[7];\n
    v303 = v301 ^ v299 ^ v299 / 0x100;\n
    v304 = (v301 / 0x100 ^ v299 / 0x10000 ^ v300) + v303;\n
    v305 = v304;\n
    v306 = (v305 >> 6) + v305 * 4;\n
    v307 = (v303 + v306) + 1;\n
    v308 = (v307 >> 6) + v307 * 4;\n
    v309 = v300 + v306 + 1;\n
    v310 = v308 + v3;\n
    v311 = (v310 / 64 + (v310 & 63) * 4 | v308 * 0x100 | (v306 * 0x10000) | v309 * 0x40000 & 0x3000000 | v309 * 0x4000000) ^ v285;\n
    v312 = v311 / 0x1000000;\n
    v313 = v1[6];\n
    v315 = v313 ^ v311 ^ v311 / 0x100;\n
    v316 = (v313 / 0x100 ^ v311 / 0x10000 ^ v312) + v315;\n
    v317 = v316;\n
    v318 = (v317 >> 6) + v317 * 4;\n
    v319 = (v315 + v318) + 1;\n
    v320 = (v319 >> 6) + v319 * 4;\n
    v321 = v312 + v318 + 1;\n
    v322 = v320 + v15;\n
    v323 = (v322 / 64 + (v322 & 63) * 4 | v320 * 0x100 | (v318 * 0x10000) | v321 * 0x40000 & 0x3000000 | v321 * 0x4000000) ^ v299;\n
    v324 = v323 / 0x1000000;\n
    v325 = v1[5];\n
    v327 = v325 ^ v323 ^ v323 / 0x100;\n
    v328 = (v325 / 0x100 ^ v323 / 0x10000 ^ v324) + v327;\n
    v329 = v328;\n
    v330 = (v329 >> 6) + v329 * 4;\n
    v331 = (v327 + v330) + 1;\n
    v332 = (v331 >> 6) + v331 * 4;\n
    v333 = v324 + v330 + 1;\n
    v334 = v332 + v29;\n
    v335 = (v334 / 64 + (v334 & 63) * 4 | v332 * 0x100 | (v330 * 0x10000) | v333 * 0x40000 & 0x3000000 | v333 * 0x4000000) ^ v311;\n
    v336 = v335 / 0x1000000;\n
    v337 = v1[4];\n
    v339 = v337 ^ v335 ^ v335 / 0x100;\n
    v340 = (v337 / 0x100 ^ v335 / 0x10000 ^ v336) + v339;\n
    v341 = v340;\n
    v342 = (v341 >> 6) + v341 * 4;\n
    v343 = (v339 + v342) + 1;\n
    v344 = (v343 >> 6) + v343 * 4;\n
    v345 = v336 + v342 + 1;\n
    v346 = v344 + v3;\n
    v347 = (v346 / 64 + (v346 & 63) * 4 | v344 * 0x100 | (v342 * 0x10000) | v345 * 0x40000 & 0x3000000 | v345 * 0x4000000) ^ v323;\n
    v348 = v347 / 0x1000000;\n
    v349 = v1[3];\n
    v352 = v349 ^ v347 ^ v347 / 0x100;\n
    v353 = (v349 / 0x100 ^ v347 / 0x10000 ^ v348) + v352;\n
    v354 = v353;\n
    v355 = (v354 >> 6) + v354 * 4;\n
    v356 = (v352 + v355) + 1;\n
    v357 = (v356 >> 6) + v356 * 4;\n
    v358 = v348 + v355 + 1;\n
    v359 = v357 + v15;\n
    v360 = (v359 / 64 + (v359 & 63) * 4 | v357 * 0x100 | (v355 * 0x10000) | v358 * 0x40000 & 0x3000000 | v358 * 0x4000000) ^ v335;\n
    v361 = v360 / 0x1000000;\n
    v362 = v1[2];\n
    v364 = v362 ^ v360 ^ v360 / 0x100;\n
    v365 = (v362 / 0x100 ^ v360 / 0x10000 ^ v361) + v364;\n
    v366 = v365;\n
    v367 = (v366 >> 6) + v366 * 4;\n
    v368 = (v364 + v367) + 1;\n
    v369 = (v368 >> 6) + v368 * 4;\n
    v370 = v361 + v367 + 1;\n
    v371 = v369 + v29;\n
    v372 = (v371 / 64 + (v371 & 63) * 4 | v369 * 0x100 | (v367 * 0x10000) | v370 * 0x40000 & 0x3000000 | v370 * 0x4000000) ^ v347;\n
    v373 = v372 / 0x1000000;\n
    v374 = v1[1];\n
    v376 = v374 ^ v372 ^ v372 / 0x100;\n
    v377 = (v374 / 0x100 ^ v372 / 0x10000 ^ v373) + v376;\n
    v378 = v377;\n
    v379 = (v378 >> 6) + v378 * 4;\n
    v380 = (v376 + v379) + 1;\n
    v381 = (v380 >> 6) + v380 * 4;\n
    v382 = v373 + v379 + 1;\n
    v383 = v381 + v3;\n
    v384 = (v383 / 64 + (v383 & 63) * 4 | v381 * 0x100 | (v379 * 0x10000) | v382 * 0x40000 & 0x3000000 | v382 * 0x4000000) ^ v360;\n
    v385 = v384 / 0x1000000;\n
    v386 = v1[0];\n
    v388 = v386 ^ v384 ^ v384 / 0x100;\n
    v389 = (v386 / 0x100 ^ v384 / 0x10000 ^ v385) + v388;\n
    v390 = v389;\n
    v391 = (v390 >> 6) + v390 * 4;\n
    v392 = (v388 + v391) + 1;\n
    v393 = (v392 >> 6) + v392 * 4;\n
    v394 = v385 + v391 + 1;\n
    v395 = v393 + v384;\n
    v396 = (v395 / 64 + (v395 & 63) * 4 | v393 * 0x100 | (v391 * 0x10000) | v394 * 0x40000 & 0x3000000 | v394 * 0x4000000) ^ v372;\n
    v397 = (v1[35] | v1[34] * 0x10000) ^ v384 ^ v396;\n
    a1[0] = (v1[33] | v1[32] * 0x10000) ^ v396;\n
    a1[1] = v397;\n
    return 0;\n
}\n
", "4244869:sub_40c585": null, "4244880:cgc_null_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_null_init(struct_0 *a0)\n
{\n
    a0->field_8 = 0;\n
    return 0;\n
}\n
", "4244891:sub_40c59b": null, "4244896:cgc_null_destroy": "long long cgc_null_destroy()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4244897:sub_40c5a1": null, "4244912:cgc_null_encode": "long long cgc_null_encode()\n
{\n
    return 0;\n
}\n
", "4244915:sub_40c5b3": null, "4244928:cgc_null_decode": "long long cgc_null_decode()\n
{\n
    return 0;\n
}\n
", "4244931:sub_40c5c3": null, "4244944:cgc_codes_ksize": "extern char codes;\n
\n
long long cgc_codes_ksize(struct struct_0 **a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 4294967295;\n
    if (a0 <= 4)\n
        v1 = *((*((&codes + 0x8 * a0)) + 16));\n
    return v1;\n
}\n
", "4244971:sub_40c5eb": null, "4244976:cgc_codes_init": "extern char codes;\n
\n
long long cgc_codes_init(unsigned long long *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    switch (a1)\n
    {\n
    case 0:\n
        break;\n
    default:\n
        return 1;\n
    }\n
}\n
", "4245012:sub_40c614": null, "4245024:cgc_codes_self_test": "typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    char padding_14[4];\n
    struct struct_0 *field_18;\n
    struct struct_0 *field_20;\n
    struct struct_0 *field_28;\n
    struct struct_0 *field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 *codes;\n
extern struct_1 *g_416c58;\n
extern struct_1 *g_416c60;\n
extern struct_1 *g_416c68;\n
extern struct_1 *g_416c70;\n
extern unsigned int test_b;\n
extern unsigned long long test_k;\n
\n
long long cgc_codes_self_test()\n
{\n
    struct_1 *v0;  // [bp-0x48]\n
    char v1;  // [bp-0x38]\n
\n
    if (!(codes->field_10 <= 0x100 && codes->field_c <= 128))\n
        return 1;\n
    v0 = codes;\n
    if (!codes->field_18(&v0, &test_k))\n
    {\n
        cgc_memcpy(&v1, &test_b, 0x10);\n
        codes->field_28(&v0, &v1);\n
        codes->field_30(&v0, &v1);\n
        codes->field_20(&v0);\n
        if (!cgc_memcmp(&v1, &test_b, 16) && g_416c58->field_10 <= 0x100 && g_416c58->field_c <= 128)\n
        {\n
            v0 = g_416c58;\n
            if (!g_416c58->field_18(&v0, &test_k))\n
            {\n
                cgc_memcpy(&v1, &test_b, 0x10);\n
                g_416c58->field_28(&v0, &v1);\n
                g_416c58->field_30(&v0, &v1);\n
                g_416c58->field_20(&v0);\n
                if (!cgc_memcmp(&v1, &test_b, 16) && g_416c60->field_10 <= 0x100 && g_416c60->field_c <= 128)\n
                {\n
                    v0 = g_416c60;\n
                    if (!g_416c60->field_18(&v0, &test_k))\n
                    {\n
                        cgc_memcpy(&v1, &test_b, 0x10);\n
                        g_416c60->field_28(&v0, &v1);\n
                        g_416c60->field_30(&v0, &v1);\n
                        g_416c60->field_20(&v0);\n
                        if (!cgc_memcmp(&v1, &test_b, 16) && g_416c68->field_10 <= 0x100 && g_416c68->field_c <= 128)\n
                        {\n
                            v0 = g_416c68;\n
                            if (!g_416c68->field_18(&v0, &test_k))\n
                            {\n
                                cgc_memcpy(&v1, &test_b, 0x10);\n
                                g_416c68->field_28(&v0, &v1);\n
                                g_416c68->field_30(&v0, &v1);\n
                                g_416c68->field_20(&v0);\n
                                if (!cgc_memcmp(&v1, &test_b, 16) && g_416c70->field_10 <= 0x100 && g_416c70->field_c <= 128)\n
                                {\n
                                    v0 = g_416c70;\n
                                    if (!g_416c70->field_18(&v0, &test_k))\n
                                    {\n
                                        cgc_memcpy(&v1, &test_b, 0x10);\n
                                        g_416c70->field_28(&v0, &v1);\n
                                        g_416c70->field_30(&v0, &v1);\n
                                        g_416c70->field_20(&v0);\n
                                        if (!cgc_memcmp(&v1, &test_b, 16))\n
                                            return 0;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4245721:sub_40c8d9": null, "4245728:cgc_ht_init": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long cgc_ht_init(struct_0 *a0)\n
{\n
    cgc_memset(a0, 0, 0x18);\n
    a0->field_10 = 4;\n
    return _ht_resize(a0);\n
}\n
", "4245757:sub_40c8fd": null, "4245760:_ht_resize": "typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long _ht_resize(struct_2 *a0)\n
{\n
    struct_2 *v0;  // [bp-0x38]\n
    struct_2 *v2;  // rax\n
    unsigned long v3;  // r12\n
    unsigned long long *v4;  // rbp\n
    unsigned int v5;  // ebx\n
    char *v6;  // r15\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rcx, Other Possible Types: char\n
    char *v9;  // r15, Other Possible Types: unsigned long\n
    unsigned long v10;  // rdx\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // r13, Other Possible Types: unsigned long\n
    struct_3 *v13;  // rbx\n
\n
    v0 = v2;\n
    v3 = a0->field_10 * 2;\n
    v4 = cgc_calloc(v3, 8);\n
    if (!v4)\n
        return 1;\n
    v0 = a0;\n
    v12 = a0->field_0;\n
    if (v12)\n
    {\n
        v5 = v3 - 1;\n
        do\n
        {\n
            v6 = *((v12 + 16));\n
            v8 = *(v6);\n
            if (*(v6))\n
            {\n
                v9 = v6 + 1;\n
                do\n
                {\n
                    v7 = cgc_tolower(v8) + v7 + v7 * 36;\n
                    v8 = *(v9);\n
                    v9 += 1;\n
                } while (v8);\n
                v10 = (0 CONCAT v7) /m v3 >> 32;\n
                if (!v4[v10])\n
                    continue;\n
            }\n
            else\n
            {\n
                v10 = (0 CONCAT 13573) /m v3 >> 32;\n
                if (!v4[v10])\n
                    continue;\n
            }\n
            v11 = v10 - 1 & v5;\n
            do\n
            {\n
                if (v10 == v11)\n
                {\n
                    cgc_free(v4);\n
                    return 1;\n
                }\n
                v10 = v10 + 1 & v5;\n
            } while (v4[v10]);\n
            v4[v10] = v12;\n
            v12 = *(v12);\n
        } while (v12);\n
    }\n
    v13 = v0;\n
    cgc_free(*(&v13->field_8));\n
    *(&v13->field_8) = v4;\n
    v13->field_10 = v3;\n
    return 0;\n
}\n
", "4245834:sub_40c94a": null, "4245933:sub_40c9ad": null, "4246045:sub_40ca1d": null, "4246048:cgc_ht_compare": "long long cgc_ht_compare(char *a0, char *a1)\n
{\n
    return cgc_strcasecmp(a0, a1);\n
}\n
", "4246053:sub_40ca25": null, "4246064:cgc_ht_lookup": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    char *field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_ht_lookup(struct_1 *a0, char *a1, unsigned long long *a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned int\n
    unsigned long v4;  // cl, Other Possible Types: char\n
    char *v5;  // rbp, Other Possible Types: unsigned long\n
    struct struct_0 **v6;  // rdx\n
    struct struct_0 **v7;  // rbp, Other Possible Types: unsigned long\n
    struct_2 *v8;  // rax, Other Possible Types: unsigned long\n
    unsigned long v9;  // r12, Other Possible Types: unsigned long long\n
    struct struct_0 **v10;  // rdx\n
    struct_0 *v11;  // rax\n
\n
    *(&v0) = v2;\n
    v4 = *(a1);\n
    if (!*(a1))\n
    {\n
        v2 = 13573;\n
    }\n
    else\n
    {\n
        v5 = a1 + 1;\n
        do\n
        {\n
            v2 = cgc_tolower(v4) + v2 + v2 * 36;\n
            v4 = *(v5);\n
            v5 += 1;\n
        } while (v4);\n
    }\n
    v6 = (0 CONCAT v2) /m a0->field_10 >> 32;\n
    v7 = v6;\n
    v8 = *((a0->field_8 + v6 * 8));\n
    v9 = 1;\n
    if (!v8)\n
        return 1;\n
    while (cgc_strcasecmp(*((v8 + 16)), a1))\n
    {\n
        v10 = (0 CONCAT v7 + 1) /m a0->field_10 >> 32;\n
        v7 = v10;\n
        v8 = *((a0->field_8 + v10 * 8));\n
        if (!v8)\n
            return 1;\n
    }\n
    v11 = *((a0->field_8 + v7 * 8));\n
    if (!v11)\n
        return v9;\n
    *(a2) = v11;\n
    v9 = 0;\n
}\n
", "4246259:sub_40caf3": null, "4246272:cgc_ht_delete": "typedef struct struct_3 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    struct struct_4 *field_0;\n
    struct struct_6 *field_8;\n
    struct struct_7 *field_10;\n
    unsigned long long field_18;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    unsigned long long field_0;\n
} struct_6;\n
\n
typedef struct struct_7 {\n
    struct struct_4 *field_0;\n
} struct_7;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long cgc_ht_delete(struct_3 *a0, char *a1, unsigned long long *a2)\n
{\n
    struct_5 *v0;  // [bp-0x40]\n
    struct_3 *v1;  // [bp-0x38]\n
    struct_3 *v4;  // r12\n
    unsigned long v5;  // cl, Other Possible Types: char\n
    char *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v8;  // rax, Other Possible Types: unsigned int\n
    struct struct_5 **v9;  // rdx\n
    struct struct_5 **v10;  // rbx, Other Possible Types: unsigned long\n
    struct_5 *v11;  // rax, Other Possible Types: unsigned long\n
    struct struct_5 **v12;  // rdx\n
    struct_5 *v13;  // rdx\n
    struct_4 *v14;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rax, Other Possible Types: unsigned long, unsigned int\n
    struct struct_4 **v16;  // rbp\n
    char *v17;  // rbp, Other Possible Types: unsigned long\n
    struct struct_1 **v18;  // rdx\n
    struct struct_1 **v19;  // ecx, Other Possible Types: unsigned long, unsigned int\n
    struct struct_1 **v20;  // rsi\n
    unsigned long v21;  // rax\n
    struct_5 *v22;  // rdi\n
    struct struct_1 **v23;  // rdx\n
    struct struct_1 **v24;  // rsi\n
    struct struct_1 **v25;  // eax, Other Possible Types: unsigned int\n
    struct struct_1 **v26;  // r13d\n
    unsigned long long v27;  // rdx\n
    unsigned long v28;  // rdx\n
    struct_1 *v29;  // rax, Other Possible Types: unsigned long, unsigned int\n
    struct struct_0 **v30;  // r14\n
    char *v31;  // r14, Other Possible Types: unsigned long\n
    unsigned int v32;  // edx\n
    struct_3 *v33;  // rsi\n
    unsigned long v34;  // rax\n
    unsigned int v35;  // ebp\n
    struct struct_1 **v36;  // rdx\n
    struct struct_1 **v37;  // rbx, Other Possible Types: unsigned long, unsigned int\n
    struct struct_1 **v38;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v39;  // r15d\n
    struct_5 *v40;  // rbx\n
\n
    v4 = a0;\n
    v5 = *(a1);\n
    if (!*(a1))\n
    {\n
        v8 = 13573;\n
    }\n
    else\n
    {\n
        v7 = a1 + 1;\n
        do\n
        {\n
            v8 = cgc_tolower(v5) + rax<8> + rax<8> * 36;\n
            v5 = *(v7);\n
            v7 += 1;\n
        } while (v5);\n
    }\n
    v9 = (0 CONCAT v8) /m a0->field_10 >> 32;\n
    v10 = v9;\n
    v11 = *((&a0->field_8->field_0 + 0x8 * v9));\n
    if (!v11)\n
        return 1;\n
    while (cgc_strcasecmp(*((v11 + 16)), a1))\n
    {\n
        v12 = (0 CONCAT v10 + 1) /m a0->field_10 >> 32;\n
        v10 = v12;\n
        v11 = *((&a0->field_8->field_0 + 0x8 * v12));\n
        if (!v11)\n
            return 1;\n
    }\n
    v13 = a0->field_8[v10].field_0;\n
    if (!v13)\n
        return 1;\n
    *(a2) = v13->field_18;\n
    v14 = v13->field_0;\n
    v15 = v13->field_8;\n
    if (v15)\n
    {\n
        *(v15) = v14;\n
        v14 = v13->field_0;\n
        if (!v14)\n
            goto LABEL_40cbd8;\n
    }\n
    else\n
    {\n
        a0->field_0 = v14;\n
        if (!v14)\n
            goto LABEL_40cbd8;\n
    }\n
    *((v14 + 8)) = v15;\n
LABEL_40cbd8:\n
    v0 = v13;\n
    v16 = v13->field_10;\n
    *(&v14) = *(v16);\n
    if (!*(v16))\n
    {\n
        v15 = 13573;\n
    }\n
    else\n
    {\n
        v17 = v16 + 1;\n
        do\n
        {\n
            v15 = cgc_tolower(v14) + v15 + v15 * 36;\n
            v14 = *(v17);\n
            v17 += 1;\n
        } while (v14);\n
    }\n
    v18 = (0 CONCAT v15) /m a0->field_10 >> 32;\n
    v19 = v18;\n
    v20 = a0->field_8;\n
    v39 = a0->field_10;\n
    v21 = v18;\n
    v37 = v18;\n
    v22 = v0;\n
    if (*((v20 + 0x8 * v18)) != v22)\n
    {\n
        v37 = v18;\n
        do\n
        {\n
            v23 = (0 CONCAT v37 + 1) /m v39 >> 32;\n
            v37 = v23;\n
        } while (*((v20 + 0x8 * v23)) != v22);\n
        v21 = v23;\n
    }\n
    v20[v21] = 0;\n
    v4->field_14 = v4->field_14 - 1;\n
    v24 = v4->field_8;\n
    v25 = v37;\n
    do\n
    {\n
        v26 = v19;\n
        v27 = (0 CONCAT v25 + v39 - 1) /m v39 >> 32;\n
        v19 = v27;\n
        v25 = v27;\n
    } while (v24[v27]);\n
    v28 = (0 CONCAT v37 + 1) /m v39 >> 32;\n
    v38 = v28;\n
    v29 = v24[v28];\n
    if (v29)\n
    {\n
        v1 = v4;\n
        do\n
        {\n
            v30 = *((v29 + 16));\n
            *(&v19) = *(v30);\n
            if (!*(v30))\n
            {\n
                v29 = 13573;\n
            }\n
            else\n
            {\n
                v31 = v30 + 1;\n
                do\n
                {\n
                    v29 = cgc_tolower(v19) + v29 + v29 * 36;\n
                    v19 = *(v31);\n
                    v31 += 1;\n
                } while (v19);\n
            }\n
            v32 = (0 CONCAT v29) /m v39 >> 32;\n
            v33 = v1;\n
            if (v26 <= v37 && v26 <= v32 && v32 <= v37)\n
                goto LABEL_40ccd0;\n
            if (v26 <= v37)\n
                continue;\n
            if (v26 > v32 && !(v32 <= v37))\n
                continue;\n
LABEL_40ccd0:\n
            v34 = v33->field_8;\n
            *((v34 + v37 * 8)) = *((v34 + v38 * 8));\n
            v33->field_8[v38].field_0 = 0;\n
            v37 = v38;\n
            v35 = v38 + 1;\n
            v39 = v33->field_10;\n
            v36 = (0 CONCAT v35) /m v39 >> 32;\n
            v38 = v36;\n
            v29 = *((&v33->field_8->field_0 + 0x8 * v36));\n
        } while (v29);\n
    }\n
    v40 = v0;\n
    cgc_free(v40->field_10);\n
    cgc_free(v40);\n
    return 0;\n
}\n
", "4246723:sub_40ccc3": null, "4246949:sub_40cda5": null, "4246960:cgc_ht_insert": "typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    struct struct_5 *field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_4;\n
\n
typedef struct struct_6 {\n
    char padding_0[16];\n
    char *field_10;\n
} struct_6;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    struct struct_2 *field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned long long field_0;\n
} struct_5;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
long long cgc_ht_insert(struct_4 *a0, char *a1, char *a2)\n
{\n
    char *v0;  // [bp-0x40]\n
    struct_1 *v1;  // [bp-0x38]\n
    unsigned long v3;  // cl, Other Possible Types: char\n
    char *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v5;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // rdx\n
    struct struct_0 **v8;  // rbx, Other Possible Types: unsigned long\n
    struct_6 *v9;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v10;  // rdx\n
    char *v12;  // rax, Other Possible Types: unsigned long, unsigned int\n
    char *v13;  // r15, Other Possible Types: unsigned long\n
    struct_1 *v14;  // r14, Other Possible Types: unsigned long\n
    unsigned long v15;  // rbx, Other Possible Types: unsigned int\n
    unsigned long long v16;  // xmm1lq\n
    int v17;  // xmm1\n
    unsigned long long *v19;  // rbp\n
    char *v20;  // r15, Other Possible Types: unsigned long\n
    unsigned long v21;  // rdx\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // eax\n
    struct_3 *v24;  // rax\n
\n
    v3 = *(a1);\n
    v0 = a2;\n
    if (!*(a1))\n
    {\n
        v5 = 13573;\n
    }\n
    else\n
    {\n
        v4 = a1 + 1;\n
        do\n
        {\n
            v5 = cgc_tolower(v3) + rax<8> + rax<8> * 36;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v7 = (0 CONCAT v5) /m a0->field_10 >> 32;\n
    v8 = v7;\n
    v9 = *((&a0->field_8->field_0 + 0x8 * v7));\n
    if (v9)\n
    {\n
        do\n
        {\n
            if (!cgc_strcasecmp(*((v9 + 16)), a1))\n
            {\n
                if (a0->field_8[v8].field_0)\n
                    return 1;\n
                break;\n
            }\n
            v10 = (0 CONCAT v8 + 1) /m a0->field_10 >> 32;\n
            v8 = v10;\n
            v9 = *((&a0->field_8->field_0 + 0x8 * v10));\n
        } while (v9);\n
    }\n
    if (a0->field_14 == 0x2000)\n
        return 1;\n
    v12 = cgc_strdup(a1);\n
    if (!v12)\n
        return 1;\n
    v13 = v12;\n
    v14 = cgc_malloc(32);\n
    v14->field_10 = v13;\n
    v14->field_18 = v0;\n
    v15 = a0->field_10;\n
    v16 = v15;\n
    v0 = v13;\n
    if (!(CmpF(a0->field_14 + 1, v17 * 0x3fe0000000000000) & 1))\n
    {\n
        if (!(!_ht_resize(a0)))\n
            goto LABEL_40cec9;\n
        v15 = a0->field_10;\n
        v13 = v14->field_10;\n
    }\n
    v1 = v14;\n
    v19 = a0->field_8;\n
    *(&v3) = *(v13);\n
    if (!*(v13))\n
    {\n
        v12 = 13573;\n
    }\n
    else\n
    {\n
        v20 = v13 + 1;\n
        do\n
        {\n
            v12 = cgc_tolower(v3) + v12 + v12 * 36;\n
            v3 = *(v20);\n
            v20 += 1;\n
        } while (v3);\n
    }\n
    v21 = (0 CONCAT v12) /m v15 >> 32;\n
    v14 = v1;\n
    if (v19[v21])\n
    {\n
        v22 = v15 - 1;\n
        v23 = v21 - 1 & v22;\n
    }\n
    else\n
    {\n
LABEL_40cf77:\n
        v19[v21] = v14;\n
        a0->field_14 = a0->field_14 + 1;\n
        *((v14 + 8)) = 0;\n
        v24 = a0->field_0;\n
        *(v14) = v24;\n
        if (v24)\n
            v24->field_8 = v14;\n
        a0->field_0 = v14;\n
        return 0;\n
    }\n
    while (v21 != v23)\n
    {\n
        v21 = v21 + 1 & v22;\n
        if (!v19[v21])\n
            goto LABEL_40cf77;\n
    }\n
LABEL_40cec9:\n
    cgc_free(v0);\n
    cgc_free(v14);\n
    return 1;\n
}\n
", "4247475:sub_40cfb3": null, "4247488:cgc_ht_first": "long long cgc_ht_first(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4247492:sub_40cfc4": null, "4247504:cgc_ht_next": "long long cgc_ht_next(unsigned long a0, unsigned long long *a1)\n
{\n
    return *(a1);\n
}\n
", "4247508:sub_40cfd4": null, "4247520:cgc_kx_init_common": "long long cgc_kx_init_common(void* a0)\n
{\n
    cgc_bn_init(a0);\n
    cgc_bn_init(a0 + 16);\n
    cgc_bn_init(a0 + 32);\n
    cgc_bn_init(a0 + 48);\n
    cgc_bn_init(a0 + 64);\n
    return cgc_bn_init(a0 + 80);\n
}\n
", "4247578:sub_40d01a": null, "4247584:cgc_kx_init_std": "extern char g_412b50;\n
extern char g_412cd0;\n
extern char groups;\n
\n
long long cgc_kx_init_std(void* a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    void* v4;  // r12\n
    void* v5;  // r15\n
    unsigned long long v6;  // rbp\n
\n
    v0 = v2;\n
    if (a1 > 3)\n
        return 1;\n
    cgc_bn_init(a0);\n
    v4 = a0 + 16;\n
    cgc_bn_init(v4);\n
    v5 = a0 + 32;\n
    cgc_bn_init(v5);\n
    cgc_bn_init(a0 + 48);\n
    cgc_bn_init(a0 + 64);\n
    cgc_bn_init(a0 + 80);\n
    v6 = a1 * 1152;\n
    if (!cgc_bn_from_bytes(a0, &(&groups)[v6], 384) && !cgc_bn_from_bytes(v4, &(&g_412b50)[v6], 384) && !cgc_bn_from_bytes(v5, &(&g_412cd0)[v6], 384))\n
        return 0;\n
    cgc_bn_destroy(a0);\n
    cgc_bn_destroy(v4);\n
    cgc_bn_destroy(v5);\n
    return 1;\n
}\n
", "4247814:sub_40d106": null, "4247824:cgc_kx_init": "long long cgc_kx_init(void* a0, unsigned int a1[3], unsigned int a2[3], unsigned int a3[3])\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    void* v3;  // r14\n
    void* v4;  // r15\n
\n
    v0 = v2;\n
    cgc_bn_init(a0);\n
    v3 = a0 + 16;\n
    cgc_bn_init(v3);\n
    v4 = a0 + 32;\n
    cgc_bn_init(v4);\n
    cgc_bn_init(a0 + 48);\n
    cgc_bn_init(a0 + 64);\n
    cgc_bn_init(a0 + 80);\n
    if (!cgc_bn_copy(a0, a1) && !cgc_bn_copy(v3, a2) && !cgc_bn_copy(v4, a3))\n
        return 0;\n
    cgc_bn_destroy(a0);\n
    cgc_bn_destroy(v3);\n
    cgc_bn_destroy(v4);\n
    return 1;\n
}\n
", "4247996:sub_40d1bc": null, "4248000:cgc_kx_destroy": "long long cgc_kx_destroy(unsigned int a0[3])\n
{\n
    cgc_bn_destroy(a0);\n
    cgc_bn_destroy(&a0[1 + 1]);\n
    cgc_bn_destroy(&a0[2 + 2]);\n
    cgc_bn_destroy(a0 + 4);\n
    cgc_bn_destroy(&a0[5 + 1]);\n
    return cgc_bn_destroy(&a0[6 + 2]);\n
}\n
", "4248058:sub_40d1fa": null, "4248064:cgc_kx_gen_a": "long long cgc_kx_gen_a(unsigned long a0, struct struct_3 **a1)\n
{\n
    return cgc_bn_cgc_random(a0 + 48, a0 + 16, a1);\n
}\n
", "4248083:sub_40d213": null, "4248096:cgc_kx_get_A": "long long cgc_kx_get_A(void* a0, unsigned int a1[3])\n
{\n
    return cgc_bn_modexp(a1, a0 + 32, a0 + 48, a0);\n
}\n
", "4248118:sub_40d236": null, "4248128:cgc_kx_set_b": "long long cgc_kx_set_b(unsigned long a0, unsigned int a1[3])\n
{\n
    return cgc_bn_copy(a0 + 64, a1);\n
}\n
", "4248137:sub_40d249": null, "4248144:cgc_kx_get_sk": "long long cgc_kx_get_sk(void* a0, unsigned int a1, unsigned long a2)\n
{\n
    unsigned int v2[3];  // r15\n
\n
    if (cgc_bn_length(a0 + 16) <= a2)\n
        return 1;\n
    v2 = a0 + 80;\n
    if (!cgc_bn_modexp(v2, a0 + 64, a0 + 48, a0))\n
    {\n
        cgc_bn_to_bytes(v2, a1, a2 / 8);\n
        return 0;\n
    }\n
    return 1;\n
}\n
", "4248237:sub_40d2ad": null, "4248240:cgc_kx_self_test": "extern char cgc_kx_self_test.exp_A;\n
extern unsigned int cgc_kx_self_test.exp_k;\n
extern char cgc_kx_self_test.test_a;\n
extern char cgc_kx_self_test.test_b;\n
\n
long long cgc_kx_self_test(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0xc8]\n
    char v1;  // [bp-0xb8]\n
    char v2;  // [bp-0xa8]\n
    char v3;  // [bp-0x98]\n
    unsigned int v4[3];  // [bp-0x88]\n
    unsigned int v5[3];  // [bp-0x78]\n
    char v6;  // [bp-0x68]\n
    unsigned int v7[3];  // [bp-0x58]\n
    unsigned int v8[3];  // [bp-0x48]\n
    char v9;  // [bp-0x38]\n
    char v11;  // bpl\n
    unsigned long v12;  // rbx, Other Possible Types: unsigned long long\n
\n
    cgc_bn_init(&v2);\n
    cgc_bn_init(&v1);\n
    cgc_bn_init(&v0);\n
    if (!cgc_kx_init_std(&v3, 2))\n
    {\n
        a2 = 32;\n
        v11 = 1;\n
        if (!cgc_bn_from_bytes(&v6, &cgc_kx_self_test.test_a, 32) && !cgc_bn_modexp(&v2, v5, &v6, &v3))\n
        {\n
            a2 = 0x100;\n
            if (!cgc_bn_from_bytes(&v0, &cgc_kx_self_test.exp_A, 0x100) && !cgc_bn_cmp(&v2, &v0))\n
            {\n
                a2 = 0x100;\n
                if (!cgc_bn_from_bytes(&v1, &cgc_kx_self_test.test_b, 0x100) && !cgc_bn_copy(v7, &v1))\n
                {\n
                    a2 = 248;\n
                    if (!cgc_kx_get_sk(&v3, &v9, 248))\n
                    {\n
                        a2 = 31;\n
                        v11 = cgc_memcmp(&v9, &cgc_kx_self_test.exp_k, 31);\n
                    }\n
                }\n
            }\n
        }\n
        cgc_bn_destroy(&v3);\n
        cgc_bn_destroy(v4);\n
        cgc_bn_destroy(v5);\n
        cgc_bn_destroy(&v6);\n
        cgc_bn_destroy(v7);\n
        cgc_bn_destroy(v8);\n
        v12 = 0;\n
        if (!v11)\n
            goto LABEL_40d41b;\n
    }\n
    cgc_fdprintf(2, \"KX self-test FAILED!\\n
\", a2, a3, a4);\n
    v12 = 1;\n
LABEL_40d41b:\n
    cgc_bn_destroy(&v2);\n
    cgc_bn_destroy(&v1);\n
    cgc_bn_destroy(&v0);\n
    return v12;\n
}\n
", "4248643:sub_40d443": null, "4248656:cgc_read_line": "long long cgc_read_line(unsigned long long a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char *v1;  // r13, Other Possible Types: unsigned long\n
    char *v2;  // rbx, Other Possible Types: unsigned long\n
    char *v3;  // r12, Other Possible Types: unsigned long\n
    char *v4;  // rbx\n
    void* v5;  // r15, Other Possible Types: unsigned long\n
    unsigned long v6;  // rax\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v5 = 0;\n
    do\n
    {\n
        if (v1 != v5)\n
        {\n
            v3 = v2;\n
        }\n
        else\n
        {\n
            if (!(v1 <= 65535))\n
                goto LABEL_40d4e8;\n
            v5 = v1 + 0x400;\n
            v3 = cgc_realloc(v2, v5);\n
            if (!v3)\n
                goto LABEL_40d4e8;\n
        }\n
        v4 = v3 + v1;\n
        if (cgc_silk_recv(a0, v4, 1))\n
        {\n
            v2 = v3;\n
LABEL_40d4e8:\n
            cgc_free(v2);\n
            return 0;\n
        }\n
        v1 += 1;\n
        tmp_7 = *(v4);\n
        v2 = v3;\n
    } while (tmp_7 != 8);\n
    if (v1 != v5)\n
    {\n
        v6 = v3;\n
LABEL_40d4f7:\n
        *((v6 + v1)) = 0;\n
        return v6;\n
    }\n
    v6 = cgc_realloc(v3, v5 + 1);\n
    v2 = v3;\n
    if (!(!v6))\n
        goto LABEL_40d4f7;\n
    goto LABEL_40d4e8;\n
}\n
", "4248730:sub_40d49a": null, "4248838:sub_40d506": null, "4248848:cgc_do_buy": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    char padding_10[4];\n
    unsigned int field_14;\n
} struct_0;\n
\n
long long cgc_do_buy(unsigned long long a0, char *a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    void* v3;  // r15\n
    unsigned long long v4;  // rcx\n
    unsigned int v7[6];  // rbx\n
\n
    cgc_unescape(a1);\n
    v3 = a0 + 32;\n
    if (!cgc_ht_lookup(v3, a1, &v1))\n
    {\n
        v0 = *((v1 + 24));\n
        v4 = v0->field_14;\n
        if (v4)\n
        {\n
            v0->field_14 = v4 - 1;\n
            if (v4 + -1)\n
                return cgc_send_response(a0, 0x1000, \"Success\");\n
            cgc_ht_delete(v3, a1, &v0);\n
            v7 = v0;\n
            cgc_free(*(&v7[2]));\n
            cgc_free(*(&v7[0]));\n
            cgc_free(v7);\n
        }\n
    }\n
    return cgc_send_response(a0, 8194, \"Name not found\");\n
}\n
", "4249013:sub_40d5b5": null, "4249024:cgc_unescape": "long long cgc_unescape(char a0[3])\n
{\n
    char v0[3];  // [bp-0x38]\n
    char v2[3];  // rax\n
    char v3[3];  // rax, Other Possible Types: unsigned long\n
    char v4[3];  // ecx, Other Possible Types: unsigned int\n
    unsigned long v5;  // rbx\n
    unsigned long v6;  // r12\n
    char v7;  // r13b\n
    unsigned long long v8;  // r13\n
    char v9;  // r13b\n
    unsigned long long v10;  // rax\n
    char v11;  // al\n
    unsigned long v12;  // ebp, Other Possible Types: unsigned int\n
    char v13[3];  // r14, Other Possible Types: unsigned long\n
\n
    *(&v0) = v2;\n
    v3 = cgc_strlen(a0);\n
    v4 = v3;\n
    v12 = 0;\n
    if (!v3)\n
    {\n
        a0[v12] = 0;\n
        return v3;\n
    }\n
    v13 = 0;\n
    *(&v0) = v3;\n
    do\n
    {\n
        v5 = v12;\n
        if (a0[v12] != 37)\n
        {\n
LABEL_40d5f0:\n
            v7 = a0[v5];\n
            continue;\n
        }\n
        else\n
        {\n
            v6 = v12 + 2;\n
            if (!(v6 < v4))\n
                goto LABEL_40d5f0;\n
            v4 = v0;\n
            if (!cgc_isxdigit(a0[1 + v12]))\n
                goto LABEL_40d5f0;\n
            v4 = v0;\n
            if (!cgc_isxdigit(a0[v6]))\n
                goto LABEL_40d5f0;\n
            v8 = a0[1 + v12];\n
            if (cgc_isdigit(a0[1 + v12]))\n
                v9 = v8 - 48;\n
            else\n
                v9 = cgc_tolower(v8) - 87;\n
            v10 = a0[v6];\n
            if (!cgc_isdigit(a0[v6]))\n
                v11 = cgc_tolower(v10) - 87;\n
            else\n
                v11 = v10 - 48;\n
            v7 = v9 * 16 | v11;\n
            v12 = v6;\n
            v4 = v0;\n
        }\n
        v3 = v13;\n
        a0[v13] = v7;\n
        v12 = v12 + 1;\n
        v13 = v13 + 1;\n
    } while (v12 < v4);\n
    v12 = v13;\n
}\n
", "4249065:sub_40d5e9": null, "4249282:sub_40d6c2": null, "4249296:cgc_send_response": "extern void g_413c5e;\n
\n
long long cgc_send_response(unsigned long a0, unsigned int a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x428]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v3;  // rbp\n
\n
    if (cgc_strlen(a2) + 64 <= 1023)\n
    {\n
        cgc_sprintf(&v0, &g_413c5e, a1, a2, a4);\n
        v2 = cgc_silk_send(a0 + 24, &v0, cgc_strlen(&v0));\n
        return v2;\n
    }\n
    v3 = cgc_malloc(cgc_strlen(a2) + 64);\n
    cgc_fdprintf(2, \"WARNING text is too long: \", a2, a3, a4);\n
    cgc_fdprintf(2, a2, a2, a3, a4);\n
    cgc_fdprintf(2, \"\\n
\", a2, a3, a4);\n
    if (!v3)\n
        return 1;\n
    cgc_sprintf(v3, &g_413c5e, a1, a2, a4);\n
    v2 = cgc_silk_send(a0 + 24, v3, cgc_strlen(v3));\n
    cgc_free(v3);\n
    return v2;\n
}\n
", "4249553:sub_40d7d1": null, "4249568:cgc_do_sell": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    char *field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_1;\n
\n
long long cgc_do_sell(unsigned int a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    unsigned long long v1;  // [bp-0x38]\n
    char *v3;  // rax\n
    char v4[3];  // rbx\n
    char *v5;  // rax\n
    char v6[2];  // rbp\n
    unsigned int v7;  // r12d\n
    char *v8;  // rax\n
    unsigned long long v9;  // r13\n
    void* v10;  // rbp\n
    struct_0 *v11;  // rax\n
    struct_2 *v12;  // rbp\n
    struct_1 *v13;  // r13\n
    unsigned long v16;  // rax\n
    char *v17;  // rsi\n
\n
    v3 = cgc_strchr(a1, 59);\n
    if (!v3)\n
        return cgc_send_response(a0, 8195, \"Invalid request\", a3, a4);\n
    v4 = v3 + 1;\n
    *(v3) = 0;\n
    v5 = cgc_strchr(v4, 59);\n
    if (!v5)\n
        return cgc_send_response(a0, 8195, \"Invalid request\", a3, a4);\n
    v6 = v5 + 1;\n
    *(v5) = 0;\n
    v7 = cgc_strtoul(v6, NULL, 10);\n
    v8 = cgc_strchr(v6, 59);\n
    if (!v8)\n
        return cgc_send_response(a0, 8195, \"Invalid request\", a3, a4);\n
    *(v8) = 0;\n
    v9 = cgc_strtoul(v8 + 1, NULL, 10);\n
    cgc_unescape(v4);\n
    cgc_unescape(a1);\n
    v10 = a0 + 32;\n
    if (!cgc_ht_lookup(v10, a1, &v1))\n
    {\n
        v12 = *((v1 + 24));\n
        if (cgc_strcasecmp(v12->field_8, v4))\n
            return cgc_send_response(a0, 8193, \"Name already in-use\", a3, a4);\n
        v12->field_10 = v7;\n
        v12->field_14 = v12->field_14 + v9;\n
        return cgc_send_response(a0, 4097, \"Record updated\", a3, a4);\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v11 = cgc_malloc(24);\n
        if (!v11)\n
            return cgc_send_response(a0, 0xa000, \"Internal error\", a3, a4);\n
        v13 = v11;\n
        v11->field_10 = v7;\n
        v11->field_14 = v0;\n
        v11->field_0 = cgc_strdup(a1);\n
        v16 = cgc_strdup(v4);\n
        v13->field_8 = v16;\n
        v17 = *(&v13->field_0);\n
        if (v17 && v16)\n
        {\n
            if (cgc_ht_insert(v10, v17, v13))\n
                v16 = v13->field_8;\n
            else\n
                return cgc_send_response(a0, 0x1000, \"Success\", a3, a4);\n
        }\n
        cgc_free(v16);\n
        cgc_free(*(&v13->field_0));\n
        cgc_free(v13);\n
    }\n
}\n
", "4250036:sub_40d9b4": null, "4250048:cgc_do_list": "typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[24];\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
long long cgc_do_list(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x80]\n
    char v1;  // [bp-0x78]\n
    unsigned int v4;  // ecx\n
    unsigned long v5;  // rax\n
    struct_2 *v6;  // rax\n
    unsigned int v7[5];  // r14\n
    unsigned long v8;  // r15, Other Possible Types: unsigned long long\n
    void* v9;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v10;  // r12, Other Possible Types: unsigned long\n
    struct_2 *v11;  // r13, Other Possible Types: unsigned long\n
    void* v12;  // rbp, Other Possible Types: unsigned long\n
    void* v13;  // r12, Other Possible Types: unsigned long\n
\n
    cgc_sprintf(&v1, \"%d\", a0->field_34, a3, a4);\n
    v4 = cgc_send_response(a0, 0x1000, &v1, a3, a4);\n
    if (v4)\n
        return 1;\n
    v0 = &a0->padding_0[32];\n
    v6 = cgc_ht_first(v0);\n
    if (!v6)\n
    {\n
        v9 = 0;\n
    }\n
    else\n
    {\n
        v11 = v6;\n
        v12 = 0;\n
        v13 = 0;\n
        do\n
        {\n
            v7 = *((v11 + 24));\n
            v8 = cgc_strlen(*(&v7[2])) + cgc_strlen(*(&v7[0])) + 128;\n
            if (v8 <= v13)\n
            {\n
                v8 = v13;\n
                v9 = v12;\n
                v10 = a0;\n
            }\n
            else\n
            {\n
                v9 = cgc_realloc(v12, v8);\n
                v10 = a0;\n
                if (!v9)\n
                    goto LABEL_40daf0;\n
            }\n
            cgc_sprintf(v9, \"%s;%s;%d;%d\", *(&v7[0]), *(&v7[2]), v7[4]);\n
            if (cgc_send_response(v10, 4098, v9, v4, a4))\n
            {\n
                v12 = v9;\n
LABEL_40daf0:\n
                cgc_free(v12);\n
                v5 = cgc_send_response(v10, 0xa000, \"Internal error\", v4, a4);\n
                return v5;\n
            }\n
            v11 = cgc_ht_next(v0, v11);\n
            v12 = v9;\n
            v13 = v8;\n
        } while (v11);\n
    }\n
    cgc_free(v9);\n
    return 0;\n
}\n
", "4250225:sub_40da71": null, "4250395:sub_40db1b": null, "4250400:cgc_do_quit": "long long cgc_do_quit(unsigned int a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_send_response(a0, 0x1000, \"Success\", a3, a4);\n
    return 1;\n
}\n
", "4250425:sub_40db39": null, "4250432:main": "int main()\n
{\n
    unsigned long long v0;  // [bp-0x80]\n
    char v1;  // [bp-0x78]\n
    char v2;  // [bp-0x70]\n
    char v3;  // [bp-0x68]\n
    char v4;  // [bp-0x50]\n
    char v5;  // [bp-0x48]\n
    unsigned long long v8;  // rax\n
    unsigned long v9;  // rbx\n
\n
    if (cgc_ht_init(&v5))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_init(&v3))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v3, \"BUY\", cgc_do_buy))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v3, \"SELL\", cgc_do_sell))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v3, \"LIST\", cgc_do_list))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_ht_insert(&v3, \"QUIT\", cgc_do_quit))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_silk_init(&v4))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_silk_prepare(&v4))\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v8 = cgc_read_line(&v4);\n
        if (!v8)\n
            return 0;\n
        v9 = v8;\n
        do\n
        {\n
            if (!parse_request(v9, &v2, &v1))\n
            {\n
                if (!(!cgc_ht_lookup(&v3, *(&v2), &v0)))\n
                    continue;\n
                if (*((v0 + 24))(&v3, *(&v1)))\n
                    break;\n
                continue;\n
            }\n
            cgc_free(v9);\n
            v9 = cgc_read_line(&v4);\n
        } while (v9);\n
    }\n
}\n
", "4250787:sub_40dca3": null, "4250800:parse_request": "long long parse_request(char a0[2], unsigned long long *a1, unsigned long long *a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char *v3;  // rax\n
    void* v4;  // rbx, Other Possible Types: unsigned long\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_strchr(a0, 9);\n
    if (v3)\n
    {\n
        *(v3) = 0;\n
        *(a1) = a0;\n
        v4 = v3 + 1;\n
        v5 = cgc_strchr(v4, 8);\n
        if (v5)\n
            *(v5) = 0;\n
    }\n
    else\n
    {\n
        v6 = cgc_strchr(a0, 8);\n
        if (!v6)\n
            return 1;\n
        *(v6) = 0;\n
        *(a1) = a0;\n
        v4 = 0;\n
    }\n
    *(a2) = v4;\n
    return 0;\n
}\n
", "4250918:sub_40dd26": null, "4250928:cgc__do_encode": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[24];\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__do_encode(struct_3 *a0, struct_2 *a1)\n
{\n
    int tmp_35;  // tmp #35\n
    char v0;  // [bp-0x3a]\n
    int tmp_17;  // tmp #17\n
    int tmp_10;  // tmp #10\n
    char v1;  // [bp-0x39]\n
    char v2;  // [bp-0x38]\n
    char v3;  // [bp-0x37]\n
    char v4;  // [bp-0x28]\n
    char v5;  // [bp-0x18]\n
    char v6;  // [bp-0x8]\n
    struct_2 *v8;  // rbx\n
    struct_3 *v9;  // r14\n
    struct struct_1 **v10;  // rdi\n
    struct_1 *v11;  // rax\n
    unsigned long long v12;  // r13\n
    char *v13;  // r15\n
    unsigned int v14;  // ecx\n
    unsigned long v15;  // dl, Other Possible Types: unsigned long long, char\n
    unsigned long v16;  // rcx, Other Possible Types: unsigned int\n
    unsigned long v17;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v18;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rcx\n
    unsigned long long v22;  // rcx\n
    unsigned long long v23;  // rdx\n
    unsigned long long v24;  // rsi\n
    unsigned long v25;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v28;  // rax\n
    int v29;  // xmm0\n
    int v30;  // xmm1\n
    int v31;  // xmm3\n
    int v32;  // xmm0\n
    int v33;  // xmm1\n
    int v34;  // xmm0\n
    int v35;  // xmm1\n
    int v36;  // xmm3\n
    int v37;  // xmm0\n
    int v38;  // xmm1\n
    int v39;  // xmm0\n
    int v40;  // xmm0\n
    unsigned long long v41;  // rdx\n
    unsigned long long v42;  // rsi\n
    unsigned long v43;  // rdi, Other Possible Types: unsigned long long\n
    int v44;  // xmm2\n
    int v45;  // xmm3\n
    int v46;  // xmm1\n
    int v47;  // xmm2\n
    int v48;  // xmm3\n
    unsigned long v49;  // rcx\n
    unsigned long v50;  // rdx\n
    unsigned long v51;  // rcx\n
    int v52;  // xmm1\n
    unsigned long v53;  // rax\n
    unsigned long long v54;  // rsi\n
    unsigned long long v55;  // rdi\n
    unsigned long v56;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v57;  // rcx\n
    unsigned long v58;  // rdx\n
    unsigned long long v59;  // rax\n
    unsigned long v60;  // r12\n
    unsigned long v61;  // rax\n
    unsigned long v62;  // rax\n
    unsigned long long v63;  // rcx\n
    unsigned long long v64;  // rdx\n
    unsigned long v65;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v66;  // rcx\n
    unsigned long v67;  // rcx\n
    int v68;  // xmm0\n
    int v69;  // xmm1\n
    int v70;  // xmm3\n
    int v71;  // xmm0\n
    int v72;  // xmm1\n
    unsigned long long v73;  // rdx\n
    unsigned long long v74;  // rsi\n
    unsigned long v75;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v76;  // rdx\n
    int v77;  // xmm0\n
    int v78;  // xmm0\n
    int v79;  // xmm1\n
    int v80;  // xmm3\n
    int v81;  // xmm0\n
    int v82;  // xmm1\n
    int v83;  // xmm0\n
    unsigned long v84;  // rcx\n
    unsigned long v85;  // rdx\n
    unsigned long long v86;  // rsi\n
    unsigned long v87;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v88;  // rdi\n
    unsigned long v89;  // rsi, Other Possible Types: unsigned long long\n
\n
    v8 = a1;\n
    v9 = a0;\n
    v11 = a0->field_0->field_0;\n
    v12 = v11->field_c;\n
    v13 = v12 / 8;\n
    v14 = v9->field_8;\n
    if (v14 == 1)\n
    {\n
        if (v12 >= 8)\n
        {\n
            v17 = v9->field_10;\n
            v16 = v13;\n
            v18 = v13 & 3;\n
            if ((v13 & 3))\n
            {\n
                do\n
                {\n
                    v16 = v16 - 1;\n
                    (&v2)[v16] = v17;\n
                    v17 /= 0x100;\n
                    tmp_35 = v18;\n
                    v18 = v18 - 1;\n
                } while (tmp_35 + -1);\n
            }\n
            if ((v13 + 1) >= 3)\n
            {\n
                v21 = v16 - 2;\n
                do\n
                {\n
                    (&v3)[v21] = v17;\n
                    (&v2)[v21] = v17;\n
                    (&v1)[v21] = v17 / 0x10000;\n
                    (&v0)[v21] = v17 / 0x1000000;\n
                    v17 /= 0x100000000;\n
                    v21 = v21 - 4;\n
                } while (v21 != -2);\n
            }\n
            if (*(v10)->field_28())\n
                return 1;\n
            if (v12 >= 8)\n
            {\n
                v28 = (2 <= v13 ? 1 : v13);\n
                if (v28 < 8)\n
                {\n
                    v57 = 0;\n
                }\n
                else\n
                {\n
                    if (v28 < 32)\n
                    {\n
                        v57 = 0;\n
                    }\n
                    else\n
                    {\n
                        v57 = v28 & -32;\n
                        v41 = v57 - 32;\n
                        v42 = (v41 >> 5) + 1;\n
                        if (!v41)\n
                        {\n
                            v50 = 0;\n
                        }\n
                        else\n
                        {\n
                            v43 = v42 & -2;\n
                            v50 = 0;\n
                            do\n
                            {\n
                                v44 = *(&v8[32 + v50]);\n
                                v45 = *(&v8[48 + v50]);\n
                                v46 = *(&v8[16 + v50]) ^ *(&(&v4)[v50]);\n
                                *(&v8[v50]) = *(&v8[v50]) ^ *(&(&v2)[v50]);\n
                                *(&v8[16 + v50].field_0) = v46;\n
                                v47 = v44 ^ *(&(&v5)[v50]);\n
                                v48 = v45 ^ *(&(&v6)[v50]);\n
                                *(&v8[32 + v50].field_0) = v47;\n
                                *(&v8[48 + v50].field_0) = v48;\n
                                v50 += 64;\n
                                tmp_17 = v43;\n
                                v43 -= 2;\n
                            } while (tmp_17 != 2);\n
                        }\n
                        if ((v42 & 1))\n
                        {\n
                            v52 = *(&v8[16 + v50]) ^ *(&(&v4)[v50]);\n
                            *(&v8[v50]) = *(&v8[v50]) ^ *(&(&v2)[v50]);\n
                            *(&v8[16 + v50].field_0) = v52;\n
                        }\n
                        if (v57 == v28)\n
                            goto LABEL_40e630;\n
                        if (!(v28 & 24))\n
                            goto LABEL_40e620;\n
                    }\n
                    v58 = v57;\n
                    v57 = v28 & -8;\n
                    do\n
                    {\n
                        *(&v8[v58]) = *(&v8[v58]) ^ *(&(&v2)[v58]);\n
                        v58 += 8;\n
                    } while (v57 != v58);\n
                    if (v57 == v28)\n
                        goto LABEL_40e630;\n
                }\n
                do\n
                {\n
LABEL_40e620:\n
                    v8[v57].field_0 = v8[v57].field_0 ^ (&v2)[v57];\n
                    v57 += 1;\n
                } while (v28 != v57);\n
            }\n
        }\n
        else if (v11->field_28())\n
        {\n
            return 1;\n
        }\n
LABEL_40e630:\n
        v9->field_10 = v9->field_10 - 1;\n
        goto LABEL_40e635;\n
    }\n
    if (v14 == 3)\n
    {\n
        cgc_memcpy(&v2, a1, v13);\n
        if (v12 >= 8)\n
        {\n
            v20 = (2 <= v13 ? 1 : v13);\n
            if (v20 < 8)\n
            {\n
LABEL_40ddf0:\n
                v49 = 0;\n
                goto LABEL_40ddf2;\n
            }\n
            else if (16 + v20 + v9 <= a1)\n
            {\n
LABEL_40e13b:\n
                if (v20 < 32)\n
                {\n
                    v49 = 0;\n
                    goto LABEL_40e34b;\n
                }\n
                else\n
                {\n
                    v49 = v20 & -32;\n
                    v23 = v49 - 32;\n
                    v24 = (v23 >> 5) + 1;\n
                    if (!v23)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v27 = v24 & -2;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v34 = *(&v8[16 + v15]) ^ *((32 + &v9->field_0 + v15));\n
                            v35 = *(&v8[32 + v15]);\n
                            v36 = *(&v8[48 + v15]);\n
                            *(&v8[v15]) = *(&v8[v15]) ^ *((16 + &v9->field_0 + v15));\n
                            *(&v8[16 + v15].field_0) = v34;\n
                            v37 = *((48 + &v9->field_0 + v15)) ^ v35;\n
                            v38 = *((64 + &v9->field_0 + v15)) ^ v36;\n
                            *(&v8[32 + v15].field_0) = v37;\n
                            *(&v8[48 + v15].field_0) = v38;\n
                            v15 += 64;\n
                            tmp_17 = v27;\n
                            v27 -= 2;\n
                        } while (tmp_17 != 2);\n
                    }\n
                    if ((v24 & 1))\n
                    {\n
                        v40 = *(&v8[16 + v15]) ^ *((32 + &v9->field_0 + v15));\n
                        *(&v8[v15]) = *(&v8[v15]) ^ *((16 + &v9->field_0 + v15));\n
                        *(&v8[16 + v15].field_0) = v40;\n
                    }\n
                    if (v49 != v20)\n
                    {\n
                        if (!(v20 & 24))\n
                            goto LABEL_40ddf2;\n
LABEL_40e34b:\n
                        v15 = v49;\n
                        v49 = v20 & -8;\n
                        do\n
                        {\n
                            *(&v8[v15]) = *(&v8[v15]) ^ *((16 + &v9->field_0 + v15));\n
                            v15 += 8;\n
                        } while (v49 != v15);\n
                        if (v49 == v20)\n
                            goto LABEL_40de60;\n
LABEL_40ddf2:\n
                        v55 = ~(v49) + v20;\n
                        v56 = v20 & 3;\n
                        if ((v20 & 3))\n
                        {\n
                            do\n
                            {\n
                                v8[v49].field_0 = v8[v49].field_0 ^ *(16 + &v9->field_0 + v49);\n
                                v49 += 1;\n
                                tmp_10 = v56;\n
                                v56 -= 1;\n
                            } while (tmp_10 != 1);\n
                        }\n
                        if (v55 >= 3)\n
                        {\n
                            do\n
                            {\n
                                v8[v49].field_0 = v8[v49].field_0 ^ *(16 + &v9->field_0 + v49);\n
                                v8[1 + v49].field_0 = v8[1 + v49].field_0 ^ *(17 + &v9->field_0 + v49);\n
                                v8[2 + v49].field_0 = v8[2 + v49].field_0 ^ *(18 + &v9->field_0 + v49);\n
                                v8[3 + v49].field_0 = v8[3 + v49].field_0 ^ *(19 + &v9->field_0 + v49);\n
                                v49 += 4;\n
                            } while (v20 != v49);\n
                        }\n
                        goto LABEL_40de60;\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                if (&a1[v20] <= &v9->field_10)\n
                    goto LABEL_40e13b;\n
                goto LABEL_40ddf0;\n
            }\n
        }\n
LABEL_40de60:\n
        if (v9->field_0->field_0->field_28(v9->field_0, v8))\n
            return 1;\n
        v60 = &v9->field_10;\n
        cgc_memcpy(v60, &v2, v13);\n
        if (v12 < 8)\n
            goto LABEL_40e635;\n
        v61 = (2 <= v13 ? 1 : v13);\n
        if (v61 >= 8)\n
        {\n
            if (&v8[v61] <= v60)\n
            {\n
LABEL_40e269:\n
                if (v61 < 32)\n
                {\n
                    v67 = 0;\n
                    goto LABEL_40e58e;\n
                }\n
                else\n
                {\n
                    v67 = v61 & -32;\n
                    v73 = v67 - 32;\n
                    v74 = (v73 >> 5) + 1;\n
                    if (!v73)\n
                    {\n
                        v76 = 0;\n
                    }\n
                    else\n
                    {\n
                        v75 = v74 & -2;\n
                        v76 = 0;\n
                        do\n
                        {\n
                            v78 = *((32 + &v9->field_0 + v76)) ^ *(&v8[16 + v76]);\n
                            v79 = *((48 + &v9->field_0 + v76));\n
                            v80 = *((64 + &v9->field_0 + v76));\n
                            *((16 + &v9->field_0 + v76)) = *((16 + &v9->field_0 + v76)) ^ *(&v8[v76]);\n
                            *((32 + &v9->field_0 + v76)) = v78;\n
                            v81 = *(&v8[32 + v76]) ^ v79;\n
                            v82 = *(&v8[48 + v76]) ^ v80;\n
                            *((48 + &v9->field_0 + v76)) = v81;\n
                            *((64 + &v9->field_0 + v76)) = v82;\n
                            v76 += 64;\n
                            tmp_17 = v75;\n
                            v75 -= 2;\n
                        } while (tmp_17 != 2);\n
                    }\n
                    if ((v74 & 1))\n
                    {\n
                        v83 = *((v60 + v76 + 16)) ^ *(&v8[16 + v76]);\n
                        *((v60 + v76)) = *((v60 + v76)) ^ *(&v8[v76]);\n
                        *((v60 + v76 + 16)) = v83;\n
                    }\n
                    if (v67 != v61)\n
                    {\n
                        if (!(v61 & 24))\n
                            goto LABEL_40dec4;\n
LABEL_40e58e:\n
                        v85 = v67;\n
                        v67 = v61 & -8;\n
                        do\n
                        {\n
                            *((16 + &v9->field_0 + v85)) = *((16 + &v9->field_0 + v85)) ^ *(&v8[v85]);\n
                            v85 += 8;\n
                        } while (v67 != v85);\n
                        if (v67 == v61)\n
                            goto LABEL_40e635;\n
LABEL_40dec4:\n
                        v88 = ~(v67) + v61;\n
                        v89 = v61 & 3;\n
                        if ((v61 & 3))\n
                        {\n
                            do\n
                            {\n
                                *(16 + &v9->field_0 + v67) = *(16 + &v9->field_0 + v67) ^ v8[v67].field_0;\n
                                v67 += 1;\n
                                tmp_10 = v89;\n
                                v89 -= 1;\n
                            } while (tmp_10 != 1);\n
                        }\n
                        if (v88 >= 3)\n
                        {\n
                            do\n
                            {\n
                                *(16 + &v9->field_0 + v67) = *(16 + &v9->field_0 + v67) ^ v8[v67].field_0;\n
                                *(17 + &v9->field_0 + v67) = *(17 + &v9->field_0 + v67) ^ v8[1 + v67].field_0;\n
                                *(18 + &v9->field_0 + v67) = *(18 + &v9->field_0 + v67) ^ v8[2 + v67].field_0;\n
                                *(19 + &v9->field_0 + v67) = *(19 + &v9->field_0 + v67) ^ v8[3 + v67].field_0;\n
                                v67 += 4;\n
                            } while (v61 != v67);\n
                            return 0;\n
                        }\n
                    }\n
                }\n
LABEL_40e635:\n
                return 0;\n
            }\n
            else if (16 + v61 + v9 <= v8)\n
            {\n
                goto LABEL_40e269;\n
            }\n
        }\n
        v67 = 0;\n
        goto LABEL_40dec4;\n
    }\n
    if (!(v14 == 2))\n
        goto LABEL_40e635;\n
    if (v12 < 8)\n
    {\n
        v15 = v11->field_28();\n
        return v15;\n
    }\n
    v19 = (2 <= v13 ? 1 : v13);\n
    if (v19 < 8)\n
    {\n
LABEL_40df6d:\n
        v53 = 0;\n
        goto LABEL_40df6f;\n
    }\n
    else if (16 + v19 + v9 <= a1)\n
    {\n
LABEL_40e147:\n
        if (v19 < 32)\n
        {\n
            v53 = 0;\n
            goto LABEL_40e3be;\n
        }\n
        else\n
        {\n
            v53 = v19 & -32;\n
            v22 = v53 - 32;\n
            v15 = (v22 >> 5) + 1;\n
            if (!v22)\n
            {\n
                v26 = 0;\n
            }\n
            else\n
            {\n
                v25 = v15 & -2;\n
                v26 = 0;\n
                do\n
                {\n
                    v29 = *(&v8[16 + v26]) ^ *((32 + &v9->field_0 + v26));\n
                    v30 = *(&v8[32 + v26]);\n
                    v31 = *(&v8[48 + v26]);\n
                    *(&v8[v26]) = *(&v8[v26]) ^ *((16 + &v9->field_0 + v26));\n
                    *(&v8[16 + v26].field_0) = v29;\n
                    v32 = *((48 + &v9->field_0 + v26)) ^ v30;\n
                    v33 = *((64 + &v9->field_0 + v26)) ^ v31;\n
                    *(&v8[32 + v26].field_0) = v32;\n
                    *(&v8[48 + v26].field_0) = v33;\n
                    v26 += 64;\n
                    tmp_17 = v25;\n
                    v25 -= 2;\n
                } while (tmp_17 != 2);\n
            }\n
            if ((v15 & 1))\n
            {\n
                v39 = *(&v8[16 + v26]) ^ *((32 + &v9->field_0 + v26));\n
                *(&v8[v26]) = *(&v8[v26]) ^ *((16 + &v9->field_0 + v26));\n
                *(&v8[16 + v26].field_0) = v39;\n
            }\n
            if (v53 != v19)\n
            {\n
                if (!(v19 & 24))\n
                    goto LABEL_40df6f;\n
LABEL_40e3be:\n
                v51 = v53;\n
                v53 = v19 & -8;\n
                do\n
                {\n
                    *(&v8[v51]) = *(&v8[v51]) ^ *((16 + &v9->field_0 + v51));\n
                    v51 += 8;\n
                } while (v53 != v51);\n
                if (v53 == v19)\n
                    goto LABEL_40dfe0;\n
LABEL_40df6f:\n
                v54 = ~(v53) + v19;\n
                v15 = v19 & 3;\n
                if ((v19 & 3))\n
                {\n
                    do\n
                    {\n
                        v8[v53].field_0 = v8[v53].field_0 ^ *(16 + &v9->field_0 + v53);\n
                        v53 += 1;\n
                        tmp_10 = v15;\n
                        v15 -= 1;\n
                    } while (tmp_10 != 1);\n
                }\n
                if (v54 >= 3)\n
                {\n
                    do\n
                    {\n
                        v8[v53].field_0 = v8[v53].field_0 ^ *(16 + &v9->field_0 + v53);\n
                        v8[1 + v53].field_0 = v8[1 + v53].field_0 ^ *(17 + &v9->field_0 + v53);\n
                        v8[2 + v53].field_0 = v8[2 + v53].field_0 ^ *(18 + &v9->field_0 + v53);\n
                        v8[3 + v53].field_0 = v8[3 + v53].field_0 ^ *(19 + &v9->field_0 + v53);\n
                        v53 += 4;\n
                    } while (v19 != v53);\n
                }\n
                goto LABEL_40dfe0;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (&a1[v19] <= &v9->field_10)\n
            goto LABEL_40e147;\n
        goto LABEL_40df6d;\n
    }\n
LABEL_40dfe0:\n
    v59 = v9->field_0->field_0->field_28(v9->field_0, v8);\n
    if (v59)\n
        return v59;\n
    if (v12 < 8)\n
        return v59;\n
    if (v19 >= 8)\n
    {\n
        if (&v8[v19] <= &v9->field_10)\n
        {\n
LABEL_40e158:\n
            if (v19 < 32)\n
            {\n
                v62 = 0;\n
                goto LABEL_40e523;\n
            }\n
            else\n
            {\n
                v62 = v19 & -32;\n
                v63 = v62 - 32;\n
                v64 = (v63 >> 5) + 1;\n
                if (!v63)\n
                {\n
                    v66 = 0;\n
                }\n
                else\n
                {\n
                    v65 = v64 & -2;\n
                    v66 = 0;\n
                    do\n
                    {\n
                        v68 = *((32 + &v9->field_0 + v66)) ^ *(&v8[16 + v66]);\n
                        v69 = *((48 + &v9->field_0 + v66));\n
                        v70 = *((64 + &v9->field_0 + v66));\n
                        *((16 + &v9->field_0 + v66)) = *((16 + &v9->field_0 + v66)) ^ *(&v8[v66]);\n
                        *((32 + &v9->field_0 + v66)) = v68;\n
                        v71 = *(&v8[32 + v66]) ^ v69;\n
                        v72 = *(&v8[48 + v66]) ^ v70;\n
                        *((48 + &v9->field_0 + v66)) = v71;\n
                        *((64 + &v9->field_0 + v66)) = v72;\n
                        v66 += 64;\n
                        tmp_17 = v65;\n
                        v65 -= 2;\n
                    } while (tmp_17 != 2);\n
                }\n
                if ((v64 & 1))\n
                {\n
                    v77 = *((32 + &v9->field_0 + v66)) ^ *(&v8[16 + v66]);\n
                    *((16 + &v9->field_0 + v66)) = *((16 + &v9->field_0 + v66)) ^ *(&v8[v66]);\n
                    *((32 + &v9->field_0 + v66)) = v77;\n
                }\n
                if (v62 != v19)\n
                {\n
                    if (!(v19 & 24))\n
                        goto LABEL_40e02b;\n
LABEL_40e523:\n
                    v84 = v62;\n
                    v62 = v19 & -8;\n
                    do\n
                    {\n
                        *((16 + &v9->field_0 + v84)) = *((16 + &v9->field_0 + v84)) ^ *(&v8[v84]);\n
                        v84 += 8;\n
                    } while (v62 != v84);\n
                    if (v62 == v19)\n
                        goto LABEL_40e635;\n
LABEL_40e02b:\n
                    v86 = ~(v62) + v19;\n
                    v87 = v19 & 3;\n
                    if ((v19 & 3))\n
                    {\n
                        do\n
                        {\n
                            *(16 + &v9->field_0 + v62) = *(16 + &v9->field_0 + v62) ^ v8[v62].field_0;\n
                            v62 += 1;\n
                            tmp_10 = v87;\n
                            v87 -= 1;\n
                        } while (tmp_10 != 1);\n
                    }\n
                    if (v86 < 3)\n
                        return 0;\n
                    do\n
                    {\n
                        *(16 + &v9->field_0 + v62) = *(16 + &v9->field_0 + v62) ^ v8[v62].field_0;\n
                        *(17 + &v9->field_0 + v62) = *(17 + &v9->field_0 + v62) ^ v8[1 + v62].field_0;\n
                        *(18 + &v9->field_0 + v62) = *(18 + &v9->field_0 + v62) ^ v8[2 + v62].field_0;\n
                        *(19 + &v9->field_0 + v62) = *(19 + &v9->field_0 + v62) ^ v8[3 + v62].field_0;\n
                        v62 += 4;\n
                    } while (v19 != v62);\n
                }\n
            }\n
        }\n
        else if (16 + v19 + v9 <= v8)\n
        {\n
            goto LABEL_40e158;\n
        }\n
    }\n
    v62 = 0;\n
    goto LABEL_40e02b;\n
}\n
", "4253256:sub_40e648": null, "4253264:cgc__do_decode": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    unsigned int field_8;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    char padding_10[32];\n
    struct struct_0 *field_30;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__do_decode(struct_3 *a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x48]\n
    int tmp_17;  // tmp #17\n
    int tmp_10;  // tmp #10\n
    char v1;  // [bp-0x38]\n
    char v2;  // [bp-0x28]\n
    char v3;  // [bp-0x18]\n
    struct_2 *v5;  // r13\n
    struct_3 *v6;  // r14\n
    unsigned long long v7;  // rbp\n
    char *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r15\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // rax\n
    unsigned long long v19;  // rcx\n
    unsigned long long v20;  // rdx\n
    unsigned long long v21;  // rdx\n
    unsigned long long v22;  // rsi\n
    unsigned long v23;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v26;  // rdx\n
    int v27;  // xmm0\n
    int v28;  // xmm1\n
    int v29;  // xmm3\n
    int v30;  // xmm0\n
    int v31;  // xmm1\n
    int v32;  // xmm0\n
    int v33;  // xmm1\n
    int v34;  // xmm3\n
    int v35;  // xmm0\n
    int v36;  // xmm1\n
    int v37;  // xmm0\n
    int v38;  // xmm0\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rdx\n
    unsigned long long v41;  // rcx\n
    unsigned long v42;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v43;  // rdx\n
    unsigned long v44;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v45;  // rbx\n
    unsigned long v46;  // rdx\n
    unsigned long long v47;  // rax\n
    unsigned long long v48;  // rsi\n
    unsigned long v49;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v50;  // rax\n
    unsigned long v51;  // rcx\n
    int v52;  // xmm2\n
    int v53;  // xmm3\n
    int v54;  // xmm1\n
    int v55;  // xmm2\n
    int v56;  // xmm3\n
    unsigned long long v57;  // rax\n
    unsigned long long v58;  // rdx\n
    unsigned long v59;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v60;  // rax\n
    int v61;  // xmm1\n
    int v62;  // xmm0\n
    int v63;  // xmm1\n
    int v64;  // xmm3\n
    int v65;  // xmm0\n
    int v66;  // xmm1\n
    int v67;  // xmm0\n
    unsigned long v68;  // rax\n
    unsigned long v69;  // rax\n
    unsigned long long v70;  // rdx\n
    unsigned long v71;  // rax, Other Possible Types: unsigned long long\n
\n
    v5 = a1;\n
    v6 = a0;\n
    v7 = a0->field_0->field_0->field_c;\n
    v8 = v7 / 8;\n
    v9 = a0->field_8;\n
    if (v9 == 3)\n
    {\n
        cgc_memcpy(&v0, a1, v8);\n
        if (v6->field_0->field_0->field_30(a0->field_0, a1))\n
            return 1;\n
        v14 = &v6[1].field_0 + 4;\n
        if (v7 <= 7)\n
        {\n
            cgc_memcpy(v14, &v0, v8);\n
            return 0;\n
        }\n
        v15 = (2 <= v8 ? 1 : v8);\n
        if (v15 < 8)\n
        {\n
LABEL_40e811:\n
            v17 = 0;\n
            goto LABEL_40e813;\n
        }\n
        else\n
        {\n
            if (16 + v15 + v6 <= a1)\n
            {\n
LABEL_40e966:\n
                if (v15 < 32)\n
                {\n
                    v17 = 0;\n
                    goto LABEL_40ecd4;\n
                }\n
                else\n
                {\n
                    v17 = v15 & -32;\n
                    v19 = v17 - 32;\n
                    v20 = (v19 >> 5) + 1;\n
                    if (!v19)\n
                    {\n
                        v24 = 0;\n
                    }\n
                    else\n
                    {\n
                        v23 = v20 & -2;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v27 = *(&v5[16 + v24]) ^ *((32 + &v6->field_0 + v24));\n
                            v28 = *(&v5[32 + v24]);\n
                            v29 = *(&v5[48 + v24]);\n
                            *(&v5[v24]) = *(&v5[v24]) ^ *((16 + &v6->field_0 + v24));\n
                            *(&v5[16 + v24].field_0) = v27;\n
                            v30 = *((48 + &v6->field_0 + v24)) ^ v28;\n
                            v31 = *((64 + &v6->field_0 + v24)) ^ v29;\n
                            *(&v5[32 + v24].field_0) = v30;\n
                            *(&v5[48 + v24].field_0) = v31;\n
                            v24 += 64;\n
                            tmp_17 = v23;\n
                            v23 -= 2;\n
                        } while (tmp_17 != 2);\n
                    }\n
                    if ((v20 & 1))\n
                    {\n
                        v37 = *(&v5[16 + v24]) ^ *((v14 + v24 + 16));\n
                        *(&v5[v24]) = *(&v5[v24]) ^ *((v14 + v24));\n
                        *(&v5[16 + v24].field_0) = v37;\n
                    }\n
                    if (v17 != v15)\n
                    {\n
                        if (!(v15 & 24))\n
                            goto LABEL_40e813;\n
LABEL_40ecd4:\n
                        v39 = v17;\n
                        v17 = v15 & -8;\n
                        do\n
                        {\n
                            *(&v5[v39]) = *(&v5[v39]) ^ *((16 + &v6->field_0 + v39));\n
                            v39 += 8;\n
                        } while (v17 != v39);\n
                        if (v17 == v15)\n
                            goto LABEL_40e885;\n
LABEL_40e813:\n
                        v41 = ~(v17) + v15;\n
                        v42 = v15 & 3;\n
                        if ((v15 & 3))\n
                        {\n
                            do\n
                            {\n
                                v5[v17].field_0 = v5[v17].field_0 ^ *(16 + &v6->field_0 + v17);\n
                                v17 += 1;\n
                                tmp_10 = v42;\n
                                v42 -= 1;\n
                            } while (tmp_10 != 1);\n
                        }\n
                        if (v41 >= 3)\n
                        {\n
                            do\n
                            {\n
                                v5[v17].field_0 = v5[v17].field_0 ^ *(16 + &v6->field_0 + v17);\n
                                v5[1 + v17].field_0 = v5[1 + v17].field_0 ^ *(17 + &v6->field_0 + v17);\n
                                v5[2 + v17].field_0 = v5[2 + v17].field_0 ^ *(18 + &v6->field_0 + v17);\n
                                v5[3 + v17].field_0 = v5[3 + v17].field_0 ^ *(19 + &v6->field_0 + v17);\n
                                v17 += 4;\n
                            } while (v15 != v17);\n
                        }\n
                        goto LABEL_40e885;\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                if (&a1[v15] <= v14)\n
                    goto LABEL_40e966;\n
                goto LABEL_40e811;\n
            }\n
        }\n
LABEL_40e885:\n
        v45 = v14;\n
        cgc_memcpy(v14, &v0, v8);\n
        if (v7 < 8)\n
            return 0;\n
        if (v15 >= 8)\n
        {\n
            if (&v5[v15] <= v14)\n
            {\n
LABEL_40e977:\n
                if (v15 < 32)\n
                {\n
                    v51 = 0;\n
                }\n
                else\n
                {\n
                    v51 = v15 & -32;\n
                    v57 = v51 - 32;\n
                    v58 = (v57 >> 5) + 1;\n
                    if (!v57)\n
                    {\n
                        v60 = 0;\n
                    }\n
                    else\n
                    {\n
                        v59 = v58 & -2;\n
                        v60 = 0;\n
                        do\n
                        {\n
                            v62 = *((32 + &v6->field_0 + v60)) ^ *(&v5[16 + v60]);\n
                            v63 = *((48 + &v6->field_0 + v60));\n
                            v64 = *((64 + &v6->field_0 + v60));\n
                            *((16 + &v6->field_0 + v60)) = *((16 + &v6->field_0 + v60)) ^ *(&v5[v60]);\n
                            *((32 + &v6->field_0 + v60)) = v62;\n
                            v65 = *(&v5[32 + v60]) ^ v63;\n
                            v66 = *(&v5[48 + v60]) ^ v64;\n
                            *((48 + &v6->field_0 + v60)) = v65;\n
                            *((64 + &v6->field_0 + v60)) = v66;\n
                            v60 += 64;\n
                            tmp_17 = v59;\n
                            v59 -= 2;\n
                        } while (tmp_17 != 2);\n
                    }\n
                    if ((v58 & 1))\n
                    {\n
                        v67 = *((v14 + v60 + 16)) ^ *(&v5[16 + v60]);\n
                        *((v45 + v60)) = *((v45 + v60)) ^ *(&v5[v60]);\n
                        *((v14 + v60 + 16)) = v67;\n
                    }\n
                    if (v51 == v15)\n
                        return 0;\n
                    if (!(v15 & 24))\n
                        goto LABEL_40e8c4;\n
                }\n
                v69 = v51;\n
                v51 = v15 & -8;\n
                do\n
                {\n
                    *((16 + &v6->field_0 + v69)) = *((16 + &v6->field_0 + v69)) ^ *(&v5[v69]);\n
                    v69 += 8;\n
                } while (v51 != v69);\n
                if (v51 == v15)\n
                    return 0;\n
LABEL_40e8c4:\n
                v70 = ~(v51) + v15;\n
                v71 = v15 & 3;\n
                if ((v15 & 3))\n
                {\n
                    do\n
                    {\n
                        *(16 + &v6->field_0 + v51) = *(16 + &v6->field_0 + v51) ^ v5[v51].field_0;\n
                        v51 += 1;\n
                        tmp_10 = v71;\n
                        v71 -= 1;\n
                    } while (tmp_10 != 1);\n
                }\n
                if (v70 < 3)\n
                    return 0;\n
                do\n
                {\n
                    *(16 + &v6->field_0 + v51) = *(16 + &v6->field_0 + v51) ^ v5[v51].field_0;\n
                    *(17 + &v6->field_0 + v51) = *(17 + &v6->field_0 + v51) ^ v5[1 + v51].field_0;\n
                    *(18 + &v6->field_0 + v51) = *(18 + &v6->field_0 + v51) ^ v5[2 + v51].field_0;\n
                    *(19 + &v6->field_0 + v51) = *(19 + &v6->field_0 + v51) ^ v5[3 + v51].field_0;\n
                    v51 += 4;\n
                } while (v15 != v51);\n
            }\n
            else\n
            {\n
                if (16 + v15 + v6 <= v5)\n
                    goto LABEL_40e977;\n
            }\n
        }\n
        v51 = 0;\n
        goto LABEL_40e8c4;\n
    }\n
    else if (v9 == 2)\n
    {\n
        cgc_memcpy(&v0, a1, v8);\n
        if (v6->field_0->field_0->field_30(a0->field_0, a1))\n
            return 1;\n
        if (v7 < 8)\n
            return 0;\n
        v16 = (2 <= v8 ? 1 : v8);\n
        if (v16 < 8)\n
        {\n
LABEL_40e752:\n
            v18 = 0;\n
            goto LABEL_40e754;\n
        }\n
        else\n
        {\n
            if (16 + v16 + v6 <= a1)\n
            {\n
LABEL_40e94a:\n
                if (v16 < 32)\n
                {\n
                    v18 = 0;\n
                    goto LABEL_40ebe1;\n
                }\n
                else\n
                {\n
                    v18 = v16 & -32;\n
                    v21 = v18 - 32;\n
                    v22 = (v21 >> 5) + 1;\n
                    if (!v21)\n
                    {\n
                        v26 = 0;\n
                    }\n
                    else\n
                    {\n
                        v25 = v22 & -2;\n
                        v26 = 0;\n
                        do\n
                        {\n
                            v32 = *(&v5[16 + v26]) ^ *((32 + &v6->field_0 + v26));\n
                            v33 = *(&v5[32 + v26]);\n
                            v34 = *(&v5[48 + v26]);\n
                            *(&v5[v26]) = *(&v5[v26]) ^ *((16 + &v6->field_0 + v26));\n
                            *(&v5[16 + v26].field_0) = v32;\n
                            v35 = *((48 + &v6->field_0 + v26)) ^ v33;\n
                            v36 = *((64 + &v6->field_0 + v26)) ^ v34;\n
                            *(&v5[32 + v26].field_0) = v35;\n
                            *(&v5[48 + v26].field_0) = v36;\n
                            v26 += 64;\n
                            tmp_17 = v25;\n
                            v25 -= 2;\n
                        } while (tmp_17 != 2);\n
                    }\n
                    if ((v22 & 1))\n
                    {\n
                        v38 = *(&v5[16 + v26]) ^ *((32 + &v6->field_0 + v26));\n
                        *(&v5[v26]) = *(&v5[v26]) ^ *((16 + &v6->field_0 + v26));\n
                        *(&v5[16 + v26].field_0) = v38;\n
                    }\n
                    if (v18 != v16)\n
                    {\n
                        if (!(v16 & 24))\n
                            goto LABEL_40e754;\n
LABEL_40ebe1:\n
                        v40 = v18;\n
                        v18 = v16 & -8;\n
                        do\n
                        {\n
                            *(&v5[v40]) = *(&v5[v40]) ^ *((16 + &v6->field_0 + v40));\n
                            v40 += 8;\n
                        } while (v18 != v40);\n
                        if (v18 == v16)\n
                            goto LABEL_40e7c5;\n
LABEL_40e754:\n
                        v43 = ~(v18) + v16;\n
                        v44 = v16 & 3;\n
                        if ((v16 & 3))\n
                        {\n
                            do\n
                            {\n
                                v5[v18].field_0 = v5[v18].field_0 ^ *(16 + &v6->field_0 + v18);\n
                                v18 += 1;\n
                                tmp_10 = v44;\n
                                v44 -= 1;\n
                            } while (tmp_10 != 1);\n
                        }\n
                        if (v43 >= 3)\n
                        {\n
                            do\n
                            {\n
                                v5[v18].field_0 = v5[v18].field_0 ^ *(16 + &v6->field_0 + v18);\n
                                v5[1 + v18].field_0 = v5[1 + v18].field_0 ^ *(17 + &v6->field_0 + v18);\n
                                v5[2 + v18].field_0 = v5[2 + v18].field_0 ^ *(18 + &v6->field_0 + v18);\n
                                v5[3 + v18].field_0 = v5[3 + v18].field_0 ^ *(19 + &v6->field_0 + v18);\n
                                v18 += 4;\n
                            } while (v16 != v18);\n
                        }\n
                        goto LABEL_40e7c5;\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                if (&a1[v16] <= &v6[1].field_0 + 4)\n
                    goto LABEL_40e94a;\n
                goto LABEL_40e752;\n
            }\n
        }\n
LABEL_40e7c5:\n
        if (v7 < 8)\n
            return 0;\n
        if (v16 < 8)\n
        {\n
            v46 = 0;\n
        }\n
        else\n
        {\n
            if (v16 < 32)\n
            {\n
                v46 = 0;\n
            }\n
            else\n
            {\n
                v46 = v16 & -32;\n
                v47 = v46 - 32;\n
                v48 = (v47 >> 5) + 1;\n
                if (!v47)\n
                {\n
                    v50 = 0;\n
                }\n
                else\n
                {\n
                    v49 = v48 & -2;\n
                    v50 = 0;\n
                    do\n
                    {\n
                        v52 = *((48 + &v6->field_0 + v50));\n
                        v53 = *((64 + &v6->field_0 + v50));\n
                        v54 = *((32 + &v6->field_0 + v50)) ^ *(&(&v1)[v50]);\n
                        *((16 + &v6->field_0 + v50)) = *((16 + &v6->field_0 + v50)) ^ *(&(&v0)[v50]);\n
                        *((32 + &v6->field_0 + v50)) = v54;\n
                        v55 = v52 ^ *(&(&v2)[v50]);\n
                        v56 = v53 ^ *(&(&v3)[v50]);\n
                        *((48 + &v6->field_0 + v50)) = v55;\n
                        *((64 + &v6->field_0 + v50)) = v56;\n
                        v50 += 64;\n
                        tmp_17 = v49;\n
                        v49 -= 2;\n
                    } while (tmp_17 != 2);\n
                }\n
                if ((v48 & 1))\n
                {\n
                    v61 = *((32 + &v6->field_0 + v50)) ^ *(&(&v1)[v50]);\n
                    *((16 + &v6->field_0 + v50)) = *((16 + &v6->field_0 + v50)) ^ *(&(&v0)[v50]);\n
                    *((32 + &v6->field_0 + v50)) = v61;\n
                }\n
                if (v46 == v16)\n
                    return 0;\n
                if (!(v16 & 24))\n
                    goto LABEL_40ec70;\n
            }\n
            v68 = v46;\n
            v46 = v16 & -8;\n
            do\n
            {\n
                *((16 + &v6->field_0 + v68)) = *((16 + &v6->field_0 + v68)) ^ *(&(&v0)[v68]);\n
                v68 += 8;\n
            } while (v46 != v68);\n
            if (v46 == v16)\n
                return 0;\n
        }\n
        do\n
        {\n
LABEL_40ec70:\n
            *(16 + &v6->field_0 + v46) = *(16 + &v6->field_0 + v46) ^ (&v0)[v46];\n
            v46 += 1;\n
        } while (v16 != v46);\n
        return 0;\n
    }\n
    else if (v9 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        cgc__do_encode(a0, a1);\n
        return 0;\n
    }\n
}\n
", "4255085:sub_40ed6d": null, "4255088:cgc_modes_init": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_modes_init(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // rbx, Other Possible Types: unsigned long long\n
\n
    v1 = 1;\n
    if (a1 <= 3)\n
    {\n
        a0->field_8 = a1;\n
        a0->field_0 = a2;\n
        v1 = 0;\n
        cgc_memset(&a0[1].field_0 + 4, 0, 0x10);\n
    }\n
    return v1;\n
}\n
", "4255127:sub_40ed97": null, "4255136:cgc_modes_encode": "long long cgc_modes_encode(struct struct_1 **a0, unsigned long a1, unsigned long a2, unsigned long long *a3, unsigned int *a4)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned long v2;  // [bp-0x58], Other Possible Types: unsigned long long\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v5;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r15\n
    unsigned long long v7;  // r13\n
    unsigned long v8;  // r12\n
    void* v9;  // rbx\n
    void* v10;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v11;  // r12, Other Possible Types: unsigned long long\n
    void* v12;  // rbx\n
\n
    if (a2 < 1)\n
    {\n
        *(a4) = 0;\n
        *(a3) = 0;\n
        goto LABEL_40edc9;\n
    }\n
    v5 = a2;\n
    v6 = a1;\n
    v7 = *(a0)->field_0->field_c >> 3;\n
    v11 = -(v7) & a2 - 1 + v7;\n
    v2 = v11 + v7;\n
    *(&v0) = cgc_malloc(v2);\n
    if (!*(&v0))\n
        return 1;\n
    if (v11)\n
    {\n
        v10 = 0;\n
        v1 = 0;\n
        v3 = v11;\n
        do\n
        {\n
            v8 = (v5 < v7 ? v7 : v5);\n
            v9 = v10 + *(&v0);\n
            cgc_memcpy(v9, v6, v8);\n
            if (v5 < v7)\n
            {\n
                cgc_memset(v8 + v10 + *(&v0), v8, v7 - v8);\n
                v1 = 1;\n
            }\n
            if (!(!cgc__do_encode(a0, v9)))\n
                goto LABEL_40eede;\n
            v6 += v8;\n
            v5 -= v8;\n
            v10 += v7;\n
            v11 = v3;\n
        } while (v10 < v11);\n
        if (v1)\n
        {\n
            v2 = v11;\n
            goto LABEL_40eefb;\n
        }\n
    }\n
    v12 = *(&v0) + v11;\n
    cgc_memset(v12, 0, v7);\n
    if (!cgc__do_encode(a0, v12))\n
    {\n
LABEL_40eefb:\n
        *(a3) = *(&v0);\n
        *(a4) = v2;\n
LABEL_40edc9:\n
        return 0;\n
    }\n
LABEL_40eede:\n
    cgc_free(*(&v0));\n
    return 1;\n
}\n
", "4255512:sub_40ef18": null, "4255520:cgc_modes_decode": "long long cgc_modes_decode(struct struct_1 **a0, unsigned int a1, unsigned long a2, unsigned long long *a3, unsigned int *a4)\n
{\n
    unsigned long long *v0;  // [bp-0x48]\n
    char *v1;  // [bp-0x38]\n
    unsigned long long v3;  // r12\n
    unsigned long v4;  // r15\n
    unsigned int v5;  // edx\n
    char *v6;  // rax\n
    char *v7;  // r13\n
    void* v8;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v9;  // rax\n
    unsigned long v10;  // r12\n
    unsigned long v13;  // r12\n
    unsigned int v14;  // ecx\n
\n
    if (!a2)\n
    {\n
        *(a4) = 0;\n
        *(a3) = 0;\n
        return 0;\n
    }\n
    v3 = *(a0)->field_0->field_c;\n
    v4 = v3 / 8;\n
    v5 = (0 CONCAT a2) /m v4 >> 32;\n
    if (v5)\n
        return 1;\n
    v0 = a3;\n
    v1 = *(&v5);\n
    v6 = cgc_malloc(*(&v5));\n
    if (v6)\n
    {\n
        v7 = v6;\n
        cgc_memcpy(v6, a1, v1);\n
        v8 = 0;\n
        do\n
        {\n
            if (cgc__do_decode(a0, &v6[v8]))\n
            {\n
LABEL_40f020:\n
                cgc_free(v7);\n
                goto LABEL_40f028;\n
            }\n
            v8 += v4;\n
        } while (v8 < *(&v5));\n
        v9 = v6[1 + *(&v5)];\n
        if (v4 > v9)\n
        {\n
            v10 = v3 / 8;\n
            v13 = ~(v10) + *(&v5) + v10;\n
            v14 = v4;\n
            while (v7[v13] == v9)\n
            {\n
                v14 -= 1;\n
                v13 = v13 - 1;\n
                if (v14 <= v9)\n
                {\n
                    *(v0) = v7;\n
                    *(a4) = *(&v5) - v4 + v9;\n
                    return 0;\n
                }\n
            }\n
        }\n
        goto LABEL_40f020;\n
    }\n
LABEL_40f028:\n
    return 1;\n
}\n
", "4255804:sub_40f03c": null, "4255808:cgc_modes_self_test": "extern unsigned int cgc_modes_self_test.test;\n
\n
long long cgc_modes_self_test()\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    unsigned long long v1;  // [bp-0x58]\n
    unsigned long long v2;  // [bp-0x50]\n
    struct struct_0 **v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x40]\n
    char v5;  // [bp-0x38]\n
    unsigned long long v6;  // [bp-0x28]\n
    unsigned long v8;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rbx\n
    unsigned long long v10;  // rbx\n
    unsigned long long v11;  // rbx\n
    unsigned long long v12;  // rbx\n
    unsigned long long v13;  // rbx\n
    unsigned long long v14;  // rbx\n
    unsigned long long v15;  // rbx\n
    unsigned long long v16;  // rbx\n
    unsigned int v17;  // rcx\n
    unsigned int v18;  // r8\n
\n
    v8 = 0;\n
    if (!cgc_codes_init(&v6, NULL, 0))\n
    {\n
        v4 = 0;\n
        v3 = &v6;\n
        cgc_memset(&v5, 0, 0x10);\n
        v8 = 10;\n
        if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
        {\n
            v4 = 0;\n
            v3 = &v6;\n
            cgc_memset(&v5, 0, 0x10);\n
            v9 = v2;\n
            v8 = 12;\n
            if (!cgc_modes_decode(&v3, v9, 12, &v1, &v0))\n
            {\n
                cgc_free(v9);\n
                if (v0 == 10)\n
                {\n
                    v10 = v1;\n
                    if (!cgc_memcmp(v10, &cgc_modes_self_test.test, 10))\n
                    {\n
                        cgc_free(v10);\n
                        v4 = 1;\n
                        v3 = &v6;\n
                        cgc_memset(&v5, 0, 0x10);\n
                        v8 = 10;\n
                        if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                        {\n
                            v4 = 1;\n
                            v3 = &v6;\n
                            cgc_memset(&v5, 0, 0x10);\n
                            v11 = v2;\n
                            v8 = 12;\n
                            if (!cgc_modes_decode(&v3, v11, 12, &v1, &v0))\n
                            {\n
                                cgc_free(v11);\n
                                if (v0 == 10)\n
                                {\n
                                    v12 = v1;\n
                                    if (!cgc_memcmp(v12, &cgc_modes_self_test.test, 10))\n
                                    {\n
                                        cgc_free(v12);\n
                                        v4 = 2;\n
                                        v3 = &v6;\n
                                        cgc_memset(&v5, 0, 0x10);\n
                                        v8 = 10;\n
                                        if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                                        {\n
                                            v4 = 2;\n
                                            v3 = &v6;\n
                                            cgc_memset(&v5, 0, 0x10);\n
                                            v13 = v2;\n
                                            v8 = 12;\n
                                            if (!cgc_modes_decode(&v3, v13, 12, &v1, &v0))\n
                                            {\n
                                                cgc_free(v13);\n
                                                if (v0 == 10)\n
                                                {\n
                                                    v14 = v1;\n
                                                    if (!cgc_memcmp(v14, &cgc_modes_self_test.test, 10))\n
                                                    {\n
                                                        cgc_free(v14);\n
                                                        v4 = 3;\n
                                                        v3 = &v6;\n
                                                        cgc_memset(&v5, 0, 0x10);\n
                                                        v8 = 10;\n
                                                        if (!cgc_modes_encode(&v3, &cgc_modes_self_test.test, 10, &v2, &v0) && v0 == 12)\n
                                                        {\n
                                                            v4 = 3;\n
                                                            v3 = &v6;\n
                                                            cgc_memset(&v5, 0, 0x10);\n
                                                            v15 = v2;\n
                                                            v8 = 12;\n
                                                            if (!cgc_modes_decode(&v3, v15, 12, &v1, &v0))\n
                                                            {\n
                                                                cgc_free(v15);\n
                                                                if (v0 == 10)\n
                                                                {\n
                                                                    v16 = v1;\n
                                                                    if (!cgc_memcmp(v16, &cgc_modes_self_test.test, 10))\n
                                                                    {\n
                                                                        cgc_free(v16);\n
                                                                        return 0;\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_fdprintf(2, \"Modes self-init FAILED!\\n
\", v8, v17, v18);\n
    return 1;\n
}\n
", "4256708:sub_40f3c4": null, "4256720:cgc_lcg_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_lcg_init(struct_0 *a0)\n
{\n
    unsigned long long *v1;  // rax\n
\n
    v1 = cgc_malloc(8);\n
    a0->field_8 = v1;\n
    if (!v1)\n
        return 1;\n
    *(v1) = 1;\n
    return 0;\n
}\n
", "4256761:sub_40f3f9": null, "4256768:cgc_lcg_get_bytes": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_lcg_get_bytes(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v1;  // eax\n
    char *v5;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long *v6;  // rbx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = a2;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v1 == v5)\n
            break;\n
        v6 = a0->field_8;\n
        v7 = 6364136223846793005 * *(v6) + 1;\n
        *(v6) = v7;\n
        *((a1 + v5)) = v7 / 0x100000000000000;\n
        if (a2 - 1 == v5)\n
            break;\n
        *((a1 + v5 + 1)) = v7 / 0x1000000000000;\n
        if (a2 - 2 == v5)\n
            break;\n
        *((a1 + v5 + 2)) = v7 / 0x10000000000;\n
        if (a2 - 3 == v5)\n
            break;\n
        *((a1 + v5 + 3)) = v7 / 0x100000000;\n
        v5 += 4;\n
        if (v1 == v5)\n
            break;\n
    }\n
    return 0;\n
}\n
", "4256889:sub_40f479": null, "4256896:cgc_system_init": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_system_init(struct_0 *a0)\n
{\n
    a0->field_8 = 0;\n
    return 0;\n
}\n
", "4256907:sub_40f48b": null, "4256912:cgc_system_get_bytes": "long long cgc_system_get_bytes(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x10]\n
\n
    return *(&v0) != a2 | cgc_random(a0, a1, a2);\n
}\n
", "4256959:sub_40f4bf": null, "4256960:cgc_rng_init": "extern char rngs;\n
\n
long long cgc_rng_init(unsigned long long *a0, unsigned long long *a1)\n
{\n
    switch (a1)\n
    {\n
    default:\n
        return 1;\n
    }\n
}\n
", "4256990:sub_40f4de": null, "4256992:cgc__recv_bytes": "long long cgc__recv_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x10]\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
    unsigned long v5;  // rax\n
\n
    v5 = *(&v0) != a1 | cgc_receive(a0, a1, v2, v3);\n
    return v5;\n
}\n
", "4257044:sub_40f514": null, "4257056:cgc__recv": "long long cgc__recv(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x21]\n
    char v1;  // [bp-0x20]\n
    unsigned long long v4;  // rcx\n
    unsigned long long v6;  // rcx\n
    unsigned long v7;  // rax\n
\n
    v6 = cgc_receive(a0, a1, a2, v4);\n
    if (v6)\n
    {\n
        return 1;\n
    }\n
    else if (*(&v1) != 1)\n
    {\n
        return 1;\n
    }\n
    else if (v0 != a0)\n
    {\n
        return 1;\n
    }\n
    else if (a2)\n
    {\n
        v7 = *(&v1) != a2 | cgc_receive(a0, a1, a2, v6);\n
        return v7;\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4257173:sub_40f595": null, "4257184:cgc__send_bytes": "long long cgc__send_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x10]\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
    unsigned long v5;  // rax\n
\n
    v5 = *(&v0) != a1 | cgc_transmit(a0, a1, v2, v3);\n
    return v5;\n
}\n
", "4257239:sub_40f5d7": null, "4257248:cgc__send": "long long cgc__send(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x21]\n
    char v1;  // [bp-0x20]\n
    unsigned long v3;  // rbx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    if (cgc_transmit(a0, a1, a2, v4))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v1) != 1)\n
    {\n
        return 1;\n
    }\n
    else if (a2)\n
    {\n
        v3 = *(&v1) != a2 | cgc_transmit(a0, a1, a2, v4);\n
        return v3;\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4257368:sub_40f658": null, "4257376:cgc_silk_init": "typedef struct struct_0 {\n
    char padding_0[128];\n
    unsigned long long field_80;\n
    unsigned int field_88;\n
} struct_0;\n
\n
long long cgc_silk_init(unsigned long long *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(144);\n
    *(a0) = v3;\n
    if (!v3)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_codes_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_bn_self_test(144, a1, a2, a3, a4))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_kx_self_test(144, a1, a2, a3, a4))\n
    {\n
        return 1;\n
    }\n
    else if (cgc_modes_self_test())\n
    {\n
        return 1;\n
    }\n
    else if (cgc_rng_init(&v3->padding_0[96], 0x1))\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v3->field_80 = 0;\n
        v3->field_88 = 0;\n
        return 0;\n
    }\n
}\n
", "4257508:sub_40f6e4": null, "4257520:cgc_silk_allowed_codes": "long long cgc_silk_allowed_codes()\n
{\n
    return 983071;\n
}\n
", "4257526:sub_40f6f6": null, "4257536:cgc_silk_preferred_code": "long long cgc_silk_preferred_code(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 4;\n
    if (!(a1 & 16))\n
    {\n
        v1 = 3;\n
        if (!(a1 & 8))\n
        {\n
            v1 = 2;\n
            if (!(a1 & 4))\n
            {\n
                v1 = 1;\n
                if (!(a1 & 2))\n
                    v1 = (a1 & 1) - 1;\n
            }\n
        }\n
    }\n
    return v1;\n
}\n
", "4257589:sub_40f735": null, "4257600:cgc_silk_preferred_mode": "long long cgc_silk_preferred_mode(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 3;\n
    if (!(a1 & 0x80000))\n
    {\n
        v1 = 2;\n
        if (!(a1 & 0x40000))\n
        {\n
            v1 = 1;\n
            if (!(a1 & 0x20000))\n
                v1 = (a1 / 0x10000 & 1) - 1;\n
        }\n
    }\n
    return v1;\n
}\n
", "4257651:sub_40f773": null, "4257664:cgc_silk_negotiate": "long long cgc_silk_negotiate(struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x158]\n
    char v1;  // [bp-0x31]\n
    unsigned int v2;  // [bp-0x30]\n
    char v3;  // [bp-0x28]\n
    unsigned int v5[31];  // rbp\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // r14, Other Possible Types: unsigned long long\n
    unsigned long v14;  // r15, Other Possible Types: unsigned long long\n
\n
    v5 = *(a0);\n
    v2 = 983071;\n
    v1 = 1;\n
    if (cgc_transmit(a0, v7, v8, v9))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v3) != 1)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_transmit(a0, v7, v8, v9))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v3) != 4)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_receive(a0, v7, v8, v9))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v3) != 1)\n
    {\n
        return 1;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 1;\n
    }\n
    else if (cgc_receive(a0, v7, v8, v9))\n
    {\n
        return 1;\n
    }\n
    else if (*(&v3) != 4)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        v12 = v2;\n
        v13 = 4;\n
        if (!(v12 & 16))\n
        {\n
            v13 = 3;\n
            if (!(v12 & 8))\n
            {\n
                v13 = 2;\n
                if (!(v12 & 4))\n
                {\n
                    v13 = 1;\n
                    if (!(v12 & 2))\n
                    {\n
                        v13 = 0;\n
                        if (!(v12 & 1))\n
                            return 1;\n
                    }\n
                }\n
            }\n
        }\n
        v14 = 3;\n
        if (!(v12 & 0x80000))\n
        {\n
            v14 = 2;\n
            if (!(v12 & 0x40000))\n
            {\n
                v14 = 1;\n
                if (!(v12 & 0x20000))\n
                {\n
                    v14 = 0;\n
                    if (!(v12 & 0x10000))\n
                        return 1;\n
                }\n
            }\n
        }\n
        v0 = 1 << (v14 + 16 & 31);\n
        *(&v0 + ((v13 & 31) >> 3)) = *(&v0 + ((v13 & 31) >> 3)) | 1 << (v13 & 31 & 7);\n
        if (v2 != v12)\n
        {\n
            v2 = v0;\n
            v1 = 1;\n
            if (cgc_transmit(a0, v7, v2, v9))\n
            {\n
                return 1;\n
            }\n
            else if (*(&v3) != 1)\n
            {\n
                return 1;\n
            }\n
            else if (cgc_transmit(a0, v7, v2, v9))\n
            {\n
                return 1;\n
            }\n
            else if (*(&v3) != 4)\n
            {\n
                return 1;\n
            }\n
        }\n
        v5[28] = v13;\n
        v5[30] = cgc_codes_ksize(v13);\n
        v5[29] = v14;\n
        return 0;\n
    }\n
}\n
", "4258143:sub_40f95f": null, "4258144:cgc_silk_kx": "long long cgc_silk_kx(struct struct_0 **a0)\n
{\n
    char v0;  // [bp-0xe8]\n
    char v1;  // [bp-0xe0]\n
    unsigned short v2;  // [bp-0xde]\n
    unsigned short v3;  // [bp-0xdc]\n
    unsigned short v4;  // [bp-0xda]\n
    char v5;  // [bp-0xd8]\n
    unsigned int v6;  // [bp-0xb8]\n
    unsigned int v7;  // [bp-0xb4]\n
    char v8;  // [bp-0xb0]\n
    char v9;  // [bp-0xa0]\n
    char v10;  // [bp-0x90]\n
    char v11;  // [bp-0x80]\n
    char v12;  // [bp-0x70]\n
    unsigned int v14[31];  // rbx\n
    unsigned int v15;  // eax\n
    void* v16;  // rbp, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v24;  // r15\n
    unsigned long v25;  // rax\n
    void* v26;  // r14, Other Possible Types: unsigned long\n
    unsigned long v27;  // rbp\n
    unsigned long long v28;  // r15\n
    unsigned long v29;  // rbp\n
    unsigned long long v30;  // r15\n
    unsigned long v31;  // r12\n
    unsigned long long v32;  // rsi\n
    unsigned long v34;  // r14\n
    char *v36;  // rax\n
    unsigned long v37;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v38;  // rcx\n
    char v39;  // dl\n
    unsigned int v40;  // edx\n
    unsigned long v41;  // r15\n
\n
    v14 = *(a0);\n
    v15 = v14[30];\n
    if (!v15)\n
    {\n
        cgc_memset(&v1, 0, 0x8);\n
        v5 = 2;\n
        if (cgc_transmit(a0, 0, 8, v17))\n
        {\n
            return 1;\n
        }\n
        else if (*(&v10) != 1)\n
        {\n
            return 1;\n
        }\n
        else if (cgc_transmit(a0, 0, 8, v17))\n
        {\n
            return 1;\n
        }\n
        else if (*(&v10) != 8)\n
        {\n
            return 1;\n
        }\n
        else if (cgc_receive(a0, 0, 8, v17))\n
        {\n
            return 1;\n
        }\n
        else if (*(&v10) != 1)\n
        {\n
            return 1;\n
        }\n
        else if (v5 != 3)\n
        {\n
            return 1;\n
        }\n
        else if (cgc_receive(a0, 0, 8, v17))\n
        {\n
            return 1;\n
        }\n
        else if (*(&v10) != 2)\n
        {\n
            return 1;\n
        }\n
        else if (*(&v0))\n
        {\n
            return 1;\n
        }\n
        else if (cgc_codes_init(v14, v14[28], 0))\n
        {\n
            return 1;\n
        }\n
        else if (cgc_modes_init(&v14[8], v14[29], v14))\n
        {\n
            return 1;\n
        }\n
        else\n
        {\n
            v34 = &v14[4];\n
            if (!cgc_codes_init(v34, v14[28], 0))\n
            {\n
                v16 = 0;\n
                *(&v16) = cgc_modes_init(&v14[16], v14[29], v34);\n
                return v16;\n
            }\n
            return 1;\n
        }\n
    }\n
    else\n
    {\n
        cgc_bn_init(&v8);\n
        cgc_bn_init(&v9);\n
        if (cgc_kx_init_std(&v10, 3 - (v15 < 129)))\n
            return 1;\n
        v16 = 1;\n
        if (cgc_kx_gen_a(&v10, &v14[24]))\n
        {\n
LABEL_40f9e7:\n
            v26 = 0;\n
        }\n
        else\n
        {\n
            if (!(!cgc_kx_get_A(&v10, &v8)))\n
                goto LABEL_40f9e7;\n
            *(&v1) = cgc_bn_length(&v10) + 7 >> 3;\n
            v2 = cgc_bn_length(&v12) + 7 >> 3;\n
            v3 = cgc_bn_length(&v11) + 7 >> 3;\n
            v4 = cgc_bn_length(&v8) + 7 >> 3;\n
            v24 = v2;\n
            v6 = *(&v1);\n
            v7 = v3;\n
            v25 = cgc_malloc(v4 + v6 + v24 + v7);\n
            if (!v25)\n
                goto LABEL_40f9e7;\n
            v26 = v25;\n
            v27 = v6;\n
            cgc_bn_to_bytes(&v10, v25, v27);\n
            cgc_bn_to_bytes(&v12, *(&v1) + v25, v24);\n
            v28 = v24 + v27;\n
            v29 = v7;\n
            cgc_bn_to_bytes(&v11, v28 + v25, v29);\n
            v30 = v28 + v29;\n
            v31 = v4;\n
            cgc_bn_to_bytes(&v8, v30 + v25, v31);\n
            v0 = 2;\n
            v16 = 1;\n
            if (!cgc_transmit(a0, v32, v31, v7))\n
            {\n
                if (!(*(&v5) == 1))\n
                    goto LABEL_40f9ea;\n
                v16 = 1;\n
                if (!(!cgc_transmit(a0, v32, v31, v7)))\n
                    goto LABEL_40f9ea;\n
                if (!(*(&v5) == 8))\n
                    goto LABEL_40f9ea;\n
                v16 = 1;\n
                if (!(!cgc_transmit(a0, v32, v31, v7)))\n
                    goto LABEL_40f9ea;\n
                if (!(*(&v5) == v30 + v31))\n
                    goto LABEL_40f9ea;\n
                cgc_free(v26);\n
                if (!cgc__recv(3, &v0, 2))\n
                {\n
                    v36 = cgc_malloc(*(&v0));\n
                    if (v36)\n
                    {\n
                        v26 = v36;\n
                        if (!cgc_receive(a0, v32, 2, v7) && *(&v5) == *(&v0) && !cgc_bn_from_bytes(&v9, v36, *(&v0)) && !cgc_kx_set_b(&v10, &v9) && !cgc_kx_get_sk(&v10, &v5, v14[30]) && !cgc_codes_init(v14, v14[28], &v5) && !cgc_modes_init(&v14[8], v14[29], v14))\n
                        {\n
                            if (v14[30] >= 8)\n
                            {\n
                                v37 = 255;\n
                                v38 = 0;\n
                                do\n
                                {\n
                                    v39 = (&v5)[v38];\n
                                    (&v5)[v38] = v39 ^ v37;\n
                                    v40 = (v39 ^ v37) >> 3;\n
                                    v37 = v37 ^ v40;\n
                                    v38 += 1;\n
                                } while (v38 < v14[30] >> 3);\n
                            }\n
                            v41 = &v14[4];\n
                            if (!cgc_codes_init(v41, v14[28], &v5))\n
                            {\n
                                v16 = 0;\n
                                *(&v16) = cgc_modes_init(&v14[16], v14[29], v41);\n
                                goto LABEL_40f9ea;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
LABEL_40f9ea:\n
        cgc_free(v26);\n
        cgc_bn_destroy(&v8);\n
        cgc_bn_destroy(&v9);\n
        cgc_kx_destroy(&v10);\n
        return v16;\n
    }\n
}\n
", "4259358:sub_40fe1e": null, "4259360:cgc_silk_prepare": "long long cgc_silk_prepare(struct struct_0 **a0)\n
{\n
    if (!cgc_silk_negotiate(a0))\n
        return cgc_silk_kx(a0);\n
    return 1;\n
}\n
", "4259401:sub_40fe49": null, "4259408:cgc_silk_send": "long long cgc_silk_send(unsigned long long *a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x49]\n
    int tmp_13;  // tmp #13\n
    unsigned short v1;  // [bp-0x48], Other Possible Types: char\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned long long v3;  // [bp-0x40]\n
    char v4;  // [bp-0x38]\n
    unsigned long v7;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v8;  // r12\n
    unsigned long long v10;  // rcx\n
    unsigned long v11;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v7 = a2;\n
    v11 = a1;\n
    while (true)\n
    {\n
        v8 = (v7 < 65519 ? 65519 : v7);\n
        a0 = *(a0) + 32;\n
        if (cgc_modes_encode(a0, v11, v8, &v3, &v2))\n
            break;\n
        if (*(&v1) > 65535)\n
            break;\n
        v1 = v2;\n
        v0 = 4;\n
        if (!cgc_transmit(a0, v11, v8, v10) && *(&v4) == 1)\n
            cgc_transmit(a0, v11, v8, v10);\n
        cgc_transmit(a0, v11, v8, v10);\n
        cgc_free(v3);\n
        v11 += v8;\n
        tmp_13 = v7;\n
        v7 -= v8;\n
        if (tmp_13 == v8)\n
            return 0;\n
    }\n
    return 1;\n
}\n
", "4259661:sub_40ff4d": null, "4259664:cgc_silk_recv": "typedef struct struct_1 {\n
    char padding_0[128];\n
    unsigned int field_80;\n
    char padding_84[4];\n
    unsigned short field_88;\n
} struct_1;\n
\n
long long cgc_silk_recv(struct struct_0 **a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x60]\n
    int tmp_9;  // tmp #9\n
    char v1;  // [bp-0x59]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x44]\n
    struct struct_0 ***v5;  // [bp-0x40]\n
    unsigned long long v6;  // [bp-0x38]\n
    unsigned long v8;  // r12, Other Possible Types: unsigned long long\n
    char *v9;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    struct_1 *v10;  // r15\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v12;  // rcx\n
    unsigned long long v13;  // rax\n
    unsigned long v14;  // rax\n
    char *v16;  // rbp, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = *(a0);\n
    v5 = &v10->padding_0[64];\n
    v2 = 0;\n
    do\n
    {\n
        v11 = *(&v10->field_80);\n
        if (!v11)\n
        {\n
            v13 = cgc_receive(a0, a1, v16, v12);\n
            if (!v13 && *(&v3) == 1 && v1 == 4)\n
            {\n
                if (!(!cgc_receive(a0, a1, v16, v12)))\n
                    goto LABEL_410112;\n
                if (!(*(&v3) == 2))\n
                    goto LABEL_410112;\n
                v14 = cgc_malloc(*(&v0));\n
                if (!v14)\n
                    goto LABEL_410112;\n
                if (!cgc_receive(a0, a1, a2, v12) && *(&v3) == *(&v0) && !cgc_modes_decode(v5, v14, *(&v0), &v6, &v4))\n
                {\n
                    *(&v10->field_80) = v6;\n
                    v10->field_88 = v4;\n
                    *(&v10[1].padding_0[0]) = 0;\n
                    cgc_free(v14);\n
                    v11 = *(&v10->field_80);\n
                    goto LABEL_41009b;\n
                }\n
                v2 = v14;\n
                goto LABEL_410112;\n
            }\n
            v2 = 0;\n
LABEL_410112:\n
            cgc_free(v2);\n
            return 1;\n
        }\n
LABEL_41009b:\n
        v16 = v10->field_88;\n
        if (v8 <= v16)\n
            v16 = v8;\n
        cgc_memcpy(v9, *(&v10[1].padding_0[0]) + v11, v16);\n
        *(&v10[1].padding_0[0]) = *(&v10[1].padding_0[0]) + v16;\n
        v8 -= v16;\n
        tmp_9 = v10->field_88;\n
        v10->field_88 = v10->field_88 - v16;\n
        if (tmp_9 == v16)\n
        {\n
            cgc_free(*(&v10->field_80));\n
            *(&v10->field_80) = 0;\n
            *(&v10->field_88) = 0;\n
        }\n
        v9 += v16;\n
    } while (v8);\n
}\n
", "4259718:sub_40ff86": null, "4260144:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_transmit": null, "5242896:cgc_random": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}