{"4206592:_init": "extern struct_0 *g_40dbf8;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40dbf8;\n
    if (g_40dbf8)\n
        v1 = g_40dbf8();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40dc10;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40dc10;\n
    goto *(4250648);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4206672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206688:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4206704:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206720:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206736:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206752:_Znwm": "// attributes: PLT stub\n
int operator new(unsigned long a0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4206768:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206784:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4206800:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4206816:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206832:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4206848:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4250592);\n
}\n
", "4206864:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206901:sub_403135": null, "4206902:sub_403136": null, "4206912:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40dbf0;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206953:sub_403169": null, "4206960:register_tm_clones": "extern unsigned long long g_40dc00;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4207017:sub_4031a9": null, "4207024:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40dbe0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40dbe0)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207077:sub_4031e5": null, "4207081:sub_4031e9": null, "4207088:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207097:sub_4031f9": null, "4207104:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4207171:sub_403243": null, "4207184:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4207954:sub_403552": null, "4207968:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4208163:sub_403623": null, "4208176:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 **, struct struct_0 *[2], unsigned long\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4208716:sub_40384c": null, "4208720:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4208868:sub_4038e4": null, "4208880:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4209004:sub_40396c": null, "4209008:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4209136:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4209198:sub_403a2e": null, "4209200:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209425:sub_403b11": null, "4209440:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v4 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209647:sub_403bef": null, "4209648:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_403ef1;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_403ef1:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4210433:sub_403f01": null, "4210448:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_0 **v2;  // [bp-0x150]\n
    struct_1 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    struct struct_0 **v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_3 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_3 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_1 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    struct struct_0 **v57;  // rax\n
    struct_1 *v58;  // rcx\n
    struct struct_0 **v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_404916:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    cgc_putc(*(v27));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 <= 160)\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                else\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; v23->field_0; v23 += 1)\n
                {\n
                    cgc_putc(v23->field_0);\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_404916;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_4047b3;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_4047b3:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4213037:sub_40492d": null, "4213040:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_1 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_0 **v2;  // [bp-0x160]\n
    struct_1 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned int *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    struct struct_0 **v18;  // [bp-0xe0]\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_3 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_3 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_1 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v45;  // rcx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_40541b:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    a0[v37] = *(v27);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; *(v25); v25 += 1)\n
                {\n
                    a0[v37] = *(v25);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_40541b;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_405287;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_405287:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4215858:sub_405432": null, "4215872:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4216047:sub_4054ef": null, "4216048:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    a0[v13] = 0;\n
    return v13;\n
}\n
", "4216224:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4216315:sub_4055fb": null, "4216320:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4216371:sub_405633": null, "4216384:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4216412:sub_40565c": null, "4216416:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4216468:sub_405694": null, "4216480:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4216535:sub_4056d7": null, "4216544:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4216599:sub_405717": null, "4216608:cgc_strcmp": "long long cgc_strcmp(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[a0] && !v0[a1])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (!v0[a1])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        if (*((a0 + v0)) < *((a1 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) <= *((a1 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4216863:sub_40581f": null, "4216864:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4216967:sub_405887": null, "4216976:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4217097:sub_405909": null, "4217104:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
\n
    while (true)\n
    {\n
        cgc_memset(&v3, 0, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 0, 128, v7, v8);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 0, 128, v7);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4217375:sub_405a1f": null, "4217376:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2 >= 4)\n
    {\n
        for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v1 + 3 < a2; v1 += 4)\n
        {\n
            *(&v1[a0]) = v0;\n
        }\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = a1;\n
    }\n
    return a0;\n
}\n
", "4217560:sub_405ad8": null, "4217568:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4217662:sub_405b3e": null, "4217664:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; v2 < a2; v2 += 1)\n
    {\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v0 == a1)\n
                break;\n
            *((a0 + v2)) = v0;\n
        }\n
    }\n
    if (v2 == a2)\n
        cgc_flush_input(0);\n
    return v2;\n
}\n
", "4217862:sub_405c06": null, "4217872:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a2 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a2; v0 += 4)\n
        {\n
            *(&v0[a0]) = *(&v0[a1]);\n
        }\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4218038:sub_405cb6": null, "4218048:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4218440:sub_405e48": null, "4218448:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a0]; v0 += 1);\n
    return v0;\n
}\n
", "4218508:sub_405e8c": null, "4218512:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = -(a0);\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4218553:sub_405eb9": null, "4218560:_ZN6StringC2Ev": "long long String::__base_ctor__(unsigned long long a0[2])\n
{\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    return a0;\n
}\n
", "4218589:sub_405edd": null, "4218592:_ZN6StringC1EPKc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long String::__ctor__(struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_strlen(a1) + 1;\n
    *(&a0->field_8) = operator new[](*(&v0));\n
    cgc_memcpy(*(&a0->field_8), a1, *(&v0) - 1);\n
    *((*(&a0->field_8) + *(&v0) - 1)) = 0;\n
    a0->field_0 = *(&v0) - 1;\n
    return a0;\n
}\n
", "4218711:sub_405f57": null, "4218720:_ZN6StringC2ERKS_": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long String::__base_ctor__(struct_0 *a0, unsigned int a1[3])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = *(&a1[0]) + 1;\n
    *(&a0->field_8) = operator new[](*(&v0));\n
    cgc_memcpy(*(&a0->field_8), *(&a1[2]), *(&a1[0]));\n
    *((*(&a0->field_8) + *(&v0) - 1)) = 0;\n
    a0->field_0 = *(&a1[0]);\n
    return a0;\n
}\n
", "4218839:sub_405fd7": null, "4218848:_ZN6StringD2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long String::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned long long v3;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a0->field_8)\n
        return a0;\n
    v3 = v1->field_8;\n
    *(&v0) = v3;\n
    if (!v3)\n
        return v3;\n
    v3 = operator delete[](*(&v0));\n
}\n
", "4218921:sub_406029": null, "4218928:_ZN6StringpLERKS_": "long long String::operator+=(unsigned int a0[3], unsigned int a1[3])\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x20]\n
\n
    *(&v2) = *(&a0[0]) + *(&a1[0]) + 1;\n
    *(&v1) = operator new[](*(&v2));\n
    cgc_memcpy(*(&v1), *(&a0[2]), *(&a0[0]));\n
    cgc_memcpy(*(&v1) + *(&a0[0]), *(&a1[2]), *(&a1[0]));\n
    if (*(&a0[2]))\n
    {\n
        *(&v0) = *(&a0[2]);\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    *(&a0[2]) = *(&v1);\n
    *(&a0[0]) = *(&v2) - 1;\n
    return a0;\n
}\n
", "4219117:sub_4060ed": null, "4219120:_ZNK6StringplERKS_": "long long String::operator+ const(void* a0, unsigned int a1[3], unsigned int a2[3])\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    String::__base_ctor__(&v0, a1);\n
    String::__base_ctor__(a0, String::operator+=(&v0, a2));\n
    String::__base_dtor__(&v0);\n
    return a0;\n
}\n
", "4219216:_ZNK6String5c_strEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long String::c_str const(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4219234:sub_406162": null, "4219248:_ZN6String6lengthEv": "long long String::length(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4219265:sub_406181": null, "4219280:_ZN6String5emptyEv": "long long String::empty(unsigned long long *a0)\n
{\n
    return !*(a0);\n
}\n
", "4219306:sub_4061aa": null, "4219312:_ZNK6String5upperEv": "long long String::upper const(unsigned long long a0[2], unsigned int a1[3])\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x19]\n
    unsigned long long v2[2];  // [bp-0x10]\n
\n
    v2[0] = a0;\n
    v1 = 0;\n
    String::__base_ctor__(a0, a1);\n
    for (v0 = 0; v0 < a0[0]; v0 += 1)\n
    {\n
        *((a0[1] + v0)) = cgc_toupper(*((a0[1] + v0)));\n
    }\n
    v1 = 1;\n
    if (!(v1 & 1))\n
        String::__base_dtor__(a0);\n
    return a0;\n
}\n
", "4219470:sub_40624e": null, "4219472:_ZNK6String5lowerEv": "long long String::lower const(unsigned long long a0[2], unsigned int a1[3])\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x19]\n
    unsigned long long v2[2];  // [bp-0x10]\n
\n
    v2[0] = a0;\n
    v1 = 0;\n
    String::__base_ctor__(a0, a1);\n
    for (v0 = 0; v0 < a0[0]; v0 += 1)\n
    {\n
        *((a0[1] + v0)) = cgc_tolower(*((a0[1] + v0)));\n
    }\n
    v1 = 1;\n
    if (!(v1 & 1))\n
        String::__base_dtor__(a0);\n
    return a0;\n
}\n
", "4219630:sub_4062ee": null, "4219632:_ZNK6String11StripSpacesEv": "long long String::StripSpaces const(unsigned long long a0, unsigned long long a1[2])\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1[0]; v0 += 1)\n
    {\n
        if (v0[a1[1]] != 32)\n
            break;\n
    }\n
    String::SubString const(a0, a1, v0, 4294967295);\n
    return a0;\n
}\n
", "4219776:_ZNK6String9SubStringEmm": "extern unsigned int g_40b484;\n
\n
long long String::SubString const(void* a0, unsigned long long a1[2], char *a2, unsigned long a3)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // rcx\n
\n
    v5 = a0;\n
    v4 = a3;\n
    if (a2 >= a1[0])\n
    {\n
        String::__ctor__(a0, 4240516);\n
        return a0;\n
    }\n
    if (v4 > a1[0])\n
        v4 = a1[0];\n
    if (a2 >= v4)\n
    {\n
        String::__ctor__(a0, 4240516);\n
        return a0;\n
    }\n
    v3 = v4 - a2;\n
    v2 = operator new[](v3 + 1);\n
    v1 = 0;\n
    for (v0 = a2; v0 < v4; v0 += 1)\n
    {\n
        v7 = v1;\n
        v1 = v7 + 1;\n
        v2[v7] = v0[a1[1]];\n
    }\n
    v2[v1] = 0;\n
    String::__ctor__(a0, v2);\n
    return a0;\n
}\n
", "4220064:_ZN6String4TrimEm": "long long String::Trim(void* a0, unsigned int a1[3], unsigned int a2)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    String::SubString const(&v0, a1, NULL, a2);\n
    String::operator=(a1, &v0);\n
    String::__base_dtor__(&v0);\n
    String::__base_ctor__(a0, a1);\n
    return a0;\n
}\n
", "4220165:sub_406505": null, "4220176:_ZN6StringaSERKS_": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long String::operator=(struct_0 *a0, unsigned int a1[3])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
\n
    if (*(&a0->field_8))\n
    {\n
        *(&v0) = *(&a0->field_8);\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    *(&v1) = *(&a1[0]) + 1;\n
    *(&a0->field_8) = operator new[](*(&v1));\n
    cgc_memcpy(*(&a0->field_8), *(&a1[2]), *(&a1[0]));\n
    *((*(&a0->field_8) + *(&v1) - 1)) = 0;\n
    a0->field_0 = *(&a1[0]);\n
    return a0;\n
}\n
", "4220342:sub_4065b6": null, "4220352:_ZNK6StringeqERKS_": "long long String::operator== const(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x9]\n
\n
    if (a0[0] != a1[0])\n
    {\n
        v1 = 0;\n
        return v1 & 1;\n
    }\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a0[0])\n
        {\n
            v1 = 1;\n
            return v1 & 1;\n
        }\n
        else if (v0[a0[1]] == v0[a1[1]])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1 & 1;\n
        }\n
    }\n
}\n
", "4220507:sub_40665b": null, "4220512:_ZNK6StringneERKS_": "long long String::operator!= const(unsigned long long a0[2], unsigned long long a1[2])\n
{\n
    return (String::operator== const(a0, a1) ^ 255) & 1;\n
}\n
", "4220554:sub_40668a": null, "4220560:_ZN6String9SetStringEPKc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long String::SetString(struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
\n
    if (*(&a0->field_8))\n
    {\n
        *(&v0) = *(&a0->field_8);\n
        if (*(&v0))\n
            operator delete[](*(&v0));\n
    }\n
    *(&v1) = cgc_strlen(a1) + 1;\n
    *(&a0->field_8) = operator new[](*(&v1));\n
    cgc_memcpy(*(&a0->field_8), a1, *(&v1) - 1);\n
    *((*(&a0->field_8) + *(&v1) - 1)) = 0;\n
    a0->field_0 = *(&v1) - 1;\n
    return a0;\n
}\n
", "4220726:sub_406736": null, "4220736:_ZN14CommandHandlerC2Ev": "typedef struct struct_0 {\n
    char padding_0[168];\n
    char field_a8;\n
} struct_0;\n
\n
long long CommandHandler::__base_ctor__(struct_0 *a0)\n
{\n
    DLQueue::__base_ctor__(a0);\n
    DiverInfo::__base_ctor__(&a0->padding_0[24]);\n
    a0->field_a8 = 0;\n
    return a0;\n
}\n
", "4220791:sub_406777": null, "4220800:_ZN14CommandHandlerD1Ev": "long long CommandHandler::__dtor__(unsigned long long a0)\n
{\n
    DiverInfo::__base_dtor__(a0 + 24);\n
    return DLQueue::__base_dtor__(a0);\n
}\n
", "4220844:sub_4067ac": null, "4220848:_ZN14CommandHandler18CmdChangeDiverInfoEv": "typedef struct struct_0 {\n
    char padding_0[168];\n
    char field_a8;\n
} struct_0;\n
\n
extern unsigned int g_40b484;\n
\n
long long CommandHandler::CmdChangeDiverInfo(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x2f1]\n
    char v1;  // [bp-0x2f0]\n
    char v2;  // [bp-0x2ef]\n
    char v3;  // [bp-0x2ee]\n
    char v4;  // [bp-0x2ed]\n
    char v5;  // [bp-0x2ec]\n
    char v6;  // [bp-0x2eb]\n
    char v7;  // [bp-0x2ea]\n
    char v8;  // [bp-0x2e9]\n
    struct_0 *v9;  // [bp-0x2e8]\n
    char v10;  // [bp-0x2e0]\n
    char v11;  // [bp-0x2d0]\n
    char v12;  // [bp-0x2c0]\n
    char v13;  // [bp-0x2b0]\n
    char v14;  // [bp-0x2a0]\n
    char v15;  // [bp-0x290]\n
    char v16;  // [bp-0x280]\n
    char v17;  // [bp-0x270]\n
    char v18;  // [bp-0x260]\n
    char v19;  // [bp-0x250]\n
    char v20;  // [bp-0x240]\n
    char v21;  // [bp-0x230]\n
    char v22;  // [bp-0x220]\n
    char v23;  // [bp-0x210]\n
    unsigned int v24[3];  // [bp-0x200]\n
    unsigned long long v25[2];  // [bp-0x1f0]\n
    char v26;  // [bp-0x1e0]\n
    unsigned long long v27[2];  // [bp-0x1d0]\n
    char v28;  // [bp-0x1c0]\n
    char v29;  // [bp-0x1b0]\n
    char v30;  // [bp-0x1a0]\n
    char v31;  // [bp-0x190]\n
    char v32;  // [bp-0x180]\n
    char v33;  // [bp-0x170]\n
    char v34;  // [bp-0x160]\n
    char v35;  // [bp-0x150]\n
    char v36;  // [bp-0x140]\n
    char v37;  // [bp-0x130]\n
    char v38;  // [bp-0x120]\n
    char v39;  // [bp-0x110]\n
    char v40;  // [bp-0x100]\n
    char v41;  // [bp-0xf0]\n
    char v42;  // [bp-0xe0]\n
    char v43;  // [bp-0xd0]\n
    char v44;  // [bp-0xc0]\n
    char v45;  // [bp-0xb0]\n
    char v46;  // [bp-0xa0]\n
    char v47;  // [bp-0x90]\n
    char v48;  // [bp-0x80]\n
    char v49;  // [bp-0x70]\n
    char v50;  // [bp-0x60]\n
    char v51;  // [bp-0x50]\n
    char v52;  // [bp-0x40]\n
    char v53;  // [bp-0x30]\n
    char v54;  // [bp-0x20]\n
    struct_0 *v55;  // [bp-0x10]\n
    struct_0 *v57;  // rdi\n
\n
    v55 = a0;\n
    v9 = v55;\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    if (!(v9->field_a8 & 1))\n
    {\n
        String::__base_ctor__(v27);\n
        String::__base_ctor__(&v26);\n
        String::__base_ctor__(v25);\n
        String::__base_ctor__(v24);\n
        String::__base_ctor__(&v23);\n
        String::__base_ctor__(&v22);\n
        String::__base_ctor__(&v21);\n
        String::__base_ctor__(&v20);\n
        String::__base_ctor__(&v19);\n
        cgc_printf(\"First Name: \", a1, a2, a3, a4);\n
        ReadLine(v27);\n
        String::Trim(&v18, v27, 20);\n
        String::__base_dtor__(&v18);\n
        cgc_printf(\"Last Name: \", a1, 20, a3, a4);\n
        ReadLine(&v26);\n
        String::Trim(&v17, &v26, 20);\n
        String::__base_dtor__(&v17);\n
        cgc_printf(\"Street: \", a1, 20, a3, a4);\n
        ReadLine(v25);\n
        String::Trim(&v16, v25, 29);\n
        String::__base_dtor__(&v16);\n
        cgc_printf(\"City: \", a1, 29, a3, a4);\n
        ReadLine(v24);\n
        String::Trim(&v15, v24, 19);\n
        String::__base_dtor__(&v15);\n
        cgc_printf(\"State: \", a1, 19, a3, a4);\n
        ReadLine(&v23);\n
        String::Trim(&v14, &v23, 2);\n
        String::__base_dtor__(&v14);\n
        cgc_printf(\"Zip Code: \", a1, 2, a3, a4);\n
        ReadLine(&v22);\n
        String::Trim(&v13, &v22, 10);\n
        String::__base_dtor__(&v13);\n
        cgc_printf(\"Phone Number: \", a1, 10, a3, a4);\n
        ReadLine(&v21);\n
        String::Trim(&v12, &v21, 15);\n
        String::__base_dtor__(&v12);\n
        cgc_printf(\"PADI Diver Number: \", a1, 15, a3, a4);\n
        ReadLine(&v20);\n
        String::Trim(&v11, &v20, 19);\n
        String::__base_dtor__(&v11);\n
        cgc_printf(\"PADI Cert Date: \", a1, 19, a3, a4);\n
        ReadLine(&v19);\n
        String::Trim(&v10, &v19, 10);\n
        String::__base_dtor__(&v10);\n
        DiverInfo::SetFirstName(&v9->padding_0[24], v27);\n
        DiverInfo::SetLastName(&v9->padding_0[24], &v26);\n
        DiverInfo::SetStreet(&v9->padding_0[24], v25);\n
        DiverInfo::SetCity(&v9->padding_0[24], v24);\n
        DiverInfo::SetState(&v9->padding_0[24], &v23);\n
        DiverInfo::SetZipCode(&v9->padding_0[24], &v22);\n
        DiverInfo::SetPhoneNumber(&v9->padding_0[24], &v21);\n
        DiverInfo::SetPadiNumber(&v9->padding_0[24], &v20);\n
        DiverInfo::SetPadiDate(&v9->padding_0[24], &v19);\n
        String::__base_dtor__(&v19);\n
        String::__base_dtor__(&v20);\n
        String::__base_dtor__(&v21);\n
        String::__base_dtor__(&v22);\n
        String::__base_dtor__(&v23);\n
        String::__base_dtor__(v24);\n
        String::__base_dtor__(v25);\n
        String::__base_dtor__(&v26);\n
        String::__base_dtor__(v27);\n
    }\n
    else\n
    {\n
        String::__base_ctor__(&v54);\n
        String::__base_ctor__(&v53);\n
        String::__base_ctor__(&v52);\n
        String::__base_ctor__(&v51);\n
        String::__base_ctor__(&v50);\n
        String::__base_ctor__(&v49);\n
        String::__base_ctor__(&v48);\n
        String::__base_ctor__(&v47);\n
        String::__base_ctor__(&v46);\n
        cgc_printf(\"First Name (@s): \", String::c_str const(DiverInfo::GetFirstName const(&v9->padding_0[24])), a2, a3, a4);\n
        ReadLine(&v54);\n
        String::Trim(&v45, &v54, 20);\n
        String::__base_dtor__(&v45);\n
        cgc_printf(\"Last Name (@s): \", String::c_str const(DiverInfo::GetLastName const(&v9->padding_0[24])), 20, a3, a4);\n
        ReadLine(&v53);\n
        String::Trim(&v44, &v53, 20);\n
        String::__base_dtor__(&v44);\n
        cgc_printf(\"Street (@s): \", String::c_str const(DiverInfo::GetStreet const(&v9->padding_0[24])), 20, a3, a4);\n
        ReadLine(&v52);\n
        String::Trim(&v43, &v52, 29);\n
        String::__base_dtor__(&v43);\n
        cgc_printf(\"City (@s): \", String::c_str const(DiverInfo::GetCity const(&v9->padding_0[24])), 29, a3, a4);\n
        ReadLine(&v51);\n
        String::Trim(&v42, &v51, 19);\n
        String::__base_dtor__(&v42);\n
        cgc_printf(\"State (@s): \", String::c_str const(DiverInfo::GetState const(&v9->padding_0[24])), 19, a3, a4);\n
        ReadLine(&v50);\n
        String::Trim(&v41, &v50, 2);\n
        String::__base_dtor__(&v41);\n
        cgc_printf(\"Zip Code (@s): \", String::c_str const(DiverInfo::GetZipCode const(&v9->padding_0[24])), 2, a3, a4);\n
        ReadLine(&v49);\n
        String::Trim(&v40, &v49, 10);\n
        String::__base_dtor__(&v40);\n
        cgc_printf(\"Phone Number (@s): \", String::c_str const(DiverInfo::GetPhoneNumber const(&v9->padding_0[24])), 10, a3, a4);\n
        ReadLine(&v48);\n
        String::Trim(&v39, &v48, 15);\n
        String::__base_dtor__(&v39);\n
        cgc_printf(\"PADI Diver Number (@s): \", String::c_str const(DiverInfo::GetPadiNumber const(&v9->padding_0[24])), 15, a3, a4);\n
        ReadLine(&v47);\n
        String::Trim(&v38, &v47, 19);\n
        String::__base_dtor__(&v38);\n
        cgc_printf(\"PADI Cert Date (@s): \", String::c_str const(DiverInfo::GetPadiDate const(&v9->padding_0[24])), 19, a3, a4);\n
        ReadLine(&v46);\n
        String::Trim(&v37, &v46, 10);\n
        String::__base_dtor__(&v37);\n
        String::__ctor__(&v36, 4240516);\n
        v8 = String::operator!= const(&v54, &v36);\n
        String::__base_dtor__(&v36);\n
        if ((v8 & 1))\n
            DiverInfo::SetFirstName(&v9->padding_0[24], &v54);\n
        String::__ctor__(&v35, 4240516);\n
        v7 = String::operator!= const(&v53, &v35);\n
        String::__base_dtor__(&v35);\n
        if ((v7 & 1))\n
            DiverInfo::SetLastName(&v9->padding_0[24], &v53);\n
        String::__ctor__(&v34, 4240516);\n
        v6 = String::operator!= const(&v52, &v34);\n
        String::__base_dtor__(&v34);\n
        if ((v6 & 1))\n
            DiverInfo::SetStreet(&v9->padding_0[24], &v52);\n
        String::__ctor__(&v33, 4240516);\n
        v5 = String::operator!= const(&v51, &v33);\n
        String::__base_dtor__(&v33);\n
        if ((v5 & 1))\n
            DiverInfo::SetCity(&v9->padding_0[24], &v51);\n
        String::__ctor__(&v32, 4240516);\n
        v4 = String::operator!= const(&v50, &v32);\n
        String::__base_dtor__(&v32);\n
        if ((v4 & 1))\n
            DiverInfo::SetState(&v9->padding_0[24], &v50);\n
        String::__ctor__(&v31, 4240516);\n
        v3 = String::operator!= const(&v49, &v31);\n
        String::__base_dtor__(&v31);\n
        if ((v3 & 1))\n
            DiverInfo::SetZipCode(&v9->padding_0[24], &v49);\n
        String::__ctor__(&v30, 4240516);\n
        v2 = String::operator!= const(&v48, &v30);\n
        String::__base_dtor__(&v30);\n
        if ((v2 & 1))\n
            DiverInfo::SetPhoneNumber(&v9->padding_0[24], &v48);\n
        String::__ctor__(&v29, 4240516);\n
        v1 = String::operator!= const(&v47, &v29);\n
        String::__base_dtor__(&v29);\n
        if ((v1 & 1))\n
            DiverInfo::SetPadiNumber(&v9->padding_0[24], &v47);\n
        String::__ctor__(&v28, 4240516);\n
        v0 = String::operator!= const(&v46, &v28);\n
        String::__base_dtor__(&v28);\n
        if ((v0 & 1))\n
            DiverInfo::SetPadiDate(&v9->padding_0[24], &v46);\n
        String::__base_dtor__(&v46);\n
        String::__base_dtor__(&v47);\n
        String::__base_dtor__(&v48);\n
        String::__base_dtor__(&v49);\n
        String::__base_dtor__(&v50);\n
        String::__base_dtor__(&v51);\n
        String::__base_dtor__(&v52);\n
        String::__base_dtor__(&v53);\n
        String::__base_dtor__(&v54);\n
    }\n
    v57 = v9;\n
    v57->field_a8 = 1;\n
    CommandHandler::PrintDiverInfo(v57);\n
    return 0;\n
}\n
", "4223702:sub_4072d6": null, "4223712:_ZN14CommandHandler14PrintDiverInfoEv": "long long CommandHandler::PrintDiverInfo(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned long v2;  // rax\n
\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    *(&v0) = String::c_str const(DiverInfo::GetFirstName const(a0 + 24));\n
    cgc_printf(\"     Name: @s @s\\n
\", *(&v0), String::c_str const(DiverInfo::GetLastName const(a0 + 24)), a3, a4);\n
    cgc_printf(\"  Address: @s\\n
\", String::c_str const(DiverInfo::GetStreet const(a0 + 24)), a2, a3, a4);\n
    cgc_printf(\"     City: @s\\n
\", String::c_str const(DiverInfo::GetCity const(a0 + 24)), a2, a3, a4);\n
    cgc_printf(\"    State: @s\\n
\", String::c_str const(DiverInfo::GetState const(a0 + 24)), a2, a3, a4);\n
    cgc_printf(\" Zip Code: @s\\n
\", String::c_str const(DiverInfo::GetZipCode const(a0 + 24)), a2, a3, a4);\n
    cgc_printf(\"    Phone: @s\\n
\", String::c_str const(DiverInfo::GetPhoneNumber const(a0 + 24)), a2, a3, a4);\n
    cgc_printf(\" PADI Num: @s\\n
\", String::c_str const(DiverInfo::GetPadiNumber const(a0 + 24)), a2, a3, a4);\n
    v2 = String::c_str const(DiverInfo::GetPadiDate const(a0 + 24));\n
    cgc_printf(\"Cert Date: @s\\n
\", v2, a2, a3, a4);\n
    return cgc_printf(\"\\n
\", v2, a2, a3, a4);\n
}\n
", "4224099:sub_407463": null, "4224112:_ZN14CommandHandler13CmdLogNewDiveEv": "long long CommandHandler::CmdLogNewDive(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x148]\n
    unsigned long long v1;  // [bp-0x140]\n
    unsigned long long v2;  // [bp-0x138]\n
    unsigned long long v3;  // [bp-0x130]\n
    unsigned long long v4;  // [bp-0x128]\n
    unsigned long long v5;  // [bp-0x120]\n
    unsigned long long v6;  // [bp-0x118]\n
    char v7;  // [bp-0x108]\n
    char v8;  // [bp-0x100]\n
    unsigned long long v9;  // [bp-0xf8]\n
    char v10;  // [bp-0xf0]\n
    char v11;  // [bp-0xe0]\n
    char v12;  // [bp-0xd0]\n
    char v13;  // [bp-0xc0]\n
    char v14;  // [bp-0xb0]\n
    char v15;  // [bp-0xa0]\n
    char v16;  // [bp-0x90]\n
    char v17;  // [bp-0x80]\n
    char v18;  // [bp-0x70]\n
    char v19;  // [bp-0x60]\n
    unsigned int v20[3];  // [bp-0x50]\n
    unsigned int v21[3];  // [bp-0x40]\n
    char v22;  // [bp-0x30]\n
    char v23;  // [bp-0x20]\n
\n
    String::__base_ctor__(&v23);\n
    String::__base_ctor__(&v22);\n
    String::__base_ctor__(v21);\n
    String::__base_ctor__(v20);\n
    String::__base_ctor__(&v19);\n
    String::__base_ctor__(&v18);\n
    String::__base_ctor__(&v17);\n
    String::__base_ctor__(&v16);\n
    String::__base_ctor__(&v15);\n
    String::__base_ctor__(&v14);\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Dive Site: \", a1, a2, a3, a4);\n
    ReadLine(&v23);\n
    String::Trim(&v13, &v23, 25);\n
    String::__base_dtor__(&v13);\n
    cgc_printf(\"Date: \", a1, 25, a3, a4);\n
    ReadLine(&v22);\n
    String::Trim(&v12, &v22, 10);\n
    String::__base_dtor__(&v12);\n
    cgc_printf(\"Time: \", a1, 10, a3, a4);\n
    ReadLine(v21);\n
    String::Trim(&v11, v21, 8);\n
    String::__base_dtor__(&v11);\n
    cgc_printf(\"Location (area/city): \", a1, 8, a3, a4);\n
    ReadLine(v20);\n
    String::Trim(&v10, v20, 25);\n
    String::__base_dtor__(&v10);\n
    cgc_printf(\"Max Depth in ft: \", a1, 25, a3, a4);\n
    ReadLine(&v19);\n
    cgc_printf(\"Avg Depth in ft: \", a1, 25, a3, a4);\n
    ReadLine(&v18);\n
    cgc_printf(\"Dive Duration (mins): \", a1, 25, a3, a4);\n
    ReadLine(&v17);\n
    cgc_printf(\"O2 Percentage: \", a1, 25, a3, a4);\n
    ReadLine(&v16);\n
    cgc_printf(\"Pressure In (psi): \", a1, 25, a3, a4);\n
    ReadLine(&v15);\n
    cgc_printf(\"Pressure Out (psi): \", a1, 25, a3, a4);\n
    ReadLine(&v14);\n
    v0 = operator new(1112);\n
    Dive::__base_ctor__(v0);\n
    v9 = v0;\n
    Date::__base_ctor__(&v8);\n
    Date::SetDate(&v8, &v22);\n
    Time::__base_ctor__(&v7);\n
    Time::SetTime(&v7, v21);\n
    Dive::SetDate(v9, &v8);\n
    Dive::SetTime(v9, &v7);\n
    Dive::SetDiveSite(v9, &v23);\n
    Dive::SetLocation(v9, v20);\n
    v1 = v9;\n
    Dive::SetMaxDepth(v1, StringToInt(&v19));\n
    v2 = v9;\n
    Dive::SetAvgDepth(v2, StringToInt(&v18));\n
    v3 = v9;\n
    Dive::SetDuration(v3, StringToInt(&v17));\n
    v4 = v9;\n
    Dive::SetO2Percentage(v4, StringToInt(&v16));\n
    v5 = v9;\n
    Dive::SetStartPressure(v5, StringToInt(&v15));\n
    v6 = v9;\n
    Dive::SetEndPressure(v6, StringToInt(&v14));\n
    DLQueue::AddLast(a0, v9);\n
    Time::__base_dtor__(&v7);\n
    Date::__base_dtor__(&v8);\n
    String::__base_dtor__(&v14);\n
    String::__base_dtor__(&v15);\n
    String::__base_dtor__(&v16);\n
    String::__base_dtor__(&v17);\n
    String::__base_dtor__(&v18);\n
    String::__base_dtor__(&v19);\n
    String::__base_dtor__(v20);\n
    String::__base_dtor__(v21);\n
    String::__base_dtor__(&v22);\n
    String::__base_dtor__(&v23);\n
    return 0;\n
}\n
", "4225176:sub_407898": null, "4225184:_ZN14CommandHandler19CmdDownloadDiveDataEv": "extern unsigned int g_40b484;\n
\n
long long CommandHandler::CmdDownloadDiveData(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x1e0]\n
    unsigned long long v1;  // [bp-0x1d8]\n
    unsigned long long v2;  // [bp-0x1d0]\n
    char v3;  // [bp-0x1c8]\n
    char v4;  // [bp-0x1c7]\n
    char v5;  // [bp-0x1c6]\n
    char v6;  // [bp-0x1c5]\n
    unsigned int v7;  // [bp-0x1c4]\n
    unsigned long long v8;  // [bp-0x1c0]\n
    char v9;  // [bp-0x1b5]\n
    unsigned int v10;  // [bp-0x1b4]\n
    unsigned long long v11;  // [bp-0x1a8]\n
    char v12;  // [bp-0x1a0]\n
    char v13;  // [bp-0x190]\n
    char v14;  // [bp-0x180]\n
    char v15;  // [bp-0x170]\n
    char v16;  // [bp-0x160]\n
    char v17;  // [bp-0x150]\n
    char v18;  // [bp-0x140]\n
    char v19;  // [bp-0x130]\n
    char v20;  // [bp-0x120]\n
    char v21;  // [bp-0x110]\n
    char v22;  // [bp-0x100]\n
    char v23;  // [bp-0xf0]\n
    char v24;  // [bp-0xe0]\n
    char v25;  // [bp-0xd0]\n
    char v26;  // [bp-0xc0]\n
    char v27;  // [bp-0xb0]\n
    char v28;  // [bp-0xa0]\n
    unsigned long long v29[2];  // [bp-0x90]\n
    unsigned int v30[3];  // [bp-0x80]\n
    char v31;  // [bp-0x70]\n
    unsigned long long v32[2];  // [bp-0x60]\n
    char v33;  // [bp-0x50]\n
    char v34;  // [bp-0x48]\n
    unsigned int v35;  // [bp-0x44]\n
    unsigned int v36;  // [bp-0x40]\n
    unsigned int v37;  // [bp-0x3c]\n
    unsigned int v38;  // [bp-0x38]\n
    unsigned int v39;  // [bp-0x34]\n
    unsigned int v40;  // [bp-0x30]\n
    unsigned int v41;  // [bp-0x2c]\n
    unsigned int v42;  // [bp-0x28]\n
    char v43;  // [bp-0x24]\n
    char v44;  // [bp-0x20]\n
    char v45;  // [bp-0x19]\n
    unsigned long long v46;  // [bp-0x18]\n
    unsigned long long v48;  // rcx\n
    unsigned long v49;  // rax\n
\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    v11 = operator new(1112);\n
    Dive::__base_ctor__(v11);\n
    v46 = v11;\n
    v45 = 0;\n
    ReadUint32(&v44);\n
    ReadUint32(&v43);\n
    Dive::AddDiveBin(v46, *(&v44), *(&v43));\n
    while (true)\n
    {\n
        ReadUint32(&v44);\n
        if (!*(&v44))\n
            break;\n
        ReadUint32(&v43);\n
        Dive::AddDiveBin(v46, *(&v44), *(&v43));\n
    }\n
    v41 = 0;\n
    v40 = 0;\n
    v42 = 0;\n
    while (true)\n
    {\n
        v10 = v42;\n
        if (v10 >= Dive::GetBinCount const(v46))\n
            break;\n
        if (DiveBin::GetDepth const(Dive::GetDiveBin const(v46, v42)) > v41)\n
            v41 = DiveBin::GetDepth const(Dive::GetDiveBin const(v46, v42));\n
        v40 = DiveBin::GetDepth const(Dive::GetDiveBin const(v46, v42)) + v40;\n
        v42 += 1;\n
    }\n
    v7 = v40;\n
    v48 = Dive::GetBinCount const(v46);\n
    v39 = (0 CONCAT v7) /m v48;\n
    v38 = DiveBin::GetTimeVal const(Dive::GetDiveBin const(v46, 0, v39 >> 32, v48));\n
    v8 = v46;\n
    v37 = DiveBin::GetTimeVal const(Dive::GetDiveBin const(v8, Dive::GetBinCount const(v46) - 1));\n
    v36 = v37 - v38;\n
    v35 = (0 CONCAT v36) /m 60;\n
    Date::__base_ctor__(&v34);\n
    Time::__base_ctor__(&v33);\n
    Date::FromUnixTimeval(&v34, v38);\n
    Time::FromUnixTimeval(&v33, v38);\n
    String::__base_ctor__(v32);\n
    String::__base_ctor__(&v31);\n
    String::__base_ctor__(v30);\n
    String::__base_ctor__(v29);\n
    String::__base_ctor__(&v28);\n
    String::__base_ctor__(&v27);\n
    String::__base_ctor__(&v26);\n
    String::__base_ctor__(&v25);\n
    String::__base_ctor__(&v24);\n
    String::__base_ctor__(&v23);\n
    cgc_printf(\"Dive Site: \", a1, v35 >> 32, 60, a4);\n
    ReadLine(v32);\n
    String::Trim(&v22, v32, 25);\n
    String::__base_dtor__(&v22);\n
    Date::GetString const(&v21, &v34);\n
    cgc_printf(\"Date (@s): \", String::c_str const(&v21), 25, 60, a4);\n
    String::__base_dtor__(&v21);\n
    ReadLine(&v31);\n
    String::Trim(&v20, &v31, 10);\n
    String::__base_dtor__(&v20);\n
    Time::GetString const(&v19, &v33);\n
    v49 = String::c_str const(&v19);\n
    cgc_printf(\"Time (@s): \", v49, 10, 60, a4);\n
    String::__base_dtor__(&v19);\n
    ReadLine(v30);\n
    String::Trim(&v18, v30, 8);\n
    String::__base_dtor__(&v18);\n
    cgc_printf(\"Location (area/city): \", v49, 8, 60, a4);\n
    ReadLine(v29);\n
    String::Trim(&v17, v29, 25);\n
    String::__base_dtor__(&v17);\n
    cgc_printf(\"Max Depth in ft (@d): \", v41, 25, 60, a4);\n
    ReadLine(&v28);\n
    cgc_printf(\"Avg Depth in ft (@d): \", v39, 25, 60, a4);\n
    ReadLine(&v27);\n
    cgc_printf(\"Dive Duration (mins) (@d): \", v35, 25, 60, a4);\n
    ReadLine(&v26);\n
    cgc_printf(\"O2 Percentage: \", a1, 25, 60, a4);\n
    ReadLine(&v25);\n
    cgc_printf(\"Pressure In (psi): \", a1, 25, 60, a4);\n
    ReadLine(&v24);\n
    cgc_printf(\"Pressure Out (psi): \", a1, 25, 60, a4);\n
    ReadLine(&v23);\n
    String::__ctor__(&v16, 4240516);\n
    v9 = String::operator!= const(&v31, &v16);\n
    String::__base_dtor__(&v16);\n
    if ((v9 & 1))\n
        Date::SetDate(&v34, &v31);\n
    String::__ctor__(&v15, 4240516);\n
    v6 = String::operator!= const(v30, &v15);\n
    String::__base_dtor__(&v15);\n
    if ((v6 & 1))\n
        Time::SetTime(&v33, v30);\n
    String::__ctor__(&v14, 4240516);\n
    v5 = String::operator!= const(&v28, &v14);\n
    String::__base_dtor__(&v14);\n
    if ((v5 & 1))\n
        v41 = StringToInt(&v28);\n
    String::__ctor__(&v13, 4240516);\n
    v4 = String::operator!= const(&v27, &v13);\n
    String::__base_dtor__(&v13);\n
    if ((v4 & 1))\n
        v39 = StringToInt(&v27);\n
    String::__ctor__(&v12, 4240516);\n
    v3 = String::operator!= const(&v26, &v12);\n
    String::__base_dtor__(&v12);\n
    if ((v3 & 1))\n
        v35 = StringToInt(&v26);\n
    Dive::SetDate(v46, &v34);\n
    Dive::SetTime(v46, &v33);\n
    Dive::SetDiveSite(v46, v32);\n
    Dive::SetLocation(v46, v29);\n
    Dive::SetMaxDepth(v46, v41);\n
    Dive::SetAvgDepth(v46, v39);\n
    Dive::SetDuration(v46, v35);\n
    v0 = v46;\n
    Dive::SetO2Percentage(v0, StringToInt(&v25));\n
    v1 = v46;\n
    Dive::SetStartPressure(v1, StringToInt(&v24));\n
    v2 = v46;\n
    Dive::SetEndPressure(v2, StringToInt(&v23));\n
    DLQueue::AddLast(a0, v46);\n
    String::__base_dtor__(&v23);\n
    String::__base_dtor__(&v24);\n
    String::__base_dtor__(&v25);\n
    String::__base_dtor__(&v26);\n
    String::__base_dtor__(&v27);\n
    String::__base_dtor__(&v28);\n
    String::__base_dtor__(v29);\n
    String::__base_dtor__(v30);\n
    String::__base_dtor__(&v31);\n
    String::__base_dtor__(v32);\n
    Time::__base_dtor__(&v33);\n
    Date::__base_dtor__(&v34);\n
    return 0;\n
}\n
", "4227061:sub_407ff5": null, "4227072:_ZN14CommandHandler12CmdEditDivesEv": "long long CommandHandler::CmdEditDives(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x190]\n
    unsigned long long v1;  // [bp-0x188]\n
    unsigned long long v2;  // [bp-0x180]\n
    unsigned long long v3;  // [bp-0x178]\n
    unsigned long long v4;  // [bp-0x170]\n
    unsigned long long v5;  // [bp-0x168]\n
    unsigned long v6;  // [bp-0x160]\n
    char v7;  // [bp-0x150]\n
    char v8;  // [bp-0x148]\n
    char v9;  // [bp-0x140]\n
    char v10;  // [bp-0x130]\n
    char v11;  // [bp-0x120]\n
    char v12;  // [bp-0x110]\n
    char v13;  // [bp-0x100]\n
    char v14;  // [bp-0xf0]\n
    char v15;  // [bp-0xe0]\n
    char v16;  // [bp-0xd0]\n
    char v17;  // [bp-0xc0]\n
    char v18;  // [bp-0xb0]\n
    char v19;  // [bp-0xa0]\n
    char v20;  // [bp-0x90]\n
    unsigned int v21[3];  // [bp-0x80]\n
    unsigned long long v22[2];  // [bp-0x70]\n
    unsigned long long v23[2];  // [bp-0x60]\n
    char v24;  // [bp-0x50]\n
    unsigned int v25;  // [bp-0x3c]\n
    unsigned long v26;  // [bp-0x38], Other Possible Types: unsigned long long\n
    unsigned int v27;  // [bp-0x30]\n
    unsigned int v28;  // [bp-0x2c]\n
    char v29;  // [bp-0x28]\n
    char v30;  // [bp-0x9]\n
\n
    if (!DLQueue::GetCount(a0))\n
    {\n
        cgc_printf(\"\\n
\\n
Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v30 = 0;\n
        return v30 & 1;\n
    }\n
    CommandHandler::PrintDiveList(a0);\n
    cgc_printf(\"\\n
Enter Dive # to edit: \", a1, a2, a3, a4);\n
    String::__base_ctor__(&v29);\n
    ReadLine(&v29);\n
    v28 = StringToInt(&v29);\n
    if (!v28)\n
    {\n
LABEL_4080ab:\n
        cgc_printf(\"Invalid dive number entered\\n
\", a1, a2, a3, a4);\n
        v30 = 0;\n
        v27 = 1;\n
    }\n
    else\n
    {\n
        v6 = v28;\n
        a3 = DLQueue::GetCount(a0);\n
        if (!(v6 <= a3))\n
            goto LABEL_4080ab;\n
        v25 = 1;\n
        for (v26 = DLQueue::GetFirst(a0); v26; v26 = DLItem::GetNext(v26))\n
        {\n
            if (v28 == v25)\n
                break;\n
            v25 += 1;\n
        }\n
        if (!v26)\n
        {\n
            cgc_printf(\"Invalid dive number entered\\n
\", a1, a2, a3, a4);\n
            v30 = 0;\n
            v27 = 1;\n
        }\n
        else\n
        {\n
            String::__base_ctor__(&v24);\n
            String::__base_ctor__(v23);\n
            String::__base_ctor__(v22);\n
            String::__base_ctor__(v21);\n
            String::__base_ctor__(&v20);\n
            String::__base_ctor__(&v19);\n
            String::__base_ctor__(&v18);\n
            String::__base_ctor__(&v17);\n
            String::__base_ctor__(&v16);\n
            String::__base_ctor__(&v15);\n
            cgc_printf(\"Editing dive number @d\\n
\", v28, a2, a3, a4);\n
            cgc_printf(\"Dive Site (@s): \", String::c_str const(Dive::GetDiveSite const(v26)), a2, a3, a4);\n
            ReadLine(&v24);\n
            String::Trim(&v14, &v24, 25);\n
            String::__base_dtor__(&v14);\n
            Date::GetString const(&v13, Dive::GetDate const(v26));\n
            cgc_printf(\"Date (@s): \", String::c_str const(&v13), 25, a3, a4);\n
            String::__base_dtor__(&v13);\n
            ReadLine(v23);\n
            String::Trim(&v12, v23, 10);\n
            String::__base_dtor__(&v12);\n
            Time::GetString const(&v11, Dive::GetTime const(v26));\n
            cgc_printf(\"Time (@s): \", String::c_str const(&v11), 10, a3, a4);\n
            String::__base_dtor__(&v11);\n
            ReadLine(v22);\n
            String::Trim(&v10, v22, 8);\n
            String::__base_dtor__(&v10);\n
            cgc_printf(\"Location (area/city) (@s): \", String::c_str const(Dive::GetLocation const(v26)), 8, a3, a4);\n
            ReadLine(v21);\n
            String::Trim(&v9, v21, 25);\n
            String::__base_dtor__(&v9);\n
            cgc_printf(\"Max Depth in ft (@d): \", Dive::GetMaxDepth const(v26), 25, a3, a4);\n
            ReadLine(&v20);\n
            cgc_printf(\"Avg Depth in ft (@d): \", Dive::GetAvgDepth const(v26), 25, a3, a4);\n
            ReadLine(&v19);\n
            cgc_printf(\"Dive Duration (mins) (@d): \", Dive::GetDuration const(v26), 25, a3, a4);\n
            ReadLine(&v18);\n
            cgc_printf(\"O2 Percentage (@d): \", Dive::GetO2Percentage const(v26), 25, a3, a4);\n
            ReadLine(&v17);\n
            cgc_printf(\"Pressure In (psi) (@d): \", Dive::GetStartPressure const(v26), 25, a3, a4);\n
            ReadLine(&v16);\n
            cgc_printf(\"Pressure Out (psi) (@d): \", Dive::GetEndPressure const(v26), 25, a3, a4);\n
            ReadLine(&v15);\n
            Date::__base_ctor__(&v8);\n
            Date::SetDate(&v8, v23);\n
            Time::__base_ctor__(&v7);\n
            Time::SetTime(&v7, v22);\n
            Dive::SetDate(v26, &v8);\n
            Dive::SetTime(v26, &v7);\n
            Dive::SetDiveSite(v26, &v24);\n
            Dive::SetLocation(v26, v21);\n
            v0 = v26;\n
            Dive::SetMaxDepth(v0, StringToInt(&v20));\n
            v1 = v26;\n
            Dive::SetAvgDepth(v1, StringToInt(&v19));\n
            v2 = v26;\n
            Dive::SetDuration(v2, StringToInt(&v18));\n
            v3 = v26;\n
            Dive::SetO2Percentage(v3, StringToInt(&v17));\n
            v4 = v26;\n
            Dive::SetStartPressure(v4, StringToInt(&v16));\n
            v5 = v26;\n
            Dive::SetEndPressure(v5, StringToInt(&v15));\n
            v30 = 0;\n
            v27 = 1;\n
            Time::__base_dtor__(&v7);\n
            Date::__base_dtor__(&v8);\n
            String::__base_dtor__(&v15);\n
            String::__base_dtor__(&v16);\n
            String::__base_dtor__(&v17);\n
            String::__base_dtor__(&v18);\n
            String::__base_dtor__(&v19);\n
            String::__base_dtor__(&v20);\n
            String::__base_dtor__(v21);\n
            String::__base_dtor__(v22);\n
            String::__base_dtor__(v23);\n
            String::__base_dtor__(&v24);\n
        }\n
    }\n
    String::__base_dtor__(&v29);\n
    return v30 & 1;\n
}\n
", "4228610:sub_408602": null, "4228624:_ZN14CommandHandler13PrintDiveListEv": "long long CommandHandler::PrintDiveList(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x58]\n
    unsigned int v3;  // [bp-0x50]\n
    char v4;  // [bp-0x40]\n
    char v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned long long v7;  // [bp-0x18]\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_printf(\"\\n
\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Dive# Date       Time     Dive Site                 Location                 \\n
\", a1, a2, a3, a4);\n
    v6 = 1;\n
    v9 = DLQueue::GetFirst(a0);\n
    while (true)\n
    {\n
        v7 = v9;\n
        if (!v7)\n
            break;\n
        v0 = v6;\n
        Date::GetString const(&v5, Dive::GetDate const(v7));\n
        *(&v1) = String::c_str const(&v5);\n
        Time::GetString const(&v4, Dive::GetTime const(v7));\n
        *(&v2) = String::c_str const(&v4);\n
        *(&v3) = String::c_str const(Dive::GetDiveSite const(v7));\n
        String::c_str const(Dive::GetLocation const(v7));\n
        cgc_printf(\"@4d: @-10s @-8s @-25s @-25s\\n
\", v0, *(&v1), *(&v2), *(&v3));\n
        String::__base_dtor__(&v4);\n
        String::__base_dtor__(&v5);\n
        v6 += 1;\n
        v9 = DLItem::GetNext(v7);\n
    }\n
    return v9;\n
}\n
", "4228898:sub_408722": null, "4228912:_ZN14CommandHandler16CmdPrintDiveLogsEv": "long long CommandHandler::CmdPrintDiveLogs(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x70]\n
    char v1;  // [bp-0x60]\n
    char v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned long v4;  // [bp-0x38], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    char v7;  // [bp-0x28]\n
    char v8;  // [bp-0x9]\n
    unsigned long v10;  // rax\n
\n
    if (!DLQueue::GetCount(a0))\n
    {\n
        cgc_printf(\"\\n
\\n
Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v8 = 0;\n
        return v8 & 1;\n
    }\n
    CommandHandler::PrintDiveList(a0, a1, a2, a3, a4);\n
    cgc_printf(\"\\n
Enter Dive # to display: \", a1, a2, a3, a4);\n
    String::__base_ctor__(&v7);\n
    ReadLine(&v7);\n
    v6 = StringToInt(&v7);\n
    if (!v6)\n
    {\n
LABEL_4087c9:\n
        cgc_printf(\"Invalid dive number entered\\n
\", a1, a2, a3, a4);\n
        v8 = 0;\n
        v5 = 1;\n
    }\n
    else\n
    {\n
        v0 = v6;\n
        a3 = DLQueue::GetCount(a0);\n
        if (!(v0 <= a3))\n
            goto LABEL_4087c9;\n
        v3 = 1;\n
        for (v4 = DLQueue::GetFirst(a0); v4; v4 = DLItem::GetNext(v4))\n
        {\n
            if (v6 == v3)\n
                break;\n
            v3 += 1;\n
        }\n
        if (!v4)\n
        {\n
            cgc_printf(\"Invalid dive number entered\\n
\", a1, a2, a3, a4);\n
            v8 = 0;\n
            v5 = 1;\n
        }\n
        else\n
        {\n
            cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
            Date::GetString const(&v2, Dive::GetDate const(v4));\n
            cgc_printf(\"          Date: @s\\n
\", String::c_str const(&v2), a2, a3, a4);\n
            String::__base_dtor__(&v2);\n
            Time::GetString const(&v1, Dive::GetTime const(v4));\n
            cgc_printf(\"          Time: @s\\n
\", String::c_str const(&v1), a2, a3, a4);\n
            String::__base_dtor__(&v1);\n
            cgc_printf(\"     Dive Site: @s\\n
\", String::c_str const(Dive::GetDiveSite const(v4)), a2, a3, a4);\n
            cgc_printf(\"      Location: @s\\n
\", String::c_str const(Dive::GetLocation const(v4)), a2, a3, a4);\n
            cgc_printf(\"     Max Depth: @d\\n
\", Dive::GetMaxDepth const(v4), a2, a3, a4);\n
            cgc_printf(\"     Avg Depth: @d\\n
\", Dive::GetAvgDepth const(v4), a2, a3, a4);\n
            cgc_printf(\"      Duration: @d\\n
\", Dive::GetDuration const(v4), a2, a3, a4);\n
            cgc_printf(\"    O2 Percent: @d\\n
\", Dive::GetO2Percentage const(v4), a2, a3, a4);\n
            cgc_printf(\"Start Pressure: @d\\n
\", Dive::GetStartPressure const(v4), a2, a3, a4);\n
            cgc_printf(\"  End Pressure: @d\\n
\", Dive::GetEndPressure const(v4), a2, a3, a4);\n
            v10 = Dive::GetBinCount const(v4);\n
            cgc_printf(\"     Bin Count: @d\\n
\", v10, a2, a3, a4);\n
            cgc_printf(\"\\n
\", v10, a2, a3, a4);\n
            v8 = 0;\n
            v5 = 1;\n
        }\n
    }\n
    String::__base_dtor__(&v7);\n
    return v8 & 1;\n
}\n
", "4229628:sub_4089fc": null, "4229632:_ZN14CommandHandler14CmdRemoveDivesEv": "extern unsigned int g_40b484;\n
\n
long long CommandHandler::CmdRemoveDives(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    char v2;  // [bp-0x59]\n
    unsigned int v3;  // [bp-0x4c]\n
    unsigned long v4;  // [bp-0x48], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x3c]\n
    char v7;  // [bp-0x38]\n
    char v8;  // [bp-0x28]\n
    char v9;  // [bp-0x9]\n
\n
    if (!DLQueue::GetCount(a0))\n
    {\n
        cgc_printf(\"\\n
\\n
Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v9 = 0;\n
        return v9 & 1;\n
    }\n
    CommandHandler::PrintDiveList(a0, a1, a2, a3, a4);\n
    cgc_printf(\"\\n
Enter Dive # to delete or blank to abort: \", a1, a2, a3, a4);\n
    String::__base_ctor__(&v8);\n
    ReadLine(&v8);\n
    String::__ctor__(&v7, 4240516);\n
    v2 = String::operator== const(&v8, &v7);\n
    String::__base_dtor__(&v7);\n
    if ((v2 & 1))\n
    {\n
        v9 = 0;\n
        v6 = 1;\n
    }\n
    else\n
    {\n
        v5 = StringToInt(&v8);\n
        if (!v5)\n
        {\n
LABEL_408ae2:\n
            cgc_printf(\"Invalid dive number entered\\n
\", &g_40b484, a2, a3, a4);\n
            v9 = 0;\n
            v6 = 1;\n
        }\n
        else\n
        {\n
            v1 = v5;\n
            a3 = DLQueue::GetCount(a0);\n
            if (!(v1 <= a3))\n
                goto LABEL_408ae2;\n
            v3 = 1;\n
            for (v4 = DLQueue::GetFirst(a0); v4; v4 = DLItem::GetNext(v4))\n
            {\n
                if (v5 == v3)\n
                    break;\n
                v3 += 1;\n
            }\n
            if (!v4)\n
            {\n
                cgc_printf(\"Invalid dive number entered\\n
\", &g_40b484, a2, a3, a4);\n
                v9 = 0;\n
                v6 = 1;\n
            }\n
            else\n
            {\n
                DLQueue::RemoveItem(a0, v4);\n
                v0 = v4;\n
                if (v0)\n
                {\n
                    Dive::__base_dtor__(v0);\n
                    operator delete(v0);\n
                }\n
                v9 = 0;\n
                v6 = 1;\n
            }\n
        }\n
    }\n
    String::__base_dtor__(&v8);\n
    return v9 & 1;\n
}\n
", "4230087:sub_408bc7": null, "4230096:_ZN14CommandHandler18CmdDiverStatisticsEv": "long long CommandHandler::CmdDiverStatistics(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    int tmp_6;  // tmp #6\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x9]\n
    unsigned long v7;  // rcx\n
    unsigned long v9;  // rcx\n
    unsigned long long v10;  // rax\n
\n
    if (!DLQueue::GetCount(a0))\n
    {\n
        cgc_printf(\"\\n
\\n
No dives are logged\\n
\", a1, a2, a3, a4);\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        v3 = 0;\n
        for (v2 = DLQueue::GetFirst(a0); v2; v2 = DLItem::GetNext(v2))\n
        {\n
            v4 = Dive::GetMaxDepth const(v2) + v4;\n
            v3 = Dive::GetDuration const(v2) + v3;\n
        }\n
        cgc_printf(\"\\n
\\n
\", a1, a2, a3, a4);\n
        cgc_printf(\"Dives logged: @d\\n
\", DLQueue::GetCount(a0), a2, a3, a4);\n
        v0 = v4;\n
        v7 = DLQueue::GetCount(a0);\n
        cgc_printf(\"Average Max Depth: @d\\n
\", (0 CONCAT v0) /m v7, tmp_6 >> 64, v7, a4);\n
        v1 = v3;\n
        v9 = DLQueue::GetCount(a0);\n
        v10 = v1;\n
        tmp_6 = (0 CONCAT v10) /m v9;\n
        cgc_printf(\"Average Dive Length: @d\\n
\", (0 CONCAT v10) /m v9, tmp_6 >> 64, v9, a4);\n
    }\n
    v5 = 0;\n
    return v5 & 1;\n
}\n
", "4230388:sub_408cf4": null, "4230400:_ZN14CommandHandler18CmdExitApplicationEv": "long long CommandHandler::CmdExitApplication(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    return 1;\n
}\n
", "4230417:sub_408d11": null, "4230432:_ZN14CommandHandler17PrintCommandTableEPNS_16COMMAND_FUNCTIONE": "long long CommandHandler::PrintCommandTable(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_47;  // tmp #47\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long long v3;  // rdx\n
    unsigned long v4;  // rcx\n
    unsigned long v5;  // rdx\n
\n
    v1 = a0;\n
    cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0 * 272;\n
        v4 = *((a1 + v3 + 0x100));\n
        v5 = *((a1 + v3 + 264));\n
        tmp_47 = v4;\n
        *(&v5) = v5;\n
        *(&v4) = v4 & *(&v5);\n
        if (!((tmp_47 | *(&v4)) & 1))\n
            break;\n
        cgc_printf(\"@s - @s\\n
\", a1 + v0 * 272, a1 + v0 * 272 + 128, v4, a4);\n
        v0 += 1;\n
    }\n
    return cgc_printf(\":\", a1, v5, v4, a4);\n
}\n
", "4230626:sub_408de2": null, "4230640:_ZN14CommandHandler10ParserLoopEv": "extern void g_40d010;\n
\n
long long CommandHandler::ParserLoop(unsigned int a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct struct_0 **v0;  // [bp-0xa20], Other Possible Types: unsigned long\n
    struct struct_0 **v1;  // [bp-0xa18]\n
    unsigned long long *v2;  // [bp-0xa10]\n
    char v3;  // [bp-0xa01]\n
    char v4;  // [bp-0x9f8]\n
    char v5;  // [bp-0x9e8]\n
    char v6;  // [bp-0x9d8]\n
    unsigned int v7;  // [bp-0x9c4]\n
    char v8;  // [bp-0x9c0]\n
    char v9;  // [bp-0x9a9]\n
    char v10;  // [bp-0x9a8]\n
    char v11;  // [bp-0x8a8]\n
    char v12;  // [bp-0x8a0]\n
    struct struct_0 **v14;  // edx, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v15;  // rax, Other Possible Types: unsigned long long\n
    struct struct_0 **v16;  // rax\n
    unsigned long v17;  // rdx\n
\n
    v14 = 2448;\n
    v15 = memcpy(&v10, \"C\", 2448);\n
    v9 = 0;\n
    while (true)\n
    {\n
        *(&v15) = v9 ^ 255;\n
        if (!((v9 ^ 255) & 1))\n
            break;\n
        CommandHandler::PrintCommandTable(a0, &v10, v14, a3, a4);\n
        String::__base_ctor__(&v8);\n
        ReadLine(&v8);\n
        v7 = 0;\n
        while (true)\n
        {\n
            v16 = v7 * 272;\n
            a3 = *((&v11 + v16));\n
            if (!((a3 | a3 & *((&v12 + v16))) & 1))\n
                break;\n
            String::lower const(&v6, &v8);\n
            String::__ctor__(&v4, &(&v10)[272 * v7]);\n
            String::lower const(&v5, &v4);\n
            v3 = String::operator== const(&v6, &v5);\n
            String::__base_dtor__(&v5);\n
            String::__base_dtor__(&v4);\n
            String::__base_dtor__(&v6);\n
            if (!(v3 & 1))\n
            {\n
                v7 += 1;\n
            }\n
            else\n
            {\n
                v17 = v7 * 272;\n
                v1 = *(&(&v11)[v17]);\n
                v14 = *(&(&v12)[v17]);\n
                a3 = a0 + v14;\n
                v2 = a3;\n
                if ((v1 & 1))\n
                {\n
                    a3 = v1 + 1;\n
                    v0 = *((*(v2) + a3));\n
                }\n
                else\n
                {\n
                    v0 = v1;\n
                }\n
                if ((v0(v2) & 1))\n
                    v9 = 1;\n
                break;\n
            }\n
        }\n
        v15 = String::__base_dtor__(&v8);\n
    }\n
    return v15;\n
}\n
", "4231201:sub_409021": null, "4231216:_ZN9DiverInfoC2Ev": "long long DiverInfo::__base_ctor__(unsigned long long a0[2])\n
{\n
    String::__base_ctor__(a0);\n
    String::__base_ctor__(a0 + 1);\n
    String::__base_ctor__(a0 + 2);\n
    String::__base_ctor__(a0 + 3);\n
    String::__base_ctor__(a0 + 4);\n
    String::__base_ctor__(a0 + 5);\n
    String::__base_ctor__(a0 + 6);\n
    String::__base_ctor__(a0 + 7);\n
    return String::__base_ctor__(a0 + 8);\n
}\n
", "4231354:sub_4090ba": null, "4231360:_ZN9DiverInfoD2Ev": "long long DiverInfo::__base_dtor__(void* a0)\n
{\n
    String::__base_dtor__(a0 + 128);\n
    String::__base_dtor__(a0 + 112);\n
    String::__base_dtor__(a0 + 96);\n
    String::__base_dtor__(a0 + 80);\n
    String::__base_dtor__(a0 + 64);\n
    String::__base_dtor__(a0 + 48);\n
    String::__base_dtor__(a0 + 32);\n
    String::__base_dtor__(a0 + 16);\n
    return String::__base_dtor__(a0);\n
}\n
", "4231498:sub_40914a": null, "4231504:_ZNK9DiverInfo12GetFirstNameEv": "long long DiverInfo::GetFirstName const(unsigned long a0)\n
{\n
    return a0;\n
}\n
", "4231518:sub_40915e": null, "4231520:_ZNK9DiverInfo11GetLastNameEv": "long long DiverInfo::GetLastName const(unsigned long a0)\n
{\n
    return a0 + 16;\n
}\n
", "4231538:sub_409172": null, "4231552:_ZNK9DiverInfo9GetStreetEv": "long long DiverInfo::GetStreet const(unsigned long a0)\n
{\n
    return a0 + 32;\n
}\n
", "4231570:sub_409192": null, "4231584:_ZNK9DiverInfo7GetCityEv": "long long DiverInfo::GetCity const(unsigned long a0)\n
{\n
    return a0 + 48;\n
}\n
", "4231602:sub_4091b2": null, "4231616:_ZNK9DiverInfo8GetStateEv": "long long DiverInfo::GetState const(unsigned long a0)\n
{\n
    return a0 + 64;\n
}\n
", "4231634:sub_4091d2": null, "4231648:_ZNK9DiverInfo10GetZipCodeEv": "long long DiverInfo::GetZipCode const(unsigned long a0)\n
{\n
    return a0 + 80;\n
}\n
", "4231666:sub_4091f2": null, "4231680:_ZNK9DiverInfo14GetPhoneNumberEv": "long long DiverInfo::GetPhoneNumber const(unsigned long a0)\n
{\n
    return a0 + 96;\n
}\n
", "4231698:sub_409212": null, "4231712:_ZNK9DiverInfo13GetPadiNumberEv": "long long DiverInfo::GetPadiNumber const(unsigned long a0)\n
{\n
    return a0 + 112;\n
}\n
", "4231730:sub_409232": null, "4231744:_ZNK9DiverInfo11GetPadiDateEv": "long long DiverInfo::GetPadiDate const(unsigned long a0)\n
{\n
    return a0 + 128;\n
}\n
", "4231764:sub_409254": null, "4231776:_ZN9DiverInfo12SetFirstNameERK6String": "long long DiverInfo::SetFirstName(void* a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0, a1);\n
}\n
", "4231811:sub_409283": null, "4231824:_ZN9DiverInfo11SetLastNameERK6String": "long long DiverInfo::SetLastName(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 16, a1);\n
}\n
", "4231863:sub_4092b7": null, "4231872:_ZN9DiverInfo9SetStreetERK6String": "long long DiverInfo::SetStreet(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 32, a1);\n
}\n
", "4231911:sub_4092e7": null, "4231920:_ZN9DiverInfo7SetCityERK6String": "long long DiverInfo::SetCity(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 48, a1);\n
}\n
", "4231959:sub_409317": null, "4231968:_ZN9DiverInfo8SetStateERK6String": "long long DiverInfo::SetState(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 64, a1);\n
}\n
", "4232007:sub_409347": null, "4232016:_ZN9DiverInfo10SetZipCodeERK6String": "long long DiverInfo::SetZipCode(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 80, a1);\n
}\n
", "4232055:sub_409377": null, "4232064:_ZN9DiverInfo14SetPhoneNumberERK6String": "long long DiverInfo::SetPhoneNumber(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 96, a1);\n
}\n
", "4232103:sub_4093a7": null, "4232112:_ZN9DiverInfo13SetPadiNumberERK6String": "long long DiverInfo::SetPadiNumber(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 112, a1);\n
}\n
", "4232151:sub_4093d7": null, "4232160:_ZN9DiverInfo11SetPadiDateERK6String": "long long DiverInfo::SetPadiDate(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 128, a1);\n
}\n
", "4232202:sub_40940a": null, "4232208:_ZN4DiveC2Ev": "typedef struct struct_0 {\n
    char padding_0[1040];\n
    unsigned int field_410;\n
} struct_0;\n
\n
long long Dive::__base_ctor__(struct_0 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    struct_0 *v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned long long v7;  // rax\n
    struct_0 *v8;  // rdi\n
\n
    v5 = a0;\n
    v2 = v5;\n
    DLItem::__base_ctor__(v2);\n
    v7 = &v2->padding_0[16];\n
    v3 = v7 + 0x400;\n
    v4 = v7;\n
    do\n
    {\n
        v0 = v4;\n
        DiveBin::__base_ctor__(v0);\n
        v1 = v0 + 8;\n
        v4 = v1;\n
    } while (v1 != v3);\n
    v8 = v2;\n
    v8->field_410 = 0;\n
    String::__base_ctor__(&v8[1].padding_0[4]);\n
    Date::__base_ctor__(&v2[1].padding_0[20]);\n
    Time::__base_ctor__(&v2[1].padding_0[24]);\n
    return String::__base_ctor__(&v2[1].padding_0[28]);\n
}\n
", "4232381:sub_4094bd": null, "4232384:_ZN4DateC2Ev": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Date::__base_ctor__(struct_0 *a0)\n
{\n
    a0->field_0 = 1;\n
    a0->field_1 = 1;\n
    a0->field_2 = 1900;\n
    return a0;\n
}\n
", "4232411:sub_4094db": null, "4232416:_ZN4TimeC2Ev": "long long Time::__base_ctor__(char a0[3])\n
{\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4232441:sub_4094f9": null, "4232448:_ZN4Dive7SetDateERK4Date": "typedef struct struct_0 {\n
    char padding_0[1064];\n
    unsigned int field_428;\n
} struct_0;\n
\n
long long Dive::SetDate(struct_0 *a0, unsigned int *a1)\n
{\n
    a0->field_428 = *(a1);\n
    return a0;\n
}\n
", "4232478:sub_40951e": null, "4232480:_ZN4Dive7SetTimeERK4Time": "typedef struct struct_0 {\n
    char padding_0[1068];\n
    unsigned short field_42c;\n
    char field_42e;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    char field_2;\n
} struct_1;\n
\n
long long Dive::SetTime(struct_0 *a0, struct_1 *a1)\n
{\n
    a0->field_42c = a1->field_0;\n
    a0->field_42e = a1->field_2;\n
    return a0;\n
}\n
", "4232521:sub_409549": null, "4232528:_ZN4Dive11SetDiveSiteERK6String": "long long Dive::SetDiveSite(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 1048, a1);\n
}\n
", "4232570:sub_40957a": null, "4232576:_ZN4Dive11SetLocationERK6String": "long long Dive::SetLocation(unsigned long a0, unsigned int a1[3])\n
{\n
    return String::operator=(a0 + 1072, a1);\n
}\n
", "4232618:sub_4095aa": null, "4232624:_ZN4Dive11SetMaxDepthEj": "typedef struct struct_0 {\n
    char padding_0[1088];\n
    unsigned int field_440;\n
} struct_0;\n
\n
long long Dive::SetMaxDepth(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_440 = a1;\n
    return a0;\n
}\n
", "4232650:sub_4095ca": null, "4232656:_ZN4Dive11SetAvgDepthEj": "typedef struct struct_0 {\n
    char padding_0[1092];\n
    unsigned int field_444;\n
} struct_0;\n
\n
long long Dive::SetAvgDepth(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_444 = a1;\n
    return a0;\n
}\n
", "4232682:sub_4095ea": null, "4232688:_ZN4Dive11SetDurationEj": "typedef struct struct_0 {\n
    char padding_0[1096];\n
    unsigned int field_448;\n
} struct_0;\n
\n
long long Dive::SetDuration(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_448 = a1;\n
    return a0;\n
}\n
", "4232714:sub_40960a": null, "4232720:_ZN4Dive15SetO2PercentageEj": "typedef struct struct_0 {\n
    char padding_0[1100];\n
    unsigned int field_44c;\n
} struct_0;\n
\n
long long Dive::SetO2Percentage(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_44c = a1;\n
    return a0;\n
}\n
", "4232746:sub_40962a": null, "4232752:_ZN4Dive16SetStartPressureEj": "typedef struct struct_0 {\n
    char padding_0[1104];\n
    unsigned int field_450;\n
} struct_0;\n
\n
long long Dive::SetStartPressure(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_450 = a1;\n
    return a0;\n
}\n
", "4232778:sub_40964a": null, "4232784:_ZN4Dive14SetEndPressureEj": "typedef struct struct_0 {\n
    char padding_0[1108];\n
    unsigned int field_454;\n
} struct_0;\n
\n
long long Dive::SetEndPressure(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_454 = a1;\n
    return a0;\n
}\n
", "4232810:sub_40966a": null, "4232816:_ZN4TimeD2Ev": "long long Time::__base_dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4232826:sub_40967a": null, "4232832:_ZN4DateD2Ev": "long long Date::__base_dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4232842:sub_40968a": null, "4232848:_ZNK4Dive11GetBinCountEv": "typedef struct struct_0 {\n
    char padding_0[1040];\n
    unsigned int field_410;\n
} struct_0;\n
\n
long long Dive::GetBinCount const(struct_0 *a0)\n
{\n
    return a0->field_410;\n
}\n
", "4232868:sub_4096a4": null, "4232880:_ZNK4Dive10GetDiveBinEj": "long long Dive::GetDiveBin const(unsigned long a0, unsigned long a1)\n
{\n
    return a0 + 16 + a1 * 8;\n
}\n
", "4232911:sub_4096cf": null, "4232912:_ZNK7DiveBin8GetDepthEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
long long DiveBin::GetDepth const(struct_0 *a0)\n
{\n
    return a0->field_4;\n
}\n
", "4232929:sub_4096e1": null, "4232944:_ZNK7DiveBin10GetTimeValEv": "long long DiveBin::GetTimeVal const(unsigned int *a0)\n
{\n
    return *(a0);\n
}\n
", "4232960:_ZN7DLQueue8GetCountEv": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long DLQueue::GetCount(struct_0 *a0)\n
{\n
    return a0->field_10;\n
}\n
", "4232978:sub_409712": null, "4232992:_ZN7DLQueue8GetFirstEv": "long long DLQueue::GetFirst(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4233009:sub_409731": null, "4233024:_ZN6DLItem7GetNextEv": "long long DLItem::GetNext(unsigned long long *a0)\n
{\n
    return *(a0);\n
}\n
", "4233041:sub_409751": null, "4233056:_ZNK4Dive11GetDiveSiteEv": "long long Dive::GetDiveSite const(unsigned long a0)\n
{\n
    return a0 + 1048;\n
}\n
", "4233076:sub_409774": null, "4233088:_ZNK4Dive7GetDateEv": "long long Dive::GetDate const(unsigned long a0)\n
{\n
    return a0 + 1064;\n
}\n
", "4233108:sub_409794": null, "4233120:_ZNK4Dive7GetTimeEv": "long long Dive::GetTime const(unsigned long a0)\n
{\n
    return a0 + 1068;\n
}\n
", "4233140:sub_4097b4": null, "4233152:_ZNK4Dive11GetLocationEv": "long long Dive::GetLocation const(unsigned long a0)\n
{\n
    return a0 + 1072;\n
}\n
", "4233172:sub_4097d4": null, "4233184:_ZNK4Dive11GetMaxDepthEv": "typedef struct struct_0 {\n
    char padding_0[1088];\n
    unsigned int field_440;\n
} struct_0;\n
\n
long long Dive::GetMaxDepth const(struct_0 *a0)\n
{\n
    return a0->field_440;\n
}\n
", "4233204:sub_4097f4": null, "4233216:_ZNK4Dive11GetAvgDepthEv": "typedef struct struct_0 {\n
    char padding_0[1092];\n
    unsigned int field_444;\n
} struct_0;\n
\n
long long Dive::GetAvgDepth const(struct_0 *a0)\n
{\n
    return a0->field_444;\n
}\n
", "4233236:sub_409814": null, "4233248:_ZNK4Dive11GetDurationEv": "typedef struct struct_0 {\n
    char padding_0[1096];\n
    unsigned int field_448;\n
} struct_0;\n
\n
long long Dive::GetDuration const(struct_0 *a0)\n
{\n
    return a0->field_448;\n
}\n
", "4233268:sub_409834": null, "4233280:_ZNK4Dive15GetO2PercentageEv": "typedef struct struct_0 {\n
    char padding_0[1100];\n
    unsigned int field_44c;\n
} struct_0;\n
\n
long long Dive::GetO2Percentage const(struct_0 *a0)\n
{\n
    return a0->field_44c;\n
}\n
", "4233300:sub_409854": null, "4233312:_ZNK4Dive16GetStartPressureEv": "typedef struct struct_0 {\n
    char padding_0[1104];\n
    unsigned int field_450;\n
} struct_0;\n
\n
long long Dive::GetStartPressure const(struct_0 *a0)\n
{\n
    return a0->field_450;\n
}\n
", "4233332:sub_409874": null, "4233344:_ZNK4Dive14GetEndPressureEv": "typedef struct struct_0 {\n
    char padding_0[1108];\n
    unsigned int field_454;\n
} struct_0;\n
\n
long long Dive::GetEndPressure const(struct_0 *a0)\n
{\n
    return a0->field_454;\n
}\n
", "4233364:sub_409894": null, "4233376:_ZN4DiveD2Ev": "long long Dive::__base_dtor__(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
\n
    String::__base_dtor__(a0 + 1072);\n
    Time::__base_dtor__(a0 + 1068);\n
    Date::__base_dtor__(a0 + 1064);\n
    String::__base_dtor__(a0 + 1048);\n
    v1 = a0 + 16;\n
    v2 = v1 + 0x400;\n
    do\n
    {\n
        v0 = v2 - 8;\n
        DiveBin::__base_dtor__(v0);\n
        v2 = v0;\n
    } while (v2 != v1);\n
    return DLItem::__base_dtor__(a0);\n
}\n
", "4233531:sub_40993b": null, "4233536:_ZN6DLItemC2Ev": "long long DLItem::__base_ctor__(unsigned long long a0[2])\n
{\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    return a0;\n
}\n
", "4233565:sub_40995d": null, "4233568:_ZN7DiveBinC2Ev": "long long DiveBin::__base_ctor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4233578:sub_40996a": null, "4233584:_ZN7DiveBinD2Ev": "long long DiveBin::__base_dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4233594:sub_40997a": null, "4233600:_ZN6DLItemD2Ev": "long long DLItem::__base_dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4233610:sub_40998a": null, "4233616:_Z8ReadLineR6String": "long long ReadLine(void* a0)\n
{\n
    char v0;  // [bp-0x218]\n
\n
    cgc_getline(&v0, 0x200);\n
    return String::SetString(a0, &v0);\n
}\n
", "4233673:sub_4099c9": null, "4233680:_Z10recv_bytesPhm": "long long recv_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v1 >= a1)\n
            return v1;\n
        if (cgc_receive(a0, a1, v4, v5))\n
            return v1;\n
        if (v0 != 1)\n
            return v1;\n
        v1 += 1;\n
    }\n
}\n
", "4233812:sub_409a54": null, "4233824:_Z10ReadUint32Rj": "long long ReadUint32(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = 1;\n
    v2 = recv_bytes(a0, 4);\n
    if (v2 != 4)\n
    {\n
        v2 = cgc__terminate(a0);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4233884:sub_409a9c": null, "4233888:_Z11StringToIntRK6String": "long long StringToInt(unsigned long long a0[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x20]\n
\n
    String::StripSpaces const(&v1, a0);\n
    v0 = cgc_atoi(String::c_str const(&v1));\n
    String::__base_dtor__(&v1);\n
    return v0;\n
}\n
", "4233951:sub_409adf": null, "4233952:_ZN4Date7SetDateEPKc": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Date::SetDate(struct_0 *a0, char *a1)\n
{\n
    unsigned short v0;  // [bp-0x24]\n
    char v1;  // [bp-0x22]\n
    char v2;  // [bp-0x21]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char v4;  // [bp-0x9]\n
\n
    if (!v3)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    for (v3 = a1; cgc_isspace(*(v3)); v3 += 1);\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!cgc_isdigit(*(v3)))\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    v2 = *(v3) - 48;\n
    v3 += 1;\n
    if (cgc_isdigit(*(v3)))\n
    {\n
        v2 *= 10;\n
        v2 += *(v3) - 48;\n
        v3 += 1;\n
    }\n
    if (*(v3) != 47)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    if (v2 && v2 <= 12)\n
    {\n
        v3 += 1;\n
        if (!cgc_isdigit(*(v3)))\n
        {\n
            v4 = 0;\n
            return v4 & 1;\n
        }\n
        v1 = *(v3) - 48;\n
        v3 += 1;\n
        if (cgc_isdigit(*(v3)))\n
        {\n
            v1 *= 10;\n
            v1 += *(v3) - 48;\n
            v3 += 1;\n
        }\n
        if (*(v3) != 47)\n
        {\n
            v4 = 0;\n
            return v4 & 1;\n
        }\n
        if (v1 && v1 <= 31)\n
        {\n
            v3 += 1;\n
            if (!cgc_isdigit(*(v3)))\n
            {\n
                v4 = 0;\n
                return v4 & 1;\n
            }\n
            v0 = *(v3) - 48;\n
            v3 += 1;\n
            if (!cgc_isdigit(*(v3)))\n
            {\n
                v4 = 0;\n
                return v4 & 1;\n
            }\n
            v0 *= 10;\n
            v0 += *(v3) - 48;\n
            v3 += 1;\n
            if (!cgc_isdigit(*(v3)))\n
            {\n
                if (v0 < 31)\n
                    v0 += 2000;\n
                else\n
                    v0 += 1900;\n
                a0->field_1 = v2;\n
                a0->field_0 = v1;\n
                a0->field_2 = v0;\n
                v4 = 1;\n
                return v4 & 1;\n
            }\n
            else\n
            {\n
                v0 *= 10;\n
                v0 += *(v3) - 48;\n
                v3 += 1;\n
                if (!cgc_isdigit(*(v3)))\n
                {\n
                    v4 = 0;\n
                    return v4 & 1;\n
                }\n
                v0 *= 10;\n
                v0 += *(v3) - 48;\n
                a0->field_1 = v2;\n
                a0->field_0 = v1;\n
                a0->field_2 = v0;\n
                v4 = 1;\n
                return v4 & 1;\n
            }\n
        }\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    v4 = 0;\n
    return v4 & 1;\n
}\n
", "4234827:sub_409e4b": null, "4234832:_ZN4Date7SetDateERK6String": "long long Date::SetDate(void* a0, void* a1)\n
{\n
    return Date::SetDate(a0, String::c_str const(a1)) & 1;\n
}\n
", "4234888:sub_409e88": null, "4234896:_ZNK4Date9GetStringEv": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Date::GetString const(void* a0, struct_0 *a1)\n
{\n
    char v0;  // [bp-0x218]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    cgc_sprintf(&v0, \"@d/@d/@d\", a1->field_1, a1->field_0, a1->field_2);\n
    String::__ctor__(a0, &v0);\n
    return a0;\n
}\n
", "4235004:sub_409efc": null, "4235008:_ZN4Date15FromUnixTimevalEj": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
} struct_0;\n
\n
long long Date::FromUnixTimeval(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
\n
    v8 = (0 CONCAT a1) /m 86400;\n
    v7 = 1970;\n
    v6 = 0;\n
    v5 = 1970;\n
    for (v4 = 0; v4 <= v8; v5 += 1)\n
    {\n
        v7 = v5;\n
        v6 = v4;\n
        v4 += 365;\n
        if ((IsLeapYear(v5) & 1))\n
            v4 += 1;\n
    }\n
    a0->field_2 = v7;\n
    v3 = v8 - v6;\n
    v2 = 1;\n
    v1 = 0;\n
    v0 = 1;\n
    for (v4 = 0; v4 <= v3; v0 += 1)\n
    {\n
        v2 = v0;\n
        v1 = v4;\n
        v4 = DaysInMonth(v0, a0->field_2) + v4;\n
    }\n
    a0->field_1 = v2;\n
    a0->field_0 = v3 - v1 + 1;\n
    return a0;\n
}\n
", "4235302:sub_40a026": null, "4235312:_ZN4Time7SetTimeEPKc": "long long Time::SetTime(char a0[3], char *a1)\n
{\n
    char v0;  // [bp-0x23]\n
    char v1;  // [bp-0x22]\n
    char v2;  // [bp-0x21]\n
    char *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char v4;  // [bp-0x9]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    for (v0 = 0; cgc_isspace(*(v3)); v3 += 1);\n
    if (!cgc_isdigit(*(v3)))\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    v2 = *(v3) - 48;\n
    v3 += 1;\n
    if (cgc_isdigit(*(v3)))\n
    {\n
        v2 *= 10;\n
        v2 += *(v3) - 48;\n
        v3 += 1;\n
    }\n
    if (*(v3) != 58)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    v3 += 1;\n
    if (v2 >= 24)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    else if (cgc_isdigit(*(v3)))\n
    {\n
        v1 = *(v3) - 48;\n
        v3 += 1;\n
        if (cgc_isdigit(*(v3)))\n
        {\n
            v1 *= 10;\n
            v1 += *(v3) - 48;\n
            v3 += 1;\n
        }\n
        if (*(v3) != 58)\n
        {\n
            v4 = 0;\n
            return v4 & 1;\n
        }\n
        v3 += 1;\n
        if (v1 >= 60)\n
        {\n
            v4 = 0;\n
            return v4 & 1;\n
        }\n
        else if (cgc_isdigit(*(v3)))\n
        {\n
            v0 = *(v3) - 48;\n
            v3 += 1;\n
            if (cgc_isdigit(*(v3)))\n
            {\n
                v0 *= 10;\n
                v0 += *(v3) - 48;\n
                v3 += 1;\n
            }\n
            if (v0 >= 60)\n
            {\n
                v4 = 0;\n
                return v4 & 1;\n
            }\n
            a0[0] = v2;\n
            a0[1] = v1;\n
            a0[2] = v0;\n
            v4 = 1;\n
            return v4 & 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4 & 1;\n
        }\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
}\n
", "4235956:sub_40a2b4": null, "4235968:_ZN4Time7SetTimeERK6String": "long long Time::SetTime(char a0[3], void* a1)\n
{\n
    return Time::SetTime(a0, String::c_str const(a1)) & 1;\n
}\n
", "4236024:sub_40a2f8": null, "4236032:_ZNK4Time9GetStringEv": "long long Time::GetString const(void* a0, char a1[3])\n
{\n
    char v0;  // [bp-0x218]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v1 = a0;\n
    cgc_sprintf(&v0, \"@02d:@02d:@02d\", a1[0], a1[1], a1[2]);\n
    String::__ctor__(a0, &v0);\n
    return a0;\n
}\n
", "4236140:sub_40a36c": null, "4236144:_ZN4Time15FromUnixTimevalEj": "long long Time::FromUnixTimeval(char a0[3], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
\n
    v3 = (0 CONCAT a1) /m 86400 >> 32;\n
    v2 = (0 CONCAT v3) /m 3600;\n
    v1 = (0 CONCAT v3) /m 60 >> 32;\n
    v0 = (0 CONCAT (0 CONCAT v3) /m 60) /m 60 >> 32;\n
    a0[0] = v2;\n
    a0[1] = v0;\n
    a0[2] = v1;\n
    return a0;\n
}\n
", "4236255:sub_40a3df": null, "4236256:_Z10IsLeapYeart": "long long IsLeapYear(unsigned long a0)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if ((a0 >> 31 CONCAT a0) /m 400 >> 32 && !(a0 >> 31 CONCAT a0) /m 100 >> 32)\n
        goto LABEL_40a433;\n
    if (!(a0 >> 31 CONCAT a0) /m 4 >> 32)\n
    {\n
        v0 = 1;\n
        return v0 & 1;\n
    }\n
LABEL_40a433:\n
    v0 = 0;\n
    return v0 & 1;\n
}\n
", "4236353:sub_40a441": null, "4236368:_Z11DaysInMonthht": "long long DaysInMonth(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (a0 != 2)\n
    {\n
        if (a0 != 1 && a0 != 3 && a0 != 5 && a0 != 7 && a0 != 8 && a0 != 10 && a0 != 12)\n
        {\n
            if (a0 != 4 && a0 != 6 && a0 != 9 && a0 != 11)\n
            {\n
                v0 = 0;\n
                return v0;\n
            }\n
            v0 = 30;\n
            return v0;\n
        }\n
        v0 = 31;\n
        return v0;\n
    }\n
    else if (!(IsLeapYear(a1) & 1))\n
    {\n
        v0 = 28;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 29;\n
        return v0;\n
    }\n
}\n
", "4236617:sub_40a549": null, "4236624:_ZN4Dive10AddDiveBinEjj": "typedef struct struct_0 {\n
    char padding_0[1040];\n
    unsigned int field_410;\n
} struct_0;\n
\n
long long Dive::AddDiveBin(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = a0->field_410;\n
    DiveBin::SetTimeVal(&a0->padding_0[16 + 8 * v0], a1);\n
    DiveBin::SetDepth(&a0->padding_0[16 + 8 * v0], a2);\n
    a0->field_410 = a0->field_410 + 1;\n
    return a0->field_410;\n
}\n
", "4236738:sub_40a5c2": null, "4236752:_ZN7DiveBin10SetTimeValEj": "long long DiveBin::SetTimeVal(unsigned int *a0, unsigned long a1)\n
{\n
    *(a0) = a1;\n
    return a0;\n
}\n
", "4236774:sub_40a5e6": null, "4236784:_ZN7DiveBin8SetDepthEj": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
long long DiveBin::SetDepth(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_4 = a1;\n
    return a0;\n
}\n
", "4236807:sub_40a607": null, "4236816:_ZN7DLQueueC2Ev": "long long DLQueue::__base_ctor__(unsigned long long a0[3])\n
{\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    a0[2] = 0;\n
    return a0;\n
}\n
", "4236853:sub_40a635": null, "4236864:_ZN7DLQueueD2Ev": "long long DLQueue::__base_dtor__(unsigned long long a0)\n
{\n
    return DLQueue::DeleteAll(a0);\n
}\n
", "4236891:sub_40a65b": null, "4236896:_ZN7DLQueue9DeleteAllEv": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long DLQueue::DeleteAll(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x30]\n
    struct struct_0 **v1;  // [bp-0x20]\n
    struct struct_0 **v2;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v2 = &a0->field_0->field_0;\n
    for (v1 = 0; v2; v2 = v1)\n
    {\n
        v1 = &*(v2)->field_0;\n
        v0 = v2;\n
        if (v0)\n
        {\n
            DLItem::__base_dtor__(v0);\n
            operator delete(v0);\n
        }\n
    }\n
    a0->field_10 = 0;\n
    a0->field_8 = 0;\n
    a0->field_0 = 0;\n
    return a0;\n
}\n
", "4237040:_ZN7DLQueue8AddFirstEP6DLItem": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long DLQueue::AddFirst(struct_1 *a0, unsigned long long a1[2])\n
{\n
    struct_1 *v0;  // [bp-0x20]\n
    unsigned long v2;  // rax\n
    struct_1 *v3;  // rax\n
    struct_1 *v4;  // rax\n
\n
    v0 = a0;\n
    if (!a1)\n
        return a0;\n
    if (!v0->field_0)\n
    {\n
        v3 = v0;\n
        a1[0] = 0;\n
        a1[1] = 0;\n
        v3->field_0 = &a1[0];\n
        v3->field_8 = a1;\n
    }\n
    else\n
    {\n
        v4 = v0;\n
        a1[0] = v4->field_0;\n
        a1[1] = 0;\n
        v4->field_0->field_8 = a1;\n
        v4->field_0 = &a1[0];\n
    }\n
    v2 = v0;\n
    *((v2 + 16)) = *((v2 + 16)) + 1;\n
    return v0;\n
}\n
", "4237199:sub_40a78f": null, "4237200:_ZN7DLQueue7AddLastEP6DLItem": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long DLQueue::AddLast(struct_0 *a0, unsigned long long a1[2])\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (!a1)\n
        return a0;\n
    if (!v0->field_8)\n
    {\n
        v3 = v0;\n
        a1[0] = 0;\n
        a1[1] = 0;\n
        v3->field_0 = a1;\n
    }\n
    else\n
    {\n
        v3 = v0;\n
        a1[0] = 0;\n
        a1[1] = *((v3 + 8));\n
        *(*((v3 + 8))) = a1;\n
    }\n
    *((v3 + 8)) = a1;\n
    v2 = v0;\n
    *((v2 + 16)) = *((v2 + 16)) + 1;\n
    return v0;\n
}\n
", "4237362:sub_40a832": null, "4237376:_ZN7DLQueue8AddAfterEP6DLItemS1_": "long long DLQueue::AddAfter(unsigned long long a0[3], struct struct_0 **a1, unsigned long long a2[2])\n
{\n
    unsigned long long v0[3];  // [bp-0x28]\n
    unsigned long v2;  // rax\n
\n
    v0[0] = a0;\n
    if (a1 && a2)\n
    {\n
        a2[0] = *(a1);\n
        a2[1] = a1;\n
        if (*(a1))\n
            *(a1)->field_8 = a2;\n
        *(a1) = &a2[0];\n
        if (v0[1] == a1)\n
            v0[1] = a2;\n
        v2 = v0;\n
        *((v2 + 16)) = *((v2 + 16)) + 1;\n
        return v0;\n
    }\n
    return a0;\n
}\n
", "4237541:sub_40a8e5": null, "4237552:_ZN7DLQueue6UnlinkEP6DLItem": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long DLQueue::Unlink(unsigned long long a0[3], struct_1 *a1)\n
{\n
    if (a1->field_0)\n
        a1->field_0->field_8 = a1->field_8;\n
    if (a1->field_8)\n
        a1->field_8->field_0 = a1->field_0;\n
    if (a0[0] == a1)\n
        a0[0] = a1->field_0;\n
    if (a0[1] == a1)\n
        a0[1] = a1->field_8;\n
    a0[2] = a0[2] - 1;\n
    return a0;\n
}\n
", "4237721:sub_40a999": null, "4237728:_ZN7DLQueue10DeleteItemEP6DLItem": "long long DLQueue::DeleteItem(unsigned long long a0[3], void* a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    DLQueue::Unlink(a0, a1);\n
    *(&v0) = a1;\n
    if (a1)\n
    {\n
        DLItem::__base_dtor__(*(&v0));\n
        return operator delete(*(&v0));\n
    }\n
    return a1;\n
}\n
", "4237799:sub_40a9e7": null, "4237808:_ZN7DLQueue10RemoveItemEP6DLItem": "long long DLQueue::RemoveItem(unsigned long long a0[3], void* a1)\n
{\n
    return DLQueue::Unlink(a0, a1);\n
}\n
", "4237843:sub_40aa13": null, "4237856:_ZN7DLQueue11RemoveFirstEv": "long long DLQueue::RemoveFirst(unsigned long long *a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned long long *v1;  // [bp-0x10]\n
    unsigned long long *v3;  // rdi\n
\n
    v1 = a0;\n
    v3 = v1;\n
    v0 = *(v3);\n
    DLQueue::Unlink(v3, v0);\n
    return v0;\n
}\n
", "4237898:sub_40aa4a": null, "4237904:_ZN7DLQueue10RemoveLastEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long DLQueue::RemoveLast(struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_0 *v3;  // rdi\n
\n
    v1 = a0;\n
    v3 = v1;\n
    v0 = v3->field_8;\n
    DLQueue::Unlink(v3, v0);\n
    return v0;\n
}\n
", "4237947:sub_40aa7b": null, "4237952:main": "int main(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0xc8]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    *(&v1) = a1;\n
    CommandHandler::__base_ctor__(&v0);\n
    CommandHandler::ParserLoop(&v0, a1, a2, a3, a4);\n
    v3 = 0;\n
    CommandHandler::__dtor__(&v0);\n
    return v3;\n
}\n
", "4238032:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:cgc_fdwait": null, "5242904:cgc_receive": null, "5242912:memcpy": null, "5242920:cgc_allocate": null, "5242928:cgc__terminate": null, "5242936:_ZdlPv": null, "5242944:_Znwm": null, "5242952:_ZdaPv": null, "5242960:cgc_rint": null, "5242968:cgc_log10": null, "5242976:cgc_transmit": null, "5242984:cgc_pow": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}