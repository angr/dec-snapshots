{"4202496:_init": "extern struct_0 *g_408b40;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408b40;\n
    if (g_408b40)\n
        v1 = g_408b40();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408b60;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408b60;\n
    goto *(4229992);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4229968);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408b38;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_408b48;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408b50;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408b50)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v1 = a1 * a0;\n
        if ((0 CONCAT v1) /m a1 != a0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = cgc_malloc(v1);\n
        if (!v0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v2 = cgc_memset(v0, 0, v1);\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4203061:sub_402235": null, "4203072:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 0)\n
        v0 = a0 < 128;\n
    return v0 & 1;\n
}\n
", "4203117:sub_40226d": null, "4203120:cgc_isprint": "extern char _ctypes;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = !((&_ctypes)[a0] & 32);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203196:sub_4022bc": null, "4203200:cgc_isalnum": "extern char _ctypes;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 7);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203276:sub_40230c": null, "4203280:cgc_isalpha": "extern char _ctypes;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 3);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203356:sub_40235c": null, "4203360:cgc_islower": "extern char _ctypes;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 1);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203436:sub_4023ac": null, "4203440:cgc_isupper": "extern char _ctypes;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 2);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203516:sub_4023fc": null, "4203520:cgc_isspace": "extern char _ctypes;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 16);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203596:sub_40244c": null, "4203600:cgc_ispunct": "extern char _ctypes;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (cgc_isascii(a0))\n
    {\n
        v0 = ((&_ctypes)[a0] & 8);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203676:sub_40249c": null, "4203680:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4203737:sub_4024d9": null, "4203744:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 - 32;\n
    return v0;\n
}\n
", "4203801:sub_402519": null, "4203808:cgc_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v2;\n
    v0 = a0 - 24;\n
    v2 = v0;\n
    if (!v2->field_8)\n
    {\n
        cgc_insert_into_flist(v0);\n
        v2 = cgc_coalesce(v0);\n
        return v2;\n
    }\n
    return v0;\n
}\n
", "4203892:sub_402574": null, "4203904:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern struct_1 *cgc_free_lists;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct_2 *v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_1 *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x18], Other Possible Types: unsigned long long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if ((v4 & 7))\n
        v4 = v4 - -7 & -8;\n
    v4 += 24;\n
    v3 = 0;\n
    v2 = cgc_find_fit(v4, &v3);\n
    if (!v3)\n
    {\n
        if (!cgc_allocate_new_blk())\n
        {\n
            v2 = 31;\n
            v3 = (&cgc_free_lists)[v2];\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    cgc_remove_from_flist(v3);\n
    v1 = *(v3) - v4;\n
    if (v1 > 24)\n
    {\n
        v0 = v3 + v4;\n
        v0->field_0 = v1;\n
        v0->field_8 = 1;\n
        v0->field_10 = 0;\n
        v0->field_18 = 0;\n
        *(v3) = v4;\n
        v0->field_28 = v3;\n
        v0->field_20 = *((v3 + 32));\n
        if (*((v3 + 32)))\n
            *((*((v3 + 32)) + 40)) = v0;\n
        *((v3 + 32)) = v0;\n
        cgc_insert_into_flist(v0);\n
    }\n
    v5 = v3 + 24;\n
    return v5;\n
}\n
", "4204292:sub_402704": null, "4204304:cgc_find_fit": "extern unsigned long long cgc_free_lists;\n
\n
long long cgc_find_fit(unsigned long long a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    for (v0 = cgc_get_size_class(a0); v0 < 32; v0 += 1)\n
    {\n
        for (*(a1) = (&cgc_free_lists)[v0]; *(a1); *(a1) = *(a1)->field_10)\n
        {\n
            if (*(a1)->field_0 >= a0)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
    }\n
    *(a1) = 0;\n
    v1 = -1;\n
    return v1;\n
}\n
", "4204483:sub_4027c3": null, "4204496:cgc_allocate_new_blk": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_allocate_new_blk()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
\n
    v0 = 0x40000;\n
    if (cgc_allocate(v5, v6, v7))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    else if (*(&v2))\n
    {\n
        v1 = *(&v2);\n
        v1->field_0 = v0;\n
        v1->field_8 = 1;\n
        v1->field_18 = 0;\n
        v1->field_10 = 0;\n
        v1->field_28 = 0;\n
        v1->field_20 = 0;\n
        cgc_insert_into_flist(v1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4204674:sub_402882": null, "4204688:cgc_get_size_class": "extern unsigned long long size_class_limits[4];\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < 32)\n
            v0 = !(a0 <= size_class_limits[v1]);\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4204783:sub_4028ef": null, "4204784:cgc_insert_into_flist": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern struct_1 cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(a0->field_0);\n
    a0->field_8 = 1;\n
    if (!(&cgc_free_lists.field_0)[v0])\n
    {\n
        (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
        return &cgc_free_lists.field_0;\n
    }\n
    a0->field_10 = (&cgc_free_lists.field_0)[v0];\n
    (&cgc_free_lists.field_0)[v0]->field_18 = a0;\n
    (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
    a0->field_18 = 0;\n
    return a0;\n
}\n
", "4204951:sub_402997": null, "4204960:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern unsigned long long cgc_free_lists[4];\n
\n
long long cgc_remove_from_flist(struct_2 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(*(&a0->field_0));\n
    if (a0->field_18)\n
        a0->field_18->field_10 = a0->field_10;\n
    if (a0->field_10)\n
        a0->field_10->field_18 = a0->field_18;\n
    if (cgc_free_lists[v0] == a0)\n
        cgc_free_lists[v0] = a0->field_10;\n
    a0->field_10 = 0;\n
    a0->field_18 = 0;\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4205146:sub_402a5a": null, "4205152:cgc_coalesce": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_coalesce(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax\n
    struct_0 *v3;  // rax\n
    struct_1 *v4;  // rax\n
    struct_1 *v5;  // rax, Other Possible Types: unsigned long long, struct_0 *, unsigned long\n
\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0->field_20);\n
        cgc_remove_from_flist(a0);\n
        v1 = a0->field_28;\n
        v1->field_0 = a0->field_0 + v1->field_0;\n
        v2 = a0->field_28;\n
        v2->field_0 = a0->field_20->field_0 + v2->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        cgc_remove_from_blist(a0->field_20);\n
        v5 = cgc_remove_from_blist(a0);\n
        return v5;\n
    }\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && !a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0);\n
        v3 = a0->field_28;\n
        v3->field_0 = a0->field_0 + v3->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        v5 = cgc_remove_from_blist(a0);\n
        goto LABEL_402c32;\n
    }\n
    v5 = a0;\n
    if (a0->field_28)\n
    {\n
        v5 = a0->field_28;\n
        if (!v5->field_8)\n
        {\n
            v5 = a0;\n
            if (a0->field_20)\n
            {\n
                v5 = a0->field_20;\n
                if (v5->field_8)\n
                {\n
                    cgc_remove_from_flist(a0->field_20);\n
                    cgc_remove_from_flist(a0);\n
                    v4 = a0;\n
                    v4->field_0 = a0->field_20->field_0 + v4->field_0;\n
                    cgc_insert_into_flist(a0);\n
                    v5 = cgc_remove_from_blist(a0->field_20);\n
                }\n
            }\n
        }\n
    }\n
LABEL_402c32:\n
    return v5;\n
}\n
", "4205634:sub_402c42": null, "4205648:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_1 *field_20;\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
long long cgc_remove_from_blist(struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_1 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (a0->field_28)\n
        a0->field_28->field_20 = v0->field_20;\n
    v2 = a0;\n
    if (a0->field_20)\n
    {\n
        v2 = a0->field_20;\n
        *((v2 + 40)) = a0->field_28;\n
    }\n
    return v2;\n
}\n
", "4205728:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[a0] != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4205841:sub_402d11": null, "4205856:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4205955:sub_402d83": null, "4205968:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a2)\n
    {\n
        v1 = a0;\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a1;\n
        }\n
        v2 = a0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = a0;\n
        return v2;\n
    }\n
}\n
", "4206114:sub_402e22": null, "4206128:cgc_output_number": "long long cgc_output_number(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    char v2;  // [bp-0x59]\n
    char v3;  // [bp-0x49]\n
    char v4;  // [bp-0x39]\n
    char v5;  // [bp-0x29]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x14], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0xc], Other Possible Types: unsigned long\n
\n
    v8 = a0;\n
    v7 = a2;\n
    v6 = 0;\n
    if (v8 >= a1)\n
    {\n
        v6 = cgc_output_number((0 CONCAT v8) /m a1, a1, v7 - 1, a3);\n
        v8 = (0 CONCAT v8) /m a1 >> 32;\n
    }\n
    if (!v6 && v7 > 0)\n
    {\n
        while (true)\n
        {\n
            v7 = v7 - 1;\n
            if (!v7)\n
                break;\n
            if ((a3 & 1))\n
                v5 = 48;\n
            else\n
                v4 = 32;\n
            cgc_transmit(a0, a1, a2, a3);\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v3 = v1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v2 = v0;\n
    }\n
    cgc_transmit(a0, a1, a2, a3);\n
    return v6 + 1;\n
}\n
", "4206529:sub_402fc1": null, "4206544:cgc_printf": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf(char *a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x1b0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x1a8]\n
    unsigned int v2;  // [bp-0x19c]\n
    struct struct_0 **v3;  // [bp-0x198], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x190]\n
    unsigned int v5;  // [bp-0x184]\n
    unsigned long v6;  // [bp-0x180]\n
    struct struct_0 **v7;  // [bp-0x178]\n
    struct_1 *v8;  // [bp-0x170]\n
    unsigned int v9;  // [bp-0x164]\n
    unsigned int v10;  // [bp-0x160]\n
    unsigned int v11;  // [bp-0x15c]\n
    char v12;  // [bp-0x158]\n
    unsigned long v13;  // [bp-0x150]\n
    unsigned long v14;  // [bp-0x148]\n
    unsigned long v15;  // [bp-0x140]\n
    unsigned long v16;  // [bp-0x138]\n
    unsigned long v17;  // [bp-0x130]\n
    int v18;  // [bp-0x128]\n
    int v19;  // [bp-0x118]\n
    int v20;  // [bp-0x108]\n
    int v21;  // [bp-0xf8]\n
    int v22;  // [bp-0xe8]\n
    int v23;  // [bp-0xd8]\n
    int v24;  // [bp-0xc8]\n
    int v25;  // [bp-0xb8]\n
    char v26;  // [bp-0x99]\n
    char v27;  // [bp-0x89]\n
    char v28;  // [bp-0x79]\n
    char v29;  // [bp-0x69]\n
    char v30;  // [bp-0x59]\n
    char v31;  // [bp-0x49]\n
    unsigned int v32;  // [bp-0x48]\n
    unsigned int v33;  // [bp-0x44]\n
    unsigned long v34;  // [bp-0x40]\n
    unsigned long v35;  // [bp-0x38]\n
    unsigned int v36;  // [bp-0x30]\n
    unsigned int v37;  // [bp-0x2c]\n
    unsigned int v38;  // [bp-0x28]\n
    unsigned int v39;  // [bp-0x24]\n
    unsigned int v40;  // [bp-0x20]\n
    unsigned int v41;  // [bp-0x1c]\n
    char *v42;  // [bp-0x18]\n
    char *v43;  // [bp-0x10], Other Possible Types: unsigned long\n
    char v44;  // [bp-0x8]\n
    unsigned long v45;  // [bp+0x8]\n
    unsigned long long v46;  // rbp\n
    char v47;  // al\n
    int v48;  // xmm0\n
    int v49;  // xmm1\n
    int v50;  // xmm2\n
    int v51;  // xmm3\n
    int v52;  // xmm4\n
    int v53;  // xmm5\n
    int v54;  // xmm6\n
    int v55;  // xmm7\n
    unsigned long v56;  // r9\n
    char *v57;  // rax\n
    char *v58;  // rax\n
    unsigned long long v59;  // rdx\n
    struct struct_0 **v60;  // rax\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v63;  // rdx\n
    unsigned int *v64;  // rax\n
\n
    v46 = &v44;\n
    if (v47)\n
    {\n
        v18 = v48;\n
        v19 = v49;\n
        v20 = v50;\n
        v21 = v51;\n
        v22 = v52;\n
        v23 = v53;\n
        v24 = v54;\n
        v25 = v55;\n
    }\n
    v17 = v56;\n
    v16 = a4;\n
    v15 = a3;\n
    v14 = a2;\n
    v13 = a1;\n
    v43 = a0;\n
    v39 = 0;\n
    v38 = 0;\n
    v37 = 0;\n
    v35 = &v12;\n
    v34 = &v45;\n
    v33 = 48;\n
    v32 = 8;\n
    while (*(v43))\n
    {\n
        v57 = v43;\n
        v43 = v57 + 1;\n
        v31 = *(v57);\n
        if (v31 != 37)\n
        {\n
            v26 = v31;\n
            cgc_transmit(a0, a1, a2, a3);\n
LABEL_40343b:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v58 = v43;\n
                    a3 = v58 + 1;\n
                    v43 = a3;\n
                    v31 = *(v58);\n
                    v11 = v31;\n
                    if (v11 != 48)\n
                        break;\n
                    v38 |= 1;\n
                }\n
                if (v11 - 49 >= 9)\n
                    break;\n
                a2 = 10;\n
                v37 = cgc_strtol(v43 - 1, &v43, 10);\n
            }\n
            v10 = v31;\n
            if (v10 == 37)\n
            {\n
                v30 = 37;\n
                cgc_transmit(a0, a1, a2, a3);\n
                goto LABEL_4033f8;\n
            }\n
            if (v10 == 88)\n
            {\n
                v38 |= 2;\n
            }\n
            else\n
            {\n
                if (v10 == 100)\n
                {\n
                    v4 = &v32;\n
                    v5 = v32;\n
                    if (v5 <= 40)\n
                    {\n
                        a3 = v4;\n
                        v59 = v5;\n
                        v60 = v59 + a3->field_10;\n
                        a2 = v59 + 8;\n
                        *(&a3->field_0) = a2;\n
                        v3 = v60;\n
                    }\n
                    else\n
                    {\n
                        a3 = v4;\n
                        a2 = *((a3 + 8));\n
                        *((a3 + 8)) = a2 + 1;\n
                        v3 = a2;\n
                    }\n
                    v41 = *(v3);\n
                    if (v41 < 0)\n
                    {\n
                        v28 = 45;\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v41 = -(v41);\n
                    }\n
                    cgc_output_number(v41, 10, v37, v38);\n
                    goto LABEL_4033f8;\n
                }\n
                if (v10 == 115)\n
                {\n
                    v8 = &v32;\n
                    v9 = v32;\n
                    if (v9 <= 40)\n
                    {\n
                        a3 = v8;\n
                        v61 = v9;\n
                        v62 = v61 + a3->field_10;\n
                        a2 = v61 + 8;\n
                        *(&a3->field_0) = a2;\n
                    }\n
                    else\n
                    {\n
                        a3 = v8;\n
                        v63 = *((a3 + 8));\n
                        v62 = v63;\n
                        a2 = v63 + 1;\n
                        *((a3 + 8)) = a2;\n
                    }\n
                    v7 = v62;\n
                    v42 = &*(v7)->field_0;\n
                    v40 = 0;\n
                    while (true)\n
                    {\n
                        v6 = v40;\n
                        if (v6 >= cgc_strlen(v42))\n
                            break;\n
                        v29 = v42[v40];\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v40 += 1;\n
                    }\n
                    goto LABEL_4033f8;\n
                }\n
                if (v10 != 120)\n
                {\n
                    v27 = v31;\n
                    cgc_transmit(a0, a1, a2, a3);\n
LABEL_4033f8:\n
                    v37 = 0;\n
                    v38 = 0;\n
                    goto LABEL_40343b;\n
                }\n
            }\n
            v1 = &v32;\n
            v2 = v32;\n
            if (v2 > 40)\n
            {\n
                a3 = v1;\n
                a2 = a3->field_8;\n
                a3->field_8 = &a2[2];\n
                v0 = a2;\n
            }\n
            else\n
            {\n
                a3 = v1;\n
                a2 = v2;\n
                v64 = a2 + a3->field_10;\n
                *(&a3->field_0) = a2 + 8;\n
                v0 = v64;\n
            }\n
            v36 = *(v0);\n
            cgc_output_number(v36, 16, v37, v38);\n
            goto LABEL_4033f8;\n
        }\n
    }\n
    return v39;\n
}\n
", "4207697:sub_403451": null, "4207712:cgc_realloc": "long long cgc_realloc(unsigned int a0, unsigned int a1)\n
{\n
    unsigned long long *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = cgc_malloc(a1);\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        *(&v1) = cgc_malloc(a1);\n
        if (!*(&v1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = a0 - 24;\n
        if (a1 >= *(v0) - 24)\n
            cgc_memcpy(*(&v1), a0, *(v0) - 24);\n
        else\n
            cgc_memcpy(*(&v1), a0, a1);\n
        cgc_free(a0);\n
        v2 = *(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_free(a0);\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4207937:sub_403541": null, "4207952:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (*(v0))\n
        {\n
            v3 = v0;\n
            v0 = v3 + 1;\n
            if (*(v3) == a1)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4208043:sub_4035ab": null, "4208048:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(v1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v1) - *(v2);\n
}\n
", "4208187:sub_40363b": null, "4208192:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    v1 = a1;\n
    for (v0 = 0; *(v1); *((a0 + v4)) = *(v3))\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4208287:sub_40369f": null, "4208288:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1);\n
    return v0 - a0;\n
}\n
", "4208347:sub_4036db": null, "4208352:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    if (!*(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v1))\n
            v0 = cgc_strchr(v2, *(v1)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    v2 = &*(a0)->field_0;\n
    if (!*(v1))\n
    {\n
        *(a0) = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        *(a0) = &v1[1];\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4208573:sub_4037bd": null, "4208576:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    char v0[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x48]\n
    char v2;  // [bp-0x47]\n
    char v3;  // [bp-0x46]\n
    char v4;  // [bp-0x45]\n
    unsigned int v5;  // [bp-0x44]\n
    char v6[2];  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x34]\n
    unsigned int v8;  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    unsigned int v12;  // [bp-0x1c]\n
\n
    v12 = a2;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = a0;\n
    if (v12 == 1)\n
    {\n
LABEL_40380a:\n
    }\n
    else\n
    {\n
        if (!(v12 <= 36))\n
            goto LABEL_40380a;\n
        if (v12 < 0)\n
            goto LABEL_40380a;\n
        while (true)\n
        {\n
            if (*(v6) != 32 && *(v6) != 9 && *(v6) != 12 && *(v6) != 10 && *(v6) != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = v12;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                v12 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_403914:\n
                v6 += 2;\n
                v12 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_403914;\n
                v6 += 1;\n
                v12 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_403995;\n
                    v6 += 2;\n
                    v12 = 16;\n
                }\n
LABEL_403995:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_403b01;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_403abe;\n
            }\n
            if (!v7)\n
            {\n
LABEL_403abe:\n
                if (v8 >= v12)\n
                    goto LABEL_403b01;\n
                v10 *= v12;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = v6 + 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_403ab5;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_403ab5:\n
                v8 += 10;\n
                goto LABEL_403abe;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_403a2f;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_403a2f:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_403b01:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a1)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = a0;\n
    *(a1) = v0;\n
    return v10;\n
}\n
", "4209491:sub_403b53": null, "4209504:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4209545:sub_403b89": null, "4209552:cgc_initialize": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned long long field_20;\n
} struct_0;\n
\n
extern char *default_movies;\n
extern char g_password;\n
extern unsigned long long movies_full;\n
\n
long long cgc_initialize(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    char v1;  // [bp-0x11]\n
    char v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // r9\n
\n
    cgc_printf(\"\\n
   . . . Initializing the inventory . . .\\n
         (movie info from IMDb.com)\\n
\", a1, a2, a3, a4);\n
    for (v3 = 0; v3 <= 21; v3 += 1)\n
    {\n
        cgc_random(\"\\n
   . . . Initializing the inventory . . .\\n
         (movie info from IMDb.com)\\n
\", a1, a2);\n
        cgc_random(\"\\n
   . . . Initializing the inventory . . .\\n
         (movie info from IMDb.com)\\n
\", a1, a2);\n
        if (!(v1 & 1))\n
            (&g_password)[v3] = ((0 CONCAT *(&v2)) /m 26 >> 32) + 97;\n
        else\n
            (&g_password)[v3] = ((0 CONCAT *(&v2)) /m 26 >> 32) + 65;\n
    }\n
    (&g_password)[v3] = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= 10)\n
            return v3;\n
        v0 = cgc_malloc(40);\n
        if (!v0)\n
            break;\n
        cgc_memset(v0, 0, 40);\n
        *(&v0->field_0) = cgc_malloc(cgc_strlen((&default_movies)[5 * v3]) + 1);\n
        a3 = cgc_malloc(cgc_strlen((&default_movies)[1 + 5 * v3]) + 1);\n
        *(&v0->field_8) = a3;\n
        if (!*(&v0->field_0))\n
        {\n
LABEL_403d15:\n
            break;\n
        }\n
        else\n
        {\n
            if (!*(&v0->field_8))\n
                goto LABEL_403d15;\n
            cgc_strcpy(*(&v0->field_0), (&default_movies)[5 * v3]);\n
            cgc_strcpy(*(&v0->field_8), (&default_movies)[1 + 5 * v3]);\n
            v0->field_10 = (&default_movies)[2 + 5 * v3];\n
            v0->field_14 = *((&(&default_movies)[2 + 5 * v3] + 4));\n
            v0->field_18 = (&default_movies)[3 + 5 * v3];\n
            v0->field_1c = *((&(&default_movies)[3 + 5 * v3] + 4));\n
            a3 = cgc_print_movie_detail;\n
            v0->field_20 = cgc_print_movie_detail;\n
            cgc_movie_add(&movies_full, v0);\n
            v3 += 1;\n
        }\n
    }\n
    cgc_printf(\"[ERROR] Initialization failed. Exit.\\n
\", a1, 40, a3, a4);\n
    cgc_quit(\"[ERROR] Initialization failed. Exit.\\n
\", a1, 40, a3, a4, v5); /* do not return */\n
}\n
", "4210207:sub_403e1f": null, "4210208:cgc_print_movie_detail": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_0;\n
\n
long long cgc_print_movie_detail(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned long v1;  // [bp-0x70]\n
    unsigned long v2;  // [bp-0x68]\n
    unsigned long v3;  // [bp-0x60]\n
    char v4;  // [bp-0x58]\n
    unsigned long v5;  // [bp-0x28]\n
    unsigned long v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
\n
    v8 = memcpy(&v4, \"[%d] %s (%d, %s) - %s [%d/100]\\n
  => %s\\n
\", 40);\n
    if (!a1)\n
        return v8;\n
    v3 = a1->field_1c - 1;\n
    switch (v3)\n
    {\n
    case 0:\n
        v6 = \"G\";\n
        break;\n
    case 1:\n
        v6 = \"PG\";\n
        break;\n
    case 2:\n
        v6 = \"PG13\";\n
        break;\n
    case 3:\n
        v6 = \"R\";\n
        break;\n
    default:\n
        *(&v6) = \"Unknown\";\n
        break;\n
    }\n
    v2 = a1->field_18 - 1;\n
    switch (v2)\n
    {\n
    case 0:\n
        v5 = \"Action\";\n
        break;\n
    case 1:\n
        v5 = \"Romance\";\n
        break;\n
    case 2:\n
        v5 = \"Comedy\";\n
        break;\n
    case 3:\n
        v5 = \"Horror\";\n
        break;\n
    default:\n
        v5 = \"Other\";\n
        break;\n
    }\n
    v0 = a1->field_14;\n
    v1 = a1->field_8;\n
    v8 = cgc_printf(&v4, a0, a1->field_0, a1->field_10, v6);\n
    return v8;\n
}\n
", "4210562:sub_403f82": null, "4210576:cgc_readuntil": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_readuntil(unsigned long long a0, struct_0 *a1, unsigned long long a2, unsigned long long a3)\n
{\n
    char v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    struct_0 *v5;  // rax\n
\n
    v3 = a0;\n
    v1 = a1;\n
    for (v2 = 0; v2 < a2; v2 += 1)\n
    {\n
        if (cgc_receive(a0, a1, a2, a3))\n
        {\n
LABEL_403fef:\n
            break;\n
        }\n
        else\n
        {\n
            if (!*(&v0))\n
                goto LABEL_403fef;\n
            v5 = v1;\n
            v1 = &v5->field_0;\n
            if (v5->field_-1 == a3)\n
                break;\n
        }\n
    }\n
    *((v1 - 1)) = 0;\n
    return v1 - a1;\n
}\n
", "4210758:sub_404046": null, "4210768:cgc_list_movies": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 *movies_full;\n
extern struct_2 *movies_rented;\n
\n
long long cgc_list_movies(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_2 *a3, unsigned int a4)\n
{\n
    struct_2 *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = 0;\n
    cgc_printf(\"\\n
Movies (Full)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v0 = movies_full; v0; v0 = *((v0 + 8)))\n
    {\n
        v1 += 1;\n
        a3 = v0;\n
        *((*(v0) + 32))(v1, *(a3));\n
    }\n
    cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v1, a2, a3, a4);\n
    v1 = 0;\n
    cgc_printf(\"\\n
Movies (Rented)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v0 = movies_rented; v0; v0 = *((v0 + 8)))\n
    {\n
        v1 += 1;\n
        a3 = v0;\n
        *((*(v0) + 32))(v1, *(a3));\n
    }\n
    return cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v1, a2, a3, a4);\n
}\n
", "4211000:sub_404138": null, "4211008:cgc_rent_movie": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_3 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[32];\n
    struct struct_1 *field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern struct_3 *movies_full;\n
extern unsigned long long movies_rented;\n
\n
long long cgc_rent_movie(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_3 *a3, unsigned int a4)\n
{\n
    unsigned long long *v0;  // [bp-0x128]\n
    struct struct_0 **v1;  // [bp-0x120]\n
    char v2;  // [bp-0x118]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_3 *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = 0;\n
    cgc_printf(\"\\n
Movies (Full)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v5 = movies_full; v5; v5 = *((v5 + 8)))\n
    {\n
        v3 += 1;\n
        a3 = v5;\n
        *((*(v5) + 32))(v3, *(a3));\n
    }\n
    cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v3, a2, a3, a4);\n
    if (!v3)\n
    {\n
        v7 = cgc_printf(\"[ERROR] Movie list is empty. Please try again later.\\n
\", a1, a2, a3, a4);\n
        return v7;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(\"Enter movie id: \", 0, 10, a3, a4);\n
        a3 = 10;\n
        v7 = cgc_readuntil(0, &v2, 0x100, 10);\n
        if (v7 < 0)\n
            return v7;\n
        v4 = cgc_strtoul(&v2, NULL, 10);\n
        if (v4 >= 1 && v4 <= v3)\n
            break;\n
        cgc_printf(\"[ERROR] Invalid movie id. Try again.\\n
\", 0, 10, 10, a4);\n
    }\n
    v1 = cgc_movie_find_by_id(movies_full, v4);\n
    v0 = &*(v1)->field_0;\n
    v1 = cgc_movie_find(movies_rented, *(v0));\n
    if (v1)\n
    {\n
        v7 = cgc_printf(\"Sorry, [%s] is already rented at this time. Please try again later.\\n
\", *(v1)->field_0, 10, 10, a4);\n
        return v7;\n
    }\n
    v1 = cgc_movie_find_by_id(movies_full, v4);\n
    if (!cgc_movie_add(&movies_rented, *(v1)))\n
    {\n
        v7 = cgc_printf(\"Successfully rented [%s]! Enjoy!\\n
\", *(v1)->field_0, 10, 10, a4);\n
        return v7;\n
    }\n
    v7 = cgc_printf(\"[ERROR] Failed to rent. Please try again later.\\n
\", 0, 10, 10, a4);\n
    return v7;\n
}\n
", "4211506:sub_404332": null, "4211520:cgc_return_movie": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 *movies_rented;\n
\n
long long cgc_return_movie(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_2 *a3, unsigned int a4)\n
{\n
    struct struct_3 **v0;  // [bp-0x120]\n
    struct_2 *v1;  // [bp-0x118], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x110]\n
    unsigned int v3;  // [bp-0x10c]\n
    char v4;  // [bp-0x108]\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = 0;\n
    cgc_printf(\"\\n
Movies (Rented)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v1 = movies_rented; v1; v1 = v1->field_8)\n
    {\n
        v2 += 1;\n
        a3 = v1;\n
        v1->field_0->field_20(v2, *(a3));\n
    }\n
    cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v2, a2, a3, a4);\n
    if (!v2)\n
    {\n
        v6 = cgc_printf(\"[ERROR] All the movies are in our inventory.\\n
\", a1, a2, a3, a4);\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(\"Enter movie id: \", 0, 10, a3, a4);\n
        a3 = 10;\n
        v6 = cgc_readuntil(0, &v4, 0x100, 10);\n
        if (v6 < 0)\n
            return v6;\n
        v3 = cgc_strtoul(&v4, NULL, 10);\n
        if (v3 >= 1 && v3 <= v2)\n
            break;\n
        cgc_printf(\"[ERROR] Invalid movie id. Try again.\\n
\", 0, 10, 10, a4);\n
    }\n
    v0 = cgc_movie_find_by_id(movies_rented, v3);\n
    if (!v0)\n
    {\n
        v6 = cgc_printf(\"Sorry, we have some issues here. Please try again later.\\n
\", 0, 10, 10, a4);\n
        return v6;\n
    }\n
    else if (cgc_movie_delete(&movies_rented, v3))\n
    {\n
        v6 = cgc_printf(\"[ERROR] Failed to return the movie. Please try again.\\n
\", 0, 10, 10, a4);\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_printf(\"Successfully returned [%s]! Thank you!\\n
\", *(v0)->field_0, 10, 10, a4);\n
        return v6;\n
    }\n
}\n
", "4211984:cgc_login": "extern char g_password;\n
\n
long long cgc_login(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x5e]\n
    char v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    strncpy(&v0, \"admin\", 5);\n
    cgc_printf(\"username: \", a1, a2, a3, a4);\n
    cgc_readuntil(0, &v1, 64, 10);\n
    if (cgc_strcmp(&v0, &v1))\n
    {\n
        cgc_printf(\"[ERROR] Permission Denied: Wrong credentials\\n
\", a1, 64, 10, a4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    cgc_printf(\"password: \", a1, 64, 10, a4);\n
    cgc_readuntil(0, &v1, 64, 10);\n
    if (!cgc_strcmp(&g_password, &v1))\n
    {\n
        cgc_printf(\"\\n
Welcome, admin!\\n
\", a1, 64, 10, a4);\n
        v2 = 1;\n
        v3 = v2;\n
        return v3;\n
    }\n
    cgc_printf(\"[ERROR] Permission Denied: Wrong credentials\\n
\", a1, 64, 10, a4);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4212222:sub_4045fe": null, "4212224:cgc_add_movie": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned long long field_20;\n
} struct_0;\n
\n
extern char g_4060b0;\n
extern char g_4060c4;\n
extern unsigned long long movies_full;\n
\n
long long cgc_add_movie(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x430]\n
    unsigned long v1;  // [bp-0x428]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    unsigned int v4;  // [bp-0x414]\n
    struct_0 *v5;  // [bp-0x410]\n
    char v6;  // [bp-0x408]\n
    struct_1 *v8;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long v9;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v11;  // rax\n
    unsigned long long v12;  // rax\n
\n
    v8 = cgc_malloc(40);\n
    v5 = &v8->field_0;\n
    if (!v5)\n
        return v8;\n
    cgc_printf(\"Add a movie\\n
--------------\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"Enter Title: \", a1, a2, a3, a4);\n
    v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
    if (v8 >= 0)\n
    {\n
        *(&v5->field_0) = cgc_malloc(cgc_strlen(&v6) + 1);\n
        v8 = v5;\n
        if (v8->field_0)\n
        {\n
            cgc_strcpy(*(&v5->field_0), &v6);\n
            cgc_printf(\"Enter Description: \", a1, 0x400, 10, a4);\n
            v10 = 0x400;\n
            v9 = 10;\n
            v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
            if (v8 >= 0)\n
            {\n
                *(&v5->field_8) = cgc_malloc(cgc_strlen(&v6) + 1);\n
                v8 = v5;\n
                if (v8->field_8)\n
                {\n
                    cgc_strcpy(*(&v5->field_8), &v6);\n
                    while (true)\n
                    {\n
                        cgc_printf(\"Enter Year (1800-2015): \", 0, v10, v9, a4);\n
                        v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
                        if (v8 < 0)\n
                            break;\n
                        v10 = 10;\n
                        v9 = cgc_strtoul(&v6, NULL, 10);\n
                        v5->field_10 = v9;\n
                        if (v5->field_10 >= 1800 && v5->field_10 <= 2015)\n
                        {\n
                            while (true)\n
                            {\n
                                cgc_printf(\"Enter Review score (0-100): \", 0, 10, v9, a4);\n
                                v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
                                if (v8 < 0)\n
                                    break;\n
                                v9 = cgc_strtoul(&v6, NULL, 10);\n
                                v5->field_14 = v9;\n
                                if (v5->field_14 >= 0 && v5->field_14 <= 100)\n
                                {\n
                                    v4 = 0;\n
                                    while (true)\n
                                    {\n
                                        if (!((v4 ^ 255) & 1))\n
                                        {\n
                                            v4 = 0;\n
                                            while (true)\n
                                            {\n
                                                if (!((v4 ^ 255) & 1))\n
                                                {\n
                                                    v5->field_20 = cgc_print_movie_detail;\n
                                                    v8 = cgc_movie_add(&movies_full, v5);\n
                                                    if (!v8)\n
                                                        return v8;\n
                                                    v8 = cgc_printf(\"[ERROR] Failed to add a movie.\\n
\", a1, 10, cgc_print_movie_detail, a4);\n
                                                    break;\n
                                                }\n
                                                else\n
                                                {\n
                                                    cgc_printf(\"Select a film rating\\n
 1. G\\n
 2. PG\\n
 3. PG-13\\n
 4. R\\n
 5. Unknown\\n
Choice: \", 0, 10, v9, a4);\n
                                                    v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
                                                    if (v8 < 0)\n
                                                        break;\n
                                                    v2 = cgc_strtoul(&v6, NULL, 10);\n
                                                    v4 = 1;\n
                                                    v12 = v2 - 1;\n
                                                    v9 = v12;\n
                                                    v0 = v12;\n
                                                    switch (v12)\n
                                                    {\n
                                                    case 0:\n
                                                        v5->field_1c = 1;\n
                                                        break;\n
                                                    case 1:\n
                                                        v5->field_1c = 2;\n
                                                        break;\n
                                                    case 2:\n
                                                        v5->field_1c = 3;\n
                                                        break;\n
                                                    case 3:\n
                                                        v5->field_1c = 4;\n
                                                        break;\n
                                                    case 4:\n
                                                        v5->field_1c = 5;\n
                                                        break;\n
                                                    default:\n
                                                        v4 = 0;\n
                                                        cgc_printf(\"[ERROR] Invalid film rating. Try again.\\n
\", 0, 10, v12, a4);\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                        else\n
                                        {\n
                                            cgc_printf(\"Select a genre\\n
 1. Action\\n
 2. Romance\\n
 3. Comeda\\n
 4. Horror\\n
 5. Other\\n
Choice: \", 0, 10, v9, a4);\n
                                            v8 = cgc_readuntil(0, &v6, 0x400, 10);\n
                                            if (v8 < 0)\n
                                                break;\n
                                            v3 = cgc_strtoul(&v6, NULL, 10);\n
                                            v4 = 1;\n
                                            v11 = v3 - 1;\n
                                            v9 = v11;\n
                                            v1 = v11;\n
                                            switch (v11)\n
                                            {\n
                                            case 0:\n
                                                v5->field_18 = 1;\n
                                                break;\n
                                            case 1:\n
                                                v5->field_18 = 2;\n
                                                break;\n
                                            case 2:\n
                                                v5->field_18 = 3;\n
                                                break;\n
                                            case 3:\n
                                                v5->field_18 = 4;\n
                                                break;\n
                                            case 4:\n
                                                v5->field_18 = 5;\n
                                                break;\n
                                            default:\n
                                                v4 = 0;\n
                                                cgc_printf(\"[ERROR] Invalid genre. Try again.\\n
\", 0, 10, v11, a4);\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                                cgc_printf(\"[ERROR] Invalid rating. Try again.\\n
\", 0, 10, v9, a4);\n
                            }\n
                        }\n
                        cgc_printf(\"[ERROR] Invalid year. Try again.\\n
\", 0, 10, v9, a4);\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v5)\n
        return v8;\n
    if (*(&v5->field_8))\n
        cgc_free(*(&v5->field_8));\n
    if (*(&v5->field_0))\n
        cgc_free(*(&v5->field_0));\n
    v8 = cgc_free(v5);\n
}\n
", "4213623:sub_404b77": null, "4213632:cgc_remove_movie": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_g_num_movies;\n
extern struct_2 *movies_full;\n
extern unsigned long long movies_rented;\n
\n
long long cgc_remove_movie(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_2 *a3, unsigned int a4)\n
{\n
    unsigned long long v0;  // [bp-0x120]\n
    struct_2 *v1;  // [bp-0x118], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x110]\n
    unsigned int v3;  // [bp-0x10c]\n
    char v4;  // [bp-0x108]\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = 0;\n
    cgc_printf(\"\\n
Movies (Full)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v1 = movies_full; v1; v1 = v1->field_8)\n
    {\n
        v3 += 1;\n
        a3 = v1;\n
        v1->field_0->field_20(v3, *(a3));\n
    }\n
    cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v3, a2, a3, a4);\n
    if (!v3)\n
    {\n
        v6 = cgc_printf(\"[ERROR] Movie list is empty.\\n
\", a1, a2, a3, a4);\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(\"Enter movie id: \", 0, 10, a3, a4);\n
        a3 = 10;\n
        v6 = cgc_readuntil(0, &v4, 0x100, 10);\n
        if (v6 < 0)\n
            return v6;\n
        v2 = cgc_strtoul(&v4, NULL, 10);\n
        if (v2 >= 1 && v2 <= v3)\n
            break;\n
        cgc_printf(\"[ERROR] Invalid movie id. Try again.\\n
\", 0, 10, 10, a4);\n
    }\n
    v1 = cgc_movie_find_by_id(movies_full, v2);\n
    v0 = v1->field_0;\n
    if (!cgc_movie_delete(&movies_full, v2) && !cgc_movie_delete(&movies_rented, v2))\n
    {\n
        cgc_g_num_movies = cgc_g_num_movies - 1;\n
        cgc_free_movie(v0);\n
        v6 = cgc_printf(\"Successfully removed the movie!\\n
\", 0, 10, 10, a4);\n
        return v6;\n
    }\n
    v6 = cgc_printf(\"[ERROR] Failed to remove.\\n
\", 0, 10, 10, a4);\n
    return v6;\n
}\n
", "4214121:sub_404d69": null, "4214128:cgc_update_movie": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
    char padding_1[7];\n
    char field_8;\n
    char padding_9[7];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char g_4060d8;\n
extern char g_4060ec;\n
extern struct_2 *movies_full;\n
\n
long long cgc_update_movie(unsigned long a0, unsigned long long a1, unsigned long long a2, struct_2 *a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x460]\n
    unsigned long v1;  // [bp-0x458]\n
    unsigned int v2;  // [bp-0x44c]\n
    unsigned int v3;  // [bp-0x448]\n
    unsigned int v4;  // [bp-0x444]\n
    unsigned int v5;  // [bp-0x440]\n
    unsigned int v6;  // [bp-0x43c]\n
    struct_3 *v7;  // [bp-0x438]\n
    struct_2 *v8;  // [bp-0x430], Other Possible Types: unsigned long\n
    char v9;  // [bp-0x428]\n
    unsigned int v10;  // [bp-0x20]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x10]\n
    unsigned int v13;  // [bp-0xc]\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v17;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long v18;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v19;  // rax\n
    unsigned long long v20;  // rax\n
\n
    v12 = 0;\n
    cgc_printf(\"\\n
Movies (Full)\\n
--------------\\n
\", a1, a2, a3, a4);\n
    for (v8 = movies_full; v8; v8 = v8->field_8)\n
    {\n
        v12 += 1;\n
        a3 = v8;\n
        v8->field_0->field_20(v12, *(a3));\n
    }\n
    cgc_printf(\"--------------\\n
%d movie(s)\\n
\", v12, a2, a3, a4);\n
    if (!v12)\n
    {\n
        v18 = cgc_printf(\"[ERROR] Nothing to update.\\n
\", a1, a2, a3, a4);\n
        return v18;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(\"Enter movie id: \", 0, 10, a3, a4);\n
        a3 = 10;\n
        v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
        if (v18 < 0)\n
            return v18;\n
        v13 = cgc_strtoul(&v9, NULL, 10);\n
        if (v13 >= 1 && v13 <= v12)\n
            break;\n
        cgc_printf(\"[ERROR] Invalid movie id. Try again.\\n
\", 0, 10, 10, a4);\n
    }\n
    v8 = cgc_movie_find_by_id(movies_full, v13);\n
    v7 = &v8->field_0->field_0;\n
    cgc_printf(\"\\n
Update a movie\\n
--------------\\n
Just leave it empty to keep the old value.\\n
\", 0, 10, 10, a4);\n
    cgc_printf(\"Enter new title (current: [%s]): \", *(&v7->field_0), 10, 10, a4);\n
    v15 = 10;\n
    v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
    if (v18 < 0)\n
        return v18;\n
    if (cgc_strlen(&v9))\n
    {\n
        v18 = cgc_malloc(cgc_strlen(&v9) + 1);\n
        *(&v11) = v18;\n
        if (!*(&v11))\n
            goto LABEL_405479;\n
        cgc_strcpy(*(&v11), &v9);\n
        cgc_free(*(&v7->field_0));\n
        v15 = *(&v11);\n
        *(&v7->field_0) = v15;\n
    }\n
    cgc_printf(\"Enter new description (current: [%s]): \", *(&v7->field_8), 0x400, v15, a4);\n
    v16 = 0x400;\n
    v17 = 10;\n
    v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
    if (v18 < 0)\n
        return v18;\n
    if (cgc_strlen(&v9))\n
    {\n
        v18 = cgc_malloc(cgc_strlen(&v9) + 1);\n
        *(&v10) = v18;\n
        if (!*(&v10))\n
            goto LABEL_405479;\n
        cgc_strcpy(*(&v10), &v9);\n
        cgc_free(*(&v7->field_8));\n
        v17 = *(&v10);\n
        *(&v7->field_8) = v17;\n
    }\n
    while (true)\n
    {\n
        cgc_printf(\"Enter new year (1800-2015) (current: [%d]): \", v7->field_10, v16, v17, a4);\n
        v16 = 0x400;\n
        v17 = 10;\n
        v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
        if (v18 < 0)\n
            break;\n
        if (!cgc_strlen(&v9))\n
        {\n
LABEL_4050ee:\n
            while (true)\n
            {\n
                cgc_printf(\"Enter new review score (0-100) (current: [%d/100]: \", v7->field_14, v16, v17, a4);\n
                v16 = 0x400;\n
                v17 = 10;\n
                v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
                if (v18 < 0)\n
                    break;\n
                if (!cgc_strlen(&v9))\n
                {\n
LABEL_4051ae:\n
                    v4 = 0;\n
                    while (true)\n
                    {\n
                        if (!((v4 ^ 255) & 1))\n
                        {\n
LABEL_40530a:\n
                            v4 = 0;\n
                            while (true)\n
                            {\n
                                if (!((v4 ^ 255) & 1))\n
                                {\n
LABEL_405466:\n
                                    v18 = cgc_printf(\"Successfully updated the movie information!\\n
\", 0, v16, v17, a4);\n
                                    return v18;\n
                                }\n
                                cgc_printf(\"Select a film rating (current: [%s]\\n
 1. G\\n
 2. PG\\n
 3. PG-13\\n
 4. R\\n
 5. Unknown\\n
Choice: \", cgc_movie_r2s(v7->field_1c), v16, v17, a4);\n
                                v16 = 0x400;\n
                                v17 = 10;\n
                                v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
                                if (v18 < 0)\n
                                    break;\n
                                if (!cgc_strlen(&v9))\n
                                    goto LABEL_405466;\n
                                v16 = 10;\n
                                v2 = cgc_strtoul(&v9, NULL, 10);\n
                                v4 = 1;\n
                                v20 = v2 - 1;\n
                                v17 = v20;\n
                                v0 = v20;\n
                                switch (v20)\n
                                {\n
                                case 0:\n
                                    v7->field_1c = 1;\n
                                    break;\n
                                case 1:\n
                                    v7->field_1c = 2;\n
                                    break;\n
                                case 2:\n
                                    v7->field_1c = 3;\n
                                    break;\n
                                case 3:\n
                                    v7->field_1c = 4;\n
                                    break;\n
                                case 4:\n
                                    v7->field_1c = 5;\n
                                    break;\n
                                default:\n
                                    v4 = 0;\n
                                    cgc_printf(\"[ERROR] Invalid film rating. Try again.\\n
\", 0, 10, v20, a4);\n
                                }\n
                            }\n
                        }\n
                        else\n
                        {\n
                            cgc_printf(\"Select a genre (current: [%s])\\n
 1. Action\\n
 2. Romance\\n
 3. Comeda\\n
 4. Horror\\n
 5. Other\\n
Choice: \", cgc_movie_g2s(v7->field_18), v16, v17, a4);\n
                            v16 = 0x400;\n
                            v17 = 10;\n
                            v18 = cgc_readuntil(0, &v9, 0x400, 10);\n
                            if (v18 < 0)\n
                                break;\n
                            if (!cgc_strlen(&v9))\n
                                goto LABEL_40530a;\n
                            v16 = 10;\n
                            v3 = cgc_strtoul(&v9, NULL, 10);\n
                            v4 = 1;\n
                            v19 = v3 - 1;\n
                            v17 = v19;\n
                            v1 = v19;\n
                            switch (v19)\n
                            {\n
                            case 0:\n
                                v7->field_18 = 1;\n
                                break;\n
                            case 1:\n
                                v7->field_18 = 2;\n
                                break;\n
                            case 2:\n
                                v7->field_18 = 3;\n
                                break;\n
                            case 3:\n
                                v7->field_18 = 4;\n
                                break;\n
                            case 4:\n
                                v7->field_18 = 5;\n
                                break;\n
                            default:\n
                                v4 = 0;\n
                                cgc_printf(\"[ERROR] Invalid genre. Try again.\\n
\", 0, 10, v19, a4);\n
                            }\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    v16 = 10;\n
                    v5 = cgc_strtoul(&v9, NULL, 10);\n
                    if (v5 >= 0 && v5 <= 100)\n
                    {\n
                        v17 = v5;\n
                        v7->field_14 = v17;\n
                        goto LABEL_4051ae;\n
                    }\n
                    cgc_printf(\"[ERROR] Invalid rating. Try again.\\n
\", 0, 10, 10, a4);\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v16 = 10;\n
            v6 = cgc_strtoul(&v9, NULL, 10);\n
            if (v6 >= 1800 && v6 <= 2015)\n
            {\n
                v17 = v6;\n
                v7->field_10 = v17;\n
                goto LABEL_4050ee;\n
            }\n
            cgc_printf(\"[ERROR] Invalid year. Try again.\\n
\", 0, 10, 10, a4);\n
        }\n
    }\n
LABEL_405479:\n
    if (*(&v11))\n
        v18 = cgc_free(*(&v11));\n
    if (*(&v10))\n
        v18 = cgc_free(*(&v10));\n
    if (!v7)\n
        return v18;\n
    v18 = cgc_free(v7);\n
}\n
", "4216004:sub_4054c4": null, "4216016:cgc_quit": "long long cgc_quit()\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
    unsigned int v4;  // r8\n
\n
    cgc_printf(\"Bye!\\n
\", v1, v2, v3, v4);\n
    cgc_exit(0); /* do not return */\n
}\n
", "4216041:sub_4054e9": "long long sub_4054e9(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned long v0)\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "4216043:sub_4054eb": null, "4216048:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    main(a0, v2, v3, v4, v5, v6); /* do not return */\n
}\n
", "4216080:main": "extern void g_406100;\n
extern void g_406114;\n
\n
int main(unsigned int a0, unsigned long a1, unsigned long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x1108]\n
    unsigned long v1;  // [bp-0x1100]\n
    char v2;  // [bp-0x10f8]\n
    char v3;  // [bp-0x10a8]\n
    char v4;  // [bp-0x1058]\n
    char v5;  // [bp-0x1028]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned long v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned long long v11;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v12;  // rax\n
    unsigned long long v13;  // rax\n
\n
    v9 = 0;\n
    v8 = a0;\n
    v7 = a1;\n
    v6 = 0;\n
    memcpy(&v4, \"========= Movie Rental Service v0.1 =========\", 46);\n
    memcpy(&v3, \"\\n
1. List movies\\n
2. Rent movie\\n
3. Return movie\\n
4. Admin mode\\n
5. Exit\\n
\\n
Choice: \", 78);\n
    v11 = 75;\n
    memcpy(&v2, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 75);\n
    cgc_printf(&v4, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 75, a3, a4);\n
    cgc_initialize(a0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 75, a3, a4);\n
    cgc_printf(\"=============================================\", \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 75, a3, a4);\n
    while (true)\n
    {\n
        if (!v6)\n
        {\n
            cgc_printf(&v3, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", v11, a3, a4);\n
            v11 = 0x1000;\n
            if (cgc_readuntil(0, &v5, 0x1000, 10) < 0)\n
                cgc_quit(); /* do not return */\n
            v13 = v5 - 49;\n
            a3 = v13;\n
            v0 = v13;\n
            switch (v13)\n
            {\n
            case 0:\n
                cgc_list_movies(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406100, a4);\n
                break;\n
            case 1:\n
                cgc_rent_movie(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406100, a4);\n
                break;\n
            case 2:\n
                cgc_return_movie(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406100, a4);\n
                break;\n
            case 3:\n
                v6 = cgc_login(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406100, a4);\n
                break;\n
            case 4:\n
                cgc_quit(); /* do not return */\n
            default:\n
                cgc_printf(\"[ERROR] Invalid menu. Please select again.\\n
\", \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, v13, a4);\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(&v2, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", v11, a3, a4);\n
            v11 = 0x1000;\n
            if (cgc_readuntil(0, &v5, 0x1000, 10) < 0)\n
                cgc_quit(); /* do not return */\n
            v12 = v5 - 49;\n
            a3 = v12;\n
            v1 = v12;\n
            switch (v12)\n
            {\n
            case 0:\n
                cgc_add_movie(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406114, a4);\n
                break;\n
            case 1:\n
                cgc_remove_movie(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406114, a4);\n
                break;\n
            case 2:\n
                cgc_update_movie(0, \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, &g_406114, a4);\n
                break;\n
            case 3:\n
                v6 = 0;\n
                break;\n
            default:\n
                cgc_printf(\"[ERROR] Invalid menu. Please select again.\\n
\", \"\\n
1. Add movie\\n
2. Remove movie\\n
3. Update movie\\n
4. Quit admin mode\\n
\\n
Choice: \", 0x1000, v12, a4);\n
            }\n
        }\n
    }\n
}\n
", "4216542:sub_4056de": "long long sub_4056de()\n
{\n
}\n
", "4216571:sub_4056fb": null, "4216576:cgc_movie_g2s": "extern char g_4067d6;\n
extern char g_4067dd;\n
extern char g_4067e5;\n
extern char g_4067ec;\n
\n
long long cgc_movie_g2s(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0 - 1;\n
    if (v0 > 3)\n
    {\n
        v1 = \"Other\";\n
        return v1;\n
    }\n
    goto *((4222956 + (stack_base)[32] * 4)) + 4222956;\n
}\n
", "4216713:sub_405789": null, "4216720:cgc_movie_r2s": "extern char g_4067c4;\n
extern char g_4067c5;\n
extern char g_4067c7;\n
extern char g_4067cc;\n
\n
long long cgc_movie_r2s(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0 - 1;\n
    if (v0 > 3)\n
    {\n
        v1 = \"Unknown\";\n
        return v1;\n
    }\n
    goto *((4222972 + (stack_base)[32] * 4)) + 4222972;\n
}\n
", "4216857:sub_405819": null, "4216864:cgc_movie_add": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_movie_add(struct struct_0 **a0, unsigned long long *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1[0] = cgc_malloc(16);\n
    if (!v1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else if (*(a0))\n
    {\n
        v0 = cgc_movie_find(*(a0), *(a1));\n
        if (v0)\n
        {\n
            if (v1)\n
                cgc_free(v1);\n
            v2 = -1;\n
            return v2;\n
        }\n
        else\n
        {\n
            for (v0 = *(a0); v0->field_8; v0 = v0->field_8);\n
            v1[0] = a1;\n
            v1[1] = 0;\n
            *((v0 + 8)) = v1;\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
    else\n
    {\n
        v1[0] = a1;\n
        v1[1] = 0;\n
        *(a0) = &v1[0];\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4217165:sub_40594d": null, "4217168:cgc_movie_find": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char *field_0;\n
} struct_3;\n
\n
long long cgc_movie_find(struct_0 *a0, char *a1)\n
{\n
    struct_2 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0)\n
    {\n
        for (v0 = &a0->field_0; v0; v0 = v0->field_8)\n
        {\n
            if (!cgc_strcmp(v0->field_0->field_0, a1))\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
        }\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4217295:sub_4059cf": null, "4217296:cgc_free_movie": "long long cgc_free_movie(unsigned int a0[3])\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
        return v1;\n
    if (*(&a0[0]))\n
        cgc_free(*(&a0[0]));\n
    if (*(&a0[2]))\n
        cgc_free(*(&a0[2]));\n
    v1 = cgc_free(a0);\n
    return v1;\n
}\n
", "4217388:sub_405a2c": null, "4217392:cgc_movie_delete": "long long cgc_movie_delete(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v2 = 0;\n
    v1 = *(a0);\n
    v0 = 1;\n
    if (v1 && a1 == 1)\n
    {\n
        *(a0) = *((v1 + 8));\n
        cgc_free(v1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = *(a0);\n
    for (v1 = *((v2 + 8)); v1; v1 = *((v1 + 8)))\n
    {\n
        v0 += 1;\n
        if (a1 != v0)\n
        {\n
            v2 = v1;\n
        }\n
        else\n
        {\n
            *((v2 + 8)) = *((v1 + 8));\n
            cgc_free(v1);\n
            break;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217639:sub_405b27": null, "4217648:cgc_movie_update": "long long cgc_movie_update(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    return 0;\n
}\n
", "4217660:sub_405b3c": null, "4217664:cgc_movie_find_by_id": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_movie_find_by_id(struct_0 *a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0)\n
    {\n
        v1 = 0;\n
        for (v0 = a0; v0; v0 = *((v0 + 8)))\n
        {\n
            v1 += 1;\n
            if (a1 == v1)\n
            {\n
                v2 = v0;\n
                return v2;\n
            }\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4217784:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_random": null, "5242912:cgc_allocate": null, "5242920:memcpy": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}