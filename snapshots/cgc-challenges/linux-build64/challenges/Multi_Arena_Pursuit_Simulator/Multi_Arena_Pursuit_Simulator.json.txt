{"4202496:_init": "extern struct_0 *g_409230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409230;\n
    if (g_409230)\n
        v1 = g_409230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409250;\n
    goto *(4231768);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231744);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_409238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_409240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409240)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 - 48 > 9)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4202947:sub_4021c3": null, "4202960:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = 0;\n
    v1 = -1;\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (a0[v0] != 45)\n
        v1 = 1;\n
    else\n
        v0 += 1;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v3 = v2 * v1;\n
            return v3;\n
        }\n
        if (!cgc_isdigit(a0[v0]))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v2 = v2 * 10 + a0[v0] - 48;\n
        v0 += 1;\n
    }\n
}\n
", "4203182:sub_4022ae": null, "4203184:cgc_atox": "long long cgc_atox(char a0[4])\n
{\n
    char v0;  // [bp-0x13]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    if (a0[2] > 47 && a0[2] < 58)\n
    {\n
        v2 = (a0[2] - 48) * 16;\n
        goto LABEL_40232b;\n
    }\n
    if (a0[2] > 64 && a0[2] < 71)\n
        v2 = (a0[2] - 55) * 16;\n
LABEL_40232b:\n
    if (a0[3] > 47 && a0[3] < 58)\n
    {\n
        v1 = a0[3] - 48;\n
        goto LABEL_402395;\n
    }\n
    if (a0[3] > 64 && a0[3] < 71)\n
        v1 = a0[3] - 55;\n
LABEL_402395:\n
    v0 = v2 + v1;\n
    return v0;\n
}\n
", "4203437:sub_4023ad": null, "4203440:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        a0[v0] = a0[v0] ^ a0[v0];\n
    }\n
    return v0;\n
}\n
", "4203525:sub_402405": null, "4203536:cgc_fill_buffer": "extern void* g_4092c0;\n
extern void* g_4092c8;\n
\n
long long cgc_fill_buffer()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    g_4092c0 = 0;\n
    g_4092c8 = 0;\n
    if (cgc_receive(v2, v3, v4, v5))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (g_4092c8)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = -2;\n
        return v0;\n
    }\n
}\n
", "4203666:sub_402492": null, "4203680:cgc_get_char": "extern unsigned long long g_4092c0;\n
extern unsigned long long g_4092c8;\n
extern char std_input;\n
\n
long long cgc_get_char(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (g_4092c8 && !(g_4092c8 <= g_4092c0))\n
        goto LABEL_4024ef;\n
    v0 = cgc_fill_buffer();\n
    if (v0)\n
    {\n
        v1 = v0;\n
        return v1;\n
    }\n
LABEL_4024ef:\n
    *(a0) = (&std_input)[24 + g_4092c0];\n
    g_4092c0 = g_4092c0 + 1;\n
    v1 = 0;\n
    return v1;\n
}\n
", "4203817:sub_402529": null, "4203824:cgc_read_until_delim_or_n": "long long cgc_read_until_delim_or_n(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long long *a4)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    char v2;  // [bp-0x39]\n
    void* v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    v3 = 0;\n
    *(a4) = 0;\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v5 = 3;\n
        return v5;\n
    }\n
    else if (a3)\n
    {\n
        v0 = 0;\n
        while (true)\n
        {\n
            if (v0 >= a3)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            v1 = cgc_get_char(&v2);\n
            if (v1)\n
            {\n
                v5 = v1;\n
                return v5;\n
            }\n
            if (a2 && v2 == a2)\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            a1[v0] = v2;\n
            *(a4) = *(a4) + 1;\n
            v0 += 1;\n
        }\n
    }\n
    else\n
    {\n
        v5 = 4;\n
        return v5;\n
    }\n
}\n
", "4204074:sub_40262a": null, "4204080:cgc_read_n_bytes": "long long cgc_read_n_bytes(unsigned long a0, char *a1, unsigned int a2, unsigned long long *a3)\n
{\n
    return cgc_read_until_delim_or_n(a0, a1, 0, a2, a3);\n
}\n
", "4204131:sub_402663": null, "4204144:cgc_transmit_all": "long long cgc_transmit_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!cgc_transmit(a0, a1, a2, v6))\n
        {\n
            v0 = v1 + v0;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204287:sub_4026ff": null, "4204288:cgc_getMSB": "long long cgc_getMSB(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0x80000000;\n
    v0 = 31;\n
    while (true)\n
    {\n
        if (v0 < 0)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        else if (!(a0 & v1))\n
        {\n
            v1 >>= 1;\n
            v0 -= 1;\n
        }\n
        else\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4204380:sub_40275c": null, "4204384:cgc_clearRun": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[252];\n
    unsigned int field_100;\n
    char padding_104[4];\n
    unsigned long long field_108;\n
    unsigned long long field_110;\n
} struct_0;\n
\n
long long cgc_clearRun(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    a0->field_100 = 0;\n
    for (v0 = 0; v0 < 64; v0 += 1)\n
    {\n
        (&a0->field_0)[v0] = 0;\n
    }\n
    a0->field_108 = 0;\n
    a0->field_110 = 0;\n
    return a0;\n
}\n
", "4204484:sub_4027c4": null, "4204496:cgc_initRun": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[252];\n
    unsigned int field_100;\n
    char padding_104[12];\n
    unsigned long long field_110;\n
} struct_0;\n
\n
long long cgc_initRun(struct struct_0 **a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rdx\n
    struct_0 *v7;  // rax\n
\n
    v1 = cgc_allocate(a0, a1, v4);\n
    if (v1)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    v0 = *(a0);\n
    v1 = cgc_allocate(a0, a1, v4);\n
    if (v1)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    v7 = v0;\n
    v7->field_0 = v7->field_0 | 1;\n
    v0->field_100 = a1;\n
    v0->field_110 = 0;\n
    v2 = 0;\n
    return v2;\n
}\n
", "4204662:sub_402876": null, "4204672:cgc_getNextFreeChunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[252];\n
    unsigned int field_100;\n
    char padding_104[12];\n
    unsigned long long field_110;\n
} struct_0;\n
\n
extern struct_0 *pool;\n
\n
long long cgc_getNextFreeChunk(unsigned long a0, unsigned long long *a1)\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    struct_0 *v1;  // [bp-0x80]\n
    struct_0 *v2;  // [bp-0x78]\n
    unsigned int v3;  // [bp-0x6c]\n
    struct_0 *v4;  // [bp-0x68]\n
    unsigned int v5;  // [bp-0x5c]\n
    struct_0 *v6;  // [bp-0x58]\n
    unsigned int v7;  // [bp-0x50]\n
    char v8;  // [bp-0x49]\n
    unsigned long v9;  // [bp-0x48]\n
    unsigned int v10;  // [bp-0x3c]\n
    unsigned int v11;  // [bp-0x38]\n
    unsigned int v12;  // [bp-0x34]\n
    struct_0 *v13;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v14;  // [bp-0x24]\n
    unsigned int v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    unsigned int v17;  // [bp-0xc]\n
    unsigned int v19;  // eax\n
    unsigned int v21;  // eax\n
    unsigned int v23;  // eax\n
    unsigned int v25;  // eax\n
    struct_0 *v27;  // rcx\n
    unsigned long v28;  // rax\n
\n
    v16 = 0;\n
    v15 = 0;\n
    v14 = 0;\n
    v15 = 1 << (a0 & 31);\n
    v14 = (0 CONCAT 0x1000) /m (1 << (a0 & 31));\n
    v13 = &(&pool)[1 + a0]->field_0;\n
    while (true)\n
    {\n
        v8 = 0;\n
        if (v13)\n
        {\n
            v6 = v13;\n
            v19 = v14 - 1;\n
            v7 = (&v6->field_0)[(v19 >> 31 CONCAT v19) /m 32];\n
            v8 = (v7 & (1 << (((v14 - 1 >> 31 CONCAT v14 - 1) /m 32 >> 32) & 31)));\n
        }\n
        if (!(v8 & 1))\n
            break;\n
        v12 = 0;\n
        for (v11 = 0; v11 < v14; v11 += 1)\n
        {\n
            v4 = v13;\n
            v21 = v11;\n
            v5 = (&v4->field_0)[(v21 >> 31 CONCAT v21) /m 32];\n
            if (!(v5 & (1 << (((v11 >> 31 CONCAT v11) /m 32 >> 32) & 31))))\n
            {\n
                v12 = 1;\n
                break;\n
            }\n
        }\n
        if (v12)\n
            break;\n
        v13 = v13->field_110;\n
    }\n
    if (!v13)\n
    {\n
        cgc_initRun(&v13, v15);\n
        *((v13 + 272)) = (&pool)[1 + a0];\n
        (&pool)[1 + a0] = v13;\n
        *(a1) = *((v13 + 264));\n
        v17 = 0;\n
        return v17;\n
    }\n
    v10 = 0;\n
    while (true)\n
    {\n
        if (v10 >= v14)\n
        {\n
            v17 = -42;\n
            return v17;\n
        }\n
        v2 = v13;\n
        v23 = v10;\n
        v3 = (&v2->field_0)[(v23 >> 31 CONCAT v23) /m 32];\n
        if (!(v3 & (1 << (((v10 >> 31 CONCAT v10) /m 32 >> 32) & 31))))\n
        {\n
            v9 = *((v13 + 264));\n
            *(a1) = v9 + v15 * v10;\n
            v0 = 1 << (((v10 >> 31 CONCAT v10) /m 32 >> 32) & 31);\n
            v1 = v13;\n
            v25 = v10;\n
            v27 = (v25 >> 31 CONCAT v25) /m 32;\n
            v28 = v1;\n
            *((v28 + v27 * 4)) = v0 | *((v28 + v27 * 4));\n
            v17 = 0;\n
            return v17;\n
        }\n
        v10 += 1;\n
    }\n
}\n
", "4205391:sub_402b4f": null, "4205392:cgc_getRun": "typedef struct struct_0 {\n
    char padding_0[264];\n
    unsigned long long field_108;\n
    struct struct_0 *field_110;\n
} struct_0;\n
\n
extern struct_0 *pool;\n
\n
long long cgc_getRun(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v1 = 0; v1 < 11; v1 += 1)\n
    {\n
        for (v0 = (&pool)[v1]; v0; v0 = *((v0 + 272)))\n
        {\n
            if (*((v0 + 264)) == a0)\n
            {\n
                v2 = v0;\n
                return v2;\n
            }\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4205539:sub_402be3": null, "4205552:cgc_isClear": "long long cgc_isClear(unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 64)\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (!a0[v0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4205638:sub_402c46": null, "4205648:cgc_malloc": "extern char largeChunks;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x10]\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rdx\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = cgc_getMSB(a0);\n
    if (a0 <= 1 << (v2 & 31) && !(!v2))\n
        goto LABEL_402caf;\n
    v2 += 1;\n
LABEL_402caf:\n
    if (v2 <= 11)\n
    {\n
        v1 = cgc_getNextFreeChunk(v2, &v3);\n
        if (v1)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v4 = v3;\n
        return v4;\n
    }\n
    else\n
    {\n
        for (v0 = largeChunks; v0; v0 = *((v0 + 16)));\n
        v0 = cgc_malloc(24);\n
        v1 = cgc_allocate(24, v6, v7);\n
        if (v1)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        *((v0 + 16)) = largeChunks;\n
        largeChunks = v0;\n
        *(v0) = a0;\n
        v4 = *((v0 + 8));\n
        return v4;\n
    }\n
}\n
", "4205964:sub_402d8c": null, "4205968:cgc_free": "extern char largeChunks;\n
extern char pool;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned long v1;  // [bp-0x50]\n
    char v2;  // [bp-0x41]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned long v5;  // [bp-0x38]\n
    unsigned long v6;  // [bp-0x30]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned long v9;  // [bp-0x20]\n
    unsigned long v10;  // [bp-0x18]\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rsi\n
    unsigned long v15;  // rax\n
    unsigned int v17;  // eax\n
    unsigned long v19;  // rcx\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rsi\n
\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v12 = a0 & 4095;\n
    if (!v12 && largeChunks)\n
    {\n
        v6 = largeChunks;\n
        while (true)\n
        {\n
            v12 = 0;\n
            v2 = 0;\n
            if (v6)\n
            {\n
                v12 = *((v6 + 8));\n
                v2 = v12 != a0;\n
            }\n
            *(&v12) = v2;\n
            if (!(v2 & 1))\n
                break;\n
            v5 = v6;\n
            v6 = *((v6 + 16));\n
        }\n
    }\n
    if (v6)\n
    {\n
        v7 = cgc_deallocate(a0, v13);\n
        if (v7)\n
            cgc__terminate(a0);\n
        *((v6 + 8)) = 0;\n
        *(v6) = 0;\n
        if (!v5)\n
            largeChunks = *((v6 + 16));\n
        else\n
            *((v5 + 16)) = *((v6 + 16));\n
        v12 = cgc_free(v6);\n
        return v12;\n
    }\n
    else\n
    {\n
        for (v4 = 0; v4 < 11; v4 = v12)\n
        {\n
            v3 = 0;\n
            v12 = (&pool)[v4];\n
            v10 = v12;\n
            for (v9 = 0; v10; v10 = v12)\n
            {\n
                v12 = *((v10 + 264));\n
                if (v12 != (a0 & -0x1000))\n
                {\n
                    v9 = v10;\n
                    v12 = *((v10 + 272));\n
                }\n
                else\n
                {\n
                    v3 = 1;\n
                    break;\n
                }\n
            }\n
            if (v3)\n
                break;\n
            v12 = v4 + 1;\n
        }\n
        if (!v10)\n
            return v12;\n
        v15 = a0 - *((v10 + 264));\n
        v8 = (v15 >> 63 CONCAT v15) /m *((v10 + 0x100));\n
        v0 = (1 << (((v8 >> 31 CONCAT v8) /m 32 >> 32) & 31)) ^ -1;\n
        v1 = v10;\n
        v17 = v8;\n
        v19 = (v17 >> 31 CONCAT v17) /m 32;\n
        v20 = v1;\n
        *((v20 + v19 * 4)) = v0 & *((v20 + v19 * 4));\n
        v12 = cgc_isClear(v10);\n
        if (!v12)\n
            return v12;\n
        if (!v9)\n
            (&pool)[v4] = *((v10 + 272));\n
        else\n
            *((v9 + 272)) = *((v10 + 272));\n
        v7 = cgc_deallocate(a0, v21);\n
        if (v7)\n
            cgc__terminate(a0);\n
        cgc_clearRun(v10);\n
        v12 = cgc_deallocate(a0, v21);\n
        v7 = v12;\n
        if (v12)\n
            v12 = cgc__terminate(a0);\n
        v10 = 0;\n
        return v12;\n
    }\n
}\n
", "4206759:sub_4030a7": null, "4206768:cgc_exponential": "long long cgc_exponential()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    int tmp_35;  // tmp #35\n
    int tmp_37;  // tmp #37\n
    int tmp_36;  // tmp #36\n
    unsigned long v1;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long long v3;  // [bp-0x18]\n
    unsigned long v4;  // [bp-0x10]\n
    unsigned long v6;  // xmm0lq\n
\n
    v4 = v6;\n
    v3 = 0x3ff0000000000000;\n
    for (v2 = 1; v2 < 80; v2 += 1)\n
    {\n
        v1 = 0x3ff0000000000000;\n
        for (v0 = 0; v0 < v2; v0 += 1)\n
        {\n
            tmp_35 = DivV(tmp_37, tmp_36);\n
            *(&v1) = tmp_35;\n
        }\n
        s_18 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))))<8>\n
    }\n
    return v2 + 1;\n
}\n
", "4206918:sub_403146": null, "4206928:cgc_ln": "double cgc_ln()\n
{\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0x48]\n
    int tmp_30;  // tmp #30\n
    int tmp_32;  // tmp #32\n
    int tmp_31;  // tmp #31\n
    int tmp_42;  // tmp #42\n
    int tmp_44;  // tmp #44\n
    int tmp_43;  // tmp #43\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned long v2;  // [bp-0x40], Other Possible Types: unsigned long long\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned long long v4;  // [bp-0x30]\n
    unsigned long long v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10]\n
    unsigned long v10;  // xmm0lq\n
    int v11;  // xmm0\n
    int v15;  // xmm0\n
\n
    v8 = v10;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 4604418534313442268;\n
    v4 = 0x3ff0000000000000;\n
    while (true)\n
    {\n
        v11 = 0;\n
        if ((CmpF(v8, 0x4000000000000000) & 1))\n
            break;\n
        tmp_12 = DivV(tmp_14, tmp_13);\n
        *(&v8) = tmp_12;\n
        v6 += 1;\n
    }\n
    for (v3 = 1; v3 < 41; v3 += 1)\n
    {\n
        v2 = 0x3ff0000000000000;\n
        v1 = 1;\n
        for (v0 = 0; v0 < v3; v0 += 1)\n
        {\n
            v1 *= -1;\n
            tmp_30 = SubV(tmp_32, tmp_31);\n
            v2 = (0 CONCAT v2) * tmp_30;\n
        }\n
        v1 *= -1;\n
        tmp_42 = DivV(tmp_44, tmp_43);\n
        v11 = (0 CONCAT v7) + tmp_42;\n
        v7 = v11;\n
    }\n
    *(&v11) = v6;\n
    v15 = v11 * (0 CONCAT v5) + (0 CONCAT v7);\n
    v7 = v15;\n
    return v7;\n
}\n
", "4207234:sub_403282": null, "4207248:cgc_pow": "double cgc_pow()\n
{\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x3c]\n
    void* v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned long v8;  // xmm1lq\n
    unsigned long v9;  // xmm0lq\n
\n
    v6 = 0;\n
    v5 = 1;\n
    v4 = 0x3ff0000000000000;\n
    v3 = 4736919330018096579;\n
    v2 = 0;\n
    cgc_ln();\n
    for (v2 = (0 CONCAT v8) * (0 CONCAT v9); !(CmpF(v2, 0x4034000000000000) & 1); v6 += 1)\n
    {\n
        tmp_12 = SubV(tmp_14, tmp_13);\n
        *(&v2) = tmp_12;\n
    }\n
    for (v1 = 0; v1 < v6; v1 += 1)\n
    {\n
        s_28 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
    }\n
    v0 = v4;\n
    cgc_exponential();\n
    return (0 CONCAT v0) * (0 CONCAT v2);\n
}\n
", "4207496:sub_403388": null, "4207504:cgc_cosine": "long long cgc_cosine()\n
{\n
    char v0;  // [bp-0x35]\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_35;  // tmp #35\n
    int tmp_37;  // tmp #37\n
    int tmp_36;  // tmp #36\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned long v4;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned long long v6;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // xmm0lq\n
    unsigned long long v10;  // al, Other Possible Types: unsigned long, char\n
    int v12;  // xmm0\n
    int v13;  // xmm0\n
\n
    v7 = v9;\n
    v6 = 0x3ff0000000000000;\n
    while (true)\n
    {\n
        v0 = 1;\n
        if ((CmpF(v7, 4618760256179416344) & 1))\n
            v0 = [D] amd64g_calculate_condition(0x3<64>, 0x0<64>, Conv(32->64, ((0xc01921fb54442d18<64> CmpF Load(addr=stack_base-16, size=8, endness=Iend_LE)) & 0x45<32>)), 0x0<64>, cc_ndep<8>);\n
        v10 = v0;\n
        if (!(v0 & 1))\n
            break;\n
        if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) == 1)\n
        {\n
            tmp_7 = SubV(tmp_9, tmp_8);\n
            *(&v7) = tmp_7;\n
        }\n
        else\n
        {\n
            s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x401921fb54442d18<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
        }\n
    }\n
    for (v5 = 1; v5 < 20; v5 = v10)\n
    {\n
        v12 = 0;\n
        v4 = 0x3ff0000000000000;\n
        for (v3 = 0; v3 < (v5 << 1); v3 += 1)\n
        {\n
            tmp_35 = DivV(tmp_37, tmp_36);\n
            v12 = tmp_35;\n
            v4 = v12;\n
        }\n
        v2 = 1;\n
        for (v1 = 0; v1 < v5; v1 += 1)\n
        {\n
            v2 *= -1;\n
        }\n
        *(&v12) = v2;\n
        v13 = v12 * (0 CONCAT v4) + (0 CONCAT v6);\n
        v6 = v13;\n
        v10 = v5 + 1;\n
    }\n
    return v10;\n
}\n
", "4207846:sub_4034e6": null, "4207856:cgc_sine": "long long cgc_sine()\n
{\n
    char v0;  // [bp-0x35]\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_35;  // tmp #35\n
    int tmp_37;  // tmp #37\n
    int tmp_36;  // tmp #36\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned long v4;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // xmm0lq\n
    unsigned long v10;  // al, Other Possible Types: unsigned long long, char\n
    int v12;  // xmm0\n
    int v13;  // xmm0\n
\n
    v7 = v9;\n
    while (true)\n
    {\n
        v0 = 1;\n
        if ((CmpF(v7, 4618760256179416344) & 1))\n
            v0 = [D] amd64g_calculate_condition(0x3<64>, 0x0<64>, Conv(32->64, ((0xc01921fb54442d18<64> CmpF Load(addr=stack_base-16, size=8, endness=Iend_LE)) & 0x45<32>)), 0x0<64>, cc_ndep<8>);\n
        v10 = v0;\n
        if (!(v0 & 1))\n
            break;\n
        if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
        {\n
            s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x401921fb54442d18<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
        }\n
        else\n
        {\n
            tmp_7 = SubV(tmp_9, tmp_8);\n
            *(&v7) = tmp_7;\n
        }\n
    }\n
    v6 = v7;\n
    for (v5 = 1; v5 < 20; v5 = v10)\n
    {\n
        v12 = 0;\n
        v4 = 0x3ff0000000000000;\n
        v3 = 1;\n
        for (v2 = 0; v2 < (v5 << 1) + 1; v2 += 1)\n
        {\n
            tmp_35 = DivV(tmp_37, tmp_36);\n
            v12 = tmp_35;\n
            v4 = v12;\n
        }\n
        for (v1 = 0; v1 < v5; v1 += 1)\n
        {\n
            v3 *= -1;\n
        }\n
        *(&v12) = v3;\n
        v13 = v12 * (0 CONCAT v4) + (0 CONCAT v6);\n
        v6 = v13;\n
        v10 = v5 + 1;\n
    }\n
    return v10;\n
}\n
", "4208198:sub_403646": null, "4208208:cgc_atan": "long long cgc_atan()\n
{\n
    int tmp_61;  // tmp #61\n
    int tmp_63;  // tmp #63\n
    int tmp_62;  // tmp #62\n
    int tmp_46;  // tmp #46\n
    int tmp_48;  // tmp #48\n
    int tmp_47;  // tmp #47\n
    unsigned long v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x54]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    unsigned long v4;  // [bp-0x48], Other Possible Types: unsigned long long\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned long v6;  // [bp-0x38]\n
    unsigned long long v7;  // [bp-0x30]\n
    unsigned long long v8;  // [bp-0x28]\n
    unsigned long v9;  // [bp-0x20]\n
    unsigned long v10;  // [bp-0x10]\n
    unsigned long v12;  // xmm0lq\n
    unsigned long v14;  // rax, Other Possible Types: unsigned long long\n
\n
    v9 = v12;\n
    if ((CmpF(v12, 0x3ff0000000000000) & 1) && (CmpF(0xbff0000000000000, v12) & 1))\n
    {\n
        for (v5 = 1; v5 < 20; v5 = v14)\n
        {\n
            v4 = 0x3ff0000000000000;\n
            v3 = 1;\n
            for (v2 = 0; v2 < (v5 << 1) + 1; v2 += 1)\n
            {\n
                s_48 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-72, size=8, endness=Iend_LE)) * Conv(64->128, xmm0lq<8>)))<8>\n
            }\n
            for (v1 = 0; v1 < v5; v1 += 1)\n
            {\n
                v3 *= -1;\n
            }\n
            tmp_61 = DivV(tmp_63, tmp_62);\n
            v9 = (0 CONCAT v9) + tmp_61;\n
            v14 = v5 + 1;\n
        }\n
        v10 = v9;\n
        return v5 + 1;\n
    }\n
    v8 = 4604775831185873760;\n
    v7 = 4606281698874543309;\n
    tmp_46 = DivV(tmp_48, tmp_47);\n
    *(&v6) = tmp_46;\n
    v0 = v8;\n
    v14 = cgc_atan();\n
    v10 = (0 CONCAT v0) + (0 CONCAT v6);\n
    return v14;\n
}\n
", "4208595:sub_4037d3": null, "4208608:cgc_atanTwo": "long long cgc_atanTwo()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v4;  // xmm1lq\n
    int v7;  // xmm0\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v4, 0) & 69) | ((CmpF(v4, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_12 = DivV(tmp_13, tmp_10);\n
        v10 = cgc_atan();\n
        *(&v1) = tmp_12;\n
        return v10;\n
    }\n
    else if ((((CmpF(0, v4) & 69) | ((CmpF(0, v4) & 69) >> 6)) & 1) == 1)\n
    {\n
        if ((((CmpF(v4, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm1lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
        {\n
            if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
            {\n
                v1 = 4609753056924675352;\n
                return v10;\n
            }\n
            if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
            {\n
                v1 = 13833125093779451160;\n
                return v10;\n
            }\n
        }\n
        v1 = 0x42374876e7ff0000;\n
        return v10;\n
    }\n
    else if ((CmpF(v0, 0) & 1))\n
    {\n
        v10 = cgc_atan();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v10;\n
    }\n
    else\n
    {\n
        tmp_12 = DivV(tmp_13, tmp_10);\n
        v10 = cgc_atan();\n
        v7 = tmp_12 + (0 CONCAT 4614256656552045848);\n
        v1 = v7;\n
        return v10;\n
    }\n
}\n
", "4208896:cgc_sqrt": "double cgc_sqrt()\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_14;  // tmp #14\n
    int tmp_11;  // tmp #11\n
    int tmp_21;  // tmp #21\n
    int tmp_23;  // tmp #23\n
    int tmp_22;  // tmp #22\n
    unsigned long v0;  // [bp-0x30]\n
    int tmp_19;  // tmp #19\n
    int tmp_20;  // tmp #20\n
    unsigned long v1;  // [bp-0x28], Other Possible Types: unsigned long long\n
    unsigned long v2;  // [bp-0x20], Other Possible Types: unsigned long long\n
    unsigned long long v3;  // [bp-0x18]\n
    unsigned long v5;  // xmm0lq\n
    int v8;  // xmm0\n
\n
    v3 = 4562254508917369340;\n
    if ((((CmpF(0x3ff0000000000000, v5) & 69) | ((CmpF(0x3ff0000000000000, v5) & 69) >> 6)) & 1) != 1)\n
    {\n
        v1 = v5;\n
        v2 = 0x3ff0000000000000;\n
    }\n
    else\n
    {\n
        v1 = 0x3ff0000000000000;\n
        v2 = v5;\n
    }\n
    while (true)\n
    {\n
        tmp_13 = SubV(tmp_14, tmp_11);\n
        if ((((CmpF(tmp_13, 4562254508917369340) & 69) | ((CmpF(tmp_13, 4562254508917369340) & 69) >> 6)) & 1) == 1)\n
            break;\n
        tmp_21 = DivV(tmp_23, tmp_22);\n
        *(&v0) = tmp_21;\n
        xmm0<16> = ((0x0<64> CONCAT Load(addr=stack_base-48, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE)))\n
        if ((((CmpF(v8, v5) & 69) | ((CmpF(v8, v5) & 69) >> 6)) & 1) != 1)\n
            v2 = v0;\n
        else\n
            v1 = v0;\n
    }\n
    tmp_19 = DivV(tmp_21, tmp_20);\n
    return tmp_19;\n
}\n
", "4209123:sub_4039e3": null, "4209136:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // rax\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v2 = v0;\n
        v0 = v2 + 1;\n
        if (!v2)\n
            break;\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4209226:sub_403a4a": null, "4209232:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = a1;\n
    }\n
    return a0;\n
}\n
", "4209317:sub_403aa5": null, "4209328:cgc_b16_2w": "extern unsigned long long digits;\n
\n
long long cgc_b16_2w(char a0[5], unsigned long a1)\n
{\n
    char v0;  // [bp-0x1e]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a1;\n
    cgc_bzero(&v0, 0);\n
    if (v1 > 255)\n
    {\n
        a0[0] = 124;\n
        a0[1] = 66;\n
        a0[2] = 65;\n
        a0[3] = 68;\n
        a0[4] = 124;\n
        v2 = 5;\n
        return v2;\n
    }\n
    a0[0] = 48;\n
    a0[1] = 120;\n
    if (!v1)\n
    {\n
        a0[2] = 48;\n
        a0[3] = 48;\n
        v2 = 4;\n
        return v2;\n
    }\n
    a0[3] = *((digits + (v1 & 15)));\n
    v1 >>= 4;\n
    a0[2] = *((digits + (v1 & 15)));\n
    v2 = 4;\n
    return v2;\n
}\n
", "4209546:sub_403b8a": null, "4209552:cgc_b10_int": "extern struct_0 *digits;\n
\n
long long cgc_b10_int(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x48]\n
    char v1;  // [bp-0x39]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    char v5;  // [bp-0x29]\n
    unsigned int v6;  // [bp-0x1c], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0xc]\n
    char v8;  // [bp-0x8]\n
    unsigned long long v10;  // rbp\n
    unsigned int v11;  // eax\n
\n
    v10 = &v8;\n
    v6 = a1;\n
    cgc_bzero(&v5, 13);\n
    if (!v6)\n
    {\n
        *(a0) = 48;\n
        v7 = 1;\n
        return v7;\n
    }\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v6 < 0)\n
    {\n
        *(a0) = 45;\n
        v6 *= -1;\n
        v3 += 1;\n
    }\n
    v4 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v4 < 11)\n
            v1 = v6;\n
        if (!(v1 & 1))\n
            break;\n
        v0 = &digits->field_0;\n
        (&v5)[v4] = v0[(v6 >> 31 CONCAT v6) /m 10 >> 32];\n
        v11 = v6;\n
        v6 = (v11 >> 31 CONCAT v11) /m 10;\n
        v4 += 1;\n
    }\n
    v2 = v4;\n
    for (v4 = v2; v4 > 0; v4 -= 1)\n
    {\n
        a0[1 + v4 + v3] = (&v5)[v2 + -1 * v4];\n
    }\n
    v7 = v2 + v3;\n
    return v7;\n
}\n
", "4209865:sub_403cc9": null, "4209872:cgc_b10_uint": "extern struct_0 *digits;\n
\n
long long cgc_b10_uint(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x31]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    char v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0xc]\n
    char v7;  // [bp-0x8]\n
    unsigned long long v9;  // rbp\n
\n
    v9 = &v7;\n
    v5 = a1;\n
    cgc_bzero(&v4, 12);\n
    if (!v5)\n
    {\n
        *(a0) = 48;\n
        v6 = 1;\n
        return v6;\n
    }\n
    v3 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v3 < 10)\n
            v1 = v5;\n
        if (!(v1 & 1))\n
            break;\n
        v0 = &digits->field_0;\n
        (&v4)[v3] = v0[(0 CONCAT v5) /m 10 >> 32];\n
        v5 = (0 CONCAT v5) /m 10;\n
        v3 += 1;\n
    }\n
    v2 = v3;\n
    for (v3 = v2; v3 > 0; v3 -= 1)\n
    {\n
        a0[1 + v3] = (&v4)[v2 + -1 * v3];\n
    }\n
    v6 = v2;\n
    return v6;\n
}\n
", "4210126:sub_403dce": null, "4210128:cgc_db_4p": "extern struct_0 *digits;\n
\n
long long cgc_db_4p(char *a0)\n
{\n
    char *v0;  // [bp-0x60]\n
    int tmp_74;  // tmp #74\n
    int tmp_76;  // tmp #76\n
    int tmp_75;  // tmp #75\n
    int tmp_49;  // tmp #49\n
    char v1;  // [bp-0x51]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    char v4;  // [bp-0x48]\n
    int v5;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // xmm0lq\n
    unsigned long long v9;  // xmm0lq\n
    unsigned long long v11;  // rcx\n
    unsigned long long v13;  // xmm0\n
    int v14;  // xmm0\n
    unsigned long long v15;  // xmm2\n
    unsigned long long v16;  // xmm0\n
    int v17;  // xmm0\n
\n
    v5 = v8;\n
    cgc_bzero(&v4, 40);\n
    v9 = v5;\n
    if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        *(a0) = 48;\n
        *(a0) = 46;\n
        *(a0) = 48;\n
        v6 = 3;\n
        return v6;\n
    }\n
    v3 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v3 < 10)\n
            v1 = [D] amd64g_calculate_condition(0x3<64>, 0x0<64>, Conv(32->64, ((Load(addr=stack_base-32, size=8, endness=Iend_LE) CmpF 0x3ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>);\n
        if (!(v1 & 1))\n
            break;\n
        v0 = &digits->field_0;\n
        (&v4)[v3] = v0[(0 CONCAT v5) /m 10 >> 32];\n
        tmp_74 = DivV(tmp_76, tmp_75);\n
        *(&v5) = tmp_74;\n
        v3 += 1;\n
    }\n
    v2 = v3;\n
    for (v3 = v2; v3 > 0; v3 -= 1)\n
    {\n
        v11 = v3;\n
        tmp_49 = (&v4)[v2 + -1 * v11];\n
        a0[1 + v11] = tmp_49;\n
        v13 = 0;\n
        v13 = v5;\n
        v14 = v13 * (0 CONCAT 0x4024000000000000) + (0 CONCAT v13 * (0 CONCAT 0x4024000000000000) ^ 0x8000000000000000);\n
        v5 = v14;\n
    }\n
    a0[v2] = 46;\n
    v2 += 1;\n
    for (v3 = 0; v3 < 4; v3 += 1)\n
    {\n
        v15 = 0;\n
        v15 = 0x4024000000000000;\n
        a0[v2] = digits[(0 CONCAT v5) * v15].field_0;\n
        v16 = 0;\n
        v16 = v5;\n
        v17 = v16 * (0 CONCAT 0x4024000000000000) + (0 CONCAT v16 * v15 ^ 0x8000000000000000);\n
        v5 = v17;\n
        v2 += 1;\n
    }\n
    v6 = v2;\n
    return v6;\n
}\n
", "4210684:sub_403ffc": null, "4210688:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(unsigned long a0, char *a1, struct_1 *a2)\n
{\n
    unsigned int *v0;  // [bp-0x100], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xf8]\n
    unsigned int v2;  // [bp-0xec]\n
    unsigned int *v3;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0xe0]\n
    unsigned int *v5;  // [bp-0xd8]\n
    unsigned int v6;  // [bp-0xcc]\n
    unsigned int *v7;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0xc0]\n
    unsigned int v9;  // [bp-0xb4]\n
    unsigned int *v10;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v11;  // [bp-0xa8]\n
    unsigned int v12;  // [bp-0x9c]\n
    struct struct_0 **v13;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_1 *v14;  // [bp-0x90]\n
    unsigned int v15;  // [bp-0x84]\n
    struct struct_0 **v16;  // [bp-0x80]\n
    struct_1 *v17;  // [bp-0x78]\n
    unsigned int v18;  // [bp-0x6c]\n
    unsigned long v19;  // [bp-0x68]\n
    unsigned int v20;  // [bp-0x5c]\n
    unsigned int v21;  // [bp-0x58]\n
    unsigned int v22;  // [bp-0x54]\n
    unsigned int v23;  // [bp-0x44]\n
    unsigned long v24;  // [bp-0x40]\n
    char v25;  // [bp-0x32]\n
    char v26;  // [bp-0x31]\n
    unsigned int v27;  // [bp-0x30]\n
    unsigned int v28;  // [bp-0x2c]\n
    char *v29;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_1 *v30;  // [bp-0x20]\n
    char *v32;  // rcx\n
    struct_1 *v33;  // rcx\n
    unsigned long long v34;  // rdx\n
    struct struct_0 **v35;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v36;  // rcx\n
    struct_1 *v37;  // rcx\n
    unsigned long long v38;  // rdx\n
    struct struct_0 **v39;  // rax\n
    struct_1 *v40;  // rcx\n
    struct struct_0 **v41;  // rdx\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax\n
    struct_1 *v45;  // rcx\n
    unsigned int *v46;  // rdx\n
    struct_1 *v47;  // rcx\n
    unsigned long long v48;  // rdx\n
    unsigned int *v49;  // rax\n
    struct_1 *v50;  // rcx\n
    unsigned int *v51;  // rdx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    struct_1 *v56;  // rcx\n
    unsigned long long v57;  // rdx\n
    unsigned int *v58;  // rax\n
    struct_1 *v59;  // rcx\n
    unsigned int *v60;  // rdx\n
    unsigned long v61;  // rcx\n
\n
    v30 = a2;\n
    v22 = 0;\n
    for (v21 = 0; a1[v22]; v22 += 1)\n
    {\n
        if (a1[v22] != 33)\n
        {\n
            v32 = v21;\n
            v21 = v32 + 1;\n
            v32[a0] = a1[v22];\n
        }\n
        else\n
        {\n
            v22 += 1;\n
            v19 = a1[v22] - 67;\n
            switch (v19)\n
            {\n
            case 0:\n
                v8 = v30;\n
                v9 = v8->field_0;\n
                if (v9 > 40)\n
                {\n
                    v50 = v8;\n
                    v51 = v50->field_8;\n
                    v50->field_8 = &v51[2];\n
                    v7 = v51;\n
                }\n
                else\n
                {\n
                    v47 = v8;\n
                    v48 = v9;\n
                    v49 = v48 + v47->field_10;\n
                    v47->field_0 = v48 + 8;\n
                    v7 = v49;\n
                }\n
                v25 = *(v7);\n
                *((a0 + v21)) = v25;\n
                v21 += 1;\n
                break;\n
            case 1:\n
                v4 = v30;\n
                v5 = &v4->field_4;\n
                v6 = v4->field_4;\n
                if (v6 > 160)\n
                {\n
                    v54 = v4;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v3 = v55;\n
                }\n
                else\n
                {\n
                    v52 = v6;\n
                    v53 = v52 + v4->field_10;\n
                    *(v5) = v52 + 16;\n
                    v3 = v53;\n
                }\n
                v24 = *(v3);\n
                v23 = cgc_db_4p(a0 + v21);\n
                v21 = v23 + v21;\n
                break;\n
            case 5:\n
                v11 = v30;\n
                v12 = v11->field_0;\n
                if (v12 > 40)\n
                {\n
                    v45 = v11;\n
                    v46 = v45->field_8;\n
                    v45->field_8 = &v46[2];\n
                    v10 = v46;\n
                }\n
                else\n
                {\n
                    v42 = v11;\n
                    v43 = v12;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                    v10 = v44;\n
                }\n
                v26 = *(v10);\n
                v23 = cgc_b16_2w(a0 + v21, v26);\n
                v21 = v23 + v21;\n
                break;\n
            case 6:\n
                v1 = v30;\n
                v2 = v1->field_0;\n
                if (v2 > 40)\n
                {\n
                    v59 = v1;\n
                    v60 = v59->field_8;\n
                    v59->field_8 = &v60[2];\n
                    v0 = v60;\n
                }\n
                else\n
                {\n
                    v56 = v1;\n
                    v57 = v2;\n
                    v58 = v57 + v56->field_10;\n
                    v56->field_0 = v57 + 8;\n
                    v0 = v58;\n
                }\n
                v28 = *(v0);\n
                v23 = cgc_b10_int(a0 + v21, v28);\n
                v21 = v23 + v21;\n
                break;\n
            case 18:\n
                v14 = v30;\n
                v15 = v14->field_0;\n
                if (v15 > 40)\n
                {\n
                    v40 = v14;\n
                    v41 = v40->field_8;\n
                    v40->field_8 = &v41[1];\n
                    v13 = v41;\n
                }\n
                else\n
                {\n
                    v37 = v14;\n
                    v38 = v15;\n
                    v39 = v38 + v37->field_10;\n
                    v37->field_0 = v38 + 8;\n
                    v13 = v39;\n
                }\n
                v27 = *(v13);\n
                v23 = cgc_b10_uint(a0 + v21, v27);\n
                v21 = v23 + v21;\n
                break;\n
            case 21:\n
                v17 = v30;\n
                v18 = v17->field_0;\n
                if (v18 > 40)\n
                {\n
                    v36 = v17;\n
                    v35 = v36->field_8;\n
                    v36->field_8 = v35 + 8;\n
                }\n
                else\n
                {\n
                    v33 = v17;\n
                    v34 = v18;\n
                    v35 = v34 + v33->field_10;\n
                    v33->field_0 = v34 + 8;\n
                }\n
                v16 = v35;\n
                v29 = &*(v16)->field_0;\n
                if (!v29)\n
                    v29 = \"|BAD|\";\n
                v23 = cgc_strlen(v29);\n
                for (v20 = v23; v20 > 0; v20 -= 1)\n
                {\n
                    v61 = v21;\n
                    v21 = v61 + 1;\n
                    *((a0 + v61)) = *((v29 + v23 - v20));\n
                }\n
            default:\n
                break;\n
            }\n
        }\n
    }\n
    return v21;\n
}\n
", "4211818:sub_40446a": null, "4211824:cgc_sprintf": "long long cgc_sprintf(unsigned int a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4211985:sub_404511": null, "4212000:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    for (v0 = 0; a0[v0]; v0 += 1);\n
    return v0;\n
}\n
", "4212052:sub_404554": null, "4212064:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (a0[v0] != a1[v0])\n
            break;\n
        if (!a0[v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
    if (a0[v0] < a1[v0])\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4212258:sub_404622": null, "4212272:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (*(a0) == a1)\n
        {\n
            v1 = &a0[v0];\n
            return v1;\n
        }\n
        if (!a0[1 + v0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4212390:sub_4046a6": null, "4212400:cgc_strspn": "long long cgc_strspn(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x25]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a0[v1])\n
            v0 = cgc_strchr(a1, a0[v1]);\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4212545:sub_404741": null, "4212560:cgc_strcspn": "long long cgc_strcspn(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!a0[v0])\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
        else if (!cgc_strchr(a1, a0[v0]))\n
        {\n
            v0 += 1;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4212705:sub_4047e1": null, "4212720:cgc_strtok": "extern struct_0 *cgc_strtok.ptr;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    char *v2;  // [bp-0x18]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    if (v2)\n
    {\n
        cgc_strtok.ptr = v2;\n
    }\n
    else if (!cgc_strtok.ptr)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = cgc_strspn(cgc_strtok.ptr, a1);\n
    v2 = &cgc_strtok.ptr[v1].field_0;\n
    v0 = cgc_strcspn(v2, a1);\n
    cgc_strtok.ptr = &v2[v0];\n
    if (cgc_strtok.ptr == v2)\n
    {\n
        cgc_strtok.ptr = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!cgc_strtok.ptr->field_0)\n
    {\n
        cgc_strtok.ptr = 0;\n
    }\n
    else\n
    {\n
        cgc_strtok.ptr->field_0 = 0;\n
        cgc_strtok.ptr = cgc_strtok.ptr + 1;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4212988:sub_4048fc": null, "4212992:cgc_newMap": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_newMap(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    struct_0 *v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x18]\n
    unsigned long v10;  // [bp-0x10]\n
    unsigned long long v12;  // rax\n
\n
    v10 = a0;\n
    v9 = a1;\n
    v7 = v10;\n
    v6 = v9;\n
    v5 = *((&v10 + 4));\n
    v4 = *((&v9 + 4));\n
    v8 = cgc_malloc(32);\n
    if (!v8)\n
        cgc__terminate(32);\n
    v8->field_0 = v10;\n
    v8->field_8 = v9;\n
    v3 = v6 - v7 + 1;\n
    v2 = v4 - v5 + 1;\n
    v12 = cgc_malloc(v2 * v3 * 4);\n
    v8->field_18 = v12;\n
    if (!v12)\n
        cgc__terminate(a0);\n
    for (v1 = 0; v1 <= v3; v1 += 1)\n
    {\n
        for (v0 = 0; v0 <= v2; v0 += 1)\n
        {\n
            *((v8->field_18 + v3 * v0 * 4 + v1 * 4)) = -1;\n
        }\n
    }\n
    v8->field_10 = v3;\n
    v8->field_14 = v2;\n
    return v8;\n
}\n
", "4213297:sub_404a31": null, "4213312:cgc_freeMap": "long long cgc_freeMap(struct struct_0 **a0)\n
{\n
    unsigned int v0[7];  // [bp-0x18], Other Possible Types: void*\n
    unsigned long long v2;  // rax\n
\n
    *(&v0[0]) = *(a0);\n
    v0[4] = 0;\n
    v0[5] = 0;\n
    cgc_free(*(&v0[6]));\n
    *(&v0[6]) = 0;\n
    v0[2] = 0;\n
    v0[3] = 0;\n
    v0[0] = 0;\n
    v0[1] = 0;\n
    v2 = cgc_free(v0);\n
    v0 = 0;\n
    return v2;\n
}\n
", "4213448:sub_404ac8": null, "4213456:cgc_inBounds": "long long cgc_inBounds(unsigned int a0[4], unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a1 >= a0[0] && a1 <= a0[2] && a2 >= a0[1] && a2 <= a0[3])\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4213557:sub_404b35": null, "4213568:cgc_copyMap": "long long cgc_copyMap(unsigned long a0, unsigned int a1[4])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long v3;  // [bp-0x10]\n
\n
    v3 = a0;\n
    for (v1 = a1[0]; v1 <= a1[2]; v1 += 1)\n
    {\n
        for (v0 = a1[1]; v0 <= a1[3]; v0 += 1)\n
        {\n
            v2 = cgc_getCoordinate(a1, v1, v0);\n
            cgc_setCoordinate(&v3, v1, v0, v2);\n
        }\n
    }\n
    return v1;\n
}\n
", "4213710:sub_404bce": null, "4213712:cgc_getCoordinate": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    char padding_14[4];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_getCoordinate(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (!cgc_inBounds(a0, a1, a2))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = a1 - a0->field_0 + 1;\n
    v0 = a2 - a0->field_4 + 1;\n
    v2 = *((a0->field_18 + a0->field_10 * v0 * 4 + v1 * 4));\n
    return v2;\n
}\n
", "4213843:sub_404c53": null, "4213856:cgc_setCoordinate": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    char padding_14[4];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_setCoordinate(struct struct_0 **a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int *v4;  // rax\n
\n
    if (*(a0) && !(!cgc_inBounds(*(a0), a1, a2)))\n
        goto LABEL_404cad;\n
    cgc_addCoordinate(a0, a1, a2);\n
LABEL_404cad:\n
    v0 = *(a0);\n
    v2 = a1 - v0->field_0 + 1;\n
    v1 = a2 - v0->field_4 + 1;\n
    v4 = v0->field_18 + v0->field_10 * v1 * 4;\n
    v4[v2] = a3;\n
    return v4;\n
}\n
", "4214018:sub_404d02": null, "4214032:cgc_addCoordinate": "long long cgc_addCoordinate(struct struct_0 **a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0[4];  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    struct struct_0 **v7;  // rax, Other Possible Types: unsigned long\n
\n
    *(&v0[0]) = *(a0);\n
    if (!v0)\n
    {\n
        v4 = a1;\n
        v5 = a2;\n
        v2 = a1;\n
        v3 = a2;\n
        *(a0) = cgc_newMap(*(&v4), *(&v2));\n
        return a0;\n
    }\n
    v7 = cgc_inBounds(v0, a1, a2);\n
    if (v7)\n
        return v7;\n
    if (a1 < v0[0])\n
    {\n
        v4 = a1;\n
        v2 = v0[2];\n
    }\n
    else if (a1 <= v0[2])\n
    {\n
        v4 = v0[0];\n
        v2 = v0[2];\n
    }\n
    else\n
    {\n
        v2 = a1;\n
        v4 = v0[0];\n
    }\n
    if (a2 < v0[1])\n
    {\n
        v5 = a2;\n
        v3 = v0[3];\n
    }\n
    else if (a2 <= v0[3])\n
    {\n
        v5 = v0[1];\n
        v3 = v0[3];\n
    }\n
    else\n
    {\n
        v3 = a2;\n
        v5 = v0[1];\n
    }\n
    *(&v1) = cgc_newMap(*(&v4), *(&v2));\n
    cgc_copyMap(*(&v1), *(a0));\n
    cgc_freeMap(a0);\n
    *(a0) = *(&v1);\n
    return a0;\n
}\n
", "4214407:sub_404e87": null, "4214416:cgc_getRandomNumber": "extern unsigned int cgc_flag_idx;\n
\n
long long cgc_getRandomNumber(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned long v5;  // rcx\n
\n
    v0 = 0x4347c000;\n
    v1 = a1 - a0 + 1;\n
    v5 = cgc_flag_idx;\n
    cgc_flag_idx = cgc_flag_idx + 1;\n
    v2 = v0[v5];\n
    if (cgc_flag_idx == 200)\n
        cgc_flag_idx = 0;\n
    v3 = (v2 >> 31 CONCAT v2) /m v1 >> 32;\n
    v3 += a0;\n
    return v3;\n
}\n
", "4214527:sub_404eff": null, "4214528:cgc_initRandomBuffer": "long long cgc_initRandomBuffer()\n
{\n
    unsigned long long v1;  // rdi\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v4 = cgc_random(v1, v2, v3);\n
    if (v4)\n
    {\n
        v4 = cgc__terminate(v1);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4214574:sub_404f2e": null, "4214576:cgc_initHarborChase": "long long cgc_initHarborChase(unsigned int a0[2])\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = cgc_getRandomNumber(4294967287, 9);\n
    v0 = v2 + 9;\n
    switch (v0)\n
    {\n
    case 0:\n
        v1 = cgc_getRandomNumber(4294967287, 4294967288);\n
        break;\n
    case 1:\n
        v2 = 247;\n
        v1 = cgc_getRandomNumber(4294967287, 4294967288);\n
        break;\n
    case 2:\n
        v1 = cgc_getRandomNumber(4294967289, 4294967291);\n
        break;\n
    case 3:\n
        v1 = cgc_getRandomNumber(4294967286, 4294967291);\n
        break;\n
    case 4:\n
        v1 = cgc_getRandomNumber(4294967286, 4294967293);\n
        break;\n
    case 5:\n
        v1 = cgc_getRandomNumber(4294967288, 4294967293);\n
        break;\n
    case 6:\n
        v1 = cgc_getRandomNumber(4294967286, 4294967294);\n
        break;\n
    case 7:\n
        v1 = cgc_getRandomNumber(4294967286, 0);\n
        break;\n
    case 8:\n
        v1 = cgc_getRandomNumber(4294967287, 0);\n
        if (v1 == -1)\n
            v1 = 254;\n
        if (!v1)\n
            v1 = 254;\n
        break;\n
    case 9:\n
        v1 = cgc_getRandomNumber(4294967287, 0);\n
        if (v1 < 0 && v1 > -2)\n
            v1 = 254;\n
        if (v1 >= 0 && v1 < 2)\n
            v1 = 254;\n
        break;\n
    case 10:\n
        v1 = cgc_getRandomNumber(4294967287, 0);\n
        if (!v1)\n
            v1 = 253;\n
        if (v1 == 1)\n
            v1 = 253;\n
        break;\n
    case 11:\n
        v1 = cgc_getRandomNumber(4294967287, 4);\n
        break;\n
    case 12:\n
        v1 = cgc_getRandomNumber(4294967288, 4);\n
        break;\n
    case 13:\n
        v1 = cgc_getRandomNumber(4294967289, 5);\n
        break;\n
    case 14:\n
        v1 = cgc_getRandomNumber(4294967291, 6);\n
        break;\n
    case 15:\n
        v1 = cgc_getRandomNumber(0xfffffffc, 6);\n
        break;\n
    case 16:\n
        v1 = cgc_getRandomNumber(4294967291, 6);\n
        break;\n
    case 17:\n
        v1 = cgc_getRandomNumber(0, 1);\n
        break;\n
    case 18:\n
        v1 = cgc_getRandomNumber(0, 1);\n
        break;\n
    default:\n
        cgc__terminate(4294967287);\n
    }\n
    a0[0] = v2;\n
    a0[1] = v1;\n
    return a0;\n
}\n
", "4215244:sub_4051cc": null, "4215248:cgc_initCarChase": "long long cgc_initCarChase(unsigned int a0[2])\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = cgc_getRandomNumber(4294967294, 7);\n
    v0 = v2 + 2;\n
    switch (v0)\n
    {\n
    case 0:\n
        v1 = 255;\n
        break;\n
    case 1:\n
        v1 = cgc_getRandomNumber(4294967293, 3);\n
        if (v1 < 0 && v1 > -2)\n
            v1 = 254;\n
        if (v1 > 0 && v1 < 2)\n
            v1 = 2;\n
        break;\n
    case 2:\n
        v1 = cgc_getRandomNumber(4294967291, 5);\n
        if (v1 < 0 && v1 > -2)\n
            v1 = 254;\n
        if (v1 >= 0 && v1 < 2)\n
            v1 = 2;\n
        break;\n
    case 3:\n
        v1 = cgc_getRandomNumber(4294967291, 7);\n
        if (v1 < 0 && v1 > -2)\n
            v1 = 254;\n
        if (v1 > 0 && v1 < 2)\n
            v1 = 2;\n
        break;\n
    case 4:\n
        v1 = cgc_getRandomNumber(0xfffffffc, 7);\n
        break;\n
    case 5:\n
        v1 = cgc_getRandomNumber(0xfffffffc, 5);\n
        break;\n
    case 6:\n
        v1 = cgc_getRandomNumber(4294967293, 3);\n
        break;\n
    case 7:\n
        v1 = cgc_getRandomNumber(4294967293, 1);\n
        break;\n
    case 8:\n
        v1 = cgc_getRandomNumber(4294967294, 4294967295);\n
        break;\n
    case 9:\n
        v1 = cgc_getRandomNumber(4294967294, 4294967295);\n
        break;\n
    default:\n
        cgc__terminate(4294967294);\n
    }\n
    a0[0] = v2;\n
    a0[1] = v1;\n
    return a0;\n
}\n
", "4215761:sub_4053d1": null, "4215776:cgc_getsAway": "long long cgc_getsAway(unsigned long a0, void* a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    if (cgc_getCoordinate(a1, v0, *((&v0 + 4))) == -1)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4215844:sub_405424": null, "4215856:cgc_isCaught": "long long cgc_isCaught(unsigned long a0, void* a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    if (!cgc_getCoordinate(a1, v0, *((&v0 + 4))))\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4215924:sub_405474": null, "4215936:cgc_moveCriminalInBoat": "long long cgc_moveCriminalInBoat(unsigned int a0[2], void* a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
\n
    v3 = 0;\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] + 1, a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] + 1;\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1] + 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1] + 1;\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] - 1, a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] - 1;\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1] - 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1] - 1;\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] + 1, a0[1] + 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] + 1;\n
        v1 = a0[1] + 1;\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] - 1, a0[1] - 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] - 1;\n
        v1 = a0[1] - 1;\n
    }\n
    a0[0] = v2;\n
    a0[1] = v1;\n
    return a0;\n
}\n
", "4216466:sub_405692": null, "4216480:cgc_moveCriminalInCar": "long long cgc_moveCriminalInCar(unsigned int a0[2], void* a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
\n
    v3 = 0;\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] + 1, a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] + 1;\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1] + 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1] + 1;\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0] - 1, a0[1]);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0] - 1;\n
        v1 = a0[1];\n
    }\n
    v0 = cgc_getCoordinate(a1, a0[0], a0[1] - 1);\n
    if (v0 > v3)\n
    {\n
        v3 = v0;\n
        v2 = a0[0];\n
        v1 = a0[1] - 1;\n
    }\n
    a0[0] = v2;\n
    a0[1] = v1;\n
    return a0;\n
}\n
", "4216862:sub_40581e": null, "4216864:cgc_moveLeftInBoat": "long long cgc_moveLeftInBoat(unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = a0[1];\n
    v0 = a0[1] - a0[0];\n
    a0[0] = v1 - 2;\n
    a0[1] = v0 - 2;\n
    return a0;\n
}\n
", "4216925:sub_40585d": null, "4216928:cgc_moveForwardInBoat": "long long cgc_moveForwardInBoat(unsigned int a0[2])\n
{\n
    a0[0] = a0[0] - 2;\n
    a0[1] = a0[1] - 2;\n
    return a0;\n
}\n
", "4216970:sub_40588a": null, "4216976:cgc_moveRightInBoat": "long long cgc_moveRightInBoat(unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = a0[0] - a0[1];\n
    v0 = a0[0];\n
    a0[0] = v1 - 2;\n
    a0[1] = v0 - 2;\n
    return a0;\n
}\n
", "4217036:sub_4058cc": null, "4217040:cgc_moveForwardInCar": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
long long cgc_moveForwardInCar(struct_0 *a0)\n
{\n
    a0->field_4 = a0->field_4 - 2;\n
    return a0;\n
}\n
", "4217067:sub_4058eb": null, "4217072:cgc_moveRightInCar": "long long cgc_moveRightInCar(unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = a0[1] * -1;\n
    v0 = a0[0] - 2;\n
    a0[0] = v1;\n
    a0[1] = v0;\n
    return a0;\n
}\n
", "4217124:sub_405924": null, "4217136:cgc_getMoveInBoat": "long long cgc_getMoveInBoat(unsigned int a0[2])\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x12]\n
    unsigned long long v3;  // rax, Other Possible Types: unsigned long\n
\n
    if (cgc_read_until_delim_or_n(0, &v1, 35, 2, &v0))\n
        cgc__terminate(0);\n
    if (v1 == 82)\n
    {\n
        v3 = cgc_moveRightInBoat(a0);\n
        return v3;\n
    }\n
    if (v1 == 70)\n
    {\n
        v3 = cgc_moveForwardInBoat(a0);\n
    }\n
    else\n
    {\n
        v3 = v1;\n
        if (v3 == 76)\n
            v3 = cgc_moveLeftInBoat(a0);\n
    }\n
    return v3;\n
}\n
", "4217284:sub_4059c4": null, "4217296:cgc_getMoveInCar": "long long cgc_getMoveInCar(void* a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x12]\n
    unsigned long long v3;  // rax, Other Possible Types: unsigned long\n
\n
    if (cgc_read_until_delim_or_n(0, &v1, 35, 2, &v0))\n
        cgc__terminate(0);\n
    if (v1 == 82)\n
    {\n
        v3 = cgc_moveRightInCar(a0);\n
        return v3;\n
    }\n
    v3 = v1;\n
    if (v3 != 70)\n
        return v3;\n
    v3 = cgc_moveForwardInCar(a0);\n
}\n
", "4217412:sub_405a44": null, "4217424:cgc_initHarborMap": "long long cgc_initHarborMap(struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v0 = 0;\n
    v1 = 0;\n
    cgc_setCoordinate(a0, 4294967295, 0, v1);\n
    cgc_setCoordinate(a0, 0, 0, v1);\n
    cgc_setCoordinate(a0, 1, 0, v1);\n
    cgc_setCoordinate(a0, 0, 4294967295, v1);\n
    cgc_setCoordinate(a0, 0, 1, v1);\n
    cgc_setCoordinate(a0, 1, 1, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967295, v1);\n
    v1 = 1;\n
    cgc_setCoordinate(a0, 4294967295, 1, v1);\n
    cgc_setCoordinate(a0, 4294967295, 2, v1);\n
    cgc_setCoordinate(a0, 0, 2, v1);\n
    cgc_setCoordinate(a0, 0, 3, v1);\n
    cgc_setCoordinate(a0, 1, 2, v1);\n
    cgc_setCoordinate(a0, 1, 3, v1);\n
    cgc_setCoordinate(a0, 1, 4294967295, v1);\n
    cgc_setCoordinate(a0, 2, 4294967295, v1);\n
    cgc_setCoordinate(a0, 2, 0, v1);\n
    cgc_setCoordinate(a0, 2, 1, v1);\n
    cgc_setCoordinate(a0, 2, 2, v1);\n
    cgc_setCoordinate(a0, 2, 3, v1);\n
    cgc_setCoordinate(a0, 3, 0, v1);\n
    cgc_setCoordinate(a0, 3, 1, v1);\n
    cgc_setCoordinate(a0, 3, 2, v1);\n
    cgc_setCoordinate(a0, 3, 3, v1);\n
    v1 = 2;\n
    cgc_setCoordinate(a0, 2, 4, v1);\n
    cgc_setCoordinate(a0, 2, 4294967294, v1);\n
    cgc_setCoordinate(a0, 3, 4, v1);\n
    cgc_setCoordinate(a0, 3, 4294967295, v1);\n
    cgc_setCoordinate(a0, 4, 0, v1);\n
    cgc_setCoordinate(a0, 4, 1, v1);\n
    cgc_setCoordinate(a0, 4, 2, v1);\n
    cgc_setCoordinate(a0, 4, 3, v1);\n
    cgc_setCoordinate(a0, 4, 4, v1);\n
    v1 = 3;\n
    cgc_setCoordinate(a0, 4, 5, v1);\n
    cgc_setCoordinate(a0, 2, 4294967293, v1);\n
    cgc_setCoordinate(a0, 3, 4294967294, v1);\n
    cgc_setCoordinate(a0, 4, 4294967295, v1);\n
    cgc_setCoordinate(a0, 5, 0, v1);\n
    cgc_setCoordinate(a0, 5, 1, v1);\n
    cgc_setCoordinate(a0, 5, 2, v1);\n
    cgc_setCoordinate(a0, 5, 3, v1);\n
    cgc_setCoordinate(a0, 5, 4, v1);\n
    cgc_setCoordinate(a0, 5, 5, v1);\n
    v1 = 4;\n
    cgc_setCoordinate(a0, 1, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 2, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 3, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4, 4294967294, v1);\n
    cgc_setCoordinate(a0, 5, 4294967295, v1);\n
    cgc_setCoordinate(a0, 6, 0, v1);\n
    cgc_setCoordinate(a0, 6, 1, v1);\n
    cgc_setCoordinate(a0, 6, 2, v1);\n
    cgc_setCoordinate(a0, 6, 3, v1);\n
    cgc_setCoordinate(a0, 6, 4, v1);\n
    cgc_setCoordinate(a0, 6, 5, v1);\n
    cgc_setCoordinate(a0, 6, 6, v1);\n
    cgc_setCoordinate(a0, 5, 6, v1);\n
    v1 = 5;\n
    cgc_setCoordinate(a0, 0, 4294967291, v1);\n
    cgc_setCoordinate(a0, 1, 4294967291, v1);\n
    cgc_setCoordinate(a0, 2, 4294967291, v1);\n
    cgc_setCoordinate(a0, 3, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4, 4294967293, v1);\n
    cgc_setCoordinate(a0, 5, 4294967294, v1);\n
    cgc_setCoordinate(a0, 6, 4294967295, v1);\n
    cgc_setCoordinate(a0, 7, 0, v1);\n
    cgc_setCoordinate(a0, 7, 1, v1);\n
    cgc_setCoordinate(a0, 7, 2, v1);\n
    cgc_setCoordinate(a0, 7, 3, v1);\n
    cgc_setCoordinate(a0, 7, 4, v1);\n
    cgc_setCoordinate(a0, 7, 5, v1);\n
    cgc_setCoordinate(a0, 7, 6, v1);\n
    cgc_setCoordinate(a0, 7, 7, v1);\n
    cgc_setCoordinate(a0, 7, 8, v1);\n
    cgc_setCoordinate(a0, 5, 7, v1);\n
    cgc_setCoordinate(a0, 6, 7, v1);\n
    v1 = 6;\n
    cgc_setCoordinate(a0, 4294967294, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967290, v1);\n
    cgc_setCoordinate(a0, 0, 4294967290, v1);\n
    cgc_setCoordinate(a0, 1, 4294967290, v1);\n
    cgc_setCoordinate(a0, 2, 4294967290, v1);\n
    cgc_setCoordinate(a0, 3, 4294967291, v1);\n
    cgc_setCoordinate(a0, 4, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 5, 4294967293, v1);\n
    cgc_setCoordinate(a0, 6, 4294967294, v1);\n
    cgc_setCoordinate(a0, 7, 4294967295, v1);\n
    cgc_setCoordinate(a0, 8, 0, v1);\n
    cgc_setCoordinate(a0, 8, 1, v1);\n
    cgc_setCoordinate(a0, 8, 2, v1);\n
    cgc_setCoordinate(a0, 8, 3, v1);\n
    cgc_setCoordinate(a0, 8, 4, v1);\n
    cgc_setCoordinate(a0, 8, 5, v1);\n
    cgc_setCoordinate(a0, 8, 6, v1);\n
    cgc_setCoordinate(a0, 8, 7, v1);\n
    cgc_setCoordinate(a0, 8, 8, v1);\n
    cgc_setCoordinate(a0, 8, 9, v1);\n
    cgc_setCoordinate(a0, 9, 3, v1);\n
    v1 = 7;\n
    cgc_setCoordinate(a0, 4294967293, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967289, v1);\n
    cgc_setCoordinate(a0, 0, 4294967289, v1);\n
    cgc_setCoordinate(a0, 1, 4294967289, v1);\n
    cgc_setCoordinate(a0, 2, 4294967289, v1);\n
    cgc_setCoordinate(a0, 3, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4, 4294967291, v1);\n
    cgc_setCoordinate(a0, 5, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 6, 4294967293, v1);\n
    cgc_setCoordinate(a0, 7, 4294967294, v1);\n
    cgc_setCoordinate(a0, 9, 0, v1);\n
    cgc_setCoordinate(a0, 8, 4294967295, v1);\n
    cgc_setCoordinate(a0, 10, 3, v1);\n
    cgc_setCoordinate(a0, 9, 2, v1);\n
    cgc_setCoordinate(a0, 6, 8, v1);\n
    cgc_setCoordinate(a0, 7, 9, v1);\n
    cgc_setCoordinate(a0, 9, 5, v1);\n
    cgc_setCoordinate(a0, 9, 6, v1);\n
    cgc_setCoordinate(a0, 9, 7, v1);\n
    cgc_setCoordinate(a0, 9, 8, v1);\n
    cgc_setCoordinate(a0, 9, 9, v1);\n
    v1 = 8;\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967290, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967289, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967288, v1);\n
    cgc_setCoordinate(a0, 0, 4294967288, v1);\n
    cgc_setCoordinate(a0, 1, 4294967288, v1);\n
    cgc_setCoordinate(a0, 2, 4294967288, v1);\n
    cgc_setCoordinate(a0, 3, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4, 4294967290, v1);\n
    cgc_setCoordinate(a0, 5, 4294967291, v1);\n
    cgc_setCoordinate(a0, 6, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 7, 4294967293, v1);\n
    cgc_setCoordinate(a0, 8, 4294967294, v1);\n
    cgc_setCoordinate(a0, 9, 1, v1);\n
    cgc_setCoordinate(a0, 9, 4294967295, v1);\n
    cgc_setCoordinate(a0, 9, 4, v1);\n
    cgc_setCoordinate(a0, 10, 4294967295, v1);\n
    cgc_setCoordinate(a0, 10, 0, v1);\n
    cgc_setCoordinate(a0, 10, 2, v1);\n
    cgc_setCoordinate(a0, 10, 5, v1);\n
    cgc_setCoordinate(a0, 10, 7, v1);\n
    cgc_setCoordinate(a0, 11, 5, v1);\n
    cgc_setCoordinate(a0, 3, 4294967287, v1);\n
    v1 = 9;\n
    cgc_setCoordinate(a0, 4294967291, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967291, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967291, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967291, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967287, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967287, v1);\n
    cgc_setCoordinate(a0, 0, 4294967287, v1);\n
    cgc_setCoordinate(a0, 1, 4294967287, v1);\n
    cgc_setCoordinate(a0, 2, 4294967287, v1);\n
    cgc_setCoordinate(a0, 3, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4, 4294967289, v1);\n
    cgc_setCoordinate(a0, 7, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967291, v1);\n
    cgc_setCoordinate(a0, 9, 4294967294, v1);\n
    cgc_setCoordinate(a0, 9, 4294967293, v1);\n
    cgc_setCoordinate(a0, 10, 1, v1);\n
    cgc_setCoordinate(a0, 10, 4, v1);\n
    cgc_setCoordinate(a0, 10, 6, v1);\n
    cgc_setCoordinate(a0, 10, 9, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967294, v1);\n
    cgc_setCoordinate(a0, 4, 4294967288, v1);\n
    cgc_setCoordinate(a0, 5, 4294967289, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967285, v1);\n
    cgc_setCoordinate(a0, 11, 1, v1);\n
    cgc_setCoordinate(a0, 11, 2, v1);\n
    cgc_setCoordinate(a0, 11, 4, v1);\n
    cgc_setCoordinate(a0, 11, 6, v1);\n
    cgc_setCoordinate(a0, 11, 7, v1);\n
    cgc_setCoordinate(a0, 12, 2, v1);\n
    cgc_setCoordinate(a0, 6, 4294967290, v1);\n
    v1 = 10;\n
    cgc_setCoordinate(a0, 4294967291, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967291, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967291, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967286, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967286, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967286, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967286, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967286, v1);\n
    cgc_setCoordinate(a0, 0, 4294967286, v1);\n
    cgc_setCoordinate(a0, 7, 4294967291, v1);\n
    cgc_setCoordinate(a0, 5, 4294967290, v1);\n
    cgc_setCoordinate(a0, 6, 4294967291, v1);\n
    cgc_setCoordinate(a0, 8, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967284, v1);\n
    cgc_setCoordinate(a0, 4, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967284, v1);\n
    cgc_setCoordinate(a0, 12, 1, v1);\n
    v1 = 11;\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967293, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967293, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967294, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967295, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 0, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967288, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967287, v1);\n
    cgc_setCoordinate(a0, 7, 4294967290, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967286, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967285, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967284, v1);\n
    cgc_setCoordinate(a0, 8, 0xfffffffc, v1);\n
    cgc_setCoordinate(a0, 4294967291, 4294967285, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967285, v1);\n
    cgc_setCoordinate(a0, 4294967290, 4294967284, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967285, v1);\n
    cgc_setCoordinate(a0, 10, 10, v1);\n
    cgc_setCoordinate(a0, 3, 4294967286, v1);\n
    v1 = 12;\n
    cgc_setCoordinate(a0, 4294967293, 4294967294, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967293, v1);\n
    cgc_setCoordinate(a0, 0, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967287, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967288, 4294967288, v1);\n
    cgc_setCoordinate(a0, 4294967288, 4294967287, v1);\n
    cgc_setCoordinate(a0, 4294967288, 4294967286, v1);\n
    cgc_setCoordinate(a0, 7, 4294967289, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967285, v1);\n
    cgc_setCoordinate(a0, 4294967293, 4294967285, v1);\n
    cgc_setCoordinate(a0, 0xfffffffc, 4294967284, v1);\n
    cgc_setCoordinate(a0, 2, 4294967286, v1);\n
    cgc_setCoordinate(a0, 9, 10, v1);\n
    v1 = 13;\n
    cgc_setCoordinate(a0, 4294967294, 4294967295, v1);\n
    cgc_setCoordinate(a0, 4294967294, 4294967294, v1);\n
    cgc_setCoordinate(a0, 4294967295, 4294967294, v1);\n
    cgc_setCoordinate(a0, 0, 4294967294, v1);\n
    cgc_setCoordinate(a0, 1, 4294967294, v1);\n
    cgc_setCoordinate(a0, 1, 4294967293, v1);\n
    cgc_setCoordinate(a0, 4294967287, 4294967287, v1);\n
    cgc_setCoordinate(a0, 11, 0, v1);\n
    cgc_setCoordinate(a0, 4294967289, 4294967284, v1);\n
    cgc_setCoordinate(a0, 9, 11, v1);\n
    cgc_setCoordinate(a0, 8, 10, v1);\n
    return cgc_setCoordinate(a0, 10, 11, v1);\n
}\n
", "4222865:sub_406f91": null, "4222880:cgc_initCityMap": "long long cgc_initCityMap(void* *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
\n
    v6 = 0;\n
    v7 = 0;\n
    for (v5 = -1; v5 <= 1; v5 += 1)\n
    {\n
        for (v4 = -1; v4 <= 1; v4 += 1)\n
        {\n
            cgc_setCoordinate(a0, v5, v4, v7);\n
        }\n
    }\n
    v7 = 1;\n
    for (v3 = v7; v3 <= v7 + 2; v3 += 1)\n
    {\n
        for (v2 = -1; v2 <= 1; v2 += 1)\n
        {\n
            if (cgc_getCoordinate(*(a0), v3, v2) == -1)\n
                cgc_setCoordinate(a0, v3, v2, v7);\n
        }\n
    }\n
    for (v1 = -1; v1 <= 1; v1 += 1)\n
    {\n
        for (v0 = v7; v0 <= v7 + 2; v0 += 1)\n
        {\n
            if (cgc_getCoordinate(*(a0), v1, v0) == -1)\n
                cgc_setCoordinate(a0, v1, v0, v7);\n
        }\n
    }\n
    v7 = 2;\n
    cgc_setCoordinate(a0, 0, 4, v7);\n
    cgc_setCoordinate(a0, 2, 2, v7);\n
    cgc_setCoordinate(a0, 4, 0, v7);\n
    cgc_setCoordinate(a0, 2, 4294967294, v7);\n
    v7 = 3;\n
    cgc_setCoordinate(a0, 0, 5, v7);\n
    cgc_setCoordinate(a0, 1, 4, v7);\n
    cgc_setCoordinate(a0, 2, 3, v7);\n
    cgc_setCoordinate(a0, 3, 2, v7);\n
    cgc_setCoordinate(a0, 5, 0, v7);\n
    cgc_setCoordinate(a0, 4, 4294967295, v7);\n
    cgc_setCoordinate(a0, 3, 4294967294, v7);\n
    cgc_setCoordinate(a0, 2, 4294967293, v7);\n
    cgc_setCoordinate(a0, 1, 4294967294, v7);\n
    v7 = 4;\n
    cgc_setCoordinate(a0, 1, 5, v7);\n
    cgc_setCoordinate(a0, 2, 4, v7);\n
    cgc_setCoordinate(a0, 5, 4294967295, v7);\n
    cgc_setCoordinate(a0, 4, 4294967294, v7);\n
    cgc_setCoordinate(a0, 1, 4294967293, v7);\n
    cgc_setCoordinate(a0, 0, 4294967294, v7);\n
    v7 = 5;\n
    cgc_setCoordinate(a0, 1, 6, v7);\n
    cgc_setCoordinate(a0, 4, 1, v7);\n
    cgc_setCoordinate(a0, 6, 4294967295, v7);\n
    cgc_setCoordinate(a0, 1, 0xfffffffc, v7);\n
    v7 = 6;\n
    cgc_setCoordinate(a0, 3, 3, v7);\n
    cgc_setCoordinate(a0, 4, 2, v7);\n
    cgc_setCoordinate(a0, 3, 4294967293, v7);\n
    cgc_setCoordinate(a0, 2, 0xfffffffc, v7);\n
    v7 = 7;\n
    cgc_setCoordinate(a0, 2, 5, v7);\n
    cgc_setCoordinate(a0, 3, 4, v7);\n
    cgc_setCoordinate(a0, 5, 4294967294, v7);\n
    cgc_setCoordinate(a0, 4, 4294967293, v7);\n
    cgc_setCoordinate(a0, 0, 4294967293, v7);\n
    cgc_setCoordinate(a0, 4294967295, 4294967294, v7);\n
    v7 = 8;\n
    cgc_setCoordinate(a0, 1, 7, v7);\n
    cgc_setCoordinate(a0, 2, 6, v7);\n
    cgc_setCoordinate(a0, 5, 1, v7);\n
    cgc_setCoordinate(a0, 6, 4294967294, v7);\n
    cgc_setCoordinate(a0, 7, 4294967295, v7);\n
    cgc_setCoordinate(a0, 1, 4294967291, v7);\n
    cgc_setCoordinate(a0, 0, 0xfffffffc, v7);\n
    v7 = 9;\n
    cgc_setCoordinate(a0, 4, 3, v7);\n
    cgc_setCoordinate(a0, 3, 0xfffffffc, v7);\n
    cgc_setCoordinate(a0, 4294967294, 4294967295, v7);\n
    v7 = 10;\n
    cgc_setCoordinate(a0, 3, 5, v7);\n
    cgc_setCoordinate(a0, 5, 4294967293, v7);\n
    cgc_setCoordinate(a0, 4294967295, 4294967293, v7);\n
    v7 = 11;\n
    cgc_setCoordinate(a0, 2, 7, v7);\n
    cgc_setCoordinate(a0, 7, 4294967294, v7);\n
    return cgc_setCoordinate(a0, 0, 4294967291, v7);\n
}\n
", "4224368:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0xf0]\n
    struct_0 *v1;  // [bp-0xe8]\n
    struct_0 *v2;  // [bp-0xe0]\n
    struct_0 *v3;  // [bp-0xd8]\n
    struct_0 *v4;  // [bp-0xd0]\n
    struct_0 *v5;  // [bp-0xc8]\n
    unsigned int v6;  // [bp-0xbc]\n
    unsigned int v7;  // [bp-0xb8]\n
    unsigned int v8;  // [bp-0xb4]\n
    char *v9;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v10;  // [bp-0xa4]\n
    unsigned int v11;  // [bp-0xa0]\n
    unsigned int v12;  // [bp-0x9c]\n
    void* v13;  // [bp-0x98]\n
    char v14;  // [bp-0x88]\n
    char v15;  // [bp-0x68]\n
    unsigned int v16;  // [bp-0x34]\n
    void* v17;  // [bp-0x30]\n
    void* v18;  // [bp-0x28]\n
    char v19;  // [bp-0x20]\n
    char v20;  // [bp-0x1c]\n
    unsigned long v21;  // [bp-0x18]\n
    unsigned int v22;  // [bp-0x10]\n
    unsigned int v23;  // [bp-0xc]\n
    char *v25;  // rax\n
\n
    v23 = 0;\n
    v22 = a0;\n
    v21 = a1;\n
    v18 = 0;\n
    v17 = 0;\n
    v16 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0x4347c000;\n
    for (v8 = 0; v8 < 10; v8 += 1)\n
    {\n
        v25 = v9;\n
        a3 = v25 + 1;\n
        v9 = a3;\n
        cgc_sprintf(&(&v15)[4 * v8], \"!H\", *(v25), a3, a4);\n
    }\n
    cgc_initCityMap(&v18);\n
    for (v7 = 0; v7 < 100; v7 += 1)\n
    {\n
        cgc_initCarChase(&v19);\n
        cgc_bzero(&v14, 32);\n
        cgc_sprintf(&v14, \"Criminal at (!I, !I)\\n
\", *(&v19), *(&v20), a4);\n
        v5 = &v14;\n
        if (cgc_transmit_all(1, v5, cgc_strlen(&v14)))\n
            cgc__terminate(1);\n
        do\n
        {\n
            cgc_getMoveInCar(&v19);\n
            v12 += 1;\n
            if (cgc_isCaught(*(&v19), v18))\n
            {\n
                cgc_bzero(&v14, 32);\n
                cgc_sprintf(&v14, \"Criminal caught in !U moves\\n
\", v12, a3, a4);\n
                v4 = &v14;\n
                if (cgc_transmit_all(1, v4, cgc_strlen(&v14)))\n
                    cgc__terminate(1);\n
                v12 = 0;\n
                break;\n
            }\n
            cgc_moveCriminalInCar(&v19, v18);\n
            if (cgc_getsAway(*(&v19), v18))\n
            {\n
                if (cgc_transmit_all(1, \"Got away\\n
\", cgc_strlen(\"Got away\\n
\")))\n
                    cgc__terminate(1);\n
                cgc_initCarChase(&v19);\n
                cgc_bzero(&v14, 32);\n
                cgc_sprintf(&v14, \"Criminal at (!I, !I)\\n
\", *(&v19), *(&v20), a4);\n
                v3 = &v14;\n
                if (cgc_transmit_all(1, v3, cgc_strlen(&v14)))\n
                    cgc__terminate(1);\n
            }\n
        } while (true);\n
    }\n
    cgc_freeMap(&v18);\n
    cgc_initHarborMap(&v17);\n
    for (v6 = 0; v6 < 100; v6 += 1)\n
    {\n
        cgc_initHarborChase(&v19);\n
        cgc_bzero(&v14, 32);\n
        cgc_sprintf(&v14, \"Criminal at (!I, !I)\\n
\", *(&v19), *(&v20), a4);\n
        v2 = &v14;\n
        if (cgc_transmit_all(1, v2, cgc_strlen(&v14)))\n
            cgc__terminate(1);\n
        do\n
        {\n
            cgc_getMoveInBoat(&v19);\n
            v12 += 1;\n
            if (cgc_isCaught(*(&v19), v17))\n
            {\n
                v11 += 1;\n
                cgc_bzero(&v14, 32);\n
                cgc_sprintf(&v14, \"Criminal caught in !U moves\\n
\", v12, a3, a4);\n
                v1 = &v14;\n
                if (cgc_transmit_all(1, v1, cgc_strlen(&v14)))\n
                    cgc__terminate(1);\n
                v12 = 0;\n
                break;\n
            }\n
            cgc_moveCriminalInBoat(&v19, v17);\n
            if (cgc_getsAway(*(&v19), v17))\n
            {\n
                v10 += 1;\n
                if (cgc_transmit_all(1, \"Got away\\n
\", cgc_strlen(\"Got away\\n
\")))\n
                    cgc__terminate(1);\n
                cgc_initHarborChase(&v19);\n
                cgc_bzero(&v14, 32);\n
                cgc_sprintf(&v14, \"Criminal at (!I, !I)\\n
\", *(&v19), *(&v20), a4);\n
                v0 = &v14;\n
                if (cgc_transmit_all(1, v0, cgc_strlen(&v14)))\n
                    cgc__terminate(1);\n
            }\n
        } while (true);\n
    }\n
    cgc_freeMap(&v17);\n
    return v23;\n
}\n
", "4225732:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_random": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}