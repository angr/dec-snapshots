{"4202496:_init": "extern struct_0 *g_408378;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408378;\n
    if (g_408378)\n
        v1 = g_408378();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408398;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408398;\n
    goto *(4228000);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4227976);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408370;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_408380;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408388;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408388)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202933:sub_4021b5": null, "4202944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202991:sub_4021ef": null, "4202992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203199:sub_4022bf": null, "4203200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203221:sub_4022d5": null, "4203232:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4219024];\n
    char field_406090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203247:sub_4022ef": null, "4203248:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203279:sub_40230f": null, "4203280:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_free": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (!v1->field_8)\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
    return v2;\n
}\n
", "4203333:sub_402345": null, "4203344:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern struct_2 *g_4085e8;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    unsigned long v2;  // r14, Other Possible Types: unsigned long long\n
    unsigned long long *v3;  // r14\n
    unsigned long long *v4;  // rdi\n
    struct_2 *v5;  // rbx, Other Possible Types: unsigned long\n
    struct struct_2 **v6;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rsi\n
    unsigned long long v8;  // rdx\n
    struct_0 *v9;  // rdi\n
    unsigned long long v11;  // rax\n
    struct_2 *v12;  // r15\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rdi\n
    struct_1 *v15;  // rax\n
\n
    if (!a0)\n
    {\n
LABEL_4023e5:\n
        return 0;\n
    }\n
    v2 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v2 = a0;\n
    v3 = v2 + 24;\n
    v4 = v3;\n
    v6 = cgc_get_size_class();\n
    if (v6 <= 31)\n
    {\n
        v5 = *((&cgc_free_lists + 0x8 * v6));\n
        if (!v5)\n
            goto LABEL_4023a0;\n
        else\n
            goto LABEL_0x4023c0;\n
    }\n
    else\n
    {\n
        if (!cgc_allocate(v3, v7, v8))\n
        {\n
            v9 = *(&v0);\n
            if (v9)\n
            {\n
                v9->field_0 = 0x40000;\n
                v9->field_8 = 1;\n
                v9->field_10 = 0;\n
                v9->field_20 = 0;\n
                cgc_insert_into_flist(v9);\n
                v5 = g_4085e8;\n
                cgc_remove_from_flist(v5);\n
                v11 = *(v5) - v3;\n
                v12 = v5 * 0x100000000;\n
                if (v11 < 25)\n
                    return &v12[2576980377].padding_18 >> 32;\n
                v13 = v12 >> 32;\n
                v14 = v13 + v3;\n
                *((v13 + v3)) = v11;\n
                *((8 + v13 + v3)) = 1;\n
                *((16 + v13 + v3)) = 0;\n
                *(v5) = v3;\n
                *((40 + v13 + v3)) = v5;\n
                *((32 + v13 + v3)) = *((v5 + 32));\n
                v15 = *((v5 + 32));\n
                if (v15)\n
                    v15->field_28 = v14;\n
                *((v5 + 32)) = v14;\n
                cgc_insert_into_flist(v14);\n
            }\n
        }\n
        goto LABEL_4023e5;\n
    }\n
    while (true)\n
    {\n
        while (true)\n
        {\n
LABEL_4023a0:\n
            v6 += 1;\n
            if (v6 == 32)\n
                break;\n
            v5 = *(&(&cgc_free_lists)[8 * v6]);\n
        }\n
        while (*(v5) < v3)\n
        {\n
            v5 = *((v5 + 16));\n
            if (!v5)\n
                goto LABEL_4023a0;\n
        }\n
    }\n
}\n
", "4203684:sub_4024a4": null, "4203696:cgc_get_size_class": "extern unsigned long long g_4083e8;\n
extern unsigned long long g_4083f0;\n
extern unsigned long long g_4083f8;\n
extern unsigned long long g_408400;\n
extern unsigned long long g_408408;\n
extern unsigned long long g_408410;\n
extern unsigned long long g_408418;\n
extern unsigned long long g_408420;\n
extern unsigned long long g_408428;\n
extern unsigned long long g_408430;\n
extern unsigned long long g_408438;\n
extern unsigned long long g_408440;\n
extern unsigned long long g_408448;\n
extern unsigned long long g_408450;\n
extern unsigned long long g_408458;\n
extern unsigned long long g_408460;\n
extern unsigned long long g_408468;\n
extern unsigned long long g_408470;\n
extern unsigned long long g_408478;\n
extern unsigned long long g_408480;\n
extern unsigned long long g_408488;\n
extern unsigned long long g_408490;\n
extern unsigned long long g_408498;\n
extern unsigned long long g_4084a0;\n
extern unsigned long long g_4084a8;\n
extern unsigned long long g_4084b0;\n
extern unsigned long long g_4084b8;\n
extern unsigned long long g_4084c0;\n
extern unsigned long long g_4084c8;\n
extern unsigned long long g_4084d0;\n
extern unsigned long long g_4084d8;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_4083e8 < a0)\n
    {\n
        v1 = 2;\n
        if (g_4083f0 < a0)\n
        {\n
            v1 = 3;\n
            if (g_4083f8 < a0)\n
            {\n
                v1 = 4;\n
                if (g_408400 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_408408 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_408410 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_408418 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_408420 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_408428 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_408430 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_408438 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_408440 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_408448 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_408450 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_408458 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_408460 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_408468 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_408470 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_408478 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_408480 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_408488 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_408490 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_408498 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_4084a0 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_4084a8 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_4084b0 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_4084b8 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_4084c0 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_4084c8 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_4084d0 < a0)\n
                                                                                                                            v1 = 31 + (g_4084d8 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204231:sub_4026c7": null, "4204240:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    struct struct_0 **v1;  // rax\n
    struct_0 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4204309:sub_402715": null, "4204320:cgc_remove_from_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_1 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_3 *v2;  // rcx\n
    struct_0 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4204397:sub_40276d": null, "4204400:cgc_coalesce": "extern char cgc_free_lists;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rdx\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rcx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r12\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rdx\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdx\n
    unsigned long v25;  // r12\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rbx\n
    unsigned long v28;  // rax\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rbx\n
    unsigned long v32;  // r12\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // r12\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rax\n
    unsigned long v42;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rax\n
    unsigned long v45;  // rcx\n
\n
    v0 = v2;\n
    v3 = *((a0 + 40));\n
    if (!v3)\n
        return v2;\n
    v13 = *((a0 + 32));\n
    if (!*((v3 + 8)))\n
    {\n
        if (!v13)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v13 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v5 = cgc_get_size_class(*(v13));\n
            v7 = *((v13 + 24));\n
            if (v7)\n
                *((v7 + 16)) = *((v13 + 16));\n
            v11 = *((v13 + 16));\n
            if (v11)\n
                *((v11 + 24)) = v7;\n
            if ((&cgc_free_lists)[v5] == v13)\n
                (&cgc_free_lists)[v5] = v11;\n
            *((v13 + 16)) = 0;\n
            *((v13 + 8)) = 0;\n
            v15 = *(a0);\n
            v16 = cgc_get_size_class(v15);\n
            v18 = *((a0 + 24));\n
            if (v18)\n
                *((v18 + 16)) = *((a0 + 16));\n
            v23 = *((a0 + 16));\n
            if (v23)\n
                *((v23 + 24)) = v18;\n
            if ((&cgc_free_lists)[v16] == a0)\n
                (&cgc_free_lists)[v16] = v23;\n
            *((a0 + 16)) = 0;\n
            *((a0 + 8)) = 0;\n
            v27 = v15 + *(*((a0 + 32)));\n
            *(a0) = v27;\n
            v28 = cgc_get_size_class(v27);\n
            *((a0 + 8)) = 1;\n
            v30 = (&cgc_free_lists)[v28];\n
            if (v30)\n
            {\n
                *((a0 + 16)) = v30;\n
                *(((&cgc_free_lists)[v28] + 24)) = a0;\n
                (&cgc_free_lists)[v28] = a0;\n
                *((a0 + 24)) = 0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b06;\n
            }\n
            else\n
            {\n
                (&cgc_free_lists)[v28] = a0;\n
                v34 = *((a0 + 32));\n
                v2 = *((v34 + 40));\n
                if (!v2)\n
                    goto LABEL_402b06;\n
            }\n
            *((v2 + 32)) = *((v34 + 32));\n
LABEL_402b06:\n
            v37 = *((v34 + 32));\n
            if (!v37)\n
                return v2;\n
        }\n
LABEL_402b0f:\n
        *((v37 + 40)) = v2;\n
        return v2;\n
    }\n
    if (v13 && *((v13 + 8)))\n
    {\n
        v4 = cgc_get_size_class(*(v3));\n
        v6 = *((v3 + 24));\n
        if (v6)\n
            *((v6 + 16)) = *((v3 + 16));\n
        v9 = *((v3 + 16));\n
        if (v9)\n
            *((v9 + 24)) = v6;\n
        if ((&cgc_free_lists)[v4] == v3)\n
        {\n
            (&cgc_free_lists)[v4] = v9;\n
            v13 = *((a0 + 32));\n
        }\n
        *((v3 + 16)) = 0;\n
        *((v3 + 8)) = 0;\n
        v14 = cgc_get_size_class(*(v13));\n
        v17 = *((v13 + 24));\n
        if (v17)\n
            *((v17 + 16)) = *((v13 + 16));\n
        v21 = *((v13 + 16));\n
        if (v21)\n
            *((v21 + 24)) = v17;\n
        if ((&cgc_free_lists)[v14] == v13)\n
            (&cgc_free_lists)[v14] = v21;\n
        *((v13 + 16)) = 0;\n
        *((v13 + 8)) = 0;\n
        v25 = *(a0);\n
        v26 = cgc_get_size_class(v25);\n
        v29 = *((a0 + 24));\n
        if (v29)\n
            *((v29 + 16)) = *((a0 + 16));\n
        v35 = *((a0 + 16));\n
        if (v35)\n
            *((v35 + 24)) = v29;\n
        if ((&cgc_free_lists)[v26] == a0)\n
            (&cgc_free_lists)[v26] = v35;\n
        *((a0 + 16)) = 0;\n
        *((a0 + 8)) = 0;\n
        v38 = *((a0 + 40));\n
        v39 = v25 + *(v38);\n
        *(v38) = v39;\n
        v40 = v39 + *(*((a0 + 32)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 8)) = 1;\n
        v42 = (&cgc_free_lists)[v41];\n
        if (v42)\n
        {\n
            *((v38 + 16)) = v42;\n
            *(((&cgc_free_lists)[v41] + 24)) = v38;\n
            (&cgc_free_lists)[v41] = v38;\n
            *((v38 + 24)) = 0;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_4028e2;\n
        }\n
        else\n
        {\n
            (&cgc_free_lists)[v41] = v38;\n
            v43 = *((a0 + 32));\n
            v44 = *((v43 + 40));\n
            if (!v44)\n
                goto LABEL_4028e2;\n
        }\n
        *((v44 + 32)) = *((v43 + 32));\n
LABEL_4028e2:\n
        v45 = *((v43 + 32));\n
        if (v45)\n
        {\n
            *((v45 + 40)) = v44;\n
            v2 = *((a0 + 40));\n
            if (!v2)\n
                goto LABEL_4029f9;\n
            goto LABEL_4029f1;\n
        }\n
    }\n
    v2 = *((a0 + 32));\n
    if (!v2)\n
        return *((a0 + 32));\n
    if (*((v2 + 8)))\n
        return *((a0 + 32));\n
    v8 = cgc_get_size_class(*(v3));\n
    v10 = *((v3 + 24));\n
    if (v10)\n
        *((v10 + 16)) = *((v3 + 16));\n
    v12 = *((v3 + 16));\n
    if (v12)\n
        *((v12 + 24)) = v10;\n
    if ((&cgc_free_lists)[v8] == v3)\n
        (&cgc_free_lists)[v8] = v12;\n
    *((v3 + 16)) = 0;\n
    *((v3 + 8)) = 0;\n
    v19 = *(a0);\n
    v20 = cgc_get_size_class(v19);\n
    v22 = *((a0 + 24));\n
    if (v22)\n
        *((v22 + 16)) = *((a0 + 16));\n
    v24 = *((a0 + 16));\n
    if (v24)\n
        *((v24 + 24)) = v22;\n
    if ((&cgc_free_lists)[v20] == a0)\n
        (&cgc_free_lists)[v20] = v24;\n
    *((a0 + 16)) = 0;\n
    *((a0 + 8)) = 0;\n
    v31 = *((a0 + 40));\n
    v32 = v19 + *(v31);\n
    *(v31) = v32;\n
    v33 = cgc_get_size_class(v32);\n
    *((v31 + 8)) = 1;\n
    v36 = (&cgc_free_lists)[v33];\n
    if (v36)\n
    {\n
        *((v31 + 16)) = v36;\n
        *(((&cgc_free_lists)[v33] + 24)) = v31;\n
        (&cgc_free_lists)[v33] = v31;\n
        *((v31 + 24)) = 0;\n
    }\n
    else\n
    {\n
        (&cgc_free_lists)[v33] = v31;\n
        v2 = *((a0 + 40));\n
        if (!v2)\n
            goto LABEL_4029f9;\n
LABEL_4029f1:\n
        *((v2 + 32)) = *((a0 + 32));\n
LABEL_4029f9:\n
        v37 = *((a0 + 32));\n
        if (!v37)\n
            return v2;\n
        goto LABEL_402b0f;\n
    }\n
    v2 = *((a0 + 40));\n
    if (!v2)\n
        goto LABEL_4029f9;\n
    goto LABEL_4029f1;\n
}\n
", "4205410:sub_402b62": null, "4205424:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205466:sub_402b9a": null, "4205472:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_402c34:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_402bc7;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_402bc7:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_402c34;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_402bc7;\n
}\n
", "4205903:sub_402d4f": null, "4205904:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_402ec9;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_402ec9:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_402ec9;\n
}\n
", "4206302:sub_402ede": null, "4206304:cgc_output_number": "long long cgc_output_number(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x39]\n
    char v2;  // r14b\n
    unsigned long v3;  // r12, Other Possible Types: unsigned long long\n
    void* v4;  // r15, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v5;  // rbp, Other Possible Types: unsigned long long\n
    char v6;  // al\n
    char v7;  // cl\n
\n
    v2 = a3;\n
    v3 = a0;\n
    v4 = 0;\n
    if (a0 >= a1)\n
    {\n
        v3 = (0 CONCAT a0) /m a1 >> 32;\n
        a0 = (0 CONCAT a0) /m a1;\n
        v4 = cgc_output_number(a0, a1, a2 - 1, a3);\n
    }\n
    if (a2 > 0 && !v4)\n
    {\n
        v5 = a2 - 1;\n
        if (a2 + -1)\n
        {\n
            if (!(v2 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc_transmit(a0, a1, a2, a3);\n
                    tmp_5 = v5;\n
                    v5 = v5 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
        }\n
    }\n
    v6 = (!(v2 & 2) ? v3 + 55 : v3 + 87);\n
    v7 = v3 + 48;\n
    if (10 <= v3)\n
        v7 = v6;\n
    v0 = v7;\n
    cgc_transmit();\n
    return v4 + 1;\n
}\n
", "4206433:sub_402f61": null, "4206560:cgc_printf": "extern unsigned long long g_406110;\n
\n
long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xe8]\n
    unsigned long v6;  // [bp-0xe0]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    char *v30;  // rax, Other Possible Types: unsigned long\n
    void* v31;  // r12, Other Possible Types: unsigned long\n
    void* v32;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v34;  // rcx, Other Possible Types: unsigned long, unsigned int\n
    unsigned long long v35;  // rcx\n
    unsigned long long v36;  // rcx\n
    unsigned int *v37;  // rax\n
    unsigned long v38;  // r13, Other Possible Types: unsigned long long\n
    struct struct_0 **v39;  // rax\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    unsigned long v41;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v42;  // rax, Other Possible Types: unsigned long\n
    char *v43;  // rbp\n
    unsigned long v44;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v6 = a1;\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a0;\n
    v3 = &v5;\n
    v2 = &v19;\n
    v1 = 206158430216;\n
    if (!*(a0))\n
        return 0;\n
    do\n
    {\n
        v30 = a0 + 1;\n
        v4 = v30;\n
        a3 = *(a0);\n
        if (*(a0) == 37)\n
        {\n
            v31 = 0;\n
            v32 = 0;\n
            a0 = v30;\n
            while (true)\n
            {\n
                v30 = a0 + 1;\n
                v4 = v30;\n
                a3 = *(a0);\n
                a2 = a3;\n
                if ((a2 - 49) >= 9)\n
                    break;\n
                v32 = cgc_strtol();\n
                a0 = v4;\n
            }\n
            a1 = a2 - 88;\n
            switch (a1)\n
            {\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 29: case 30: case 31:\n
                goto LABEL_403170;\n
            case 12:\n
                v34 = v1;\n
                if (v34 <= 40)\n
                {\n
                    v37 = v34 + v3;\n
                    v34 = v34 + 8;\n
                    v1 = v34;\n
                    v38 = *(v37);\n
                    if (!(v38 < 0))\n
                        goto LABEL_403208;\n
                }\n
                else\n
                {\n
                    v39 = v2;\n
                    v2 = v39 + 1;\n
                    v38 = *(v39);\n
                    if (!(v38 < 0))\n
                        goto LABEL_403208;\n
                }\n
                v0 = 45;\n
                cgc_transmit(a0, a1, &g_406110, v34);\n
                v38 = -(v38);\n
LABEL_403208:\n
                cgc_output_number(v38, 10, v32, v31);\n
                break;\n
            case 27:\n
                v35 = v1;\n
                if (v35 <= 40)\n
                {\n
                    v40 = v35 + v3;\n
                    v41 = v35 + 8;\n
                    v1 = v41;\n
                }\n
                else\n
                {\n
                    v40 = v2;\n
                    v41 = v40 + 8;\n
                    v2 = v41;\n
                }\n
                v43 = *(v40);\n
                if (cgc_strlen(v43))\n
                {\n
                    v44 = 0;\n
                    do\n
                    {\n
                        v0 = v43[v44];\n
                        cgc_transmit(a0, a1, &g_406110, v41);\n
                        v44 += 1;\n
                    } while (cgc_strlen(v43) > v44);\n
                }\n
                break;\n
            case 0:\n
                v31 = v31 | 2;\n
            case 32:\n
                v36 = v1;\n
                if (v36 > 40)\n
                {\n
                    v42 = v2;\n
                    v2 = v42 + 1;\n
                }\n
                else\n
                {\n
                    v42 = v36 + v3;\n
                    v1 = v36 + 8;\n
                }\n
                cgc_output_number(*(v42), 16, v32, v31);\n
                break;\n
            default:\n
                if (a2 == 37)\n
                    goto LABEL_0x4031cc;\n
                else\n
                    goto LABEL_0x403121;\n
            }\n
        }\n
LABEL_403170:\n
        v0 = a3;\n
        cgc_transmit(a0, a1, a2, a3);\n
        a0 = v4;\n
    } while (*(a0));\n
    return 0;\n
}\n
", "4206862:sub_40310e": null, "4206894:sub_40312e": null, "4206950:sub_403166": null, "4207256:sub_403298": null, "4207264:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned int a1)\n
{\n
    char *v1;  // rax\n
    char *v3;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4207375:sub_40330f": null, "4207376:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    v1 = a0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a1)\n
            return v1;\n
    }\n
}\n
", "4207411:sub_403333": null, "4207424:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // cl, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // al\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return *(a1) - v1;\n
            if (v1 != v3)\n
                return *(a1) - v1;\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return *(a1) - 0;\n
}\n
", "4207477:sub_403375": null, "4207488:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4207535:sub_4033af": null, "4207536:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4207564:sub_4033cc": null, "4207568:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_403429;\n
                }\n
                goto LABEL_403427;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_403427:\n
    v3 = 0;\n
LABEL_403429:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4207666:sub_403432": null, "4207680:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_403520;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_403520:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_40353a;\n
                    else\n
                        goto LABEL_403560;\n
                }\n
LABEL_40353a:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_403560;\n
            }\n
        }\n
LABEL_403560:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4207715:sub_403463": null, "4207897:sub_403519": null, "4208002:sub_403582": null, "4208016:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4208021:sub_403595": null, "4208032:cgc_cpu_interrupt": "typedef struct struct_0 {\n
    char padding_0[65295];\n
    char field_ff0f;\n
} struct_0;\n
\n
long long cgc_cpu_interrupt(struct struct_0 **a0, unsigned long a1)\n
{\n
    *(a0)->field_ff0f = *(a0)->field_ff0f | (1 << (a1 & 31));\n
    return 1 << (a1 & 31);\n
}\n
", "4208051:sub_4035b3": null, "4208064:cgc_cpu_tick": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[54];\n
    struct struct_0 *field_3e;\n
    unsigned short field_44;\n
    struct struct_2 *field_46;\n
    unsigned short field_48;\n
    char field_4a;\n
    char padding_4b[1];\n
    unsigned int field_4c;\n
    char padding_50[12];\n
    unsigned int field_5c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[65294];\n
    struct struct_0 *field_ff0f;\n
    char padding_ff17[232];\n
    char field_ffff;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern struct_0 *g_4065f0;\n
\n
int cgc_cpu_tick()\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_17;  // tmp #17\n
    int tmp_32;  // tmp #32\n
    int tmp_14;  // tmp #14\n
    int tmp_31;  // tmp #31\n
    int tmp_1;  // tmp #1\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rdi, Other Possible Types: char, struct_1 *\n
    struct_0 *v4;  // rdx, Other Possible Types: unsigned long, char\n
    struct_0 *v5;  // rax, Other Possible Types: unsigned long, char\n
    unsigned int v6;  // ecx\n
    unsigned long long v7;  // rbp\n
    unsigned long long v8;  // rbp\n
    struct_0 *v9;  // r14\n
    unsigned long v10;  // rcx\n
    struct_3 *v11;  // r13\n
    struct_0 *v12;  // rsi, Other Possible Types: unsigned long\n
    struct_0 *v13;  // rax, Other Possible Types: unsigned long, unsigned int\n
    unsigned short v14;  // cx\n
    struct_0 *v15;  // r10b\n
    char v16;  // cc_dep1\n
    unsigned short v17;  // cx\n
    unsigned int v18;  // r15d\n
    unsigned int v19;  // eax\n
    unsigned short *v20;  // rax\n
    unsigned long v21;  // rcx\n
    unsigned long v22;  // r15\n
    unsigned long v23;  // rax\n
    unsigned int v24;  // r15d\n
    unsigned short *v25;  // rax\n
    unsigned int v26;  // r15d\n
    unsigned int v27;  // r15d\n
    unsigned short *v28;  // rax\n
    unsigned int v29;  // r15d\n
    struct struct_0 **v30;  // rax\n
    unsigned long long v31;  // rdx\n
    unsigned long long v32;  // rcx\n
    unsigned long long v33;  // rax\n
    unsigned long long v34;  // rdx\n
    struct struct_0 **v35;  // rax\n
    struct struct_0 **v36;  // rdx, Other Possible Types: unsigned long\n
    struct struct_0 **v37;  // rdx, Other Possible Types: unsigned long\n
    char v38;  // cl\n
    struct struct_0 **v39;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v40;  // rax, Other Possible Types: unsigned int\n
    char v41;  // dl\n
    char v42;  // sil\n
    struct struct_0 **v43;  // rax\n
    unsigned long v45;  // rdx\n
    struct struct_0 **v46;  // rax\n
    struct struct_0 **v47;  // rax\n
    unsigned short *v48;  // rax\n
    struct_0 *v49;  // r15, Other Possible Types: unsigned long\n
    unsigned short v50;  // ax\n
    unsigned short v51;  // r15w\n
    struct_0 *v52;  // rcx\n
    struct struct_0 **v55;  // rax\n
    unsigned short *v56;  // rax\n
    struct struct_0 **v57;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v58;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v59;  // rcx, Other Possible Types: unsigned long\n
    struct struct_0 **v60;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v61;  // rcx, Other Possible Types: unsigned long\n
    void* v62;  // rbp\n
    unsigned int v63;  // r8\n
    char v64;  // cc_dep1\n
    struct struct_0 **v65;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v66;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v67;  // rdx, Other Possible Types: unsigned long long\n
    void* v68;  // rcx, Other Possible Types: unsigned long\n
    struct struct_0 **v69;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v70;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v71;  // rax, Other Possible Types: unsigned long\n
    unsigned short *v72;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v73;  // rcx, Other Possible Types: unsigned long, unsigned short\n
    unsigned long long v74;  // rdx\n
    unsigned int v75;  // eax\n
    struct struct_0 **v76;  // r12, Other Possible Types: unsigned long\n
    char v77;  // cc_dep1\n
    unsigned int v78;  // eax\n
    unsigned long v79;  // rcx\n
    struct_0 *v80;  // rax\n
    char v81;  // sil\n
    char v82;  // al\n
    char v83;  // dl\n
    unsigned long v84;  // rax\n
    unsigned long v85;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v5 = (&v3->field_44)[1];\n
    if ((v5 & 128))\n
    {\n
        *(&v5) = v5 & 127;\n
    }\n
    else\n
    {\n
        v5 = v5 & 254;\n
        if (!(v5 & 64))\n
            v5 = v5;\n
        *(&v5) = v5 & 159 | v5 / 32 & 1;\n
        v5 = v5;\n
    }\n
    *(&(&v3->field_44)[1]) = v5;\n
    v4 = v3->field_0;\n
    *(&v5) = (&v4->padding_1)[1] & v4->padding_ff17[231];\n
    if (((&v4->padding_1)[1] & v4->padding_ff17[231]))\n
        *(&(&v3->field_44)[2]) = 0;\n
    if ((v5 & 1))\n
    {\n
        if ((v5 & 1))\n
        {\n
            (&v4->padding_1)[1] = (&v4->padding_1)[1] & 254;\n
            *(&(&v3->field_44)[1]) = 0;\n
            v5 = *((&v3->field_3e + 6)) - 2;\n
            *((&v3->field_3e + 6)) = v5;\n
            v4 = v3->field_0;\n
            *(&(&v5->field_0)[v4]) = v3->field_44;\n
            v3->field_44 = 64;\n
        }\n
        else if ((v5 & 2))\n
        {\n
            (&v4->padding_1)[1] = (&v4->padding_1)[1] & 253;\n
            *(&(&v3->field_44)[1]) = 0;\n
            v5 = *((&v3->field_3e + 6)) - 2;\n
            *((&v3->field_3e + 6)) = v5;\n
            v4 = v3->field_0;\n
            *(&(&v5->field_0)[v4]) = v3->field_44;\n
            v3->field_44 = 72;\n
        }\n
        else if ((v5 & 4))\n
        {\n
            (&v4->padding_1)[1] = (&v4->padding_1)[1] & 251;\n
            *(&(&v3->field_44)[1]) = 0;\n
            v5 = *((&v3->field_3e + 6)) - 2;\n
            *((&v3->field_3e + 6)) = v5;\n
            v4 = v3->field_0;\n
            *(&(&v5->field_0)[v4]) = v3->field_44;\n
            v3->field_44 = 80;\n
        }\n
        else if ((v5 & 8))\n
        {\n
            (&v4->padding_1)[1] = (&v4->padding_1)[1] & 247;\n
            *(&(&v3->field_44)[1]) = 0;\n
            v5 = *((&v3->field_3e + 6)) - 2;\n
            *((&v3->field_3e + 6)) = v5;\n
            v4 = v3->field_0;\n
            *(&(&v5->field_0)[v4]) = v3->field_44;\n
            v3->field_44 = 88;\n
        }\n
        else\n
        {\n
            if (!(v5 & 16))\n
                goto LABEL_40371f;\n
            (&v4->padding_1)[1] = (&v4->padding_1)[1] & 239;\n
            *(&(&v3->field_44)[1]) = 0;\n
            v5 = *((&v3->field_3e + 6)) - 2;\n
            *((&v3->field_3e + 6)) = v5;\n
            v4 = v3->field_0;\n
            *(&(&v5->field_0)[v4]) = v3->field_44;\n
            v3->field_44 = 96;\n
        }\n
    }\n
LABEL_40371f:\n
    v6 = v3->field_4c;\n
    if (v6 >= 2)\n
    {\n
        v3->field_4c = v6 - 1;\n
        v7 = 1;\n
        return;\n
    }\n
    v8 = 1;\n
    if (*(&(&v3->field_44)[2]))\n
        return;\n
    v76 = &(&v3->padding_8)[1];\n
    v9 = &v3->field_44;\n
    v10 = v3->field_44;\n
    v11 = v4 + v10;\n
    v49 = *((v4 + v10));\n
    switch (v49)\n
    {\n
    case -57:\n
        tmp_17 = *(v76 + 1);\n
        *(v76 + 1) = __ROL__(*(v76 + 1), 1);\n
        *(&v5) = tmp_17 >> 3;\n
        goto LABEL_403c99;\n
    case -56:\n
        *((v4 + *(&v11->field_1))) = *((&v3->field_3e + 6));\n
        v3->field_44 = v3->field_44 + 3;\n
        v40 = 20;\n
        break;\n
    case -49:\n
        *(&v5) = *(v76 + 1);\n
        *(&v4) = __ROR__(v5, 1);\n
        goto LABEL_403c91;\n
    case -48:\n
        *(&v9->field_0) = v10 + 1;\n
        v12 = 16;\n
        v13 = 0;\n
        goto LABEL_403be1;\n
    case -40:\n
        *(&v9->field_0) = v10 + 2;\n
        *(&v9->field_0) = (v11->field_1 + v10) + 2;\n
        v40 = 12;\n
        break;\n
    case -33:\n
        *(&v5) = *(v76 + 1);\n
        *(&v4) = v5 / 2 | (*(v76) * 8) & 128;\n
        goto LABEL_403c91;\n
    case -32:\n
        v14 = v10 + 2;\n
        *(&v9->field_0) = v14;\n
        if (*(v76) < 0)\n
        {\n
            v40 = 8;\n
            break;\n
        }\n
    case -25:\n
        *(&v5) = *(v76);\n
        if (!(*(v76) & 64))\n
        {\n
            v15 = *(v76 + 1);\n
            tmp_32 = v5 & 16;\n
            v3 = v5;\n
            v5 = v5 | 16;\n
            v16 = !(tmp_32 & 255) & *(v76 + 1) < 154;\n
            if ((!(tmp_32 & 255) & *(v76 + 1) < 154))\n
                v5 = v3;\n
            if (!v16)\n
                v41 = 96;\n
            else\n
                v41 = 0;\n
            v42 = v41 + 6;\n
            if ((v5 & 32))\n
                v41 = v42;\n
            if (10 <= (v15 & 14))\n
                v41 = v42;\n
            v4 = &(&v15->field_0)[v41];\n
        }\n
        else\n
        {\n
            *(&v4) = *(v76 + 1);\n
            if ((v5 & 32))\n
            {\n
                *(&v4) = v4 - 6;\n
                *(v76 + 1) = *(&v4);\n
            }\n
            if (!(v5 & 16))\n
                goto LABEL_403dc8;\n
            *(&v4) = v4 - 96;\n
        }\n
        *(v76 + 1) = v4;\n
LABEL_403dc8:\n
        *(&v5) = v5 & 95;\n
        v81 = v5 - 128;\n
        tmp_14 = v4;\n
        v82 = v5 & 95;\n
        v83 = v81;\n
        if (tmp_14)\n
            v83 = v82;\n
        *(v76) = v83;\n
        goto LABEL_403ddd;\n
    case -24:\n
        v14 = v10 + 2;\n
        *(&v9->field_0) = v14;\n
        v40 = 8;\n
        if (!(*(v76) < 0))\n
            break;\n
        goto LABEL_403d7b;\n
    case -17:\n
        *(v76 + 1) = ~(*(v76 + 1));\n
        *(v76) = *(v76) | 96;\n
        goto LABEL_403ddd;\n
    case -16:\n
        v14 = v10 + 2;\n
        *(&v9->field_0) = v14;\n
        v40 = 8;\n
        if (!(!(*(v76) & 16)))\n
            break;\n
        goto LABEL_403d7b;\n
    case -9:\n
        *(v76) = *(v76) & 143 | 16;\n
        goto LABEL_403ddd;\n
    case -8:\n
        v14 = v10 + 2;\n
        *(&v9->field_0) = v14;\n
        v40 = 8;\n
        if (!(*(v76) & 16))\n
            break;\n
LABEL_403d7b:\n
        v17 = v14 + v11->field_1;\n
        *(&v9->field_0) = v17;\n
        v40 = 12;\n
        break;\n
    case -1:\n
        *(v76) = *(v76) & 159 ^ 16;\n
        goto LABEL_403ddd;\n
    case 54:\n
        *(&(&v3->field_44)[2]) = 1;\n
        v3->field_44 = v10 + 1;\n
        goto LABEL_403de4;\n
    case -41:\n
        tmp_31 = *(v76 + 1);\n
        *(&v4) = *(v76 + 1);\n
        *(v76 + 1) = (*(v76) >> 4) & 1 | v4 * 2;\n
        *(v76) = (tmp_31 >> 3) & 16;\n
    case -64:\n
LABEL_403ddd:\n
        *(&v9->field_0) = v10 + 1;\n
LABEL_403de4:\n
        v40 = 4;\n
        break;\n
    default:\n
        v12 = v49;\n
        v13 = v49 & -57;\n
        switch (v13)\n
        {\n
        case 2:\n
            v18 = v49 & 48;\n
            v19 = v18 / 16;\n
            v20 = (v19 - 2 < 2 ? (v19 == 1 ? &v3->field_3e : (&v3->field_3e + 2)) : (&v3->field_3e + 4));\n
            if ((v12 & 8))\n
            {\n
                v23 = *(v20);\n
                *(v76 + 1) = *((v4 + v23));\n
            }\n
            else\n
            {\n
                v23 = *(v20);\n
                *((v4 + v23)) = *(v76 + 1);\n
            }\n
            if (v18 == 32)\n
            {\n
                *(&v23) = 1;\n
            }\n
            else\n
            {\n
                if (!(v18 == 48))\n
                    goto LABEL_4040ca;\n
                *(&v23) = 65535;\n
            }\n
            *((&v3->field_3e + 4)) = *((&v3->field_3e + 4)) + v23;\n
            goto LABEL_4040ca;\n
        case 4:\n
            *(&v12) = (v12 >> 3) & 7;\n
            switch (*(&v12))\n
            {\n
            case 0:\n
                v36 = &v3->field_3e + 1;\n
                break;\n
            case 1:\n
                v36 = &v3->field_3e;\n
                break;\n
            case 2:\n
                v36 = &v3->field_3e + 3;\n
                break;\n
            case 3:\n
                v36 = &v3->field_3e + 2;\n
                break;\n
            case 4:\n
                v36 = &v3->field_3e + 5;\n
                break;\n
            case 5:\n
                v36 = &v3->field_3e + 4;\n
                break;\n
            case 6:\n
                v36 = v4 + *((&v3->field_3e + 4));\n
                break;\n
            default:\n
                v36 = &(&v3->padding_8)[1 + 1];\n
                break;\n
            }\n
            v3 = *(v36);\n
            *(v36) = &v3->padding_1;\n
            *(&v13) = *(v76) & 31;\n
            *(v76) = *(v76) & 31;\n
            *(&v10) = *(v36);\n
            if (!*(v36))\n
            {\n
                *(&v13) = v13 | 128;\n
                *(v76) = *(&v13);\n
                *(&v10) = *(v36);\n
            }\n
            if ((v10 ^ v3) >= 16)\n
                *(v76) = v13 | 32;\n
            *(&v9->field_0) = *(&v9->field_0) + 1;\n
            v64 = v12;\n
            goto LABEL_4041ac;\n
        case 5:\n
            v22 = v49 / 8 & 7;\n
            switch (v22)\n
            {\n
            case 0:\n
                v37 = &v3->field_3e + 1;\n
                break;\n
            case 1:\n
                v37 = &v3->field_3e;\n
                break;\n
            case 2:\n
                v37 = &v3->field_3e + 3;\n
                break;\n
            case 3:\n
                v37 = &v3->field_3e + 2;\n
                break;\n
            case 4:\n
                v37 = &v3->field_3e + 5;\n
                break;\n
            case 5:\n
                v37 = &v3->field_3e + 4;\n
                break;\n
            case 6:\n
                v37 = v4 + *((&v3->field_3e + 4));\n
                break;\n
            default:\n
                v37 = &(&v3->padding_8)[1 + 1];\n
                break;\n
            }\n
            v3 = *(v37);\n
            *(v37) = &v3->padding_1;\n
            *(&v12) = *(v76) & 31;\n
            v38 = v12 + 64;\n
            *(v76) = v38;\n
            *(&v13) = *(v37);\n
            if (!*(v37))\n
            {\n
                *(&v12) = v12 | 192;\n
                *(v76) = *(&v12);\n
                *(&v13) = *(v37);\n
                v38 = v12;\n
            }\n
            if ((v13 ^ v3) >= 16)\n
                *(v76) = v38 | 32;\n
            *(&v9->field_0) = *(&v9->field_0) + 1;\n
            v64 = v22;\n
LABEL_4041ac:\n
            v40 = (v16 == 6) * 8 + 4;\n
            v3->field_4c = v40 / 4;\n
            return;\n
        case 6:\n
            *(&v49) = (v49 >> 3) & 7;\n
            switch (*(&v49))\n
            {\n
            case 0:\n
                v39 = &v3->field_3e + 1;\n
                break;\n
            case 1:\n
                v39 = &v3->field_3e;\n
                break;\n
            case 2:\n
                v39 = &v3->field_3e + 3;\n
                break;\n
            case 3:\n
                v39 = &v3->field_3e + 2;\n
                break;\n
            case 4:\n
                v39 = &v3->field_3e + 5;\n
                break;\n
            case 5:\n
                v39 = &v3->field_3e + 4;\n
                break;\n
            case 6:\n
                v39 = v4 + *((&v3->field_3e + 4));\n
                break;\n
            default:\n
                v39 = &(&v3->padding_8)[1 + 1];\n
                break;\n
            }\n
            *(v39) = v11->field_1;\n
            *(&v9->field_0) = *(&v9->field_0) + 2;\n
            v40 = (v49 == 6) * 4 + 8;\n
            break;\n
        default:\n
LABEL_403be1:\n
            v21 = v12 & -49;\n
            switch (__ROR__((v21 - 1), 1))\n
            {\n
            case 0:\n
                v24 = v49 / 16 & 3;\n
                v25 = (v24 == 2 ? (v24 == 1 ? (!v24 ? (&v3->field_3e + 6) : &v3->field_3e) : (&v3->field_3e + 2)) : (&v3->field_3e + 4));\n
                *(v25) = *(&v11->field_1);\n
                *(&v9->field_0) = *(&v9->field_0) + 3;\n
                v40 = 12;\n
                break;\n
            case 1:\n
                v26 = v49 / 16 & 3;\n
                if (v26 == 2)\n
                {\n
                    v30 = &v3->field_3e + 4;\n
                    *(v30) = *(v30) + 1;\n
                    break;\n
                }\n
                else if (v26 == 1)\n
                {\n
                    v43 = &v3->field_3e + 2;\n
                    *(v43) = *(v43) + 1;\n
                    break;\n
                }\n
                else if (!v26)\n
                {\n
                    v47 = &v3->field_3e;\n
                    *(v47) = *(v47) + 1;\n
                    break;\n
                }\n
                else\n
                {\n
                    v48 = &v3->field_3e + 6;\n
                    *(v48) = *(v48) + 1;\n
                    break;\n
                }\n
            case 4:\n
                v27 = v49 / 16 & 3;\n
                v28 = (v27 == 2 ? (v27 == 1 ? (!v27 ? (&v3->field_3e + 6) : &v3->field_3e) : (&v3->field_3e + 2)) : (&v3->field_3e + 4));\n
                v32 = *((&v3->field_3e + 4));\n
                v33 = *(v28);\n
                v34 = v33 + v32;\n
                *(&v12) = (&v3->padding_8)[1] & 143;\n
                v3 = v12 + 16;\n
                if (v34 < 0x10000)\n
                    v3 = (&v3->padding_8)[1] & 143;\n
                (&v3->padding_8)[1] = ((v33 & 4095) + (v32 & 4095) >> 7) & 32 | v3;\n
                *((&v3->field_3e + 4)) = v34;\n
                v3->field_44 = v3->field_44 + 1;\n
                v40 = 8;\n
                break;\n
            case 5:\n
                v29 = v49 / 16 & 3;\n
                if (v29 == 2)\n
                {\n
                    v35 = &v3->field_3e + 4;\n
                    *(v35) = *(v35) - 1;\n
                    break;\n
                }\n
                else if (v29 == 1)\n
                {\n
                    v46 = &v3->field_3e + 2;\n
                    *(v46) = *(v46) - 1;\n
                    break;\n
                }\n
                else if (!v29)\n
                {\n
                    v55 = &v3->field_3e;\n
                    *(v55) = *(v55) - 1;\n
                    break;\n
                }\n
                else\n
                {\n
                    v56 = &v3->field_3e + 6;\n
                    *(v56) = *(v56) - 1;\n
                    break;\n
                }\n
            default:\n
                if ((v12 & -64) == 64)\n
                {\n
                    *(&v13) = v49 & 7;\n
                    *(&v21) = v49 / 8 & 7;\n
                    switch (v49 & 7)\n
                    {\n
                    case 0:\n
                        v45 = &v3->field_3e + 1;\n
                        break;\n
                    case 1:\n
                        v45 = &v3->field_3e;\n
                        break;\n
                    case 2:\n
                        v45 = &v3->field_3e + 3;\n
                        break;\n
                    case 3:\n
                        v45 = &v3->field_3e + 2;\n
                        break;\n
                    case 4:\n
                        v45 = &v3->field_3e + 5;\n
                        break;\n
                    case 5:\n
                        v45 = &v3->field_3e + 4;\n
                        break;\n
                    case 6:\n
                        [D] Unsupported jumpkind Ijk_NoDecode at address 4211242\n
                    case 7:\n
                        break;\n
                    default:\n
                        v45 = &(&v3->padding_8)[1 + 1];\n
                        break;\n
                    }\n
                    switch (v21)\n
                    {\n
                    case 0:\n
                        v65 = &v3->field_3e + 1;\n
                        break;\n
                    case 1:\n
                        v65 = &v3->field_3e;\n
                        break;\n
                    case 2:\n
                        v65 = &v3->field_3e + 3;\n
                        break;\n
                    case 3:\n
                        v65 = &v3->field_3e + 2;\n
                        break;\n
                    case 4:\n
                        v65 = &v3->field_3e + 5;\n
                        break;\n
                    case 5:\n
                        v65 = &v3->field_3e + 4;\n
                        break;\n
                    case 6:\n
                        v65 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                        break;\n
                    default:\n
                        v65 = &(&v3->padding_8)[1 + 1];\n
                        break;\n
                    }\n
                    *(v65) = *(v45);\n
                    *(&v9->field_0) = *(&v9->field_0) + 1;\n
                    v84 = v21 == 6 | v13 == 6;\n
                    v40 = v84 * 4 + 4;\n
                    break;\n
                }\n
                else\n
                {\n
                    v31 = (v12 & -8) - 128 >> 3;\n
                    switch (v31)\n
                    {\n
                    case 0:\n
                        v49 = v49 & 7;\n
                        switch (v49)\n
                        {\n
                        case 0:\n
                            v57 = &v3->field_3e + 1;\n
                            break;\n
                        case 1:\n
                            v57 = &v3->field_3e;\n
                            break;\n
                        case 2:\n
                            v57 = &v3->field_3e + 3;\n
                            break;\n
                        case 3:\n
                            v57 = &v3->field_3e + 2;\n
                            break;\n
                        case 4:\n
                            v57 = &v3->field_3e + 5;\n
                            break;\n
                        case 5:\n
                            v57 = &v3->field_3e + 4;\n
                            break;\n
                        case 6:\n
                            v57 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                            break;\n
                        default:\n
                            v57 = &(&v3->padding_8)[1 + 1];\n
                            break;\n
                        }\n
                        v66 = (&v3->padding_8)[1 + 1];\n
                        v67 = *(v57);\n
                        v68 = 0;\n
                        goto LABEL_40464c;\n
                    case 1:\n
                        [D] Unsupported jumpkind Ijk_NoDecode at address 4211359\n
                    case 2:\n
                        *(&v9) = v49 & 7;\n
                        switch (v49 & 7)\n
                        {\n
                        case 0:\n
                            v58 = &v3->field_3e + 1;\n
                            break;\n
                        case 1:\n
                            v58 = &v3->field_3e;\n
                            break;\n
                        case 2:\n
                            v58 = &v3->field_3e + 3;\n
                            break;\n
                        case 3:\n
                            v58 = &v3->field_3e + 2;\n
                            break;\n
                        case 4:\n
                            v58 = &v3->field_3e + 5;\n
                            break;\n
                        case 5:\n
                            v58 = &v3->field_3e + 4;\n
                            break;\n
                        case 6:\n
                            v58 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                            (&v3->padding_8)[1 + 1] = do_sub_8b(v3, (&v3->padding_8)[1 + 1], *(v58), 0);\n
                            v3->field_44 = v3->field_44 + 1;\n
                            v77 = v9;\n
                            goto LABEL_4046be;\n
                        case 7:\n
                            [D] t4294967295 = DIRTY 1 TODO(effects) ::: amd64g_dirtyhelper_OUT(0x0000000000000007,t4,0x0000000000000004)\n
                            switch (v49)\n
                            {\n
                            case 0:\n
                                v69 = &v3->field_3e + 1;\n
                                break;\n
                            case 1:\n
                                v69 = &v3->field_3e;\n
                                break;\n
                            case 2:\n
                                v69 = &v3->field_3e + 3;\n
                                break;\n
                            case 3:\n
                                v69 = &v3->field_3e + 2;\n
                                break;\n
                            case 4:\n
                                v69 = &v3->field_3e + 5;\n
                                break;\n
                            case 5:\n
                                v69 = &v3->field_3e + 4;\n
                                break;\n
                            case 6:\n
                                v69 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                                break;\n
                            default:\n
                                v69 = &(&v3->padding_8)[1 + 1];\n
                                break;\n
                            }\n
                            v66 = (&v3->padding_8)[1 + 1];\n
                            v67 = *(v69);\n
                            v68 = ((&v3->padding_8)[1] >> 4) & 1;\n
                            goto LABEL_40464c;\n
                        default:\n
                            v58 = &(&v3->padding_8)[1 + 1];\n
                            break;\n
                        }\n
LABEL_40464c:\n
                        v85 = do_add_8b(v3, v66, v67, v68);\n
LABEL_404673:\n
                        (&v3->padding_8)[1 + 1] = v85;\n
LABEL_4046b3:\n
                        v3->field_44 = v3->field_44 + 1;\n
                        v77 = v49;\n
LABEL_4046be:\n
                        v40 = (v16 == 6) * 4 + 4;\n
                        break;\n
                    case 3:\n
                        [D] Unsupported jumpkind Ijk_NoDecode at address 4211444\n
                    case 4:\n
                        *(&v13) = v49 & 7;\n
                        switch (*(&v13))\n
                        {\n
                        case 0:\n
                            v59 = &v3->field_3e + 1;\n
                            break;\n
                        case 1:\n
                            v59 = &v3->field_3e;\n
                            break;\n
                        case 2:\n
                            v59 = &v3->field_3e + 3;\n
                            break;\n
                        case 3:\n
                            v59 = &v3->field_3e + 2;\n
                            break;\n
                        case 4:\n
                            v59 = &v3->field_3e + 5;\n
                            break;\n
                        case 5:\n
                            v59 = &v3->field_3e + 4;\n
                            break;\n
                        case 6:\n
                            v59 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                            break;\n
                        case 7:\n
                            [D] t4294967295 = DIRTY 1 TODO(effects) ::: amd64g_dirtyhelper_OUT(0x0000000000000007,t4,0x0000000000000004)\n
                            switch (v49)\n
                            {\n
                            case 0:\n
                                v70 = &v3->field_3e + 1;\n
                                break;\n
                            case 1:\n
                                v70 = &v3->field_3e;\n
                                break;\n
                            case 2:\n
                                v70 = &v3->field_3e + 3;\n
                                break;\n
                            case 3:\n
                                v70 = &v3->field_3e + 2;\n
                                break;\n
                            case 4:\n
                                v70 = &v3->field_3e + 5;\n
                                break;\n
                            case 5:\n
                                v70 = &v3->field_3e + 4;\n
                                break;\n
                            case 6:\n
                                v70 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                                break;\n
                            default:\n
                                v70 = &(&v3->padding_8)[1 + 1];\n
                                break;\n
                            }\n
                            v85 = do_sub_8b(v3, (&v3->padding_8)[1 + 1], *(v70), ((&v3->padding_8)[1] >> 4) & 1);\n
                            goto LABEL_404673;\n
                        default:\n
                            v59 = &(&v3->padding_8)[1 + 1];\n
                            break;\n
                        }\n
                        tmp_1 = *(v76 + 1) & *(v59);\n
                        *(v76 + 1) = *(v76 + 1) & *(v59);\n
                        *(v76) = ((tmp_1) * 128) - 96;\n
                        *(&v9->field_0) = *(&v9->field_0) + 1;\n
LABEL_4046ff:\n
                        v40 = (v13 == 6) * 4 + 4;\n
                        break;\n
                    case 5:\n
                        [D] Unsupported jumpkind Ijk_NoDecode at address 4211525\n
                    case 6:\n
                        *(&v13) = v49 & 7;\n
                        switch (*(&v13))\n
                        {\n
                        case 0:\n
                            v61 = &v3->field_3e + 1;\n
                            break;\n
                        case 1:\n
                            v61 = &v3->field_3e;\n
                            break;\n
                        case 2:\n
                            v61 = &v3->field_3e + 3;\n
                            break;\n
                        case 3:\n
                            v61 = &v3->field_3e + 2;\n
                            break;\n
                        case 4:\n
                            v61 = &v3->field_3e + 5;\n
                            break;\n
                        case 5:\n
                            v61 = &v3->field_3e + 4;\n
                            break;\n
                        case 6:\n
                            v61 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                            break;\n
                        case 7:\n
                            [D] t4294967295 = DIRTY 1 TODO(effects) ::: amd64g_dirtyhelper_OUT(0x0000000000000007,t4,0x0000000000000004)\n
                            switch (v49)\n
                            {\n
                            case 0:\n
                                v71 = &v3->field_3e + 1;\n
                                break;\n
                            case 1:\n
                                v71 = &v3->field_3e;\n
                                break;\n
                            case 2:\n
                                v71 = &v3->field_3e + 3;\n
                                break;\n
                            case 3:\n
                                v71 = &v3->field_3e + 2;\n
                                break;\n
                            case 4:\n
                                v71 = &v3->field_3e + 5;\n
                                break;\n
                            case 5:\n
                                v71 = &v3->field_3e + 4;\n
                                break;\n
                            case 6:\n
                                v71 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                                break;\n
                            default:\n
                                v71 = &(&v3->padding_8)[1 + 1];\n
                                break;\n
                            }\n
                            tmp_1 = (&v3->padding_8)[1 + 1] ^ *(v71);\n
                            (&v3->padding_8)[1 + 1] = (&v3->padding_8)[1 + 1] ^ *(v71);\n
                            (&v3->padding_8)[1] = (!tmp_1) * 128;\n
                            goto LABEL_4046b3;\n
                        default:\n
                            v61 = &(&v3->padding_8)[1 + 1];\n
                            break;\n
                        }\n
                        tmp_1 = (&v3->padding_8)[1 + 1] | *(v61);\n
                        (&v3->padding_8)[1 + 1] = (&v3->padding_8)[1 + 1] | *(v61);\n
                        (&v3->padding_8)[1] = (!tmp_1) * 128;\n
                        v3->field_44 = v3->field_44 + 1;\n
                        goto LABEL_4046ff;\n
                    case 7:\n
                        v49 = v49 & 7;\n
                        switch (v49)\n
                        {\n
                        case 0:\n
                            v60 = &v3->field_3e + 1;\n
                            break;\n
                        case 1:\n
                            v60 = &v3->field_3e;\n
                            break;\n
                        case 2:\n
                            v60 = &v3->field_3e + 3;\n
                            break;\n
                        case 3:\n
                            v60 = &v3->field_3e + 2;\n
                            break;\n
                        case 4:\n
                            v60 = &v3->field_3e + 5;\n
                            break;\n
                        case 5:\n
                            v60 = &v3->field_3e + 4;\n
                            break;\n
                        case 6:\n
                            v60 = &(&v3->field_0->field_0)[*((&v3->field_3e + 4))];\n
                            break;\n
                        default:\n
                            v60 = &(&v3->padding_8)[1 + 1];\n
                            break;\n
                        }\n
                        do_sub_8b(v3, (&v3->padding_8)[1 + 1], *(v60), 0);\n
                        goto LABEL_4046b3;\n
                    default:\n
                        if (v13 == 199)\n
                        {\n
                            v50 = v3->field_44 + 1;\n
                            v51 = v49 & 56;\n
                            v52 = *((&v3->field_3e + 6)) - 2;\n
                            *((&v3->field_3e + 6)) = v52;\n
                            *((v3->field_0 + v52)) = v50;\n
                            v3->field_44 = v51;\n
                            v40 = 16;\n
                            break;\n
                        }\n
                        else if (v21 == 197)\n
                        {\n
                            *(&v49) = (v49 >> 4) & 3;\n
                            if (v49 != 3)\n
                            {\n
                                if (v49 == 2)\n
                                {\n
                                    v76 = &v3->field_3e + 4;\n
                                }\n
                                else\n
                                {\n
                                    v75 = v49;\n
                                    v76 = (v75 == 1 ? (!v75 ? (&v3->field_3e + 6) : &v3->field_3e) : (&v3->field_3e + 2));\n
                                }\n
                            }\n
                            v80 = *((&v3->field_3e + 6)) - 2;\n
                            *((&v3->field_3e + 6)) = v80;\n
                            *((v3->field_0 + v80)) = *(v76);\n
                            v3->field_44 = v3->field_44 + 1;\n
                            v40 = 16;\n
                            break;\n
                        }\n
                        else if (v21 == 193)\n
                        {\n
                            v49 = (v49 >> 4) & 3;\n
                            if (v49 == 3)\n
                            {\n
                                v72 = &v3->field_3e + 6;\n
                                v73 = *((&v3->field_3e + 6));\n
                                v74 = *((v3->field_0 + v73));\n
                                *(&(&v3->padding_8)[1]) = v74;\n
                                (&v3->padding_8)[1] = v74 & 240;\n
                            }\n
                            else\n
                            {\n
                                if (v49 == 2)\n
                                {\n
                                    v79 = &v3->field_3e + 4;\n
                                }\n
                                else\n
                                {\n
                                    v78 = v49;\n
                                    v79 = (v78 == 1 ? (!v78 ? (&v3->field_3e + 6) : &v3->field_3e) : (&v3->field_3e + 2));\n
                                }\n
                                v72 = &v3->field_3e + 6;\n
                                *(v79) = *(&(&v3->field_0->field_0)[*((&v3->field_3e + 6))]);\n
                                v73 = *((&v3->field_3e + 6));\n
                            }\n
                            *(v72) = v73 + 2;\n
                            *(&v9->field_0) = *(&v9->field_0) + 1;\n
                            v40 = 16;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            v62 = 0;\n
                            cgc_printf(\"Invalid opcode %02X\\n
\", v12, v31, v21, v63);\n
                            return;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
LABEL_4040ca:\n
        *(&v9->field_0) = *(&v9->field_0) + 1;\n
        v40 = 8;\n
        break;\n
    }\n
LABEL_403c91:\n
    *(v76 + 1) = v4;\n
    *(&v5) = v5 * 16;\n
LABEL_403c99:\n
    *(v76) = v5 & 16;\n
    goto LABEL_403ddd;\n
}\n
", "4208505:sub_403779": "long long sub_403779(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v1;  // r12\n
    unsigned short v2[37];  // rbx\n
    unsigned short *v3;  // rax\n
    unsigned short *v5;  // r14\n
\n
    if (*(v1) < 0)\n
        *(v5) = a3 + 1;\n
    v3 = v2[35];\n
    v2[36] = *((a2 + v3));\n
    v2[35] = v3 + 2;\n
}\n
", "4208616:sub_4037e8": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned short field_1;\n
} struct_0;\n
\n
long long sub_4037e8(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v1;  // r12\n
    unsigned short *v2;  // r14\n
    struct_0 *v3;  // r13\n
\n
    if (*(v1) >= 0)\n
        *(v2) = *(&(&v3->padding_0)[1]);\n
}\n
", "4208642:sub_403802": "typedef struct struct_0 {\n
    char padding_0[1];\n
    unsigned short field_1;\n
} struct_0;\n
\n
long long sub_403802(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned short v1;  // cx\n
    unsigned short *v2;  // r14\n
    char *v3;  // r12\n
    struct_0 *v4;  // r13\n
    unsigned short v5;  // ax\n
    unsigned short v6[37];  // rbx\n
    unsigned short *v7;  // rsi\n
\n
    v1 = a3 + 3;\n
    *(v2) = v1;\n
    if (*(v3) >= 0)\n
    {\n
        v5 = *(&(&v4->padding_0)[1]);\n
        v7 = v6[35] - 2;\n
        v6[35] = v7;\n
        *((a2 + v7)) = v1;\n
        v6[36] = v5;\n
    }\n
}\n
", "4208670:sub_40381e": "typedef struct struct_1 {\n
    char padding_0[63];\n
    char field_3f;\n
    char padding_40[8];\n
    unsigned short field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_40381e()\n
{\n
    struct_1 *v1;  // rbx\n
    struct_0 *v2;  // r13\n
\n
    v1->field_3f = do_add_8b(v1, v1->field_3f, v2->field_1, 0);\n
    v1->field_48 = v1->field_48 + 2;\n
}\n
", "4208686:sub_40382e": "long long sub_40382e()\n
{\n
    char *v1;  // r12\n
\n
    if (*(v1) < 0)\n
        goto LABEL_0x403784;\n
    else\n
        goto LABEL_0x403839;\n
}\n
", "4208705:sub_403841": "long long sub_403841()\n
{\n
    char *v1;  // r12\n
\n
    if (*(v1) < 0)\n
        goto LABEL_0x4037ef;\n
    else\n
        goto LABEL_0x403848;\n
}\n
", "4208720:sub_403850": "long long sub_403850()\n
{\n
    unsigned long long v1;  // rbx\n
\n
    if (!(!step_prefix(v1)))\n
        goto LABEL_0x403de9;\n
}\n
", "4208751:sub_40386f": "long long sub_40386f(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned short *v1;  // r14\n
    char *v2;  // r12\n
\n
    *(v1) = a3 + 3;\n
    if (!(*(v2) < 0))\n
        goto LABEL_0x403de9;\n
}\n
", "4208779:sub_40388b": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned short field_48;\n
} struct_0;\n
\n
long long sub_40388b(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    struct_0 *v1;  // rbx\n
\n
    v1->field_48 = a3 + 3;\n
}\n
", "4208791:sub_403897": "long long sub_403897()\n
{\n
}\n
", "4208823:sub_4038b7": "long long sub_4038b7()\n
{\n
    char *v1;  // r12\n
\n
    if (!(*(v1) & 16))\n
        goto LABEL_0x403784;\n
}\n
", "4208839:sub_4038c7": "long long sub_4038c7()\n
{\n
    char *v1;  // r12\n
\n
    if (!(*(v1) & 16))\n
        goto LABEL_0x4037ef;\n
}\n
", "4208855:sub_4038d7": "long long sub_4038d7(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned short *v1;  // r14\n
    char *v2;  // r12\n
\n
    *(v1) = a3 + 3;\n
    if (!(*(v2) & 16))\n
        goto LABEL_0x40395a;\n
}\n
", "4208879:sub_4038ef": "typedef struct struct_1 {\n
    char padding_0[63];\n
    char field_3f;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_4038ef()\n
{\n
    struct_1 *v1;  // rbx\n
    struct_0 *v2;  // r13\n
\n
    do_sub_8b(v1, v1->field_3f, v2->field_1, 0);\n
}\n
", "4208898:sub_403902": "long long sub_403902()\n
{\n
    char *v1;  // r12\n
\n
    if (!(!(*(v1) & 16)))\n
        goto LABEL_0x403784;\n
}\n
", "4208914:sub_403912": "typedef struct struct_0 {\n
    char padding_0[70];\n
    unsigned short field_46;\n
    unsigned short field_48;\n
    char field_4a;\n
} struct_0;\n
\n
long long sub_403912(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v1;  // rbx\n
    unsigned short *v2;  // rax\n
\n
    v2 = v1->field_46;\n
    v1->field_48 = *((a2 + v2));\n
    v1->field_46 = v2 + 2;\n
    v1->field_4a = 1;\n
}\n
", "4208947:sub_403933": "long long sub_403933()\n
{\n
    char *v1;  // r12\n
\n
    if (!(!(*(v1) & 16)))\n
        goto LABEL_0x4037ef;\n
}\n
", "4208963:sub_403943": "long long sub_403943(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned short *v1;  // r14\n
    char *v2;  // r12\n
\n
    *(v1) = a3 + 3;\n
    if (!(*(v2) & 16))\n
        goto LABEL_0x403de9;\n
    else\n
        goto LABEL_0x40395a;\n
}\n
", "4209023:sub_40397f": "long long sub_40397f()\n
{\n
}\n
", "4209068:sub_4039ac": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_4039ac(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v1;  // r13\n
    struct_0 *v2;  // r12\n
    unsigned short *v3;  // r14\n
\n
    *((a2 + v1->field_1 + 0xff00)) = v2->field_1;\n
    *(v3) = *(v3) + 2;\n
}\n
", "4209100:sub_4039cc": "long long sub_4039cc(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v1[65];  // rbx\n
\n
    *((a2 + v1[64] + 0xff00)) = v1[63];\n
}\n
", "4209119:sub_4039df": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_4039df(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char v1[2];  // r12\n
    struct_0 *v2;  // r13\n
\n
    tmp_1 = v1[1] & v2->field_1;\n
    v1[1] = v1[1] & v2->field_1;\n
    v1[0] = ((tmp_1) * 128) - 96;\n
}\n
", "4209157:sub_403a05": "typedef struct struct_1 {\n
    char padding_0[62];\n
    char field_3e;\n
    char padding_3f[7];\n
    unsigned short field_46;\n
    unsigned short field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_403a05(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    struct_1 *v1;  // rbx\n
    unsigned int v2;  // edi\n
    struct_0 *v3;  // r13\n
    unsigned int v4;  // eax\n
    unsigned long long v5;  // rsi\n
    char v6;  // dl\n
    char v9;  // al\n
\n
    v2 = v1->field_46;\n
    v4 = v3->field_1;\n
    v5 = v4 + v2;\n
    v6 = v1->field_3e & 15;\n
    if (0x10000 <= v5)\n
        v6 = v1->field_3e | 16;\n
    v9 = (v4 & 4095) + (v2 & 4095) >> 7;\n
    v1->field_46 = v5;\n
    v1->field_3e = v6 & 31 | v9 & 32;\n
    v1->field_48 = a3 + 2;\n
}\n
", "4209249:sub_403a61": "long long sub_403a61()\n
{\n
    unsigned short v1[37];  // rbx\n
\n
    v1[36] = v1[34];\n
}\n
", "4209262:sub_403a6e": "typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned short field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_403a6e(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    struct_1 *v1;  // r13\n
    struct_0 *v2;  // r12\n
    unsigned short *v3;  // r14\n
\n
    a2[*(&(&v1->padding_0)[1])] = v2->field_1;\n
    *(v3) = *(v3) + 3;\n
}\n
", "4209290:sub_403a8a": "typedef struct struct_1 {\n
    char padding_0[62];\n
    char field_3e;\n
    char field_3f;\n
    char padding_40[8];\n
    unsigned short field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_403a8a(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    struct_1 *v1;  // rbx\n
    struct_0 *v2;  // r13\n
\n
    tmp_1 = v1->field_3f ^ v2->field_1;\n
    v1->field_3f = v1->field_3f ^ v2->field_1;\n
    v1->field_3e = (!tmp_1) * 128;\n
    v1->field_48 = a3 + 2;\n
}\n
", "4209299:sub_403a93": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
long long sub_403a93(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    struct_0 *v1;  // r12\n
    struct_0 *v2;  // r13\n
\n
    v1->field_1 = *((a2 + v2->field_1 + 0xff00));\n
}\n
", "4209324:sub_403aac": "long long sub_403aac(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char v1[65];  // rbx\n
\n
    v1[63] = *((a2 + v1[64] + 0xff00));\n
}\n
", "4209343:sub_403abf": "typedef struct struct_0 {\n
    char padding_0[74];\n
    char field_4a;\n
} struct_0;\n
\n
long long sub_403abf()\n
{\n
    struct_0 *v1;  // rbx\n
    char v2;  // al\n
\n
    v1->field_4a = v2 | 192;\n
}\n
", "4209353:sub_403ac9": "typedef struct struct_0 {\n
    char padding_0[63];\n
    char field_3f;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
long long sub_403ac9()\n
{\n
    struct_0 *v1;  // rbx\n
    struct_1 *v2;  // r13\n
\n
    v1->field_3f = v1->field_3f | v2->field_1;\n
}\n
", "4209374:sub_403ade": "typedef struct struct_0 {\n
    char padding_0[62];\n
    char field_3e;\n
    char padding_3f[5];\n
    unsigned short field_44;\n
    unsigned short field_46;\n
    unsigned short field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
long long sub_403ade(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    struct_0 *v1;  // rbx\n
    unsigned int v2;  // edi\n
    struct_1 *v3;  // r13\n
    unsigned int v4;  // eax\n
    unsigned long long v5;  // rsi\n
    char v6;  // dl\n
    char v9;  // al\n
\n
    v2 = v1->field_46;\n
    v4 = v3->field_1;\n
    v5 = v4 + v2;\n
    v6 = v1->field_3e & 15;\n
    if (0x10000 <= v5)\n
        v6 = v1->field_3e | 16;\n
    v9 = (v4 & 4095) + (v2 & 4095) >> 7;\n
    v1->field_44 = v5;\n
    v1->field_3e = v6 & 31 | v9 & 32;\n
    v1->field_48 = a3 + 2;\n
}\n
", "4209466:sub_403b3a": "long long sub_403b3a()\n
{\n
    unsigned short v1[36];  // rbx\n
\n
    v1[35] = v1[34];\n
}\n
", "4209491:sub_403b53": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    unsigned short field_1;\n
} struct_1;\n
\n
long long sub_403b53(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    struct_0 *v1;  // r12\n
    struct_1 *v2;  // r13\n
    unsigned short *v3;  // r14\n
\n
    v1->field_1 = a2[*(&(&v2->padding_0)[1])];\n
    *(v3) = a3 + 3;\n
}\n
", "4209521:sub_403b71": "typedef struct struct_0 {\n
    char padding_0[74];\n
    char field_4a;\n
} struct_0;\n
\n
long long sub_403b71()\n
{\n
    struct_0 *v1;  // rbx\n
    char v2;  // al\n
\n
    v1->field_4a = v2 | 160;\n
}\n
", "4209531:sub_403b7b": "typedef struct struct_0 {\n
    char padding_0[63];\n
    char field_3f;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
long long sub_403b7b()\n
{\n
    struct_0 *v1;  // rbx\n
    struct_1 *v2;  // r13\n
\n
    do_sub_8b(v1, v1->field_3f, v2->field_1, 0);\n
}\n
", "4212639:sub_40479f": null, "4212640:do_add_8b": "typedef struct struct_0 {\n
    char padding_0[62];\n
    char field_3e;\n
} struct_0;\n
\n
long long do_add_8b(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned long long v1;  // r8\n
    unsigned long long v2;  // rax\n
    char v3;  // r10b\n
    char v5;  // dl\n
\n
    v1 = a2 + a1;\n
    v2 = v1 + a3;\n
    v3 = ((!v2) * 128) + 16;\n
    if (v2 < 0x100)\n
        v3 = (!v2) * 128;\n
    if ((((a3 & 15) + (v1 & 15)) & 16))\n
        v5 = 32;\n
    else\n
        v5 = ((a2 & 15) + (a1 & 15)) * 2 & 32;\n
    a0->field_3e = v5 | v3;\n
    return v1 + a3;\n
}\n
", "4212727:sub_4047f7": null, "4212736:do_sub_8b": "typedef struct struct_0 {\n
    char padding_0[62];\n
    char field_3e;\n
} struct_0;\n
\n
long long do_sub_8b(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long long v1;  // r8\n
\n
    v1 = a1 - a2;\n
    *(&a0->field_3e) = ((!(((v1 & 15) - (a3 & 15)) & 16) ? 32 : ((a1 & 15) - (a2 & 15)) * 2 & 32) | ((((v1 - a3) & 0xff00)) * 16) | (((v1 - a3)) * 128)) - 64;\n
    return v1 - a3;\n
}\n
", "4212826:sub_40485a": null, "4212832:step_prefix": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[54];\n
    struct struct_1 *field_3e;\n
    unsigned short field_44;\n
    char padding_46[2];\n
    unsigned short field_48;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long step_prefix(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x128]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rbx, Other Possible Types: char\n
    unsigned long long v4;  // rax\n
    char *v5;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx, Other Possible Types: char, unsigned long long\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
    unsigned long long v9;  // cc_op\n
    unsigned long v10;  // cc_dep1\n
    void* v11;  // cc_dep2\n
    unsigned long long v12;  // cc_op\n
    unsigned long long v13;  // cc_dep1\n
    unsigned long long v14;  // cc_op\n
    unsigned long v15;  // cc_dep1\n
    void* v16;  // cc_dep2\n
    unsigned long long v17;  // cc_op\n
    unsigned long long v18;  // cc_dep1\n
    unsigned long v19;  // cc_dep2\n
    unsigned long long v20;  // cc_op\n
    unsigned long v21;  // cc_dep1\n
\n
    v2 = a0->field_0;\n
    v3 = *((v2 + a0->field_44 + 1));\n
    v4 = v3 & 7;\n
    switch (v4)\n
    {\n
    case 0:\n
        v5 = &a0->field_3e + 1;\n
        break;\n
    case 1:\n
        v5 = &a0->field_3e;\n
        break;\n
    case 2:\n
        v5 = &a0->field_3e + 3;\n
        break;\n
    case 3:\n
        v5 = &a0->field_3e + 2;\n
        break;\n
    case 4:\n
        v5 = &a0->field_3e + 5;\n
        break;\n
    case 5:\n
        v5 = &a0->field_3e + 4;\n
        break;\n
    case 6:\n
        v5 = v2 + *((&a0->field_3e + 4));\n
        break;\n
    default:\n
        v5 = &(&a0->padding_8)[1 + 1];\n
        break;\n
    }\n
    v6 = v3 / 8;\n
    v7 = *(v5);\n
    switch (v6)\n
    {\n
    case 0:\n
        v6 = (v7 >> 7) + v7 * 2;\n
        *(v5) = v6;\n
        v9 = 17;\n
        v10 = v6;\n
        v11 = 0;\n
        goto LABEL_40495d;\n
    case 1:\n
        *(v5) = v7 * 128 | v7 / 2;\n
        v12 = 19;\n
        v13 = v7;\n
        goto LABEL_404979;\n
    case 2:\n
        v6 = v7 * 2;\n
        v14 = 17;\n
        v15 = ((&a0->padding_8)[1] >> 4) & 1 | v6;\n
        v16 = 0;\n
        *(v5) = ((&a0->padding_8)[1] >> 4) & 1 | v6;\n
        goto LABEL_40495d;\n
    case 3:\n
        *(&v6) = v7 / 2;\n
        *(&v3) = (&a0->padding_8)[1] * 8;\n
        goto LABEL_404972;\n
    case 4:\n
        v17 = 1;\n
        v18 = v7;\n
        v19 = v7;\n
        *(v5) = v7 + v7;\n
LABEL_40495d:\n
        *(&v6) = [D] amd64g_calculate_condition(0x4<64>, cc_op<8>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>) * 128;\n
        (&a0->padding_8)[1] = [D] amd64g_calculate_condition(0x4<64>, cc_op<8>, cc_dep1<8>, cc_dep2<8>, cc_ndep<8>) * 128;\n
        if (!(v7 < 0))\n
            break;\n
        goto LABEL_4049ad;\n
    case 5:\n
        *(&v6) = v7 / 2;\n
        v3 = v7;\n
LABEL_404972:\n
        v20 = 17;\n
        v21 = v3 & 128 | v6;\n
        *(v5) = v3 & 128 | v6;\n
LABEL_404979:\n
        *(&v6) = [D] amd64g_calculate_condition(0x4<64>, cc_op<8>, cc_dep1<8>, 0x0<64>, cc_ndep<8>);\n
        goto LABEL_4049a2;\n
    case 6:\n
        *(v5) = v7 * 16 | v7 / 16;\n
        *(&v6) = (!v7) * 128;\n
        goto LABEL_4049b0;\n
    case 7:\n
        *(v5) = v7 / 2;\n
        *(&v6) = v7 < 2;\n
LABEL_4049a2:\n
        *(&v6) = v6 * 128;\n
        (&a0->padding_8)[1] = *(&v6);\n
        if (!(v7 & 1))\n
            break;\n
LABEL_4049ad:\n
        *(&v6) = v6 | 16;\n
LABEL_4049b0:\n
        (&a0->padding_8)[1] = v6;\n
        break;\n
    default:\n
        v8 = v6 & 7;\n
        *(&v3) = v3 & 192;\n
        if (*(&v3) == 128)\n
        {\n
            *(v5) = ~((1 << (v8 & 31))) & v7;\n
            break;\n
        }\n
        else if (*(&v3) == 192)\n
        {\n
            v0 = v7;\n
            *(&v0 + ((v8 & 31) >> 3)) = *(&v0 + ((v8 & 31) >> 3)) | 1 << (v8 & 31 & 7);\n
            *(v5) = v0;\n
            break;\n
        }\n
        else if (*(&v3) != 64)\n
        {\n
            cgc_printf(\"Invalid prefix opcode\\n
\", v5, v7, v8, a4);\n
            return 0;\n
        }\n
        else\n
        {\n
            *(&v5) = (&a0->padding_8)[1] & 31;\n
            (&a0->padding_8)[1] = v5 + 32;\n
            v0 = v7;\n
            if (!((*(&v0 + ((v8 & 31) >> 3)) >> (v8 & 31 & 7)) & 1))\n
            {\n
                (&a0->padding_8)[1] = v5 | 160;\n
                break;\n
            }\n
        }\n
    }\n
    a0->field_44 = a0->field_44 + 2;\n
    return (v4 == 6) * 8 + 8;\n
}\n
", "4213236:sub_4049f4": null, "4213248:cgc_gb_reset": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[52];\n
    char field_3c;\n
    char padding_3d[1];\n
    unsigned long long field_3e;\n
    unsigned int field_46;\n
    char padding_4a[2];\n
    unsigned long long field_4c;\n
    unsigned int field_54;\n
    uint128_t field_58;\n
    unsigned int field_68;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[65285];\n
    char field_ff05;\n
    char field_ff06;\n
    char field_ff07;\n
    char padding_ff08[8];\n
    char field_ff10;\n
    char field_ff11;\n
    char field_ff12;\n
    char padding_ff13[1];\n
    char field_ff14;\n
    char padding_ff15[1];\n
    char field_ff16;\n
    char field_ff17;\n
    char padding_ff18[1];\n
    char field_ff19;\n
    char field_ff1a;\n
    char field_ff1b;\n
    char field_ff1c;\n
    char field_ff1d;\n
    char padding_ff1e[2];\n
    char field_ff20;\n
    char field_ff21;\n
    char field_ff22;\n
    char field_ff23;\n
    char field_ff24;\n
    char field_ff25;\n
    char field_ff26;\n
    char padding_ff27[25];\n
    char field_ff40;\n
    char padding_ff41[1];\n
    char field_ff42;\n
    char field_ff43;\n
    char padding_ff44[1];\n
    char field_ff45;\n
    char field_ff46;\n
    char field_ff47;\n
    char field_ff48;\n
    char field_ff49;\n
    char field_ff4a;\n
    char field_ff4b;\n
    char padding_ff4c[179];\n
    char field_ffff;\n
} struct_1;\n
\n
long long cgc_gb_reset(struct_0 *a0)\n
{\n
    *(&(&a0->padding_3d)[1]) = 93732094958830000;\n
    *((&a0->field_3e + 6)) = 16842750;\n
    a0->field_0->field_ff05 = 0;\n
    a0->field_0->field_ff06 = 0;\n
    a0->field_0->field_ff07 = 0;\n
    a0->field_0->field_ff10 = 128;\n
    a0->field_0->field_ff11 = 191;\n
    a0->field_0->field_ff12 = 243;\n
    a0->field_0->field_ff14 = 191;\n
    a0->field_0->field_ff16 = 63;\n
    a0->field_0->field_ff17 = 0;\n
    a0->field_0->field_ff19 = 191;\n
    a0->field_0->field_ff1a = 127;\n
    a0->field_0->field_ff1b = 255;\n
    a0->field_0->field_ff1c = 159;\n
    a0->field_0->field_ff1d = 191;\n
    a0->field_0->field_ff20 = 255;\n
    a0->field_0->field_ff21 = 0;\n
    a0->field_0->field_ff22 = 0;\n
    a0->field_0->field_ff23 = 191;\n
    a0->field_0->field_ff24 = 119;\n
    a0->field_0->field_ff25 = 243;\n
    a0->field_0->field_ff26 = 241;\n
    a0->field_0->field_ff40 = 144;\n
    a0->field_0->field_ff42 = 0;\n
    a0->field_0->field_ff43 = 0;\n
    a0->field_0->field_ff45 = 0;\n
    a0->field_0->field_ff47 = 252;\n
    a0->field_0->field_ff48 = 255;\n
    a0->field_0->field_ff49 = 255;\n
    a0->field_0->field_ff4a = 0;\n
    a0->field_0->field_ff4b = 0;\n
    a0->field_0->field_ffff = 0;\n
    a0->field_0->field_ff46 = 255;\n
    *((&a0->field_58 + 8)) = 0;\n
    *(&a0->field_54) = 0;\n
    a0->field_3c = 0;\n
    *(&a0->padding_4a) = 0x4100000000000000;\n
    *((&a0->field_4c + 4)) = 0;\n
    return 0x4100000000000000;\n
}\n
", "4213629:sub_404b7d": null, "4213632:cgc_gb_new": "long long cgc_gb_new()\n
{\n
    char v0;  // [bp-0x10]\n
    unsigned long v1;  // [bp-0x8]\n
    unsigned long v3;  // rbx\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v9[2];  // rbx\n
\n
    v1 = v3;\n
    if (cgc_allocate(v4, v5, v6))\n
        return 0;\n
    v9 = *(&v0);\n
    if (cgc_allocate(v4, v5, v6))\n
        return 0;\n
    v9[1] = v9[0];\n
    if (cgc_allocate(v4, v5, v6))\n
    {\n
        return 0;\n
    }\n
    else if (!cgc_allocate(v4, v5, v6))\n
    {\n
        return *(&v0);\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4213768:sub_404c08": null, "4213776:cgc_gb_load": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[308];\n
    char field_134;\n
    char padding_135[19];\n
    char field_148;\n
    char field_149;\n
} struct_1;\n
\n
long long cgc_gb_load(struct_0 *a0, unsigned int a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[330];  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    void* v5;  // rbp, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    cgc_memcpy(a0->field_8, a1, 0x8000);\n
    v3 = a0->field_8;\n
    v4 = cgc_isupper(v3[308]);\n
    v5 = 0;\n
    while (v4)\n
    {\n
        if (v5 <= 15)\n
            a0[1].padding_0[v5] = v3[308 + v5];\n
        a0 = v3[309 + v5];\n
        v5 += 1;\n
        v4 = cgc_isupper(a0);\n
    }\n
    a0[1].padding_0[v5] = 0;\n
    cgc_printf(\"Loading %s\\n
\", a0 + 1, 0x8000, a3, a4);\n
    if (!v3[328] && !v3[329])\n
        return 1;\n
    cgc_printf(\"Incompatible cartridge.\\n
\", a1, 0x8000, a3, a4);\n
    return 0;\n
}\n
", "4213943:sub_404cb7": null, "4213952:cgc_gb_tick": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[52];\n
    char field_3c;\n
    char padding_3d[27];\n
    unsigned int field_58;\n
    char padding_5c[8];\n
    unsigned int field_64;\n
    unsigned int field_68;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[65280];\n
    char field_ff00;\n
    char padding_ff01[3];\n
    char field_ff04;\n
    char field_ff05;\n
    char field_ff06;\n
    char field_ff07;\n
    char padding_ff08[62];\n
    char field_ff46;\n
} struct_1;\n
\n
extern unsigned int g_4066c0[4];\n
\n
long long cgc_gb_tick(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    unsigned long v2;  // rax\n
    char v4[65351];  // rax, Other Possible Types: unsigned long\n
    unsigned int v5;  // eax\n
    char v6[65351];  // rax\n
    unsigned long long v7;  // rsi\n
    unsigned int v8;  // eax\n
    char v10[65351];  // rax\n
    unsigned long long v11;  // rcx\n
    unsigned int v14;  // esi\n
    char v15[65351];  // rax\n
\n
    v0 = v2;\n
    a0->field_0->field_ff00 = a0->field_0->field_ff00 | 15;\n
    v4 = a0->field_0;\n
    *(&a3) = v4[0xff00];\n
    if (!(v4[0xff00] & 16))\n
    {\n
        v4[0xff00] = a3 & (~(a0->field_3c) | 240);\n
        v4 = a0->field_0;\n
        *(&a3) = *((v4 + 0xff00));\n
    }\n
    if (!(a3 & 32))\n
        *((v4 + 0xff00)) = a3 & ~((a0->field_3c >> 4));\n
    if (!cgc_cpu_tick(a0))\n
    {\n
        return 0;\n
    }\n
    else if (!cgc_lcd_tick(a0))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_58 + 1;\n
        a0->field_58 = v5;\n
        if (v5 == 10000000)\n
        {\n
            cgc_printf(\"Game Over\\n
\", a1, a2, a3, a4);\n
            return 0;\n
        }\n
        v6 = a0->field_0;\n
        v7 = v6[65350];\n
        if (v7 != 255)\n
        {\n
            cgc_memcpy(&v6[0xfe00], &v6[0x100 * v7], 0xa0);\n
            a0->field_0->field_ff46 = 255;\n
        }\n
        v8 = a0->field_64 + 1;\n
        a0->field_64 = v8;\n
        if (v8 == 61)\n
        {\n
            a0->field_0->field_ff04 = a0->field_0->field_ff04 + 1;\n
            a0->field_64 = 0;\n
        }\n
        v10 = a0->field_0;\n
        v11 = v10[65287];\n
        if (!(v11 & 4))\n
            return 1;\n
        v14 = a0->field_68 + 1;\n
        a0->field_68 = v14;\n
        if (v14 >= g_4066c0[v11 & 3])\n
        {\n
            a0->field_68 = 0;\n
            tmp_3 = v10[65285];\n
            v10[65285] = v10[65285] + 1;\n
            if ([D] amd64g_calculate_condition(0x4<64>, 0x1<64>, Conv(8->64, t3), 0x1<64>, cc_ndep<8>))\n
            {\n
                v15 = a0->field_0;\n
                v15[65285] = v15[65286];\n
                cgc_cpu_interrupt(a0, 2);\n
            }\n
        }\n
    }\n
}\n
", "4214280:sub_404e08": null, "4214288:cgc_lcd_tick": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[24];\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
    char field_30;\n
    char field_31;\n
    char field_32;\n
    char field_33;\n
    char field_34;\n
    char field_35;\n
    char field_36;\n
    char field_37;\n
    char field_38;\n
    char field_39;\n
    char field_3a;\n
    char field_3b;\n
    char padding_3c[24];\n
    unsigned int field_54;\n
    char padding_58[8];\n
    unsigned int field_60;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[65344];\n
    char field_ff40;\n
    char field_ff41;\n
    char field_ff42;\n
    char field_ff43;\n
    char field_ff44;\n
    char field_ff45;\n
    char padding_ff46[1];\n
    struct struct_0 *field_ff47;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-7;\n
    char field_-6;\n
    char field_-5;\n
    char field_-4;\n
    char field_-3;\n
    char field_-2;\n
    char padding_-1[1];\n
    char field_0;\n
} struct_2;\n
\n
long long cgc_lcd_tick(struct_1 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_10;  // tmp #10\n
    int tmp_110;  // tmp #110\n
    int tmp_170;  // tmp #170\n
    int tmp_230;  // tmp #230\n
    unsigned long v2;  // rax\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // rax\n
    struct_0 *v5;  // rax\n
    struct_0 *v6;  // rcx\n
    char v7;  // al\n
    struct_0 *v13;  // rax, Other Possible Types: unsigned long\n
    unsigned long v14;  // rsi, Other Possible Types: unsigned long long\n
    struct_0 *v15;  // rax, Other Possible Types: unsigned long\n
    char *v16;  // r8\n
    char *v17;  // r10\n
    void* v18;  // r9, Other Possible Types: unsigned long\n
    unsigned long long v19;  // r11\n
    unsigned int v20;  // r14d\n
    void* v21;  // r15, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rcx\n
    struct_0 *v23;  // rsi\n
    struct_2 *v25;  // rdx, Other Possible Types: unsigned long\n
    char *v26;  // rcx\n
    unsigned long v27;  // rsi\n
    unsigned long long v28;  // rax\n
    struct_0 *v29;  // rcx\n
    char *v30;  // r9\n
    char *v31;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v32;  // rsi, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    if (v2 == 109)\n
        v3 = 0;\n
    else\n
        v3 = a0->field_60 + 1;\n
    a0->field_60 = v3;\n
    if (v3 == 60)\n
    {\n
        v4 = a0->field_0;\n
        if (v4->field_ff44 > 143)\n
            return 1;\n
        v4->field_ff41 = v4->field_ff41 & 252;\n
        if (!(a0->field_0->field_ff41 & 8))\n
            return 1;\n
        v14 = 1;\n
LABEL_404ece:\n
        cgc_cpu_interrupt(a0, v14);\n
        return 1;\n
    }\n
    if (v3 == 19)\n
    {\n
        v5 = a0->field_0;\n
        if (v5->field_ff44 > 143)\n
            return 1;\n
        v5->field_ff41 = v5->field_ff41 & 252;\n
        a0->field_0->field_ff41 = a0->field_0->field_ff41 | 3;\n
    }\n
    if (v3)\n
        return 1;\n
    v6 = a0->field_0;\n
    tmp_10 = v6->field_ff44;\n
    v7 = v6->field_ff44 + 1;\n
    v6->field_ff44 = v7;\n
    if (tmp_10 > 143)\n
    {\n
        if (v7 == 154)\n
            a0->field_0->field_ff44 = 0;\n
        else\n
            return 1;\n
    }\n
    else\n
    {\n
        if (v7 == 144)\n
        {\n
            a0->field_54 = 1;\n
            a0->field_0->field_ff41 = a0->field_0->field_ff41 & 252;\n
            a0->field_0->field_ff41 = a0->field_0->field_ff41 | 1;\n
            if ((a0->field_0->field_ff41 & 16))\n
                cgc_cpu_interrupt(a0, 1);\n
            v14 = 0;\n
            goto LABEL_404ece;\n
        }\n
    }\n
    a0->field_0->field_ff41 = a0->field_0->field_ff41 & 252;\n
    a0->field_0->field_ff41 = a0->field_0->field_ff41 | 2;\n
    v13 = a0->field_0;\n
    *(&v6) = v13->field_ff41;\n
    if ((v13->field_ff41 & 32))\n
    {\n
        cgc_cpu_interrupt(a0, 1);\n
        v13 = a0->field_0;\n
        *(&v6) = *((v13 + 65345));\n
    }\n
    *((v13 + 65345)) = v6 & 251;\n
    v15 = a0->field_0;\n
    if (v15->field_ff44 == v15->field_ff45)\n
    {\n
        v15->field_ff41 = v15->field_ff41 | 4;\n
        v15 = a0->field_0;\n
        if ((*((v15 + 65345)) & 64))\n
        {\n
            cgc_cpu_interrupt(a0, 1);\n
            v15 = a0->field_0;\n
        }\n
    }\n
    tmp_110 = *((v15 + 65351));\n
    *(&v6) = *((v15 + 65351));\n
    a0->field_30 = v6 & 3;\n
    a0->field_31 = v6 / 4 & 3;\n
    a0->field_32 = v6 / 16 & 3;\n
    a0->field_33 = tmp_110 >> 6;\n
    tmp_170 = *((v15 + 65352));\n
    *(&v6) = *((v15 + 65352));\n
    a0->field_34 = v6 & 3;\n
    a0->field_35 = v6 / 4 & 3;\n
    a0->field_36 = v6 / 16 & 3;\n
    a0->field_37 = tmp_170 >> 6;\n
    tmp_230 = *((v15 + 65353));\n
    *(&v6) = *((v15 + 65353));\n
    a0->field_38 = v6 & 3;\n
    a0->field_39 = v6 / 4 & 3;\n
    a0->field_3a = v6 / 16 & 3;\n
    a0->field_3b = tmp_230 >> 6;\n
    if (!(*((v15 + 65344)) & 1))\n
        return 1;\n
    v16 = *((v15 + 65348));\n
    v17 = ((*((v15 + 65344)) & 8) >> 3) * 0x400 + v15 + 0x9800;\n
    v18 = 0;\n
    do\n
    {\n
        v19 = v18 * 32;\n
        v20 = v18 * 0x800;\n
        v21 = 0;\n
        do\n
        {\n
            v22 = v17[v19 + v21];\n
            v23 = a0->field_0;\n
            v25 = a0->field_20 + ((v20 | v21 * 8) & -8) + 7;\n
            v26 = &v23->padding_0[(!(v23->field_ff40 & 16) ? v22 * 16 | 0x8000 : v22 * 16 + 0x9000) + 1];\n
            v27 = 0;\n
            do\n
            {\n
                *((v25 - 7)) = (&a0->field_30)[v26[1 + 2 * v27] >> 7 | (v26[2 * v27] >> 6) & 2];\n
                *((v25 - 6)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 6) & 1 | (v26[2 * v27] >> 5) & 2];\n
                *((v25 - 5)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 5) & 1 | (v26[2 * v27] >> 4) & 2];\n
                *((v25 - 4)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 4) & 1 | (v26[2 * v27] >> 3) & 2];\n
                *((v25 - 3)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 3) & 1 | (v26[2 * v27] >> 2) & 2];\n
                *((v25 - 2)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 2) & 1 | (v26[2 * v27] >> 1) & 2];\n
                *((v25 - 1)) = (&a0->field_30)[(v26[1 + 2 * v27] >> 1) & 1 | v26[2 * v27] & 2];\n
                v28 = (&a0->field_30)[2 * (v26[2 * v27] & 1) + (v26[1 + 2 * v27] & 1)];\n
                *(v25) = v28;\n
                v27 += 1;\n
                v25 += 0x100;\n
            } while (v27 != 8);\n
            v21 += 1;\n
        } while (v21 != 32);\n
        v18 += 1;\n
    } while (v18 != 32);\n
    v29 = a0->field_0;\n
    *(&v28) = v29->field_ff43;\n
    v30 = (v29->field_ff42 + v16) * 0x100;\n
    v31 = v16 * 32 * 5;\n
    v32 = 160;\n
    while (true)\n
    {\n
        *((a0->field_28 + v31)) = *((a0->field_20 + (v30 | v28)));\n
        *((a0->field_28 + v31 + 1)) = *((a0->field_20 + (v28 + 1 | v30)));\n
        *(&v28) = v28 + 2;\n
        v31 += 2;\n
        v32 -= 2;\n
    }\n
}\n
", "4214915:sub_405083": null, "4215407:sub_40526f": null, "4215408:cgc_process_input": "typedef struct struct_0 {\n
    char padding_0[60];\n
    char field_3c;\n
} struct_0;\n
\n
extern unsigned int g_4066d0;\n
\n
long long cgc_process_input(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x19]\n
    char v1;  // [bp-0x18]\n
    struct_0 *v3;  // rbx\n
    void* v4;  // rbp, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v5;  // rax\n
    char *v6;  // rdi, Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v4 = 0;\n
    if (!(!cgc_receive(a0, a1, a2, a3) && *(&v1) == 1))\n
        return v4;\n
    v4 = 1;\n
    v5 = v0 - 63;\n
    switch (v5)\n
    {\n
    case 0: case 41:\n
        v6 = \"HELP: (q)uit, (h)elp, (wasd) direction keys, (j) A, (k) B, (u) SELECT, (i) START\\n
\";\n
        goto LABEL_40532b;\n
    case 2:\n
        v3->field_3c = v3->field_3c & 253;\n
        break;\n
    case 5:\n
        v3->field_3c = v3->field_3c & 254;\n
        break;\n
    case 10:\n
        v3->field_3c = v3->field_3c & 127;\n
        break;\n
    case 11:\n
        v3->field_3c = v3->field_3c & 239;\n
        break;\n
    case 12:\n
        v3->field_3c = v3->field_3c & 223;\n
        break;\n
    case 20:\n
        v3->field_3c = v3->field_3c & 247;\n
        break;\n
    case 22:\n
        v3->field_3c = v3->field_3c & 191;\n
        break;\n
    case 24:\n
        v3->field_3c = v3->field_3c & 251;\n
        break;\n
    case 34:\n
        v3->field_3c = v3->field_3c | 2;\n
        break;\n
    case 37:\n
        v3->field_3c = v3->field_3c | 1;\n
        break;\n
    case 42:\n
        v3->field_3c = v3->field_3c | 128;\n
        break;\n
    case 43:\n
        v3->field_3c = v3->field_3c | 16;\n
        break;\n
    case 44:\n
        v3->field_3c = v3->field_3c | 32;\n
        break;\n
    case 50:\n
        v6 = \"Good-Bye\\n
\";\n
        v4 = 0;\n
LABEL_40532b:\n
        cgc_printf(v6, a1, a2, &g_4066d0, a4);\n
        break;\n
    case 52:\n
        v3->field_3c = v3->field_3c | 8;\n
        break;\n
    case 54:\n
        v3->field_3c = v3->field_3c | 64;\n
        break;\n
    case 56:\n
        v3->field_3c = v3->field_3c | 4;\n
        break;\n
    }\n
}\n
", "4215629:sub_40534d": null, "4215632:cgc_check_input": "long long cgc_check_input(void* a0)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned long long v1;  // [bp-0xa0]\n
    int v2;  // [bp-0x98]\n
    int v3;  // [bp-0x88]\n
    int v4;  // [bp-0x78]\n
    int v5;  // [bp-0x68]\n
    int v6;  // [bp-0x58]\n
    int v7;  // [bp-0x48]\n
    int v8;  // [bp-0x38]\n
    int v9;  // [bp-0x28]\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // rdx\n
    unsigned long long v14;  // rcx\n
    unsigned long long v15;  // r8\n
\n
    v0 = 0;\n
    *(&v3) = 0;\n
    *(&v4) = 0;\n
    *(&v5) = 0;\n
    *(&v6) = 0;\n
    *(&v7) = 0;\n
    *(&v8) = 0;\n
    *(&v9) = 0;\n
    *(&v2) = 1;\n
    v1 = 0x6400000000;\n
    if (cgc_fdwait(a0, v12, v13, v14, v15))\n
    {\n
        return 0;\n
    }\n
    else if (!v0)\n
    {\n
        return 1;\n
    }\n
    else\n
    {\n
        return cgc_process_input(a0, v12, v13, v14, v15);\n
    }\n
}\n
", "4215789:sub_4053ed": null, "4215792:main": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[32];\n
    struct struct_2 *field_28;\n
    char padding_30[14];\n
    unsigned short field_3e;\n
    unsigned short field_40;\n
    unsigned short field_42;\n
    unsigned short field_44;\n
    unsigned short field_46;\n
    unsigned short field_48;\n
    char padding_4a[6];\n
    unsigned int field_50;\n
    unsigned int field_54;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[65344];\n
    char field_ff40;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char g_4067b4;\n
extern char g_406848;\n
extern char g_40684d;\n
extern char g_406862;\n
extern char g_40686d;\n
extern char g_406875;\n
extern char g_4068a1;\n
\n
int main(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v4;  // [bp-0x8038]\n
    struct_1 *v13;  // rax\n
    struct_1 *v14;  // r13\n
    struct_3 *v15;  // rbp\n
    unsigned long long v16;  // rbx\n
\n
    v13 = cgc_gb_new();\n
    if (!v13)\n
    {\n
        cgc_printf(\"Unable to allocate memory.\\n
\", a1, a2, a3, a4);\n
        cgc__terminate(\"Unable to allocate memory.\\n
\");\n
    }\n
    v14 = v13;\n
    cgc_printf(&g_406848, a1, a2, a3, a4);\n
    v15 = &v4;\n
    v16 = 0x8000;\n
}\n
", "4216014:sub_4054ce": null, "4216126:sub_40553e": null, "4216188:sub_40557c": null, "4216572:sub_4056fc": null, "4216688:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}