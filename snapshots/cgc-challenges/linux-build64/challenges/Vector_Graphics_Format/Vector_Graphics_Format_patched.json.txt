{"4202496:_init": "extern struct_0 *g_407a60;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_407a60;\n
    if (g_407a60)\n
        v1 = g_407a60();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_407a80;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_407a80;\n
    goto *(4225672);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202608:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4225648);\n
}\n
", "4202624:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202661:sub_4020a5": null, "4202662:sub_4020a6": null, "4202672:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_407a58;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202713:sub_4020d9": null, "4202720:register_tm_clones": "extern unsigned long long g_407a68;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202777:sub_402119": null, "4202784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_407a70;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_407a70)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202837:sub_402155": null, "4202841:sub_402159": null, "4202848:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202857:sub_402169": null, "4202864:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4202931:sub_4021b3": null, "4202944:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203714:sub_4024c2": null, "4203728:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4203923:sub_402593": null, "4203936:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 **, unsigned long, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204476:sub_4027bc": null, "4204480:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4204542:sub_4027fe": null, "4204544:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    unsigned int *v0;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xd8]\n
    unsigned int v2;  // [bp-0xcc]\n
    unsigned int *v3;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0xc0]\n
    unsigned int v5;  // [bp-0xb4]\n
    struct struct_0 **v6;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0xa8]\n
    unsigned int v8;  // [bp-0x9c]\n
    unsigned int v9;  // [bp-0x98]\n
    unsigned int v10;  // [bp-0x94]\n
    unsigned int v11;  // [bp-0x90]\n
    unsigned int v12;  // [bp-0x8c]\n
    char v13;  // [bp-0x88]\n
    unsigned int v14;  // [bp-0x60]\n
    unsigned int v15;  // [bp-0x5c]\n
    char v16;  // [bp-0x58]\n
    char *v17;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v18;  // [bp-0x24]\n
    char *v19;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v20;  // [bp-0xc]\n
    struct_1 *v22;  // rcx\n
    unsigned long long v23;  // rdx\n
    unsigned int *v24;  // rax\n
    struct_1 *v25;  // rcx\n
    unsigned int *v26;  // rdx\n
    struct_1 *v27;  // rcx\n
    unsigned long long v28;  // rdx\n
    struct struct_0 **v29;  // rax\n
    struct_1 *v30;  // rcx\n
    struct struct_0 **v31;  // rdx\n
    struct_1 *v32;  // rcx\n
    unsigned long long v33;  // rdx\n
    unsigned int *v34;  // rax\n
    struct_1 *v35;  // rcx\n
    unsigned int *v36;  // rdx\n
    struct_3 *v37;  // rax\n
    unsigned long v38;  // rax\n
    unsigned long v39;  // rax\n
    unsigned int v40;  // eax\n
    unsigned long v41;  // rax\n
    unsigned int v42;  // eax\n
    unsigned int v44;  // eax\n
\n
    v19 = a0;\n
    v18 = 0;\n
    if (!v19)\n
    {\n
        v20 = -1;\n
        return v20;\n
    }\n
    while (true)\n
    {\n
        if (!*(v19))\n
        {\n
            v20 = v18;\n
            return v20;\n
        }\n
        if (*(v19) == 36)\n
            break;\n
        cgc_putc(*(v19));\n
        v19 += 1;\n
        v18 += 1;\n
LABEL_402cc2:\n
    }\n
    v19 += 1;\n
    v9 = *(v19);\n
    if (!v9)\n
    {\n
        v20 = -1;\n
        return v20;\n
    }\n
    if (v9 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_402c90;\n
    }\n
    if (v9 != 88)\n
    {\n
        if (v9 == 100)\n
        {\n
            v4 = a1;\n
            v5 = v4->field_0;\n
            if (v5 <= 40)\n
            {\n
                v22 = v4;\n
                v23 = v5;\n
                v24 = v23 + v22->field_10;\n
                v22->field_0 = v23 + 8;\n
                v3 = v24;\n
            }\n
            else\n
            {\n
                v25 = v4;\n
                v26 = v25->field_8;\n
                v25->field_8 = &v26[2];\n
                v3 = v26;\n
            }\n
            v14 = *(v3);\n
            v15 = 0;\n
            if (v14 < 0)\n
            {\n
                v14 = -(v14);\n
                cgc_putc(45);\n
                v18 += 1;\n
            }\n
            else\n
            {\n
                if (!v14)\n
                {\n
                    v15 = 1;\n
                    v16 = 48;\n
                }\n
            }\n
            while (v14)\n
            {\n
                v41 = v15;\n
                v15 = v41 + 1;\n
                (&v16)[v41] = ((v14 >> 31 CONCAT v14) /m 10 >> 32) + 48;\n
                v42 = v14;\n
                v14 = (v42 >> 31 CONCAT v42) /m 10;\n
                if (v15 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v44 = v15;\n
                v15 = v44 - 1;\n
                if (v44 <= 0)\n
                    break;\n
                cgc_putc((&v16)[v15]);\n
                v18 += 1;\n
            }\n
            goto LABEL_402c90;\n
        }\n
        else if (v9 == 115)\n
        {\n
            v7 = a1;\n
            v8 = v7->field_0;\n
            if (v8 <= 40)\n
            {\n
                v27 = v7;\n
                v28 = v8;\n
                v29 = v28 + v27->field_10;\n
                v27->field_0 = v28 + 8;\n
                v6 = v29;\n
            }\n
            else\n
            {\n
                v30 = v7;\n
                v31 = v30->field_8;\n
                v30->field_8 = &v31[1];\n
                v6 = v31;\n
            }\n
            v17 = *(v6);\n
            while (*(v17))\n
            {\n
                cgc_putc(*(v17));\n
                v18 += 1;\n
                v17 += 1;\n
                if (!v17)\n
                    break;\n
            }\n
            goto LABEL_402c90;\n
        }\n
        else if (v9 != 120)\n
        {\n
            v20 = -1;\n
            return v20;\n
        }\n
    }\n
    v1 = a1;\n
    v2 = v1->field_0;\n
    if (v2 > 40)\n
    {\n
        v35 = v1;\n
        v36 = v35->field_8;\n
        v35->field_8 = &v36[2];\n
        v0 = v36;\n
    }\n
    else\n
    {\n
        v32 = v1;\n
        v33 = v2;\n
        v34 = v33 + v32->field_10;\n
        v32->field_0 = v33 + 8;\n
        v0 = v34;\n
    }\n
    v11 = *(v0);\n
    v12 = 0;\n
    while (v11)\n
    {\n
        v10 = v11 & 15;\n
        v11 >>= 4;\n
        if (v10 < 10)\n
        {\n
            v37 = v12;\n
            v12 = v37 + 1;\n
            *((&v13 + v37)) = v10 + 48;\n
        }\n
        else if (*(v19) == 120)\n
        {\n
            v38 = v12;\n
            v12 = v38 + 1;\n
            (&v13)[v38] = v10 + 87;\n
        }\n
        else\n
        {\n
            v39 = v12;\n
            v12 = v39 + 1;\n
            (&v13)[v39] = v10 + 55;\n
        }\n
        if (v12 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v40 = v12;\n
        v12 = v40 - 1;\n
        if (v40 <= 0)\n
            break;\n
        cgc_putc((&v13)[v12]);\n
        v18 += 1;\n
    }\n
LABEL_402c90:\n
    v19 += 1;\n
    goto LABEL_402cc2;\n
}\n
", "4205785:sub_402cd9": null, "4205792:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4205952:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206043:sub_402ddb": null, "4206048:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206099:sub_402e13": null, "4206112:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4206140:sub_402e3c": null, "4206144:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4206196:sub_402e74": null, "4206208:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4206263:sub_402eb7": null, "4206272:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4206327:sub_402ef7": null, "4206336:cgc_strcmp": "long long cgc_strcmp(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[a0] && !v0[a1])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!v0[a1])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (v0[a0] < v0[a1])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (v0[a0] <= v0[a1])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206591:sub_402fff": null, "4206592:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4206695:sub_403067": null, "4206704:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4206825:sub_4030e9": null, "4206832:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a2 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a2; v0 += 4)\n
        {\n
            *(&v0[a0]) = *(&v0[a1]);\n
        }\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4206998:sub_403196": null, "4207008:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2 >= 4)\n
    {\n
        for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v1 + 3 < a2; v1 += 4)\n
        {\n
            *((a0 + v1)) = v0;\n
        }\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = a1;\n
    }\n
    return a0;\n
}\n
", "4207192:sub_403258": null, "4207200:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4207592:sub_4033e8": null, "4207600:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4207660:sub_40342c": null, "4207664:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = -(a0);\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4207705:sub_403459": null, "4207712:cgc_setup_io": "extern char g_currentReadFD;\n
extern char g_currentWriteFD;\n
\n
long long cgc_setup_io(unsigned long a0, unsigned long a1)\n
{\n
    *(&g_currentReadFD) = a0;\n
    *(&g_currentWriteFD) = a1;\n
    return a1;\n
}\n
", "4207742:sub_40347e": null, "4207744:cgc_read_u8": "long long cgc_read_u8()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 1;\n
    v2 = cgc_receive(v4, v5, v6, v7);\n
    if (v2)\n
    {\n
        cgc__terminate(v4);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4207816:sub_4034c8": null, "4207824:cgc_read_u16": "long long cgc_read_u16()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    char v1;  // [bp-0xe]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 1;\n
    v2 = cgc_receive(v4, v5, v6, v7);\n
    if (v2)\n
    {\n
        cgc__terminate(v4);\n
        return *(&v1);\n
    }\n
    return *(&v1);\n
}\n
", "4207896:sub_403518": null, "4207904:cgc_read_u32": "long long cgc_read_u32()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 1;\n
    v2 = cgc_receive(v4, v5, v6, v7);\n
    if (v2)\n
    {\n
        cgc__terminate(v4);\n
        return *(&v1);\n
    }\n
    return *(&v1);\n
}\n
", "4207975:sub_403567": null, "4207984:cgc_write_u8": "long long cgc_write_u8(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0;\n
    v0 = 1;\n
    v7 = cgc_transmit(a0, v4, v5, v6);\n
    v1 = v7;\n
    if (v7)\n
    {\n
        v7 = cgc__terminate(a0);\n
        return v7;\n
    }\n
    return v7;\n
}\n
", "4208058:sub_4035ba": null, "4208064:cgc_write_u16": "long long cgc_write_u16(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned short v1;  // [bp-0xa]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v6 = cgc_transmit(a0, v3, v4, v5);\n
    v0 = v6;\n
    if (v6)\n
    {\n
        v6 = cgc__terminate(a0);\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4208131:sub_403603": null, "4208144:cgc_write_u32": "long long cgc_write_u32(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v6 = cgc_transmit(a0, v3, v4, v5);\n
    v0 = v6;\n
    if (v6)\n
    {\n
        v6 = cgc__terminate(a0);\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4208207:sub_40364f": null, "4208208:cgc_pm_write_u32": "long long cgc_pm_write_u32(unsigned int *a0, unsigned int *a1, unsigned long a2)\n
{\n
    *((a0 + *(a1))) = a2;\n
    *(a1) = *(a1) + 4;\n
    return 4;\n
}\n
", "4208258:sub_403682": null, "4208272:cgc_pm_write_u16": "long long cgc_pm_write_u16(unsigned short *a0, unsigned int *a1, unsigned long a2)\n
{\n
    *((a0 + *(a1))) = a2;\n
    *(a1) = *(a1) + 2;\n
    return 2;\n
}\n
", "4208328:sub_4036c8": null, "4208336:cgc_pm_write_u8": "long long cgc_pm_write_u8(char *a0, unsigned int *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x19]\n
\n
    a0[*(a1)] = v0;\n
    *(a1) = *(a1) + 1;\n
    return 1;\n
}\n
", "4208388:sub_403704": null, "4208400:cgc_pixelmap_write_file": "long long cgc_pixelmap_write_file(struct struct_0 **a0, unsigned int *a1, char *a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x98]\n
    char v1;  // [bp-0x93]\n
    char v2;  // [bp-0x92]\n
    char v3;  // [bp-0x91]\n
    unsigned int v4;  // [bp-0x90]\n
    unsigned int v5;  // [bp-0x8c]\n
    char *v6;  // [bp-0x88]\n
    unsigned int v7;  // [bp-0x7c]\n
    unsigned int v8;  // [bp-0x78]\n
    unsigned int v9;  // [bp-0x74]\n
    unsigned int v10;  // [bp-0x70]\n
    unsigned short v11;  // [bp-0x6c]\n
    unsigned short v12;  // [bp-0x6a]\n
    unsigned int v13;  // [bp-0x68]\n
    unsigned int v14;  // [bp-0x64]\n
    unsigned int v15;  // [bp-0x60]\n
    unsigned int v16;  // [bp-0x5c]\n
    unsigned int v17;  // [bp-0x58]\n
    unsigned int v18;  // [bp-0x54]\n
    unsigned short v19;  // [bp-0x50]\n
    unsigned int v20;  // [bp-0x4e]\n
    unsigned short v21;  // [bp-0x4a]\n
    unsigned short v22;  // [bp-0x48]\n
    unsigned int v23;  // [bp-0x46]\n
    unsigned int v24;  // [bp-0x3c]\n
    unsigned int v25;  // [bp-0x38]\n
    unsigned int v26;  // [bp-0x34]\n
    unsigned int v27;  // [bp-0x2c]\n
    unsigned int v28;  // [bp-0xc]\n
    unsigned long v30;  // rcx\n
\n
    v27 = a3;\n
    if (v27 && a4)\n
    {\n
        if (a2)\n
        {\n
            v23 = 54;\n
            v19 = 19792;\n
            v21 = 0;\n
            v22 = 0;\n
            v7 = v27 * 3;\n
            if ((v7 & 3))\n
                v7 = (v7 & -0x4) + 4;\n
            v26 = a4 * v7;\n
            v20 = v26 + 54;\n
            if ((v20 & 3))\n
                v20 = (v20 & -0x4) + 4;\n
            v10 = a4;\n
            v9 = v27;\n
            v8 = 40;\n
            v12 = 24;\n
            v13 = 0;\n
            v11 = 1;\n
            v17 = 0;\n
            v18 = 0;\n
            v15 = 2835;\n
            v16 = 2835;\n
            v14 = v26;\n
            *(a0) = cgc_malloc(v20);\n
            *(a1) = v20;\n
            v6 = &*(a0)->field_0;\n
            v5 = 0;\n
            cgc_memcpy(&v6[v5], &v19, 14);\n
            v5 += 14;\n
            cgc_memcpy(&v6[v5], &v8, 40);\n
            v5 += 40;\n
            for (v25 = a4; v25 > 0; v25 -= 1)\n
            {\n
                v4 = 0;\n
                for (v24 = 0; v24 < v27; v24 += 1)\n
                {\n
                    v0 = v27 * 3 * (v25 - 1);\n
                    v3 = a2[2 + 3 * v24 + v0];\n
                    v2 = a2[1 + 3 * v24 + v0];\n
                    v1 = a2[3 * v24 + v0];\n
                    cgc_pm_write_u8(v6, &v5, v3);\n
                    cgc_pm_write_u8(v6, &v5, v2);\n
                    cgc_pm_write_u8(v6, &v5, v1);\n
                    v4 += 3;\n
                }\n
                for (; (v4 & 3); v4 += 1)\n
                {\n
                    v30 = v5;\n
                    v5 = v30 + 1;\n
                    v6[v30] = 0;\n
                }\n
            }\n
            v28 = v5;\n
            return v28;\n
        }\n
        else\n
        {\n
            v28 = -1;\n
            return v28;\n
        }\n
    }\n
    v28 = -1;\n
    return v28;\n
}\n
", "4209163:sub_403a0b": null, "4209168:cgc_pixelmap_get_size": "long long cgc_pixelmap_get_size(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
\n
    v1 = 54;\n
    v0 = a0 * 3;\n
    v3 = v0;\n
    if ((v3 >> 31 CONCAT v3) /m 4 >> 32)\n
        v0 = (v0 & -0x4) + 4;\n
    v1 += a1 * v0;\n
    return v1;\n
}\n
", "4209244:sub_403a5c": null, "4209248:main": "int main(unsigned long long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x64]\n
    char *v2;  // [bp-0x60], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x58]\n
    char *v4;  // [bp-0x50]\n
    unsigned int v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x44]\n
    unsigned long long v7;  // [bp-0x40]\n
    unsigned int v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0x34]\n
    char *v10;  // [bp-0x30]\n
    unsigned short v11;  // [bp-0x22]\n
    char v12;  // [bp-0x20]\n
    unsigned long v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v15;  // [bp-0xc]\n
\n
    v15 = 0;\n
    v14 = a0;\n
    v13 = a1;\n
    cgc_setup_io(0, 1);\n
    v11 = cgc_read_u16();\n
    if (v11 > 20000)\n
        cgc__terminate(0);\n
    v10 = cgc_malloc(20000);\n
    v9 = 0;\n
    for (v9 = 0; v9 < v11; v9 += 1)\n
    {\n
        v10[v9] = cgc_read_u8();\n
    }\n
    if (v9 != v11)\n
        cgc__terminate(20000);\n
    if (cgc_vgf_parse_data(v10, v11, &v12))\n
        cgc__terminate(a0);\n
    cgc_free(v10);\n
    v8 = cgc_vgf_get_render_size(*(&v12));\n
    if (v8 <= 0)\n
        cgc__terminate(a0);\n
    v6 = v8;\n
    v7 = cgc_malloc(v6);\n
    if (cgc_vgf_render_file(*(&v12), v7, &v6))\n
        cgc__terminate(a0);\n
    v0 = v7;\n
    v1 = cgc_vgf_get_width(*(&v12));\n
    if (cgc_pixelmap_write_file(&v4, &v5, v0, v1, cgc_vgf_get_height(*(&v12))) <= 0)\n
        cgc__terminate(a0);\n
    cgc_free(v7);\n
    v3 = v5;\n
    for (v2 = 0; v2 < v3; v2 += 1)\n
    {\n
        cgc_write_u8(v4[v2]);\n
    }\n
    cgc_free(v4);\n
    cgc_vgf_destroy_file(*(&v12));\n
    return 0;\n
}\n
", "4209720:sub_403c38": null, "4209728:cgc_vgf_get_width": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned short field_8;\n
} struct_0;\n
\n
long long cgc_vgf_get_width(struct_0 *a0)\n
{\n
    unsigned short v0;  // [bp-0xa]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = a0->field_8;\n
    return v0;\n
}\n
", "4209776:cgc_vgf_get_height": "typedef struct struct_0 {\n
    char padding_0[6];\n
    unsigned short field_6;\n
} struct_0;\n
\n
long long cgc_vgf_get_height(struct_0 *a0)\n
{\n
    unsigned short v0;  // [bp-0xa]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = a0->field_6;\n
    return v0;\n
}\n
", "4209824:cgc_vgf_parse_data": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    char field_18;\n
    char padding_19[7];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned short field_8;\n
    char field_a;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
long long cgc_vgf_parse_data(struct_2 *a0, unsigned long a1, unsigned long long *a2)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    struct_1 *v1;  // [bp-0x68]\n
    char *v2;  // [bp-0x60]\n
    char v3;  // [bp-0x51]\n
    struct_1 *v4;  // [bp-0x50], Other Possible Types: unsigned long\n
    struct_0 *v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned long long *v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0xc]\n
    struct_1 *v12;  // rax\n
    unsigned long v13;  // rdx\n
    struct_1 *v14;  // rax\n
    unsigned long v15;  // rdx\n
\n
    v9 = a2;\n
    v6 = -1;\n
    v5 = 0;\n
    *(v9) = 0;\n
    v7 = 0;\n
    if (v7 + 11 > a1)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    else if (*(&a0->field_0) != 2016610569)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    else if (*(&a0->padding_1[3]) == 1)\n
    {\n
        if (*(&a0->padding_1[5]) <= 0x200 && a0->field_8 <= 0x200)\n
        {\n
            if (a0->field_a <= 6)\n
            {\n
                v7 += 11;\n
                v5 = cgc_malloc(40);\n
                v5->field_10 = 0;\n
                v5->field_18 = 0;\n
                v5->field_20 = 0;\n
                cgc_memcpy(v5, a0, 11);\n
                v4 = 0;\n
                do\n
                {\n
                    v3 = 0;\n
                    v2 = &(&a0->field_0)[v7];\n
                    if (v7 + 4 > a1)\n
                    {\n
                        v6 = -1;\n
                        goto LABEL_4040ee;\n
                    }\n
                    v7 += 4;\n
                    v1 = cgc_malloc(24);\n
                    v1->field_10 = 0;\n
                    if (v4)\n
                        v4->field_10 = v1;\n
                    else\n
                        v5->field_10 = v1;\n
                    v4 = v1;\n
                    v1->field_0 = *(&v2);\n
                    v0 = *(v2);\n
                    if (!v0)\n
                    {\n
                        if (v7 + 8 <= a1)\n
                        {\n
                            *(&v1->field_4) = *(&(&a0->field_0)[v7]);\n
                            v7 += 8;\n
                        }\n
                        else\n
                        {\n
                            v6 = -1;\n
                            goto LABEL_4040ee;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v0 == 1)\n
                        {\n
                            if (v7 + 12 <= a1)\n
                            {\n
                                v12 = v1;\n
                                v13 = v7;\n
                                *(&v12->field_4) = *(&(&a0->field_0)[v13]);\n
                                v12->field_c = *(&(&a0->field_0)[v13 + 8]);\n
                                v7 += 12;\n
                            }\n
                            else\n
                            {\n
                                v6 = -1;\n
                                goto LABEL_4040ee;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (v0 == 2)\n
                            {\n
                                if (v7 + 8 <= a1)\n
                                {\n
                                    *(&v1->field_4) = *(&(&a0->field_0)[v7]);\n
                                    v7 += 8;\n
                                }\n
                                else\n
                                {\n
                                    v6 = -1;\n
                                    goto LABEL_4040ee;\n
                                }\n
                            }\n
                            else\n
                            {\n
                                if (v0 == 3)\n
                                {\n
                                    if (v7 + 6 <= a1)\n
                                    {\n
                                        v14 = v1;\n
                                        v15 = v7;\n
                                        v14->field_4 = *(&(&a0->field_0)[v15]);\n
                                        *(&v14->padding_8[0]) = *(&a0->padding_1[3 + v15]);\n
                                        v7 += 6;\n
                                    }\n
                                    else\n
                                    {\n
                                        v6 = -1;\n
                                        goto LABEL_4040ee;\n
                                    }\n
                                }\n
                                else\n
                                {\n
                                    if (v0 == 100)\n
                                    {\n
                                        v3 = 1;\n
                                    }\n
                                    else\n
                                    {\n
                                        v6 = -1;\n
                                        goto LABEL_4040ee;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                } while (!v3);\n
                if (v7 + 1 > a1)\n
                {\n
                    v6 = -1;\n
                }\n
                else\n
                {\n
                    v5->field_18 = (&a0->field_0)[v7];\n
                    v7 += 1;\n
                    if (v5->field_18 > 0)\n
                    {\n
                        v5->field_20 = cgc_malloc(v5->field_18 * 3);\n
                        v8 = 0;\n
                        while (v8 < v5->field_18)\n
                        {\n
                            if (v7 + 3 > a1)\n
                            {\n
                                v6 = -1;\n
                                goto LABEL_4040ee;\n
                            }\n
                            else\n
                            {\n
                                cgc_memcpy(v5->field_20 + v8 * 3, &(&a0->field_0)[v7], 3);\n
                                v7 += 3;\n
                                v8 += 1;\n
                            }\n
                        }\n
                    }\n
                    v6 = 0;\n
                }\n
LABEL_4040ee:\n
                if (v5 && v6)\n
                    cgc_vgf_destroy_file(v5);\n
                if (!v6)\n
                    *(v9) = v5;\n
                v10 = v6;\n
                return v10;\n
            }\n
            else\n
            {\n
                v10 = -1;\n
                return v10;\n
            }\n
        }\n
        v10 = -1;\n
        return v10;\n
    }\n
    else\n
    {\n
        v10 = -2;\n
        return v10;\n
    }\n
}\n
", "4210992:cgc_vgf_destroy_file": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long cgc_vgf_destroy_file(struct_1 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
        return v3;\n
    if (a0->field_10)\n
    {\n
        for (v1 = a0->field_10; v1; v1 = v0)\n
        {\n
            v0 = *((v1 + 16));\n
            cgc_free(v1);\n
        }\n
    }\n
    if (a0->field_20)\n
        cgc_free(a0->field_20);\n
    v3 = cgc_free(a0);\n
    return v3;\n
}\n
", "4211140:sub_4041c4": null, "4211152:cgc_vgf_get_render_size": "long long cgc_vgf_get_render_size(unsigned short a0[5])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = a0[3] * a0[4];\n
    v0 = v1 * 3;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4211223:sub_404217": null, "4211232:cgc_vgf_render_file": "typedef struct struct_1 {\n
    char padding_0[6];\n
    unsigned short field_6;\n
    unsigned short field_8;\n
    char field_a;\n
    char padding_b[5];\n
    struct struct_0 *field_10;\n
    char field_18;\n
    char padding_19[7];\n
    unsigned long long field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long cgc_vgf_render_file(struct_1 *a0, char *a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x8c]\n
    unsigned int v1;  // [bp-0x88]\n
    unsigned short v2;  // [bp-0x84]\n
    char v3;  // [bp-0x82]\n
    char v4;  // [bp-0x81]\n
    struct_0 *v5;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v6;  // [bp-0x71]\n
    unsigned short *v7;  // [bp-0x70], Other Possible Types: unsigned long\n
    unsigned long long v8;  // [bp-0x68]\n
    char v9;  // [bp-0x36]\n
    char v10;  // [bp-0x35]\n
    unsigned short v11;  // [bp-0x34]\n
    unsigned short v12;  // [bp-0x32]\n
    unsigned int v13;  // [bp-0x30]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0xc]\n
\n
    v7 = 0;\n
    v6 = 0;\n
    if (a0 && a1 && a2)\n
    {\n
        v12 = a0->field_8;\n
        v11 = a0->field_6;\n
        v14 = v11 * v12;\n
        v10 = a0->field_a;\n
        for (v9 = 0; v9 < v10; v9 += 1)\n
        {\n
            (&v8)[v9] = cgc_malloc(v14 * 2);\n
            for (v13 = 0; v13 < v14; v13 += 1)\n
            {\n
                *(((&v8)[v9] + v13 * 2)) = 65535;\n
            }\n
        }\n
        v5 = a0->field_10;\n
        while (true)\n
        {\n
            if (!v5)\n
            {\n
                v7 = cgc_malloc(v14 * 2);\n
                for (v13 = 0; v13 < v14; v13 += 1)\n
                {\n
                    *((v7 + v13 * 2)) = 65535;\n
                }\n
                for (v9 = 0; v9 < v10; v9 += 1)\n
                {\n
                    for (v13 = 0; v13 < v14; v13 += 1)\n
                    {\n
                        if (*(((&v8)[v9] + (v13 << 1))) != 65535)\n
                            *((v7 + v13 * 2)) = *(((&v8)[v9] + v13 * 2));\n
                    }\n
                }\n
                if (*(a2) < v14 * 3)\n
                {\n
                    v6 = 255;\n
                    break;\n
                }\n
                else\n
                {\n
                    v1 = 0;\n
                    v13 = 0;\n
                    while (true)\n
                    {\n
                        if (v13 >= v14)\n
                        {\n
                            v6 = 0;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (*((v7 + (v13 << 1))) == 65535)\n
                            {\n
                                a1[v1] = 0;\n
                                a1[1 + v1] = 0;\n
                                a1[2 + v1] = 0;\n
                            }\n
                            else if (*((v7 + (v13 << 1))) < a0->field_18)\n
                            {\n
                                a1[v1] = *((a0->field_20 + *((v7 + v13 * 2)) * 3));\n
                                a1[1 + v1] = *((a0->field_20 + *((v7 + v13 * 2)) * 3 + 1));\n
                                a1[2 + v1] = *((a0->field_20 + *((v7 + v13 * 2)) * 3 + 2));\n
                            }\n
                            else\n
                            {\n
                                v6 = 255;\n
                                break;\n
                            }\n
                            v1 += 3;\n
                            v13 += 1;\n
                        }\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                v4 = *((v5 + 1));\n
                v3 = *((v5 + 2));\n
                v2 = *((v5 + 3));\n
                if (v4 >= v10)\n
                {\n
                    v6 = 255;\n
                    break;\n
                }\n
                else if (v3 >= a0->field_18)\n
                {\n
                    v6 = 255;\n
                    break;\n
                }\n
                else\n
                {\n
                    v0 = *(v5);\n
                    if (!v0)\n
                    {\n
                        cgc_vgf_render_rect(v5 + 4, (&v8)[v4], v2, v3, v12, v11);\n
                    }\n
                    else if (v0 == 1)\n
                    {\n
                        cgc_vgf_render_triangle(v5 + 4, (&v8)[v4], v2, v3, v12, v11);\n
                    }\n
                    else if (v0 == 2)\n
                    {\n
                        cgc_vgf_render_line(v5 + 4, (&v8)[v4], v2, v3, v12, v11);\n
                    }\n
                    else if (v0 == 3)\n
                    {\n
                        cgc_vgf_render_circle(v5 + 4, (&v8)[v4], v2, v3, v12, v11);\n
                    }\n
                    else if (v0 != 100)\n
                    {\n
                        v6 = 255;\n
                        break;\n
                    }\n
                    v5 = *((v5 + 16));\n
                }\n
            }\n
        }\n
        if (v7)\n
            cgc_free(v7);\n
        for (v9 = 0; v9 < v10; v9 += 1)\n
        {\n
            if ((&v8)[v9])\n
                cgc_free((&v8)[v9]);\n
        }\n
        v15 = v6;\n
        return v15;\n
    }\n
    v15 = -1;\n
    return v15;\n
}\n
", "4212543:sub_40473f": null, "4212544:cgc_vgf_render_rect": "long long cgc_vgf_render_rect(unsigned short a0[4], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned short v1;  // [bp-0x2a]\n
    unsigned short v2;  // [bp-0x28]\n
    unsigned short v3;  // [bp-0x26]\n
    unsigned short v4;  // [bp-0x24]\n
    unsigned short v5;  // [bp-0x22]\n
    unsigned short v6;  // [bp-0x20]\n
    unsigned short v7;  // [bp-0x1e]\n
    unsigned long v8;  // [bp-0x18]\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    v10 = a1;\n
    v0 = a1;\n
    *(&v10) = a5;\n
    v8 = v0;\n
    v7 = a5;\n
    if (!a0)\n
        return v10;\n
    v4 = a0[0];\n
    v3 = a0[1];\n
    v2 = a0[0] + a0[2];\n
    v1 = a0[1] + a0[3];\n
    v10 = v4;\n
    if (v10 >= a4)\n
        return v10;\n
    v10 = v3;\n
    if (v10 < v7)\n
    {\n
        v10 = v2;\n
        if (v10 < a4)\n
        {\n
            v10 = v1;\n
            if (v10 < v7)\n
            {\n
                v10 = v4;\n
                if (v10 > v2)\n
                    return v4;\n
                v10 = v3;\n
                if (v10 > v1)\n
                    return v3;\n
                v6 = v4;\n
                for (v5 = v3; v6 < v2; v6 += 1)\n
                {\n
                    *((v8 + (v6 + a4 * v5) * 2)) = a3;\n
                }\n
                for (; v5 < v1; v5 += 1)\n
                {\n
                    *((v8 + (v6 + a4 * v5) * 2)) = a3;\n
                }\n
                for (; v6 > v4; v6 -= 1)\n
                {\n
                    *((v8 + (v6 + a4 * v5) * 2)) = a3;\n
                }\n
                for (; v5 > v3; v5 -= 1)\n
                {\n
                    *((v8 + (v6 + a4 * v5) * 2)) = a3;\n
                }\n
                v10 = a2 & 1;\n
                if (!v10)\n
                    return a2 & 1;\n
                v6 = v4 + 1;\n
                while (true)\n
                {\n
                    v10 = v6;\n
                    if (v10 >= v2)\n
                        break;\n
                    for (v5 = v3 + 1; v5 < v1; v5 += 1)\n
                    {\n
                        *((v8 + (v6 + a4 * v5) * 2)) = a3;\n
                    }\n
                    v6 += 1;\n
                }\n
                return v6;\n
            }\n
        }\n
    }\n
}\n
", "4213259:sub_404a0b": null, "4213264:cgc_vgf_render_triangle": "long long cgc_vgf_render_triangle(unsigned short a0[6], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x8c]\n
    unsigned int v2;  // [bp-0x88]\n
    unsigned int v3;  // [bp-0x84]\n
    unsigned int v4;  // [bp-0x80]\n
    unsigned int v5;  // [bp-0x7c]\n
    unsigned int v6;  // [bp-0x78]\n
    unsigned int v7;  // [bp-0x74]\n
    unsigned long v8;  // [bp-0x70]\n
    unsigned short v9;  // [bp-0x66]\n
    unsigned short v10;  // [bp-0x64]\n
    unsigned short v11;  // [bp-0x62]\n
    unsigned short v12;  // [bp-0x60]\n
    unsigned short v13;  // [bp-0x5e]\n
    unsigned short v14;  // [bp-0x5c]\n
    unsigned short v15;  // [bp-0x5a]\n
    unsigned short v16;  // [bp-0x58]\n
    unsigned short v17;  // [bp-0x56]\n
    unsigned short v18;  // [bp-0x54]\n
    unsigned short v19;  // [bp-0x52]\n
    unsigned int v20;  // [bp-0x50]\n
    unsigned int v21;  // [bp-0x4c]\n
    unsigned short v22;  // [bp-0x46]\n
    unsigned short v23;  // [bp-0x44]\n
    unsigned short v24;  // [bp-0x42]\n
    unsigned short v25;  // [bp-0x40]\n
    unsigned short v26;  // [bp-0x3e]\n
    unsigned short v27;  // [bp-0x3c]\n
    unsigned short v28;  // [bp-0x3a]\n
    unsigned short v29;  // [bp-0x38]\n
    unsigned short v30;  // [bp-0x36]\n
    unsigned short v31;  // [bp-0x34]\n
    unsigned short v32;  // [bp-0x32]\n
    unsigned short v33;  // [bp-0x30]\n
    unsigned short v34;  // [bp-0x2e]\n
    unsigned short v35;  // [bp-0x2c]\n
    unsigned short v36;  // [bp-0x2a]\n
    unsigned short v37;  // [bp-0x28]\n
    unsigned short v38;  // [bp-0x26]\n
    unsigned short v39;  // [bp-0x24]\n
    unsigned short v40;  // [bp-0x22]\n
    unsigned short v41;  // [bp-0x20]\n
    unsigned short v42;  // [bp-0x1e]\n
    unsigned short v43;  // [bp-0x1c]\n
    char v44;  // [bp-0x1a]\n
    char v45;  // [bp-0x19]\n
    unsigned long long v46;  // [bp-0x18]\n
    unsigned short v47[6];  // [bp-0x10]\n
    unsigned long long v50;  // rdx\n
    unsigned long long v51;  // rsi\n
    unsigned long long v53;  // rdi\n
    unsigned long long v54;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v56;  // rax\n
    unsigned long long v57;  // rax\n
    unsigned int v58;  // eax\n
    unsigned int v60;  // eax\n
    unsigned long v61;  // rax\n
    unsigned long long v62;  // rdx\n
    unsigned int v63;  // eax\n
    unsigned int v65;  // eax\n
    unsigned long v66;  // rax\n
    unsigned long long v67;  // rdx\n
\n
    v5 = a4;\n
    v6 = a3;\n
    v50 = v6;\n
    v7 = a2;\n
    v54 = a1;\n
    v51 = v7;\n
    v8 = v54;\n
    v53 = v8;\n
    *(&v54) = a5;\n
    *(&v47[0]) = a0;\n
    v46 = v53;\n
    v45 = v51;\n
    v44 = v50;\n
    v43 = v5;\n
    v42 = a5;\n
    if (!v47)\n
        return v54;\n
    v41 = v47[0];\n
    v40 = v47[1];\n
    v39 = v47[2];\n
    v38 = v47[3];\n
    v37 = v47[4];\n
    v36 = v47[5];\n
    v54 = v41;\n
    if (v54 >= v43)\n
        return v54;\n
    v54 = v40;\n
    if (v54 < v42)\n
    {\n
        v54 = v39;\n
        if (v54 < v43)\n
        {\n
            v54 = v38;\n
            if (v54 < v42)\n
            {\n
                v54 = v37;\n
                if (v54 < v43)\n
                {\n
                    v54 = v36;\n
                    if (v54 < v42)\n
                    {\n
                        if ((v45 & 1))\n
                        {\n
                            if (v40 > v38)\n
                            {\n
                                v35 = v40;\n
                                v40 = v38;\n
                                v38 = v35;\n
                                v34 = v41;\n
                                v41 = v39;\n
                                v39 = v34;\n
                            }\n
                            if (v38 > v36)\n
                            {\n
                                v33 = v38;\n
                                v38 = v36;\n
                                v36 = v33;\n
                                v32 = v39;\n
                                v39 = v37;\n
                                v37 = v32;\n
                            }\n
                            if (v40 > v38)\n
                            {\n
                                v31 = v40;\n
                                v40 = v38;\n
                                v38 = v31;\n
                                v30 = v41;\n
                                v41 = v39;\n
                                v39 = v30;\n
                            }\n
                            if (v40 != v36)\n
                            {\n
                                v27 = v37 - v41;\n
                                v26 = v36 - v40;\n
                                v25 = v37 - v39;\n
                                v24 = v36 - v38;\n
                                v23 = v38 - v40;\n
                                v22 = v39 - v41;\n
                                v21 = 0;\n
                                v20 = 0;\n
                                if (v38 == v36)\n
                                    v19 = v38;\n
                                else\n
                                    v19 = v38 - 1;\n
                                if (v40 == v38)\n
                                {\n
                                    v17 = v41;\n
                                    v16 = v39;\n
                                    if (v17 > v16)\n
                                    {\n
                                        v15 = v17;\n
                                        v17 = v16;\n
                                        v16 = v15;\n
                                    }\n
                                    *(&v53) = v17;\n
                                    *(&v51) = v40;\n
                                    *(&v50) = v16 - v17;\n
                                    cgc_vgf_hline_helper(v53, v51, v50, v46, v44, v43);\n
                                    v18 = v38;\n
                                }\n
                                else\n
                                {\n
                                    for (v18 = v40; v18 <= v19; v18 += 1)\n
                                    {\n
                                        v3 = v41;\n
                                        v58 = v20;\n
                                        v14 = v3 + ((v58 >> 31 CONCAT v58) /m v26);\n
                                        v4 = v41;\n
                                        v60 = v21;\n
                                        v61 = (v60 >> 31 CONCAT v60) /m v23;\n
                                        v62 = v61 / 0x100000000;\n
                                        v13 = v4 + v61;\n
                                        v20 = v27 + v20;\n
                                        v21 = v22 + v21;\n
                                        if (v13 > v14)\n
                                        {\n
                                            v12 = v13;\n
                                            v13 = v14;\n
                                            v14 = v12;\n
                                        }\n
                                        *(&v53) = v13;\n
                                        *(&v51) = v18;\n
                                        *(&v62) = v14 - v13;\n
                                        cgc_vgf_hline_helper(v53, v51, v62, v46, v44, v43);\n
                                    }\n
                                }\n
                                v20 = (v18 - v40) * v27;\n
                                v21 = (v18 - v38) * v25;\n
                                while (true)\n
                                {\n
                                    v54 = v18;\n
                                    if (v54 > v36)\n
                                        break;\n
                                    v1 = v41;\n
                                    v63 = v20;\n
                                    v11 = v1 + ((v63 >> 31 CONCAT v63) /m v26);\n
                                    v2 = v39;\n
                                    v65 = v21;\n
                                    v66 = (v65 >> 31 CONCAT v65) /m v24;\n
                                    v67 = v66 / 0x100000000;\n
                                    v10 = v2 + v66;\n
                                    v20 = v27 + v20;\n
                                    v21 = v25 + v21;\n
                                    if (v10 > v11)\n
                                    {\n
                                        v9 = v10;\n
                                        v10 = v11;\n
                                        v11 = v9;\n
                                    }\n
                                    *(&v53) = v10;\n
                                    *(&v51) = v18;\n
                                    *(&v67) = v11 - v10;\n
                                    cgc_vgf_hline_helper(v53, v51, v67, v46, v44, v43);\n
                                    v18 += 1;\n
                                }\n
                            }\n
                            else\n
                            {\n
                                v28 = v41;\n
                                v29 = v41;\n
                                if (v39 < v29)\n
                                {\n
                                    v29 = v39;\n
                                }\n
                                else if (v39 > v28)\n
                                {\n
                                    v28 = v39;\n
                                }\n
                                if (v37 < v29)\n
                                {\n
                                    v29 = v37;\n
                                }\n
                                else if (v37 > v28)\n
                                {\n
                                    v28 = v37;\n
                                }\n
                                *(&v53) = v29;\n
                                *(&v51) = v40;\n
                                *(&v50) = v28 - v29;\n
                                v54 = cgc_vgf_hline_helper(v53, v51, v50, v46, v44, v43);\n
                            }\n
                            return v54;\n
                        }\n
                        else\n
                        {\n
                            *(&v53) = v41;\n
                            *(&v51) = v40;\n
                            *(&v50) = v39;\n
                            v0 = v42;\n
                            v56 = cgc_vgf_line_helper(v53, v51, v50, v38, v46, v44, v43);\n
                            *(&v53) = v39;\n
                            *(&v51) = v38;\n
                            *(&v50) = v37;\n
                            *(&v56) = v43;\n
                            v0 = v42;\n
                            v57 = cgc_vgf_line_helper(v53, v51, v50, v36, v46, v44, v56);\n
                            *(&v53) = v37;\n
                            *(&v51) = v36;\n
                            *(&v50) = v41;\n
                            *(&v57) = v43;\n
                            v0 = v42;\n
                            v54 = cgc_vgf_line_helper(v53, v51, v50, v40, v46, v44, v57);\n
                            return v54;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4214924:sub_40508c": null, "4214928:cgc_vgf_render_line": "long long cgc_vgf_render_line(unsigned short a0[4], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned long v4;  // [bp-0x30]\n
    unsigned short v5;  // [bp-0x26]\n
    unsigned short v6;  // [bp-0x24]\n
    unsigned short v7;  // [bp-0x22]\n
    unsigned short v8;  // [bp-0x20]\n
    unsigned short v9;  // [bp-0x1e]\n
    unsigned short v10;  // [bp-0x1c]\n
    char v11;  // [bp-0x1a]\n
    char v12;  // [bp-0x19]\n
    unsigned long long v13;  // [bp-0x18]\n
    unsigned short v14[4];  // [bp-0x10]\n
    unsigned long long v17;  // rdx\n
    unsigned long long v18;  // rsi\n
    unsigned long long v20;  // rdi\n
    unsigned long long v21;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a4;\n
    v2 = a3;\n
    v17 = v2;\n
    v3 = a2;\n
    v21 = a1;\n
    v18 = v3;\n
    v4 = v21;\n
    v20 = v4;\n
    *(&v21) = a5;\n
    *(&v14[0]) = a0;\n
    v13 = v20;\n
    v12 = v18;\n
    v11 = v17;\n
    v10 = v1;\n
    v9 = a5;\n
    if (!v14)\n
        return v21;\n
    v8 = v14[0];\n
    v7 = v14[1];\n
    v6 = v14[2];\n
    v5 = v14[3];\n
    v21 = v8;\n
    if (v21 >= v10)\n
        return v21;\n
    v21 = v7;\n
    if (v21 < v9)\n
    {\n
        v21 = v6;\n
        if (v21 < v10)\n
        {\n
            v21 = v5;\n
            if (v21 < v9)\n
            {\n
                v21 = v8;\n
                if (v21 > v6)\n
                    return v8;\n
                v21 = v7;\n
                if (v21 <= v5)\n
                {\n
                    *(&v20) = v8;\n
                    *(&v18) = v7;\n
                    *(&v17) = v6;\n
                    v0 = v9;\n
                    cgc_vgf_line_helper(v20, v18, v17, v5, v13, v11, v10);\n
                    v21 = v12 & 1;\n
                    if ((Not (Not (Conv(64->32, rax<8>) == 0x0<32>)))) { Goto None } else { Goto None }\n
                    return v12 & 1;\n
                }\n
                return v7;\n
            }\n
        }\n
    }\n
}\n
", "4215264:cgc_vgf_render_circle": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
} struct_1;\n
\n
long long cgc_vgf_render_circle(struct_0 *a0, unsigned short *a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x54]\n
    unsigned int v2;  // [bp-0x50]\n
    unsigned int v3;  // [bp-0x4c]\n
    unsigned short *v4;  // [bp-0x48]\n
    unsigned short v5;  // [bp-0x3c]\n
    unsigned short v6;  // [bp-0x3a]\n
    unsigned short v7;  // [bp-0x38]\n
    unsigned short v8;  // [bp-0x36]\n
    unsigned short v9;  // [bp-0x34]\n
    unsigned short v10;  // [bp-0x32]\n
    unsigned short v11;  // [bp-0x30]\n
    unsigned short *v12;  // [bp-0x2e]\n
    unsigned short v13;  // [bp-0x2c]\n
    unsigned short v14;  // [bp-0x2a]\n
    unsigned short v15;  // [bp-0x28]\n
    unsigned short v16;  // [bp-0x26]\n
    unsigned short v17;  // [bp-0x24]\n
    unsigned short v18;  // [bp-0x22]\n
    unsigned short *v19;  // [bp-0x20]\n
    unsigned short v20;  // [bp-0x1e]\n
    unsigned short v21;  // [bp-0x1c]\n
    char v22;  // [bp-0x1a]\n
    char v23;  // [bp-0x19]\n
    unsigned short *v24;  // [bp-0x18]\n
    struct_0 *v25;  // [bp-0x10]\n
    unsigned long long v28;  // rdx\n
    unsigned long long v29;  // rsi\n
    unsigned short *v31;  // rdi\n
    unsigned short *v32;  // rax, Other Possible Types: unsigned long long, unsigned long\n
\n
    v1 = a4;\n
    v2 = a3;\n
    v28 = v2;\n
    v3 = a2;\n
    v32 = a1;\n
    v29 = v3;\n
    v4 = v32;\n
    v31 = v4;\n
    *(&v32) = a5;\n
    v25 = a0;\n
    v24 = v31;\n
    v23 = v29;\n
    v22 = v28;\n
    v21 = v1;\n
    v20 = a5;\n
    if (!v25)\n
        return v32;\n
    v32 = v25->field_0;\n
    if (v32 >= v21)\n
        return v32;\n
    v32 = *((&v25->field_0 + 2));\n
    if (v32 < v20)\n
    {\n
        v32 = v25->field_0 + *((&v25->field_0 + 4));\n
        if (v32 >= v21)\n
            return v32;\n
        v32 = *((&v25->field_0 + 2)) + *((&v25->field_0 + 4));\n
        if (v32 < v20)\n
        {\n
            v32 = v25->field_0;\n
            if (v32 < *((&v25->field_0 + 4)))\n
                return v32;\n
            v32 = *((&v25->field_0 + 2));\n
            if (v32 >= *((&v25->field_0 + 4)))\n
            {\n
                if ((v23 & 1))\n
                {\n
                    *(&v19) = v25->field_0;\n
                    v18 = *((&v25->field_0 + 2));\n
                    v17 = 0;\n
                    v16 = *((&v25->field_0 + 4));\n
                    v15 = 1 - *((&v25->field_0 + 4));\n
                    v14 = 1;\n
                    v13 = *((&v25->field_0 + 4)) * -2;\n
                    *(&v31) = v19;\n
                    while (true)\n
                    {\n
                        *(&v29) = v18 - v16;\n
                        *(&v28) = v16 * 2;\n
                        v0 = v20;\n
                        cgc_vgf_vline_helper(v31, v29, v28, v24, v22, v21);\n
                        v32 = v17;\n
                        if (v32 >= v16)\n
                            break;\n
                        if (v15 >= 0)\n
                        {\n
                            v16 -= 1;\n
                            v13 += 2;\n
                            v15 += v13;\n
                        }\n
                        v17 += 1;\n
                        v14 += 2;\n
                        v15 += v14;\n
                        *(&v31) = v19 + v17;\n
                        *(&v29) = v18 - v16;\n
                        *(&v28) = v16 * 2;\n
                        v0 = v20;\n
                        cgc_vgf_vline_helper(v31, v29, v28, v24, v22, v21);\n
                        *(&v31) = v19 + v16;\n
                        *(&v29) = v18 - v17;\n
                        *(&v28) = v17 * 2;\n
                        v0 = v20;\n
                        cgc_vgf_vline_helper(v31, v29, v28, v24, v22, v21);\n
                        *(&v31) = v19 - v17;\n
                        v0 = v20;\n
                        cgc_vgf_vline_helper(v31, v29, v28, v24, v22, v21);\n
                        *(&v31) = v19 - v16;\n
                    }\n
                    return v17;\n
                }\n
                else\n
                {\n
                    *(&v12) = v25->field_0;\n
                    v11 = *((&v25->field_0 + 2));\n
                    v10 = 0;\n
                    v9 = *((&v25->field_0 + 4));\n
                    v8 = 1 - *((&v25->field_0 + 4));\n
                    v7 = 1;\n
                    v6 = *((&v25->field_0 + 4)) * -2;\n
                    v5 = *((&v25->field_0 + 4));\n
                    v24[v21 * (v11 + v5) + v12] = v22;\n
                    v24[v21 * (v11 - v5) + v12] = v22;\n
                    *((v24 + 0x2 * v12 + 2 * v5 + 2 * v21 * v11)) = v22;\n
                    *((v24 + 0x2 * v12 + -2 * v5 + 2 * v21 * v11)) = v22;\n
                    while (true)\n
                    {\n
                        v32 = v10;\n
                        if (v32 >= v9)\n
                            break;\n
                        if (v8 >= 0)\n
                        {\n
                            v9 -= 1;\n
                            v6 += 2;\n
                            v8 += v6;\n
                        }\n
                        v10 += 1;\n
                        v7 += 2;\n
                        v8 += v7;\n
                        *((v24 + 0x2 * v12 + 2 * v10 + 2 * v21 * (v11 + v9))) = v22;\n
                        *((v24 + 0x2 * v12 + -2 * v10 + 2 * v21 * (v11 + v9))) = v22;\n
                        *((v24 + 0x2 * v12 + 2 * v10 + 2 * v21 * (v11 - v9))) = v22;\n
                        *((v24 + 0x2 * v12 + -2 * v10 + 2 * v21 * (v11 - v9))) = v22;\n
                        *((v24 + 0x2 * v12 + 2 * v9 + 2 * v21 * (v11 + v10))) = v22;\n
                        *((v24 + 0x2 * v12 + -2 * v9 + 2 * v21 * (v11 + v10))) = v22;\n
                        *((v24 + 0x2 * v12 + 2 * v9 + 2 * v21 * (v11 - v10))) = v22;\n
                        *((v24 + 0x2 * v12 + -2 * v9 + 2 * v21 * (v11 - v10))) = v22;\n
                    }\n
                    return v10;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4216856:sub_405818": null, "4216864:cgc_vgf_hline_helper": "long long cgc_vgf_hline_helper(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned short v1)\n
{\n
    unsigned short v0;  // [bp-0x1e]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0;\n
    if (v2 >= a5)\n
        return a0;\n
    v2 = a1;\n
    if (v2 >= v1)\n
        return a1;\n
    v0 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v2 = v0;\n
        if (v2 >= a2)\n
            return v0;\n
        v2 = a0 + v0;\n
        if (v2 >= a5)\n
            return a0 + v0;\n
        *((a3 + (a0 + v0 + a5 * a1) * 2)) = a4;\n
        v0 += 1;\n
    }\n
}\n
", "4217095:sub_405907": null, "4217104:cgc_vgf_vline_helper": "long long cgc_vgf_vline_helper(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned short v1)\n
{\n
    unsigned short v0;  // [bp-0x1e]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0;\n
    if (v2 >= a5)\n
        return a0;\n
    v2 = a1;\n
    if (v2 >= v1)\n
        return a1;\n
    v0 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v2 = v0;\n
        if (v2 >= a2)\n
            return v0;\n
        v2 = a1 + v0;\n
        if (v2 >= v1)\n
            return a1 + v0;\n
        *((a3 + (a0 + a5 * (a1 + v0)) * 2)) = a4;\n
        v0 += 1;\n
    }\n
}\n
", "4217335:sub_4059f7": null, "4217344:cgc_vgf_line_helper": "long long cgc_vgf_line_helper(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned short *a4, unsigned long a5, unsigned short v10, unsigned short a6)\n
{\n
    unsigned short v0;  // [bp-0x2e]\n
    unsigned short v1;  // [bp-0x2c], Other Possible Types: unsigned long\n
    unsigned short v2;  // [bp-0x2a]\n
    unsigned short v3;  // [bp-0x28]\n
    unsigned short v4;  // [bp-0x26]\n
    unsigned short v5;  // [bp-0x24]\n
    unsigned short v6;  // [bp-0x22]\n
    unsigned short v7;  // [bp-0x20]\n
    unsigned short v8;  // [bp-0x1e]\n
    unsigned short v9;  // [bp-0x1c]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v9 = cgc_abs(a2 - a0);\n
    v8 = cgc_abs(a3 - a1);\n
    if (v9 > v8)\n
        v3 = v9;\n
    else\n
        v3 = v8;\n
    if (a0 < a2)\n
        v7 = 1;\n
    else\n
        v7 = 65535;\n
    if (a1 < a3)\n
        v6 = 1;\n
    else\n
        v6 = 65535;\n
    v5 = 0;\n
    v4 = 0;\n
    for (v0 = 0; v0 <= v3 + 1; v0 += 1)\n
    {\n
        a4[v10 * v1 + v2] = a5;\n
        v5 += v9;\n
        v4 += v8;\n
        if (v5 > v3)\n
        {\n
            v5 -= v3;\n
            v2 += v7;\n
        }\n
        if (v4 > v3)\n
        {\n
            v4 -= v3;\n
            v1 = v1 + v6;\n
        }\n
    }\n
    return v0;\n
}\n
", "4217764:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}