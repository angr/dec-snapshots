{"4202496:_init": "extern struct_0 *g_406230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_406230;\n
    if (g_406230)\n
        v1 = g_406230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_406250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_406250;\n
    goto *(4219480);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4219456);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __TMC_END__;\n
extern unsigned long long g_406228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__TMC_END__;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_406238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_406240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_406240)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v2;  // rbx\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v2 = a1 * a0;\n
        v3 = cgc_malloc(v2);\n
        if (v3)\n
            return cgc_memset(v3, 0, v2);\n
        return 0;\n
    }\n
}\n
", "4202952:sub_4021c8": null, "4202960:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4203007:sub_4021ff": null, "4203008:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203068:sub_40223c": null, "4203072:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203090:sub_402252": null, "4203104:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203122:sub_402272": null, "4203136:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203154:sub_402292": null, "4203168:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203186:sub_4022b2": null, "4203200:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4214800];\n
    char field_405010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203215:sub_4022cf": null, "4203216:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203237:sub_4022e5": null, "4203248:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4214928];\n
    char field_405090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203263:sub_4022ff": null, "4203264:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203270:sub_402306": null, "4203280:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203311:sub_40232f": null, "4203312:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203372:sub_40236c": null, "4203376:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_2 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_2 *g_4064b8;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    struct_1 *v2;  // rax\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    struct_1 *v7;  // rax\n
    unsigned long v9;  // r14, Other Possible Types: unsigned long long\n
    struct_2 *v10;  // r14\n
    struct struct_2 **v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // rbx\n
    unsigned long long v13;  // rsi\n
    unsigned long long v14;  // rdx\n
    struct_1 *v16;  // rdi\n
    unsigned long long v17;  // rax\n
    unsigned long long v18;  // rdi\n
    struct_0 *v19;  // rax\n
    unsigned long long v20;  // rbx\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 0;\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v4, v5))\n
            return 0;\n
        v7 = v0;\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v9 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v9 = a0;\n
    if (v9 <= 2147483647)\n
    {\n
        v10 = v9 + 24;\n
        v11 = cgc_get_size_class(v10);\n
        if (v11 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[8 * v11]);\n
                if (v12)\n
                {\n
                    while (*(v12) < v10)\n
                    {\n
                        v12 = *((v12 + 16));\n
                        if (!v12)\n
                            goto LABEL_402406;\n
                    }\n
                }\n
LABEL_402406:\n
                v11 += 1;\n
            } while (v11 != 32);\n
            goto LABEL_402432;\n
        }\n
        v12 = 0;\n
LABEL_402432:\n
        if (v12)\n
        {\n
LABEL_402437:\n
            cgc_remove_from_flist(v12);\n
            v17 = *(v12) - v10;\n
            if (v17 >= 49)\n
            {\n
                v18 = v12 + v10;\n
                *((v12 + &v10->field_0)) = v17;\n
                *(&v10->padding_8[v12]) = 1;\n
                *((16 + v12 + &v10->field_0)) = 0;\n
                *(v12) = v10;\n
                *((40 + v12 + &v10->field_0)) = v12;\n
                *((32 + v12 + &v10->field_0)) = *((v12 + 32));\n
                v19 = *((v12 + 32));\n
                if (v19)\n
                    v19->field_28 = v18;\n
                *((v12 + 32)) = v18;\n
                cgc_insert_into_flist(v18);\n
            }\n
            v20 = v12 + 24;\n
            return v20;\n
        }\n
        else if (!cgc_allocate(v10, v13, v14))\n
        {\n
            v16 = v0;\n
            if (v16)\n
            {\n
                v16->field_0 = 0x40000;\n
                v16->field_8 = 1;\n
                v16->field_10 = 0;\n
                v16->field_20 = 0;\n
                cgc_insert_into_flist(v16);\n
                v12 = g_4064b8;\n
                goto LABEL_402437;\n
            }\n
        }\n
    }\n
}\n
", "4203759:sub_4024ef": null, "4203760:cgc_get_size_class": "extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*(v1) >= a0)\n
            return v2;\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
            return 32;\n
    }\n
}\n
", "4203801:sub_402519": null, "4203808:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rdx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (*(v1) < a0->field_0)\n
    {\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    a0->field_8 = 1;\n
    v3 = *(&(&cgc_free_lists)[8 * v2]);\n
    if (v3)\n
    {\n
        a0->field_10 = v3;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        a0->field_18 = 0;\n
        return v2;\n
    }\n
    *(&(&cgc_free_lists)[8 * v2]) = a0;\n
    return v2;\n
}\n
", "4203903:sub_40257f": null, "4203904:cgc_remove_from_flist": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_remove_from_flist(struct_1 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v2[4];  // rax, Other Possible Types: unsigned long\n
    struct_3 *v3;  // rdx\n
    struct_0 *v4;  // rcx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    do\n
    {\n
        if (*(v1) >= a0->field_0)\n
        {\n
            v3 = a0[1].field_0;\n
            if (v3)\n
                v3->field_10 = a0->field_10;\n
            v4 = a0->field_10;\n
            if (v4)\n
                v4->field_18 = v3;\n
            if (*(&(&cgc_free_lists)[8 * v2]) == a0)\n
            {\n
                *(&(&cgc_free_lists)[8 * v2]) = v4;\n
                goto LABEL_4025d9;\n
            }\n
        }\n
        v2 += 1;\n
        v1 += 8;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4025d9:\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v2;\n
}\n
", "4204008:sub_4025e8": null, "4204016:cgc_coalesce": "extern char cgc_free_lists;\n
extern char size_class_limits;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v1;  // rcx\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rsi\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rsi\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rsi\n
    unsigned long v11;  // rsi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long v16;  // rdx\n
    unsigned long v17;  // rsi\n
    unsigned long v18;  // rax\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rdx\n
    unsigned long v23;  // rsi\n
    unsigned long v24;  // rax\n
    unsigned long v25;  // rcx\n
    unsigned long v26;  // rsi\n
    unsigned long v27;  // rdx\n
    unsigned long v28;  // rcx\n
    unsigned long v29;  // rax\n
    unsigned long v30;  // rdx\n
    unsigned long v31;  // rsi\n
    unsigned long v32;  // rsi\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rax\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rax\n
    unsigned long v38;  // rsi\n
    unsigned long v39;  // rsi\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v42;  // rdx\n
    unsigned long v43;  // rdx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    unsigned long v46;  // rax\n
    unsigned long v47;  // rsi\n
    unsigned long v48;  // rsi\n
    unsigned long v49;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rax\n
    unsigned long v54;  // rcx\n
    unsigned long v55;  // rcx\n
\n
    v1 = *((a0 + 40));\n
    if (!v1)\n
        return v2;\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && *((v2 + 8)))\n
        {\n
            v3 = &size_class_limits;\n
            v4 = 0;\n
            do\n
            {\n
                if (*(v3) >= *(v1))\n
                {\n
LABEL_402648:\n
                    v5 = *((v1 + 24));\n
                    if (v5)\n
                        *((v5 + 16)) = *((v1 + 16));\n
                    v8 = *((v1 + 16));\n
                    if (v8)\n
                        *((v8 + 24)) = v5;\n
                    if ((&cgc_free_lists)[v4] == v1)\n
                        (&cgc_free_lists)[v4] = v8;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v13 = *((a0 + 32));\n
                    v14 = &size_class_limits;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        if (*(v14) >= *(v13))\n
                        {\n
LABEL_4026b8:\n
                            v18 = *((v13 + 24));\n
                            if (v18)\n
                                *((v18 + 16)) = *((v13 + 16));\n
                            v23 = *((v13 + 16));\n
                            if (v23)\n
                                *((v23 + 24)) = v18;\n
                            if ((&cgc_free_lists)[v15] == v13)\n
                                (&cgc_free_lists)[v15] = v23;\n
                            *((v13 + 16)) = 0;\n
                            *((v13 + 8)) = 0;\n
                            v28 = *(a0);\n
                            v29 = &size_class_limits;\n
                            v30 = 0;\n
                            do\n
                            {\n
                                if (*(v29) >= v28)\n
                                {\n
LABEL_402718:\n
                                    v33 = *((a0 + 24));\n
                                    if (v33)\n
                                        *((v33 + 16)) = *((a0 + 16));\n
                                    v39 = *((a0 + 16));\n
                                    if (v39)\n
                                        *((v39 + 24)) = v33;\n
                                    if ((&cgc_free_lists)[v30] == a0)\n
                                        (&cgc_free_lists)[v30] = v39;\n
                                    *((a0 + 16)) = 0;\n
                                    *((a0 + 8)) = 0;\n
                                    v43 = *((a0 + 40));\n
                                    v44 = v28 + *(v43);\n
                                    *(v43) = v44;\n
                                    v45 = v44 + *(*((a0 + 32)));\n
                                    *(v43) = v45;\n
                                    v46 = &size_class_limits;\n
                                    v47 = 0;\n
                                    do\n
                                    {\n
                                        if (*(v46) >= v45)\n
                                        {\n
LABEL_402788:\n
                                            *((v43 + 8)) = 1;\n
                                            v50 = (&cgc_free_lists)[v47];\n
                                            if (!v50)\n
                                            {\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                            }\n
                                            else\n
                                            {\n
                                                *((v43 + 16)) = v50;\n
                                                *(((&cgc_free_lists)[v47] + 24)) = v43;\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                                *((v43 + 24)) = 0;\n
                                            }\n
                                            v52 = *((a0 + 32));\n
                                            v53 = *((v52 + 40));\n
                                            if (v53)\n
                                                *((v53 + 32)) = *((v52 + 32));\n
                                            v55 = *((v52 + 32));\n
                                            if (v55)\n
                                            {\n
                                                *((v55 + 40)) = v53;\n
                                                goto LABEL_402aa9;\n
                                            }\n
                                        }\n
                                        v47 += 1;\n
                                        v46 += 8;\n
                                    } while (v47 != 32);\n
                                    v47 = 32;\n
                                    goto LABEL_402788;\n
                                }\n
                                v30 += 1;\n
                                v29 += 8;\n
                            } while (v30 != 32);\n
                            v30 = 32;\n
                            goto LABEL_402718;\n
                        }\n
                        v15 += 1;\n
                        v14 += 8;\n
                    } while (v15 != 32);\n
                    v15 = 32;\n
                    goto LABEL_4026b8;\n
                }\n
                v4 += 1;\n
                v3 += 8;\n
            } while (v4 != 32);\n
            v4 = 32;\n
            goto LABEL_402648;\n
        }\n
    }\n
    if (!v1)\n
        return *((a0 + 32));\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && !*((v2 + 8)))\n
        {\n
            v6 = &size_class_limits;\n
            v7 = 0;\n
            do\n
            {\n
                if (*(v6) >= *(v1))\n
                {\n
                    v10 = *((v1 + 24));\n
                    if (v10)\n
                        *((v10 + 16)) = *((v1 + 16));\n
                    v16 = *((v1 + 16));\n
                    if (v16)\n
                        *((v16 + 24)) = v10;\n
                    if ((&cgc_free_lists)[v7] == v1)\n
                        (&cgc_free_lists)[v7] = v16;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v20 = *(a0);\n
                    v21 = &size_class_limits;\n
                    v22 = 0;\n
                    do\n
                    {\n
                        if (*(v21) >= v20)\n
                        {\n
LABEL_402a08:\n
                            v24 = *((a0 + 24));\n
                            if (v24)\n
                                *((v24 + 16)) = *((a0 + 16));\n
                            v31 = *((a0 + 16));\n
                            if (v31)\n
                                *((v31 + 24)) = v24;\n
                            if ((&cgc_free_lists)[v22] == a0)\n
                                (&cgc_free_lists)[v22] = v31;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v35 = *((a0 + 40));\n
                            v36 = v20 + *(v35);\n
                            *(v35) = v36;\n
                            v37 = &size_class_limits;\n
                            v38 = 0;\n
                            do\n
                            {\n
                                if (*(v37) >= v36)\n
                                {\n
LABEL_402a78:\n
                                    *((v35 + 8)) = 1;\n
                                    v40 = (&cgc_free_lists)[v38];\n
                                    if (!v40)\n
                                    {\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        goto LABEL_402aa9;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((v35 + 16)) = v40;\n
                                        *(((&cgc_free_lists)[v38] + 24)) = v35;\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        *((v35 + 24)) = 0;\n
                                        goto LABEL_402aa9;\n
                                    }\n
                                }\n
                                v38 += 1;\n
                                v37 += 8;\n
                            } while (v38 != 32);\n
                            v38 = 32;\n
                            goto LABEL_402a78;\n
                        }\n
                        v22 += 1;\n
                        v21 += 8;\n
                    } while (v22 != 32);\n
                    v22 = 32;\n
                    goto LABEL_402a08;\n
                }\n
                v7 += 1;\n
                v6 += 8;\n
            } while (v7 != 32);\n
            v7 = 32;\n
LABEL_402aa9:\n
            v2 = *((a0 + 40));\n
            if (v2)\n
                *((v2 + 32)) = *((a0 + 32));\n
            v54 = *((a0 + 32));\n
            if (v54)\n
            {\n
LABEL_402ac7:\n
                *((v54 + 40)) = v2;\n
                return v2;\n
            }\n
            return *((a0 + 40));\n
        }\n
    }\n
    if (!v1)\n
    {\n
        return v2;\n
    }\n
    else if (*((v1 + 8)))\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v9 = *((a0 + 32));\n
        if (!v9)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v9 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v11 = &size_class_limits;\n
            v12 = 0;\n
            do\n
            {\n
                if (*(v11) >= *(v9))\n
                {\n
                    v17 = *((v9 + 24));\n
                    if (v17)\n
                        *((v17 + 16)) = *((v9 + 16));\n
                    v19 = *((v9 + 16));\n
                    if (v19)\n
                        *((v19 + 24)) = v17;\n
                    if ((&cgc_free_lists)[v12] == v9)\n
                        (&cgc_free_lists)[v12] = v19;\n
                    *((v9 + 16)) = 0;\n
                    *((v9 + 8)) = 0;\n
                    v25 = *(a0);\n
                    v26 = &size_class_limits;\n
                    v27 = 0;\n
                    do\n
                    {\n
                        if (*(v26) >= v25)\n
                        {\n
LABEL_402898:\n
                            v32 = *((a0 + 24));\n
                            if (v32)\n
                                *((v32 + 16)) = *((a0 + 16));\n
                            v34 = *((a0 + 16));\n
                            if (v34)\n
                                *((v34 + 24)) = v32;\n
                            if ((&cgc_free_lists)[v27] == a0)\n
                                (&cgc_free_lists)[v27] = v34;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v41 = v25 + *(*((a0 + 32)));\n
                            *(a0) = v41;\n
                            v48 = &size_class_limits;\n
                            v42 = 0;\n
                            do\n
                            {\n
                                if (*(v48) >= v41)\n
                                {\n
LABEL_402908:\n
                                    *((a0 + 8)) = 1;\n
                                    v49 = (&cgc_free_lists)[v42];\n
                                    if (!v49)\n
                                    {\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((a0 + 16)) = v49;\n
                                        *(((&cgc_free_lists)[v42] + 24)) = a0;\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                        *((a0 + 24)) = 0;\n
                                    }\n
                                    v51 = *((a0 + 32));\n
                                    v2 = *((v51 + 40));\n
                                    if (v2)\n
                                    {\n
                                        *((v2 + 32)) = *((v51 + 32));\n
                                        goto LABEL_402ae5;\n
                                    }\n
                                }\n
                                v42 += 1;\n
                                v48 += 8;\n
                            } while (v42 != 32);\n
                            v42 = 32;\n
                            goto LABEL_402908;\n
                        }\n
                        v27 += 1;\n
                        v26 += 8;\n
                    } while (v27 != 32);\n
                    v27 = 32;\n
                    goto LABEL_402898;\n
                }\n
                v12 += 1;\n
                v11 += 8;\n
            } while (v12 != 32);\n
            v12 = 32;\n
LABEL_402ae5:\n
            v54 = *((v51 + 32));\n
            if (!v54)\n
                return v2;\n
        }\n
    }\n
    goto LABEL_402ac7;\n
}\n
", "4205299:sub_402af3": null, "4205312:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205354:sub_402b2a": null, "4205360:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a1 + v1)) != *((a0 + v1)))\n
            return *((a1 + v1)) - *((a0 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205406:sub_402b5e": null, "4205408:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4205441:sub_402b81": null, "4205456:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            a0[v1] = a1;\n
            v1 += 1;\n
        } while (a2 != v1);\n
        return a0;\n
    }\n
}\n
", "4205489:sub_402bb1": null, "4205504:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char v3;  // bpl\n
    unsigned long long v5;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v3 = a4;\n
    v6 = a1;\n
    if (a1 < a2)\n
    {\n
        v1 = 0;\n
        if (a3 <= 0)\n
            goto LABEL_402c5a;\n
    }\n
    else\n
    {\n
        a3 -= 1;\n
        v6 = (0 CONCAT a1) /m a2 >> 32;\n
        v1 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
        if (a3 <= 0)\n
            goto LABEL_402c5a;\n
    }\n
    if (!v1)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            do\n
            {\n
                if (!(v3 & 1))\n
                    v0 = 32;\n
                else\n
                    v0 = 48;\n
                cgc_transmit(a0, a1, a2, a3);\n
                tmp_5 = v5;\n
                v5 = v5 - 1;\n
            } while (tmp_5 + -1);\n
        }\n
    }\n
LABEL_402c5a:\n
    v7 = (!(v3 & 2) ? v6 + 55 : v6 + 87);\n
    v8 = v6 + 48;\n
    if (10 <= v6)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc_transmit();\n
    return v1 + 1;\n
}\n
", "4205612:sub_402c2c": null, "4205734:sub_402ca6": null, "4205744:cgc_fdprintf": "extern unsigned long long g_405110;\n
\n
long long cgc_fdprintf(char *a0, char *a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    char *v30;  // r13\n
    unsigned long long v31;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    unsigned long v33;  // r12, Other Possible Types: unsigned long long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v35;  // rax\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v37;  // rcx\n
    unsigned long long v38;  // rcx\n
    struct struct_0 **v39;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    unsigned long v41;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v42;  // rax, Other Possible Types: unsigned long\n
    unsigned long v43;  // r14, Other Possible Types: unsigned long long\n
    char *v44;  // rbp\n
    unsigned long v45;  // rbx\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v31 = &v5;\n
    do\n
    {\n
        v4 = a1 + 1;\n
        if (*(a1) != 37)\n
        {\n
            v0 = *(a1);\n
        }\n
        else\n
        {\n
            v32 = v31;\n
            v33 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                a0 = v4;\n
                v4 = a0 + 1;\n
                v35 = *(a0);\n
                a3 = v35;\n
                if ((a3 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol(a0, &v4, 10, a3);\n
            }\n
            a2 = a3 - 88;\n
            switch (a2)\n
            {\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 29: case 30: case 31:\n
                v0 = v35;\n
                goto LABEL_402e94;\n
            case 12:\n
                v36 = v1;\n
                if (v36 <= 40)\n
                {\n
                    v39 = v36 + v3;\n
                    v36 = v36 + 8;\n
                    v1 = v36;\n
                }\n
                else\n
                {\n
                    v39 = v2;\n
                    v2 = v39 + 8;\n
                }\n
                v43 = *(v39);\n
                if (v43 < 0)\n
                {\n
                    v0 = 45;\n
                    cgc_transmit(a0, &g_405110, a2, v36);\n
                    v43 = -(v43);\n
                }\n
                cgc_output_number_printf(v30, v43, 10, v34, v33);\n
                v31 = rbx<8>;\n
                break;\n
            case 27:\n
                v37 = v1;\n
                if (v37 > 40)\n
                {\n
                    v40 = v2;\n
                    v41 = v40 + 8;\n
                    v2 = v41;\n
                }\n
                else\n
                {\n
                    v40 = v37 + v3;\n
                    v41 = v37 + 8;\n
                    v1 = v41;\n
                }\n
                v31 = rbx<8>;\n
                v44 = *(v40);\n
                if (cgc_strlen(v44))\n
                {\n
                    v45 = 0;\n
                    do\n
                    {\n
                        v0 = v44[v45];\n
                        cgc_transmit(a0, &g_405110, a2, v41);\n
                        v45 += 1;\n
                    } while (cgc_strlen(v44) > v45);\n
                }\n
            case 0:\n
                v33 = v33 | 2;\n
            case 32:\n
                v38 = v1;\n
                if (v38 > 40)\n
                {\n
                    v42 = v2;\n
                    v2 = v42 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v38 + v3;\n
                    v1 = v38 + 8;\n
                }\n
                cgc_output_number_printf(v30, *(v42), 16, v34, v33);\n
                v31 = rbx<8>;\n
                break;\n
            default:\n
                if (a3 == 37)\n
                    goto LABEL_402e8f;\n
                else\n
                    goto LABEL_0x402ddd;\n
            }\n
LABEL_402e8f:\n
            v0 = 37;\n
LABEL_402e94:\n
            v31 = rbx<8>;\n
        }\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4205918:sub_402d5e": null, "4205982:sub_402d9e": null, "4206058:sub_402dea": null, "4206454:sub_402f76": null, "4206464:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_19;  // tmp #19\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10]\n
    unsigned long v7;  // r15\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // r13\n
    unsigned long v10;  // r12\n
    unsigned long v11;  // rbx\n
    unsigned long v12;  // rax\n
    char v13;  // r15b\n
    unsigned long long v14;  // rax\n
    unsigned long v15;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rbp, Other Possible Types: unsigned long long\n
    char v17;  // cl\n
    char v18;  // cl\n
    char *v19;  // rax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v2 = v10;\n
    v1 = v11;\n
    v0 = v12;\n
    v13 = a5;\n
    v15 = a2;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v14 = (0 CONCAT a2) /m a3;\n
        v15 = v14 / 0x100000000;\n
        cgc_output_number_sprintf(a0, a1, v14, a3, a4, a5);\n
    }\n
    if (a4 > 0 && v15 < a3)\n
    {\n
        v16 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            do\n
            {\n
                *(a1)->field_0 = ((v13 & 1) * 16) | 32;\n
                *(a1) = *(a1) + 1;\n
                *(a0) = *(a0) + 1;\n
                tmp_19 = v16;\n
                v16 = v16 - 1;\n
            } while (tmp_19 + -1);\n
        }\n
    }\n
    v17 = (10 <= v15 ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    v18 = v17 + v15;\n
    v19 = *(a1);\n
    *(v19) = v18;\n
    *(a1) = *(a1) + 1;\n
    *(a0) = *(a0) + 1;\n
    return v19;\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_1 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0xf8]\n
    char *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct struct_1 **v30;  // r15\n
    struct_0 *v31;  // r14\n
    struct struct_1 **v32;  // r13\n
    char *v33;  // rcx\n
    void* v35;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v36;  // rbp\n
    unsigned long v37;  // rdx, Other Possible Types: unsigned long long\n
    char *v38;  // rdi\n
    unsigned long long v39;  // rcx\n
    unsigned int v40;  // esi\n
    unsigned long long v42;  // rax\n
    char *v43;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v44;  // rdx\n
    unsigned long long v45;  // rcx\n
    unsigned long long v46;  // rdx\n
    struct struct_1 **v47;  // rcx, Other Possible Types: unsigned long\n
    struct struct_1 **v48;  // rax, Other Possible Types: unsigned long\n
    struct struct_1 **v49;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v50;  // rdx, Other Possible Types: unsigned long\n
    char *v51;  // rbp\n
    unsigned long v52;  // r14\n
    unsigned int v53;  // r13d\n
    struct_0 *v54;  // rdi, Other Possible Types: unsigned long\n
    struct struct_1 **v55;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v56;  // rcx, Other Possible Types: unsigned long long\n
    char *v57;  // rcx\n
    struct struct_1 **v58;  // rbx\n
    unsigned long v59;  // r15\n
    struct struct_1 **v60;  // r15\n
    struct_0 *v61;  // r14\n
    struct struct_1 **v62;  // r13\n
    char *v63;  // rax\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!*(a1))\n
    {\n
        v63 = v1;\n
        v1 = v63 + 1;\n
        *(v63) = 0;\n
        return v0;\n
    }\n
    v30 = &v5;\n
    v31 = &v0;\n
    v32 = &v1;\n
    do\n
    {\n
        v5 = a1 + 1;\n
        if (*(a1) != 37)\n
        {\n
            v33 = v1;\n
            *(v33) = *(a1);\n
            v1 = v33 + 1;\n
        }\n
        else\n
        {\n
            v35 = 0;\n
            while (true)\n
            {\n
                v36 = v35 | 1;\n
                v37 = v35;\n
                do\n
                {\n
                    v35 = v37;\n
                    v38 = v5;\n
                    v5 = v38 + 1;\n
                    v39 = *(v38);\n
                    v40 = v39;\n
                    v37 = v36;\n
                } while (v40 == 48);\n
                switch (v40)\n
                {\n
                case 37:\n
                    v43 = v1;\n
                    *(v43) = 37;\n
                    goto LABEL_40317b;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v42 = cgc_strtol();\n
                    continue;\n
                case 100:\n
                    v44 = v2;\n
                    if (v44 > 40)\n
                    {\n
                        v47 = v3;\n
                        v3 = v47 + 8;\n
                    }\n
                    else\n
                    {\n
                        v47 = v44 + v4;\n
                        v2 = v44 + 8;\n
                    }\n
                    v50 = *(v47);\n
                    if (v50 < 0)\n
                    {\n
                        v57 = v1;\n
                        *(v57) = 45;\n
                        v1 = v57 + 1;\n
                        v0 += 1;\n
                        v50 = -(v50);\n
                    }\n
                    v54 = *(&v0);\n
                    v55 = v1;\n
                    v56 = 10;\n
LABEL_403234:\n
                    cgc_output_number_sprintf(v54, v55, v50, v56, 0, v35);\n
                    break;\n
                case 115:\n
                    v45 = v2;\n
                    if (v45 > 40)\n
                    {\n
                        v48 = v3;\n
                        v3 = v48 + 8;\n
                    }\n
                    else\n
                    {\n
                        v48 = v45 + v4;\n
                        v2 = v45 + 8;\n
                    }\n
                    v51 = *(v48);\n
                    v52 = v1;\n
                    v53 = v0;\n
                    if (cgc_strlen(v51))\n
                    {\n
                        v58 = r15<8>;\n
                        v59 = 0;\n
                        do\n
                        {\n
                            *((v52 + v59)) = v51[v59];\n
                            v59 += 1;\n
                        } while (cgc_strlen(v51) > v59);\n
                        v52 += v59;\n
                        v53 += v59;\n
                        v60 = rbx<8>;\n
                    }\n
                    v1 = v52;\n
                    v0 = v53;\n
                    v61 = &v0;\n
                    v62 = &v1;\n
                    break;\n
                case 88:\n
                    v35 = v35 | 2;\n
                case 120:\n
                    v46 = v2;\n
                    if (v46 > 40)\n
                    {\n
                        v49 = v3;\n
                        v3 = v49 + 8;\n
                    }\n
                    else\n
                    {\n
                        v49 = v46 + v4;\n
                        v2 = v46 + 8;\n
                    }\n
                    v50 = *(v49);\n
                    v54 = r14<8>;\n
                    v55 = r13<8>;\n
                    v56 = 16;\n
                    goto LABEL_403234;\n
                default:\n
                    v43 = v1;\n
                    *(v43) = v39;\n
LABEL_40317b:\n
                    v1 = v43 + 1;\n
                    goto LABEL_403100;\n
                }\n
            }\n
        }\n
LABEL_403100:\n
        v0 += 1;\n
        a1 = v5;\n
    } while (*(a1));\n
}\n
", "4206828:sub_4030ec": null, "4207332:sub_4032e4": null, "4207344:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    unsigned long v3;  // rdx\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4207455:sub_40335f": null, "4207456:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    v1 = a0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a1)\n
            return v1;\n
    }\n
}\n
", "4207491:sub_403383": null, "4207504:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // al\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return *(a1) - v1;\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return *(a1) - v1;\n
}\n
", "4207555:sub_4033c3": null, "4207568:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4207615:sub_4033ff": null, "4207616:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4207644:sub_40341c": null, "4207648:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v1[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // al, Other Possible Types: char\n
    unsigned long long v3;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = v1[0];\n
    if (v1[0])\n
    {\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a1, v2);\n
            if (v3)\n
                break;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        v5 = v1 + 1;\n
    }\n
    *(a0) = v5;\n
    return *(a0);\n
}\n
", "4207740:sub_40347c": null, "4207744:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    char *v1;  // r9d, Other Possible Types: unsigned long\n
    void* v2;  // rax, Other Possible Types: unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp\n
    unsigned long long v7;  // r9\n
    unsigned long v8;  // r8\n
    void* v9;  // r11, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v10;  // rcx\n
    char v11;  // bpl\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v13;  // r11\n
    unsigned long long v14;  // rcx\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (*(v8) == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (*(v8) == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        while (true)\n
        {\n
            v10 = *((v8 + v1));\n
            v11 = v10 - 48;\n
            if (v11 >= 10 && (v10 & 223) - 65 >= 26)\n
                break;\n
            if (v11 <= 9)\n
            {\n
                v12 = v10 - 48;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else if ((v10 & 223) - 65 >= 26)\n
            {\n
                v12 = v11 < 10;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else\n
            {\n
                v12 = v10 + (v10 - 65 < 26) * 32 - 87;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            v13 = a2 * v9;\n
            v14 = v12 + v13;\n
            v1 += 1;\n
            v9 = v14;\n
        }\n
        v15 = -(v9);\n
        if (v5 != 45)\n
            v15 = v9;\n
        v2 = v15;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4207784:sub_4034a8": null, "4208010:sub_40358a": null, "4208119:sub_4035f7": null, "4208128:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4208136:sub_403608": null, "4208144:cgc_link_send": "long long cgc_link_send(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned short v0;  // [bp-0x160]\n
    char v1;  // [bp-0x15e]\n
    unsigned int v3;  // edi\n
    unsigned long v4;  // rbx\n
    unsigned long long v5;  // rcx\n
\n
    v3 = a0 & 3;\n
    v0 = v3 + ((a1 & 511) * 8) + 4;\n
    v4 = (a1 < 339 ? 339 : a1);\n
    cgc_memcpy(&v1, a2, v4);\n
    return cgc_transmit(*(&v3), a2, v4, v5);\n
}\n
", "4208237:sub_40366d": null, "4208240:cgc_link_recv": "long long cgc_link_recv(unsigned int *a0, unsigned int *a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v4;  // rcx\n
    unsigned int v5;  // ecx\n
    unsigned long v6;  // rax\n
\n
    do\n
    {\n
        if (cgc_receive(a0, a1, a2, v4))\n
            return 4294967295;\n
        if (*(&v1) < 2)\n
            return 4294967295;\n
    } while (((*(&v0) >> 3) & 511) > 339);\n
    if (cgc_receive(a0, a1))\n
        return 4294967295;\n
    v5 = *(&v0);\n
    v6 = v5 / 8 & 511;\n
    if (*(&v1) == v6)\n
    {\n
        *(a0) = v5 & 3;\n
        *(a1) = v6;\n
        return 0;\n
    }\n
    return 4294967295;\n
}\n
", "4208411:sub_40371b": null, "4208416:main": "int main()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = v2;\n
    cgc_session_register_psm(4113, cgc_handle_control_connect);\n
    cgc_session_register_psm(4115, cgc_handle_interrupt_connect);\n
    cgc_session_loop(4115, cgc_handle_interrupt_connect, v3, v4, v5, v6);\n
    return 0;\n
}\n
", "4208462:sub_40374e": null, "4208464:cgc_handle_control_connect": "long long cgc_handle_control_connect(unsigned long long a0)\n
{\n
    cgc_session_register_userdata();\n
    return cgc_session_register_events(a0, cgc_handle_event);\n
}\n
", "4208492:sub_40376c": null, "4208496:cgc_handle_interrupt_connect": "long long cgc_handle_interrupt_connect(unsigned long long a0)\n
{\n
    cgc_session_register_userdata();\n
    return cgc_session_register_events(a0, cgc_handle_event);\n
}\n
", "4208527:sub_40378f": null, "4208528:cgc_handle_event": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char g_incoming_report;\n
extern char g_incoming_report_type;\n
extern unsigned int g_protocol;\n
\n
long long cgc_handle_event(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x17]\n
    char v2;  // [bp-0x16]\n
    char v3;  // [bp-0x15]\n
    char v4;  // [bp-0x14]\n
    char v5;  // [bp-0x13]\n
    char v6;  // [bp-0x12]\n
    char v7;  // [bp-0x11]\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // rbx\n
    char *v11;  // rsi\n
    unsigned long long v12;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long long v14;  // rdi\n
    char v15;  // r8b\n
    char *v16;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v18;  // rax\n
    unsigned long v19;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v20;  // rsi, Other Possible Types: unsigned long long\n
\n
    v0 = v9;\n
    if (a1)\n
    {\n
        return v9;\n
    }\n
    else if (a2->field_0)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v9 = a2->field_10;\n
        if (!v9)\n
            return v9;\n
        v10 = a0;\n
        v11 = a2->field_8;\n
        v12 = *(v11);\n
        v13 = v12 / 16;\n
        if (g_incoming_report_type == 1 && v13 != 10)\n
        {\n
            g_incoming_report_type = 0;\n
            v1 = 1;\n
            goto LABEL_4037d6;\n
        }\n
        v14 = v13 - 1;\n
        switch (v14)\n
        {\n
        case 0:\n
            if (v15 == 5)\n
                cgc__terminate(v14);\n
            else\n
                return v9;\n
        case 3:\n
            if (v15 == 2)\n
            {\n
                v9 = cgc_send_data(v10, 2, 600, &g_incoming_report);\n
                return v9;\n
            }\n
            if (v15 == 1)\n
            {\n
                v9 = cgc_send_report(v10);\n
                return v9;\n
            }\n
            v2 = 4;\n
            break;\n
        case 4:\n
            if (v15 != 2)\n
            {\n
                v3 = 4;\n
                break;\n
            }\n
            else\n
            {\n
                g_incoming_report_type = 1;\n
                return a2->field_10;\n
            }\n
        case 5:\n
            v16 = cgc_malloc(2);\n
            *(v16) = 160;\n
            cgc_memcpy(v16 + 1, &g_protocol, 1);\n
            v19 = v10;\n
            v20 = 2;\n
            goto LABEL_40391c;\n
        case 6:\n
            *(&g_protocol) = v12 & 1;\n
            v4 = 0;\n
            break;\n
        case 9:\n
            if (!g_incoming_report_type)\n
            {\n
                v5 = 1;\n
                break;\n
            }\n
            else\n
            {\n
                if (v9 >= 2)\n
                {\n
                    v18 = v9 - 1;\n
                    a2 = (a2 < 600 ? 600 : v18);\n
                    cgc_memcpy(&g_incoming_report, v11 + 1, a2);\n
                }\n
                v6 = 0;\n
                v9 = cgc_session_send(v10, 1, &v6);\n
                g_incoming_report_type = 0;\n
                return v9;\n
            }\n
        case 10:\n
            v16 = cgc_malloc(54);\n
            *(v16) = 160;\n
            cgc_memcpy(v16 + 1, main, 53);\n
            v19 = v10;\n
            v20 = 54;\n
LABEL_40391c:\n
            cgc_session_send(v19, v20, v16);\n
            v9 = cgc_free(v16);\n
            return v9;\n
        default:\n
            v7 = 3;\n
            break;\n
        }\n
LABEL_4037d6:\n
        v9 = cgc_session_send(v10, 1);\n
        return v9;\n
    }\n
}\n
", "4209020:sub_40397c": null, "4209024:cgc_send_report": "extern char g_protocol;\n
\n
long long cgc_send_report(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x348]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned int v4;  // rbx\n
    unsigned long long v5;  // r12\n
    char *v6;  // rax\n
\n
    cgc_random(a0, v2, v3);\n
    v4 = (!g_protocol ? 700 : 200);\n
    v5 = v4 + 1;\n
    v6 = cgc_malloc(v5);\n
    *(v6) = 161;\n
    cgc_memcpy(v6 + 1, &v0, v4);\n
    cgc_session_send(a0, v5, v6);\n
    return cgc_free(v6);\n
}\n
", "4209158:sub_403a06": null, "4209168:cgc_send_data": "long long cgc_send_data(unsigned long long a0, unsigned long a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // r12\n
    char *v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a2 + 1;\n
    v4 = cgc_malloc(v3);\n
    *(v4) = a1 | 160;\n
    cgc_memcpy(v4 + 1, a3, a2);\n
    cgc_session_send(a0, v3, v4);\n
    return cgc_free(v4);\n
}\n
", "4209264:cgc_session_configuration_response": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
} struct_1;\n
\n
extern struct_0 *g_channels;\n
\n
long long cgc_session_configuration_response(struct_1 *a0)\n
{\n
    char v1[2];  // rax\n
\n
    v1 = (&g_channels)[a0->field_4];\n
    if (v1 && v1[0] == 1 && v1[1] == 1)\n
        v1[0] = 2;\n
    return (&g_channels)[a0->field_4];\n
}\n
", "4209299:sub_403a93": null, "4209312:cgc_session_loop": "typedef struct struct_4 {\n
    char field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    char padding_0[4745012];\n
    unsigned int field_486734;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char padding_2[2];\n
    unsigned short field_4;\n
    char padding_6[2];\n
    struct struct_0 *field_8;\n
    unsigned long long field_10;\n
    unsigned int field_18;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned short field_4;\n
} struct_2;\n
\n
typedef struct struct_8 {\n
    struct struct_8 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_8;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_6;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
} struct_7;\n
\n
typedef struct struct_6 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    char padding_6[18];\n
    unsigned long long field_18;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern unsigned int g_486734;\n
extern char g_496744;\n
extern char g_channels;\n
extern unsigned short g_current_packet;\n
extern unsigned int g_dynamic_id;\n
extern struct_8 *g_psm_head;\n
extern unsigned int g_temp_packet;\n
\n
long long cgc_session_loop()\n
{\n
    unsigned int v0;  // [bp-0x1e0], Other Possible Types: char\n
    unsigned short v1;  // [bp-0x1dc], Other Possible Types: unsigned int, unsigned long\n
    unsigned int *v2;  // [bp-0x1d8]\n
    unsigned int v3;  // [bp-0x1d0]\n
    unsigned int v4;  // [bp-0x1c8], Other Possible Types: char\n
    unsigned int v5;  // [bp-0x1c4], Other Possible Types: unsigned short\n
    unsigned int v6;  // [bp-0x1c0]\n
    unsigned int v7;  // [bp-0x1bc]\n
    struct_1 *v8;  // [bp-0x1b8]\n
    struct_2 *v9;  // [bp-0x1b0]\n
    struct_3 *v10;  // [bp-0x1a8]\n
    struct_7 *v11;  // [bp-0x1a0]\n
    unsigned long v12;  // [bp-0x198]\n
    unsigned long v13;  // [bp-0x190]\n
    char v14;  // [bp-0x188]\n
    unsigned long v16;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v17;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v18;  // eax\n
    void* v19;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v20;  // rdx\n
    unsigned long long v21;  // rbx\n
    struct struct_1 **v22;  // rcx\n
    struct_5 *v23;  // rcx, Other Possible Types: unsigned long\n
    struct_1 *v24;  // rdi\n
    struct_5 *v25;  // rdx\n
    unsigned long long v26;  // rax\n
    unsigned long v27;  // rdi\n
    struct_2 *v28;  // r8\n
    struct_1 *v29;  // rax\n
    unsigned long long v30;  // rdi\n
    unsigned long v31;  // rax\n
    unsigned long long v32;  // r15\n
    unsigned int v33;  // eax\n
    struct_8 *v34;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v35;  // rdx\n
    struct_1 *v36;  // rbp\n
    struct_1 *v37;  // rcx\n
    void* v38;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v39;  // rbp, Other Possible Types: unsigned long long\n
    struct struct_0 **v40;  // rax\n
    struct_3 *v42;  // rax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // eax\n
    unsigned long long v46;  // rcx\n
    struct_7 *v47;  // r9\n
    struct_6 *v48;  // rbp\n
    struct struct_0 **v49;  // rax\n
    unsigned long long v50;  // rbp\n
    unsigned long long v51;  // rcx\n
    unsigned int v52;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v53;  // rdi, Other Possible Types: unsigned long\n
    char v54;  // al\n
    unsigned int v55;  // rcx, Other Possible Types: unsigned long, unsigned short\n
    struct_3 *v56;  // r10, Other Possible Types: unsigned long\n
    unsigned long v57;  // r11, Other Possible Types: unsigned long long\n
    struct_7 *v58;  // r13, Other Possible Types: unsigned long\n
    struct_2 *v59;  // rsi, Other Possible Types: unsigned long, char, unsigned long long\n
    unsigned long v60;  // r8, Other Possible Types: unsigned long long\n
    unsigned long long v61;  // r8\n
    unsigned long v62;  // r8\n
    unsigned long long v63;  // r8\n
    unsigned long v64;  // rax\n
    unsigned long long v65;  // rbx\n
    struct_4 *v66;  // rsi, Other Possible Types: unsigned long\n
    void* v67;  // r15, Other Possible Types: unsigned long\n
    unsigned long v68;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v69;  // rbp, Other Possible Types: unsigned long long\n
    struct_3 *v70;  // rbx\n
    struct_1 *v71;  // rcx\n
    struct_4 *v72;  // r12, Other Possible Types: unsigned long\n
    struct_5 *v73;  // r14, Other Possible Types: unsigned long\n
    struct_4 *v74;  // r14, Other Possible Types: unsigned long\n
    struct struct_0 **v75;  // rax\n
\n
    v16 = cgc_link_recv(&v7, &v6, &v14);\n
    if (v16)\n
        return v16;\n
    v17 = 4294967295;\n
    v72 = &v14;\n
    v74 = &v7;\n
    do\n
    {\n
        v18 = v7;\n
        v19 = v17;\n
        if (v18 != 1)\n
        {\n
            v17 = 4294967295;\n
            if (!(v18 == 2))\n
                continue;\n
            v19 = 0;\n
            cgc_memset(&g_current_packet, 0, 65539);\n
        }\n
        v17 = 4294967295;\n
        if (v19 == -1)\n
            continue;\n
        v20 = v6;\n
        v17 = 4294967295;\n
        if (!((v20 + v19) <= 65539))\n
            continue;\n
        cgc_memcpy(v19 + &g_current_packet, v72, v20);\n
        v21 = v19 + v6;\n
        if (v21 < 4)\n
        {\n
            v17 = v21;\n
            continue;\n
        }\n
        else\n
        {\n
            v17 = v21;\n
            if (!(*(&g_current_packet) + 4 == v21))\n
                continue;\n
            v22 = *(&g_current_packet) >> 16;\n
            if (v22 == 1)\n
            {\n
                v23 = 0;\n
                while (true)\n
                {\n
                    v25 = v23 + 4;\n
                    if (v25 > g_current_packet)\n
                        break;\n
                    v26 = *((v23 + &g_486734));\n
                    v27 = v26 / 0x10000;\n
                    v73 = &v25->padding_0[v27];\n
                    if (v73 > g_current_packet)\n
                    {\n
                        v59 = 0;\n
                        v73 = v25;\n
                        goto LABEL_403bc5;\n
                    }\n
                    else\n
                    {\n
                        v59 = 1;\n
                        switch (v26)\n
                        {\n
                        case 2:\n
                            if ((v26 & -0x10000) == 0x40000)\n
                            {\n
                                v33 = *(&v28->field_4);\n
                                v34 = g_psm_head;\n
                                if (!g_psm_head)\n
                                {\n
LABEL_403c5d:\n
                                    v34 = 0;\n
                                }\n
                                else\n
                                {\n
                                    while (*((v34 + 8)) != v33)\n
                                    {\n
                                        v34 = *(v34);\n
                                        if (!v34)\n
                                            goto LABEL_403c5d;\n
                                    }\n
                                }\n
                                if (!v34)\n
                                {\n
                                    v68 = v33 & -0x10000 | 0x200000000;\n
                                }\n
                                else\n
                                {\n
                                    g_dynamic_id = g_dynamic_id + 1;\n
                                    v48 = cgc_malloc(32);\n
                                    v48->field_0 = 0;\n
                                    v48->field_2 = g_dynamic_id;\n
                                    v48->field_18 = 2886218023584;\n
                                    *(&(&g_channels)[8 * g_dynamic_id]) = v48;\n
                                    v48->field_4 = v28[1].field_0;\n
                                    *(&v48->field_0) = 1;\n
                                    v49 = *((v34 + 16));\n
                                    if (v49)\n
                                        v49(v48);\n
                                    v1 = v48->field_2;\n
                                    v68 = v48->field_4 * 0x10000 | v1;\n
                                }\n
                                v1 = v68;\n
                                v0 = 3;\n
                                v0 = *(&v28->field_0 + 1) * 0x100 | 524291;\n
                                g_temp_packet = 65548;\n
                                cgc_memcpy(&g_496744, &v0, 12);\n
                                v59 = 16;\n
                                goto LABEL_4040ad;\n
                            }\n
                        case 4:\n
                            if (v26 > 262143)\n
                            {\n
                                v35 = *(&(&g_channels)[8 * v28->field_4]);\n
                                if (v35)\n
                                {\n
                                    if (v35->field_0 != 1)\n
                                    {\n
                                        if (!(!v35->field_0))\n
                                            goto LABEL_4040bd;\n
                                        goto LABEL_40406e;\n
                                    }\n
                                    else if (!v35->field_1)\n
                                    {\n
LABEL_4040bd:\n
                                        v8 = v35;\n
                                        v9 = v28;\n
                                        v42 = cgc_malloc(v27 + 10);\n
                                        if (!v42)\n
                                        {\n
                                            v0 = *(&v9->field_0 + 1) * 0x100 | 131073;\n
                                        }\n
                                        else\n
                                        {\n
                                            v56 = v42;\n
                                            v44 = v42->field_0 & -0x100 | 5;\n
                                            v56->field_0 = v44;\n
                                            v59 = v9;\n
                                            v56->field_0 = v44 & -65531 | *(&v59->field_0 + 1) * 0x100;\n
                                            v45 = v8->field_4;\n
                                            v46 = *((&v56->field_4 + 2));\n
                                            *(&v56->field_6) = v46 / 0x10000;\n
                                            v56->field_4 = v46 * 0x10000 | v33;\n
                                            v56->field_4 = *(&v59->field_4) & 0x10000 | v33;\n
                                            *(&v56->field_6) = 0;\n
                                            v58 = &v59[1].field_0 + 2;\n
                                            v47 = &v56->field_6 + 2;\n
                                            v60 = 0;\n
                                            v57 = 0;\n
                                            v10 = v56;\n
                                            v11 = v58;\n
                                            while (true)\n
                                            {\n
                                                v50 = *((v59 + 2)) - 4;\n
                                                if (v50 <= v57)\n
                                                    break;\n
                                                v51 = *((v58 + v57 + 1));\n
                                                v52 = v51;\n
                                                v53 = v57 + v52;\n
                                                if (v50 >= v53)\n
                                                {\n
                                                    v54 = *((v58 + v57));\n
                                                    if ((v54 & 127) != 1)\n
                                                    {\n
                                                        if (!(v54 & 128))\n
                                                        {\n
                                                            *((v56 + 4)) = *((v56 + 4));\n
                                                            *((v56 + 8)) = 3;\n
                                                            *((v56 + v60 + 10)) = v54;\n
                                                            *((v56 + v60 + 1 + 10)) = v51;\n
                                                            v13 = v53;\n
                                                            *(&v12) = v52;\n
                                                            cgc_memcpy(2 + v60 + v47, v57 + 2 + v58, v52);\n
                                                            v53 = v13;\n
                                                            v56 = v10;\n
                                                            v52 = v12;\n
                                                            v58 = v11;\n
                                                            v59 = v9;\n
                                                        }\n
                                                    }\n
                                                    else\n
                                                    {\n
                                                        if (v51 != 2)\n
                                                        {\n
                                                            *((v56 + 4)) = *((v56 + 4));\n
                                                            *((v56 + 8)) = 2;\n
                                                        }\n
                                                        else\n
                                                        {\n
                                                            v55 = *((v58 + v57 + 2));\n
                                                            if (v55 <= 47)\n
                                                            {\n
                                                                v55 = *((v56 + 4));\n
                                                                *((v56 + 8)) = 1;\n
                                                                *((v56 + 4)) = v55;\n
                                                                *(&v55) = 48;\n
                                                            }\n
                                                            else\n
                                                            {\n
                                                                v8->field_18 = v55;\n
                                                            }\n
                                                            (&v47->field_0)[v60] = v54;\n
                                                            (&v47->padding_1)[v60] = 2;\n
                                                            *(&(&v47->field_0)[v60 + 2]) = v55;\n
                                                            v60 = v60 + 4;\n
                                                        }\n
                                                    }\n
                                                    v57 = v57 + v52 + 2;\n
                                                }\n
                                                if (v50 < v53)\n
                                                    break;\n
                                            }\n
                                            v61 = v60 * 0x10000 + 0x60000;\n
                                            v62 = v61 / 0x10000;\n
                                            *((v56 + 2)) = v62;\n
                                            v63 = v62 + 4;\n
                                            v64 = v63;\n
                                            v65 = v64 + 4;\n
                                            g_temp_packet = v64 | 0x10000;\n
                                            cgc_memcpy(&g_496744, v56, v63);\n
                                            v67 = 0;\n
                                            do\n
                                            {\n
                                                v69 = v65 - v67;\n
                                                if (339 <= v69)\n
                                                    v69 = 339;\n
                                                cgc_link_send(1 + (v67 < 1), v69, &g_temp_packet + v67);\n
                                                v67 += v69;\n
                                            } while (v67 < v65);\n
                                            v70 = v10;\n
                                            cgc_free(v70);\n
                                            if ((0xffff00010000 & (v70->field_6 << 32 | v70->field_4)))\n
                                            {\n
                                                break;\n
                                            }\n
                                            else\n
                                            {\n
                                                v71 = v8;\n
                                                if (v71->field_0 != 2)\n
                                                {\n
                                                    v0 = 262404;\n
                                                    v1 = v71->field_4;\n
                                                    g_temp_packet = 65544;\n
                                                    cgc_memcpy(&g_496744, &v0, 8);\n
                                                    cgc_link_send(2, 12, &g_temp_packet);\n
                                                    v8->field_1 = 1;\n
                                                    break;\n
                                                }\n
                                            }\n
                                            *(&v59) = 1;\n
                                            goto LABEL_403bc5;\n
                                        }\n
LABEL_403e81:\n
                                        v1 = 0;\n
                                        goto LABEL_404083;\n
                                    }\n
                                }\n
                            }\n
                        case 6:\n
                            if ((v26 & -0x10000) == 0x40000)\n
                            {\n
                                v36 = *(&(&g_channels)[8 * v28->field_4]);\n
                                if (v36 && v36->field_0)\n
                                {\n
                                    v0 = 1;\n
                                    if (v36->field_8)\n
                                        v40(v36, v36->field_10, &v0);\n
                                    v4 = 7;\n
                                    v4 = *(&v28->field_0 + 1) * 0x100 | 262151;\n
                                    v5 = *(&v28->field_4);\n
                                    g_temp_packet = 65544;\n
                                    cgc_memcpy(&g_496744, &v4, 8);\n
                                    cgc_link_send(2, 12, &g_temp_packet);\n
                                    v36->field_0 = 0;\n
                                    break;\n
                                }\n
                                v0 = v26 & 0xff00 | 131073;\n
                                v1 = 2;\n
                                g_temp_packet = 65542;\n
                                cgc_memcpy(&g_496744, &v0, 6);\n
                                cgc_link_send(2, 10, &g_temp_packet);\n
                                v59 = 1;\n
                                goto LABEL_403bc5;\n
                            }\n
                        case 7:\n
                            if ((v26 & -0x10000) == 0x40000)\n
                            {\n
                                v37 = *(&(&g_channels)[8 * v28->field_4]);\n
                                if (v37 && v37->field_0 == 3)\n
                                {\n
                                    v37->field_0 = 0;\n
                                    goto LABEL_403bc5;\n
                                }\n
LABEL_40406e:\n
                                v0 = v26 & 0xff00 | 131073;\n
                                v1 = 2;\n
LABEL_404083:\n
                                g_temp_packet = 65542;\n
                                v66 = &v0;\n
LABEL_40409e:\n
                                cgc_memcpy(&g_496744, v66, 6);\n
                                v59 = 10;\n
LABEL_4040ad:\n
                                cgc_link_send(2, v59, &g_temp_packet);\n
                                break;\n
                            }\n
                        case 8:\n
                            v28->field_0 = v26 & -0x100 | 9;\n
                            v30 = v27 + 4;\n
                            v31 = v30;\n
                            v32 = v31 + 4;\n
                            g_temp_packet = v31 | 0x10000;\n
                            cgc_memcpy(&g_496744, v28, v30);\n
                            v38 = 0;\n
                            do\n
                            {\n
                                v39 = v32 - v38;\n
                                if (339 <= v39)\n
                                    v39 = 339;\n
                                cgc_link_send(1 + (v38 < 1), v39, v38 + &g_temp_packet);\n
                                v38 += v39;\n
                            } while (v38 < v32);\n
                            v72 = &v14;\n
                            break;\n
                        case 10:\n
                            if ((v26 & -0x10000) == 0x20000)\n
                            {\n
                                v0 = v26 & 0xff00 | 262155;\n
                                v1 = v28->field_4 | 0x10000;\n
                                g_temp_packet = 65544;\n
                                cgc_memcpy(&g_496744, &v0, 8);\n
                                v59 = 12;\n
                                goto LABEL_4040ad;\n
                            }\n
                            v4 = v26 & 0xff00 | 131073;\n
                            v5 = 0;\n
                            g_temp_packet = 65542;\n
                            v66 = &v4;\n
                            goto LABEL_40409e;\n
                        case 5:\n
                            v29 = *(&(&g_channels)[8 * v28->field_4]);\n
                            if (v29 && v29->field_0 == 1 && v29->field_1 == 1)\n
                            {\n
                                v29->field_0 = 2;\n
                                goto LABEL_403bc5;\n
                            }\n
                        case 1: case 3: case 9: case 11:\n
LABEL_403bc5:\n
                            v23 = v73;\n
                            v74 = &v7;\n
                            if (!v59)\n
                                goto LABEL_404449;\n
                            continue;\n
                        default:\n
                            v0 = v26 & 0xff00 | 131073;\n
                            goto LABEL_403e81;\n
                        }\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                v24 = *((&g_channels + 0x8 * v22));\n
                v17 = 4294967295;\n
                if (!v24)\n
                    continue;\n
                v17 = 4294967295;\n
                if (!(v24->field_0 == 2))\n
                    continue;\n
                v0 = 0;\n
                v2 = &g_486734;\n
                v3 = *(&g_current_packet);\n
                if (v24->field_8)\n
                    v75();\n
            }\n
LABEL_404449:\n
            v17 = 4294967295;\n
        }\n
        v16 = cgc_link_recv(v74, &v6, v72);\n
    } while (!v16);\n
    return v16;\n
}\n
", "4209402:sub_403afa": null, "4209478:sub_403b46": null, "4209592:sub_403bb8": null, "4211795:sub_404453": null, "4211808:cgc_session_register_psm": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern struct_0 *g_psm_head;\n
\n
long long cgc_session_register_psm(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = g_psm_head;\n
    if (!g_psm_head)\n
    {\n
LABEL_40448d:\n
        v3 = 0;\n
    }\n
    else\n
    {\n
        while (*((v3 + 8)) != a0)\n
        {\n
            v3 = *(v3);\n
            if (!v3)\n
                goto LABEL_40448d;\n
        }\n
    }\n
    if (!v3)\n
    {\n
        v3 = cgc_malloc(24);\n
        if (!v3)\n
            return v3;\n
        *((v3 + 8)) = a0;\n
        *(v3) = g_psm_head;\n
        g_psm_head = v3;\n
    }\n
    *((v3 + 16)) = a1;\n
    return v3;\n
}\n
", "4211906:sub_4044c2": null, "4211920:cgc_session_register_events": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_session_register_events(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    a0->field_8 = a1;\n
    return v1;\n
}\n
", "4211925:sub_4044d5": null, "4211936:cgc_session_register_userdata": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_session_register_userdata(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax\n
\n
    a0->field_10 = a1;\n
    return v1;\n
}\n
", "4211941:sub_4044e5": null, "4211952:cgc_session_send": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char g_496744;\n
extern unsigned int g_temp_packet;\n
\n
long long cgc_session_send(struct_0 *a0, unsigned long a1, unsigned int a2)\n
{\n
    unsigned int v1;  // rax\n
    unsigned long long v2;  // r14\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rax\n
    void* v5;  // r15, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = v1 + 4;\n
    g_temp_packet = a0->field_4 * 0x10000 | v1;\n
    cgc_memcpy(&g_496744, a2, v1);\n
    v5 = 0;\n
    do\n
    {\n
        v3 = v2 - v5;\n
        if (339 <= v3)\n
            v3 = 339;\n
        v4 = cgc_link_send(1 + (v5 < 1), v3, v5 + &g_temp_packet);\n
        v5 += v3;\n
    } while (v5 < v2);\n
    return v4;\n
}\n
", "4212076:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_random": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}