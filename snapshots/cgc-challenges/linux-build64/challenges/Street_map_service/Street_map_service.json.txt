{"4202496:_init": "extern struct_0 *g_4083f0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_4083f0;\n
    if (g_4083f0)\n
        v1 = g_4083f0();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408410;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408410;\n
    goto *(4228120);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(0x408400);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_4083e8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_4083f8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_408400;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408400)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203076:sub_402244": null, "4203088:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203344:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203406:sub_40238e": null, "4203408:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203633:sub_402471": null, "4203648:cgc_float_to_str": "long long cgc_float_to_str(char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned long long v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_40277c;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < 5;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_40277c:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204428:sub_40278c": null, "4204432:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    unsigned long long *v0;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xd8]\n
    unsigned int *v2;  // [bp-0xd0]\n
    unsigned int v3;  // [bp-0xc4]\n
    unsigned int *v4;  // [bp-0xc0], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0xb8]\n
    unsigned int v6;  // [bp-0xac]\n
    struct struct_0 **v7;  // [bp-0xa8], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0xa0]\n
    unsigned int v9;  // [bp-0x98]\n
    unsigned int v10;  // [bp-0x94]\n
    struct_3 *v11;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned long v12;  // [bp-0x88]\n
    struct_3 *v13;  // [bp-0x80], Other Possible Types: unsigned long\n
    unsigned int v14;  // [bp-0x74]\n
    char *v15;  // [bp-0x70], Other Possible Types: unsigned long\n
    char v16;  // [bp-0x68]\n
    unsigned int v17;  // [bp-0x24]\n
    char *v18;  // [bp-0x18]\n
    unsigned int v19;  // [bp-0xc]\n
    struct_1 *v21;  // rcx\n
    unsigned long long v22;  // rdx\n
    unsigned int *v23;  // rax\n
    struct_1 *v24;  // rcx\n
    unsigned int *v25;  // rdx\n
    unsigned long long v26;  // rdx\n
    unsigned long long *v27;  // rax\n
    struct_1 *v28;  // rcx\n
    unsigned long long *v29;  // rdx\n
    struct_1 *v30;  // rcx\n
    unsigned long long v31;  // rdx\n
    struct struct_0 **v32;  // rax\n
    struct_1 *v33;  // rcx\n
    struct struct_0 **v34;  // rdx\n
\n
    v18 = a0;\n
    v17 = 0;\n
    if (!v18)\n
    {\n
        v19 = -1;\n
        return v19;\n
    }\n
    while (true)\n
    {\n
        if (!*(v18))\n
        {\n
            v19 = v17;\n
            return v19;\n
        }\n
        else if (*(v18) != 64)\n
        {\n
            cgc_putc(*(v18));\n
            v18 += 1;\n
            v17 += 1;\n
        }\n
        else\n
        {\n
            v18 += 1;\n
            v10 = *(v18);\n
            if (!v10)\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            if (v10 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v10 == 100)\n
            {\n
                v5 = a1;\n
                v6 = v5->field_0;\n
                if (v6 > 40)\n
                {\n
                    v24 = v5;\n
                    v25 = v24->field_8;\n
                    v24->field_8 = &v25[2];\n
                    v4 = v25;\n
                }\n
                else\n
                {\n
                    v21 = v5;\n
                    v22 = v6;\n
                    v23 = v22 + v21->field_10;\n
                    v21->field_0 = v22 + 8;\n
                    v4 = v23;\n
                }\n
                v14 = *(v4);\n
                cgc_int_to_str(v14, &v16);\n
                for (v13 = &v16; v13->field_0; v13 += 1)\n
                {\n
                    cgc_putc(v13->field_0);\n
                    v17 += 1;\n
                }\n
            }\n
            else if (v10 == 102)\n
            {\n
                v1 = a1;\n
                v2 = &v1->field_4;\n
                v3 = v1->field_4;\n
                if (v3 <= 160)\n
                {\n
                    v26 = v3;\n
                    v27 = v26 + v1->field_10;\n
                    *(v2) = v26 + 16;\n
                    v0 = v27;\n
                }\n
                else\n
                {\n
                    v28 = v1;\n
                    v29 = v28->field_8;\n
                    v28->field_8 = &v29[1];\n
                    v0 = v29;\n
                }\n
                v12 = *(v0);\n
                cgc_float_to_str(&v16);\n
                for (v11 = &v16; v11->field_0; v11 += 1)\n
                {\n
                    cgc_putc(v11->field_0);\n
                    v17 += 1;\n
                }\n
            }\n
            else if (v10 == 115)\n
            {\n
                v8 = a1;\n
                v9 = v8->field_0;\n
                if (v9 > 40)\n
                {\n
                    v33 = v8;\n
                    v34 = v33->field_8;\n
                    v33->field_8 = &v34[1];\n
                    v7 = v34;\n
                }\n
                else\n
                {\n
                    v30 = v8;\n
                    v31 = v9;\n
                    v32 = v31 + v30->field_10;\n
                    v30->field_0 = v31 + 8;\n
                    v7 = v32;\n
                }\n
                for (v15 = *(v7); *(v15); v15 += 1)\n
                {\n
                    cgc_putc(*(v15));\n
                    v17 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v19 = -1;\n
                return v19;\n
            }\n
            v18 += 1;\n
        }\n
    }\n
}\n
", "4205318:sub_402b06": null, "4205328:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4205488:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4205579:sub_402c0b": null, "4205584:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205635:sub_402c43": null, "4205648:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4205676:sub_402c6c": null, "4205680:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4205732:sub_402ca4": null, "4205744:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_402e99;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_402e99;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_402e99;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_402e09:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_402e99;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_402e09;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_402e99:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4206301:sub_402edd": null, "4206304:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4206696:sub_403068": null, "4206704:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; *((a1 + v0)); v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4206807:sub_4030d7": null, "4206816:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4206934:sub_403156": null, "4206944:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4207062:sub_4031d6": null, "4207072:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4207281:sub_4032b1": null, "4207296:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; v0[a0]; v0 += 1);\n
    return v0;\n
}\n
", "4207379:sub_403313": null, "4207392:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        v2[a0] = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4207569:sub_4033d1": null, "4207584:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4207746:sub_403482": null, "4207760:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4207992:sub_403578": null, "4208000:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4208082:sub_4035d2": null, "4208096:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    int tmp_24;  // tmp #24\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    for (v0 = v3; v1; v1 -= 1)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        tmp_24 = *(v5);\n
        v6 = v3;\n
        v3 = v6 + 1;\n
        *(v6) = tmp_24;\n
    }\n
    return v0;\n
}\n
", "4208183:sub_403637": null, "4208192:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned int v4;  // eax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a2;\n
    v0 = v2;\n
    while (true)\n
    {\n
        v4 = v1;\n
        v1 = v4 - 1;\n
        if (!v4)\n
            break;\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        *(v5) = a1;\n
    }\n
    return v0;\n
}\n
", "4208268:sub_40368c": null, "4208272:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
            break;\n
    }\n
    if (!*(v0))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208391:sub_403707": null, "4208400:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20]\n
\n
    v0 = cgc_malloc(a0 * a1);\n
    cgc_memset(v0, 0, a0 * a1);\n
    return v0;\n
}\n
", "4208466:sub_403752": null, "4208480:cgc_malloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_2;\n
\n
extern struct_1 *cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    struct_2 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x28]\n
    struct_0 *v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    struct_0 *v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        cgc_heap_manager->field_0 = 0x1000;\n
        cgc_heap_manager->field_10 = 8;\n
        cgc_heap_manager->field_8 = 0x1000 - cgc_heap_manager->field_10;\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(cgc_heap_manager->field_18, 0, 0x1000);\n
        v3 = cgc_heap_manager->field_18;\n
        v3->field_0 = 4072;\n
        v3->field_8 = 0;\n
    }\n
    v3 = cgc_heap_manager->field_18;\n
    if (a0 > v3->field_0)\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (v3->field_8)\n
        {\n
            v3 = v3->field_8;\n
            v3->field_0 = 4072;\n
            v4 = 0;\n
            return v4;\n
        }\n
        cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        v9->field_0 = v9->field_0 - a0;\n
        v1 = &v3[1].field_0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v1 + 8)) & 1))\n
                v0 = *(v1) < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = v1 + 16 + *(v1);\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = v1 + 16;\n
        return v4;\n
    }\n
}\n
", "4208965:sub_403945": null, "4208976:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4209038:sub_40398e": null, "4209040:cgc_get_last_element_s": "typedef struct struct_0 {\n
    char padding_0[4080];\n
    struct struct_0 *field_ff0;\n
} struct_0;\n
\n
long long cgc_get_last_element_s(struct struct_0 **a0)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    for (v1 = *(a0); v1; v1 = *((v1 + 4080)))\n
    {\n
        v0 = v1;\n
    }\n
    return v0;\n
}\n
", "4209120:cgc_get_last_element_d": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_get_last_element_d(struct struct_0 **a0)\n
{\n
    struct_0 *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    for (v1 = *(a0); v1; v1 = *((v1 + 8)))\n
    {\n
        v0 = v1;\n
    }\n
    return v0;\n
}\n
", "4209197:sub_403a2d": null, "4209200:cgc_create_single_list": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_create_single_list()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
\n
    v0 = 0;\n
    if (cgc_allocate(v2, v3, v4))\n
    {\n
        cgc_puts(\"\\n
**Allocate returned an error.\\n
\");\n
        cgc__terminate(\"\\n
**Allocate returned an error.\\n
\");\n
    }\n
    cgc_bzero(v0, 16);\n
    v0->field_0 = 0;\n
    v0->field_8 = 0;\n
    return v0;\n
}\n
", "4209309:sub_403a9d": null, "4209312:cgc_create_double_list": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_create_double_list()\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
\n
    v0 = 0;\n
    if (cgc_allocate(v2, v3, v4))\n
    {\n
        cgc_puts(\"\\n
**Allocate returned an error.\\n
\");\n
        cgc__terminate(\"\\n
**Allocate returned an error.\\n
\");\n
    }\n
    cgc_bzero(v0, 16);\n
    v0->field_0 = 0;\n
    v0->field_8 = 0;\n
    return v0;\n
}\n
", "4209421:sub_403b0d": null, "4209424:cgc_insert_double_list_node": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_3 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
} struct_3;\n
\n
long long cgc_insert_double_list_node(struct_0 *a0, struct_1 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x20]\n
    unsigned long long v2;  // rdx\n
\n
    v0 = 0;\n
    if (cgc_allocate(a0, a1, v2))\n
    {\n
        cgc_puts(\"\\n
**Allocate returned an error.\\n
\");\n
        cgc__terminate(\"\\n
**Allocate returned an error.\\n
\");\n
    }\n
    cgc_bzero(v0, 152);\n
    if (!a1)\n
    {\n
        v0->field_8 = a0->field_0;\n
        a0->field_0 = v0;\n
    }\n
    else\n
    {\n
        v0->field_8 = a1->field_8;\n
    }\n
    v0->field_0 = a1;\n
    if (v0->field_8)\n
        v0->field_8->field_0 = v0;\n
    if (v0->field_0)\n
        v0->field_0->field_8 = v0;\n
    a0->field_8 = a0->field_8 + 1;\n
    return v0;\n
}\n
", "4209660:sub_403bfc": null, "4209664:cgc_delete_double_list_node": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    struct struct_3 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
} struct_3;\n
\n
long long cgc_delete_double_list_node(struct_1 *a0, struct_2 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (a1 && a0->field_8)\n
    {\n
        if (a1 == a0->field_0)\n
            a0->field_0 = a1->field_8;\n
        else\n
            a1->field_0->field_8 = a1->field_8;\n
        if (a1->field_8)\n
            a1->field_8->field_0 = a1->field_0;\n
        v0 = a1->field_0;\n
        cgc_deallocate(a0, a1);\n
        a0->field_8 = a0->field_8 - 1;\n
        v1 = v0;\n
        return v1;\n
    }\n
    cgc_puts(\"**Cannot delete and empty list.\");\n
    v1 = 0;\n
    return v1;\n
}\n
", "4209883:sub_403cdb": null, "4209888:cgc_insert_single_list_node": "typedef struct struct_0 {\n
    char padding_0[4080];\n
    unsigned long long field_ff0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_1;\n
\n
long long cgc_insert_single_list_node(struct_1 *a0, struct_0 *a1)\n
{\n
    void* v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned long long v3;  // rdx\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (cgc_allocate(a0, a1, v3))\n
    {\n
        cgc_puts(\"\\n
**Allocate returned an error.\\n
\");\n
        cgc__terminate(\"\\n
**Allocate returned an error.\\n
\");\n
    }\n
    cgc_bzero(v1, 0x1000);\n
    if (!a1)\n
    {\n
        v1->field_ff0 = a0->field_0;\n
        a0->field_0 = v1;\n
    }\n
    else\n
    {\n
        v1->field_ff0 = a1->field_ff0;\n
        a1->field_ff0 = v1;\n
    }\n
    a0->field_8 = a0->field_8 + 1;\n
    return v1;\n
}\n
", "4210086:sub_403da6": null, "4210096:cgc_init_map": "long long cgc_init_map(unsigned long a0)\n
{\n
    char v0;  // [bp-0x18]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
\n
    if (cgc_allocate(a0, v2, v3))\n
    {\n
        cgc_puts(\"\\n
**Allocate returned an error.\\n
\");\n
        cgc__terminate(\"\\n
**Allocate returned an error.\\n
\");\n
    }\n
    cgc_strcpy(*(&v0), a0);\n
    *((*(&v0) + 31)) = 0;\n
    *((*(&v0) + 32)) = cgc_create_double_list();\n
    return *(&v0);\n
}\n
", "4210204:sub_403e1c": null, "4210208:cgc_add_road": "typedef struct struct_0 {\n
    char padding_0[32];\n
    struct struct_0 **field_20;\n
} struct_0;\n
\n
long long cgc_add_road(struct_0 *a0, unsigned int a1)\n
{\n
    unsigned long long v0[10];  // [bp-0x40]\n
    void* v1;  // [bp-0x38]\n
    void* v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v3[10];  // [bp-0x28]\n
    unsigned long v5;  // xmm0lq\n
\n
    v3[0] = 0;\n
    v2 = 0;\n
    v1 = cgc_get_last_element_d(a0->field_20);\n
    v2 = cgc_insert_double_list_node(a0->field_20, v1);\n
    v3[0] = v2 + 24;\n
    cgc_strcpy(&v3[3], a1);\n
    v0[0] = v3;\n
    *(24 + &v0[0] + cgc_strlen(a1)) = 0;\n
    v3[9] = v5;\n
    v3[7] = cgc_create_double_list();\n
    v3[8] = cgc_create_double_list();\n
    v3[2] = v2;\n
    return v3;\n
}\n
", "4210413:sub_403eed": null, "4210416:cgc_print_roads": "typedef struct struct_3 {\n
    char padding_0[32];\n
    struct struct_2 *field_20;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
long long cgc_print_roads(struct_3 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_1 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_1 *v3;  // rax, Other Possible Types: unsigned long long, unsigned long, struct_0 *\n
\n
    if (!a0->field_20->field_0)\n
        v1 = 0;\n
    else\n
        v1 = a0->field_20->field_0 + 24;\n
    v3 = cgc_printf(\"The map @s contains @d roads.\\n
\", a0, a0->field_20->field_8, a3, a4);\n
    v0 = 1;\n
    while (v1)\n
    {\n
        cgc_printf(\"(@d) @s is @f units long\\n
\", v0, v1 + 24, a3, a4);\n
        v0 += 1;\n
        v3 = *((v1 + 16));\n
        if (!v3->field_8)\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v3 = *((*((v1 + 16)) + 8)) + 24;\n
            v1 = v3;\n
        }\n
    }\n
    return v3;\n
}\n
", "4210631:sub_403fc7": null, "4210640:cgc_add_address": "typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    char padding_14[31];\n
    char field_33;\n
    char padding_34[4];\n
    unsigned long long field_38;\n
    unsigned long long field_40;\n
    unsigned long long field_48;\n
    unsigned long long field_50;\n
    unsigned long long field_58;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[56];\n
    struct struct_3 *field_38;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
} struct_3;\n
\n
long long cgc_add_address(unsigned long a0, unsigned int a1, struct_2 *a2, unsigned long a3, unsigned long a4)\n
{\n
    struct_1 *v0;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0xc8], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0xc0], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_4 *v4;  // [bp-0xb0]\n
    char v5;  // [bp-0xa8]\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v8;  // xmm0lq\n
    unsigned long v9;  // xmm1lq\n
\n
    v4 = &v5;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_bzero(v4, 96);\n
    if (a2->field_38->field_0)\n
        v1 = a2->field_38->field_0 + 24;\n
    while (v1)\n
    {\n
        if (*((v1 + 16)) > a0)\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v0 = v1;\n
            if (*((*((v1 + 8)) + 8)))\n
                v1 = *((*((v1 + 8)) + 8)) + 24;\n
            else\n
                v1 = 0;\n
        }\n
    }\n
    if (v0)\n
        v2 = *((v0 + 8));\n
    v3 = cgc_insert_double_list_node(a2->field_38, v2);\n
    if (!v3)\n
    {\n
        cgc_puts(\"**insert_double_list_node failed\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    v4->field_10 = a0;\n
    cgc_strcpy(&v4->padding_14, a1);\n
    v4->field_33 = 0;\n
    v4->field_38 = a2;\n
    v4->field_40 = a3;\n
    v4->field_48 = v8;\n
    v4->field_50 = a4;\n
    v4->field_58 = v9;\n
    v4->field_8 = v3;\n
    cgc_memcpy(v3 + 24, v4, 96);\n
    v6 = v3 + 24;\n
    return v6;\n
}\n
", "4211232:cgc_print_addresses": "typedef struct struct_1 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
    unsigned int field_10;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_print_addresses(struct_1 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_3 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_3 *v3;  // rax, Other Possible Types: unsigned long long, struct_2 *, unsigned long\n
\n
    if (!a0->field_38->field_0)\n
        v1 = 0;\n
    else\n
        v1 = a0->field_38->field_0 + 24;\n
    v3 = cgc_printf(\"The road @s contains @d addresses.\\n
\", &a0->padding_0[24], a0->field_38->field_8, a3, a4);\n
    v0 = 1;\n
    while (v1)\n
    {\n
        cgc_printf(\"(@d)\\t@s\\n
\\t@d @s\\n
\", v0, v1 + 20, *((v1 + 16)), &a0->padding_0[24]);\n
        v0 += 1;\n
        v3 = *((v1 + 8));\n
        if (!v3->field_8)\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v3 = *((*((v1 + 8)) + 8)) + 24;\n
            v1 = v3;\n
        }\n
    }\n
    return v3;\n
}\n
", "4211457:sub_404301": null, "4211472:cgc_add_intersection": "typedef struct struct_2 {\n
    char padding_0[48];\n
    unsigned long long field_30;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[64];\n
    void* field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_add_intersection(struct_1 *a0, unsigned long a1, unsigned long long a2[9])\n
{\n
    struct_2 *v0;  // [bp-0xa8], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0xa0], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x98]\n
    unsigned long long v3[10];  // [bp-0x90]\n
    unsigned long long v4[10];  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v6;  // xmm0lq\n
    unsigned long v7;  // xmm1lq\n
\n
    v3[0] = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (a2)\n
        v1 = a2[4];\n
    v2 = cgc_insert_double_list_node(a0->field_40, v1);\n
    if (!v2)\n
    {\n
        cgc_puts(\"Failed to insert node\");\n
        v4[0] = 0;\n
        return v4;\n
    }\n
    v3[0] = &v2[1].field_8;\n
    if (a2)\n
        a2[8] = &v2[1].field_8;\n
    if (v2->field_8)\n
    {\n
        v0 = v2->field_8 + 24;\n
        *((v0 + 48)) = v3;\n
    }\n
    v3[6] = a2;\n
    v3[8] = v0;\n
    v3[4] = v2;\n
    v3[5] = a1;\n
    v3[7] = v6;\n
    v3[9] = v7;\n
    v4 = v3;\n
    return v4;\n
}\n
", "4211860:sub_404494": null, "4211872:cgc_print_intersections": "typedef struct struct_2 {\n
    char padding_0[32];\n
    struct struct_1 *field_20;\n
    unsigned long long field_28;\n
    struct struct_0 *field_30;\n
    char padding_38[8];\n
    struct struct_0 *field_40;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[64];\n
    struct struct_3 *field_40;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_3;\n
\n
long long cgc_print_intersections(struct_4 *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_2 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_1 *v3;  // rax, Other Possible Types: unsigned long long, struct_2 *, unsigned long\n
\n
    v1 = 0;\n
    if (a0->field_40->field_0)\n
        v1 = a0->field_40->field_0 + 24;\n
    v3 = cgc_printf(\"The road @s contains @d intersections.\\n
\", &a0->padding_0[24], a0->field_40->field_8, a3, a4);\n
    v0 = 1;\n
    while (v1)\n
    {\n
        cgc_printf(\"(@d)\\t@s intersects @s\\n
\", v0, &a0->padding_0[24], *((v1 + 40)) + 24, a4);\n
        v0 += 1;\n
        if (*((v1 + 48)))\n
            cgc_printf(\"\\t\\t@f units after the intersection of @s\\n
\", *((*((v1 + 48)) + 40)) + 24, a2, a3, a4);\n
        if (*((v1 + 64)))\n
            cgc_printf(\"\\t\\t@f units before the intersection of @s\\n
\", *((*((v1 + 64)) + 40)) + 24, a2, a3, a4);\n
        v3 = *((v1 + 32));\n
        if (!v3->field_8)\n
        {\n
            v1 = 0;\n
        }\n
        else\n
        {\n
            v3 = *((*((v1 + 32)) + 8)) + 24;\n
            v1 = v3;\n
        }\n
    }\n
    return v3;\n
}\n
", "4212197:sub_4045e5": null, "4212208:cgc_find_pintersection": "typedef struct struct_3 {\n
    char padding_0[32];\n
    struct struct_2 *field_20;\n
    char padding_28[8];\n
    unsigned long long field_30;\n
    char padding_38[8];\n
    unsigned long long field_40;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_find_pintersection(struct_1 *a0, unsigned long a1, struct_3 *a2)\n
{\n
    struct_3 *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_3 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (!a0->field_40->field_8)\n
    {\n
        cgc_puts(\"intersection list is empty\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    if (a2)\n
        v0 = a2;\n
    else\n
        v0 = a0->field_40->field_0 + 24;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((v0 + 48)) == a1)\n
            break;\n
        if (*((v0 + 64)) == a1)\n
            break;\n
        if (*((*((v0 + 32)) + 8)))\n
            v0 = *((*((v0 + 32)) + 8)) + 24;\n
        else\n
            v0 = 0;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4212462:sub_4046ee": null, "4212464:cgc_find_pintersection_addresses": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
    char padding_10[48];\n
    unsigned long long field_40;\n
    char padding_48[8];\n
    unsigned long long field_50;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[56];\n
    struct struct_2 *field_38;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
long long cgc_find_pintersection_addresses(struct_3 *a0, unsigned long a1, struct_1 *a2)\n
{\n
    struct_1 *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (a2)\n
    {\n
        v0 = a2;\n
    }\n
    else if (a0->field_38->field_8)\n
    {\n
        v0 = a0->field_38->field_0 + 24;\n
    }\n
    else\n
    {\n
        cgc_puts(\"addresss list is empty\");\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((v0 + 64)) == a1)\n
            break;\n
        if (*((v0 + 80)) == a1)\n
            break;\n
        if (!*((*((v0 + 8)) + 8)))\n
            v0 = 0;\n
        else\n
            v0 = *((*((v0 + 8)) + 8)) + 24;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4212718:sub_4047ee": null, "4212720:cgc_delete_intersection": "typedef struct struct_2 {\n
    char padding_0[64];\n
    void* field_40;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    struct struct_1 *field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_delete_intersection(struct_2 *a0, struct_0 *a1)\n
{\n
    unsigned long long v0[11];  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long long v1[9];  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    for (v1[0] = cgc_find_pintersection(a0, a1, NULL); v1; v1 = cgc_find_pintersection(a0, a1, v1))\n
    {\n
        if (*((v1 + 48)) == a1)\n
        {\n
            if (a1->field_20->field_0)\n
                *((v1 + 48)) = a1->field_20->field_0 + 24;\n
            else\n
                *((v1 + 48)) = 0;\n
        }\n
        else\n
        {\n
            if (!a1->field_20->field_8)\n
                *((v1 + 64)) = 0;\n
            else\n
                *((v1 + 64)) = a1->field_20->field_8 + 24;\n
        }\n
    }\n
    for (v0[0] = cgc_find_pintersection_addresses(a0, a1, NULL); v0; v0 = cgc_find_pintersection_addresses(a0, a1, v0))\n
    {\n
        if (v0[8] != a1)\n
        {\n
            if (!a1->field_20->field_8)\n
                v0[10] = 0;\n
            else\n
                v0[10] = a1->field_20->field_8 + 24;\n
        }\n
        else\n
        {\n
            if (!a1->field_20->field_0)\n
                v0[8] = 0;\n
            else\n
                v0[8] = a1->field_20->field_0 + 24;\n
        }\n
    }\n
    v2 = cgc_delete_double_list_node(a0->field_40, a1->field_20);\n
    if (!v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v5 = v2 + 24;\n
    return v5;\n
}\n
", "4213239:sub_4049f7": null, "4213248:cgc_is_in_turn_list": "long long cgc_is_in_turn_list(struct struct_0 **a0, unsigned long a1)\n
{\n
    unsigned long long *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!*(a0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (*(v0) != a1)\n
        {\n
            v0 = &(*(a0))[17 * v1];\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = 1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4213406:sub_404a9e": null, "4213408:cgc_init_turnList": "long long cgc_init_turnList()\n
{\n
    void* v0;  // [bp-0x10]\n
\n
    v0 = 0;\n
    v0 = cgc_create_single_list();\n
    cgc_insert_single_list_node(v0, NULL);\n
    return v0;\n
}\n
", "4213458:sub_404ad2": null, "4213472:cgc_push_to_turn_list": "typedef struct struct_0 {\n
    char padding_0[4088];\n
    unsigned int field_ff8;\n
} struct_0;\n
\n
long long cgc_push_to_turn_list(unsigned long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long long v0[2];  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long long v2[2];  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v4;  // rax\n
\n
    v1 = a0;\n
    v0[0] = 0;\n
    if (*(a1)->field_ff8 > 475)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v0[0] = &*(a1)->padding_0[136 * *(a1)->field_ff8];\n
    cgc_bzero(v0, 136);\n
    v0[0] = a2;\n
    v0[1] = a3;\n
    v4 = *(a1);\n
    v4->field_ff8 = v4->field_ff8 + 1;\n
    v2 = v0;\n
    return v2;\n
}\n
", "4213654:sub_404b96": null, "4213664:cgc_get_route": "typedef struct struct_2 {\n
    char padding_0[64];\n
    struct struct_3 *field_40;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
    unsigned long long field_28;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_get_route(unsigned int a0, struct struct_4 **a1, unsigned long a2, unsigned int a3)\n
{\n
    unsigned long v0;  // [bp-0x60]\n
    struct_1 *v1;  // [bp-0x58], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x50], Other Possible Types: unsigned int\n
    struct_2 *v3;  // [bp-0x48]\n
    struct struct_2 **v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x34]\n
    struct struct_4 **v6;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v5 = 0;\n
    *(a1)->field_ff8 = 0;\n
    cgc_bzero(*(a1), 4080);\n
    v4 = cgc_push_to_turn_list(a0, a1, a3, 0);\n
    v3 = 0;\n
    v2 = 0;\n
    for (v1 = 0; *(v4); v4 = v4 + 136)\n
    {\n
        v3 = *(v4);\n
        if (v3->field_40->field_0)\n
            v1 = v3->field_40->field_0 + 24;\n
        else\n
            v1 = 0;\n
        while (v1)\n
        {\n
            *(&v2) = *((v1 + 40));\n
            if (!cgc_is_in_turn_list(a1, *(&v2)))\n
            {\n
                v0 = cgc_push_to_turn_list(a0, a1, *(&v2), v4);\n
                if (!v0)\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                else if (*(&v2) == a2)\n
                {\n
                    v6 = a1;\n
                    return v6;\n
                }\n
            }\n
            if (!*((*((v1 + 32)) + 8)))\n
                v1 = 0;\n
            else\n
                v1 = *((*((v1 + 32)) + 8)) + 24;\n
        }\n
        v5 += 1;\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4214088:sub_404d48": null, "4214096:main": "int main(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v4 = 0;\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = cgc_init_turnList();\n
    v0 = cgc_init_map(\"Newville\");\n
    cgc_puts(\"This is Mapper.\");\n
    cgc_prompt_loop(v0, v1);\n
    return 1;\n
}\n
", "4214181:sub_404da5": null, "4214192:cgc_name_map": "long long cgc_name_map(unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    char v1;  // [bp-0x38]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_printf(\"Name:\\n
\", a1, a2, a3, a4);\n
    v0 = cgc_receive_until(&v1, 10, 31);\n
    if (v0 <= 0)\n
    {\n
        v3 = cgc_puts(\"Name not set.\");\n
        return v3;\n
    }\n
    (&v1)[v0] = 0;\n
    cgc_printf(\"Map @s is now named @s.\\n
\", a0, &v1, a3, a4);\n
    v3 = cgc_strcpy(a0, &v1);\n
    return v3;\n
}\n
", "4214317:sub_404e2d": null, "4214320:cgc_get_positive_float": "long long cgc_get_positive_float()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char v1;  // [bp-0x23]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v2 = 0;\n
    v0 = cgc_receive_until(&v1, 10, 10);\n
    (&v1)[v0] = 0;\n
    v5 = cgc_atof(&v1);\n
    v2 = 0;\n
    if ((((CmpF(v2, 0) & 69) | ((CmpF(v2, 0) & 69) >> 6)) & 1) == 1)\n
    {\n
        v3 = 0;\n
        return v5;\n
    }\n
    v3 = v2;\n
    return v5;\n
}\n
", "4214433:sub_404ea1": null, "4214448:cgc_get_positive_int": "long long cgc_get_positive_int()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = 0;\n
    v0 = cgc_receive_until(&v2, 10, 8);\n
    (&v2)[v0] = 0;\n
    v1 = cgc_atoi(&v2);\n
    if (v1 <= 0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214543:sub_404f0f": null, "4214544:cgc_get_char32": "long long cgc_get_char32(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    char v1;  // [bp-0x38]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_memset(&v1, 0, 32);\n
    v0 = cgc_receive_until(&v1, 10, 31);\n
    (&v1)[v0] = 0;\n
    cgc_memset(a0, 0, 32);\n
    v3 = cgc_strlen(&v1);\n
    if (v3 > 0)\n
    {\n
        v3 = cgc_strcpy(a0, &v1);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4214657:sub_404f81": null, "4214672:cgc_print_map_info": "typedef struct struct_3 {\n
    char padding_0[32];\n
    struct struct_2 *field_20;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_print_map_info(struct_3 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_puts(\"Map Info\");\n
    cgc_printf(\"Map Name: @s Number of Roads: @d\\n
\", a0, a0->field_20->field_8, a3, a4);\n
    cgc_puts(\"Road List:\");\n
    if (!a0->field_20->field_0)\n
    {\n
        v2 = cgc_puts(\"End of road list\");\n
        return v2;\n
    }\n
    v0 = a0->field_20->field_0 + 24;\n
    while (v0)\n
    {\n
        cgc_printf(\"@s is @f units long\\n
\", v0 + 1, a2, a3, a4);\n
        cgc_puts(\"IntersectionList:\");\n
        cgc_print_intersections(v0, a1, a2, a3, a4);\n
        cgc_puts(\"AddressList:\");\n
        cgc_print_addresses(v0, a1, a2, a3, a4);\n
        if (!v0->field_10->field_8)\n
            v0 = 0;\n
        else\n
            v0 = v0->field_10->field_8 + 24;\n
    }\n
    v2 = cgc_puts(\"End of road list\");\n
    return v2;\n
}\n
", "4214950:sub_4050a6": null, "4214960:cgc_add_new_road": "typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_add_new_road(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    void* v1;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x40]\n
    char v3;  // [bp-0x38]\n
    unsigned long long v5;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    v1 = 0;\n
    if (a0->field_20->field_8 >= 50)\n
    {\n
        v5 = cgc_puts(\"No more roads allowed.(Limit)\");\n
        return v5;\n
    }\n
    cgc_printf(\"Road Name:\\n
\", a1, a2, a3, a4);\n
    v0 = cgc_receive_until(&v3, 10, 31);\n
    (&v3)[v0] = 0;\n
    cgc_printf(\"Road Length:\\n
\", 10, 31, a3, a4);\n
    cgc_get_positive_float();\n
    v2 = 0;\n
    if ((((CmpF(v2, 0) & 69) | ((CmpF(v2, 0) & 69) >> 6)) & 1) != 1 && cgc_strlen(&v3))\n
    {\n
        v5 = cgc_add_road(a0, &v3);\n
        v1 = v5;\n
        goto LABEL_405180;\n
    }\n
    v5 = cgc_puts(\"Invalid Road.\");\n
LABEL_405180:\n
    return v5;\n
}\n
", "4215179:sub_40518b": null, "4215184:cgc_select_road": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    char padding_0[32];\n
    struct struct_3 *field_20;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_3;\n
\n
long long cgc_select_road(struct_4 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_2 *v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    char v7;  // [bp-0x23]\n
    struct_1 *v8;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_1 *v9;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v8 = 0;\n
    v6 = 1;\n
    if (a0->field_20->field_8 == 1)\n
    {\n
        cgc_puts(\"Only road selected.\");\n
        v8 = a0->field_20->field_0 + 24;\n
        v9 = v8;\n
        return v9;\n
    }\n
    else if (a0->field_20->field_8)\n
    {\n
        while (v6)\n
        {\n
            v1 = &v7;\n
            v0 = 0;\n
            cgc_memset(&v7, 0, 3);\n
            cgc_puts(\"Select Road by (N)umber, or (L)ist or (0)Exit.\");\n
            cgc_printf(\"choice:\\n
\", 0, 3, a3, a4);\n
            v5 = cgc_receive_until(v1, 10, 2);\n
            v2 = v7;\n
            if (v2 == 48)\n
            {\n
                v6 = 0;\n
                v8 = 0;\n
            }\n
            else if (v2 == 76)\n
            {\n
                cgc_print_roads(a0, 10, 2, a3, a4);\n
            }\n
            else if (v2 == 78)\n
            {\n
                cgc_printf(\"1-@d:\\n
\", a0->field_20->field_8, 2, a3, a4);\n
                v4 = cgc_get_positive_int();\n
                if (!v4)\n
                {\n
                    cgc_puts(\"Invalid number. (0)\");\n
                }\n
                else if (a0->field_20->field_8 < v4)\n
                {\n
                    cgc_puts(\"Invalid number. (out of range)\");\n
                }\n
                else\n
                {\n
                    v8 = a0->field_20->field_0 + 24;\n
                    for (v3 = 1; v3 < v4; v3 += 1)\n
                    {\n
                        v8 = *((*((v8 + 16)) + 8)) + 24;\n
                    }\n
                    v6 = 0;\n
                }\n
            }\n
        }\n
        v9 = v8;\n
        return v9;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
}\n
", "4215689:sub_405389": null, "4215696:cgc_select_address": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[56];\n
    struct struct_2 *field_38;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char field_0;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
long long cgc_select_address(struct_3 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_4 *v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    char v6;  // [bp-0x23]\n
    struct_1 *v7;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v7 = 0;\n
    v5 = 1;\n
    if (a0->field_38->field_8 == 1)\n
    {\n
        cgc_puts(\"Only address on road was selected\");\n
        v7 = a0->field_38->field_0 + 24;\n
        v8 = v7;\n
        return v8;\n
    }\n
    else if (a0->field_38->field_8)\n
    {\n
        while (true)\n
        {\n
            if (!v5)\n
            {\n
                v8 = v7;\n
                return v8;\n
            }\n
            v0 = &v6;\n
            cgc_memset(&v6, 0, 3);\n
            cgc_puts(\"Select address (N)umber (L)ist or (0)Exit: \");\n
            v4 = cgc_receive_until(v0, 10, 2);\n
            v1 = v6;\n
            if (v1 == 48)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            if (v1 == 76)\n
            {\n
                cgc_print_addresses(a0, 10, 2, a3, a4);\n
            }\n
            else if (v1 == 78)\n
            {\n
                break;\n
            }\n
        }\n
        cgc_printf(\"1-@d:\\n
\", a0->field_38->field_8, 2, a3, a4);\n
        v3 = cgc_get_positive_int();\n
        if (!v3)\n
        {\n
            cgc_puts(\"Invalid number. (0)\");\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (a0->field_38->field_8 < v3)\n
        {\n
            cgc_puts(\"Invalid number. (out of range)\");\n
            v8 = 0;\n
            return v8;\n
        }\n
        else\n
        {\n
            v7 = a0->field_38->field_0 + 24;\n
            for (v2 = 1; v2 < v3; v2 += 1)\n
            {\n
                v7 = v7->field_8->field_8 + 24;\n
            }\n
            v8 = v7;\n
            return v8;\n
        }\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
}\n
", "4216193:sub_405581": null, "4216208:cgc_select_intersection": "typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[64];\n
    struct struct_2 *field_40;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char field_0;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
long long cgc_select_intersection(struct_3 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_4 *v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    struct_1 *v6;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    char v8;  // [bp-0x1b]\n
    struct_1 *v9;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v7 = 1;\n
    v6 = 0;\n
    if (!a0->field_40->field_8)\n
    {\n
        cgc_puts(\"This road has no intersections to choose.\");\n
        v9 = 0;\n
        return v9;\n
    }\n
    while (true)\n
    {\n
        if (!v7)\n
        {\n
            v9 = v6;\n
            return v9;\n
        }\n
        v1 = &v8;\n
        v0 = 0;\n
        cgc_memset(&v8, 0, 3);\n
        cgc_puts(\"Select intersection by (N)umber, (L)ist, or set to N(O)TDEFINED.\");\n
        cgc_printf(\"choice:\\n
\", 0, 3, a3, a4);\n
        v5 = cgc_receive_until(v1, 10, 2);\n
        v2 = v8;\n
        if (v2 == 76)\n
        {\n
            cgc_print_intersections(a0, 10, 2, a3, a4);\n
        }\n
        else if (v2 == 78)\n
        {\n
            cgc_printf(\"1-@d:\\n
\", a0->field_40->field_8, 2, a3, a4);\n
            v4 = cgc_get_positive_int();\n
            if (!v4)\n
            {\n
                cgc_puts(\"Invalid number.\");\n
                v9 = 0;\n
                return v9;\n
            }\n
            if (a0->field_40->field_8 < v4)\n
            {\n
                cgc_puts(\"Invalid number.\");\n
                v9 = 0;\n
                return v9;\n
            }\n
            v6 = a0->field_40->field_0 + 24;\n
            for (v3 = 1; v3 < v4; v3 += 1)\n
            {\n
                v6 = v6->field_20->field_8 + 24;\n
            }\n
            v7 = 0;\n
        }\n
        else if (v2 == 79)\n
        {\n
            v7 = 0;\n
            v6 = 0;\n
        }\n
    }\n
}\n
", "4216684:sub_40576c": null, "4216688:cgc_add_new_address": "typedef struct struct_1 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_add_new_address(void* a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    void* v0;  // [bp-0x70]\n
    void* v1;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x60], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x58], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x50]\n
    char v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    int v9;  // xmm0\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = 0;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v9 = 0;\n
    v0 = 0;\n
    cgc_printf(\"Street Number: \\n
\", a1, a2, a3, a4);\n
    v6 = cgc_get_positive_int();\n
    if (!v6)\n
    {\n
        v10 = cgc_puts(\"Invalid number.\");\n
        return v10;\n
    }\n
    cgc_printf(\"Resident: \\n
\", a1, a2, a3, a4);\n
    cgc_get_char32(&v5);\n
    if (!cgc_strlen(&v5))\n
    {\n
        v10 = cgc_puts(\"Invalid resident.\");\n
        return v10;\n
    }\n
    v4 = cgc_select_road(a0, a1, a2, a3, a4);\n
    if (!v4)\n
    {\n
        v10 = cgc_puts(\"Invalid road.\");\n
        return v10;\n
    }\n
    else if (v4->field_38->field_8 < 50)\n
    {\n
        *(&v3) = cgc_select_intersection(v4, a1, a2, a3, a4);\n
        if (*(&v3))\n
        {\n
            cgc_puts(\"Distance to intersection: \");\n
            cgc_get_positive_float();\n
            v0 = 0;\n
            *(&v9) = v0;\n
            if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v10 = cgc_puts(\"Invalid distance\");\n
                return v10;\n
            }\n
        }\n
        *(&v1) = cgc_select_intersection(v4, a1, a2, a3, a4);\n
        if (*(&v1))\n
        {\n
            cgc_puts(\"Distance to intersection: \");\n
            cgc_get_positive_float();\n
            v2 = v9;\n
            *(&v9) = v2;\n
            if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v10 = cgc_puts(\"Invalid distance\");\n
                return v10;\n
            }\n
        }\n
        v10 = cgc_add_address(v6, &v5, v4, *(&v3), *(&v1));\n
        v7 = v10;\n
        if (v7)\n
            return v10;\n
        v10 = cgc_puts(\"Address not Added\");\n
    }\n
    else\n
    {\n
        v10 = cgc_puts(\"Invalid road.(Limit)\");\n
        return v10;\n
    }\n
}\n
", "4217195:sub_40596b": null, "4217200:cgc_add_new_intersection": "typedef struct struct_3 {\n
    char padding_0[64];\n
    struct struct_2 *field_40;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_add_new_intersection(void* a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x60]\n
    struct_1 *v1;  // [bp-0x58]\n
    void* v2;  // [bp-0x50]\n
    struct_1 *v3;  // [bp-0x48]\n
    void* v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v6;  // [bp-0x30]\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_3 *v8;  // [bp-0x20]\n
    struct_3 *v9;  // [bp-0x18]\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v12;  // xmm0lq\n
\n
    v9 = cgc_select_road(a0, a1, a2, a3, a4);\n
    v8 = cgc_select_road(a0, a1, a2, a3, a4);\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (v9 && v8 && v9 != v8)\n
    {\n
        if (v9->field_40->field_8 < 50 && v8->field_40->field_8 < 50)\n
        {\n
            cgc_puts(\"Prev intersection on road 1.\");\n
            v3 = cgc_select_intersection(v9, a1, a2, a3, a4);\n
            if (v3)\n
            {\n
                cgc_puts(\"Distance to prev\");\n
                cgc_get_positive_float();\n
                v7 = 0;\n
                if (v3->field_20->field_8)\n
                {\n
                    cgc_puts(\"Distance to next\");\n
                    cgc_get_positive_float();\n
                    v6 = 0;\n
                }\n
            }\n
            else if (v9->field_40->field_0)\n
            {\n
                cgc_puts(\"Distance to next\");\n
                cgc_get_positive_float();\n
                v6 = 0;\n
            }\n
            v12 = v7;\n
            v2 = cgc_add_intersection(v9, v8, v3);\n
            if (!v2)\n
            {\n
                v11 = cgc_puts(\"Intersection not added.\");\n
                return v11;\n
            }\n
            cgc_puts(\"Prev intersection on road 2.\");\n
            v1 = cgc_select_intersection(v8, a1, a2, a3, a4);\n
            if (v1)\n
            {\n
                cgc_puts(\"Distance to prev\");\n
                cgc_get_positive_float();\n
                v5 = v12;\n
                if (v1->field_20->field_8)\n
                {\n
                    cgc_puts(\"Distance to next\");\n
                    cgc_get_positive_float();\n
                    v4 = v12;\n
                }\n
            }\n
            else if (v8->field_40->field_0)\n
            {\n
                cgc_puts(\"Distance to next\");\n
                cgc_get_positive_float();\n
                v4 = v12;\n
            }\n
            v11 = cgc_add_intersection(v8, v9, v1);\n
            v0 = v11;\n
            if (!v0)\n
            {\n
                cgc_puts(\"Intersection not added.\");\n
                v11 = cgc_delete_intersection(v9, v2);\n
                return v11;\n
            }\n
            return v11;\n
        }\n
        v11 = cgc_puts(\"Invalid intersection. (Limit)\");\n
        return v11;\n
    }\n
    v11 = cgc_puts(\"Invalid intersection.\");\n
    return v11;\n
}\n
", "4217816:sub_405bd8": null, "4217824:cgc_show_route": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_show_route(void* a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x50], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x48]\n
    struct struct_1 **v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x30]\n
    unsigned long v5;  // [bp-0x28]\n
    unsigned long v6;  // [bp-0x20]\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rcx\n
\n
    cgc_puts(\"from address \");\n
    v8 = cgc_select_road(a0, a1, a2, a3, a4);\n
    v6 = v8;\n
    if (!v6)\n
        return v8;\n
    v8 = cgc_select_address(v6, a1, a2, a3, a4);\n
    v5 = v8;\n
    if (!v5)\n
        return v8;\n
    cgc_puts(\"to address \");\n
    v8 = cgc_select_road(a0, a1, a2, a3, a4);\n
    v4 = v8;\n
    if (!v4)\n
        return v8;\n
    v8 = cgc_select_address(v4, a1, a2, a3, a4);\n
    v3 = v8;\n
    if (!v3)\n
    {\n
        return v8;\n
    }\n
    else if (v6 != v4)\n
    {\n
        v2 = cgc_get_route(a0, a1, v6, v4);\n
        if (!v2)\n
        {\n
            cgc_puts(\"No valid route.\\n
Can't get there from here\");\n
            v8 = cgc_puts(\"#############################\");\n
            return v8;\n
        }\n
        else if (*(v2)->field_ff8 < 1)\n
        {\n
            v8 = cgc_puts(\"**bad route\");\n
            return v8;\n
        }\n
        else\n
        {\n
            v9 = (*(v2)->field_ff8 - 1) * 136;\n
            v1 = &*(v2)->padding_0[v9];\n
            v0 = v1->field_8;\n
            cgc_printf(\"Starting on @s.\\n
\", v1->field_0 + 24, a2, v9, a4);\n
            for (; v0; v0 = *((v0 + 8)))\n
            {\n
                cgc_printf(\"head towards @s then turn on to @s\\n
\", *(v0) + 24, *(v0) + 24, (*(v2)->field_ff8 - 1) * 136, a4);\n
                v1 = v0;\n
            }\n
            cgc_puts(\"You have arrived at your destination.\");\n
            v8 = cgc_puts(\"#############################\");\n
            return v8;\n
        }\n
    }\n
    else\n
    {\n
        v8 = cgc_puts(\"Address is on the same road.\");\n
        return v8;\n
    }\n
}\n
", "4218293:sub_405db5": null, "4218304:cgc_prompt_loop": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int g_406260;\n
\n
long long cgc_prompt_loop(void* a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    struct_0 *v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    char v5;  // [bp-0x1b]\n
    unsigned long v7;  // rax, Other Possible Types: unsigned long long\n
\n
    v4 = 1;\n
    while (v4)\n
    {\n
        v1 = &v5;\n
        v0 = 0;\n
        cgc_memset(&v5, 0, 3);\n
        cgc_printf(\"choice:\\n
\", 0, 3, &g_406260, a4);\n
        v3 = cgc_receive_until(v1, 10, 2);\n
        v2 = v5 - 48;\n
        switch (v2)\n
        {\n
        case 0:\n
            v4 = 0;\n
            v7 = cgc_puts(\"Exiting.\");\n
            break;\n
        case 17:\n
            v7 = cgc_name_map(a0, 10, 2, 4219488, a4);\n
            break;\n
        case 18:\n
            v7 = cgc_add_new_road(a0, 10, 2, 4219488, a4);\n
            break;\n
        case 19:\n
            v7 = cgc_add_new_address(a0, 10, 2, 4219488, a4);\n
            break;\n
        case 20:\n
            v7 = cgc_add_new_intersection(a0, 10, 2, &g_406260, a4);\n
            break;\n
        case 21:\n
            v7 = cgc_print_map_info(a0, 10, 2, 4219488, a4);\n
            break;\n
        case 25:\n
            v7 = cgc_show_route(a0, a1, 2, &g_406260, a4);\n
            break;\n
        default:\n
            v7 = cgc_puts(\"Invalid choice.\");\n
        }\n
    }\n
    return v7;\n
}\n
", "4218576:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_deallocate": null, "5242936:cgc_log10": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}