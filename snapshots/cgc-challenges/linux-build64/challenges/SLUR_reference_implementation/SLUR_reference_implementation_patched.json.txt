{"4202496:_init": "extern struct_0 *g_406230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_406230;\n
    if (g_406230)\n
        v1 = g_406230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_406250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_406250;\n
    goto *(4219480);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4219456);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_406228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_406238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_406240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_406240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v2;  // rbx\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v2 = a1 * a0;\n
        v3 = cgc_malloc(v2);\n
        if (v3)\n
            return cgc_memset(v3, 0, v2);\n
        return 0;\n
    }\n
}\n
", "4202936:sub_4021b8": null, "4202944:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4202991:sub_4021ef": null, "4202992:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203004:sub_4021fc": null, "4203008:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203020:sub_40220c": null, "4203024:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203036:sub_40221c": null, "4203040:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203052:sub_40222c": null, "4203056:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203074:sub_402242": null, "4203088:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203106:sub_402262": null, "4203120:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4214800];\n
    char field_405010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203199:sub_4022bf": null, "4203200:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203221:sub_4022d5": null, "4203232:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4214928];\n
    char field_405090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203247:sub_4022ef": null, "4203248:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203279:sub_40230f": null, "4203280:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203295:sub_40231f": null, "4203296:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    if (!a0)\n
        return v2;\n
    v1 = a0 - 24;\n
    if (v1->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v1->field_0 >= 0x40000)\n
    {\n
        return cgc_deallocate(v1);\n
    }\n
    else\n
    {\n
        cgc_insert_into_flist(v1);\n
        return cgc_coalesce(v1);\n
    }\n
}\n
", "4203356:sub_40235c": null, "4203360:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_4064a8;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    struct_2 *v2;  // rax\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    struct_2 *v7;  // rax\n
    unsigned long v9;  // r14, Other Possible Types: unsigned long long\n
    struct_1 *v10;  // r14\n
    struct struct_1 **v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // rbx\n
    unsigned long long v13;  // rsi\n
    unsigned long long v14;  // rdx\n
    struct_2 *v16;  // rdi\n
    unsigned long long v17;  // rax\n
    unsigned long long v18;  // rdi\n
    struct_0 *v19;  // rax\n
    unsigned long long v20;  // rbx\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 0;\n
    if (a0 - 262120 <= -262145)\n
    {\n
        if (cgc_allocate(a0, v4, v5))\n
            return 0;\n
        v7 = v0;\n
        v7->field_0 = a0 + 24;\n
        v7->field_8 = 0;\n
        v7->field_10 = 0;\n
        v7->field_20 = 0;\n
        return v7 + 24;\n
    }\n
    v9 = a0 + 7 & -8;\n
    if (!(a0 & 7))\n
        v9 = a0;\n
    if (v9 <= 2147483647)\n
    {\n
        v10 = v9 + 24;\n
        v11 = cgc_get_size_class(v10);\n
        if (v11 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[8 * v11]);\n
                if (v12)\n
                {\n
                    while (*(v12) < v10)\n
                    {\n
                        v12 = *((v12 + 16));\n
                        if (!v12)\n
                            goto LABEL_4023f6;\n
                    }\n
                }\n
LABEL_4023f6:\n
                v11 += 1;\n
            } while (v11 != 32);\n
            goto LABEL_402422;\n
        }\n
        v12 = 0;\n
LABEL_402422:\n
        if (v12)\n
        {\n
LABEL_402427:\n
            cgc_remove_from_flist(v12);\n
            v17 = *(v12) - v10;\n
            if (v17 >= 49)\n
            {\n
                v18 = v12 + v10;\n
                *((v12 + &v10->field_0)) = v17;\n
                *(&v10->padding_8[v12]) = 1;\n
                *((16 + v12 + &v10->field_0)) = 0;\n
                *(v12) = v10;\n
                *((40 + v12 + &v10->field_0)) = v12;\n
                *((32 + v12 + &v10->field_0)) = *((v12 + 32));\n
                v19 = *((v12 + 32));\n
                if (v19)\n
                    v19->field_28 = v18;\n
                *((v12 + 32)) = v18;\n
                cgc_insert_into_flist(v18);\n
            }\n
            v20 = v12 + 24;\n
            return v20;\n
        }\n
        else if (!cgc_allocate(v10, v13, v14))\n
        {\n
            v16 = v0;\n
            if (v16)\n
            {\n
                v16->field_0 = 0x40000;\n
                v16->field_8 = 1;\n
                v16->field_10 = 0;\n
                v16->field_20 = 0;\n
                cgc_insert_into_flist(v16);\n
                v12 = g_4064a8;\n
                goto LABEL_402427;\n
            }\n
        }\n
    }\n
}\n
", "4203743:sub_4024df": null, "4203744:cgc_get_size_class": "extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long long *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*(v1) >= a0)\n
            return v2;\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
            return 32;\n
    }\n
}\n
", "4203785:sub_402509": null, "4203792:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    struct struct_0 **v2;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v3;  // rdx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    while (*(v1) < a0->field_0)\n
    {\n
        v2 += 1;\n
        v1 += 8;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    a0->field_8 = 1;\n
    v3 = *(&(&cgc_free_lists)[8 * v2]);\n
    if (v3)\n
    {\n
        a0->field_10 = v3;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        a0->field_18 = 0;\n
        return v2;\n
    }\n
    *(&(&cgc_free_lists)[8 * v2]) = a0;\n
    return v2;\n
}\n
", "4203887:sub_40256f": null, "4203888:cgc_remove_from_flist": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_remove_from_flist(struct_0 *a0)\n
{\n
    unsigned long long *v1;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v2[4];  // rax, Other Possible Types: unsigned long\n
    struct_2 *v3;  // rdx\n
    struct_3 *v4;  // rcx\n
\n
    v1 = &size_class_limits;\n
    v2 = 0;\n
    do\n
    {\n
        if (*(v1) >= a0->field_0)\n
        {\n
            v3 = a0[1].field_0;\n
            if (v3)\n
                v3->field_10 = a0->field_10;\n
            v4 = a0->field_10;\n
            if (v4)\n
                v4->field_18 = v3;\n
            if (*(&(&cgc_free_lists)[8 * v2]) == a0)\n
            {\n
                *(&(&cgc_free_lists)[8 * v2]) = v4;\n
                goto LABEL_4025c9;\n
            }\n
        }\n
        v2 += 1;\n
        v1 += 8;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4025c9:\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v2;\n
}\n
", "4203992:sub_4025d8": null, "4204000:cgc_coalesce": "extern char cgc_free_lists;\n
extern char size_class_limits;\n
\n
long long cgc_coalesce(unsigned long a0)\n
{\n
    unsigned long v1;  // rcx\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rsi\n
    unsigned long v4;  // rax\n
    unsigned long v5;  // rsi\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rdx\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rsi\n
    unsigned long v11;  // rsi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long v14;  // rax\n
    unsigned long v15;  // rdx\n
    unsigned long v16;  // rdx\n
    unsigned long v17;  // rsi\n
    unsigned long v18;  // rax\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rdx\n
    unsigned long v23;  // rsi\n
    unsigned long v24;  // rax\n
    unsigned long v25;  // rcx\n
    unsigned long v26;  // rsi\n
    unsigned long v27;  // rdx\n
    unsigned long v28;  // rcx\n
    unsigned long v29;  // rax\n
    unsigned long v30;  // rdx\n
    unsigned long v31;  // rsi\n
    unsigned long v32;  // rsi\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rax\n
    unsigned long v35;  // rdx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rax\n
    unsigned long v38;  // rsi\n
    unsigned long v39;  // rsi\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v42;  // rdx\n
    unsigned long v43;  // rdx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    unsigned long v46;  // rax\n
    unsigned long v47;  // rsi\n
    unsigned long v48;  // rsi\n
    unsigned long v49;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rax\n
    unsigned long v54;  // rcx\n
    unsigned long v55;  // rcx\n
\n
    v1 = *((a0 + 40));\n
    if (!v1)\n
        return v2;\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && *((v2 + 8)))\n
        {\n
            v3 = &size_class_limits;\n
            v4 = 0;\n
            do\n
            {\n
                if (*(v3) >= *(v1))\n
                {\n
LABEL_402638:\n
                    v5 = *((v1 + 24));\n
                    if (v5)\n
                        *((v5 + 16)) = *((v1 + 16));\n
                    v8 = *((v1 + 16));\n
                    if (v8)\n
                        *((v8 + 24)) = v5;\n
                    if ((&cgc_free_lists)[v4] == v1)\n
                        (&cgc_free_lists)[v4] = v8;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v13 = *((a0 + 32));\n
                    v14 = &size_class_limits;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        if (*(v14) >= *(v13))\n
                        {\n
LABEL_4026a8:\n
                            v18 = *((v13 + 24));\n
                            if (v18)\n
                                *((v18 + 16)) = *((v13 + 16));\n
                            v23 = *((v13 + 16));\n
                            if (v23)\n
                                *((v23 + 24)) = v18;\n
                            if ((&cgc_free_lists)[v15] == v13)\n
                                (&cgc_free_lists)[v15] = v23;\n
                            *((v13 + 16)) = 0;\n
                            *((v13 + 8)) = 0;\n
                            v28 = *(a0);\n
                            v29 = &size_class_limits;\n
                            v30 = 0;\n
                            do\n
                            {\n
                                if (*(v29) >= v28)\n
                                {\n
LABEL_402708:\n
                                    v33 = *((a0 + 24));\n
                                    if (v33)\n
                                        *((v33 + 16)) = *((a0 + 16));\n
                                    v39 = *((a0 + 16));\n
                                    if (v39)\n
                                        *((v39 + 24)) = v33;\n
                                    if ((&cgc_free_lists)[v30] == a0)\n
                                        (&cgc_free_lists)[v30] = v39;\n
                                    *((a0 + 16)) = 0;\n
                                    *((a0 + 8)) = 0;\n
                                    v43 = *((a0 + 40));\n
                                    v44 = v28 + *(v43);\n
                                    *(v43) = v44;\n
                                    v45 = v44 + *(*((a0 + 32)));\n
                                    *(v43) = v45;\n
                                    v46 = &size_class_limits;\n
                                    v47 = 0;\n
                                    do\n
                                    {\n
                                        if (*(v46) >= v45)\n
                                        {\n
LABEL_402778:\n
                                            *((v43 + 8)) = 1;\n
                                            v50 = (&cgc_free_lists)[v47];\n
                                            if (!v50)\n
                                            {\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                            }\n
                                            else\n
                                            {\n
                                                *((v43 + 16)) = v50;\n
                                                *(((&cgc_free_lists)[v47] + 24)) = v43;\n
                                                (&cgc_free_lists)[v47] = v43;\n
                                                *((v43 + 24)) = 0;\n
                                            }\n
                                            v52 = *((a0 + 32));\n
                                            v53 = *((v52 + 40));\n
                                            if (v53)\n
                                                *((v53 + 32)) = *((v52 + 32));\n
                                            v55 = *((v52 + 32));\n
                                            if (v55)\n
                                            {\n
                                                *((v55 + 40)) = v53;\n
                                                goto LABEL_402a99;\n
                                            }\n
                                        }\n
                                        v47 += 1;\n
                                        v46 += 8;\n
                                    } while (v47 != 32);\n
                                    v47 = 32;\n
                                    goto LABEL_402778;\n
                                }\n
                                v30 += 1;\n
                                v29 += 8;\n
                            } while (v30 != 32);\n
                            v30 = 32;\n
                            goto LABEL_402708;\n
                        }\n
                        v15 += 1;\n
                        v14 += 8;\n
                    } while (v15 != 32);\n
                    v15 = 32;\n
                    goto LABEL_4026a8;\n
                }\n
                v4 += 1;\n
                v3 += 8;\n
            } while (v4 != 32);\n
            v4 = 32;\n
            goto LABEL_402638;\n
        }\n
    }\n
    if (!v1)\n
        return *((a0 + 32));\n
    if (*((v1 + 8)))\n
    {\n
        v2 = *((a0 + 32));\n
        if (v2 && !*((v2 + 8)))\n
        {\n
            v6 = &size_class_limits;\n
            v7 = 0;\n
            do\n
            {\n
                if (*(v6) >= *(v1))\n
                {\n
                    v10 = *((v1 + 24));\n
                    if (v10)\n
                        *((v10 + 16)) = *((v1 + 16));\n
                    v16 = *((v1 + 16));\n
                    if (v16)\n
                        *((v16 + 24)) = v10;\n
                    if ((&cgc_free_lists)[v7] == v1)\n
                        (&cgc_free_lists)[v7] = v16;\n
                    *((v1 + 16)) = 0;\n
                    *((v1 + 8)) = 0;\n
                    v20 = *(a0);\n
                    v21 = &size_class_limits;\n
                    v22 = 0;\n
                    do\n
                    {\n
                        if (*(v21) >= v20)\n
                        {\n
LABEL_4029f8:\n
                            v24 = *((a0 + 24));\n
                            if (v24)\n
                                *((v24 + 16)) = *((a0 + 16));\n
                            v31 = *((a0 + 16));\n
                            if (v31)\n
                                *((v31 + 24)) = v24;\n
                            if ((&cgc_free_lists)[v22] == a0)\n
                                (&cgc_free_lists)[v22] = v31;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v35 = *((a0 + 40));\n
                            v36 = v20 + *(v35);\n
                            *(v35) = v36;\n
                            v37 = &size_class_limits;\n
                            v38 = 0;\n
                            do\n
                            {\n
                                if (*(v37) >= v36)\n
                                {\n
LABEL_402a68:\n
                                    *((v35 + 8)) = 1;\n
                                    v40 = (&cgc_free_lists)[v38];\n
                                    if (!v40)\n
                                    {\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        goto LABEL_402a99;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((v35 + 16)) = v40;\n
                                        *(((&cgc_free_lists)[v38] + 24)) = v35;\n
                                        (&cgc_free_lists)[v38] = v35;\n
                                        *((v35 + 24)) = 0;\n
                                        goto LABEL_402a99;\n
                                    }\n
                                }\n
                                v38 += 1;\n
                                v37 += 8;\n
                            } while (v38 != 32);\n
                            v38 = 32;\n
                            goto LABEL_402a68;\n
                        }\n
                        v22 += 1;\n
                        v21 += 8;\n
                    } while (v22 != 32);\n
                    v22 = 32;\n
                    goto LABEL_4029f8;\n
                }\n
                v7 += 1;\n
                v6 += 8;\n
            } while (v7 != 32);\n
            v7 = 32;\n
LABEL_402a99:\n
            v2 = *((a0 + 40));\n
            if (v2)\n
                *((v2 + 32)) = *((a0 + 32));\n
            v54 = *((a0 + 32));\n
            if (v54)\n
            {\n
LABEL_402ab7:\n
                *((v54 + 40)) = v2;\n
                return v2;\n
            }\n
            return *((a0 + 40));\n
        }\n
    }\n
    if (!v1)\n
    {\n
        return v2;\n
    }\n
    else if (*((v1 + 8)))\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v9 = *((a0 + 32));\n
        if (!v9)\n
        {\n
            return v2;\n
        }\n
        else if (!*((v9 + 8)))\n
        {\n
            return v2;\n
        }\n
        else\n
        {\n
            v11 = &size_class_limits;\n
            v12 = 0;\n
            do\n
            {\n
                if (*(v11) >= *(v9))\n
                {\n
                    v17 = *((v9 + 24));\n
                    if (v17)\n
                        *((v17 + 16)) = *((v9 + 16));\n
                    v19 = *((v9 + 16));\n
                    if (v19)\n
                        *((v19 + 24)) = v17;\n
                    if ((&cgc_free_lists)[v12] == v9)\n
                        (&cgc_free_lists)[v12] = v19;\n
                    *((v9 + 16)) = 0;\n
                    *((v9 + 8)) = 0;\n
                    v25 = *(a0);\n
                    v26 = &size_class_limits;\n
                    v27 = 0;\n
                    do\n
                    {\n
                        if (*(v26) >= v25)\n
                        {\n
LABEL_402888:\n
                            v32 = *((a0 + 24));\n
                            if (v32)\n
                                *((v32 + 16)) = *((a0 + 16));\n
                            v34 = *((a0 + 16));\n
                            if (v34)\n
                                *((v34 + 24)) = v32;\n
                            if ((&cgc_free_lists)[v27] == a0)\n
                                (&cgc_free_lists)[v27] = v34;\n
                            *((a0 + 16)) = 0;\n
                            *((a0 + 8)) = 0;\n
                            v41 = v25 + *(*((a0 + 32)));\n
                            *(a0) = v41;\n
                            v48 = &size_class_limits;\n
                            v42 = 0;\n
                            do\n
                            {\n
                                if (*(v48) >= v41)\n
                                {\n
LABEL_4028f8:\n
                                    *((a0 + 8)) = 1;\n
                                    v49 = (&cgc_free_lists)[v42];\n
                                    if (!v49)\n
                                    {\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((a0 + 16)) = v49;\n
                                        *(((&cgc_free_lists)[v42] + 24)) = a0;\n
                                        (&cgc_free_lists)[v42] = a0;\n
                                        *((a0 + 24)) = 0;\n
                                    }\n
                                    v51 = *((a0 + 32));\n
                                    v2 = *((v51 + 40));\n
                                    if (v2)\n
                                    {\n
                                        *((v2 + 32)) = *((v51 + 32));\n
                                        goto LABEL_402ad5;\n
                                    }\n
                                }\n
                                v42 += 1;\n
                                v48 += 8;\n
                            } while (v42 != 32);\n
                            v42 = 32;\n
                            goto LABEL_4028f8;\n
                        }\n
                        v27 += 1;\n
                        v26 += 8;\n
                    } while (v27 != 32);\n
                    v27 = 32;\n
                    goto LABEL_402888;\n
                }\n
                v12 += 1;\n
                v11 += 8;\n
            } while (v12 != 32);\n
            v12 = 32;\n
LABEL_402ad5:\n
            v54 = *((v51 + 32));\n
            if (!v54)\n
                return v2;\n
        }\n
    }\n
    goto LABEL_402ab7;\n
}\n
", "4205283:sub_402ae3": null, "4205296:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205338:sub_402b1a": null, "4205344:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a1 + v1)) != *((a0 + v1)))\n
            return *((a1 + v1)) - *((a0 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4205390:sub_402b4e": null, "4205392:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rax\n
    unsigned long v2;  // rdi\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    v2 = 0;\n
    do\n
    {\n
        v1[v2] = *((a1 + v2));\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4205425:sub_402b71": null, "4205440:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v1;  // rcx\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a2)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            a0[v1] = a1;\n
            v1 += 1;\n
        } while (a2 != v1);\n
        return a0;\n
    }\n
}\n
", "4205473:sub_402ba1": null, "4205488:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char v3;  // bpl\n
    unsigned long long v5;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v6;  // r15, Other Possible Types: unsigned long long\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v3 = a4;\n
    v6 = a1;\n
    if (a1 < a2)\n
    {\n
        v1 = 0;\n
        if (a3 <= 0)\n
            goto LABEL_402c4a;\n
    }\n
    else\n
    {\n
        a3 -= 1;\n
        v6 = (0 CONCAT a1) /m a2 >> 32;\n
        v1 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
        if (a3 <= 0)\n
            goto LABEL_402c4a;\n
    }\n
    if (!v1)\n
    {\n
        v5 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            do\n
            {\n
                if ((v3 & 1))\n
                    v0 = 48;\n
                else\n
                    v0 = 32;\n
                cgc_transmit(a0, a1, a2, a3);\n
                tmp_5 = v5;\n
                v5 = v5 - 1;\n
            } while (tmp_5 + -1);\n
        }\n
    }\n
LABEL_402c4a:\n
    v7 = (!(v3 & 2) ? v6 + 55 : v6 + 87);\n
    v8 = v6 + 48;\n
    if (10 <= v6)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc_transmit();\n
    return v1 + 1;\n
}\n
", "4205596:sub_402c1c": null, "4205718:sub_402c96": null, "4205728:cgc_fdprintf": "extern unsigned long long g_405110;\n
\n
long long cgc_fdprintf(unsigned long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x108]\n
    struct struct_0 **v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long long v30;  // r13\n
    struct struct_0 **v31;  // al, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    unsigned long v33;  // r12, Other Possible Types: unsigned long long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v35;  // rax\n
    unsigned long v36;  // rcx, Other Possible Types: unsigned int\n
    unsigned long long v37;  // rcx\n
    unsigned long long v38;  // rcx\n
    unsigned long long v39;  // rcx\n
    struct struct_0 **v40;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v41;  // rax, Other Possible Types: unsigned long\n
    unsigned long v42;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_0 **v43;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // r14, Other Possible Types: unsigned long long\n
    char *v46;  // rbp\n
    unsigned long v47;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v49;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v50;  // rbx\n
    unsigned long long v51;  // r12, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v51 = &v5;\n
    do\n
    {\n
        v4 = a1 + 1;\n
        v31 = *(a1);\n
        if (*(a1) == 37)\n
        {\n
            v32 = v51;\n
            v33 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                a0 = v4;\n
                v4 = a0 + 1;\n
                v35 = *(a0);\n
                a3 = v35;\n
                if ((a3 - 49) >= 9)\n
                    break;\n
                v34 = cgc_strtol(a0, &v4, 10, a3);\n
            }\n
            a2 = a3 - 88;\n
            switch (a2)\n
            {\n
            case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
                v0 = v35;\n
            case 11:\n
                a3 = v1;\n
                if (a3 <= 40)\n
                {\n
                    v31 = a3 + v3;\n
                    a3 = a3 + 8;\n
                    v1 = a3;\n
                }\n
                else\n
                {\n
                    v31 = v2;\n
                    v2 = v31 + 8;\n
                }\n
                v51 = rbx<8>;\n
                *(&v31) = *(v31);\n
                goto LABEL_402d70;\n
            case 12:\n
                v36 = v1;\n
                if (v36 > 40)\n
                {\n
                    v40 = v2;\n
                    v2 = v40 + 8;\n
                }\n
                else\n
                {\n
                    v40 = v36 + v3;\n
                    v36 = v36 + 8;\n
                    v1 = v36;\n
                }\n
                v45 = *(v40);\n
                if (v45 < 0)\n
                {\n
                    v0 = 45;\n
                    cgc_transmit(a0, &g_405110, a2, v36);\n
                    v45 = -(v45);\n
                }\n
                cgc_output_number_printf(v30, v45, 10, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 27:\n
                v37 = v1;\n
                if (v37 > 40)\n
                {\n
                    v41 = v2;\n
                    v42 = v41 + 8;\n
                    v2 = v42;\n
                }\n
                else\n
                {\n
                    v41 = v37 + v3;\n
                    v42 = v37 + 8;\n
                    v1 = v42;\n
                }\n
                v51 = rbx<8>;\n
                v46 = *(v41);\n
                if (cgc_strlen(v46))\n
                {\n
                    v50 = 0;\n
                    do\n
                    {\n
                        v0 = v46[v50];\n
                        cgc_transmit(a0, &g_405110, a2, v42);\n
                        v50 += 1;\n
                    } while (cgc_strlen(v46) > v50);\n
                }\n
                break;\n
            case 29:\n
                v38 = v1;\n
                if (v38 > 40)\n
                {\n
                    v43 = v2;\n
                    v2 = v43 + 8;\n
                }\n
                else\n
                {\n
                    v43 = v38 + v3;\n
                    v1 = v38 + 8;\n
                }\n
                v47 = *(v43);\n
                v48 = v30;\n
                v49 = 10;\n
LABEL_402fca:\n
                cgc_output_number_printf(v48, v47, v49, v34, v33);\n
                v51 = rbx<8>;\n
                break;\n
            case 0:\n
                v33 = v33 | 2;\n
            case 32:\n
                v39 = v1;\n
                if (v39 > 40)\n
                {\n
                    v44 = v2;\n
                    v2 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v44 = v39 + v3;\n
                    v1 = v39 + 8;\n
                }\n
                v47 = *(v44);\n
                v48 = v30;\n
                v49 = 16;\n
                goto LABEL_402fca;\n
            default:\n
                if (a3 == 37)\n
                    goto LABEL_0x402ee9;\n
                else\n
                    goto LABEL_0x402ded;\n
            }\n
        }\n
LABEL_402d70:\n
        v0 = v31;\n
        cgc_transmit(a0, a1, a2, a3);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4205998:sub_402dae": null, "4206074:sub_402dfa": null, "4206576:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_19;  // tmp #19\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rbp, Other Possible Types: unsigned long long\n
    char v14;  // dl\n
    unsigned long long v15;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            do\n
            {\n
                *(a1)->field_0 = ((v9 & 1) * 16) | 32;\n
                *(a1) = *(a1) + 1;\n
                *(a0) = *(a0) + 1;\n
                tmp_19 = v13;\n
                v13 = v13 - 1;\n
            } while (tmp_19 + -1);\n
        }\n
    }\n
    v14 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v14 + v12;\n
    *(a1) = *(a1) + 1;\n
    *(a0) = *(a0) + 1;\n
    v15 = v11 + 1;\n
    return v15;\n
}\n
", "4206745:sub_403099": null, "4206752:cgc_sprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_0 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0xf8]\n
    char *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct struct_0 **v30;  // r15\n
    struct_1 *v31;  // r14\n
    struct struct_0 **v32;  // r13\n
    char *v33;  // rcx\n
    void* v35;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v36;  // rbp\n
    unsigned long v37;  // rdx, Other Possible Types: unsigned long long\n
    char *v38;  // rdi\n
    unsigned long long v39;  // rcx\n
    unsigned int v40;  // esi\n
    unsigned long long v42;  // rax\n
    char *v43;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v44;  // rdx\n
    unsigned long long v45;  // rcx\n
    unsigned long long v46;  // rdx\n
    struct struct_0 **v47;  // rcx, Other Possible Types: unsigned long\n
    struct struct_0 **v48;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v49;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v50;  // rdx, Other Possible Types: unsigned long\n
    char *v51;  // rbp\n
    unsigned long v52;  // r14\n
    unsigned int v53;  // r13d\n
    struct_1 *v54;  // rdi, Other Possible Types: unsigned long\n
    struct struct_0 **v55;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v56;  // rcx, Other Possible Types: unsigned long long\n
    char *v57;  // rcx\n
    struct struct_0 **v58;  // rbx\n
    unsigned long v59;  // r15\n
    struct struct_0 **v60;  // r15\n
    struct_1 *v61;  // r14\n
    struct struct_0 **v62;  // r13\n
    char *v63;  // rax\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!*(a1))\n
    {\n
        v63 = v1;\n
        v1 = v63 + 1;\n
        *(v63) = 0;\n
        return v0;\n
    }\n
    v30 = &v5;\n
    v31 = &v0;\n
    v32 = &v1;\n
    do\n
    {\n
        v5 = a1 + 1;\n
        if (*(a1) != 37)\n
        {\n
            v33 = v1;\n
            *(v33) = *(a1);\n
            v1 = v33 + 1;\n
        }\n
        else\n
        {\n
            v35 = 0;\n
            while (true)\n
            {\n
                v36 = v35 | 1;\n
                v37 = v35;\n
                do\n
                {\n
                    v35 = v37;\n
                    v38 = v5;\n
                    v5 = v38 + 1;\n
                    v39 = *(v38);\n
                    v40 = v39;\n
                    v37 = v36;\n
                } while (v40 == 48);\n
                switch (v40)\n
                {\n
                case 37:\n
                    v43 = v1;\n
                    *(v43) = 37;\n
                    goto LABEL_4031eb;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v42 = cgc_strtol();\n
                    continue;\n
                case 100:\n
                    v44 = v2;\n
                    if (v44 <= 40)\n
                    {\n
                        v47 = v44 + v4;\n
                        v2 = v44 + 8;\n
                    }\n
                    else\n
                    {\n
                        v47 = v3;\n
                        v3 = v47 + 8;\n
                    }\n
                    v50 = *(v47);\n
                    if (v50 < 0)\n
                    {\n
                        v57 = v1;\n
                        *(v57) = 45;\n
                        v1 = v57 + 1;\n
                        v0 += 1;\n
                        v50 = -(v50);\n
                    }\n
                    v54 = *(&v0);\n
                    v55 = v1;\n
                    v56 = 10;\n
LABEL_4032a4:\n
                    cgc_output_number_sprintf(v54, v55, v50, v56, 0, v35);\n
                    break;\n
                case 115:\n
                    v45 = v2;\n
                    if (v45 > 40)\n
                    {\n
                        v48 = v3;\n
                        v3 = v48 + 8;\n
                    }\n
                    else\n
                    {\n
                        v48 = v45 + v4;\n
                        v2 = v45 + 8;\n
                    }\n
                    v51 = *(v48);\n
                    v52 = v1;\n
                    v53 = v0;\n
                    if (cgc_strlen(v51))\n
                    {\n
                        v58 = r15<8>;\n
                        v59 = 0;\n
                        do\n
                        {\n
                            *((v52 + v59)) = v51[v59];\n
                            v59 += 1;\n
                        } while (cgc_strlen(v51) > v59);\n
                        v52 += v59;\n
                        v53 += v59;\n
                        v60 = rbx<8>;\n
                    }\n
                    v1 = v52;\n
                    v0 = v53;\n
                    v61 = &v0;\n
                    v62 = &v1;\n
                    break;\n
                case 88:\n
                    v35 = v35 | 2;\n
                case 120:\n
                    v46 = v2;\n
                    if (v46 <= 40)\n
                    {\n
                        v49 = v46 + v4;\n
                        v2 = v46 + 8;\n
                    }\n
                    else\n
                    {\n
                        v49 = v3;\n
                        v3 = v49 + 8;\n
                    }\n
                    v50 = *(v49);\n
                    v54 = r14<8>;\n
                    v55 = r13<8>;\n
                    v56 = 16;\n
                    goto LABEL_4032a4;\n
                default:\n
                    v43 = v1;\n
                    *(v43) = v39;\n
LABEL_4031eb:\n
                    v1 = v43 + 1;\n
                    goto LABEL_403170;\n
                }\n
            }\n
        }\n
LABEL_403170:\n
        v0 += 1;\n
        a1 = v5;\n
    } while (*(a1));\n
}\n
", "4206940:sub_40315c": null, "4207444:sub_403354": null, "4207456:cgc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-18;\n
} struct_0;\n
\n
long long cgc_realloc(struct_0 *a0, unsigned long long a1)\n
{\n
    char *v1;  // rax\n
    unsigned long v3;  // rdx\n
\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1);\n
        if (v1)\n
        {\n
            v3 = a0[3].field_-18 - 24;\n
            if (v3 > a1)\n
                v3 = a1;\n
            cgc_memcpy(v1, a0, v3);\n
            cgc_free(a0);\n
            return v1;\n
        }\n
    }\n
    return 0;\n
}\n
", "4207567:sub_4033cf": null, "4207568:cgc_strcasecmp": "long long cgc_strcasecmp(char a0[2], char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v3;  // al, Other Possible Types: char\n
    char v4;  // cl\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = a0[0];\n
    while (true)\n
    {\n
        if (v3)\n
        {\n
            v4 = *(v1);\n
            if (!v4)\n
                return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
            if (v3 != v4)\n
            {\n
                v5 = cgc_tolower(v3);\n
                if (v5 != cgc_tolower(*(v1)))\n
                    return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
            }\n
            v1 += 1;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        }\n
    }\n
}\n
", "4207582:sub_4033de": null, "4207663:sub_40342f": null, "4207664:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4207702:sub_403456": null, "4207712:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned int v2;  // ecx\n
\n
    v1 = a0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a1)\n
            return v1;\n
    }\n
}\n
", "4207747:sub_403483": null, "4207760:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // al\n
\n
    v1 = *(a0);\n
    if (!*(a0))\n
        return *(a1) - v1;\n
    v2 = a0 + 1;\n
    while (true)\n
    {\n
        v3 = *(a1);\n
        if (!v3)\n
            break;\n
        if (v1 != v3)\n
            break;\n
        a1 += 1;\n
        v1 = *(v2);\n
        v2 += 1;\n
        if (!v1)\n
            break;\n
    }\n
    return *(a1) - v1;\n
}\n
", "4207811:sub_4034c3": null, "4207824:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4207871:sub_4034ff": null, "4207872:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4207900:sub_40351c": null, "4207904:cgc_strncasecmp": "long long cgc_strncasecmp(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    char v5;  // al\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rbx\n
\n
    v0 = v2;\n
    if (!a2)\n
        return 0;\n
    v3 = a1;\n
    for (v6 = a0; a2 != 1; v3 += 1)\n
    {\n
        v4 = *(v6);\n
        if (!v4)\n
            break;\n
        v5 = *(v3);\n
        if (!v5)\n
            break;\n
        if (v4 != v5 && cgc_tolower(v4) != cgc_tolower(*(v3)))\n
            break;\n
        v6 += 1;\n
    }\n
    v7 = cgc_tolower(*(v6)) - cgc_tolower(*(v3));\n
    return v7;\n
}\n
", "4207927:sub_403537": null, "4208028:sub_40359c": null, "4208032:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a1) - *(a0);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a1) - *(a0);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a1) - *(a0);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a1) - *(a0);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v2);\n
        }\n
    }\n
}\n
", "4208114:sub_4035f2": null, "4208128:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            a0 = *((a1 + v1));\n
            *((*(&a0) + v1)) = a0;\n
            if (!a0)\n
                break;\n
            v1 += 1;\n
            if (a2 == v1)\n
            {\n
                v1 = a2;\n
                break;\n
            }\n
        }\n
    }\n
    if (v1 < a2)\n
    {\n
        do\n
        {\n
            *((*(&a0) + v1)) = 0;\n
            v1 += 1;\n
        } while (a2 != v1);\n
    }\n
    return *(&a0);\n
}\n
", "4208190:sub_40363e": null, "4208192:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v1[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // al, Other Possible Types: char\n
    unsigned long long v3;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = v1[0];\n
    if (v1[0])\n
    {\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a1, v2);\n
            if (v3)\n
                break;\n
            v2 = *((v1 + 1));\n
            v1 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        v5 = v1 + 1;\n
    }\n
    *(a0) = v5;\n
    return *(a0);\n
}\n
", "4208284:sub_40369c": null, "4208288:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    char *v1;  // r9d, Other Possible Types: unsigned long\n
    void* v2;  // rax, Other Possible Types: unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbp\n
    unsigned long long v7;  // r9\n
    unsigned long v8;  // r8\n
    void* v9;  // r11, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v10;  // rcx\n
    char v11;  // bpl\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v13;  // r11\n
    unsigned long long v14;  // rcx\n
    unsigned long v15;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (*(v8) == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (*(v8) == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        while (true)\n
        {\n
            v10 = *((v8 + v1));\n
            v11 = v10 - 48;\n
            if (v11 >= 10 && (v10 & 223) - 65 >= 26)\n
                break;\n
            if (v11 <= 9)\n
            {\n
                v12 = v10 - 48;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else if ((v10 & 223) - 65 >= 26)\n
            {\n
                v12 = v11 < 10;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            else\n
            {\n
                v12 = v10 + (v10 - 65 < 26) * 32 - 87;\n
                if (v12 >= a2)\n
                    break;\n
            }\n
            v13 = a2 * v9;\n
            v14 = v12 + v13;\n
            v1 += 1;\n
            v9 = v14;\n
        }\n
        v15 = -(v9);\n
        if (v5 != 45)\n
            v15 = v9;\n
        v2 = v15;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4208328:sub_4036c8": null, "4208554:sub_4037aa": null, "4208663:sub_403817": null, "4208672:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4208680:sub_403828": null, "4208688:sym_list_append": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long sym_list_append(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4[3];  // rax\n
    struct_0 *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
    unsigned long long v9;  // r9\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 4294967295;\n
    v3 = a0;\n
    v4 = cgc_malloc(24);\n
    if (!v4)\n
    {\n
        cgc__terminate(24);\n
        return cgc_quote_fn(24, a1, v6, v7, v8, v9);\n
    }\n
    do\n
    {\n
        v5 = v3;\n
        v3 = *((v3 + 16));\n
    } while (v3);\n
    v5->field_10 = &v4[0];\n
    v4[2] = 0;\n
    v4[1] = v5;\n
    v4[0] = a1;\n
    return 0;\n
}\n
", "4208784:cgc_quote_fn": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_quote_fn(struct_0 *a0)\n
{\n
    if (a0)\n
        return a0->field_18;\n
    return 0;\n
}\n
", "4208797:sub_40389d": null, "4208800:cgc_car_fn": "typedef struct struct_1 {\n
    char padding_0[24];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[20];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_car_fn(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    if (!a0)\n
        return 0;\n
    v1 = a0->field_18;\n
    if (!v1)\n
    {\n
        return 0;\n
    }\n
    else if (v1->field_0 == 3)\n
    {\n
        return a0->field_18->field_18;\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4208827:sub_4038bb": null, "4208832:cgc_cdr_fn": "typedef struct struct_1 {\n
    char padding_0[24];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
long long cgc_cdr_fn(struct_1 *a0)\n
{\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (a0->field_18)\n
    {\n
        return a0->field_18->field_20;\n
    }\n
    else\n
    {\n
        return 0;\n
    }\n
}\n
", "4208854:sub_4038d6": null, "4208864:cgc_cons_fn": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
    struct struct_2 *field_20;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[20];\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[20];\n
    unsigned long long field_18;\n
    struct struct_1 *field_20;\n
} struct_1;\n
\n
long long cgc_cons_fn(struct_3 *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // r14\n
    struct_2 *v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v4;  // rbx\n
    struct_1 *v5;  // r15, Other Possible Types: unsigned long\n
    unsigned int *v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        if (!a0->field_18)\n
            return 0;\n
        v2 = a0->field_20;\n
        if (v2 && v2->field_0 == 3)\n
        {\n
            v1 = cgc_calloc(1, 40);\n
            *(v1) = 3;\n
            *((v1 + 24)) = a0->field_18;\n
            v5 = a0->field_20->field_18;\n
            if (!v5)\n
                return v1;\n
            while (true)\n
            {\n
                if (*(v5) != 3)\n
                    return v1;\n
                *(v1) = 3;\n
                v3 = v1;\n
                while (true)\n
                {\n
                    v4 = v3;\n
                    if (!v3)\n
                        break;\n
                    v3 = *((v3 + 32));\n
                    if (!v3)\n
                        break;\n
                }\n
                if (v4->field_18)\n
                {\n
                    v6 = cgc_calloc(1, 40);\n
                    v4->field_20 = &v6;\n
                    if (v6)\n
                    {\n
                        *(v6) = 3;\n
                        v4->field_20->field_18 = v5->field_18;\n
                        v4->field_20->field_20 = 0;\n
                        v4->field_20->field_8 = 0;\n
                    }\n
                    if (!v4->field_20)\n
                    {\n
                        cgc__terminate(1);\n
                        return cgc_equal_fn(1, 40, v7, v8, v9, v10);\n
                    }\n
                    v5 = v5->field_20;\n
                    if (!v5)\n
                        return v1;\n
                }\n
                else\n
                {\n
                    v4->field_18 = v5->field_18;\n
                    v4->field_20 = 0;\n
                    v5 = v5->field_20;\n
                    if (!v5)\n
                        return v1;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4208965:sub_403945": null, "4209152:cgc_equal_fn": "typedef struct struct_4 {\n
    char padding_0[24];\n
    struct struct_2 *field_18;\n
    struct struct_3 *field_20;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[24];\n
    struct struct_2 *field_18;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_equal_fn(struct_4 *a0, struct_0 *a1)\n
{\n
    struct_2 *v1;  // rax\n
    struct_3 *v2;  // rcx\n
    char *v3;  // rdi\n
    struct_2 *v4;  // rax\n
    char *v5;  // rsi\n
    unsigned long long v7[2];  // rax\n
    char *v8;  // rdi\n
    struct_0 *v9;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v10[2];  // rax\n
    char *v11;  // rdi\n
\n
    if (!a0)\n
        return 0;\n
    v1 = a0->field_18;\n
    if (v1)\n
    {\n
        v2 = a0->field_20;\n
        if (v2)\n
        {\n
            v3 = v1->field_8;\n
            if (v3)\n
            {\n
                v4 = v2->field_18;\n
                if (v4)\n
                {\n
                    v9 = a1;\n
                    v5 = v4->field_8;\n
                    if (v5)\n
                    {\n
                        if (!cgc_strcmp(v3, v5))\n
                        {\n
                            if (!v9)\n
                                return 0;\n
                            while (true)\n
                            {\n
                                v10 = *(v9);\n
                                if (!v10)\n
                                    return 0;\n
                                v11 = v10[0];\n
                                if (!v11)\n
                                    return 0;\n
                                if (!cgc_strcmp(v11, \"t\"))\n
                                    break;\n
                                v9 = *((v9 + 16));\n
                                if (!v9)\n
                                    return 0;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (!v9)\n
                                return 0;\n
                            while (true)\n
                            {\n
                                v7 = *(v9);\n
                                if (!v7)\n
                                    return 0;\n
                                v8 = v7[0];\n
                                if (!v8)\n
                                    return 0;\n
                                if (!cgc_strcmp(v8, \"nil\"))\n
                                    break;\n
                                v9 = *((v9 + 16));\n
                                if (!v9)\n
                                    return 0;\n
                            }\n
                        }\n
                        return *((*(v9) + 8));\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4209345:sub_403ac1": null, "4209360:cgc_atom_fn": "typedef struct struct_2 {\n
    char padding_0[24];\n
    struct struct_3 *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
long long cgc_atom_fn(struct_2 *a0, struct_0 *a1)\n
{\n
    unsigned int *v1;  // rax\n
    struct_0 *v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4[2];  // rax\n
    char *v5;  // rdi\n
    unsigned long long v6[2];  // rax\n
    char *v7;  // rdi\n
\n
    if (!a0)\n
        return 0;\n
    v1 = a0->field_18;\n
    if (v1)\n
    {\n
        v2 = a1;\n
        if (*(v1) != 1)\n
        {\n
            if (!a1)\n
                return 0;\n
            while (true)\n
            {\n
                v6 = *(v2);\n
                if (!v6)\n
                    return 0;\n
                v7 = v6[0];\n
                if (!v7)\n
                    return 0;\n
                if (!cgc_strcmp(v7, \"nil\"))\n
                    break;\n
                v2 = *((v2 + 16));\n
                if (!v2)\n
                    return 0;\n
            }\n
        }\n
        else\n
        {\n
            if (!a1)\n
                return 0;\n
            while (true)\n
            {\n
                v4 = *(v2);\n
                if (!v4)\n
                    return 0;\n
                v5 = v4[0];\n
                if (!v5)\n
                    return 0;\n
                if (!cgc_strcmp(v5, \"t\"))\n
                    break;\n
                v2 = *((v2 + 16));\n
                if (!v2)\n
                    return 0;\n
            }\n
        }\n
        return *((*(v2) + 8));\n
    }\n
}\n
", "4209536:cgc_cond_fn": "typedef struct struct_2 {\n
    char padding_0[24];\n
    struct struct_1 *field_18;\n
    struct struct_2 *field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[20];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    char padding_8[8];\n
    struct struct_3 *field_10;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
} struct_4;\n
\n
long long cgc_cond_fn(struct_2 *a0, struct_3 *a1)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v4;  // rax\n
    struct_0 *v5;  // rcx\n
    unsigned long long v6;  // rbp\n
    unsigned long long v7[2];  // rax\n
    char *v8;  // rdi\n
    struct_3 *v9;  // r15, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v3 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v3)\n
            return v0;\n
        v4 = *((v3 + 24));\n
        if (!v4)\n
            return v0;\n
        if (v4->field_0 != 3)\n
            return v0;\n
        v5 = v4->field_20;\n
        if (v5)\n
            break;\n
LABEL_403bbf:\n
        return v0;\n
    }\n
    v6 = cgc_eval(v4->field_18, a1);\n
    if (a1)\n
    {\n
        v9 = a1;\n
        while (true)\n
        {\n
            v7 = *(v9);\n
            if (!v7)\n
                break;\n
            v8 = v7[0];\n
            if (!v8)\n
                break;\n
            if (!cgc_strcmp(v8, \"t\"))\n
            {\n
                if (!(v6 == *((*(v9) + 8))))\n
                    goto LABEL_403c4b;\n
                goto LABEL_403bb0;\n
            }\n
            v9 = *((v9 + 16));\n
            if (!v9)\n
                break;\n
        }\n
        goto LABEL_403c4b;\n
    }\n
    if (v6)\n
    {\n
LABEL_403c4b:\n
        v3 = *((v3 + 32));\n
        continue;\n
    }\n
LABEL_403bb0:\n
    v0 = cgc_eval(v5->field_18, a1);\n
    goto LABEL_403bbf;\n
}\n
", "4209577:sub_403ba9": null, "4209797:sub_403c85": null, "4209808:cgc_eval": "long long cgc_eval(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v1;  // r13\n
    unsigned long v2;  // r14\n
    unsigned long v3;  // rax\n
    unsigned long v4;  // r15\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rdi\n
    unsigned long v7;  // rbx\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rax\n
    unsigned long v12;  // r15\n
    unsigned long v13;  // rax\n
    unsigned long v14;  // r12\n
    unsigned long v15;  // r14\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rbx\n
    unsigned long v18;  // rax\n
    unsigned long v19;  // rax\n
    unsigned int v20;  // ecx\n
    unsigned long v21;  // rdx\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // r8\n
    unsigned long v24;  // r9\n
\n
    if (!a0)\n
    {\n
LABEL_403ed9:\n
        return 0;\n
    }\n
    v1 = a1;\n
    v2 = a0;\n
    if (*(a0) == 1)\n
    {\n
        v7 = 0;\n
        if (a1)\n
        {\n
            v4 = *((a0 + 8));\n
            if (v4)\n
            {\n
                v7 = 0;\n
                while (true)\n
                {\n
                    v5 = *(v1);\n
                    if (!v5)\n
                        break;\n
                    v6 = *(v5);\n
                    if (!v6)\n
                        break;\n
                    if (cgc_strcmp(v6, v4))\n
                    {\n
                        v1 = *((v1 + 16));\n
                        if (!v1)\n
                            break;\n
                    }\n
                    else\n
                    {\n
                        v7 = *((*(v1) + 8));\n
                        break;\n
                    }\n
                }\n
            }\n
        }\n
        if (!v7)\n
            return v2;\n
        v2 = v7;\n
    }\n
    v3 = *((a0 + 24));\n
    if (!v3)\n
        goto LABEL_403ed9;\n
    if (*(v3) == 1 && !cgc_strncmp(*((v3 + 8)), \"lambda\", cgc_strlen(\"lambda\")))\n
    {\n
        v9 = *((a0 + 32));\n
        if (v9)\n
        {\n
            v10 = *((v9 + 32));\n
            if (v10 && *((v10 + 24)))\n
            {\n
                v13 = cgc_calloc(1, 40);\n
                if (!v13)\n
                {\n
LABEL_403ef8:\n
                    cgc__terminate(1);\n
                    return exptup_list_append(1, 40, v21, v22, v23, v24);\n
                }\n
                *(v13) = 4;\n
                *((v13 + 24)) = *((*((a0 + 32)) + 24));\n
                *((v13 + 32)) = *((*((*((a0 + 32)) + 32)) + 24));\n
LABEL_403ef3:\n
                return v13;\n
            }\n
        }\n
        goto LABEL_403ed9;\n
    }\n
    v8 = cgc_eval(*((a0 + 24)), a1);\n
    if (v8)\n
    {\n
        v12 = cgc_calloc(1, 40);\n
        if (v12)\n
        {\n
            *(v12) = 3;\n
            *((v12 + 24)) = v8;\n
            *((v12 + 32)) = 0;\n
            *((v12 + 8)) = 0;\n
        }\n
        v14 = *((a0 + 32));\n
        if (!v14)\n
        {\n
LABEL_403e4f:\n
            v19 = *((v12 + 24));\n
            v20 = *(v19);\n
            if (v20 == 2)\n
            {\n
                v13 = *((v19 + 16))(*((v12 + 32)), a1);\n
            }\n
            else\n
            {\n
                if (v20 != 4)\n
                    return v12;\n
                v13 = cgc_lambda(v19, *((v12 + 32)), a1);\n
                goto LABEL_403ef3;\n
            }\n
            goto LABEL_403ef3;\n
        }\n
        while (true)\n
        {\n
            if (!(*(v14) == 3))\n
                goto LABEL_403e4f;\n
            v15 = cgc_eval(*((v14 + 24)), a1);\n
            *(v12) = 3;\n
            v16 = v12;\n
            while (true)\n
            {\n
                v17 = v16;\n
                if (!v16)\n
                    break;\n
                v16 = *((v16 + 32));\n
                if (!v16)\n
                    break;\n
            }\n
            if (!*((v17 + 24)))\n
            {\n
                *((v17 + 24)) = v15;\n
                *((v17 + 32)) = 0;\n
                v14 = *((v14 + 32));\n
                goto LABEL_403e4f;\n
            }\n
            v18 = cgc_calloc(1, 40);\n
            *((v17 + 32)) = v18;\n
            if (v18)\n
            {\n
                *(v18) = 3;\n
                *((*((v17 + 32)) + 24)) = v15;\n
                *((*((v17 + 32)) + 32)) = 0;\n
                *((*((v17 + 32)) + 8)) = 0;\n
            }\n
            if (!*((v17 + 32)))\n
                goto LABEL_403ef8;\n
            v14 = *((v14 + 32));\n
            goto LABEL_403e4f;\n
        }\n
    }\n
}\n
", "4210074:sub_403d9a": null, "4210448:exptup_list_append": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long exptup_list_append(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4[3];  // rax\n
    struct_0 *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
    unsigned long long v9;  // r9\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 4294967295;\n
    v3 = a0;\n
    v4 = cgc_malloc(24);\n
    if (!v4)\n
    {\n
        cgc__terminate(24);\n
        return cgc_lambda(24, a1, v6, v7, v8, v9);\n
    }\n
    do\n
    {\n
        v5 = v3;\n
        v3 = *((v3 + 16));\n
    } while (v3);\n
    v5->field_10 = &v4[0];\n
    v4[2] = 0;\n
    v4[1] = v5;\n
    v4[0] = a1;\n
    return 0;\n
}\n
", "4210544:cgc_lambda": "long long cgc_lambda(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x40]\n
    int tmp_3;  // tmp #3\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v3;  // r12\n
    unsigned long v4;  // rbp\n
    unsigned long v6;  // rax\n
    char v7;  // cl\n
    unsigned long v8;  // r14\n
    unsigned long v9;  // rax\n
    unsigned long v11;  // r12\n
    unsigned int v12;  // eax\n
    unsigned long v13;  // rax\n
    unsigned long v15;  // rax\n
    unsigned long v16;  // rax\n
    unsigned long v17;  // rbp\n
    unsigned long v18;  // rbx\n
    unsigned long v19;  // rax\n
    unsigned long v20;  // r15\n
    unsigned long v21;  // rbp\n
    unsigned long v22;  // rax\n
    unsigned long v23;  // rcx\n
    unsigned long v24;  // r8\n
    unsigned long v25;  // r9\n
    unsigned long v26;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if (!a2)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = a2;\n
        v0 = cgc_malloc(24);\n
        if (!v0)\n
        {\n
LABEL_4041f8:\n
            cgc__terminate(a0);\n
            v26 = cgc_subst(a0, 40, a2, v23, v24, v25);\n
            return v26;\n
        }\n
        v4 = 0;\n
        do\n
        {\n
            v6 = *((a0 + 24));\n
            v7 = !v6;\n
            if (v4 && v6)\n
            {\n
                a2 = v4 - 1;\n
                while (true)\n
                {\n
                    v6 = *((v6 + 32));\n
                    tmp_3 = a2;\n
                    a2 -= 1;\n
                    v7 = !v6;\n
                    if (!v6)\n
                        break;\n
                    if (tmp_3 < 1)\n
                        break;\n
                }\n
            }\n
            if (v7)\n
            {\n
                v8 = 0;\n
                if (!v4)\n
                    goto LABEL_404049;\n
                goto LABEL_404013;\n
            }\n
            v8 = *((v6 + 24));\n
            if (v4)\n
            {\n
LABEL_404013:\n
                a2 = v4 - 1;\n
                v9 = a1;\n
                while (true)\n
                {\n
                    v9 = *((v9 + 32));\n
                    tmp_3 = a2;\n
                    a2 -= 1;\n
                    if (!v9)\n
                        break;\n
                    if (tmp_3 < 1)\n
                        break;\n
                }\n
                if (!!v9)\n
                    goto LABEL_404052;\n
                goto LABEL_40403b;\n
            }\n
LABEL_404049:\n
            v9 = a1;\n
            if (false)\n
            {\n
LABEL_40403b:\n
                v11 = 0;\n
                goto LABEL_404056;\n
            }\n
LABEL_404052:\n
            v11 = *((v9 + 24));\n
LABEL_404056:\n
            v12 = 2;\n
            v23 = v8 | v11;\n
            if (!(!v8) || !(!v11))\n
            {\n
                v13 = cgc_malloc(16);\n
                if (!v13)\n
                    goto LABEL_4041f8;\n
                *(v13) = v8;\n
                *((v13 + 8)) = v11;\n
                v12 = 1;\n
                if (v8 && v11)\n
                {\n
                    v15 = cgc_malloc(24);\n
                    if (!v15)\n
                        goto LABEL_4041f8;\n
                    a2 = v0;\n
                    do\n
                    {\n
                        v23 = a2;\n
                        a2 = *((a2 + 16));\n
                    } while (a2);\n
                    *((v23 + 16)) = v15;\n
                    *((v15 + 16)) = 0;\n
                    *((v15 + 8)) = v23;\n
                    *(v15) = v13;\n
                    v4 += 1;\n
                    v12 = 0;\n
                }\n
            }\n
        } while (!v12);\n
        if (v12 != 2)\n
            return 0;\n
        v16 = cgc_eval(cgc_subst(*((v0 + 16)), *((a0 + 32))), v1);\n
        if (v16)\n
        {\n
            v3 = v16;\n
            v17 = 0;\n
            v18 = v16;\n
            do\n
            {\n
                v19 = *((v18 + 24));\n
                if (!v19)\n
                {\n
LABEL_40419a:\n
                    v20 = v18;\n
                    if (v17 != 4)\n
                        return v3;\n
LABEL_4041a3:\n
                    v21 = cgc_calloc(1, 40);\n
                    v22 = cgc_calloc(1, 40);\n
                    if (v21)\n
                    {\n
                        if (v22)\n
                        {\n
                            *(v22) = 1;\n
                            *((v22 + 8)) = \"That's a lot of CAKE!\";\n
                            *(v21) = 3;\n
                            *((v21 + 24)) = v22;\n
                            *((v21 + 32)) = 0;\n
                            *((v20 + 32)) = v21;\n
                            return v3;\n
                        }\n
                        goto LABEL_4041f8;\n
                    }\n
                }\n
                if (!(*(v19) == 1))\n
                    goto LABEL_40419a;\n
                if (!(!cgc_strncmp(*((v19 + 8)), \"CAKE\", cgc_strlen(\"CAKE\"))))\n
                    goto LABEL_40419a;\n
                v20 = *((v18 + 32));\n
                if (!v20)\n
                    goto LABEL_40419a;\n
                if (!(*(v20) == 3))\n
                    goto LABEL_40419a;\n
                v17 += 1;\n
                v18 = v20;\n
            } while (v17 != 4);\n
            goto LABEL_4041a3;\n
        }\n
    }\n
}\n
", "4210627:sub_403fc3": null, "4211216:cgc_subst": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
    struct struct_1 *field_20;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_8[8];\n
    struct struct_4 *field_10;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char *field_8;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
long long cgc_subst(struct_4 *a0, struct_1 *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r15\n
    struct_0 *v4;  // r14, Other Possible Types: unsigned long\n
    struct_1 *v5;  // rax\n
    struct_3 *v6;  // rax\n
    struct_2 *v7;  // rax\n
    char *v8;  // rsi\n
    struct_4 *v9;  // r12, Other Possible Types: unsigned long\n
    struct_1 *v10;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rbx\n
    unsigned int *v12;  // rax\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 0;\n
    v4 = a1;\n
    if (!a1)\n
        return 0;\n
    v9 = a0;\n
    if (a1->field_0 != 1)\n
    {\n
        v5 = cgc_calloc(1, 40);\n
        if (v5)\n
        {\n
            v3 = v5;\n
            while (true)\n
            {\n
                if (*(v4) != 3)\n
                    return v3;\n
                *(v3) = 3;\n
                v10 = v3;\n
                while (true)\n
                {\n
                    v11 = v10;\n
                    if (!v10)\n
                        break;\n
                    v10 = *((v10 + 32));\n
                    if (!v10)\n
                        break;\n
                }\n
                if (!v11->field_18)\n
                {\n
                    v11->field_18 = cgc_subst(a0, v4->field_18);\n
                    v11->field_20 = 0;\n
                }\n
                else\n
                {\n
                    v12 = cgc_calloc(1, 40);\n
                    v11->field_20 = &v12;\n
                    if (v12)\n
                    {\n
                        *(v12) = 3;\n
                        v11->field_20->field_18 = cgc_subst(a0, v4->field_18);\n
                        v11->field_20->field_20 = 0;\n
                        v11->field_20->field_8 = 0;\n
                    }\n
                    if (!v11->field_20)\n
                        break;\n
                }\n
                v4 = v4->field_20;\n
                if (!v4)\n
                    return v3;\n
            }\n
        }\n
        cgc__terminate(a0);\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v6 = *(v9);\n
            if (v6)\n
            {\n
                v7 = v6->field_0;\n
                if (v7)\n
                {\n
                    v8 = v7->field_8;\n
                    if (v8 && !cgc_strcmp(v4->field_8, v8))\n
                        return *((*(v9) + 8));\n
                }\n
            }\n
            v9 = *((v9 + 16));\n
        } while (v9);\n
    }\n
    return v4;\n
}\n
", "4211286:sub_404256": null, "4211362:sub_4042a2": null, "4211577:sub_404379": null, "4211584:cgc_repl": "typedef struct struct_2 {\n
    char padding_0[16];\n
    struct struct_2 *field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
    struct struct_4 *field_8;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
} struct_4;\n
\n
long long cgc_repl()\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3[3];  // rax\n
    unsigned long v5;  // rbp\n
    unsigned long long v6;  // rdi\n
    struct_2 *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v8;  // r14\n
    struct_2 *v9;  // rax\n
    struct_2 *v10;  // r15\n
    unsigned long long v12[3];  // rax\n
    struct_2 *v13;  // rdx, Other Possible Types: unsigned long\n
    struct_2 *v14;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v16[3];  // rax\n
    unsigned long long v18[3];  // rax\n
    unsigned long long v20[3];  // rax\n
    unsigned long long v22[3];  // rax\n
    unsigned long long v24[3];  // rax\n
    unsigned long long v26[3];  // rax\n
    struct_3 *v27;  // rax\n
    struct_3 *v28;  // rbx\n
    unsigned long v29;  // rax\n
    unsigned long long v30;  // rax\n
    unsigned long long v31[3];  // rax\n
    struct_1 *v32;  // rax\n
    struct_1 *v33;  // rbx\n
    unsigned long v34;  // rax\n
    unsigned long long v35;  // rax\n
    struct_0 *v36;  // rax\n
    unsigned long long v37[3];  // rax\n
    struct_2 *v38;  // rdx, Other Possible Types: unsigned long\n
    struct_2 *v39;  // rcx\n
    unsigned long long v40;  // rsi\n
    unsigned long long v41;  // r8\n
    unsigned long long v42;  // r9\n
\n
    v0 = v2;\n
    v3[0] = cgc_tokenize();\n
    if (!v3)\n
        return 4294967295;\n
    v5 = v3[0];\n
    if (!v5)\n
    {\n
        return 4294967295;\n
    }\n
    else if (cgc_strncmp(v5, \"(\", cgc_strlen(v5)))\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v6 = v3[2];\n
        v7 = 0;\n
        v8 = cgc_parse(v6, 0);\n
        v9 = cgc_malloc(24);\n
        if (!v9)\n
        {\n
LABEL_4047b3:\n
            if (cgc_eval(v8, v7))\n
            {\n
                cgc_print(cgc_eval(v8, v7));\n
                return 0;\n
            }\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v10 = v9;\n
            v12 = cgc_malloc(24);\n
            if (!v12)\n
            {\n
                cgc__terminate(v6);\n
                return cgc_parse(v6, v40, v13, v14, v41, v42);\n
            }\n
            v13 = v10;\n
            do\n
            {\n
                v14 = v13;\n
                v13 = *((v13 + 16));\n
            } while (v13);\n
            v14->field_10 = &v12[0];\n
            v12[2] = 0;\n
            v12[1] = v14;\n
            v12[0] = cgc_make_fp(\"quote\", cgc_quote_fn);\n
            v16 = cgc_malloc(24);\n
            if (v16)\n
            {\n
                v13 = v10;\n
                do\n
                {\n
                    v14 = v13;\n
                    v13 = *((v13 + 16));\n
                } while (v13);\n
                *((v14 + 16)) = v16;\n
                v16[2] = 0;\n
                v16[1] = v14;\n
                v16[0] = cgc_make_fp(\"car\", cgc_car_fn);\n
                v18 = cgc_malloc(24);\n
                if (v18)\n
                {\n
                    v13 = v10;\n
                    do\n
                    {\n
                        v14 = v13;\n
                        v13 = *((v13 + 16));\n
                    } while (v13);\n
                    *((v14 + 16)) = v18;\n
                    v18[2] = 0;\n
                    v18[1] = v14;\n
                    v18[0] = cgc_make_fp(\"cdr\", cgc_cdr_fn);\n
                    v20 = cgc_malloc(24);\n
                    if (v20)\n
                    {\n
                        v13 = v10;\n
                        do\n
                        {\n
                            v14 = v13;\n
                            v13 = *((v13 + 16));\n
                        } while (v13);\n
                        *((v14 + 16)) = v20;\n
                        v20[2] = 0;\n
                        v20[1] = v14;\n
                        v20[0] = cgc_make_fp(\"cons\", cgc_cons_fn);\n
                        v22 = cgc_malloc(24);\n
                        if (v22)\n
                        {\n
                            v13 = v10;\n
                            do\n
                            {\n
                                v14 = v13;\n
                                v13 = *((v13 + 16));\n
                            } while (v13);\n
                            *((v14 + 16)) = v22;\n
                            v22[2] = 0;\n
                            v22[1] = v14;\n
                            v22[0] = cgc_make_fp(\"equal\", cgc_equal_fn);\n
                            v24 = cgc_malloc(24);\n
                            if (v24)\n
                            {\n
                                v13 = v10;\n
                                do\n
                                {\n
                                    v14 = v13;\n
                                    v13 = *((v13 + 16));\n
                                } while (v13);\n
                                *((v14 + 16)) = v24;\n
                                v24[2] = 0;\n
                                v24[1] = v14;\n
                                v24[0] = cgc_make_fp(\"atom\", cgc_atom_fn);\n
                                v26 = cgc_malloc(24);\n
                                if (v26)\n
                                {\n
                                    v13 = v10;\n
                                    do\n
                                    {\n
                                        v14 = v13;\n
                                        v13 = *((v13 + 16));\n
                                    } while (v13);\n
                                    *((v14 + 16)) = v26;\n
                                    v26[2] = 0;\n
                                    v26[1] = v14;\n
                                    v26[0] = cgc_make_fp(\"cond\", cgc_cond_fn);\n
                                    v27 = cgc_malloc(24);\n
                                    if (v27)\n
                                    {\n
                                        v28 = v27;\n
                                        v29 = cgc_calloc(1, cgc_strlen(\"nil\") + 1);\n
                                        v28->field_0 = v29;\n
                                        if (v29)\n
                                        {\n
                                            cgc_strncpy(v29, \"nil\", cgc_strlen(\"nil\"));\n
                                            v30 = cgc_calloc(1, 40);\n
                                            v28->field_8 = v30;\n
                                            if (v30)\n
                                            {\n
                                                v28->field_8->field_0 = 3;\n
                                                v31 = cgc_malloc(24);\n
                                                if (v31)\n
                                                {\n
                                                    v13 = v10;\n
                                                    do\n
                                                    {\n
                                                        v14 = v13;\n
                                                        v13 = *((v13 + 16));\n
                                                    } while (v13);\n
                                                    *((v14 + 16)) = v31;\n
                                                    v31[2] = 0;\n
                                                    v31[1] = v14;\n
                                                    v31[0] = v28;\n
                                                    v32 = cgc_malloc(24);\n
                                                    if (v32)\n
                                                    {\n
                                                        v33 = v32;\n
                                                        v34 = cgc_calloc(1, cgc_strlen(\"t\") + 1);\n
                                                        v33->field_0 = v34;\n
                                                        if (v34)\n
                                                        {\n
                                                            cgc_strncpy(v34, \"t\", cgc_strlen(\"t\"));\n
                                                            v35 = cgc_malloc(40);\n
                                                            v33->field_8 = v35;\n
                                                            if (v35)\n
                                                            {\n
                                                                v36 = v33->field_8;\n
                                                                v36->field_0 = 1;\n
                                                                v36->field_8 = v33->field_0;\n
                                                                v37 = cgc_malloc(24);\n
                                                                if (v37)\n
                                                                {\n
                                                                    v38 = v10;\n
                                                                    do\n
                                                                    {\n
                                                                        v39 = v38;\n
                                                                        v38 = *((v38 + 16));\n
                                                                    } while (v38);\n
                                                                    v39->field_10 = &v37[0];\n
                                                                    v37[2] = 0;\n
                                                                    v37[1] = v39;\n
                                                                    v37[0] = v33;\n
                                                                    v7 = v10->field_10;\n
                                                                    goto LABEL_4047b3;\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4212736:cgc_parse": "typedef struct struct_0 {\n
    char *field_0;\n
    char padding_8[8];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_2;\n
\n
long long cgc_parse(struct_0 *a0, unsigned long long *a1)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // rax\n
    struct_1 *v3;  // r15, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi, Other Possible Types: unsigned long long\n
    struct_1 *v5;  // rax\n
    unsigned long long v6;  // rbx\n
    unsigned long v7;  // rax\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r8\n
    unsigned long long v11;  // r9\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
LABEL_404909:\n
        return 0;\n
    }\n
    if (!cgc_strncmp(a0->field_0, \"(\", cgc_strlen(\"(\")))\n
    {\n
        v0 = 0;\n
        v3 = cgc_parse(a0->field_10, &v0);\n
        v4 = v0;\n
    }\n
    else if (cgc_strncmp(a0->field_0, \")\", cgc_strlen(\")\")))\n
    {\n
        v0 = 0;\n
        v5 = cgc_calloc(1, 40);\n
        if (!v5)\n
            goto LABEL_404917;\n
        v3 = v5;\n
        v5->field_0 = 1;\n
        v5->field_8 = a0->field_0;\n
        v4 = a0->field_10;\n
    }\n
    else if (a1)\n
    {\n
        *(a1) = a0->field_10;\n
        goto LABEL_404909;\n
    }\n
    v6 = cgc_parse(v4, &v0);\n
    if (a1)\n
        *(a1) = v0;\n
    v7 = cgc_calloc(1, 40);\n
    if (v7)\n
    {\n
        *(v7) = 3;\n
        *((v7 + 24)) = v3;\n
        *((v7 + 32)) = v6;\n
        *((v7 + 8)) = 0;\n
        return v7;\n
    }\n
LABEL_404917:\n
    cgc__terminate(1);\n
    return cgc_print(1, 40, v8, v9, v10, v11);\n
}\n
", "4213040:cgc_print": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[20];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
long long cgc_print(struct_1 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return v2;\n
    }\n
    else if (a0->field_0 != 1)\n
    {\n
        cgc_fdprintf(1, \"(\", a2, a3, a4);\n
        cgc_print(a0->field_18, \"(\", a2, a3, a4);\n
        v3 = a0->field_20;\n
        if (v3)\n
        {\n
            while (*(v3) == 3)\n
            {\n
                cgc_fdprintf(1, \" \", a2, a3, a4);\n
                cgc_print(*((v3 + 24)), \" \", a2, a3, a4);\n
                v3 = *((v3 + 32));\n
                if (!v3)\n
                    break;\n
            }\n
        }\n
        v2 = cgc_fdprintf(1, \")\", a2, a3, a4);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_fdprintf(1, \"%s\", *(&a0->field_8), a3, a4);\n
        return v2;\n
    }\n
}\n
", "4213201:sub_4049d1": null, "4213216:cgc_make_fp": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_make_fp(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_1 *v3;  // rax\n
    struct_1 *v4;  // r12\n
    unsigned long v5;  // rbx\n
    unsigned long long v6;  // rax\n
    struct_0 *v7;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(24);\n
    if (!v3)\n
        cgc__terminate(a0);\n
    v4 = v3;\n
    v5 = cgc_calloc(1, cgc_strlen(a0) + 1);\n
    v4->field_0 = v5;\n
    cgc_strncpy(v5, a0, cgc_strlen(a0));\n
    v6 = cgc_calloc(1, 40);\n
    v4->field_8 = v6;\n
    if (v6)\n
    {\n
        v7 = v4->field_8;\n
        v7->field_0 = 2;\n
        v7->field_10 = a1;\n
        if (v4->field_0 && v7)\n
            return v4;\n
    }\n
}\n
", "4213376:main": "int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char *v1;  // rax\n
    unsigned long long v2;  // r9\n
\n
    cgc_fdprintf(1, \"Welcome to the SLUR REPL. Type an expression to evaluate it.\\n
\", a2, a3, a4);\n
    v1 = cgc_malloc(32769);\n
    if (!v1)\n
    {\n
        cgc__terminate(32769);\n
        return cgc_read_balanced_expression(32769, \"Welcome to the SLUR REPL. Type an expression to evaluate it.\\n
\", a2, a3, a4, v2);\n
    }\n
    cgc_memset(v1, 0, 32769);\n
    cgc_fdprintf(1, \"> \", 32769, a3, a4);\n
    if (cgc_read_balanced_expression(0, v1, 0x8000))\n
    {\n
        do\n
        {\n
            cgc_fdprintf(1, \"Expression too long or unbalanced, try again.\\n
\", 0x8000, a3, a4);\n
            cgc_memset(v1, 0, 32769);\n
            cgc_fdprintf(1, \"> \", 32769, a3, a4);\n
        } while (cgc_read_balanced_expression(0, v1, 0x8000));\n
    }\n
    if (cgc_repl())\n
    {\n
        cgc_fdprintf(1, \"Error evaluating expression.\\n
\", 0x8000, a3, a4);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4213632:cgc_read_balanced_expression": "long long cgc_read_balanced_expression(unsigned long long a0, char *a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x30]\n
    unsigned long long v3;  // rbp, Other Possible Types: unsigned long\n
    char *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v6;  // rax\n
    void* v7;  // r14, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v8;  // rcx\n
    unsigned long long v9;  // rax\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v1 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        if (cgc_receive(a0, a1, a2, rcx<8>))\n
        {\n
LABEL_404c19:\n
            do\n
            {\n
                if (cgc_receive(a0, a1, a2, v8))\n
                {\n
LABEL_404c6c:\n
                    *(v4) = 0;\n
                    return v7;\n
                }\n
                if (!v1)\n
                    goto LABEL_404c6c;\n
                v9 = v0;\n
                if (v9 == 10)\n
                    goto LABEL_404c6c;\n
            } while (cgc_isspace(v9));\n
        }\n
        v6 = v1;\n
        if (!v6)\n
            goto LABEL_404c19;\n
        if (!v7 && *(v4) != 40)\n
            goto LABEL_404c64;\n
        v8 = *(v4);\n
        if (v8 != 41)\n
        {\n
            if (v8 == 40)\n
            {\n
                if (v7 == -1)\n
                    goto LABEL_404c64;\n
                v7 += 1;\n
            }\n
            tmp_2 = v3;\n
            v3 -= v6;\n
            if (tmp_2 == v6)\n
                goto LABEL_404c19;\n
        }\n
        else\n
        {\n
            if (!v7)\n
                goto LABEL_404c64;\n
            v7 -= 1;\n
            tmp_5 = v3;\n
            v3 -= v6;\n
            if (tmp_5 == v6)\n
                goto LABEL_404c19;\n
        }\n
        v4 += v6;\n
    } while (v7);\n
    v7 = 0;\n
LABEL_404c64:\n
    return 4294967295;\n
}\n
", "4213757:sub_404bfd": null, "4213887:sub_404c7f": null, "4213888:tok_list_append": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long tok_list_append(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4[3];  // rax\n
    struct_0 *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
    unsigned long long v9;  // r9\n
\n
    v0 = v2;\n
    if (!a0)\n
        return 4294967295;\n
    v3 = a0;\n
    v4 = cgc_malloc(24);\n
    if (!v4)\n
    {\n
        cgc__terminate(24);\n
        return cgc_tokenize(24, a1, v6, v7, v8, v9);\n
    }\n
    do\n
    {\n
        v5 = v3;\n
        v3 = *((v3 + 16));\n
    } while (v3);\n
    v5->field_10 = &v4[0];\n
    v4[2] = 0;\n
    v4[1] = v5;\n
    v4[0] = a1;\n
    return 0;\n
}\n
", "4213984:cgc_tokenize": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long cgc_tokenize(char *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char *v1;  // [bp-0x38]\n
    char *v3;  // rbx\n
    unsigned long long v4;  // r15\n
    struct_0 *v5;  // rax\n
    unsigned long long v6;  // rax\n
    char *v7;  // r14\n
    unsigned long v8;  // rdi\n
    char v9[2];  // rbp\n
    unsigned long long v10[3];  // rax\n
    unsigned long v11;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r14\n
    char *v13;  // r12\n
    struct_0 *v14;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v15;  // r12\n
    struct_0 *v16;  // rcx\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // r13\n
    unsigned long long v20[3];  // rax\n
    struct_0 *v21;  // rdx, Other Possible Types: unsigned long\n
    struct_0 *v22;  // rcx\n
\n
    v3 = a0;\n
    v4 = cgc_strlen(a0);\n
    v5 = cgc_malloc(24);\n
    if (!v5)\n
    {\n
LABEL_404e83:\n
        return 0;\n
    }\n
    v0 = v5;\n
    v5->field_0 = \"START\";\n
    if (v4)\n
    {\n
        v15 = 0;\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                do\n
                {\n
                    v18 = v15;\n
                    v6 = cgc_isspace(v3[v15]);\n
                    v15 += 1;\n
                } while (v6);\n
                v7 = &v3[v18];\n
                v8 = v3[v18];\n
                if ((v8 & 254) != 40)\n
                    break;\n
                v9 = cgc_malloc(2);\n
                if (v9)\n
                {\n
                    v9[0] = *(v7);\n
                    v9[1] = 0;\n
                    v10 = cgc_malloc(24);\n
                    if (!v10)\n
                        goto LABEL_404e94;\n
                    v14 = v0;\n
                    do\n
                    {\n
                        v16 = v14;\n
                        v14 = *((v14 + 16));\n
                    } while (v14);\n
                    v16->field_10 = &v10[0];\n
                    v10[2] = 0;\n
                    v10[1] = v16;\n
                    v10[0] = v9;\n
                    v18 += 1;\n
                }\n
                v15 = v18;\n
                if (!v9)\n
                    goto LABEL_404e83;\n
                if (!(v18 < v4))\n
                    goto LABEL_404e78;\n
            }\n
            if (!cgc_isalnum(v8))\n
                break;\n
            v1 = v7;\n
            v11 = -1;\n
            v12 = v18;\n
            while (true)\n
            {\n
                v13 = v12 + 1;\n
                v11 += 1;\n
                if (!cgc_isalnum(v3[v12]))\n
                    break;\n
                v12 = v13;\n
                if (0 >= v4)\n
                    break;\n
            }\n
            v15 = v13 + 1;\n
            if (v15 < v18)\n
                break;\n
            v17 = cgc_malloc(v11 + 1);\n
            if (!v17)\n
                break;\n
            cgc_strncpy(v17, v1, v11);\n
            v20 = cgc_malloc(24);\n
            if (!v20)\n
            {\n
LABEL_404e94:\n
                cgc__terminate(24);\n
            }\n
            v21 = v0;\n
            do\n
            {\n
                v22 = v21;\n
                v21 = *((v21 + 16));\n
            } while (v21);\n
            v22->field_10 = &v20[0];\n
            v20[2] = 0;\n
            v20[1] = v22;\n
            v20[0] = v17;\n
            if (v15 >= v4)\n
                goto LABEL_404e78;\n
        }\n
    }\n
LABEL_404e78:\n
    return v0->field_10;\n
}\n
", "4214432:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}