{"4202496:_init": "extern struct_0 *g_40c608;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40c608;\n
    if (g_40c608)\n
        v1 = g_40c608();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40c628;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40c628;\n
    goto *(4245040);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fabs": "// attributes: PLT stub\n
int cgc_fabs()\n
{\n
    ::libc.so.0::cgc_fabs();\n
    return;\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_cos": "// attributes: PLT stub\n
int cgc_cos()\n
{\n
    ::libc.so.0::cgc_cos();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_remainder": "// attributes: PLT stub\n
int cgc_remainder()\n
{\n
    ::libc.so.0::cgc_remainder();\n
    return;\n
}\n
", "4202672:cgc_log": "// attributes: PLT stub\n
int cgc_log()\n
{\n
    ::libc.so.0::cgc_log();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202720:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libc.so.0::cgc_sin();\n
    return;\n
}\n
", "4202736:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202752:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202768:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4245016);\n
}\n
", "4202784:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202821:sub_402145": null, "4202822:sub_402146": null, "4202832:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40c600;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202873:sub_402179": null, "4202880:register_tm_clones": "extern unsigned long long g_40c610;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202937:sub_4021b9": null, "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40c618;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40c618)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202997:sub_4021f5": null, "4203001:sub_4021f9": null, "4203008:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203017:sub_402209": null, "4203024:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long long v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v1 = a1 * a0;\n
        if ((0 CONCAT v1) /m a1 != a0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = cgc_malloc(v1);\n
        if (!v0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v2 = cgc_memset(v0, 0, v1);\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4203189:sub_4022b5": null, "4203200:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (!cgc_isalpha(a0))\n
    {\n
        v0 = cgc_isdigit(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203266:sub_402302": null, "4203280:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = cgc_isupper(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203346:sub_402352": null, "4203360:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203386:sub_40237a": null, "4203392:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203418:sub_40239a": null, "4203424:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203450:sub_4023ba": null, "4203456:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return ((a0 & -128) ^ 255) & 1;\n
}\n
", "4203484:sub_4023dc": null, "4203488:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (a0 != 32)\n
        v0 = a0 == 9;\n
    return v0 & 1;\n
}\n
", "4203530:sub_40240a": null, "4203536:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (a0 != 127)\n
        v0 = a0 < 32;\n
    return v0 & 1;\n
}\n
", "4203578:sub_40243a": null, "4203584:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 != 32)\n
    {\n
        v0 = cgc_isprint(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203641:sub_402479": null, "4203648:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 32)\n
        v0 = a0 != 127;\n
    return v0 & 1;\n
}\n
", "4203690:sub_4024aa": null, "4203696:cgc_ispunct": "extern char _punct;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return (&_punct)[a0];\n
}\n
", "4203720:sub_4024c8": null, "4203728:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    if (a0 > 8)\n
    {\n
        v0 = 1;\n
        if (a0 < 14)\n
            return v0 & 1;\n
    }\n
    v0 = a0 == 32;\n
    return v0 & 1;\n
}\n
", "4203780:sub_402504": null, "4203792:cgc_isxdigit": "extern char _xdigit;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    return (&_xdigit)[a0];\n
}\n
", "4203816:sub_402528": null, "4203824:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203839:sub_40253f": null, "4203840:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 | 32;\n
    return v0;\n
}\n
", "4203897:sub_402579": null, "4203904:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 & 95;\n
    return v0;\n
}\n
", "4203961:sub_4025b9": null, "4203968:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v2;\n
    v0 = a0 - 24;\n
    v2 = v0;\n
    if (v2->field_8)\n
    {\n
        return v0;\n
    }\n
    else if (v0->field_0 < 0x40000)\n
    {\n
        cgc_insert_into_flist(v0);\n
        v2 = cgc_coalesce(v0);\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = cgc_free_huge(v0);\n
        return v2;\n
    }\n
}\n
", "4204083:sub_402633": null, "4204096:cgc_free_huge": "long long cgc_free_huge(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long long v2;  // rsi\n
\n
    v0 = a0;\n
    return cgc_deallocate(a0, v2);\n
}\n
", "4204130:sub_402662": null, "4204144:cgc_malloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern struct_1 *cgc_free_lists;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct_2 *v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_1 *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v4 + 24 < 0x40000)\n
    {\n
        if ((v4 & 7))\n
            v4 = v4 - -7 & -8;\n
        if (v4 >= 0x80000000)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v4 += 24;\n
        v3 = 0;\n
        v2 = cgc_find_fit(v4, &v3);\n
        if (!v3)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v2 = 31;\n
                v3 = (&cgc_free_lists)[v2];\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        cgc_remove_from_flist(v3);\n
        v1 = *(v3) - v4;\n
        if (v1 > 48)\n
        {\n
            v0 = v3 + v4;\n
            v0->field_0 = v1;\n
            v0->field_8 = 1;\n
            v0->field_10 = 0;\n
            v0->field_18 = 0;\n
            *(v3) = v4;\n
            v0->field_28 = v3;\n
            v0->field_20 = *((v3 + 32));\n
            if (*((v3 + 32)))\n
                *((*((v3 + 32)) + 40)) = v0;\n
            *((v3 + 32)) = v0;\n
            cgc_insert_into_flist(v0);\n
        }\n
        v5 = v3 + 24;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = cgc_malloc_huge(v4);\n
        return v5;\n
    }\n
}\n
", "4204598:sub_402836": null, "4204608:cgc_malloc_huge": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_malloc_huge(unsigned long long a0)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v2 = a0;\n
    v2 += 24;\n
    if (cgc_allocate(a0, v5, v6))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v0 = *(&v1);\n
    v0->field_0 = v2;\n
    v0->field_8 = 0;\n
    v0->field_18 = 0;\n
    v0->field_10 = 0;\n
    v0->field_28 = 0;\n
    v0->field_20 = 0;\n
    v3 = v0 + 24;\n
    return v3;\n
}\n
", "4204770:sub_4028e2": null, "4204784:cgc_find_fit": "extern unsigned long long cgc_free_lists;\n
\n
long long cgc_find_fit(unsigned long long a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct struct_0 **v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a1;\n
    for (v0 = cgc_get_size_class(a0); v0 < 32; v0 += 1)\n
    {\n
        for (*(a1) = (&cgc_free_lists)[v0]; *(a1); *(a1) = *(a1)->field_10)\n
        {\n
            if (*(a1)->field_0 >= a0)\n
            {\n
                v2 = v0;\n
                return v2;\n
            }\n
        }\n
    }\n
    *(a1) = 0;\n
    v2 = -1;\n
    return v2;\n
}\n
", "4204963:sub_4029a3": null, "4204976:cgc_allocate_new_blk": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
} struct_0;\n
\n
long long cgc_allocate_new_blk()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
\n
    v0 = 0x40000;\n
    if (cgc_allocate(v5, v6, v7))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    else if (*(&v2))\n
    {\n
        v1 = *(&v2);\n
        v1->field_0 = v0;\n
        v1->field_8 = 1;\n
        v1->field_18 = 0;\n
        v1->field_10 = 0;\n
        v1->field_28 = 0;\n
        v1->field_20 = 0;\n
        cgc_insert_into_flist(v1);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
}\n
", "4205154:sub_402a62": null, "4205168:cgc_get_size_class": "extern unsigned long long size_class_limits[4];\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < 32)\n
            v0 = !(a0 <= size_class_limits[v1]);\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4205263:sub_402acf": null, "4205264:cgc_insert_into_flist": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern struct_1 cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(a0->field_0);\n
    a0->field_8 = 1;\n
    if (!(&cgc_free_lists.field_0)[v0])\n
    {\n
        (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
        return &cgc_free_lists.field_0;\n
    }\n
    a0->field_10 = (&cgc_free_lists.field_0)[v0];\n
    (&cgc_free_lists.field_0)[v0]->field_18 = a0;\n
    (&cgc_free_lists.field_0)[v0] = &a0->field_0;\n
    a0->field_18 = 0;\n
    return a0;\n
}\n
", "4205431:sub_402b77": null, "4205440:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
    struct struct_1 *field_18;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
extern unsigned long long cgc_free_lists[4];\n
\n
long long cgc_remove_from_flist(struct_2 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = cgc_get_size_class(*(&a0->field_0));\n
    if (a0->field_18)\n
        a0->field_18->field_10 = a0->field_10;\n
    if (a0->field_10)\n
        a0->field_10->field_18 = a0->field_18;\n
    if (cgc_free_lists[v0] == a0)\n
        cgc_free_lists[v0] = a0->field_10;\n
    a0->field_10 = 0;\n
    a0->field_18 = 0;\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4205626:sub_402c3a": null, "4205632:cgc_coalesce": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[24];\n
    struct struct_0 *field_20;\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_coalesce(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
    struct_0 *v2;  // rax\n
    struct_0 *v3;  // rax\n
    struct_1 *v4;  // rax\n
    struct_0 *v5;  // rax, Other Possible Types: unsigned long long, struct_1 *, unsigned long\n
\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0->field_20);\n
        cgc_remove_from_flist(a0);\n
        v1 = a0->field_28;\n
        v1->field_0 = a0->field_0 + v1->field_0;\n
        v2 = a0->field_28;\n
        v2->field_0 = a0->field_20->field_0 + v2->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        cgc_remove_from_blist(a0->field_20);\n
        v5 = cgc_remove_from_blist(a0);\n
        return v5;\n
    }\n
    if (a0->field_28 && a0->field_28->field_8 && a0->field_20 && !a0->field_20->field_8)\n
    {\n
        cgc_remove_from_flist(a0->field_28);\n
        cgc_remove_from_flist(a0);\n
        v3 = a0->field_28;\n
        v3->field_0 = a0->field_0 + v3->field_0;\n
        cgc_insert_into_flist(a0->field_28);\n
        v5 = cgc_remove_from_blist(a0);\n
        goto LABEL_402e12;\n
    }\n
    v5 = a0;\n
    if (a0->field_28)\n
    {\n
        v5 = a0->field_28;\n
        if (!v5->field_8)\n
        {\n
            v5 = a0;\n
            if (a0->field_20)\n
            {\n
                v5 = a0->field_20;\n
                if (v5->field_8)\n
                {\n
                    cgc_remove_from_flist(a0->field_20);\n
                    cgc_remove_from_flist(a0);\n
                    v4 = a0;\n
                    v4->field_0 = a0->field_20->field_0 + v4->field_0;\n
                    cgc_insert_into_flist(a0);\n
                    v5 = cgc_remove_from_blist(a0->field_20);\n
                }\n
            }\n
        }\n
    }\n
LABEL_402e12:\n
    return v5;\n
}\n
", "4206114:sub_402e22": null, "4206128:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_1 *field_20;\n
    struct struct_0 *field_28;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
long long cgc_remove_from_blist(struct_1 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_1 *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    if (a0->field_28)\n
        v0->field_28->field_20 = a0->field_20;\n
    v2 = a0;\n
    if (a0->field_20)\n
    {\n
        v2 = a0->field_20;\n
        *((v2 + 40)) = a0->field_28;\n
    }\n
    return v2;\n
}\n
", "4206208:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = a0 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206316:sub_402eec": null, "4206320:cgc_memcmp": "long long cgc_memcmp(char *a0, char *a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < a2)\n
        {\n
            if (*(v2) != *(v1))\n
            {\n
                v3 = *(v1) - *(v2);\n
                return v3;\n
            }\n
            v2 += 1;\n
            v1 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206462:sub_402f7e": null, "4206464:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return a0;\n
}\n
", "4206563:sub_402fe3": null, "4206576:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a2)\n
    {\n
        v1 = a0;\n
        for (v0 = 0; v0 < a2; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a1;\n
        }\n
        v2 = a0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = a0;\n
        return v2;\n
    }\n
}\n
", "4206722:sub_403082": null, "4206736:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    char v2;  // [bp-0x59]\n
    char v3;  // [bp-0x49]\n
    char v4;  // [bp-0x39]\n
    char v5;  // [bp-0x29]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0xc], Other Possible Types: unsigned long\n
\n
    v8 = a0;\n
    v7 = a2;\n
    v6 = 0;\n
    if (v8 >= a1)\n
    {\n
        v6 = cgc_output_number_printf((0 CONCAT v8) /m a1, a1, v7 - 1, a3);\n
        v8 = (0 CONCAT v8) /m a1 >> 32;\n
    }\n
    if (!v6 && v7 > 0)\n
    {\n
        while (true)\n
        {\n
            v7 -= 1;\n
            if (!v7)\n
                break;\n
            if ((a3 & 1))\n
                v5 = 48;\n
            else\n
                v4 = 32;\n
            cgc_transmit(a0, a1, a2, a3);\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (v8 < 10)\n
            v1 = v8 + 48;\n
        else\n
            v1 = v8 + 55;\n
        v3 = v1;\n
    }\n
    else\n
    {\n
        if (v8 < 10)\n
            v0 = v8 + 48;\n
        else\n
            v0 = v8 + 87;\n
        v2 = v0;\n
    }\n
    cgc_transmit(a0, a1, a2, a3);\n
    return v6 + 1;\n
}\n
", "4207137:sub_403221": null, "4207152:cgc_printf": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf(char *a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x1b0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x1a8]\n
    unsigned int v2;  // [bp-0x19c]\n
    unsigned int *v3;  // [bp-0x198], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x190]\n
    unsigned int v5;  // [bp-0x184]\n
    unsigned long v6;  // [bp-0x180]\n
    struct struct_0 **v7;  // [bp-0x178]\n
    struct_1 *v8;  // [bp-0x170]\n
    unsigned int v9;  // [bp-0x164]\n
    unsigned int v10;  // [bp-0x160]\n
    unsigned int v11;  // [bp-0x15c]\n
    char v12;  // [bp-0x158]\n
    unsigned long v13;  // [bp-0x150]\n
    unsigned long v14;  // [bp-0x148]\n
    unsigned long v15;  // [bp-0x140]\n
    unsigned long v16;  // [bp-0x138]\n
    unsigned long v17;  // [bp-0x130]\n
    int v18;  // [bp-0x128]\n
    int v19;  // [bp-0x118]\n
    int v20;  // [bp-0x108]\n
    int v21;  // [bp-0xf8]\n
    int v22;  // [bp-0xe8]\n
    int v23;  // [bp-0xd8]\n
    int v24;  // [bp-0xc8]\n
    int v25;  // [bp-0xb8]\n
    char v26;  // [bp-0x99]\n
    char v27;  // [bp-0x89]\n
    char v28;  // [bp-0x79]\n
    char v29;  // [bp-0x69]\n
    char v30;  // [bp-0x59]\n
    char v31;  // [bp-0x49]\n
    unsigned int v32;  // [bp-0x48]\n
    unsigned int v33;  // [bp-0x44]\n
    unsigned long v34;  // [bp-0x40]\n
    unsigned long v35;  // [bp-0x38]\n
    unsigned int v36;  // [bp-0x30]\n
    unsigned int v37;  // [bp-0x2c]\n
    unsigned int v38;  // [bp-0x28]\n
    unsigned int v39;  // [bp-0x24]\n
    unsigned int v40;  // [bp-0x20]\n
    unsigned int v41;  // [bp-0x1c]\n
    char *v42;  // [bp-0x18]\n
    char *v43;  // [bp-0x10], Other Possible Types: unsigned long\n
    char v44;  // [bp-0x8]\n
    unsigned long v45;  // [bp+0x8]\n
    unsigned long long v46;  // rbp\n
    char v47;  // al\n
    int v48;  // xmm0\n
    int v49;  // xmm1\n
    int v50;  // xmm2\n
    int v51;  // xmm3\n
    int v52;  // xmm4\n
    int v53;  // xmm5\n
    int v54;  // xmm6\n
    int v55;  // xmm7\n
    unsigned long v56;  // r9\n
    char *v57;  // rax\n
    char *v58;  // rax\n
    unsigned long long v59;  // rdx\n
    unsigned int *v60;  // rax\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v63;  // rdx\n
    unsigned int *v64;  // rax\n
\n
    v46 = &v44;\n
    if (v47)\n
    {\n
        v18 = v48;\n
        v19 = v49;\n
        v20 = v50;\n
        v21 = v51;\n
        v22 = v52;\n
        v23 = v53;\n
        v24 = v54;\n
        v25 = v55;\n
    }\n
    v17 = v56;\n
    v16 = a4;\n
    v15 = a3;\n
    v14 = a2;\n
    v13 = a1;\n
    v43 = a0;\n
    v39 = 0;\n
    v38 = 0;\n
    v37 = 0;\n
    v35 = &v12;\n
    v34 = &v45;\n
    v33 = 48;\n
    v32 = 8;\n
    while (*(v43))\n
    {\n
        v57 = v43;\n
        v43 = v57 + 1;\n
        v31 = *(v57);\n
        if (v31 != 37)\n
        {\n
            v26 = v31;\n
            cgc_transmit(a0, a1, a2, a3);\n
LABEL_40369b:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v58 = v43;\n
                    a3 = v58 + 1;\n
                    v43 = a3;\n
                    v31 = *(v58);\n
                    v11 = v31;\n
                    if (v11 != 48)\n
                        break;\n
                    v38 |= 1;\n
                }\n
                if (v11 - 49 >= 9)\n
                    break;\n
                a2 = 10;\n
                v37 = cgc_strtol(v43 - 1, &v43, 10);\n
            }\n
            v10 = v31;\n
            if (v10 == 37)\n
            {\n
                v30 = 37;\n
                cgc_transmit(a0, a1, a2, a3);\n
                goto LABEL_403658;\n
            }\n
            if (v10 == 88)\n
            {\n
                v38 |= 2;\n
            }\n
            else\n
            {\n
                if (v10 == 100)\n
                {\n
                    v4 = &v32;\n
                    v5 = v32;\n
                    if (v5 <= 40)\n
                    {\n
                        a3 = v4;\n
                        v59 = v5;\n
                        v60 = v59 + a3->field_10;\n
                        a2 = v59 + 8;\n
                        *(&a3->field_0) = a2;\n
                        v3 = v60;\n
                    }\n
                    else\n
                    {\n
                        a3 = v4;\n
                        a2 = *((a3 + 8));\n
                        *((a3 + 8)) = a2 + 8;\n
                        v3 = a2;\n
                    }\n
                    v41 = *(v3);\n
                    if (v41 < 0)\n
                    {\n
                        v28 = 45;\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v41 = -(v41);\n
                    }\n
                    cgc_output_number_printf(v41, 10, v37, v38);\n
                    goto LABEL_403658;\n
                }\n
                if (v10 == 115)\n
                {\n
                    v8 = &v32;\n
                    v9 = v32;\n
                    if (v9 <= 40)\n
                    {\n
                        a3 = v8;\n
                        v61 = v9;\n
                        v62 = v61 + a3->field_10;\n
                        a2 = v61 + 8;\n
                        *(&a3->field_0) = a2;\n
                    }\n
                    else\n
                    {\n
                        a3 = v8;\n
                        v63 = *((a3 + 8));\n
                        v62 = v63;\n
                        a2 = v63 + 1;\n
                        *((a3 + 8)) = a2;\n
                    }\n
                    v7 = v62;\n
                    v42 = &*(v7)->field_0;\n
                    v40 = 0;\n
                    while (true)\n
                    {\n
                        v6 = v40;\n
                        if (v6 >= cgc_strlen(v42))\n
                            break;\n
                        v29 = v42[v40];\n
                        cgc_transmit(a0, a1, a2, a3);\n
                        v40 += 1;\n
                    }\n
                    goto LABEL_403658;\n
                }\n
                if (v10 != 120)\n
                {\n
                    v27 = v31;\n
                    cgc_transmit(a0, a1, a2, a3);\n
LABEL_403658:\n
                    v37 = 0;\n
                    v38 = 0;\n
                    goto LABEL_40369b;\n
                }\n
            }\n
            v1 = &v32;\n
            v2 = v32;\n
            if (v2 > 40)\n
            {\n
                a3 = v1;\n
                a2 = a3->field_8;\n
                a3->field_8 = &a2[2];\n
                v0 = a2;\n
            }\n
            else\n
            {\n
                a3 = v1;\n
                a2 = v2;\n
                v64 = a2 + a3->field_10;\n
                *(&a3->field_0) = a2 + 8;\n
                v0 = v64;\n
            }\n
            v36 = *(v0);\n
            cgc_output_number_printf(v36, 16, v37, v38);\n
            goto LABEL_403658;\n
        }\n
    }\n
    return v39;\n
}\n
", "4208305:sub_4036b1": null, "4208320:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    char v2;  // [bp-0x61]\n
    char v3;  // [bp-0x51]\n
    char v4;  // [bp-0x41]\n
    char v5;  // [bp-0x31]\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x1c], Other Possible Types: unsigned long\n
    struct struct_0 **v9;  // rax\n
    unsigned int *v10;  // rax\n
    struct struct_0 **v11;  // rax\n
    unsigned int *v12;  // rax\n
\n
    v7 = a2;\n
    v6 = a4;\n
    if (v7 >= a3)\n
    {\n
        cgc_output_number_sprintf(a0, a1, (0 CONCAT v7) /m a3, a3, v6 - 1, a5);\n
        v7 = (0 CONCAT v7) /m a3 >> 32;\n
    }\n
    if (v7 < a3 && v6 > 0)\n
    {\n
        while (true)\n
        {\n
            v6 = v6 - 1;\n
            if (!v6)\n
                break;\n
            if ((a5 & 1))\n
            {\n
                v5 = 48;\n
                *(a1)->field_0 = v5;\n
            }\n
            else\n
            {\n
                v4 = 32;\n
                *(a1)->field_0 = v4;\n
            }\n
            v9 = a1;\n
            *(v9) = *(v9) + 1;\n
            v10 = a0;\n
            *(v10) = *(v10) + 1;\n
        }\n
    }\n
    if ((a5 & 2))\n
    {\n
        if (v7 < 10)\n
            v1 = v7 + 48;\n
        else\n
            v1 = v7 + 55;\n
        v3 = v1;\n
        *(a1)->field_0 = v3;\n
    }\n
    else\n
    {\n
        if (v7 < 10)\n
            v0 = v7 + 48;\n
        else\n
            v0 = v7 + 87;\n
        v2 = v0;\n
        *(a1)->field_0 = v2;\n
    }\n
    v11 = a1;\n
    *(v11) = *(v11) + 1;\n
    v12 = a0;\n
    *(v12) = *(v12) + 1;\n
    return a0;\n
}\n
", "4208784:cgc_sprintf": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x1c0], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x1b8]\n
    unsigned int v2;  // [bp-0x1ac]\n
    unsigned int *v3;  // [bp-0x1a8], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x1a0]\n
    unsigned int v5;  // [bp-0x194]\n
    unsigned long v6;  // [bp-0x190]\n
    struct struct_0 **v7;  // [bp-0x188]\n
    struct_1 *v8;  // [bp-0x180]\n
    unsigned int v9;  // [bp-0x174]\n
    unsigned int v10;  // [bp-0x170]\n
    unsigned int v11;  // [bp-0x16c]\n
    char v12;  // [bp-0x168]\n
    unsigned long v13;  // [bp-0x158]\n
    unsigned long v14;  // [bp-0x150]\n
    unsigned long v15;  // [bp-0x148]\n
    unsigned long v16;  // [bp-0x140]\n
    int v17;  // [bp-0x138]\n
    int v18;  // [bp-0x128]\n
    int v19;  // [bp-0x118]\n
    int v20;  // [bp-0x108]\n
    int v21;  // [bp-0xf8]\n
    int v22;  // [bp-0xe8]\n
    int v23;  // [bp-0xd8]\n
    int v24;  // [bp-0xc8]\n
    char v25;  // [bp-0xa9]\n
    char v26;  // [bp-0x99]\n
    char v27;  // [bp-0x89]\n
    char v28;  // [bp-0x79]\n
    char v29;  // [bp-0x69]\n
    char v30;  // [bp-0x59]\n
    unsigned int v31;  // [bp-0x58]\n
    unsigned int v32;  // [bp-0x54]\n
    unsigned long v33;  // [bp-0x50]\n
    unsigned long v34;  // [bp-0x48]\n
    unsigned int v35;  // [bp-0x38]\n
    unsigned int v36;  // [bp-0x34]\n
    unsigned int v37;  // [bp-0x30]\n
    unsigned int v38;  // [bp-0x2c]\n
    unsigned int v39;  // [bp-0x28]\n
    unsigned int v40;  // [bp-0x24]\n
    char *v41;  // [bp-0x20]\n
    char *v42;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v43;  // [bp-0x10], Other Possible Types: unsigned long\n
    char v44;  // [bp-0x8]\n
    unsigned long v45;  // [bp+0x8]\n
    unsigned long long v46;  // rbp\n
    char v47;  // al\n
    int v48;  // xmm0\n
    int v49;  // xmm1\n
    int v50;  // xmm2\n
    int v51;  // xmm3\n
    int v52;  // xmm4\n
    int v53;  // xmm5\n
    int v54;  // xmm6\n
    int v55;  // xmm7\n
    unsigned long v56;  // r9\n
    char *v57;  // rax\n
    char *v58;  // rax\n
    struct_1 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned int *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned int *v63;  // rdx\n
    struct_1 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    struct struct_0 **v66;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v67;  // rcx\n
    struct_1 *v68;  // rcx\n
    unsigned long long v69;  // rdx\n
    unsigned int *v70;  // rax\n
    struct_1 *v71;  // rcx\n
    unsigned int *v72;  // rdx\n
    char *v73;  // rax\n
\n
    v46 = &v44;\n
    if (v47)\n
    {\n
        v17 = v48;\n
        v18 = v49;\n
        v19 = v50;\n
        v20 = v51;\n
        v21 = v52;\n
        v22 = v53;\n
        v23 = v54;\n
        v24 = v55;\n
    }\n
    v16 = v56;\n
    v15 = a4;\n
    v14 = a3;\n
    v13 = a2;\n
    v43 = a0;\n
    v42 = a1;\n
    v38 = 0;\n
    v37 = 0;\n
    v36 = 0;\n
    v34 = &v12;\n
    v33 = &v45;\n
    v32 = 48;\n
    v31 = 16;\n
    while (*(v42))\n
    {\n
        v57 = v42;\n
        v42 = v57 + 1;\n
        v30 = *(v57);\n
        if (v30 != 37)\n
        {\n
            v25 = v30;\n
            *(v43) = v25;\n
            v43 += 1;\n
            v38 += 1;\n
LABEL_403d37:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v58 = v42;\n
                    v42 = v58 + 1;\n
                    v30 = *(v58);\n
                    v11 = v30;\n
                    if (v11 != 48)\n
                        break;\n
                    v37 |= 1;\n
                }\n
                if (v11 - 49 >= 9)\n
                    break;\n
                v36 = cgc_strtol(v42 - 1, &v42, 10);\n
            }\n
            v10 = v30;\n
            if (v10 == 37)\n
            {\n
                v29 = 37;\n
                *(v43) = v29;\n
                v43 += 1;\n
                v38 += 1;\n
                goto LABEL_403cf0;\n
            }\n
            if (v10 == 88)\n
            {\n
                v37 |= 2;\n
            }\n
            else\n
            {\n
                if (v10 == 100)\n
                {\n
                    v4 = &v31;\n
                    v5 = v31;\n
                    if (v5 <= 40)\n
                    {\n
                        v59 = v4;\n
                        v60 = v5;\n
                        v61 = v60 + v59->field_10;\n
                        *(&v59->field_0) = v60 + 8;\n
                        v3 = v61;\n
                    }\n
                    else\n
                    {\n
                        v62 = v4;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[2];\n
                        v3 = v63;\n
                    }\n
                    v40 = *(v3);\n
                    if (v40 < 0)\n
                    {\n
                        v27 = 45;\n
                        *(v43) = v27;\n
                        v43 += 1;\n
                        v38 += 1;\n
                        v40 = -(v40);\n
                    }\n
                    cgc_output_number_sprintf(&v38, &v43, v40, 10, v36, v37);\n
                    goto LABEL_403cf0;\n
                }\n
                if (v10 == 115)\n
                {\n
                    v8 = &v31;\n
                    v9 = v31;\n
                    if (v9 <= 40)\n
                    {\n
                        v64 = v8;\n
                        v65 = v9;\n
                        v66 = v65 + v64->field_10;\n
                        *(&v64->field_0) = v65 + 8;\n
                    }\n
                    else\n
                    {\n
                        v67 = v8;\n
                        v66 = v67->field_8;\n
                        v67->field_8 = v66 + 8;\n
                    }\n
                    v7 = v66;\n
                    v41 = &*(v7)->field_0;\n
                    v39 = 0;\n
                    while (true)\n
                    {\n
                        v6 = v39;\n
                        if (v6 >= cgc_strlen(v41))\n
                            break;\n
                        v28 = v41[v39];\n
                        *(v43) = v28;\n
                        v43 += 1;\n
                        v38 += 1;\n
                        v39 += 1;\n
                    }\n
                    goto LABEL_403cf0;\n
                }\n
                if (v10 != 120)\n
                {\n
                    v26 = v30;\n
                    *(v43) = v26;\n
                    v43 += 1;\n
                    v38 += 1;\n
LABEL_403cf0:\n
                    v36 = 0;\n
                    v37 = 0;\n
                    goto LABEL_403d37;\n
                }\n
            }\n
            v1 = &v31;\n
            v2 = v31;\n
            if (v2 > 40)\n
            {\n
                v71 = v1;\n
                v72 = v71->field_8;\n
                v71->field_8 = &v72[2];\n
                v0 = v72;\n
            }\n
            else\n
            {\n
                v68 = v1;\n
                v69 = v2;\n
                v70 = v69 + v68->field_10;\n
                *(&v68->field_0) = v69 + 8;\n
                v0 = v70;\n
            }\n
            v35 = *(v0);\n
            cgc_output_number_sprintf(&v38, &v43, v35, 16, v36, v37);\n
            goto LABEL_403cf0;\n
        }\n
    }\n
    v73 = v43;\n
    v43 = v73 + 1;\n
    *(v73) = 0;\n
    return v38;\n
}\n
", "4210010:sub_403d5a": null, "4210016:cgc_realloc": "long long cgc_realloc(unsigned int a0, unsigned int a1)\n
{\n
    unsigned long long *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = cgc_malloc(a1);\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        *(&v1) = cgc_malloc(a1);\n
        if (!*(&v1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v0 = a0 - 24;\n
        if (a1 >= *(v0) - 24)\n
            cgc_memcpy(*(&v1), a0, *(v0) - 24);\n
        else\n
            cgc_memcpy(*(&v1), a0, a1);\n
        cgc_free(a0);\n
        v2 = *(&v1);\n
        return v2;\n
    }\n
    else\n
    {\n
        cgc_free(a0);\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4210241:sub_403e41": null, "4210256:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v3 = v0;\n
        v0 = v3 + 1;\n
        if (*(v3) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4210347:sub_403eab": null, "4210352:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(v1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v1) - *(v2);\n
}\n
", "4210491:sub_403f3b": null, "4210496:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    v1 = a1;\n
    for (v0 = 0; *(v1); *((a0 + v4)) = *(v3))\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4210591:sub_403f9f": null, "4210592:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1);\n
    return v0 - a0;\n
}\n
", "4210651:sub_403fdb": null, "4210656:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a1;\n
    if (!*(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &*(a0)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v1))\n
            v0 = cgc_strchr(v2, *(v1)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    v2 = &*(a0)->field_0;\n
    if (!*(v1))\n
    {\n
        *(a0) = 0;\n
    }\n
    else\n
    {\n
        *(v1) = 0;\n
        *(a0) = &v1[1];\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4210877:sub_4040bd": null, "4210880:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    char v0[2];  // [bp-0x50], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x48]\n
    char v2;  // [bp-0x47]\n
    char v3;  // [bp-0x46]\n
    char v4;  // [bp-0x45]\n
    unsigned int v5;  // [bp-0x44]\n
    char v6[2];  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x34]\n
    unsigned int v8;  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x2c]\n
    unsigned int v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    unsigned int v12;  // [bp-0x1c]\n
\n
    v12 = a2;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = a0;\n
    if (v12 == 1)\n
    {\n
LABEL_40410a:\n
    }\n
    else\n
    {\n
        if (!(v12 <= 36))\n
            goto LABEL_40410a;\n
        if (v12 < 0)\n
            goto LABEL_40410a;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = v12;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                v12 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_404214:\n
                v6 += 2;\n
                v12 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_404214;\n
                v6 += 1;\n
                v12 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_404295;\n
                    v6 += 2;\n
                    v12 = 16;\n
                }\n
LABEL_404295:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_404401;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4043be;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4043be:\n
                if (v8 >= v12)\n
                    goto LABEL_404401;\n
                v10 *= v12;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                *(&v6) = v6 + 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4043b5;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4043b5:\n
                v8 += 10;\n
                goto LABEL_4043be;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_40432f;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_40432f:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_404401:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a1)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = a0;\n
    *(a1) = v0;\n
    return v10;\n
}\n
", "4211795:sub_404453": null, "4211808:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4211849:sub_404489": null, "4211856:cgc_init_sheet": "extern unsigned long long _g_sheet;\n
extern unsigned long long g_sheet;\n
\n
long long cgc_init_sheet()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // ecx\n
\n
    v0 = 0;\n
    _g_sheet = cgc_calloc(70200, 24);\n
    if (!_g_sheet)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    g_sheet = cgc_malloc(5616);\n
    if (!g_sheet)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    for (v2 = 0; v2 < 702; v2 = v2 + 1)\n
    {\n
        *((g_sheet + v2 * 8)) = _g_sheet + v2 * 2400;\n
    }\n
    for (v2 = 0; v2 < 702; v2 = v2 + 1)\n
    {\n
        for (v1 = 0; v1 < 100; v1 += 1)\n
        {\n
            v5 = v0;\n
            v0 = v5 + 1;\n
            *((*((g_sheet + v2 * 8)) + v1 * 24)) = v5;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4212167:sub_4045c7": null, "4212176:cgc_show_cell": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_40a3fc;\n
\n
long long cgc_show_cell(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    void* v0;  // [bp-0x50]\n
    struct_0 *v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x40]\n
    char v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = 0;\n
    v1 = cgc_get_cell(a0);\n
    if (!v1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (!v1->field_4)\n
    {\n
        v4 = &g_40a3fc;\n
        return v4;\n
    }\n
    else if (v1->field_4 == 1)\n
    {\n
        v4 = \"!VALUE\";\n
        return v4;\n
    }\n
    else if (a1)\n
    {\n
        v4 = v1->field_8;\n
        return v4;\n
    }\n
    else if (v1->field_10)\n
    {\n
        v0 = 0;\n
        cgc_eval_formula(v1->field_10, &v3, &v0, v1->field_0);\n
        v2 = 0;\n
        if (*(&v3))\n
        {\n
            v4 = \"!FORMULA: CIRREF/STR/DIV0\";\n
            return v4;\n
        }\n
        cgc_ftoa(a2, a3);\n
        v4 = a2;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = v1->field_8;\n
        return v4;\n
    }\n
}\n
", "4212465:sub_4046f1": null, "4212480:cgc_get_cell": "extern unsigned long long g_sheet;\n
\n
long long cgc_get_cell(unsigned long long a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    char v5[2];  // [bp-0x1e]\n
    char v6;  // [bp-0x1b]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v9;  // xmm1lq\n
\n
    v4 = 0;\n
    v3 = 0;\n
    if (cgc_get_rowcol(a0, &v6, v5, 0) == -1)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v1 = cgc_strlen(&v6);\n
    for (v2 = 0; v2 < v1; v2 += 1)\n
    {\n
        v0 = (&v6)[v2] - 64;\n
        cgc_pow();\n
        v9 = v4;\n
        v4 = (0 CONCAT v0) * (0 CONCAT 0x403a000000000000) + xmm1<16>;\n
    }\n
    v4 -= 1;\n
    v3 = cgc_strtol(v5, NULL, 10);\n
    v7 = *((g_sheet + v4 * 8)) + v3 * 24;\n
    return v7;\n
}\n
", "4212737:sub_404801": null, "4212752:cgc_eval_formula": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char *field_8;\n
    unsigned long long field_10;\n
} struct_3;\n
\n
long long cgc_eval_formula(char *a0, unsigned int *a1, struct struct_0 **a2, unsigned long a3)\n
{\n
    unsigned long long v0;  // [bp-0x4c0]\n
    char *v1;  // [bp-0x4b8]\n
    struct_1 *v2;  // [bp-0x4b0]\n
    unsigned int v3;  // [bp-0x4a4]\n
    struct_1 *v4;  // [bp-0x498]\n
    unsigned long long v5;  // [bp-0x488]\n
    struct_3 *v6;  // [bp-0x480]\n
    void* v7;  // [bp-0x478], Other Possible Types: unsigned long long\n
    struct_0 *v8;  // [bp-0x470], Other Possible Types: unsigned long, struct_2 *\n
    void* v9;  // [bp-0x468]\n
    void* v10;  // [bp-0x460]\n
    unsigned long v11;  // [bp-0x458]\n
    unsigned long long v12;  // [bp-0x450]\n
    unsigned int v13;  // [bp-0x444]\n
    void* v14;  // [bp-0x440], Other Possible Types: unsigned long\n
    void* v15;  // [bp-0x438], Other Possible Types: unsigned long\n
    unsigned long long v16;  // [bp-0x430]\n
    char v17;  // [bp-0x428]\n
    char v18;  // [bp-0x228]\n
    int v20;  // xmm0\n
\n
    v16 = 0x200;\n
    v15 = 0;\n
    v20 = 0;\n
    v14 = 0;\n
    *(a1) = 0;\n
    if (cgc_itoa(a3, &v17, v16))\n
    {\n
        v4 = &v17;\n
        cgc_push_copy(a2, v4, cgc_strlen(&v17) + 1);\n
        v11 = cgc_infixtorpn(a0, cgc_strlen(a0) + 1);\n
        v10 = 0;\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 0;\n
        while (true)\n
        {\n
            if (!v11)\n
            {\n
                v5 = cgc_pop_copy(&v9);\n
                if (!v9)\n
                {\n
                    cgc_atof(v5, v16, a1);\n
                    v14 = v20;\n
                    if (!*(a1))\n
                        return cgc_free(cgc_pop_copy(a2));\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                v12 = cgc_dequeue_copy(&v11);\n
                v13 = cgc_parsearg(v12);\n
                v3 = v13;\n
                if (v3 == 4)\n
                {\n
                    cgc_push(&v9, v12);\n
                }\n
                else if (v3 == 5)\n
                {\n
                    v7 = cgc_get_op(v12);\n
                    if (cgc_eval_function(v7, &v9, &v18, v16) == -1)\n
                        break;\n
                    cgc_push_copy(&v9, &v18, v16);\n
                }\n
                else\n
                {\n
                    if (v3 != 6)\n
                        break;\n
                    v8 = &*(a2)->field_0;\n
                    v6 = cgc_get_cell(v12);\n
                    if (!v6)\n
                        break;\n
                    for (; v8; v8 = v8->field_8)\n
                    {\n
                        if (!cgc_itoa(v6->field_0, &v17, v16))\n
                            goto LABEL_404c60;\n
                        v1 = v8->field_0;\n
                        v2 = &v17;\n
                        if (!cgc_memcmp(v1, v2, cgc_strlen(v8->field_0) + 1))\n
                            goto LABEL_404c60;\n
                    }\n
                    if (!v6->field_4)\n
                    {\n
                        cgc_push_copy(&v9, \"0\", 2);\n
                        goto LABEL_404beb;\n
                    }\n
                    if (v6->field_4 == 4)\n
                    {\n
                        v0 = v6->field_8;\n
                        cgc_push_copy(&v9, v0, cgc_strlen(v6->field_8) + 1);\n
                        goto LABEL_404beb;\n
                    }\n
                    if (v6->field_4 != 7)\n
                        break;\n
                    cgc_eval_formula(v6->field_10, a1, a2, v6->field_0);\n
                    v15 = v20;\n
                    if (!(!*(a1)))\n
                        break;\n
                    *(&v20) = v15;\n
                    cgc_ftoa(&v18, v16);\n
                    cgc_push_copy(&v9, &v18, v16);\n
LABEL_404beb:\n
                }\n
            }\n
        }\n
    }\n
LABEL_404c60:\n
    *(a1) = 1;\n
    v15 = 0;\n
    cgc_clear_queue(&v11);\n
    cgc_clear_queue(&v10);\n
    cgc_clear_stack(&v9);\n
    return cgc_free(cgc_pop_copy(a2));\n
}\n
", "4213949:sub_404cbd": null, "4213952:cgc_set_cell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
    char padding_9[7];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_set_cell(unsigned long long a0, char *a1, unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a1 && cgc_strlen(a1) && cgc_strlen(a1) < a2)\n
    {\n
        v0 = cgc_get_cell(a0);\n
        if (!v0)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        if (v0->field_4)\n
        {\n
            cgc_free(*(&v0->field_8));\n
            *(&v0->field_8) = 0;\n
            v0->field_4 = 0;\n
            v0->field_10 = 0;\n
        }\n
        *(&v0->field_8) = cgc_malloc(cgc_strlen(a1) + 1);\n
        if (!*(&v0->field_8))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        cgc_strcpy(*(&v0->field_8), a1);\n
        if (cgc_strlen(a1) >= 2 && *(a1) == 61)\n
        {\n
            v0->field_10 = *(&v0->field_8) + 1;\n
            v0->field_4 = 7;\n
            goto LABEL_404e35;\n
        }\n
        v0->field_4 = cgc_parsearg(*(&v0->field_8));\n
        if (v0->field_4 != 4)\n
            v0->field_4 = 2;\n
LABEL_404e35:\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4214346:sub_404e4a": null, "4214352:cgc_parsearg": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_parsearg(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    struct_0 *v6;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0xc]\n
    struct_0 *v9;  // rax\n
\n
    v6 = a0;\n
    if (!v6)\n
    {\n
        v7 = 1;\n
        return v7;\n
    }\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = v6; *(v6); v6 += 1)\n
    {\n
        if (*(v6) >= 48 && *(v6) <= 57)\n
        {\n
            v5 += 1;\n
            goto LABEL_404f5b;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v5 += 1;\n
            v3 += 1;\n
        }\n
        else if (*(v6) == 46)\n
        {\n
            v5 += 1;\n
            v4 += 1;\n
        }\n
        else if (*(v6) == 34)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v1 += 1;\n
        }\n
LABEL_404f5b:\n
    }\n
    v6 = v0;\n
    if (v2)\n
    {\n
        if (v2 == 2)\n
        {\n
            v9 = v6;\n
            v6 = &v9->field_0;\n
            if (v9->field_0 == 34)\n
            {\n
                v7 = 3;\n
                return v7;\n
            }\n
        }\n
        v7 = 2;\n
        return v7;\n
    }\n
    else if (v1)\n
    {\n
        if (v4 <= 1 && v3 <= 1)\n
        {\n
            if (cgc_valid_cell_id(v6))\n
            {\n
                if (cgc_get_op(v6))\n
                {\n
                    v7 = 5;\n
                    return v7;\n
                }\n
                v7 = 2;\n
                return v7;\n
            }\n
            else\n
            {\n
                v7 = 6;\n
                return v7;\n
            }\n
        }\n
        v7 = 2;\n
        return v7;\n
    }\n
    else if (v5)\n
    {\n
        if (v4 <= 1 && v3 <= 1)\n
        {\n
            if (v4 && v5 == 1)\n
                goto LABEL_405090;\n
            if (v4 && v3)\n
            {\n
                if (!(v5 == 2))\n
                    goto LABEL_40509c;\n
LABEL_405090:\n
                v7 = 2;\n
                return v7;\n
            }\n
LABEL_40509c:\n
            if (v3 && v5 == 1)\n
            {\n
                v7 = 5;\n
                return v7;\n
            }\n
            v7 = 4;\n
            return v7;\n
        }\n
        v7 = 2;\n
        return v7;\n
    }\n
    else\n
    {\n
        v7 = 1;\n
        return v7;\n
    }\n
}\n
", "4215000:sub_4050d8": null, "4215008:cgc_clear_cell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_clear_cell(unsigned long long a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = cgc_get_cell(a0);\n
    if (!v0)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (v0->field_4)\n
    {\n
        cgc_free(*(&v0->field_8));\n
        *(&v0->field_8) = 0;\n
        v0->field_4 = 0;\n
        v0->field_10 = 0;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4215134:sub_40515e": null, "4215136:cgc_print_assigned_cells": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned long long g_sheet;\n
\n
long long cgc_print_assigned_cells(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    struct_0 *v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long *v5;  // [bp-0x18], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xf]\n
    char v7;  // [bp-0xb]\n
    char v8;  // [bp-0xa]\n
    char v9;  // [bp-0x9]\n
\n
    for (v5 = 0; v5 < 702; v5 = v5 + 1)\n
    {\n
        for (v4 = 0; v4 < 100; v4 += 1)\n
        {\n
            v2 = *((g_sheet + v5 * 8)) + v4 * 24;\n
            if (v2->field_4)\n
            {\n
                v3 = v2->field_0;\n
                cgc_itoa((0 CONCAT v3) /m 100 >> 32, &v6, 4, 100);\n
                v9 = 0;\n
                if (!(0 CONCAT v3) /m 2600)\n
                    v1 = 0;\n
                else\n
                    v1 = ((0 CONCAT (0 CONCAT v3) /m 100) /m 26 >> 32) + 65;\n
                v8 = v1;\n
                if (!(0 CONCAT v3) /m 2600)\n
                    v0 = ((0 CONCAT (0 CONCAT v3) /m 100) /m 26 >> 32) + 65;\n
                else\n
                    v0 = ((0 CONCAT (0 CONCAT v3) /m 2600 - 1) /m 26 >> 32) + 65;\n
                v7 = v0;\n
                cgc_printf(\"%s%s=%s\\n
\", &v7, &v6, v2->field_8, a4);\n
            }\n
        }\n
    }\n
    return v5 + 1;\n
}\n
", "4215506:sub_4052d2": null, "4215520:cgc_get_op": "extern unsigned long long operators;\n
\n
long long cgc_get_op(char *a0)\n
{\n
    char **v0;  // [bp-0x38], Other Possible Types: unsigned long, unsigned long long *\n
    unsigned long v1;  // [bp-0x30]\n
    unsigned long v2;  // [bp-0x28]\n
    char *v3;  // [bp-0x20]\n
    unsigned long long *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = cgc_malloc(cgc_strlen(a0) + 1);\n
    cgc_strcpy(v3, a0);\n
    v1 = cgc_strlen(v3);\n
    for (v2 = 0; v2 < v1; v2 += 1)\n
    {\n
        v3[v2] = cgc_toupper(v3[v2]);\n
    }\n
    v0 = 0;\n
    for (v0 = &operators; *(v0); v0 += 16)\n
    {\n
        if (!cgc_strcmp(*(v0), v3))\n
            break;\n
    }\n
    cgc_free(v3);\n
    if (!*(v0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = v0;\n
    return v4;\n
}\n
", "4215817:sub_405409": null, "4215824:cgc_infixtorpn": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_infixtorpn(unsigned int a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0xe0]\n
    struct_0 *v1;  // [bp-0xd8]\n
    char *v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    char *v4;  // [bp-0xc0]\n
    char *v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    char v7;  // [bp-0xa8]\n
    unsigned int *v8;  // [bp-0x90]\n
    char v9;  // [bp-0x81]\n
    void* v10;  // [bp-0x80], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x78]\n
    void* v12;  // [bp-0x70]\n
    unsigned int v13;  // [bp-0x64]\n
    unsigned int v14;  // [bp-0x60]\n
    char v15;  // [bp-0x53]\n
    char v16;  // [bp-0x51]\n
    char *v17;  // [bp-0x50], Other Possible Types: unsigned long\n
    char *v18;  // [bp-0x48]\n
    char *v19;  // [bp-0x40]\n
    unsigned int *v20;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v21;  // [bp-0x30]\n
    unsigned int v22;  // [bp-0x24]\n
    unsigned int v23;  // [bp-0x20]\n
    unsigned int v24;  // [bp-0x1c]\n
    unsigned long long v26;  // rax\n
    unsigned int *v27;  // rax\n
    unsigned long v28;  // rcx\n
    unsigned long v29;  // rcx\n
\n
    v24 = 0;\n
    v23 = 16;\n
    v22 = -1;\n
    v21 = cgc_malloc(a1);\n
    v20 = cgc_malloc(v23 * 4);\n
    v19 = \"():,+-*/\";\n
    memset(&v15, 0, 2);\n
    v12 = 0;\n
    v11 = 0;\n
    cgc_memcpy(v21, a0, a1);\n
    if (cgc_sanitize_formula(v21, a1))\n
    {\n
LABEL_405b38:\n
        cgc_free(v21);\n
        cgc_free(v20);\n
        return v11;\n
    }\n
    v17 = v21;\n
    v18 = v17;\n
    v10 = 0;\n
    v9 = 0;\n
    while (true)\n
    {\n
        v26 = v10;\n
        v10 = v26 + 1;\n
        if (v26 >= a1)\n
        {\n
LABEL_405aaa:\n
            while (v12)\n
            {\n
                if (!cgc_strcmp(cgc_peek_top(v12), \"(\"))\n
                {\n
LABEL_405b00:\n
                    goto LABEL_405b24;\n
                }\n
                else\n
                {\n
                    if (!cgc_strcmp(cgc_peek_top(v12), \")\"))\n
                        goto LABEL_405b00;\n
                    cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
                }\n
            }\n
LABEL_405b24:\n
            cgc_clear_queue(&v11);\n
            cgc_clear_stack(&v12);\n
            goto LABEL_405b38;\n
        }\n
        if (!cgc_strchr(v19, *(v17)) && *(v17))\n
        {\n
            v9 = *(v17);\n
            v17 += 1;\n
            continue;\n
        }\n
        if (cgc_strchr(v19, *(v17)))\n
            break;\n
LABEL_4055a2:\n
        v9 = *(v17);\n
        v16 = *(v17);\n
        *(v17) = 0;\n
        v13 = cgc_parsearg(v18);\n
        v6 = v13 - 1;\n
        switch (v6)\n
        {\n
        case 0:\n
            break;\n
        case 3: case 5:\n
            v5 = v18;\n
            cgc_enqueue_copy(&v11, v5, cgc_strlen(v18) + 1);\n
            break;\n
        case 4:\n
            if (v22 == v23 - 1)\n
            {\n
                v23 *= 2;\n
                v8 = cgc_realloc(v20, v23 * 4);\n
                if (!v8)\n
                    goto LABEL_405b24;\n
                v20 = v8;\n
            }\n
            v22 += 1;\n
            *((v20 + v22 * 4)) = 0;\n
            v4 = v18;\n
            cgc_push_copy(&v12, v4, cgc_strlen(v18) + 1);\n
            break;\n
        default:\n
            goto LABEL_405b24;\n
        }\n
        v24 = 0;\n
        v3 = v16;\n
        switch (v3)\n
        {\n
        case 0:\n
            goto LABEL_405aaa;\n
        case 40:\n
            cgc_push_copy(&v12, \"(\", cgc_strlen(\"(\") + 1);\n
            break;\n
        case 41:\n
            v24 = 1;\n
            while (v12)\n
            {\n
                if (cgc_strcmp(cgc_peek_top(v12), \"(\"))\n
                {\n
                    cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
                }\n
                else\n
                {\n
                    *(&v14) = cgc_pop_copy(&v12);\n
                    cgc_free(*(&v14));\n
                    v24 = 0;\n
                    break;\n
                }\n
            }\n
            if (cgc_peek_top(v12) && v22 >= 0)\n
            {\n
                v2 = v19;\n
                if (!cgc_strchr(v2, *(cgc_peek_top(v12))))\n
                {\n
                    if (cgc_parsearg(cgc_peek_top(v12)) == 5)\n
                    {\n
                        v29 = v22;\n
                        v22 = v29 - 1;\n
                        cgc_enqueue_copy(&v11, cgc_itoa(*((v20 + v29 * 4)) + 1, &v7, 16, v29), 16);\n
                        cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
                    }\n
                    break;\n
                }\n
            }\n
            break;\n
        case 42: case 47:\n
            v15 = v16;\n
            while (v12)\n
            {\n
                if (cgc_strcmp(cgc_peek_top(v12), \"/\") && cgc_strcmp(cgc_peek_top(v12), \"*\"))\n
                    break;\n
                cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
            }\n
            v0 = &v15;\n
            cgc_push_copy(&v12, v0, cgc_strlen(&v15) + 1);\n
            break;\n
        case 43: case 45:\n
            v15 = v16;\n
            while (v12)\n
            {\n
                if (cgc_strcmp(cgc_peek_top(v12), \"-\") && cgc_strcmp(cgc_peek_top(v12), \"+\") && cgc_strcmp(cgc_peek_top(v12), \"+\") && cgc_strcmp(cgc_peek_top(v12), \"/\"))\n
                    break;\n
                cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
            }\n
            v1 = &v15;\n
            cgc_push_copy(&v12, v1, cgc_strlen(&v15) + 1);\n
            break;\n
        case 44:\n
            v24 = 1;\n
            while (v12)\n
            {\n
                if (cgc_strcmp(cgc_peek_top(v12), \"(\"))\n
                {\n
                    cgc_enqueue(&v11, cgc_pop_copy(&v12));\n
                }\n
                else\n
                {\n
                    if (v22 >= 0)\n
                    {\n
                        v27 = v20;\n
                        v28 = v22;\n
                        v27[v28] = v27[v28] + 1;\n
                    }\n
                    v24 = 0;\n
                    break;\n
                }\n
            }\n
            break;\n
        default:\n
            goto LABEL_405b24;\n
        }\n
        if (!(!v24))\n
            goto LABEL_405b24;\n
        v17 += 1;\n
        v18 = v17;\n
    }\n
    if (*(v17) != 45)\n
    {\n
LABEL_40559d:\n
        goto LABEL_4055a2;\n
    }\n
    if (v10 > 1)\n
    {\n
        if (v9 == 41)\n
        {\n
LABEL_405598:\n
            goto LABEL_40559d;\n
        }\n
        else if (v9 >= 48 && v9 <= 57)\n
        {\n
            goto LABEL_405598;\n
        }\n
    }\n
    v9 = *(v17);\n
    v17 += 1;\n
    continue;\n
}\n
", "4217687:sub_405b57": null, "4217696:cgc_eval_function": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_eval_function(struct_1 *a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    unsigned long v0;  // [bp-0x78]\n
    void* v1;  // [bp-0x70]\n
    unsigned long long v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x5c]\n
    void* v4;  // [bp-0x58], Other Possible Types: unsigned long, unsigned long long\n
    void* v5;  // [bp-0x50], Other Possible Types: unsigned long\n
    unsigned long long v6;  // [bp-0x48]\n
    unsigned long v7;  // [bp-0x40]\n
    void* v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0xc]\n
\n
    if (a0 && a2 && a3 > 2)\n
    {\n
        v8 = 0;\n
        v6 = a0->field_0;\n
        v4 = 0;\n
        v3 = 0;\n
        v1 = 0;\n
        if (cgc_is_arg_arithmetic(v6))\n
        {\n
            v4 = 2;\n
        }\n
        else\n
        {\n
            v0 = cgc_pop_copy(a1);\n
            if (!v0)\n
                goto LABEL_405d39;\n
            v4 = cgc_strtol(v0, NULL, 10);\n
            cgc_free(v0);\n
        }\n
        v5 = 0;\n
        while (true)\n
        {\n
            if (v5 >= v4)\n
            {\n
                a0->field_8(&v1, &v3);\n
                v8 = 0;\n
                if (!v3)\n
                {\n
                    if (cgc_ftoa(a2, a3))\n
                    {\n
                        v9 = 0;\n
                        return v9;\n
                    }\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                v7 = cgc_pop_copy(a1);\n
                if (cgc_parsearg(v7) == 5)\n
                {\n
                    v2 = cgc_get_op(v7);\n
                    cgc_free(v7);\n
                    if (cgc_eval_function(v2, a1, a2, a3))\n
                        break;\n
                    cgc_push_copy(&v1, a2, a3);\n
                }\n
                else if (cgc_push(&v1, v7))\n
                {\n
                    break;\n
                }\n
                v5 += 1;\n
            }\n
        }\n
LABEL_405d39:\n
        cgc_clear_stack(&v1);\n
        v9 = -1;\n
        return v9;\n
    }\n
    v9 = -1;\n
    return v9;\n
}\n
", "4218196:sub_405d54": null, "4218208:cgc_is_arg_arithmetic": "long long cgc_is_arg_arithmetic(char *a0)\n
{\n
    char v0;  // [bp-0x11]\n
\n
    v0 = 1;\n
    if (!cgc_memcmp(a0, \"+\", 2))\n
        return v0 & 1;\n
    v0 = 1;\n
    if (!cgc_memcmp(a0, \"-\", 2))\n
        return v0 & 1;\n
    v0 = 1;\n
    if (cgc_memcmp(a0, \"/\", 2))\n
    {\n
        v0 = !cgc_memcmp(a0, \"*\", 2);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4218375:sub_405e07": null, "4218384:cgc_handle_op_avg": "double cgc_handle_op_avg(long long a0, long long a1)\n
{\n
    unsigned long long v0;  // [bp-0x40]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned long v1;  // [bp-0x38]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long, unsigned long long\n
    int v5;  // xmm0, Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    if (*(a0))\n
    {\n
        v5 = 0;\n
        v2 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        while (true)\n
        {\n
            if (!v1)\n
                goto LABEL_405eef;\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v5 = v5;\n
            cgc_free(v1);\n
            if (*(a1))\n
                break;\n
            xmm0<16> = ((0x0<64> CONCAT Load(addr=stack_base-48, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE)))\n
            v2 = v5;\n
            v1 = cgc_pop_copy(a0);\n
            v3 += 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        cgc_clear_stack(a0);\n
        *(a1) = 1;\n
        v2 = 0;\n
LABEL_405eef:\n
        if (v3)\n
            break;\n
        v3 = 1;\n
    }\n
    tmp_45 = DivV(tmp_47, tmp_46);\n
    return tmp_45;\n
}\n
", "4218685:sub_405f3d": null, "4218688:cgc_handle_op_count": "long long cgc_handle_op_count(unsigned long long *a0, unsigned int *a1)\n
{\n
    void* v3;  // [bp-0x28]\n
    unsigned long long v4;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (; !v4; v3 = 0)\n
    {\n
        v4 = 1;\n
        cgc_clear_stack(a0);\n
        *(a1) = 1;\n
    }\n
    return a1;\n
}\n
", "4218975:sub_40605f": null, "4218976:cgc_handle_op_max": "long long cgc_handle_op_max(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned int *v0;  // [bp-0x48]\n
    unsigned int *v1;  // [bp-0x40]\n
    unsigned int *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned long, unsigned long long\n
    int v7;  // xmm0\n
    unsigned int *v8;  // rax, Other Possible Types: unsigned long, unsigned long long\n
\n
    v5 = 0;\n
    v7 = 0;\n
    v4 = 0;\n
    if (*(a0))\n
    {\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!(!*(a1)))\n
                goto LABEL_406196;\n
            v5 += 1;\n
        }\n
        v8 = cgc_pop_copy(a0);\n
        v2 = v8;\n
        while (true)\n
        {\n
            if (!v2)\n
                goto LABEL_4061b3;\n
            v0 = v2;\n
            cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
            v3 = v7;\n
            cgc_free(v2);\n
            if (*(a1))\n
                break;\n
            *(&v7) = v3;\n
            if ((((CmpF(v7, v4) & 69) | ((CmpF(v7, v4) & 69) >> 6)) & 1) != 1)\n
            {\n
                *(&v7) = v3;\n
                v4 = v7;\n
            }\n
            v2 = cgc_pop_copy(a0);\n
            v8 = v5 + 1;\n
            v5 = v8;\n
        }\n
    }\n
    while (true)\n
    {\n
LABEL_406196:\n
        cgc_clear_stack(a0);\n
        v8 = a1;\n
        *(a1) = 1;\n
        v4 = 0;\n
LABEL_4061b3:\n
        if (v5)\n
            break;\n
        v5 = 1;\n
    }\n
    return v8;\n
}\n
", "4219350:sub_4061d6": null, "4219360:cgc_handle_op_median": "long long cgc_handle_op_median(unsigned long a0, unsigned long a1)\n
{\n
    int tmp_19;  // tmp #19\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    unsigned long v0;  // [bp-0xa0]\n
    unsigned long v1;  // [bp-0x98]\n
    unsigned long v2;  // [bp-0x90]\n
    unsigned long v3;  // [bp-0x88]\n
    unsigned long v4;  // [bp-0x80]\n
    unsigned long v5;  // [bp-0x78]\n
    unsigned int v6;  // [bp-0x6c]\n
    unsigned long v7;  // [bp-0x68]\n
    unsigned int v8;  // [bp-0x60]\n
    unsigned int v9;  // [bp-0x5c]\n
    unsigned long v10;  // [bp-0x58]\n
    unsigned long v11;  // [bp-0x50]\n
    unsigned long v12;  // [bp-0x48]\n
    unsigned long v13;  // [bp-0x40]\n
    unsigned long v14;  // [bp-0x38]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp-0x20]\n
    int v19;  // xmm0\n
    int v20;  // xmm0\n
    int v21;  // xmm0\n
\n
    v17 = 0;\n
    v16 = 0;\n
    if (*(a0))\n
    {\n
        v16 = 0;\n
        v19 = 0;\n
        v13 = 0;\n
        v10 = cgc_pop_copy(a0);\n
        v5 = v10;\n
        cgc_atof(v5, cgc_strlen(v10) + 1, a1);\n
        v12 = 0;\n
        if (*(a1))\n
        {\n
            cgc_free(v10);\n
        }\n
        else\n
        {\n
            cgc_push(&v16, v10);\n
            v17 += 1;\n
            v10 = cgc_pop_copy(a0);\n
            while (true)\n
            {\n
                if (!v10)\n
                {\n
                    v15 = v16;\n
                    v6 = 0;\n
                    if (!(v17 & 1))\n
                    {\n
                        for (v6 = 0; v6 < (v17 >> 1) - 1; v6 += 1)\n
                        {\n
                            v15 = *((v15 + 8));\n
                        }\n
                        v1 = *(v15);\n
                        cgc_atof(v1, cgc_strlen(*(v15)) + 1, a1);\n
                        xmm0<16> = (xmm0<16> + Conv(64->128, Load(addr=stack_base-64, size=8, endness=Iend_LE)))\n
                        v13 = v20;\n
                        v15 = *((v15 + 8));\n
                        v2 = *(v15);\n
                        cgc_atof(v2, cgc_strlen(*(v15)) + 1, a1);\n
                        v13 += v13;\n
                        tmp_19 = DivV(tmp_21, tmp_20);\n
                        v21 = tmp_19;\n
                    }\n
                    else\n
                    {\n
                        for (v6 = 0; v6 < v17 >> 1; v6 += 1)\n
                        {\n
                            v15 = *((v15 + 8));\n
                        }\n
                        v0 = *(v15);\n
                        cgc_atof(v0, cgc_strlen(*(v15)) + 1, a1);\n
                        xmm0<16> = (xmm0<16> + Conv(64->128, Load(addr=stack_base-64, size=8, endness=Iend_LE)))\n
                    }\n
                    v13 = v21;\n
                    goto LABEL_4065d9;\n
                }\n
                else\n
                {\n
                    v4 = v10;\n
                    cgc_atof(v4, cgc_strlen(v10) + 1, a1);\n
                    v12 = v19;\n
                    if (*(a1))\n
                        break;\n
                    v15 = v16;\n
                    v9 = 0;\n
                    v8 = 0;\n
                    for (v7 = 0; v15; v9 += 1)\n
                    {\n
                        v3 = *(v15);\n
                        cgc_atof(v3, cgc_strlen(*(v15)) + 1, a1);\n
                        v11 = v19;\n
                        v19 = 0;\n
                        *(&v19) = v11;\n
                        if ((CmpF(v19, v12) & 1))\n
                        {\n
                            v14 = v15;\n
                            v15 = *((v15 + 8));\n
                        }\n
                        else\n
                        {\n
                            if (v9)\n
                            {\n
                                v7 = cgc_malloc(16);\n
                                *(v7) = v10;\n
                                *((v7 + 8)) = v15;\n
                                *((v14 + 8)) = v7;\n
                            }\n
                            else\n
                            {\n
                                cgc_push(&v16, v10);\n
                            }\n
                            v8 = 1;\n
                            break;\n
                        }\n
                    }\n
                    if (!v8)\n
                    {\n
                        for (v15 = v16; *((v15 + 8)); v15 = *((v15 + 8)));\n
                        v7 = cgc_malloc(16);\n
                        *(v7) = v10;\n
                        *((v7 + 8)) = 0;\n
                        *((v15 + 8)) = v7;\n
                    }\n
                    v10 = cgc_pop_copy(a0);\n
                    v17 += 1;\n
                }\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        cgc_clear_stack(a0);\n
        *(a1) = 1;\n
        v13 = 0;\n
LABEL_4065d9:\n
        if (v17)\n
            break;\n
        v17 = 1;\n
    }\n
    return cgc_clear_stack(&v16);\n
}\n
", "4220426:sub_40660a": null, "4220432:cgc_handle_op_min": "long long cgc_handle_op_min(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned int *v0;  // [bp-0x48]\n
    unsigned int *v1;  // [bp-0x40]\n
    unsigned int *v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned long, unsigned long long\n
    int v7;  // xmm0\n
    unsigned int *v8;  // rax, Other Possible Types: unsigned long, unsigned long long\n
\n
    v5 = 0;\n
    v7 = 0;\n
    v4 = 0;\n
    if (*(a0))\n
    {\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!(!*(a1)))\n
                goto LABEL_40674a;\n
            v5 += 1;\n
        }\n
        v8 = cgc_pop_copy(a0);\n
        v2 = v8;\n
        while (true)\n
        {\n
            if (!v2)\n
                goto LABEL_406767;\n
            v0 = v2;\n
            cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
            v3 = v7;\n
            cgc_free(v2);\n
            if (*(a1))\n
                break;\n
            *(&v7) = v4;\n
            if ((((CmpF(v7, v3) & 69) | ((CmpF(v7, v3) & 69) >> 6)) & 1) != 1)\n
            {\n
                *(&v7) = v3;\n
                v4 = v7;\n
            }\n
            v2 = cgc_pop_copy(a0);\n
            v8 = v5 + 1;\n
            v5 = v8;\n
        }\n
    }\n
    while (true)\n
    {\n
LABEL_40674a:\n
        cgc_clear_stack(a0);\n
        v8 = a1;\n
        *(a1) = 1;\n
        v4 = 0;\n
LABEL_406767:\n
        if (v5)\n
            break;\n
        v5 = 1;\n
    }\n
    return v8;\n
}\n
", "4220810:sub_40678a": null, "4220816:cgc_handle_op_stddev": "typedef struct struct_1 {\n
    char *field_0;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
long long cgc_handle_op_stddev(struct struct_0 **a0, unsigned int *a1)\n
{\n
    void* v5;  // [bp-0x28]\n
    unsigned long long v6;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (; !v6; v5 = 0)\n
    {\n
        v6 = 1;\n
        cgc_clear_stack(a0);\n
        *(a1) = 1;\n
    }\n
    return cgc_sqrt();\n
}\n
", "4221344:cgc_handle_op_abs": "long long cgc_handle_op_abs(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0))\n
            {\n
                v3 = v2;\n
                return cgc_fabs();\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4221564:sub_406a7c": null, "4221568:cgc_handle_op_add": "long long cgc_handle_op_add(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    unsigned long long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    void* v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x20]\n
\n
    if (*(&a0))\n
    {\n
        v5 = 0;\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!*(a1))\n
            {\n
                v2 = cgc_pop_copy(a0);\n
                if (v2)\n
                {\n
                    v0 = v2;\n
                    cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
                    v3 = 0;\n
                    cgc_free(v2);\n
                    if (!*(a1) && !*(&a0))\n
                    {\n
                        s_20 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
                        return a0;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v5 = 0;\n
    return a1;\n
}\n
", "4221886:sub_406bbe": null, "4221888:cgc_handle_op_cos": "long long cgc_handle_op_cos(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0))\n
            {\n
                v3 = v2;\n
                return cgc_cos();\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4222108:sub_406c9c": null, "4222112:cgc_handle_op_ln": "long long cgc_handle_op_ln(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v5;  // xmm0lq\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0))\n
            {\n
                v5 = v2;\n
                if ((((CmpF(v5, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                    goto LABEL_406d71;\n
                v3 = v2;\n
                return cgc_log();\n
            }\n
        }\n
    }\n
LABEL_406d71:\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4222361:sub_406d99": null, "4222368:cgc_handle_op_log10": "long long cgc_handle_op_log10(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v5;  // xmm0lq\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0))\n
            {\n
                v5 = v2;\n
                if ((((CmpF(v5, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                    goto LABEL_406e71;\n
                v3 = v2;\n
                return cgc_log10();\n
            }\n
        }\n
    }\n
LABEL_406e71:\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4222617:sub_406e99": null, "4222624:cgc_handle_op_power": "long long cgc_handle_op_power(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned long long v1;  // [bp-0x48]\n
    unsigned long long v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x30]\n
    void* v5;  // [bp-0x28]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long *v8;  // rax, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v9;  // xmm0lq\n
    unsigned long long v12;  // xmm0lq\n
    unsigned long long v14;  // xmm0lq\n
    unsigned long long v15;  // rdx\n
    unsigned long long v16;  // rcx\n
    unsigned long long v17;  // r8\n
    unsigned long long v18;  // r9\n
\n
    if (*(a0))\n
    {\n
        v6 = 0;\n
        v3 = cgc_pop_copy(a0);\n
        if (v3)\n
        {\n
            v2 = v3;\n
            cgc_atof(v2, cgc_strlen(v3) + 1, a1);\n
            v5 = 0;\n
            cgc_free(v3);\n
            if (!*(a1))\n
            {\n
                v3 = cgc_pop_copy(a0);\n
                if (v3)\n
                {\n
                    v1 = v3;\n
                    cgc_atof(v1, cgc_strlen(v3) + 1, a1);\n
                    v4 = 0;\n
                    cgc_free(v3);\n
                    if (!*(a1))\n
                    {\n
                        v8 = a0;\n
                        if (!*(a0))\n
                        {\n
                            v9 = v4;\n
                            if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                            {\n
                                v6 = 0x3ff0000000000000;\n
                                goto LABEL_407113;\n
                            }\n
                            if ((((CmpF(v4, 0x3ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                            {\n
                                v6 = v5;\n
                                goto LABEL_407113;\n
                            }\n
                            if ((((CmpF(v4, v4) & 69) >> 2) & 1))\n
                            {\n
                                v6 = v4;\n
                            }\n
                            else\n
                            {\n
                                v12 = v5;\n
                                if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)) && (((CmpF(v4, 0) & 69) | ((CmpF(v4, 0) & 69) >> 6)) & 1) != 1)\n
                                {\n
                                    v6 = 0;\n
                                    goto LABEL_407109;\n
                                }\n
                                if ((((CmpF(0, v5) & 69) | ((CmpF(0, v5) & 69) >> 6)) & 1) != 1)\n
                                {\n
                                    v14 = v4;\n
                                    cgc_remainder();\n
                                    if ((((CmpF(v9, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                                    {\n
                                        cgc_pow();\n
                                        v0 = v5 ^ 0x8000000000000000;\n
                                        cgc_remainder(a0, a1, v15, v16, v17, v18);\n
                                        v8 = (([D] amd64g_calculate_condition(0xb<64>, 0x0<64>, Conv(32->64, (((0x0<64> CONCAT Load(addr=stack_base-48, size=8, endness=Iend_LE)) CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>) & ((CmpF(0 CONCAT v4, 0) & 69) >> 6 & 1) == 1) ? 4294967295 : 1);\n
                                        v6 = (0 CONCAT v0) * (0 CONCAT v8);\n
                                        goto LABEL_407109;\n
                                    }\n
                                }\n
                                v8 = cgc_pow();\n
                                v6 = v5;\n
LABEL_407109:\n
                            }\n
LABEL_407113:\n
                            return v8;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v6 = 0;\n
    return a1;\n
}\n
", "4223306:sub_40714a": null, "4223312:cgc_handle_op_product": "long long cgc_handle_op_product(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    unsigned long long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    void* v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x20]\n
\n
    if (*(&a0))\n
    {\n
        v5 = 0;\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!*(a1))\n
            {\n
                v2 = cgc_pop_copy(a0);\n
                if (v2)\n
                {\n
                    v0 = v2;\n
                    cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
                    v3 = 0;\n
                    cgc_free(v2);\n
                    if (!*(a1) && !*(&a0))\n
                    {\n
                        s_20 =L Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
                        return a0;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v5 = 0;\n
    return a1;\n
}\n
", "4223630:sub_40728e": null, "4223632:cgc_handle_op_quotient": "long long cgc_handle_op_quotient(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    int tmp_11;  // tmp #11\n
    int tmp_12;  // tmp #12\n
    int tmp_9;  // tmp #9\n
    unsigned long long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    void* v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long long v8;  // xmm0lq\n
\n
    if (*(&a0))\n
    {\n
        v5 = 0;\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!*(a1))\n
            {\n
                v2 = cgc_pop_copy(a0);\n
                if (v2)\n
                {\n
                    v0 = v2;\n
                    cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
                    v3 = 0;\n
                    cgc_free(v2);\n
                    if (!*(a1) && !*(&a0))\n
                    {\n
                        v8 = v3;\n
                        if ((((CmpF(v8, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                            goto LABEL_4073c3;\n
                        tmp_11 = DivV(tmp_12, tmp_9);\n
                        *(&v5) = tmp_11;\n
                        return a0;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
LABEL_4073c3:\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v5 = 0;\n
    return a1;\n
}\n
", "4223979:sub_4073eb": null, "4223984:cgc_handle_op_sin": "long long cgc_handle_op_sin(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0))\n
            {\n
                v3 = v2;\n
                return cgc_sin();\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4224204:sub_4074cc": null, "4224208:cgc_handle_op_sqrt": "long long cgc_handle_op_sqrt(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    if (*(a0))\n
    {\n
        v3 = 0;\n
        v1 = cgc_pop_copy(a0);\n
        if (v1)\n
        {\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v2 = 0;\n
            cgc_free(v1);\n
            if (!*(a1) && !*(a0) && (((CmpF(0, v2) & 69) | ((CmpF(0, v2) & 69) >> 6)) & 1) == 1)\n
            {\n
                v3 = v2;\n
                return cgc_sqrt();\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v3 = 0;\n
    return a1;\n
}\n
", "4224447:sub_4075bf": null, "4224448:cgc_handle_op_subtract": "long long cgc_handle_op_subtract(unsigned int *a0, unsigned int *a1)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    int tmp_11;  // tmp #11\n
    int tmp_12;  // tmp #12\n
    int tmp_9;  // tmp #9\n
    unsigned long long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    void* v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x28]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    if (*(&a0))\n
    {\n
        v5 = 0;\n
        v2 = cgc_pop_copy(a0);\n
        if (v2)\n
        {\n
            v1 = v2;\n
            cgc_atof(v1, cgc_strlen(v2) + 1, a1);\n
            v4 = 0;\n
            cgc_free(v2);\n
            if (!*(a1))\n
            {\n
                v2 = cgc_pop_copy(a0);\n
                if (v2)\n
                {\n
                    v0 = v2;\n
                    cgc_atof(v0, cgc_strlen(v2) + 1, a1);\n
                    v3 = 0;\n
                    cgc_free(v2);\n
                    if (!*(a1) && !*(&a0))\n
                    {\n
                        tmp_11 = SubV(tmp_12, tmp_9);\n
                        *(&v5) = tmp_11;\n
                        return a0;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    cgc_clear_stack(a0);\n
    *(a1) = 1;\n
    v5 = 0;\n
    return a1;\n
}\n
", "4224766:sub_4076fe": null, "4224768:cgc_handle_op_sum": "long long cgc_handle_op_sum(unsigned long long *a0, unsigned int *a1)\n
{\n
    unsigned int *v0;  // [bp-0x38]\n
    unsigned int *v1;  // [bp-0x30]\n
    void* v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    int v4;  // xmm0, Other Possible Types: unsigned long\n
    unsigned int *v5;  // rax, Other Possible Types: unsigned long\n
\n
    if (*(a0))\n
    {\n
        v4 = 0;\n
        v2 = 0;\n
        while (true)\n
        {\n
            v5 = cgc_pop_copy(a0);\n
            v1 = v5;\n
            if (!v1)\n
                return v5;\n
            v0 = v1;\n
            cgc_atof(v0, cgc_strlen(v1) + 1, a1);\n
            v4 = v4;\n
            cgc_free(v1);\n
            if (*(a1))\n
                break;\n
            xmm0<16> = ((0x0<64> CONCAT Load(addr=stack_base-40, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
            v2 = v4;\n
        }\n
    }\n
    *(a1) = 1;\n
    v2 = 0;\n
    return a1;\n
}\n
", "4224971:sub_4077cb": null, "4224976:cgc_strtrim": "long long cgc_strtrim(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = cgc_strlen(a0) + 1;\n
    if (v1 > a1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    else if (v1 != 1)\n
    {\n
        if (a2 != 1 && !(a2 == 3))\n
            goto LABEL_4078ae;\n
        v0 = a0;\n
        for (v2 = 0; v2 < v1; v0 += 1)\n
        {\n
            if (cgc_strchr(\"\\r\\n
\\t \", *(v0)))\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                cgc_memcpy(a0, v0, v1 - v2);\n
                break;\n
            }\n
        }\n
LABEL_4078ae:\n
        if (a2 != 2 && !(a2 == 3))\n
            goto LABEL_407959;\n
        if (v1 != 1)\n
        {\n
            for (v2 = v1 - 2; v2 >= 0; v2 -= 1)\n
            {\n
                if (!cgc_strchr(\"\\r\\n
\\t \", a0[v2]))\n
                {\n
                    a0[1 + v2] = 0;\n
                    break;\n
                }\n
                else if (!v2)\n
                {\n
                    a0[v2] = 0;\n
                    break;\n
                }\n
            }\n
        }\n
LABEL_407959:\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4225385:sub_407969": null, "4225392:cgc_valid_cell_id": "long long cgc_valid_cell_id(char a0[2])\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2f]\n
    char v2;  // [bp-0x2e]\n
    char v3;  // [bp-0x2b]\n
    char v4;  // [bp-0x2a]\n
    char v5;  // [bp-0x29]\n
    char *v6;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v7[2];  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v8;  // [bp-0xc]\n
    char v9;  // [bp-0x8]\n
    unsigned long long v11;  // rbp\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rax\n
\n
    v11 = &v9;\n
    if (cgc_strlen(a0) < 2)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    *(&v7) = 0;\n
    v6 = 0;\n
    v1 = 0;\n
    v0 = cgc_toupper(a0[0]);\n
    if (v0 >= 65 && v0 <= 90)\n
    {\n
        v3 = v0;\n
        v0 = cgc_toupper(a0[1]);\n
        if (v0 >= 65 && v0 <= 90)\n
            goto LABEL_407a3a;\n
        if (v0 >= 48 && v0 <= 57)\n
        {\n
LABEL_407a3a:\n
            if (v0 >= 48 && v0 <= 57)\n
            {\n
                v12 = v6;\n
                v6 = v12 + 1;\n
                (&v2)[v12] = v0;\n
                v4 = 0;\n
                goto LABEL_407a7d;\n
            }\n
            v4 = v0;\n
            v5 = 0;\n
LABEL_407a7d:\n
            v7 = 2;\n
            while (true)\n
            {\n
                if (v7 >= 5)\n
                {\n
                    v8 = -1;\n
                    return v8;\n
                }\n
                if (a0[v7] == v1 && v6)\n
                {\n
                    (&v2)[v6] = 0;\n
                    v8 = 0;\n
                    return v8;\n
                }\n
                if (a0[v7] < 48)\n
                    break;\n
                if (a0[v7] > 57)\n
                    break;\n
                if (v6 >= 2)\n
                    break;\n
                v13 = v6;\n
                v6 = v13 + 1;\n
                (&v2)[v13] = a0[v7];\n
                v7 += 1;\n
            }\n
            v8 = -1;\n
            return v8;\n
        }\n
        v8 = -1;\n
        return v8;\n
    }\n
    v8 = -1;\n
    return v8;\n
}\n
", "4225874:sub_407b52": null, "4225888:cgc_get_rowcol": "long long cgc_get_rowcol(char a0[2], char a1[3], unsigned long a2, unsigned long a3)\n
{\n
    char v0;  // [bp-0x41]\n
    char *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2[2];  // [bp-0x38], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x29]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
\n
    v3 = a3;\n
    if (cgc_strlen(a0) < 2)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    *(&v2) = 0;\n
    v1 = 0;\n
    v0 = cgc_toupper(a0[0]);\n
    if (v0 >= 65 && v0 <= 90)\n
    {\n
        a1[0] = v0;\n
        v0 = cgc_toupper(a0[1]);\n
        if (v0 >= 65 && v0 <= 90)\n
            goto LABEL_407c36;\n
        if (v0 >= 48 && v0 <= 57)\n
        {\n
LABEL_407c36:\n
            if (v0 >= 48 && v0 <= 57)\n
            {\n
                v6 = v1;\n
                v1 = v6 + 1;\n
                *((a2 + v6)) = v0;\n
                a1[1] = 0;\n
                goto LABEL_407c88;\n
            }\n
            a1[1] = v0;\n
            a1[2] = 0;\n
LABEL_407c88:\n
            v2 = 2;\n
            while (true)\n
            {\n
                if (v2 >= 5)\n
                {\n
                    v4 = -1;\n
                    return v4;\n
                }\n
                if (a0[v2] == v3 && v1)\n
                {\n
                    *((a2 + v1)) = 0;\n
                    v4 = 0;\n
                    return v4;\n
                }\n
                if (a0[v2] < 48)\n
                    break;\n
                if (a0[v2] > 57)\n
                    break;\n
                if (v1 >= 2)\n
                    break;\n
                v7 = v1;\n
                v1 = v7 + 1;\n
                *((a2 + v7)) = a0[v2];\n
                v2 += 1;\n
            }\n
            v4 = -1;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4226403:sub_407d63": null, "4226416:cgc_sanitize_formula": "long long cgc_sanitize_formula(char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x38]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    v1 = cgc_strlen(a0);\n
    if (v1 > a1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v0 = cgc_calloc(1, a1);\n
    if (!v0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v3 = 0;\n
    for (v2 = 0; v3 < v1; v3 += 1)\n
    {\n
        if (!cgc_strchr(\"\\r\\n
\\t \", a0[v3]))\n
        {\n
            v6 = v2;\n
            v2 = v6 + 1;\n
            v0[v6] = a0[v3];\n
        }\n
    }\n
    cgc_memcpy(a0, v0, a1);\n
    cgc_free(v0);\n
    v4 = 0;\n
    return v4;\n
}\n
", "4226673:sub_407e71": null, "4226688:cgc_atof": "long long cgc_atof(char *a0, unsigned long a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    int tmp_61;  // tmp #61\n
    int tmp_62;  // tmp #62\n
    int tmp_59;  // tmp #59\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned long long v4;  // [bp-0x40]\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v6;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v11;  // xmm1lq\n
    int v13;  // xmm0\n
    int v14;  // xmm1, Other Possible Types: unsigned long long\n
\n
    v7 = a0;\n
    if (!v7)\n
    {\n
LABEL_407ec5:\n
    }\n
    else\n
    {\n
        if (!(cgc_strlen(v7) < a1))\n
            goto LABEL_407ec5;\n
        if (!cgc_strlen(v7))\n
            goto LABEL_407ec5;\n
        v6 = 0;\n
        v5 = 0;\n
        v4 = 0x3ff0000000000000;\n
        v3 = 0;\n
        v2 = 0;\n
        v1 = 1;\n
        v0 = 0;\n
        if (*(v7) == 45)\n
        {\n
            v7 += 1;\n
            if (!*(v7))\n
                goto LABEL_4080ae;\n
            v1 = -1;\n
        }\n
        while (true)\n
        {\n
            v10 = *(v7);\n
            if (!v10)\n
            {\n
LABEL_4080c5:\n
                if (v2)\n
                {\n
                    v10 = cgc_pow();\n
                    s_30 =L Conv(128->64, ((0x0<64> CONCAT 0x4024000000000000<64>) * Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE))))<8>\n
                }\n
                v8 = (0 CONCAT v6) * (0 CONCAT v1);\n
                return v10;\n
            }\n
            if (*(v7) >= 48 && *(v7) <= 57)\n
            {\n
                if (v2)\n
                {\n
                    v10 = *(v7) - 48;\n
                    v14 = v10;\n
                    v5 = ((0 CONCAT v5) * (0 CONCAT 0x4024000000000000) + v14);\n
                }\n
                else if (v3)\n
                {\n
                    s_40 =L Conv(128->64, ((0x0<64> CONCAT 0x4024000000000000<64>) * Conv(64->128, Load(addr=stack_base-64, size=8, endness=Iend_LE))))<8>\n
                    v0 += 1;\n
                    v10 = *(v7) - 48;\n
                    tmp_61 = DivV(tmp_62, tmp_59);\n
                    xmm0<16> = (t61 + Conv(64->128, Load(addr=stack_base-48, size=8, endness=Iend_LE)))\n
                    v6 = v13;\n
                }\n
                else\n
                {\n
                    v10 = *(v7) - 48;\n
                    v11 = v10;\n
                    v6 = ((0 CONCAT v6) * (0 CONCAT 0x4024000000000000) + v14);\n
                }\n
                goto LABEL_40806b;\n
            }\n
            if (*(v7) == 46)\n
            {\n
                v10 = v3 + 1;\n
                v3 = v10;\n
            }\n
            else\n
            {\n
                if (cgc_tolower(*(v7)) != 101)\n
                    break;\n
                v10 = v2 + 1;\n
                v2 = v10;\n
            }\n
LABEL_40806b:\n
            if (v3 > 1)\n
            {\n
LABEL_408084:\n
                break;\n
            }\n
            else\n
            {\n
                if (!(v2 <= 1))\n
                    goto LABEL_408084;\n
                if (!(v0 < 5))\n
                    goto LABEL_4080c5;\n
                v7 += 1;\n
            }\n
        }\n
    }\n
LABEL_4080ae:\n
    *(a2) = 1;\n
    v8 = 0;\n
    return a2;\n
}\n
", "4227337:sub_408109": null, "4227344:cgc_ftoa": "long long cgc_ftoa(unsigned long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x68], Other Possible Types: unsigned long\n
    int tmp_41;  // tmp #41\n
    int tmp_42;  // tmp #42\n
    int tmp_39;  // tmp #39\n
    unsigned long v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x54]\n
    unsigned long long v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned long v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x34]\n
    char *v7;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x18]\n
    char *v9;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v11;  // xmm0lq\n
    int v12;  // xmm0\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rdx\n
    unsigned long long v15;  // r8\n
    unsigned long long v16;  // r9\n
    unsigned long v17;  // rcx\n
    unsigned long v19;  // rcx\n
\n
    v8 = v11;\n
    if (a1 <= 1)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v12 = (0 CONCAT v8) & 170141183460469231722463931679029329919;\n
    if ((((CmpF(v12, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x7ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
        goto LABEL_408179;\n
    *(&v12) = v8;\n
    if (!(((CmpF(v12, v12) & 69) >> 2) & 1))\n
    {\n
        v7 = 0;\n
        v6 = 0;\n
        if ((((CmpF(0, v8) & 69) | ((CmpF(0, v8) & 69) >> 6)) & 1) != 1)\n
        {\n
            v6 = 1;\n
            v13 = v7;\n
            v7 = v13 + 1;\n
            *((a0 + v13)) = 45;\n
            s_18 =L Conv(128->64, ((0x0<64> CONCAT 0xbff0000000000000<64>) * Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        }\n
        if (v7 == a1)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_remainder();\n
        v1 = v8;\n
        cgc_pow(a0, a1, v14, v13, v15, v16);\n
        v5 = (0 CONCAT v1) * (0 CONCAT 0x4024000000000000);\n
        *(&v12) = v5;\n
        if ((((CmpF(v12, 0x4014000000000000) & 69) | ((CmpF(v12, 0x4014000000000000) & 69) >> 6)) & 1) == 1)\n
        {\n
            if (((CmpF(0, v5) & 69 | (CmpF(0, v5) & 69) >> 6) & 1) == 1)\n
                goto LABEL_4082a9;\n
            *(&v12) = v5;\n
            if (((CmpF(v12, 0xc014000000000000) & 69 | (CmpF(v12, 0xc014000000000000) & 69) >> 6) & 1) == 1)\n
                goto LABEL_4082a9;\n
        }\n
        if (!v6)\n
        {\n
            s_18 =L Conv(128->64, ((0x0<64> CONCAT 0x3f40624dd2f1a9fc<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        }\n
        else if (v6)\n
        {\n
            s_18 =L Conv(128->64, ((0x0<64> CONCAT 0x3f40624dd2f1a9fc<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        }\n
LABEL_4082a9:\n
        *(&v12) = v8;\n
        if ((((CmpF(v12, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
        {\n
            v0 = 0;\n
            goto LABEL_4082e2;\n
        }\n
        cgc_log10();\n
        v0 = v8;\n
LABEL_4082e2:\n
        v4 = v0;\n
        if (v4 < 0)\n
            v4 = 0;\n
        for (; v4 > -0x4; v4 -= 1)\n
        {\n
            if (v7 == a1)\n
                break;\n
            if (v4 == -1)\n
            {\n
                v17 = v7;\n
                v7 = v17 + 1;\n
                *((a0 + v17)) = 46;\n
                if (v7 == a1)\n
                    break;\n
            }\n
            cgc_pow();\n
            v3 = 0x4024000000000000;\n
            tmp_41 = DivV(tmp_42, tmp_39);\n
            v2 = tmp_41;\n
            v8 = (0 CONCAT v2 ^ 0x8000000000000000) * (0 CONCAT v3) + (0 CONCAT v8);\n
            v19 = v7;\n
            v7 = v19 + 1;\n
            *((a0 + v19)) = v2 + 48;\n
        }\n
        if (v7 == a1)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        *((a0 + v7)) = 0;\n
        v9 = a0;\n
        return v9;\n
    }\n
LABEL_408179:\n
    v9 = 0;\n
    return v9;\n
}\n
", "4228122:sub_40841a": null, "4228128:cgc_itoa": "long long cgc_itoa(unsigned long a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x42]\n
    char v1;  // [bp-0x41]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x2c]\n
    char *v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x14], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v10;  // rcx\n
    unsigned long v11;  // rcx\n
    unsigned int v12;  // eax\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rcx\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rcx\n
\n
    v7 = a0;\n
    v6 = a1;\n
    v5 = 10;\n
    if (a2 <= 1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v4 = 0;\n
    v3 = 0;\n
    if (v7 < 0)\n
        v3 = 1;\n
    do\n
    {\n
        if (v3)\n
        {\n
            v10 = v4;\n
            v4 = v10 + 1;\n
            a1[v10] = 48 - ((v7 >> 31 CONCAT v7) /m v5 >> 32);\n
        }\n
        else\n
        {\n
            v11 = v4;\n
            v4 = v11 + 1;\n
            a1[v11] = ((v7 >> 31 CONCAT v7) /m v5 >> 32) + 48;\n
        }\n
        v12 = v7;\n
        v7 = (v12 >> 31 CONCAT v12) /m v5;\n
        v0 = 0;\n
        if (v4 < a2 - 1)\n
            v0 = v7;\n
    } while ((v0 & 1));\n
    if (!v7)\n
    {\n
        if (v4 != a2 - 1)\n
        {\n
LABEL_408539:\n
            if (v3)\n
            {\n
                v14 = v4;\n
                v4 = v14 + 1;\n
                a1[v14] = 45;\n
            }\n
            v15 = v4;\n
            v4 = v15 - 1;\n
            a1[v15] = 0;\n
            for (v2 = 0; v4 > v2; a1[v17] = v1)\n
            {\n
                v1 = a1[v2];\n
                v16 = v2;\n
                v2 = v16 + 1;\n
                a1[v16] = v6[v4];\n
                v17 = v4;\n
                v4 = v17 - 1;\n
            }\n
            v8 = a1;\n
            return v8;\n
        }\n
        else if (!v3)\n
        {\n
            goto LABEL_408539;\n
        }\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4228579:sub_4085e3": null, "4228592:main": "extern unsigned long long g_40a310;\n
\n
int main(unsigned long a0, unsigned long long a1, unsigned long a2, unsigned long long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x228]\n
    unsigned int v1;  // [bp-0x220]\n
    unsigned int v2;  // [bp-0x21c]\n
    char v3;  // [bp-0x218]\n
    unsigned long v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long long v8;  // rax\n
\n
    v6 = 0;\n
    v5 = a0;\n
    v4 = a1;\n
    cgc_init_sheet();\n
    v2 = 0;\n
    do\n
    {\n
        cgc_printf(\"Accel:-$ \", a1, 0x200, a3, a4);\n
        v1 = cgc_readline(0, &v3, 0x200);\n
        if (v1)\n
        {\n
            cgc_printf(\"\\n
\", a1, 0x200, a3, a4);\n
        }\n
        else\n
        {\n
            v8 = cgc_parse_line(&v3) + 8;\n
            a3 = v8;\n
            v0 = v8;\n
            switch (v8)\n
            {\n
            case 0:\n
                cgc_printf(\"Error clearing cell\\n
\", a1, 0x200, &g_40a310, a4);\n
                break;\n
            case 4:\n
                cgc_printf(\"Error assigning cell. Valid Cells: A0-ZZ99\\n
\", a1, 0x200, &g_40a310, a4);\n
                break;\n
            case 6:\n
                cgc_printf(\"Error showing data. Try SHOW TABLE or SHOW [A0-ZZ99]\\n
\", a1, 0x200, &g_40a310, a4);\n
                break;\n
            case 7:\n
                cgc_printf(\"Bad input\\n
\", a1, 0x200, &g_40a310, a4);\n
                break;\n
            case 8:\n
                cgc_printf(\"Success.\\n
\", a1, 0x200, &g_40a310, a4);\n
                break;\n
            case 9:\n
                v2 = 1;\n
                cgc_printf(\"Exiting...\\n
\", a1, 0x200, &g_40a310, a4);\n
                goto LABEL_40871c;\n
            default:\n
LABEL_40871c:\n
                cgc_printf(\"Unknown Input\\n
\", a1, 0x200, a3, a4);\n
            }\n
        }\n
    } while (((v2 ^ 255) & 1));\n
    cgc_printf(\"Unsupported signal. Exiting...\\n
\", a1, 0x200, a3, a4);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4228964:sub_408764": null, "4228976:cgc_readline": "long long cgc_readline(unsigned long a0, char *a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x30]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rcx\n
\n
    v3 = a0;\n
    v2 = a1;\n
    for (v1 = 0; v1 < a2; v1 += 1)\n
    {\n
        if (!cgc_receive(0, a1, a2, v6) && !(!*(&v0)))\n
            goto LABEL_4087c9;\n
        cgc_exit(0);\n
LABEL_4087c9:\n
        if (*(v2) == 10)\n
            break;\n
        v2 += 1;\n
    }\n
    if (v1 == a2 && *(v2) != 10)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    if (*(v2) != 10)\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    *(v2) = 0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4229213:sub_40885d": null, "4229216:cgc_parse_line": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_parse_line(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x2e8]\n
    unsigned long v1;  // [bp-0x2e0]\n
    unsigned long v2;  // [bp-0x2d8]\n
    unsigned long v3;  // [bp-0x2d0]\n
    struct_0 *v4;  // [bp-0x2c8]\n
    struct_0 *v5;  // [bp-0x2c0]\n
    struct_0 *v6;  // [bp-0x2b8]\n
    struct_0 *v7;  // [bp-0x2b0]\n
    unsigned int v8;  // [bp-0x2a8]\n
    struct_0 *v9;  // [bp-0x2a0]\n
    struct_0 *v10;  // [bp-0x298]\n
    struct_0 *v11;  // [bp-0x290]\n
    unsigned int v12;  // [bp-0x288]\n
    struct_0 *v13;  // [bp-0x280]\n
    struct_0 *v14;  // [bp-0x278]\n
    struct_0 *v15;  // [bp-0x270]\n
    unsigned int v16;  // [bp-0x268]\n
    unsigned long long v17;  // [bp-0x260]\n
    char v18;  // [bp-0x258]\n
    unsigned long long v19;  // [bp-0x50]\n
    char v20;  // [bp-0x48]\n
    unsigned long v21;  // [bp-0x28]\n
    unsigned int v22;  // [bp-0x1c]\n
    char *v23;  // [bp-0x18]\n
    unsigned int v24;  // [bp-0xc]\n
\n
    v22 = 0;\n
    if (cgc_strtrim(a0, 0x200, 1) == -1)\n
    {\n
        v24 = -1;\n
        return v24;\n
    }\n
    v15 = &v20;\n
    *(&v16) = a0;\n
    cgc_memcpy(v15, *(&v16), cgc_strlen(\"SHOW \"));\n
    v21 = 0;\n
    while (true)\n
    {\n
        v14 = v21;\n
        if (v14 >= cgc_strlen(\"SHOW \"))\n
            break;\n
        (&v20)[v21] = cgc_toupper((&v20)[v21]);\n
        v21 += 1;\n
    }\n
    v13 = &v20;\n
    if (cgc_memcmp(v13, \"SHOW \", cgc_strlen(\"SHOW \")))\n
    {\n
        v11 = &v20;\n
        *(&v12) = a0;\n
        cgc_memcpy(v11, *(&v12), cgc_strlen(\"REPR \"));\n
        v21 = 0;\n
        while (true)\n
        {\n
            v10 = v21;\n
            if (v10 >= cgc_strlen(\"REPR \"))\n
                break;\n
            (&v20)[v21] = cgc_toupper((&v20)[v21]);\n
            v21 += 1;\n
        }\n
        v9 = &v20;\n
        if (!cgc_memcmp(v9, \"REPR \", cgc_strlen(\"REPR \")))\n
        {\n
            v22 = 1;\n
        }\n
        else\n
        {\n
            v7 = &v20;\n
            *(&v8) = a0;\n
            cgc_memcpy(v7, *(&v8), cgc_strlen(\"CLEAR \"));\n
            v21 = 0;\n
            while (true)\n
            {\n
                v6 = v21;\n
                if (v6 >= cgc_strlen(\"CLEAR \"))\n
                    break;\n
                (&v20)[v21] = cgc_toupper((&v20)[v21]);\n
                v21 += 1;\n
            }\n
            v5 = &v20;\n
            if (!cgc_memcmp(v5, \"CLEAR \", cgc_strlen(\"CLEAR \")))\n
            {\n
                v0 = a0;\n
                if (!cgc_clear_cell(v0 + cgc_strlen(\"CLEAR \")))\n
                {\n
                    v24 = 0;\n
                    return v24;\n
                }\n
                v24 = -8;\n
                return v24;\n
            }\n
            else\n
            {\n
                cgc_memcpy(&v20, a0, 5);\n
                for (v21 = 0; v21 < 5; v21 += 1)\n
                {\n
                    (&v20)[v21] = cgc_toupper((&v20)[v21]);\n
                }\n
                if (!cgc_memcmp(&v20, \"EXIT\", 5))\n
                {\n
                    v24 = 1;\n
                    return v24;\n
                }\n
                v19 = cgc_strsep(&v23, \"=\");\n
                if (v19 && a0)\n
                {\n
                    if (cgc_set_cell(v19, a0, 0x200))\n
                    {\n
                        v24 = -0x4;\n
                        return v24;\n
                    }\n
                    v24 = 0;\n
                    return v24;\n
                }\n
                v24 = -1;\n
                return v24;\n
            }\n
        }\n
    }\n
    cgc_strtrim(a0, 0x200, 2);\n
    v4 = &v20;\n
    v3 = a0;\n
    cgc_memcpy(v4, v3 + cgc_strlen(\"SHOW \"), 6);\n
    for (v21 = 0; v21 < 6; v21 += 1)\n
    {\n
        (&v20)[v21] = cgc_toupper((&v20)[v21]);\n
    }\n
    if (!cgc_memcmp(&v20, \"TABLE\", 6))\n
    {\n
        cgc_print_table();\n
        v24 = 0;\n
        return v24;\n
    }\n
    v2 = a0;\n
    if (cgc_valid_cell_id(v2 + cgc_strlen(\"SHOW \")) == -1)\n
    {\n
        v24 = -2;\n
        return v24;\n
    }\n
    v1 = a0;\n
    v17 = cgc_show_cell(v1 + cgc_strlen(\"SHOW \"), v22, &v18, 0x200);\n
    if (!v22)\n
        cgc_printf(\"Cell Value: %s\\n
\", v17, 6, 0x200, a4);\n
    else\n
        cgc_printf(\"Cell Repr: %s\\n
\", v17, 6, 0x200, a4);\n
    v24 = 0;\n
    return v24;\n
}\n
", "4230591:sub_408dbf": null, "4230592:cgc_exit": "long long cgc_exit(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    v0 = a0;\n
    cgc__terminate(a0);\n
    return cgc_print_table(a0, v2, v3, v4, v5, v6);\n
}\n
", "4230624:cgc_print_table": "char cgc_print_table(unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned long a4)\n
{\n
    return cgc_print_assigned_cells(a0, a1, a2, a3, a4);\n
}\n
", "4230637:sub_408ded": null, "4230640:cgc_peek_front": "long long cgc_peek_front(unsigned long long *a0)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *(a0);\n
    return v0;\n
}\n
", "4230689:sub_408e21": null, "4230704:cgc_enqueue": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_enqueue(struct struct_0 **a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long long v1[2];  // [bp-0x28]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (!a1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1[0] = cgc_malloc(16);\n
    v1[0] = a1;\n
    v1[1] = 0;\n
    if (!*(a0))\n
    {\n
        *(a0) = &v1[0];\n
    }\n
    else\n
    {\n
        for (v0 = *(a0); *((v0 + 8)); v0 = *((v0 + 8)));\n
        *((v0 + 8)) = v1;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4230881:sub_408ee1": null, "4230896:cgc_enqueue_copy": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_enqueue_copy(struct struct_0 **a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x40], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (!a1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v2 = cgc_strlen(a1) + 1;\n
    if (v2 > a2)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v1 = cgc_malloc(16);\n
    *(&v1->field_0) = cgc_malloc(v2);\n
    cgc_memcpy(*(&v1->field_0), a1, v2);\n
    v1->field_8 = 0;\n
    if (!*(a0))\n
    {\n
        *(a0) = &v1->field_0;\n
    }\n
    else\n
    {\n
        for (v0 = *(a0); v0->field_8; v0 = v0->field_8);\n
        *((v0 + 8)) = v1;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4231147:sub_408feb": null, "4231152:cgc_dequeue_copy": "long long cgc_dequeue_copy(struct struct_0 **a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long long v1[2];  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1[0] = *(a0);\n
    v0 = v1[0];\n
    *(a0) = v1[1];\n
    cgc_free(v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4231255:sub_409057": null, "4231264:cgc_clear_queue": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
long long cgc_clear_queue(struct struct_0 **a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_1 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
        return a0;\n
    v1 = &*(a0)->field_0;\n
    while (*((v1 + 8)))\n
    {\n
        cgc_free(*(v1));\n
        v0 = v1;\n
        v1 = *((v1 + 8));\n
        cgc_free(v0);\n
    }\n
    cgc_free(*(v1));\n
    cgc_free(v1);\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4231405:sub_4090ed": null, "4231408:cgc_peek_top": "long long cgc_peek_top(unsigned long long *a0)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = *(a0);\n
    return v0;\n
}\n
", "4231457:sub_409121": null, "4231472:cgc_push": "long long cgc_push(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned long long v0[2];  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!a1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v0[0] = cgc_malloc(16);\n
    v0[0] = a1;\n
    if (!*(a0))\n
        v0[1] = 0;\n
    else\n
        v0[1] = *(a0);\n
    *(a0) = v0;\n
    v1 = 0;\n
    return v1;\n
}\n
", "4231620:sub_4091c4": null, "4231632:cgc_push_copy": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_push_copy(unsigned long long *a0, unsigned long a1, unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    if (!a1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v1 = cgc_strlen(a1) + 1;\n
    if (v1 > a2)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v0 = cgc_malloc(16);\n
    *(&v0->field_0) = cgc_malloc(v1);\n
    cgc_memcpy(*(&v0->field_0), a1, v1);\n
    if (!*(a0))\n
        v0->field_8 = 0;\n
    else\n
        v0->field_8 = *(a0);\n
    *(a0) = v0;\n
    v2 = 0;\n
    return v2;\n
}\n
", "4231854:sub_4092ae": null, "4231856:cgc_pop_copy": "long long cgc_pop_copy(struct struct_0 **a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long long v1[2];  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1[0] = *(a0);\n
    v0 = v1[0];\n
    *(a0) = v1[1];\n
    cgc_free(v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4231959:sub_409317": null, "4231968:cgc_clear_stack": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
long long cgc_clear_stack(struct struct_1 **a0)\n
{\n
    struct_1 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!*(a0))\n
        return a0;\n
    v1 = &*(a0)->field_0;\n
    while (*((v1 + 8)))\n
    {\n
        cgc_free(*(v1));\n
        v0 = v1;\n
        v1 = *((v1 + 8));\n
        cgc_free(v0);\n
    }\n
    cgc_free(*(v1));\n
    cgc_free(v1);\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4232112:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fabs": null, "5242896:cgc_pow": null, "5242904:cgc__terminate": null, "5242912:memset": null, "5242920:cgc_transmit": null, "5242928:cgc_cos": null, "5242936:cgc_allocate": null, "5242944:cgc_remainder": null, "5242952:cgc_log": null, "5242960:cgc_deallocate": null, "5242968:cgc_log10": null, "5242976:cgc_sin": null, "5242984:cgc_sqrt": null, "5242992:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}