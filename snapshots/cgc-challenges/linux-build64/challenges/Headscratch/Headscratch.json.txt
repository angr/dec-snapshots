{"4202496:_init": "extern struct_0 *g_408508;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_408508;\n
    if (g_408508)\n
        v1 = g_408508();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_408528;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_408528;\n
    goto *(4228400);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202624:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202640:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4228376);\n
}\n
", "4202656:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202693:sub_4020c5": null, "4202694:sub_4020c6": null, "4202704:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_408500;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202745:sub_4020f9": null, "4202752:register_tm_clones": "extern unsigned long long g_408510;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202809:sub_402139": null, "4202816:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_408518;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_408518)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202869:sub_402175": null, "4202873:sub_402179": null, "4202880:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202889:sub_402189": null, "4202896:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4202954:sub_4021ca": null, "4202960:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4202979:sub_4021e3": null, "4202992:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4203011:sub_402203": null, "4203024:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4203043:sub_402223": null, "4203056:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4203075:sub_402243": null, "4203088:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4203107:sub_402263": null, "4203120:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4203139:sub_402283": null, "4203152:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4203171:sub_4022a3": null, "4203184:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4203203:sub_4022c3": null, "4203216:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4203235:sub_4022e3": null, "4203248:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4203267:sub_402303": null, "4203280:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4203325:sub_40233d": null, "4203328:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203352:sub_402358": null, "4203360:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4203410:sub_402392": null, "4203424:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203448:sub_4023b8": null, "4203456:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4203472:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v3;  // r8\n
    void* v4;  // r15, Other Possible Types: unsigned long, unsigned long long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // r13\n
    unsigned long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r13, Other Possible Types: unsigned long long\n
    void* v14;  // r14, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        v6 = a0->padding_c;\n
        v13 = v6 - v3;\n
        if (v5 && v13)\n
        {\n
            v8 = v13 & 3;\n
            if (~(v3) + v6 < 3)\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v9 = v13 & -4;\n
                v10 = &a0->padding_0[v3 + 35];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v10 + v11 - 3)) = v5[*((v10 + v11 - 3))];\n
                    *((v10 + v11 - 2)) = v5[*((v10 + v11 - 2))];\n
                    *((v10 + v11 - 1)) = v5[*((v10 + v11 - 1))];\n
                    *((v10 + v11)) = v5[*((v10 + v11))];\n
                    v11 += 4;\n
                } while (v9 != v11);\n
            }\n
            if (v8)\n
            {\n
                v12 = &a0->padding_0[v3 + v11 + 32];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v12 + v11)) = v5[*((v12 + v11))];\n
                    v11 += 1;\n
                } while (v8 != v11);\n
            }\n
            v13 = (a0->padding_c - a0->field_8);\n
        }\n
        v0 = a0;\n
        v4 = 0;\n
        v14 = 0;\n
        do\n
        {\n
            if (v13 <= v14)\n
            {\n
LABEL_402505:\n
                a0 = v0;\n
                goto LABEL_40250a;\n
            }\n
            v14 += *(&v1);\n
        } while (!cgc_transmit(a0, v11));\n
        v4 = 4294967295;\n
        goto LABEL_402505;\n
    }\n
LABEL_40250a:\n
    *((a0 + 8)) = 0;\n
    return v4;\n
}\n
", "4203812:sub_402524": null, "4203824:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int *v1;  // [bp-0x40]\n
    char v2;  // [bp-0x38]\n
    struct_0 *v4;  // r15\n
    unsigned long long v5;  // r8\n
    unsigned int *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rbx\n
    char *v12;  // rax\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    void* v14;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v5 = a0->field_8;\n
    if (v5 == -1)\n
    {\n
        v4->field_8 = -(a1 < 1);\n
        v4->field_c = 0;\n
        return -(a1 < 1);\n
    }\n
    if (a0->field_4 == 1)\n
    {\n
        v6 = &a0->field_c;\n
    }\n
    else\n
    {\n
        v7 = a0->field_10;\n
        v8 = a0->field_c;\n
        v13 = v8 - v5;\n
        v0 = a1;\n
        if (v7 && v13)\n
        {\n
            v10 = v13 & 3;\n
            if (~(v5) + v8 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v11 = v13 & -4;\n
                a0 = &a0->padding_0[v5 + 35];\n
                a1 = 0;\n
                do\n
                {\n
                    *((a0 + a1 - 3)) = v7[*((a0 + a1 - 3))];\n
                    *((a0 + a1 - 2)) = v7[*((a0 + a1 - 2))];\n
                    *((a0 + a1 - 1)) = v7[*((a0 + a1 - 1))];\n
                    *((a0 + a1)) = v7[*((a0 + a1))];\n
                    a1 += 4;\n
                } while (v11 != a1);\n
            }\n
            if (v10)\n
            {\n
                v12 = &v4->padding_0[v5 + a1 + 32];\n
                a1 = 0;\n
                do\n
                {\n
                    v12[a1] = v7[v12[a1]];\n
                    a1 += 1;\n
                } while (v10 != a1);\n
            }\n
            v13 = v4->field_c - v4->field_8;\n
        }\n
        v1 = &v4->field_c;\n
        v14 = 0;\n
        while (v13 > v14)\n
        {\n
            v14 += *(&v2);\n
            if (cgc_transmit(a0, a1))\n
                break;\n
        }\n
        a1 = v0;\n
        v6 = v1;\n
    }\n
    *(v6) = 0;\n
}\n
", "4204174:sub_40268e": null, "4204176:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4204240:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v3;  // r12\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v13;  // eax\n
    unsigned long long v15;  // r8\n
    char *v16;  // rax\n
    unsigned long v17;  // rbp\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v11 = a2->field_8;\n
    if (v11 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v10);\n
        if (!v6)\n
        {\n
            v7 = *(&v0);\n
            if (v7)\n
            {\n
                *(&a2->padding_c[0]) = v7;\n
                v10 = v7 * 0x100000000;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rax<8>, 0x20<8>), Shl(rax<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v10 = a2->field_18;\n
                    if (v10)\n
                    {\n
                        a2 = v7;\n
                        v9 = v7 & 3;\n
                        if (v7 + 1 < 3)\n
                        {\n
                            a1 = 0;\n
                        }\n
                        else\n
                        {\n
                            a2 = &a2[-1 * v9];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[a1] = *((v10 + v3[1].padding_0[a1]));\n
                                v3[1].padding_0[1 + a1] = *((v10 + v3[1].padding_0[1 + a1]));\n
                                v3[1].padding_0[2 + a1] = *((v10 + v3[1].padding_0[2 + a1]));\n
                                v3[1].padding_0[3 + a1] = *((v10 + v3[1].padding_0[3 + a1]));\n
                                a1 += 4;\n
                            } while (a2 != a1);\n
                        }\n
                        if (v9)\n
                        {\n
                            a2 = &v3->padding_0[a1 + 32];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                a2[a1] = *((v10 + a2[a1]));\n
                                a1 += 1;\n
                            } while (v9 != a1);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = v3->field_8;\n
    }\n
    if (v11 != -1)\n
    {\n
        v12 = *(&v3->padding_c[0]) - v11;\n
        if (v12 > v4)\n
            v12 = v4;\n
        v0 = v12;\n
        a1 = &v3->padding_0[v11 + 32];\n
        a2 = v12;\n
        cgc_memcpy();\n
        v13 = v3->field_8 + v12;\n
        v3->field_8 = v13;\n
        if (v13 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v12 < v4))\n
            goto LABEL_402954;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        if (0 >= v4)\n
        {\n
LABEL_402954:\n
            return v12;\n
        }\n
    }\n
    v1 = v5 + 3;\n
    while (true)\n
    {\n
        v10 = cgc_receive(a0, a1, a2, v10);\n
        if (v10)\n
            return -1;\n
        v15 = v0;\n
        if (!v15)\n
            return -1;\n
        v16 = v3->field_18;\n
        if (v16)\n
        {\n
            a2 = v15 & 3;\n
            if (v15 - 1 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v17 = v1 + v12;\n
                a1 = 0;\n
                do\n
                {\n
                    *((v17 + a1 - 3)) = v16[*((v17 + a1 - 3))];\n
                    *((v17 + a1 - 2)) = v16[*((v17 + a1 - 2))];\n
                    *((v17 + a1 - 1)) = v16[*((v17 + a1 - 1))];\n
                    *((v17 + a1)) = v16[*((v17 + a1))];\n
                    a1 += 4;\n
                } while ((v15 & -4) != a1);\n
            }\n
            if (a2)\n
            {\n
                a1 = a1 + v12 + v5;\n
                a0 = 0;\n
                do\n
                {\n
                    a1[a0] = v16[a1[a0]];\n
                    a0 += 1;\n
                } while (a2 != a0);\n
            }\n
        }\n
        v12 += v15;\n
        if (v12 >= v4)\n
            return v12;\n
    }\n
}\n
", "4204722:sub_4028b2": null, "4204902:sub_402966": null, "4204912:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_4029c0;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_4029d1;\n
    while (true)\n
    {\n
LABEL_4029c0:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_4029d1;\n
    }\n
LABEL_4029d1:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4205035:sub_4029eb": null, "4205040:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v15;  // r8\n
    unsigned long v16;  // rcx\n
    struct struct_0 **v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    void* v19;  // rdi, Other Possible Types: unsigned long\n
    char *v20;  // rsi\n
    unsigned long v21;  // rdi\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        v14 = 4294967295;\n
        if (v13)\n
            return 4294967295;\n
        if (!*(&v1))\n
            return 4294967295;\n
        v16 = a0->field_18;\n
        *(&v14) = v0;\n
        if (!v16)\n
            return v14;\n
        *(&v14) = *(v16 + v14);\n
    }\n
    else if (v4 != *(&a0->padding_c[0]))\n
    {\n
LABEL_402b3c:\n
        v3->field_8 = v4 + 1;\n
        v14 = v3[1].padding_0[v4];\n
        return v14;\n
    }\n
    else\n
    {\n
        *(&a0->field_8) = 0;\n
        if (cgc_receive(a0, v9, v10, v11))\n
            return 4294967295;\n
        v15 = *(&v1);\n
        if (v15)\n
        {\n
            *(&a0->padding_c[0]) = v15;\n
            if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
            {\n
                v17 = a0->field_18;\n
                if (v17)\n
                {\n
                    v18 = v15 & 3;\n
                    if (v15 - 1 < 3)\n
                    {\n
                        v19 = 0;\n
                    }\n
                    else\n
                    {\n
                        v19 = 0;\n
                        do\n
                        {\n
                            v3[1].padding_0[v19] = *(v17 + v3[1].padding_0[v19]);\n
                            v3[1].padding_0[1 + v19] = *(v17 + v3[1].padding_0[1 + v19]);\n
                            v3[1].padding_0[2 + v19] = *(v17 + v3[1].padding_0[2 + v19]);\n
                            v3[1].padding_0[3 + v19] = *(v17 + v3[1].padding_0[3 + v19]);\n
                            v19 += 4;\n
                        } while (v15 - v18 != v19);\n
                    }\n
                    if (v18)\n
                    {\n
                        v20 = &v3->padding_0[v19 + 32];\n
                        v21 = 0;\n
                        do\n
                        {\n
                            v20[v21] = *(v17 + v20[v21]);\n
                            v21 += 1;\n
                        } while (v18 != v21);\n
                    }\n
                }\n
            }\n
            if (v15 >= 0)\n
            {\n
                v4 = v3->field_8;\n
                goto LABEL_402b3c;\n
            }\n
        }\n
    }\n
}\n
", "4205398:sub_402b56": null, "4205408:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4205423:sub_402b6f": null, "4205424:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    unsigned long long v3;  // [bp-0x438]\n
    unsigned long long v4;  // [bp-0x437]\n
    unsigned long long v5;  // [bp-0x436]\n
    unsigned long long v6;  // [bp-0x435]\n
    struct_0 *v8;  // rbx\n
    unsigned long long v9;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v10;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax\n
    char *v12;  // r15\n
    void* v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rcx\n
    struct_2 *v15;  // rdi, Other Possible Types: unsigned long\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // rsi\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rcx\n
    char *v22;  // rcx\n
    unsigned long v23;  // rdx\n
    void* v24;  // r14, Other Possible Types: unsigned long\n
    void* v25;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v26;  // rcx\n
    struct_2 *v27;  // rdi\n
    unsigned long long v28;  // r15\n
\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v11 = a2->field_c;\n
            if (v11 + a1 >= 0x400)\n
            {\n
                v13 = 0x400 - v11;\n
                cgc_memcpy(&a2->padding_0[v11 + 32], a0, v13);\n
                v8->field_c = v8->field_c + v13;\n
                cgc_fflush(a2);\n
                if (v13 < a1)\n
                    goto LABEL_402d62;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_402d62:\n
                    v28 = a1 - v13;\n
                    cgc_memcpy(&v8->padding_0[v8->field_c + 32], a0 + v13, v28);\n
                    v8->field_c = v8->field_c + v28;\n
                    return a1;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v12 = a2->field_10;\n
    if (!v12)\n
    {\n
        v16 = 0;\n
        do\n
        {\n
            if (v16 >= a1)\n
                return a1;\n
            v16 += v3;\n
        } while (!cgc_transmit(a2, a1, a2, v17));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v25 = 0;\n
        v14 = 0x400;\n
        v15 = &v3;\n
        v0 = v10;\n
LABEL_402bd3:\n
        v18 = v9 - v25;\n
        if (0x400 <= v18)\n
            v18 = 0x400;\n
        v1 = v25;\n
        v19 = v10 + v25;\n
        v20 = v18;\n
        cgc_memcpy();\n
        if (v18)\n
        {\n
            v15 = v18 & 3;\n
            if (v18 - 1 < 3)\n
            {\n
                v21 = 0;\n
            }\n
            else\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    *(&v3 + v21) = v12[*(&v3 + v21)];\n
                    *(&v4 + v21) = v12[*(&v4 + v21)];\n
                    *(&v5 + v21) = v12[*(&v5 + v21)];\n
                    *(&v6 + v21) = v12[*(&v6 + v21)];\n
                    v21 += 4;\n
                } while ((v18 & 2044) != v21);\n
            }\n
            if (v15)\n
            {\n
                v22 = &v3 + v21;\n
                v23 = 0;\n
                do\n
                {\n
                    v22[v23] = v12[v22[v23]];\n
                    v23 += 1;\n
                } while (v15 != v23);\n
            }\n
        }\n
        v24 = 0;\n
        do\n
        {\n
            if (v18 <= v24)\n
            {\n
                v25 = v1 + v18;\n
                v10 = v0;\n
                v26 = 0x400;\n
                v27 = &v3;\n
                if (v25 >= v9)\n
                    return v9;\n
                goto LABEL_402bd3;\n
            }\n
            v24 += *(&v2);\n
        } while (!cgc_transmit(v15, v19));\n
    }\n
    return -1;\n
}\n
", "4205752:sub_402cb8": null, "4205979:sub_402d9b": null, "4205984:cgc_fxlat": "typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[15];\n
    uint128_t field_10;\n
    char padding_20[80];\n
    uint128_t field_70;\n
    uint128_t field_80;\n
    uint128_t field_90;\n
    uint128_t field_a0;\n
    uint128_t field_b0;\n
    uint128_t field_c0;\n
    uint128_t field_d0;\n
    uint128_t field_e0;\n
    uint128_t field_f0;\n
} struct_0;\n
\n
long long cgc_fxlat(struct_1 *a0, char a1[2])\n
{\n
    struct_1 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    unsigned long v4;  // rbx\n
    unsigned long v7;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v8;  // rdx, Other Possible Types: char\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rdi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // esi\n
    unsigned long v13;  // rdx\n
    char v14;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v4 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v4;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v8 = a1[0];\n
    v7 = 826981510;\n
    if (v3[0])\n
    {\n
        v9 = 1;\n
        do\n
        {\n
            v7 = __ROL__((v7 + v7 * 36) ^ v8, 13);\n
            v8 = v3[v9];\n
            v9 = v9 + 1;\n
        } while (v8);\n
    }\n
    *(v4) = 0xf0e0d0c0b0a09080706050403020100;\n
    *((v4 + 16)) = 41362427191743139026751447860679676176;\n
    strncpy(v4 + 32, \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmno\", 80);\n
    *((v4 + 112)) = 169468730032567031154139535364404179312;\n
    *((v4 + 128)) = 190819780506037679842037549948358263168;\n
    *((v4 + 144)) = 212170830979508328529935564532312347024;\n
    *((v4 + 160)) = 233521881452978977217833579116266430880;\n
    *((v4 + 176)) = 254872931926449625905731593700220514736;\n
    *((v4 + 192)) = 276223982399920274593629608284174598592;\n
    *((v4 + 208)) = 297575032873390923281527622868128682448;\n
    *((v4 + 224)) = 318926083346861571969425637452082766304;\n
    *((v4 + 240)) = 340277133820332220657323652036036850160;\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v7;\n
        v12 = v7 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v7 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = *((v4 + v10));\n
        *((v4 + v10)) = *((v4 + v13));\n
        *((v4 + v13)) = v14;\n
        v10 -= 1;\n
    }\n
}\n
", "4206429:sub_402f5d": null, "4206432:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4206447:sub_402f6f": null, "4206448:cgc_malloc_alloc": "typedef struct struct_5 {\n
    unsigned long long field_0;\n
    struct struct_5 *field_8;\n
    struct struct_6 *field_10;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_8[1032];\n
    unsigned long long field_410;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_2 *field_18;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_7 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_2 *field_18;\n
} struct_7;\n
\n
typedef struct struct_6 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_6;\n
\n
long long cgc_malloc_alloc(struct_1 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // rbx\n
    struct_5 *v4;  // rbx\n
    struct_5 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rbx\n
    struct_0 *v11;  // r15, Other Possible Types: unsigned long, unsigned long long, void*, struct_3 *\n
    unsigned long long v12;  // rdx\n
    unsigned long long v14;  // rbp\n
    unsigned long long v15;  // r15\n
    struct_3 *v16;  // rbx\n
    unsigned long long v17;  // rbx\n
    unsigned long long v18;  // rax\n
    unsigned long long v19;  // rax\n
    struct_2 *v20;  // rax\n
    struct_5 *v21;  // rcx\n
    unsigned long v22;  // rcx\n
    struct_4 *v23;  // rdx\n
    unsigned long v24;  // rdi, Other Possible Types: unsigned long long\n
    struct_2 *v25;  // rsi\n
    unsigned long long v26;  // rax\n
    struct_7 *v27;  // rsi\n
    struct_1 *v28;  // rax, Other Possible Types: unsigned long\n
    unsigned long v29;  // rcx\n
    unsigned long long v30;  // rax\n
    struct_2 *v31;  // rax\n
    unsigned long v32;  // r15\n
\n
    if (a1 > 2147483647)\n
    {\n
LABEL_402f85:\n
        return 0;\n
    }\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
        return cgc_tiny_alloc(a0, 4);\n
    if (v2 <= 15)\n
        return cgc_tiny_alloc(a0, v2);\n
    if (v2 > 131071)\n
    {\n
        if (!cgc_allocate(a0, a1, v7))\n
        {\n
            v11 = *(&v0);\n
            *(v11) = a0;\n
            *((v11 + 8)) = v2 + 4111 & -0x1000;\n
            goto LABEL_4032ab;\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
    v4 = v2 + 31;\n
    v5 = v4 & -0x10;\n
    if (!(v4 & -0x10))\n
    {\n
        v9 = 4294967295;\n
    }\n
    else if (v5 < 513)\n
    {\n
        v10 = v4 / 16;\n
        v9 = v10 + 2;\n
        if (v10 > 128)\n
        {\n
            v11 = 0;\n
            if (!(v9 == 131))\n
                goto LABEL_4030fc;\n
            goto LABEL_40301b;\n
        }\n
    }\n
    else if (v5 <= 0x1200)\n
    {\n
        v9 = (v5 + 22906492224 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v9 = 130;\n
        if (v5 <= 0x20000)\n
            v9 = (&v5[366503875733].field_8 >> 11) + 66;\n
    }\n
    do\n
    {\n
        v11 = (&a0->field_0)[v9];\n
        if (v11)\n
        {\n
            while (*((v11 + 8)) < v5)\n
            {\n
                v11 = *((v11 + 24));\n
                if (!v11)\n
                    goto LABEL_403223;\n
            }\n
        }\n
LABEL_403223:\n
        v9 += 1;\n
    } while (v9 != 131);\n
LABEL_40301b:\n
    if (!cgc_allocate(a0, a1, v12))\n
    {\n
        v14 = *(&v0);\n
        v15 = v14 + 1048575;\n
        v16 = v15 & -0x100000;\n
        if (v16 > v14)\n
            cgc_deallocate(a0);\n
        if ((v14 + 0x200000) > (v16 + 0x8000))\n
            cgc_deallocate(a0);\n
        *(1048 + &a0->field_0 + (v15 >> 20)) = 2;\n
        if (v16)\n
        {\n
            v11 = v16 | 16;\n
            v11->field_0 = 0;\n
            v17 = (v16 - v11) + 0x100000 & -0x10;\n
            v18 = v17 - 32;\n
            v11->field_8 = v18;\n
            *((-32 + v17 + &v11->field_0)) = v18;\n
            *((-24 + v17 + &v11->field_0)) = 0;\n
            v19 = v11->field_8;\n
            if (!(!(v19 & 1)))\n
                goto LABEL_4032d3;\n
            v11->field_8 = v19 | 1;\n
            v11->field_10 = 0;\n
            v11->field_18 = a0->field_410;\n
            a0->field_410 = v11;\n
            v20 = v11->field_18;\n
            if (v20)\n
            {\n
                v20->field_10 = v11;\n
                v11 = a0->field_410;\n
            }\n
            v9 = 130;\n
LABEL_4030fc:\n
            v21 = *((v11 + 8));\n
            if (!(v21 & 1))\n
            {\n
                v24 = \"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\";\n
                goto LABEL_4032bb;\n
            }\n
            else\n
            {\n
                v22 = v21 & -2;\n
                *((v11 + 8)) = v22;\n
                v23 = *((v11 + 16));\n
                if (v23)\n
                    v23->field_18 = *((v11 + 24));\n
                v25 = *((v11 + 24));\n
                if (v25)\n
                    v25->field_10 = v23;\n
                if ((&a0->field_0)[v9] == v11)\n
                    (&a0->field_0)[v9] = &v25;\n
                *((v11 + 16)) = 0;\n
                v26 = v22 - v5;\n
                if (v26 < 33)\n
                    goto LABEL_4032ab;\n
                v27 = v11 + v5;\n
                *((v11 + 8)) = v5;\n
                *((v11 + &v5->field_0)) = v5;\n
                *((8 + v11 + &v5->field_0)) = v26;\n
                *((v22 + v11)) = v26;\n
                if (v26 <= 0x200)\n
                {\n
                    v28 = (v26 >> 4) + 2;\n
                }\n
                else if (v26 <= 0x1200)\n
                {\n
                    v28 = (v26 + 0x7ffffffe00 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v29 = 130;\n
                    if (!(v26 <= 0x20000))\n
                        goto LABEL_403277;\n
                    v28 = (v26 + 0x7ffffffee00 >> 11) + 66;\n
                }\n
                v29 = v28;\n
LABEL_403277:\n
                v30 = v27->field_8;\n
                if (!(v30 & 1))\n
                {\n
                    v27->field_8 = v30 | 1;\n
                    v27->field_10 = 0;\n
                    v27->field_18 = &(&a0->field_0)[v29]->padding_0;\n
                    (&a0->field_0)[v29] = &v27->padding_0;\n
                    v31 = v27->field_18;\n
                    if (v31)\n
                        v31->field_10 = v27;\n
LABEL_4032ab:\n
                    v32 = v11 + 16;\n
                    return v32;\n
                }\n
            }\n
            while (true)\n
            {\n
LABEL_4032d3:\n
                v24 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
LABEL_4032bb:\n
                cgc_heap_error(v24, v11);\n
                cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
            }\n
        }\n
    }\n
    goto LABEL_402f85;\n
}\n
", "4207324:sub_4032dc": null, "4207328:cgc_tiny_alloc": "long long cgc_tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    struct struct_0 *v4[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned int v7;  // edx\n
    unsigned short *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
    unsigned long long v12;  // rbp\n
    unsigned long long v13;  // r13\n
    unsigned short *v14;  // r12\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rbx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v9 = *((a0 + v4 * 8));\n
    if (v9)\n
    {\n
        *((a0 + v5 * 8)) = *(&v9);\n
        return v9;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (v6)\n
    {\n
        v7 = v6[0];\n
        a1 = v6[1];\n
    }\n
    else\n
    {\n
        v8 = *((a0 + 5168));\n
        if (v8)\n
        {\n
            v9 = *((a0 + 5176));\n
        }\n
        else if (cgc_allocate(a0, a1, v10))\n
        {\n
            *((a0 + 5168)) = 0;\n
            return 0;\n
        }\n
        else\n
        {\n
            v12 = v0;\n
            v13 = v12 + 1048575;\n
            v14 = v13 & -0x100000;\n
            if (v14 > v12)\n
                cgc_deallocate(a0);\n
            if ((v12 + 0x200000) > (v14 + 0x80000))\n
                cgc_deallocate(a0);\n
            *((a0 + (v13 >> 20) + 1048)) = 1;\n
            v8 = v14;\n
            *((a0 + 5168)) = v14;\n
            v9 = 0;\n
            if (!v14)\n
                return 0;\n
        }\n
        v15 = v8;\n
        v6 = v8 + v9;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v15 + v9)) = v3;\n
        *((v15 + v9 + 2)) = v3;\n
        v16 = v9 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v7 = a1;\n
    }\n
    v17 = v3 + a1;\n
    *((v6 + 2)) = v17;\n
    if (v7 + v17 < 4097)\n
        return a1 + v6;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4207767:sub_403497": null, "4207776:malloc_free": "typedef struct struct_3 {\n
    unsigned long long field_-10;\n
    unsigned long long field_-8;\n
    unsigned long long field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
long long malloc_free(struct_3 *a0, struct_3 *a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    struct_3 *v3;  // rcx, Other Possible Types: unsigned long\n
    struct_3 *v4;  // r9\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdi\n
    struct_0 *v8;  // r11\n
    struct_0 *v9;  // r8\n
    struct_0 *v10;  // rax, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // r10\n
    unsigned long v14;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v15;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v16;  // r10\n
    struct_4 *v17;  // rcx\n
    struct_2 *v18;  // rdi\n
    unsigned long long v19;  // r11\n
    struct_0 *v20;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v21;  // rcx\n
    unsigned long long v22;  // rax\n
    unsigned long v23;  // rcx\n
    struct_4 *v24;  // rdx\n
    struct_2 *v25;  // rdi\n
    unsigned long v26;  // rax\n
    unsigned long long v27;  // rax\n
    struct_2 *v28;  // rax\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *(1048 + &a0->field_-10 + (a1 >> 20));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            a1->field_-10 = (&a0->field_-10)[v6];\n
            (&a0->field_-10)[v6] = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40386f;\n
        }\n
        else\n
        {\n
            if (a1->field_0 != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = a1->field_-8;\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v20 = &a1->field_0;\n
        v7 = v20->field_8;\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40386f;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_40386f;\n
        }\n
        else\n
        {\n
            v8 = v20->field_0;\n
            v9 = v7 + v20;\n
            v10 = v20 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (v10)\n
            {\n
                v13 = *((v10 + 8));\n
                if (!((v13 & -2) == v8))\n
                    goto LABEL_403886;\n
                if (v9->field_0 == v7)\n
                {\n
                    if ((v13 & 1))\n
                    {\n
                        if (v8 <= 15)\n
                        {\n
                            v16 = v13 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v8 <= 0x200)\n
                            {\n
                                v16 = (v13 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v8 <= 0x1200)\n
                                {\n
                                    v16 = (v8 + 22906492224 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v16 = 130;\n
                                    if (v8 <= 0x20000)\n
                                        v16 = (&v8[366503875733].field_8 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v10 + 8)) = v8;\n
                        v17 = *((v10 + 16));\n
                        if (v17)\n
                            v17->field_18 = *((v10 + 24));\n
                        v18 = *((v10 + 24));\n
                        if (v18)\n
                            v18->field_10 = v17;\n
                        if ((&v4->field_-10)[v16] == v10)\n
                            (&v4->field_-10)[v16] = v18;\n
                        *((v10 + 16)) = 0;\n
                        v19 = v8 + v20->field_8;\n
                        *((v10 + 8)) = v19;\n
                        v9->field_0 = v19;\n
                        v20 = v10;\n
                    }\n
LABEL_4036c4:\n
                    v21 = v9->field_8;\n
                    if ((v21 & 1))\n
                    {\n
                        v22 = v21 & -2;\n
                        if (v22 <= 15)\n
                        {\n
                            v23 = v21 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v22 <= 0x1200)\n
                                {\n
                                    v23 = (0x7ffffffe00 + v22 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v23 = 130;\n
                                    if (v22 <= 0x20000)\n
                                        v23 = (0x7ffffffee00 + v22 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        v9->field_8 = v22;\n
                        v24 = v9->field_10;\n
                        if (v24)\n
                            v24->field_18 = v9[1].field_0;\n
                        v25 = v9[1].field_0;\n
                        if (v25)\n
                            v25->field_10 = v24;\n
                        if ((&v4->field_-10)[v23] == v9)\n
                            (&v4->field_-10)[v23] = v25;\n
                        *(&v9->field_10) = 0;\n
                        v26 = v22 + *((v20 + 8));\n
                        *((v20 + 8)) = v26;\n
                        *((v20 + v26)) = v26;\n
                    }\n
                    v27 = *((v20 + 8));\n
                    if (v27 <= 15)\n
                    {\n
                        v3 = v27 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v27 <= 0x200)\n
                        {\n
                            v3 = (v27 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v27 <= 0x1200)\n
                            {\n
                                v3 = (0x7ffffffe00 + v27 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v3 = 130;\n
                                if (v27 <= 0x20000)\n
                                    v3 = (0x7ffffffee00 + v27 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(v27 & 1))\n
                    {\n
                        *((v20 + 8)) = v27 | 1;\n
                        *((v20 + 16)) = 0;\n
                        *((v20 + 24)) = (&v4->field_-10)[v3];\n
                        (&v4->field_-10)[v3] = v20;\n
                        v28 = *((v20 + 24));\n
                        if (!v28)\n
                            return v0;\n
                        v28->field_10 = v20;\n
                        return v0;\n
                    }\n
                    goto LABEL_403878;\n
                }\n
            }\n
            else if (v9->field_0 == v7)\n
            {\n
                goto LABEL_4036c4;\n
            }\n
            v14 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
            v15 = v9;\n
            goto LABEL_40388f;\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40386f:\n
    cgc_heap_error(v11, v3);\n
LABEL_403878:\n
    v10 = cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
LABEL_403886:\n
    v14 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    v15 = v10;\n
LABEL_40388f:\n
    cgc_heap_error(v14, v15, v3);\n
    return cgc_malloc_size(v14, v15, v3, v3, v9, v4);\n
}\n
", "4208800:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4208844:sub_4038cc": null, "4208848:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(void* a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_4038e1:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*(1048 + a0 + v3) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_403963;\n
    }\n
    else\n
    {\n
        if (*(1048 + a0 + v3) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_403963;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_403963:\n
                v5 = cgc_malloc_alloc(a0, a2);\n
                if (v5)\n
                {\n
                    cgc_memcpy(v5, a1);\n
                    malloc_free(a0, a1);\n
                    return v5;\n
                }\n
                goto LABEL_4038e1;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4209108:sub_4039d4": null, "4209120:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4209296:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4209332:sub_403ab4": null, "4209344:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4209390:sub_403aee": null, "4209392:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_403b84:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_403b17;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_403b17:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_403b84;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_403b17;\n
}\n
", "4209823:sub_403c9f": null, "4209824:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    char *v2;  // r8, Other Possible Types: unsigned long\n
    unsigned long v3;  // r11\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // r9\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    uint128_t *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r10\n
    unsigned long v13;  // r11\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // r9, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm1\n
    int v19;  // xmm1\n
    int v20;  // xmm1\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    unsigned long long v25;  // rdi\n
    uint128_t *v27;  // rcx, Other Possible Types: unsigned long\n
    int v28;  // xmm1\n
    unsigned long v29;  // r8\n
    char *v30;  // rcx\n
    char *v31;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v32;  // r8\n
    char *v33;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r9\n
    char *v35;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v36;  // rdx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 4)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403df5:\n
                if (a2 < 16)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x10;\n
                    v4 = v2 - 16;\n
                    v5 = (v4 >> 4) + 1;\n
                    v6 = v5 & 3;\n
                    if (v4 < 48)\n
                    {\n
                        v10 = 0;\n
                    }\n
                    else\n
                    {\n
                        v11 = v5 & -4;\n
                        v12 = v1 + a2 - 16;\n
                        v13 = &a2[a1 + 16];\n
                        v14 = 0;\n
                        do\n
                        {\n
                            *((v12 + v14)) = *((v13 + v14));\n
                            *((-16 + v12 + v14)) = *((v13 + v14 - 16));\n
                            *((-32 + v12 + v14)) = *((v13 + v14 - 32));\n
                            *((-48 + v12 + v14)) = *((v13 + v14 - 48));\n
                            v14 -= 64;\n
                            tmp_13 = v11;\n
                            v11 -= 4;\n
                        } while (tmp_13 != 4);\n
                        v10 = -(v14);\n
                    }\n
                    if (v6)\n
                    {\n
                        v25 = &a2[-1 * v10];\n
                        v27 = 0;\n
                        do\n
                        {\n
                            *(&v1[16 + v27 + v25]) = *((a1 + v25 - 16 + v27));\n
                            v27 -= 16;\n
                        } while (v6 * 16 + v27);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 12))\n
                        goto LABEL_403cd9;\n
                }\n
                v30 = v2;\n
                v2 = a2 & -4;\n
                v31 = -(v30);\n
                do\n
                {\n
                    *((v1 + a2 - 4 + v31)) = *(&a2[4 + v31 + a1]);\n
                    v31 -= 4;\n
                } while (!(v2) != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_403cd9:\n
                v34 = &a2[~(v2)];\n
                if ((a2 & 3))\n
                {\n
                    v35 = 0;\n
                    do\n
                    {\n
                        v1[v35 + v34] = *((a1 + v34 + v35));\n
                        v35 -= 1;\n
                    } while (!(a2 & 3) != v35);\n
                    v2 -= v35;\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                v36 = &a2[-1 * v2];\n
                do\n
                {\n
                    v1[1 + v36] = *((a1 + v36 - 1));\n
                    v1[2 + v36] = *((a1 + v36 - 2));\n
                    v1[3 + v36] = *((a1 + v36 - 3));\n
                    v1[4 + v36] = *((a1 + v36 - 4));\n
                    tmp_10 = v36;\n
                    v36 -= 4;\n
                } while (tmp_10 != 4);\n
                return v1;\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403df5;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_403cd9;\n
    }\n
    else\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403e03:\n
                if (a2 < 32)\n
                {\n
                    v3 = 0;\n
                }\n
                else\n
                {\n
                    v3 = a2 & -0x20;\n
                    v7 = v3 - 32;\n
                    v8 = (v7 >> 5) + 1;\n
                    v9 = v8 & 3;\n
                    if (v7 < 96)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v16 = v8 & -4;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v17 = *((a1 + v15 + 16));\n
                            *(&v1[v15]) = *((a1 + v15));\n
                            *(&v1[16 + v15]) = v17;\n
                            v18 = *((a1 + v15 + 48));\n
                            *(&v1[32 + v15]) = *((a1 + v15 + 32));\n
                            *(&v1[48 + v15]) = v18;\n
                            v19 = *((a1 + v15 + 80));\n
                            *(&v1[64 + v15]) = *((a1 + v15 + 64));\n
                            *(&v1[80 + v15]) = v19;\n
                            v20 = *((a1 + v15 + 112));\n
                            *(&v1[96 + v15]) = *((a1 + v15 + 96));\n
                            *(&v1[112 + v15]) = v20;\n
                            v15 -= -128;\n
                            tmp_21 = v16;\n
                            v16 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v9)\n
                    {\n
                        v21 = &v1[v15 + 16];\n
                        v22 = a1 + v15 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v28 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v28;\n
                            v24 += 32;\n
                        } while (v9 * 32 != v24);\n
                    }\n
                    if (v3 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_403d87;\n
                }\n
                v29 = v3;\n
                v3 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v29]) = *((a1 + v29));\n
                    v29 += 8;\n
                } while (v3 != v29);\n
                if (v3 == a2)\n
                    return v1;\n
LABEL_403d87:\n
                v32 = &a2[~(v3)];\n
                v33 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v3] = *((a1 + v3));\n
                        v3 += 1;\n
                        tmp_7 = v33;\n
                        v33 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v32 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v3] = *((a1 + v3));\n
                    v1[1 + v3] = *((a1 + v3 + 1));\n
                    v1[2 + v3] = *((a1 + v3 + 2));\n
                    v1[3 + v3] = *((a1 + v3 + 3));\n
                    v3 += 4;\n
                } while (a2 != v3);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403e03;\n
            }\n
        }\n
        v3 = 0;\n
        goto LABEL_403d87;\n
    }\n
}\n
", "4210751:sub_40403f": null, "4210752:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long v2;  // rcx\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // r10\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // r10, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rdi\n
    int v15;  // xmm0\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (a2 < 32)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v2 = a2 & -0x20;\n
            tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
            v3 = tmp_43;\n
            v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
            v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
            v6 = v2 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *(&v1[v9]) = v5;\n
                    *(&v1[16 + v9]) = v5;\n
                    *(&v1[32 + v9]) = v5;\n
                    *(&v1[48 + v9]) = v5;\n
                    *(&v1[64 + v9]) = v5;\n
                    *(&v1[80 + v9]) = v5;\n
                    *(&v1[96 + v9]) = v5;\n
                    *(&v1[112 + v9]) = v5;\n
                    *(&v1[128 + v9]) = v5;\n
                    *(&v1[144 + v9]) = v5;\n
                    *(&v1[160 + v9]) = v5;\n
                    *(&v1[176 + v9]) = v5;\n
                    *(&v1[192 + v9]) = v5;\n
                    *(&v1[208 + v9]) = v5;\n
                    *(&v1[224 + v9]) = v5;\n
                    *(&v1[240 + v9]) = v5;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = &v1[v9 + 16];\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = v5;\n
                    *((v11 + v13)) = v5;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            if (v2 == a2)\n
                return v1;\n
            if (!(a2 & 24))\n
                goto LABEL_4041b0;\n
        }\n
        v14 = v2;\n
        v2 = a2 & -8;\n
        tmp_20 = InterleaveLOV(tmp_21, tmp_21);\n
        v15 = tmp_20;\n
        do\n
        {\n
            *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
            v14 += 8;\n
        } while (v2 != v14);\n
        if (v2 == a2)\n
            return v1;\n
    }\n
    do\n
    {\n
LABEL_4041b0:\n
        v1[v2] = a1;\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4211134:sub_4041be": null, "4211136:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned long v32;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v32 = cgc__vsfprintf();\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v32;\n
    }\n
    v32 = cgc__vsfprintf();\n
    return v32;\n
}\n
", "4211348:sub_404294": null, "4211360:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return cgc__vsfprintf();\n
    }\n
    return cgc__vsfprintf();\n
}\n
", "4211438:sub_4042ee": null, "4211440:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned long v30;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v30;\n
    }\n
    v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    return v30;\n
}\n
", "4211649:sub_4043c1": null, "4211664:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4211747:sub_404423": null, "4211760:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4211913:sub_4044c9": null, "4211920:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4211933:sub_4044dd": null, "4211936:cgc__vsfprintf": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_4 *field_8;\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_0 *field_0;\n
} struct_4;\n
\n
long long cgc__vsfprintf(struct_0 *a0, struct_3 *a1, unsigned long a2, char *a3)\n
{\n
    int tmp_16;  // tmp #16\n
    int tmp_2;  // tmp #2\n
    unsigned long long v0;  // [bp-0x1c8]\n
    int tmp_50;  // tmp #50\n
    int tmp_70;  // tmp #70\n
    int tmp_12;  // tmp #12\n
    struct_0 *v1;  // [bp-0xa1]\n
    char *v2;  // [bp-0xa0]\n
    struct_0 *v3;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_3 *v4;  // [bp-0x90]\n
    char v5;  // [bp-0x88]\n
    char v6;  // [bp-0x87]\n
    char v7;  // [bp-0x76]\n
    char v8;  // [bp-0x75]\n
    char v9;  // [bp-0x74]\n
    unsigned long v10;  // [bp-0x40]\n
    unsigned long v11;  // [bp-0x38]\n
    char *v13;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v14;  // rbp, Other Possible Types: unsigned long\n
    void* v15;  // r15\n
    unsigned int v16;  // eax\n
    struct_0 *v17;  // r13b, Other Possible Types: char\n
    void* v18;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v19;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v20;  // edx, Other Possible Types: unsigned long\n
    char v21;  // cc_dep1\n
    char v22;  // cc_dep2\n
    struct_0 *v23;  // r12\n
    unsigned long long v24;  // rcx\n
    unsigned long long v25;  // rsi\n
    struct_3 *v26;  // rdx\n
    struct_3 *v27;  // rsi\n
    struct_3 *v28;  // rdx\n
    unsigned long long v29;  // rcx\n
    unsigned long long v30;  // rcx\n
    unsigned long long v31;  // rcx\n
    struct_3 *v32;  // rdx\n
    unsigned long long v33;  // rcx\n
    struct struct_0 **v34;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v35;  // rsi, Other Possible Types: unsigned long\n
    unsigned int *v36;  // rdi, Other Possible Types: unsigned long\n
    unsigned int *v37;  // rax, Other Possible Types: unsigned long\n
    unsigned long v38;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v39;  // r13\n
    unsigned long long v40;  // rax\n
    unsigned long v41;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v42;  // rcx\n
    char *v43;  // rbp\n
    struct_1 *v44;  // rbp, Other Possible Types: unsigned long\n
    struct_2 *v45;  // rsi, Other Possible Types: unsigned long\n
    struct_2 *v46;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v47;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v48;  // rbp, Other Possible Types: unsigned long long\n
    char *v49;  // r14, Other Possible Types: unsigned long, unsigned long long\n
    struct_0 *v50;  // rsi, Other Possible Types: struct_1 *, unsigned long long, unsigned long\n
    char *v51;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v52;  // rax\n
    unsigned long v53;  // r12, Other Possible Types: unsigned long long\n
    unsigned long long v54;  // rcx\n
    unsigned int v55;  // ebp\n
    struct_0 *v56;  // rax, Other Possible Types: unsigned long, char\n
    unsigned long long v57;  // r12\n
    char *v58;  // r13, Other Possible Types: unsigned long\n
\n
    v13 = a3;\n
    v4 = a1;\n
    v14 = &a0->field_0 + 1;\n
    v3 = v14;\n
    v56 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v49 = 0;\n
    }\n
    else\n
    {\n
        v15 = a2;\n
        v10 = 20 + -0x1 * &v5;\n
        v49 = 0;\n
        v2 = a3;\n
        while (true)\n
        {\n
            if (v56 != 37)\n
            {\n
                if (v49 < 2147483647)\n
                {\n
                    *(&v1) = v56;\n
                    if (v15)\n
                        cgc_fwrite(&v1, 1, v15);\n
                    if (v13)\n
                        *((v13 + v49)) = v1;\n
                    v14 = v3;\n
                }\n
                else if (v49 == -1)\n
                {\n
                    goto LABEL_404a96;\n
                }\n
                v49 += 1;\n
                v3 = v14 + 1;\n
                tmp_16 = *(v14);\n
                v56 = *(v14);\n
                v14 = v3;\n
                if (!(!tmp_16))\n
                    continue;\n
                goto LABEL_404a21;\n
            }\n
            a0 = v14 + 1;\n
            v3 = a0;\n
            v16 = *(v14);\n
            v17 = 32;\n
            if (v16 != 32)\n
            {\n
                if (v16 == 48)\n
                {\n
                    v17 = 48;\n
                }\n
                else\n
                {\n
                    if (!v16)\n
                        goto LABEL_404a21;\n
                    v3 = v14;\n
                    a0 = v14;\n
                }\n
            }\n
            if (*(a0) - 48 > 9)\n
            {\n
                v18 = 0;\n
            }\n
            else\n
            {\n
                v18 = cgc_strtoul();\n
                a0 = v3;\n
            }\n
            v19 = a0 + 1;\n
            v3 = v19;\n
            v20 = *(a0);\n
            *(&v13) = 1;\n
            if (v20 == 104)\n
            {\n
                v20 = a0 + 2;\n
                v21 = *((a0 + 1));\n
                v22 = 104;\n
            }\n
            else if (v20 == 108)\n
            {\n
                v21 = *((a0 + 1));\n
                v22 = 108;\n
                v20 = a0 + 2;\n
                *(&v13) = *((a0 + 1)) != 108;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    goto LABEL_404a1c;\n
                goto LABEL_40462f;\n
            }\n
            if (v21 == v22)\n
                v19 = v20;\n
            a0 = v19;\n
LABEL_40462f:\n
            v23 = a0 + 1;\n
            v3 = v23;\n
            *(&v20) = *(a0);\n
            v24 = *(a0);\n
            v25 = v24 - 88;\n
            if (v25 > 32)\n
            {\n
                v13 = v2;\n
                if (!v24)\n
                {\n
                    v57 = v23 - v14;\n
                    if (v49 < 2147483647)\n
                    {\n
                        v58 = 2147483647 - v49;\n
                        if (v58 > v57)\n
                            v58 = v57;\n
                        if (v15)\n
                            cgc_fwrite(v14, v58, v15);\n
                        if (v13)\n
                            cgc_memcpy(&v13[v49], v14, v58);\n
                    }\n
                    tmp_2 = v49;\n
                    v49 += v57;\n
                    if (__CFADD__(tmp_2, v57))\n
                        goto LABEL_404a96;\n
                    goto LABEL_404a21;\n
                }\n
                else\n
                {\n
                    v53 = v23 - v14;\n
                    if (!(v49 < 2147483647))\n
                        goto LABEL_40499f;\n
                    v41 = 2147483647 - v49;\n
                    if (v41 > v53)\n
                        v41 = v53;\n
                    if (v15)\n
                        cgc_fwrite(v14, v41, v15);\n
                    if (!v13)\n
                        goto LABEL_40499f;\n
                    a0 = &v13[v49];\n
                    v50 = v14;\n
                    v51 = v41;\n
                    goto LABEL_40499a;\n
                }\n
            }\n
            else\n
            {\n
                v0 = 4831842305;\n
                if (!((*(&v0 + ((v25 & 63) >> 3)) >> (v25 & 63 & 7)) & 1))\n
                {\n
                    if (v25 == 11)\n
                    {\n
                        v28 = v4;\n
                        v29 = v28->field_0;\n
                        if (v29 > 40)\n
                        {\n
                            v34 = v28->field_8;\n
                            v28->field_8 = v34 + 8;\n
                        }\n
                        else\n
                        {\n
                            v34 = v29 + v28->field_10;\n
                            v28->field_0 = v29 + 8;\n
                        }\n
                        v13 = v2;\n
                        if (v49 < 2147483647)\n
                        {\n
                            *(&v1) = *(v34);\n
                            if (v15)\n
                                cgc_fwrite(&v1, 1, v15);\n
                            if (v13)\n
                                *((v13 + v49)) = v1;\n
                        }\n
                        else if (v49 == -1)\n
                        {\n
                            goto LABEL_404a96;\n
                        }\n
                        v49 += 1;\n
                        goto LABEL_4049a8;\n
                    }\n
                    if (v25 == 27)\n
                    {\n
                        v32 = v4;\n
                        v33 = v32->field_0;\n
                        if (v33 <= 40)\n
                        {\n
                            v37 = v33 + v32->field_10;\n
                            v32->field_0 = v33 + 8;\n
                        }\n
                        else\n
                        {\n
                            v37 = v32->field_8;\n
                            v32->field_8 = v37 + 8;\n
                        }\n
                        v13 = v2;\n
                        v39 = *(v37);\n
                        v40 = cgc_strlen(v39);\n
                        v53 = v40;\n
                        if (!(v49 < 2147483647))\n
                            goto LABEL_40499f;\n
                        v48 = 2147483647 - v49;\n
                        if (v48 > v40)\n
                            v48 = v40;\n
                        if (v15)\n
                            cgc_fwrite(v39, v48, v15);\n
                        if (!v13)\n
                            goto LABEL_40499f;\n
                        a0 = &v13[v49];\n
                        v50 = v39;\n
                        goto LABEL_404997;\n
                    }\n
                }\n
                else\n
                {\n
                    v11 = v18;\n
                    if (v20 != 100)\n
                    {\n
                        v27 = v4;\n
                        if (v13)\n
                        {\n
                            v31 = v27->field_0;\n
                            v13 = v2;\n
                            if (v31 > 40)\n
                            {\n
                                v36 = v27->field_8;\n
                                v27->field_8 = v36 + 8;\n
                            }\n
                            else\n
                            {\n
                                v36 = v31 + v27->field_10;\n
                                v27->field_0 = v31 + 8;\n
                            }\n
                            v47 = *(v36);\n
                            if (v20 == 117)\n
                                a0 = 10;\n
                            else\n
                                a0 = 16;\n
                            v43 = (v20 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
                            v8 = 0;\n
                            v46 = &v8;\n
                            if (!v47)\n
                            {\n
                                v7 = *(v43);\n
                                v46 = &v7;\n
                            }\n
                            else\n
                            {\n
                                do\n
                                {\n
                                    *((v46 - 1)) = v43[(0 CONCAT v47) /m a0 >> 32];\n
                                    v46 = &v7;\n
                                    tmp_50 = v47;\n
                                    v47 = (0 CONCAT v47) /m a0;\n
                                } while (tmp_50 >= a0);\n
                            }\n
                            v44 = &v5;\n
                            cgc_memmove(&v5, v46, v10 + v46);\n
                            goto LABEL_404885;\n
                        }\n
LABEL_404a1c:\n
                        v13 = v2;\n
LABEL_404a21:\n
                        if (v49 < 2147483647)\n
                            break;\n
                        if (v49 == -1)\n
                        {\n
LABEL_404a96:\n
                            cgc__terminate(a0);\n
                        }\n
                        return v49;\n
                    }\n
                    else\n
                    {\n
                        v26 = v4;\n
                        v44 = &v5;\n
                        if (!v13)\n
                            goto LABEL_404a1c;\n
                        v30 = v26->field_0;\n
                        if (v30 > 40)\n
                        {\n
                            v35 = v26->field_8;\n
                            v26->field_8 = v35 + 8;\n
                        }\n
                        else\n
                        {\n
                            v35 = v30 + v26->field_10;\n
                            v26->field_0 = v30 + 8;\n
                        }\n
                        v38 = *(v35);\n
                        if (v38 < 0)\n
                        {\n
                            v5 = 45;\n
                            v38 = -(v38);\n
                            v9 = 0;\n
                            v45 = &v9;\n
                            a0 = &v6;\n
                        }\n
                        else\n
                        {\n
                            v8 = 0;\n
                            v45 = &v8;\n
                            a0 = &v5;\n
                            if (!v38)\n
                            {\n
                                v7 = 48;\n
                                a0 = &v5;\n
                                v45 = &v7;\n
                                goto LABEL_40484d;\n
                            }\n
                        }\n
                        do\n
                        {\n
                            v42 = 3435973837 * v38 >> 35;\n
                            *((v45 - 1)) = *((4219900 + v38 + -10 * v42));\n
                            v45 -= 1;\n
                            tmp_70 = v38;\n
                            v38 = v42;\n
                        } while (tmp_70 > 9);\n
                        v44 = &v5;\n
LABEL_40484d:\n
                        cgc_memmove(a0, v45, v45 - a0 + 20);\n
                        v13 = v2;\n
LABEL_404885:\n
                        v52 = cgc_strlen(v44);\n
                        v53 = v52;\n
                        v54 = v11;\n
                        if (v54 > v52)\n
                        {\n
                            v55 = v52 - v54;\n
                            do\n
                            {\n
                                if (v49 < 2147483647)\n
                                {\n
                                    *(&v1) = v17;\n
                                    if (v15)\n
                                        cgc_fwrite(&v1, 1, v15);\n
                                    if (v13)\n
                                        *((v13 + v49)) = v1;\n
                                }\n
                                else if (!(v49 == -1))\n
                                {\n
                                    continue;\n
                                }\n
                                tmp_2 = v49;\n
                                v49 += 1;\n
                                tmp_12 = v55 + 1;\n
                                v55 += 1;\n
                            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                        }\n
                        if (!(v49 < 2147483647))\n
                            goto LABEL_40499f;\n
                        v48 = 2147483647 - v49;\n
                        if (v48 > v52)\n
                            v48 = v52;\n
                        if (v15)\n
                            cgc_fwrite(&v5, v48, v15);\n
                        if (!v13)\n
                            goto LABEL_40499f;\n
                        a0 = v13 + v49;\n
                        v50 = &v5;\n
LABEL_404997:\n
                        v51 = v48;\n
LABEL_40499a:\n
                        cgc_memcpy(a0, v50, v51);\n
LABEL_40499f:\n
                        tmp_2 = v49;\n
                        v49 += v53;\n
                        if (__CFADD__(tmp_2, v53))\n
                            goto LABEL_404a96;\n
LABEL_4049a8:\n
                        v56 = v3;\n
                        v14 = v56 + 1;\n
                        v3 = v14;\n
                        *(&v56) = *(v56);\n
                        if (!*(&v56))\n
                            goto LABEL_404a21;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v13)\n
        *((v13 + v49)) = 0;\n
    return v49;\n
}\n
", "4212008:sub_404528": null, "4212101:sub_404585": null, "4212204:sub_4045ec": null, "4212899:sub_4048a3": null, "4212983:sub_4048f7": null, "4213408:cgc_realloc": "extern void g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4213426:sub_404ab2": null, "4213440:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    struct_0 *v5;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v5 = a0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v3 = cgc_tolower(v2);\n
            v2 = cgc_tolower(*(v1));\n
            if (v3 != v2)\n
            {\n
                *(&v2) = *((v5 - 1));\n
                return v2 - *(v1);\n
            }\n
            v1 += 1;\n
            v2 = *(v5);\n
            v5 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4213537:sub_404b21": null, "4213552:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4213648:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4213705:sub_404bc9": null, "4213712:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4213765:sub_404c05": null, "4213776:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4213829:sub_404c45": null, "4213840:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4213901:sub_404c8d": null, "4213904:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4213938:sub_404cb2": null, "4213952:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4214063:sub_404d2f": null, "4214064:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    char *v1;  // rax\n
    char v2;  // cl\n
    char *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    unsigned long v5;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r10\n
    char *v7;  // r10\n
    unsigned long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r11\n
    unsigned long long v11;  // r9\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // r11, Other Possible Types: unsigned long long\n
    uint128_t *v14;  // rcx\n
    unsigned long v16;  // rsi\n
    char *v17;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r8\n
    unsigned long long v19;  // rcx\n
    unsigned long v20;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    v4 = 0;\n
    v3 = v1;\n
    if (*(a1) && a2)\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1[v4] = v2;\n
            v2 = a1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
            if (v4 >= a2)\n
                break;\n
        }\n
        v3 = &v1[v4];\n
    }\n
    if (v4 >= a2)\n
        return v1;\n
    v5 = 1 + v3 - v1;\n
    v6 = (!(a2 <= v5) ? v5 : a2);\n
    v7 = &v1[v6 + -1 * v3];\n
    if (v7 < 8)\n
    {\n
LABEL_404d94:\n
        v17 = v3;\n
        goto LABEL_404ec6;\n
    }\n
    else\n
    {\n
        if (v7 < 32)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7 & -0x20;\n
            v9 = v8 - 32;\n
            v10 = (v9 >> 5) + 1;\n
            v11 = v10 & 7;\n
            if (v9 < 224)\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                v13 = v10 & -8;\n
                v12 = 0;\n
                do\n
                {\n
                    *((v3 + v12)) = 0;\n
                    *((v3 + v12 + 16)) = 0;\n
                    *((v3 + v12 + 32)) = 0;\n
                    *((v3 + v12 + 48)) = 0;\n
                    *((v3 + v12 + 64)) = 0;\n
                    *((v3 + v12 + 80)) = 0;\n
                    *((v3 + v12 + 96)) = 0;\n
                    *((v3 + v12 + 112)) = 0;\n
                    *((v3 + v12 + 128)) = 0;\n
                    *((v3 + v12 + 144)) = 0;\n
                    *((v3 + v12 + 160)) = 0;\n
                    *((v3 + v12 + 176)) = 0;\n
                    *((v3 + v12 + 192)) = 0;\n
                    *((v3 + v12 + 208)) = 0;\n
                    *((v3 + v12 + 224)) = 0;\n
                    *((v3 + v12 + 240)) = 0;\n
                    v12 += 0x100;\n
                    tmp_21 = v13;\n
                    v13 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v11)\n
            {\n
                v14 = v12 + v3 + 16;\n
                v16 = 0;\n
                do\n
                {\n
                    *((-16 + v14 + v16)) = 0;\n
                    *((v14 + v16)) = 0;\n
                    v16 += 32;\n
                } while (v11 * 32 != v16);\n
            }\n
            if (v7 == v8)\n
                return v1;\n
            if (!(v7 & 24))\n
            {\n
                v3 += v8;\n
                goto LABEL_404d94;\n
            }\n
        }\n
        if (a2 > v5)\n
            v5 = a2;\n
        v18 = &v1[v5 + -1 * v3];\n
        v19 = v18 & -8;\n
        v17 = v3 + v19;\n
        do\n
        {\n
            *((v3 + v8)) = 0;\n
            v8 += 8;\n
        } while (v19 != v8);\n
        if (v18 == v19)\n
            return v1;\n
LABEL_404ec6:\n
        v20 = v17 - v1;\n
        do\n
        {\n
            *(v17) = 0;\n
            v17 += 1;\n
            v20 += 1;\n
        } while (v20 < a2);\n
        return v1;\n
    }\n
}\n
", "4214506:sub_404eea": null, "4214512:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4214583:sub_404f37": null, "4214592:cgc_strsep": "long long cgc_strsep(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    unsigned long v3;  // r15\n
    unsigned long v4;  // rbx\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rbx\n
    unsigned long v9;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = cgc_strchr(a1, v2);\n
            if (v5)\n
            {\n
                v7 = v3 + v4;\n
                if (!*((v3 + v4)))\n
                    goto LABEL_404f85;\n
                v8 = v4 + 1;\n
                v9 = v8 + v3;\n
                goto LABEL_404f87;\n
            }\n
            v4 = v4 + 1;\n
            v2 = *((v3 + v4));\n
        } while (v2);\n
        v6 = v4;\n
    }\n
    v7 = v6 + v3;\n
LABEL_404f85:\n
    v9 = 0;\n
LABEL_404f87:\n
    *(a0) = v9;\n
    *(v7) = 0;\n
    return *(a0);\n
}\n
", "4214705:sub_404fb1": null, "4214720:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4214799:sub_40500f": null, "4214800:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    unsigned int v25;  // r14d\n
    unsigned long long *v26;  // r15, Other Possible Types: unsigned long\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    void* v29;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    char v30[2];  // rax, Other Possible Types: unsigned long\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v26 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v28 = 0;\n
                v27 = 1;\n
                v25 = 1;\n
                v29 = 0;\n
                if (!a1)\n
                    goto LABEL_4051f5;\n
                v30 = v2;\n
                if (!v25)\n
                    v30 = v16;\n
                *(v26) = v30;\n
                goto LABEL_4051f5;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_4050d1;\n
        goto LABEL_405071;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (a2)\n
        {\n
LABEL_405071:\n
            if (!(a2 == 16))\n
                goto LABEL_405126;\n
            *(&v18) = *(v16);\n
            v19 = 16;\n
            if (!(*(v16) == 48))\n
                goto LABEL_405128;\n
            v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
            goto LABEL_405106;\n
        }\n
        else\n
        {\n
LABEL_4050d1:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_405110:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_4051d2;\n
LABEL_405126:\n
                *(&v18) = *(v16);\n
LABEL_405128:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_405135:\n
                    v29 = 0;\n
                    v28 = 0;\n
                    v25 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v29 = v22 + v19 * v29;\n
                        if (v29 > 2147483647)\n
                            v28 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v25 = 0;\n
                    } while (v18);\n
                    v26 = v1;\n
                    goto LABEL_4051dd;\n
                }\n
LABEL_4051d2:\n
                v28 = 0;\n
                v25 = 1;\n
                v29 = 0;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_405135;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_405110;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
LABEL_405106:\n
                v19 = 16;\n
                goto LABEL_405126;\n
            }\n
        }\n
    }\n
LABEL_4051dd:\n
    v27 = v0;\n
LABEL_4051f5:\n
    v31 = (!v28 ? -0x80000000 : -(v29));\n
    v32 = (!v28 ? 2147483647 : v29);\n
    if (v27 < 0)\n
        v32 = v31;\n
    return v32;\n
}\n
", "4215145:sub_405169": null, "4215334:sub_405226": null, "4215344:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    unsigned int v25;  // r14d\n
    unsigned long long *v26;  // r15, Other Possible Types: unsigned long\n
    unsigned int v27;  // ecx\n
    void* v28;  // rbp, Other Possible Types: unsigned long, unsigned long long, unsigned int\n
    void* v29;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    char v30[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v31;  // eax\n
    unsigned long v32;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v26 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v28 = 0;\n
                v27 = 1;\n
                v25 = 1;\n
                v29 = 0;\n
                if (!a1)\n
                    goto LABEL_405415;\n
                v30 = v2;\n
                if (!v25)\n
                    v30 = v16;\n
                *(v26) = v30;\n
                goto LABEL_405415;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_4052f1;\n
        goto LABEL_405291;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (a2)\n
        {\n
LABEL_405291:\n
            if (!(a2 == 16))\n
                goto LABEL_405346;\n
            *(&v18) = *(v16);\n
            v19 = 16;\n
            if (!(*(v16) == 48))\n
                goto LABEL_405348;\n
            v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
            goto LABEL_405326;\n
        }\n
        else\n
        {\n
LABEL_4052f1:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_405330:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_4053f2;\n
LABEL_405346:\n
                *(&v18) = *(v16);\n
LABEL_405348:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_405355:\n
                    v29 = 0;\n
                    v28 = 0;\n
                    v25 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v29 = v22 + v19 * v29;\n
                        if (v29 >> 32)\n
                            v28 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v25 = 0;\n
                    } while (v18);\n
                    v26 = v1;\n
                    goto LABEL_4053fd;\n
                }\n
LABEL_4053f2:\n
                v28 = 0;\n
                v25 = 1;\n
                v29 = 0;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_405355;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_405330;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
LABEL_405326:\n
                v19 = 16;\n
                goto LABEL_405346;\n
            }\n
        }\n
    }\n
LABEL_4053fd:\n
    v27 = v0;\n
LABEL_405415:\n
    if (v27 < 0)\n
    {\n
        v31 = (v29 == -0x80000000 ? 1 : v28);\n
        if (v29 <= 2147483647)\n
            v31 = v28;\n
        v29 = -(v29);\n
        v28 = v31;\n
    }\n
    v32 = (!v28 ? 4294967295 : v29);\n
    return v32;\n
}\n
", "4215689:sub_405389": null, "4215889:sub_405451": null, "4215904:cgc_send_flush": "extern unsigned int txcnt;\n
\n
long long cgc_send_flush()\n
{\n
    char v0;  // [bp-0x20]\n
    void* v2;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rax\n
\n
    v2 = 0;\n
    while (v2 != txcnt)\n
    {\n
        v7 = cgc_transmit(v3, v4, v5, v6);\n
        v2 += *(&v0);\n
        if (v7)\n
            break;\n
    }\n
    txcnt = 0;\n
    return v7;\n
}\n
", "4215997:sub_4054bd": null, "4216000:cgc_get_byte": "typedef struct struct_0 {\n
    char padding_0[4231760];\n
    char field_409250;\n
} struct_0;\n
\n
extern char rxbuf;\n
extern unsigned int rxcnt;\n
extern unsigned int rxidx;\n
\n
long long cgc_get_byte()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rax\n
\n
    v0 = v2;\n
    v3 = rxidx;\n
    if (rxcnt == rxidx)\n
    {\n
        if (cgc_receive(v4, v5, v6, v7))\n
            return 4294967295;\n
        if (!rxcnt)\n
            return 4294967295;\n
        rxcnt = v0;\n
        v3 = 0;\n
    }\n
    rxidx = v3 + 1;\n
    v9 = (&rxbuf)[v3];\n
    return v9;\n
}\n
", "4216089:sub_405519": null, "4216096:cgc_send_n_bytes": "long long cgc_send_n_bytes(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x30]\n
    int tmp_2;  // tmp #2\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned long long\n
\n
    v0 = 0;\n
    if (!a2)\n
        return 0;\n
    v3 = a2;\n
    while (true)\n
    {\n
        if (cgc_transmit())\n
            return 4294967295;\n
        tmp_2 = v3;\n
        v3 -= v0;\n
        if (tmp_2 == v0)\n
            return 0;\n
    }\n
}\n
", "4216205:sub_40558d": null, "4216208:cgc_read_until_or_timeout": "typedef struct struct_1 {\n
    char padding_0[4231760];\n
    char field_409250;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
extern char rxbuf;\n
extern unsigned int rxcnt;\n
extern unsigned int rxidx;\n
\n
long long cgc_read_until_or_timeout(unsigned long long a0, char *a1, unsigned long long a2, unsigned long long a3, unsigned long long a4, unsigned int *a5)\n
{\n
    char v0;  // [bp-0xcc]\n
    int tmp_2;  // tmp #2\n
    void* v1;  // [bp-0xc8], Other Possible Types: char\n
    unsigned long long v3;  // [bp-0xb0], Other Possible Types: char\n
    unsigned long v5;  // r14\n
    unsigned long v6;  // rbp\n
    unsigned long long v8;  // rax\n
    char v10;  // al\n
    struct_0 *v11;  // r13\n
    unsigned long v12;  // rcx, Other Possible Types: unsigned long long\n
    struct_1 *v13;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v15;  // rax\n
    unsigned long v16;  // rbx, Other Possible Types: unsigned long long\n
\n
    do\n
    {\n
        if (*(&v0) != 1)\n
        {\n
LABEL_405741:\n
            return v6;\n
        }\n
        v12 = rxcnt;\n
        v13 = rxidx;\n
        while (true)\n
        {\n
            if (v12 == v13)\n
            {\n
                v8 = cgc_receive(v11, v5, a2, v12);\n
                if (!(!v8))\n
                    goto LABEL_4055f2;\n
                if (!rxcnt)\n
                    goto LABEL_4055f2;\n
                rxcnt = *(&v1);\n
                v13 = 0;\n
            }\n
            rxidx = v13 + 1;\n
            v10 = (&rxbuf)[v13];\n
            v11 = &a1[v6];\n
            a1[v6] = v10;\n
            a1[1 + v6] = 0;\n
            if (cgc_strchr(v11, v5))\n
            {\n
                v15 = cgc_strchr(v11, v5);\n
                v1 = 0;\n
                if (v15 - a1 == v6)\n
                    return v15 - a1;\n
                v16 = &a1[-1 * v15 + v6];\n
                while (true)\n
                {\n
                    if (cgc_transmit())\n
                        return v15 - a1;\n
                    tmp_2 = v16;\n
                    v16 -= v1;\n
                    if (tmp_2 == v1)\n
                        return v15 - a1;\n
                }\n
            }\n
            v6 += 1;\n
            v12 = rxcnt;\n
            v13 = rxidx;\n
            if (rxcnt == rxidx)\n
                break;\n
            if (!(v6 < a2))\n
                break;\n
        }\n
        if (!(v6 < a2))\n
            goto LABEL_405741;\n
        v3 = v3 | 1;\n
    } while (!cgc_fdwait(v11, v5, a2, rxcnt, a4));\n
    *(a5) = 1;\n
LABEL_4055f2:\n
    return 0;\n
}\n
", "4216649:sub_405749": null, "4216656:cgc_strip_program": "long long cgc_strip_program(char *a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x138]\n
    char *v2;  // rbx\n
    char *v3;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r8\n
    char v6;  // dil\n
    char v7;  // dil\n
    char v8;  // dil\n
    unsigned long v9;  // rsi\n
    char *v10;  // rbx\n
    unsigned long v11;  // rsi\n
\n
    v2 = cgc_calloc(1, a1);\n
    cgc_memcpy(v2, a0, a1);\n
    cgc_memset(a0, 0, a1);\n
    if (!a1)\n
        return a0 - a0;\n
    v4 = a1 & 3;\n
    if (a1 - 1 < 3)\n
    {\n
        v9 = 0;\n
        v3 = a0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v3 = a0;\n
        do\n
        {\n
            v6 = v2[v9];\n
            if (v6 - 43 <= 50)\n
            {\n
                v0 = 1407374884208655;\n
                if (((*(&v0 + ((v2[v9] - 43 & 63) >> 3)) >> (v2[v9] - 43 & 63 & 7)) & 1))\n
                {\n
                    *(v3) = v6;\n
                    v3 += 1;\n
                }\n
            }\n
            v7 = v2[1 + v9];\n
            if (v7 - 43 <= 50)\n
            {\n
                v0 = 1407374884208655;\n
                if (((*(&v0 + ((v2[1 + v9] - 43 & 63) >> 3)) >> (v2[1 + v9] - 43 & 63 & 7)) & 1))\n
                {\n
                    *(v3) = v7;\n
                    v3 += 1;\n
                }\n
            }\n
            v8 = v2[2 + v9];\n
            if (v8 - 43 <= 50)\n
            {\n
                v0 = 1407374884208655;\n
                if (((*(&v0 + ((v2[2 + v9] - 43 & 63) >> 3)) >> (v2[2 + v9] - 43 & 63 & 7)) & 1))\n
                {\n
                    *(v3) = v8;\n
                    v3 += 1;\n
                }\n
            }\n
            a0 = v2[3 + v9];\n
            if (a0 - 43 <= 50)\n
            {\n
                v0 = 1407374884208655;\n
                if (((*(&v0 + ((v2[3 + v9] - 43 & 63) >> 3)) >> (v2[3 + v9] - 43 & 63 & 7)) & 1))\n
                {\n
                    *(v3) = a0;\n
                    v3 += 1;\n
                }\n
            }\n
            v9 += 4;\n
        } while ((a1 & -4) != v9);\n
    }\n
    if (!v4)\n
        return v3 - a0;\n
    v10 = &v2[v9];\n
    v11 = 0;\n
    do\n
    {\n
        a0 = v10[v11];\n
        if (a0 - 43 <= 50)\n
        {\n
            v0 = 1407374884208655;\n
            if (((*(&v0 + ((v10[v11] - 43 & 63) >> 3)) >> (v10[v11] - 43 & 63 & 7)) & 1))\n
            {\n
                *(v3) = a0;\n
                v3 += 1;\n
            }\n
        }\n
        v11 += 1;\n
    } while (v4 != v11);\n
    return v3 - a0;\n
}\n
", "4216759:sub_4057b7": null, "4216827:sub_4057fb": null, "4216958:sub_40587e": null, "4216960:cgc_execute_program": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4231680];\n
    char field_409200;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4231760];\n
    struct struct_2 *field_409250;\n
} struct_2;\n
\n
extern void* cgc_stderr;\n
extern char rxbuf;\n
extern unsigned int rxcnt;\n
extern unsigned int rxidx;\n
extern char txbuf;\n
extern unsigned int txcnt;\n
\n
long long cgc_execute_program(char *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x8050]\n
    int tmp_23;  // tmp #23\n
    int tmp_9;  // tmp #9\n
    struct_0 *v1;  // [bp-0x8048]\n
    char *v2;  // [bp-0x8040]\n
    char v3;  // [bp-0x8039]\n
    char v4;  // [bp-0x8038]\n
    char v5;  // [bp-0x8037]\n
    char v6;  // [bp-0x39]\n
    unsigned long v8;  // rbx\n
    unsigned long v9;  // r13\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rax\n
    unsigned long long v12;  // r12\n
    unsigned long v13;  // r15, Other Possible Types: unsigned long long\n
    void* v14;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v15;  // rcx\n
    unsigned long long v16;  // rdx\n
    unsigned long v17;  // rbp, Other Possible Types: unsigned long long\n
    char *v18;  // r13\n
    void* v19;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v20;  // rsi, Other Possible Types: unsigned long long, unsigned long\n
    struct_2 *v21;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v22;  // rcx\n
    unsigned long long v24;  // rax\n
    unsigned long v25;  // r14\n
\n
    while (true)\n
    {\n
        *(&v11) = *(v25);\n
        if (v13 > 0)\n
            break;\n
        v9 = 4294967295;\n
        *(&v11) = v11 - 43;\n
        switch (*(&v11))\n
        {\n
        case 0:\n
            *(v20) = *(v20) + 1;\n
            break;\n
        case 1:\n
            v1 = v20;\n
            v2 = v8;\n
            v14 = 0;\n
            while (v14 != txcnt)\n
            {\n
                v14 += *(&v0);\n
                if (cgc_transmit(a0, v20, v10, txcnt))\n
                    break;\n
            }\n
            txcnt = 0;\n
            v21 = rxidx;\n
            v8 = v2;\n
            if (rxcnt != rxidx)\n
            {\n
LABEL_4059f5:\n
                rxidx = v21 + 1;\n
                tmp_23 = (&rxbuf)[v21];\n
                *(&v21) = (&rxbuf)[v21];\n
                v20 = v1;\n
                v20->field_0 = *(&v21);\n
                if (!tmp_23)\n
                {\n
                    v9 = 0;\n
                    goto LABEL_405b26;\n
                }\n
            }\n
            else\n
            {\n
                if (!cgc_receive(a0, v20, v10, v22) && rxcnt)\n
                {\n
                    rxcnt = *(&v0);\n
                    v21 = 0;\n
                    goto LABEL_4059f5;\n
                }\n
                cgc_fprintf(cgc_stderr, \"Read failed: %d\\n
\");\n
                goto LABEL_405b26;\n
            }\n
        case 2:\n
            *(v20) = *(v20) - 1;\n
            break;\n
        case 3:\n
            tmp_9 = *(v20);\n
            v15 = txcnt;\n
            v16 = txcnt + 1;\n
            txcnt = v16;\n
            *((v15 + &txbuf)) = tmp_9;\n
            if (v16 == 64)\n
            {\n
                v1 = v20;\n
                v18 = v8;\n
                v19 = 0;\n
                while (!cgc_transmit(a0, v20, v16, v15))\n
                {\n
                    v19 += *(&v0);\n
                    if (v19 == txcnt)\n
                        break;\n
                }\n
                txcnt = 0;\n
                v8 = v18;\n
                v20 = v1;\n
                break;\n
            }\n
        case 17:\n
            if (!(v20 < &v6))\n
                goto LABEL_405b26;\n
            if (v20 < &v4)\n
                goto LABEL_405b26;\n
            v20 = &v3;\n
            break;\n
        case 19:\n
            if (v20 < &v4)\n
                goto LABEL_405b26;\n
            v20 = &v5;\n
            break;\n
        case 48:\n
            if (!*(v20))\n
                v17 = 1;\n
            v13 += !*(v20);\n
            break;\n
        case 50:\n
            v13 = v13 - -1 - (*(v20) < 1);\n
            v17 = v17 | -(0 < *(v20));\n
            break;\n
        default:\n
LABEL_405b26:\n
            return v9;\n
        }\n
LABEL_405943:\n
        v24 = v17;\n
        v25 += v17;\n
        v9 = 0;\n
        if (v25 < v8)\n
            goto LABEL_405b26;\n
        if (!(v25 < v12))\n
            goto LABEL_405b26;\n
    }\n
    if (v11 == 91)\n
    {\n
        v13 += v17;\n
        if (v13 < 0)\n
        {\n
LABEL_405b20:\n
            v9 = 4294967295;\n
            goto LABEL_405b26;\n
        }\n
    }\n
    else if (v11 == 93)\n
    {\n
        v13 -= v17;\n
        if (v13 < 0)\n
            goto LABEL_405b20;\n
    }\n
    if (v13)\n
    {\n
        goto LABEL_405943;\n
    }\n
    else\n
    {\n
        v17 = 1;\n
        goto LABEL_405943;\n
    }\n
}\n
", "4217085:sub_4058fd": null, "4217121:sub_405921": null, "4217703:sub_405b67": null, "4217712:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int txbuf;\n
extern unsigned int txcnt;\n
\n
int main()\n
{\n
    unsigned long long v0;  // [bp-0x2158]\n
    int tmp_3;  // tmp #3\n
    char v1;  // [bp-0x2038]\n
    unsigned int v2;  // [bp-0x202c]\n
    char v3;  // [bp-0x2028]\n
    char v4;  // [bp-0x2027]\n
    struct_0 *v6;  // rbx, Other Possible Types: unsigned long\n
    char *v8;  // rax\n
    char v9;  // cl\n
    char v10;  // cl\n
    char v11;  // cl\n
    unsigned long long v12;  // rcx\n
    unsigned long v13;  // rbp\n
    unsigned long long v14;  // rbx\n
    unsigned long v15;  // rsi\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rdi\n
    void* v18;  // rbx, Other Possible Types: unsigned long\n
\n
    cgc_printf(\"Welcome to the headscratch interpreter.\\n
Enter your program to have it executed!\\n
%u\\n
\");\n
    v6 = &v3;\n
    cgc_read_until_or_timeout(\"Welcome to the headscratch interpreter.\\n
Enter your program to have it executed!\\n
%u\\n
\", &v3, 0x2000, 10, 3, &v2);\n
    if (v2)\n
        return -1;\n
    v8 = cgc_calloc(1, 0x2000);\n
    cgc_memcpy(v8, &v3, 0x2000);\n
    v13 = 0;\n
    cgc_memset(&v3, 0, 0x2000);\n
    do\n
    {\n
        v9 = v8[v13];\n
        if (v9 - 43 <= 50)\n
        {\n
            v0 = 1407374884208655;\n
            if (((*(&v0 + ((v8[v13] - 43 & 63) >> 3)) >> (v8[v13] - 43 & 63 & 7)) & 1))\n
            {\n
                *(v6) = v9;\n
                v6 = &v4;\n
            }\n
        }\n
        v10 = v8[1 + v13];\n
        if (v10 - 43 <= 50)\n
        {\n
            v0 = 1407374884208655;\n
            if (((*(&v0 + ((v8[1 + v13] - 43 & 63) >> 3)) >> (v8[1 + v13] - 43 & 63 & 7)) & 1))\n
            {\n
                *(v6) = v10;\n
                v6 += 1;\n
            }\n
        }\n
        v11 = v8[2 + v13];\n
        if (v11 - 43 <= 50)\n
        {\n
            v0 = 1407374884208655;\n
            if (((*(&v0 + ((v8[2 + v13] - 43 & 63) >> 3)) >> (v8[2 + v13] - 43 & 63 & 7)) & 1))\n
            {\n
                *(v6) = v11;\n
                v6 += 1;\n
            }\n
        }\n
        v12 = v8[3 + v13];\n
        if ((v12 - 43) <= 50)\n
        {\n
            v0 = 1407374884208655;\n
            if (((*(&v0 + ((v8[3 + v13] - 43 & 63) >> 3)) >> (v8[3 + v13] - 43 & 63 & 7)) & 1))\n
            {\n
                *(v6) = v12;\n
                v6 += 1;\n
            }\n
        }\n
        v13 += 4;\n
    } while (v13 != 0x2000);\n
    tmp_3 = v6;\n
    v14 = v6 - &v3;\n
    if (tmp_3 == &v3)\n
        return -1;\n
    v15 = v14;\n
    if (cgc_execute_program(&v3, v14) < 0)\n
        return -1;\n
    v16 = 0;\n
    while (v16 != txcnt)\n
    {\n
        v16 += *(&v1);\n
        if (cgc_transmit(v17, v15, 0x2000, v12))\n
            break;\n
    }\n
    txbuf = 12601155;\n
    txcnt = 4;\n
    v18 = 0;\n
    while (!cgc_transmit(v17, v15, 0x2000, v12))\n
    {\n
        v18 += *(&v1);\n
        if (v18 == txcnt)\n
            break;\n
    }\n
    txcnt = 0;\n
    return 0;\n
}\n
", "4217867:sub_405c0b": null, "4218216:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}