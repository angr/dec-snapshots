{"4202496:_init": "extern struct_0 *g_409230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409230;\n
    if (g_409230)\n
        v1 = g_409230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409250;\n
    goto *(4231768);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231744);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_409238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203108:sub_402264": null, "4203120:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4203244:sub_4022ec": null, "4203248:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4203376:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4203438:sub_4023ae": null, "4203440:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203665:sub_402491": null, "4203680:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v4 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 39;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4203887:sub_40256f": null, "4203888:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402871;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402871:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4204673:sub_402881": null, "4204688:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_0 **v2;  // [bp-0x150]\n
    struct_1 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned int *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_3 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_3 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_1 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_403296:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    cgc_putc(*(v27));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 <= 40)\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                else\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 <= 160)\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                else\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v6 = v59;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; v23->field_0; v23 += 1)\n
                {\n
                    cgc_putc(v23->field_0);\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_403296;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403133;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403133:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4207277:sub_4032ad": null, "4207280:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_1 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_0 **v2;  // [bp-0x160]\n
    struct_1 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_3 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_3 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_1 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v45;  // rcx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_403d9b:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    a0[v37] = v27->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 <= 40)\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                else\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_403d9b;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403c07;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403c07:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4210098:sub_403db2": null, "4210112:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4210287:sub_403e6f": null, "4210288:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4210452:sub_403f14": null, "4210464:cgc_sprng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_sprng(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = a0;\n
    v1 = a0;\n
    for (v0 = 0; v0 < 16; v0 = v3)\n
    {\n
        v1 = v1 >> 12 ^ v1;\n
        v1 = v1 * 0x2000000 ^ v1;\n
        v1 = v1 >> 27 ^ v1;\n
        (&state)[v0] = v1 * 1803442709493370165;\n
        v3 = v0 + 1;\n
    }\n
    position = 0;\n
    return v3;\n
}\n
", "4210601:sub_403fa9": null, "4210608:cgc_prng": "extern unsigned int position;\n
extern unsigned long long state;\n
\n
long long cgc_prng()\n
{\n
    unsigned long v0;  // [bp-0x18], Other Possible Types: unsigned long long\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v1 = (&state)[position];\n
    position = (position + 1 >> 31 CONCAT position + 1) /m 16 >> 32;\n
    v0 = (&state)[position];\n
    v0 = v0 * 0x8000000 ^ v0;\n
    v0 = v0 >> 13 ^ v0;\n
    v1 = v1 >> 46 ^ v1;\n
    (&state)[position] = v1 ^ v0;\n
    return (&state)[position] * 1865811235122147685;\n
}\n
", "4210784:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    if (a1 <= a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1 - a0 + 1;\n
    v1 = (0 CONCAT -1) /m v2;\n
    do\n
    {\n
        v0 = cgc_prng();\n
    } while (v0 >= v2 * v1);\n
    v3 = (0 CONCAT v0) /m v1 + a0;\n
    return v3;\n
}\n
", "4210896:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        *((a0 + v0)) = *((a1 + v0));\n
    }\n
    return v0;\n
}\n
", "4210979:sub_404123": null, "4210992:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211043:sub_404163": null, "4211056:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211107:sub_4041a3": null, "4211120:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4211175:sub_4041e7": null, "4211184:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4211239:sub_404227": null, "4211248:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4211291:sub_40425b": null, "4211296:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4211339:sub_40428b": null, "4211344:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211395:sub_4042c3": null, "4211408:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4211499:sub_40432b": null, "4211504:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4211532:sub_40434c": null, "4211536:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4211588:sub_404384": null, "4211600:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_404579;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_404579;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_404579;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_4044e9:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_404579;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_4044e9;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_404579:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4212157:sub_4045bd": null, "4212160:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4212552:sub_404748": null, "4212560:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4212663:sub_4047b7": null, "4212672:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = v1[a1];\n
        if (!(v0 & 1))\n
            break;\n
        *((a0 + v1)) = *((a1 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = 0;\n
    }\n
    return a0;\n
}\n
", "4212845:sub_40486d": null, "4212848:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212966:sub_4048e6": null, "4212976:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4213064:sub_404948": null, "4213072:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4213190:sub_4049c6": null, "4213200:cgc_stricmp": "long long cgc_stricmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v0 = cgc_tolower(*(v3));\n
            v1 = v0 == cgc_tolower(*(v2));\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4213344:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4213553:sub_404b31": null, "4213568:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4213651:sub_404b93": null, "4213664:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
\n
    while (true)\n
    {\n
        cgc_bzero(&v3, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 128, v7, v8, v9);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 128, v7, v8);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4213933:sub_404cad": null, "4213936:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4214030:sub_404d0e": null, "4214032:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v0 == a1)\n
            return v2;\n
        v2[a0] = v0;\n
        v2 += 1;\n
    }\n
}\n
", "4214233:sub_404dd9": null, "4214240:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v1 = a1 - v2;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (cgc_receive(a0, a1, v6, v7))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v1 -= v0;\n
        v2 = v0 + v2;\n
    }\n
}\n
", "4214400:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); *((a1 + v1)); v1 += 1)\n
        {\n
            a0[v0] = *((a1 + v1));\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4214562:sub_404f22": null, "4214576:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4214808:sub_405018": null, "4214816:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x18], Other Possible Types: char\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = 0;\n
    if (!a0)\n
        return v4;\n
    v0 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 < v0)\n
        {\n
            v4 = cgc_transmit(a0, v5, v6, v7);\n
            if (v4)\n
                return v4;\n
            v1 = *(&v2) + v1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 == 1)\n
                    return v4;\n
                v4 = cgc_transmit(a0, v5, v6, v7);\n
                if (v4)\n
                    return v4;\n
            }\n
        }\n
    }\n
}\n
", "4215010:sub_4050e2": null, "4215024:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4215140:sub_405164": null, "4215152:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4215862:sub_405436": null, "4215872:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        if (cgc_transmit(a0, a1, v4, v5))\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 = *(&v1) + v0;\n
    }\n
}\n
", "4216026:sub_4054da": null, "4216032:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4216181:sub_405575": null, "4216192:cgc_calloc": "long long cgc_calloc(char *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
\n
    *(&v0) = cgc_malloc(a0 * a1);\n
    cgc_memset(*(&v0), 0, a0 * a1);\n
    return *(&v0);\n
}\n
", "4216256:cgc_malloc": "extern char cgc_heap_manager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    unsigned long v1;  // [bp-0x30]\n
    char v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned long v4;  // [bp-0x10]\n
    unsigned long v6;  // rsi\n
    unsigned long v7;  // rdx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rax\n
\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(a0, v6, v7);\n
        cgc_heap_manager = *(&v2);\n
        *(cgc_heap_manager) = 0x1000;\n
        *((cgc_heap_manager + 16)) = 8;\n
        *((cgc_heap_manager + 8)) = 0x1000 - *((cgc_heap_manager + 16));\n
        cgc_allocate(a0, v6, v7, v8);\n
        cgc_memset(*((cgc_heap_manager + 24)), 0, 0x1000);\n
        v3 = *((cgc_heap_manager + 24));\n
        *(v3) = 4072;\n
        *((v3 + 8)) = 0;\n
    }\n
    v3 = *((cgc_heap_manager + 24));\n
    if (a0 > *(v3))\n
    {\n
        cgc_allocate(a0, 0, 0x1000);\n
        if (!*((v3 + 8)))\n
        {\n
            cgc_puts(\"Not enough space available to allocate more heap.  Failure.\");\n
            cgc__terminate(\"Not enough space available to allocate more heap.  Failure.\");\n
        }\n
        v3 = *((v3 + 8));\n
        *(v3) = 4072;\n
        v4 = 0;\n
        return v4;\n
    }\n
    else\n
    {\n
        v9 = v3;\n
        *(v9) = *(v9) - a0;\n
        v1 = v3 + 16;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v1 + 8)) & 1))\n
                v0 = *(v1) < a0 + 16;\n
            if (!(v0 & 1))\n
                break;\n
            v1 = v1 + 16 + *(v1);\n
        }\n
        *(v1) = a0;\n
        *((v1 + 8)) = 1;\n
        v4 = v1 + 16;\n
        return v4;\n
    }\n
}\n
", "4216738:sub_4057a2": null, "4216752:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_0;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    char v2;  // [bp-0x10]\n
    unsigned long long *v4;  // rax\n
\n
    v1 = a0 - 16;\n
    v1->field_8 = 2;\n
    v0 = &v2 & -0x1000;\n
    v4 = v0;\n
    *(v4) = v1->field_0 + *(v4);\n
    return v0;\n
}\n
", "4216814:sub_4057ee": null, "4216816:cgc_print_message": "extern char g_4081b7;\n
extern char globs;\n
\n
long long cgc_print_message(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = cgc_strcmp(&(&globs)[1040 * a0 + 52 * a1 + 4], &g_4081b7);\n
    if (v1)\n
    {\n
        cgc_printf(\"******************\\n
\", &g_4081b7, a2, a3, a4);\n
        v1 = cgc_printf(\"To: @s\\n
From: @s \\n
Msg: @s\\n
\", &(&globs)[1040 * a0 + 52 * a1 + 4], &(&globs)[1040 * a0 + 52 * a1 + 19], &(&globs)[1040 * a0 + 52 * a1 + 34], a4);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4217034:sub_4058ca": null, "4217040:cgc_add_message": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[45];\n
    char field_31;\n
} struct_0;\n
\n
extern struct_1 *cgc_current_user;\n
extern struct_2 cgc_listOfUsers;\n
extern unsigned int cgc_msg_count_login;\n
extern unsigned int cgc_user_count;\n
extern unsigned long long g_40bc18;\n
extern char globs;\n
\n
long long cgc_add_message(unsigned long a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    char v5;  // [bp-0x2a]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    g_40bc18 = cgc_print_message;\n
    v5 = 255;\n
    for (v4 = 0; v4 < cgc_user_count; v4 += 1)\n
    {\n
        if (!cgc_strcmp(a0, (&cgc_listOfUsers.field_0)[v4]))\n
        {\n
            v5 = v4;\n
            break;\n
        }\n
    }\n
    if (v5 == -1)\n
    {\n
        cgc_printf(\"User does not exist.\\n
\", a1, a2, &cgc_user_count, a4);\n
        v6 = 0;\n
        return v6;\n
    }\n
    v3 = -1;\n
    v2 = -1;\n
    if (a3 == 1)\n
        v2 = cgc_get_user_index(a1);\n
    else\n
        v2 = cgc_get_user_index(a0);\n
    if (cgc_current_user->field_24 == 1)\n
        cgc_current_user->field_24 = 0;\n
    for (v1 = 0; v1 < 20; v1 += 1)\n
    {\n
        if (*(&(&globs)[1040 * v2 + 52 * v1]) != 48879)\n
        {\n
            v3 = v1;\n
            break;\n
        }\n
    }\n
    if (v3 == -1)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v0 = &(&globs)[1040 * v2 + 52 * v3];\n
    v0->field_0 = 48879;\n
    cgc_strcpy(&v0->padding_4[15], a1);\n
    cgc_strcpy(&v0->padding_4, a0);\n
    cgc_strcpy(&v0->padding_4[30], a2);\n
    v0->field_31 = a3;\n
    cgc_msg_count_login = cgc_msg_count_login + 1;\n
    cgc_current_user->field_28 = cgc_current_user->field_28 + 1;\n
    v6 = 1;\n
    return v6;\n
}\n
", "4217578:sub_405aea": null, "4217584:cgc_list_drafts": "extern struct_0 *g_40bc18;\n
extern char globs;\n
\n
long long cgc_list_drafts(char *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v4 = cgc_get_user_index(a0);\n
    v2 = v4;\n
    v1 = 0;\n
    for (v0 = 0; v0 < 20; v0 = v4)\n
    {\n
        a3 = v0 * 52;\n
        if (*((&(&globs)[1040 * v2] + a3)) == 48879 && !cgc_strcmp(a0, &(&globs)[1040 * v2 + 52 * v0 + 19]))\n
        {\n
            a3 = v0 * 52;\n
            if (*((&(&globs)[1040 * v2] + a3 + 49)) == 1)\n
            {\n
                v1 = 1;\n
                a3 = g_40bc18;\n
                g_40bc18(v2, v0);\n
            }\n
        }\n
        v4 = v0 + 1;\n
    }\n
    if (!v1)\n
        v4 = cgc_printf(\"No drafts for this user.\\n
\", a1, a2, a3, a4);\n
    return v4;\n
}\n
", "4217853:sub_405bfd": null, "4217856:cgc_list_inbox": "extern struct_0 *g_40bc18;\n
extern char globs;\n
\n
long long cgc_list_inbox(char *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v4 = cgc_get_user_index(a0);\n
    v2 = v4;\n
    v1 = 0;\n
    for (v0 = 0; v0 < 20; v0 = v4)\n
    {\n
        a3 = v0 * 52;\n
        if (*((&(&globs)[1040 * v2] + a3)) == 48879 && !cgc_strcmp(a0, &(&globs)[1040 * v2 + 52 * v0 + 4]))\n
        {\n
            a3 = v0 * 52;\n
            if (!*((&(&globs)[1040 * v2] + a3 + 49)))\n
            {\n
                v1 = 1;\n
                a3 = g_40bc18;\n
                g_40bc18(v2, v0);\n
            }\n
        }\n
        v4 = v0 + 1;\n
    }\n
    if (!v1)\n
        v4 = cgc_printf(\"No messages for this user.\\n
\", a1, a2, a3, a4);\n
    return v4;\n
}\n
", "4218125:sub_405d0d": null, "4218128:cgc_list_all_messages": "extern unsigned int cgc_user_count;\n
\n
long long cgc_list_all_messages(unsigned long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 >= cgc_user_count)\n
            break;\n
        for (v0 = 0; v0 < 20; v0 += 1)\n
        {\n
            v2 = 1;\n
            g_40bc18(v1, v0);\n
        }\n
        v1 += 1;\n
    }\n
    if (!v2)\n
        v4 = cgc_printf(\"No messages.\\n
\", a1, a2, &cgc_user_count, a4);\n
    return v4;\n
}\n
", "4218272:cgc_get_draft_count": "extern char globs;\n
\n
long long cgc_get_draft_count(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
\n
    v2 = cgc_get_user_index(a0);\n
    v1 = 0;\n
    for (v0 = 0; v0 < 20; v0 += 1)\n
    {\n
        if (!cgc_strcmp(a0, &(&globs)[1040 * v2 + 52 * v0 + 19]) && (&globs)[49 + 1040 * v2 + 52 * v0] == 1)\n
            v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4218456:sub_405e58": null, "4218464:cgc_get_inbox_count": "extern char globs;\n
\n
long long cgc_get_inbox_count(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
\n
    v2 = 0;\n
    v1 = cgc_get_user_index(a0);\n
    for (v0 = 0; v0 < 20; v0 += 1)\n
    {\n
        if (!cgc_strcmp(a0, &(&globs)[1040 * v1 + 52 * v0 + 4]) && !(&globs)[49 + 1040 * v1 + 52 * v0])\n
            v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4218648:sub_405f18": null, "4218656:cgc_get_total_count": "extern struct_1 cgc_listOfUsers;\n
extern unsigned int cgc_user_count;\n
\n
long long cgc_get_total_count()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = 0;\n
    for (v1 = 0; v1 < cgc_user_count; v1 += 1)\n
    {\n
        for (v0 = 0; v0 < (&cgc_listOfUsers.field_0)[v1]->field_28; v0 += 1)\n
        {\n
            v2 += 1;\n
        }\n
    }\n
    return v2;\n
}\n
", "4218773:sub_405f95": null, "4218784:cgc_print_draft_for_send": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[45];\n
    char field_31;\n
} struct_0;\n
\n
extern char globs;\n
\n
long long cgc_print_draft_for_send(char *a0, unsigned long a1, unsigned long a2, unsigned int *a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int *v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x2c]\n
    void* v6;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned long v11;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rdx, Other Possible Types: unsigned long long\n
    unsigned int *v13;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v14;  // rax, Other Possible Types: unsigned long\n
\n
    v9 = cgc_get_user_index(a0);\n
    v8 = 0;\n
    for (v8 = 0; v8 < 20; v8 += 1)\n
    {\n
        if (*(&(&globs)[1040 * v9 + 52 * v8]) == 48879 && !cgc_strcmp(a0, &(&globs)[1040 * v9 + 52 * v8 + 19]) && (&globs)[49 + 1040 * v9 + 52 * v8] == 1)\n
            cgc_printf(\"@d: To: @s Msg: @s\\n
\", v8, &(&globs)[1040 * v9 + 52 * v8 + 4], &(&globs)[1040 * v9 + 52 * v8 + 34], a4);\n
    }\n
    v11 = 0;\n
    v12 = 4;\n
    memset(&v7, 0, 4);\n
    for (v6 = 0; v6 < 1; v6 = cgc_receive_until(&v7, 10, 3))\n
    {\n
        v11 = 10;\n
        v12 = 3;\n
    }\n
    v5 = cgc_atoi(&v7);\n
    if (v5 < 20 && v5 >= 0)\n
    {\n
        if (!cgc_strcmp(a0, &(&globs)[1040 * v9 + 52 * v5 + 19]))\n
        {\n
            a3 = v5 * 52;\n
            if ((&globs)[49 + 1040 * v9 + a3] == 1)\n
            {\n
                v13 = v5 * 52;\n
                v4 = &(&globs)[1040 * v9] + v13;\n
                v3 = cgc_get_user_index(&(&globs)[1040 * v9 + 52 * v5 + 4]);\n
                v2 = -1;\n
                for (v1 = 0; v1 < 20; v1 += 1)\n
                {\n
                    v13 = v1 * 52;\n
                    if (*(&(&globs)[1040 * v3 + v13]) != 48879)\n
                    {\n
                        v2 = v1;\n
                        break;\n
                    }\n
                }\n
                if (v2 == -1)\n
                {\n
                    v14 = cgc_printf(\"No space left for this user.\\n
\", v11, v12, v13, a4);\n
                    return v14;\n
                }\n
                v0 = &(&globs)[1040 * v3 + 52 * v2];\n
                cgc_strcpy(&v0->padding_4[15], &v4[4] + 3);\n
                cgc_strcpy(&v0->padding_4, v4 + 1);\n
                cgc_strcpy(&v0->padding_4[30], &v4[8] + 2);\n
                v0->field_31 = 0;\n
                v0->field_0 = 48879;\n
                cgc_bzero(v4 + 1, 15);\n
                cgc_bzero(&v4[4] + 3, 15);\n
                cgc_bzero(&v4[8] + 2, 15);\n
                v14 = v4;\n
                *(v14) = 0;\n
                return v4;\n
            }\n
        }\n
        v14 = cgc_printf(\"Not a valid selection.\\n
\", v11, v12, a3, a4);\n
        return v14;\n
    }\n
    v14 = cgc_printf(\"Out of range.\\n
\", v11, v12, a3, a4);\n
    return v14;\n
}\n
", "4219714:sub_406342": null, "4219728:cgc_print_draft_for_del": "typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_0;\n
\n
extern struct_0 *cgc_current_user;\n
extern char globs;\n
\n
long long cgc_print_draft_for_del(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x1b]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned long v6;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v7;  // rdx, Other Possible Types: unsigned long long\n
    struct_0 *v8;  // rax, Other Possible Types: unsigned long\n
\n
    v4 = cgc_get_user_index(a0);\n
    v3 = 0;\n
    for (v3 = 0; v3 < 20; v3 += 1)\n
    {\n
        if (!cgc_strcmp(a0, &(&globs)[1040 * v4 + 52 * v3 + 19]) && (&globs)[49 + 1040 * v4 + 52 * v3] == 1)\n
            cgc_printf(\"@d: To: @s Msg: @s\\n
\", v3, &(&globs)[1040 * v4 + 52 * v3 + 4], &(&globs)[1040 * v4 + 52 * v3 + 34], a4);\n
    }\n
    v6 = 0;\n
    v7 = 3;\n
    memset(&v2, 0, 3);\n
    for (v1 = 0; v1 < 1; v1 = cgc_receive_until(&v2, 10, 2))\n
    {\n
        v6 = 10;\n
        v7 = 2;\n
    }\n
    v0 = cgc_atoi(&v2);\n
    if (v0 < 20 && v0 >= 0)\n
    {\n
        if (!cgc_strcmp(a0, &(&globs)[1040 * v4 + 52 * v0 + 19]))\n
        {\n
            a3 = v0 * 52;\n
            if ((&globs)[49 + 1040 * v4 + a3] == 1)\n
            {\n
                cgc_bzero(&(&globs)[1040 * v4 + 52 * v0 + 4], 15);\n
                cgc_bzero(&(&globs)[1040 * v4 + 52 * v0 + 19], 15);\n
                cgc_bzero(&(&globs)[1040 * v4 + 52 * v0 + 34], 15);\n
                *(&(&globs)[1040 * v4 + 52 * v0]) = 0;\n
                cgc_current_user->field_28 = cgc_current_user->field_28 - 1;\n
                return cgc_current_user;\n
            }\n
        }\n
        v8 = cgc_printf(\"Not a valid selection.\\n
\", v6, v7, a3, a4);\n
        return v8;\n
    }\n
    v8 = cgc_printf(\"Out of range.\\n
\", v6, v7, a3, a4);\n
    return v8;\n
}\n
", "4220416:cgc_print_A": "char cgc_print_A(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"******************\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"1. Create User\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"2. Login\\n
\", a1, a2, a3, a4);\n
    cgc_printf(\"3. Exit\\n
\", a1, a2, a3, a4);\n
    return cgc_printf(\": \\n
\", a1, a2, a3, a4);\n
}\n
", "4220492:sub_40664c": null, "4220496:cgc_handle_A_input": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int bad_login_count;\n
extern unsigned int cgc_msg_count_login;\n
\n
long long cgc_handle_A_input(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x36]\n
    char v2;  // [bp-0x27]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    char v4;  // [bp-0xf]\n
    char v5;  // [bp-0xe]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rax\n
\n
    v8 = 0;\n
    v9 = 3;\n
    memset(&v4, 0, 3);\n
    for (v3 = 0; v3 < 1; v3 = cgc_receive_until(&v4, 10, 2))\n
    {\n
        v8 = 10;\n
        v9 = 2;\n
    }\n
    if (v4 == 49)\n
    {\n
        cgc_create_user(0);\n
    }\n
    else if (v4 != 50)\n
    {\n
        if (v4 == 51)\n
        {\n
            cgc_printf(\"The end.\\n
\", v8, v9, a3, a4);\n
            cgc__terminate(\"The end.\\n
\");\n
        }\n
        cgc_printf(\"unknown input: @c @c\\n
\", v4, v5, a3, a4);\n
    }\n
    else\n
    {\n
        cgc_list_users();\n
        cgc_printf(\"Username: \\n
\", v8, v9, a3, a4);\n
        v0 = cgc_receive_until(&v2, 10, 14);\n
        v10 = v0;\n
        v0 = v10 + 1;\n
        (&v2)[v10] = 0;\n
        cgc_printf(\"Password: \\n
\", 10, 14, v0, a4);\n
        v0 = cgc_receive_until(&v1, 10, 14);\n
        v11 = v0;\n
        v0 = v11 + 1;\n
        (&v1)[v11] = 0;\n
        cgc_msg_count_login = 0;\n
        if (cgc_login(&v2, &v1) == 1)\n
        {\n
            v6 = 2;\n
            return v6;\n
        }\n
        cgc_printf(\"Bad login.\\n
\", 10, 14, v0, a4);\n
        bad_login_count = bad_login_count + 1;\n
        if (bad_login_count >= 3)\n
        {\n
            cgc_create_user(bad_login_count);\n
            bad_login_count = 0;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4220934:sub_406806": null, "4220944:cgc_print_B": "extern void cgc_current_user;\n
\n
long long cgc_print_B(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_printf(\"********@s********\\n
\", *(&cgc_current_user), a2, a3, a4);\n
    cgc_printf(\"1. Create Message\\n
\", *(&cgc_current_user), a2, a3, a4);\n
    cgc_printf(\"2. Send Message\\n
\", *(&cgc_current_user), a2, a3, a4);\n
    cgc_printf(\"3. List All [@d]\\n
\", cgc_get_total_count(), a2, a3, a4);\n
    cgc_printf(\"4. List Drafts [@d]\\n
\", cgc_get_draft_count(*(&cgc_current_user)), a2, a3, a4);\n
    v1 = cgc_get_inbox_count(*(&cgc_current_user));\n
    cgc_printf(\"5. List Inbox [@d]\\n
\", v1, a2, a3, a4);\n
    cgc_printf(\"6. Delete Draft\\n
\", v1, a2, a3, a4);\n
    cgc_printf(\"7. Logout\\n
\", v1, a2, a3, a4);\n
    cgc_printf(\"8. Exit\\n
\", v1, a2, a3, a4);\n
    return cgc_printf(\": \\n
\", v1, a2, a3, a4);\n
}\n
", "4221143:sub_4068d7": null, "4221152:cgc_handle_B_input": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void cgc_current_user;\n
extern unsigned int cgc_msg_count_login;\n
\n
long long cgc_handle_B_input(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x3f]\n
    struct_0 *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x27]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    char v4;  // [bp-0xf]\n
    char v5;  // [bp-0xe]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned long v8;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // rax\n
    unsigned long v12;  // rax\n
\n
    v8 = 0;\n
    v9 = 3;\n
    memset(&v4, 0, 3);\n
    for (v3 = 0; v3 < 1; v3 = cgc_receive_until(&v4, 10, 2))\n
    {\n
        v8 = 10;\n
        v9 = 2;\n
    }\n
    if (v4 == 55)\n
    {\n
        cgc_printf(\"Logging out of user @s\\n
\", *(&cgc_current_user), v9, a3, a4);\n
        cgc_logout(\"Logging out of user @s\\n
\", *(&cgc_current_user), v9, a3, a4, v10);\n
        v6 = 2;\n
        return v6;\n
    }\n
    if (v4 == 56)\n
    {\n
        cgc_printf(\"The end.\\n
\", v8, v9, a3, a4);\n
        cgc__terminate(\"The end.\\n
\");\n
    }\n
    if (v4 != 50)\n
    {\n
        if (v4 != 49)\n
        {\n
            if (v4 != 51)\n
            {\n
                if (v4 == 52)\n
                {\n
                    cgc_list_drafts(*(&cgc_current_user), v8, v9, a3, a4);\n
                }\n
                else if (v4 == 53)\n
                {\n
                    cgc_list_inbox(*(&cgc_current_user), v8, v9, a3, a4);\n
                }\n
                else if (v4 != 54)\n
                {\n
                    cgc_printf(\"unknown input: @c @c\", v4, v5, a3, a4);\n
                }\n
                else if (cgc_get_draft_count(*(&cgc_current_user)))\n
                {\n
                    cgc_print_draft_for_del(*(&cgc_current_user), v8, v9, a3, a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(\"Must create draft first.\\n
\", v8, v9, a3, a4);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
            }\n
            else\n
            {\n
                if (cgc_get_total_count())\n
                {\n
                    cgc_list_all_messages(\"The end.\\n
\", v8, v9, a3, a4);\n
                }\n
                else\n
                {\n
                    cgc_printf(\"No messages.\\n
\", v8, v9, a3, a4);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            if (cgc_msg_count_login < 4)\n
            {\n
                cgc_printf(\"To:\\n
\", v8, v9, a3, a4);\n
                v1 = cgc_receive_until(&v2, 10, 14);\n
                v11 = v1;\n
                v1 = v11 + 1;\n
                (&v2)[v11] = 0;\n
                cgc_printf(\"Message:\\n
\", 10, 14, v1, a4);\n
                v1 = cgc_receive_until(&v0, 10, 14);\n
                v12 = v1;\n
                v1 = v12 + 1;\n
                (&v0)[v12] = 0;\n
                if (cgc_add_message(&v2, *(&cgc_current_user), &v0, 1, a4) != 1)\n
                    cgc_printf(\"add_message failed\\n
\", *(&cgc_current_user), &v0, 1, a4);\n
            }\n
            else\n
            {\n
                cgc_printf(\"Reached maximum messages for this session.\\n
\", v8, v9, a3, a4);\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_get_draft_count(*(&cgc_current_user)))\n
        {\n
            cgc_print_draft_for_send(*(&cgc_current_user), v8, v9, a3, a4);\n
        }\n
        else\n
        {\n
            cgc_printf(\"Must create draft first.\\n
\", v8, v9, a3, a4);\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4221910:sub_406bd6": null, "4221920:main": "extern unsigned int bad_login_count;\n
extern unsigned int cgc_msg_count_login;\n
extern unsigned int cgc_user_count;\n
\n
int main(unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v4;  // ecx, Other Possible Types: unsigned int\n
    unsigned long v5;  // r8d, Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = a0;\n
    *(&v0) = a1;\n
    cgc_msg_count_login = 0;\n
    cgc_user_count = 0;\n
    bad_login_count = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            cgc_print_A(a0, a1, a2, v4, v5);\n
        } while (cgc_handle_A_input(a0, a1, a2, v4, v5) != 2);\n
        do\n
        {\n
            cgc_print_B(a0, a1, a2, v4, v5);\n
        } while (cgc_handle_B_input(a0, a1, a2, v4, v5) != 2);\n
    }\n
}\n
", "4222046:sub_406c5e": null, "4222048:cgc_login": "extern unsigned long long cgc_current_user;\n
extern struct_0 cgc_listOfUsers;\n
extern unsigned int cgc_user_count;\n
\n
long long cgc_login(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 < cgc_user_count)\n
        {\n
            if (!cgc_strcmp(a0, (&cgc_listOfUsers.field_0)[v0]) && !cgc_strcmp(a1, (&cgc_listOfUsers.field_0)[v0] + 15))\n
            {\n
                cgc_current_user = (&cgc_listOfUsers.field_0)[v0];\n
                v1 = 1;\n
                return v1;\n
            }\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4222225:sub_406d11": null, "4222240:cgc_logout": "extern struct_0 *cgc_current_user;\n
\n
long long cgc_logout()\n
{\n
    cgc_current_user->field_24 = 0;\n
    return 1;\n
}\n
", "4222265:sub_406d39": null, "4222272:cgc_get_user_index": "extern struct_0 cgc_listOfUsers;\n
extern unsigned int cgc_user_count;\n
\n
long long cgc_get_user_index(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= cgc_user_count)\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (cgc_strcmp(a0, (&cgc_listOfUsers.field_0)[v0]))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4222385:sub_406db1": null, "4222400:cgc_create_user": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 *cgc_listOfUsers;\n
extern unsigned int cgc_user_count;\n
\n
long long cgc_create_user(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    struct_0 *v2;  // [bp-0x38]\n
    char v3;  // [bp-0x2a]\n
    char v4;  // [bp-0x1b]\n
    unsigned int v6[11];  // rsi, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rax\n
    unsigned long v12;  // rax\n
\n
    cgc_printf(\"Username: \\n
\", a1, a2, a3, a4);\n
    v6 = 10;\n
    v2 = cgc_receive_until(&v4, 10, 14);\n
    v7 = v2;\n
    v2 = v7 + 1;\n
    (&v4)[v7] = 0;\n
    v1 = -1;\n
    v9 = cgc_strlen(&v4);\n
    if (v9 < 1)\n
        return v9;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v9 = v0;\n
        if (v9 >= cgc_user_count)\n
            break;\n
        v6 = (&cgc_listOfUsers)[v0];\n
        if (cgc_strcmp(&v4, v6))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v9 = v0;\n
            v1 = v9;\n
            break;\n
        }\n
    }\n
    if (a0 > 0)\n
    {\n
        if (v1 == -1)\n
            return v9;\n
        v8 = v1;\n
        (&cgc_listOfUsers)[v8]->field_24 = 1;\n
        cgc_printf(\"Password: \\n
\", v6, 14, v8, a4);\n
        v2 = cgc_receive_until(&v3, 10, 14);\n
        v10 = v2;\n
        v2 = v10 + 1;\n
        (&v3)[v10] = 0;\n
        cgc_bzero(&(&cgc_listOfUsers)[v1]->padding_0[15], 15);\n
        v9 = cgc_strncpy(&(&cgc_listOfUsers)[v1]->padding_0[15], &v3, v2);\n
        return v9;\n
    }\n
    else\n
    {\n
        if (v1 != -1)\n
        {\n
            return v9;\n
        }\n
        else if (cgc_user_count < 10)\n
        {\n
            (&cgc_listOfUsers)[cgc_user_count] = cgc_malloc(44);\n
            cgc_strncpy((&cgc_listOfUsers)[cgc_user_count], &v4, v2);\n
            (&cgc_listOfUsers)[cgc_user_count]->field_20 = cgc_user_count;\n
            (&cgc_listOfUsers)[cgc_user_count]->field_24 = 1;\n
            (&cgc_listOfUsers)[cgc_user_count]->field_28 = 0;\n
            cgc_printf(\"Password: \\n
\", v6, cgc_user_count, cgc_user_count, a4);\n
            v2 = cgc_receive_until(&v3, 10, 14);\n
            v11 = v2;\n
            v2 = v11 + 1;\n
            (&v3)[v11] = 0;\n
            v12 = cgc_user_count;\n
            cgc_user_count = cgc_user_count + 1;\n
            v9 = cgc_strncpy(&(&cgc_listOfUsers)[v12]->padding_0[15], &v3, v2);\n
            return v9;\n
        }\n
        else\n
        {\n
            v9 = cgc_printf(\"Maximum number of users reached.\\n
\", v6, 14, a3, a4);\n
            return v9;\n
        }\n
    }\n
}\n
", "4223051:sub_40704b": null, "4223056:cgc_list_users": "extern char cgc_listOfUsers;\n
extern unsigned int cgc_user_count;\n
\n
long long cgc_list_users(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int *v2;  // rcx\n
\n
    for (v0 = 0; v0 < cgc_user_count; v0 += 1)\n
    {\n
        v2 = v0;\n
        cgc_printf(\"@s -- @s\\n
\", *(&(&cgc_listOfUsers)[8 * v0]), *((&cgc_listOfUsers + 0x8 * v2)) + 15, v2, a4);\n
    }\n
    return v0;\n
}\n
", "4223156:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:memset": null, "5242920:cgc_transmit": null, "5242928:cgc_allocate": null, "5242936:cgc_rint": null, "5242944:cgc_deallocate": null, "5242952:cgc_log10": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}