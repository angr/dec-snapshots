{"4202496:_init": "extern struct_0 *g_40a230;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a230;\n
    if (g_40a230)\n
        v1 = g_40a230();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a250;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a250;\n
    goto *(4235864);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4235840);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a228;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_40a238;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a240;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a240)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203810:sub_402522": null, "4203824:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204019:sub_4025f3": null, "4204032:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: unsigned long, struct struct_0 **, struct struct_0 *[2]\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204572:sub_40281c": null, "4204576:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204724:sub_4028b4": null, "4204736:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204860:sub_40293c": null, "4204864:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204992:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4205054:sub_4029fe": null, "4205056:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v4 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4205503:sub_402bbf": null, "4205504:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_402ec1;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_402ec1:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4206289:sub_402ed1": null, "4206304:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_0 **v2;  // [bp-0x150]\n
    struct_1 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned long long *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_3 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_3 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_1 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_4038e6:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    cgc_putc(v27->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 <= 40)\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                else\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    cgc_putc(v25->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    cgc_putc(*(v23));\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_4038e6;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_403783;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_403783:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4208893:sub_4038fd": null, "4208896:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_1 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_0 **v2;  // [bp-0x160]\n
    struct_1 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned int *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_3 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_3 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_1 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v45;  // rcx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_4043eb:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    a0[v37] = *(v27);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_4043eb;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_404257;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_404257:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        a0[v37] = 32;\n
                    else\n
                        a0[v37] = 48;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4211714:sub_404402": null, "4211728:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4211903:sub_4044bf": null, "4211904:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4212068:sub_404564": null, "4212080:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4212163:sub_4045c3": null, "4212176:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212227:sub_404603": null, "4212240:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212291:sub_404643": null, "4212304:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4212359:sub_404687": null, "4212368:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4212423:sub_4046c7": null, "4212432:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4212475:sub_4046fb": null, "4212480:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4212523:sub_40472b": null, "4212528:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212579:sub_404763": null, "4212592:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4212683:sub_4047cb": null, "4212688:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4212716:sub_4047ec": null, "4212720:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4212772:sub_404824": null, "4212784:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long long v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_404a19;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_404a19;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_404a19;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_404989:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_404a19;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_404989;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_404a19:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4213341:sub_404a5d": null, "4213344:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 10)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4213736:sub_404be8": null, "4213744:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4213847:sub_404c57": null, "4213856:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((a0 + v1)) = *((a1 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = 0;\n
    }\n
    return a0;\n
}\n
", "4214029:sub_404d0d": null, "4214032:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4214150:sub_404d86": null, "4214160:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4214248:sub_404de8": null, "4214256:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4214374:sub_404e66": null, "4214384:cgc_stricmp": "long long cgc_stricmp(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x19]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v0 = cgc_tolower(*(v3));\n
            v1 = v0 == cgc_tolower(*(v2));\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4214528:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    unsigned int v1;  // [bp-0x28]\n
    char *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    if (a2 < 1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2 - 1)\n
        {\n
            v0 = 0;\n
            if (*(v3))\n
                v0 = *(v3) == *(v2);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    v4 = *(v3) - *(v2);\n
    return v4;\n
}\n
", "4214720:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4214929:sub_405091": null, "4214944:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4215027:sub_4050f3": null, "4215040:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
\n
    while (true)\n
    {\n
        cgc_bzero(&v3, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 128, v7, v8, v9);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 128, v7, v8);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215309:sub_40520d": null, "4215312:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4215406:sub_40526e": null, "4215408:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v1)\n
        {\n
            if (v0 == a1)\n
                return v2;\n
            *((a0 + v2)) = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4215609:sub_405339": null, "4215616:cgc_receive_fixed": "long long cgc_receive_fixed(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long v4;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        v1 = cgc_receive(a0, a1, v6, v7);\n
        if (v1)\n
            break;\n
        if (!*(&v0))\n
            break;\n
        v2 = *(&v0) + v2;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4215753:sub_4053c9": null, "4215760:cgc_receive_bytes": "long long cgc_receive_bytes(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v1 = a1 - v2;\n
    while (true)\n
    {\n
        if (v1)\n
        {\n
            v0 = 0;\n
            if (cgc_receive(a0, a1, v6, v7))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            v1 -= v0;\n
            v2 = v0 + v2;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215928:sub_405478": null, "4215936:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4216098:sub_405522": null, "4216112:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4216344:sub_405618": null, "4216352:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x18], Other Possible Types: char\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v1 = 0;\n
    if (!a0)\n
        return v4;\n
    v0 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        v4 = v1;\n
        if (v4 >= v0)\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 == 1)\n
                    return v4;\n
                v4 = cgc_transmit(a0, v5, v6, v7);\n
                if (v4)\n
                    return v4;\n
            }\n
        }\n
        else\n
        {\n
            v4 = cgc_transmit(a0, v5, v6, v7);\n
            if (v4)\n
                return v4;\n
            v1 = *(&v2) + v1;\n
        }\n
    }\n
}\n
", "4216546:sub_4056e2": null, "4216560:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4216676:sub_405764": null, "4216688:cgc_strrchr": "long long cgc_strrchr(unsigned int a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0 + cgc_strlen(a0); v0 != a0; v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4216841:sub_405809": null, "4216848:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4217558:sub_405ad6": null, "4217568:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v0 = 0;\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        if (cgc_transmit(a0, a1, v4, v5))\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 = *(&v1) + v0;\n
    }\n
}\n
", "4217722:sub_405b7a": null, "4217728:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4217877:sub_405c15": null, "4217888:cgc_DecodeData": "long long cgc_DecodeData(char *a0, unsigned long a1, char a2[2], unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    char *v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v7;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v9;  // rax\n
    char *v10;  // rax\n
    unsigned int v11;  // eax\n
\n
    v7 = a0;\n
    *(&v6) = a2;\n
    v5 = a3;\n
    v4 = v7;\n
    v9 = v7;\n
    v7 = v9 + 1;\n
    *(v9) = (v6[0] >> 1) & 127;\n
    for (v3 = 1; v3 <= a1; v3 += 1)\n
    {\n
        v0 = *(v6);\n
        v1 = v0 << ((7 - ((v3 >> 31 CONCAT v3) /m 8 >> 32)) & 31);\n
        v2 = *((v6 + 1));\n
        v10 = v7;\n
        v7 = v10 + 1;\n
        *(v10) = (v1 | (v2 >> ((((v3 >> 31 CONCAT v3) /m 8 >> 32) + 1) & 31))) & 127;\n
        v11 = v3;\n
        if ((v11 >> 31 CONCAT v11) /m 8 >> 32 != 7)\n
            *(&v6) = v6 + 1;\n
    }\n
    return 0;\n
}\n
", "4218122:sub_405d0a": null, "4218128:cgc_DestroyCommand": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[64];\n
    unsigned int field_44;\n
    unsigned long long field_48;\n
} struct_0;\n
\n
long long cgc_DestroyCommand(struct_0 *a0)\n
{\n
    if (a0->field_48)\n
    {\n
        cgc_free(a0->field_48);\n
        a0->field_48 = 0;\n
    }\n
    a0->field_0 = 0;\n
    cgc_memset(&a0->padding_4, 0, 0x40);\n
    a0->field_44 = 0;\n
    return a0;\n
}\n
", "4218227:sub_405d73": null, "4218240:cgc_ReceiveCommand": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[64];\n
    unsigned int field_44;\n
    char *field_48;\n
} struct_0;\n
\n
long long cgc_ReceiveCommand(struct_0 *a0, unsigned int *a1)\n
{\n
    char *v0;  // [bp-0xb8]\n
    char *v1;  // [bp-0xb0]\n
    char *v2;  // [bp-0xa8]\n
    char *v3;  // [bp-0xa0]\n
    char *v4;  // [bp-0x98]\n
    char *v5;  // [bp-0x90]\n
    char v6[2];  // [bp-0x88]\n
    unsigned int v7;  // [bp-0x80]\n
    char v8;  // [bp-0x7c]\n
    unsigned long v9;  // [bp-0x78]\n
    unsigned long v10;  // [bp-0x70], Other Possible Types: unsigned int\n
    char v11;  // [bp-0x68]\n
    char v12;  // [bp-0x67]\n
    unsigned int v13;  // [bp-0xc]\n
    unsigned int v15;  // eax\n
\n
    if (a0->field_48)\n
        cgc_DestroyCommand(a0);\n
    v10 = cgc_receive_fixed(&v11, 7);\n
    if (v10 != 7)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    if (!cgc_strncmp(&v11, \"ACS+0.1\", 7))\n
    {\n
        *(a1) = 1;\n
    }\n
    else if (!cgc_strncmp(&v11, \"ACS-0.1\", 7))\n
    {\n
        *(a1) = 0;\n
    }\n
    else\n
    {\n
        v13 = -2;\n
        return v13;\n
    }\n
    v10 = cgc_receive_until(&v11, 58, 64);\n
    if (!v10)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    else if (v11 == 91)\n
    {\n
        v5 = &v12;\n
        if (!cgc_strncmp(v5, \"REQUEST\", cgc_strlen(\"REQUEST\")))\n
        {\n
            a0->field_0 = 1;\n
        }\n
        else\n
        {\n
            v4 = &v12;\n
            if (!cgc_strncmp(v4, \"QUERY\", cgc_strlen(\"QUERY\")))\n
            {\n
                a0->field_0 = 2;\n
            }\n
            else\n
            {\n
                v3 = &v12;\n
                if (!cgc_strncmp(v3, \"SEND\", cgc_strlen(\"SEND\")))\n
                {\n
                    a0->field_0 = 3;\n
                }\n
                else\n
                {\n
                    v2 = &v12;\n
                    if (!cgc_strncmp(v2, \"REMOVE\", cgc_strlen(\"REMOVE\")))\n
                    {\n
                        a0->field_0 = 4;\n
                    }\n
                    else\n
                    {\n
                        v1 = &v12;\n
                        if (!cgc_strncmp(v1, \"VISUALIZE\", cgc_strlen(\"VISUALIZE\")))\n
                        {\n
                            a0->field_0 = 5;\n
                        }\n
                        else\n
                        {\n
                            v0 = &v12;\n
                            if (cgc_strncmp(v0, \"INTERACT\", cgc_strlen(\"INTERACT\")))\n
                            {\n
                                v13 = -2;\n
                                return v13;\n
                            }\n
                            a0->field_0 = 6;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        *(&v10) = cgc_receive_until(&v11, 58, 64);\n
        if (*(&v10) > 64)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
        if (*(&v10) > 0)\n
            cgc_strncpy(&a0->padding_4, &v11, *(&v10));\n
        v10 = cgc_receive_until(&v11, 58, 64);\n
        if (v10 > 6)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
        if (*(&v10) > 0)\n
            a0->field_44 = cgc_atoi(&v11);\n
        if (a0->field_44 > 0)\n
        {\n
            a0->field_48 = cgc_calloc(a0->field_44 + 1, 1);\n
            cgc_VerifyPointerOrTerminate(a0->field_48, \"command->data during parsing\");\n
            v9 = a0->field_48;\n
            v10 = cgc_receive_fixed(a0->field_48, a0->field_44);\n
            if (v10 != a0->field_44)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
        }\n
        else if (a0->field_44 == -1)\n
        {\n
            v10 = cgc_receive_fixed(&v8, 4);\n
            if (v10 != 4)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            v15 = *(&v8) * 8;\n
            v7 = (v15 >> 31 CONCAT v15) /m 7;\n
            if (v7 <= 0)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            a0->field_48 = cgc_calloc(v7 + 1, 1);\n
            cgc_VerifyPointerOrTerminate(a0->field_48, \"command->data during parsing\");\n
            *(&v6) = cgc_calloc(*(&v8) + 1, 1);\n
            cgc_VerifyPointerOrTerminate(v6, \"encoded_data during parsing\");\n
            v10 = cgc_receive_fixed(v6, *(&v8));\n
            if (v10 != *(&v8))\n
            {\n
                cgc_free(v6);\n
                v13 = -1;\n
                return v13;\n
            }\n
            if (cgc_DecodeData(a0->field_48, v7, v6, *(&v8)))\n
            {\n
                cgc_free(v6);\n
                v13 = -1;\n
                return v13;\n
            }\n
            if (a0->field_48[1 + v7])\n
                a0->field_44 = v7;\n
            else\n
                a0->field_44 = v7 - 1;\n
            cgc_free(v6);\n
        }\n
        v10 = cgc_receive_fixed(&v11, 1);\n
        if (v10 != 1)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
        else if (v11 == 93)\n
        {\n
            v13 = 0;\n
            return v13;\n
        }\n
        else\n
        {\n
            v13 = -2;\n
            return v13;\n
        }\n
    }\n
    else\n
    {\n
        v13 = -2;\n
        return v13;\n
    }\n
}\n
", "4219715:sub_406343": null, "4219728:cgc_HandleCommand": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[64];\n
    unsigned int field_44;\n
    unsigned long long field_48;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[68];\n
    unsigned int field_44;\n
    unsigned long long field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[80];\n
    unsigned int field_50;\n
    char padding_54[4];\n
    unsigned long long field_58;\n
} struct_0;\n
\n
extern unsigned long long g_40810d;\n
extern char g_408122;\n
extern char g_408144;\n
extern char g_408162;\n
extern char g_408179;\n
extern char g_408197;\n
extern char g_4081ac;\n
extern char g_4081be;\n
extern char g_4081cd;\n
extern char g_4081de;\n
\n
int cgc_HandleCommand()\n
{\n
    struct_0 *v2;  // [bp+0xfffe8]\n
    struct_1 *v5;  // [bp+0x100000]\n
    unsigned int v32;  // rdx\n
    unsigned int v33;  // rcx\n
    unsigned int v34;  // r8\n
\n
    *(&v2) = cgc_LookupNode(&v5->padding_0[4]);\n
    if (v2)\n
        cgc_InteractWithPage(v2->field_58, v2->field_50, v5->field_48);\n
    else\n
        cgc_printf(\"Page not found: @s\\n
\", &v5->padding_0[4], v32, v33, v34);\n
    return;\n
}\n
", "4220359:sub_4065c7": null, "4220368:cgc_PrintErrorAndTerminate": "long long cgc_PrintErrorAndTerminate(unsigned int a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long long v1;  // r9\n
\n
    cgc_printf(\"ERROR: @s\\n
\", a0, a2, a3, a4);\n
    cgc__terminate(\"ERROR: @s\\n
\");\n
    return cgc_VerifyPointerOrTerminate(\"ERROR: @s\\n
\", a1, a2, a3, a4, v1);\n
}\n
", "4220416:cgc_VerifyPointerOrTerminate": "char cgc_VerifyPointerOrTerminate(unsigned long a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        cgc_printf(\"ERROR: Allocation failed: @s\\n
\", a1, a2, a3, a4);\n
        v1 = cgc__terminate(\"ERROR: Allocation failed: @s\\n
\");\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4220477:sub_40663d": null, "4220480:cgc_AddPageVar": "typedef struct struct_1 {\n
    char padding_0[64];\n
    unsigned long long field_40;\n
    struct struct_1 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[64];\n
    char field_40;\n
    char padding_41[7];\n
    struct struct_0 *field_48;\n
} struct_0;\n
\n
extern unsigned int g_408211;\n
extern unsigned int g_40821d;\n
\n
long long cgc_AddPageVar(struct_1 *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    struct_1 *v0;  // [bp-0x40], Other Possible Types: unsigned long, struct_0 *\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long long v6;  // rax\n
    unsigned long long v7;  // rax\n
\n
    v3 = cgc_strchr(a1, 58) + 1;\n
    *(&v2) = cgc_strchr(v3, 58) + 1;\n
    v1 = cgc_strchr(a1, 93);\n
    if (*(&v2) - v3 > 64)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v0 = cgc_GetPageVar(a0, v3, *(&v2) - 1);\n
    if (!v0)\n
    {\n
        for (v0 = a0; *((v0 + 72)); v0 = *((v0 + 72)));\n
        v6 = cgc_calloc(80, 1);\n
        *((v0 + 72)) = v6;\n
        cgc_VerifyPointerOrTerminate(*((v0 + 72)), 4227601, a2, v6, a4);\n
        v0 = *((v0 + 72));\n
    }\n
    else if (*(&v0->field_40))\n
    {\n
        cgc_free(*(&v0->field_40));\n
    }\n
    cgc_memcpy(v0, v3, *(&v2) - 1 - v3);\n
    if (v1 - *(&v2) <= 0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v7 = cgc_calloc(v1 - *(&v2) + 1, 1);\n
    *((v0 + 64)) = v7;\n
    cgc_VerifyPointerOrTerminate(*((v0 + 64)), 4227613, a2, v7, a4);\n
    cgc_memcpy(*((v0 + 64)), *(&v2), v1 - *(&v2));\n
    v4 = 1;\n
    return v4;\n
}\n
", "4220919:sub_4067f7": null, "4220928:cgc_GetPageVar": "typedef struct struct_0 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_0;\n
\n
long long cgc_GetPageVar(struct_0 *a0, char *a1, unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!cgc_strncmp(v0, a1, a2 - a1))\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 = *((v0 + 72));\n
    }\n
}\n
", "4221042:sub_406872": null, "4221056:cgc_DestroyVarList": "long long cgc_DestroyVarList(unsigned long long a0[10])\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
        return v1;\n
    if (a0[9])\n
    {\n
        cgc_DestroyVarList(a0[9]);\n
        a0[9] = 0;\n
    }\n
    if (a0[8])\n
    {\n
        cgc_free(a0[8]);\n
        a0[8] = 0;\n
    }\n
    v1 = cgc_free(a0);\n
    return v1;\n
}\n
", "4221179:sub_4068fb": null, "4221184:cgc_InteractWithPage": "extern unsigned int g_40822c;\n
\n
long long cgc_InteractWithPage(unsigned long long a0, unsigned long a1, char *a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    v3 = a2;\n
    if (!v3)\n
    {\n
        v4 = cgc_ServePageWithOverride(a0, a1, 0);\n
        return v4;\n
    }\n
    v2 = cgc_calloc(80, 1);\n
    cgc_VerifyPointerOrTerminate(v2, 4227628, a2, a3, a4);\n
    while (true)\n
    {\n
        v6 = *(v3);\n
        v0 = 0;\n
        if (v6)\n
            v0 = *(v3) != 93;\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v3) != 91)\n
            break;\n
        cgc_AddPageVar(v2, v3, a2, v6, a4);\n
        v1 = cgc_strchr(v3, 93);\n
        if (!v1)\n
            break;\n
        v3 = v1 + 1;\n
    }\n
    v4 = cgc_ServePageWithOverride(a0, a1, v2);\n
    return v4;\n
}\n
", "4221439:sub_4069ff": null, "4221440:cgc_ServePageWithOverride": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned long long field_40;\n
} struct_0;\n
\n
extern unsigned int cgc_in_a_box;\n
extern unsigned int g_408249;\n
extern unsigned int line;\n
extern unsigned int line_length;\n
\n
long long cgc_ServePageWithOverride(char a0[2], unsigned int a1, unsigned int a2, char a3[2], unsigned int a4)\n
{\n
    char v0;  // [bp-0x91]\n
    char v1[2];  // [bp-0x90]\n
    char v2[2];  // [bp-0x88]\n
    char v3[2];  // [bp-0x80]\n
    char v4;  // [bp-0x71]\n
    unsigned int v5;  // [bp-0x70]\n
    char v6;  // [bp-0x69]\n
    struct_0 *v7;  // [bp-0x68], Other Possible Types: unsigned long\n
    char v8[2];  // [bp-0x60], Other Possible Types: unsigned long\n
    unsigned int v9;  // [bp-0x54]\n
    unsigned int v10;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x4c]\n
    unsigned int v12;  // [bp-0x48]\n
    char v13;  // [bp-0x41]\n
    char v14[2];  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    void* v17;  // [bp-0x28]\n
    char v18[2];  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v19;  // [bp-0xc]\n
    char v21[2];  // rax\n
    char v22[2];  // rax\n
\n
    *(&v18) = a0;\n
    *(&v17) = a2;\n
    v16 = cgc_calloc(80, 1);\n
    cgc_VerifyPointerOrTerminate(v16, 4227657, a2, *(&a3), a4);\n
    cgc_in_a_box = 0;\n
    cgc_memset(&line, 0, 0x51);\n
    line_length = 0;\n
    if (v18)\n
    {\n
        while (true)\n
        {\n
            a3 = *(v18);\n
            v6 = 0;\n
            if (a3)\n
            {\n
                a2 = a1;\n
                a3 = v18 + a2;\n
                v6 = v18 < a3;\n
            }\n
            if (!(v6 & 1))\n
            {\n
                if (line_length)\n
                    cgc_FlushOutput();\n
                cgc_DestroyVarList(v16);\n
                cgc_DestroyVarList(v17);\n
                v19 = 0;\n
                return v19;\n
            }\n
            if (v18[0] == 126)\n
            {\n
                *(&v18) = &v18[1];\n
                v5 = v18[0];\n
                if (v5 == 35)\n
                {\n
                    cgc_OutputChar(35);\n
                }\n
                else\n
                {\n
                    if (v5 == 91)\n
                    {\n
                        cgc_OutputChar(91);\n
                    }\n
                    else\n
                    {\n
                        if (v5 == 93)\n
                        {\n
                            cgc_OutputChar(93);\n
                        }\n
                        else\n
                        {\n
                            if (v5 == 110)\n
                            {\n
                                cgc_FlushOutput();\n
                            }\n
                            else\n
                            {\n
                                if (v5 == 116)\n
                                {\n
                                    for (v15 = 0; v15 < 4; v15 += 1)\n
                                    {\n
                                        cgc_OutputChar(32);\n
                                    }\n
                                }\n
                                else\n
                                {\n
                                    if (v5 == 126)\n
                                    {\n
                                        cgc_OutputChar(126);\n
                                    }\n
                                    else\n
                                    {\n
                                        cgc_printf(\"ERROR: Invalid control code\\n
\", a1, a2, a3, a4);\n
                                        break;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                *(&v18) = &v18[1];\n
            }\n
            else if (v18[0] == 91)\n
            {\n
                *(&v18) = &v18[1];\n
                *(&v14) = v18;\n
                while (true)\n
                {\n
                    a3 = v14[0];\n
                    v4 = 0;\n
                    if (a3 != 93)\n
                        v4 = v14[0];\n
                    if (!(v4 & 1))\n
                        break;\n
                    v14 += 1;\n
                }\n
                if (!*(v14))\n
                    break;\n
                *(&v3) = v18;\n
                if (cgc_strncmp(v3, \"line\", cgc_strlen(\"line\")))\n
                {\n
                    *(&v2) = v18;\n
                    if (!cgc_strncmp(v2, \"var\", cgc_strlen(\"var\")))\n
                    {\n
                        cgc_AddPageVar(v16, v18, a2, a3, a4);\n
                        *(&v18) = v14 + 1;\n
                    }\n
                    else\n
                    {\n
                        *(&v1) = v18;\n
                        if (!cgc_strncmp(v1, \"box\", cgc_strlen(\"box\")))\n
                        {\n
                            cgc_in_a_box = 1;\n
                            cgc_FlushOutput();\n
                            for (v10 = 0; v10 < 80; v10 += 1)\n
                            {\n
                                cgc_putc(42);\n
                            }\n
                            cgc_printf(\"\\n
\", \"box\", a2, a3, a4);\n
                            v18 += 2;\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    *(&v18) = &v18[cgc_strlen(\"line\")];\n
                    if (v18[0] != 58)\n
                        break;\n
                    v21 = v18;\n
                    *(&v18) = &v21[1];\n
                    v13 = v21[1];\n
                    v22 = v18;\n
                    a3 = &v22[1];\n
                    *(&v18) = a3;\n
                    if (v22[1] != 58)\n
                        break;\n
                    *(&v18) = &v18[1];\n
                    v12 = cgc_atoi(v18);\n
                    for (v11 = 0; v11 < v12; v11 += 1)\n
                    {\n
                        cgc_OutputChar(v13);\n
                    }\n
                    *(&v18) = v14 + 1;\n
                }\n
            }\n
            else if (v18[0] == 93)\n
            {\n
                *(&v18) = &v18[1];\n
                if (!cgc_in_a_box)\n
                    break;\n
                cgc_in_a_box = 0;\n
                cgc_FlushOutput();\n
                for (v9 = 0; v9 < 80; v9 += 1)\n
                {\n
                    cgc_putc(42);\n
                }\n
                cgc_printf(\"\\n
\", a1, a2, a3, a4);\n
            }\n
            else if (v18[0] != 35)\n
            {\n
                cgc_OutputChar(*(v18));\n
                *(&v18) = &v18[1];\n
            }\n
            else\n
            {\n
                *(&v18) = &v18[1];\n
                *(&v8) = v18;\n
                while (true)\n
                {\n
                    a3 = *(v8);\n
                    v0 = 0;\n
                    if (a3)\n
                        v0 = *(v8) != 35;\n
                    if (!(v0 & 1))\n
                        break;\n
                    v8 += 1;\n
                }\n
                if (*(v8) != 35)\n
                    break;\n
                v7 = 0;\n
                if (v17)\n
                    v7 = cgc_GetPageVar(v17, v18, v8);\n
                if (!v7)\n
                    v7 = cgc_GetPageVar(v16, v18, v8);\n
                if (v7)\n
                    cgc_OutputStr(*((v7 + 64)));\n
                *(&v18) = v8 + 1;\n
            }\n
        }\n
    }\n
    cgc_printf(\"ERROR: Invalid syntax\\n
\", a1, a2, a3, a4);\n
    cgc_DestroyVarList(v16);\n
    cgc_DestroyVarList(v17);\n
    v19 = -1;\n
    return v19;\n
}\n
", "4222992:cgc_ServePage": "long long cgc_ServePage(char a0[2], unsigned long a1, unsigned long a2, char a3[2], unsigned long a4)\n
{\n
    return cgc_ServePageWithOverride(a0, a1, 0, a3, a4);\n
}\n
", "4223029:sub_407035": null, "4223040:cgc_FlushOutput": "extern unsigned int cgc_in_a_box;\n
extern char g_40a8ff;\n
extern char line;\n
extern unsigned int line_length;\n
\n
char cgc_FlushOutput(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_printf(\"@s\\n
\", &line, a2, a3, a4);\n
    v1 = cgc_memset(&line, 0, 0x51);\n
    if (!cgc_in_a_box)\n
    {\n
        line_length = 0;\n
        return v1;\n
    }\n
    v1 = cgc_memset(&line, 32, 0x50);\n
    line = 42;\n
    g_40a8ff = 42;\n
    line_length = 2;\n
    return v1;\n
}\n
", "4223160:sub_4070b8": null, "4223168:cgc_OutputChar": "extern unsigned int cgc_in_a_box;\n
extern char line;\n
extern unsigned int line_length;\n
\n
long long cgc_OutputChar(unsigned int a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char *v1;  // rax\n
    char *v2;  // rcx\n
    char *v3;  // rax, Other Possible Types: unsigned long long, unsigned long\n
\n
    *(&a2) = a0;\n
    v1 = line_length;\n
    line_length = line_length + 1;\n
    v2 = v1;\n
    v3 = &line;\n
    *((&line + v2)) = a0;\n
    if (cgc_in_a_box && line_length == 78)\n
    {\n
        v3 = cgc_FlushOutput(a0, a1, a2, v2, a4);\n
        return v3;\n
    }\n
    if (line_length == 80)\n
        v3 = cgc_FlushOutput(a0, a1, a2, v2, a4);\n
    return v3;\n
}\n
", "4223280:cgc_OutputStr": "extern char line;\n
extern unsigned int line_length;\n
\n
long long cgc_OutputStr(unsigned int a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
\n
    if (cgc_strlen(a0) + line_length > 80)\n
        cgc_FlushOutput(a0, a1, a2, line_length, a4);\n
    if (cgc_strlen(a0) > 80)\n
    {\n
        v2 = cgc_printf(\"@s\\n
\", a0, a2, line_length, a4);\n
        return v2;\n
    }\n
    *(&v0) = &(&line)[line_length];\n
    cgc_memcpy(*(&v0), a0, cgc_strlen(a0));\n
    v3 = cgc_strlen(a0);\n
    v2 = line_length + v3;\n
    line_length = line_length + v3;\n
    return v2;\n
}\n
", "4223456:main": "extern unsigned int g_4082a1;\n
extern unsigned int g_4082ba;\n
\n
int main(unsigned long a0, unsigned long long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    char v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v4 = 0;\n
    v3 = a0;\n
    v2 = a1;\n
    if (cgc_InitializeTree())\n
    {\n
        a0 = &g_4082a1;\n
        cgc_PrintErrorAndTerminate(4227745, a1, a2, a3, a4);\n
    }\n
    memset(&v1, 0, 80);\n
    v0 = 0;\n
    do\n
    {\n
        if (cgc_ReceiveCommand(&v1, &v0))\n
        {\n
            a0 = &g_4082ba;\n
            cgc_PrintErrorAndTerminate(4227770, 0, 80, a3, a4);\n
        }\n
        cgc_HandleCommand(a0);\n
        cgc_DestroyCommand(&v1);\n
    } while (v0 == 1);\n
    return 0;\n
}\n
", "4223599:sub_40726f": null, "4223600:cgc_InitializeTree": "typedef struct struct_0 {\n
    char padding_0[80];\n
    unsigned int field_50;\n
    char padding_54[4];\n
    char field_58;\n
} struct_0;\n
\n
extern char InitialInfo;\n
extern unsigned int g_408c3f;\n
extern unsigned int g_408c5e;\n
\n
long long cgc_InitializeTree(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned long a4)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < 20)\n
        {\n
            v0 = cgc_calloc(96, 1);\n
            cgc_VerifyPointerOrTerminate(v0, 4230207, v0->field_50, a3, a4);\n
            cgc_strncpy(v0, (4235968 + 72 * v1), 64);\n
            v0->field_50 = cgc_strlen(*((0x40a300 + 72 * v1))) + 1;\n
            v4 = cgc_calloc(v0->field_50, 1);\n
            a3 = v4;\n
            *(&v0->field_58) = v4;\n
            cgc_VerifyPointerOrTerminate(*(&v0->field_58), 4230238, 64, a3, a4);\n
            cgc_memcpy(*(&v0->field_58), *((0x40a300 + 72 * v1)), v0->field_50);\n
            if (cgc_InsertNodeInTree(v0))\n
            {\n
                cgc_free(*(&v0->field_58));\n
                cgc_free(v0);\n
                v2 = -1;\n
                return v2;\n
            }\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4223911:sub_4073a7": null, "4223920:cgc_InsertNodeInTree": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[63];\n
    struct struct_0 *field_40;\n
} struct_0;\n
\n
extern unsigned int g_408cca;\n
extern struct_0 *root;\n
\n
long long cgc_InsertNodeInTree(char *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x78], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x70]\n
    char v2;  // [bp-0x68]\n
    struct_0 *v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    if (!root)\n
    {\n
        v3 = cgc_calloc(96, 1);\n
        a1 = &g_408cca;\n
        cgc_VerifyPointerOrTerminate(v3, 4230346, a2, a3, a4);\n
        v3->field_0 = 46;\n
        root = v3;\n
    }\n
    if (cgc_LookupNode(a0))\n
    {\n
        cgc_printf(\"ERROR: node already exists\\n
\", a1, a2, a3, a4);\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (*(a0))\n
    {\n
        cgc_memcpy(&v2, a0, 64);\n
        v1 = cgc_strrchr(&v2, 46);\n
        v0 = root;\n
        if (!v1)\n
        {\n
            if (!*(&v0[1].field_0))\n
            {\n
                *(&v0[1].field_0) = a0;\n
            }\n
            else\n
            {\n
                for (v0 = *(&v0[1].field_0); v0->field_40; v0 = v0->field_40);\n
                *((v0 + 64)) = a0;\n
            }\n
            v4 = 0;\n
            return v4;\n
        }\n
        else\n
        {\n
            cgc_strncpy(a0, v1 + 1, 64);\n
            *(v1) = 0;\n
            v0 = cgc_LookupNode(&v2);\n
            if (!v0)\n
            {\n
                cgc_printf(\"ERROR: Parent node doesn't exist: @s\\n
\", &v2, 64, a3, a4);\n
                v4 = -1;\n
                return v4;\n
            }\n
            else if (!*(&v0[1].field_0))\n
            {\n
                *(&v0[1].field_0) = a0;\n
                v4 = 0;\n
                return v4;\n
            }\n
            else\n
            {\n
                for (v0 = *(&v0[1].field_0); v0->field_40; v0 = v0->field_40);\n
                *((v0 + 64)) = a0;\n
                v4 = 0;\n
                return v4;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(\"ERROR: Name cannot be blank\\n
\", a1, a2, a3, a4);\n
        v4 = -1;\n
        return v4;\n
    }\n
}\n
", "4224438:sub_4075b6": null, "4224448:cgc_WalkTree": "long long cgc_WalkTree(unsigned long long a0[10], unsigned int a1, struct struct_0 **a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x434]\n
    unsigned long long v1[10];  // [bp-0x430]\n
    unsigned int v2;  // [bp-0x424]\n
    unsigned int v3;  // [bp-0x420]\n
    unsigned int v4;  // [bp-0x41c]\n
    char v5;  // [bp-0x418]\n
    unsigned long long v7[10];  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v8;  // rax\n
    unsigned long v9;  // rax\n
    unsigned long long v10;  // rcx\n
    unsigned long v11;  // rax\n
    unsigned long v13;  // rax\n
    unsigned long long v14;  // rcx\n
    struct struct_0 **v15;  // rdx\n
\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 254;\n
    v1[0] = a0;\n
    cgc_printf(\"@s\\n
\", v1, a2, a3, a4);\n
    v7 = v1;\n
    if (v7[9])\n
    {\n
        v8 = v3;\n
        v3 = v8 + 1;\n
        *((&v5 + 0x8 * v8)) = v1[9];\n
        a3 = v4 + 1;\n
        v7 = v3;\n
        a2 = v7 + 1;\n
        v3 = a2;\n
        *(&(&v5)[8 * v7]) = a3;\n
    }\n
    for (; v3 > 0; *(&(&v5)[8 * v7]) = v14)\n
    {\n
        v3 -= 1;\n
        v4 = *(&(&v5)[8 * v3]);\n
        v3 -= 1;\n
        v1[0] = *(&(&v5)[8 * v3]);\n
        for (v0 = 0; v0 < v4; v0 += 1)\n
        {\n
            cgc_printf(\"    \", a1, a2, a3, a4);\n
        }\n
        cgc_printf(\"@s\\n
\", v1, a2, a3, a4);\n
        if (v1[8])\n
        {\n
            v9 = v3;\n
            v3 = v9 + 1;\n
            *(&(&v5)[8 * v9]) = v1[8];\n
            v10 = v4;\n
            v11 = v3;\n
            v3 = v11 + 1;\n
            *(&(&v5)[8 * v11]) = v10;\n
        }\n
        v7 = v1;\n
        if (v7[9])\n
        {\n
            v13 = v3;\n
            v3 = v13 + 1;\n
            *(&(&v5)[8 * v13]) = v1[9];\n
            v14 = v4 + 1;\n
            v7 = v3;\n
            v15 = v7 + 1;\n
            v3 = v15;\n
        }\n
    }\n
    return v7;\n
}\n
", "4224983:sub_4077d7": null, "4224992:cgc_PrintTree": "extern unsigned long long root;\n
\n
long long cgc_PrintTree(char *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long v0[10];  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
LABEL_407807:\n
        v0[0] = root;\n
    }\n
    else\n
    {\n
        if (!*(a0))\n
            goto LABEL_407807;\n
        v0 = cgc_LookupNode(a0);\n
    }\n
    if (v0)\n
    {\n
        cgc_WalkTree(v0, a1, a2, a3, a4);\n
        v1 = 0;\n
        return v1;\n
    }\n
    cgc_printf(\"ERROR: Tree not found: @s\\n
\", a0, a2, a3, a4);\n
    v1 = -1;\n
    return v1;\n
}\n
", "4225126:sub_407866": null, "4225136:cgc_LookupNode": "typedef struct struct_0 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_2 *root;\n
\n
long long cgc_LookupNode(unsigned int a0)\n
{\n
    char *v0;  // [bp-0x78], Other Possible Types: unsigned long\n
    struct_1 *v1;  // [bp-0x70], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x68]\n
    struct_0 *v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = root->field_48;\n
    cgc_memcpy(&v2, a0, 64);\n
    v1 = &v2;\n
    v0 = cgc_strchr(&v2, 46);\n
    if (v0)\n
        *(v0) = 0;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
        if (cgc_strcmp(v3, v1))\n
        {\n
            v3 = v3->field_40;\n
        }\n
        else if (v0)\n
        {\n
            v1 = v0 + 1;\n
            v0 = cgc_strchr(v1, 46);\n
            if (v0)\n
                *(v0) = 0;\n
            v3 = *(&v3[1].padding_0[0]);\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4225387:sub_40796b": null, "4225392:cgc_FreeTree": "long long cgc_FreeTree(unsigned long long a0[12])\n
{\n
    if (a0[9])\n
        cgc_FreeTree(a0[9]);\n
    if (a0[8])\n
        cgc_FreeTree(a0[8]);\n
    if (a0[11])\n
        cgc_free(a0[11]);\n
    return cgc_free(a0);\n
}\n
", "4225503:sub_4079df": null, "4225504:cgc_DeleteNode": "typedef struct struct_2 {\n
    char padding_0[64];\n
    unsigned long long field_40;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[72];\n
    struct struct_0 *field_48;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_0;\n
\n
extern struct_1 *root;\n
\n
long long cgc_DeleteNode(unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x79]\n
    struct_0 *v1;  // [bp-0x78], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x70]\n
    char v3;  // [bp-0x68]\n
    struct_1 *v4;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_2 *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0xc]\n
    char v7;  // [bp-0x8]\n
    unsigned long long v9;  // rbp\n
    struct_0 *v10;  // rcx\n
\n
    v9 = &v7;\n
    v5 = cgc_LookupNode(a0);\n
    if (!v5)\n
    {\n
        cgc_printf(\"ERROR: Could not locate node for deletion\\n
\", a1, a2, a3, a4);\n
        v6 = -1;\n
        return v6;\n
    }\n
    cgc_memcpy(&v3, a0, 64);\n
    v2 = cgc_strrchr(&v3, 46);\n
    if (!v2)\n
    {\n
        v4 = root;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        v4 = cgc_LookupNode(&v3);\n
    }\n
    if (v5 && v4)\n
    {\n
        if (*((v4 + 72)))\n
        {\n
            if (*((v4 + 72)) == v5)\n
            {\n
                *((v4 + 72)) = v5->field_40;\n
            }\n
            else\n
            {\n
                v1 = *((v4 + 72));\n
                while (true)\n
                {\n
                    v10 = v1->field_40;\n
                    v0 = 0;\n
                    if (v10 != v5)\n
                        v0 = v1;\n
                    if (!(v0 & 1))\n
                        break;\n
                    v1 = v1->field_40;\n
                }\n
                if (!v1)\n
                {\n
                    cgc_printf(\"ERROR: Could not locate node for deletion\\n
\", 46, 64, v10, a4);\n
                    v6 = -1;\n
                    return v6;\n
                }\n
                *((v1 + 64)) = v5->field_40;\n
            }\n
            v5->field_40 = 0;\n
            cgc_FreeTree(v5);\n
            v6 = 0;\n
            return v6;\n
        }\n
        else\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
    }\n
    v6 = -1;\n
    return v6;\n
}\n
", "4225944:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:memset": null, "5242920:cgc_transmit": null, "5242928:cgc_allocate": null, "5242936:cgc_rint": null, "5242944:cgc_deallocate": null, "5242952:cgc_log10": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}