{"4202496:_init": "extern struct_0 *g_40b810;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40b810;\n
    if (g_40b810)\n
        v1 = g_40b810();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40b830;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40b830;\n
    goto *(4241464);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_fabs": "// attributes: PLT stub\n
int cgc_fabs()\n
{\n
    ::libc.so.0::cgc_fabs();\n
    return;\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4241440);\n
}\n
", "4202688:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202725:sub_4020e5": null, "4202726:sub_4020e6": null, "4202736:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40b808;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202777:sub_402119": null, "4202784:register_tm_clones": "extern unsigned long long g_40b818;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202841:sub_402159": null, "4202848:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40b820;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40b820)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202901:sub_402195": null, "4202905:sub_402199": null, "4202912:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202921:sub_4021a9": null, "4202928:cgc_bitset_init": "long long cgc_bitset_init(unsigned long long *a0, unsigned long a1)\n
{\n
    *(a0) = a1;\n
    return cgc_bitset_clear(a0);\n
}\n
", "4202970:sub_4021da": null, "4202976:cgc_bitset_clear": "long long cgc_bitset_clear(unsigned long long *a0)\n
{\n
    return cgc_memset(a0 + 1, 0, (*(a0) + 7 & -8) >> 3);\n
}\n
", "4203028:sub_402214": null, "4203040:cgc_bitset_set_bit": "long long cgc_bitset_set_bit(unsigned long long a0, unsigned long a1)\n
{\n
    return cgc_bitset_set_bit_value(a0, a1, 1);\n
}\n
", "4203078:sub_402246": null, "4203088:cgc_bitset_set_bit_value": "long long cgc_bitset_set_bit_value(unsigned long long *a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x25]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long *v4;  // rax\n
    unsigned long long v5;  // rcx\n
    unsigned long long *v6;  // rax\n
    unsigned long long v7;  // rcx\n
\n
    v1 = a1 >> 3;\n
    v0 = 1 << ((a1 & 7) & 31);\n
    if (a1 > *(a0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    if (a2)\n
    {\n
        v4 = a0;\n
        v5 = v1;\n
        *(8 + v4 + v5) = *(8 + v4 + v5) | v0;\n
    }\n
    else\n
    {\n
        v6 = a0;\n
        v7 = v1;\n
        *(8 + v6 + v7) = *(8 + v6 + v7) & (v0 ^ -1);\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4203229:sub_4022dd": null, "4203232:cgc_bitset_clear_bit": "long long cgc_bitset_clear_bit(unsigned long long *a0, unsigned long a1)\n
{\n
    return cgc_bitset_set_bit_value(a0, a1, 0);\n
}\n
", "4203267:sub_402303": null, "4203280:cgc_bitset_get_bit": "long long cgc_bitset_get_bit(unsigned long long *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x21]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = a1 >> 3;\n
    v0 = 1 << ((a1 & 7) & 31);\n
    if (a1 > *(a0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = ((*(8 + a0 + v1) & v0) ? 0 : 1);\n
    return v2;\n
}\n
", "4203383:sub_402377": null, "4203392:cgc_bitset_find_first": "long long cgc_bitset_find_first(unsigned long long *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= *(a0))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (cgc_bitset_get_bit(a0, v0) != a1)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4203497:sub_4023e9": null, "4203504:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 48)\n
        v0 = a0 <= 57;\n
    return v0 & 1;\n
}\n
", "4203546:sub_40241a": null, "4203552:cgc_ishexdigit": "long long cgc_ishexdigit(unsigned long a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    char v2;  // [bp-0x8]\n
    unsigned long long v4;  // rbp\n
\n
    v4 = &v2;\n
    v1 = 1;\n
    if (cgc_isdigit(a0))\n
        return v1 & 1;\n
    if (a0 >= 97)\n
    {\n
        v1 = 1;\n
        if (a0 <= 102)\n
            return v1 & 1;\n
    }\n
    v0 = 0;\n
    if (a0 >= 65)\n
        v0 = a0 <= 70;\n
    v1 = v0;\n
    return v1 & 1;\n
}\n
", "4203657:sub_402489": null, "4203664:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 1;\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = cgc_islower(a0);\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4203730:sub_4024d2": null, "4203744:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 65)\n
        v0 = a0 <= 90;\n
    return v0 & 1;\n
}\n
", "4203786:sub_40250a": null, "4203792:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    char v0;  // [bp-0xd]\n
\n
    v0 = 0;\n
    if (a0 >= 97)\n
        v0 = a0 <= 122;\n
    return v0 & 1;\n
}\n
", "4203834:sub_40253a": null, "4203840:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + -32;\n
    return v0;\n
}\n
", "4203900:sub_40257c": null, "4203904:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4203964:sub_4025bc": null, "4203968:cgc_todigit": "long long cgc_todigit(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (a1 >= 2 && a1 <= 16 && a0 < a1)\n
    {\n
        if (a0 >= 10)\n
        {\n
            v0 = a0 + 87;\n
            return v0;\n
        }\n
        v0 = a0 + 48;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4204061:sub_40261d": null, "4204064:cgc_fromdigit": "long long cgc_fromdigit(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0xd]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    if (a1 >= 2 && a1 <= 16)\n
    {\n
        v2 = cgc_tolower(v2);\n
        if (!cgc_isdigit(v2))\n
            v1 = v2 + -87;\n
        else\n
            v1 = v2 - 48;\n
        if (v1 >= 0 && v1 < a1)\n
        {\n
            v0 = v1;\n
            goto LABEL_4026b9;\n
        }\n
        v0 = -1;\n
LABEL_4026b9:\n
        v3 = v0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4204232:sub_4026c8": null, "4204240:cgc_utostr": "long long cgc_utostr(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v3 = a0;\n
    v0 = 1;\n
    if (a1 >= 2 && a1 <= 16 && a4 >= 1)\n
    {\n
        v1 = v3;\n
        while (true)\n
        {\n
            v1 = (0 CONCAT v1) /m a1;\n
            if (!v1)\n
                break;\n
            v0 += 1;\n
        }\n
        if (v0 >= a4)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        for (v2 = 0; v2 < v0; v2 += 1)\n
        {\n
            *((a3 + v0 - v2 - 1)) = cgc_todigit((0 CONCAT v3) /m a1 >> 32, a1);\n
            v3 = (0 CONCAT v3) /m a1;\n
            if (a2)\n
                *((a3 + v0 - v2 - 1)) = cgc_toupper(*((a3 + v0 - v2 - 1)));\n
        }\n
        *((a3 + v0)) = 0;\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4204568:sub_402818": null, "4204576:cgc_itostr": "long long cgc_itostr(unsigned long a0, unsigned long a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned long v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    char *v6;  // rax\n
\n
    v2 = a3;\n
    *(&v1) = a4;\n
    if (*(&v1) < (a0 < 0 ? 1 : 2))\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (a0 < 0)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        *(v6) = 45;\n
        v1 = *(&v1) - 1;\n
    }\n
    if (a0 < 0)\n
        v0 = -(a0);\n
    else\n
        v0 = a0;\n
    v3 = cgc_utostr(v0, a1, a2, v2, v1);\n
    return v3;\n
}\n
", "4204751:sub_4028cf": null, "4204752:cgc_dtostr": "long long cgc_dtostr(char *a0, unsigned long a1)\n
{\n
    int tmp_30;  // tmp #30\n
    int tmp_32;  // tmp #32\n
    int tmp_31;  // tmp #31\n
    unsigned long v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char v3;  // [bp-0x3a]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned long v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned long v11;  // xmm0lq\n
    char *v12;  // rax\n
    char *v14;  // rax\n
    char *v15;  // rax\n
\n
    v8 = v11;\n
    v7 = a0;\n
    v6 = a1;\n
    if (!cgc_isnan())\n
    {\n
        if (cgc_sign())\n
        {\n
            if (v6 >= 2)\n
            {\n
                v12 = v7;\n
                v7 = v12 + 1;\n
                *(v12) = 45;\n
                v6 -= 1;\n
                cgc_abs();\n
                v8 = v8;\n
            }\n
            else\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
        }\n
        if (!cgc_isinf())\n
        {\n
            if ((CmpF(v8, 0x41f0000000000000) & 1) && v6 >= 11)\n
            {\n
                v2 = v8;\n
                tmp_30 = SubV(tmp_32, tmp_31);\n
                *(&v0) = tmp_30;\n
                cgc_pow();\n
                v1 = (0 CONCAT v0) * (0 CONCAT 0x4024000000000000);\n
                if (cgc_utostr(v1, 10, 0, &v3, 10))\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
                if (!cgc_utostr(v2, 10, 0, v7, v6 - 10))\n
                {\n
                    v7 = cgc_strlen(v7) + v7;\n
                    v14 = v7;\n
                    v7 = v14 + 1;\n
                    *(v14) = 46;\n
                    v4 = cgc_strlen(&v3);\n
                    for (v5 = 0; v5 < 9 - v4; v5 += 1)\n
                    {\n
                        v15 = v7;\n
                        v7 = v15 + 1;\n
                        *(v15) = 48;\n
                    }\n
                    cgc_strcpy(v7, &v3);\n
                    v9 = 0;\n
                    return v9;\n
                }\n
                else\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
            }\n
            v9 = -1;\n
            return v9;\n
        }\n
        else\n
        {\n
            if (v6 >= 4)\n
            {\n
                cgc_strncpy(v7, \"inf\", 4);\n
                v9 = 0;\n
                return v9;\n
            }\n
            v9 = -1;\n
            return v9;\n
        }\n
    }\n
    else if (v6 >= 4)\n
    {\n
        cgc_strncpy(v7, \"nan\", 4);\n
        v9 = 0;\n
        return v9;\n
    }\n
    else\n
    {\n
        v9 = -1;\n
        return v9;\n
    }\n
}\n
", "4205361:sub_402b31": null, "4205376:cgc_strtou": "long long cgc_strtou(char *a0, unsigned long a1, unsigned int *a2)\n
{\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    void* v2;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18]\n
    unsigned long v5;  // [bp-0x10], Other Possible Types: unsigned long long\n
    char *v7;  // rax\n
\n
    v4 = a0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a1 >= 2 && a1 <= 16)\n
    {\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (*(v4))\n
            {\n
                v7 = v4;\n
                v4 = v7 + 1;\n
                v1 = cgc_fromdigit(*(v7), a1);\n
                v0 = v1 != -1;\n
            }\n
            if (!(v0 & 1))\n
            {\n
                *(a2) = v2;\n
                v5 = v3;\n
                return v5;\n
            }\n
            v2 *= a1;\n
            if (v2 > 4294967295)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            else if (4294967295 - v1 >= v2)\n
            {\n
                v2 = v1 + v2;\n
                v3 += 1;\n
            }\n
            else\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4205659:sub_402c5b": null, "4205664:cgc_strtoi": "long long cgc_strtoi(char *a0, unsigned long a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (*(a0) == 45)\n
        v1 = 1;\n
    v3 = cgc_strtou(&a0[v1], a1, &v2);\n
    if (v3 == -1)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    else if (v2 <= v1 + 2147483647)\n
    {\n
        if (v1)\n
            v0 = -(v2);\n
        else\n
            v0 = v2;\n
        *(a2) = v0;\n
        v4 = v3 + v1;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
}\n
", "4205859:sub_402d23": null, "4205872:cgc_strtod": "long long cgc_strtod(char *a0, unsigned long long *a1)\n
{\n
    int tmp_20;  // tmp #20\n
    int tmp_22;  // tmp #22\n
    int tmp_21;  // tmp #21\n
    void* v0;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x34]\n
    void* v6;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    char *v10;  // rax\n
    int v11;  // xmm0\n
    int v12;  // xmm0\n
\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = cgc_strrchr(a0, 46);\n
    if (v3)\n
    {\n
        v10 = v3;\n
        v3 = v10 + 1;\n
        *(v10) = 0;\n
    }\n
    v7 = cgc_strtoi(a0, 10, &v5);\n
    if (v7 == -1)\n
    {\n
        v8 = -1;\n
        return v8;\n
    }\n
    if (v3)\n
    {\n
        v6 = cgc_strtou(v3, 10, &v4);\n
        if (v6 == -1)\n
        {\n
            v8 = -1;\n
            return v8;\n
        }\n
    }\n
    if (v5 >= 0)\n
        v2 = v4;\n
    else\n
        v2 = v4 ^ 0x8000000000000000;\n
    *(a1) = v2;\n
    cgc_pow();\n
    tmp_20 = DivV(tmp_22, tmp_21);\n
    v11 = tmp_20;\n
    *(a1) = v11;\n
    *(&v11) = v5;\n
    xmm0<16> = (xmm0<16> + Conv(64->128, Load(addr=rsi<8>, size=8, endness=Iend_LE)))\n
    *(a1) = v12;\n
    v1 = v7;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = v6 + 1;\n
    v8 = v1 + v0;\n
    return v8;\n
}\n
", "4206254:sub_402eae": null, "4206256:cgc_image_init": "long long cgc_image_init(unsigned int a0[2], unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rcx\n
\n
    if (a1 <= 40 && a2 <= 40)\n
    {\n
        a0[0] = a1;\n
        v2 = a2;\n
        a0[1] = v2;\n
        cgc_memset(a0 + 1, 0, a2 * a1 * 3, v2);\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = -1;\n
    return v0;\n
}\n
", "4206370:sub_402f22": null, "4206384:cgc_image_destroy": "long long cgc_image_destroy(unsigned int a0[2])\n
{\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    return a0;\n
}\n
", "4206415:sub_402f4f": null, "4206416:cgc_image_write_pixel": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
} struct_0;\n
\n
long long cgc_image_write_pixel(unsigned int a0[2], unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char v0;  // [bp-0x12]\n
    char v1;  // [bp-0xe]\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // rax\n
\n
    v0 = a3 / 0x10000;\n
    v1 = v0;\n
    if (a1 <= a0[0] && a2 <= a0[1])\n
    {\n
        v4 = 1 + a0 + 3 * a0[0] * a2 + 3 * a1;\n
        v4->field_0 = a3;\n
        v4->field_2 = v1;\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4206557:sub_402fdd": null, "4206560:cgc_image_get_pixel": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
} struct_0;\n
\n
long long cgc_image_get_pixel(unsigned int a0[2], unsigned long a1, unsigned long a2, struct_0 *a3)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_0 *v3;  // rax\n
    struct_0 *v4;  // rcx\n
\n
    v0 = a3;\n
    if (a1 <= a0[0] && a2 <= a0[1])\n
    {\n
        v3 = v0;\n
        v4 = 1 + a0 + 3 * a0[0] * a2 + 3 * a1;\n
        v3->field_0 = v4->field_0;\n
        v3->field_2 = v4->field_2;\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4206679:sub_403057": null, "4206688:cgc_color_to_pixel": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
double cgc_color_to_pixel(long long a0, long long a1, long long a2, long long a3, long long a4, long long a5, char v10)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned long long v1;  // [bp-0x30]\n
    unsigned long long v2;  // [bp-0x28]\n
    unsigned short v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x1a]\n
    unsigned long v5;  // [bp-0x18]\n
    char v6;  // [bp-0x10]\n
    char v7;  // [bp-0xf]\n
    char v8;  // [bp-0xe]\n
    char v9;  // [bp-0x8]\n
    unsigned long long v11;  // rbp\n
    unsigned long v12;  // xmm0lq\n
\n
    v11 = &v9;\n
    v0 = &v10;\n
    v5 = v12;\n
    cgc_clamp();\n
    v1 = 0x3ff0000000000000;\n
    cgc_pow(a0, a1, a2, a3, a4, a5, &v10);\n
    v2 = 0x406fe00000000000;\n
    v6 = (0 CONCAT v10) * (0 CONCAT 0x406fe00000000000);\n
    cgc_clamp(a0, a1, a2, v6, a4, a5);\n
    cgc_pow(a0, a1, a2, v6, a4, a5);\n
    v7 = (0 CONCAT v0->field_8) * (0 CONCAT v2);\n
    cgc_clamp(a0, a1, a2, v7, a4, a5);\n
    cgc_pow(a0, a1, a2, v7, a4, a5);\n
    v8 = (0 CONCAT v0->field_10) * (0 CONCAT v2);\n
    v4 = v8;\n
    v3 = *(&v6);\n
    return v8;\n
}\n
", "4206900:sub_403134": null, "4206912:cgc_sign": "long long cgc_sign()\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    return 0x8000000000000000 & v1;\n
}\n
", "4206937:sub_403159": null, "4206944:cgc_exponent": "long long cgc_exponent()\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    return 0x7ff0000000000000 & v1;\n
}\n
", "4206969:sub_403179": null, "4206976:cgc_mantissa": "long long cgc_mantissa()\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    return -4503599627370497 & v1;\n
}\n
", "4207001:sub_403199": null, "4207008:cgc_isnan": "long long cgc_isnan()\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
\n
    v1 = v3;\n
    v0 = 0;\n
    if (cgc_exponent() == 0x7ff0000000000000)\n
    {\n
        v0 = cgc_mantissa();\n
        return v0 & 1;\n
    }\n
    return v0 & 1;\n
}\n
", "4207092:sub_4031f4": null, "4207104:cgc_isinf": "long long cgc_isinf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long v3;  // xmm0lq\n
\n
    v0 = v3;\n
    if (cgc_exponent() == 0x7ff0000000000000 && !cgc_mantissa())\n
    {\n
        v1 = (cgc_sign() ? 1 : -1);\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4207220:sub_403274": null, "4207232:cgc_abs": "long long cgc_abs()\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
    unsigned long v2;  // xmm0lq\n
\n
    v0 = 9223372036854775807 & v2;\n
    return 9223372036854775807 & v2;\n
}\n
", "4207266:sub_4032a2": null, "4207280:cgc_clamp": "long long cgc_clamp()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long long, unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0x3ff0000000000000) & 69) | ((CmpF(v0, 0x3ff0000000000000) & 69) >> 6)) & 1) == 1)\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0x3ff0000000000000;\n
        return v5;\n
    }\n
}\n
", "4207374:sub_40330e": null, "4207376:cgc_pool_init": "long long cgc_pool_init(unsigned long long a0[2], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a1 >= 4056)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    a0[0] = a1;\n
    a0[1] = 0;\n
    v0 = 0;\n
    return v0;\n
}\n
", "4207449:sub_403359": null, "4207456:cgc_pool_destroy": "long long cgc_pool_destroy(unsigned long long *a0)\n
{\n
    cgc_pool_free_all(a0);\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4207494:sub_403386": null, "4207504:cgc_pool_free_all": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_pool_free_all(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x20]\n
    struct struct_0 **v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long long v3;  // rsi\n
\n
    for (v1 = &a0->field_8->field_0; v1; v1 = v0)\n
    {\n
        v0 = *(v1);\n
        cgc_deallocate(a0, v3);\n
    }\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4207595:sub_4033eb": null, "4207600:cgc_pool_alloc": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_8[8];\n
    unsigned int field_10;\n
    char padding_14[4];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_pool_alloc(struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v5;  // rax\n
\n
    if (!a0->field_8 && cgc_pool_grow(a0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (!a0->field_8->field_10)\n
    {\n
        v1 = a0->field_8;\n
        for (v2 = v1->field_0; v2; v2 = v2->field_0)\n
        {\n
            if (v2->field_10)\n
                break;\n
            v1 = v2;\n
        }\n
        if (v2)\n
        {\n
            *(v1) = *(v2);\n
            *(v2) = a0->field_8;\n
            a0->field_8 = v2;\n
        }\n
        else if (cgc_pool_grow(a0))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    v0 = cgc_bitset_find_first(a0->field_8 + 1, 0);\n
    if (v0 == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (cgc_bitset_set_bit(a0->field_8 + 1, v0) != -1)\n
    {\n
        v5 = a0->field_8;\n
        v5->field_10 = v5->field_10 - 1;\n
        v3 = a0->field_8->field_18 + v0 * a0->field_0;\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4208003:sub_403583": null, "4208016:cgc_pool_grow": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long cgc_pool_grow(unsigned long long a0[2])\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned long long v3;  // rsi\n
    unsigned long long v4;  // rdx\n
    struct_0 *v6;  // rax\n
\n
    if (cgc_allocate(a0, v3, v4))\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    *(v0) = a0[1];\n
    v0[1] = a0[0];\n
    for (*(&v0[2]) = (0 CONCAT 4056) /m a0[0]; (v0[2] + 7 & -8) >> 3 > 4056 - v0[2] * a0[0]; v6->field_10 = v6->field_10 - 1)\n
    {\n
        v6 = v0;\n
    }\n
    cgc_bitset_init(v0 + 4, v0[2]);\n
    v0[3] = 5 + v0 + ((v0[2] + 7 & -8) >> 3);\n
    a0[1] = v0;\n
    v1 = 0;\n
    return v1;\n
}\n
", "4208276:sub_403694": null, "4208288:cgc_pool_free": "long long cgc_pool_free(unsigned long a0, unsigned long long a1[4])\n
{\n
    int tmp_26;  // tmp #26\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned long long v1[4];  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10]\n
    unsigned long long v4;  // rax\n
    unsigned long long v5[4];  // rcx\n
    unsigned long v6;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a0;\n
    v1[0] = a1 & 4095;\n
    v4 = a1 - v1[3];\n
    v5 = v1;\n
    tmp_26 = (0 CONCAT v4) /m v5[1];\n
    v6 = (0 CONCAT v4) /m v5[1];\n
    if (!(tmp_26 >> 64))\n
    {\n
        v0 = (0 CONCAT a1 - v1[3]) /m v1[1];\n
        v6 = cgc_bitset_clear_bit(v1 + 1, v0);\n
    }\n
    return v6;\n
}\n
", "4208408:sub_403718": null, "4208416:cgc_make_ray": "long long cgc_make_ray(unsigned long long a0[6], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10)\n
{\n
    unsigned long long v0;  // [bp-0x48]\n
    unsigned long v1;  // [bp-0x40]\n
    unsigned long v2;  // [bp-0x38]\n
    unsigned long long v3[6];  // [bp-0x30]\n
    unsigned long long v4[6];  // [bp-0x28]\n
    char v5;  // [bp-0x20]\n
    char v6;  // [bp-0x18]\n
    char v7;  // [bp-0x10]\n
    unsigned long v8;  // [bp+0x8]\n
    unsigned long long v9[6];  // rdi\n
\n
    v3[0] = a0;\n
    v4[0] = a0;\n
    a0[0] = v8;\n
    a0[1] = a6;\n
    a0[2] = a7;\n
    v0 = *(&a8);\n
    v1 = a9;\n
    v2 = a10;\n
    cgc_vector_norm(&v5);\n
    v9 = v3;\n
    v9[3] = *(&v5);\n
    v9[4] = *(&v6);\n
    v9[5] = *(&v7);\n
    return v4;\n
}\n
", "4208537:sub_403799": null, "4208544:cgc_read_all": "long long cgc_read_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned long v5;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = a2;\n
    v1 = 0;\n
    if (v2 > 9223372036854775807)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v5 = v1;\n
            return v5;\n
        }\n
        if (cgc_receive(a0, a1, a2, v7))\n
            break;\n
        if (!*(&v0))\n
            break;\n
        v2 -= *(&v0);\n
        v1 = *(&v0) + v1;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4208727:sub_403857": null, "4208736:cgc_read_until": "long long cgc_read_until(unsigned long long a0, unsigned long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    char v0;  // [bp-0x40]\n
    char *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = 0;\n
    if (a3 >= 1 && a3 <= 9223372036854775807)\n
    {\n
        while (true)\n
        {\n
            if (v1 >= a3 - 1)\n
            {\n
LABEL_40392e:\n
                *((a1 + v1)) = 0;\n
                v3 = v1;\n
                return v3;\n
            }\n
            if (cgc_receive(a0, a1, a2, a3))\n
            {\n
LABEL_4038f3:\n
                v3 = -1;\n
                return v3;\n
            }\n
            if (!*(&v0))\n
                goto LABEL_4038f3;\n
            if (*((a1 + v1)) == a2)\n
                goto LABEL_40392e;\n
            v1 = *(&v0) + v1;\n
        }\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4208972:sub_40394c": null, "4208976:cgc_write_all": "long long cgc_write_all(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x38]\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned long v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned long v5;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v7;  // rcx\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v2 = a2;\n
    v1 = 0;\n
    if (v2 > 9223372036854775807)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v5 = v1;\n
            return v5;\n
        }\n
        if (cgc_transmit(a0, a1, a2, v7))\n
            break;\n
        if (!*(&v0))\n
            break;\n
        v2 -= *(&v0);\n
        v1 = *(&v0) + v1;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4209159:sub_403a07": null, "4209168:cgc_fdopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern unsigned long long file_pool;\n
\n
long long cgc_fdopen(unsigned long a0, unsigned long a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!file_pool && cgc_pool_init(&file_pool, 32))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0 = cgc_pool_alloc(&file_pool);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = a0;\n
    v0->field_4 = a1;\n
    v0->field_8 = 0;\n
    v0->field_10 = 0;\n
    v0->field_18 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4209347:sub_403ac3": null, "4209360:cgc_fclose": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned int file_pool;\n
\n
long long cgc_fclose(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rsi\n
\n
    if (a0->field_8)\n
        cgc_deallocate(a0, v1);\n
    return cgc_pool_free(&file_pool, a0);\n
}\n
", "4209427:sub_403b13": null, "4209440:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (a0 && ((a0->field_4 ^ 255) & 1) != 1)\n
    {\n
        if (a0->field_8 && a0->field_10)\n
        {\n
            v0 = cgc_write_all(a0->field_0, a0->field_8 + a0->field_18, a0->field_10);\n
            if (v0 < 0)\n
            {\n
                v1 = v0;\n
                return v1;\n
            }\n
            a0->field_10 = 0;\n
            a0->field_18 = 0;\n
            v1 = 0;\n
            return v1;\n
        }\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4209646:sub_403bee": null, "4209648:cgc_fread": "long long cgc_fread(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x70]\n
    unsigned long v1;  // [bp-0x68]\n
    unsigned long v2;  // [bp-0x60]\n
    unsigned long v3;  // [bp-0x58]\n
    unsigned long v4;  // [bp-0x50]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned long v6;  // [bp-0x40]\n
    unsigned long v7;  // [bp-0x38]\n
    unsigned long v8;  // [bp-0x30]\n
    unsigned long v9;  // [bp-0x28]\n
    unsigned long v10;  // [bp-0x20]\n
    unsigned long v11;  // [bp-0x10]\n
    unsigned long v13;  // rax\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rax\n
    unsigned long v16;  // rax\n
\n
    v10 = a1;\n
    v9 = a2;\n
    v8 = 0;\n
    v4 = a0;\n
    if (v10 <= 9223372036854775807 && !*((v9 + 4)))\n
    {\n
        if (v10)\n
        {\n
            if (*((v9 + 16)) > 0)\n
            {\n
                if (v10 < *((v9 + 16)))\n
                    v3 = v10;\n
                else\n
                    v3 = *((v9 + 16));\n
                v6 = v3;\n
                cgc_memcpy(v4, *((v9 + 8)) + *((v9 + 24)), v6);\n
                a2 = v6;\n
                v13 = v9;\n
                *((v13 + 16)) = *((v13 + 16)) - a2;\n
                if (!*((v9 + 16)))\n
                    v2 = 0;\n
                else\n
                    v2 = *((v9 + 24)) + v6;\n
                *((v9 + 24)) = v2;\n
                v14 = v6;\n
                v10 -= v14;\n
                v4 = v6 + v4;\n
                v8 = v6 + v8;\n
                if (!v10)\n
                {\n
                    v11 = v8;\n
                    return v11;\n
                }\n
                *((v9 + 16)) = 0;\n
                *((v9 + 24)) = 0;\n
            }\n
            if (v10 >= 0x1000)\n
            {\n
                v5 = v10 & -0x1000;\n
                v7 = cgc_read_all(*(v9), v4, v5);\n
                if (v7 != v5)\n
                {\n
                    v11 = -1;\n
                    return v11;\n
                }\n
                v10 &= 4095;\n
                v4 = v5 + v4;\n
                v8 = v5 + v8;\n
                if (!v10)\n
                {\n
                    v11 = v8;\n
                    return v11;\n
                }\n
            }\n
            if (!*((v9 + 8)) && cgc_allocate_buffer(v9))\n
            {\n
                v11 = -1;\n
                return v11;\n
            }\n
            while (true)\n
            {\n
                if (*((v9 + 16)) >= v10 && *((v9 + 16)) >= v10)\n
                {\n
                    if (v10 < *((v9 + 16)))\n
                        v1 = v10;\n
                    else\n
                        v1 = *((v9 + 16));\n
                    v6 = v1;\n
                    cgc_memcpy(v4, *((v9 + 8)) + *((v9 + 24)), v6);\n
                    v16 = v9;\n
                    *((v16 + 16)) = *((v16 + 16)) - v6;\n
                    if (!*((v9 + 16)))\n
                        v0 = 0;\n
                    else\n
                        v0 = *((v9 + 24)) + v6;\n
                    *((v9 + 24)) = v0;\n
                    v8 = v6 + v8;\n
                    break;\n
                }\n
                if (cgc_receive(a0, a1, a2, v14))\n
                {\n
LABEL_403e7c:\n
                    v11 = -1;\n
                    return v11;\n
                }\n
                if (!v7)\n
                    goto LABEL_403e7c;\n
                v15 = v9;\n
                *((v15 + 16)) = v7 + *((v15 + 16));\n
            }\n
            v11 = v8;\n
            return v11;\n
        }\n
        else\n
        {\n
            v11 = v8;\n
            return v11;\n
        }\n
    }\n
    v11 = -1;\n
    return v11;\n
}\n
", "4210540:sub_403f6c": null, "4210544:cgc_allocate_buffer": "long long cgc_allocate_buffer(unsigned long long a0[4])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
\n
    if (a0[1])\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else if (!cgc_allocate(a0, v2, v3))\n
    {\n
        a0[2] = 0;\n
        a0[3] = 0;\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
}\n
", "4210664:sub_403fe8": null, "4210672:cgc_fread_until": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fread_until(char *a0, unsigned long long a1, unsigned long long a2, struct_0 *a3)\n
{\n
    void* v0;  // [bp-0x68], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x60]\n
    char *v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x50]\n
    char v4;  // [bp-0x48]\n
    unsigned long v5;  // [bp-0x40], Other Possible Types: unsigned long long\n
    void* v6;  // [bp-0x38], Other Possible Types: unsigned long\n
    struct_0 *v7;  // [bp-0x30]\n
    unsigned long v8;  // [bp-0x28]\n
    unsigned long v9;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v11;  // rcx, Other Possible Types: unsigned long\n
    struct_0 *v12;  // rax\n
    struct_0 *v13;  // rax\n
    char *v14;  // rax\n
\n
    v8 = a2;\n
    v7 = a3;\n
    v6 = 0;\n
    v2 = a0;\n
    if (v8 >= 1 && v8 <= 9223372036854775807 && !v7->field_4)\n
    {\n
        if (!v7->field_8 && cgc_allocate_buffer(v7))\n
        {\n
            v9 = -1;\n
            return v9;\n
        }\n
        while (true)\n
        {\n
            v11 = v8 - 1;\n
            if (v6 >= v11)\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
            if (v7->field_8 && v7->field_10 > 0)\n
            {\n
                v3 = cgc_memchr(v7->field_8 + v7->field_18, a1, v7->field_10);\n
                if (!v3)\n
                {\n
                    v5 = v7->field_10;\n
                }\n
                else\n
                {\n
                    v11 = v7->field_8 + v7->field_18;\n
                    v5 = v3 - v11 + 1;\n
                }\n
                if (v8 - 1 >= v5)\n
                    v1 = v5;\n
                else\n
                    v1 = v8 - 1;\n
                v5 = v1;\n
                cgc_memcpy(v2, v7->field_8 + v7->field_18, v5);\n
                v12 = v7;\n
                v12->field_10 = v12->field_10 - v5;\n
                if (!v7->field_10)\n
                    v0 = 0;\n
                else\n
                    v0 = v7->field_18 + v5;\n
                v7->field_18 = v0;\n
                v8 -= v5;\n
                v2 = v5 + v2;\n
                v6 = v5 + v6;\n
                if (v8 != 1 && !v3)\n
                    goto LABEL_404218;\n
                v14 = v2;\n
                v2 = v14 + 1;\n
                *(v14) = 0;\n
                v9 = v6;\n
                return v9;\n
            }\n
LABEL_404218:\n
            if (cgc_receive(a0, a1, a2, v11))\n
            {\n
LABEL_404263:\n
                v9 = -1;\n
                return v9;\n
            }\n
            if (!*(&v4))\n
                goto LABEL_404263;\n
            v13 = v7;\n
            v13->field_10 = *(&v4) + v13->field_10;\n
        }\n
    }\n
    v9 = -1;\n
    return v9;\n
}\n
", "4211351:sub_404297": null, "4211360:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_fwrite(unsigned long a0, unsigned long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x60]\n
    unsigned long v1;  // [bp-0x58]\n
    unsigned long v2;  // [bp-0x50], Other Possible Types: unsigned long long\n
    unsigned long long v3;  // [bp-0x48]\n
    unsigned long long v4;  // [bp-0x40]\n
    unsigned long v5;  // [bp-0x38]\n
    void* v6;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_0 *v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x20], Other Possible Types: unsigned long long\n
    unsigned long v9;  // [bp-0x10], Other Possible Types: unsigned long long\n
    struct_0 *v11;  // rcx\n
    struct_0 *v12;  // rax\n
\n
    v8 = a1;\n
    v7 = a2;\n
    v6 = 0;\n
    v2 = a0;\n
    if (v8 <= 9223372036854775807 && a2->field_4 == 1)\n
    {\n
        if (v8)\n
        {\n
            if (a2->field_8)\n
            {\n
                if (v8 < 0x1000 - a2->field_18 - v7->field_10)\n
                    v1 = v8;\n
                else\n
                    v1 = 0x1000 - a2->field_18 - v7->field_10;\n
                v4 = v1;\n
                v11 = a2;\n
                cgc_memcpy(v7->field_8 + a2->field_18 + v11->field_10, v2, v4, v11);\n
                v12 = a2;\n
                v12->field_10 = v4 + v12->field_10;\n
                v8 -= v4;\n
                v2 = v4 + v2;\n
                v6 = v4 + v6;\n
                if (!v8)\n
                {\n
                    v9 = v6;\n
                    return v9;\n
                }\n
                v0 = a2->field_10;\n
                if (v0 != cgc_write_all(a2->field_0, v7->field_8 + v7->field_18, v7->field_10))\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
                a2->field_10 = 0;\n
                a2->field_18 = 0;\n
            }\n
            if (v8 >= 0x1000)\n
            {\n
                v3 = v8 & -0x1000;\n
                v5 = cgc_write_all(a2->field_0, v2, v3);\n
                if (v5 != v3)\n
                {\n
                    v9 = -1;\n
                    return v9;\n
                }\n
                v8 &= 4095;\n
                v2 = v3 + v2;\n
                v6 = v3 + v6;\n
                if (!v8)\n
                {\n
                    v9 = v6;\n
                    return v9;\n
                }\n
            }\n
            if (!a2->field_8 && cgc_allocate_buffer(a2))\n
            {\n
                v9 = -1;\n
                return v9;\n
            }\n
            cgc_memcpy(a2->field_8, v2, v8);\n
            a2->field_10 = v8;\n
            v6 = v8 + v6;\n
            v9 = v6;\n
            return v9;\n
        }\n
        else\n
        {\n
            v9 = v6;\n
            return v9;\n
        }\n
    }\n
    v9 = -1;\n
    return v9;\n
}\n
", "4212031:sub_40453f": null, "4212032:cgc_fgetc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_fgetc(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    char v2;  // [bp-0x11]\n
\n
    if (a0->field_10)\n
        v1 = cgc_fread(&v2, 1, a0);\n
    else\n
        v1 = cgc_read_all(a0->field_0, &v2, 1);\n
    if (v1 < 0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v2;\n
    return v0;\n
}\n
", "4212153:sub_4045b9": null, "4212160:cgc_fputc": "long long cgc_fputc(unsigned long a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    return cgc_fwrite(&v0, 1, a1);\n
}\n
", "4212199:sub_4045e7": null, "4212208:cgc_vfprintf": "long long cgc_vfprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc_printf_core(a1, cgc_file_printer, a0, a2);\n
}\n
", "4212258:sub_404622": null, "4212272:cgc_printf_core": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long cgc_printf_core(char *a0, struct struct_3 **a1, unsigned long a2, struct_1 *a3)\n
{\n
    char v0;  // [bp-0x105]\n
    unsigned int v1;  // [bp-0x104]\n
    unsigned int *v2;  // [bp-0x100], Other Possible Types: unsigned long\n
    struct_1 *v3;  // [bp-0xf8]\n
    unsigned int v4;  // [bp-0xec]\n
    unsigned int *v5;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v6;  // [bp-0xe0]\n
    unsigned int v7;  // [bp-0xd4]\n
    unsigned int *v8;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v9;  // [bp-0xc8]\n
    unsigned int v10;  // [bp-0xbc]\n
    unsigned int *v11;  // [bp-0xb8]\n
    struct_1 *v12;  // [bp-0xb0]\n
    unsigned int *v13;  // [bp-0xa8]\n
    unsigned int v14;  // [bp-0x9c]\n
    struct struct_0 **v15;  // [bp-0x98]\n
    struct_1 *v16;  // [bp-0x90]\n
    unsigned int v17;  // [bp-0x84]\n
    unsigned int *v18;  // [bp-0x80]\n
    struct_1 *v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x70]\n
    unsigned int v21;  // [bp-0x6c]\n
    struct_0 *v22;  // [bp-0x68], Other Possible Types: unsigned long, void*\n
    unsigned long v23;  // [bp-0x60]\n
    char v24;  // [bp-0x58]\n
    char v25;  // [bp-0x50]\n
    char v26;  // [bp-0x36]\n
    char v27;  // [bp-0x35]\n
    unsigned int v28;  // [bp-0x34]\n
    struct_1 *v29;  // [bp-0x30]\n
    unsigned long long v30;  // [bp-0x28]\n
    struct struct_3 **v31;  // [bp-0x20]\n
    char *v32;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v33;  // [bp-0xc]\n
    char *v35;  // rax\n
    char *v36;  // rax\n
    struct_1 *v38;  // rcx\n
    unsigned long long v39;  // rdx\n
    struct_1 *v40;  // rcx\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_1 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    unsigned int *v46;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    struct struct_0 **v53;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v54;  // rcx\n
    struct_1 *v55;  // rcx\n
    unsigned long long v56;  // rdx\n
    unsigned int *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned int *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    unsigned int *v62;  // rax\n
    struct_1 *v63;  // rcx\n
    unsigned int *v64;  // rdx\n
    struct_0 *v65;  // rcx\n
\n
    v32 = a0;\n
    v31 = a1;\n
    v30 = a2;\n
    v29 = a3;\n
    v28 = 0;\n
    v22 = 0;\n
    while (true)\n
    {\n
        v35 = v32;\n
        v32 = v35 + 1;\n
        v26 = *(v35);\n
        if (!v26)\n
        {\n
            v33 = v28;\n
            return v33;\n
        }\n
        if (v26 != 37)\n
        {\n
            v31(v26, v30);\n
            v28 += 1;\n
            goto LABEL_404ba9;\n
        }\n
        v36 = v32;\n
        v32 = v36 + 1;\n
        v21 = *(v36);\n
        v26 = v21;\n
        if (v21 == 37)\n
        {\n
            v31(v26, v30);\n
            v28 += 1;\n
            goto LABEL_404b37;\n
        }\n
        if (v21 != 88)\n
        {\n
            if (v21 == 99)\n
            {\n
                v19 = v29;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v40 = v19;\n
                    v46 = v40->field_8;\n
                    v40->field_8 = v46 + 8;\n
                }\n
                else\n
                {\n
                    v38 = v19;\n
                    v39 = v20;\n
                    v46 = v39 + v38->field_10;\n
                    v38->field_0 = v39 + 8;\n
                }\n
                v18 = v46;\n
                v27 = *(v18);\n
                v31(v27, v30);\n
                v28 += 1;\n
                goto LABEL_404b37;\n
            }\n
            if (v21 == 100)\n
            {\n
                v9 = v29;\n
                v10 = v9->field_0;\n
                if (v10 > 40)\n
                {\n
                    v44 = v9;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v8 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v9;\n
                    v42 = v10;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v8 = v43;\n
                }\n
                if (cgc_itostr(*(v8), 10, 0, &v24, 32))\n
                {\n
                    v33 = -1;\n
                    return v33;\n
                }\n
                v22 = &v24;\n
                goto LABEL_404b37;\n
            }\n
            if (v21 == 102)\n
            {\n
                v12 = v29;\n
                v13 = &v12->field_4;\n
                v14 = v12->field_4;\n
                if (v14 > 160)\n
                {\n
                    v49 = v12;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v11 = v50;\n
                }\n
                else\n
                {\n
                    v47 = v14;\n
                    v48 = v47 + v12->field_10;\n
                    *(v13) = v47 + 16;\n
                    v11 = v48;\n
                }\n
                if (cgc_dtostr(&v24, 32))\n
                {\n
                    v33 = -1;\n
                    return v33;\n
                }\n
                v22 = &v24;\n
                goto LABEL_404b37;\n
            }\n
            if (v21 == 115)\n
            {\n
                v16 = v29;\n
                v17 = v16->field_0;\n
                if (v17 <= 40)\n
                {\n
                    v51 = v16;\n
                    v52 = v17;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                }\n
                else\n
                {\n
                    v54 = v16;\n
                    v53 = v54->field_8;\n
                    v54->field_8 = v53 + 8;\n
                }\n
                v15 = v53;\n
                v22 = *(v15);\n
                goto LABEL_404b37;\n
            }\n
            if (v21 == 117)\n
            {\n
                v6 = v29;\n
                v7 = v6->field_0;\n
                if (v7 > 40)\n
                {\n
                    v58 = v6;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[2];\n
                    v5 = v59;\n
                }\n
                else\n
                {\n
                    v55 = v6;\n
                    v56 = v7;\n
                    v57 = v56 + v55->field_10;\n
                    v55->field_0 = v56 + 8;\n
                    v5 = v57;\n
                }\n
                if (cgc_utostr(*(v5), 10, 0, &v24, 32))\n
                {\n
                    v33 = -1;\n
                    return v33;\n
                }\n
                v22 = &v24;\n
                goto LABEL_404b37;\n
            }\n
            else if (v21 != 120)\n
            {\n
                v33 = -1;\n
                return v33;\n
            }\n
        }\n
        v3 = v29;\n
        v4 = v3->field_0;\n
        if (v4 <= 40)\n
        {\n
            v60 = v3;\n
            v61 = v4;\n
            v62 = v61 + v60->field_10;\n
            v60->field_0 = v61 + 8;\n
            v2 = v62;\n
        }\n
        else\n
        {\n
            v63 = v3;\n
            v64 = v63->field_8;\n
            v63->field_8 = &v64[2];\n
            v2 = v64;\n
        }\n
        v1 = *(v2);\n
        if (cgc_utostr(v1, 16, cgc_isupper(v26), &v24, 32))\n
        {\n
            v33 = -1;\n
            return v33;\n
        }\n
        v23 = cgc_strlen(&v24);\n
        if (v23 < 8)\n
        {\n
            cgc_memmove(&(&v25)[-1 * v23], &v24, v23 + 1);\n
            cgc_memset(&v24, 48, 8 - v23);\n
        }\n
        v22 = &v24;\n
LABEL_404b37:\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v22)\n
                v0 = *(v22);\n
            if (!(v0 & 1))\n
                break;\n
            v65 = v22;\n
            v22 = v65 + 1;\n
            v31(v65->field_0, v30, v22, v65);\n
            v28 += 1;\n
        }\n
        v22 = 0;\n
LABEL_404ba9:\n
    }\n
}\n
", "4213696:cgc_file_printer": "long long cgc_file_printer(unsigned long a0, void* a1)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_fputc(a0, a1);\n
    v1 = a0;\n
    if (v1 == 10)\n
    {\n
        v1 = cgc_fflush(a1);\n
        return v1;\n
    }\n
    return a0;\n
}\n
", "4213755:sub_404bfb": null, "4213760:cgc_vprintf": "extern unsigned long long cgc_stdout;\n
\n
long long cgc_vprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    return cgc_vfprintf(cgc_stdout, a0, a1);\n
}\n
", "4213802:sub_404c2a": null, "4213808:cgc_vsnprintf": "long long cgc_vsnprintf(unsigned long a0, unsigned long a1, char *a2, void* a3)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v1;  // [bp-0x30]\n
\n
    v0 = a0;\n
    v1 = a1;\n
    return cgc_printf_core(a2, cgc_string_printer, &v0, a3);\n
}\n
", "4213878:sub_404c76": null, "4213888:cgc_string_printer": "long long cgc_string_printer(unsigned long a0, struct struct_0 *a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a1[1];\n
    a1[1] = &v1[1];\n
    if (v1)\n
    {\n
        v1 = a1[0];\n
        a1[0] = v1 + 1;\n
        *(v1) = a0;\n
    }\n
    return v1;\n
}\n
", "4213963:sub_404ccb": null, "4213968:cgc_vsprintf": "long long cgc_vsprintf(unsigned int a0, char *a1, void* a2)\n
{\n
    return cgc_vsnprintf(a0, -1, a1, a2);\n
}\n
", "4214018:sub_404d02": null, "4214032:cgc_fprintf": "long long cgc_fprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vfprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4214193:sub_404db1": null, "4214208:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned int v18;  // [bp-0x14]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v17 = &v0;\n
    v16 = &v19;\n
    v15 = 48;\n
    v14 = 8;\n
    v18 = cgc_vprintf(a0, &v14);\n
    return v18;\n
}\n
", "4214368:cgc_snprintf": "long long cgc_snprintf(unsigned int a0, unsigned int a1, char *a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    int v4;  // [bp-0xc8]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    unsigned int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x44]\n
    unsigned long v14;  // [bp-0x40]\n
    unsigned long v15;  // [bp-0x38]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp+0x8]\n
    char v18;  // al\n
    int v19;  // xmm0\n
    int v20;  // xmm1\n
    int v21;  // xmm2\n
    int v22;  // xmm3\n
    int v23;  // xmm4\n
    int v24;  // xmm5\n
    int v25;  // xmm6\n
    int v26;  // xmm7\n
    unsigned long v27;  // r9\n
\n
    if (v18)\n
    {\n
        v4 = v19;\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
    }\n
    v3 = v27;\n
    v2 = a4;\n
    v1 = a3;\n
    v15 = &v0;\n
    v14 = &v17;\n
    v13 = 48;\n
    v12 = 24;\n
    v16 = cgc_vsnprintf(a0, a1, a2, &v12);\n
    return v16;\n
}\n
", "4214533:sub_404f05": null, "4214544:cgc_sprintf": "long long cgc_sprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xd8]\n
    unsigned long v2;  // [bp-0xd0]\n
    unsigned long v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    int v5;  // [bp-0xb8]\n
    int v6;  // [bp-0xa8]\n
    int v7;  // [bp-0x98]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    unsigned int v13;  // [bp-0x38]\n
    unsigned int v14;  // [bp-0x34]\n
    unsigned long v15;  // [bp-0x30]\n
    unsigned long v16;  // [bp-0x28]\n
    unsigned int v17;  // [bp-0x1c]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v16 = &v0;\n
    v15 = &v18;\n
    v14 = 48;\n
    v13 = 16;\n
    v17 = cgc_vsprintf(a0, a1, &v13);\n
    return v17;\n
}\n
", "4214705:sub_404fb1": null, "4214720:cgc_srand": "extern char rand_seed;\n
\n
long long cgc_srand(unsigned long a0)\n
{\n
    *(&rand_seed) = a0;\n
    return a0;\n
}\n
", "4214739:sub_404fd3": null, "4214752:cgc_rand": "extern unsigned long long rand_seed;\n
\n
long long cgc_rand()\n
{\n
    rand_seed = rand_seed * 6364136223846793005 + 1442695040888963407;\n
    return rand_seed >> 32;\n
}\n
", "4214807:sub_405017": null, "4214816:cgc_get_flag_byte": "long long cgc_get_flag_byte(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18]\n
\n
    v0 = 0x4347c000;\n
    return v0[4 * (a0 & 1023)];\n
}\n
", "4214858:sub_40504a": null, "4214864:cgc_get_flag_byte_unsafe": "long long cgc_get_flag_byte_unsafe(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18]\n
\n
    v0 = 0x4347c000;\n
    return v0[a0 & 4095];\n
}\n
", "4214902:sub_405076": null, "4214912:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long long v4;  // rax\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = a0;\n
    v0 = a1;\n
    while (true)\n
    {\n
        v4 = v2;\n
        v2 = v4 - 1;\n
        if (!v4)\n
            break;\n
        v5 = v0;\n
        v0 = v5 + 1;\n
        tmp_19 = *(v5);\n
        v6 = v1;\n
        v1 = v6 + 1;\n
        *(v6) = tmp_19;\n
    }\n
    return a0;\n
}\n
", "4215014:sub_4050e6": null, "4215024:cgc_memmove": "long long cgc_memmove(char *a0, char *a1, char *a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v2 = a2;\n
    v1 = a0;\n
    v0 = a1;\n
    while (true)\n
    {\n
        v4 = v2;\n
        v2 = v4 + 1;\n
        if (!v4)\n
            break;\n
        if (a0 >= a1)\n
        {\n
            *((v1 + v2)) = *((v0 + v2));\n
        }\n
        else\n
        {\n
            v5 = v0;\n
            v0 = v5 + 1;\n
            tmp_19 = *(v5);\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            *(v6) = tmp_19;\n
        }\n
    }\n
    return a0;\n
}\n
", "4215167:sub_40517f": null, "4215168:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long long v3;  // rax\n
    char *v4;  // rax\n
\n
    v1 = a2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a1;\n
    }\n
    return a0;\n
}\n
", "4215249:sub_4051d1": null, "4215264:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4215327:sub_40521f": null, "4215328:cgc_strnlen": "long long cgc_strnlen(char *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x21]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x18]\n
    char *v3;  // [bp-0x10]\n
    unsigned long long v5;  // rcx\n
    char *v6;  // rax\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v5 = v2;\n
        v2 = v5 - 1;\n
        v0 = 0;\n
        if (v5)\n
        {\n
            v6 = v3;\n
            v3 = v6 + 1;\n
            v0 = *(v6);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4215444:sub_405294": null, "4215456:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4215551:sub_4052ff": null, "4215552:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = *((a1 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((a0 + v1)) = *((a1 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = 0;\n
    }\n
    return a0;\n
}\n
", "4215725:sub_4053ad": null, "4215728:cgc_strcat": "long long cgc_strcat(char *a0, unsigned int a1)\n
{\n
    cgc_strcpy(&a0[cgc_strlen(a0)], a1);\n
    return a0;\n
}\n
", "4215787:sub_4053eb": null, "4215792:cgc_strncat": "long long cgc_strncat(char *a0, unsigned int a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    v0 = &v0[cgc_strlen(v0)];\n
    cgc_strncpy(v0, a1, a2);\n
    v0[a2] = 0;\n
    return v0;\n
}\n
", "4215868:sub_40543c": null, "4215872:cgc_memcmp": "long long cgc_memcmp(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rax\n
\n
    v2 = a2;\n
    v1 = a0;\n
    v0 = a1;\n
    while (true)\n
    {\n
        v5 = v2;\n
        v2 = v5 - 1;\n
        if (!v5)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (*(v1) == *(v0))\n
        {\n
            v1 += 1;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v3 = *(v1) - *(v0);\n
            return v3;\n
        }\n
    }\n
}\n
", "4216016:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v1))\n
                v0 = *(v2) == *(v1);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4216160:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x21]\n
    unsigned long v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    while (true)\n
    {\n
        v1 -= 1;\n
        v0 = 0;\n
        if (v1)\n
        {\n
            v0 = 0;\n
            if (*(v3))\n
            {\n
                v0 = 0;\n
                if (*(v2))\n
                    v0 = *(v3) == *(v2);\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return *(v3) - *(v2);\n
}\n
", "4216335:sub_40560f": null, "4216336:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rax\n
\n
    v1 = a2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v4 = v1;\n
        v1 = v4 - 1;\n
        if (!v4)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (*(v0) == a1)\n
        {\n
            v2 = v0;\n
            return v2;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4216449:sub_405681": null, "4216464:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4216553:sub_4056e9": null, "4216560:cgc_strpbrk": "long long cgc_strpbrk(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (!cgc_strchr(a1, *(v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4216663:sub_405757": null, "4216672:cgc_strrchr": "long long cgc_strrchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = a0;\n
    v0 = &v0[1 + cgc_strlen(v0)];\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*(v0) != a1)\n
        {\n
            v0 -= 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4216790:sub_4057d6": null, "4216800:cgc_strstr": "long long cgc_strstr(char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    *(&v0) = cgc_strlen(a1);\n
    while (true)\n
    {\n
        if (!*(v1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strncmp(v1, a1, *(&v0)))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4216916:sub_405854": null, "4216928:cgc_strcspn": "long long cgc_strcspn(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x10]\n
\n
    v0 = cgc_strpbrk(a0, a1);\n
    if (v0)\n
    {\n
        v1 = v0 - a0;\n
        return v1;\n
    }\n
    v1 = cgc_strlen(a0);\n
    return v1;\n
}\n
", "4217014:sub_4058b6": null, "4217024:cgc_strspn": "long long cgc_strspn(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x21]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(a0))\n
            v0 = cgc_strchr(a1, *(a0));\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4217138:sub_405932": null, "4217152:cgc_strtok": "extern struct_0 *cgc_strtok.last;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    if (a0)\n
    {\n
LABEL_40598c:\n
        if (cgc_strtok.last && !(!cgc_strlen(cgc_strtok.last)))\n
            goto LABEL_4059bb;\n
        cgc_strtok.last = a0;\n
LABEL_4059bb:\n
        for (; cgc_strchr(a1, cgc_strtok.last->field_0); cgc_strtok.last = cgc_strtok.last + 1);\n
        v0 = &cgc_strtok.last->field_0;\n
        cgc_strtok.last = cgc_strpbrk(cgc_strtok.last, a1);\n
        if (cgc_strtok.last)\n
        {\n
            v3 = cgc_strtok.last;\n
            cgc_strtok.last = cgc_strtok.last + 1;\n
            *(v3) = 0;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    else\n
    {\n
        if (cgc_strtok.last && !(!cgc_strlen(cgc_strtok.last)))\n
            goto LABEL_40598c;\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4217418:sub_405a4a": null, "4217424:cgc_make_vector": "long long cgc_make_vector(unsigned long long a0[3])\n
{\n
    unsigned long v1;  // xmm0lq\n
    unsigned long v2;  // xmm1lq\n
    unsigned long v3;  // xmm2lq\n
\n
    a0[0] = v1;\n
    a0[1] = v2;\n
    a0[2] = v3;\n
    return a0;\n
}\n
", "4217477:sub_405a85": null, "4217488:cgc_vector_add": "long long cgc_vector_add(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10)\n
{\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4217554:sub_405ad2": null, "4217568:cgc_vector_sub": "long long cgc_vector_sub(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10)\n
{\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4217634:sub_405b22": null, "4217648:cgc_vector_mul": "long long cgc_vector_mul(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10)\n
{\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4217714:sub_405b72": null, "4217728:cgc_vector_scale": "long long cgc_vector_scale(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // xmm0lq\n
\n
    v0 = v2;\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4217796:sub_405bc4": null, "4217808:cgc_vector_mag_sqr": "double cgc_vector_mag_sqr(long long a0, long long a1, long long a2, long long a3, long long a4, long long a5, char a6, long long a6, long long a7)\n
{\n
    unsigned long v0;  // [bp+0x8]\n
\n
    return Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base+24, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base+24, size=8, endness=Iend_LE))) + (((0x0<64> CONCAT Load(addr=stack_base+8, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base+8, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base+16, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base+16, size=8, endness=Iend_LE))))));\n
}\n
", "4217862:sub_405c06": null, "4217872:cgc_vector_mag": "long long cgc_vector_mag(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long a3, unsigned long long a4, unsigned long long a5, char v0, unsigned long long a6, unsigned long long a7)\n
{\n
    unsigned long long v1;  // rcx\n
\n
    v1 = a6;\n
    cgc_vector_mag_sqr(a0, a1, a2, v1, a4, a5, v0, v1, a7);\n
    return cgc_sqrt(a0, a1, a2, v1, a4, a5, v0, a6);\n
}\n
", "4217925:sub_405c45": null, "4217936:cgc_vector_norm": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
long long cgc_vector_norm(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char v1, unsigned long a6, unsigned long long a7)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned long v2;  // rcx\n
    struct_1 *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    v0 = &v1;\n
    v2 = a6;\n
    cgc_vector_mag(a0, a1, a2, v2, a4, a5, v1, v2, a7);\n
    v3 = v0;\n
    v4 = v3->field_8;\n
    cgc_vector_scale(a0, a1, a2, v4, a4, a5, *(&v3->field_0), v4, *(&v3->field_10));\n
    return a0;\n
}\n
", "4218053:sub_405cc5": null, "4218064:cgc_vector_dot": "double cgc_vector_dot(long long a0, long long a1, long long a2, long long a3, long long a4, long long a5, char a6, long long a6, long long a7, char a8, long long a9, long long a10)\n
{\n
    unsigned long v0;  // [bp+0x8]\n
\n
    return Conv(128->64, (((0x0<64> CONCAT Load(addr=stack_base+24, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base+48, size=8, endness=Iend_LE))) + (((0x0<64> CONCAT Load(addr=stack_base+8, size=8, endness=Iend_LE)) * (0x0<64> CONCAT Load(addr=stack_base+32, size=8, endness=Iend_LE))) + ((0x0<64> CONCAT Load(addr=stack_base+16, size=8, endness=Iend_LE)) * Conv(64->128, Load(addr=stack_base+40, size=8, endness=Iend_LE))))));\n
}\n
", "4218122:sub_405d0a": null, "4218128:cgc_vector_cross": "long long cgc_vector_cross(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10)\n
{\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4218315:sub_405dcb": null, "4218320:cgc_pt_init": "long long cgc_pt_init(unsigned long long a0[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (cgc_pool_init(a0, 136))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    cgc_pt_clear_ctx(a0);\n
    v0 = 0;\n
    return v0;\n
}\n
", "4218392:sub_405e18": null, "4218400:cgc_pt_clear_ctx": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned long long field_48;\n
} struct_0;\n
\n
long long cgc_pt_clear_ctx(struct_0 *a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned long long v0[3];  // [bp-0x70]\n
    char v1;  // [bp-0x68]\n
    char v2;  // [bp-0x60]\n
    unsigned long long v3[3];  // [bp-0x58]\n
    char v4;  // [bp-0x50]\n
    char v5;  // [bp-0x48]\n
    unsigned long long v6[6];  // [bp-0x40]\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // rcx\n
\n
    a0->field_48 = 0;\n
    cgc_pool_free_all(a0);\n
    cgc_make_vector(v3);\n
    cgc_make_vector(v0);\n
    v8 = *(&v4);\n
    v9 = *(&v1);\n
    cgc_make_ray(v6, a1, v8, v9, a4, a5, v3[0], v8, *(&v5), v0[0], v9, *(&v2));\n
    return cgc_pt_setup_camera(a0);\n
}\n
", "4218610:sub_405ef2": null, "4218624:cgc_pt_destroy": "long long cgc_pt_destroy(unsigned long long *a0)\n
{\n
    return cgc_pool_destroy(a0);\n
}\n
", "4218651:sub_405f1b": null, "4218656:cgc_pt_setup_camera": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned long long field_40;\n
} struct_0;\n
\n
long long cgc_pt_setup_camera(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp+0x8]\n
\n
    memcpy(&a0->padding_0[16], &v0, 48);\n
    a0->field_40 = 0;\n
    return a0;\n
}\n
", "4218715:sub_405f5b": null, "4218720:cgc_pt_add_sphere": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned long long field_48;\n
} struct_0;\n
\n
long long cgc_pt_add_sphere(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x98]\n
    unsigned long long v1;  // [bp-0x88]\n
    unsigned long long v2;  // [bp-0x80]\n
    unsigned long long v3;  // [bp-0x70]\n
    unsigned long v4;  // [bp-0x58]\n
    unsigned long long v5[3];  // [bp-0x48]\n
    unsigned long long v6[3];  // [bp-0x40]\n
    unsigned long long v7[3];  // [bp-0x38]\n
    unsigned long long *v8;  // [bp-0x30]\n
    unsigned long v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned long v11;  // [bp+0x8]\n
    char v12;  // [bp+0x20]\n
    char v13;  // [bp+0x38]\n
    unsigned long v14;  // xmm0lq\n
    unsigned long long v15[3];  // rax\n
    unsigned long long v16[3];  // rcx\n
    unsigned long long v17[3];  // r8\n
    unsigned long long v18;  // r9\n
    unsigned long long v19;  // r8\n
    unsigned long long v20;  // rcx\n
\n
    v5[0] = &v13;\n
    v6[0] = &v12;\n
    v7[0] = &v11;\n
    v9 = v14;\n
    v8 = cgc_pool_alloc(a0);\n
    if (!v8)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    v15 = v5;\n
    v16 = v6;\n
    v17 = v7;\n
    v0 = v17[0];\n
    v18 = v17[1];\n
    v1 = v17[2];\n
    v2 = v16[0];\n
    v19 = v16[1];\n
    v3 = v16[2];\n
    v20 = v15[1];\n
    v4 = v15[2];\n
    cgc_shape_init(v8, 0, a1, v20, v19, v18, v0, v18, v1, v2, v19, v3, v15[0], v20);\n
    cgc_sphere_init(v8);\n
    *(v8) = a0->field_48;\n
    a0->field_48 = v8;\n
    v10 = 0;\n
    return v10;\n
}\n
", "4218965:sub_406055": null, "4218976:cgc_pt_add_plane": "typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned long long field_48;\n
} struct_0;\n
\n
long long cgc_pt_add_plane(struct_0 *a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x98]\n
    unsigned long long v1;  // [bp-0x88]\n
    unsigned long long v2;  // [bp-0x80]\n
    unsigned long long v3;  // [bp-0x70]\n
    unsigned long v4;  // [bp-0x58]\n
    unsigned long v5;  // [bp-0x48]\n
    unsigned long long v6[3];  // [bp-0x40]\n
    unsigned long long v7[3];  // [bp-0x38]\n
    unsigned long long v8[3];  // [bp-0x30]\n
    unsigned long long *v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned long v11;  // [bp+0x8]\n
    char v12;  // [bp+0x20]\n
    char v13;  // [bp+0x38]\n
    char v14;  // [bp+0x50]\n
    unsigned long long v15[3];  // rax\n
    unsigned long long v16[3];  // rcx\n
    unsigned long long v17[3];  // r8\n
    unsigned long long v18;  // r9\n
    unsigned long long v19;  // r8\n
    unsigned long long v20;  // rcx\n
\n
    v5 = &v14;\n
    v6[0] = &v13;\n
    v7[0] = &v12;\n
    v8[0] = &v11;\n
    v9 = cgc_pool_alloc(a0);\n
    if (!v9)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    v15 = v6;\n
    v16 = v7;\n
    v17 = v8;\n
    v0 = v17[0];\n
    v18 = v17[1];\n
    v1 = v17[2];\n
    v2 = v16[0];\n
    v19 = v16[1];\n
    v3 = v16[2];\n
    v20 = v15[1];\n
    v4 = v15[2];\n
    cgc_shape_init(v9, 1, a1, v20, v19, v18, v0, v18, v1, v2, v19, v3, v15[0], v20);\n
    cgc_plane_init(v9);\n
    *(v9) = a0->field_48;\n
    a0->field_48 = v9;\n
    v10 = 0;\n
    return v10;\n
}\n
", "4219251:sub_406173": null, "4219264:cgc_pt_render": "typedef struct struct_0 {\n
    char padding_0[16];\n
    uint128_t field_10;\n
    unsigned long long field_20;\n
    char padding_28[16];\n
    unsigned long long field_38;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
long long cgc_pt_render(struct_0 *a0, unsigned int a1[2], unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned long long v0;  // [bp-0x1e8]\n
    unsigned int v1;  // [bp-0x1d8]\n
    unsigned int v2;  // [bp-0x1d4]\n
    unsigned short v3;  // [bp-0x1d0]\n
    char v4;  // [bp-0x1ce]\n
    unsigned short v5;  // [bp-0x1cc]\n
    char v6;  // [bp-0x1ca]\n
    char v7;  // [bp-0x1c8]\n
    char v8;  // [bp-0x1b8]\n
    unsigned short v9;  // [bp-0x1b0]\n
    char v10;  // [bp-0x1ae]\n
    unsigned long long v11[3];  // [bp-0x1a8]\n
    char v12;  // [bp-0x190]\n
    char v13;  // [bp-0x180]\n
    char v14;  // [bp-0x178]\n
    char v15;  // [bp-0x168]\n
    unsigned long long v16[3];  // [bp-0x160]\n
    char v17;  // [bp-0x150]\n
    unsigned long long v18[3];  // [bp-0x148]\n
    char v19;  // [bp-0x138]\n
    unsigned long long v20[3];  // [bp-0x130]\n
    char v21;  // [bp-0x120]\n
    unsigned long long v22[3];  // [bp-0x118]\n
    char v23;  // [bp-0x108]\n
    unsigned long long v24[3];  // [bp-0x100]\n
    char v25;  // [bp-0xf8]\n
    char v26;  // [bp-0xf0]\n
    unsigned long long v27[3];  // [bp-0xe8]\n
    char v28;  // [bp-0xd0]\n
    char v29;  // [bp-0xc8]\n
    char v30;  // [bp-0xc0]\n
    unsigned long long v31[3];  // [bp-0xb8]\n
    char v32;  // [bp-0xb0]\n
    char v33;  // [bp-0xa8]\n
    unsigned int v34;  // [bp-0xa0]\n
    unsigned int v35;  // [bp-0x9c]\n
    unsigned long long v36;  // [bp-0x98]\n
    unsigned long long v37;  // [bp-0x90]\n
    unsigned long long v38;  // [bp-0x88]\n
    unsigned long long v39;  // [bp-0x80]\n
    unsigned long long v40;  // [bp-0x78]\n
    unsigned long long v41;  // [bp-0x70]\n
    int v42;  // [bp-0x68]\n
    unsigned long long v43;  // [bp-0x58]\n
    int v44;  // [bp-0x48]\n
    unsigned long v45;  // [bp-0x38]\n
    int v46;  // [bp-0x30]\n
    unsigned long long v47;  // [bp-0x20]\n
    struct_1 *v49;  // rax\n
    unsigned long v50;  // rdx\n
    unsigned long v51;  // rcx\n
    unsigned long long v52;  // rcx\n
    unsigned long v53;  // rcx\n
    unsigned long v54;  // rcx\n
    unsigned long v55;  // rcx\n
\n
    v45 = a0->field_20;\n
    *(&v44) = a0->field_10;\n
    cgc_make_vector(v31);\n
    v39 = v31[0];\n
    v40 = *(&v32);\n
    v41 = *(&v33);\n
    v49 = &a0->padding_28;\n
    v50 = v40;\n
    v51 = v49->field_8;\n
    cgc_vector_cross(v24, a1, v50, v51, a4, a5, v39, v50, v41, v49->field_0, v51, *(&v49->field_10));\n
    v52 = *(&v25);\n
    cgc_vector_norm(v27, a1, v50, v52, a4, a5, v24[0], v52, *(&v26));\n
    cgc_vector_trunc(&v28);\n
    v36 = *(&v28);\n
    v37 = *(&v29);\n
    v38 = *(&v30);\n
    for (v34 = 0; v34 < a1[1]; v34 += 1)\n
    {\n
        for (v35 = 0; v35 < a1[0]; v35 += 1)\n
        {\n
            v0 = 0x3fe0000000000000;\n
            v53 = v41;\n
            cgc_vector_scale(v18, a1, v50, v53, a4, a5, *(&v39), *(&v39) >> 64, v53);\n
            v54 = v38;\n
            cgc_vector_scale(v16, a1, v50, v54, a4, a5, *(&v36), *(&v36) >> 64, v54);\n
            cgc_vector_add(v20, a1, v50, *(&v19), a4, a5, *(&v18[0]), *(&v18[0]) >> 64, *(&v19), *(&v16[0]), *(&v16[0]) >> 64, *(&v17));\n
            v50 = a0->field_38;\n
            cgc_vector_trunc(&v14);\n
            cgc_vector_add(v22, a1, v50, *(&v21), a4, a5, *(&v20[0]), *(&v20[0]) >> 64, *(&v21), *(&v14), *(&v14) >> 64, *(&v15));\n
            v43 = *(&v23);\n
            *(&v42) = *(&v22[0]);\n
            v55 = v43;\n
            cgc_vector_norm(v11, a1, v50, v55, a4, a5, v42, v42 >> 64, v55);\n
            cgc_vector_trunc(&v12);\n
            v47 = *(&v13);\n
            *(&v46) = *(&v12);\n
            v1 = v35;\n
            v2 = v34;\n
            cgc_radiance(&v7, a0, &v44, 0);\n
            v5 = cgc_color_to_pixel(a0, a1, v50, *(&v8), a4, a5, *(&v7));\n
            v6 = v5 >> 16;\n
            v10 = v6;\n
            v9 = v5;\n
            v4 = v10;\n
            v3 = v9;\n
            cgc_image_write_pixel(a1, v1, v2, v3 | v4 * 0x10000);\n
        }\n
    }\n
    return v34;\n
}\n
", "4220323:sub_4065a3": null, "4220336:cgc_radiance": "typedef struct struct_2 {\n
    char padding_0[72];\n
    struct struct_1 *field_48;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
long long cgc_radiance(unsigned long long a0[3], struct_2 *a1, unsigned long long a2[3], unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned long v0;  // [bp-0x518]\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // [bp-0x508]\n
    unsigned long long v2[3];  // [bp-0x4e0]\n
    char v3;  // [bp-0x4c8]\n
    char v4;  // [bp-0x4b0]\n
    char v5;  // [bp-0x4a8]\n
    char v6;  // [bp-0x4a0]\n
    unsigned long long v7[3];  // [bp-0x498]\n
    char v8;  // [bp-0x480]\n
    char v9;  // [bp-0x478]\n
    char v10;  // [bp-0x470]\n
    unsigned long long v11[3];  // [bp-0x468]\n
    char v12;  // [bp-0x460]\n
    char v13;  // [bp-0x458]\n
    unsigned long long v14[3];  // [bp-0x450]\n
    char v15;  // [bp-0x438]\n
    char v16;  // [bp-0x430]\n
    char v17;  // [bp-0x428]\n
    unsigned long long v18[3];  // [bp-0x420]\n
    char v19;  // [bp-0x408]\n
    char v20;  // [bp-0x400]\n
    char v21;  // [bp-0x3f8]\n
    unsigned long long v22[3];  // [bp-0x3f0]\n
    char v23;  // [bp-0x3d8]\n
    char v24;  // [bp-0x3d0]\n
    char v25;  // [bp-0x3c8]\n
    char v26;  // [bp-0x3c0]\n
    char v27;  // [bp-0x3b8]\n
    char v28;  // [bp-0x3b0]\n
    unsigned long long v29[3];  // [bp-0x3a8]\n
    char v30;  // [bp-0x390]\n
    char v31;  // [bp-0x388]\n
    char v32;  // [bp-0x380]\n
    char v33;  // [bp-0x378]\n
    unsigned long long v34[3];  // [bp-0x348]\n
    char v35;  // [bp-0x330]\n
    char v36;  // [bp-0x328]\n
    char v37;  // [bp-0x320]\n
    unsigned long long v38[3];  // [bp-0x318]\n
    char v39;  // [bp-0x300]\n
    char v40;  // [bp-0x2f8]\n
    char v41;  // [bp-0x2f0]\n
    unsigned long long v42[3];  // [bp-0x2e8]\n
    char v43;  // [bp-0x2e0]\n
    char v44;  // [bp-0x2d8]\n
    unsigned long long v45[3];  // [bp-0x2d0]\n
    char v46;  // [bp-0x2b8]\n
    char v47;  // [bp-0x2b0]\n
    char v48;  // [bp-0x2a8]\n
    unsigned long long v49[3];  // [bp-0x2a0]\n
    char v50;  // [bp-0x288]\n
    char v51;  // [bp-0x280]\n
    char v52;  // [bp-0x278]\n
    char v53;  // [bp-0x270]\n
    unsigned long v54;  // [bp-0x240]\n
    unsigned long long v55[3];  // [bp-0x238]\n
    char v56;  // [bp-0x230]\n
    char v57;  // [bp-0x228]\n
    unsigned long long v58[3];  // [bp-0x220]\n
    char v59;  // [bp-0x208]\n
    char v60;  // [bp-0x200]\n
    char v61;  // [bp-0x1f8]\n
    unsigned long long v62[3];  // [bp-0x1f0]\n
    unsigned long long v63[3];  // [bp-0x1d8]\n
    char v64;  // [bp-0x1c0]\n
    char v65;  // [bp-0x1b8]\n
    char v66;  // [bp-0x1b0]\n
    char v67;  // [bp-0x1a8]\n
    char v68;  // [bp-0x1a0]\n
    char v69;  // [bp-0x198]\n
    unsigned long long v70[3];  // [bp-0x190]\n
    unsigned long long v71[3];  // [bp-0x178]\n
    char v72;  // [bp-0x170]\n
    char v73;  // [bp-0x168]\n
    unsigned long long v74[3];  // [bp-0x160]\n
    unsigned long v75;  // [bp-0x148], Other Possible Types: unsigned long long\n
    char v76;  // [bp-0x140], Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v77;  // [bp-0x138], Other Possible Types: unsigned long long\n
    char v78;  // [bp-0x130]\n
    char v79;  // [bp-0x128]\n
    char v80;  // [bp-0x120]\n
    unsigned long long v81[3];  // [bp-0x118]\n
    char v82;  // [bp-0x100]\n
    char v83;  // [bp-0xf8]\n
    char v84;  // [bp-0xf0]\n
    unsigned long long v85[3];  // [bp-0xe8]\n
    char v86;  // [bp-0xd0]\n
    char v87;  // [bp-0xc8]\n
    char v88;  // [bp-0xc0]\n
    unsigned long long v89[3];  // [bp-0xb8], Other Possible Types: unsigned long, unsigned long long\n
    char v90;  // [bp-0xb0], Other Possible Types: unsigned long long\n
    unsigned long long v91;  // [bp-0xa8], Other Possible Types: char\n
    char v92;  // [bp-0xa0]\n
    char v93;  // [bp-0x70]\n
    struct struct_1 **v94;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v95;  // [bp-0x38]\n
    char v96;  // [bp-0x30]\n
    char v97;  // [bp-0x28]\n
    unsigned int v98;  // [bp-0x1c]\n
    unsigned long long v99[3];  // [bp-0x18]\n
    int v101;  // xmm0lq, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v102;  // rcx\n
    unsigned long long v103[3];  // rcx\n
    unsigned long v104;  // rdx\n
    unsigned long long v105;  // rcx\n
    struct_0 *v106;  // rax\n
    unsigned long long v107;  // rdx\n
    unsigned long v108;  // rcx\n
    unsigned long long v109;  // rcx\n
    unsigned long long v110[3];  // rax\n
    unsigned long v111;  // rcx\n
    unsigned long long v112;  // rdx, Other Possible Types: unsigned long\n
    unsigned long long v113;  // rcx\n
    unsigned long long v114;  // rcx\n
    unsigned long long v115[3];  // rax\n
    unsigned long long v116;  // rcx\n
    unsigned long long v117[3];  // rax\n
    unsigned long v118;  // rcx\n
    unsigned long long v119[3];  // rax\n
    unsigned long long v120;  // rcx\n
    unsigned long long v121[3];  // rcx\n
    unsigned long v122;  // rdx\n
    unsigned long v123;  // rcx\n
    unsigned long long v124;  // rcx\n
    unsigned long long v125;  // rdx\n
    unsigned long long v126;  // rcx\n
    unsigned long long v127;  // rdx\n
    unsigned long long v128;  // rcx\n
    unsigned long long v129[3];  // rax\n
    unsigned long v130;  // rcx\n
    unsigned long long v131[3];  // rax\n
    unsigned long v132;  // rcx\n
    unsigned long long v133;  // rcx\n
    unsigned long long v134;  // rdx\n
    unsigned long long v135;  // rcx\n
    unsigned long long v136;  // rcx\n
    unsigned long v137;  // rdx\n
    unsigned long long v138;  // rcx\n
    unsigned long v139;  // rcx\n
    unsigned long long v140;  // rdx\n
    unsigned long long v141;  // rcx\n
    unsigned long long v142;  // rdx\n
    unsigned long long v143;  // rcx\n
    unsigned long long v144[3];  // rax\n
    unsigned long v145;  // rcx\n
    unsigned long long v146[3];  // rax\n
    unsigned long v147;  // rcx\n
    unsigned long long v148;  // rdx\n
    unsigned long long v149;  // rcx\n
    unsigned long long v150;  // rdx\n
    unsigned long long v151;  // rcx\n
\n
    v99[0] = a2;\n
    v98 = a3;\n
    cgc_make_vector(v89);\n
    if (v98 > 3)\n
    {\n
        a0[0] = v89[0];\n
        a0[1] = *(&v90);\n
        a0[2] = *(&v91);\n
        return a0;\n
    }\n
    if (cgc_intersect(a1, v99, &v96, &v97))\n
    {\n
        v2[0] = v99;\n
        cgc_vector_trunc(&v78);\n
        v101 = *(&v97);\n
        v102 = *(&v79);\n
        cgc_vector_scale(v81, a1, a2, v102, a4, a5, *(&v78), v102, *(&v80));\n
        cgc_vector_trunc(&v82);\n
        v103 = v2;\n
        v0 = v103[0];\n
        v104 = v103[1];\n
        *(&v1) = v103[2];\n
        v105 = *(&v83);\n
        cgc_vector_add(v85, a1, v104, v105, a4, a5, v0, v104, *(&v1), *(&v82), v105, *(&v84));\n
        cgc_vector_trunc(&v86);\n
        if (*((*(&v96) + 8)))\n
        {\n
            v110 = *(&v96) + 88;\n
            v111 = v110[1];\n
            cgc_vector_norm(v70, a1, v104, v111, a4, a5, v110[0], v111, v110[2]);\n
        }\n
        else\n
        {\n
            v106 = *(&v96) + 16;\n
            v107 = *(&v87);\n
            v108 = v106->field_8;\n
            cgc_vector_sub(v71, a1, v107, v108, a4, a5, *(&v86), v107, *(&v88), v106->field_0, v108, *(&v106->field_10));\n
            v109 = *(&v72);\n
            cgc_vector_norm(v74, a1, v107, v109, a4, a5, v71[0], v109, *(&v73));\n
        }\n
        cgc_vector_trunc(&v75);\n
        cgc_vector_trunc(&v67);\n
        v112 = *(&v76);\n
        v113 = *(&v68);\n
        cgc_vector_dot(a0, a1, v112, v113, a4, a5, v75, v112, v77, *(&v67), v113, *(&v69));\n
        if ((((CmpF(v101, 0) & 69) | ((CmpF(v101, 0) & 69) >> 6)) & 1) != 1)\n
        {\n
            v101 = 0xbff0000000000000;\n
            v114 = *(&v76);\n
            cgc_vector_scale(v63, a1, v112, v114, a4, a5, v75, v114, v77);\n
            cgc_vector_trunc(&v64);\n
            v75 = *(&v64);\n
            v76 = *(&v65);\n
            v77 = *(&v66);\n
        }\n
        v115 = *(&v96) + 64;\n
        v116 = v115[1];\n
        cgc_vector_mag_sqr(a0, a1, v112, v116, a4, a5, v115[0], v116, v115[2]);\n
        if ((((CmpF(v101, 4457293557087583675) & 69) | ((CmpF(v101, 4457293557087583675) & 69) >> 6)) & 1) != 1)\n
        {\n
            v117 = *(&v96) + 64;\n
            v118 = v117[1];\n
            cgc_vector_norm(v62, a1, v112, v118, a4, a5, v117[0], v118, v117[2]);\n
            cgc_vector_trunc(a0);\n
            return a0;\n
        }\n
        else if (!*((*(&v96) + 12)))\n
        {\n
            for (v94 = &a1->field_48->field_0; v94; v94 = *(v94))\n
            {\n
                v119 = v94 + 64;\n
                v120 = v119[1];\n
                cgc_vector_mag_sqr(a0, a1, v112, v120, a4, a5, v119[0], v120, v119[2]);\n
                if ((((CmpF(v101, 4457293557087583675) & 69) | ((CmpF(v101, 4457293557087583675) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v121 = v94 + 16;\n
                    v0 = v121[0];\n
                    v122 = v121[1];\n
                    *(&v1) = v121[2];\n
                    v123 = v76;\n
                    cgc_vector_sub(v55, a1, v122, v123, a4, a5, v0, v122, *(&v1), v75, v123, v77);\n
                    v124 = *(&v56);\n
                    cgc_vector_norm(v58, a1, v122, v124, a4, a5, v55[0], v124, *(&v57));\n
                    cgc_vector_trunc(&v59);\n
                    v125 = v76;\n
                    v126 = *(&v60);\n
                    cgc_vector_dot(a0, a1, v125, v126, a4, a5, v75, v125, v77, *(&v59), v126, *(&v61));\n
                    v54 = v101;\n
                    v127 = *(&v87);\n
                    v128 = *(&v60);\n
                    cgc_make_ray(&v53, a1, v127, v128, a4, a5, *(&v86), v127, *(&v88), *(&v59), v128, *(&v61));\n
                    memcpy(&v93, &v53, 48);\n
                    if (cgc_intersect(a1, &v93, &v95, &v97))\n
                    {\n
                        tmp_7 = DivV(tmp_9, tmp_8);\n
                        v101 = tmp_7;\n
                        v54 = v101;\n
                    }\n
                    v129 = *(&v96) + 64;\n
                    v130 = v129[1];\n
                    cgc_vector_norm(v45, a1, 48, v130, a4, a5, v129[0], v130, v129[2]);\n
                    cgc_vector_trunc(&v46);\n
                    v131 = *(&v96) + 40;\n
                    v132 = v131[1];\n
                    cgc_vector_norm(v34, a1, 48, v132, a4, a5, v131[0], v132, v131[2]);\n
                    cgc_vector_trunc(&v35);\n
                    *(&v101) = v54;\n
                    v133 = *(&v36);\n
                    cgc_vector_scale(v38, a1, 48, v133, a4, a5, *(&v35), v133, *(&v37));\n
                    cgc_vector_trunc(&v39);\n
                    v134 = v90;\n
                    v135 = *(&v40);\n
                    cgc_vector_add(v42, a1, v134, v135, a4, a5, v89[0], v134, *(&v91), *(&v39), v135, *(&v41));\n
                    v112 = *(&v47);\n
                    v136 = *(&v43);\n
                    cgc_vector_add(v49, a1, v112, v136, a4, a5, *(&v46), v112, *(&v48), v42[0], v136, *(&v44));\n
                    cgc_vector_trunc(&v50);\n
                    v89 = *(&v50);\n
                    v90 = *(&v51);\n
                    v91 = *(&v52);\n
                }\n
            }\n
        }\n
        else if (*((*(&v96) + 12)) == 1)\n
        {\n
            cgc_vector_trunc(&v26);\n
            cgc_vector_trunc(&v19);\n
            v137 = v76;\n
            v138 = *(&v20);\n
            cgc_vector_dot(a0, a1, v137, v138, a4, a5, v75, v137, v77, *(&v19), v138, *(&v21));\n
            v139 = v76;\n
            cgc_vector_scale(v22, a1, v137, v139, a4, a5, v75, v139, v77);\n
            cgc_vector_trunc(&v23);\n
            v140 = *(&v27);\n
            v141 = *(&v24);\n
            cgc_vector_sub(v29, a1, v140, v141, a4, a5, *(&v26), v140, *(&v28), *(&v23), v141, *(&v25));\n
            cgc_vector_trunc(&v30);\n
            v142 = *(&v87);\n
            v143 = *(&v31);\n
            cgc_make_ray(&v33, a1, v142, v143, a4, a5, *(&v86), v142, *(&v88), *(&v30), v143, *(&v32));\n
            memcpy(&v92, &v33, 48);\n
            v144 = *(&v96) + 64;\n
            v145 = v144[1];\n
            cgc_vector_norm(v14, a1, 48, v145, a4, a5, v144[0], v145, v144[2]);\n
            cgc_vector_trunc(&v15);\n
            v146 = *(&v96) + 40;\n
            v147 = v146[1];\n
            cgc_vector_norm(v7, a1, 48, v147, a4, a5, v146[0], v147, v146[2]);\n
            cgc_vector_trunc(&v8);\n
            cgc_radiance(&v3, a1, &v92, v98 + 1, a4, a5);\n
            cgc_vector_trunc(&v4);\n
            v148 = *(&v9);\n
            v149 = *(&v5);\n
            cgc_vector_mul(v11, a1, v148, v149, a4, a5, *(&v8), v148, *(&v10), *(&v4), v149, *(&v6));\n
            v150 = *(&v16);\n
            v151 = *(&v12);\n
            cgc_vector_add(v18, a1, v150, v151, a4, a5, *(&v15), v150, *(&v17), v11[0], v151, *(&v13));\n
            cgc_vector_trunc(a0);\n
            return a0;\n
        }\n
    }\n
    a0[0] = v89;\n
    a0[1] = v90;\n
    a0[2] = v91;\n
    return a0;\n
}\n
", "4223493:sub_407205": null, "4223504:cgc_intersect": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    char padding_c[76];\n
    unsigned long long field_58;\n
    char padding_60[8];\n
    struct struct_0 *field_68;\n
    unsigned long long field_70;\n
    struct struct_0 *field_78;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[72];\n
    struct struct_1 *field_48;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc_intersect(struct_2 *a0, unsigned long long a1, unsigned long long *a2, unsigned long long *a3)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    struct_1 *v1;  // [bp-0x60], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x58], Other Possible Types: unsigned long long\n
    unsigned long v3;  // [bp-0x50]\n
    struct_1 *v4;  // [bp-0x48]\n
    struct_1 *v5;  // [bp-0x40]\n
    struct_1 *v6;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned long long *v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned long long v10;  // xmm0lq, Other Possible Types: unsigned long\n
    struct_1 *v11;  // rcx\n
    struct_1 *v12;  // rcx\n
    unsigned long long v13;  // xmm1lq\n
    unsigned long long v14;  // xmm1lq\n
\n
    v7 = a3;\n
    v10 = 6103021453049119613;\n
    v2 = 6103021453049119613;\n
    v1 = 0;\n
    for (v6 = a0->field_48; v6; v6 = *(v6))\n
    {\n
        v0 = v6->field_8;\n
        if (!v0)\n
        {\n
            v5 = v6;\n
            v11 = v5;\n
            v5->field_68(v5, a1, v11->field_58, v11);\n
            v3 = v10;\n
            v10 = v3;\n
            if ((((CmpF(v10, 4457293557087583675) & 69) | ((CmpF(v10, 4457293557087583675) & 69) >> 6)) & 1) != 1)\n
            {\n
                v13 = v3;\n
                v10 = v2;\n
                if ((((CmpF(v10, v14) & 69) | ((CmpF(v10, v14) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v10 = v3;\n
                    v2 = v10;\n
                    v1 = v6;\n
                }\n
            }\n
        }\n
        else if (v0 == 1)\n
        {\n
            v4 = v6;\n
            v12 = v4;\n
            v4->field_78(v4, a1, v12->field_70, v12);\n
            v3 = v10;\n
            v10 = v3;\n
            if ((((CmpF(v10, 4457293557087583675) & 69) | ((CmpF(v10, 4457293557087583675) & 69) >> 6)) & 1) != 1)\n
            {\n
                v14 = v3;\n
                v10 = v2;\n
                if ((((CmpF(v10, v14) & 69) | ((CmpF(v10, v14) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v10 = v3;\n
                    v2 = v10;\n
                    v1 = v6;\n
                }\n
            }\n
        }\n
    }\n
    if (!v1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    *(a2) = v1;\n
    *(v7) = v2;\n
    v8 = 1;\n
    return v8;\n
}\n
", "4223911:sub_4073a7": null, "4223920:cgc_plane_init": "long long cgc_plane_init(unsigned long long a0[16], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7)\n
{\n
    unsigned long v0;  // [bp+0x8]\n
\n
    a0[14] = 0;\n
    a0[11] = v0;\n
    a0[12] = a6;\n
    a0[13] = a7;\n
    a0[15] = cgc_plane_intersect;\n
    return a0;\n
}\n
", "4223988:sub_4073f4": null, "4224000:cgc_plane_intersect": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long cgc_plane_intersect(unsigned long long a0, struct_0 *a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    unsigned long long v0;  // [bp-0x148], Other Possible Types: unsigned long\n
    int tmp_6;  // tmp #6\n
    int tmp_8;  // tmp #8\n
    int tmp_7;  // tmp #7\n
    unsigned long long v1;  // [bp-0x140]\n
    unsigned long long v2;  // [bp-0x138], Other Possible Types: unsigned int\n
    unsigned long long v3;  // [bp-0x130]\n
    unsigned long long v4;  // [bp-0x128]\n
    unsigned long v5;  // [bp-0x118]\n
    unsigned long long v6[3];  // [bp-0x108]\n
    char v7;  // [bp-0xf0]\n
    char v8;  // [bp-0xe8]\n
    char v9;  // [bp-0xe0]\n
    char v10;  // [bp-0xd8]\n
    char v11;  // [bp-0xd0]\n
    char v12;  // [bp-0xc8]\n
    unsigned long long v13[3];  // [bp-0xc0]\n
    char v14;  // [bp-0xa8]\n
    char v15;  // [bp-0xa0]\n
    char v16;  // [bp-0x98]\n
    unsigned long v17;  // [bp-0x90]\n
    unsigned long long v18[3];  // [bp-0x88]\n
    char v19;  // [bp-0x70]\n
    char v20;  // [bp-0x68]\n
    char v21;  // [bp-0x60]\n
    char v22;  // [bp-0x58]\n
    char v23;  // [bp-0x50]\n
    char v24;  // [bp-0x48]\n
    unsigned long long v25[3];  // [bp-0x40]\n
    char v26;  // [bp-0x38]\n
    char v27;  // [bp-0x30]\n
    unsigned long v28;  // [bp-0x28]\n
    void* v29;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v31;  // rdx\n
    unsigned long long v32;  // rcx\n
    unsigned long long v33[3];  // rcx\n
    unsigned long v34;  // rdx\n
    unsigned long long v35;  // rcx\n
    unsigned long long v36[3];  // rax\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // xmm0lq\n
    unsigned long long v40[3];  // rax\n
    unsigned long v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned long long v43;  // rcx\n
    unsigned long v44;  // rax, Other Possible Types: unsigned long long\n
\n
    v28 = a2;\n
    cgc_vector_trunc(&v22);\n
    v31 = a1->field_8;\n
    v32 = *(&v23);\n
    cgc_vector_add(v25, a1, v31, v32, a4, a5, a1->field_0, v31, *(&a1->field_10), *(&v22), v32, *(&v24));\n
    v33 = a0 + 16;\n
    v0 = v33[0];\n
    v34 = v33[1];\n
    *(&v2) = v33[2];\n
    v35 = *(&v26);\n
    cgc_vector_sub(v18, a1, v34, v35, a4, a5, v0, v34, *(&v2), v25[0], v35, *(&v27));\n
    cgc_vector_trunc(&v19);\n
    v36 = a0 + 88;\n
    v37 = v36[1];\n
    cgc_vector_norm(v13, a1, v34, v37, a4, a5, v36[0], v37, v36[2]);\n
    cgc_vector_trunc(&v14);\n
    v0 = *(&v19);\n
    v1 = *(&v20);\n
    v2 = *(&v21);\n
    v3 = *(&v14);\n
    v4 = *(&v15);\n
    cgc_vector_dot(a0, a1, v1, v4, a4, a5, v0, v1, v2, v3, v4, *(&v16));\n
    v17 = v38;\n
    v44 = cgc_fabs(a0, a1, v34, v37, a4, a5, v0, v1, v2, v3, v4);\n
    if ((((CmpF(v17, 4457293557087583675) & 69) | ((CmpF(v17, 4457293557087583675) & 69) >> 6)) & 1) == 1)\n
    {\n
        v29 = 0;\n
        return v44;\n
    }\n
    v5 = v17;\n
    cgc_vector_trunc(&v10);\n
    v40 = a0 + 88;\n
    v41 = v40[1];\n
    cgc_vector_norm(v6, a1, v34, v41, a4, a5, v40[0], v41, v40[2]);\n
    cgc_vector_trunc(&v7);\n
    v42 = *(&v11);\n
    v43 = *(&v8);\n
    v44 = cgc_vector_dot(a0, a1, v42, v43, a4, a5, *(&v10), v42, *(&v12), *(&v7), v43, *(&v9));\n
    tmp_6 = DivV(tmp_8, tmp_7);\n
    *(&v29) = tmp_6;\n
    return v44;\n
}\n
", "4224719:sub_4076cf": null, "4224720:main": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char buf;\n
extern void* cgc_stdin;\n
extern struct_0 g_409080;\n
\n
int main(unsigned long long a0, unsigned long a1, unsigned long long a2, struct_0 *a3, unsigned int a4, unsigned int a5)\n
{\n
    struct_0 *v0;  // [bp-0xf8]\n
    unsigned long long v1[6];  // [bp-0xf0]\n
    char v2;  // [bp-0xc0]\n
    char v3;  // [bp-0xb8]\n
    char v4;  // [bp-0xb0]\n
    char v5;  // [bp-0xa8]\n
    char v6;  // [bp-0xa0]\n
    char v7;  // [bp-0x98]\n
    char v8;  // [bp-0x90]\n
    unsigned long long v9;  // [bp-0x88]\n
    char v10;  // [bp-0x80]\n
    struct_0 *v11;  // [bp-0x78], Other Possible Types: unsigned long\n
    unsigned long v12;  // [bp-0x70]\n
    char v13;  // [bp-0x68]\n
    struct_0 *v14;  // [bp-0x20], Other Possible Types: char, unsigned long\n
    unsigned long v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x10]\n
    unsigned int v17;  // [bp-0xc]\n
    struct_0 *v19;  // rax\n
\n
    v17 = 0;\n
    v16 = a0;\n
    v15 = a1;\n
    v11 = 0;\n
    v9 = 4808;\n
    if (cgc_allocate(a0, a1, a2) == -1)\n
    {\n
        v17 = -1;\n
        return v17;\n
    }\n
    else if (cgc_image_init(*(&v10), 40, 40) == -1)\n
    {\n
        v17 = -1;\n
        return v17;\n
    }\n
    else if (cgc_pt_init(&v13) != -1)\n
    {\n
        while (true)\n
        {\n
            cgc_printf(\"Enter 's' for sphere, 'p' for plane, 'c' for camera, 'r' for render, 'q' for quit\\n
\", a1, a2, a3, a4);\n
            v12 = cgc_fread_until(&buf, 10, 0x1000, cgc_stdin);\n
            if (v12 == -1)\n
            {\n
LABEL_4077ac:\n
            }\n
            else\n
            {\n
                if (v12 < 1)\n
                    goto LABEL_4077ac;\n
                if (buf == 113)\n
                    break;\n
                v19 = buf - 99;\n
                a3 = v19;\n
                v0 = v19;\n
                switch (v19)\n
                {\n
                case 0:\n
                    cgc_printf(\"Enter camera position as \\\"x, y, z\\\":\\n
\", 10, 0x1000, &g_409080.field_0, a4);\n
                    if (cgc_read_vector(&v6) != -1)\n
                    {\n
                        cgc_printf(\"Enter camera direction as \\\"x, y, z\\\":\\n
\", 10, 0x1000, &g_409080.field_0, a4);\n
                        if (cgc_read_vector(&v3) != -1)\n
                        {\n
                            cgc_printf(\"Enter camera fov:\\n
\", 10, 0x1000, &g_409080.field_0, a4);\n
                            if (cgc_read_double(&v2) != -1)\n
                            {\n
                                a2 = *(&v7);\n
                                a3 = *(&v4);\n
                                cgc_make_ray(v1, 10, a2, a3, a4, a5, *(&v6), a2, *(&v8), *(&v3), a3, *(&v5));\n
                                cgc_pt_setup_camera(&v13);\n
                                continue;\n
                            }\n
                        }\n
                    }\n
                case 13:\n
                    if (!v11)\n
                    {\n
                        v11 = cgc_pool_alloc(&v13);\n
                        if (v11)\n
                        {\n
                            *((v11 + 8)) = 1;\n
                            break;\n
                        }\n
                    }\n
                    if (cgc_read_plane(v11) != -1)\n
                    {\n
                        a3 = v14;\n
                        *(v11) = a3;\n
                        v14 = v11;\n
                        v11 = 0;\n
                        continue;\n
                    }\n
                case 15:\n
                    cgc_pt_render(&v13, *(&v10), 0x1000, &g_409080.field_0, a4, a5);\n
                    cgc_write_ppm(*(&v10));\n
                    cgc_pt_clear_ctx(&v13, a1, 0x1000, &g_409080.field_0, a4, a5);\n
                    continue;\n
                case 16:\n
                    if (!v11)\n
                    {\n
                        v11 = cgc_pool_alloc(&v13);\n
                        if (v11)\n
                            *((v11 + 8)) = 0;\n
                    }\n
                    if (cgc_read_sphere(v11) != -1)\n
                    {\n
                        a3 = *(&v14);\n
                        *(v11) = a3;\n
                        v14 = v11;\n
                        v11 = 0;\n
                        continue;\n
                    }\n
                default:\n
                    cgc_printf(\"No such command!\\n
\", 10, 0x1000, a3, a4);\n
                    continue;\n
                }\n
                cgc_printf(\"Invalid option\\n
\", 10, 0x1000, &g_409080.field_0, a4);\n
            }\n
        }\n
        cgc_pt_destroy(&v13);\n
        cgc_image_destroy(*(&v10));\n
        cgc_deallocate(a0, 10);\n
        v17 = 0;\n
        return v17;\n
    }\n
    else\n
    {\n
        v17 = -1;\n
        return v17;\n
    }\n
}\n
", "4225595:sub_407a3b": null, "4225600:cgc_read_sphere": "extern char buf;\n
extern void* cgc_stdin;\n
\n
long long cgc_read_sphere(unsigned int a0[25], unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // rcx\n
\n
    cgc_printf(\"Enter 'd' for diffuse, 's' for specular:\\n
\", a1, a2, a3, a4);\n
    if (cgc_fread_until(&buf, 10, 0x1000, cgc_stdin) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    if (buf != 100 && buf != 115)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    v3 = (buf == 100 ? 1 : 0);\n
    a0[3] = v3;\n
    cgc_printf(\"Enter radius:\\n
\", 10, buf, v3, a4);\n
    if (cgc_read_double(&v0) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    a0[24] = *(&v0);\n
    cgc_printf(\"Enter position as \\\"x, y, z\\\":\\n
\", 10, buf, v3, a4);\n
    if (cgc_read_vector(&a0[4]) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    cgc_printf(\"Enter color as \\\"r, g, b\\\":\\n
\", 10, buf, v3, a4);\n
    if (cgc_read_vector(&a0[10]) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    cgc_printf(\"Enter emission as \\\"r, g, b\\\":\\n
\", 10, buf, v3, a4);\n
    if (cgc_read_vector(&a0[16]) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    cgc_sphere_init(a0);\n
    v1 = 0;\n
    return v1;\n
}\n
", "4226003:sub_407bd3": null, "4226016:cgc_read_plane": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
extern char buf;\n
extern void* cgc_stdin;\n
\n
long long cgc_read_plane(struct_0 *a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // rcx\n
    struct_1 *v3;  // rax\n
    unsigned long v4;  // rcx\n
\n
    cgc_printf(\"Enter 'd' for diffuse, 's' for specular:\\n
\", a1, a2, a3, a4);\n
    if (cgc_fread_until(&buf, 10, 0x1000, cgc_stdin) == -1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    if (buf != 100 && buf != 115)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v2 = (buf == 100 ? 1 : 0);\n
    a0->field_c = v2;\n
    cgc_printf(\"Enter normal as \\\"x, y, z\\\":\\n
\", 10, buf, v2, a4);\n
    if (cgc_read_vector(&a0[5].padding_0[8]) == -1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    cgc_printf(\"Enter position as \\\"x, y, z\\\":\\n
\", 10, buf, v2, a4);\n
    if (cgc_read_vector(a0 + 1) == -1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    cgc_printf(\"Enter color as \\\"r, g, b\\\":\\n
\", 10, buf, v2, a4);\n
    if (cgc_read_vector(&a0[2].padding_0[8]) == -1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    cgc_printf(\"Enter emission as \\\"r, g, b\\\":\\n
\", 10, buf, v2, a4);\n
    if (cgc_read_vector(a0 + 4) == -1)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v3 = &a0[5].padding_0[8];\n
    v4 = v3->field_8;\n
    cgc_plane_init(a0, 10, buf, v4, a4, a5, v3->field_0, v4, *(&v3->field_10));\n
    v0 = 0;\n
    return v0;\n
}\n
", "4226425:sub_407d79": null, "4226432:cgc_read_vector": "extern char buf;\n
extern void* cgc_stdin;\n
\n
long long cgc_read_vector(unsigned long long a0[3])\n
{\n
    unsigned long long v0[3];  // [bp-0x50]\n
    char v1;  // [bp-0x48]\n
    char v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x38]\n
    unsigned long long v4;  // [bp-0x30]\n
    unsigned long long v5;  // [bp-0x28]\n
    unsigned long long v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    if (cgc_fread_until(&buf, 10, 0x1000, cgc_stdin) == -1)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    v3 = cgc_strtok(&buf, \", \");\n
    if (v3 && cgc_strlen(v3))\n
    {\n
        if (cgc_strtod(v3, &v6) != -1)\n
        {\n
            v3 = cgc_strtok(NULL, \", \");\n
            if (v3 && cgc_strlen(v3))\n
            {\n
                if (cgc_strtod(v3, &v5) != -1)\n
                {\n
                    v3 = cgc_strtok(NULL, \", \");\n
                    if (v3 && cgc_strlen(v3))\n
                    {\n
                        if (cgc_strtod(v3, &v4) != -1)\n
                        {\n
                            cgc_make_vector(v0);\n
                            a0[0] = v0[0];\n
                            a0[1] = *(&v1);\n
                            a0[2] = *(&v2);\n
                            v7 = 0;\n
                            return v7;\n
                        }\n
                        v7 = -1;\n
                        return v7;\n
                    }\n
                    v7 = -1;\n
                    return v7;\n
                }\n
                else\n
                {\n
                    v7 = -1;\n
                    return v7;\n
                }\n
            }\n
            v7 = -1;\n
            return v7;\n
        }\n
        else\n
        {\n
            v7 = -1;\n
            return v7;\n
        }\n
    }\n
    v7 = -1;\n
    return v7;\n
}\n
", "4226864:cgc_read_double": "extern char buf;\n
extern void* cgc_stdin;\n
\n
long long cgc_read_double(unsigned long long *a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    if (cgc_fread_until(&buf, 10, 0x1000, cgc_stdin) == -1)\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
    else if (cgc_strtod(&buf, &v0) != -1)\n
    {\n
        *(a0) = v0;\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
}\n
", "4226997:sub_407fb5": null, "4227008:cgc_write_ppm": "long long cgc_write_ppm(unsigned int a0[2], unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    cgc_printf(\"%d %d\\n
\", a0[0], a0[1], a3, a4);\n
    for (v0 = 0; v0 < a0[1] * a0[0]; v0 += 1)\n
    {\n
        cgc_printf(\"%d %d %d \", *(8 + &a0[0] + 3 * v0), *(9 + &a0[0] + 3 * v0), *(10 + &a0[0] + 3 * v0), a4);\n
    }\n
    return cgc_printf(\"\\n
%x\\n
\", cgc_calculate_csum(a0), a0, a0[1] * a0[0], a4);\n
}\n
", "4227203:sub_408083": null, "4227216:cgc_calculate_csum": "long long cgc_calculate_csum(unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
\n
    v1 = 0;\n
    for (v0 = 0; v0 < 0x400; v0 += 1)\n
    {\n
        v1 = cgc_get_flag_byte(v0) ^ v1;\n
    }\n
    for (v0 = 0; v0 < a0[1] * a0[0]; v0 += 1)\n
    {\n
        v1 = *(8 + &a0[0] + 3 * v0) ^ *(9 + &a0[0] + 3 * v0) ^ *(10 + &a0[0] + 3 * v0) ^ v1;\n
    }\n
    return v1;\n
}\n
", "4227418:sub_40815a": null, "4227424:cgc_shape_init": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
    unsigned long long field_28;\n
    unsigned long long field_30;\n
    unsigned long long field_38;\n
    unsigned long long field_40;\n
    unsigned long long field_48;\n
    unsigned long long field_50;\n
} struct_0;\n
\n
long long cgc_shape_init(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6, unsigned long a6, unsigned long a7, char a8, unsigned long a9, unsigned long a10, char a11, unsigned long a12, unsigned long a13)\n
{\n
    unsigned long v0;  // [bp+0x8]\n
\n
    a0->field_0 = 0;\n
    a0->field_8 = a1;\n
    a0->field_c = a2;\n
    a0->field_10 = v0;\n
    a0->field_18 = a6;\n
    a0->field_20 = a7;\n
    a0->field_28 = *(&a8);\n
    a0->field_30 = a9;\n
    a0->field_38 = a10;\n
    a0->field_40 = *(&a11);\n
    a0->field_48 = a12;\n
    a0->field_50 = a13;\n
    return a0;\n
}\n
", "4227575:sub_4081f7": null, "4227584:cgc_sphere_init": "typedef struct struct_0 {\n
    char padding_0[88];\n
    unsigned long long field_58;\n
    unsigned int field_60;\n
    char padding_64[4];\n
    unsigned long long field_68;\n
} struct_0;\n
\n
long long cgc_sphere_init(struct_0 *a0)\n
{\n
    unsigned long v1;  // xmm0lq\n
\n
    a0->field_58 = 0;\n
    cgc_fabs();\n
    a0->field_60 = v1;\n
    a0->field_68 = cgc_sphere_intersect;\n
    return a0;\n
}\n
", "4227657:sub_408249": null, "4227664:cgc_sphere_intersect": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
long long cgc_sphere_intersect(unsigned long long a0, struct_0 *a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    int tmp_33;  // tmp #33\n
    int tmp_35;  // tmp #35\n
    int tmp_34;  // tmp #34\n
    unsigned long v0;  // [bp-0x90]\n
    int tmp_20;  // tmp #20\n
    int tmp_21;  // tmp #21\n
    int tmp_18;  // tmp #18\n
    unsigned long v1;  // [bp-0x88]\n
    char v2;  // [bp-0x80]\n
    char v3;  // [bp-0x78]\n
    char v4;  // [bp-0x70]\n
    unsigned long long v5[3];  // [bp-0x60]\n
    char v6;  // [bp-0x48]\n
    char v7;  // [bp-0x40]\n
    char v8;  // [bp-0x38]\n
    unsigned long v9;  // [bp-0x30]\n
    unsigned long v10;  // [bp-0x28]\n
    void* v11;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v13;  // rax\n
    unsigned long v14;  // rdx\n
    unsigned long v15;  // rcx\n
    unsigned long long v16;  // rdx\n
    unsigned long long v17;  // rcx\n
    unsigned long long v18;  // rcx\n
    unsigned long v21;  // rax, Other Possible Types: unsigned long long\n
\n
    v10 = a2;\n
    v13 = a0 + 16;\n
    v14 = a1->field_8;\n
    v15 = v13->field_8;\n
    cgc_vector_sub(v5, a1, v14, v15, a4, a5, a1->field_0, v14, *(&a1->field_10), v13->field_0, v15, *(&v13->field_10));\n
    cgc_vector_trunc(&v6);\n
    cgc_vector_trunc(&v2);\n
    v16 = *(&v3);\n
    v17 = *(&v7);\n
    cgc_vector_dot(a0, a1, v16, v17, a4, a5, *(&v2), v16, *(&v4), *(&v6), v17, *(&v8));\n
    v18 = *(&v7);\n
    cgc_vector_dot(a0, a1, v16, v18, a4, a5, *(&v6), *(&v7), *(&v8), *(&v6), v18, *(&v8));\n
    tmp_33 = SubV(tmp_35, tmp_34);\n
    *(&v1) = tmp_33;\n
    v21 = v1 ^ 0x8000000000000000;\n
    v0 = (0 CONCAT v1) * (0 CONCAT v1) + (0 CONCAT v21);\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v11 = 0;\n
        return v1 ^ 0x8000000000000000;\n
    }\n
    cgc_sqrt();\n
    v0 = v0;\n
    v21 = v1 ^ 0x8000000000000000;\n
    s_30 =L Conv(128->64, ((0x0<64> CONCAT rax<8>) + Conv(64->128, Load(addr=stack_base-144, size=8, endness=Iend_LE))))<8>\n
    if ((((CmpF(v9, 4457293557087583675) & 69) | ((CmpF(v9, 4457293557087583675) & 69) >> 6)) & 1) != 1)\n
    {\n
        v11 = v9;\n
        return v1 ^ 0x8000000000000000;\n
    }\n
    v21 = v9 ^ 0x8000000000000000;\n
    tmp_20 = SubV(tmp_21, tmp_18);\n
    *(&v9) = tmp_20;\n
    if ((((CmpF(v9, 4457293557087583675) & 69) | ((CmpF(v9, 4457293557087583675) & 69) >> 6)) & 1) == 1)\n
    {\n
        v11 = 0;\n
        return v21;\n
    }\n
    v11 = v9;\n
    return v21;\n
}\n
", "4228274:sub_4084b2": null, "4228288:cgc_float_trunc": "long long cgc_float_trunc()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // xmm0lq\n
\n
    v0 = v2;\n
    v0 &= -0x10000;\n
    return v0;\n
}\n
", "4228328:sub_4084e8": null, "4228336:cgc_vector_trunc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_vector_trunc(unsigned long long a0[3], unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char a6)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp+0x8]\n
\n
    v0 = &a6;\n
    cgc_float_trunc();\n
    v2 = v3;\n
    cgc_float_trunc();\n
    v1 = v0->field_8;\n
    cgc_float_trunc();\n
    cgc_make_vector(a0);\n
    return a0;\n
}\n
", "4228440:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_fabs": null, "5242896:cgc_pow": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:memcpy": null, "5242928:cgc_deallocate": null, "5242936:cgc_sqrt": null, "5242944:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}