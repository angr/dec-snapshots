{"4206592:_init": "extern struct_0 *g_409268;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409268;\n
    if (g_409268)\n
        v1 = g_409268();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_409280;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409280;\n
    goto *(4231816);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:cgc_atan2": "// attributes: PLT stub\n
int cgc_atan2()\n
{\n
    ::libc.so.0::cgc_atan2();\n
    return;\n
}\n
", "4206672:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4206688:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4206704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206720:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206736:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206752:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206768:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4206784:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4206800:cgc_sin": "// attributes: PLT stub\n
int cgc_sin()\n
{\n
    ::libc.so.0::cgc_sin();\n
    return;\n
}\n
", "4206816:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206832:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4206848:cgc_cos": "// attributes: PLT stub\n
int cgc_cos()\n
{\n
    ::libc.so.0::cgc_cos();\n
    return;\n
}\n
", "4206864:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4231760);\n
}\n
", "4206880:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206917:sub_403145": null, "4206918:sub_403146": null, "4206928:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409260;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206969:sub_403179": null, "4206976:register_tm_clones": "extern unsigned long long g_409270;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4207033:sub_4031b9": null, "4207040:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409250;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409250)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207093:sub_4031f5": null, "4207097:sub_4031f9": null, "4207104:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207113:sub_403209": null, "4207120:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4207187:sub_403253": null, "4207200:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4207970:sub_403562": null, "4207984:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4208179:sub_403633": null, "4208192:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 *[2], unsigned long, struct struct_0 **\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4208732:sub_40385c": null, "4208736:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4208884:sub_4038f4": null, "4208896:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4209020:sub_40397c": null, "4209024:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4209152:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4209214:sub_403a3e": null, "4209216:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v8 = v4;\n
        v4 = (v8 >> 31 CONCAT v8) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v11 = v0;\n
        v0 = v11 - 1;\n
        if (v11 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209441:sub_403b21": null, "4209456:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v4 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        v3->field_0 = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209663:sub_403bff": null, "4209664:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_403f01;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_403f01:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4210449:sub_403f11": null, "4210464:cgc_vprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vprintf(char *a0, struct_1 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_0 **v2;  // [bp-0x150]\n
    struct_1 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned long long *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_3 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_3 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_1 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_1 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_404926:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; v27->field_0; v27 += 1)\n
                {\n
                    cgc_putc(v27->field_0);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; *(v25); v25 += 1)\n
                {\n
                    cgc_putc(*(v25));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    cgc_putc(*(v23));\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_404926;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_4047c3;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_4047c3:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (!v33)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4213053:sub_40493d": null, "4213056:cgc_vsprintf": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_1 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_0 **v2;  // [bp-0x160]\n
    struct_1 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_1 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0]\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_3 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_3 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_3 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_1 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_1 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v45;  // rcx\n
    struct_1 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_1 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_1 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_1 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_1 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_1 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_0 **v62;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v63;  // rcx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_40542b:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v44 = v45->field_8;\n
                    v45->field_8 = v44 + 8;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                }\n
                v18 = v44;\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    a0[v37] = *(v27);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; v25->field_0; v25 += 1)\n
                {\n
                    a0[v37] = v25->field_0;\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    a0[v37] = *(v23);\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_40542b;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v63 = v3;\n
                v62 = v63->field_8;\n
                v63->field_8 = v62 + 8;\n
            }\n
            else\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
            }\n
            v2 = v62;\n
            v22 = &*(v2)->field_0;\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_405297;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_405297:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4215874:sub_405442": null, "4215888:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4216063:sub_4054ff": null, "4216064:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    a0[v13] = 0;\n
    return v13;\n
}\n
", "4216240:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4216331:sub_40560b": null, "4216336:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4216387:sub_405643": null, "4216400:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4216428:sub_40566c": null, "4216432:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4216484:sub_4056a4": null, "4216496:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = a0 + 32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4216551:sub_4056e7": null, "4216560:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = a0 + -32;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4216615:sub_405727": null, "4216624:cgc_strcmp": "long long cgc_strcmp(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[a0] && !v0[a1])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!v0[a1])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) < *((a1 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (*((a0 + v0)) <= *((a1 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4216879:sub_40582f": null, "4216880:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4216983:sub_405897": null, "4216992:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4217113:sub_405919": null, "4217120:cgc_flush_input": "long long cgc_flush_input(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x94]\n
    char v3;  // [bp-0x90]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // r8\n
\n
    while (true)\n
    {\n
        cgc_memset(&v3, 0, 128);\n
        v6 = a0 >> 6;\n
        *(&(&v3)[8 * v6]) = 1 << (a0 & 63 & 31) | *(&(&v3)[8 * v6]);\n
        v0 = 0;\n
        v1 = 10;\n
        v2 = cgc_fdwait(a0, 0, 128, v7, v8);\n
        if (v2)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if ((*(&(&v3)[8 * (a0 >> 6)]) & 1 << (a0 & 63 & 31)))\n
        {\n
            cgc_receive(a0, 0, 128, v7);\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4217391:sub_405a2f": null, "4217392:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    if (a2 >= 4)\n
    {\n
        for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v1 + 3 < a2; v1 += 4)\n
        {\n
            *((a0 + v1)) = v0;\n
        }\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        *((a0 + v1)) = a1;\n
    }\n
    return a0;\n
}\n
", "4217576:sub_405ae8": null, "4217584:cgc_getline": "long long cgc_getline(char *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = cgc_receive_until(a0, 10, a1);\n
    if (v0 != a1)\n
    {\n
        a0[v0] = 0;\n
        return v0;\n
    }\n
    a0[1 + a1] = 0;\n
    return v0;\n
}\n
", "4217678:sub_405b4e": null, "4217680:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = 0; v2 < a2; v2 += 1)\n
    {\n
        *((a0 + v2)) = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v0 == a1)\n
                break;\n
            *((a0 + v2)) = v0;\n
        }\n
    }\n
    if (v2 == a2)\n
        cgc_flush_input(0);\n
    return v2;\n
}\n
", "4217878:sub_405c16": null, "4217888:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    if (a2 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a2; v0 += 4)\n
        {\n
            *(&v0[a0]) = *(&v0[a1]);\n
        }\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return a0;\n
}\n
", "4218054:sub_405cc6": null, "4218064:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = 0;\n
    v2 = 1;\n
    for (v0 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    for (v1 = 0; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 45)\n
        {\n
            if (!v1)\n
            {\n
                v2 = -1;\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v4) != 43)\n
            {\n
                if (!cgc_isdigit(*(v4)))\n
                    break;\n
                if (v1 && v1 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v1 = 1;\n
                v3 = v3 * 10 + *(v4) - 48;\n
                v0 += 1;\n
                if (v0 == 9)\n
                    break;\n
            }\n
            else if (!v1)\n
            {\n
                v1 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v3 * v2;\n
    return v5;\n
}\n
", "4218456:sub_405e58": null, "4218464:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a0]; v0 += 1);\n
    return v0;\n
}\n
", "4218524:sub_405e9c": null, "4218528:cgc_abs": "long long cgc_abs(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 < 0)\n
    {\n
        v0 = -(a0);\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4218569:sub_405ec9": null, "4218576:_Z13CommReadBytesPhj": "long long CommReadBytes(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    if (!a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1;\n
    for (v1 = 0; v2 > 0; v2 -= *(&v0))\n
    {\n
        if (cgc_receive(a0, a1, v5, v6))\n
            cgc__terminate(a0);\n
        if (!*(&v0))\n
            cgc__terminate(a0);\n
        v1 += *(&v0);\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4218749:sub_405f7d": null, "4218752:_Z13CommSendBytesPhj": "long long CommSendBytes(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
\n
    if (!a0)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = a1;\n
    for (v1 = 0; v2 > 0; v2 -= *(&v0))\n
    {\n
        if (cgc_transmit(a0, a1, v5, v6))\n
            cgc__terminate(a0);\n
        if (!*(&v0))\n
            cgc__terminate(a0);\n
        v1 += *(&v0);\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4218928:_ZN14CGeofencePointC2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long CGeofencePoint::__base_ctor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
\n
    v0 = 0;\n
    CGPSCoordinates::__ctor__(a0, 0, 0, 0, 0, 0);\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4218992:_ZN14CGeofencePointC2ER15CGPSCoordinatesj": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long CGeofencePoint::__base_ctor__(struct_0 *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    a0->field_0 = *(a1);\n
    a0->field_8 = a2;\n
    return a0;\n
}\n
", "4219029:sub_406095": null, "4219040:_ZN14CGeofencePointD2Ev": "long long CGeofencePoint::__base_dtor__(unsigned long long a0)\n
{\n
    return CGPSCoordinates::__dtor__(a0);\n
}\n
", "4219067:sub_4060bb": null, "4219072:_ZN15CGPSCoordinatesC2Ev": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
} struct_0;\n
\n
long long CGPSCoordinates::__base_ctor__(struct_0 *a0)\n
{\n
    a0->field_0 = 0;\n
    a0->field_2 = 0;\n
    a0->field_3 = 0;\n
    a0->field_4 = 0;\n
    a0->field_6 = 0;\n
    a0->field_7 = 0;\n
    return a0;\n
}\n
", "4219113:sub_4060e9": null, "4219120:_ZN15CGPSCoordinatesC1Ethhthh": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
} struct_0;\n
\n
long long CGPSCoordinates::__ctor__(struct_0 *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, char v0)\n
{\n
    a0->field_0 = a1;\n
    a0->field_2 = a2;\n
    a0->field_3 = a3;\n
    a0->field_4 = a4;\n
    a0->field_6 = a5;\n
    a0->field_7 = v0;\n
    return a0;\n
}\n
", "4219232:_ZN15CGPSCoordinatesD1Ev": "long long CGPSCoordinates::__dtor__(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    return v2;\n
}\n
", "4219242:sub_40616a": null, "4219248:_ZN15CGPSCoordinates17GetSerializedSizeEv": "long long CGPSCoordinates::GetSerializedSize(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
\n
    v0 = a0;\n
    return 6;\n
}\n
", "4219263:sub_40617f": null, "4219264:_ZN15CGPSCoordinates9SerializeEPhj": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
} struct_0;\n
\n
long long CGPSCoordinates::Serialize(struct_0 *a0, char a1[6], unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    struct_0 *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v6;  // rdi\n
\n
    v3 = a0;\n
    v0 = v3;\n
    if (!a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a2 >= CGPSCoordinates::GetSerializedSize(v0))\n
    {\n
        v6 = v0;\n
        v2 = 0;\n
        v2 = v6->field_0 * 3600 + v6->field_2 * 60 + v6->field_3;\n
        v1 = 0;\n
        v1 = v6->field_4 * 3600 + v6->field_6 * 60 + v6->field_7;\n
        a1[0] = (v2 >> 16) & 255;\n
        a1[1] = (v2 >> 8) & 255;\n
        a1[2] = v2 & 255;\n
        a1[3] = (v1 >> 16) & 255;\n
        a1[4] = (v1 >> 8) & 255;\n
        a1[5] = v1 & 255;\n
        v4 = CGPSCoordinates::GetSerializedSize(v6);\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4219557:sub_4062a5": null, "4219568:_ZN15CGPSCoordinates11DeserializeEPhj": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char field_2;\n
    char field_3;\n
    unsigned short field_4;\n
    char field_6;\n
    char field_7;\n
} struct_0;\n
\n
long long CGPSCoordinates::Deserialize(struct_0 *a0, char a1[6], unsigned long a2)\n
{\n
    struct_0 *v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    struct_0 *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v6;  // rdi\n
\n
    v3 = a0;\n
    v0 = v3;\n
    if (!a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a2 >= CGPSCoordinates::GetSerializedSize(v0))\n
    {\n
        v6 = v0;\n
        v2 = 0;\n
        v1 = 0;\n
        v2 = a1[0] * 0x10000 | a1[1] * 0x100 | a1[2];\n
        v1 = a1[3] * 0x10000 | a1[4] * 0x100 | a1[5];\n
        v6->field_0 = (0 CONCAT v2) /m 3600;\n
        v2 -= v6->field_0 * 3600;\n
        v6->field_2 = (0 CONCAT v2) /m 60;\n
        v2 -= v6->field_2 * 60;\n
        v6->field_3 = v2;\n
        v6->field_4 = (0 CONCAT v1) /m 3600;\n
        v1 -= v6->field_4 * 3600;\n
        v6->field_6 = (0 CONCAT v1) /m 60;\n
        v1 -= v6->field_6 * 60;\n
        v6->field_7 = v1;\n
        v4 = CGPSCoordinates::GetSerializedSize(v6);\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
}\n
", "4219904:_ZN15CGPSCoordinates13GetLatRadiansEv": "double CGPSCoordinates::GetLatRadians(long long a0)\n
{\n
    unsigned short v0;  // [bp-0x1a]\n
    int tmp_18;  // tmp #18\n
    int tmp_20;  // tmp #20\n
    int tmp_19;  // tmp #19\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    int tmp_44;  // tmp #44\n
    int tmp_46;  // tmp #46\n
    int tmp_45;  // tmp #45\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    int v4;  // xmm0\n
    int v6;  // xmm0\n
\n
    v1 = 0;\n
    v0 = CGPSCoordinates::GetLatitudeDegrees const(a0);\n
    if (v0 >= 90)\n
        v1 = v0 - 90;\n
    else\n
        v1 = -(90 - v0);\n
    CGPSCoordinates::GetLatitudeMinutes const(a0);\n
    tmp_18 = DivV(tmp_20, tmp_19);\n
    xmm0<16> = (t18 + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE)))\n
    v1 = v4;\n
    CGPSCoordinates::GetLatitudeSeconds const(a0);\n
    tmp_24 = DivV(tmp_26, tmp_25);\n
    xmm0<16> = (t24 + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE)))\n
    v1 = v6;\n
    tmp_44 = DivV(tmp_46, tmp_45);\n
    return tmp_44;\n
}\n
", "4220106:sub_4064ca": null, "4220112:_ZN15CGPSCoordinates14GetLongRadiansEv": "double CGPSCoordinates::GetLongRadians(long long a0)\n
{\n
    unsigned short v0;  // [bp-0x1a]\n
    int tmp_18;  // tmp #18\n
    int tmp_20;  // tmp #20\n
    int tmp_19;  // tmp #19\n
    int tmp_24;  // tmp #24\n
    int tmp_26;  // tmp #26\n
    int tmp_25;  // tmp #25\n
    int tmp_44;  // tmp #44\n
    int tmp_46;  // tmp #46\n
    int tmp_45;  // tmp #45\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    int v4;  // xmm0\n
    int v6;  // xmm0\n
\n
    v1 = 0;\n
    v0 = CGPSCoordinates::GetLongitudeDegrees const(a0);\n
    if (v0 >= 180)\n
        v1 = v0 - 180;\n
    else\n
        v1 = -(180 - v0);\n
    CGPSCoordinates::GetLongitudeMinutes const(a0);\n
    tmp_18 = DivV(tmp_20, tmp_19);\n
    xmm0<16> = (t18 + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE)))\n
    v1 = v4;\n
    CGPSCoordinates::GetLongitudeSeconds const(a0);\n
    tmp_24 = DivV(tmp_26, tmp_25);\n
    xmm0<16> = (t24 + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE)))\n
    v1 = v6;\n
    tmp_44 = DivV(tmp_46, tmp_45);\n
    return tmp_44;\n
}\n
", "4220318:sub_40659e": null, "4220320:_ZN4CGPSC2Ev": "long long CGPS::__base_ctor__(char *a0)\n
{\n
    char *v0;  // [bp-0x10]\n
    char *v2;  // rdi\n
\n
    v0 = a0;\n
    v2 = v0;\n
    *(v2) = 0;\n
    return CGPSCoordinates::__ctor__(v2 + 2, 0, 0, 0, 0, 0, 0);\n
}\n
", "4220376:sub_4065d8": null, "4220384:_ZN4CGPSD2Ev": "long long CGPS::__base_dtor__(unsigned long a0)\n
{\n
    return CGPSCoordinates::__dtor__(a0 + 2);\n
}\n
", "4220415:sub_4065ff": null, "4220416:_ZN4CGPS14SetCoordinatesER15CGPSCoordinates": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned long long field_2;\n
} struct_0;\n
\n
long long CGPS::SetCoordinates(struct_0 *a0, unsigned long long *a1)\n
{\n
    a0->field_0 = 1;\n
    *(&(&a0->padding_1)[1]) = *(a1);\n
    return 1;\n
}\n
", "4220455:sub_406627": null, "4220464:_ZN4CGPS17GetDistanceMetersER15CGPSCoordinatesS1_": "double CGPS::GetDistanceMeters(long long a0, long long a1)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_23;  // tmp #23\n
    int tmp_22;  // tmp #22\n
    int tmp_33;  // tmp #33\n
    int tmp_35;  // tmp #35\n
    int tmp_34;  // tmp #34\n
    int tmp_46;  // tmp #46\n
    int tmp_48;  // tmp #48\n
    int tmp_47;  // tmp #47\n
    int tmp_14;  // tmp #14\n
    int tmp_16;  // tmp #16\n
    int tmp_15;  // tmp #15\n
    unsigned long v0;  // [bp-0x98]\n
    int tmp_24;  // tmp #24\n
    unsigned long long v1;  // [bp-0x90]\n
    unsigned long v2;  // [bp-0x88]\n
    unsigned long v3;  // [bp-0x80]\n
    unsigned long v4;  // [bp-0x78]\n
    unsigned long v5;  // [bp-0x70]\n
    unsigned long v6;  // [bp-0x68]\n
    unsigned long v7;  // [bp-0x60]\n
    unsigned long v8;  // [bp-0x58]\n
    unsigned long v9;  // [bp-0x50]\n
    unsigned long v10;  // [bp-0x48]\n
    unsigned long v11;  // [bp-0x40]\n
    unsigned long v12;  // [bp-0x38]\n
    unsigned long long v13;  // [bp-0x20]\n
    unsigned long v15;  // xmm0lq\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    int v25;  // xmm0\n
\n
    v13 = 0x41584dae00000000;\n
    CGPSCoordinates::GetLatRadians(a0);\n
    CGPSCoordinates::GetLatRadians(a1);\n
    CGPSCoordinates::GetLongRadians(a0);\n
    v12 = v15;\n
    CGPSCoordinates::GetLongRadians(a1);\n
    v11 = v15;\n
    tmp_21 = SubV(tmp_23, tmp_22);\n
    *(&v10) = tmp_21;\n
    tmp_33 = SubV(tmp_35, tmp_34);\n
    *(&v9) = tmp_33;\n
    v1 = 0x4000000000000000;\n
    tmp_46 = DivV(tmp_48, tmp_47);\n
    cgc_sin(a0, a1, v19, v20, v21, v22);\n
    *(&v5) = tmp_46;\n
    tmp_14 = DivV(tmp_16, tmp_15);\n
    cgc_sin(a0, a1, v19, v20, v21, v22);\n
    *(&v4) = tmp_14;\n
    cgc_cos(a0, a1, v19, v20, v21, v22);\n
    v0 = v4;\n
    cgc_cos(a0, a1, v19, v20, v21, v22);\n
    v2 = (0 CONCAT v0) * (0 CONCAT v4);\n
    tmp_22 = DivV(tmp_24, tmp_23);\n
    cgc_sin(a0, a1, v19, v20, v21, v22);\n
    v25 = (0 CONCAT v2) * tmp_22;\n
    v3 = v25;\n
    tmp_22 = DivV(tmp_24, tmp_23);\n
    cgc_sin(a0, a1, v19, v20, v21, v22);\n
    v8 = (0 CONCAT v5) * (0 CONCAT v4) + (0 CONCAT v3) * tmp_22;\n
    cgc_sqrt(a0, a1, v19, v20, v21, v22);\n
    v6 = v8;\n
    cgc_sqrt(a0, a1, v19, v20, v21, v22);\n
    cgc_atan2(a0, a1, v19, v20, v21, v22);\n
    v7 = (0 CONCAT v6) * 2;\n
    return (0 CONCAT v13) * (0 CONCAT v7);\n
}\n
", "4220884:sub_4067d4": null, "4220896:_ZNK15CGPSCoordinates18GetLatitudeDegreesEv": "long long CGPSCoordinates::GetLatitudeDegrees const(unsigned short *a0)\n
{\n
    return *(a0);\n
}\n
", "4220913:sub_4067f1": null, "4220928:_ZNK15CGPSCoordinates18GetLatitudeMinutesEv": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
long long CGPSCoordinates::GetLatitudeMinutes const(struct_0 *a0)\n
{\n
    return a0->field_2;\n
}\n
", "4220946:sub_406812": null, "4220960:_ZNK15CGPSCoordinates18GetLatitudeSecondsEv": "typedef struct struct_0 {\n
    char padding_0[3];\n
    char field_3;\n
} struct_0;\n
\n
long long CGPSCoordinates::GetLatitudeSeconds const(struct_0 *a0)\n
{\n
    return a0->field_3;\n
}\n
", "4220978:sub_406832": null, "4220992:_ZNK15CGPSCoordinates19GetLongitudeDegreesEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned short field_4;\n
} struct_0;\n
\n
long long CGPSCoordinates::GetLongitudeDegrees const(struct_0 *a0)\n
{\n
    return a0->field_4;\n
}\n
", "4221010:sub_406852": null, "4221024:_ZNK15CGPSCoordinates19GetLongitudeMinutesEv": "typedef struct struct_0 {\n
    char padding_0[6];\n
    char field_6;\n
} struct_0;\n
\n
long long CGPSCoordinates::GetLongitudeMinutes const(struct_0 *a0)\n
{\n
    return a0->field_6;\n
}\n
", "4221042:sub_406872": null, "4221056:_ZNK15CGPSCoordinates19GetLongitudeSecondsEv": "typedef struct struct_0 {\n
    char padding_0[7];\n
    char field_7;\n
} struct_0;\n
\n
long long CGPSCoordinates::GetLongitudeSeconds const(struct_0 *a0)\n
{\n
    return a0->field_7;\n
}\n
", "4221074:sub_406892": null, "4221088:_ZN15CPackageTrackerC2EPv": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[243];\n
    char field_f4;\n
    char field_f5;\n
    char field_f6;\n
    char field_f7;\n
    char padding_f8[10];\n
    char field_102;\n
    char padding_103[5];\n
    unsigned long long field_108;\n
} struct_0;\n
\n
long long CPackageTracker::__base_ctor__(struct_0 *a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long v4;  // [bp-0x20]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned long long v7;  // rax\n
    struct_0 *v8;  // rdi\n
    struct_0 *v9;  // rax\n
\n
    v5 = a0;\n
    v2 = v5;\n
    v2->field_0 = 0;\n
    v7 = &v2->padding_1[3];\n
    v3 = v7 + 240;\n
    v4 = v7;\n
    do\n
    {\n
        v0 = v4;\n
        CGeofencePoint::__base_ctor__(v0);\n
        v1 = v0 + 12;\n
        v4 = v1;\n
    } while (v1 != v3);\n
    v8 = v2;\n
    v8->field_f4 = 0;\n
    v8->field_f5 = 0;\n
    v8->field_f6 = 0;\n
    v8->field_f7 = 0;\n
    CGPS::__base_ctor__(&v8->padding_f8);\n
    v9 = v2;\n
    v9->field_102 = 0;\n
    v9->field_108 = a1;\n
    return v2;\n
}\n
", "4221251:sub_406943": null, "4221264:_ZN15CPackageTrackerD1Ev": "long long CPackageTracker::__dtor__(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
\n
    CGPS::__base_dtor__(a0 + 248);\n
    v1 = a0 + 4;\n
    v2 = v1 + 240;\n
    do\n
    {\n
        v0 = v2 - 12;\n
        CGeofencePoint::__base_dtor__(v0);\n
        v2 = v0;\n
    } while (v2 != v1);\n
    return v0;\n
}\n
", "4221362:sub_4069b2": null, "4221376:_ZN15CPackageTracker14SeedSimulationEP5CPRNG": "typedef struct struct_0 {\n
    char padding_0[258];\n
    char field_102;\n
    char padding_103[1];\n
    unsigned int field_104;\n
} struct_0;\n
\n
long long CPackageTracker::SeedSimulation(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned short v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2e]\n
    char v2;  // [bp-0x2d]\n
    unsigned short v3;  // [bp-0x2c]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x20]\n
    unsigned long long v7;  // rax\n
    unsigned long long v8;  // rax\n
    unsigned short v9;  // r8w\n
    unsigned int v10;  // r8\n
\n
    v7 = CPRNG::GetRandomU32(a1);\n
    a0->field_104 = v7;\n
    v8 = CPRNG::GetRandomRange(a1, 10, 50, v7);\n
    a0->field_102 = v8;\n
    v0 = CPRNG::GetRandomRange(a1, 30, 160, v8);\n
    v1 = CPRNG::GetRandomRange(a1, 0, 59);\n
    v2 = CPRNG::GetRandomRange(a1, 0, 59);\n
    v3 = CPRNG::GetRandomRange(a1, 0, 359);\n
    v4 = CPRNG::GetRandomRange(a1, 0, 59);\n
    v9 = v3;\n
    CGPSCoordinates::__ctor__(&v5, v0, v1, v2, v10, v4, CPRNG::GetRandomRange(a1, 0, 59));\n
    CGPS::SetCoordinates(&a0->padding_0[248], &v5);\n
    return CGPSCoordinates::__dtor__(&v5);\n
}\n
", "4221654:sub_406ad6": null, "4221664:_ZN15CPackageTracker3RunEv": "typedef struct struct_0 {\n
    char padding_0[244];\n
    char field_f4;\n
} struct_0;\n
\n
long long CPackageTracker::Run(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned long v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x30]\n
    char v5;  // [bp-0x28]\n
    char v6;  // [bp-0x27]\n
    unsigned long long v7;  // [bp-0x20]\n
    char v8;  // [bp-0x11]\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    v8 = 0;\n
    v7 = operator new[](0x10000);\n
    while (((v8 ^ 255) & 1))\n
    {\n
        v3 = 0;\n
        if (CommReadBytes(&v5, 3) != 3)\n
            break;\n
        v3 = CPackageTracker::UpdateChecksum(a0, &v5, 3, v3);\n
        v2 = *(&v6);\n
        if (CommReadBytes(v7, *(&v6)) != *(&v6))\n
            break;\n
        v3 = CPackageTracker::UpdateChecksum(a0, v7, v2, v3);\n
        if (CommReadBytes(&v4, 1) != 1)\n
            break;\n
        if (v3 != v4)\n
        {\n
            CPackageTracker::SendResponse(a0, v5, 2, 0, 0);\n
        }\n
        else\n
        {\n
            if ((a0->field_f4 & 1) && v5 != 8 && v5 != 1)\n
            {\n
                CPackageTracker::SendResponse(a0, v5, 4, 0, 0);\n
                continue;\n
            }\n
            v1 = v5;\n
            switch (v1)\n
            {\n
            case 0:\n
                CPackageTracker::DoInfo(a0, v7, v2);\n
                break;\n
            case 1:\n
                CPackageTracker::DoShutdown(a0, v7, v2);\n
                v8 = 1;\n
                break;\n
            case 2:\n
                CPackageTracker::DoDebug(a0, v7, v2);\n
                break;\n
            case 3:\n
                CPackageTracker::DoUpdateGeofence(a0, v7, v2);\n
                break;\n
            case 4:\n
                CPackageTracker::DoPosition(a0, v7, v2);\n
                break;\n
            case 5:\n
                CPackageTracker::DoGPSOff(a0, v7, v2);\n
                break;\n
            case 6:\n
                CPackageTracker::DoGPSOn(a0, v7, v2);\n
                break;\n
            case 7:\n
                CPackageTracker::DoSleep(a0, v7, v2);\n
                break;\n
            case 8:\n
                CPackageTracker::DoWakeup(a0, v7, v2);\n
                break;\n
            default:\n
                CPackageTracker::SendResponse(a0, v5, 1, 0, 0);\n
            }\n
            if ((CPackageTracker::HasError(a0) & 1))\n
                break;\n
        }\n
    }\n
    v10 = v7;\n
    *(&v0) = v10;\n
    if (v10)\n
        v10 = operator delete(*(&v0));\n
    return v10;\n
}\n
", "4222311:sub_406d67": null, "4222320:_ZN15CPackageTracker14UpdateChecksumEPhjh": "long long CPackageTracker::UpdateChecksum(unsigned long a0, char *a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x1d]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v2 = a0;\n
    v1 = a3;\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v1 += a1[v0];\n
    }\n
    return v1;\n
}\n
", "4222399:sub_406dbf": null, "4222400:_ZN15CPackageTracker12SendResponseEhhPht": "long long CPackageTracker::SendResponse(unsigned long a0, unsigned long a1, unsigned long a2, char *a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = a1;\n
    v2 = a2;\n
    v0 = 0;\n
    if (CommSendBytes(&v1, 4) != 4)\n
    {\n
        v4 = CPackageTracker::SetError(a0, 1);\n
        return v4;\n
    }\n
    v0 = CPackageTracker::UpdateChecksum(a0, &v1, 4, v0);\n
    if (a4 > 0)\n
    {\n
        if (!a3)\n
        {\n
            v4 = CPackageTracker::SetError(a0, 2);\n
            return v4;\n
        }\n
        if (CommSendBytes(a3, a4) != a4)\n
        {\n
            v4 = CPackageTracker::SetError(a0, 1);\n
            return v4;\n
        }\n
        v0 = CPackageTracker::UpdateChecksum(a0, a3, a4, v0);\n
    }\n
    v4 = CommSendBytes(&v0, 1);\n
    if (v4 != 1)\n
    {\n
        v4 = CPackageTracker::SetError(a0, 1);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4222690:sub_406ee2": null, "4222704:_ZN15CPackageTracker6DoInfoEPhj": "typedef struct struct_0 {\n
    char padding_0[245];\n
    char field_f5;\n
} struct_0;\n
\n
long long CPackageTracker::DoInfo(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x28]\n
    char v1;  // [bp-0x27]\n
    unsigned int v2;  // [bp-0x26]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v4 = a1;\n
    v3 = a2;\n
    v1 = CPackageTracker::GetBatteryLevel const(a0);\n
    v2 = CPackageTracker::GetDeviceID const(a0);\n
    if (!(a0->field_f5 & 1))\n
    {\n
        v0 = 1;\n
        return CPackageTracker::SendResponse(a0, 0, 0, &v0, 6);\n
    }\n
    if ((CGPS::IsLocked const(&a0[1].padding_0[2]) & 1))\n
        v0 = 0;\n
    else\n
        v0 = 2;\n
    return CPackageTracker::SendResponse(a0, 0, 0, &v0, 6);\n
}\n
", "4222850:sub_406f82": null, "4222864:_ZN15CPackageTracker10DoShutdownEPhj": "long long CPackageTracker::DoShutdown(unsigned int a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
\n
    v1 = a1;\n
    v0 = a2;\n
    return CPackageTracker::SendResponse(a0, 1, 0, NULL, 0);\n
}\n
", "4222913:sub_406fc1": null, "4222928:_ZN15CPackageTracker7DoDebugEPhj": "typedef struct struct_0 {\n
    char padding_0[258];\n
    char field_102;\n
    char padding_103[1];\n
    unsigned int field_104;\n
    struct struct_1 *field_108;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long CPackageTracker::DoDebug(struct_0 *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    char v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned long long v3;  // [bp-0x30]\n
    char v4;  // [bp-0x28]\n
    char v5;  // [bp-0x20]\n
    char v6;  // [bp-0x1f]\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
\n
    if (a2 < 10)\n
    {\n
        v8 = CPackageTracker::SetError(a0, 1);\n
        return v8;\n
    }\n
    v3 = 16047511859077806719 ^ a0->field_108->field_0;\n
    v2 = 0;\n
    cgc_memcpy(&v4, &a1[v2], 10);\n
    v2 += 10;\n
    if (v6 + 10 != a2)\n
    {\n
        v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
        return v8;\n
    }\n
    else if (*(&v4) != v3)\n
    {\n
        v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
        return v8;\n
    }\n
    else\n
    {\n
        v0 = v5;\n
        if (!v0)\n
        {\n
            if (v6 == 1)\n
            {\n
                a0->field_102 = a1[v2];\n
            }\n
            else\n
            {\n
                v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
                return v8;\n
            }\n
        }\n
        else\n
        {\n
            if (v0 != 1)\n
            {\n
                if (v0 != 2)\n
                {\n
                    v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
                    return v8;\n
                }\n
                if (v6 != 4)\n
                {\n
                    v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
                    return v8;\n
                }\n
                a0->field_104 = *(&a1[v2]);\n
            }\n
            else if (v6 == 6)\n
            {\n
                CGPSCoordinates::__base_ctor__(&v1);\n
                CGPSCoordinates::Deserialize(&v1, &a1[v2], 6);\n
                CGPS::SetCoordinates(&a0->padding_0[248], &v1);\n
                CGPSCoordinates::__dtor__(&v1);\n
            }\n
            else\n
            {\n
                v8 = CPackageTracker::SendResponse(a0, 2, 1, NULL, 0);\n
                return v8;\n
            }\n
        }\n
        v8 = CPackageTracker::SendResponse(a0, 2, 0, NULL, 0);\n
        return v8;\n
    }\n
}\n
", "4223516:sub_40721c": null, "4223520:_ZN15CPackageTracker16DoUpdateGeofenceEPhj": "long long CPackageTracker::DoUpdateGeofence(char a0[246], unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x80]\n
    unsigned int v1;  // [bp-0x7c]\n
    char v2[246];  // [bp-0x78]\n
    unsigned int v3;  // [bp-0x6c]\n
    unsigned int v4;  // [bp-0x68]\n
    char v5;  // [bp-0x61]\n
    char v6;  // [bp-0x60]\n
    char v7;  // [bp-0x58]\n
    char v8[6];  // [bp-0x54]\n
    unsigned int v9;  // [bp-0x48]\n
    unsigned int v10;  // [bp-0x44]\n
    char v11;  // [bp-0x40]\n
    char v12[6];  // [bp-0x3c]\n
    char v13;  // [bp-0x35]\n
    unsigned int v14;  // [bp-0x34]\n
    char v15;  // [bp-0x30]\n
    char v16;  // [bp-0x2f]\n
    char v17;  // [bp-0x28]\n
    char v18[6];  // [bp-0x27]\n
    unsigned int v19;  // [bp-0x21]\n
    char v20[246];  // [bp-0x10]\n
    unsigned long v22;  // rax, Other Possible Types: unsigned long long\n
    char v23[246];  // rdi\n
    char v24[246];  // rax\n
    unsigned int v25;  // edx\n
\n
    *(&v20[0]) = a0;\n
    *(&v2[0]) = v20;\n
    if (a2 < 2)\n
    {\n
        v22 = CPackageTracker::SetError(v2, 1);\n
        return v22;\n
    }\n
    v14 = 0;\n
    cgc_memcpy(&v15, a1 + v14, 2);\n
    v14 += 2;\n
    v1 = v15;\n
    if (!v1)\n
    {\n
        if (v16 > 20)\n
        {\n
            v22 = CPackageTracker::SendResponse(v2, 3, 3, NULL, 0);\n
            return v22;\n
        }\n
        for (v13 = 0; v13 < v16; v13 += 1)\n
        {\n
            if (a2 - v14 < 10)\n
            {\n
                v22 = CPackageTracker::SetError(v2, 1);\n
                return v22;\n
            }\n
            cgc_memcpy(&v11, a1 + v14, 10);\n
            v14 += 10;\n
            CGeofencePoint::SetDistance(&v2[4 + 12 * v13], *(&v11));\n
            CGPSCoordinates::Deserialize(CGeofencePoint::GetCoords(&v2[4 + 12 * v13]), v12, 6);\n
        }\n
        v2[0] = v16;\n
    }\n
    else\n
    {\n
        if (v1 != 1)\n
        {\n
            if (v1 != 2)\n
            {\n
                v22 = CPackageTracker::SendResponse(v2, 3, 1, NULL, 0);\n
                return v22;\n
            }\n
            v23 = v2;\n
            v23[0] = 0;\n
            v22 = CPackageTracker::SendResponse(v23, 3, 0, NULL, 0);\n
            return v22;\n
        }\n
        if (v16 > 20)\n
        {\n
            v22 = CPackageTracker::SendResponse(v2, 3, 3, NULL, 0);\n
            return v22;\n
        }\n
        v24 = v2;\n
        v25 = v16;\n
        v10 = v24[0] + v25;\n
        for (v9 = v24[0]; v9 < v10; v9 += 1)\n
        {\n
            if (a2 - v14 >= 10)\n
            {\n
                cgc_memcpy(&v7, a1 + v14, 10);\n
                v14 += 10;\n
                CGeofencePoint::SetDistance(&v2[4 + 12 * v9], *(&v7));\n
                CGPSCoordinates::Deserialize(CGeofencePoint::GetCoords(&v2[4 + 12 * v9]), v8, 6);\n
            }\n
            else\n
            {\n
                v22 = CPackageTracker::SetError(v2, 1);\n
                return v22;\n
            }\n
        }\n
        v2[0] = v10;\n
    }\n
    if (!(v2[245] & 1))\n
    {\n
        v22 = CPackageTracker::SendResponse(v2, 3, 5, NULL, 0);\n
        return v22;\n
    }\n
    CGPSCoordinates::__base_ctor__(&v6);\n
    CGPS::GetLastCoordinates(&v2[1 + 2], &v6);\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 >= v2[0])\n
        {\n
            v19 = 0;\n
            v17 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            v4 = CGPS::GetDistanceMeters(&v6, CGeofencePoint::GetCoords(&v2[4 + 12 * v5]));\n
            v0 = v4;\n
            if (v0 > CGeofencePoint::GetDistance const(&v2[4 + 12 * v5]))\n
            {\n
                v17 = 1;\n
                v19 = v4;\n
                CGPSCoordinates::Serialize(CGeofencePoint::GetCoords(&v2[4 + 12 * v5]), v18, 6);\n
            }\n
            else\n
            {\n
                v5 += 1;\n
            }\n
        }\n
    }\n
    CPackageTracker::SendResponse(v2, 3, 0, &v17, 11);\n
    v3 = 1;\n
    v22 = CGPSCoordinates::__dtor__(&v6);\n
    return v22;\n
}\n
", "4224569:sub_407639": null, "4224576:_ZN15CPackageTracker10DoPositionEPhj": "typedef struct struct_0 {\n
    char padding_0[245];\n
    char field_f5;\n
} struct_0;\n
\n
long long CPackageTracker::DoPosition(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x30]\n
    char v1;  // [bp-0x28]\n
    char v2[6];  // [bp-0x27]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v4 = a1;\n
    v3 = a2;\n
    CGPSCoordinates::__base_ctor__(&v0);\n
    if (!(a0->field_f5 & 1))\n
    {\n
        v1 = 1;\n
    }\n
    else if (!(CGPS::GetLastCoordinates(&a0[1].padding_0[2], &v0) & 1))\n
    {\n
        v1 = 2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        CGPSCoordinates::Serialize(&v0, v2, 6);\n
    }\n
    CPackageTracker::SendResponse(a0, 4, 0, &v1, 7);\n
    return CGPSCoordinates::__dtor__(&v0);\n
}\n
", "4224747:sub_4076eb": null, "4224752:_ZN15CPackageTracker8DoGPSOffEPhj": "typedef struct struct_0 {\n
    char padding_0[245];\n
    char field_f5;\n
} struct_0;\n
\n
long long CPackageTracker::DoGPSOff(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
\n
    v1 = a1;\n
    v0 = a2;\n
    a0->field_f5 = 0;\n
    return CPackageTracker::SendResponse(a0, 5, 0, NULL, 0);\n
}\n
", "4224808:sub_407728": null, "4224816:_ZN15CPackageTracker7DoGPSOnEPhj": "typedef struct struct_0 {\n
    char padding_0[245];\n
    char field_f5;\n
} struct_0;\n
\n
long long CPackageTracker::DoGPSOn(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
\n
    v1 = a1;\n
    v0 = a2;\n
    a0->field_f5 = 1;\n
    return CPackageTracker::SendResponse(a0, 6, 0, NULL, 0);\n
}\n
", "4224872:sub_407768": null, "4224880:_ZN15CPackageTracker7DoSleepEPhj": "typedef struct struct_0 {\n
    char padding_0[244];\n
    char field_f4;\n
} struct_0;\n
\n
long long CPackageTracker::DoSleep(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
\n
    v1 = a1;\n
    v0 = a2;\n
    a0->field_f4 = 1;\n
    return CPackageTracker::SendResponse(a0, 7, 0, NULL, 0);\n
}\n
", "4224936:sub_4077a8": null, "4224944:_ZN15CPackageTracker8DoWakeupEPhj": "typedef struct struct_0 {\n
    char padding_0[244];\n
    char field_f4;\n
} struct_0;\n
\n
long long CPackageTracker::DoWakeup(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
\n
    v1 = a1;\n
    v0 = a2;\n
    a0->field_f4 = 0;\n
    return CPackageTracker::SendResponse(a0, 8, 0, NULL, 0);\n
}\n
", "4225000:sub_4077e8": null, "4225008:_ZN15CPackageTracker8HasErrorEv": "typedef struct struct_0 {\n
    char padding_0[246];\n
    char field_f6;\n
} struct_0;\n
\n
long long CPackageTracker::HasError(struct_0 *a0)\n
{\n
    return a0->field_f6 & 1;\n
}\n
", "4225033:sub_407809": null, "4225040:_ZN15CPackageTracker8SetErrorEh": "long long CPackageTracker::SetError(char a0[248], unsigned long a1)\n
{\n
    a0[246] = 1;\n
    a0[247] = a1;\n
    return a0;\n
}\n
", "4225076:sub_407834": null, "4225088:_ZNK15CPackageTracker15GetBatteryLevelEv": "typedef struct struct_0 {\n
    char padding_0[258];\n
    char field_102;\n
} struct_0;\n
\n
long long CPackageTracker::GetBatteryLevel const(struct_0 *a0)\n
{\n
    return a0->field_102;\n
}\n
", "4225109:sub_407855": null, "4225120:_ZNK15CPackageTracker11GetDeviceIDEv": "typedef struct struct_0 {\n
    char padding_0[260];\n
    unsigned int field_104;\n
} struct_0;\n
\n
long long CPackageTracker::GetDeviceID const(struct_0 *a0)\n
{\n
    return a0->field_104;\n
}\n
", "4225140:sub_407874": null, "4225152:_ZNK4CGPS8IsLockedEv": "long long CGPS::IsLocked const(char *a0)\n
{\n
    return *(a0) & 1;\n
}\n
", "4225173:sub_407895": null, "4225184:_ZN14CGeofencePoint11SetDistanceEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long CGeofencePoint::SetDistance(struct_0 *a0, unsigned long a1)\n
{\n
    a0->field_8 = a1;\n
    return a0;\n
}\n
", "4225207:sub_4078b7": null, "4225216:_ZN14CGeofencePoint9GetCoordsEv": "long long CGeofencePoint::GetCoords(unsigned long a0)\n
{\n
    return a0;\n
}\n
", "4225230:sub_4078ce": null, "4225232:_ZN4CGPS18GetLastCoordinatesER15CGPSCoordinates": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned long long field_2;\n
} struct_0;\n
\n
long long CGPS::GetLastCoordinates(struct_0 *a0, unsigned long long *a1)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!(a0->field_0 & 1))\n
    {\n
        v0 = 0;\n
        return v0 & 1;\n
    }\n
    *(a1) = *(&(&a0->padding_1)[1]);\n
    v0 = 1;\n
    return v0 & 1;\n
}\n
", "4225299:sub_407913": null, "4225312:_ZNK14CGeofencePoint11GetDistanceEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long CGeofencePoint::GetDistance const(struct_0 *a0)\n
{\n
    return a0->field_8;\n
}\n
", "4225329:sub_407931": null, "4225344:main": "int main(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x150]\n
    char v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v5 = 0;\n
    v4 = a0;\n
    v3 = a1;\n
    v4 = 0x4347c000;\n
    *(&v2) = v4;\n
    CPRNG::__base_ctor__(&v1, *(&v2) + 32, 4064);\n
    CPackageTracker::__base_ctor__(&v0, *(&v2));\n
    CPackageTracker::SeedSimulation(&v0, &v1);\n
    CPackageTracker::Run(&v0);\n
    v5 = 0;\n
    CPackageTracker::__dtor__(&v0);\n
    CPRNG::__base_dtor__(&v1);\n
    return v5;\n
}\n
", "4225490:sub_4079d2": null, "4225504:_ZN5CPRNGC2EPjj": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long CPRNG::__base_ctor__(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    a0->field_18 = a1;\n
    a0->field_14 = a2 >> 2;\n
    a0->field_10 = 0;\n
    a0->field_0 = 0;\n
    a0->field_4 = 0;\n
    a0->field_8 = 0;\n
    return a0;\n
}\n
", "4225571:sub_407a23": null, "4225584:_ZN5CPRNGD2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long CPRNG::__base_dtor__(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    unsigned long long v3;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a0->field_8)\n
        return a0;\n
    v3 = v1->field_8;\n
    *(&v0) = v3;\n
    if (!v3)\n
        return v3;\n
    v3 = operator delete(*(&v0));\n
}\n
", "4225657:sub_407a79": null, "4225664:_ZN5CPRNG12GetRandomU32Ev": "long long CPRNG::GetRandomU32(unsigned long long a0)\n
{\n
    return CPRNG::GetRandomInternal(a0);\n
}\n
", "4225691:sub_407a9b": null, "4225696:_ZN5CPRNG17GetRandomInternalEv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long CPRNG::GetRandomInternal(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int *v2;  // rax\n
    unsigned long v3;  // rcx\n
\n
    if (!a0->field_8)\n
        CPRNG::GenerateMatrix(a0);\n
    if (a0->field_0 >= a0->field_4)\n
        CPRNG::GenerateMatrix(a0);\n
    v2 = a0->field_8;\n
    v3 = a0->field_0;\n
    a0->field_0 = v3 + 1;\n
    v0 = v2[v3];\n
    return v0;\n
}\n
", "4225794:sub_407b02": null, "4225808:_ZN5CPRNG12GetRandomU16Ev": "long long CPRNG::GetRandomU16(void* a0)\n
{\n
    return CPRNG::GetRandomInternal(a0) & 65535;\n
}\n
", "4225843:sub_407b33": null, "4225856:_ZN5CPRNG11GetRandomU8Ev": "long long CPRNG::GetRandomU8(void* a0)\n
{\n
    return CPRNG::GetRandomInternal(a0) & 255;\n
}\n
", "4225891:sub_407b63": null, "4225904:_ZN5CPRNG14GetRandomRangeEjj": "long long CPRNG::GetRandomRange(void* a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v4 = a1;\n
    v3 = a2;\n
    if (v4 > v3)\n
    {\n
        v2 = v3;\n
        v3 = v4;\n
        v4 = v2;\n
    }\n
    v1 = v3 - v4;\n
    if (!v1)\n
    {\n
        v5 = v4;\n
        return v5;\n
    }\n
    v0 = v4;\n
    v5 = v0 + ((0 CONCAT CPRNG::GetRandomInternal(a0)) /m (v1 + 1) >> 32);\n
    return v5;\n
}\n
", "4226032:_ZN5CPRNG14GenerateMatrixEv": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long CPRNG::GenerateMatrix(struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    struct_0 *v8;  // [bp-0x10]\n
    struct_0 *v10;  // rax\n
    unsigned long long v11;  // rax\n
    unsigned long v12;  // rdi, Other Possible Types: unsigned long long\n
    struct_0 *v13;  // rcx\n
    unsigned int *v14;  // rax\n
    unsigned long v15;  // rdx\n
    struct_0 *v16;  // rcx\n
    struct_0 *v17;  // rax\n
\n
    v8 = a0;\n
    v1 = v8;\n
    if (!v1->field_8)\n
    {\n
        v1->field_8 = operator new[](0x800);\n
        for (v7 = 0; v7 < 0x200; v7 += 1)\n
        {\n
            *((v1->field_8 + v7 * 4)) = v7;\n
        }\n
        v10 = v1;\n
        v10->field_4 = 0x200;\n
        v10->field_0 = 0;\n
    }\n
    v6 = v1->field_4 + 0x200;\n
    if (v6 > 0x1000)\n
        v6 = 0x1000;\n
    v11 = v6;\n
    v12 = v11 * 4;\n
    if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rax<8>, 0x4<64>, cc_ndep<8>))\n
        v12 = -1;\n
    v5 = operator new[](v12);\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 0; v2 < v6; v2 += 1)\n
    {\n
        v13 = v1;\n
        v14 = v13->field_18;\n
        v15 = v13->field_10;\n
        v13->field_10 = v15 + 1;\n
        v5[v2] = v14[v15] & 2780934913;\n
        v5[v2] = v5[v2] ^ v3 + v2 + 1;\n
        if (v13->field_10 >= v13->field_14)\n
            v1->field_10 = 0;\n
        v16 = v1;\n
        v5[v2] = v5[v2] ^ *((v16->field_8 + v4 * 4));\n
        v3 = v5[v2];\n
        v4 += 1;\n
        if (v4 > v16->field_4)\n
            v4 = 0;\n
    }\n
    *(&v0) = v1->field_8;\n
    if (*(&v0))\n
        operator delete(*(&v0));\n
    v17 = v1;\n
    v17->field_8 = v5;\n
    v17->field_4 = v6;\n
    v17->field_0 = 0;\n
    return v1;\n
}\n
", "4226508:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:cgc_atan2": null, "5242904:cgc_sqrt": null, "5242912:cgc_fdwait": null, "5242920:cgc_receive": null, "5242928:cgc_allocate": null, "5242936:cgc__terminate": null, "5242944:_ZdlPv": null, "5242952:cgc_rint": null, "5242960:cgc_log10": null, "5242968:cgc_sin": null, "5242976:cgc_transmit": null, "5242984:cgc_pow": null, "5242992:cgc_cos": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}