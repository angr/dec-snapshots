{"4202496:_init": "extern struct_0 *g_40c5b0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40c5b0;\n
    if (g_40c5b0)\n
        v1 = g_40c5b0();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40c5d0;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40c5d0;\n
    goto *(4244952);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202592:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202608:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202624:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4244928);\n
}\n
", "4202672:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202709:sub_4020d5": null, "4202710:sub_4020d6": null, "4202720:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40c5a8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202761:sub_402109": null, "4202768:register_tm_clones": "extern unsigned long long g_40c5b8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202825:sub_402149": null, "4202832:__do_global_dtors_aux": "extern char completed.0;\n
extern unsigned long long g_40c5c0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (completed.0)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40c5c0)\n
    {\n
        completed.0 = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202885:sub_402185": null, "4202889:sub_402189": null, "4202896:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202905:sub_402199": null, "4202912:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202963:sub_4021d3": null, "4202976:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203091:sub_402253": null, "4203104:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0) && !cgc_islower(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203177:sub_4022a9": null, "4203184:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(a0) && !cgc_isdigit(a0))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203257:sub_4022f9": null, "4203264:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 32 && a0 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203315:sub_402333": null, "4203328:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + -32;\n
    return v0;\n
}\n
", "4203388:sub_40237c": null, "4203392:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(a0))\n
    {\n
        v0 = a0;\n
        return v0;\n
    }\n
    v0 = a0 + 32;\n
    return v0;\n
}\n
", "4203452:sub_4023bc": null, "4203456:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203547:sub_40241b": null, "4203552:cgc_link": "extern char cgc_lookaside;\n
\n
long long cgc_link(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long v5;  // rax\n
\n
    v3 = cgc_lookaside;\n
    if (!a0)\n
        return cgc_lookaside;\n
    v5 = a0;\n
    if (*(a0) <= 1016)\n
    {\n
        if (*(a0) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(a0) >> 3;\n
        *((a0 + 8)) = (&cgc_lookaside)[v2];\n
        v1 = a0;\n
        if (*(a0) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(a0) >> 3;\n
        (&cgc_lookaside)[v0] = v1;\n
        return &cgc_lookaside;\n
    }\n
    while (true)\n
    {\n
        if (!v3)\n
            return v5;\n
        if (!*((v3 + 8)))\n
        {\n
            *((v3 + 8)) = a0;\n
            *((a0 + 16)) = v3;\n
            *((a0 + 8)) = 0;\n
            return a0;\n
        }\n
        else if (*(a0) >= *(*((v3 + 8))))\n
        {\n
            v5 = *((v3 + 8));\n
            v3 = v5;\n
        }\n
        else\n
        {\n
            *((a0 + 8)) = *((v3 + 8));\n
            *((a0 + 16)) = v3;\n
            *((*((v3 + 8)) + 16)) = a0;\n
            v5 = v3;\n
            *((v5 + 8)) = a0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4203931:sub_40259b": null, "4203936:cgc_add_freelist_block": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_add_freelist_block(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned long long *v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long *v8;  // rax, Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = 0;\n
    v0 = 0;\n
    v2 += 4;\n
    v2 = v2 + 4095 & 0xfffff000;\n
    if (cgc_allocate(a0, v4, v5, v6))\n
    {\n
        cgc_printf(\"[ERROR] Allocating a free list block failed: $d\\n
\", v2);\n
        cgc__terminate(\"[ERROR] Allocating a free list block failed: $d\\n
\");\n
    }\n
    cgc_bzero(v1, v2);\n
    *(v1) = v2 - 4;\n
    if (!cgc_lookaside)\n
    {\n
        v8 = v1;\n
        cgc_lookaside = v8;\n
        return v1;\n
    }\n
    v8 = cgc_link(v1);\n
    return v8;\n
}\n
", "4204128:cgc_free": "long long cgc_free(unsigned long a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (a0)\n
        *(&v0) = a0 - 4;\n
    return cgc_link(*(&v0));\n
}\n
", "4204186:sub_40269a": null, "4204192:cgc_init_freelist": "extern struct_0 *cgc_lookaside;\n
\n
long long cgc_init_freelist()\n
{\n
    unsigned long long v0[3];  // [bp-0x18]\n
    unsigned long long v1[3];  // [bp-0x10]\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    v1[0] = 0;\n
    v0[0] = 0;\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        cgc_printf(\"[ERROR] Malloc fail terminate\\n
\");\n
        cgc__terminate(\"[ERROR] Malloc fail terminate\\n
\");\n
    }\n
    cgc_bzero(cgc_lookaside, 0x1000);\n
    v1[0] = cgc_lookaside;\n
    v0[0] = v1 + 1;\n
    v1[0] = 0;\n
    v1[1] = v0;\n
    v1[2] = 0;\n
    v0[0] = 4068;\n
    v0[2] = v1;\n
    v0[1] = 0;\n
    return v0;\n
}\n
", "4204384:cgc_unlink": "long long cgc_unlink(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x10]\n
    unsigned long v2;  // rax\n
\n
    v0 = a0;\n
    if (!a0)\n
        return v2;\n
    if (*((a0 + 16)))\n
        *((*((a0 + 16)) + 8)) = *((v0 + 8));\n
    v2 = a0;\n
    if (!*((a0 + 8)))\n
        return v2;\n
    v2 = *((a0 + 8));\n
    *((v2 + 16)) = *((a0 + 16));\n
}\n
", "4204485:sub_4027c5": null, "4204496:cgc_freelist_alloc": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern struct_0 *cgc_lookaside;\n
\n
long long cgc_freelist_alloc(unsigned long long a0)\n
{\n
    unsigned long long *v0;  // [bp-0x28]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v1 = cgc_lookaside; v1; v1 = *((v1 + 8)))\n
    {\n
        if (*(v1) >= a0)\n
            break;\n
    }\n
    if (!v1)\n
    {\n
        cgc_add_freelist_block(a0);\n
        v2 = cgc_freelist_alloc(a0);\n
        return v2;\n
    }\n
    cgc_unlink(v1);\n
    if (*(v1) - a0 < 24)\n
    {\n
        v2 = v1 + 4;\n
        return v2;\n
    }\n
    v0 = v1 + 4 + a0;\n
    *(v0) = *(v1) - (a0 + 4);\n
    *(v1) = a0;\n
    cgc_link(v0);\n
    v2 = v1 + 4;\n
    return v2;\n
}\n
", "4204777:sub_4028e9": null, "4204784:cgc_calloc": "long long cgc_calloc(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10]\n
\n
    v1 = a0;\n
    v0 = cgc_malloc(v1);\n
    if (!v0)\n
    {\n
        v2 = v0;\n
        return v2;\n
    }\n
    v1 = v1 + 7 & 4294967288;\n
    cgc_bzero(v0, v1);\n
    v2 = v0;\n
    return v2;\n
}\n
", "4204889:sub_402959": null, "4204896:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern struct_1 cgc_lookaside;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x30], Other Possible Types: unsigned long long\n
    struct_0 *v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned long long v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x10]\n
\n
    v3 = a0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 < 8)\n
        v3 = 8;\n
    v3 = v3 + 7 & 4294967288;\n
    if (v3 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v3 >> 3;\n
    if (!v2)\n
    {\n
        v4 = cgc_freelist_alloc(v3);\n
        return v4;\n
    }\n
    for (v2 = v0; v2 < 128; v2 += 1)\n
    {\n
        if ((&cgc_lookaside.field_0)[v2])\n
            break;\n
    }\n
    if (v2 != 128)\n
    {\n
        v1 = (&cgc_lookaside.field_0)[v2];\n
        (&cgc_lookaside.field_0)[v2] = v1->field_8;\n
        v4 = &v1->padding_0[4];\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v3);\n
    return v4;\n
}\n
", "4205198:sub_402a8e": null, "4205200:cgc_round": "long long cgc_round()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205326:sub_402b0e": null, "4205328:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v7;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v7 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v7;\n
        return v5;\n
    }\n
    else if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = v0;\n
        return v5;\n
    }\n
}\n
", "4205478:sub_402ba6": null, "4205488:cgc_seed_prng_array": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_seed_prng_array(unsigned int *a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14], Other Possible Types: unsigned long\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = a1;\n
    cgc_bzero(&state, 128);\n
    state_n = 0;\n
    if (v2 > 32)\n
        v2 = 32;\n
    for (v1 = 0; v1 < v2; v1 += 1)\n
    {\n
        (&state)[v1] = a0[v1];\n
    }\n
    v4 = v2;\n
    while (true)\n
    {\n
        v1 = v4;\n
        if (v1 >= 32)\n
            break;\n
        v0 = (&state)[v1 - 1 & 31];\n
        (&state)[v1] = (v0 ^ (v0 >> 30) + v1) * 524287;\n
        v4 = v1 + 1;\n
    }\n
    return v4;\n
}\n
", "4205702:sub_402c86": null, "4205712:cgc_seed_prng": "long long cgc_seed_prng(unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = a0;\n
    return cgc_seed_prng_array(&v0, 1);\n
}\n
", "4205743:sub_402caf": null, "4205744:cgc_prng": "extern unsigned int state;\n
extern unsigned int state_n;\n
\n
long long cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v8 = (&state)[state_n];\n
    v7 = (&state)[state_n + 3 & 31];\n
    v6 = (&state)[state_n + 24 & 31];\n
    v5 = (&state)[state_n + 10 & 31];\n
    v4 = (&state)[state_n + 31 & 31];\n
    v3 = v8 ^ v7 ^ (v7 >> 8);\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    (&state)[state_n] = v1;\n
    (&state)[state_n + 31 & 31] = v0;\n
    state_n = state_n + 31 & 31;\n
    return v0;\n
}\n
", "4206053:sub_402de5": null, "4206064:cgc_random_in_range": "long long cgc_random_in_range(unsigned long a0, unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    if (a0 > a1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    else if (a0 != a1)\n
    {\n
        v2 = a1 - a0 + 1;\n
        if (!v2)\n
        {\n
            v4 = cgc_prng();\n
            return v4;\n
        }\n
        v1 = (0 CONCAT -1) /m v2;\n
        do\n
        {\n
            v3 = cgc_prng();\n
        } while (v3 >= v2 * v1);\n
        v0 = a0;\n
        v4 = v0 + (0 CONCAT v3) /m v1;\n
        return v4;\n
    }\n
    else\n
    {\n
        v4 = a0;\n
        return v4;\n
    }\n
}\n
", "4206232:sub_402e98": null, "4206240:cgc_WRAPPER_PUTC": "long long cgc_WRAPPER_PUTC(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long long v4;  // rcx\n
\n
    v1 = a0;\n
    v0 = a1;\n
    if (cgc_transmit(a0, a1, a2, v4))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4206323:sub_402ef3": null, "4206336:cgc_WRAPPER_OUTC": "long long cgc_WRAPPER_OUTC(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    a0[a2] = a1;\n
    return a2 + 1;\n
}\n
", "4206377:sub_402f29": null, "4206384:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    struct struct_0 *field_100;\n
} struct_0;\n
\n
long long cgc_WRAPPER_BUFFER_PUTC(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x40]\n
    struct_0 *v1;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned long v6;  // rcx\n
\n
    if (a0->field_100 >= 0x100)\n
    {\n
        for (v1 = a0; a0->field_100 > 0; v1 = *(&v0) + v1)\n
        {\n
            if (cgc_transmit(a0, a1, a2, rcx<8>))\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
            else if (*(&v0))\n
            {\n
                v6 = a0->field_100 - *(&v0);\n
                *(&a0->field_100) = v6;\n
            }\n
            else\n
            {\n
                v2 = -1;\n
                return v2;\n
            }\n
        }\n
    }\n
    *(&v6) = a0->field_100;\n
    *(&a0->field_100) = v6 + 1;\n
    (&a0->field_0)[v6] = a1;\n
    v2 = a2 + 1;\n
    return v2;\n
}\n
", "4206643:sub_403033": null, "4206656:cgc_putchar": "long long cgc_putchar(unsigned long long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    if (cgc_transmit(a0, v2, v3, v4))\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4206726:sub_403086": null, "4206736:cgc_puts": "long long cgc_puts(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v0 = 0;\n
    v1 = cgc_strlen(a0);\n
    while (true)\n
    {\n
        if (v0 == v1)\n
        {\n
            cgc_putchar(10);\n
            cgc_putchar(13);\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (cgc_transmit(a0, v5, v6, v7))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        else if (*(&v2))\n
        {\n
            v0 = *(&v2) + v0;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4206910:sub_40313e": null, "4206912:cgc_vprintf_buffered": "long long cgc_vprintf_buffered(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x158]\n
    unsigned long v1;  // [bp-0x150]\n
    unsigned int v2;  // [bp-0x144]\n
    void* v3;  // [bp-0x140]\n
    unsigned long long v4;  // [bp-0x138]\n
    char v5;  // [bp-0x130]\n
    unsigned short v6;  // [bp-0x30]\n
    unsigned long long v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0xc]\n
\n
    v7 = cgc_WRAPPER_BUFFER_PUTC;\n
    v6 = 0;\n
    v4 = &v5;\n
    v3 = 0;\n
    v2 = cgc_wrapper_output(v4, v7, v3, a0, a1);\n
    v1 = &v5;\n
    while (true)\n
    {\n
        if (v6 > 0)\n
        {\n
            if (cgc_transmit(v4, v7, v3, a0))\n
            {\n
                v8 = -1;\n
                return v8;\n
            }\n
            if (!*(&v0))\n
            {\n
                v8 = -1;\n
                return v8;\n
            }\n
            v6 -= *(&v0);\n
            v1 = *(&v0) + v1;\n
        }\n
        else\n
        {\n
            v8 = v2;\n
            return v8;\n
        }\n
    }\n
}\n
", "4207179:sub_40324b": null, "4207184:cgc_wrapper_output": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
long long cgc_wrapper_output(unsigned long long a0, struct struct_3 **a1, unsigned long a2, char *a3, struct_1 *a4)\n
{\n
    unsigned int v0;  // [bp-0x170]\n
    unsigned int *v1;  // [bp-0x168], Other Possible Types: unsigned long\n
    struct_1 *v2;  // [bp-0x160]\n
    unsigned int v3;  // [bp-0x154]\n
    struct struct_0 **v4;  // [bp-0x150], Other Possible Types: unsigned long\n
    struct_1 *v5;  // [bp-0x148]\n
    unsigned int v6;  // [bp-0x13c]\n
    unsigned long long *v7;  // [bp-0x138], Other Possible Types: unsigned long\n
    struct_1 *v8;  // [bp-0x130]\n
    unsigned int *v9;  // [bp-0x128]\n
    unsigned int v10;  // [bp-0x11c]\n
    struct struct_0 **v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_1 *v12;  // [bp-0x110]\n
    unsigned int *v13;  // [bp-0x108]\n
    unsigned int v14;  // [bp-0xfc]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_1 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_1 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xcc]\n
    unsigned int *v21;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_1 *v22;  // [bp-0xc0]\n
    unsigned int v23;  // [bp-0xb4]\n
    struct struct_0 **v24;  // [bp-0xb0], Other Possible Types: unsigned long\n
    struct_1 *v25;  // [bp-0xa8]\n
    unsigned int v26;  // [bp-0x9c]\n
    unsigned long v27;  // [bp-0x98]\n
    char v28;  // [bp-0x8b]\n
    char v29;  // [bp-0x8a]\n
    char v30;  // [bp-0x89]\n
    unsigned int *v31;  // [bp-0x88]\n
    unsigned long v32;  // [bp-0x80]\n
    unsigned long v33;  // [bp-0x78]\n
    unsigned int v34;  // [bp-0x6c]\n
    unsigned int v35;  // [bp-0x68]\n
    unsigned int v36;  // [bp-0x64]\n
    unsigned long long v37;  // [bp-0x60]\n
    char *v38;  // [bp-0x58]\n
    char *v39;  // [bp-0x50]\n
    char v40;  // [bp-0x41]\n
    unsigned int v41;  // [bp-0x40]\n
    unsigned int v42;  // [bp-0x3c]\n
    unsigned int v43;  // [bp-0x38]\n
    unsigned int v44;  // [bp-0x34]\n
    char *v45;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v46;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_3 **v47;  // [bp-0x18]\n
    struct_1 *v49;  // rcx\n
    unsigned long long v50;  // rdx\n
    struct struct_0 **v51;  // rax\n
    struct_1 *v52;  // rcx\n
    struct struct_0 **v53;  // rdx\n
    struct_1 *v54;  // rcx\n
    unsigned long long v55;  // rdx\n
    unsigned int *v56;  // rax\n
    struct_1 *v57;  // rcx\n
    unsigned int *v58;  // rdx\n
    struct_1 *v59;  // rcx\n
    unsigned long long v60;  // rdx\n
    unsigned int *v61;  // rax\n
    struct_1 *v62;  // rcx\n
    unsigned int *v63;  // rdx\n
    struct_1 *v64;  // rcx\n
    unsigned long long v65;  // rdx\n
    unsigned int *v66;  // rax\n
    struct_1 *v67;  // rcx\n
    unsigned int *v68;  // rdx\n
    unsigned long long v69;  // rdx\n
    struct struct_0 **v70;  // rax\n
    struct_1 *v71;  // rcx\n
    struct struct_0 **v72;  // rdx\n
    unsigned long long v73;  // rdx\n
    unsigned long long *v74;  // rax\n
    struct_1 *v75;  // rcx\n
    unsigned long long *v76;  // rdx\n
    struct_1 *v77;  // rcx\n
    unsigned long long v78;  // rdx\n
    struct struct_0 **v79;  // rax\n
    struct_1 *v80;  // rcx\n
    struct struct_0 **v81;  // rdx\n
    struct_1 *v82;  // rcx\n
    unsigned long long v83;  // rdx\n
    unsigned int *v84;  // rax\n
    struct_1 *v85;  // rcx\n
    unsigned int *v86;  // rdx\n
\n
    v47 = a1;\n
    v46 = a2;\n
    v45 = a3;\n
    v44 = 0;\n
    v43 = 0;\n
    v42 = 0;\n
    v41 = 0;\n
    while (true)\n
    {\n
        if (!*(v45))\n
            return v46;\n
        v40 = *(v45);\n
        v45 += 1;\n
        if (v40 != 36)\n
        {\n
            v46 = v47(a0, v40, v46);\n
        }\n
        else\n
        {\n
            v41 = 0;\n
            v42 = 0;\n
            v43 = 0;\n
            v44 = 0;\n
            if (!*(v45))\n
                return v46;\n
            if (*(v45) != 36)\n
            {\n
                if (*(v45) == 45)\n
                {\n
                    v44 |= 1;\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (cgc_isdigit(*(v45)))\n
                {\n
                    if (*(v45) == 48)\n
                        v44 |= 4;\n
                    for (v39 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v43 = cgc_atoi(v39);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                if (*(v45) == 46)\n
                {\n
                    v45 += 1;\n
                    if (!*(v45))\n
                        return v46;\n
                    for (v38 = v45; cgc_isdigit(*(v45)); v45 += 1);\n
                    v41 = cgc_atoi(v38);\n
                    if (!*(v45))\n
                        return v46;\n
                }\n
                v27 = *(v45) - 88;\n
                switch (v27)\n
                {\n
                case 0:\n
                    v44 |= 8;\n
                    v16 = a4;\n
                    v17 = v16->field_0;\n
                    if (v17 > 40)\n
                    {\n
                        v67 = v16;\n
                        v68 = v67->field_8;\n
                        v67->field_8 = &v68[2];\n
                        v15 = v68;\n
                    }\n
                    else\n
                    {\n
                        v64 = v16;\n
                        v65 = v17;\n
                        v66 = v65 + v64->field_10;\n
                        v64->field_0 = v65 + 8;\n
                        v15 = v66;\n
                    }\n
                    v34 = *(v15);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v34, 16, v43, v41);\n
                    break;\n
                case 11:\n
                    v2 = a4;\n
                    v3 = v2->field_0;\n
                    if (v3 > 40)\n
                    {\n
                        v85 = v2;\n
                        v86 = v85->field_8;\n
                        v85->field_8 = &v86[2];\n
                        v1 = v86;\n
                    }\n
                    else\n
                    {\n
                        v82 = v2;\n
                        v83 = v3;\n
                        v84 = v83 + v82->field_10;\n
                        v82->field_0 = v83 + 8;\n
                        v1 = v84;\n
                    }\n
                    v30 = *(v1);\n
                    v28 = v30;\n
                    v29 = 0;\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, &v28, v43, 0);\n
                    break;\n
                case 12:\n
                    v22 = a4;\n
                    v23 = v22->field_0;\n
                    if (v23 > 40)\n
                    {\n
                        v57 = v22;\n
                        v58 = v57->field_8;\n
                        v57->field_8 = &v58[2];\n
                        v21 = v58;\n
                    }\n
                    else\n
                    {\n
                        v54 = v22;\n
                        v55 = v23;\n
                        v56 = v55 + v54->field_10;\n
                        v54->field_0 = v55 + 8;\n
                        v21 = v56;\n
                    }\n
                    v36 = *(v21);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v36, 10, v43, v41);\n
                    break;\n
                case 13:\n
                    v44 |= 16;\n
                    v8 = a4;\n
                    v9 = &v8->field_4;\n
                    v10 = v8->field_4;\n
                    if (v10 > 160)\n
                    {\n
                        v75 = v8;\n
                        v76 = v75->field_8;\n
                        v75->field_8 = &v76[1];\n
                        v7 = v76;\n
                    }\n
                    else\n
                    {\n
                        v73 = v10;\n
                        v74 = v73 + v8->field_10;\n
                        *(v9) = v73 + 16;\n
                        v7 = v74;\n
                    }\n
                    v32 = *(v7);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 14:\n
                    v12 = a4;\n
                    v13 = &v12->field_4;\n
                    v14 = v12->field_4;\n
                    if (v14 > 160)\n
                    {\n
                        v71 = v12;\n
                        v72 = v71->field_8;\n
                        v71->field_8 = &v72[1];\n
                        v11 = v72;\n
                    }\n
                    else\n
                    {\n
                        v69 = v14;\n
                        v70 = v69 + v12->field_10;\n
                        *(v13) = v69 + 16;\n
                        v11 = v70;\n
                    }\n
                    v33 = *(v11);\n
                    v46 = cgc_printf_helper_float(a0, a1, v46, v43, v41, v44);\n
                    break;\n
                case 22:\n
                    v5 = a4;\n
                    v6 = v5->field_0;\n
                    if (v6 <= 40)\n
                    {\n
                        v77 = v5;\n
                        v78 = v6;\n
                        v79 = v78 + v77->field_10;\n
                        v77->field_0 = v78 + 8;\n
                        v4 = v79;\n
                    }\n
                    else\n
                    {\n
                        v80 = v5;\n
                        v81 = v80->field_8;\n
                        v80->field_8 = &v81[1];\n
                        v4 = v81;\n
                    }\n
                    v31 = *(v4);\n
                    *(v31) = v46;\n
                    break;\n
                case 27:\n
                    v25 = a4;\n
                    v26 = v25->field_0;\n
                    if (v26 > 40)\n
                    {\n
                        v52 = v25;\n
                        v53 = v52->field_8;\n
                        v52->field_8 = &v53[1];\n
                        v24 = v53;\n
                    }\n
                    else\n
                    {\n
                        v49 = v25;\n
                        v50 = v26;\n
                        v51 = v50 + v49->field_10;\n
                        v49->field_0 = v50 + 8;\n
                        v24 = v51;\n
                    }\n
                    v37 = *(v24);\n
                    v46 = cgc_printf_helper_string(a0, a1, v46, v37, v43, v41);\n
                    break;\n
                case 32:\n
                    v19 = a4;\n
                    v20 = v19->field_0;\n
                    if (v20 > 40)\n
                    {\n
                        v62 = v19;\n
                        v63 = v62->field_8;\n
                        v62->field_8 = &v63[2];\n
                        v18 = v63;\n
                    }\n
                    else\n
                    {\n
                        v59 = v19;\n
                        v60 = v20;\n
                        v61 = v60 + v59->field_10;\n
                        v59->field_0 = v60 + 8;\n
                        v18 = v61;\n
                    }\n
                    v35 = *(v18);\n
                    v0 = v44;\n
                    v46 = cgc_printf_helper_int(a0, a1, v46, v35, 16, v43, v41);\n
                    break;\n
                default:\n
                    break;\n
                }\n
                v45 += 1;\n
            }\n
            else\n
            {\n
                v46 = v47(a0, 36, v46);\n
                continue;\n
            }\n
        }\n
    }\n
}\n
", "4209130:sub_4039ea": null, "4209136:cgc_printf": "long long cgc_printf(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    unsigned long v3;  // [bp-0xd0]\n
    unsigned long v4;  // [bp-0xc8]\n
    unsigned long v5;  // [bp-0xc0]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf_buffered(a0, &v15);\n
    return v14;\n
}\n
", "4209296:cgc_vprintf": "long long cgc_vprintf(char *a0, void* a1)\n
{\n
    void* v0;  // [bp-0x30]\n
    void* v1;  // [bp-0x28]\n
    void* **v2;  // [bp-0x20]\n
\n
    v2 = &cgc_WRAPPER_PUTC;\n
    v1 = 0;\n
    v0 = 0;\n
    return cgc_wrapper_output(v1, v2, v0, a0, a1);\n
}\n
", "4209370:sub_403ada": null, "4209376:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4209540:sub_403b84": null, "4209552:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, char *a1, void* a2)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    void* v1;  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x28]\n
\n
    v2 = &cgc_WRAPPER_OUTC;\n
    v1 = 0;\n
    v0 = cgc_wrapper_output(a0, v2, v1, a1, a2);\n
    v2(a0, 0, v0);\n
    return v0;\n
}\n
", "4209652:sub_403bf4": null, "4209664:cgc_printf_int_to_string": "long long cgc_printf_int_to_string(unsigned long a0, unsigned long a1, char *a2, unsigned long a3)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v6;  // rcx\n
    unsigned long v7;  // rcx\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rcx\n
\n
    v3 = a0;\n
    v2 = a3;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a2) = 48;\n
        v4 = 1;\n
        return v4;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a1 >> 32;\n
        v3 = (0 CONCAT v3) /m a1;\n
        if (a1 != 16)\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a2[v6] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a2[v7] = v0 + 48;\n
        }\n
        else if ((v2 & 8))\n
        {\n
            v8 = v1;\n
            v1 = v8 + 1;\n
            a2[v8] = v0 + 55;\n
        }\n
        else\n
        {\n
            v9 = v1;\n
            v1 = v9 + 1;\n
            a2[v9] = v0 + 87;\n
        }\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4209956:sub_403d24": null, "4209968:cgc_printf_helper_int": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_printf_helper_int(unsigned long long a0, struct struct_1 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5, unsigned int v9, unsigned int a6)\n
{\n
    struct_0 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    struct_0 *v2;  // [bp-0x50]\n
    char v3;  // [bp-0x41]\n
    void* v4;  // [bp-0x40], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned long v7;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_1 **v8;  // [bp-0x18]\n
    unsigned long long v11;  // rax\n
    unsigned long v12;  // rcx\n
    unsigned long long v13;  // rax\n
\n
    v8 = a1;\n
    v7 = a2;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (a4 == 10 && v6 < 0)\n
    {\n
        v3 = 1;\n
        v6 = -(v6);\n
        v5 += 1;\n
    }\n
    v2 = cgc_printf_int_to_string(v6, a4, &v1, a6);\n
    v5 = &v2[v5];\n
    if (a5 > 0 && v5 < a5)\n
        v4 = a5 - v5;\n
    if (v9 > 0)\n
    {\n
        a6 |= 4;\n
        if (v2 < v9)\n
            v4 = v9 - v2;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a6 & 4))\n
        {\n
            v7 = v8(a0, 45, v7);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v11 = v4;\n
            v4 = v11 - 1;\n
            if (v11 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                v7 = v8(a0, 32, v7);\n
            else\n
                v7 = v8(a0, 48, v7);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v7 = v8(a0, 45, v7);\n
        v3 = 0;\n
    }\n
    for (v0 = v2; v0 > 0; v0 += 1)\n
    {\n
        v12 = v0 + 1;\n
        v7 = v8(a0, (&v1)[v12], v7, v12);\n
    }\n
    if (!(a6 & 1))\n
        return v7;\n
    while (true)\n
    {\n
        v13 = v4;\n
        v4 = v13 - 1;\n
        if (v13 <= 0)\n
            break;\n
        v7 = v8(a0, 32, v7);\n
    }\n
    return v7;\n
}\n
", "4210605:sub_403fad": null, "4210608:cgc_printf_float_to_string": "long long cgc_printf_float_to_string(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_10;  // tmp #10\n
    int tmp_12;  // tmp #12\n
    int tmp_11;  // tmp #11\n
    char v0;  // [bp-0x7d]\n
    char v1;  // [bp-0x7c]\n
    char v2;  // [bp-0x7b]\n
    unsigned short v3;  // [bp-0x7a]\n
    char v4;  // [bp-0x77]\n
    unsigned short v5;  // [bp-0x76]\n
    char v6;  // [bp-0x73]\n
    char v7;  // [bp-0x72]\n
    char v8;  // [bp-0x71]\n
    unsigned long long v9;  // [bp-0x70]\n
    unsigned short v10;  // [bp-0x62]\n
    char v11;  // [bp-0x5f]\n
    unsigned short v12;  // [bp-0x5e]\n
    unsigned short v13;  // [bp-0x5c]\n
    unsigned short v14;  // [bp-0x5a]\n
    unsigned long v15;  // [bp-0x58]\n
    unsigned short v16;  // [bp-0x4c]\n
    char v17;  // [bp-0x49]\n
    unsigned long v18;  // [bp-0x48], Other Possible Types: unsigned long long\n
    char *v19;  // [bp-0x38], Other Possible Types: unsigned long\n
    unsigned int v20;  // [bp-0x2c]\n
    unsigned long v21;  // [bp-0x18]\n
    char *v22;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v24;  // xmm0lq\n
    unsigned long long v25;  // xmm0lq\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rcx\n
    unsigned long v29;  // rcx\n
    unsigned long v30;  // rcx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rcx\n
    int v33;  // xmm0\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // rcx\n
    unsigned long v36;  // rcx\n
    unsigned long v37;  // rcx\n
    unsigned long v38;  // rcx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long v43;  // rcx\n
    unsigned long v44;  // rcx\n
    unsigned long v45;  // rcx\n
    char *v46;  // rax, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v47;  // rcx\n
    unsigned long v48;  // rcx\n
    unsigned long v50;  // rcx\n
    unsigned long v51;  // rcx\n
    unsigned long v52;  // rcx\n
    unsigned long v53;  // rcx\n
    unsigned long v54;  // rcx\n
    unsigned long v56;  // rcx\n
    unsigned long v57;  // rcx\n
    unsigned long v58;  // rcx\n
    unsigned long v59;  // rcx\n
    unsigned long v60;  // rcx\n
    unsigned long v61;  // rcx\n
    unsigned long v62;  // rcx\n
    unsigned int v64;  // eax\n
    unsigned long v65;  // rcx\n
\n
    v21 = v24;\n
    v20 = a2;\n
    v19 = 0;\n
    cgc_pow();\n
    v18 = 0x4024000000000000;\n
    v25 = v21;\n
    if ((((CmpF(v25, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v26 = v19;\n
        v19 = v26 + 1;\n
        *((a1 + v26)) = 48;\n
        v27 = v19;\n
        v19 = v27 + 1;\n
        *((a1 + v27)) = 46;\n
        for (v17 = 0; v17 < a0; v17 += 1)\n
        {\n
            v29 = v19;\n
            v19 = v29 + 1;\n
            *((a1 + v29)) = 48;\n
        }\n
        if ((v20 & 16))\n
        {\n
            v34 = v19;\n
            v19 = v34 + 1;\n
            *((a1 + v34)) = 101;\n
            v35 = v19;\n
            v19 = v35 + 1;\n
            *((a1 + v35)) = 43;\n
            v36 = v19;\n
            v19 = v36 + 1;\n
            *((a1 + v36)) = 48;\n
            v37 = v19;\n
            v19 = v37 + 1;\n
            *((a1 + v37)) = 48;\n
            v38 = v19;\n
            v19 = v38 + 1;\n
            *((a1 + v38)) = 48;\n
        }\n
        v22 = v19;\n
        return v22;\n
    }\n
    if ((((CmpF(v21, v21) & 69) >> 2) & 1))\n
    {\n
        v30 = v19;\n
        v19 = v30 + 1;\n
        *((a1 + v30)) = 78;\n
        v31 = v19;\n
        v19 = v31 + 1;\n
        *((a1 + v31)) = 97;\n
        v32 = v19;\n
        v19 = v32 + 1;\n
        *((a1 + v32)) = 78;\n
        v22 = v19;\n
        return v22;\n
    }\n
    v33 = (0 CONCAT v21) & 170141183460469231722463931679029329919;\n
    if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
    {\n
        v39 = v19;\n
        v19 = v39 + 1;\n
        *((a1 + v39)) = 73;\n
        v40 = v19;\n
        v19 = v40 + 1;\n
        *((a1 + v40)) = 78;\n
        v41 = v19;\n
        v19 = v41 + 1;\n
        *((a1 + v41)) = 70;\n
        v22 = v19;\n
        return v22;\n
    }\n
    if (!(CmpF(v21, 0x4202a05f20000000) & 1))\n
        v20 |= 16;\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) == 1)\n
        v21 = (0 CONCAT v18) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    else\n
        v21 = (0 CONCAT v18 ^ 0x8000000000000000) * (0 CONCAT 0x3fe0000000000000) + (0 CONCAT v21);\n
    cgc_log10();\n
    v16 = v21;\n
    if ((v20 & 16))\n
    {\n
        v14 = v16 - a0;\n
        if ((((CmpF(0x3ff0000000000000, v21) & 69) | ((CmpF(0x3ff0000000000000, v21) & 69) >> 6)) & 1) == 1)\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        else\n
        {\n
            cgc_pow();\n
            v15 = 0x4024000000000000;\n
        }\n
        v18 = v15;\n
    }\n
    if ((((CmpF(0, v21) & 69) | ((CmpF(0, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v21 ^= 0x8000000000000000;\n
        v19[a1] = 45;\n
        v19 += 1;\n
    }\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    *(&v33) = v18;\n
    if ((((CmpF(v33, v21) & 69) | ((CmpF(v33, v21) & 69) >> 6)) & 1) != 1)\n
    {\n
        v43 = v19;\n
        v19 = v43 + 1;\n
        *((a1 + v43)) = 48;\n
        v44 = v19;\n
        v19 = v44 + 1;\n
        *((a1 + v44)) = 46;\n
        v11 = 1;\n
    }\n
    else if (v16 < 0)\n
    {\n
        *(&v33) = v21;\n
        if ((((CmpF(v33, v18) & 69) | ((CmpF(v33, v18) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
        {\n
            v45 = v19;\n
            v19 = v45 + 1;\n
            *((a1 + v45)) = 48;\n
            v46 = a1;\n
            v47 = v19;\n
            v19 = v47 + 1;\n
            *((a1 + v47)) = 46;\n
            v10 = v16;\n
            while (true)\n
            {\n
                *(&v46) = v10 + 1;\n
                v10 = v46;\n
                if (v46 >= 0)\n
                    break;\n
                v46 = a1;\n
                v48 = v19;\n
                v19 = v48 + 1;\n
                *((a1 + v48)) = 48;\n
                v12 += 1;\n
            }\n
            v11 = 1;\n
        }\n
    }\n
    while (true)\n
    {\n
        v1 = 1;\n
        if (v16 < 0)\n
        {\n
            *(&v33) = v21;\n
            v1 = !((CmpF(v33, v18) & 69 | (CmpF(v33, v18) & 69) >> 6) & 1);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        cgc_pow();\n
        v9 = 0x4024000000000000;\n
        *(&v33) = v9;\n
        if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) == 1)\n
        {\n
LABEL_404641:\n
            if ((((CmpF(v16, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                *(&v33) = v21;\n
                if ((((CmpF(v33, 0) & 69) | ((CmpF(v33, 0) & 69) >> 6)) & 1) != 1 && !(v20 & 16))\n
                {\n
                    v56 = v19;\n
                    v19 = v56 + 1;\n
                    *((a1 + v56)) = 46;\n
                    v11 = 1;\n
                }\n
            }\n
            if (v12 >= a0)\n
                break;\n
            v16 -= 1;\n
        }\n
        else\n
        {\n
            v33 = (0 CONCAT v9) & 170141183460469231722463931679029329919;\n
            if ((((CmpF(v33, 0x7ff0000000000000) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x7ff0000000000000<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
                goto LABEL_404641;\n
            tmp_10 = DivV(tmp_12, tmp_11);\n
            v33 = tmp_10;\n
            cgc_floor();\n
            v8 = v33;\n
            v21 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v9) + (0 CONCAT v21);\n
            if ((v20 & 16) && !v11)\n
            {\n
                if (!v13)\n
                    v13 = v16;\n
                if (!v8)\n
                {\n
                    v13 -= 1;\n
                }\n
                else\n
                {\n
                    v52 = v19;\n
                    v19 = v52 + 1;\n
                    *((a1 + v52)) = v8 + 48;\n
                    v53 = v19;\n
                    v19 = v53 + 1;\n
                    *((a1 + v53)) = 46;\n
                    v11 = 1;\n
                }\n
                goto LABEL_404637;\n
            }\n
            if ((((CmpF(0, v16) & 69) | ((CmpF(0, v16) & 69) >> 6)) & 1) != 1 && !v11)\n
            {\n
                v50 = v19;\n
                v19 = v50 + 1;\n
                *((a1 + v50)) = 48;\n
                v51 = v19;\n
                v19 = v51 + 1;\n
                *((a1 + v51)) = 46;\n
                v11 = 1;\n
            }\n
            v54 = v19;\n
            v19 = v54 + 1;\n
            *((a1 + v54)) = v8 + 48;\n
            if (v11)\n
                v12 += 1;\n
LABEL_404637:\n
            goto LABEL_404641;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v11)\n
            v0 = v12 < a0;\n
        if (!(v0 & 1))\n
            break;\n
        v57 = v19;\n
        v19 = v57 + 1;\n
        *((a1 + v57)) = 48;\n
        v12 += 1;\n
    }\n
    if ((v20 & 16))\n
    {\n
        v58 = v19;\n
        v19 = v58 + 1;\n
        *((a1 + v58)) = 101;\n
        if (v13 >= 0)\n
        {\n
            v60 = v19;\n
            v19 = v60 + 1;\n
            *((a1 + v60)) = 43;\n
        }\n
        else\n
        {\n
            v13 = -(v13);\n
            v59 = v19;\n
            v19 = v59 + 1;\n
            *((a1 + v59)) = 45;\n
        }\n
        if (v13)\n
        {\n
            v6 = 0;\n
            cgc_log10();\n
            v5 = v13;\n
            for (v4 = v5; v4 < 2; v4 += 1)\n
            {\n
                v62 = v19;\n
                v19 = v62 + 1;\n
                *((a1 + v62)) = 48;\n
                v6 += 1;\n
            }\n
            while (true)\n
            {\n
                tmp_10 = v6;\n
                v6 += 1;\n
                if (tmp_10 >= 3)\n
                    break;\n
                cgc_pow();\n
                v3 = 0;\n
                v64 = v13;\n
                v2 = (v64 >> 31 CONCAT v64) /m v3;\n
                v65 = v19;\n
                v19 = v65 + 1;\n
                *((a1 + v65)) = v2 + 48;\n
                v13 -= (v3 * v2);\n
                v5 -= 1;\n
            }\n
        }\n
        else\n
        {\n
            for (v7 = 0; v7 < 3; v7 += 1)\n
            {\n
                v61 = v19;\n
                v19 = v61 + 1;\n
                *((a1 + v61)) = 48;\n
            }\n
        }\n
    }\n
    v22 = v19;\n
    return v22;\n
}\n
", "4212954:sub_4048da": null, "4212960:cgc_printf_helper_float": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_printf_helper_float(unsigned long long a0, struct struct_0 **a1, unsigned long a2, unsigned long a3, unsigned long a4, unsigned long a5)\n
{\n
    struct_1 *v0;  // [bp-0x80], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x78]\n
    void* v2;  // [bp-0x58], Other Possible Types: unsigned long\n
    char v3;  // [bp-0x49]\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned long v7;  // [bp-0x28]\n
    unsigned long v8;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct struct_0 **v9;  // [bp-0x18]\n
    unsigned long v11;  // xmm0lq\n
    unsigned long long v12;  // rax\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rax\n
\n
    v9 = a1;\n
    v8 = a2;\n
    v7 = v11;\n
    v6 = a3;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if ((((CmpF(0, v7) & 69) | ((CmpF(0, v7) & 69) >> 6)) & 1) != 1)\n
    {\n
        v7 ^= 0x8000000000000000;\n
        v3 = 1;\n
        v5 += 1;\n
    }\n
    if (!a4)\n
        v2 = cgc_printf_float_to_string(6, &v1, a5);\n
    else\n
        v2 = cgc_printf_float_to_string(a4, &v1, a5);\n
    v5 = v2 + v5;\n
    if (v6 > 0 && v5 < v6)\n
        v4 = v6 - v5;\n
    if (!(a5 & 1))\n
    {\n
        if (v3 && v4 > 0 && (a5 & 4))\n
        {\n
            v8 = v9(a0, 45, v8);\n
            v3 = 0;\n
        }\n
        while (true)\n
        {\n
            v12 = v4;\n
            v4 = v12 - 1;\n
            if (v12 <= 0)\n
                break;\n
            if ((a5 & 4))\n
                v8 = v9(a0, 48, v8);\n
            else\n
                v8 = v9(a0, 32, v8);\n
        }\n
    }\n
    if (v3)\n
    {\n
        v8 = v9(a0, 45, v8);\n
        v3 = 0;\n
    }\n
    for (v0 = 0; v0 < v2; v0 += 1)\n
    {\n
        v13 = v0;\n
        v8 = v9(a0, (&v1)[v13], v8, v13);\n
    }\n
    if (!(a5 & 1))\n
        return v8;\n
    while (true)\n
    {\n
        v14 = v4;\n
        v4 = v14 - 1;\n
        if (v14 <= 0)\n
            break;\n
        v8 = v9(a0, 32, v8);\n
    }\n
    return v8;\n
}\n
", "4213607:sub_404b67": null, "4213616:cgc_printf_helper_string": "long long cgc_printf_helper_string(unsigned long long a0, struct struct_0 **a1, unsigned long a2, char *a3, unsigned long a4, unsigned long a5, unsigned int v6)\n
{\n
    void* v0;  // [bp-0x48], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x40]\n
    char *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct struct_0 **v4;  // [bp-0x20]\n
    unsigned long v5;  // [bp-0x10]\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx\n
    unsigned long long v11;  // rax\n
\n
    v4 = a1;\n
    v3 = a2;\n
    if (!a5 && !a4)\n
    {\n
        for (v2 = a3; *(v2); v2 += 1)\n
        {\n
            v7 = v2;\n
            v3 = v4(a0, *(v7), v3, v7);\n
        }\n
        v5 = v3;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v2);\n
    v0 = 0;\n
    if (a5 > 0 && v1 > a5)\n
        v1 = a5;\n
    if (a4 > 0 && v1 < a4)\n
        v0 = a4 - v1;\n
    if (!(v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v8 = v0;\n
            v0 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(v6 & 4))\n
                v3 = v4(a0, 32, v3);\n
            else\n
                v3 = v4(a0, 48, v3);\n
        }\n
    }\n
    while (true)\n
    {\n
        v9 = v1;\n
        v1 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v10 = v2;\n
        v2 = v10 + 1;\n
        v3 = v4(a0, *(v10), v3, v10);\n
    }\n
    if ((v6 & 1))\n
    {\n
        while (true)\n
        {\n
            v11 = v0;\n
            v0 = v11 - 1;\n
            if (v11 <= 0)\n
                break;\n
            v3 = v4(a0, 32, v3);\n
        }\n
    }\n
    v5 = v3;\n
    return v5;\n
}\n
", "4214150:sub_404d86": null, "4214160:cgc_rand": "long long cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4214178:sub_404da2": null, "4214192:cgc_srand": "long long cgc_srand(unsigned long a0)\n
{\n
    return cgc_seed_prng(a0);\n
}\n
", "4214217:sub_404dc9": null, "4214224:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // rcx\n
\n
    v2 = a0;\n
    v1 = 0;\n
    for (v0 = 0; cgc_isspace(*(v2)); v2 += 1);\n
    if (!*(v2))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v2) == 45)\n
    {\n
        v0 = 1;\n
        v2 += 1;\n
    }\n
    for (; cgc_isdigit(*(v2)); v1 = v1 * 10 + *(v5) - 48)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    if (v0)\n
    {\n
        v3 = -(v1);\n
        return v3;\n
    }\n
    v3 = v1;\n
    return v3;\n
}\n
", "4214450:sub_404eb2": null, "4214464:cgc_atof": "double cgc_atof(long long a0)\n
{\n
    char v0;  // [bp-0x31]\n
    int tmp_12;  // tmp #12\n
    int tmp_14;  // tmp #14\n
    int tmp_13;  // tmp #13\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned long v4;  // [bp-0x18]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    for (v1 = a0; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == 46)\n
        {\n
            *(v1) = 0;\n
            v1 += 1;\n
            break;\n
        }\n
    }\n
    v4 = cgc_atoi(v2);\n
    if (!*(v1))\n
        return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
    v3 = cgc_atoi(v1);\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1)\n
            v0 = cgc_isdigit(*(v1));\n
        if (!(v0 & 1))\n
            break;\n
        tmp_12 = DivV(tmp_14, tmp_13);\n
        *(&v3) = tmp_12;\n
        v1 += 1;\n
    }\n
    return Conv(128->64, ((0x0<64> CONCAT Load(addr=stack_base-24, size=8, endness=Iend_LE)) + Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))));\n
}\n
", "4214738:sub_404fd2": null, "4214752:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v0;  // [bp-0x20]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v4;  // rax\n
    char *v5;  // rax\n
\n
    v2 = a0;\n
    v1 = a1;\n
    for (v0 = v2; *(v1); *(v5) = tmp_19)\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v2;\n
        v2 = v5 + 1;\n
    }\n
    *(v2) = 0;\n
    return v0;\n
}\n
", "4214840:sub_405038": null, "4214848:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        if (!v0[a1])\n
            break;\n
        v0[a0] = v0[a1];\n
    }\n
    for (; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4215005:sub_4050dd": null, "4215008:cgc_memcpy": "long long cgc_memcpy(char *a0, char *a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = a0;\n
    v2 = a1;\n
    v1 = a2;\n
    for (v0 = v3; v1 >= 4; v1 -= 4)\n
    {\n
        *(&v3) = *(v2);\n
        v3 += 4;\n
        v2 += 4;\n
    }\n
    for (; v1 > 0; v1 -= 1)\n
    {\n
        *(v3) = *(v2);\n
        v3 += 1;\n
        v2 += 1;\n
    }\n
    return v0;\n
}\n
", "4215171:sub_405183": null, "4215184:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v3;  // rax\n
\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4215250:sub_4051d2": null, "4215264:cgc_bzero": "long long cgc_bzero(unsigned long a0, char *a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // rcx\n
\n
    for (v0 = a1; v0; v2[1 + a0] = 0)\n
    {\n
        v2 = v0;\n
        v0 = v2 + 1;\n
    }\n
    *((a0 + v0)) = 0;\n
    return a0;\n
}\n
", "4215330:sub_405222": null, "4215344:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char *v1;  // [bp-0x28]\n
    unsigned long v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
    char *v6;  // rax\n
\n
    v3 = a0;\n
    v2 = a2;\n
    v1 = v3;\n
    for (v0 = a1 * 0x1000000 | a1 * 0x10000 | a1 * 0x100 | a1; v2 >= 4; v2 -= 4)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(&v5) = v0;\n
    }\n
    for (; v2 > 0; v2 -= 1)\n
    {\n
        v6 = v3;\n
        v3 = v6 + 1;\n
        *(v6) = a1;\n
    }\n
    return v1;\n
}\n
", "4215514:sub_4052da": null, "4215520:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = v1;\n
        if (v0 >= cgc_strlen(a0))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (a0[v1] == a1)\n
        {\n
            v2 = &a0[v1];\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4215674:sub_40537a": null, "4215680:cgc_strtok": "extern struct_0 *cgc_StrtokNext;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    if (!a1)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v4)\n
    {\n
        if (cgc_StrtokNext)\n
        {\n
            v4 = cgc_StrtokNext;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a1, *(v4)))\n
            v0 = *(v4);\n
        if (!(v0 & 1))\n
            break;\n
        v4 += 1;\n
    }\n
    if (!*(v4))\n
    {\n
        cgc_StrtokNext = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v1 = cgc_strlen(v4);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= v1)\n
        {\n
            cgc_StrtokNext = 0;\n
            v5 = v4;\n
            return v5;\n
        }\n
        if (cgc_strchr(a1, *((v4 + v3))))\n
            break;\n
        v3 += 1;\n
    }\n
    *((v4 + v3)) = 0;\n
    for (v2 = v3 + 1; v2 < v1; v2 += 1)\n
    {\n
        if (!cgc_strchr(a1, *((v4 + v2))))\n
        {\n
            cgc_StrtokNext = v4 + v2;\n
            v5 = v4;\n
            return v5;\n
        }\n
        *((v4 + v2)) = 0;\n
    }\n
    if (v2 == v1)\n
        cgc_StrtokNext = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4216174:sub_40556e": null, "4216176:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x21]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v2 = a0;\n
    v1 = a1;\n
    if (v2 && !v1)\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!v2 && v1)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (!v2 && !v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) > *(v1))\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        if (*(v2) < *(v1))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    if (*(v2) && !*(v1))\n
    {\n
        v3 = 1;\n
        return v3;\n
    }\n
    if (!*(v2) && *(v1))\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4216545:sub_4056e1": null, "4216560:cgc_strcat": "long long cgc_strcat(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a1)\n
    {\n
        v2 = cgc_strlen(a0);\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = v1;\n
            if (v0 >= cgc_strlen(a1))\n
                break;\n
            a0[v2] = a1[v1];\n
            v2 += 1;\n
            v1 += 1;\n
        }\n
        a0[v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4216734:sub_40579e": null, "4216736:cgc_InitFilesystem": "extern unsigned int FH;\n
extern char FS;\n
extern char g_40cc00;\n
extern char g_40dc00;\n
extern char g_40dc20;\n
extern unsigned short g_40dc40;\n
extern unsigned short g_40dc42;\n
extern char g_40dc44;\n
extern char g_40ec64;\n
extern char g_40ec84;\n
extern unsigned short g_40eca4;\n
extern unsigned short g_40eca6;\n
\n
long long cgc_InitFilesystem(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    char *v0;  // [bp-0x58], Other Possible Types: unsigned long\n
    int tmp_20;  // tmp #20\n
    char v1;  // [bp-0x49]\n
    char v2;  // [bp-0x48]\n
    char v3;  // [bp-0x28]\n
\n
    v0 = 0x4347c000;\n
    cgc_bzero(&FS, 0x10640);\n
    cgc_bzero(&FH, 0x180);\n
    cgc_bzero(&v3, 0x20);\n
    for (v1 = 0; v1 < 10; v1 += 1)\n
    {\n
        (&v3)[v1] = cgc_random_in_range(65, 122);\n
    }\n
    (&v3)[v1] = 0;\n
    cgc_bzero(&v2, 0x20);\n
    for (v1 = 0; v1 < 31; v1 += 1)\n
    {\n
        (&v2)[v1] = cgc_random_in_range(65, 122);\n
    }\n
    (&v2)[v1] = 0;\n
    cgc_strcpy(&FS, \"passwd\");\n
    cgc_strcpy(&g_40dc00, \"root\");\n
    cgc_strcpy(&g_40dc20, \"root\");\n
    g_40dc40 = 0x700;\n
    cgc_sprintf(&g_40cc00, \"$s:secure:secure\\n
crs:crs:crs\\n
$s:root:root\", &v2, &v3, a4);\n
    g_40dc42 = cgc_strlen(&g_40cc00);\n
    cgc_strcpy(&g_40dc44, \"confidential\");\n
    cgc_strcpy(&g_40ec64, \"secure\");\n
    cgc_strcpy(&g_40ec84, \"secure\");\n
    g_40eca4 = 0x700;\n
    v0 += 4;\n
    v1 = 0;\n
    while (v1 < 4)\n
    {\n
        if (!*(v0))\n
        {\n
LABEL_405999:\n
            v1 = 0;\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            if (*(v0) == 10)\n
                goto LABEL_405999;\n
            tmp_20 = v1;\n
            v1 += 1;\n
            (&FS)[4228 + tmp_20] = *(v0);\n
            v0 += 1;\n
        }\n
    }\n
    g_40eca6 = 4;\n
    return v1;\n
}\n
", "4217330:sub_4059f2": null, "4217344:cgc_ListFiles": "extern char FS;\n
\n
long long cgc_ListFiles()\n
{\n
    char v0;  // [bp-0x9]\n
    char v1;  // [bp-0x8]\n
    unsigned long long v3;  // rbp\n
\n
    v3 = &v1;\n
    cgc_puts(\"Directory listing\");\n
    cgc_printf(\"$-32s $-32s $-32s $5s\\n
\\r\", \"Filename\", \"Owner\", \"Group\", \"Size\");\n
    for (v0 = 0; v0 < 16; v0 += 1)\n
    {\n
        if ((&FS)[4196 * v0])\n
            cgc_printf(\"$-32s $-32s $-32s $5d\\n
\\r\", &(&FS)[4196 * v0], &(&FS)[4196 * v0 + 4128], &(&FS)[4196 * v0 + 4160], *(&(&FS)[4194 + 4196 * v0]));\n
    }\n
    return v0;\n
}\n
", "4217604:sub_405b04": null, "4217616:cgc_Mode2Perms": "long long cgc_Mode2Perms(char *a0)\n
{\n
    unsigned short v0;  // [bp-0x12]\n
\n
    v0 = 0;\n
    if (*(a0) == 114)\n
        v0 |= 4;\n
    if (*(a0) == 119)\n
        v0 |= 2;\n
    return v0;\n
}\n
", "4217690:sub_405b5a": null, "4217696:cgc_fopen": "extern struct_0 *FH;\n
extern char FS;\n
extern char g_41e3a1;\n
extern char g_41e3c1;\n
\n
long long cgc_fopen(char *a0, char *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    unsigned short v4[2098];  // [bp-0x30], Other Possible Types: unsigned long\n
    unsigned short v5;  // [bp-0x24]\n
    char v6;  // [bp-0x22]\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    *(&v4[0]) = 0;\n
    if (a0 && a1)\n
    {\n
        if (cgc_strlen(a0) > 31)\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
        else if (cgc_strlen(a1) <= 1)\n
        {\n
            if (*(a1) != 114 && *(a1) != 119)\n
            {\n
                v7 = 0;\n
                return v7;\n
            }\n
            for (v3 = 0; v3 < 16; v3 += 1)\n
            {\n
                if (!(&FS)[4196 * v3] && !v4)\n
                    *(&v4[0]) = &(&FS)[4196 * v3];\n
                if (!cgc_strcmp(a0, &(&FS)[4196 * v3]))\n
                    break;\n
            }\n
            if (v3 == 16)\n
            {\n
                if (*(a1) == 114)\n
                {\n
                    v7 = 0;\n
                    return v7;\n
                }\n
                goto LABEL_405e94;\n
            }\n
            if (!a2 && cgc_strcmp(&g_41e3a1, \"root\"))\n
            {\n
                if (!cgc_strcmp(&(&FS)[4196 * v3 + 4128], &g_41e3a1))\n
                {\n
                    v5 = (*(&(&FS)[4192 + 4196 * v3]) & 0xf00) >> 8;\n
                    v2 = v5;\n
                    if (!(v2 & cgc_Mode2Perms(a1)))\n
                    {\n
                        v7 = 0;\n
                        return v7;\n
                    }\n
                }\n
                else if (cgc_strcmp(&(&FS)[4196 * v3 + 4160], &g_41e3c1))\n
                {\n
                    v5 = *(&(&FS)[4192 + 4196 * v3]) & 15;\n
                    v0 = v5;\n
                    if (!(v0 & cgc_Mode2Perms(a1)))\n
                    {\n
                        v7 = 0;\n
                        return v7;\n
                    }\n
                }\n
                else\n
                {\n
                    v5 = (*(&(&FS)[4192 + 4196 * v3]) & 240) >> 4;\n
                    v1 = v5;\n
                    if (!(v1 & cgc_Mode2Perms(a1)))\n
                    {\n
                        v7 = 0;\n
                        return v7;\n
                    }\n
                }\n
LABEL_405e94:\n
                for (v6 = 0; v6 < 16; v6 += 1)\n
                {\n
                    if (!(&FH)[3 * v6])\n
                        break;\n
                }\n
                if (v6 == 16)\n
                {\n
                    v7 = 0;\n
                    return v7;\n
                }\n
                if (*(a1) != 119)\n
                {\n
                    (&FH)[3 * v6] = &(&FS)[4196 * v3];\n
                    *(&(&FH)[2 + 3 * v6]) = 4;\n
                }\n
                else if (v3 != 16)\n
                {\n
                    (&FH)[3 * v6] = &(&FS)[4196 * v3];\n
                    *(&(&FH)[2 + 3 * v6]) = 2;\n
                    cgc_bzero(&(&FH)[3 * v6]->padding_0[32], 0x1000);\n
                    (&FH)[3 * v6]->field_1062 = 0;\n
                }\n
                else if (v4)\n
                {\n
                    cgc_strcpy(v4, a0);\n
                    cgc_strcpy(v4 + 4128, &g_41e3a1);\n
                    cgc_strcpy(v4 + 4160, &g_41e3c1);\n
                    *((v4 + 4192)) = 0x700;\n
                    cgc_bzero(v4 + 32, 0x1000);\n
                    *((v4 + 4194)) = 0;\n
                    (&FH)[3 * v6] = v4;\n
                    *(&(&FH)[2 + 3 * v6]) = 2;\n
                }\n
                else\n
                {\n
                    v7 = 0;\n
                    return v7;\n
                }\n
                (&FH)[1 + 3 * v6] = &(&FH)[3 * v6]->padding_0[32];\n
                v7 = &(&FH)[3 * v6];\n
                return v7;\n
            }\n
            goto LABEL_405e94;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4219133:sub_4060fd": null, "4219136:cgc_fgets": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fgets(char *a0, unsigned long a1, struct_0 *a2)\n
{\n
    char v0;  // [bp-0x2d]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x1c], Other Possible Types: unsigned long\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
    char *v5;  // rax\n
    unsigned long v6;  // rcx\n
\n
    v2 = a1;\n
    if (a0 && a2 && v2)\n
    {\n
        if (!a2->field_8)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (a2->field_8->field_0)\n
        {\n
            v1 = 0;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (a2->field_8->field_0)\n
                    v0 = v2 - 1;\n
                if (!(v0 & 1))\n
                {\n
                    a0[v1] = 0;\n
                    v3 = a0;\n
                    return v3;\n
                }\n
                else if (a2->field_8->field_0 != 10)\n
                {\n
                    v5 = a2->field_8;\n
                    a2->field_8 = &v5[1];\n
                    v6 = v1;\n
                    v1 = v6 + 1;\n
                    a0[v6] = *(v5);\n
                    v2 -= 1;\n
                }\n
                else\n
                {\n
                    a2->field_8 = a2->field_8 + 1;\n
                    a0[v1] = 0;\n
                    v3 = a0;\n
                    return v3;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4219460:sub_406244": null, "4219472:cgc_fclose": "long long cgc_fclose(unsigned long long a0[2])\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    a0[0] = 0;\n
    a0[1] = 0;\n
    v0 = 1;\n
    return v0;\n
}\n
", "4219533:sub_40628d": null, "4219536:cgc_fread": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    unsigned long long field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4194];\n
    unsigned short field_1062;\n
} struct_0;\n
\n
long long cgc_fread(char *a0, unsigned long a1, unsigned int a2, struct_1 *a3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    if (a0 && a3 && a1 && a2)\n
    {\n
        if (a3->field_0 && a3->field_8 && a2 * a1 <= 0x1000)\n
        {\n
            if (a2 * a1 > a3->field_0->field_1062)\n
            {\n
                cgc_memcpy(a0, &a3->field_0->padding_0[32], a3->field_0->field_1062);\n
                v0 = a3->field_0->field_1062;\n
                return v0;\n
            }\n
            cgc_memcpy(a0, &a3->field_0->padding_0[32], a2 * a1);\n
            v0 = a2 * a1;\n
            return v0;\n
        }\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4219823:sub_4063af": null, "4219824:cgc_fwrite": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char *field_8;\n
    char field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4194];\n
    unsigned short field_1062;\n
} struct_0;\n
\n
long long cgc_fwrite(char *a0, unsigned long a1, unsigned int a2, struct_1 *a3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
    struct_0 *v2;  // rax\n
\n
    if (a0 && a3)\n
    {\n
        if (a3->field_0 && a3->field_8 && a2 * a1 <= 0x1000 && a3->field_10 == 2)\n
        {\n
            cgc_memcpy(a3->field_8, a0, a2 * a1);\n
            v2 = a3->field_0;\n
            v2->field_1062 = v2->field_1062 + a2 * a1;\n
            v0 = a2 * a1;\n
            return v0;\n
        }\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4220045:sub_40648d": null, "4220048:cgc_Dump": "long long cgc_Dump(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x428]\n
    void* v1;  // [bp-0x20]\n
    char v2;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = cgc_fopen(a0, \"r\", 0);\n
    if (!v1)\n
    {\n
        cgc_printf(\"Unable to open file '$s'\\n
\\r\", a0, 0, a3, a4);\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (cgc_fgets(&v0, 0x400, v1))\n
    {\n
        cgc_puts(&v0);\n
    }\n
    cgc_fclose(v1);\n
    v2 = 1;\n
    return v2;\n
}\n
", "4220221:sub_40653d": null, "4220224:cgc_ReadShellPrompt": "extern char cgc_ENV;\n
extern unsigned long long g_40a1d5;\n
extern unsigned long long g_40a1df;\n
extern char g_41d3a1;\n
\n
long long cgc_ReadShellPrompt(unsigned long long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x14d]\n
    unsigned int v1;  // [bp-0x14c]\n
    char v2;  // [bp-0x148]\n
    char v3;  // [bp-0x3c]\n
    char v4;  // [bp-0x3a]\n
    char v5;  // [bp-0x39]\n
    unsigned long v6;  // [bp-0x38]\n
    char v7;  // [bp-0x30]\n
    char *v8;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v11;  // [bp-0xc]\n
    char *v13;  // rsi, Other Possible Types: unsigned long\n
    char *v14;  // rcx\n
    unsigned long v15;  // r9\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rcx\n
\n
    v10 = a0;\n
    v9 = a1;\n
    v8 = 0;\n
    v4 = 0;\n
    v3 = 255;\n
    v1 = 0;\n
    v13 = 0x100;\n
    cgc_bzero(&v2, 0x100);\n
    while (true)\n
    {\n
        a3 = cgc_receive(a0, v13, a2, a3);\n
        v0 = 0;\n
        if (!a3)\n
        {\n
            a3 = a2 - 1;\n
            v0 = v8 < a3;\n
        }\n
        if (!(v0 & 1))\n
        {\n
LABEL_406d66:\n
            if (!*(&v7))\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            v9[v8] = 0;\n
            v11 = v8;\n
            return v11;\n
        }\n
        if (!*(&v7))\n
        {\n
            *(v9) = 0;\n
            v11 = 0;\n
            return v11;\n
        }\n
        if (v5 == 127)\n
        {\n
            if (v1 == v8)\n
            {\n
                cgc_printf(&g_40a1d5, v13, a2, a3, a4);\n
                v8 -= 1;\n
                v1 -= 1;\n
                continue;\n
            }\n
            else\n
            {\n
                v6 = v1 - 1;\n
                while (true)\n
                {\n
                    v14 = v8 - 1;\n
                    if (v6 >= v14)\n
                        break;\n
                    a2 = v9[1 + v6];\n
                    v9[v6] = a2;\n
                    v6 += 1;\n
                }\n
                v8 -= 1;\n
                v1 -= 1;\n
                cgc_EraseLine(0);\n
                cgc_PrintPrompt(0, v13, a2, v14, a4, v15);\n
                v16 = v8;\n
                v9[v16] = 0;\n
                cgc_printf(\"$s\", v9, a2, v16, a4);\n
                a3 = v1;\n
                cgc_CursorLeft(v8 - a3);\n
            }\n
            continue;\n
        }\n
        if (v5 == 3)\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        if (v5 == 5)\n
        {\n
            cgc_EraseLine(0);\n
            cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
            a3 = v8;\n
            v9[a3] = 0;\n
            cgc_printf(\"$s\", v9, a2, a3, a4);\n
            v1 = v8;\n
            continue;\n
        }\n
        if (v5 == 21)\n
        {\n
            cgc_EraseLine(0);\n
            cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
            v8 = 0;\n
            v1 = 0;\n
            continue;\n
        }\n
        if (v5 == 4)\n
        {\n
            if (v8 <= 0)\n
            {\n
                cgc_printf(&g_40a1df, v13, a2, a3, a4);\n
                cgc_printf(\"exit  \", v13, a2, a3, a4);\n
                cgc_strcpy(v9, \"exit\");\n
                v11 = 1;\n
                return v11;\n
            }\n
            cgc_printf(&g_40a1df, v13, a2, a3, a4);\n
            continue;\n
        }\n
        if (v5 == 27)\n
        {\n
            if (cgc_receive(a0, v13, a2, a3))\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (!*(&v7))\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (v5 == 91)\n
            {\n
                if (cgc_receive(a0, v13, a2, a3))\n
                {\n
                    *(v9) = 0;\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                if (!*(&v7))\n
                {\n
                    *(v9) = 0;\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                if (v5 == 65)\n
                {\n
                    if (!cgc_ENV)\n
                    {\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        a3 = v8;\n
                        v9[a3] = 0;\n
                        cgc_printf(\"$s\", v9, a2, a3, a4);\n
                        v1 = v8;\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        if (v3 == -1)\n
                        {\n
                            v9[v8] = 0;\n
                            v13 = v9;\n
                            cgc_strcpy(&v2, v13);\n
                        }\n
                        v3 += 1;\n
                        a3 = cgc_ENV;\n
                        if (v3 >= cgc_ENV)\n
                            v3 = cgc_ENV - 1;\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, cgc_ENV, a4, v15);\n
                        cgc_strcpy(v9, &(&g_41d3a1)[0x100 * v3]);\n
                        v8 = cgc_strlen(&(&g_41d3a1)[0x100 * v3]);\n
                        v1 = v8;\n
                        cgc_printf(\"$s\", &(&g_41d3a1)[0x100 * v3], a2, cgc_ENV, a4);\n
                    }\n
                    continue;\n
                }\n
                else if (v5 == 66)\n
                {\n
                    if (v3 == -1)\n
                    {\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        a3 = v8;\n
                        v9[a3] = 0;\n
                        cgc_printf(\"$s\", v9, a2, a3, a4);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        if (!v3)\n
                        {\n
                            cgc_EraseLine(0);\n
                            cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                            cgc_strcpy(v9, &v2);\n
                            v8 = cgc_strlen(v9);\n
                            v1 = v8;\n
                            cgc_printf(\"$s\", v9, a2, a3, a4);\n
                            v3 = 255;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v3 -= 1;\n
                            cgc_EraseLine(0);\n
                            cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                            cgc_strcpy(v9, &(&g_41d3a1)[0x100 * v3]);\n
                            v8 = cgc_strlen(&(&g_41d3a1)[0x100 * v3]);\n
                            v1 = v8;\n
                            cgc_printf(\"$s\", &(&g_41d3a1)[0x100 * v3], a2, a3, a4);\n
                        }\n
                    }\n
                    continue;\n
                }\n
                else if (v5 == 67)\n
                {\n
                    if (v1 == v8)\n
                    {\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        a3 = v8;\n
                        v9[a3] = 0;\n
                        cgc_printf(\"$s\", v9, a2, a3, a4);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        v1 += 1;\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        a3 = v8;\n
                        v9[a3] = 0;\n
                        cgc_printf(\"$s\", v9, a2, a3, a4);\n
                        if (v8 != v1)\n
                        {\n
                            a3 = v1;\n
                            cgc_CursorLeft(v8 - a3);\n
                        }\n
                    }\n
                    continue;\n
                }\n
                else if (v5 == 68)\n
                {\n
                    if (!v1)\n
                    {\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        a3 = v8;\n
                        v9[a3] = 0;\n
                        cgc_printf(\"$s\", v9, a2, a3, a4);\n
                        cgc_CursorLeft(v8);\n
                        continue;\n
                    }\n
                    else\n
                    {\n
                        v1 -= 1;\n
                        cgc_EraseLine(0);\n
                        cgc_PrintPrompt(0, v13, a2, a3, a4, v15);\n
                        v17 = v8;\n
                        v9[v17] = 0;\n
                        cgc_printf(\"$s\", v9, a2, v17, a4);\n
                        a3 = v1;\n
                        cgc_CursorLeft(v8 - a3);\n
                    }\n
                    continue;\n
                }\n
            }\n
        }\n
        if (v5 == 13)\n
        {\n
            v9[v1] = 0;\n
            goto LABEL_406d66;\n
        }\n
        if (v5 == 10)\n
        {\n
            if (cgc_receive(a0, v13, a2, a3))\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (!*(&v7))\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            if (v5 != 13)\n
            {\n
                *(v9) = 0;\n
                v11 = 0;\n
                return v11;\n
            }\n
            v9[v1] = 0;\n
            goto LABEL_406d66;\n
            goto LABEL_406d66;\n
        }\n
        else if (v1 != v8)\n
        {\n
            a3 = v1;\n
            v1 = a3 + 1;\n
            v9[a3] = v5;\n
        }\n
        else\n
        {\n
            a3 = v8;\n
            v8 = a3 + 1;\n
            v9[a3] = v5;\n
            v1 += 1;\n
        }\n
    }\n
}\n
", "4222371:sub_406da3": null, "4222384:cgc_ReadUntilNewline": "extern unsigned long long g_40a1d5;\n
extern unsigned long long g_40a1df;\n
\n
long long cgc_ReadUntilNewline(unsigned long long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x41]\n
    unsigned int v1;  // [bp-0x40]\n
    char v2;  // [bp-0x39]\n
    char v3;  // [bp-0x30]\n
    char *v4;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v5 = a0;\n
    v4 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        a3 = cgc_receive(a0, a1, a2, a3);\n
        v0 = 0;\n
        if (!a3)\n
        {\n
            a3 = a2 - 1;\n
            v0 = v4 < a3;\n
        }\n
        if (!(v0 & 1))\n
        {\n
LABEL_406f9e:\n
            if (!*(&v3))\n
            {\n
                *(a1) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((a1 + v4)) = 0;\n
            v6 = v4;\n
            return v6;\n
        }\n
        if (!*(&v3))\n
        {\n
            *(a1) = 0;\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (v2 == 127)\n
        {\n
            if (v1)\n
            {\n
                cgc_printf(&g_40a1d5, a1, a2, a3, a4);\n
                v4 += 1;\n
                v1 -= 1;\n
                continue;\n
            }\n
            else\n
            {\n
                cgc_printf(&g_40a1df, a1, a2, a3, a4);\n
            }\n
            continue;\n
        }\n
        if (v2 == 3)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (v2 == 13)\n
        {\n
            *((a1 + v1)) = 0;\n
            goto LABEL_406f9e;\n
        }\n
        if (v2 == 10)\n
        {\n
            if (cgc_receive(a0, a1, a2, a3))\n
            {\n
                *(a1) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
            if (!*(&v3))\n
            {\n
                *(a1) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
            if (v2 != 13)\n
            {\n
                *(a1) = 0;\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((a1 + v1)) = 0;\n
            goto LABEL_406f9e;\n
            goto LABEL_406f9e;\n
        }\n
        else if (v1 != v4)\n
        {\n
            a3 = v1;\n
            v1 = a3 + 1;\n
            *((a1 + a3)) = v2;\n
        }\n
        else\n
        {\n
            a3 = v4;\n
            v4 = a3 + 1;\n
            *((a1 + a3)) = v2;\n
            v1 += 1;\n
        }\n
    }\n
}\n
", "4222936:sub_406fd8": null, "4222944:cgc_EraseToEOL": "extern unsigned int g_40a1f1;\n
\n
char cgc_EraseToEOL(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    return cgc_printf(\"$sK\", &g_40a1f1, a2, a3, a4);\n
}\n
", "4222971:sub_406ffb": null, "4222976:cgc_EraseLine": "extern unsigned int g_40a1f1;\n
\n
char cgc_EraseLine(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_printf(\"$s$dG\", &g_40a1f1, a0, a3, a4);\n
    return cgc_EraseToEOL(\"$s$dG\", &g_40a1f1, a2, a3, a4);\n
}\n
", "4223026:sub_407032": null, "4223040:cgc_MoveCursor": "extern unsigned int g_40a1f1;\n
\n
char cgc_MoveCursor(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    return cgc_printf(\"$s$d;$dH\", &g_40a1f1, a0, a1, a4);\n
}\n
", "4223095:sub_407077": null, "4223104:cgc_ClearScreen": "extern unsigned int g_40a1f1;\n
\n
char cgc_ClearScreen(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned int a4)\n
{\n
    cgc_printf(\"$s$d$c\", &g_40a1f1, 2, 74, a4);\n
    return cgc_MoveCursor(1, 1, 2, 74, a4);\n
}\n
", "4223153:sub_4070b1": null, "4223168:cgc_CursorRight": "extern unsigned int g_40a1f1;\n
\n
char cgc_CursorRight(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    return cgc_printf(\"$s$dC\", &g_40a1f1, a0, a3, a4);\n
}\n
", "4223213:sub_4070ed": null, "4223216:cgc_CursorLeft": "extern unsigned int g_40a1f1;\n
\n
char cgc_CursorLeft(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    return cgc_printf(\"$s$dD\", &g_40a1f1, a0, a3, a4);\n
}\n
", "4223261:sub_40711d": null, "4223264:main": "extern char cgc_ENV;\n
extern unsigned long long g_40a216;\n
extern char g_41d3a1;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int *v0;  // [bp-0x338]\n
    char v1;  // [bp-0x32d]\n
    char v2;  // [bp-0x328]\n
    char v3;  // [bp-0x220]\n
    char v4;  // [bp-0x21c]\n
    unsigned long v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned long long v9;  // edi, Other Possible Types: unsigned long, unsigned int\n
    unsigned long long v10;  // r9\n
\n
    v7 = 0;\n
    v6 = a0;\n
    v5 = a1;\n
    v0 = 0x4347c000;\n
    v9 = *(v0);\n
    cgc_seed_prng(v9);\n
    cgc_InitFilesystem(*(&v9), a1, a2, a3, a4);\n
    cgc_bzero(&g_41d3a1, 0x1000);\n
    cgc_ENV = 0;\n
    cgc_Login(&g_41d3a1, 0x1000, a2, a3, a4, v10);\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            cgc_PrintPrompt(v9, a1, 255, a3, a4, v10);\n
            if (cgc_ReadShellPrompt(0, &v2, 255, a3, a4))\n
                break;\n
            cgc_printf(&g_40a216, a1, 255, a3, a4);\n
        }\n
        cgc_printf(&g_40a216, a1, 255, a3, a4);\n
        cgc_PrependCommandHistory(&v2);\n
        v1 = cgc_ParseCli(&v2, &v3);\n
        if (!v1)\n
            break;\n
        if (v1 == 1)\n
        {\n
            cgc_puts(\"Invalid input\");\n
        }\n
        else\n
        {\n
            a1 = \"list\";\n
            if (!cgc_strcmp(&v4, \"list\"))\n
            {\n
                cgc_HandleListFiles(&v3);\n
            }\n
            else\n
            {\n
                a1 = \"chuser\";\n
                if (!cgc_strcmp(&v4, \"chuser\"))\n
                {\n
                    cgc_ChUser(&v3);\n
                }\n
                else\n
                {\n
                    a1 = \"chpw\";\n
                    if (!cgc_strcmp(&v4, \"chpw\"))\n
                    {\n
                        cgc_ChPw(&v3);\n
                    }\n
                    else\n
                    {\n
                        a1 = \"exit\";\n
                        if (!cgc_strcmp(&v4, \"exit\"))\n
                        {\n
                            cgc_HandleExit(&v3);\n
                        }\n
                        else\n
                        {\n
                            a1 = \"id\";\n
                            if (!cgc_strcmp(&v4, \"id\"))\n
                            {\n
                                cgc_ID(&v3);\n
                            }\n
                            else\n
                            {\n
                                a1 = \"?\";\n
                                if (!cgc_strcmp(&v4, \"?\"))\n
                                {\n
                                    cgc_HandleHelp(&v3);\n
                                }\n
                                else\n
                                {\n
                                    a1 = \"help\";\n
                                    if (!cgc_strcmp(&v4, \"help\"))\n
                                    {\n
                                        cgc_HandleHelp(&v3);\n
                                    }\n
                                    else\n
                                    {\n
                                        a1 = \"newuser\";\n
                                        if (!cgc_strcmp(&v4, \"newuser\"))\n
                                        {\n
                                            cgc_NewUser(&v3);\n
                                        }\n
                                        else\n
                                        {\n
                                            a1 = \"deluser\";\n
                                            if (!cgc_strcmp(&v4, \"deluser\"))\n
                                            {\n
                                                cgc_DelUser(&v3);\n
                                            }\n
                                            else\n
                                            {\n
                                                a1 = \"dump\";\n
                                                if (!cgc_strcmp(&v4, \"dump\"))\n
                                                {\n
                                                    cgc_HandleDump(&v3);\n
                                                }\n
                                                else\n
                                                {\n
                                                    a1 = \"print\";\n
                                                    if (!cgc_strcmp(&v4, \"print\"))\n
                                                    {\n
                                                        cgc_HandlePrint(&v3);\n
                                                    }\n
                                                    else\n
                                                    {\n
                                                        v9 = \"Invalid command: $s\\n
\\r\";\n
                                                        cgc_printf(\"Invalid command: $s\\n
\\r\", &v2, 255, a3, a4);\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    return 0;\n
}\n
", "4224144:cgc_PrintPrompt": "extern unsigned int g_41e3a1;\n
\n
char cgc_PrintPrompt(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    return cgc_printf(\"$s@CB> \", &g_41e3a1, a2, a3, a4);\n
}\n
", "4224178:sub_4074b2": null, "4224192:cgc_ParseCli": "long long cgc_ParseCli(unsigned long a0, unsigned int *a1)\n
{\n
    char v0[2];  // [bp-0x60]\n
    char v1[2];  // [bp-0x58]\n
    unsigned long v2;  // [bp-0x50]\n
    char v3[2];  // [bp-0x48]\n
    unsigned long v4;  // [bp-0x40]\n
    char v5[2];  // [bp-0x38]\n
    char v6;  // [bp-0x2a]\n
    char v7;  // [bp-0x29]\n
    char v8[2];  // [bp-0x28]\n
    unsigned int *v9;  // [bp-0x20]\n
    void* v10;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned long long v14;  // rax\n
    unsigned int *v16;  // rax\n
    unsigned long long v17;  // rax\n
    unsigned long long v18;  // rax\n
\n
    v10 = a0;\n
    v9 = a1;\n
    v7 = 0;\n
    if (v10 && a1)\n
    {\n
        *(a1) = 0;\n
        while (true)\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    *(&v8) = cgc_strtok(v10, \" \");\n
                    v6 = 0;\n
                    if (v8)\n
                        v6 = *(a1) <= 8;\n
                    if (!(v6 & 1))\n
                    {\n
                        v11 = 2;\n
                        return v11;\n
                    }\n
                    v10 = 0;\n
                    if (v7)\n
                        break;\n
                    if (v8[0] != 34)\n
                    {\n
                        v14 = *(a1);\n
                        *(a1) = v14 + 1;\n
                        cgc_strncpy(&a1[16 * v14] + 1, v8, 63);\n
                    }\n
                    else\n
                    {\n
                        *(&v1) = v8;\n
                        if (v1[1 + cgc_strlen(v8)] == 34)\n
                        {\n
                            *(&v0) = v8;\n
                            v0[1 + cgc_strlen(v8)] = 0;\n
                            v17 = *(a1);\n
                            *(a1) = v17 + 1;\n
                            cgc_strncpy(&a1[16 * v17] + 1, &v8[1], 63);\n
                        }\n
                        else if (!cgc_strchr(&v8[1], 34))\n
                        {\n
                            v7 = 1;\n
                            cgc_strncpy(&a1[16 * *(v9)] + 1, &v8[1], 63);\n
                        }\n
                        else\n
                        {\n
                            v11 = 1;\n
                            return v11;\n
                        }\n
                    }\n
                }\n
                *(&v5) = v8;\n
                if (v5[1 + cgc_strlen(v8)] != 34)\n
                    break;\n
                *(&v3) = v8;\n
                v3[1 + cgc_strlen(v8)] = 0;\n
                v4 = cgc_strlen(&a1[16 * *(v9)] + 1);\n
                if (v4 + cgc_strlen(v8) + 1 > 63)\n
                {\n
                    v11 = 1;\n
                    return v11;\n
                }\n
                cgc_strcat(&v9[16 * *(a1)] + 1, \" \");\n
                v18 = *(a1);\n
                *(a1) = v18 + 1;\n
                cgc_strcat(&a1[16 * v18] + 1, v8);\n
                v7 = 0;\n
            }\n
            if (v8[0] == 34 && !v8[1])\n
            {\n
                v16 = a1;\n
                *(v16) = *(v16) + 1;\n
                v7 = 0;\n
                continue;\n
            }\n
            if (cgc_strchr(v8, 34))\n
            {\n
                v11 = 1;\n
                return v11;\n
            }\n
            v2 = cgc_strlen(&a1[16 * *(v9)] + 1);\n
            if (v2 + cgc_strlen(v8) + 1 > 63)\n
            {\n
                v11 = 1;\n
                return v11;\n
            }\n
            cgc_strcat(&a1[16 * *(v9)] + 1, \" \");\n
            cgc_strcat(&a1[16 * *(v9)] + 1, v8);\n
        }\n
    }\n
    v11 = 0;\n
    return v11;\n
}\n
", "4225097:sub_407849": null, "4225104:cgc_HandleListFiles": "long long cgc_HandleListFiles(unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*(a0) != 1)\n
    {\n
        cgc_puts(\"Invalid arguments\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        cgc_ListFiles();\n
        v0 = 1;\n
        return v0;\n
    }\n
}\n
", "4225197:sub_4078ad": null, "4225200:cgc_HandleExit": "long long cgc_HandleExit(unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*(a0) != 1)\n
    {\n
        cgc_puts(\"Invalid arguments\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        cgc_puts(\"logout\");\n
        cgc__terminate(\"logout\");\n
        return v0;\n
    }\n
}\n
", "4225300:sub_407914": null, "4225312:cgc_HandleHelp": "extern char g_41e3a1;\n
\n
long long cgc_HandleHelp(unsigned int *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    if (*(a0) == 1)\n
    {\n
        cgc_puts(\"Available commands:\");\n
        cgc_puts(\"chuser\");\n
        cgc_puts(\"chpw\");\n
        cgc_puts(\"exit\");\n
        cgc_puts(\"id\");\n
        cgc_puts(\"help\");\n
        cgc_puts(\"?\");\n
        cgc_puts(\"newuser\");\n
        cgc_puts(\"deluser\");\n
        cgc_puts(\"dump\");\n
        cgc_puts(\"print\");\n
    }\n
    else if (*(a0) == 2)\n
    {\n
        if (!cgc_strcmp(a0 + 17, \"chuser\"))\n
        {\n
            cgc_puts(\"Usage: chuser <username>\");\n
        }\n
        else if (cgc_strcmp(a0 + 17, \"passwd\"))\n
        {\n
            if (!cgc_strcmp(a0 + 17, \"exit\"))\n
            {\n
                cgc_puts(\"Usage: exit\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"id\"))\n
            {\n
                cgc_puts(\"Usage: id\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"help\"))\n
            {\n
                cgc_puts(\"Usage: help <command>\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"?\"))\n
            {\n
                cgc_puts(\"Usage: ? <command>\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"newuser\"))\n
            {\n
                cgc_puts(\"Usage: newuser <username> <group>\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"deluser\"))\n
            {\n
                cgc_puts(\"Usage: deluser <username>\");\n
            }\n
            else if (!cgc_strcmp(a0 + 17, \"cat\"))\n
            {\n
                cgc_puts(\"Usage: dump <filename>\");\n
            }\n
            else if (cgc_strcmp(a0 + 17, \"echo\"))\n
            {\n
                cgc_printf(\"Unknown command: $s\\n
\", a0 + 17, a2, a3, a4);\n
            }\n
            else\n
            {\n
                cgc_puts(\"Usage: print <text> [> file]\");\n
            }\n
        }\n
        else\n
        {\n
            if (cgc_strcmp(&g_41e3a1, \"root\"))\n
                cgc_puts(\"Usage: passwd\");\n
            else\n
                cgc_puts(\"Usage: passwd <username>\");\n
        }\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4226159:sub_407c6f": null, "4226160:cgc_HandleDump": "long long cgc_HandleDump(unsigned int *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*(a0) != 2)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: dump <filename>\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = cgc_Dump(a0 + 17, a1, a2, a3, a4);\n
        return v0;\n
    }\n
}\n
", "4226268:sub_407cdc": null, "4226272:cgc_HandlePrint": "extern unsigned long long g_40a1de;\n
\n
long long cgc_HandlePrint(unsigned int *a0, unsigned long a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char *v0;  // [bp-0x40]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x2c]\n
    void* v3;  // [bp-0x28], Other Possible Types: unsigned long\n
    void* v4;  // [bp-0x20]\n
    char v5;  // [bp-0x9]\n
    unsigned int *v7;  // rcx, Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (*(a0) < 2)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: print \\\"<text>\\\" [> file]\");\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v2 = 2;\n
        while (true)\n
        {\n
            v7 = a0;\n
            if (v2 >= *(a0))\n
            {\n
LABEL_407df4:\n
                if (!v3)\n
                {\n
                    cgc_printf(\"$s\", a0 + 17, a2, v7, a4);\n
                    for (v2 = 2; v2 < *(a0); v2 += 1)\n
                    {\n
                        cgc_printf(\" $s\", &a0[16 * v2] + 1, a2, a0, a4);\n
                    }\n
                    cgc_puts(&g_40a1de);\n
                }\n
                else\n
                {\n
                    v4 = cgc_fopen(v3, \"w\", 0);\n
                    if (!v4)\n
                    {\n
                        cgc_printf(\"Unable to open file '$s'\\n
\\r\", v3, 0, v7, a4);\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    v0 = &a0[17];\n
                    v1 = cgc_fwrite(v0, cgc_strlen(a0 + 17), 1, v4);\n
                    if (v1 != cgc_strlen(a0 + 17))\n
                    {\n
                        cgc_fclose(v4);\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    cgc_fclose(v4);\n
                }\n
                v5 = 1;\n
                break;\n
            }\n
            else\n
            {\n
                if (a0[1 + 16 * v2] == 62 && !*(&a0[1 + 16 * v2] + 1))\n
                {\n
                    if (v2 + 1 == *(a0) - 1)\n
                    {\n
                        v7 = (v2 + 1) * 64;\n
                        v3 = 1 + a0 + v7;\n
                        goto LABEL_407df4;\n
                    }\n
                    else\n
                    {\n
                        cgc_puts(\"Input error\");\n
                        cgc_puts(\"Usage: print \\\"<text>\\\" [> file]\");\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                }\n
                v2 += 1;\n
            }\n
        }\n
        return v5;\n
    }\n
}\n
", "4226861:sub_407f2d": null, "4226864:cgc_PrependCommandHistory": "extern char cgc_ENV;\n
extern char g_41d3a1[4];\n
\n
long long cgc_PrependCommandHistory(char *a0)\n
{\n
    char v0;  // [bp-0x11]\n
    char v1;  // [bp-0x8]\n
    unsigned long long v3;  // rbp\n
    unsigned long long v4;  // rax\n
\n
    v3 = &v1;\n
    cgc_ENV = 0;\n
    for (v0 = 16; v0 > 0; v0 -= 1)\n
    {\n
        if (g_41d3a1[0x100 + 0x100 * v0])\n
        {\n
            cgc_strcpy(&g_41d3a1[0x100 * v0], &g_41d3a1[0x100 + 0x100 * v0]);\n
            if (!cgc_ENV)\n
                cgc_ENV = v0;\n
        }\n
    }\n
    v4 = cgc_strcpy(&g_41d3a1[0], a0);\n
    *(&v4) = cgc_ENV + 1;\n
    cgc_ENV = cgc_ENV + 1;\n
    return v4;\n
}\n
", "4227082:sub_40800a": null, "4227088:cgc_Login": "extern char g_41e3a1;\n
extern char g_41e3c1;\n
\n
long long cgc_Login()\n
{\n
    cgc_strcpy(&g_41e3a1, \"crs\");\n
    return cgc_strcpy(&g_41e3c1, \"crs\");\n
}\n
", "4227146:sub_40804a": null, "4227152:cgc_ChUser": "extern unsigned long long g_40a216;\n
extern char g_41e3a1;\n
extern char g_41e3c1;\n
\n
long long cgc_ChUser(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char *v0;  // [bp-0xe0]\n
    char *v1;  // [bp-0xd8]\n
    char *v2;  // [bp-0xd0]\n
    char v3;  // [bp-0xc8]\n
    char v4;  // [bp-0xa8]\n
    unsigned long long v5[2];  // [bp-0x20]\n
    char v6;  // [bp-0x9]\n
    unsigned long v8;  // rdx\n
\n
    if (!a0)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (*(a0) != 2)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: chuser <username>\");\n
        v6 = 0;\n
        return v6;\n
    }\n
    else\n
    {\n
        v5[0] = cgc_fopen(\"passwd\", \"r\", 1);\n
        if (!v5)\n
        {\n
            cgc_puts(\"Unable to open passwd file\");\n
            v6 = 0;\n
            return v6;\n
        }\n
        do\n
        {\n
            v8 = v5;\n
            if (!cgc_fgets(&v4, 128, v8))\n
            {\n
                cgc_printf(\"No passwd entry for user '$s'\\n
\\r\", a0 + 17, v8, a3, a4);\n
                cgc_fclose(v5);\n
                v6 = 0;\n
                return v6;\n
            }\n
            v0 = cgc_strtok(&v4, \":\");\n
            if (!v0)\n
            {\n
                cgc_fclose(v5);\n
                cgc_puts(\"Passwd file is corrupted\");\n
                v6 = 0;\n
                return v6;\n
            }\n
            v2 = cgc_strtok(NULL, \":\");\n
            if (!v2)\n
            {\n
                cgc_fclose(v5);\n
                cgc_puts(\"Passwd file is corrupted\");\n
                v6 = 0;\n
                return v6;\n
            }\n
        } while (cgc_strcmp(v2, a0 + 17));\n
        v1 = cgc_strtok(NULL, \":\");\n
        if (!v1)\n
        {\n
            cgc_fclose(v5);\n
            cgc_puts(\"Passwd file is corrupted\");\n
            v6 = 0;\n
            return v6;\n
        }\n
        else if (!cgc_strcmp(&g_41e3a1, \"root\"))\n
        {\n
            cgc_strcpy(&g_41e3a1, v2);\n
            cgc_strcpy(&g_41e3c1, v1);\n
            cgc_printf(\"Authentication success for user '$s'\\n
\\r\", &g_41e3a1, v8, a3, a4);\n
            cgc_fclose(v5);\n
            v6 = 1;\n
            return v6;\n
        }\n
        else\n
        {\n
            cgc_printf(\"Password: \", \"root\", v8, a3, a4);\n
            if (!cgc_ReadUntilNewline(0, &v3, 32, a3, a4))\n
            {\n
                cgc_fclose(v5);\n
                v6 = 0;\n
                return v6;\n
            }\n
            cgc_printf(&g_40a216, \"root\", 32, a3, a4);\n
            if (cgc_strcmp(v0, &v3))\n
            {\n
                cgc_puts(\"Authentication failure\");\n
                v6 = 0;\n
                return v6;\n
            }\n
            cgc_strcpy(&g_41e3a1, v2);\n
            cgc_strcpy(&g_41e3c1, v1);\n
            cgc_printf(\"Authentication success for user '$s'\\n
\\r\", &g_41e3a1, 32, a3, a4);\n
            cgc_fclose(v5);\n
            v6 = 1;\n
            return v6;\n
        }\n
    }\n
}\n
", "4227964:sub_40837c": null, "4227968:cgc_ChPw": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long g_40a216;\n
extern char g_41e3a1;\n
\n
long long cgc_ChPw(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x11b0]\n
    unsigned long v1;  // [bp-0x11a8]\n
    char *v2;  // [bp-0x11a0]\n
    char *v3;  // [bp-0x1198]\n
    unsigned long v4;  // [bp-0x1190]\n
    char v5;  // [bp-0x1188]\n
    char v6;  // [bp-0x1108]\n
    char v7;  // [bp-0x108]\n
    char *v8;  // [bp-0xe0]\n
    unsigned long v9;  // [bp-0xd8]\n
    char *v10;  // [bp-0xd0]\n
    char v11;  // [bp-0xc8]\n
    char v12;  // [bp-0xa8]\n
    unsigned long long v13[2];  // [bp-0x20], Other Possible Types: void*\n
    char v14;  // [bp-0x9]\n
    unsigned long v16;  // rdx\n
\n
    if (!a0)\n
    {\n
        v14 = 0;\n
        return v14;\n
    }\n
    if (cgc_strcmp(&g_41e3a1, \"root\"))\n
    {\n
        if (*(a0) == 1)\n
        {\n
            cgc_strcpy(&v7, &g_41e3a1);\n
        }\n
        else\n
        {\n
            cgc_puts(\"Input error\");\n
            cgc_puts(\"Usage: chpw\");\n
            v14 = 0;\n
            return v14;\n
        }\n
    }\n
    else\n
    {\n
        if (*(a0) == 2)\n
        {\n
            cgc_strcpy(&v7, a0 + 17);\n
        }\n
        else\n
        {\n
            cgc_puts(\"Input error\");\n
            cgc_puts(\"Usage: chpw <username>\");\n
            v14 = 0;\n
            return v14;\n
        }\n
    }\n
    v13[0] = cgc_fopen(\"passwd\", \"r\", 1);\n
    if (!v13)\n
    {\n
        cgc_puts(\"Unable to open passwd file\");\n
        v14 = 0;\n
        return v14;\n
    }\n
    cgc_bzero(&v6, 0x1000);\n
    while (true)\n
    {\n
        do\n
        {\n
            v16 = v13;\n
            if (!cgc_fgets(&v12, 128, v16))\n
            {\n
                cgc_fclose(v13);\n
                if (cgc_strlen(&v6) > 0)\n
                {\n
                    v13 = cgc_fopen(\"passwd\", \"w\", 1);\n
                    if (!v13)\n
                    {\n
                        cgc_puts(\"Unable to open passwd file\");\n
                        v14 = 0;\n
                        return v14;\n
                    }\n
                    v0 = &v6;\n
                    v1 = cgc_fwrite(v0, cgc_strlen(&v6) + 1, 1, v13);\n
                    if (v1 != cgc_strlen(&v6) + 1)\n
                    {\n
                        cgc_puts(\"Password file update failed\\n
\\r\");\n
                        cgc_fclose(v13);\n
                        v14 = 0;\n
                        return v14;\n
                    }\n
                    cgc_fclose(v13);\n
                }\n
                v14 = 1;\n
                return v14;\n
            }\n
        } while (!v12);\n
        v8 = cgc_strtok(&v12, \":\");\n
        if (!v8)\n
        {\n
            cgc_fclose(v13);\n
            cgc_puts(\"Passwd file is corrupted\");\n
            cgc_fclose(v13);\n
            v14 = 0;\n
            return v14;\n
        }\n
        v10 = cgc_strtok(NULL, \":\");\n
        if (!v10)\n
        {\n
            cgc_fclose(v13);\n
            cgc_puts(\"Passwd file is corrupted\");\n
            cgc_fclose(v13);\n
            v14 = 0;\n
            return v14;\n
        }\n
        if (cgc_strcmp(v10, &v7))\n
        {\n
            v2 = v8;\n
            v2[cgc_strlen(v8)] = 58;\n
            v3 = v10;\n
            v3[cgc_strlen(v10)] = 58;\n
            cgc_strcat(&v6, &v12);\n
            cgc_strcat(&v6, \"\\n
\");\n
        }\n
        else\n
        {\n
            v9 = cgc_strtok(NULL, \":\");\n
            if (!v9)\n
            {\n
                cgc_fclose(v13);\n
                cgc_puts(\"Passwd file is corrupted\");\n
                v14 = 0;\n
                return v14;\n
            }\n
            cgc_printf(\"New password: \", \":\", v16, a3, a4);\n
            if (!cgc_ReadUntilNewline(0, &v11, 32, a3, a4))\n
            {\n
                cgc_fclose(v13);\n
                cgc_printf(&g_40a216, \":\", 32, a3, a4);\n
                cgc_puts(\"Password not changed\");\n
                v14 = 0;\n
                return v14;\n
            }\n
            cgc_printf(&g_40a216, \":\", 32, a3, a4);\n
            a3 = v10;\n
            a4 = v9;\n
            cgc_sprintf(&v5, \"$s:$s:$s\\n
\", &v11, a3, a4);\n
            v4 = cgc_strlen(&v6);\n
            if (v4 + cgc_strlen(&v5) > 0x1000)\n
            {\n
                cgc_puts(\"Password file is too large\");\n
                cgc_fclose(v13);\n
                v14 = 0;\n
                return v14;\n
            }\n
            cgc_strcat(&v6, &v5);\n
        }\n
    }\n
}\n
", "4229168:cgc_ID": "extern unsigned int g_41e3a1;\n
extern unsigned int g_41e3c1;\n
\n
long long cgc_ID(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x9]\n
\n
    if (!a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    else if (*(a0) != 1)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: id\");\n
        v0 = 0;\n
        return v0;\n
    }\n
    else\n
    {\n
        cgc_printf(\"uid=$s gid=$s\\n
\\r\", &g_41e3a1, &g_41e3c1, a3, a4);\n
        v0 = 1;\n
        return v0;\n
    }\n
}\n
", "4229298:sub_4088b2": null, "4229312:cgc_NewUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned long long g_40a216;\n
extern char g_41e3a1;\n
\n
long long cgc_NewUser(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x1180]\n
    unsigned long v1;  // [bp-0x1178]\n
    unsigned long v2;  // [bp-0x1170]\n
    char *v3;  // [bp-0x1168]\n
    char *v4;  // [bp-0x1160]\n
    char v5;  // [bp-0x1158]\n
    char v6;  // [bp-0x10d8]\n
    char *v7;  // [bp-0xd8]\n
    char *v8;  // [bp-0xd0]\n
    char v9;  // [bp-0xc8]\n
    char v10;  // [bp-0xa8]\n
    unsigned long long v11[2];  // [bp-0x20], Other Possible Types: void*\n
    char v12;  // [bp-0x9]\n
    unsigned long v14;  // rdx\n
    unsigned long long v15;  // rdx, Other Possible Types: unsigned long, unsigned int\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // r8\n
\n
    if (!a0)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (cgc_strcmp(&g_41e3a1, \"root\"))\n
    {\n
        cgc_puts(\"Must be root\");\n
        v12 = 0;\n
        return v12;\n
    }\n
    else if (*(a0) != 3)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: newuser <username> <group>\");\n
        v12 = 0;\n
        return v12;\n
    }\n
    else\n
    {\n
        v11[0] = cgc_fopen(\"passwd\", \"r\", 1);\n
        if (!v11)\n
        {\n
            cgc_puts(\"Unable to open passwd file\");\n
            v12 = 0;\n
            return v12;\n
        }\n
        cgc_bzero(&v6, 0x1000);\n
        while (true)\n
        {\n
            v14 = v11;\n
            if (!cgc_fgets(&v10, 128, v14))\n
                break;\n
            if (v10)\n
            {\n
                v7 = cgc_strtok(&v10, \":\");\n
                if (!v7)\n
                {\n
                    cgc_fclose(v11);\n
                    cgc_puts(\"Passwd file is corrupted\");\n
                    cgc_fclose(v11);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                v8 = cgc_strtok(NULL, \":\");\n
                if (!v8)\n
                {\n
                    cgc_fclose(v11);\n
                    cgc_puts(\"Passwd file is corrupted\");\n
                    cgc_fclose(v11);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                if (!cgc_strcmp(v8, a0 + 17))\n
                {\n
                    cgc_printf(\"User '$s' already exists\\n
\\r\", a0 + 17, v14, a3, a4);\n
                    cgc_fclose(v11);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                v3 = v7;\n
                v3[cgc_strlen(v7)] = 58;\n
                v4 = v8;\n
                v4[cgc_strlen(v8)] = 58;\n
                cgc_strcat(&v6, &v10);\n
                cgc_strcat(&v6, \"\\n
\");\n
            }\n
        }\n
        cgc_fclose(v11);\n
        cgc_printf(\"New user password: \", 128, v14, a3, a4);\n
        v15 = 32;\n
        if (!cgc_ReadUntilNewline(0, &v9, 32, a3, a4))\n
        {\n
            cgc_fclose(v11);\n
            v12 = 0;\n
            return v12;\n
        }\n
        cgc_printf(&g_40a216, 128, 32, a3, a4);\n
        v16 = a0 + 17;\n
        v17 = a0 + 33;\n
        cgc_sprintf(&v5, \"$s:$s:$s\\n
\", &v9, v16, v17);\n
        v2 = cgc_strlen(&v6);\n
        if (v2 + cgc_strlen(&v5) > 0x1000)\n
        {\n
            cgc_puts(\"Password file is too large\");\n
            cgc_fclose(v11);\n
            v12 = 0;\n
            return v12;\n
        }\n
        cgc_strcat(&v6, &v5);\n
        if (cgc_strlen(&v6) > 0)\n
        {\n
            v11 = cgc_fopen(\"passwd\", \"w\", 1);\n
            if (!v11)\n
            {\n
                cgc_puts(\"Unable to open passwd file\");\n
                v12 = 0;\n
                return v12;\n
            }\n
            v0 = &v6;\n
            v15 = 1;\n
            v1 = cgc_fwrite(v0, cgc_strlen(&v6) + 1, 1, v11);\n
            if (v1 != cgc_strlen(&v6) + 1)\n
            {\n
                cgc_puts(\"Password file update failed\\n
\\r\");\n
                cgc_fclose(v11);\n
                v12 = 0;\n
                return v12;\n
            }\n
            cgc_fclose(v11);\n
        }\n
        cgc_printf(\"User '$s' added\\n
\\r\", a0 + 17, v15, v16, v17);\n
        v12 = 1;\n
        return v12;\n
    }\n
}\n
", "4230426:sub_408d1a": null, "4230432:cgc_DelUser": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_41e3a1;\n
\n
long long cgc_DelUser(unsigned int *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    struct_0 *v0;  // [bp-0x10e0]\n
    unsigned long v1;  // [bp-0x10d8]\n
    char *v2;  // [bp-0x10d0]\n
    char *v3;  // [bp-0x10c8]\n
    char v4;  // [bp-0x10b9]\n
    char v5;  // [bp-0x10b8]\n
    char *v6;  // [bp-0xb8]\n
    char *v7;  // [bp-0xb0]\n
    char v8;  // [bp-0xa8]\n
    void* v9;  // [bp-0x20], Other Possible Types: unsigned long long [2]\n
    char v10;  // [bp-0x9]\n
    unsigned int v12;  // rdx, Other Possible Types: unsigned long\n
\n
    v4 = 0;\n
    if (!a0)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    else if (cgc_strcmp(&g_41e3a1, \"root\"))\n
    {\n
        cgc_puts(\"Must be root\");\n
        v10 = 0;\n
        return v10;\n
    }\n
    else if (*(a0) != 2)\n
    {\n
        cgc_puts(\"Input error\");\n
        cgc_puts(\"Usage: deluser <username>\");\n
        v10 = 0;\n
        return v10;\n
    }\n
    else\n
    {\n
        v9[0] = cgc_fopen(\"passwd\", \"r\", 1);\n
        if (!v9)\n
        {\n
            cgc_puts(\"Unable to open passwd file\");\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_bzero(&v5, 0x1000);\n
        while (true)\n
        {\n
            v12 = v9;\n
            if (!cgc_fgets(&v8, 128, v12))\n
                break;\n
            if (v8)\n
            {\n
                v6 = cgc_strtok(&v8, \":\");\n
                if (!v6)\n
                {\n
                    cgc_fclose(v9);\n
                    cgc_puts(\"Passwd file is corrupted\");\n
                    cgc_fclose(v9);\n
                    v10 = 0;\n
                    return v10;\n
                }\n
                v7 = cgc_strtok(NULL, \":\");\n
                if (!v7)\n
                {\n
                    cgc_fclose(v9);\n
                    cgc_puts(\"Passwd file is corrupted\");\n
                    cgc_fclose(v9);\n
                    v10 = 0;\n
                    return v10;\n
                }\n
                else if (!cgc_strcmp(v7, a0 + 17))\n
                {\n
                    v4 = 1;\n
                }\n
                else\n
                {\n
                    v2 = v6;\n
                    v2[cgc_strlen(v6)] = 58;\n
                    v3 = v7;\n
                    v3[cgc_strlen(v7)] = 58;\n
                    cgc_strcat(&v5, &v8);\n
                    cgc_strcat(&v5, \"\\n
\");\n
                }\n
            }\n
        }\n
        cgc_fclose(v9);\n
        if (!v4)\n
        {\n
            cgc_printf(\"User '$s' not found\\n
\\r\", a0 + 17, v12, a3, a4);\n
            v10 = 0;\n
            return v10;\n
        }\n
        if (cgc_strlen(&v5) > 0)\n
        {\n
            v9 = cgc_fopen(\"passwd\", \"w\", 1);\n
            if (!v9)\n
            {\n
                cgc_puts(\"Unable to open passwd file\");\n
                v10 = 0;\n
                return v10;\n
            }\n
            v0 = &v5;\n
            v12 = 1;\n
            v1 = cgc_fwrite(v0, cgc_strlen(&v5) + 1, 1, v9);\n
            if (v1 != cgc_strlen(&v5) + 1)\n
            {\n
                cgc_puts(\"Password file update failed\\n
\\r\");\n
                cgc_fclose(v9);\n
                v10 = 0;\n
                return v10;\n
            }\n
            cgc_fclose(v9);\n
        }\n
        cgc_printf(\"User '$s' deleted\\n
\\r\", a0 + 17, v12, a3, a4);\n
        v10 = 1;\n
        return v10;\n
    }\n
}\n
", "4231336:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:cgc_transmit": null, "5242912:cgc_allocate": null, "5242920:cgc_rint": null, "5242928:cgc_log10": null, "5242936:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}