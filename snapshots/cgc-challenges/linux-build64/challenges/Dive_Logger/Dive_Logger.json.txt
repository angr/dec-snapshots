{"4202496:_init": "extern struct_0 *g_409358;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_409358;\n
    if (g_409358)\n
        v1 = g_409358();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_409378;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_409378;\n
    goto *(4232064);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202560:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202576:memset": "// attributes: PLT stub\n
void* memset(void* block, unsigned int c, unsigned int size)\n
{\n
    return ::libc.so.0::memset(block, c, size);\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4232040);\n
}\n
", "4202720:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202757:sub_402105": null, "4202758:sub_402106": null, "4202768:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_409350;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202809:sub_402139": null, "4202816:register_tm_clones": "extern unsigned long long g_409360;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202873:sub_402179": null, "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_409368;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_409368)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202933:sub_4021b5": null, "4202937:sub_4021b9": null, "4202944:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:sub_4021c9": null, "4202960:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
\n
    v1 = a1 * a0;\n
    v0 = cgc_malloc(v1);\n
    cgc_memset(v0, 0, v1);\n
    return v0;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_malloc": "extern struct_0 *g_memManager;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    struct struct_0 *v0[2];  // [bp-0x50]\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned long v4;  // [bp-0x30]\n
    struct struct_0 *v5[2];  // [bp-0x28]\n
    unsigned long long *v6;  // [bp-0x20]\n
    unsigned long long *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long *v10;  // rax\n
    unsigned long long *v11;  // rax\n
\n
    v8 = a0;\n
    if (v8 < 8)\n
    {\n
        v8 = 8;\n
    }\n
    else if ((v8 & 3))\n
    {\n
        v8 = (v8 >> 2) + 1;\n
        v8 *= 4;\n
    }\n
    v7 = &g_memManager->field_0;\n
    while (true)\n
    {\n
        if (!v7)\n
            v7 = cgc_add_free_list(v8);\n
        v6 = v7;\n
        v5[0] = v7 + (*(v6) & -4) - 8;\n
        if (*(v6) >= v8)\n
            break;\n
        v7 = v5[0];\n
    }\n
    v4 = v7 + 8;\n
    v3 = *(v6) - v8;\n
    *(v6) = v8;\n
    v10 = v6;\n
    *(v10) = *(v10) | 1;\n
    if (v3 >= 24)\n
    {\n
        v2 = v7 + v8 + 8;\n
        v1 = v2;\n
        *(v1) = v3 - 8;\n
        v0[0] = &v5[0];\n
        if (-8 + v1 + (*(v1) & -4) != v5)\n
        {\n
            cgc_printf(\"Footer != in malloc\");\n
            cgc__terminate(\"Footer != in malloc\");\n
        }\n
        if (g_memManager != v7)\n
        {\n
            if (v0[1])\n
                *((-8 + &v0[1]->field_0 + (v0[1]->field_0 & -4))) = v2;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v2;\n
        }\n
        else\n
        {\n
            g_memManager = v1;\n
            if (v0[0])\n
                *((&v0[0]->field_0 + (v0[0]->field_0 & -4))) = v1;\n
        }\n
        v11 = v6;\n
        *(v11) = *(v11) | 2;\n
    }\n
    else if (g_memManager != v7)\n
    {\n
        if (v5[1])\n
            *((-8 + &v5[1]->field_0 + (v5[1]->field_0 & -4))) = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = v5[1];\n
    }\n
    else\n
    {\n
        g_memManager = v5[0];\n
        if (v5[0])\n
            *((&v5[0]->field_0 + (v5[0]->field_0 & -4))) = 0;\n
    }\n
    cgc_memset(v7 + 8, 0, v8);\n
    return v7 + 8;\n
}\n
", "4203810:sub_402522": null, "4203824:cgc_add_free_list": "extern struct_0 *g_memManager;\n
\n
long long cgc_add_free_list(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x30]\n
    unsigned long long *v1;  // [bp-0x28]\n
    char v2;  // [bp-0x20]\n
    unsigned long v3;  // [bp-0x18]\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
\n
    v3 = a0 + 4;\n
    if ((v3 & 4095))\n
    {\n
        v3 = (v3 >> 12) + 1;\n
        v3 *= 0x1000;\n
    }\n
    if (cgc_allocate(a0, v5, v6))\n
        cgc__terminate(a0);\n
    v1 = *(&v2);\n
    v0[0] = *(&v2) + v3 - 16;\n
    *(v1) = v3 - 8;\n
    v0[1] = 0;\n
    v0[0] = g_memManager;\n
    g_memManager = v1;\n
    return v1;\n
}\n
", "4204019:sub_4025f3": null, "4204032:cgc_free": "extern struct_0 *g_memManager;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    unsigned long long v0[2];  // [bp-0x40]\n
    struct struct_0 *v1[2];  // [bp-0x38]\n
    struct struct_0 **v2;  // [bp-0x30]\n
    unsigned long v3;  // [bp-0x28]\n
    unsigned long long *v4;  // [bp-0x20]\n
    unsigned long long *v5;  // [bp-0x18]\n
    unsigned long long *v7;  // rax\n
    unsigned long long *v8;  // rax\n
    unsigned long long *v9;  // rax, Other Possible Types: struct struct_0 **, struct struct_0 *[2], unsigned long\n
\n
    v5 = a0 - 8;\n
    if (!(*(v5) & 1))\n
        cgc__terminate(a0);\n
    if ((*(v5) & 2))\n
    {\n
        v4 = a0 + (*(v5) & -4);\n
        if (!(*(v4) & 1))\n
        {\n
            v3 = (*(v5) & -4) + (*(v4) & -4) + 8;\n
            *(v5) = v3;\n
            if ((*(v4) & 2))\n
            {\n
                v8 = v5;\n
                *(v8) = *(v8) | 2;\n
            }\n
            if (g_memManager != v4)\n
            {\n
                v1[0] = -8 + v5 + v3;\n
                if (v1[1])\n
                    *((-8 + &v1[1]->field_0 + (v1[1]->field_0 & -4))) = v5;\n
                v9 = v1;\n
                if (v9[0])\n
                {\n
                    v9 = v1[0];\n
                    *((v9 + (v1[0]->field_0 & -4))) = v5;\n
                }\n
            }\n
            else\n
            {\n
                g_memManager = v5;\n
                v2 = -8 + v5 + v3;\n
                v9 = v2;\n
                if (*(v9))\n
                {\n
                    v9 = *(v2);\n
                    *((v9 + (*(v2)->field_0 & -4))) = v5;\n
                }\n
            }\n
            return v9;\n
        }\n
    }\n
    v7 = v5;\n
    *(v7) = *(v7) & -2;\n
    v0[0] = -8 + v5 + (*(v5) & -4);\n
    v0[0] = g_memManager;\n
    v0[1] = 0;\n
    if (g_memManager)\n
        *((&g_memManager->field_0 + (g_memManager->field_0 & -4))) = v5;\n
    v9 = v5;\n
    g_memManager = v9;\n
    return v5;\n
}\n
", "4204572:sub_40281c": null, "4204576:cgc_floor": "long long cgc_floor()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_3;  // tmp #3\n
    int tmp_5;  // tmp #5\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    int v8;  // xmm0\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        tmp_3 = SubV(tmp_5, tmp_4);\n
        *(&v1) = tmp_3;\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        v8 = tmp_8 + (0 CONCAT 0x3ff0000000000000);\n
        v1 = v8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204724:sub_4028b4": null, "4204736:cgc_round_away_from_zero": "long long cgc_round_away_from_zero()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    int tmp_8;  // tmp #8\n
    int tmp_10;  // tmp #10\n
    int tmp_9;  // tmp #9\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long v3;  // xmm0lq\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v3;\n
    if ((((CmpF(v0, 0) & 69) | ((CmpF(v0, 0) & 69) >> 6)) & 1) != 1)\n
    {\n
        v5 = cgc_rint();\n
        s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3fe0000000000000<64>) + Conv(64->128, Load(addr=stack_base-24, size=8, endness=Iend_LE))))<8>\n
        return v5;\n
    }\n
    else if ((((CmpF(0, v0) & 69) | ((CmpF(0, v0) & 69) >> 6)) & 1) != 1)\n
    {\n
        tmp_8 = SubV(tmp_10, tmp_9);\n
        v5 = cgc_rint();\n
        *(&v1) = tmp_8;\n
        return v5;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v5;\n
    }\n
}\n
", "4204860:sub_40293c": null, "4204864:cgc_round": "double cgc_round()\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    unsigned long long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v4;  // xmm1lq\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rsi\n
    unsigned long long v7;  // rdx\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
    unsigned long v11;  // xmm0lq\n
\n
    v2 = v4;\n
    cgc_rint();\n
    v2 = v2;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v1 = 0x4024000000000000;\n
    cgc_pow(v5, v6, v7, v8, v9, v10);\n
    v0 = 0x4024000000000000;\n
    cgc_round_away_from_zero();\n
    return Conv(128->64, (((0x0<64> CONCAT xmm0lq<8>) * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE))) * Conv(64->128, Load(addr=stack_base-40, size=8, endness=Iend_LE))));\n
}\n
", "4204992:cgc_memcpy": "long long cgc_memcpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    return v0;\n
}\n
", "4205075:sub_402a13": null, "4205088:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 97 && a0 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205139:sub_402a53": null, "4205152:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 65 && a0 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205203:sub_402a93": null, "4205216:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_islower(a0);\n
    return v0 | cgc_isupper(a0);\n
}\n
", "4205259:sub_402acb": null, "4205264:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = cgc_isalpha(a0);\n
    return v0 | cgc_isdigit(a0);\n
}\n
", "4205307:sub_402afb": null, "4205312:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 >= 48 && a0 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205363:sub_402b33": null, "4205376:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (a0 != 32 && a0 != 9 && a0 != 10 && a0 != 11 && a0 != 12 && a0 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4205467:sub_402b9b": null, "4205472:cgc_isnan": "long long cgc_isnan()\n
{\n
    return ((CmpF(0, 0) & 69) >> 2 & 1);\n
}\n
", "4205500:sub_402bbc": null, "4205504:cgc_isinf": "double cgc_isinf()\n
{\n
    return 0;\n
}\n
", "4205556:sub_402bf4": null, "4205568:cgc_atof": "long long cgc_atof(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    int tmp_45;  // tmp #45\n
    int tmp_47;  // tmp #47\n
    int tmp_46;  // tmp #46\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned long v2;  // [bp-0x28], Other Possible Types: unsigned long long\n
    void* v3;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned long\n
    int v7;  // xmm0\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    int v9;  // xmm0\n
    int v10;  // xmm0\n
\n
    v4 = a0;\n
    if (!v4)\n
    {\n
        v5 = 0;\n
        return v8;\n
    }\n
    v3 = 0;\n
    v7 = 0;\n
    v2 = 4591870180066957722;\n
    for (v1 = 1; cgc_isspace(*(v4)); v4 += 1);\n
    v0 = 0;\n
    while (true)\n
    {\n
        v8 = *(v4);\n
        if (!v8)\n
            break;\n
        v8 = *(v4);\n
        if (v8 == 45)\n
        {\n
            if (!v0)\n
            {\n
                v1 = -1;\n
                v0 += 1;\n
                goto LABEL_402de9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 43)\n
        {\n
            if (!v0)\n
            {\n
                v0 += 1;\n
                goto LABEL_402de9;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
        }\n
        v8 = *(v4);\n
        if (v8 == 46)\n
        {\n
            if (v0 && v0 != 1)\n
            {\n
                v5 = 0;\n
                return *(v4);\n
            }\n
            v0 = 2;\n
            goto LABEL_402de9;\n
        }\n
        v8 = cgc_isdigit(*(v4));\n
        if (!v8)\n
            break;\n
        if (!v0)\n
        {\n
LABEL_402d59:\n
            v0 = 1;\n
            v7 = (0 CONCAT v3) * (0 CONCAT 0x4024000000000000) + (0 CONCAT *(v4) - 48);\n
            v3 = v7;\n
            goto LABEL_402de9;\n
        }\n
        else\n
        {\n
            if (v0 == 1)\n
                goto LABEL_402d59;\n
            if (v0 != 2)\n
            {\n
                v5 = 0;\n
                return v8;\n
            }\n
            *(&v7) = *(v4) - 48;\n
            v9 = v7 * (0 CONCAT v2) + (0 CONCAT v3);\n
            v3 = v9;\n
            tmp_45 = DivV(tmp_47, tmp_46);\n
            v7 = tmp_45;\n
            v2 = v7;\n
LABEL_402de9:\n
            v4 += 1;\n
        }\n
    }\n
    *(&v7) = v1;\n
    xmm0<16> = (xmm0<16> * Conv(64->128, Load(addr=stack_base-32, size=8, endness=Iend_LE)))\n
    v5 = v10;\n
    return v8;\n
}\n
", "4206125:sub_402e2d": null, "4206128:cgc_atoi": "long long cgc_atoi(char *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    void* v4;  // [bp-0x20], Other Possible Types: unsigned long\n
    char *v5;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v5 = a0;\n
    if (!v5)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v5)); v5 += 1);\n
    for (v2 = 0; *(v5); v5 += 1)\n
    {\n
        if (*(v5) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v5) != 43)\n
            {\n
                if (!cgc_isdigit(*(v5)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v5) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    if (v4 > 2147483647)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v0 = v4;\n
    v0 *= v3;\n
    v6 = v0;\n
    return v6;\n
}\n
", "4206566:sub_402fe6": null, "4206576:cgc_strcpy": "long long cgc_strcpy(unsigned long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    for (v0 = 0; v0[a1]; v0 += 1)\n
    {\n
        v0[a0] = v0[a1];\n
    }\n
    v0[a0] = 0;\n
    return a0;\n
}\n
", "4206679:sub_403057": null, "4206688:cgc_strncpy": "long long cgc_strncpy(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x29]\n
    char *v1;  // [bp-0x28], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a2)\n
            v0 = v1[a1];\n
        if (!(v0 & 1))\n
            break;\n
        v1[a0] = v1[a1];\n
        v1 += 1;\n
    }\n
    for (; v1 < a2; v1 += 1)\n
    {\n
        v1[a0] = 0;\n
    }\n
    return a0;\n
}\n
", "4206861:sub_40310d": null, "4206864:cgc_bzero": "long long cgc_bzero(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = a0;\n
    if (!a0)\n
    {\n
        return a0;\n
    }\n
    else if (!a1)\n
    {\n
        return a0;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            if (v1 >= a1)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4206982:sub_403186": null, "4206992:cgc_memset": "long long cgc_memset(unsigned long a0, unsigned long a1, char *a2)\n
{\n
    char *v0;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v0 = a2;\n
    while (true)\n
    {\n
        v0 += 1;\n
        if (!v0)\n
            break;\n
        *((a0 + v0)) = a1;\n
    }\n
    *((a0 + v0)) = a1;\n
    return a0;\n
}\n
", "4207080:sub_4031e8": null, "4207088:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    char v0;  // [bp-0x19]\n
    char *v1;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = a0;\n
    v1 = a1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = *(v2) == *(v1);\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        v1 += 1;\n
    }\n
    return *(v2) - *(v1);\n
}\n
", "4207206:sub_403266": null, "4207216:cgc_strncat": "long long cgc_strncat(char *a0, char *a1, unsigned long a2)\n
{\n
    char v0;  // [bp-0x39]\n
    unsigned long v1;  // [bp-0x38]\n
    unsigned long v2;  // [bp-0x30]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v2 = cgc_strlen(a0);\n
    if (a0 && a1)\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v1 < a2)\n
                v0 = a1[v1];\n
            if (!(v0 & 1))\n
                break;\n
            a0[v1 + v2] = a1[v1];\n
            v1 += 1;\n
        }\n
        a0[v1 + v2] = 0;\n
        v3 = a0;\n
        return v3;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4207425:sub_403341": null, "4207440:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return v0;\n
    for (v0 = 0; v0[a0]; v0 += 1);\n
    return v0;\n
}\n
", "4207523:sub_4033a3": null, "4207536:cgc_receive_until": "long long cgc_receive_until(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a2)\n
            return v2;\n
        v2[a0] = 0;\n
        if (cgc_receive(a0, a1, a2, v4))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v0 != a1)\n
        {\n
            v2[a0] = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            return v2;\n
        }\n
    }\n
}\n
", "4207713:sub_403461": null, "4207728:cgc_receive_until_flush": "long long cgc_receive_until_flush(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v4;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v2[a0] = 0;\n
            if (cgc_receive(a0, a1, a2, v4))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
            if (v0 == a1)\n
                return v2;\n
            v2[a0] = v0;\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                if (cgc_receive(a0, a1, a2, v4))\n
                {\n
                    return v2;\n
                }\n
                else if (v0 == a1)\n
                {\n
                    return v2;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4207965:sub_40355d": null, "4207968:cgc_strcat": "long long cgc_strcat(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x28], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x20], Other Possible Types: unsigned long\n
\n
    v1 = 0;\n
    v0 = 0;\n
    if (a0 && a1)\n
    {\n
        for (v0 = cgc_strlen(a0); v1[a1]; v1 += 1)\n
        {\n
            a0[v0] = v1[a1];\n
            v0 += 1;\n
        }\n
        v1 = v0;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4208130:sub_403602": null, "4208144:cgc_itoa": "long long cgc_itoa(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long v3;  // [bp-0x18]\n
\n
    v3 = a1;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!a0)\n
        return v2;\n
    v0 = v3;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a2)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((a0 + v1)) = ((0 CONCAT v3) /m 10 >> 64) + 48;\n
        v3 = (0 CONCAT v3) /m 10;\n
        v1 -= 1;\n
    } while (v3);\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4208376:sub_4036f8": null, "4208384:cgc_puts": "long long cgc_puts(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
\n
    v0 = a0;\n
    cgc_strlen(a0);\n
    cgc_transmit(a0, v2, v3, v4);\n
    return cgc_transmit(a0, v2, v3, v4);\n
}\n
", "4208466:sub_403752": null, "4208480:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    for (v0 = a0; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a1)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (*(v0) != a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4208596:sub_4037d4": null, "4208608:cgc_strtok": "extern struct_0 *cgc_prev_str;\n
extern unsigned int cgc_prev_str_len;\n
extern struct_0 *cgc_prev_str_ptr;\n
extern struct_0 *cgc_token;\n
\n
long long cgc_strtok(char *a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x48]\n
    char v2;  // [bp-0x3d]\n
    unsigned int v3;  // [bp-0x3c]\n
    char *v4;  // [bp-0x38]\n
    char *v5;  // [bp-0x30], Other Possible Types: unsigned long\n
    char *v6;  // [bp-0x28]\n
    char *v7;  // [bp-0x18], Other Possible Types: unsigned long\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
\n
    v7 = a0;\n
    if (!a1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (cgc_prev_str)\n
        {\n
            cgc_deallocate(a0, a1);\n
            cgc_prev_str = 0;\n
            cgc_prev_str_len = 0;\n
            cgc_prev_str_ptr = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!cgc_prev_str)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        else if (cgc_prev_str_ptr >= &cgc_prev_str[cgc_prev_str_len])\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    if (!cgc_prev_str)\n
    {\n
        if (cgc_strlen(v7) > 0x1000)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_prev_str_len = cgc_strlen(v7);\n
        if (cgc_allocate(a0, a1, v10))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_strcpy(cgc_prev_str, v7);\n
        cgc_prev_str_ptr = cgc_prev_str;\n
    }\n
    v7 = &cgc_prev_str_ptr->field_0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (cgc_strchr(a1, *(v7)))\n
            v2 = v7 < &cgc_prev_str[cgc_prev_str_len];\n
        if (!(v2 & 1))\n
            break;\n
        v7 += 1;\n
    }\n
    if (v7 >= &cgc_prev_str[cgc_prev_str_len])\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v6 = v7;\n
    v1 = v7;\n
    v5 = &v1[cgc_strlen(v7)];\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(a1))\n
            break;\n
        v4 = cgc_strchr(v6, a1[v3]);\n
        if (v4 && v4 && v4 < v5)\n
            v5 = v4;\n
        v3 += 1;\n
    }\n
    cgc_token = v6;\n
    *(v5) = 0;\n
    cgc_prev_str_ptr = v5 + 1;\n
    v8 = cgc_token;\n
    return v8;\n
}\n
", "4209318:sub_403aa6": null, "4209328:cgc_write": "long long cgc_write(unsigned long long a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x28]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rdx\n
    unsigned long long v5;  // rcx\n
\n
    v1 = a0;\n
    cgc_transmit(a0, a1, v4, v5);\n
    if (a1 != *(&v0))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v0);\n
    return v2;\n
}\n
", "4209411:sub_403b03": null, "4209424:cgc_strdup": "long long cgc_strdup(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0x28]\n
    char v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x10], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
\n
    if (!a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strlen(a0);\n
    if (cgc_allocate(a0, v4, v5))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v0 = *(&v1);\n
    cgc_bzero(v0, cgc_strlen(a0) + 1);\n
    cgc_strcpy(*(&v1), a0);\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4209573:sub_403ba5": null, "4209584:cgc_putc": "long long cgc_putc(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rsi\n
    unsigned long long v2;  // rdx\n
    unsigned long long v3;  // rcx\n
\n
    if (cgc_transmit(a0, v1, v2, v3))\n
    {\n
        cgc__terminate(a0);\n
        return a0;\n
    }\n
    return a0;\n
}\n
", "4209646:sub_403bee": null, "4209648:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_str(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    unsigned int v7;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    if (v4 < 0)\n
    {\n
        v3->field_0 = 45;\n
        v3 += 1;\n
        v4 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v4 >> 31 CONCAT v4) /m 10 >> 32) + 48;\n
        v7 = v4;\n
        v4 = (v7 >> 31 CONCAT v7) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v9 = v0;\n
        v0 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209873:sub_403cd1": null, "4209888:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_int_to_hex(unsigned long a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct_0 *v1;  // [bp-0x40], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xc], Other Possible Types: unsigned long\n
    struct_0 *v7;  // rax\n
    unsigned int v8;  // eax\n
\n
    v4 = a0;\n
    v3 = a1;\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!v3)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v4 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v7 = v1;\n
            v7->field_0 = v7->field_0 + 7;\n
        }\n
        v4 = v4 >> 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v4);\n
    while (true)\n
    {\n
        v8 = v0;\n
        v0 = v8 - 1;\n
        if (v8 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(v3) = *(v1);\n
        v3 += 1;\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4210095:sub_403daf": null, "4210096:cgc_float_to_str": "long long cgc_float_to_str(char *a0, unsigned long a1)\n
{\n
    int tmp_7;  // tmp #7\n
    int tmp_9;  // tmp #9\n
    int tmp_8;  // tmp #8\n
    int tmp_12;  // tmp #12\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    char v0;  // [bp-0x4a]\n
    char v1;  // [bp-0x49]\n
    unsigned long long v2;  // [bp-0x48]\n
    char *v3;  // [bp-0x40], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned long v9;  // [bp-0x10]\n
    char v10;  // [bp-0x8]\n
    unsigned long long v12;  // rbp\n
    unsigned long v13;  // xmm0lq\n
    char *v14;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long long v15;  // xmm0lq\n
    char *v16;  // rax\n
    int v18;  // xmm0, Other Possible Types: unsigned long, unsigned long long\n
    char *v19;  // rax\n
    char *v20;  // rax\n
    char *v21;  // rax\n
\n
    v12 = &v10;\n
    v9 = v13;\n
    if (!a0)\n
    {\n
        return v14;\n
    }\n
    else if (!cgc_isnan())\n
    {\n
        if (cgc_isinf())\n
        {\n
            v14 = cgc_strcpy(a0, \"inf\");\n
        }\n
        else\n
        {\n
            v15 = v9;\n
            if ((((CmpF(v15, 0) & 69) >> 6) & 1) == 1 && !([D] amd64g_calculate_condition(0xa<64>, 0x0<64>, Conv(32->64, ((xmm0lq<8> CmpF 0x0<64>) & 0x45<32>)), 0x0<64>, cc_ndep<8>)))\n
            {\n
                v14 = cgc_strcpy(a0, \"0.00000\");\n
                goto LABEL_4040b1;\n
            }\n
            v4 = 0;\n
            v3 = a0;\n
            v18 = v9;\n
            if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) == 1)\n
            {\n
                tmp_7 = SubV(tmp_9, tmp_8);\n
                v18 = tmp_7;\n
                v9 = v18;\n
            }\n
            else\n
            {\n
                s_10 =L Conv(128->64, ((0x0<64> CONCAT 0x3ed4f8b588e368f1<64>) + Conv(64->128, Load(addr=stack_base-16, size=8, endness=Iend_LE))))<8>\n
            }\n
            if ((((CmpF(0, v9) & 69) | ((CmpF(0, v9) & 69) >> 6)) & 1) != 1)\n
            {\n
                v4 = 1;\n
                v16 = v3;\n
                v3 = v16 + 1;\n
                *(v16) = 45;\n
                v9 ^= 0x8000000000000000;\n
            }\n
            cgc_log10();\n
            v7 = v9;\n
            if ((((CmpF(0x3ff0000000000000, v7) & 69) | ((CmpF(0x3ff0000000000000, v7) & 69) >> 6)) & 1) != 1)\n
                v7 = 0;\n
            v6 = 0;\n
            v5 = 0;\n
            while (true)\n
            {\n
                *(&v18) = v9;\n
                v1 = 1;\n
                if ((((CmpF(v18, 4532020583610935537) & 69) | ((CmpF(v18, 4532020583610935537) & 69) >> 6)) & 1) == 1)\n
                    v1 = 0 <= v7;\n
                if (!(v1 & 1))\n
                    break;\n
                cgc_pow();\n
                v2 = 0x4024000000000000;\n
                *(&v18) = v2;\n
                if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1 && !cgc_isinf())\n
                {\n
                    tmp_12 = DivV(tmp_13, tmp_10);\n
                    v18 = tmp_12;\n
                    cgc_floor();\n
                    v8 = v18;\n
                    v9 = (0 CONCAT v8 ^ 0x8000000000000000) * (0 CONCAT v2) + (0 CONCAT v9);\n
                    v19 = v3;\n
                    v3 = v19 + 1;\n
                    *(v19) = v8 + 48;\n
                    if (v5)\n
                        v6 += 1;\n
                }\n
                if (!v7)\n
                {\n
                    *(&v18) = v9;\n
                    if ((((CmpF(v18, 0) & 69) | ((CmpF(v18, 0) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v20 = v3;\n
                        v3 = v20 + 1;\n
                        *(v20) = 46;\n
                        v5 = 1;\n
                        v6 = 0;\n
                    }\n
                }\n
                v7 -= 1;\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v5)\n
                    v0 = v6 < a1;\n
                if (!(v0 & 1))\n
                    break;\n
                v21 = v3;\n
                v3 = v21 + 1;\n
                *(v21) = 48;\n
                v6 += 1;\n
            }\n
            v14 = v3;\n
            *(v14) = 0;\n
LABEL_4040b1:\n
        }\n
        return v14;\n
    }\n
    else\n
    {\n
        v14 = cgc_strcpy(a0, \"nan\");\n
        return v14;\n
    }\n
}\n
", "4210881:sub_4040c1": null, "4210896:cgc_vprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vprintf(char *a0, struct_2 *a1)\n
{\n
    char v0;  // [bp-0x159]\n
    unsigned long v1;  // [bp-0x158]\n
    struct struct_1 **v2;  // [bp-0x150], Other Possible Types: unsigned long\n
    struct_2 *v3;  // [bp-0x148]\n
    unsigned int v4;  // [bp-0x13c]\n
    unsigned long v5;  // [bp-0x138]\n
    unsigned long long *v6;  // [bp-0x130], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x128]\n
    unsigned int *v8;  // [bp-0x120]\n
    unsigned int v9;  // [bp-0x114]\n
    unsigned long v10;  // [bp-0x110]\n
    unsigned int *v11;  // [bp-0x108], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x100]\n
    unsigned int v13;  // [bp-0xf4]\n
    unsigned long v14;  // [bp-0xf0]\n
    unsigned int *v15;  // [bp-0xe8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xe0]\n
    unsigned int v17;  // [bp-0xd4]\n
    unsigned int *v18;  // [bp-0xd0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xc8]\n
    unsigned int v20;  // [bp-0xc0]\n
    unsigned int v21;  // [bp-0xbc]\n
    char *v22;  // [bp-0xb8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xa8]\n
    struct_0 *v25;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0x94]\n
    struct_0 *v27;  // [bp-0x90], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x88]\n
    char v29;  // [bp-0x81]\n
    unsigned int v30;  // [bp-0x80]\n
    unsigned int v31;  // [bp-0x7c]\n
    unsigned int v32;  // [bp-0x78]\n
    unsigned int v33;  // [bp-0x74]\n
    unsigned int v34;  // [bp-0x70]\n
    unsigned int v35;  // [bp-0x6c]\n
    char v36;  // [bp-0x68]\n
    unsigned int v37;  // [bp-0x24]\n
    char *v38;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned int v39;  // [bp-0xc]\n
    struct_2 *v41;  // rcx\n
    unsigned long long v42;  // rdx\n
    unsigned int *v43;  // rax\n
    struct_2 *v44;  // rcx\n
    unsigned int *v45;  // rdx\n
    struct_2 *v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned int *v48;  // rax\n
    struct_2 *v49;  // rcx\n
    unsigned int *v50;  // rdx\n
    struct_2 *v51;  // rcx\n
    unsigned long long v52;  // rdx\n
    unsigned int *v53;  // rax\n
    struct_2 *v54;  // rcx\n
    unsigned int *v55;  // rdx\n
    unsigned long long v56;  // rdx\n
    unsigned long long *v57;  // rax\n
    struct_2 *v58;  // rcx\n
    unsigned long long *v59;  // rdx\n
    struct_2 *v60;  // rcx\n
    unsigned long long v61;  // rdx\n
    struct struct_1 **v62;  // rax\n
    struct_2 *v63;  // rcx\n
    struct struct_1 **v64;  // rdx\n
\n
    v38 = a0;\n
    v37 = 0;\n
    if (!v38)\n
    {\n
        v39 = -1;\n
        return v39;\n
    }\n
    while (*(v38))\n
    {\n
        if (*(v38) != 64)\n
        {\n
            cgc_putc(*(v38));\n
            v38 += 1;\n
            v37 += 1;\n
LABEL_404ad6:\n
        }\n
        else\n
        {\n
            v38 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v38) == 64)\n
            {\n
                cgc_putc(64);\n
                v38 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 45)\n
            {\n
                v32 = 1;\n
                v38 += 1;\n
            }\n
            if (cgc_isdigit(*(v38)))\n
            {\n
                if (*(v38) == 48)\n
                {\n
                    v33 = 1;\n
                    v38 += 1;\n
                }\n
                if (cgc_isdigit(*(v38)))\n
                {\n
                    for (v35 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
                }\n
            }\n
            if (*(v38) == 46)\n
            {\n
                v38 += 1;\n
                for (v34 = cgc_atoi(v38); cgc_isdigit(*(v38)); v38 += 1);\n
            }\n
            if (*(v38) == 99)\n
            {\n
                v19 = a1;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v44 = v19;\n
                    v45 = v44->field_8;\n
                    v44->field_8 = &v45[2];\n
                    v18 = v45;\n
                }\n
                else\n
                {\n
                    v41 = v19;\n
                    v42 = v20;\n
                    v43 = v42 + v41->field_10;\n
                    v41->field_0 = v42 + 8;\n
                    v18 = v43;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                cgc_putc(v29);\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 100)\n
            {\n
                v16 = a1;\n
                v17 = v16->field_0;\n
                if (v17 > 40)\n
                {\n
                    v49 = v16;\n
                    v50 = v49->field_8;\n
                    v49->field_8 = &v50[2];\n
                    v15 = v50;\n
                }\n
                else\n
                {\n
                    v46 = v16;\n
                    v47 = v17;\n
                    v48 = v47 + v46->field_10;\n
                    v46->field_0 = v47 + 8;\n
                    v15 = v48;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    cgc_putc(*(v27));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 120)\n
            {\n
                v12 = a1;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v54 = v12;\n
                    v55 = v54->field_8;\n
                    v54->field_8 = &v55[2];\n
                    v11 = v55;\n
                }\n
                else\n
                {\n
                    v51 = v12;\n
                    v52 = v13;\n
                    v53 = v52 + v51->field_10;\n
                    v51->field_0 = v52 + 8;\n
                    v11 = v53;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; *(v25); v25 += 1)\n
                {\n
                    cgc_putc(*(v25));\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (*(v38) == 102)\n
            {\n
                v7 = a1;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v58 = v7;\n
                    v59 = v58->field_8;\n
                    v58->field_8 = &v59[1];\n
                    v6 = v59;\n
                }\n
                else\n
                {\n
                    v56 = v9;\n
                    v57 = v56 + v7->field_10;\n
                    *(v8) = v56 + 16;\n
                    v6 = v57;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; *(v23); v23 += 1)\n
                {\n
                    cgc_putc(*(v23));\n
                    v37 += 1;\n
                }\n
                v38 += 1;\n
                continue;\n
            }\n
            if (!(*(v38) == 115))\n
                goto LABEL_404ad6;\n
            v3 = a1;\n
            v4 = v3->field_0;\n
            if (v4 <= 40)\n
            {\n
                v60 = v3;\n
                v61 = v4;\n
                v62 = v61 + v60->field_10;\n
                v60->field_0 = v61 + 8;\n
                v2 = v62;\n
            }\n
            else\n
            {\n
                v63 = v3;\n
                v64 = v63->field_8;\n
                v63->field_8 = &v64[1];\n
                v2 = v64;\n
            }\n
            v22 = *(v2);\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_404973;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_404973:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        cgc_putc(48);\n
                    else\n
                        cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                cgc_putc(*(v22));\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v37 += 1;\n
                }\n
            }\n
            v38 += 1;\n
        }\n
    }\n
    v39 = v37;\n
    return v39;\n
}\n
", "4213485:sub_404aed": null, "4213488:cgc_vsprintf": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_vsprintf(char *a0, char *a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x169]\n
    unsigned long v1;  // [bp-0x168]\n
    struct struct_1 **v2;  // [bp-0x160], Other Possible Types: unsigned long\n
    struct_2 *v3;  // [bp-0x158]\n
    unsigned int v4;  // [bp-0x14c]\n
    unsigned long v5;  // [bp-0x148]\n
    unsigned long long *v6;  // [bp-0x140], Other Possible Types: unsigned long\n
    struct_2 *v7;  // [bp-0x138]\n
    unsigned int *v8;  // [bp-0x130]\n
    unsigned int v9;  // [bp-0x124]\n
    unsigned long v10;  // [bp-0x120]\n
    unsigned int *v11;  // [bp-0x118], Other Possible Types: unsigned long\n
    struct_2 *v12;  // [bp-0x110]\n
    unsigned int v13;  // [bp-0x104]\n
    unsigned long v14;  // [bp-0x100]\n
    unsigned int *v15;  // [bp-0xf8], Other Possible Types: unsigned long\n
    struct_2 *v16;  // [bp-0xf0]\n
    unsigned int v17;  // [bp-0xe4]\n
    unsigned int *v18;  // [bp-0xe0], Other Possible Types: unsigned long\n
    struct_2 *v19;  // [bp-0xd8]\n
    unsigned int v20;  // [bp-0xd0]\n
    unsigned int v21;  // [bp-0xcc]\n
    char *v22;  // [bp-0xc8], Other Possible Types: unsigned long\n
    struct_0 *v23;  // [bp-0xc0], Other Possible Types: unsigned long\n
    unsigned long v24;  // [bp-0xb8]\n
    struct_0 *v25;  // [bp-0xb0], Other Possible Types: unsigned long\n
    unsigned int v26;  // [bp-0xa4]\n
    struct_0 *v27;  // [bp-0xa0], Other Possible Types: unsigned long\n
    unsigned int v28;  // [bp-0x98]\n
    char v29;  // [bp-0x91]\n
    unsigned int v30;  // [bp-0x90]\n
    unsigned int v31;  // [bp-0x8c]\n
    unsigned int v32;  // [bp-0x88]\n
    unsigned int v33;  // [bp-0x84]\n
    unsigned int v34;  // [bp-0x80]\n
    unsigned int v35;  // [bp-0x7c]\n
    char v36;  // [bp-0x78]\n
    unsigned int v37;  // [bp-0x2c]\n
    struct_2 *v38;  // [bp-0x28]\n
    char *v39;  // [bp-0x20], Other Possible Types: unsigned long\n
    unsigned int v40;  // [bp-0xc]\n
    struct_2 *v42;  // rcx\n
    unsigned long long v43;  // rdx\n
    unsigned int *v44;  // rax\n
    struct_2 *v45;  // rcx\n
    unsigned int *v46;  // rdx\n
    struct_2 *v47;  // rcx\n
    unsigned long long v48;  // rdx\n
    unsigned int *v49;  // rax\n
    struct_2 *v50;  // rcx\n
    unsigned int *v51;  // rdx\n
    struct_2 *v52;  // rcx\n
    unsigned long long v53;  // rdx\n
    unsigned int *v54;  // rax\n
    struct_2 *v55;  // rcx\n
    unsigned int *v56;  // rdx\n
    unsigned long long v57;  // rdx\n
    unsigned long long *v58;  // rax\n
    struct_2 *v59;  // rcx\n
    unsigned long long *v60;  // rdx\n
    struct_2 *v61;  // rcx\n
    unsigned long long v62;  // rdx\n
    struct struct_1 **v63;  // rax\n
    struct_2 *v64;  // rcx\n
    struct struct_1 **v65;  // rdx\n
\n
    v39 = a1;\n
    v38 = a2;\n
    v37 = 0;\n
    if (!v39)\n
    {\n
        v40 = -1;\n
        return v40;\n
    }\n
    while (*(v39))\n
    {\n
        if (*(v39) != 64)\n
        {\n
            a0[v37] = *(v39);\n
            v39 += 1;\n
            v37 += 1;\n
LABEL_4055db:\n
        }\n
        else\n
        {\n
            v39 += 1;\n
            v35 = 0;\n
            v34 = 0;\n
            v33 = 0;\n
            v32 = 0;\n
            v30 = 0;\n
            if (*(v39) == 64)\n
            {\n
                a0[v37] = 64;\n
                v39 += 1;\n
                v37 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 45)\n
            {\n
                v32 = 1;\n
                v39 += 1;\n
            }\n
            if (cgc_isdigit(*(v39)))\n
            {\n
                if (*(v39) == 48)\n
                {\n
                    v33 = 1;\n
                    v39 += 1;\n
                }\n
                if (cgc_isdigit(*(v39)))\n
                {\n
                    for (v35 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
                }\n
            }\n
            if (*(v39) == 46)\n
            {\n
                v39 += 1;\n
                for (v34 = cgc_atoi(v39); cgc_isdigit(*(v39)); v39 += 1);\n
            }\n
            if (*(v39) == 99)\n
            {\n
                v19 = v38;\n
                v20 = v19->field_0;\n
                if (v20 > 40)\n
                {\n
                    v45 = v19;\n
                    v46 = v45->field_8;\n
                    v45->field_8 = &v46[2];\n
                    v18 = v46;\n
                }\n
                else\n
                {\n
                    v42 = v19;\n
                    v43 = v20;\n
                    v44 = v43 + v42->field_10;\n
                    v42->field_0 = v43 + 8;\n
                    v18 = v44;\n
                }\n
                v29 = *(v18);\n
                v30 = v35 - 1;\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (!v33)\n
                            a0[v37] = 32;\n
                        else\n
                            a0[v37] = 48;\n
                        v37 += 1;\n
                    }\n
                }\n
                a0[v37] = v29;\n
                v37 += 1;\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 100)\n
            {\n
                v16 = v38;\n
                v17 = v16->field_0;\n
                if (v17 <= 40)\n
                {\n
                    v47 = v16;\n
                    v48 = v17;\n
                    v49 = v48 + v47->field_10;\n
                    v47->field_0 = v48 + 8;\n
                    v15 = v49;\n
                }\n
                else\n
                {\n
                    v50 = v16;\n
                    v51 = v50->field_8;\n
                    v50->field_8 = &v51[2];\n
                    v15 = v51;\n
                }\n
                v28 = *(v15);\n
                cgc_int_to_str(v28, &v36);\n
                v14 = v35;\n
                v30 = v14 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v27 = &v36; *(v27); v27 += 1)\n
                {\n
                    a0[v37] = *(v27);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 120)\n
            {\n
                v12 = v38;\n
                v13 = v12->field_0;\n
                if (v13 > 40)\n
                {\n
                    v55 = v12;\n
                    v56 = v55->field_8;\n
                    v55->field_8 = &v56[2];\n
                    v11 = v56;\n
                }\n
                else\n
                {\n
                    v52 = v12;\n
                    v53 = v13;\n
                    v54 = v53 + v52->field_10;\n
                    v52->field_0 = v53 + 8;\n
                    v11 = v54;\n
                }\n
                v26 = *(v11);\n
                cgc_int_to_hex(v26, &v36);\n
                v10 = v35;\n
                v30 = v10 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v25 = &v36; *(v25); v25 += 1)\n
                {\n
                    a0[v37] = *(v25);\n
                    v37 += 1;\n
                }\n
                if (v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (*(v39) == 102)\n
            {\n
                v7 = v38;\n
                v8 = &v7->field_4;\n
                v9 = v7->field_4;\n
                if (v9 > 160)\n
                {\n
                    v59 = v7;\n
                    v60 = v59->field_8;\n
                    v59->field_8 = &v60[1];\n
                    v6 = v60;\n
                }\n
                else\n
                {\n
                    v57 = v9;\n
                    v58 = v57 + v7->field_10;\n
                    *(v8) = v57 + 16;\n
                    v6 = v58;\n
                }\n
                v24 = *(v6);\n
                cgc_float_to_str(&v36, v34);\n
                v5 = v35;\n
                v30 = v5 - cgc_strlen(&v36);\n
                if (!v32)\n
                {\n
                    for (v31 = 0; v31 < v30; v31 += 1)\n
                    {\n
                        if (v33)\n
                            a0[v37] = 48;\n
                        else\n
                            a0[v37] = 32;\n
                        v37 += 1;\n
                    }\n
                }\n
                for (v23 = &v36; v23->field_0; v23 += 1)\n
                {\n
                    a0[v37] = v23->field_0;\n
                    v37 += 1;\n
                }\n
                v39 += 1;\n
                continue;\n
            }\n
            if (!(*(v39) == 115))\n
                goto LABEL_4055db;\n
            v3 = v38;\n
            v4 = v3->field_0;\n
            if (v4 > 40)\n
            {\n
                v64 = v3;\n
                v65 = v64->field_8;\n
                v64->field_8 = &v65[1];\n
                v2 = v65;\n
            }\n
            else\n
            {\n
                v61 = v3;\n
                v62 = v4;\n
                v63 = v62 + v61->field_10;\n
                v61->field_0 = v62 + 8;\n
                v2 = v63;\n
            }\n
            v22 = *(v2);\n
            if (v34 > 0)\n
            {\n
                v1 = v34;\n
                if (v1 < cgc_strlen(v22))\n
                {\n
                    v21 = v34;\n
                    goto LABEL_405447;\n
                }\n
            }\n
            v21 = cgc_strlen(v22);\n
LABEL_405447:\n
            v30 = v35 - v21;\n
            if (!v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    if (v33)\n
                        a0[v37] = 48;\n
                    else\n
                        a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v22))\n
                    v0 = 0 < v21;\n
                if (!(v0 & 1))\n
                    break;\n
                a0[v37] = *(v22);\n
                v37 += 1;\n
                v22 += 1;\n
                v21 -= 1;\n
            }\n
            if (v32)\n
            {\n
                for (v31 = 0; v31 < v30; v31 += 1)\n
                {\n
                    a0[v37] = 32;\n
                    v37 += 1;\n
                }\n
            }\n
            v39 += 1;\n
        }\n
    }\n
    v40 = v37;\n
    return v40;\n
}\n
", "4216306:sub_4055f2": null, "4216320:cgc_printf": "long long cgc_printf(char *a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x10f8]\n
    unsigned long v1;  // [bp-0x10f0]\n
    unsigned long v2;  // [bp-0x10e8]\n
    unsigned long v3;  // [bp-0x10e0]\n
    unsigned long v4;  // [bp-0x10d8]\n
    unsigned long v5;  // [bp-0x10d0]\n
    int v6;  // [bp-0x10c8]\n
    int v7;  // [bp-0x10b8]\n
    int v8;  // [bp-0x10a8]\n
    int v9;  // [bp-0x1098]\n
    int v10;  // [bp-0x1088]\n
    int v11;  // [bp-0x1078]\n
    int v12;  // [bp-0x1068]\n
    int v13;  // [bp-0x1058]\n
    unsigned int v14;  // [bp-0x2c]\n
    unsigned int v15;  // [bp-0x28]\n
    unsigned int v16;  // [bp-0x24]\n
    unsigned long v17;  // [bp-0x20]\n
    unsigned long v18;  // [bp-0x18]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
\n
    if (v20)\n
    {\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
    }\n
    v5 = v29;\n
    v4 = a4;\n
    v3 = a3;\n
    v2 = a2;\n
    v1 = a1;\n
    v18 = &v0;\n
    v17 = &v19;\n
    v16 = 48;\n
    v15 = 8;\n
    v14 = cgc_vprintf(a0, &v15);\n
    return v14;\n
}\n
", "4216495:sub_4056af": null, "4216496:cgc_sprintf": "long long cgc_sprintf(char *a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0xf8]\n
    unsigned long v1;  // [bp-0xe8]\n
    unsigned long v2;  // [bp-0xe0]\n
    unsigned long v3;  // [bp-0xd8]\n
    unsigned long v4;  // [bp-0xd0]\n
    int v5;  // [bp-0xc8]\n
    int v6;  // [bp-0xb8]\n
    int v7;  // [bp-0xa8]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x3c]\n
    unsigned int v14;  // [bp-0x38]\n
    unsigned int v15;  // [bp-0x34]\n
    unsigned long v16;  // [bp-0x30]\n
    unsigned long v17;  // [bp-0x28]\n
    unsigned long v18;  // [bp+0x8]\n
    char v19;  // al\n
    int v20;  // xmm0\n
    int v21;  // xmm1\n
    int v22;  // xmm2\n
    int v23;  // xmm3\n
    int v24;  // xmm4\n
    int v25;  // xmm5\n
    int v26;  // xmm6\n
    int v27;  // xmm7\n
    unsigned long v28;  // r9\n
\n
    if (v19)\n
    {\n
        v5 = v20;\n
        v6 = v21;\n
        v7 = v22;\n
        v8 = v23;\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
    }\n
    v4 = v28;\n
    v3 = a4;\n
    v2 = a3;\n
    v1 = a2;\n
    v17 = &v0;\n
    v16 = &v18;\n
    v15 = 48;\n
    v14 = 16;\n
    v13 = cgc_vsprintf(a0, a1, &v14);\n
    return v13;\n
}\n
", "4216660:sub_405754": null, "4216672:cgc_init_data": "long long cgc_init_data()\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    v0 = cgc_malloc(336);\n
    if (!v0)\n
    {\n
        cgc__terminate(336);\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4216733:sub_40579d": null, "4216736:cgc_destroy_data": "long long cgc_destroy_data(unsigned long long a0)\n
{\n
    return cgc_free(a0);\n
}\n
", "4216763:sub_4057bb": null, "4216768:cgc_AddDive": "typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[320];\n
    struct struct_0 *field_140;\n
    unsigned int field_148;\n
} struct_1;\n
\n
long long cgc_AddDive(struct_1 *a0)\n
{\n
    unsigned long v0;  // [bp-0x30]\n
    unsigned long long v1[3];  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v1[0] = cgc_malloc(24);\n
    v0 = cgc_malloc(216);\n
    if (v0 && !(!v1))\n
        goto LABEL_405810;\n
    cgc__terminate(216);\n
LABEL_405810:\n
    v1[1] = v0;\n
    v1[2] = 0;\n
    v2 = a0->field_140;\n
    v3 = v2;\n
    if (!v2)\n
    {\n
        a0->field_140 = &v1[0];\n
        v1[0] = 0;\n
        a0->field_148 = 1;\n
        return v0;\n
    }\n
    while (true)\n
    {\n
        v3 = v2;\n
        v2 = v2->field_10;\n
    }\n
}\n
", "4217044:sub_4058d4": null, "4217056:cgc_DeleteDive": "typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[320];\n
    struct struct_0 *field_140;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    unsigned long long field_8;\n
    struct struct_4 *field_10;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
} struct_4;\n
\n
long long cgc_DeleteDive(struct_1 *a0, struct_3 *a1)\n
{\n
    char v0;  // [bp-0x39]\n
    void* v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x30], Other Possible Types: unsigned long\n
    struct_2 *v3;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_2 *v4;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = a0->field_140;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2)\n
            v0 = v2 != a1;\n
        if (!(v0 & 1))\n
            break;\n
        v2 = v2->field_10;\n
    }\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    if (a1->field_0)\n
    {\n
        a1->field_0->field_10 = a1->field_10;\n
        v3 = a1->field_0;\n
    }\n
    if (a1->field_10)\n
        a1->field_10->field_0 = a1->field_0;\n
    if (a1 == a0->field_140)\n
        a0->field_140 = a0->field_140->field_10;\n
    cgc_free(a1->field_8);\n
    cgc_free(a1);\n
    v4 = v3;\n
    return v4;\n
}\n
", "4217362:sub_405a12": null, "4217376:main": "int main(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v3 = 0;\n
    v2 = a0;\n
    v1 = a1;\n
    v0 = cgc_init_data();\n
    cgc_MainMenu(v0);\n
    cgc_destroy_data(v0);\n
    return 1;\n
}\n
", "4217436:sub_405a5c": null, "4217440:cgc_GetLongString": "long long cgc_GetLongString(char a0[64])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    cgc_bzero(a0, 64);\n
    v0 = cgc_receive_until_flush(a0, 10, 64);\n
    if (v0 < 64)\n
        a0[v0] = 0;\n
    a0[63] = 0;\n
    return v0;\n
}\n
", "4217526:sub_405ab6": null, "4217536:cgc_GetShortString": "long long cgc_GetShortString(char a0[32])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    cgc_bzero(a0, 32);\n
    v0 = cgc_receive_until_flush(a0, 10, 32);\n
    if (v0 < 32)\n
        a0[v0] = 0;\n
    a0[31] = 0;\n
    return v0;\n
}\n
", "4217622:sub_405b16": null, "4217632:cgc_GetChar": "long long cgc_GetChar()\n
{\n
    char v0;  // [bp-0xa]\n
\n
    cgc_receive_until_flush(&v0, 10, 2);\n
    if (cgc_islower(v0))\n
    {\n
        v0 -= 32;\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4217697:sub_405b61": null, "4217712:cgc_GetInt": "long long cgc_GetInt()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    char v2;  // [bp-0x28]\n
\n
    cgc_memset(&v2, 0, 0x20);\n
    v1 = 0;\n
    v0 = cgc_receive_until_flush(&v2, 10, 10);\n
    (&v2)[1 + v0] = 0;\n
    v1 = cgc_atoi(&v2);\n
    if (!v0)\n
    {\n
        v1 = -999999;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4217817:sub_405bd9": null, "4217824:cgc_GetPositiveInt": "long long cgc_GetPositiveInt()\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp-0x10], Other Possible Types: unsigned long long\n
\n
    v0 = cgc_GetInt();\n
    if (v0 == -999999)\n
    {\n
        v1 = -999999;\n
        return v1;\n
    }\n
    if (v0 < 0)\n
        v0 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4217905:sub_405c31": null, "4217920:cgc_EpochToDate": "extern void g_4070d0;\n
\n
long long cgc_EpochToDate(unsigned int a0[6], unsigned long a1)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    char v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned int v13;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v21;  // eax\n
\n
    v10 = 3600;\n
    v9 = 86400;\n
    v8 = 31536000;\n
    v7 = 0x1e28500;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (a1 < 0)\n
    {\n
        a0[0] = 0;\n
        return a0;\n
    }\n
    for (v5 = a1; v5 >= 0; v4 += 1)\n
    {\n
        v6 = v5;\n
        v13 = v4;\n
        if (!(v13 >> 31 CONCAT v13) /m 4 >> 32)\n
            v5 = v6 - 0x1e28500;\n
        else\n
            v5 = v6 - 31536000;\n
    }\n
    v4 -= 1;\n
    a0[2] = v4 + 1970;\n
    memcpy(&v2, &g_4070d0, 48);\n
    v5 = v6;\n
    v15 = v4;\n
    if (!(v15 >> 31 CONCAT v15) /m 4 >> 32)\n
        v3 = 28;\n
    v4 = 0;\n
    for (v1 = 0; v5 >= 0; v4 += 1)\n
    {\n
        v6 = v5;\n
        v1 = *(&(&v2)[4 * v4]) * 86400;\n
        v5 = v6 - v1;\n
    }\n
    a0[0] = v4;\n
    v17 = v6;\n
    v0 = (v17 >> 31 CONCAT v17) /m 86400 + 1;\n
    a0[1] = v0;\n
    v6 -= (a0[1] - 1) * 86400;\n
    v19 = v6;\n
    a0[3] = (v19 >> 31 CONCAT v19) /m 3600;\n
    v6 -= a0[3] * 3600;\n
    v21 = v6;\n
    a0[4] = (v21 >> 31 CONCAT v21) /m 60;\n
    a0[5] = v6 - a0[4] * 60;\n
    return a0;\n
}\n
", "4218387:sub_405e13": null, "4218400:cgc_MainMenu": "extern unsigned int g_407070;\n
extern unsigned int g_407489;\n
\n
long long cgc_MainMenu(unsigned long long a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    char v1;  // [bp-0x11]\n
\n
    v1 = 1;\n
    while (v1 == 1)\n
    {\n
        cgc_puts(&g_407489);\n
        cgc_puts(\"C - Change Diver Info\");\n
        cgc_puts(\"L - Log a New Dive\");\n
        cgc_puts(\"D - Download Dive Data\");\n
        cgc_puts(\"E - Edit Dives\");\n
        cgc_puts(\"P - Print Dive Logs\");\n
        cgc_puts(\"R - Remove Dives\");\n
        cgc_puts(\"S - Diver Statistics\");\n
        cgc_puts(\"X - Exit Application\");\n
        cgc_printf(\":\", a1, a2, &g_407070, a4);\n
        v1 = cgc_GetChar();\n
        v0 = v1 - 67;\n
        switch (v0)\n
        {\n
        case 0:\n
            cgc_ChangeDiverInfo(a0);\n
            v1 = 1;\n
            break;\n
        case 1:\n
            cgc_DownloadDiveData(a0);\n
            v1 = 1;\n
            break;\n
        case 2:\n
            cgc_EditDive(a0);\n
            v1 = 1;\n
            break;\n
        case 9:\n
            cgc_LogNewDive(a0);\n
            v1 = 1;\n
            break;\n
        case 13:\n
            cgc_PrintDiveLogs(a0);\n
            v1 = 1;\n
            break;\n
        case 15:\n
            cgc_RemoveDive(a0);\n
            v1 = 1;\n
            break;\n
        case 16:\n
            cgc_DiverStatistics(a0);\n
            v1 = 1;\n
            break;\n
        case 21:\n
            cgc_destroy_data(a0);\n
            break;\n
        default:\n
            v1 = 1;\n
            break;\n
        }\n
    }\n
    return v1;\n
}\n
", "4218756:sub_405f84": null, "4218768:cgc_ChangeDiverInfo": "extern unsigned int g_407489;\n
\n
long long cgc_ChangeDiverInfo(unsigned long long a0)\n
{\n
    cgc_puts(&g_407489);\n
    cgc_SetParam(\"First Name\", a0, 20);\n
    cgc_SetParam(\"Last Name\", a0 + 32, 20);\n
    cgc_SetParam(\"Street\", a0 + 64, 29);\n
    cgc_SetParam(\"City\", a0 + 128, 19);\n
    cgc_SetParam(\"State\", a0 + 160, 2);\n
    cgc_SetParam(\"Zip Code\", a0 + 192, 10);\n
    cgc_SetParam(\"Phone Number\", a0 + 224, 15);\n
    cgc_SetParam(\"PADI Diver Number\", a0 + 0x100, 19);\n
    cgc_SetParam(\"PADI Cert Date\", a0 + 288, 10);\n
    cgc_SanitizeDate(a0 + 288);\n
    return cgc_PrintDiverInfo(a0);\n
}\n
", "4219062:sub_4060b6": null, "4219072:cgc_LogNewDive": "typedef struct struct_0 {\n
    char padding_0[328];\n
    unsigned int field_148;\n
} struct_0;\n
\n
extern unsigned int g_407489;\n
\n
long long cgc_LogNewDive(struct_0 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x18]\n
\n
    cgc_puts(&g_407489);\n
    if (a0->field_148 < 128)\n
    {\n
        v0 = cgc_AddDive(a0);\n
        return cgc_ChangeDive(v0);\n
    }\n
    return a0;\n
}\n
", "4219144:sub_406108": null, "4219152:cgc_DownloadDiveData": "typedef struct struct_0 {\n
    char padding_0[160];\n
    unsigned long long field_a0;\n
    unsigned long long field_a8;\n
    unsigned long long field_b0;\n
    char padding_b8[24];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
extern char g_407489;\n
\n
long long cgc_DownloadDiveData(void* a0)\n
{\n
    char v0;  // [bp-0x79]\n
    char v1;  // [bp-0x78]\n
    char v2;  // [bp-0x74]\n
    char v3;  // [bp-0x70]\n
    char v4;  // [bp-0x6c]\n
    char v5;  // [bp-0x68]\n
    char v6;  // [bp-0x64]\n
    void* v7;  // [bp-0x58], Other Possible Types: unsigned long, unsigned long long\n
    void* v8;  // [bp-0x50], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x48], Other Possible Types: unsigned long\n
    void* v10;  // [bp-0x40], Other Possible Types: unsigned long, unsigned int\n
    void* v11;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v12;  // [bp-0x30]\n
    void* v13;  // [bp-0x28], Other Possible Types: unsigned long, unsigned long long\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned long\n
    struct_0 *v15;  // [bp-0x18]\n
    char v16;  // [bp-0x8]\n
    unsigned long long v18;  // rbp\n
    unsigned long long v19;  // rcx\n
    unsigned long long v20;  // r8\n
    unsigned long long v21;  // r9\n
\n
    v18 = &v16;\n
    v15 = cgc_AddDive(a0);\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    memset(&v1, 0, 24);\n
    cgc_puts(&g_407489);\n
    *(&v14) = cgc_GetUInt32(&g_407489, 0, 24, v19, v20, v21);\n
    v13 = cgc_GetUInt32(&g_407489, 0, 24, v19, v20, v21);\n
    *(&v10) = v14;\n
    v9 = v14;\n
    v11 = v13;\n
    v8 = v13;\n
    v7 = 1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v14)\n
            v0 = v7 < 100000;\n
        if (!(v0 & 1))\n
            break;\n
        v14 = cgc_GetUInt32();\n
        if (v14)\n
        {\n
            v13 = cgc_GetUInt32();\n
            if (v13 > 3000)\n
                v13 = 3000;\n
            v7 += 1;\n
            v8 = v13 + v8;\n
            if (v14 < v10)\n
                v10 = v14;\n
            if (v14 > v9)\n
                v9 = v14;\n
            if (v13 > v11)\n
                v11 = v13;\n
        }\n
    }\n
    cgc_EpochToDate(&v1, v10);\n
    v15->field_a0 = v11;\n
    v15->field_b0 = (0 CONCAT v9 - v10) /m 60;\n
    v15->field_a8 = (0 CONCAT v8) /m v7;\n
    v15->field_d0 = v7;\n
    cgc_sprintf(&v15->padding_0[64], \"@d/@d/@d\", *(&v1), *(&v2), *(&v3));\n
    cgc_sprintf(&v15->padding_0[96], \"@02d:@02d:@02d\", *(&v4), *(&v5), *(&v6));\n
    return cgc_ChangeDive(v15);\n
}\n
", "4219711:sub_40633f": null, "4219712:cgc_EditDive": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
extern unsigned int g_407489;\n
\n
long long cgc_EditDive(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = cgc_SelectDive(a0, \"\\n
Enter Dive # to edit: \");\n
    v1 = v3;\n
    if (v1)\n
    {\n
        v0 = v1->field_8;\n
        cgc_puts(&g_407489);\n
        v3 = cgc_ChangeDive(v0);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4219794:sub_406392": null, "4219808:cgc_PrintDiveLogs": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
long long cgc_PrintDiveLogs(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x20]\n
    struct_0 *v1;  // [bp-0x18]\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = cgc_SelectDive(a0, \"\\n
Enter Dive # to display: \");\n
    v1 = v3;\n
    if (v1)\n
    {\n
        v0 = v1->field_8;\n
        v3 = cgc_PrintDiveEntry(v0);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4219878:sub_4063e6": null, "4219888:cgc_RemoveDive": "long long cgc_RemoveDive(void* a0)\n
{\n
    unsigned long v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x18]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    v3 = cgc_SelectDive(a0, \"\\n
Enter Dive # to delete or blank to abort: \");\n
    v1 = v3;\n
    if (v1)\n
    {\n
        v3 = cgc_DeleteDive(a0, v1);\n
        v0 = v3;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4219954:sub_406432": null, "4219968:cgc_DiverStatistics": "typedef struct struct_2 {\n
    char padding_0[320];\n
    struct struct_0 *field_140;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[160];\n
    unsigned long long field_a0;\n
    char padding_a8[8];\n
    unsigned long long field_b0;\n
} struct_1;\n
\n
extern unsigned int g_407489;\n
extern char g_407527;\n
extern char g_40753a;\n
extern char g_407551;\n
\n
long long cgc_DiverStatistics(struct_2 *a0, unsigned int a1, unsigned int a2, unsigned long long a3[23], unsigned int a4)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned long\n
    void* v1;  // [bp-0x30], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned long\n
    unsigned long long v3[23];  // [bp-0x20]\n
    struct_0 *v4;  // [bp-0x18], Other Possible Types: unsigned long\n
\n
    cgc_puts(&g_407489);\n
    v4 = a0->field_140;\n
    v3[0] = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v4)\n
        return cgc_printf(\"\\n
Dive Log is empty\\n
\", a1, a2, a3, a4);\n
    while (true)\n
    {\n
        v3[0] = v4->field_8;\n
        v2 += 1;\n
        v1 += v3[20];\n
        a3 = v3;\n
        v0 += *((a3 + 176));\n
        v4 = v4->field_10;\n
    }\n
}\n
", "4220252:sub_40655c": null, "4220256:cgc_SetParam": "extern char g_407489;\n
\n
long long cgc_SetParam(unsigned int a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    char v1[64];  // [bp-0x68]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
\n
    if (cgc_strcmp(a1, &g_407489))\n
        cgc_printf(\"@s (@s): \", a0, a1, a3, a4);\n
    else\n
        cgc_printf(\"@s: \", a0, a2, a3, a4);\n
    v3 = cgc_GetLongString(v1);\n
    v0 = v3;\n
    if (v0 > 0)\n
    {\n
        *((v1 + a2)) = 0;\n
        v3 = cgc_strcpy(a1, v1);\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4220395:sub_4065eb": null, "4220400:cgc_SetInt": "long long cgc_SetInt(unsigned int a0, unsigned int *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long long *v0;  // [bp-0x20]\n
    unsigned long long *v2;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = 0;\n
    if (*(&a1))\n
        cgc_printf(\"@s (@d): \", a0, *(&a1), a3, a4);\n
    else\n
        cgc_printf(\"@s: \", a0, a2, a3, a4);\n
    v2 = cgc_GetInt();\n
    v0 = v2;\n
    if (v0 != -999999)\n
    {\n
        *(&a1) = v0;\n
        return a1;\n
    }\n
    return v2;\n
}\n
", "4220526:sub_40666e": null, "4220528:cgc_PrintDiverInfo": "extern unsigned int g_407489;\n
\n
char cgc_PrintDiverInfo(unsigned int a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_puts(&g_407489);\n
    cgc_printf(\"     Name: @s @s\\n
\", a0, a0 + 32, a3, a4);\n
    cgc_printf(\"  Address: @s\\n
\", a0 + 64, a2, a3, a4);\n
    cgc_printf(\"     City: @s\\n
\", a0 + 128, a2, a3, a4);\n
    cgc_printf(\"    State: @s\\n
\", a0 + 160, a2, a3, a4);\n
    cgc_printf(\" Zip Code: @s\\n
\", a0 + 192, a2, a3, a4);\n
    cgc_printf(\"    Phone: @s\\n
\", a0 + 224, a2, a3, a4);\n
    cgc_printf(\" PADI Num: @s\\n
\", a0 + 0x100, a2, a3, a4);\n
    cgc_printf(\"Cert Date: @s\\n
\", a0 + 288, a2, a3, a4);\n
    return cgc_puts(&g_407489);\n
}\n
", "4220768:cgc_PrintDiveEntry": "extern unsigned int g_407489;\n
\n
long long cgc_PrintDiveEntry(unsigned int a0[53], unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_puts(&g_407489);\n
    cgc_printf(\"          Date: @s\\n
\", &a0[16], a2, a3, a4);\n
    cgc_printf(\"          Time: @s\\n
\", &a0[24], a2, a3, a4);\n
    cgc_printf(\"     Dive Site: @s\\n
\", a0, a2, a3, a4);\n
    cgc_printf(\"      Location: @s\\n
\", &a0[32], a2, a3, a4);\n
    cgc_printf(\"     Max Depth: @d\\n
\", *(&a0[40]), a2, a3, a4);\n
    cgc_printf(\"     Avg Depth: @d\\n
\", *(&a0[42]), a2, a3, a4);\n
    cgc_printf(\"      Duration: @d\\n
\", *(&a0[44]), a2, a3, a4);\n
    cgc_printf(\"    O2 Percent: @d\\n
\", *(&a0[46]), a2, a3, a4);\n
    cgc_printf(\"Start Pressure: @d\\n
\", *(&a0[48]), a2, a3, a4);\n
    cgc_printf(\"  End Pressure: @d\\n
\", *(&a0[50]), a2, a3, a4);\n
    cgc_printf(\"     Bin Count: @d\\n
\", a0[52], a2, a3, a4);\n
    return cgc_puts(&g_407489);\n
}\n
", "4221071:sub_40688f": null, "4221072:cgc_SanitizeDate": "long long cgc_SanitizeDate(unsigned int a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x6c]\n
    void* v1;  // [bp-0x68], Other Possible Types: unsigned long\n
    void* v2;  // [bp-0x60], Other Possible Types: unsigned long\n
    void* v3;  // [bp-0x58], Other Possible Types: unsigned long\n
    void* v4;  // [bp-0x50], Other Possible Types: unsigned long, char *\n
    char *v5;  // [bp-0x48], Other Possible Types: void*\n
    char *v6;  // [bp-0x40], Other Possible Types: void*, unsigned long\n
    char v7;  // [bp-0x38]\n
\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_bzero(&v7, 32);\n
    *(&v5) = a0;\n
    if (v5)\n
    {\n
        v6 = cgc_strchr(v5, 47);\n
        if (v6)\n
        {\n
            v6 += 1;\n
            v4 = cgc_strchr(v6, 47);\n
            if (v4)\n
            {\n
                v4 += 1;\n
                v2 = cgc_atoi(v5);\n
                v3 = cgc_atoi(v6);\n
                v1 = cgc_atoi(v4);\n
            }\n
        }\n
    }\n
    if (v1 >= 1900 && v1 <= 2100 && v2 >= 1 && v2 <= 12)\n
    {\n
        if (v2 == 2)\n
        {\n
            if (!(v1 & 3) && v1 != 1900)\n
            {\n
                if (v3 >= 1 && v3 <= 29)\n
                    v0 = 1;\n
                goto LABEL_406a19;\n
            }\n
            if (v3 >= 1 && v3 <= 28)\n
                v0 = 1;\n
LABEL_406a19:\n
        }\n
        else if (v2 == 4)\n
        {\n
LABEL_406a4f:\n
            if (v3 >= 1 && v3 <= 30)\n
                v0 = 1;\n
        }\n
        else\n
        {\n
            if (v2 == 6)\n
                goto LABEL_406a4f;\n
            if (v2 == 9)\n
                goto LABEL_406a4f;\n
            if (v2 == 11)\n
                goto LABEL_406a4f;\n
            if (v3 >= 1 && v3 <= 31)\n
                v0 = 1;\n
        }\n
    }\n
    if (v0 != 1)\n
    {\n
        cgc_sprintf(&v7, \"1/1/1900\", a2, a3, a4);\n
        return cgc_strcpy(a0, &v7);\n
    }\n
    cgc_sprintf(&v7, \"@d/@d/@d\", v2, v3, v1);\n
    return cgc_strcpy(a0, &v7);\n
}\n
", "4221684:sub_406af4": null, "4221696:cgc_ChangeDive": "extern unsigned int g_407369;\n
extern unsigned int g_407398;\n
extern unsigned int g_4073a2;\n
extern unsigned int g_4073a7;\n
extern unsigned int g_4073bc;\n
extern unsigned int g_4073cc;\n
extern unsigned int g_4073dc;\n
extern unsigned int g_4073f1;\n
extern unsigned int g_4073ff;\n
extern unsigned int g_407411;\n
\n
long long cgc_ChangeDive(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    cgc_SetParam(4223896, a0, 25, a3, a4);\n
    cgc_SetParam(4223849, a0 + 64, 10, a3, a4);\n
    cgc_SetParam(4223906, a0 + 96, 32, a3, a4);\n
    cgc_SetParam(4223911, a0 + 128, 25, a3, a4);\n
    cgc_SetInt(4223932, a0 + 160, 25, a3, a4);\n
    cgc_SetInt(4223948, a0 + 168, 25, a3, a4);\n
    cgc_SetInt(4223964, a0 + 176, 25, a3, a4);\n
    cgc_SetInt(4223985, a0 + 184, 25, a3, a4);\n
    cgc_SetInt(4223999, a0 + 192, 25, a3, a4);\n
    cgc_SetInt(4224017, a0 + 200, 25, a3, a4);\n
    return cgc_SanitizeDiveEntry(a0);\n
}\n
", "4221960:sub_406c08": null, "4221968:cgc_SanitizeTime": "long long cgc_SanitizeTime(unsigned int a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    void* v4;  // [bp-0x40], Other Possible Types: char *, unsigned long\n
    void* v5;  // [bp-0x38], Other Possible Types: unsigned long, char *\n
    void* v6;  // [bp-0x30], Other Possible Types: char *\n
    char v7;  // [bp-0x28]\n
\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    *(&v6) = a0;\n
    if (v6)\n
    {\n
        v5 = cgc_strchr(v6, 58);\n
        if (v5)\n
        {\n
            v5 += 1;\n
            v4 = cgc_strchr(v5, 58);\n
            if (v4)\n
            {\n
                v4 += 1;\n
                v3 = cgc_atoi(v6);\n
                v2 = cgc_atoi(v5);\n
                v1 = cgc_atoi(v4);\n
            }\n
        }\n
    }\n
    if (v3 <= 23 && v2 <= 59 && v1 <= 59)\n
        v0 = 1;\n
    cgc_bzero(&v7, 16);\n
    if (v0 != 1)\n
    {\n
        cgc_sprintf(&v7, \"00:00:00\", a2, a3, a4);\n
        return cgc_strncpy(a0, &v7, 16);\n
    }\n
    cgc_sprintf(&v7, \"@02d:@02d:@02d\", v3, v2, v1);\n
    return cgc_strncpy(a0, &v7, 16);\n
}\n
", "4222325:sub_406d75": null, "4222336:cgc_SanitizeDiveEntry": "long long cgc_SanitizeDiveEntry(unsigned long a0, unsigned int a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    cgc_SanitizeDate(a0 + 64, a1, a2, a3, a4);\n
    return cgc_SanitizeTime(a0 + 96, a1, a2, a3, a4);\n
}\n
", "4222380:sub_406dac": null, "4222384:cgc_GetUInt32": "long long cgc_GetUInt32()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x10]\n
    unsigned long long v4;  // rdi\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    v0 = cgc_receive(v4, v5, v6, v7);\n
    if (!v0 && v2)\n
        return v1;\n
    cgc__terminate(v4);\n
    return v1;\n
}\n
", "4222479:sub_406e0f": null, "4222480:cgc_SelectDive": "typedef struct struct_1 {\n
    char padding_0[320];\n
    struct struct_0 *field_140;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
long long cgc_SelectDive(struct_1 *a0, unsigned int a1, unsigned int a2, unsigned long a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x441]\n
    void* v1;  // [bp-0x440], Other Possible Types: unsigned long\n
    char v2;  // [bp-0x438]\n
    unsigned int v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x28], Other Possible Types: unsigned long\n
    struct_0 *v6;  // [bp-0x10], Other Possible Types: unsigned long\n
\n
    v5 = a0->field_140;\n
    v4 = 0;\n
    v3 = 0;\n
    v1 = 0;\n
    if (!v5)\n
    {\n
        cgc_printf(\"\\n
\\n
Dive Log is empty\\n
\", a1, a2, a3, a4);\n
        v6 = 0;\n
        return v6;\n
    }\n
    cgc_printf(\"\\n
\\n
Dive# Date       Time     Dive Site                 Location                 \\n
\", a1, a2, a3, a4);\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v5)\n
            v0 = v3 <= 128;\n
        if (!(v0 & 1))\n
            break;\n
        *(&v4) = v5->field_8;\n
        *(&(&v2)[8 * v3]) = v5;\n
        v3 += 1;\n
        cgc_printf(\"@4d: @-10s @-8s\", v3, *(&v4) + 64, *(&v4) + 96, a4);\n
        cgc_printf(\" @-25s @-25s\\n
\", *(&v4), *(&v4) + 128, a3, a4);\n
        v5 = v5->field_10;\n
    }\n
    cgc_printf(\"@s\", a1, a2, a3, a4);\n
    v1 = cgc_GetPositiveInt();\n
    if (v1 >= 1)\n
    {\n
        a3 = v3;\n
        if (v1 <= a3)\n
        {\n
            v5 = *(&(&v2)[8 + 8 * v1]);\n
            goto LABEL_406f9a;\n
        }\n
    }\n
    cgc_printf(\"Invalid dive number entered\\n
\", a1, a2, a3, a4);\n
    v5 = 0;\n
LABEL_406f9a:\n
    v6 = v5;\n
    return v6;\n
}\n
", "4222896:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_pow": null, "5242896:cgc__terminate": null, "5242904:memset": null, "5242912:cgc_transmit": null, "5242920:cgc_allocate": null, "5242928:memcpy": null, "5242936:cgc_rint": null, "5242944:cgc_deallocate": null, "5242952:cgc_log10": null, "5242960:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}