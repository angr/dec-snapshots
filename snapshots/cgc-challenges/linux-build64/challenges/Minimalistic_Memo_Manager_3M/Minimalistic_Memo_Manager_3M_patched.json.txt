{"4202496:_init": "extern struct_0 *g_4085c0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_4085c0;\n
    if (g_4085c0)\n
        v1 = g_4085c0();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_4085e0;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_4085e0;\n
    goto *(4228584);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc_setjmp": "// attributes: PLT stub\n
int cgc_setjmp()\n
{\n
    ::libc.so.0::cgc_setjmp();\n
    return;\n
}\n
", "4202560:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_longjmp": "// attributes: PLT stub\n
int cgc_longjmp()\n
{\n
    ::libc.so.0::cgc_longjmp();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202688:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4228560);\n
}\n
", "4202704:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202741:sub_4020f5": null, "4202742:sub_4020f6": null, "4202752:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_4085b8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202793:sub_402129": null, "4202800:register_tm_clones": "extern unsigned long long g_4085c8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202857:sub_402169": null, "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_4085d0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_4085d0)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202917:sub_4021a5": null, "4202921:sub_4021a9": null, "4202928:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202937:sub_4021b9": null, "4202944:cgc_calloc": "long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdi<8>, cc_ndep<8>))\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = cgc_malloc(a1 * a0);\n
        if (v1)\n
            return cgc_memset(v1, 0, a1 * a0);\n
        return 0;\n
    }\n
}\n
", "4202997:sub_4021f5": null, "4203008:cgc_isalnum": "long long cgc_isalnum(unsigned long a0)\n
{\n
    return a0 - 48 < 10 | (a0 & -33) - 65 < 26;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_isalpha": "long long cgc_isalpha(unsigned long a0)\n
{\n
    return (a0 & -33) - 65 < 26;\n
}\n
", "4203055:sub_40222f": null, "4203056:cgc_isdigit": "long long cgc_isdigit(unsigned long a0)\n
{\n
    return a0 - 48 < 10;\n
}\n
", "4203068:sub_40223c": null, "4203072:cgc_islower": "long long cgc_islower(unsigned long a0)\n
{\n
    return a0 - 97 < 26;\n
}\n
", "4203084:sub_40224c": null, "4203088:cgc_isupper": "long long cgc_isupper(unsigned long a0)\n
{\n
    return a0 - 65 < 26;\n
}\n
", "4203100:sub_40225c": null, "4203104:cgc_isascii": "long long cgc_isascii(unsigned long a0)\n
{\n
    return a0 < 128;\n
}\n
", "4203116:sub_40226c": null, "4203120:cgc_isblank": "long long cgc_isblank(unsigned long a0)\n
{\n
    return a0 == 9 | a0 == 32;\n
}\n
", "4203138:sub_402282": null, "4203152:cgc_iscntrl": "long long cgc_iscntrl(unsigned long a0)\n
{\n
    return a0 < 32 | a0 == 127;\n
}\n
", "4203170:sub_4022a2": null, "4203184:cgc_isgraph": "long long cgc_isgraph(unsigned long a0)\n
{\n
    return 33 <= a0 & a0 != 127;\n
}\n
", "4203202:sub_4022c2": null, "4203216:cgc_isprint": "long long cgc_isprint(unsigned long a0)\n
{\n
    return a0 != 127 & 32 <= a0;\n
}\n
", "4203234:sub_4022e2": null, "4203248:cgc_ispunct": "typedef struct struct_0 {\n
    char padding_0[4218896];\n
    char field_406010;\n
} struct_0;\n
\n
extern char _punct;\n
\n
long long cgc_ispunct(struct_0 *a0)\n
{\n
    return *((a0 + &_punct));\n
}\n
", "4203263:sub_4022ff": null, "4203264:cgc_isspace": "long long cgc_isspace(unsigned long a0)\n
{\n
    return a0 == 32 | a0 - 9 < 5;\n
}\n
", "4203285:sub_402315": null, "4203296:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4219024];\n
    char field_406090;\n
} struct_0;\n
\n
extern char _xdigit;\n
\n
long long cgc_isxdigit(struct_0 *a0)\n
{\n
    return *((a0 + &_xdigit));\n
}\n
", "4203311:sub_40232f": null, "4203312:cgc_toascii": "long long cgc_toascii(unsigned long a0)\n
{\n
    return a0 & 127;\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_tolower": "long long cgc_tolower(unsigned long a0)\n
{\n
    if ((a0 - 91) >= -26)\n
        return a0 | 32;\n
    return a0;\n
}\n
", "4203343:sub_40234f": null, "4203344:cgc_toupper": "long long cgc_toupper(unsigned long a0)\n
{\n
    if ((a0 - 123) >= -26)\n
        return a0 & 95;\n
    return a0;\n
}\n
", "4203359:sub_40235f": null, "4203360:cgc_filaments_init": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern struct_0 *g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc_filaments_init()\n
{\n
    struct_0 *v0;  // [bp-0x8]\n
    struct_0 *v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    struct_0 *v7;  // rax\n
    unsigned long long v8;  // rcx\n
    unsigned long long v9;  // r8\n
    unsigned long long v10;  // r9\n
\n
    v0 = v2;\n
    if (cgc_allocate(v3, v4, v5))\n
    {\n
        cgc__terminate(v3);\n
        return cgc_filaments_switch(v3, v4, v5, v8, v9, v10);\n
    }\n
    v7 = v0;\n
    v7->field_8 = 0;\n
    v7->field_10 = 0;\n
    v7->field_0 = 0;\n
    g_fib = v0;\n
    g_active_fibs = g_fib;\n
    return v0;\n
}\n
", "4203440:cgc_filaments_switch": "extern unsigned long long g_fib;\n
\n
long long cgc_filaments_switch(unsigned long long a0)\n
{\n
    unsigned long long v1;  // rax\n
    unsigned long long v2;  // rsi\n
    unsigned long long v3;  // rdx\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // r8\n
    unsigned long long v6;  // r9\n
\n
    if (g_fib == a0)\n
        return v1;\n
    v1 = cgc_setjmp(a0);\n
    if (!v1)\n
    {\n
        g_fib = a0;\n
        cgc_longjmp(a0, v2);\n
        return cgc_filaments_yield(a0, v2, v3, v4, v5, v6);\n
    }\n
    return v1;\n
}\n
", "4203504:cgc_filaments_yield": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc_filaments_yield()\n
{\n
    unsigned long v1;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    return cgc_filaments_switch(v1);\n
}\n
", "4203531:sub_40240b": null, "4203536:cgc___filaments_new": "extern unsigned long long g_active_fibs;\n
extern struct_1 *g_fib;\n
\n
long long cgc___filaments_new()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rdi, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    g_fib->field_58(g_fib->field_60);\n
    while (true)\n
    {\n
        v3 = g_fib->field_0;\n
        if (!v3)\n
            v3 = g_active_fibs;\n
        cgc_filaments_switch(v3);\n
    }\n
}\n
", "4203553:sub_402421": null, "4203597:sub_40244d": null, "4203600:cgc_filaments_new": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
    char padding_20[8];\n
    unsigned long long field_28;\n
    char padding_30[40];\n
    unsigned long long field_58;\n
    unsigned long long field_60;\n
} struct_0;\n
\n
extern struct_0 *g_active_fibs;\n
extern unsigned int g_next_id;\n
\n
long long cgc_filaments_new(unsigned long long a0, unsigned long long a1)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    struct_0 *v2;  // rax\n
    unsigned long long v4;  // rdx\n
    unsigned int v6;  // eax\n
    unsigned long long v7;  // rcx\n
    struct_0 *v9;  // rdi\n
    struct_0 *v10;  // rax\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
\n
    v0 = v2;\n
    if (cgc_allocate(a0, a1, v4))\n
    {\n
        cgc__terminate(a0);\n
        return cgc_filaments_current(a0, a1, v4, v7, v11, v12);\n
    }\n
    v6 = g_next_id;\n
    g_next_id = g_next_id + 1;\n
    v0->field_8 = v6;\n
    if (!cgc_allocate(a0, a1, v4, v7))\n
    {\n
        v9 = v0;\n
        v9->field_58 = a0;\n
        v9->field_60 = a1;\n
        cgc_memset(&v9->field_18, 0, 64);\n
        v10 = v0;\n
        v10->field_18 = cgc___filaments_new;\n
        v10->field_28 = 32764 + v10->field_10;\n
        v10->field_0 = g_active_fibs;\n
        g_active_fibs = v0;\n
        return v0;\n
    }\n
}\n
", "4203776:cgc_filaments_current": "extern unsigned long long g_fib;\n
\n
long long cgc_filaments_current()\n
{\n
    return g_fib;\n
}\n
", "4203784:sub_402508": null, "4203792:cgc___filaments_transmit": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_transmit(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rdi, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v3 = g_fib->field_0;\n
    if (!v3)\n
        v3 = g_active_fibs;\n
    cgc_filaments_switch(v3);\n
    return cgc_transmit(v3, a1, a2, a3);\n
}\n
", "4203863:sub_402557": null, "4203872:cgc___filaments_receive": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_receive(unsigned long long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3)\n
{\n
    unsigned long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    void* v3;  // [bp-0xc0]\n
    int v4;  // [bp-0xb8]\n
    int v5;  // [bp-0xa8]\n
    int v6;  // [bp-0x98]\n
    int v7;  // [bp-0x88]\n
    int v8;  // [bp-0x78]\n
    int v9;  // [bp-0x68]\n
    int v10;  // [bp-0x58]\n
    int v11;  // [bp-0x48]\n
    unsigned long long v13;  // r15\n
    unsigned long v14;  // r12\n
    unsigned long long v15;  // r8\n
\n
    v2 = a3;\n
    v1 = a2;\n
    v0 = a1;\n
    v13 = 1 << (a0 & 31);\n
    v14 = a0 / 64;\n
    while (true)\n
    {\n
        *(&v4) = 0;\n
        *(&v5) = 0;\n
        *(&v6) = 0;\n
        *(&v7) = 0;\n
        *(&v8) = 0;\n
        *(&v9) = 0;\n
        *(&v10) = 0;\n
        *(&v11) = 0;\n
        *((&v4 + 8 * v14)) = *((&v4 + 8 * v14)) | v13;\n
        v3 = 0;\n
        if (cgc_fdwait(a0, a1, a2, a3, v15))\n
            return cgc_receive(a0, a1, a2, a3);\n
        if ((v13 & *((&v4 + 8 * v14))))\n
            return cgc_receive(a0, a1, a2, a3);\n
        a0 = g_fib->field_0;\n
        if (!a0)\n
            a0 = g_active_fibs;\n
        cgc_filaments_switch(a0);\n
    }\n
}\n
", "4203943:sub_4025a7": null, "4204113:sub_402651": null, "4204128:cgc___filaments_fdwait": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_fdwait(unsigned long a0, unsigned long long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    unsigned long v1;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    cgc_filaments_switch(v1);\n
    return cgc_fdwait(v1, a1, a2, a3, a4);\n
}\n
", "4204204:sub_4026ac": null, "4204208:cgc___filaments_allocate": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_allocate(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v1;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    cgc_filaments_switch(v1);\n
    return cgc_allocate(v1, a1, a2);\n
}\n
", "4204264:sub_4026e8": null, "4204272:cgc___filaments_deallocate": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_deallocate(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rdi, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v3 = g_fib->field_0;\n
    if (!v3)\n
        v3 = g_active_fibs;\n
    cgc_filaments_switch(v3);\n
    return cgc_deallocate(v3, a1);\n
}\n
", "4204327:sub_402727": null, "4204336:cgc___filaments_random": "extern unsigned long long g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
long long cgc___filaments_random(unsigned long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v1;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    cgc_filaments_switch(v1);\n
    return cgc_random(v1, a1, a2);\n
}\n
", "4204396:sub_40276c": null, "4204400:cgc_free": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern unsigned long long cgc_malloc_mutex;\n
\n
long long cgc_free(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rdi\n
\n
    v0 = v2;\n
    if (!a0)\n
        return v2;\n
    v3 = a0 - 24;\n
    if (v3->field_8)\n
    {\n
        return v2;\n
    }\n
    else if (v3->field_0 >= 0x40000)\n
    {\n
        return cgc___filaments_deallocate(v3, v3->field_0);\n
    }\n
    else\n
    {\n
        cgc_mutex_lock(&cgc_malloc_mutex);\n
        cgc_insert_into_flist(v3);\n
        cgc_coalesce(v3);\n
        return cgc_mutex_unlock(&cgc_malloc_mutex);\n
    }\n
}\n
", "4204502:sub_4027d6": null, "4204512:cgc_malloc": "typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    uint128_t field_10;\n
    uint128_t field_20;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    struct struct_1 *field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern unsigned long long cgc_malloc_mutex;\n
extern struct_1 *g_40a178;\n
\n
long long cgc_malloc(unsigned long a0)\n
{\n
    char v0;  // [bp-0x20]\n
    void* v2;  // r14, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long v3;  // rbx\n
    unsigned long v4;  // r15, Other Possible Types: unsigned long long\n
    struct_2 *v5;  // rax\n
    unsigned long long *v7;  // r15\n
    unsigned long long *v8;  // rdi\n
    struct struct_1 **v9;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v10;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v11;  // rdi\n
    unsigned long long v12;  // rax\n
    struct_1 *v13;  // r14\n
    unsigned long v14;  // rcx\n
    unsigned long long v15;  // rdi\n
    struct_0 *v16;  // rax\n
\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (a0 - 262120 <= -262145)\n
    {\n
        v3 = a0 + 4119 & -0x1000;\n
        if (!cgc___filaments_allocate(v3, 0, &v0))\n
        {\n
            v5 = *(&v0);\n
            v5->field_0 = v3;\n
            v5->field_8 = 0;\n
            v5->field_10 = 0;\n
            v5->field_20 = 0;\n
            return v5 + 24;\n
        }\n
        return 0;\n
    }\n
    else\n
    {\n
        cgc_mutex_lock(&cgc_malloc_mutex);\n
        v4 = a0 + 31 & -0x20;\n
        if (!(a0 & 31))\n
            v4 = a0;\n
        v7 = v4 + 24;\n
        v8 = v7;\n
        v9 = cgc_get_size_class();\n
        if (v9 <= 31)\n
        {\n
            v10 = *((&cgc_free_lists + 0x8 * v9));\n
            if (!v10)\n
                goto LABEL_4028a0;\n
            else\n
                goto LABEL_0x4028c0;\n
        }\n
        else\n
        {\n
            if (!cgc___filaments_allocate(0x40000, 0, &v0))\n
            {\n
                v11 = *(&v0);\n
                if (v11)\n
                {\n
                    v11->field_0 = 0x40000;\n
                    v11->field_8 = 1;\n
                    v11->field_10 = 0;\n
                    v11->field_20 = 0;\n
                    cgc_insert_into_flist(v11);\n
                    v10 = g_40a178;\n
                    cgc_remove_from_flist(v10);\n
                    v12 = *(v10) - v7;\n
                    v13 = v10 * 0x100000000;\n
                    if (v12 >= 49)\n
                    {\n
                        v14 = v13 >> 32;\n
                        v15 = v14 + v7;\n
                        *((v14 + v7)) = v12;\n
                        *((8 + v14 + v7)) = 1;\n
                        *((16 + v14 + v7)) = 0;\n
                        *(v10) = v7;\n
                        *((40 + v14 + v7)) = v10;\n
                        *((32 + v14 + v7)) = *((v10 + 32));\n
                        v16 = *((v10 + 32));\n
                        if (v16)\n
                            v16->field_28 = v15;\n
                        *((v10 + 32)) = v15;\n
                        cgc_insert_into_flist(v15);\n
                    }\n
                    v2 = &v13[2576980377].padding_18 >> 32;\n
                    goto LABEL_402997;\n
                }\n
            }\n
            v2 = 0;\n
            goto LABEL_402997;\n
        }\n
        while (true)\n
        {\n
            while (*(v10) < v7)\n
            {\n
                v10 = *((v10 + 16));\n
                if (!v10)\n
                    goto LABEL_4028a0;\n
            }\n
            while (true)\n
            {\n
LABEL_4028a0:\n
                v9 += 1;\n
                if (v9 == 32)\n
                    break;\n
                v10 = *(&(&cgc_free_lists)[8 * v9]);\n
            }\n
        }\n
LABEL_402997:\n
        cgc_mutex_unlock(&cgc_malloc_mutex);\n
        return v2;\n
    }\n
}\n
", "4204976:cgc_get_size_class": "extern unsigned long long g_408668;\n
extern unsigned long long g_408670;\n
extern unsigned long long g_408678;\n
extern unsigned long long g_408680;\n
extern unsigned long long g_408688;\n
extern unsigned long long g_408690;\n
extern unsigned long long g_408698;\n
extern unsigned long long g_4086a0;\n
extern unsigned long long g_4086a8;\n
extern unsigned long long g_4086b0;\n
extern unsigned long long g_4086b8;\n
extern unsigned long long g_4086c0;\n
extern unsigned long long g_4086c8;\n
extern unsigned long long g_4086d0;\n
extern unsigned long long g_4086d8;\n
extern unsigned long long g_4086e0;\n
extern unsigned long long g_4086e8;\n
extern unsigned long long g_4086f0;\n
extern unsigned long long g_4086f8;\n
extern unsigned long long g_408700;\n
extern unsigned long long g_408708;\n
extern unsigned long long g_408710;\n
extern unsigned long long g_408718;\n
extern unsigned long long g_408720;\n
extern unsigned long long g_408728;\n
extern unsigned long long g_408730;\n
extern unsigned long long g_408738;\n
extern unsigned long long g_408740;\n
extern unsigned long long g_408748;\n
extern unsigned long long g_408750;\n
extern unsigned long long g_408758;\n
extern unsigned long long size_class_limits;\n
\n
long long cgc_get_size_class(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    if (size_class_limits >= a0)\n
        return v1;\n
    v1 = 1;\n
    if (g_408668 < a0)\n
    {\n
        v1 = 2;\n
        if (g_408670 < a0)\n
        {\n
            v1 = 3;\n
            if (g_408678 < a0)\n
            {\n
                v1 = 4;\n
                if (g_408680 < a0)\n
                {\n
                    v1 = 5;\n
                    if (g_408688 < a0)\n
                    {\n
                        v1 = 6;\n
                        if (g_408690 < a0)\n
                        {\n
                            v1 = 7;\n
                            if (g_408698 < a0)\n
                            {\n
                                v1 = 8;\n
                                if (g_4086a0 < a0)\n
                                {\n
                                    v1 = 9;\n
                                    if (g_4086a8 < a0)\n
                                    {\n
                                        v1 = 10;\n
                                        if (g_4086b0 < a0)\n
                                        {\n
                                            v1 = 11;\n
                                            if (g_4086b8 < a0)\n
                                            {\n
                                                v1 = 12;\n
                                                if (g_4086c0 < a0)\n
                                                {\n
                                                    v1 = 13;\n
                                                    if (g_4086c8 < a0)\n
                                                    {\n
                                                        v1 = 14;\n
                                                        if (g_4086d0 < a0)\n
                                                        {\n
                                                            v1 = 15;\n
                                                            if (g_4086d8 < a0)\n
                                                            {\n
                                                                v1 = 16;\n
                                                                if (g_4086e0 < a0)\n
                                                                {\n
                                                                    v1 = 17;\n
                                                                    if (g_4086e8 < a0)\n
                                                                    {\n
                                                                        v1 = 18;\n
                                                                        if (g_4086f0 < a0)\n
                                                                        {\n
                                                                            v1 = 19;\n
                                                                            if (g_4086f8 < a0)\n
                                                                            {\n
                                                                                v1 = 20;\n
                                                                                if (g_408700 < a0)\n
                                                                                {\n
                                                                                    v1 = 21;\n
                                                                                    if (g_408708 < a0)\n
                                                                                    {\n
                                                                                        v1 = 22;\n
                                                                                        if (g_408710 < a0)\n
                                                                                        {\n
                                                                                            v1 = 23;\n
                                                                                            if (g_408718 < a0)\n
                                                                                            {\n
                                                                                                v1 = 24;\n
                                                                                                if (g_408720 < a0)\n
                                                                                                {\n
                                                                                                    v1 = 25;\n
                                                                                                    if (g_408728 < a0)\n
                                                                                                    {\n
                                                                                                        v1 = 26;\n
                                                                                                        if (g_408730 < a0)\n
                                                                                                        {\n
                                                                                                            v1 = 27;\n
                                                                                                            if (g_408738 < a0)\n
                                                                                                            {\n
                                                                                                                v1 = 28;\n
                                                                                                                if (g_408740 < a0)\n
                                                                                                                {\n
                                                                                                                    v1 = 29;\n
                                                                                                                    if (g_408748 < a0)\n
                                                                                                                    {\n
                                                                                                                        v1 = 30;\n
                                                                                                                        if (g_408750 < a0)\n
                                                                                                                            v1 = 31 + (g_408758 < a0);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4205511:sub_402bc7": null, "4205520:cgc_insert_into_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_insert_into_flist(struct_1 *a0)\n
{\n
    struct struct_0 **v1;  // rax\n
    struct_0 *v2;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    a0->field_8 = 1;\n
    v2 = *((&cgc_free_lists + 0x8 * v1));\n
    if (v2)\n
    {\n
        a0->field_10 = v2;\n
        *((*((&cgc_free_lists + 0x8 * v1)) + 24)) = a0;\n
        *((&cgc_free_lists + 0x8 * v1)) = a0;\n
        a0->field_18 = 0;\n
        return v1;\n
    }\n
    *((&cgc_free_lists + 0x8 * v1)) = a0;\n
    return v1;\n
}\n
", "4205589:sub_402c15": null, "4205600:cgc_remove_from_flist": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_remove_from_flist(struct_1 *a0)\n
{\n
    unsigned long long v1[4];  // rax\n
    struct_3 *v2;  // rcx\n
    struct_0 *v3;  // rdx\n
\n
    v1 = cgc_get_size_class(*(&a0->field_0));\n
    v2 = *(&a0[1].field_0);\n
    if (v2)\n
        v2->field_10 = a0->field_10;\n
    v3 = a0->field_10;\n
    if (v3)\n
        v3->field_18 = v2;\n
    if (*((&cgc_free_lists + 0x8 * v1)) == a0)\n
        *((&cgc_free_lists + 0x8 * v1)) = v3;\n
    *(&a0->field_10) = 0;\n
    a0->field_8 = 0;\n
    return v1;\n
}\n
", "4205677:sub_402c6d": null, "4205680:cgc_coalesce": "typedef struct struct_6 {\n
    struct struct_4 *field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_6;\n
\n
typedef struct struct_8 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_5 *field_20;\n
    struct struct_7 *field_28;\n
} struct_8;\n
\n
typedef struct struct_10 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_10;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
    struct struct_0 *field_28;\n
} struct_2;\n
\n
typedef struct struct_9 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_9;\n
\n
typedef struct struct_4 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_7 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    unsigned long long field_20;\n
} struct_7;\n
\n
typedef struct struct_5 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_3 *field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
    struct struct_0 *field_28;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[40];\n
    unsigned long long field_28;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_3;\n
\n
extern char cgc_free_lists;\n
\n
long long cgc_coalesce(struct_8 *a0)\n
{\n
    struct_6 *v0;  // [bp-0x28]\n
    struct_6 *v2;  // rax, Other Possible Types: unsigned long\n
    struct_10 *v3;  // rbx\n
    struct_2 *v4;  // rbx\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    struct_9 *v8;  // rdx\n
    struct_9 *v9;  // rcx\n
    struct_9 *v10;  // rcx\n
    struct_4 *v11;  // rcx\n
    struct_4 *v12;  // rdx\n
    struct_4 *v13;  // rdx\n
    struct_2 *v14;  // r14, Other Possible Types: unsigned long\n
    unsigned long v15;  // rax\n
    unsigned long v16;  // r14\n
    unsigned long v17;  // rax\n
    unsigned long v18;  // r14\n
    unsigned long v19;  // rax\n
    struct_9 *v20;  // rcx\n
    struct_9 *v21;  // rcx\n
    struct_9 *v22;  // rcx\n
    struct_4 *v23;  // rdx\n
    struct_4 *v24;  // rdx\n
    struct_4 *v25;  // rdx\n
    unsigned long v26;  // r14\n
    unsigned long v27;  // rax\n
    struct_7 *v28;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v29;  // r14, Other Possible Types: unsigned long long\n
    struct_5 *v30;  // rax\n
    struct_5 *v31;  // rcx\n
    unsigned long v32;  // r14\n
    struct_0 *v33;  // rax\n
    struct_9 *v34;  // rcx\n
    unsigned long v35;  // rdi\n
    struct_1 *v36;  // rcx\n
    struct_4 *v37;  // rdx\n
    struct_4 *v38;  // rcx\n
    unsigned long long v39;  // r14\n
    struct_5 *v40;  // rcx\n
    struct_0 *v41;  // rax\n
    struct_1 *v42;  // rcx\n
    struct_5 *v43;  // rax, Other Possible Types: unsigned long\n
    struct_4 *v44;  // rcx\n
\n
    v0 = v2;\n
    v3 = a0->field_28;\n
    if (v3 && v3->field_8)\n
    {\n
        v14 = a0->field_20;\n
        if (v14 && v14->field_8)\n
        {\n
            v5 = cgc_get_size_class(*(&v3->field_0));\n
            v8 = v3->padding_18;\n
            if (v8)\n
                v8->field_10 = v3->field_10;\n
            v11 = v3->field_10;\n
            if (v11)\n
                v11->field_18 = v8;\n
            if (*(&(&cgc_free_lists)[8 * v5]) == v3)\n
            {\n
                *(&(&cgc_free_lists)[8 * v5]) = v11;\n
                v14 = a0->field_20;\n
            }\n
            *(&v3->field_10) = 0;\n
            v3->field_8 = 0;\n
            v15 = cgc_get_size_class(*(v14));\n
            v20 = *((v14 + 24));\n
            if (v20)\n
                v20->field_10 = *((v14 + 16));\n
            v23 = *((v14 + 16));\n
            if (v23)\n
                v23->field_18 = v20;\n
            if (*(&(&cgc_free_lists)[8 * v15]) == v14)\n
                *(&(&cgc_free_lists)[8 * v15]) = v23;\n
            *((v14 + 16)) = 0;\n
            *((v14 + 8)) = 0;\n
            v26 = a0->field_0;\n
            v27 = cgc_get_size_class(v26);\n
            v34 = a0->padding_18;\n
            if (v34)\n
                v34->field_10 = a0->field_10;\n
            v37 = a0->field_10;\n
            if (v37)\n
                v37->field_18 = v34;\n
            if (*(&(&cgc_free_lists)[8 * v27]) == a0)\n
                *(&(&cgc_free_lists)[8 * v27]) = v37;\n
            *(&a0->field_10) = 0;\n
            a0->field_8 = 0;\n
            v28 = a0->field_28;\n
            v39 = v26 + *(v28);\n
            *(v28) = v39;\n
            v40 = a0->field_20;\n
            *(v28) = v39 + v40->field_0;\n
            v41 = v40->field_28;\n
            if (v41)\n
                v41->field_20 = v40->field_20;\n
            v42 = v40->field_20;\n
            if (!v42)\n
            {\n
LABEL_402dc6:\n
                *((v28 + 32)) = a0->field_20;\n
                v43 = a0->field_20;\n
                if (!v43)\n
                    goto LABEL_402de2;\n
                goto LABEL_402dd9;\n
            }\n
            else\n
            {\n
                v42->field_28 = v41;\n
                v28 = a0->field_28;\n
                if (!(!v28))\n
                    goto LABEL_402dc6;\n
                v28 = 0;\n
                v43 = a0->field_20;\n
                if (!v43)\n
                    goto LABEL_402de2;\n
LABEL_402dd9:\n
                *((v43 + 40)) = v28;\n
                v28 = a0->field_28;\n
            }\n
LABEL_402de2:\n
            v35 = *(v28);\n
            goto LABEL_402fbc;\n
        }\n
        v6 = cgc_get_size_class(*(&v3->field_0));\n
        v9 = v3->padding_18;\n
        if (v9)\n
            v9->field_10 = v3->field_10;\n
        v12 = v3->field_10;\n
        if (v12)\n
            v12->field_18 = v9;\n
        if (*(&(&cgc_free_lists)[8 * v6]) == v3)\n
            *(&(&cgc_free_lists)[8 * v6]) = v12;\n
        *(&v3->field_10) = 0;\n
        v3->field_8 = 0;\n
        v16 = a0->field_0;\n
        v17 = cgc_get_size_class(v16);\n
        v21 = a0->padding_18;\n
        if (v21)\n
            v21->field_10 = a0->field_10;\n
        v24 = a0->field_10;\n
        if (v24)\n
            v24->field_18 = v21;\n
        if (*(&(&cgc_free_lists)[8 * v17]) == a0)\n
            *(&(&cgc_free_lists)[8 * v17]) = v24;\n
        *(&a0->field_10) = 0;\n
        a0->field_8 = 0;\n
        v28 = a0->field_28;\n
        v29 = v16 + v28->field_0;\n
        v28->field_0 = v29;\n
        v28->field_20 = a0->field_20;\n
        v30 = a0->field_20;\n
        if (v30)\n
        {\n
            v30->field_28 = &v28->field_0;\n
            v28 = a0->field_28;\n
            v29 = v28->field_0;\n
        }\n
        v35 = v29;\n
LABEL_402fbc:\n
        v2 = cgc_get_size_class(v35);\n
        *((v28 + 8)) = 1;\n
        v44 = *(&(&cgc_free_lists)[8 * v2]);\n
        if (!v44)\n
        {\n
            *(&(&cgc_free_lists)[8 * v2]) = v28;\n
            return v2;\n
        }\n
        *((v28 + 16)) = v44;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = v28;\n
        *(&(&cgc_free_lists)[8 * v2]) = v28;\n
        *((v28 + 24)) = 0;\n
        return v2;\n
    }\n
    v4 = a0->field_20;\n
    if (!v4)\n
    {\n
        return v2;\n
    }\n
    else if (!v4->field_8)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v7 = cgc_get_size_class(*(&v4->field_0));\n
        v10 = v4->padding_18;\n
        if (v10)\n
            v10->field_10 = v4->field_10;\n
        v13 = v4->field_10;\n
        if (v13)\n
            v13->field_18 = v10;\n
        if (*(&(&cgc_free_lists)[8 * v7]) == v4)\n
            *(&(&cgc_free_lists)[8 * v7]) = v13;\n
        *(&v4->field_10) = 0;\n
        v4->field_8 = 0;\n
        v18 = a0->field_0;\n
        v19 = cgc_get_size_class(v18);\n
        v22 = a0->padding_18;\n
        if (v22)\n
            v22->field_10 = a0->field_10;\n
        v25 = a0->field_10;\n
        if (v25)\n
            v25->field_18 = v22;\n
        if (*(&(&cgc_free_lists)[8 * v19]) == a0)\n
            *(&(&cgc_free_lists)[8 * v19]) = v25;\n
        *(&a0->field_10) = 0;\n
        a0->field_8 = 0;\n
        v31 = a0->field_20;\n
        v32 = v18 + v31->field_0;\n
        a0->field_0 = v32;\n
        v33 = v31->field_28;\n
        if (v33)\n
            v33->field_20 = v31->field_20;\n
        v36 = v31->field_20;\n
        if (v36)\n
            v36->field_28 = v33;\n
        v2 = cgc_get_size_class(v32);\n
        a0->field_8 = 1;\n
        v38 = *(&(&cgc_free_lists)[8 * v2]);\n
        if (!v38)\n
        {\n
            *(&(&cgc_free_lists)[8 * v2]) = a0;\n
            return v2;\n
        }\n
        a0->field_10 = &v38->padding_0;\n
        *((*(&(&cgc_free_lists)[8 * v2]) + 24)) = a0;\n
        *(&(&cgc_free_lists)[8 * v2]) = a0;\n
        *(&a0->padding_18[0]) = 0;\n
        return v2;\n
    }\n
}\n
", "4206616:sub_403018": null, "4206624:cgc_memchr": "long long cgc_memchr(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) == a1)\n
            return a0 + v1;\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4206666:sub_40304a": null, "4206672:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a1 + v1)) != *((a0 + v1)))\n
            return *((a1 + v1)) - *((a0 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4206718:sub_40307e": null, "4206720:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_403114:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_4030a7;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_4030a7:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_403114;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_4030a7;\n
}\n
", "4207151:sub_40322f": null, "4207152:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    int tmp_13;  // tmp #13\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    char *v6;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    int v10;  // xmm1\n
    int v11;  // xmm1\n
    int v12;  // xmm1\n
    int v13;  // xmm1\n
    unsigned long v14;  // rdi\n
    unsigned long v15;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v16;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v17;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v18;  // r10\n
    unsigned long v19;  // r11\n
    unsigned long v20;  // rdi\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    int v25;  // xmm1\n
    unsigned long long v26;  // r10\n
    unsigned long v30;  // rdi\n
    unsigned long v31;  // r8\n
    char *v32;  // r8\n
    char *v33;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r8\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    char *v36;  // rdx\n
    char *v37;  // rdi, Other Possible Types: unsigned long\n
    char *v38;  // r9, Other Possible Types: unsigned long\n
    char *v39;  // rcx, Other Possible Types: unsigned long\n
    char *v40;  // rdx, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (a0 < a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_40337f:\n
                if (a2 < 32)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x20;\n
                    v3 = v2 - 32;\n
                    v4 = (v3 >> 5) + 1;\n
                    v5 = v4 & 3;\n
                    if (v3 < 96)\n
                    {\n
                        v14 = 0;\n
                    }\n
                    else\n
                    {\n
                        v15 = v4 & -4;\n
                        v14 = 0;\n
                        do\n
                        {\n
                            v10 = *((a1 + v14 + 16));\n
                            *(&v1[v14]) = *((a1 + v14));\n
                            *(&v1[16 + v14]) = v10;\n
                            v11 = *((a1 + v14 + 48));\n
                            *(&v1[32 + v14]) = *((a1 + v14 + 32));\n
                            *(&v1[48 + v14]) = v11;\n
                            v12 = *((a1 + v14 + 80));\n
                            *(&v1[64 + v14]) = *((a1 + v14 + 64));\n
                            *(&v1[80 + v14]) = v12;\n
                            v13 = *((a1 + v14 + 112));\n
                            *(&v1[96 + v14]) = *((a1 + v14 + 96));\n
                            *(&v1[112 + v14]) = v13;\n
                            v14 -= -128;\n
                            tmp_21 = v15;\n
                            v15 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v5)\n
                    {\n
                        v21 = &v1[v14 + 16];\n
                        v22 = a1 + v14 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v25 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v25;\n
                            v24 += 32;\n
                        } while (v5 * 32 != v24);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_403269;\n
                }\n
                v31 = v2;\n
                v2 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v31]) = *((a1 + v31));\n
                    v31 += 8;\n
                } while (v2 != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_403269:\n
                v34 = &a2[~(v2)];\n
                v35 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v2] = *((a1 + v2));\n
                        v2 += 1;\n
                        tmp_7 = v35;\n
                        v35 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v1[1 + v2] = *((a1 + v2 + 1));\n
                    v1[2 + v2] = *((a1 + v2 + 2));\n
                    v1[3 + v2] = *((a1 + v2 + 3));\n
                    v2 += 4;\n
                } while (a2 != v2);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_40337f;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_403269;\n
    }\n
    else\n
    {\n
        if ([D] amd64g_calculate_condition(0x6<64>, 0x8<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n
            return a0;\n
        if (!a2)\n
            return a0;\n
        if (a2 < 4)\n
        {\n
LABEL_403307:\n
            v38 = a2;\n
            goto LABEL_40330a;\n
        }\n
        else\n
        {\n
            if (&a2[a1] > a0 && !(a0 + a2 <= a1))\n
                goto LABEL_403307;\n
            if (a2 < 16)\n
            {\n
                v6 = 0;\n
            }\n
            else\n
            {\n
                v6 = a2 & -0x10;\n
                v7 = v6 - 16;\n
                v8 = (v7 >> 4) + 1;\n
                v9 = v8 & 3;\n
                if (v7 < 48)\n
                {\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v17 = v8 & -4;\n
                    v18 = v1 + a2 - 16;\n
                    v19 = &a2[a1 + 16];\n
                    v20 = 0;\n
                    do\n
                    {\n
                        *((v18 + v20)) = *((v19 + v20));\n
                        *((-16 + v18 + v20)) = *((v19 + v20 - 16));\n
                        *((-32 + v18 + v20)) = *((v19 + v20 - 32));\n
                        *((-48 + v18 + v20)) = *((v19 + v20 - 48));\n
                        v20 -= 64;\n
                        tmp_13 = v17;\n
                        v17 -= 4;\n
                    } while (tmp_13 != 4);\n
                    v16 = -(v20);\n
                }\n
                if (v9)\n
                {\n
                    v26 = &a2[-1 * v16];\n
                    v30 = 0;\n
                    do\n
                    {\n
                        *(&v1[16 + v30 + v26]) = *((v26 + a1 - 16 + v30));\n
                        v30 -= 16;\n
                    } while (v9 * 16 + v30);\n
                }\n
                if (v6 == a2)\n
                    return v1;\n
                if (!(a2 & 12))\n
                {\n
                    a2 = a2 & 15;\n
                    goto LABEL_403307;\n
                }\n
            }\n
            v32 = a2 & -4;\n
            v38 = a2 & 3;\n
            v33 = -(v6);\n
            do\n
            {\n
                *((v1 + a2 - 4 + v33)) = *(&a2[4 + v33 + a1]);\n
                v33 -= 4;\n
            } while (!(v32) != v33);\n
            if (v32 == a2)\n
                return v1;\n
LABEL_40330a:\n
            v36 = v38 - 1;\n
            v37 = v38 & 3;\n
            if (!(v38 & 3))\n
            {\n
                v39 = v38;\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v39 = v38 - 1;\n
                    v1[1 + v38] = *((a1 + v38 - 1));\n
                    v38 = v39;\n
                    tmp_5 = v37;\n
                    v37 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v36 < 3)\n
                    return v1;\n
            }\n
            v40 = v39;\n
            do\n
            {\n
                v1[1 + v39] = *((a1 + v39 - 1));\n
                v1[2 + v39] = *((a1 + v39 - 2));\n
                v1[3 + v39] = *((a1 + v39 - 3));\n
                v1[4 + v39] = *((a1 + v39 - 4));\n
                v40 -= 4;\n
                v39 = v40;\n
            } while (v40 != 4);\n
            return v1;\n
        }\n
    }\n
}\n
", "4208087:sub_4035d7": null, "4208096:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_25;  // tmp #25\n
    int tmp_26;  // tmp #26\n
    char *v1;  // rax\n
    char *v2;  // r10, Other Possible Types: unsigned long\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rcx\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // rcx\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rcx\n
    int v15;  // xmm0\n
    unsigned long long v17;  // rdx\n
    unsigned long v18;  // rcx\n
\n
    v1 = a0;\n
    if (!a0)\n
        return a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
        goto LABEL_403759;\n
    }\n
    if (a2 < 32)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v2 = a2 & -0x20;\n
        tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
        v3 = tmp_43;\n
        v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
        v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
        v6 = v2 - 32;\n
        v7 = (v6 >> 5) + 1;\n
        v8 = v7 & 7;\n
        if (v6 < 224)\n
        {\n
            v9 = 0;\n
        }\n
        else\n
        {\n
            v10 = v7 & -8;\n
            v9 = 0;\n
            do\n
            {\n
                *(&v1[v9]) = v5;\n
                *(&v1[16 + v9]) = v5;\n
                *(&v1[32 + v9]) = v5;\n
                *(&v1[48 + v9]) = v5;\n
                *(&v1[64 + v9]) = v5;\n
                *(&v1[80 + v9]) = v5;\n
                *(&v1[96 + v9]) = v5;\n
                *(&v1[112 + v9]) = v5;\n
                *(&v1[128 + v9]) = v5;\n
                *(&v1[144 + v9]) = v5;\n
                *(&v1[160 + v9]) = v5;\n
                *(&v1[176 + v9]) = v5;\n
                *(&v1[192 + v9]) = v5;\n
                *(&v1[208 + v9]) = v5;\n
                *(&v1[224 + v9]) = v5;\n
                *(&v1[240 + v9]) = v5;\n
                v9 += 0x100;\n
                tmp_21 = v10;\n
                v10 -= 8;\n
            } while (tmp_21 != 8);\n
        }\n
        if (v8)\n
        {\n
            v11 = &v1[v9 + 16];\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = v5;\n
                *((v11 + v13)) = v5;\n
                v13 += 32;\n
            } while (v8 * 32 != v13);\n
        }\n
        if (v2 == a2)\n
            return v1;\n
        if (!(a2 & 24))\n
        {\n
            a0 = &v1[v2];\n
LABEL_403759:\n
            v17 = &a2[-1 * v2];\n
            v18 = 0;\n
            do\n
            {\n
                *((a0 + v18)) = a1;\n
                v18 += 1;\n
            } while (v17 != v18);\n
            return v1;\n
        }\n
    }\n
    v14 = v2;\n
    v2 = a2 & -8;\n
    a0 = &v1[v2];\n
    tmp_25 = InterleaveLOV(tmp_26, tmp_26);\n
    v15 = tmp_25;\n
    do\n
    {\n
        *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
        v14 += 8;\n
    } while (v2 != v14);\n
    if (v2 == a2)\n
        return v1;\n
    goto LABEL_403759;\n
}\n
", "4208494:sub_40376e": null, "4208496:cgc_mutex_lock": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_mutex_lock(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rax\n
\n
    if (a0->field_0)\n
    {\n
        do\n
        {\n
            a0->field_10 = cgc_filaments_current();\n
            cgc_filaments_yield();\n
        } while (a0->field_0);\n
    }\n
    a0->field_0 = 1;\n
    v1 = cgc_filaments_current();\n
    a0->field_8 = v1;\n
    a0->field_10 = 0;\n
    return v1;\n
}\n
", "4208562:sub_4037b2": null, "4208576:cgc_mutex_unlock": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
long long cgc_mutex_unlock(struct_0 *a0)\n
{\n
    unsigned long long v1;  // rdi\n
    unsigned long v2;  // rax\n
\n
    a0->field_0 = 0;\n
    v1 = a0->field_10;\n
    if (v1)\n
        return cgc_filaments_switch(v1);\n
    return v2;\n
}\n
", "4208597:sub_4037d5": null, "4208608:cgc_output_number_printf": "long long cgc_output_number_printf(unsigned long a0, unsigned long a1, unsigned long long a2, unsigned long long a3, unsigned long long a4)\n
{\n
    int tmp_5;  // tmp #5\n
    char v0;  // [bp-0x3d]\n
    unsigned int v1;  // [bp-0x3c]\n
    char v2;  // [bp-0x38]\n
    unsigned long v4;  // r12, Other Possible Types: unsigned long long\n
    void* v5;  // r14, Other Possible Types: unsigned int, unsigned long\n
    unsigned long v6;  // rbp, Other Possible Types: unsigned long long\n
    char v7;  // al\n
    char v8;  // cl\n
\n
    v4 = a1;\n
    v5 = 0;\n
    v1 = a4;\n
    if (a1 >= a2)\n
    {\n
        a3 -= 1;\n
        v4 = (0 CONCAT a1) /m a2 >> 32;\n
        v5 = cgc_output_number_printf(a0, (0 CONCAT a1) /m a2, a2, a3, a4);\n
    }\n
    if (a3 > 0 && !v5)\n
    {\n
        v6 = a3 - 1;\n
        if (a3 + -1)\n
        {\n
            if ((v1 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc___filaments_transmit(a0, &v0, 1, &v2);\n
                    tmp_5 = v6;\n
                    v6 = v6 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc___filaments_transmit(a0, &v0, 1, &v2);\n
                    tmp_5 = v6;\n
                    v6 = v6 - 1;\n
                } while (tmp_5 + -1);\n
            }\n
        }\n
    }\n
    v7 = (!(v1 & 2) ? v4 + 55 : v4 + 87);\n
    v8 = v4 + 48;\n
    if (10 <= v4)\n
        v8 = v7;\n
    v0 = v8;\n
    cgc___filaments_transmit(a0, &v0, 1, &v2);\n
    return v5 + 1;\n
}\n
", "4208859:sub_4038db": null, "4208864:cgc_fdprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fdprintf(unsigned long a0, char *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x119]\n
    unsigned int v1;  // [bp-0x118], Other Possible Types: unsigned long long\n
    struct struct_0 **v2;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int *v3;  // [bp-0x108]\n
    char *v4;  // [bp-0xf8], Other Possible Types: unsigned long\n
    char v5;  // [bp-0xf0]\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    unsigned long v30;  // r13\n
    char *v31;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v32;  // rbx\n
    void* v33;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    char *v35;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v36;  // rcx\n
    unsigned int v37;  // edx\n
    unsigned long long v38;  // r12\n
    unsigned long long v39;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v40;  // rcx\n
    unsigned long v41;  // rcx\n
    unsigned long long v42;  // rcx\n
    unsigned long long v43;  // rcx\n
    unsigned long v44;  // rdi\n
    struct_1 *v45;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v46;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v47;  // rax\n
    struct struct_0 **v48;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v49;  // rax\n
    struct struct_0 **v50;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v51;  // rax, Other Possible Types: unsigned long\n
    unsigned long v52;  // rsi\n
    unsigned long v53;  // rdi\n
    unsigned long v54;  // rdx, Other Possible Types: unsigned long long\n
    char *v55;  // rbp\n
    unsigned long v56;  // r14\n
    unsigned long v57;  // rbx\n
    unsigned long long v58;  // r12, Other Possible Types: unsigned long\n
    struct_1 *v59;  // r14, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v4 = a1;\n
    v3 = &v6;\n
    v2 = &v19;\n
    v1 = 206158430224;\n
    if (!*(a1))\n
        return 0;\n
    v30 = a0;\n
    v59 = &v0;\n
    v58 = &v5;\n
    do\n
    {\n
        v31 = a1 + 1;\n
        v4 = v31;\n
        if (*(a1) == 37)\n
        {\n
            v32 = v58;\n
            v33 = 0;\n
            v34 = 0;\n
            while (true)\n
            {\n
                v35 = v31;\n
                while (true)\n
                {\n
                    v31 = v35 + 1;\n
                    v4 = v31;\n
                    v36 = *(v35);\n
                    v37 = v36;\n
                    if (v37 - 49 >= 9)\n
                        break;\n
                    v34 = cgc_strtol();\n
                    v35 = v4;\n
                }\n
                switch (v37)\n
                {\n
                case 88:\n
                    v33 = v33 | 2;\n
                    v39 = v1;\n
                    if (v39 > 40)\n
                    {\n
LABEL_403a62:\n
                        v47 = v2;\n
                        v2 = v47 + 8;\n
                        v52 = *(v47);\n
                        v53 = v30;\n
                        v54 = 16;\n
                        goto LABEL_403c1a;\n
                    }\n
                case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
LABEL_403a4b:\n
                    v0 = v36;\n
                    goto LABEL_403b18;\n
                case 99:\n
                    v40 = v1;\n
                    if (v40 <= 40)\n
                    {\n
                        v48 = v40 + v3;\n
                        v1 = v40 + 8;\n
                    }\n
                    else\n
                    {\n
                        v48 = v2;\n
                        v2 = v48 + 8;\n
                    }\n
                    v58 = rbx<8>;\n
                    v0 = *(v48);\n
                    goto LABEL_403994;\n
                case 100:\n
                    v41 = v1;\n
                    if (v41 <= 40)\n
                    {\n
                        v1 = v41 + 8;\n
                        v56 = *((v41 + v3));\n
                        if (!(v56 < 0))\n
                            goto LABEL_403b7d;\n
                    }\n
                    else\n
                    {\n
                        v49 = v2;\n
                        v2 = v49 + 1;\n
                        v56 = *(v49);\n
                        if (!(v56 < 0))\n
                            goto LABEL_403b7d;\n
                    }\n
                    v0 = 45;\n
                    cgc___filaments_transmit(v30, &v0, 1, v32);\n
                    v56 = -(v56);\n
LABEL_403b7d:\n
                    cgc_output_number_printf(v30, v56, 10, v34, v33);\n
                    v59 = &v0;\n
                    v58 = rbx<8>;\n
                    break;\n
                case 115:\n
                    v42 = v1;\n
                    if (v42 > 40)\n
                    {\n
                        v50 = v2;\n
                        v2 = v50 + 8;\n
                    }\n
                    else\n
                    {\n
                        v50 = v42 + v3;\n
                        v1 = v42 + 8;\n
                    }\n
                    v58 = rbx<8>;\n
                    v55 = *(v50);\n
                    if (cgc_strlen(v55))\n
                    {\n
                        v57 = 0;\n
                        do\n
                        {\n
                            v0 = v55[v57];\n
                            cgc___filaments_transmit(v30, v59, 1, v58);\n
                            v57 += 1;\n
                        } while (cgc_strlen(v55) > v57);\n
                    }\n
                    break;\n
                case 117:\n
                    v43 = v1;\n
                    if (v43 <= 40)\n
                    {\n
                        v51 = v43 + v3;\n
                        v1 = v43 + 8;\n
                    }\n
                    else\n
                    {\n
                        v51 = v2;\n
                        v2 = v51 + 8;\n
                    }\n
                    v52 = *(v51);\n
                    v53 = v30;\n
                    v54 = 10;\n
LABEL_403c1a:\n
                    cgc_output_number_printf(v53, v52, v54, v34, v33);\n
                    v58 = rbx<8>;\n
                    break;\n
                case 120:\n
                    v39 = v1;\n
                    if (!(v39 <= 40))\n
                        goto LABEL_403a62;\n
                default:\n
                    if (v37 == 37)\n
                    {\n
                        v0 = 37;\n
LABEL_403b18:\n
                        v44 = v30;\n
                        v45 = *(&v0);\n
                        v58 = rbx<8>;\n
                        v46 = rbx<8>;\n
                        goto LABEL_4039a2;\n
                    }\n
                    if (v37 == 48)\n
                        goto LABEL_403a16;\n
                    else\n
                        goto LABEL_403a4b;\n
                }\n
LABEL_403a16:\n
                v38 = 1;\n
            }\n
        }\n
        v0 = *(a1);\n
LABEL_403994:\n
        v44 = v30;\n
        v45 = v59;\n
        v46 = v58;\n
LABEL_4039a2:\n
        cgc___filaments_transmit(v44, v45, 1, v46);\n
        a1 = v4;\n
    } while (*(a1));\n
    return 0;\n
}\n
", "4209038:sub_40398e": null, "4209150:sub_4039fe": null, "4209182:sub_403a1e": null, "4209728:cgc_output_number_sprintf": "long long cgc_output_number_sprintf(unsigned int *a0, struct struct_0 **a1, unsigned long a2, unsigned long long a3, unsigned long long a4, unsigned long long a5)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_35;  // tmp #35\n
    unsigned long v1;  // [bp-0x20]\n
    unsigned long v2;  // [bp-0x18]\n
    unsigned long v3;  // [bp-0x10]\n
    unsigned long v5;  // r15\n
    unsigned long v6;  // r14\n
    unsigned long v7;  // r12\n
    unsigned long v8;  // rbx\n
    char v9;  // r15b\n
    unsigned long long v10;  // rax\n
    void* v11;  // rax, Other Possible Types: unsigned long\n
    unsigned long v12;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rcx, Other Possible Types: unsigned long long\n
    char v14[2];  // rdx, Other Possible Types: unsigned long\n
    char v15[2];  // rdx\n
    char v16[2];  // rdx\n
    char v17;  // dl\n
    unsigned long long v18;  // rax\n
\n
    v3 = v5;\n
    v2 = v6;\n
    v1 = v7;\n
    v0 = v8;\n
    v9 = a5;\n
    v12 = a2;\n
    v11 = 0;\n
    if (a2 >= a3)\n
    {\n
        a4 -= 1;\n
        v10 = (0 CONCAT a2) /m a3;\n
        v12 = v10 / 0x100000000;\n
        v11 = cgc_output_number_sprintf(a0, a1, v10, a3, a4, a5);\n
    }\n
    if (a4 > 0 && !v11)\n
    {\n
        v13 = a4 - 1;\n
        if (a4 + -1)\n
        {\n
            v14 = *(a1);\n
            if ((v9 & 1))\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 48;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 48;\n
                        v16 = *(a1);\n
                        *(a1) = &v16[1];\n
                        *(a0) = *(a0) + 1;\n
                        v16[1] = 48;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v13 & 1))\n
                {\n
                    v14[0] = 32;\n
                    v14 = &*(a1)->field_1;\n
                    *(a1) = v14;\n
                    *(a0) = *(a0) + 1;\n
                    v13 = a4 - 2;\n
                }\n
                if (a4 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v14) = 32;\n
                        v15 = *(a1);\n
                        *(a1) = &v15[1];\n
                        *(a0) = *(a0) + 1;\n
                        v15[1] = 32;\n
                        v14 = &*(a1)->field_1;\n
                        *(a1) = v14;\n
                        *(a0) = *(a0) + 1;\n
                        tmp_35 = v13;\n
                        v13 = v13 - 2;\n
                    } while (tmp_35 + -2);\n
                }\n
            }\n
        }\n
    }\n
    v17 = (10 <= v12 ? 48 : ((!(v9 & 2)) * 32 + 55));\n
    *(a1)->field_0 = v17 + v12;\n
    *(a1) = &*(a1)->field_1;\n
    *(a0) = *(a0) + 1;\n
    v18 = v11 + 1;\n
    return v18;\n
}\n
", "4210047:sub_403d7f": null, "4210048:cgc_sprintf": "typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_sprintf(char *a0, struct_2 *a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char *v1;  // [bp-0x110], Other Possible Types: unsigned long\n
    unsigned int v2;  // [bp-0x108], Other Possible Types: unsigned long long\n
    struct struct_0 **v3;  // [bp-0x100], Other Possible Types: unsigned long\n
    unsigned int *v4;  // [bp-0xf8]\n
    struct_2 *v5;  // [bp-0xf0], Other Possible Types: unsigned long\n
    char v6;  // [bp-0xe8]\n
    unsigned long v7;  // [bp-0xd8]\n
    unsigned long v8;  // [bp-0xd0]\n
    unsigned long v9;  // [bp-0xc8]\n
    unsigned long v10;  // [bp-0xc0]\n
    int v11;  // [bp-0xb8]\n
    int v12;  // [bp-0xa8]\n
    int v13;  // [bp-0x98]\n
    int v14;  // [bp-0x88]\n
    int v15;  // [bp-0x78]\n
    int v16;  // [bp-0x68]\n
    int v17;  // [bp-0x58]\n
    int v18;  // [bp-0x48]\n
    unsigned long v19;  // [bp+0x8]\n
    char v20;  // al\n
    int v21;  // xmm0\n
    int v22;  // xmm1\n
    int v23;  // xmm2\n
    int v24;  // xmm3\n
    int v25;  // xmm4\n
    int v26;  // xmm5\n
    int v27;  // xmm6\n
    int v28;  // xmm7\n
    unsigned long v29;  // r9\n
    struct_1 *v31;  // r14\n
    struct struct_0 **v32;  // r13\n
    struct_2 *v33;  // rdi, Other Possible Types: unsigned long\n
    char *v34;  // rcx\n
    void* v36;  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v37;  // rbp\n
    struct_2 *v38;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v39;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v40;  // rcx\n
    unsigned int v41;  // esi\n
    unsigned long long v43;  // rax\n
    char *v44;  // rax, Other Possible Types: unsigned long\n
    unsigned long v45;  // rdx\n
    unsigned long long v46;  // rcx\n
    unsigned long long v47;  // rdx\n
    unsigned long v48;  // rdx, Other Possible Types: unsigned long long\n
    struct struct_0 **v49;  // rcx\n
    struct struct_0 **v50;  // rax, Other Possible Types: unsigned long\n
    struct struct_0 **v51;  // rcx, Other Possible Types: unsigned long\n
    char *v52;  // rcx\n
    char *v53;  // rbp\n
    unsigned long v54;  // r14\n
    unsigned int v55;  // r13d\n
    struct_1 *v56;  // rdi, Other Possible Types: unsigned long\n
    struct struct_0 **v57;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v58;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_2 **v59;  // rbx\n
    unsigned long v60;  // r15\n
    struct struct_2 **v61;  // r15\n
    struct_1 *v62;  // r14\n
    struct struct_0 **v63;  // r13\n
    void* v64;  // rax, Other Possible Types: unsigned long\n
\n
    if (v20)\n
    {\n
        v11 = v21;\n
        v12 = v22;\n
        v13 = v23;\n
        v14 = v24;\n
        v15 = v25;\n
        v16 = v26;\n
        v17 = v27;\n
        v18 = v28;\n
    }\n
    v7 = a2;\n
    v8 = a3;\n
    v9 = a4;\n
    v10 = v29;\n
    v1 = a0;\n
    v5 = a1;\n
    v0 = 0;\n
    v4 = &v6;\n
    v3 = &v19;\n
    v2 = 206158430224;\n
    if (!a1->field_-1)\n
    {\n
        v64 = 0;\n
    }\n
    else\n
    {\n
        v31 = &v0;\n
        v32 = &v1;\n
        do\n
        {\n
            v33 = a1 + 1;\n
            v5 = v33;\n
            if (*(a1) != 37)\n
            {\n
                v34 = v1;\n
                *(v34) = *(a1);\n
                v1 = v34 + 1;\n
            }\n
            else\n
            {\n
                v36 = 0;\n
                while (true)\n
                {\n
                    v37 = v36 | 1;\n
                    v38 = v33 + 1;\n
                    v39 = v36;\n
                    do\n
                    {\n
                        v36 = v39;\n
                        v5 = v38;\n
                        v40 = *((v38 - 1));\n
                        v41 = v40;\n
                        v38 += 1;\n
                        v39 = v37;\n
                    } while (v41 == 48);\n
                    switch (v41)\n
                    {\n
                    case 37:\n
                        v44 = v1;\n
                        *(v44) = 37;\n
                        goto LABEL_403f5d;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v43 = cgc_strtol(v38 - 2, &v5, 10);\n
                        v33 = v5;\n
                        continue;\n
                    case 100:\n
                        v45 = v2;\n
                        if (v45 <= 40)\n
                        {\n
                            v2 = v45 + 8;\n
                            v48 = *((v45 + v4));\n
                            if (!(v48 < 0))\n
                                goto LABEL_403f97;\n
                        }\n
                        else\n
                        {\n
                            v49 = v3;\n
                            v3 = v49 + 1;\n
                            v48 = *(v49);\n
                            if (!(v48 < 0))\n
                                goto LABEL_403f97;\n
                        }\n
                        v52 = v1;\n
                        *(v52) = 45;\n
                        v1 = v52 + 1;\n
                        v0 += 1;\n
                        v48 = -(v48);\n
LABEL_403f97:\n
                        v56 = *(&v0);\n
                        v57 = v1;\n
                        v58 = 10;\n
LABEL_403fa2:\n
                        cgc_output_number_sprintf(v56, v57, v48, v58, 0, v36);\n
                        break;\n
                    case 115:\n
                        v46 = v2;\n
                        if (v46 > 40)\n
                        {\n
                            v50 = v3;\n
                            v3 = v50 + 8;\n
                        }\n
                        else\n
                        {\n
                            v50 = v46 + v4;\n
                            v2 = v46 + 8;\n
                        }\n
                        v53 = *(v50);\n
                        v54 = v1;\n
                        v55 = v0;\n
                        if (cgc_strlen(v53))\n
                        {\n
                            v59 = r15<8>;\n
                            v60 = 0;\n
                            do\n
                            {\n
                                *((v54 + v60)) = v53[v60];\n
                                v60 += 1;\n
                            } while (cgc_strlen(v53) > v60);\n
                            v54 += v60;\n
                            v55 += v60;\n
                            v61 = rbx<8>;\n
                        }\n
                        v1 = v54;\n
                        v0 = v55;\n
                        v62 = &v0;\n
                        v63 = &v1;\n
                        break;\n
                    case 88:\n
                        v36 = v36 | 2;\n
                    case 120:\n
                        v47 = v2;\n
                        if (v47 <= 40)\n
                        {\n
                            v51 = v47 + v4;\n
                            v2 = v47 + 8;\n
                        }\n
                        else\n
                        {\n
                            v51 = v3;\n
                            v3 = v51 + 8;\n
                        }\n
                        v48 = *(v51);\n
                        v56 = r14<8>;\n
                        v57 = r13<8>;\n
                        v58 = 16;\n
                        goto LABEL_403fa2;\n
                    default:\n
                        v44 = v1;\n
                        *(v44) = v40;\n
LABEL_403f5d:\n
                        v1 = v44 + 1;\n
                        goto LABEL_403e50;\n
                    }\n
                }\n
            }\n
LABEL_403e50:\n
            v0 += 1;\n
            a1 = v5;\n
        } while (*(a1));\n
        a0 = v1;\n
        v64 = v0;\n
    }\n
    *(a0) = 0;\n
    return v64;\n
}\n
", "4210236:sub_403e3c": null, "4210751:sub_40403f": null, "4210752:cgc_realloc": "long long cgc_realloc(unsigned int a0, unsigned int a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long *v4;  // rax\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    char *v8;  // rdx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (!a0)\n
        return cgc_malloc(a1);\n
    if (!a1)\n
    {\n
        cgc_free(a0);\n
    }\n
    else\n
    {\n
        v4 = a0 - 24;\n
        v6 = *(v4);\n
        if (v6 >> 1 <= a1 && v6 - 24 > a1)\n
            return a0;\n
        v7 = cgc_malloc(a1);\n
        if (v7)\n
        {\n
            v8 = *(v4) - 24;\n
            if (v8 > a1)\n
                v8 = a1;\n
            cgc_memcpy(v7, a0, v8);\n
            cgc_free(a0);\n
            return v7;\n
        }\n
    }\n
    return 0;\n
}\n
", "4210907:sub_4040db": null, "4210912:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    char v3;  // cl\n
    struct_0 *v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v4 = a0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v2 = cgc_tolower(v2);\n
                if (v2 != cgc_tolower(*(v1)))\n
                {\n
                    *(&v2) = *((v4 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v4);\n
            v4 += 1;\n
            if (!v2)\n
                goto LABEL_404137;\n
        }\n
    }\n
LABEL_404137:\n
    v2 = 0;\n
    v5 = cgc_tolower(v2);\n
    return v5 - cgc_tolower(*(v1));\n
}\n
", "4210934:sub_4040f6": null, "4211029:sub_404155": null, "4211040:cgc_strcat": "long long cgc_strcat(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_strcpy(cgc_strlen() + a0, a1);\n
    return a0;\n
}\n
", "4211078:sub_404186": null, "4211088:cgc_strchr": "long long cgc_strchr(char a0[2], unsigned long a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char, unsigned long long\n
    char v2[2];  // rax, Other Possible Types: unsigned long\n
\n
    v1 = a0[0];\n
    if (a0[0])\n
    {\n
        v2 = a0;\n
        do\n
        {\n
            if (v1 == a1)\n
                return v2;\n
            v1 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0;\n
}\n
", "4211126:sub_4041b6": null, "4211136:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // cl, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // al\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return *(a1) - v1;\n
            if (v1 != v3)\n
                return *(a1) - v1;\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return *(a1) - 0;\n
}\n
", "4211189:sub_4041f5": null, "4211200:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char *v1;  // rax\n
    char v2;  // cl\n
    unsigned long v3;  // rdi\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    if (!*(a1))\n
    {\n
        *(a0) = 0;\n
        return a0;\n
    }\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = v2;\n
        v2 = a1[1 + v3];\n
        v3 += 1;\n
    } while (v2);\n
    v1[v3] = 0;\n
    return v1;\n
}\n
", "4211247:sub_40422f": null, "4211248:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    unsigned long v1;  // rbx\n
    char *v2;  // rax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4211307:sub_40426b": null, "4211312:cgc_strlen": "long long cgc_strlen(unsigned long a0)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((a0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4211340:sub_40428c": null, "4211344:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    char v2[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    char v3;  // cl\n
    unsigned long long v4;  // rax\n
    unsigned long v5;  // rax, Other Possible Types: char\n
    unsigned long v6;  // rbx\n
\n
    if (!a2)\n
        return 0;\n
    v1 = a1;\n
    v2 = a0;\n
    if (a2 != 1)\n
    {\n
        for (v5 = a0[0]; v5; v2 += 1)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v5 != v3)\n
            {\n
                v4 = cgc_tolower(v5);\n
                if (v4 != cgc_tolower(*(v1)))\n
                    break;\n
            }\n
            v1 += 1;\n
            v5 = *((v2 + 1));\n
        }\n
    }\n
    v6 = cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
    return v6;\n
}\n
", "4211401:sub_4042c9": null, "4211461:sub_404305": null, "4211472:cgc_strncmp": "long long cgc_strncmp(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_8;  // tmp #8\n
    unsigned long v1;  // rdx, Other Possible Types: unsigned long long\n
    char *v2;  // r8\n
    char *v3;  // r9\n
    char v4;  // al\n
    char v5;  // cl\n
\n
    if (!a2)\n
        return 0;\n
    tmp_2 = a2;\n
    v1 = a2 - 1;\n
    if (tmp_2 == 1)\n
        return *(a1) - *(a0);\n
    v2 = &a0[v1];\n
    v3 = &a1[v1];\n
    while (true)\n
    {\n
        v4 = *(a0);\n
        if (!v4)\n
            return *(a1) - *(a0);\n
        v5 = *(a1);\n
        if (!v5)\n
        {\n
            return *(a1) - *(a0);\n
        }\n
        else if (v4 != v5)\n
        {\n
            return *(a1) - *(a0);\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            a1 += 1;\n
            tmp_8 = v1;\n
            v1 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v2);\n
        }\n
    }\n
}\n
", "4211554:sub_404362": null, "4211568:cgc_strncpy": "long long cgc_strncpy(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned long v1;  // rax\n
    unsigned long v2;  // rbx\n
    char v3;  // cl\n
    unsigned long long *v4;  // r8\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r10\n
    unsigned long long v7;  // r9\n
    uint128_t *v8;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v9;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v10;  // r11\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rsi\n
    unsigned long long *v14;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rsi\n
    unsigned long v16;  // r9\n
\n
    v1 = a0;\n
    v2 = 0;\n
    if (a2)\n
    {\n
        while (true)\n
        {\n
            v3 = *((a1 + v2));\n
            a0[v2] = v3;\n
            if (!v3)\n
                break;\n
            v2 += 1;\n
            if (a2 == v2)\n
                return a0;\n
        }\n
    }\n
    if (v2 >= a2)\n
        return a0;\n
    v4 = a2 - v2;\n
    if (v4 < 8)\n
    {\n
        do\n
        {\n
LABEL_4044b0:\n
            *((v1 + v2)) = 0;\n
            v2 += 1;\n
        } while (a2 != v2);\n
        return v1;\n
    }\n
    if (v4 < 32)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v14 = v4 & -0x20;\n
        v5 = v14 - 32;\n
        v6 = (v5 >> 5) + 1;\n
        v7 = v6 & 3;\n
        if (v5 < 96)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v9 = v6 & -4;\n
            v10 = v2 + v1 + 112;\n
            v8 = 0;\n
            do\n
            {\n
                *((v10 + v8 - 112)) = 0;\n
                *((v10 + v8 - 96)) = 0;\n
                *((v10 + v8 - 80)) = 0;\n
                *((v10 + v8 - 64)) = 0;\n
                *((v10 + v8 - 48)) = 0;\n
                *((v10 + v8 - 32)) = 0;\n
                *((v10 + v8 - 16)) = 0;\n
                *((v10 + v8)) = 0;\n
                v8 -= -128;\n
                tmp_13 = v9;\n
                v9 -= 4;\n
            } while (tmp_13 != 4);\n
        }\n
        if (v7)\n
        {\n
            v11 = v1 + v8 + v2 + 16;\n
            v13 = 0;\n
            do\n
            {\n
                *((-16 + v11 + v13)) = 0;\n
                *((v11 + v13)) = 0;\n
                v13 += 32;\n
            } while (v7 * 32 != v13);\n
        }\n
        if (v4 == v14)\n
            return v1;\n
        if (!(v4 & 24))\n
        {\n
            v2 += v14;\n
            goto LABEL_4044b0;\n
        }\n
    }\n
    v15 = v4 & -8;\n
    v16 = v1 + v2;\n
    v2 += v15;\n
    do\n
    {\n
        *((v16 + v14)) = 0;\n
        v14 += 8;\n
    } while (v15 != v14);\n
    if (v4 == v15)\n
        return v1;\n
    goto LABEL_4044b0;\n
}\n
", "4211903:sub_4044bf": null, "4211904:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_strsep(struct struct_0 **a0, char a1[2])\n
{\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
    unsigned long v2;  // cl, Other Possible Types: char\n
    struct_1 *v3;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = *(a0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a1, v2))\n
            {\n
                v1 = *(a0);\n
                if (*((v3 - 1)))\n
                {\n
                    *((v3 - 1)) = 0;\n
                    goto LABEL_404519;\n
                }\n
                goto LABEL_404517;\n
            }\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
        v1 = *(a0);\n
    }\n
LABEL_404517:\n
    v3 = 0;\n
LABEL_404519:\n
    *(a0) = v3;\n
    return v1;\n
}\n
", "4212002:sub_404522": null, "4212016:cgc_strtol": "long long cgc_strtol(char *a0, unsigned long long *a1, unsigned int a2)\n
{\n
    unsigned long v1;  // r9d, Other Possible Types: unsigned int\n
    void* v2;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v3;  // r8, Other Possible Types: unsigned long, unsigned long long\n
    char *v4;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rbx\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r9\n
    char v8[2];  // r8, Other Possible Types: unsigned long\n
    void* v9;  // r10, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v10;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // r10\n
    unsigned long long v13;  // rcx\n
    unsigned int v14;  // r11d\n
\n
    v1 = 0;\n
    v2 = 0;\n
    v3 = a0;\n
    if (a2 <= 36 && a2 != 1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v5 = *(v4);\n
            if (v5 - 9 >= 4 && v5 != 32)\n
                break;\n
            v4 += 1;\n
        }\n
        v6 = 0;\n
        *(&v6) = v5 == 45;\n
        v7 = (*((v4 + v6)) == 43) + v6;\n
        v8 = v4 + v7;\n
        if (!a2)\n
        {\n
            a2 = 10;\n
            if (v8[0] == 48)\n
            {\n
                if ((*((v4 + v7 + 1)) | 32) != 120)\n
                {\n
                    v8 = v4 + v7 + 1;\n
                    a2 = 8;\n
                }\n
                else\n
                {\n
                    v8 = v4 + v7 + 2;\n
                    a2 = 16;\n
                }\n
            }\n
        }\n
        else if (a2 == 16)\n
        {\n
            a2 = 16;\n
            if (v8[0] == 48 && (*((v4 + v7 + 1)) | 32) == 120)\n
                v8 = v4 + v7 + 2;\n
        }\n
        v1 = 0;\n
        v9 = 0;\n
        v10 = *(v8);\n
        if (!(v10 - 48 < 10))\n
            goto LABEL_404610;\n
        while (true)\n
        {\n
            v11 = v10 - 48;\n
            if (v11 >= a2)\n
                break;\n
            while (true)\n
            {\n
                v12 = a2 * v9;\n
                v13 = v11 + v12;\n
                v1 += 1;\n
                v9 = v13;\n
                v10 = *((v8 + v1));\n
                if (v10 - 48 < 10)\n
                    break;\n
LABEL_404610:\n
                v14 = -65;\n
                if (v10 - 65 >= 26)\n
                {\n
                    v14 = -97;\n
                    if (v10 - 97 < 26)\n
                        goto LABEL_40462a;\n
                    else\n
                        goto LABEL_404650;\n
                }\n
LABEL_40462a:\n
                v11 = v10 + v14 + 10;\n
                if (v11 >= a2)\n
                    goto LABEL_404650;\n
            }\n
        }\n
LABEL_404650:\n
        v2 = -(v9);\n
        if (v5 != 45)\n
            v2 = v9;\n
        v3 = v8 + v1;\n
    }\n
    if (!a1)\n
        return v2;\n
    if (!v1)\n
        v3 = a0;\n
    *(a1) = v3;\n
    return v2;\n
}\n
", "4212051:sub_404553": null, "4212233:sub_404609": null, "4212338:sub_404672": null, "4212352:cgc_strtoul": "long long cgc_strtoul(char *a0, unsigned long long *a1, unsigned long a2)\n
{\n
    return cgc_strtol(a0, a1, a2);\n
}\n
", "4212357:sub_404685": null, "4212368:cgc_ac_init": "typedef struct struct_0 {\n
    char field_-ffffffffffbf78e0;\n
    char padding_-ffffffffffbf78df[18446744073709551679];\n
    char field_408760;\n
} struct_0;\n
\n
extern unsigned int ac_mutex;\n
extern unsigned int cgc_num_words;\n
extern uint128_t g_40a190;\n
extern char word_list;\n
\n
long long cgc_ac_init()\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v2;  // rcx, Other Possible Types: unsigned long\n
\n
    v1 = cgc_num_words + 2;\n
    v2 = 64;\n
    while (*((v2 - -4228896)))\n
    {\n
        cgc_num_words = v1 - 1;\n
        if (!*((4228960 + v2)))\n
            break;\n
        cgc_num_words = v1;\n
        v2 -= -128;\n
        v1 = v1 + 2;\n
        if (v2 == 6464)\n
            break;\n
    }\n
    ac_mutex = 0;\n
    g_40a190 = 0;\n
    return v1;\n
}\n
", "4212465:sub_4046f1": null, "4212480:cgc_ac_add_custom": "extern unsigned int cgc_num_words;\n
extern char g_408780;\n
extern char word_list;\n
\n
long long cgc_ac_add_custom(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    char *v3;  // r12, Other Possible Types: unsigned long\n
    void* v4;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return v2;\n
    }\n
    else if (!a1)\n
    {\n
        return v2;\n
    }\n
    else if (cgc_num_words > 99)\n
    {\n
        return cgc_num_words;\n
    }\n
    else\n
    {\n
        if (cgc_num_words > 0)\n
        {\n
            v3 = \"acceptible\";\n
            v4 = 0;\n
            do\n
            {\n
                v2 = cgc_strcmp(a0, v3);\n
                if (!v2)\n
                    return v2;\n
                v4 += 1;\n
                v3 += 64;\n
            } while (v4 < cgc_num_words);\n
        }\n
        v2 = cgc_strlen(a0);\n
        if (v2 > 31)\n
            return v2;\n
        v2 = cgc_strlen(a1);\n
        if (v2 > 31)\n
            return v2;\n
        v2 = cgc_strlen(a0);\n
        if (v2)\n
        {\n
            cgc_strcpy((4228960 + 64 * cgc_num_words), a0);\n
            v2 = cgc_strcpy(&(&g_408780)[64 * cgc_num_words], a1);\n
            cgc_num_words = cgc_num_words + 1;\n
            return v2;\n
        }\n
        return v2;\n
    }\n
}\n
", "4212695:sub_4047d7": null, "4212704:cgc_ac_process": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[4235712];\n
    unsigned long long field_40a1c0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4235712];\n
    uint128_t field_40a1c0;\n
} struct_1;\n
\n
extern unsigned long long ac_buffer;\n
extern unsigned long long ac_idx;\n
extern void ac_mutex;\n
extern char ac_queue;\n
extern unsigned long long ac_queue_count;\n
extern struct_0 *ac_queue_head;\n
extern unsigned int cgc_num_words;\n
extern char g_40a1c8;\n
extern char word_list;\n
\n
long long cgc_ac_process()\n
{\n
    unsigned long v0;  // [bp-0x68]\n
    int tmp_30;  // tmp #30\n
    unsigned long v1;  // [bp-0x60]\n
    char v2;  // [bp-0x58]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    struct_2 *v14;  // r12, Other Possible Types: unsigned long\n
    struct_0 *v15;  // rax\n
    unsigned long long v16;  // rbp\n
    unsigned long long v17;  // r14\n
    unsigned long v18;  // rbx\n
    char *v19;  // rbx, Other Possible Types: unsigned long\n
    void* v20;  // rbp, Other Possible Types: unsigned long\n
    void* v21;  // r12, Other Possible Types: unsigned long\n
    struct_0 *v22;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v23;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rbx\n
    unsigned long v25;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long long v26;  // rax\n
    unsigned long v27;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v28;  // rbp\n
    char *v29;  // r13\n
    int v30;  // xmm0\n
    struct_0 *v31;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v32;  // rsi, Other Possible Types: unsigned long long\n
    struct_0 *v33;  // rdi\n
    struct_1 *v34;  // rdi\n
    struct_0 *v35;  // rdx\n
    struct_0 *v36;  // rcx\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v14 = &v2;\n
    while (true)\n
    {\n
        if (ac_buffer && ac_queue_count)\n
        {\n
            do\n
            {\n
                cgc_mutex_lock(&ac_mutex);\n
                if (!ac_buffer)\n
                {\n
                    cgc_mutex_unlock(&ac_mutex);\n
                    break;\n
                }\n
                v15 = ac_queue_head * 16;\n
                v16 = *((v15 + &ac_queue));\n
                v17 = *((v15 + &g_40a1c8));\n
                v18 = v17 - v16;\n
                if (v18 <= 31)\n
                {\n
                    cgc_memcpy(v14, ac_buffer + v16, v18);\n
                    (&v2)[v18] = 0;\n
                    cgc_mutex_unlock(&ac_mutex);\n
                    if (cgc_num_words <= 0)\n
                        goto LABEL_4048f3;\n
                }\n
                else\n
                {\n
                    v2 = 0;\n
                    cgc_mutex_unlock(&ac_mutex);\n
                    if (cgc_num_words <= 0)\n
                        goto LABEL_4048f3;\n
                }\n
                v1 = v16;\n
                v19 = \"acceptible\";\n
                v20 = 0;\n
                do\n
                {\n
                    if (!cgc_strcmp(v14, v19))\n
                    {\n
                        v24 = v19 + 32;\n
                        v21 = cgc_strlen(v24) - cgc_strlen(v14);\n
                        cgc_mutex_lock(&ac_mutex);\n
                        if (v21 < 0)\n
                        {\n
                            v25 = v21;\n
                            cgc_memmove(v17 + v21 + ac_buffer, ac_buffer + v17, ac_idx - v17);\n
                        }\n
                        else\n
                        {\n
                            v25 = v21;\n
                        }\n
                        v0 = v25;\n
                        v26 = cgc_realloc(ac_buffer, ac_idx + v25 + 1);\n
                        if (v26)\n
                        {\n
                            v27 = v26;\n
                            ac_buffer = v26;\n
                            v28 = v0;\n
                            if (v21 > 0)\n
                            {\n
                                cgc_memmove(v17 + v28 + v26, v26 + v17, ac_idx - v17);\n
                                v27 = ac_buffer;\n
                            }\n
                            v29 = v27 + v1;\n
                            cgc_memcpy(v29, v24, cgc_strlen(v24));\n
                            ac_idx = ac_idx + v28;\n
                        }\n
                        cgc_mutex_unlock(&ac_mutex);\n
                        v22 = ac_queue_head;\n
                        v23 = ac_queue_count;\n
                        if (!ac_queue_count)\n
                            goto LABEL_404a87;\n
                        goto LABEL_404a0d;\n
                    }\n
                    v20 += 1;\n
                    v19 += 64;\n
                } while (v20 < cgc_num_words);\n
LABEL_4048f3:\n
                v21 = 0;\n
                v22 = ac_queue_head;\n
                v23 = ac_queue_count;\n
                if (!ac_queue_count)\n
                    goto LABEL_404a87;\n
LABEL_404a0d:\n
                v30 = ((0 CONCAT v21) >> 32) CONCAT (0 CONCAT v21) CONCAT ((0 CONCAT v21) >> 32) CONCAT (0 CONCAT v21);\n
                v31 = v22;\n
                if (v23 != 1)\n
                {\n
                    v32 = v23 & -2;\n
                    v31 = v22;\n
                    do\n
                    {\n
                        v33 = v31 * 16;\n
                        *((v33 + &ac_queue)) = *((v33 + &ac_queue)) + v30;\n
                        v34 = (v31 + 1 & 1023) * 16;\n
                        *((v34 + &ac_queue)) = *((v34 + &ac_queue)) + v30;\n
                        v31 = v31 + 2 & 1023;\n
                        tmp_30 = v32;\n
                        v32 -= 2;\n
                    } while (tmp_30 != 2);\n
                }\n
                if ((v23 & 1))\n
                {\n
                    v35 = v31 * 16;\n
                    *((v35 + &ac_queue)) = v30 + *((v35 + &ac_queue));\n
                }\n
LABEL_404a87:\n
                v36 = v22 + 1 & 1023;\n
                ac_queue_head = v36;\n
                ac_queue_count = v23 - 1;\n
                v14 = &v2;\n
                if (!ac_buffer)\n
                    break;\n
                continue;\n
            } while (ac_queue_count);\n
        }\n
        cgc_filaments_yield();\n
    }\n
}\n
", "4212739:sub_404803": null, "4212890:sub_40489a": null, "4213010:sub_404912": null, "4213443:sub_404ac3": null, "4213456:cgc_ac_read": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* ac_buffer;\n
extern void* ac_idx;\n
extern void ac_mutex;\n
extern char ac_queue;\n
extern void* ac_queue_count;\n
extern void* ac_queue_head;\n
extern struct_1 *ac_queue_tail;\n
extern char g_40a1c8;\n
\n
long long cgc_ac_read(unsigned long a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x60]\n
    char v1;  // [bp-0x58]\n
    char v2;  // [bp-0x57]\n
    char v4;  // bl\n
    struct_0 *v6;  // r14, Other Possible Types: unsigned long\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long v9;  // rbp, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // rax\n
    char *v11;  // rax\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v14;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v15[529466];  // rsi\n
    unsigned long long v16[529466];  // rsi\n
    char *v17;  // rdx\n
\n
    v4 = a1;\n
    ac_idx = 0;\n
    ac_queue_tail = 0;\n
    ac_queue_head = 0;\n
    ac_queue_count = 0;\n
    ac_buffer = 0;\n
    while (true)\n
    {\n
LABEL_404b87:\n
        v8 = -1;\n
        v6 = &v1;\n
        do\n
        {\n
            if (cgc___filaments_receive(a0, v6, 1, &v0))\n
            {\n
LABEL_404d01:\n
                cgc_mutex_lock(&ac_mutex);\n
                cgc_free(ac_buffer);\n
                ac_buffer = 0;\n
                cgc_mutex_unlock(&ac_mutex);\n
                return 0;\n
            }\n
            if (!*(&v0))\n
                goto LABEL_404d01;\n
            v7 = *(v6);\n
            if (v7 == v4)\n
            {\n
LABEL_404bf0:\n
                v9 = -(v8);\n
LABEL_404bf3:\n
                cgc_mutex_lock(&ac_mutex);\n
                v10 = cgc_realloc(ac_buffer, (ac_idx + v9 + 1));\n
                if (v10)\n
                {\n
                    ac_buffer = v10;\n
                    cgc_memcpy(v10 + ac_idx, &v1, v9);\n
                    v11 = ac_idx + v9;\n
                    ac_idx = ac_idx + v9;\n
                    *((ac_buffer + v11)) = 0;\n
                    cgc_mutex_unlock(&ac_mutex);\n
                    if (v9 > 1)\n
                    {\n
                        v12 = ac_queue_count;\n
                        if (ac_queue_count >= 0x400)\n
                        {\n
                            do\n
                            {\n
                                cgc_filaments_yield();\n
                                v12 = ac_queue_count;\n
                            } while (ac_queue_count > 1023);\n
                        }\n
                        v15 = ac_queue_tail;\n
                        ac_queue_tail = &ac_queue_tail->padding_0[1] & 1023;\n
                        ac_queue_count = v12 + 1;\n
                        v13 = ac_idx;\n
                        v16 = v15 * 16;\n
                        *((v16 + &ac_queue)) = ac_idx - v9;\n
                        v17 = ac_idx - 1;\n
                        *((v16 + &g_40a1c8)) = v17;\n
                        v14 = ac_buffer;\n
                        if (*((ac_buffer + v17)) != v4)\n
                            goto LABEL_404b87;\n
                    }\n
                    else\n
                    {\n
                        v13 = ac_idx;\n
                        v14 = ac_buffer;\n
                        if (*((ac_buffer + ac_idx - 1)) != v4)\n
                            goto LABEL_404b87;\n
                    }\n
                    if (ac_queue_count)\n
                    {\n
                        do\n
                        {\n
                            cgc_filaments_yield();\n
                        } while (ac_queue_count);\n
                        v14 = ac_buffer;\n
                        v13 = ac_idx;\n
                    }\n
                    ac_buffer = 0;\n
                    *((v13 + v14 - 1)) = 0;\n
                    return v14;\n
                }\n
                goto LABEL_404d01;\n
            }\n
            if (!cgc_isalpha(v7))\n
                goto LABEL_404bf0;\n
            v8 -= 1;\n
            v6 = &v2;\n
        } while (v8 != -33);\n
        v9 = 32;\n
        goto LABEL_404bf3;\n
    }\n
}\n
", "4213542:sub_404b26": null, "4213742:sub_404bee": null, "4213915:sub_404c9b": null, "4214080:cgc__find_memo_id": "typedef struct struct_0 {\n
    char field_-ffffffffffbf1e24;\n
    char field_-ffffffffffbf1e23;\n
    char field_-ffffffffffbf1e22;\n
    char field_-ffffffffffbf1e21;\n
    char padding_-ffffffffffbf1e20[18446744073709551616];\n
    char field_40e1e0;\n
} struct_0;\n
\n
extern char cgc_g_memo_ids;\n
\n
long long cgc__find_memo_id()\n
{\n
    struct_0 *v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = 4;\n
    while (true)\n
    {\n
        if (!*((v1 - -4252124)))\n
        {\n
            return v1 - 4;\n
        }\n
        else if (!*((v1 - -4252125)))\n
        {\n
            return v1 - 3;\n
        }\n
        else if (!*((v1 - -4252126)))\n
        {\n
            return v1 - 2;\n
        }\n
        else if (!*((v1 - -4252127)))\n
        {\n
            v1 -= 1;\n
            return v1;\n
        }\n
        else if (!(&cgc_g_memo_ids)[v1])\n
        {\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 += 5;\n
            if (v1 == 504)\n
                return 4294967295;\n
        }\n
    }\n
}\n
", "4214168:sub_404d98": null, "4214176:cgc_add_memo": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char padding_34[4];\n
    unsigned long long field_38;\n
    char padding_40[16];\n
    struct struct_1 *field_50;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char field_-ffffffffffbf1e24;\n
    char field_-ffffffffffbf1e23;\n
    char field_-ffffffffffbf1e22;\n
    char field_-ffffffffffbf1e21;\n
    char padding_-ffffffffffbf1e20[18446744073709551616];\n
    char field_40e1e0;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4252128];\n
    char field_40e1e0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern char cgc_g_memo_ids;\n
extern unsigned int cgc_g_num_memos;\n
extern struct_0 *cgc_memos;\n
\n
long long cgc_add_memo(unsigned long a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0;  // [bp-0x1018]\n
    struct_2 *v2;  // rbx\n
    struct_0 *v3;  // rax\n
    struct_0 *v4;  // r14\n
    unsigned long long v5;  // rax\n
    struct_4 *v6;  // eax, Other Possible Types: unsigned int, unsigned long\n
    struct_3 *v7;  // rax\n
    struct_0 *v8;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v9;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    v2 = cgc_new_memo(cgc_default_view_memo, cgc_default_update_memo, cgc_default_delete_memo);\n
    v3 = cgc_malloc(16);\n
    if (!v3)\n
    {\n
        v2->field_50(v2);\n
    }\n
    else\n
    {\n
        v4 = v3;\n
        cgc_fdprintf(1, \"subject? \", cgc_default_delete_memo, a3, a4);\n
        a2 = 0x1000;\n
        if (cgc_read_until(0, &v0, 0x1000, 10) >= 0 && cgc_strlen(&v0) <= 31)\n
        {\n
            cgc_strcpy(&v2->padding_4, &v0);\n
            cgc_fdprintf(1, \"year? \", 0x1000, 10, a4);\n
            if (cgc_read_until(0, &v0, 0x1000, 10) >= 0)\n
            {\n
                v2->field_24 = cgc_strtol(&v0, NULL, 10);\n
                cgc_fdprintf(1, \"month? \", 10, 10, a4);\n
                if (cgc_read_until(0, &v0, 0x1000, 10) >= 0)\n
                {\n
                    v2->field_28 = cgc_strtol(&v0, NULL, 10);\n
                    cgc_fdprintf(1, \"date? \", 10, 10, a4);\n
                    if (cgc_read_until(0, &v0, 0x1000, 10) >= 0)\n
                    {\n
                        v2->field_2c = cgc_strtol(&v0, NULL, 10);\n
                        cgc_fdprintf(1, \"priority? \", 10, 10, a4);\n
                        v9 = 10;\n
                        if (cgc_read_until(0, &v0, 0x1000, 10) >= 0)\n
                        {\n
                            a2 = 10;\n
                            v2->field_30 = cgc_strtol(&v0, NULL, 10);\n
                            cgc_fdprintf(1, \"body? \", 10, 10, a4);\n
                            v5 = cgc_ac_read(0, 10);\n
                            v2->field_38 = v5;\n
                            if (v5 && cgc_g_num_memos <= 499)\n
                            {\n
                                v6 = 4;\n
                                do\n
                                {\n
                                    if (!*((v6 - -4252124)))\n
                                    {\n
                                        v6 = v6 - 4;\n
                                        goto LABEL_404fd7;\n
                                    }\n
                                    if (!*((v6 - -4252125)))\n
                                    {\n
                                        v6 = v6 - 3;\n
                                        goto LABEL_404fd7;\n
                                    }\n
                                    if (!*((v6 - -4252126)))\n
                                    {\n
                                        v6 = v6 - 2;\n
                                        goto LABEL_404fd7;\n
                                    }\n
                                    if (!*((v6 - -4252127)))\n
                                    {\n
                                        v6 = v6 - 1;\n
                                        goto LABEL_404fd7;\n
                                    }\n
                                    if (!(&cgc_g_memo_ids)[v6])\n
                                        goto LABEL_404fd7;\n
                                    v6 += 5;\n
                                } while (v6 != 504);\n
                                v6 = -1;\n
LABEL_404fd7:\n
                                v2->field_0 = v6;\n
                                if (!cgc_validate_memo(v2))\n
                                {\n
                                    v7 = v2->field_0;\n
                                    cgc_g_num_memos = cgc_g_num_memos + 1;\n
                                    *((v7 + &cgc_g_memo_ids)) = 1;\n
                                    v4->field_0 = v2;\n
                                    v8 = cgc_memos;\n
                                    if (!cgc_memos)\n
                                    {\n
                                        cgc_memos = v4;\n
                                        v4->field_8 = 0;\n
                                    }\n
                                    else\n
                                    {\n
                                        do\n
                                        {\n
                                            v9 = v8;\n
                                            v8 = *((v8 + 8));\n
                                        } while (v8);\n
                                        v4->field_8 = 0;\n
                                        *((v9 + 8)) = v4;\n
                                    }\n
                                    v10 = cgc_fdprintf(1, \"id: %d created.\\n
\", v2->field_0, v9, a4);\n
                                    return v10;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v2->field_50(v2);\n
        cgc_free(v4);\n
    }\n
    v10 = cgc_fdprintf(2, \"created failed.\\n
\", a2, 10, a4);\n
    return v10;\n
}\n
", "4214897:sub_405071": null, "4214912:cgc_update_memo": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 *cgc_memos;\n
\n
long long cgc_update_memo(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v2;  // rax\n
\n
    v1 = cgc_memos;\n
    while (true)\n
    {\n
        if (!v1)\n
            return v2;\n
        v2 = *(v1);\n
        if (v2 && *(v2) == a0)\n
            goto *((*(v1) + 72));\n
        v1 = *((v1 + 8));\n
    }\n
}\n
", "4214921:sub_405089": null, "4214956:sub_4050ac": null, "4214960:cgc_remove_memo": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[4252128];\n
    char field_40e1e0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[76];\n
    struct struct_0 *field_50;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char cgc_g_memo_ids;\n
extern unsigned int cgc_g_num_memos;\n
extern struct_2 *cgc_memos;\n
\n
long long cgc_remove_memo(struct_3 *a0)\n
{\n
    struct_2 *v1;  // rbx, Other Possible Types: unsigned long\n
    struct_2 *v2;  // rdx, Other Possible Types: unsigned long\n
    struct_2 *v3;  // rax\n
    unsigned int *v4;  // rdx\n
    struct_4 *v5;  // rcx\n
\n
    v1 = cgc_memos;\n
    if (!cgc_memos)\n
        return v3;\n
    v2 = cgc_memos;\n
    while (true)\n
    {\n
        v3 = v2;\n
        v4 = *(v2);\n
        if (v4 && *(v4) == a0)\n
            break;\n
        v2 = v3->field_8;\n
        if (!v2)\n
            return v3;\n
    }\n
    *((a0 + &cgc_g_memo_ids)) = 0;\n
    cgc_g_num_memos = cgc_g_num_memos - 1;\n
    if (v3 != cgc_memos)\n
    {\n
        v5->field_8 = v3->field_8;\n
        v1 = v3;\n
    }\n
    else\n
    {\n
        cgc_memos = cgc_memos->field_8;\n
    }\n
    v3->field_0->field_50(v3->field_0);\n
    return cgc_free(v1);\n
}\n
", "4214978:sub_4050c2": null, "4215086:sub_40512e": null, "4215088:cgc_view_memo": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 *cgc_memos;\n
\n
long long cgc_view_memo(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx, Other Possible Types: unsigned long\n
    unsigned int *v2;  // rax\n
\n
    v1 = cgc_memos;\n
    while (true)\n
    {\n
        if (!v1)\n
            return v2;\n
        v2 = *(v1);\n
        if (v2 && *(v2) == a0)\n
            goto *((*(v1) + 64));\n
        v1 = *((v1 + 8));\n
    }\n
}\n
", "4215097:sub_405139": null, "4215132:sub_40515c": null, "4215136:cgc_quit": "long long cgc_quit(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // r9\n
\n
    v0 = v2;\n
    cgc_fdprintf(1, \"bye!\\n
\", a2, a3, a4);\n
    cgc__terminate(1);\n
    return cgc_menu(1, \"bye!\\n
\", a2, a3, a4, v3);\n
}\n
", "4215168:cgc_menu": "long long cgc_menu(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    cgc_fdprintf(1, \"======================\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 1. New memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 2. View memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 3. Update memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 4. Delete memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 5. Add custom AC word\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 6. Quit\\n
\", a2, a3, a4);\n
    return cgc_fdprintf(1, \"======================\\n
\", a2, a3, a4);\n
}\n
", "4215321:sub_405219": null, "4215328:main": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[4252128];\n
    char field_40e1e0;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[68];\n
    struct struct_0 *field_48;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    char padding_4[60];\n
    struct struct_0 *field_40;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[60];\n
    struct struct_0 *field_40;\n
    struct struct_0 *field_48;\n
    struct struct_0 *field_50;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char cgc_g_memo_ids;\n
extern unsigned int cgc_g_num_memos;\n
extern struct_2 *cgc_memos;\n
\n
int main(unsigned long a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x7c]\n
    char v1;  // [bp-0x78]\n
    char v2;  // [bp-0x58]\n
    struct_2 *v6;  // rdx, Other Possible Types: unsigned long\n
    struct_4 *v7;  // rax\n
    struct_3 *v9;  // rdi\n
    struct_2 *v10;  // rcx, Other Possible Types: unsigned long\n
    struct_2 *v11;  // rsi, Other Possible Types: unsigned long\n
    struct_5 *v12;  // rdi\n
    struct_2 *v13;  // rcx, Other Possible Types: unsigned long\n
    struct_2 *v14;  // rcx\n
    unsigned int *v15;  // rsi\n
    struct_2 *v16;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v17;  // r9\n
\n
    cgc_filaments_init();\n
    cgc_filaments_new(cgc_ac_process, 0);\n
    cgc_fdprintf(1, \"====== 3M v0.2 ======\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"======================\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 1. New memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 2. View memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 3. Update memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 4. Delete memo\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 5. Add custom AC word\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \" 6. Quit\\n
\", a2, a3, a4);\n
    cgc_fdprintf(1, \"======================\\n
\", a2, a3, a4);\n
    cgc_ac_init();\n
    if (cgc_read_until(0, &v0, 4, 10) < 0)\n
        return 0;\n
    do\n
    {\n
        switch (cgc_strtol(&v0, NULL, 10))\n
        {\n
        case 1:\n
            cgc_add_memo(0, 0, 10, 10, a4);\n
            break;\n
        case 2:\n
            cgc_fdprintf(1, \"id? \", 10, 10, a4);\n
            if (cgc_read_until(0, &v0, 4, 10) >= 0 && v0)\n
            {\n
                for (v13 = cgc_memos; v13; v13 = *((v13 + 8)))\n
                {\n
                    v12 = *(v13);\n
                    if (v12 && v12->field_0 == cgc_strtol(&v0, NULL, 10))\n
                    {\n
                        v12->field_40();\n
                        break;\n
                    }\n
                }\n
            }\n
        case 3:\n
            cgc_fdprintf(1, \"id? \", 10, 10, a4);\n
            if (cgc_read_until(0, &v0, 4, 10) >= 0)\n
            {\n
                for (v10 = cgc_memos; v10; v10 = *((v10 + 8)))\n
                {\n
                    v9 = *(v10);\n
                    if (v9 && v9->field_0 == cgc_strtol(&v0, NULL, 10))\n
                    {\n
                        v9->field_48();\n
                        break;\n
                    }\n
                }\n
            }\n
        case 4:\n
            cgc_fdprintf(1, \"id? \", 10, 10, a4);\n
            if (cgc_read_until(0, &v0, 4, 10) >= 0)\n
            {\n
                v6 = 10;\n
                v7 = cgc_strtol(&v0, NULL, 10);\n
                v16 = cgc_memos;\n
                if (cgc_memos)\n
                {\n
                    v11 = cgc_memos;\n
                    do\n
                    {\n
                        v14 = v11;\n
                        v15 = *(v11);\n
                        if (v15 && *(v15) == v7)\n
                        {\n
                            *((v7 + &cgc_g_memo_ids)) = 0;\n
                            cgc_g_num_memos = cgc_g_num_memos - 1;\n
                            if (v14 != cgc_memos)\n
                            {\n
                                *((v6 + 8)) = v14->field_8;\n
                                v16 = v14;\n
                            }\n
                            else\n
                            {\n
                                cgc_memos = cgc_memos->field_8;\n
                            }\n
                            v14->field_0->field_50(v14->field_0);\n
                            cgc_free(v16);\n
                            break;\n
                        }\n
                        v11 = v14->field_8;\n
                        v6 = v14;\n
                    } while (v11);\n
                }\n
            }\n
        case 5:\n
            cgc_memset(&v2, 0, 0x20);\n
            cgc_memset(&v1, 0, 0x20);\n
            cgc_fdprintf(1, \"typo? \", 32, 10, a4);\n
            if (cgc_read_until(0, &v2, 32, 10) >= 0)\n
            {\n
                cgc_fdprintf(1, \"correct? \", 32, 10, a4);\n
                if (cgc_read_until(0, &v1, 32, 10) >= 0)\n
                {\n
                    cgc_ac_add_custom(&v2, &v1);\n
                    break;\n
                }\n
            }\n
        case 6:\n
            cgc_fdprintf(1, \"bye!\\n
\", 10, 10, a4);\n
            cgc__terminate(1);\n
            return cgc_new_memo(1, \"bye!\\n
\", 10, 10, a4, v17);\n
        default:\n
            cgc_fdprintf(1, \"invalid menu, try again.\\n
\", 10, 10, a4);\n
            break;\n
        }\n
    } while (cgc_read_until(0, &v0, 4, 10) >= 0);\n
    return 0;\n
}\n
", "4215770:sub_4053da": null, "4215876:sub_405444": null, "4216304:cgc_new_memo": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    uint128_t field_24;\n
    char padding_34[4];\n
    unsigned long long field_38;\n
    unsigned long long field_40;\n
    unsigned long long field_48;\n
    unsigned long long field_50;\n
} struct_0;\n
\n
extern char g_406355;\n
\n
long long cgc_new_memo(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx\n
    char *v4;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(88);\n
    if (v3)\n
    {\n
        v3->field_0 = -1;\n
        cgc_memset(&v3->padding_4, 0, 0x20);\n
        *(&(&v3->padding_4)[1]) = 79228162532711081671548471218;\n
        v4 = cgc_malloc(16);\n
        *((&v3->field_24 + 8)) = v4;\n
        cgc_strcpy(v4, &g_406355);\n
        *(&v3->padding_34) = a0;\n
        v3->field_38 = a1;\n
        v3->field_40 = a2;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4216431:sub_40566f": null, "4216432:cgc_default_view_memo": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char padding_34[4];\n
    struct struct_1 *field_38;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char g_4064a4;\n
\n
long long cgc_default_view_memo(struct_0 *a0, unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    char v1;  // [bp-0x32], Other Possible Types: unsigned short\n
    unsigned long v3;  // rax\n
    unsigned int *v5;  // rax\n
    unsigned long long v6;  // rax\n
    char *v7;  // r15, Other Possible Types: unsigned long\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (!a0)\n
        return 6;\n
    cgc_fdprintf(1, \"[%d] %s\\n
\", a0->field_0, &a0->padding_4, a4);\n
    cgc_fdprintf(1, \"Date: %04d-%02d-%02d\\n
\", a0->field_24, a0->field_28, a0->field_2c);\n
    cgc_fdprintf(1, \"Priority: \", a2, a3, a4);\n
    v5 = a0->field_30;\n
    if (v5 <= 2)\n
        cgc_fdprintf(1, &(&g_4064a4)[*((&g_4064a4 + 0x4 * v5))], a2, &g_4064a4, a4);\n
    cgc_fdprintf(1, \"------------------------------\\n
\", a2, a3, a4);\n
    v6 = cgc_strlen(a0->field_38);\n
    if (v6)\n
    {\n
        v7 = 0;\n
        do\n
        {\n
            if (!((2369637129 * v7 >> 36) * -29 + v7))\n
                cgc_fdprintf(1, \"\\n
\", a2, a3, a4);\n
            v1 = a0->field_38[v7].field_0;\n
            cgc_fdprintf(1, \"%s\", &v1, a3, a4);\n
            v7 += 1;\n
        } while (v6 != v7);\n
    }\n
    cgc_fdprintf(1, \"\\n
\", a2, a3, a4);\n
    return 0;\n
}\n
", "4216630:sub_405736": null, "4216763:sub_4057bb": null, "4216768:cgc_default_update_memo": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char padding_34[4];\n
    unsigned long long field_38;\n
    uint128_t field_40;\n
    unsigned long long field_50;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    char padding_28[16];\n
    unsigned long long field_38;\n
    uint128_t field_40;\n
    struct struct_0 *field_50;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char g_406355;\n
\n
long long cgc_default_update_memo(struct_2 *a0, unsigned long a1, unsigned long a2, unsigned int a3, unsigned int a4)\n
{\n
    int v0;  // [bp-0x1048], Other Possible Types: unsigned long\n
    char v1;  // [bp-0x1038]\n
    unsigned long long v3;  // rbp\n
    struct_1 *v4;  // rax\n
    unsigned long v5;  // r13\n
    struct_1 *v6;  // rbx\n
    unsigned long v7;  // r15\n
    char *v8;  // rax\n
    char *v9;  // rsi\n
    unsigned long v10;  // rax, Other Possible Types: unsigned int\n
    unsigned long v11;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax, Other Possible Types: unsigned int\n
    unsigned long v13;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v14;  // rax, Other Possible Types: unsigned int\n
    unsigned long v15;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v16;  // rax, Other Possible Types: unsigned int\n
    char *v17;  // rax\n
    char *v19;  // rax\n
    unsigned long long v20;  // rax\n
\n
    if (!a0)\n
        return 6;\n
    *(&v0) = a0->field_40;\n
    v3 = a0->field_50;\n
    v4 = cgc_malloc(88);\n
    if (!v4)\n
        return 6;\n
    v6 = v4;\n
    v4->field_0 = -1;\n
    v7 = &v4->padding_4;\n
    cgc_memset(v7, 0, 0x20);\n
    *(&v4->field_24) = 79228162532711081671548471218;\n
    v8 = cgc_malloc(16);\n
    v6->field_38 = v8;\n
    cgc_strcpy(v8, &g_406355);\n
    v6->field_40 = v0;\n
    v6->field_50 = v3;\n
    cgc_fdprintf(1, \"subject? \", 32, a3, a4);\n
    if (cgc_read_until(0, &v1, 0x1000, 10) < 0)\n
    {\n
        return 6;\n
    }\n
    else if (cgc_strlen(&v1) > 31)\n
    {\n
        return 6;\n
    }\n
    else\n
    {\n
        v9 = (!v1 ? &v1 : &a0->padding_4);\n
        cgc_strcpy(v7, v9);\n
        cgc_fdprintf(1, \"year? \", 0x1000, 10, a4);\n
        if (cgc_read_until(0, &v1, 0x1000, 10) < 0)\n
            return 6;\n
        if (!v1)\n
            v10 = a0->field_24;\n
        else\n
            v10 = cgc_strtol(&v1, NULL, 10);\n
        v6->field_24 = v10;\n
        cgc_fdprintf(1, \"month? \", 10, 10, a4);\n
        v11 = 0x1000;\n
        if (cgc_read_until(0, &v1, 0x1000, 10) < 0)\n
            return 6;\n
        if (!v1)\n
        {\n
            v12 = a0->field_28;\n
        }\n
        else\n
        {\n
            v11 = 10;\n
            v12 = cgc_strtol(&v1, NULL, 10);\n
        }\n
        *(&v6->padding_28[0]) = v12;\n
        cgc_fdprintf(1, \"date? \", v11, 10, a4);\n
        v13 = 0x1000;\n
        if (cgc_read_until(0, &v1, 0x1000, 10) < 0)\n
            return 6;\n
        if (!v1)\n
        {\n
            v14 = a0->field_2c;\n
        }\n
        else\n
        {\n
            v13 = 10;\n
            v14 = cgc_strtol(&v1, NULL, 10);\n
        }\n
        *(&v6->padding_28[4]) = v14;\n
        cgc_fdprintf(1, \"priority? \", v13, 10, a4);\n
        v15 = 0x1000;\n
        if (cgc_read_until(0, &v1, 0x1000, 10) < 0)\n
            return 6;\n
        if (!v1)\n
        {\n
            v16 = a0->field_30;\n
        }\n
        else\n
        {\n
            v15 = 10;\n
            v16 = cgc_strtol(&v1, NULL, 10);\n
        }\n
        *(&v6->padding_28[8]) = v16;\n
        cgc_fdprintf(1, \"body? \", v15, 10, a4);\n
        v17 = cgc_readall_until(0, 10);\n
        if (!v17)\n
            return 6;\n
        if (!*(v17))\n
        {\n
            v6->field_38 = cgc_strdup(a0->field_38);\n
        }\n
        else\n
        {\n
            v0 = v6->field_38;\n
            v19 = cgc_realloc(v0, cgc_strlen(v17) + 1);\n
            if (!v19)\n
                return 6;\n
            v6->field_38 = v19;\n
            cgc_strcpy(v19, v17);\n
        }\n
        v6->field_0 = a0->field_0;\n
        v5 = cgc_validate_memo(v6);\n
        if (!v5)\n
        {\n
            cgc_memcpy(v9, v7, 0x20);\n
            cgc_memcpy(&a0->field_24, &v6->field_24, 0xc);\n
            v20 = a0->field_38;\n
            a0->field_38 = v6->field_38;\n
            v6->field_38 = v20;\n
            a0->field_30 = *(&v6->padding_28[8]);\n
            v6->field_50(v6);\n
            return 0;\n
        }\n
        return v5;\n
    }\n
}\n
", "4217561:sub_405ad9": null, "4217568:cgc_validate_memo": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char padding_34[4];\n
    struct struct_1 *field_38;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_validate_memo(struct_0 *a0)\n
{\n
    unsigned long long v0;  // [bp-0x148]\n
    unsigned long v3;  // r14\n
    void* v4;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v5;  // rax\n
    char *v7;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v8;  // r12\n
\n
    if (!a0)\n
    {\n
        return 6;\n
    }\n
    else if (a0->field_0 > 499)\n
    {\n
        return 5;\n
    }\n
    else\n
    {\n
        v3 = &a0->padding_4;\n
        if (cgc_strlen(v3))\n
        {\n
            v4 = 0;\n
            do\n
            {\n
                if (!cgc_isalnum(a0->padding_4[v4]) && !cgc_isspace(a0->padding_4[v4]))\n
                    return 1;\n
                v4 += 1;\n
            } while (cgc_strlen(v3) > v4);\n
        }\n
        if (-2501 + a0->field_24 < -531)\n
        {\n
            return 2;\n
        }\n
        else if (a0->field_28 - 13 < -12)\n
        {\n
            return 2;\n
        }\n
        else if (a0->field_2c - 32 < -31)\n
        {\n
            return 2;\n
        }\n
        else if (a0->field_30 > 2)\n
        {\n
            return 3;\n
        }\n
        else\n
        {\n
            v5 = cgc_strlen(a0->field_38);\n
            if (!v5)\n
                return 0;\n
            v7 = 0;\n
            while (true)\n
            {\n
                v8 = a0->field_38[v7].field_0;\n
                if (!cgc_isalnum(v8) && !cgc_isspace(v8))\n
                {\n
                    if (v8 > 59)\n
                        return 4;\n
                    v0 = 0xc00508600000000;\n
                    if (!((*(&v0 + ((a0->field_38[v7].field_0 & 63) >> 3)) >> (a0->field_38[v7].field_0 & 63 & 7)) & 1))\n
                        return 4;\n
                }\n
                v7 += 1;\n
                if (v5 == v7)\n
                    return 0;\n
            }\n
        }\n
    }\n
}\n
", "4217623:sub_405b17": null, "4217796:sub_405bc4": null, "4217887:sub_405c1f": null, "4217888:cgc_default_delete_memo": "typedef struct struct_0 {\n
    char padding_0[56];\n
    unsigned int field_38;\n
} struct_0;\n
\n
long long cgc_default_delete_memo(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rbx\n
    unsigned long long v3;  // rbx\n
\n
    if (a0)\n
    {\n
        v0 = v2;\n
        cgc_free(*(&a0->field_38));\n
        cgc_free(a0);\n
        v3 = v0;\n
        return 0;\n
    }\n
    return 6;\n
}\n
", "4217924:sub_405c44": null, "4217936:cgc_read_until": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_read_until(unsigned long long a0, struct_0 *a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    int tmp_3;  // tmp #3\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
    unsigned long v4;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v5;  // rax\n
    struct_0 *v6;  // rbp, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a2)\n
    {\n
        v4 = a2 - 1;\n
        v6 = a1;\n
        do\n
        {\n
            if (cgc___filaments_receive(a0, v6, 1, &v0))\n
            {\n
LABEL_405cbf:\n
                return 4294967295;\n
            }\n
            if (!v0)\n
                goto LABEL_405cbf;\n
            v3 = v6 + 1;\n
            tmp_3 = v4;\n
            v4 -= 1;\n
            *(&a3) = tmp_3 < 1;\n
            if (*(v6) == a3)\n
                break;\n
            continue;\n
            v6 = v3;\n
        } while (!a3);\n
    }\n
    *((v3 - 1)) = 0;\n
    v5 = v3 - v6;\n
    return v5;\n
}\n
", "4218067:sub_405cd3": null, "4218080:cgc_readall_until": "typedef struct struct_0 {\n
    char padding_0[4252640];\n
    char field_40e3e0;\n
} struct_0;\n
\n
extern char cgc_readall_until.buf;\n
\n
long long cgc_readall_until(unsigned long long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v4;  // rbx\n
    char *v5;  // rbp\n
\n
    v0 = v2;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v4 = v3;\n
        v5 = &(&cgc_readall_until.buf)[v3];\n
        if (cgc___filaments_receive(a0, v5, 1, &v0))\n
        {\n
LABEL_405d3e:\n
            return 0;\n
        }\n
        if (!v0)\n
            goto LABEL_405d3e;\n
        if (*(v5) == a1)\n
        {\n
LABEL_405d37:\n
            *((v4 + &cgc_readall_until.buf)) = 0;\n
            return &cgc_readall_until.buf;\n
        }\n
        v3 += 1;\n
        if (v3 == 0x80000)\n
            goto LABEL_405d37;\n
    }\n
}\n
", "4218196:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc_setjmp": null, "5242896:cgc_fdwait": null, "5242904:cgc__terminate": null, "5242912:cgc_transmit": null, "5242920:cgc_random": null, "5242928:cgc_allocate": null, "5242936:cgc_longjmp": null, "5242944:cgc_deallocate": null, "5242952:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}