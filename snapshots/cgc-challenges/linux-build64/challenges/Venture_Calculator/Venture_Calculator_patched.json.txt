{"4206592:_init": "extern struct_0 *g_40c9c0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40c9c0;\n
    if (g_40c9c0)\n
        v1 = g_40c9c0();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40c9d8;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40c9d8;\n
    goto *(4245984);\n
}\n
", "4206636:sub_40302c": null, "4206640:_Znam": "// attributes: PLT stub\n
int operator new[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4206656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4206672:memcpy": "// attributes: PLT stub\n
void* memcpy(void* to, void* from, unsigned int size)\n
{\n
    return ::libc.so.0::memcpy(to, from, size);\n
}\n
", "4206688:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4206704:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4206720:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4206736:_Znwm": "// attributes: PLT stub\n
int operator new(unsigned long a0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4206752:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4206768:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned long a0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4206784:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4206800:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4245928);\n
}\n
", "4206816:_start": "long long _start()\n
{\n
    unsigned long v0;  // [bp+0x0], Other Possible Types: char\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206853:sub_403105": null, "4206854:sub_403106": null, "4206864:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40c9b8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206905:sub_403139": null, "4206912:register_tm_clones": "extern unsigned long long g_40c9c8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206969:sub_403179": null, "4206976:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40c9a8;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40c9a8)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4207029:sub_4031b5": null, "4207033:sub_4031b9": null, "4207040:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4207049:sub_4031c9": null, "4207056:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4207114:sub_40320a": null, "4207120:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4207139:sub_403223": null, "4207152:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4207171:sub_403243": null, "4207184:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4207203:sub_403263": null, "4207216:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4207235:sub_403283": null, "4207248:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4207267:sub_4032a3": null, "4207280:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4207299:sub_4032c3": null, "4207312:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4207331:sub_4032e3": null, "4207344:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4207363:sub_403303": null, "4207376:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4207395:sub_403323": null, "4207408:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4207427:sub_403343": null, "4207440:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4207485:sub_40337d": null, "4207488:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207512:sub_403398": null, "4207520:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4207570:sub_4033d2": null, "4207584:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207608:sub_4033f8": null, "4207616:__cxa_pure_virtual": "long long __cxa_pure_virtual()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate(v3);\n
    return cgc_exit(v3, v4, v5, v6, v7, v8);\n
}\n
", "4207632:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4207648:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v3;  // r8\n
    void* v4;  // r15, Other Possible Types: unsigned long long, unsigned long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // r13\n
    unsigned long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r13, Other Possible Types: unsigned long long\n
    void* v14;  // r14, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        v6 = a0->padding_c;\n
        v13 = v6 - v3;\n
        if (v5 && v13)\n
        {\n
            v8 = v13 & 3;\n
            if (~(v3) + v6 < 3)\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v9 = v13 & -4;\n
                v10 = &a0->padding_0[v3 + 35];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v10 + v11 - 3)) = v5[*((v10 + v11 - 3))];\n
                    *((v10 + v11 - 2)) = v5[*((v10 + v11 - 2))];\n
                    *((v10 + v11 - 1)) = v5[*((v10 + v11 - 1))];\n
                    *((v10 + v11)) = v5[*((v10 + v11))];\n
                    v11 += 4;\n
                } while (v9 != v11);\n
            }\n
            if (v8)\n
            {\n
                v12 = &a0->padding_0[v3 + v11 + 32];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v12 + v11)) = v5[*((v12 + v11))];\n
                    v11 += 1;\n
                } while (v8 != v11);\n
            }\n
            v13 = (a0->padding_c - a0->field_8);\n
        }\n
        v0 = a0;\n
        v4 = 0;\n
        v14 = 0;\n
        do\n
        {\n
            if (v13 <= v14)\n
            {\n
LABEL_403555:\n
                a0 = v0;\n
                goto LABEL_40355a;\n
            }\n
            v14 += *(&v1);\n
        } while (!cgc_transmit(a0, v11));\n
        v4 = 4294967295;\n
        goto LABEL_403555;\n
    }\n
LABEL_40355a:\n
    *((a0 + 8)) = 0;\n
    return v4;\n
}\n
", "4207988:sub_403574": null, "4208000:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int *v1;  // [bp-0x40]\n
    char v2;  // [bp-0x38]\n
    struct_0 *v4;  // r15\n
    unsigned long long v5;  // r8\n
    unsigned int *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rbx\n
    char *v12;  // rax\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    void* v14;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v5 = a0->field_8;\n
    if (v5 == -1)\n
    {\n
        v4->field_8 = -(a1 < 1);\n
        v4->field_c = 0;\n
        return -(a1 < 1);\n
    }\n
    if (a0->field_4 == 1)\n
    {\n
        v6 = &a0->field_c;\n
    }\n
    else\n
    {\n
        v7 = a0->field_10;\n
        v8 = a0->field_c;\n
        v13 = v8 - v5;\n
        v0 = a1;\n
        if (v7 && v13)\n
        {\n
            v10 = v13 & 3;\n
            if (~(v5) + v8 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v11 = v13 & -4;\n
                a0 = &a0->padding_0[v5 + 35];\n
                a1 = 0;\n
                do\n
                {\n
                    *((a0 + a1 - 3)) = v7[*((a0 + a1 - 3))];\n
                    *((a0 + a1 - 2)) = v7[*((a0 + a1 - 2))];\n
                    *((a0 + a1 - 1)) = v7[*((a0 + a1 - 1))];\n
                    *((a0 + a1)) = v7[*((a0 + a1))];\n
                    a1 += 4;\n
                } while (v11 != a1);\n
            }\n
            if (v10)\n
            {\n
                v12 = &v4->padding_0[v5 + a1 + 32];\n
                a1 = 0;\n
                do\n
                {\n
                    v12[a1] = v7[v12[a1]];\n
                    a1 += 1;\n
                } while (v10 != a1);\n
            }\n
            v13 = v4->field_c - v4->field_8;\n
        }\n
        v1 = &v4->field_c;\n
        v14 = 0;\n
        while (v13 > v14)\n
        {\n
            v14 += *(&v2);\n
            if (cgc_transmit(a0, a1))\n
                break;\n
        }\n
        a1 = v0;\n
        v6 = v1;\n
    }\n
    *(v6) = 0;\n
}\n
", "4208350:sub_4036de": null, "4208352:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4208421:sub_403725": null, "4208432:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v3;  // r12\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v13;  // eax\n
    unsigned long long v15;  // r8\n
    char *v16;  // rax\n
    unsigned long v17;  // rbp\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v11 = a2->field_8;\n
    if (v11 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v10);\n
        if (!v6)\n
        {\n
            v7 = *(&v0);\n
            if (v7)\n
            {\n
                *(&a2->padding_c[0]) = v7;\n
                v10 = v7 * 0x100000000;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rax<8>, 0x20<8>), Shl(rax<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v10 = a2->field_18;\n
                    if (v10)\n
                    {\n
                        a2 = v7;\n
                        v9 = v7 & 3;\n
                        if (v7 + 1 < 3)\n
                        {\n
                            a1 = 0;\n
                        }\n
                        else\n
                        {\n
                            a2 = &a2[-1 * v9];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[a1] = *((v10 + v3[1].padding_0[a1]));\n
                                v3[1].padding_0[1 + a1] = *((v10 + v3[1].padding_0[1 + a1]));\n
                                v3[1].padding_0[2 + a1] = *((v10 + v3[1].padding_0[2 + a1]));\n
                                v3[1].padding_0[3 + a1] = *((v10 + v3[1].padding_0[3 + a1]));\n
                                a1 += 4;\n
                            } while (a2 != a1);\n
                        }\n
                        if (v9)\n
                        {\n
                            a2 = &v3->padding_0[a1 + 32];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                a2[a1] = *((v10 + a2[a1]));\n
                                a1 += 1;\n
                            } while (v9 != a1);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = v3->field_8;\n
    }\n
    if (v11 != -1)\n
    {\n
        v12 = *(&v3->padding_c[0]) - v11;\n
        if (v12 > v4)\n
            v12 = v4;\n
        v0 = v12;\n
        a1 = &v3->padding_0[v11 + 32];\n
        a2 = v12;\n
        cgc_memcpy();\n
        v13 = v3->field_8 + v12;\n
        v3->field_8 = v13;\n
        if (v13 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v12 < v4))\n
            goto LABEL_4039b4;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        if (0 >= v4)\n
        {\n
LABEL_4039b4:\n
            return v12;\n
        }\n
    }\n
    v1 = v5 + 3;\n
    while (true)\n
    {\n
        v10 = cgc_receive(a0, a1, a2, v10);\n
        if (v10)\n
            return -1;\n
        v15 = v0;\n
        if (!v15)\n
            return -1;\n
        v16 = v3->field_18;\n
        if (v16)\n
        {\n
            a2 = v15 & 3;\n
            if (v15 - 1 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v17 = v1 + v12;\n
                a1 = 0;\n
                do\n
                {\n
                    *((v17 + a1 - 3)) = v16[*((v17 + a1 - 3))];\n
                    *((v17 + a1 - 2)) = v16[*((v17 + a1 - 2))];\n
                    *((v17 + a1 - 1)) = v16[*((v17 + a1 - 1))];\n
                    *((v17 + a1)) = v16[*((v17 + a1))];\n
                    a1 += 4;\n
                } while ((v15 & -4) != a1);\n
            }\n
            if (a2)\n
            {\n
                a1 = a1 + v12 + v5;\n
                a0 = 0;\n
                do\n
                {\n
                    a1[a0] = v16[a1[a0]];\n
                    a0 += 1;\n
                } while (a2 != a0);\n
            }\n
        }\n
        v12 += v15;\n
        if (v12 >= v4)\n
            return v12;\n
    }\n
}\n
", "4208914:sub_403912": null, "4209094:sub_4039c6": null, "4209104:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_403a20;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_403a31;\n
    while (true)\n
    {\n
LABEL_403a20:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_403a31;\n
    }\n
LABEL_403a31:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4209227:sub_403a4b": null, "4209232:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // rax\n
    unsigned long long v15;  // r8\n
    unsigned long v16;  // rcx\n
    struct struct_0 **v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    void* v19;  // rdi, Other Possible Types: unsigned long\n
    char *v20;  // rsi\n
    unsigned long v21;  // rdi\n
    unsigned long long v22;  // rax\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        v14 = 4294967295;\n
        if (v13)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v16 = a0->field_18;\n
            *(&v14) = v0;\n
            if (!v16)\n
                return v14;\n
            *(&v14) = *(v16 + v14);\n
        }\n
    }\n
    else\n
    {\n
        if (v4 != *(&a0->padding_c[0]))\n
        {\n
            v3->field_8 = v4 + 1;\n
            v22 = v3[1].padding_0[v4];\n
            return v22;\n
        }\n
        *(&a0->field_8) = 0;\n
        if (cgc_receive(a0, v9, v10, v11))\n
            return 4294967295;\n
        v15 = *(&v1);\n
        if (!v15)\n
            return 4294967295;\n
        *(&a0->padding_c[0]) = v15;\n
        if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
        {\n
            v17 = a0->field_18;\n
            if (v17)\n
            {\n
                v18 = v15 & 3;\n
                if (v15 - 1 < 3)\n
                {\n
                    v19 = 0;\n
                }\n
                else\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v3[1].padding_0[v19] = *(v17 + v3[1].padding_0[v19]);\n
                        v3[1].padding_0[1 + v19] = *(v17 + v3[1].padding_0[1 + v19]);\n
                        v3[1].padding_0[2 + v19] = *(v17 + v3[1].padding_0[2 + v19]);\n
                        v3[1].padding_0[3 + v19] = *(v17 + v3[1].padding_0[3 + v19]);\n
                        v19 += 4;\n
                    } while (v15 - v18 != v19);\n
                }\n
                if (v18)\n
                {\n
                    v20 = &v3->padding_0[v19 + 32];\n
                    v21 = 0;\n
                    do\n
                    {\n
                        v20[v21] = *(v17 + v20[v21]);\n
                        v21 += 1;\n
                    } while (v18 != v21);\n
                }\n
            }\n
        }\n
        if (v15 < 0)\n
            return 4294967295;\n
        v4 = v3->field_8;\n
    }\n
}\n
", "4209578:sub_403baa": null, "4209584:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4209599:sub_403bbf": null, "4209600:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    unsigned long long v3;  // [bp-0x438]\n
    unsigned long long v4;  // [bp-0x437]\n
    unsigned long long v5;  // [bp-0x436]\n
    unsigned long long v6;  // [bp-0x435]\n
    struct_0 *v8;  // rbx\n
    unsigned long v9;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax\n
    char *v12;  // r15\n
    void* v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rcx\n
    struct_2 *v15;  // rdi, Other Possible Types: unsigned long\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // rsi\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rcx\n
    char *v22;  // rcx\n
    unsigned long v23;  // rdx\n
    void* v24;  // r14, Other Possible Types: unsigned long\n
    void* v25;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v26;  // rcx\n
    struct_2 *v27;  // rdi\n
    unsigned long long v28;  // r15\n
\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v11 = a2->field_c;\n
            if (v11 + a1 >= 0x400)\n
            {\n
                v13 = 0x400 - v11;\n
                cgc_memcpy(&a2->padding_0[v11 + 32], a0, v13);\n
                v8->field_c = v8->field_c + v13;\n
                cgc_fflush(a2);\n
                if (v13 < a1)\n
                    goto LABEL_403db2;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_403db2:\n
                    v28 = a1 - v13;\n
                    cgc_memcpy(&v8->padding_0[v8->field_c + 32], a0 + v13, v28);\n
                    v8->field_c = v8->field_c + v28;\n
                    return a1;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v12 = a2->field_10;\n
    if (!v12)\n
    {\n
        v16 = 0;\n
        do\n
        {\n
            if (v16 >= a1)\n
                return a1;\n
            v16 += v3;\n
        } while (!cgc_transmit(a2, a1, a2, v17));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v25 = 0;\n
        v14 = 0x400;\n
        v15 = &v3;\n
        v0 = v10;\n
LABEL_403c23:\n
        v18 = v9 - v25;\n
        if (0x400 <= v18)\n
            v18 = 0x400;\n
        v1 = v25;\n
        v19 = v10 + v25;\n
        v20 = v18;\n
        cgc_memcpy();\n
        if (v18)\n
        {\n
            v15 = v18 & 3;\n
            if (v18 - 1 < 3)\n
            {\n
                v21 = 0;\n
            }\n
            else\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    *(&v3 + v21) = v12[*(&v3 + v21)];\n
                    *(&v4 + v21) = v12[*(&v4 + v21)];\n
                    *(&v5 + v21) = v12[*(&v5 + v21)];\n
                    *(&v6 + v21) = v12[*(&v6 + v21)];\n
                    v21 += 4;\n
                } while ((v18 & 2044) != v21);\n
            }\n
            if (v15)\n
            {\n
                v22 = &v3 + v21;\n
                v23 = 0;\n
                do\n
                {\n
                    v22[v23] = v12[v22[v23]];\n
                    v23 += 1;\n
                } while (v15 != v23);\n
            }\n
        }\n
        v24 = 0;\n
        do\n
        {\n
            if (v18 <= v24)\n
            {\n
                v25 = v1 + v18;\n
                v10 = v0;\n
                v26 = 0x400;\n
                v27 = &v3;\n
                if (v25 >= v9)\n
                    return v9;\n
                goto LABEL_403c23;\n
            }\n
            v24 += *(&v2);\n
        } while (!cgc_transmit(v15, v19));\n
    }\n
    return -1;\n
}\n
", "4209928:sub_403d08": null, "4210155:sub_403deb": null, "4210160:cgc_fxlat": "typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[15];\n
    uint128_t field_10;\n
    char padding_20[80];\n
    uint128_t field_70;\n
    uint128_t field_80;\n
    uint128_t field_90;\n
    uint128_t field_a0;\n
    uint128_t field_b0;\n
    uint128_t field_c0;\n
    uint128_t field_d0;\n
    uint128_t field_e0;\n
    uint128_t field_f0;\n
} struct_0;\n
\n
long long cgc_fxlat(struct_1 *a0, char a1[2])\n
{\n
    struct_1 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    struct_0 *v4;  // rbx\n
    unsigned long long v7;  // rdx, Other Possible Types: char, unsigned long\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rdi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // esi\n
    unsigned long v13;  // rdx\n
    char v14;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v4 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v4;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v7 = a1[0];\n
    v9 = 826981510;\n
    if (v3[0])\n
    {\n
        v8 = 1;\n
        do\n
        {\n
            v9 = __ROL__((v9 + v9 * 36) ^ v7, 13);\n
            v7 = v3[v8];\n
            v8 = v8 + 1;\n
        } while (v7);\n
    }\n
    *(&v4->field_0) = 0xf0e0d0c0b0a09080706050403020100;\n
    v4->field_10 = 41362427191743139026751447860679676176;\n
    strncpy(&v4->padding_20, \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmno\", 80);\n
    v4->field_70 = 169468730032567031154139535364404179312;\n
    v4->field_80 = 190819780506037679842037549948358263168;\n
    v4->field_90 = 212170830979508328529935564532312347024;\n
    v4->field_a0 = 233521881452978977217833579116266430880;\n
    v4->field_b0 = 254872931926449625905731593700220514736;\n
    v4->field_c0 = 276223982399920274593629608284174598592;\n
    v4->field_d0 = 297575032873390923281527622868128682448;\n
    v4->field_e0 = 318926083346861571969425637452082766304;\n
    v4->field_f0 = 340277133820332220657323652036036850160;\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v9;\n
        v12 = v9 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v9 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = (&v4->field_0)[v10];\n
        (&v4->field_0)[v10] = (&v4->field_0)[v13];\n
        (&v4->field_0)[v13] = v14;\n
        v10 -= 1;\n
    }\n
}\n
", "4210609:sub_403fb1": null, "4210624:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4210639:sub_403fcf": null, "4210640:cgc_malloc_alloc": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_8;\n
    struct struct_2 *field_10;\n
    char padding_18[1016];\n
    unsigned long long field_410;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_3 *field_18;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern unsigned long long g_40a210;\n
extern unsigned long long g_40a242;\n
\n
long long cgc_malloc_alloc(struct_1 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // rbx\n
    struct_1 *v4;  // rbx\n
    struct_1 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rbx\n
    struct_0 *v11;  // r15, Other Possible Types: void*, unsigned long\n
\n
    if (a1 > 2147483647)\n
        return 0;\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
        return tiny_alloc(a0, 4);\n
    if (v2 <= 15)\n
        return tiny_alloc(a0, v2);\n
    if (v2 > 131071)\n
    {\n
        if (!cgc_allocate(a0, a1, v7))\n
        {\n
            v11 = *(&v0);\n
            *(v11) = a0;\n
            *((v11 + 8)) = v2 + 4111 & -0x1000;\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
    v4 = v2 + 31;\n
    v5 = v4 & -0x10;\n
    if (!(v4 & -0x10))\n
    {\n
        v9 = 4294967295;\n
    }\n
    else if (v5 < 513)\n
    {\n
        v10 = v4 / 16;\n
        v9 = v10 + 2;\n
        if (v10 > 128)\n
            v11 = 0;\n
    }\n
    else if (v5 <= 0x1200)\n
    {\n
        v9 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
    }\n
    else\n
    {\n
        v9 = 130;\n
        if (v5 <= 0x20000)\n
            v9 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
    }\n
    v11 = (&a0->field_0)[v9];\n
    if (!v11)\n
        goto LABEL_0x404270;\n
    else\n
        goto LABEL_0x404290;\n
}\n
", "4211552:tiny_alloc": "long long tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    struct struct_0 *v4[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned int v7;  // edx\n
    unsigned short *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
    unsigned long long v12;  // rbp\n
    unsigned long long v13;  // r13\n
    unsigned short *v14;  // r12\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rbx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v9 = *((a0 + v4 * 8));\n
    if (v9)\n
    {\n
        *((a0 + v5 * 8)) = *(&v9);\n
        return v9;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (v6)\n
    {\n
        v7 = v6[0];\n
        a1 = v6[1];\n
    }\n
    else\n
    {\n
        v8 = *((a0 + 5168));\n
        if (v8)\n
        {\n
            v9 = *((a0 + 5176));\n
        }\n
        else if (cgc_allocate(a0, a1, v10))\n
        {\n
            *((a0 + 5168)) = 0;\n
            return 0;\n
        }\n
        else\n
        {\n
            v12 = v0;\n
            v13 = v12 + 1048575;\n
            v14 = v13 & -0x100000;\n
            if (v14 > v12)\n
                cgc_deallocate(a0);\n
            if ((v12 + 0x200000) > (v14 + 0x80000))\n
                cgc_deallocate(a0);\n
            *((a0 + (v13 >> 20) + 1048)) = 1;\n
            v8 = v14;\n
            *((a0 + 5168)) = v14;\n
            v9 = 0;\n
            if (!v14)\n
                return 0;\n
        }\n
        v15 = v8;\n
        v6 = v8 + v9;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v15 + v9)) = v3;\n
        *((v15 + v9 + 2)) = v3;\n
        v16 = v9 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v7 = a1;\n
    }\n
    v17 = v3 + a1;\n
    *((v6 + 2)) = v17;\n
    if (v7 + v17 < 4097)\n
        return a1 + v6;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4211991:sub_404517": null, "4212000:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r9\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // r11\n
    unsigned long v9;  // r8\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r10\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // r10\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r11\n
    unsigned long v19;  // rsi\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rax\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdi\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rdi\n
    unsigned long v28;  // rsi\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_404909;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v19 = a1 - 16;\n
        v7 = *((v19 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_404909;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_404909;\n
        }\n
        else\n
        {\n
            v8 = *(v19);\n
            v9 = v7 + v19;\n
            v10 = v19 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (!v10)\n
            {\n
                if (*(v9) == v7)\n
                    goto LABEL_40465f;\n
                goto LABEL_404912;\n
            }\n
            else\n
            {\n
                v13 = *((v10 + 8));\n
                if (!((v13 & -2) == v8))\n
                    goto LABEL_40492c;\n
                if (*(v9) == v7)\n
                {\n
                    if ((v13 & 1))\n
                    {\n
                        if (v8 <= 15)\n
                        {\n
                            v15 = v13 / 4 - 1;\n
                        }\n
                        else if (v8 <= 0x200)\n
                        {\n
                            v15 = (v13 >> 4) + 2;\n
                        }\n
                        else if (v8 <= 0x1200)\n
                        {\n
                            v15 = (0x7ffffffe00 + v8 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v15 = 130;\n
                            if (v8 <= 0x20000)\n
                                v15 = (0x7ffffffee00 + v8 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v8;\n
                        v16 = *((v10 + 16));\n
                        if (v16)\n
                            *((v16 + 24)) = *((v10 + 24));\n
                        v17 = *((v10 + 24));\n
                        if (v17)\n
                            *((v17 + 16)) = v16;\n
                        if (*((v4 + (v15 << 3))) == v10)\n
                            *((v4 + v15 * 8)) = v17;\n
                        *((v10 + 16)) = 0;\n
                        v18 = v8 + *((v19 + 8));\n
                        *((v10 + 8)) = v18;\n
                        *(v9) = v18;\n
                        v19 = v10;\n
                        v14 = *((v9 + 8));\n
                        if (!(!(v14 & 1)))\n
                            goto LABEL_404774;\n
                        goto LABEL_40466c;\n
                    }\n
LABEL_40465f:\n
                    v14 = *((v9 + 8));\n
                    if ((v14 & 1))\n
                    {\n
LABEL_404774:\n
                        v21 = v14 & -2;\n
                        if (v21 <= 15)\n
                        {\n
                            v22 = v14 / 4 - 1;\n
                        }\n
                        else if (v21 <= 0x200)\n
                        {\n
                            v22 = (v14 >> 4) + 2;\n
                        }\n
                        else if (v21 <= 0x1200)\n
                        {\n
                            v22 = (0x7ffffffe00 + v21 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v22 = 130;\n
                            if (v21 <= 0x20000)\n
                                v22 = (0x7ffffffee00 + v21 >> 11) + 66;\n
                        }\n
                        *((v9 + 8)) = v21;\n
                        v23 = *((v9 + 16));\n
                        if (v23)\n
                            *((v23 + 24)) = *((v9 + 24));\n
                        v24 = *((v9 + 24));\n
                        if (v24)\n
                            *((v24 + 16)) = v23;\n
                        if (*((v4 + (v22 << 3))) == v9)\n
                            *((v4 + v22 * 8)) = v24;\n
                        *((v9 + 16)) = 0;\n
                        v25 = v21 + *((v19 + 8));\n
                        *((v19 + 8)) = v25;\n
                        *((v19 + v25)) = v25;\n
                        v20 = *((v19 + 8));\n
                        if (v20 > 15)\n
                        {\n
LABEL_404831:\n
                            if (v20 <= 0x200)\n
                            {\n
                                v3 = (v20 >> 4) + 2;\n
                            }\n
                            else if (v20 <= 0x1200)\n
                            {\n
                                v3 = (0x7ffffffe00 + v20 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v3 = 130;\n
                                if (v20 <= 0x20000)\n
                                    v3 = (0x7ffffffee00 + v20 >> 11) + 66;\n
                            }\n
LABEL_404887:\n
                            if ((v20 & 1))\n
                            {\n
                                v10 = cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                            }\n
                            else\n
                            {\n
                                *((v19 + 8)) = v20 | 1;\n
                                *((v19 + 16)) = 0;\n
                                *((v19 + 24)) = *((v4 + v3 * 8));\n
                                *((v4 + v3 * 8)) = v19;\n
                                v26 = *((v19 + 24));\n
                                if (!v26)\n
                                    return v0;\n
                                *((v26 + 16)) = v19;\n
                                return v0;\n
                            }\n
LABEL_40492c:\n
                            v27 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                            v28 = v10;\n
LABEL_404935:\n
                            cgc_heap_error(v27, v28, v3);\n
                            return cgc_malloc_size(v27, v28, v3, v3, v9, v4);\n
                        }\n
LABEL_40467a:\n
                        v3 = v20 / 4 - 1;\n
                        goto LABEL_404887;\n
                    }\n
LABEL_40466c:\n
                    v20 = *((v19 + 8));\n
                    if (!(v20 <= 15))\n
                        goto LABEL_404831;\n
                    goto LABEL_40467a;\n
                }\n
            }\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_404909:\n
    cgc_heap_error(v11, v3);\n
LABEL_404912:\n
    v27 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v28 = v9;\n
    goto LABEL_404935;\n
}\n
", "4213056:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4213100:sub_40496c": null, "4213104:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_404981:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_404a03;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_404a03;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_404a03:\n
                v5 = cgc_malloc_alloc(a0, a2);\n
                if (v5)\n
                {\n
                    cgc_memcpy(v5, a1);\n
                    malloc_free(a0, a1);\n
                    return v5;\n
                }\n
                goto LABEL_404981;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4213364:sub_404a74": null, "4213376:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4213552:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4213588:sub_404b54": null, "4213600:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4213646:sub_404b8e": null, "4213648:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_404c24:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_404bb7;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_404bb7:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_404c24;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_404bb7;\n
}\n
", "4214079:sub_404d3f": null, "4214080:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    char *v2;  // r8, Other Possible Types: unsigned long\n
    unsigned long v3;  // r11\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // r9\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    uint128_t *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r10\n
    unsigned long v13;  // r11\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // r9, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm1\n
    int v19;  // xmm1\n
    int v20;  // xmm1\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    unsigned long long v25;  // rdi\n
    uint128_t *v27;  // rcx, Other Possible Types: unsigned long\n
    int v28;  // xmm1\n
    unsigned long v29;  // r8\n
    char *v30;  // rcx\n
    char *v31;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v32;  // r8\n
    char *v33;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r9\n
    char *v35;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v36;  // rdx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 4)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_404e95:\n
                if (a2 < 16)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x10;\n
                    v4 = v2 - 16;\n
                    v5 = (v4 >> 4) + 1;\n
                    v6 = v5 & 3;\n
                    if (v4 < 48)\n
                    {\n
                        v10 = 0;\n
                    }\n
                    else\n
                    {\n
                        v11 = v5 & -4;\n
                        v12 = v1 + a2 - 16;\n
                        v13 = &a2[a1 + 16];\n
                        v14 = 0;\n
                        do\n
                        {\n
                            *((v12 + v14)) = *((v13 + v14));\n
                            *((-16 + v12 + v14)) = *((v13 + v14 - 16));\n
                            *((-32 + v12 + v14)) = *((v13 + v14 - 32));\n
                            *((-48 + v12 + v14)) = *((v13 + v14 - 48));\n
                            v14 -= 64;\n
                            tmp_13 = v11;\n
                            v11 -= 4;\n
                        } while (tmp_13 != 4);\n
                        v10 = -(v14);\n
                    }\n
                    if (v6)\n
                    {\n
                        v25 = &a2[-1 * v10];\n
                        v27 = 0;\n
                        do\n
                        {\n
                            *(&v1[16 + v27 + v25]) = *((a1 + v25 - 16 + v27));\n
                            v27 -= 16;\n
                        } while (v6 * 16 + v27);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 12))\n
                        goto LABEL_404d79;\n
                }\n
                v30 = v2;\n
                v2 = a2 & -4;\n
                v31 = -(v30);\n
                do\n
                {\n
                    *((v1 + a2 - 4 + v31)) = *(&a2[4 + v31 + a1]);\n
                    v31 -= 4;\n
                } while (!(v2) != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_404d79:\n
                v34 = &a2[~(v2)];\n
                if ((a2 & 3))\n
                {\n
                    v35 = 0;\n
                    do\n
                    {\n
                        v1[v35 + v34] = *((a1 + v34 + v35));\n
                        v35 -= 1;\n
                    } while (!(a2 & 3) != v35);\n
                    v2 -= v35;\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                v36 = &a2[-1 * v2];\n
                do\n
                {\n
                    v1[1 + v36] = *((a1 + v36 - 1));\n
                    v1[2 + v36] = *((a1 + v36 - 2));\n
                    v1[3 + v36] = *((a1 + v36 - 3));\n
                    v1[4 + v36] = *((a1 + v36 - 4));\n
                    tmp_10 = v36;\n
                    v36 -= 4;\n
                } while (tmp_10 != 4);\n
                return v1;\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_404e95;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_404d79;\n
    }\n
    else\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_404ea3:\n
                if (a2 < 32)\n
                {\n
                    v3 = 0;\n
                }\n
                else\n
                {\n
                    v3 = a2 & -0x20;\n
                    v7 = v3 - 32;\n
                    v8 = (v7 >> 5) + 1;\n
                    v9 = v8 & 3;\n
                    if (v7 < 96)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v16 = v8 & -4;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v17 = *((a1 + v15 + 16));\n
                            *(&v1[v15]) = *((a1 + v15));\n
                            *(&v1[16 + v15]) = v17;\n
                            v18 = *((a1 + v15 + 48));\n
                            *(&v1[32 + v15]) = *((a1 + v15 + 32));\n
                            *(&v1[48 + v15]) = v18;\n
                            v19 = *((a1 + v15 + 80));\n
                            *(&v1[64 + v15]) = *((a1 + v15 + 64));\n
                            *(&v1[80 + v15]) = v19;\n
                            v20 = *((a1 + v15 + 112));\n
                            *(&v1[96 + v15]) = *((a1 + v15 + 96));\n
                            *(&v1[112 + v15]) = v20;\n
                            v15 -= -128;\n
                            tmp_21 = v16;\n
                            v16 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v9)\n
                    {\n
                        v21 = &v1[v15 + 16];\n
                        v22 = a1 + v15 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v28 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v28;\n
                            v24 += 32;\n
                        } while (v9 * 32 != v24);\n
                    }\n
                    if (v3 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_404e27;\n
                }\n
                v29 = v3;\n
                v3 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v29]) = *((a1 + v29));\n
                    v29 += 8;\n
                } while (v3 != v29);\n
                if (v3 == a2)\n
                    return v1;\n
LABEL_404e27:\n
                v32 = &a2[~(v3)];\n
                v33 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v3] = *((a1 + v3));\n
                        v3 += 1;\n
                        tmp_7 = v33;\n
                        v33 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v32 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v3] = *((a1 + v3));\n
                    v1[1 + v3] = *((a1 + v3 + 1));\n
                    v1[2 + v3] = *((a1 + v3 + 2));\n
                    v1[3 + v3] = *((a1 + v3 + 3));\n
                    v3 += 4;\n
                } while (a2 != v3);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_404ea3;\n
            }\n
        }\n
        v3 = 0;\n
        goto LABEL_404e27;\n
    }\n
}\n
", "4215007:sub_4050df": null, "4215008:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long v2;  // rcx\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // r10\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // r10, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rdi\n
    int v15;  // xmm0\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (a2 < 32)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v2 = a2 & -0x20;\n
            tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
            v3 = tmp_43;\n
            v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
            v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
            v6 = v2 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *(&v1[v9]) = v5;\n
                    *(&v1[16 + v9]) = v5;\n
                    *(&v1[32 + v9]) = v5;\n
                    *(&v1[48 + v9]) = v5;\n
                    *(&v1[64 + v9]) = v5;\n
                    *(&v1[80 + v9]) = v5;\n
                    *(&v1[96 + v9]) = v5;\n
                    *(&v1[112 + v9]) = v5;\n
                    *(&v1[128 + v9]) = v5;\n
                    *(&v1[144 + v9]) = v5;\n
                    *(&v1[160 + v9]) = v5;\n
                    *(&v1[176 + v9]) = v5;\n
                    *(&v1[192 + v9]) = v5;\n
                    *(&v1[208 + v9]) = v5;\n
                    *(&v1[224 + v9]) = v5;\n
                    *(&v1[240 + v9]) = v5;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = &v1[v9 + 16];\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = v5;\n
                    *((v11 + v13)) = v5;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            if (v2 == a2)\n
                return v1;\n
            if (!(a2 & 24))\n
                goto LABEL_405250;\n
        }\n
        v14 = v2;\n
        v2 = a2 & -8;\n
        tmp_20 = InterleaveLOV(tmp_21, tmp_21);\n
        v15 = tmp_20;\n
        do\n
        {\n
            *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
            v14 += 8;\n
        } while (v2 != v14);\n
        if (v2 == a2)\n
            return v1;\n
    }\n
    do\n
    {\n
LABEL_405250:\n
        v1[v2] = a1;\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4215390:sub_40525e": null, "4215392:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned long v32;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v32 = cgc__vsfprintf();\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v32;\n
    }\n
    v32 = cgc__vsfprintf();\n
    return v32;\n
}\n
", "4215604:sub_405334": null, "4215616:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return cgc__vsfprintf();\n
    }\n
    return cgc__vsfprintf();\n
}\n
", "4215694:sub_40538e": null, "4215696:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned long v30;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v30;\n
    }\n
    v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    return v30;\n
}\n
", "4215905:sub_405461": null, "4215920:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4216003:sub_4054c3": null, "4216016:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4216169:sub_405569": null, "4216176:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4216189:sub_40557d": null, "4216192:cgc__vsfprintf": "long long cgc__vsfprintf(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_16;  // tmp #16\n
    int tmp_2;  // tmp #2\n
    unsigned long v0;  // [bp-0x1c8]\n
    int tmp_50;  // tmp #50\n
    int tmp_70;  // tmp #70\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0xa1]\n
    unsigned long v2;  // [bp-0xa0]\n
    unsigned long v3;  // [bp-0x98]\n
    unsigned long v4;  // [bp-0x90]\n
    char v5;  // [bp-0x88]\n
    char v6;  // [bp-0x87]\n
    char v7;  // [bp-0x76]\n
    char v8;  // [bp-0x75]\n
    char v9;  // [bp-0x74]\n
    unsigned long v10;  // [bp-0x40]\n
    unsigned long v11;  // [bp-0x38]\n
    unsigned long v13;  // rbx\n
    unsigned long v14;  // rbp\n
    unsigned long v15;  // al, Other Possible Types: char\n
    unsigned long v16;  // r15\n
    unsigned int v17;  // eax\n
    char v18;  // r13b\n
    unsigned long v19;  // rax\n
    char v20;  // cc_dep1\n
    char v21;  // cc_dep2\n
    unsigned long v22;  // r12\n
    unsigned long v23;  // rcx\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rcx\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rsi\n
    unsigned int v29;  // cc_dep1\n
    unsigned long v30;  // rsi\n
    unsigned long v31;  // rdi\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // r13\n
    unsigned long v36;  // rax\n
    unsigned long v37;  // r13\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rbp\n
    unsigned long v42;  // rbp\n
    unsigned long v43;  // rbp\n
    unsigned long v44;  // r14\n
    unsigned long v45;  // rax\n
    unsigned int v46;  // ebp\n
    unsigned long v47;  // r12\n
    unsigned long v48;  // r13\n
    unsigned long v49;  // r8\n
    unsigned long v50;  // r9\n
\n
    v13 = a3;\n
    v4 = a1;\n
    v14 = a0 + 1;\n
    v3 = v14;\n
    v15 = *(a0);\n
    if (!*(a0))\n
    {\n
        v44 = 0;\n
    }\n
    else\n
    {\n
        v16 = a2;\n
        v34 = &v5;\n
        v10 = 20 + -0x1 * &v5;\n
        v44 = 0;\n
        v2 = v13;\n
        while (true)\n
        {\n
            if (v15 != 37)\n
            {\n
                if (v44 < 2147483647)\n
                {\n
                    v1 = v15;\n
                    if (v16)\n
                    {\n
                        a2 = v16;\n
                        cgc_fwrite(&v1, 1, v16);\n
                    }\n
                    if (v13)\n
                        *((v13 + v44)) = v1;\n
                    v14 = v3;\n
                }\n
                else if (v44 == -1)\n
                {\n
                    goto LABEL_405b6f;\n
                }\n
                v44 += 1;\n
                v34 = v14 + 1;\n
                v3 = v34;\n
                tmp_16 = *(v14);\n
                v15 = *(v14);\n
                v14 = v34;\n
                if (!(!tmp_16))\n
                    continue;\n
                goto LABEL_405afa;\n
            }\n
            a0 = v14 + 1;\n
            v3 = a0;\n
            v17 = *(v14);\n
            v18 = 32;\n
            if (v17 == 32)\n
            {\n
LABEL_405623:\n
                if (!(*(a0) - 48 <= 9))\n
                    goto LABEL_40569a;\n
                goto LABEL_40562b;\n
            }\n
            else if (v17 != 48)\n
            {\n
                if (!v17)\n
                    goto LABEL_405afa;\n
                v3 = v14;\n
                a0 = v14;\n
                goto LABEL_405623;\n
            }\n
            else\n
            {\n
                v18 = 48;\n
                if (*(a0) - 48 <= 9)\n
                {\n
LABEL_40562b:\n
                    v19 = cgc_strtoul();\n
                    a0 = v3;\n
                    goto LABEL_40569c;\n
                }\n
                else\n
                {\n
LABEL_40569a:\n
                    v19 = 0;\n
LABEL_40569c:\n
                    v34 = a0 + 1;\n
                    v3 = v34;\n
                    a2 = *(a0);\n
                    *(&v13) = 1;\n
                    if (a2 == 104)\n
                    {\n
                        a2 = a0 + 2;\n
                        v20 = *((a0 + 1));\n
                        v21 = 104;\n
                    }\n
                    else if (a2 == 108)\n
                    {\n
                        v20 = *((a0 + 1));\n
                        v21 = 108;\n
                        a2 = a0 + 2;\n
                        *(&v13) = *((a0 + 1)) != 108;\n
                    }\n
                    else\n
                    {\n
                        if (!a2)\n
                            goto LABEL_405af5;\n
                        goto LABEL_4056d9;\n
                    }\n
                    if (v20 == v21)\n
                        v34 = a2;\n
                    a0 = v34;\n
LABEL_4056d9:\n
                    v22 = a0 + 1;\n
                    v3 = v22;\n
                    *(&a2) = *(a0);\n
                    v34 = *(a0);\n
                    a1 = v34 - 88;\n
                    if (a1 > 32)\n
                    {\n
                        v13 = v2;\n
                        if (!v34)\n
                        {\n
                            v47 = v22 - v14;\n
                            if (v44 < 2147483647)\n
                            {\n
                                v48 = 2147483647 - v44;\n
                                if (v48 > v47)\n
                                    v48 = v47;\n
                                if (v16)\n
                                    cgc_fwrite(v14, v48, v16);\n
                                if (v13)\n
                                    cgc_memcpy(v13 + v44, v14, v48);\n
                            }\n
                            tmp_2 = v44;\n
                            v44 += v47;\n
                            if (__CFADD__(tmp_2, v47))\n
                                goto LABEL_405b6f;\n
                            goto LABEL_405afa;\n
                        }\n
                        else\n
                        {\n
                            v40 = v22 - v14;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_405a9f;\n
                            v37 = 2147483647 - v44;\n
                            if (v37 > v40)\n
                                v37 = v40;\n
                            if (v16)\n
                                cgc_fwrite(v14, v37, v16);\n
                            if (!v13)\n
                                goto LABEL_405a9f;\n
                            a0 = v13 + v44;\n
                            a1 = v14;\n
                            a2 = v37;\n
                            goto LABEL_405a9a;\n
                        }\n
                    }\n
                    v0 = 4831842305;\n
                    if (((*(&v0 + ((a1 & 63) >> 3)) >> (a1 & 63 & 7)) & 1))\n
                    {\n
                        v11 = v19;\n
                        if (a2 != 100)\n
                        {\n
                            a1 = v4;\n
                            if (v13)\n
                            {\n
                                v25 = *(a1);\n
                                v13 = v2;\n
                                if (v25 <= 40)\n
                                {\n
                                    v31 = v25 + *((a1 + 16));\n
                                    *(a1) = v25 + 8;\n
                                }\n
                                else\n
                                {\n
                                    v31 = *((a1 + 8));\n
                                    *((a1 + 8)) = v31 + 8;\n
                                }\n
                                v32 = *(v31);\n
                                if (a2 == 117)\n
                                    a0 = 10;\n
                                else\n
                                    a0 = 16;\n
                                v42 = (a2 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                if (!v32)\n
                                {\n
                                    v7 = *(v42);\n
                                    a1 = &v7;\n
                                }\n
                                else\n
                                {\n
                                    do\n
                                    {\n
                                        *((a1 - 1)) = *((v42 + ((0 CONCAT v32) /m a0 >> 32)));\n
                                        a1 = &v7;\n
                                        tmp_50 = v32;\n
                                        v32 = (0 CONCAT v32) /m a0;\n
                                    } while (tmp_50 >= a0);\n
                                }\n
                                v41 = &v5;\n
                                cgc_memmove(&v5, a1, v10 + a1);\n
                                goto LABEL_40598c;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            a2 = v4;\n
                            v41 = &v5;\n
                            if (v13)\n
                            {\n
                                v24 = *(a2);\n
                                if (v24 <= 40)\n
                                {\n
                                    v28 = v24 + *((a2 + 16));\n
                                    *(a2) = v24 + 8;\n
                                    v38 = *(v28);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                        goto LABEL_4058af;\n
                                }\n
                                else\n
                                {\n
                                    v30 = *((a2 + 8));\n
                                    *((a2 + 8)) = v30 + 8;\n
                                    v38 = *(v30);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                    {\n
LABEL_4058af:\n
                                        v5 = 45;\n
                                        v38 = -(v38);\n
                                        v9 = 0;\n
                                        a1 = &v9;\n
                                        a0 = &v6;\n
                                        do\n
                                        {\n
                                            v39 = 3435973837 * v38 >> 35;\n
                                            a2 = v39 * 2;\n
                                            *((a1 - 1)) = *((4236284 + v38 + -5 * a2));\n
                                            a1 -= 1;\n
                                            tmp_70 = v38;\n
                                            v38 = v39;\n
                                        } while (tmp_70 > 9);\n
                                        v41 = &v5;\n
LABEL_4058fd:\n
                                        cgc_memmove(a0, a1, a1 - a0 + 20);\n
                                        v13 = v2;\n
LABEL_40598c:\n
                                        v45 = cgc_strlen(v41);\n
                                        v40 = v45;\n
                                        v34 = v11;\n
                                        if (v34 > v45)\n
                                        {\n
                                            v46 = v45 - v34;\n
                                            do\n
                                            {\n
                                                if (v44 < 2147483647)\n
                                                {\n
                                                    v1 = v18;\n
                                                    if (v16)\n
                                                    {\n
                                                        a2 = v16;\n
                                                        cgc_fwrite(&v1, 1, v16);\n
                                                    }\n
                                                    if (v13)\n
                                                        *((v13 + v44)) = v1;\n
                                                }\n
                                                else\n
                                                {\n
                                                    if (!(v44 == -1))\n
                                                        continue;\n
                                                }\n
                                                tmp_2 = v44;\n
                                                v44 += 1;\n
                                                tmp_12 = v46 + 1;\n
                                                v46 += 1;\n
                                            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                                        }\n
                                        if (!(v44 < 2147483647))\n
                                            goto LABEL_405a9f;\n
                                        v43 = 2147483647 - v44;\n
                                        if (v43 > v45)\n
                                            v43 = v45;\n
                                        if (v16)\n
                                        {\n
                                            a1 = v43;\n
                                            a2 = v16;\n
                                            cgc_fwrite(&v5, v43, v16);\n
                                        }\n
                                        if (!v13)\n
                                            goto LABEL_405a9f;\n
                                        a0 = v13 + v44;\n
                                        a1 = &v5;\n
LABEL_405a97:\n
                                        a2 = v43;\n
LABEL_405a9a:\n
                                        cgc_memcpy(a0, a1, a2);\n
LABEL_405a9f:\n
                                        tmp_2 = v44;\n
                                        v44 += v40;\n
                                        if (__CFADD__(tmp_2, v40))\n
                                            goto LABEL_405b6f;\n
                                        goto LABEL_405aa8;\n
                                    }\n
                                }\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                a0 = &v5;\n
                                if (!v29)\n
                                {\n
                                    v7 = 48;\n
                                    a0 = &v5;\n
                                    a1 = &v7;\n
                                    goto LABEL_4058fd;\n
                                }\n
                            }\n
                        }\n
LABEL_405af5:\n
                        v13 = v2;\n
LABEL_405afa:\n
                        if (v44 < 2147483647)\n
                            break;\n
                        if (v44 == -1)\n
                        {\n
LABEL_405b6f:\n
                            cgc__terminate(a0);\n
                            return cgc_realloc(a0, a1, a2, v34, v49, v50);\n
                        }\n
                        return v44;\n
                    }\n
                    else if (a1 == 11)\n
                    {\n
                        a2 = v4;\n
                        v23 = *(a2);\n
                        if (v23 <= 40)\n
                        {\n
                            v27 = v23 + *((a2 + 16));\n
                            v34 = v23 + 8;\n
                            *(a2) = v34;\n
                            v13 = v2;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_405ae0;\n
                            goto LABEL_405866;\n
                        }\n
                        else\n
                        {\n
                            v27 = *((a2 + 8));\n
                            v34 = v27 + 8;\n
                            *((a2 + 8)) = v34;\n
                            v13 = v2;\n
                            if (v44 < 2147483647)\n
                            {\n
LABEL_405866:\n
                                v1 = *(v27);\n
                                if (v16)\n
                                {\n
                                    a2 = v16;\n
                                    cgc_fwrite(&v1, 1, v16);\n
                                }\n
                                if (v13)\n
                                {\n
                                    *((v13 + v44)) = v1;\n
                                    goto LABEL_405aea;\n
                                }\n
                            }\n
                            else\n
                            {\n
LABEL_405ae0:\n
                                if (v44 == -1)\n
                                    goto LABEL_405b6f;\n
LABEL_405aea:\n
                                v44 += 1;\n
LABEL_405aa8:\n
                                v15 = v3;\n
                                v14 = v15 + 1;\n
                                v3 = v14;\n
                                *(&v15) = *(v15);\n
                                if (!*(&v15))\n
                                    goto LABEL_405afa;\n
                            }\n
                        }\n
                    }\n
                    else if (a1 == 27)\n
                    {\n
                        a2 = v4;\n
                        v26 = *(a2);\n
                        if (v26 > 40)\n
                        {\n
                            v33 = *((a2 + 8));\n
                            v34 = v33 + 8;\n
                            *((a2 + 8)) = v34;\n
                        }\n
                        else\n
                        {\n
                            v33 = v26 + *((a2 + 16));\n
                            v34 = v26 + 8;\n
                            *(a2) = v34;\n
                        }\n
                        v13 = v2;\n
                        v35 = *(v33);\n
                        v36 = cgc_strlen(v35);\n
                        v40 = v36;\n
                        if (!(v44 < 2147483647))\n
                            goto LABEL_405a9f;\n
                        v43 = 2147483647 - v44;\n
                        if (v43 > v36)\n
                            v43 = v36;\n
                        if (v16)\n
                            cgc_fwrite(v35, v43, v16);\n
                        if (!v13)\n
                            goto LABEL_405a9f;\n
                        a0 = v13 + v44;\n
                        a1 = v35;\n
                        goto LABEL_405a97;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v13)\n
        *((v13 + v44)) = 0;\n
    return v44;\n
}\n
", "4216264:sub_4055c8": null, "4216385:sub_405641": null, "4217258:sub_4059aa": null, "4217335:sub_4059f7": null, "4217728:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4217746:sub_405b92": null, "4217760:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    struct_0 *v5;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v5 = a0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v3 = cgc_tolower(v2);\n
            v2 = cgc_tolower(*(v1));\n
            if (v3 != v2)\n
            {\n
                *(&v2) = *((v5 - 1));\n
                return v2 - *(v1);\n
            }\n
            v1 += 1;\n
            v2 = *(v5);\n
            v5 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4217857:sub_405c01": null, "4217872:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4217968:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long v1;  // cl, Other Possible Types: char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4218025:sub_405ca9": null, "4218032:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4218085:sub_405ce5": null, "4218096:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4218149:sub_405d25": null, "4218160:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4218221:sub_405d6d": null, "4218224:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4218258:sub_405d92": null, "4218272:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4218383:sub_405e0f": null, "4218384:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    char *v1;  // rax\n
    char v2;  // cl\n
    char *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    unsigned long v5;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r10\n
    char *v7;  // r10\n
    unsigned long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r11\n
    unsigned long long v11;  // r9\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // r11, Other Possible Types: unsigned long long\n
    uint128_t *v14;  // rcx\n
    unsigned long v16;  // rsi\n
    char *v17;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r8\n
    unsigned long long v19;  // rcx\n
    unsigned long v20;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    v4 = 0;\n
    v3 = v1;\n
    if (*(a1) && a2)\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1[v4] = v2;\n
            v2 = a1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
            if (v4 >= a2)\n
                break;\n
        }\n
        v3 = &v1[v4];\n
    }\n
    if (v4 >= a2)\n
        return v1;\n
    v5 = 1 + v3 - v1;\n
    v6 = (!(a2 <= v5) ? v5 : a2);\n
    v7 = &v1[v6 + -1 * v3];\n
    if (v7 < 8)\n
    {\n
LABEL_405e74:\n
        v17 = v3;\n
        goto LABEL_405fa6;\n
    }\n
    else\n
    {\n
        if (v7 < 32)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7 & -0x20;\n
            v9 = v8 - 32;\n
            v10 = (v9 >> 5) + 1;\n
            v11 = v10 & 7;\n
            if (v9 < 224)\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                v13 = v10 & -8;\n
                v12 = 0;\n
                do\n
                {\n
                    *((v3 + v12)) = 0;\n
                    *((v3 + v12 + 16)) = 0;\n
                    *((v3 + v12 + 32)) = 0;\n
                    *((v3 + v12 + 48)) = 0;\n
                    *((v3 + v12 + 64)) = 0;\n
                    *((v3 + v12 + 80)) = 0;\n
                    *((v3 + v12 + 96)) = 0;\n
                    *((v3 + v12 + 112)) = 0;\n
                    *((v3 + v12 + 128)) = 0;\n
                    *((v3 + v12 + 144)) = 0;\n
                    *((v3 + v12 + 160)) = 0;\n
                    *((v3 + v12 + 176)) = 0;\n
                    *((v3 + v12 + 192)) = 0;\n
                    *((v3 + v12 + 208)) = 0;\n
                    *((v3 + v12 + 224)) = 0;\n
                    *((v3 + v12 + 240)) = 0;\n
                    v12 += 0x100;\n
                    tmp_21 = v13;\n
                    v13 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v11)\n
            {\n
                v14 = v12 + v3 + 16;\n
                v16 = 0;\n
                do\n
                {\n
                    *((-16 + v14 + v16)) = 0;\n
                    *((v14 + v16)) = 0;\n
                    v16 += 32;\n
                } while (v11 * 32 != v16);\n
            }\n
            if (v7 == v8)\n
                return v1;\n
            if (!(v7 & 24))\n
            {\n
                v3 += v8;\n
                goto LABEL_405e74;\n
            }\n
        }\n
        if (a2 > v5)\n
            v5 = a2;\n
        v18 = &v1[v5 + -1 * v3];\n
        v19 = v18 & -8;\n
        v17 = v3 + v19;\n
        do\n
        {\n
            *((v3 + v8)) = 0;\n
            v8 += 8;\n
        } while (v19 != v8);\n
        if (v18 == v19)\n
            return v1;\n
LABEL_405fa6:\n
        v20 = v17 - v1;\n
        do\n
        {\n
            *(v17) = 0;\n
            v17 += 1;\n
            v20 += 1;\n
        } while (v20 < a2);\n
        return v1;\n
    }\n
}\n
", "4218826:sub_405fca": null, "4218832:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4218903:sub_406017": null, "4218912:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r15\n
    unsigned long v4;  // rbx\n
    unsigned long long v5;  // rax\n
    char *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v8;  // rbx\n
    void* v9;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = cgc_strchr(a1, v2);\n
            if (v5)\n
            {\n
                v7 = &v3[v4];\n
                if (!v3[v4])\n
                    goto LABEL_406065;\n
                v8 = v4 + 1;\n
                v9 = v8 + v3;\n
                goto LABEL_406067;\n
            }\n
            v4 = v4 + 1;\n
            v2 = v3[v4];\n
        } while (v2);\n
        v6 = v4;\n
    }\n
    v7 = &v3[v6];\n
LABEL_406065:\n
    v9 = 0;\n
LABEL_406067:\n
    *(a0) = v9;\n
    *(v7) = 0;\n
    return *(a0);\n
}\n
", "4219025:sub_406091": null, "4219040:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4219119:sub_4060ef": null, "4219120:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    unsigned int v25;  // ebp\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // edx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_4062c8;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_4061b1;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_4061b1:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_4061f0:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_4062f9;\n
LABEL_406206:\n
                *(&v18) = *(v16);\n
LABEL_406208:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_406215:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 > 2147483647)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_4062c8;\n
                }\n
LABEL_4062f9:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_4062c8;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_4062c8;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_406215;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_4061f0;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_4061e6:\n
            v19 = 16;\n
            goto LABEL_406206;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_406206;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_406208;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_4061e6;\n
LABEL_4062c8:\n
    v31 = (!v25 ? -0x80000000 : -(v26));\n
    v32 = (!v25 ? 2147483647 : v26);\n
    if (v30 < 0)\n
        v32 = v31;\n
    return v32;\n
}\n
", "4219465:sub_406249": null, "4219663:sub_40630f": null, "4219664:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    void* v25;  // rbp, Other Possible Types: unsigned long, unsigned int, unsigned long long\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned long v32;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_4064e8;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_4063d1;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_4063d1:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_406410:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_406524;\n
LABEL_406426:\n
                *(&v18) = *(v16);\n
LABEL_406428:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_406435:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 >> 32)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_4064e8;\n
                }\n
LABEL_406524:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_4064e8;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_4064e8;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_406435;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_406410;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_406406:\n
            v19 = 16;\n
            goto LABEL_406426;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_406426;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_406428;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_406406;\n
LABEL_4064e8:\n
    if (v30 < 0)\n
    {\n
        v31 = (v26 == -0x80000000 ? 1 : v25);\n
        if (v26 <= 2147483647)\n
            v31 = v25;\n
        v26 = -(v26);\n
        v25 = v31;\n
    }\n
    v32 = (!v25 ? 4294967295 : v26);\n
    return v32;\n
}\n
", "4220009:sub_406469": null, "4220218:sub_40653a": null, "4220224:_Z10check_seedv": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long check_seed()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    unsigned long v2;  // rax\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v0 == *(0x4347c000))\n
    {\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4220298:sub_40658a": null, "4220304:main": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned long long field_8;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern void g_40c028;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x994]\n
    unsigned int v1;  // [bp-0x990]\n
    unsigned long v2;  // [bp-0x988]\n
    void* v3;  // [bp-0x980]\n
    char v4;  // [bp-0x978]\n
    char v5;  // [bp-0x878]\n
    unsigned int v6;  // [bp-0x778]\n
    struct struct_1 **v7;  // [bp-0x770]\n
    unsigned long long *v8;  // [bp-0x768]\n
    char v9;  // [bp-0x760]\n
    unsigned long v10;  // [bp-0x10]\n
    unsigned long v11;  // [bp-0x8]\n
    unsigned long v13;  // r15\n
    unsigned long v14;  // r14\n
    struct struct_1 **v15;  // r12\n
    struct_0 *v16;  // rbx\n
    unsigned long long *v17;  // r12\n
    struct_0 *v18;  // rbx\n
\n
    v11 = v13;\n
    v10 = v14;\n
    v1 = 7864400;\n
    v2 = cgc_stdin;\n
    v3 = cgc_stdout;\n
    v15 = operator new(8);\n
    v16 = operator new(24);\n
    v16->field_10 = 10;\n
    v16->field_8 = 10;\n
    v16->field_0 = operator new[](160);\n
    *(v15) = &v16->field_0;\n
    v7 = v15;\n
    v17 = operator new(8);\n
    v18 = operator new(24);\n
    v18->field_10 = 10;\n
    v18->field_8 = 64;\n
    v18->field_0 = operator new[](0x4000);\n
    *(v17) = v18;\n
    v8 = v17;\n
    memcpy(&v9, &g_40c028, 1856);\n
    cgc_memset(&v4, 0, 0x100);\n
    cgc_memset(&v5, 0, 0x100);\n
    v6 = 0;\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v0 == *(0x4347c000))\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    VC::REPL(&v1);\n
    if (*(v7)->field_c)\n
    {\n
        do\n
        {\n
            Vector::RemoveLast();\n
        } while (*(v7)->field_c);\n
    }\n
    cgc_fprintf(v3, \"Bye bye\\n
\");\n
    cgc_fflush(v3);\n
    return 0;\n
}\n
", "4220740:sub_406744": null, "4220752:_ZL8ParseIntPcPi": "long long ParseInt(unsigned long a0, unsigned int *a1)\n
{\n
    char *v1;  // rbx\n
    unsigned long v2;  // al, Other Possible Types: unsigned long long, char\n
    char v3[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // r15, Other Possible Types: unsigned int, unsigned long long\n
    unsigned long v5;  // rbx\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // r12, Other Possible Types: unsigned long long\n
    unsigned long v8;  // rbx\n
    char v9[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rax\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
\n
    v1 = 0;\n
    *(&v1) = *(a0) == 45;\n
    v2 = v1[a0];\n
    if (v1[a0])\n
    {\n
        v3 = &v1[a0];\n
        while (true)\n
        {\n
            v2 = cgc_isdigit(v2);\n
            if (!v2)\n
                break;\n
LABEL_406780:\n
            v2 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v2)\n
                goto LABEL_4067b0;\n
        }\n
        if (!(!cgc_isspace(*(v3))))\n
            goto LABEL_406780;\n
        v4 = -0x80000000;\n
        if (!(!*(v3)))\n
            goto LABEL_4067c2;\n
    }\n
LABEL_4067b0:\n
    v4 = cgc_strtol(a0, NULL, 10);\n
LABEL_4067c2:\n
    v5 = 0;\n
    *(&v5) = *(a0) == 45;\n
    *(&v2) = *((a0 + v5));\n
    if (*((a0 + v5)))\n
    {\n
        v6 = v5 + a0;\n
        while (true)\n
        {\n
            v2 = cgc_isxdigit(v2);\n
            if (!v2)\n
                break;\n
LABEL_4067e0:\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                goto LABEL_406810;\n
        }\n
        if (!(!cgc_isspace(*(v6))))\n
            goto LABEL_4067e0;\n
        v7 = -0x80000000;\n
        if (!(!*(v6)))\n
            goto LABEL_406822;\n
    }\n
LABEL_406810:\n
    v7 = cgc_strtol(a0, NULL, 16);\n
LABEL_406822:\n
    v8 = 0;\n
    *(&v8) = *(a0) == 45;\n
    *(&v2) = *((a0 + v8));\n
    if (*((a0 + v8)))\n
    {\n
        v9 = v8 + a0;\n
        while (true)\n
        {\n
            v10 = cgc_isdigit(v2);\n
            if (v10 && !(cgc_digittoint(*(v9)) & 248))\n
                goto LABEL_40684c;\n
            if (!cgc_isspace(*(v9)))\n
            {\n
                v11 = -0x80000000;\n
                if (*(v9))\n
                {\n
                    if (v4 == 2147483647)\n
                        goto LABEL_4068aa;\n
                    goto LABEL_4068a1;\n
                }\n
                goto LABEL_406889;\n
            }\n
LABEL_40684c:\n
            v2 = *((v9 + 1));\n
            v9 += 1;\n
            if (!v2)\n
                goto LABEL_406889;\n
        }\n
        goto LABEL_4068aa;\n
    }\n
LABEL_406889:\n
    v11 = cgc_strtol(a0, NULL, 8);\n
    if (v4 == 2147483647)\n
        goto LABEL_4068aa;\n
LABEL_4068a1:\n
    if (!(v4 == -0x80000000))\n
        goto LABEL_4068d7;\n
LABEL_4068aa:\n
    if (v7 != 2147483647)\n
    {\n
        v4 = v7;\n
        if (!(v7 == -0x80000000))\n
            goto LABEL_4068d7;\n
    }\n
    if (v11 == -0x80000000)\n
        return 4294967295;\n
    v4 = v11;\n
    if (v11 == 2147483647)\n
        return 4294967295;\n
LABEL_4068d7:\n
    *(a1) = v4;\n
    return 1;\n
}\n
", "4220787:sub_406773": null, "4220890:sub_4067da": null, "4220986:sub_40683a": null, "4221163:sub_4068eb": null, "4221168:_ZN2VC4REPLEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[520];\n
    unsigned int field_218;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
extern void* cgc_stdout;\n
\n
long long VC::REPL(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx\n
    unsigned long long v4;  // rax\n
    unsigned long long v5;  // rcx\n
    unsigned long long v6;  // r8\n
    unsigned long long v7;  // r9\n
\n
    v0 = v2;\n
    v3 = &a0->padding_10[8];\n
    while (true)\n
    {\n
        VC::DrawScreen(a0);\n
        cgc_fflush(cgc_stdout);\n
        cgc_memset(v3, 0x100, NULL);\n
        if (cgc_freaduntil(v3, 0x100, 10, a0->field_8) <= 0)\n
            cgc_exit();\n
        if (cgc_strlen(v3) >= 257)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Input too long\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            return VC::ManualPush(cgc_stderr, \"Assertion Failed: Input too long\\n
\", 10, v5, v6, v7);\n
        }\n
        v4 = cgc_strcmp(v3, \"quit\");\n
        if (!v4)\n
        {\n
            return v4;\n
        }\n
        else if (VC::ProcessInput(a0, v3) < 0)\n
        {\n
            cgc_sprintf(&a0->padding_10[264], \"Error: Invalid input\\n
\");\n
            a0->field_218 = 1;\n
        }\n
    }\n
}\n
", "4221424:_ZN2VC10ManualPushEi": "typedef struct struct_2 {\n
    char padding_0[544];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::ManualPush(struct_2 *a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx\n
    unsigned int *v4;  // rax, Other Possible Types: unsigned long\n
    unsigned int v5;  // ecx\n
    unsigned long v6;  // rbp\n
    unsigned int *v7;  // rdi\n
    unsigned long v8;  // r15\n
\n
    v0 = v2;\n
    v3 = a0->field_220->field_0;\n
    v4 = v3->field_c;\n
    if (v4 != v3->field_8)\n
    {\n
        v8 = v3->field_0;\n
    }\n
    else\n
    {\n
        v5 = v3->field_10;\n
        v6 = v5 * ((0 CONCAT v4) /m v5 + 1);\n
        v8 = operator new[](v6 * 16);\n
        cgc_memcpy(v8, v3->field_0, v3->field_8 * 4);\n
        v7 = v3->field_0;\n
        if (v7)\n
            operator delete[](v7);\n
        v3->field_0 = v8;\n
        v3->field_8 = v6;\n
        v4 = v3->field_c;\n
    }\n
    *((v8 + v4 * 4)) = a1;\n
    v3->field_c = v3->field_c + 1;\n
    return 0;\n
}\n
", "4221550:sub_406a6e": null, "4221552:_ZN2VC3AddEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Add(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Sub(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v6) + Vector::RemoveLast(v4);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4221824:_ZN2VC3SubEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Sub(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Mul(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v6) - Vector::RemoveLast(v4);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4222096:_ZN2VC3MulEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Mul(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Div(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v4) * Vector::RemoveLast(v6);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4222368:_ZN2VC3DivEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Div(struct_2 *a0)\n
{\n
    struct_2 *v1;  // rbx\n
    struct_0 *v2;  // rdi\n
    unsigned int v3;  // ebp\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // rax\n
    struct_0 *v8;  // rbx\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
    unsigned int v14;  // ecx\n
    unsigned long v15;  // rbp\n
    unsigned long v16;  // r15\n
    struct_0 *v17;  // rbp\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
    unsigned int v19;  // ecx\n
    unsigned long v20;  // r12\n
    unsigned long v21;  // r14\n
    struct_0 *v22;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v23;  // rdi\n
    unsigned int *v24;  // rdi\n
    unsigned int *v25;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v27;  // rax, Other Possible Types: unsigned long\n
    unsigned int v28;  // ecx\n
    unsigned long v29;  // rbp\n
    unsigned long v30;  // r14\n
    unsigned int *v31;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0;\n
    if (v2->field_c <= 1)\n
    {\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v1->field_218 = 1;\n
    }\n
    else\n
    {\n
        v3 = Vector::RemoveLast(v2);\n
        v4 = v1->field_220->field_0;\n
        if (!v4->field_c)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            return VC::Fact(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v9, v10, v11, v12);\n
        }\n
        v5 = Vector::RemoveLast(v4);\n
        if (!v3)\n
        {\n
            cgc_sprintf(&v1->padding_0[280], \"Error: Invalid input\\n
\");\n
            v1->field_218 = 1;\n
            v17 = v1->field_220->field_0;\n
            v18 = v17->field_c;\n
            if (v18 != v17->field_8)\n
            {\n
                v21 = v17->field_0;\n
                v22 = v17;\n
            }\n
            else\n
            {\n
                v19 = v17->field_10;\n
                v20 = v19 * ((0 CONCAT v18) /m v19 + 1);\n
                v21 = operator new[](v20 * 16);\n
                cgc_memcpy(v21, v17->field_0, v17->field_8 * 4);\n
                v24 = v17->field_0;\n
                if (v24)\n
                    operator delete[](v24);\n
                v17->field_0 = v21;\n
                v17->field_8 = v20;\n
                v18 = v17->field_c;\n
                v22 = v1->field_220->field_0;\n
            }\n
            *((v21 + v18 * 4)) = v5;\n
            v17->field_c = v17->field_c + 1;\n
            v27 = *((v22 + 12));\n
            if (v27 != *((v22 + 8)))\n
            {\n
                v30 = *(v22);\n
            }\n
            else\n
            {\n
                v28 = *((v22 + 16));\n
                v29 = v28 * ((0 CONCAT v27) /m v28 + 1);\n
                v30 = operator new[](v29 * 16);\n
                cgc_memcpy(v30, *(v22), *((v22 + 8)) * 4);\n
                v31 = *(v22);\n
                if (v31)\n
                    operator delete[](v31);\n
                *(v22) = v30;\n
                *((v22 + 8)) = v29;\n
                v27 = *((v22 + 12));\n
            }\n
            *((v30 + v27 * 4)) = 0;\n
            *((v22 + 12)) = *((v22 + 12)) + 1;\n
        }\n
        else\n
        {\n
            v8 = v1->field_220->field_0;\n
            v25 = v8->field_c;\n
            if (v25 != v8->field_8)\n
            {\n
                v16 = v8->field_0;\n
            }\n
            else\n
            {\n
                v14 = v8->field_10;\n
                v15 = v14 * ((0 CONCAT v25) /m v14 + 1);\n
                v16 = operator new[](v15 * 16);\n
                cgc_memcpy(v16, v8->field_0, v8->field_8 * 4);\n
                v23 = v8->field_0;\n
                if (v23)\n
                    operator delete[](v23);\n
                v8->field_0 = v16;\n
                v8->field_8 = v15;\n
                v25 = v8->field_c;\n
            }\n
            *((v16 + v25 * 4)) = (v5 >> 31 CONCAT v5) /m v3;\n
            v8->field_c = v8->field_c + 1;\n
            return 0;\n
        }\n
    }\n
    return 2;\n
}\n
", "4222912:_ZN2VC4FactEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Fact(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    int tmp_761;  // tmp #761\n
    int tmp_693;  // tmp #693\n
    int tmp_695;  // tmp #695\n
    int tmp_694;  // tmp #694\n
    int tmp_753;  // tmp #753\n
    int tmp_755;  // tmp #755\n
    int tmp_754;  // tmp #754\n
    int tmp_274;  // tmp #274\n
    int tmp_197;  // tmp #197\n
    int tmp_199;  // tmp #199\n
    int tmp_198;  // tmp #198\n
    int tmp_266;  // tmp #266\n
    int tmp_268;  // tmp #268\n
    int tmp_267;  // tmp #267\n
    int tmp_20;  // tmp #20\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // r14\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // rax\n
    unsigned long v6;  // rbx, Other Possible Types: unsigned long long\n
    struct_0 *v7;  // rbp\n
    unsigned int v8;  // ecx\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long long v11;  // rax\n
    int v12;  // xmm0\n
    int v13;  // xmm6\n
    unsigned long long v14;  // rsi\n
    unsigned int v15;  // edx\n
    unsigned long v16;  // rcx, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm2\n
    unsigned long v19;  // rdx, Other Possible Types: unsigned long long\n
    unsigned int *v20;  // rdi\n
    unsigned int *v21;  // rax, Other Possible Types: unsigned long\n
    int v23;  // xmm1\n
    unsigned int v24;  // ebp\n
    struct_0 *v25;  // rbx\n
    unsigned int *v26;  // rax, Other Possible Types: unsigned long\n
    unsigned int v27;  // ecx\n
    unsigned long v28;  // r15\n
    unsigned long v29;  // r14\n
    unsigned int *v30;  // rdi\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v5 = Vector::RemoveLast(v4);\n
    v6 = v5;\n
    if (v5 > 1000)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Invalid input\\n
\");\n
        v3->field_218 = 1;\n
        v7 = v3->field_220->field_0;\n
        v21 = v7->field_c;\n
        if (v21 != v7->field_8)\n
        {\n
            v10 = v7->field_0;\n
        }\n
        else\n
        {\n
            v8 = v7->field_10;\n
            v9 = v8 * ((0 CONCAT v21) /m v8 + 1);\n
            v10 = operator new[](v9 * 16);\n
            cgc_memcpy(v10, v7->field_0, v7->field_8 * 4);\n
            v20 = v7->field_0;\n
            if (v20)\n
                operator delete[](v20);\n
            v7->field_0 = v10;\n
            v7->field_8 = v9;\n
            v21 = v7->field_c;\n
        }\n
        *((v10 + v21 * 4)) = v6;\n
        v7->field_c = v7->field_c + 1;\n
        return 2;\n
    }\n
    else\n
    {\n
        v24 = 1;\n
        if (v5)\n
        {\n
            if (v5 >= 8)\n
            {\n
                v11 = v5 & -8;\n
                xmm0<16> = Conv(64->128, rbx<8>)\n
                v13 = (v12 CONCAT v12 CONCAT v12 CONCAT v12) + 0xfffffffdfffffffeffffffff00000000;\n
                v14 = v11 - 8;\n
                v15 = (v14 >> 3) + 1;\n
                v16 = v15 & 3;\n
                if (v14 < 24)\n
                {\n
                    v17 = 79228162532711081671548469249;\n
                    v18 = 79228162532711081671548469249;\n
                }\n
                else\n
                {\n
                    v19 = v15 & -0x4;\n
                    do\n
                    {\n
                        tmp_693 = InterleaveLOV(tmp_695, tmp_694);\n
                        v17 = tmp_693;\n
                        tmp_753 = InterleaveLOV(tmp_755, tmp_754);\n
                        v18 = tmp_753;\n
                        v13 += 340282364464865424949331075613765664736;\n
                        tmp_761 = v19;\n
                        v19 = v19 - 4;\n
                    } while (tmp_761 + -0x4);\n
                }\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        tmp_197 = InterleaveLOV(tmp_199, tmp_198);\n
                        v17 = tmp_197;\n
                        tmp_266 = InterleaveLOV(tmp_268, tmp_267);\n
                        v18 = tmp_266;\n
                        v13 += 340282366366341325734397035730928926712;\n
                        tmp_274 = v16;\n
                        v16 = v16 - 1;\n
                    } while (tmp_274 + -1);\n
                }\n
                v23 = ...;\n
                v24 = v23;\n
                if (v6 == v11)\n
                    goto LABEL_40730d;\n
                v6 = v6 & 7;\n
            }\n
            do\n
            {\n
                v24 = v6 * v24;\n
                tmp_20 = v6;\n
                v6 -= 1;\n
            } while (tmp_20 > 1);\n
        }\n
LABEL_40730d:\n
        v25 = v3->field_220->field_0;\n
        v26 = v25->field_c;\n
        if (v26 != v25->field_8)\n
        {\n
            v29 = v25->field_0;\n
        }\n
        else\n
        {\n
            v27 = v25->field_10;\n
            v28 = v27 * ((0 CONCAT v26) /m v27 + 1);\n
            v29 = operator new[](v28 * 16);\n
            cgc_memcpy(v29, v25->field_0, v25->field_8 * 4);\n
            v30 = v25->field_0;\n
            if (v30)\n
                operator delete[](v30);\n
            v25->field_0 = v29;\n
            v25->field_8 = v28;\n
            v26 = v25->field_c;\n
        }\n
        *((v29 + v26 * 4)) = v24;\n
        v25->field_c = v25->field_c + 1;\n
        return 0;\n
    }\n
}\n
", "4223877:sub_407385": null, "4223888:_ZN2VC3NegEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Neg(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rbx\n
    unsigned int v7;  // ecx\n
    unsigned long v8;  // rbp\n
    unsigned long v9;  // r15\n
    unsigned int *v10;  // rdi\n
    unsigned int *v11;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    v11 = v6->field_c;\n
    if (v11 != v6->field_8)\n
    {\n
        v9 = v6->field_0;\n
    }\n
    else\n
    {\n
        v7 = v6->field_10;\n
        v8 = v7 * ((0 CONCAT v11) /m v7 + 1);\n
        v9 = operator new[](v8 * 16);\n
        cgc_memcpy(v9, v6->field_0, v6->field_8 * 4);\n
        v10 = v6->field_0;\n
        if (v10)\n
            operator delete[](v10);\n
        v6->field_0 = v9;\n
        v6->field_8 = v8;\n
        v11 = v6->field_c;\n
    }\n
    *((v9 + v11 * 4)) = -(Vector::RemoveLast(v4));\n
    v6->field_c = v6->field_c + 1;\n
    return 0;\n
}\n
", "4224086:sub_407456": null, "4224096:_ZN2VC3AbsEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Abs(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // rax\n
    struct_0 *v7;  // rbx\n
    struct_0 *v9;  // rbp\n
    unsigned int *v10;  // rax, Other Possible Types: unsigned long\n
    unsigned int v11;  // ecx\n
    unsigned long v12;  // rbp\n
    unsigned long v13;  // r14\n
    unsigned int v14;  // ecx\n
    unsigned long v15;  // rbx\n
    unsigned long v16;  // r14\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rdi\n
    unsigned int *v19;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v5 = Vector::RemoveLast(v4);\n
    if (v5 <= 0)\n
    {\n
        v9 = v3->field_220->field_0;\n
        v10 = v9->field_c;\n
        if (v10 != v9->field_8)\n
        {\n
            v16 = v9->field_0;\n
        }\n
        else\n
        {\n
            v14 = v9->field_10;\n
            v15 = v14 * ((0 CONCAT v10) /m v14 + 1);\n
            v16 = operator new[](v15 * 16);\n
            cgc_memcpy(v16, v9->field_0, v9->field_8 * 4);\n
            v18 = v9->field_0;\n
            if (v18)\n
                operator delete[](v18);\n
            v9->field_0 = v16;\n
            v9->field_8 = v15;\n
            v10 = v9->field_c;\n
        }\n
        *((v16 + v10 * 4)) = -(v5);\n
        v9->field_c = v9->field_c + 1;\n
    }\n
    else\n
    {\n
        v7 = v3->field_220->field_0;\n
        v19 = v7->field_c;\n
        if (v19 != v7->field_8)\n
        {\n
            v13 = v7->field_0;\n
        }\n
        else\n
        {\n
            v11 = v7->field_10;\n
            v12 = v11 * ((0 CONCAT v19) /m v11 + 1);\n
            v13 = operator new[](v12 * 16);\n
            cgc_memcpy(v13, v7->field_0, v7->field_8 * 4);\n
            v17 = v7->field_0;\n
            if (v17)\n
                operator delete[](v17);\n
            v7->field_0 = v13;\n
            v7->field_8 = v12;\n
            v19 = v7->field_c;\n
        }\n
        *((v13 + v19 * 4)) = v5;\n
        v7->field_c = v7->field_c + 1;\n
    }\n
    return 0;\n
}\n
", "4224418:sub_4075a2": null, "4224432:_ZN2VC3ModEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Mod(struct_2 *a0)\n
{\n
    struct_2 *v1;  // rbx\n
    struct_0 *v2;  // rdi\n
    unsigned int v3;  // ebp\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // rax\n
    struct_0 *v8;  // rbx\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
    unsigned int v14;  // ecx\n
    unsigned long v15;  // rbp\n
    unsigned long v16;  // r15\n
    struct_0 *v17;  // rbp\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
    unsigned int v19;  // ecx\n
    unsigned long v20;  // r12\n
    unsigned long v21;  // r14\n
    struct_0 *v22;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v23;  // rdi\n
    unsigned int *v24;  // rdi\n
    unsigned int *v25;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v27;  // rax, Other Possible Types: unsigned long\n
    unsigned int v28;  // ecx\n
    unsigned long v29;  // rbp\n
    unsigned long v30;  // r14\n
    unsigned int *v31;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0;\n
    if (v2->field_c <= 1)\n
    {\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v1->field_218 = 1;\n
    }\n
    else\n
    {\n
        v3 = Vector::RemoveLast(v2);\n
        v4 = v1->field_220->field_0;\n
        if (!v4->field_c)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            return VC::And(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v9, v10, v11, v12);\n
        }\n
        v5 = Vector::RemoveLast(v4);\n
        if (!v3)\n
        {\n
            cgc_sprintf(&v1->padding_0[280], \"Error: Invalid input\\n
\");\n
            v1->field_218 = 1;\n
            v17 = v1->field_220->field_0;\n
            v18 = v17->field_c;\n
            if (v18 != v17->field_8)\n
            {\n
                v21 = v17->field_0;\n
                v22 = v17;\n
            }\n
            else\n
            {\n
                v19 = v17->field_10;\n
                v20 = v19 * ((0 CONCAT v18) /m v19 + 1);\n
                v21 = operator new[](v20 * 16);\n
                cgc_memcpy(v21, v17->field_0, v17->field_8 * 4);\n
                v24 = v17->field_0;\n
                if (v24)\n
                    operator delete[](v24);\n
                v17->field_0 = v21;\n
                v17->field_8 = v20;\n
                v18 = v17->field_c;\n
                v22 = v1->field_220->field_0;\n
            }\n
            *((v21 + v18 * 4)) = v5;\n
            v17->field_c = v17->field_c + 1;\n
            v27 = *((v22 + 12));\n
            if (v27 != *((v22 + 8)))\n
            {\n
                v30 = *(v22);\n
            }\n
            else\n
            {\n
                v28 = *((v22 + 16));\n
                v29 = v28 * ((0 CONCAT v27) /m v28 + 1);\n
                v30 = operator new[](v29 * 16);\n
                cgc_memcpy(v30, *(v22), *((v22 + 8)) * 4);\n
                v31 = *(v22);\n
                if (v31)\n
                    operator delete[](v31);\n
                *(v22) = v30;\n
                *((v22 + 8)) = v29;\n
                v27 = *((v22 + 12));\n
            }\n
            *((v30 + v27 * 4)) = 0;\n
            *((v22 + 12)) = *((v22 + 12)) + 1;\n
        }\n
        else\n
        {\n
            v8 = v1->field_220->field_0;\n
            v25 = v8->field_c;\n
            if (v25 != v8->field_8)\n
            {\n
                v16 = v8->field_0;\n
            }\n
            else\n
            {\n
                v14 = v8->field_10;\n
                v15 = v14 * ((0 CONCAT v25) /m v14 + 1);\n
                v16 = operator new[](v15 * 16);\n
                cgc_memcpy(v16, v8->field_0, v8->field_8 * 4);\n
                v23 = v8->field_0;\n
                if (v23)\n
                    operator delete[](v23);\n
                v8->field_0 = v16;\n
                v8->field_8 = v15;\n
                v25 = v8->field_c;\n
            }\n
            *((v16 + v25 * 4)) = (v5 >> 31 CONCAT v5) /m v3 >> 32;\n
            v8->field_c = v8->field_c + 1;\n
            return 0;\n
        }\n
    }\n
    return 2;\n
}\n
", "4224976:_ZN2VC3AndEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::And(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Or(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v6) & Vector::RemoveLast(v4);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4225248:_ZN2VC2OrEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Or(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Xor(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v6) | Vector::RemoveLast(v4);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4225520:_ZN2VC3XorEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Xor(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rdi\n
    unsigned int v7;  // r14d\n
    struct_0 *v8;  // rbx\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // rbp\n
    unsigned long v11;  // r15\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned int *v17;  // rdi\n
    unsigned int *v18;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Not(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v12, v13, v14, v15);\n
    }\n
    v7 = Vector::RemoveLast(v6) ^ Vector::RemoveLast(v4);\n
    v8 = v3->field_220->field_0;\n
    v18 = v8->field_c;\n
    if (v18 != v8->field_8)\n
    {\n
        v11 = v8->field_0;\n
    }\n
    else\n
    {\n
        v9 = v8->field_10;\n
        v10 = v9 * ((0 CONCAT v18) /m v9 + 1);\n
        v11 = operator new[](v10 * 16);\n
        cgc_memcpy(v11, v8->field_0, v8->field_8 * 4);\n
        v17 = v8->field_0;\n
        if (v17)\n
            operator delete[](v17);\n
        v8->field_0 = v11;\n
        v8->field_8 = v10;\n
        v18 = v8->field_c;\n
    }\n
    *((v11 + v18 * 4)) = v7;\n
    v8->field_c = v8->field_c + 1;\n
    return 0;\n
}\n
", "4225792:_ZN2VC3NotEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Not(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    struct_0 *v6;  // rbx\n
    unsigned int v7;  // ecx\n
    unsigned long v8;  // rbp\n
    unsigned long v9;  // r15\n
    unsigned int *v10;  // rdi\n
    unsigned int *v11;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v6 = v3->field_220->field_0;\n
    v11 = v6->field_c;\n
    if (v11 != v6->field_8)\n
    {\n
        v9 = v6->field_0;\n
    }\n
    else\n
    {\n
        v7 = v6->field_10;\n
        v8 = v7 * ((0 CONCAT v11) /m v7 + 1);\n
        v9 = operator new[](v8 * 16);\n
        cgc_memcpy(v9, v6->field_0, v6->field_8 * 4);\n
        v10 = v6->field_0;\n
        if (v10)\n
            operator delete[](v10);\n
        v6->field_0 = v9;\n
        v6->field_8 = v8;\n
        v11 = v6->field_c;\n
    }\n
    *((v9 + v11 * 4)) = ~(Vector::RemoveLast(v4));\n
    v6->field_c = v6->field_c + 1;\n
    return 0;\n
}\n
", "4225990:sub_407bc6": null, "4226000:_ZN2VC3SumEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Sum(struct_2 *a0)\n
{\n
    struct_2 *v1;  // r15\n
    struct_0 *v2;  // rdi\n
    unsigned int v3;  // r12d\n
    struct_0 *v4;  // rbp\n
    unsigned int v5;  // ecx\n
    unsigned long v6;  // r15\n
    unsigned long v7;  // r14\n
    void* v8;  // rbp, Other Possible Types: unsigned long, unsigned int\n
    unsigned int v9;  // r12d\n
    struct_0 *v10;  // r14, Other Possible Types: unsigned long\n
    unsigned int *v11;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v12;  // rdi\n
    unsigned int v13;  // ecx\n
    unsigned long v14;  // rbx\n
    unsigned long v15;  // r15\n
    unsigned int *v16;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v18;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0;\n
    if (v2->field_c <= 0)\n
    {\n
LABEL_407c7f:\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v1->field_218 = 1;\n
        return 2;\n
    }\n
    v3 = Vector::RemoveLast(v2);\n
    if (v3 >= 0)\n
    {\n
        v10 = v1->field_220->field_0;\n
        v11 = v10->field_c;\n
        if (v11 >= v3)\n
        {\n
            if (!v3)\n
            {\n
                v8 = 0;\n
                if (v11 != v10->field_8)\n
                {\n
LABEL_407db9:\n
                    v15 = *(v10);\n
LABEL_407dbc:\n
                    *((v15 + v11 * 4)) = v8;\n
                    *((v10 + 12)) = *((v10 + 12)) + 1;\n
                    return 0;\n
                }\n
LABEL_407d50:\n
                v13 = *((v10 + 16));\n
                v14 = v13 * ((0 CONCAT v11) /m v13 + 1);\n
                v15 = operator new[](v14 * 16);\n
                cgc_memcpy(v15, *(v10), *((v10 + 8)) * 4);\n
                v18 = *(v10);\n
                if (v18)\n
                    operator delete[](v18);\n
                *(v10) = v15;\n
                *((v10 + 8)) = v14;\n
                v11 = *((v10 + 12));\n
                goto LABEL_407dbc;\n
            }\n
            if (v11)\n
            {\n
                v9 = v3 + 1;\n
                v8 = 0;\n
                do\n
                {\n
                    v8 = Vector::RemoveLast(v10) + v8;\n
                    v9 -= 1;\n
                    if (v9 < 2)\n
                    {\n
                        v10 = v1->field_220->field_0;\n
                        v11 = *((v10 + 12));\n
                        if (!(v11 == *((v10 + 8))))\n
                            goto LABEL_407db9;\n
                        goto LABEL_407d50;\n
                    }\n
                    v10 = v1->field_220->field_0;\n
                } while (*((v10 + 12)));\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            goto LABEL_407c7f;\n
        }\n
    }\n
    cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
    v1->field_218 = 1;\n
    v4 = v1->field_220->field_0;\n
    v16 = v4->field_c;\n
    if (v16 != v4->field_8)\n
    {\n
        v7 = v4->field_0;\n
    }\n
    else\n
    {\n
        v5 = v4->field_10;\n
        v6 = v5 * ((0 CONCAT v16) /m v5 + 1);\n
        v7 = operator new[](v6 * 16);\n
        cgc_memcpy(v7, v4->field_0, v4->field_8 * 4);\n
        v12 = v4->field_0;\n
        if (v12)\n
            operator delete[](v12);\n
        v4->field_0 = v7;\n
        v4->field_8 = v6;\n
        v16 = v4->field_c;\n
    }\n
    *((v7 + v16 * 4)) = v3;\n
    v4->field_c = v4->field_c + 1;\n
    return 2;\n
}\n
", "4226514:sub_407dd2": null, "4226528:_ZN2VC3AvgEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Avg(struct_2 *a0)\n
{\n
    struct_2 *v1;  // r15\n
    struct_0 *v2;  // rdi\n
    unsigned long long v3;  // rax\n
    unsigned int v4;  // r14d\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned long v7;  // rbp\n
    unsigned long v8;  // r14\n
    void* v9;  // rax, Other Possible Types: unsigned long\n
    unsigned int v10;  // ebx\n
    struct_0 *v11;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v12;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v13;  // r12, Other Possible Types: unsigned long\n
    unsigned int *v14;  // rcx, Other Possible Types: unsigned long\n
    unsigned int v15;  // ecx\n
    unsigned long v16;  // rbp\n
    unsigned long v17;  // r15\n
    unsigned int *v18;  // rdi\n
    unsigned int v19;  // r14d\n
    unsigned int v20;  // esi\n
    unsigned long v21;  // rbx\n
    unsigned long v22;  // r15\n
    unsigned int *v23;  // rdi\n
    unsigned int *v24;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v26;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0;\n
    if (v2->field_c <= 0)\n
    {\n
LABEL_407e8a:\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v1->field_218 = 1;\n
        return 2;\n
    }\n
    v3 = Vector::RemoveLast(v2);\n
    if (!v3)\n
    {\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Invalid input\\n
\");\n
        v1->field_218 = 1;\n
        v11 = v1->field_220->field_0;\n
        v24 = v11->field_c;\n
        if (v24 != v11->field_8)\n
        {\n
            v8 = v11->field_0;\n
        }\n
        else\n
        {\n
            v6 = v11->field_10;\n
            v7 = v6 * ((0 CONCAT v24) /m v6 + 1);\n
            v8 = operator new[](v7 * 16);\n
            cgc_memcpy(v8, v11->field_0, v11->field_8 * 4);\n
            v18 = v11->field_0;\n
            if (v18)\n
                operator delete[](v18);\n
            v11->field_0 = v8;\n
            v11->field_8 = v7;\n
            v24 = v11->field_c;\n
        }\n
        *((v8 + v24 * 4)) = 0;\n
        goto LABEL_40803c;\n
    }\n
    v4 = v3;\n
    if (v3 >= 0)\n
    {\n
        v13 = v1->field_220->field_0;\n
        v5 = v13->field_c;\n
        if (v5 >= v4)\n
        {\n
            if (v5)\n
            {\n
                v9 = 0;\n
                v10 = v4;\n
                do\n
                {\n
                    v9 = Vector::RemoveLast(v13) + v9;\n
                    v13 = v1->field_220->field_0;\n
                    v14 = *((v13 + 12));\n
                    v10 -= 1;\n
                    if (!v4 + -1)\n
                    {\n
                        v19 = (v9 >> 31 CONCAT v9) /m v4;\n
                        if (v14 != *((v13 + 8)))\n
                        {\n
                            v22 = *(v13);\n
                        }\n
                        else\n
                        {\n
                            v20 = *((v13 + 16));\n
                            v21 = v20 * ((0 CONCAT v14) /m v20 + 1);\n
                            v22 = operator new[](v21 * 16);\n
                            cgc_memcpy(v22, *(v13), *((v13 + 8)) * 4);\n
                            v26 = *(v13);\n
                            if (v26)\n
                                operator delete[](v26);\n
                            *(v13) = v22;\n
                            *((v13 + 8)) = v21;\n
                            v14 = *((v13 + 12));\n
                        }\n
                        *((v22 + v14 * 4)) = v19;\n
                        *((v13 + 12)) = *((v13 + 12)) + 1;\n
                        return 0;\n
                    }\n
                } while (v14);\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            goto LABEL_407e8a;\n
        }\n
    }\n
    cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
    v1->field_218 = 1;\n
    v11 = v1->field_220->field_0;\n
    v12 = *((v11 + 12));\n
    if (v12 != *((v11 + 8)))\n
    {\n
        v17 = *(v11);\n
    }\n
    else\n
    {\n
        v15 = *((v11 + 16));\n
        v16 = v15 * ((0 CONCAT v12) /m v15 + 1);\n
        v17 = operator new[](v16 * 16);\n
        cgc_memcpy(v17, *(v11), *((v11 + 8)) * 4);\n
        v23 = *(v11);\n
        if (v23)\n
            operator delete[](v23);\n
        *(v11) = v17;\n
        *((v11 + 8)) = v16;\n
        v12 = *((v11 + 12));\n
    }\n
    *((v17 + v12 * 4)) = v4;\n
LABEL_40803c:\n
    *((v11 + 12)) = *((v11 + 12)) + 1;\n
    return 2;\n
}\n
", "4227170:sub_408062": null, "4227184:_ZN2VC3DupEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Dup(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ecx\n
    unsigned long v6;  // r14\n
    unsigned int *v7;  // rdi\n
    unsigned int *v8;  // rax, Other Possible Types: unsigned long\n
    unsigned long v9;  // r15\n
\n
    v0 = v2;\n
    v3 = a0->field_220->field_0;\n
    v8 = v3->field_c;\n
    if (v8 <= 0)\n
    {\n
        cgc_sprintf(&a0->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        a0->field_218 = 1;\n
        return 2;\n
    }\n
    v9 = v3->field_0;\n
    v4 = *((v9 + (v8 + 1) * 4));\n
    if (v8 == v3->field_8)\n
    {\n
        v5 = v3->field_10;\n
        v6 = v5 * ((0 CONCAT v8) /m v5 + 1);\n
        v9 = operator new[](v6 * 16);\n
        cgc_memcpy(v9, v3->field_0, v3->field_8 * 4);\n
        v7 = v3->field_0;\n
        if (v7)\n
            operator delete[](v7);\n
        v3->field_0 = v9;\n
        v3->field_8 = v6;\n
        v8 = v3->field_c;\n
    }\n
    *((v9 + v8 * 4)) = v4;\n
    v3->field_c = v3->field_c + 1;\n
    return 0;\n
}\n
", "4227369:sub_408129": null, "4227376:_ZN2VC4DupNEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::DupN(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // rax\n
    struct_0 *v7;  // rbp\n
    unsigned int v8;  // ecx\n
    unsigned long v9;  // rbx\n
    unsigned long v10;  // r14\n
    unsigned int *v11;  // rdi\n
    unsigned int *v12;  // rax, Other Possible Types: unsigned long\n
    unsigned long v13;  // rax, Other Possible Types: unsigned long long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
    }\n
    else\n
    {\n
        v5 = Vector::RemoveLast(v4);\n
        v13 = VC::DupN(v3, v5);\n
        if (v13 != 2)\n
            return v13;\n
        v7 = v3->field_220->field_0;\n
        v12 = v7->field_c;\n
        if (v12 != v7->field_8)\n
        {\n
            v10 = v7->field_0;\n
        }\n
        else\n
        {\n
            v8 = v7->field_10;\n
            v9 = v8 * ((0 CONCAT v12) /m v8 + 1);\n
            v10 = operator new[](v9 * 16);\n
            cgc_memcpy(v10, v7->field_0, v7->field_8 * 4);\n
            v11 = v7->field_0;\n
            if (v11)\n
                operator delete[](v11);\n
            v7->field_0 = v10;\n
            v7->field_8 = v9;\n
            v12 = v7->field_c;\n
        }\n
        *((v10 + v12 * 4)) = v5;\n
        v7->field_c = v7->field_c + 1;\n
    }\n
    return 2;\n
}\n
", "4227592:sub_408208": null, "4227600:_ZN2VC4DupNEi": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned int field_10;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::DupN(struct_2 *a0, unsigned long a1)\n
{\n
    struct_2 *v0;  // [bp-0x40]\n
    int tmp_8;  // tmp #8\n
    unsigned long long *v1;  // [bp-0x38]\n
    unsigned long long *v3;  // rbx\n
    struct_4 *v5;  // r14\n
    struct_0 *v6;  // rdx\n
    unsigned int *v7;  // rsi\n
    unsigned int v8;  // ecx\n
    unsigned long v9;  // rbp\n
    unsigned int *v10;  // r12, Other Possible Types: unsigned long\n
    unsigned int *v11;  // rdi\n
    unsigned long v12;  // rcx\n
    struct_2 *v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v15;  // eax\n
    unsigned long v16;  // r13, Other Possible Types: unsigned long long\n
    struct_0 *v18;  // rbx\n
    unsigned int *v19;  // rax, Other Possible Types: unsigned long\n
    unsigned long v20;  // r13\n
    unsigned int v21;  // ecx\n
    unsigned long v22;  // rbp\n
    unsigned int *v23;  // rdi\n
\n
    if (a1 > 0 && a0->field_220->field_0->field_c >= a1)\n
    {\n
        v3 = operator new(8);\n
        v5 = operator new(24);\n
        v5->field_10 = 10;\n
        *(&v5->field_8) = 10;\n
        v10 = operator new[](160);\n
        v5->field_0 = v10;\n
        v1 = v3;\n
        *(v3) = v5;\n
        v14 = a1 - 1;\n
        v12 = 0;\n
        v15 = 10;\n
        v16 = 4294967295;\n
        v13 = a0;\n
        v0 = a0;\n
        while (true)\n
        {\n
            v6 = *(*((v13 + 544)));\n
            v7 = v6->field_c + v16;\n
            if (v12 == v15)\n
            {\n
                v8 = v5->field_10;\n
                v9 = v8 * ((0 CONCAT v15) /m v8 + 1);\n
                v10 = operator new[](v9 * 16);\n
                cgc_memcpy(v10, v5->field_0, v5->field_8 * 4);\n
                v11 = v5->field_0;\n
                if (v11)\n
                    operator delete[](v11);\n
                v5->field_0 = v10;\n
                v5->field_8 = v9;\n
                v12 = v5->padding_c;\n
                v13 = v0;\n
            }\n
            *((v10 + v12 * 4)) = *((&v6->field_0->field_0 + 0x4 * v7));\n
            v12 = (v5->padding_c + 1);\n
            *(&v5->padding_c[0]) = v12;\n
            tmp_8 = v14;\n
            v14 -= 1;\n
            if (tmp_8 < 1)\n
                break;\n
            v15 = v5->field_8;\n
            v16 = v16 - 1;\n
        }\n
        if (v12)\n
        {\n
            do\n
            {\n
                v18 = *(*((v13 + 544)));\n
                v19 = v18->field_c;\n
                if (v19 != v18->field_8)\n
                {\n
                    v20 = v18->field_0;\n
                }\n
                else\n
                {\n
                    v21 = v18->field_10;\n
                    v22 = v21 * ((0 CONCAT v19) /m v21 + 1);\n
                    v20 = operator new[](v22 * 16);\n
                    cgc_memcpy(v20, v18->field_0, v18->field_8 * 4);\n
                    v23 = v18->field_0;\n
                    if (v23)\n
                        operator delete[](v23);\n
                    v18->field_0 = v20;\n
                    v18->field_8 = v22;\n
                    v19 = v18->field_c;\n
                    v13 = v0;\n
                }\n
                *((v20 + v19 * 4)) = Vector::RemoveLast(v5);\n
                v18->field_c = v18->field_c + 1;\n
            } while (v5->padding_c);\n
            v10 = v5->field_0;\n
            if (!v10)\n
                goto LABEL_408370;\n
        }\n
        else if (!v10)\n
        {\n
            goto LABEL_408370;\n
        }\n
        operator delete[](v10);\n
LABEL_408370:\n
        operator delete(v5);\n
        operator delete(v1);\n
        return 0;\n
    }\n
    cgc_sprintf(&a0->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
    a0->field_218 = 1;\n
    return 2;\n
}\n
", "4227987:sub_408393": null, "4228144:_ZN2VC4DupREv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::DupR(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    unsigned long long v5;  // r14\n
    struct_0 *v6;  // rdi\n
    unsigned long long v7;  // rax\n
    unsigned long long v9;  // rdx\n
    unsigned long long v10;  // rcx\n
    unsigned long long v11;  // r8\n
    unsigned long long v12;  // r9\n
    struct_0 *v14;  // rbp\n
    unsigned int *v15;  // rax, Other Possible Types: unsigned long\n
    unsigned int v16;  // ecx\n
    unsigned long v17;  // r13\n
    unsigned long v18;  // r15\n
    struct_0 *v19;  // rbx, Other Possible Types: unsigned long\n
    unsigned int *v20;  // rdi\n
    unsigned int *v21;  // rax, Other Possible Types: unsigned long\n
    unsigned int v22;  // ecx\n
    unsigned long v23;  // rbp\n
    unsigned long v24;  // r15\n
    unsigned int *v25;  // rdi\n
    unsigned long long v26;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
    }\n
    else\n
    {\n
        v5 = Vector::RemoveLast(v4);\n
        v6 = v3->field_220->field_0;\n
        if (!v6->field_c)\n
        {\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
            return VC::DupR(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v9, v10, v11, v12);\n
        }\n
        v7 = Vector::RemoveLast(v6);\n
        v26 = VC::DupR(v3, v7, v5);\n
        if (v26 != 2)\n
            return v26;\n
        v14 = v3->field_220->field_0;\n
        v15 = v14->field_c;\n
        if (v15 != v14->field_8)\n
        {\n
            v18 = v14->field_0;\n
            v19 = v14;\n
        }\n
        else\n
        {\n
            v16 = v14->field_10;\n
            v17 = v16 * ((0 CONCAT v15) /m v16 + 1);\n
            v18 = operator new[](v17 * 16);\n
            cgc_memcpy(v18, v14->field_0, v14->field_8 * 4);\n
            v20 = v14->field_0;\n
            if (v20)\n
                operator delete[](v20);\n
            v14->field_0 = v18;\n
            v14->field_8 = v17;\n
            v15 = v14->field_c;\n
            v19 = v3->field_220->field_0;\n
        }\n
        *((v18 + v15 * 4)) = v7;\n
        v14->field_c = v14->field_c + 1;\n
        v21 = *((v19 + 12));\n
        if (v21 != *((v19 + 8)))\n
        {\n
            v24 = *(v19);\n
        }\n
        else\n
        {\n
            v22 = *((v19 + 16));\n
            v23 = v22 * ((0 CONCAT v21) /m v22 + 1);\n
            v24 = operator new[](v23 * 16);\n
            cgc_memcpy(v24, *(v19), *((v19 + 8)) * 4);\n
            v25 = *(v19);\n
            if (v25)\n
                operator delete[](v25);\n
            *(v19) = v24;\n
            *((v19 + 8)) = v23;\n
            v21 = *((v19 + 12));\n
        }\n
        *((v24 + v21 * 4)) = v5;\n
        *((v19 + 12)) = *((v19 + 12)) + 1;\n
    }\n
    return 2;\n
}\n
", "4228560:_ZN2VC4DupREii": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::DupR(struct_2 *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned long v3;  // rax\n
    struct_0 *v5;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v6;  // ecx\n
    unsigned long v7;  // r13\n
    unsigned int v8;  // r14d\n
    unsigned int v9;  // ecx\n
    unsigned long v10;  // r12\n
    unsigned int *v11;  // rdi\n
    unsigned int *v12;  // rax, Other Possible Types: unsigned long\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // ebx\n
\n
    v0 = v3;\n
    v5 = a0->field_220->field_0;\n
    v12 = v5->field_c;\n
    v14 = a1;\n
    if (v12 >= v14)\n
    {\n
        v6 = a2;\n
        if (v12 >= v6)\n
        {\n
            v13 = v6 + v14;\n
            if (v12 >= v13)\n
            {\n
                if (!v6)\n
                    return 1;\n
                v1 = v13;\n
                while (true)\n
                {\n
                    v7 = *(v5);\n
                    v8 = *((v7 + (~(v14) + v12) * 4));\n
                    if (v12 == *((v5 + 8)))\n
                    {\n
                        v9 = *((v5 + 16));\n
                        v10 = v9 * ((0 CONCAT v12) /m v9 + 1);\n
                        v7 = operator new[](v10 * 16);\n
                        cgc_memcpy(v7, *(v5), *((v5 + 8)) * 4);\n
                        v11 = *(v5);\n
                        if (v11)\n
                            operator delete[](v11);\n
                        *(v5) = v7;\n
                        *((v5 + 8)) = v10;\n
                        v12 = *((v5 + 12));\n
                        v13 = v1;\n
                    }\n
                    *((v7 + v12 * 4)) = v8;\n
                    *((v5 + 12)) = *((v5 + 12)) + 1;\n
                    v14 += 1;\n
                    if (v13 <= v14)\n
                        break;\n
                    v5 = a0->field_220->field_0;\n
                    v12 = *((v5 + 12));\n
                }\n
                return 1;\n
            }\n
        }\n
    }\n
    cgc_sprintf(&a0->padding_0[280], \"Error: Invalid input\\n
\");\n
    a0->field_218 = 1;\n
    return 2;\n
}\n
", "4228841:sub_4086e9": null, "4228848:_ZN2VC3MinEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Min(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    unsigned int v5;  // ebp\n
    struct_0 *v6;  // rdi\n
    unsigned long long v7;  // rax\n
    struct_0 *v9;  // rbp\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned long long v12;  // r8\n
    unsigned long long v13;  // r9\n
    unsigned int v15;  // ecx\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // r14\n
    unsigned int *v18;  // rdi\n
    unsigned int *v19;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v5 = Vector::RemoveLast(v4);\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Max(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v10, v11, v12, v13);\n
    }\n
    v7 = Vector::RemoveLast(v6);\n
    v9 = v3->field_220->field_0;\n
    v19 = v9->field_c;\n
    if (v19 != v9->field_8)\n
    {\n
        v17 = v9->field_0;\n
    }\n
    else\n
    {\n
        v15 = v9->field_10;\n
        v16 = v15 * ((0 CONCAT v19) /m v15 + 1);\n
        v17 = operator new[](v16 * 16);\n
        cgc_memcpy(v17, v9->field_0, v9->field_8 * 4);\n
        v18 = v9->field_0;\n
        if (v18)\n
            operator delete[](v18);\n
        v9->field_0 = v17;\n
        v9->field_8 = v16;\n
        v19 = v9->field_c;\n
    }\n
    *((v17 + v19 * 4)) = (v5 < v7 ? v7 : v5);\n
    v9->field_c = v9->field_c + 1;\n
    return 0;\n
}\n
", "4229120:_ZN2VC3MaxEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::Max(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // rbx\n
    struct_0 *v4;  // rdi\n
    unsigned int v5;  // ebp\n
    struct_0 *v6;  // rdi\n
    unsigned long long v7;  // rax\n
    struct_0 *v9;  // rbp\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned long long v12;  // r8\n
    unsigned long long v13;  // r9\n
    unsigned int v15;  // ecx\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // r14\n
    unsigned int *v18;  // rdi\n
    unsigned int *v19;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 1)\n
    {\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        return 2;\n
    }\n
    v5 = Vector::RemoveLast(v4);\n
    v6 = v3->field_220->field_0;\n
    if (!v6->field_c)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::Depth(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\", v10, v11, v12, v13);\n
    }\n
    v7 = Vector::RemoveLast(v6);\n
    v9 = v3->field_220->field_0;\n
    v19 = v9->field_c;\n
    if (v19 != v9->field_8)\n
    {\n
        v17 = v9->field_0;\n
    }\n
    else\n
    {\n
        v15 = v9->field_10;\n
        v16 = v15 * ((0 CONCAT v19) /m v15 + 1);\n
        v17 = operator new[](v16 * 16);\n
        cgc_memcpy(v17, v9->field_0, v9->field_8 * 4);\n
        v18 = v9->field_0;\n
        if (v18)\n
            operator delete[](v18);\n
        v9->field_0 = v17;\n
        v9->field_8 = v16;\n
        v19 = v9->field_c;\n
    }\n
    *((v17 + v19 * 4)) = (v7 < v5 ? v7 : v5);\n
    v9->field_c = v9->field_c + 1;\n
    return 0;\n
}\n
", "4229392:_ZN2VC5DepthEv": "typedef struct struct_2 {\n
    char padding_0[544];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Depth(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx\n
    unsigned int *v4;  // r14\n
    unsigned int v5;  // ecx\n
    unsigned long v6;  // rbp\n
    unsigned int *v7;  // rdi\n
    unsigned long v8;  // rax\n
    unsigned int *v9;  // r15, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0->field_220->field_0;\n
    v4 = v3->field_c;\n
    if (v4 != v3->field_8)\n
    {\n
        v9 = v3->field_0;\n
        v8 = v4;\n
    }\n
    else\n
    {\n
        v5 = v3->field_10;\n
        v6 = v5 * ((0 CONCAT v4) /m v5 + 1);\n
        v9 = operator new[](v6 * 16);\n
        cgc_memcpy(v9, v3->field_0, v3->field_8 * 4);\n
        v7 = v3->field_0;\n
        if (v7)\n
            operator delete[](v7);\n
        v3->field_0 = v9;\n
        v3->field_8 = v6;\n
        v8 = v3->field_c;\n
    }\n
    *((v9 + v8 * 4)) = v4;\n
    v3->field_c = v3->field_c + 1;\n
    return 0;\n
}\n
", "4229523:sub_408993": null, "4229536:_ZN2VC4DropEv": "typedef struct struct_1 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_2 *field_220;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long VC::Drop(struct_1 *a0)\n
{\n
    struct_1 *v1;  // rbx\n
    struct_0 *v2;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0;\n
    if (v2->field_c <= 0)\n
    {\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v1->field_218 = 1;\n
        return 2;\n
    }\n
    Vector::RemoveLast(v2);\n
    return 0;\n
}\n
", "4229610:sub_4089ea": null, "4229616:_ZN2VC5DropNEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::DropN(struct_2 *a0)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_2 *v3;  // r14\n
    struct_0 *v4;  // rdi\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
    struct_0 *v7;  // rbp\n
    unsigned int v8;  // ecx\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned int v11;  // ebx\n
    unsigned int *v12;  // rdi\n
    unsigned int *v13;  // rax, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_220->field_0;\n
    if (v4->field_c <= 0)\n
    {\n
LABEL_408a83:\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        goto LABEL_408b45;\n
    }\n
    else\n
    {\n
        v5 = Vector::RemoveLast(v4);\n
        if (v5 >= 0)\n
        {\n
            v6 = v3->field_220->field_0->field_c;\n
            if (v6 >= v5)\n
            {\n
                if (!v5)\n
                    return 0;\n
                if (v6)\n
                {\n
                    v11 = v5 + 1;\n
                    do\n
                    {\n
                        Vector::RemoveLast();\n
                        v11 -= 1;\n
                        if (v11 < 2)\n
                            return 0;\n
                    } while (v3->field_220->field_0->field_c);\n
                }\n
                cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
                cgc__terminate(cgc_stderr);\n
                goto LABEL_408a83;\n
            }\n
        }\n
        cgc_sprintf(&v3->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
        v3->field_218 = 1;\n
        v7 = v3->field_220->field_0;\n
        v13 = v7->field_c;\n
        if (v13 != v7->field_8)\n
        {\n
            v10 = v7->field_0;\n
        }\n
        else\n
        {\n
            v8 = v7->field_10;\n
            v9 = v8 * ((0 CONCAT v13) /m v8 + 1);\n
            v10 = operator new[](v9 * 16);\n
            cgc_memcpy(v10, v7->field_0, v7->field_8 * 4);\n
            v12 = v7->field_0;\n
            if (v12)\n
                operator delete[](v12);\n
            v7->field_0 = v10;\n
            v7->field_8 = v9;\n
            v13 = v7->field_c;\n
        }\n
        *((v10 + v13 * 4)) = v5;\n
        v7->field_c = v7->field_c + 1;\n
LABEL_408b45:\n
        return 2;\n
    }\n
}\n
", "4229975:sub_408b57": null, "4229984:_ZN2VC5DropNEi": "typedef struct struct_1 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_2 *field_220;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
long long VC::DropN(struct_1 *a0, unsigned long a1)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v3;  // ebp\n
\n
    if (a1 >= 0)\n
    {\n
        v1 = a0->field_220->field_0->field_c;\n
        if (v1 >= a1)\n
        {\n
            if (!a1)\n
                return 0;\n
            if (v1)\n
            {\n
                v3 = a1 + 1;\n
                do\n
                {\n
                    Vector::RemoveLast();\n
                    v3 -= 1;\n
                    if (v3 < 2)\n
                        return 0;\n
                } while (a0->field_220->field_0->field_c);\n
            }\n
            cgc_fprintf(cgc_stderr, \"Assertion Failed: Popping off empty stack\\n
\");\n
            cgc__terminate(cgc_stderr);\n
        }\n
    }\n
    cgc_sprintf(&a0->padding_0[280], \"Error: Too few arguments for '%s' command\\n
\");\n
    a0->field_218 = 1;\n
    return 2;\n
}\n
", "4230147:sub_408c03": null, "4230160:_ZN2VC4UndoEv": "typedef struct struct_1 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    unsigned long long field_220;\n
    struct struct_2 *field_228;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
long long VC::Undo(struct_1 *a0)\n
{\n
    struct_1 *v1;  // rbx\n
    struct_0 *v2;  // rdi\n
\n
    v1 = a0;\n
    v2 = a0->field_228->field_0;\n
    if (v2->field_c > 0)\n
    {\n
        v1->field_220 = Vector::RemoveLast(v2);\n
        return 1;\n
    }\n
    cgc_sprintf(&v1->padding_0[280], \"Error: Invalid input\\n
\");\n
    v1->field_218 = 1;\n
    return 2;\n
}\n
", "4230237:sub_408c5d": null, "4230240:_ZN2VC6InvertEv": "typedef struct struct_2 {\n
    char padding_0[544];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Invert(struct_2 *a0)\n
{\n
    struct_0 *v1;  // r8\n
    unsigned long v2;  // rdi, Other Possible Types: unsigned long long\n
    unsigned int *v3;  // rcx\n
    unsigned int v4;  // eax\n
    unsigned long v5;  // rdi\n
    unsigned long v7;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v8;  // rsi\n
\n
    v1 = a0->field_220->field_0;\n
    v2 = v1->field_c;\n
    if ((v2 + 1) < 3)\n
        return 0;\n
    v3 = v1->field_0;\n
    v7 = -1;\n
    v8 = 0;\n
    do\n
    {\n
        v4 = v3[v8];\n
        v5 = v2 + v7;\n
        v3[v8] = v3[v5];\n
        v3[v7 + v1->field_c] = v4;\n
        v8 += 1;\n
        v2 = v1->field_c;\n
        v7 -= 1;\n
    } while (v8 < (v1->field_c >> 31) + v1->field_c >> 1);\n
    return 0;\n
}\n
", "4230344:sub_408cc8": null, "4230352:_ZN2VC7ShuffleEv": "typedef struct struct_2 {\n
    char padding_0[536];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_3 *field_220;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_8[4];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
long long VC::Shuffle(struct_2 *a0)\n
{\n
    struct_2 *v1;  // r14\n
    unsigned long v2;  // rdi\n
    char v3[2];  // rax\n
    struct struct_0 **v5;  // rdi\n
    unsigned long v6;  // rbx, Other Possible Types: unsigned int\n
    unsigned long v7;  // rcx\n
    struct_0 *v8;  // r10, Other Possible Types: unsigned long\n
    unsigned int *v9;  // rcx\n
    unsigned long v10;  // r8, Other Possible Types: unsigned long long\n
    char *v11;  // r9, Other Possible Types: unsigned long\n
    unsigned long v12;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rax\n
    unsigned int v14;  // esi\n
    unsigned long v15;  // rdx\n
    unsigned long v16;  // rdx\n
\n
    v1 = a0;\n
    v2 = a0->field_220->field_0->field_c;\n
    if (v2 <= 1)\n
    {\n
        cgc_sprintf(&v1->padding_0[280], \"Error: Invalid input\\n
\");\n
        v1->field_218 = 1;\n
        return 2;\n
    }\n
    v3 = operator new[](v2);\n
    cgc_memcpy(v3, 0x4347c000, v1->field_220->field_0->field_c);\n
    v5 = v1->field_220;\n
    v8 = *(v5);\n
    v6 = v8->field_c;\n
    if (v6 >= 2)\n
    {\n
        v7 = 1;\n
        do\n
        {\n
            v3[v7] = v3[v7] ^ ((v7 * 9259542123273814145 >> 64 >> 7) + v7);\n
            v7 += 1;\n
            v8 = *(v5);\n
            v6 = *((v8 + 12));\n
        } while (v7 < v6);\n
    }\n
    if (!v6 + -1)\n
    {\n
        operator delete(v3);\n
        return 0;\n
    }\n
    v9 = *(v8);\n
    v10 = -(v6);\n
    v11 = &v3[1 + v6];\n
    v12 = v6;\n
    while (true)\n
    {\n
        v13 = v12 + v10;\n
        v14 = v9[v13];\n
        v15 = ~((0 CONCAT *(v11)) /m v6 >> 32);\n
        v9[v13] = v9[v15 + v12];\n
        v16 = v15 + *((v8 + 12));\n
        v9[v16] = v14;\n
        if (v6 == 2)\n
            break;\n
        v12 = *((v8 + 12));\n
        v6 = v6 - 1;\n
        v10 = v10 + 1;\n
        v11 -= 1;\n
    }\n
}\n
", "4230638:sub_408dee": null, "4230640:_ZN6VectorIiE10RemoveLastEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
long long Vector::RemoveLast(unsigned int a0[5])\n
{\n
    unsigned int v1;  // eax\n
    struct_0 *v2;  // rbx\n
    unsigned int *v3;  // rax\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // rbp\n
    unsigned long long v7;  // rax\n
    unsigned long v8;  // rbp\n
    char *v9;  // rax\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned long long v12;  // r8\n
    unsigned long long v13;  // r9\n
    unsigned long v15;  // rdi\n
\n
    v1 = a0[3];\n
    if (!v1)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return Vector::RemoveLast(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\", v10, v11, v12, v13);\n
    }\n
    v2 = a0;\n
    v3 = v1 - 1;\n
    v4 = *((*(&a0[0]) + v3 * 4));\n
    a0[3] = v3;\n
    v5 = a0[2];\n
    v7 = a0[4];\n
    if ((v5 - v3) <= v7)\n
        return v4;\n
    v8 = v5 - v7;\n
    v9 = operator new[](v8 * 16);\n
    cgc_memcpy(v9, *(&a0[0]), v8 * 4);\n
    v15 = *(&a0[0]);\n
    if (v15)\n
        operator delete[](v15);\n
    v2->field_0 = v9;\n
    v2->field_8 = v8;\n
    return v4;\n
}\n
", "4230800:_ZN6VectorIN2VC8HistElemEE10RemoveLastEv": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
\n
long long Vector::RemoveLast(unsigned int a0[5])\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // rbx\n
    unsigned long long *v5;  // rax\n
    unsigned long long v6;  // r14\n
    unsigned long long v7;  // rbp\n
    unsigned long long v9;  // rax\n
    unsigned long v10;  // rbp\n
    char *v11;  // rax\n
    unsigned long long v12;  // rdx\n
    unsigned long long v13;  // rcx\n
    unsigned long long v14;  // r8\n
    unsigned long long v15;  // r9\n
    unsigned long v17;  // rdi\n
\n
    v0 = v2;\n
    v3 = a0[3];\n
    if (!v3)\n
    {\n
        cgc_fprintf(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\");\n
        cgc__terminate(cgc_stderr);\n
        return VC::DrawScreen(cgc_stderr, \"Assertion Failed: Getting last of empty vector\\n
\", v12, v13, v14, v15);\n
    }\n
    v4 = a0;\n
    v5 = v3 - 1;\n
    v6 = *((*(&a0[0]) + v5 * 16));\n
    a0[3] = v5;\n
    v7 = a0[2];\n
    v9 = a0[4];\n
    if ((v7 - v5) <= v9)\n
        return v6;\n
    v10 = v7 - v9;\n
    v11 = operator new[](v10 * 0x100);\n
    cgc_memcpy(v11, *(&a0[0]), v10 * 16);\n
    v17 = *(&a0[0]);\n
    if (v17)\n
        operator delete[](v17);\n
    v4->field_0 = v11;\n
    v4->field_8 = v10;\n
    return v6;\n
}\n
", "4230976:_ZN2VC10DrawScreenEv": "typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    char padding_4[12];\n
    void* field_10;\n
    char padding_18[512];\n
    unsigned int field_218;\n
    char padding_21c[4];\n
    struct struct_2 *field_220;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern unsigned long long g_40a5d7;\n
\n
long long VC::DrawScreen(struct_1 *a0)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rbx, Other Possible Types: unsigned int\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // r15d\n
\n
    v0 = v2;\n
    cgc_fprintf(a0->field_10, &g_40a5d7);\n
    v3 = a0->field_220->field_0->field_c;\n
    if (v3 < v3)\n
        v3 = a0->field_0;\n
    if (v3)\n
    {\n
        v5 = v3 + 1;\n
        v4 = -(v3);\n
        do\n
        {\n
            cgc_fprintf(a0->field_10, \"%03d:\\t\");\n
            if (a0->field_220->field_0->field_c > v5 - 2)\n
                cgc_fprintf(a0->field_10, \"%d\");\n
            cgc_fprintf(a0->field_10, \"\\n
\");\n
            v5 -= 1;\n
            v4 += 1;\n
        } while (v5 > 1);\n
    }\n
    if (a0->field_218)\n
    {\n
        a0->field_218 = 0;\n
        return cgc_printf(\"%s\");\n
    }\n
    else if (!a0->field_2)\n
    {\n
        return cgc_fprintf(a0->field_10, \"\\n
\");\n
    }\n
    else\n
    {\n
        do\n
        {\n
            cgc_fprintf(a0->field_10, \"-\");\n
        } while (1 < a0->field_2);\n
        return cgc_fprintf(a0->field_10, \"\\n
\");\n
    }\n
}\n
", "4231061:sub_408f95": null, "4231306:sub_40908a": null, "4231312:_ZN2VC12ProcessInputEPc": "typedef struct struct_0 {\n
    char *field_0;\n
    char field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char field_8;\n
} struct_1;\n
\n
extern unsigned long long cgc_stderr;\n
\n
long long VC::ProcessInput(unsigned long long a0, unsigned long a1)\n
{\n
    char *v0;  // [bp-0xb8]\n
    unsigned int v1;  // [bp-0xb0]\n
    unsigned int v2;  // [bp-0xac]\n
    char v3;  // [bp-0xa8], Other Possible Types: unsigned long\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x98]\n
    unsigned long v6;  // [bp-0x90]\n
    unsigned long v7;  // [bp-0x88]\n
    unsigned long v8;  // [bp-0x80]\n
    unsigned long v9;  // [bp-0x78]\n
    unsigned long v10;  // [bp-0x70]\n
    unsigned long v11;  // [bp-0x68]\n
    unsigned long v12;  // [bp-0x60]\n
    unsigned long v13;  // [bp-0x58]\n
    unsigned long v14;  // [bp-0x50]\n
    unsigned long v15;  // [bp-0x48]\n
    unsigned long v16;  // [bp-0x40]\n
    unsigned long v17;  // [bp-0x38]\n
    unsigned long v18;  // [bp-0x30]\n
    unsigned long long v20;  // rax\n
    unsigned long long v21;  // rax\n
    unsigned long long v22;  // rax\n
    struct_0 *v23;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v24;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v25;  // rax\n
    struct_0 *v26;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v27;  // rbx, Other Possible Types: unsigned long\n
    struct_0 *v28;  // r12, Other Possible Types: unsigned long\n
    unsigned long long v29;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v30;  // rax\n
    unsigned long v31;  // rsi\n
    unsigned long long v33;  // rax\n
    unsigned long long v34;  // rax\n
    unsigned long long v36;  // rax\n
    unsigned long long v37;  // rax\n
    unsigned long long v38;  // rax\n
    unsigned long long v39;  // rax\n
    unsigned long long v40;  // rax\n
    unsigned long long v41;  // rax\n
    unsigned long long v42;  // rax\n
    unsigned long long v43;  // rax\n
    unsigned long long v44;  // rax\n
    void* v45;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v46;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long long v47;  // rcx\n
    unsigned long long v48;  // r8\n
    unsigned long long v49;  // r9\n
    unsigned long long v50;  // rax\n
\n
    v0 = a1;\n
    cgc_memset(&v3, 0, 0x80);\n
    v20 = cgc_strsep(&v0, \" \");\n
    if (!v20)\n
    {\n
LABEL_4093f2:\n
        v45 = cgc_stderr;\n
        v46 = \"Assertion Failed: No tokens parsed\\n
\";\n
LABEL_409403:\n
        cgc_fprintf(v45, v46);\n
        cgc__terminate(v45);\n
        v50 = VC::HandleCall(v45, v46, 128, v47, v48, v49);\n
        return v50;\n
    }\n
    v3 = v20;\n
    v21 = cgc_strsep(&v0, \" \");\n
    if (!v21)\n
    {\n
        v23 = a0 + 560;\n
        v24 = 29;\n
        while (true)\n
        {\n
            if (!*((v23 + 8)) && !cgc_strcmp(v3, *(v23)))\n
                break;\n
            v23 += 64;\n
            v24 -= 1;\n
        }\n
        VC::HandleCall(a0, v23);\n
        goto LABEL_409274;\n
    }\n
    else\n
    {\n
        *(&v4) = v21;\n
        v22 = cgc_strsep(&v0, \" \");\n
        if (v22)\n
        {\n
            *(&v5) = v22;\n
            v25 = cgc_strsep(&v0, \" \");\n
            if (v25)\n
            {\n
                v6 = v25;\n
                v30 = cgc_strsep(&v0, \" \");\n
                if (v30)\n
                {\n
                    v7 = v30;\n
                    v33 = cgc_strsep(&v0, \" \");\n
                    if (v33)\n
                    {\n
                        v8 = v33;\n
                        v34 = cgc_strsep(&v0, \" \");\n
                        if (v34)\n
                        {\n
                            v9 = v34;\n
                            v36 = cgc_strsep(&v0, \" \");\n
                            if (v36)\n
                            {\n
                                v10 = v36;\n
                                v37 = cgc_strsep(&v0, \" \");\n
                                if (v37)\n
                                {\n
                                    v11 = v37;\n
                                    v38 = cgc_strsep(&v0, \" \");\n
                                    if (v38)\n
                                    {\n
                                        v12 = v38;\n
                                        v39 = cgc_strsep(&v0, \" \");\n
                                        if (v39)\n
                                        {\n
                                            v13 = v39;\n
                                            v40 = cgc_strsep(&v0, \" \");\n
                                            if (v40)\n
                                            {\n
                                                v14 = v40;\n
                                                v41 = cgc_strsep(&v0, \" \");\n
                                                if (v41)\n
                                                {\n
                                                    v15 = v41;\n
                                                    v42 = cgc_strsep(&v0, \" \");\n
                                                    if (v42)\n
                                                    {\n
                                                        v16 = v42;\n
                                                        v43 = cgc_strsep(&v0, \" \");\n
                                                        if (v43)\n
                                                        {\n
                                                            v17 = v43;\n
                                                            v44 = cgc_strsep(&v0, \" \");\n
                                                            if (v44)\n
                                                            {\n
                                                                v18 = v44;\n
                                                                goto LABEL_4093f2;\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                v45 = cgc_stderr;\n
                v46 = \"Assertion Failed: Too many tokens parsed\\n
\";\n
                goto LABEL_409403;\n
            }\n
            v28 = a0 + 560;\n
            v29 = 29;\n
            while (*((v28 + 8)) != 2)\n
            {\n
LABEL_409140:\n
                v28 += 64;\n
                v29 -= 1;\n
                if (!28)\n
                    goto LABEL_409278;\n
            }\n
            if (!(!cgc_strcmp(v3, *(v28))))\n
                goto LABEL_409140;\n
            if (ParseInt(*(&v4), &v1) >= 0)\n
            {\n
                if (ParseInt(*(&v5), &v2) < 0)\n
                    goto LABEL_409278;\n
                VC::HandleCall(a0, v28, v1, v2);\n
                goto LABEL_409274;\n
            }\n
        }\n
        else\n
        {\n
            v26 = a0 + 560;\n
            v27 = 29;\n
            while (*((v26 + 8)) != 1)\n
            {\n
LABEL_409230:\n
                v26 += 64;\n
                v27 -= 1;\n
                if (!28)\n
                    goto LABEL_409278;\n
            }\n
            if (!(!cgc_strcmp(v3, *(v26))))\n
                goto LABEL_409230;\n
            if (ParseInt(*(&v4), &v1) >= 0)\n
            {\n
                v31 = v26;\n
                VC::HandleCall(a0, v31, v1);\n
LABEL_409274:\n
                return 0;\n
            }\n
        }\n
LABEL_409278:\n
        return 4294967295;\n
    }\n
}\n
", "4231480:sub_409138": null, "4231717:sub_409225": null, "4232224:_ZN2VC10HandleCallEPKNS_12CommandEntryEi": "typedef struct struct_3 {\n
    char padding_0[544];\n
    struct struct_4 *field_220;\n
    struct struct_5 *field_228;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_7 {\n
    char padding_0[32];\n
    struct struct_6 *field_20;\n
    unsigned long long field_28;\n
} struct_7;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_2 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_0 *field_0;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long VC::HandleCall(struct_3 *a0, struct_7 *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long *v5;  // r14\n
    unsigned int v6[5];  // rbx\n
    struct_2 *v7;  // rbp\n
    char *v8;  // rax\n
    char *v9;  // rdx\n
    unsigned long long *v10;  // rdi\n
    struct struct_6 **v11;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long *v12;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v13;  // rbp\n
    unsigned long long *v14;  // rax, Other Possible Types: unsigned long\n
    unsigned int v15;  // ecx\n
    unsigned long v16;  // r12\n
    unsigned long v17;  // rbx\n
    unsigned long long *v18;  // rdi\n
\n
    v0 = v2;\n
    v5 = cgc_malloc(8);\n
    v6 = a0->field_220->field_0;\n
    v7 = operator new(24);\n
    v8 = operator new[](v6[2] * 16);\n
    v7->field_0 = v8;\n
    v9 = v6[2];\n
    v7->field_8 = v9;\n
    v7->field_c = v6[3];\n
    v7->field_10 = v6[4];\n
    cgc_memcpy(v8, *(&v6[0]), v9 * 4);\n
    *(v5) = v7;\n
    v11 = a1->field_20;\n
    v10 = &a0->padding_0[a1->field_28];\n
    if ((v11 & 1))\n
        v11 = *((-1 + v11 + *(v10)));\n
    v12 = v11(v10, a2);\n
    if (v12)\n
        return v12;\n
    v13 = a0->field_228->field_0;\n
    v14 = v13->field_c;\n
    if (v14 != v13->field_8)\n
    {\n
        v17 = v13->field_0;\n
    }\n
    else\n
    {\n
        v15 = v13->field_10;\n
        v16 = v15 * ((0 CONCAT v14) /m v15 + 1);\n
        v17 = operator new[](v16 * 0x100);\n
        cgc_memcpy(v17, v13->field_0, v13->field_8 * 16);\n
        v18 = v13->field_0;\n
        if (v18)\n
            operator delete[](v18);\n
        v13->field_0 = v17;\n
        v13->field_8 = v16;\n
        v14 = v13->field_c;\n
    }\n
    v12 = v14 * 16;\n
    *((v17 + v12)) = v5;\n
    *((v17 + v12 + 8)) = a1;\n
    v13->field_c = v13->field_c + 1;\n
    return v12;\n
}\n
", "4232501:sub_409535": null, "4232512:_ZN2VC10HandleCallEPKNS_12CommandEntryE": "typedef struct struct_3 {\n
    char padding_0[544];\n
    struct struct_4 *field_220;\n
    struct struct_5 *field_228;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_7 {\n
    char padding_0[16];\n
    struct struct_6 *field_10;\n
    unsigned long long field_18;\n
} struct_7;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_0 *field_0;\n
} struct_4;\n
\n
typedef struct struct_5 {\n
    struct struct_1 *field_0;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
typedef struct struct_2 {\n
    unsigned long long field_0;\n
} struct_2;\n
\n
long long VC::HandleCall(struct_3 *a0, struct_7 *a1)\n
{\n
    unsigned long long *v2;  // r14\n
    unsigned int v3[5];  // rbx\n
    struct_0 *v4;  // r13\n
    char *v5;  // rax\n
    char *v6;  // rdx\n
    struct struct_6 **v7;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long *v8;  // rdi\n
    unsigned long long *v9;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v10;  // rbx\n
    unsigned long long *v11;  // rax, Other Possible Types: unsigned long\n
    unsigned int v12;  // ecx\n
    unsigned long v13;  // r12\n
    unsigned long v14;  // r13\n
    unsigned long long *v15;  // rdi\n
\n
    v2 = cgc_malloc(8);\n
    v3 = a0->field_220->field_0;\n
    v4 = operator new(24);\n
    v5 = operator new[](v3[2] * 16);\n
    v4->field_0 = v5;\n
    v6 = v3[2];\n
    v4->field_8 = v6;\n
    v4->field_c = v3[3];\n
    v4->field_10 = v3[4];\n
    cgc_memcpy(v5, *(&v3[0]), v6 * 4);\n
    *(v2) = v4;\n
    v7 = a1->field_10;\n
    v8 = &a0->padding_0[a1->field_18];\n
    if ((v7 & 1))\n
        v7 = *((-1 + v7 + *(v8)));\n
    v9 = v7(v8);\n
    if (v9)\n
        return v9;\n
    v10 = a0->field_228->field_0;\n
    v11 = v10->field_c;\n
    if (v11 != v10->field_8)\n
    {\n
        v14 = v10->field_0;\n
    }\n
    else\n
    {\n
        v12 = v10->field_10;\n
        v13 = v12 * ((0 CONCAT v11) /m v12 + 1);\n
        v14 = operator new[](v13 * 0x100);\n
        cgc_memcpy(v14, v10->field_0, v10->field_8 * 16);\n
        v15 = v10->field_0;\n
        if (v15)\n
            operator delete[](v15);\n
        v10->field_0 = v14;\n
        v10->field_8 = v13;\n
        v11 = v10->field_c;\n
    }\n
    v9 = v11 * 16;\n
    *((v14 + v9)) = v2;\n
    *((v14 + v9 + 8)) = a1;\n
    v10->field_c = v10->field_c + 1;\n
    return v9;\n
}\n
", "4232776:sub_409648": null, "4232784:_ZN2VC10HandleCallEPKNS_12CommandEntryEii": "typedef struct struct_3 {\n
    char padding_0[48];\n
    struct struct_2 *field_30;\n
    unsigned long long field_38;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[544];\n
    struct struct_6 *field_220;\n
    struct struct_7 *field_228;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
} struct_2;\n
\n
typedef struct struct_6 {\n
    struct struct_4 *field_0;\n
} struct_6;\n
\n
typedef struct struct_7 {\n
    struct struct_0 *field_0;\n
} struct_7;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long VC::HandleCall(struct_5 *a0, struct_3 *a1, unsigned long a2, unsigned long a3)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned long v3;  // rax\n
    struct_3 *v5;  // r12\n
    unsigned long long *v7;  // r15\n
    struct_4 *v8;  // r14\n
    struct_4 *v9;  // rbp\n
    char *v10;  // rax\n
    char *v11;  // rdx\n
    struct struct_2 **v14;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long *v15;  // rdi\n
    unsigned long long *v16;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v17;  // rbp\n
    unsigned long long *v18;  // rax, Other Possible Types: unsigned long\n
    unsigned int v19;  // ecx\n
    unsigned long v20;  // r12\n
    unsigned long v21;  // rbx\n
    unsigned long long *v22;  // rdi\n
\n
    v0 = v3;\n
    v1 = a3;\n
    v5 = a1;\n
    v7 = cgc_malloc(8);\n
    v8 = a0->field_220->field_0;\n
    v9 = operator new(24);\n
    v10 = operator new[](v8->field_8 * 16);\n
    v9->field_0 = v10;\n
    v11 = v8->field_8;\n
    v9->field_8 = v11;\n
    v9->field_c = v8->field_c;\n
    v9->field_10 = v8->field_10;\n
    cgc_memcpy(v10, v8->field_0, v11 * 4);\n
    *(v7) = v9;\n
    v14 = v5->field_30;\n
    v15 = &a0->padding_0[v5->field_38];\n
    if ((v14 & 1))\n
        v14 = *((-1 + v14 + *(v15)));\n
    v16 = v14(v15, a2, v1, v14);\n
    if (v16)\n
        return v16;\n
    v17 = a0->field_228->field_0;\n
    v18 = v17->field_c;\n
    if (v18 != v17->field_8)\n
    {\n
        v21 = v17->field_0;\n
    }\n
    else\n
    {\n
        v19 = v17->field_10;\n
        v20 = v19 * ((0 CONCAT v18) /m v19 + 1);\n
        v21 = operator new[](v20 * 0x100);\n
        cgc_memcpy(v21, v17->field_0, v17->field_8 * 16);\n
        v22 = v17->field_0;\n
        if (v22)\n
            operator delete[](v22);\n
        v17->field_0 = v21;\n
        v17->field_8 = v20;\n
        v18 = v17->field_c;\n
    }\n
    v16 = v18 * 16;\n
    *((v21 + v16)) = v7;\n
    *((v21 + v16 + 8)) = v5;\n
    v17->field_c = v17->field_c + 1;\n
    return v16;\n
}\n
", "4233080:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:_Znam": null, "5242896:cgc_receive": null, "5242904:memcpy": null, "5242912:cgc_allocate": null, "5242920:cgc__terminate": null, "5242928:_ZdlPv": null, "5242936:_Znwm": null, "5242944:cgc_deallocate": null, "5242952:_ZdaPv": null, "5242960:cgc_transmit": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}