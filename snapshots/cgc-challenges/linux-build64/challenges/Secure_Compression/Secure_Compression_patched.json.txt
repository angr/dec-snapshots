{"4202496:_init": "extern struct_0 *g_40a838;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40a838;\n
    if (g_40a838)\n
        v1 = g_40a838();\n
    return v1;\n
}\n
", "4202528:sub_402020": "extern unsigned long long g_40a858;\n
\n
long long sub_402020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40a858;\n
    goto *(4237408);\n
}\n
", "4202540:sub_40202c": null, "4202544:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202560:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202576:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202592:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4237384);\n
}\n
", "4202640:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4202677:sub_4020b5": null, "4202678:sub_4020b6": null, "4202688:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40a830;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4202729:sub_4020e9": null, "4202736:register_tm_clones": "extern unsigned long long g_40a840;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4202793:sub_402129": null, "4202800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40a848;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40a848)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4202853:sub_402165": null, "4202857:sub_402169": null, "4202864:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202873:sub_402179": null, "4202880:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4202938:sub_4021ba": null, "4202944:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4202963:sub_4021d3": null, "4202976:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4202995:sub_4021f3": null, "4203008:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4203027:sub_402213": null, "4203040:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4203059:sub_402233": null, "4203072:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4203091:sub_402253": null, "4203104:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4203123:sub_402273": null, "4203136:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4203155:sub_402293": null, "4203168:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4203187:sub_4022b3": null, "4203200:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4203219:sub_4022d3": null, "4203232:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4203251:sub_4022f3": null, "4203264:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4203309:sub_40232d": null, "4203312:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203336:sub_402348": null, "4203344:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4203394:sub_402382": null, "4203408:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4227088];\n
    char field_408010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4203456:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v3;  // r8\n
    void* v4;  // r15, Other Possible Types: unsigned long long, unsigned long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // r13\n
    unsigned long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r13, Other Possible Types: unsigned long long\n
    void* v14;  // r14, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        v6 = a0->padding_c;\n
        v13 = v6 - v3;\n
        if (v5 && v13)\n
        {\n
            v8 = v13 & 3;\n
            if (~(v3) + v6 < 3)\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v9 = v13 & -4;\n
                v10 = &a0->padding_0[v3 + 35];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v10 + v11 - 3)) = v5[*((v10 + v11 - 3))];\n
                    *((v10 + v11 - 2)) = v5[*((v10 + v11 - 2))];\n
                    *((v10 + v11 - 1)) = v5[*((v10 + v11 - 1))];\n
                    *((v10 + v11)) = v5[*((v10 + v11))];\n
                    v11 += 4;\n
                } while (v9 != v11);\n
            }\n
            if (v8)\n
            {\n
                v12 = &a0->padding_0[v3 + v11 + 32];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v12 + v11)) = v5[*((v12 + v11))];\n
                    v11 += 1;\n
                } while (v8 != v11);\n
            }\n
            v13 = (a0->padding_c - a0->field_8);\n
        }\n
        v0 = a0;\n
        v4 = 0;\n
        v14 = 0;\n
        do\n
        {\n
            if (v13 <= v14)\n
            {\n
LABEL_4024f5:\n
                a0 = v0;\n
                goto LABEL_4024fa;\n
            }\n
            v14 += *(&v1);\n
        } while (!cgc_transmit(a0, v11));\n
        v4 = 4294967295;\n
        goto LABEL_4024f5;\n
    }\n
LABEL_4024fa:\n
    *((a0 + 8)) = 0;\n
    return v4;\n
}\n
", "4203796:sub_402514": null, "4203808:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int *v1;  // [bp-0x40]\n
    char v2;  // [bp-0x38]\n
    struct_0 *v4;  // r15\n
    unsigned long long v5;  // r8\n
    unsigned int *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rbx\n
    char *v12;  // rax\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    void* v14;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v5 = a0->field_8;\n
    if (v5 == -1)\n
    {\n
        v4->field_8 = -(a1 < 1);\n
        v4->field_c = 0;\n
        return -(a1 < 1);\n
    }\n
    if (a0->field_4 == 1)\n
    {\n
        v6 = &a0->field_c;\n
    }\n
    else\n
    {\n
        v7 = a0->field_10;\n
        v8 = a0->field_c;\n
        v13 = v8 - v5;\n
        v0 = a1;\n
        if (v7 && v13)\n
        {\n
            v10 = v13 & 3;\n
            if (~(v5) + v8 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v11 = v13 & -4;\n
                a0 = &a0->padding_0[v5 + 35];\n
                a1 = 0;\n
                do\n
                {\n
                    *((a0 + a1 - 3)) = v7[*((a0 + a1 - 3))];\n
                    *((a0 + a1 - 2)) = v7[*((a0 + a1 - 2))];\n
                    *((a0 + a1 - 1)) = v7[*((a0 + a1 - 1))];\n
                    *((a0 + a1)) = v7[*((a0 + a1))];\n
                    a1 += 4;\n
                } while (v11 != a1);\n
            }\n
            if (v10)\n
            {\n
                v12 = &v4->padding_0[v5 + a1 + 32];\n
                a1 = 0;\n
                do\n
                {\n
                    v12[a1] = v7[v12[a1]];\n
                    a1 += 1;\n
                } while (v10 != a1);\n
            }\n
            v13 = v4->field_c - v4->field_8;\n
        }\n
        v1 = &v4->field_c;\n
        v14 = 0;\n
        while (v13 > v14)\n
        {\n
            v14 += *(&v2);\n
            if (cgc_transmit(a0, a1))\n
                break;\n
        }\n
        a1 = v0;\n
        v6 = v1;\n
    }\n
    *(v6) = 0;\n
}\n
", "4204158:sub_40267e": null, "4204160:cgc_fopen": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned long long field_8;\n
    uint128_t field_10;\n
} struct_0;\n
\n
long long cgc_fopen(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(1056);\n
    if (v3)\n
    {\n
        v3->field_0 = a0;\n
        v3->field_4 = 2 - (a1 < 1);\n
        v3->field_8 = 0;\n
        v3->field_10 = 0;\n
        return v3;\n
    }\n
    return 0;\n
}\n
", "4204229:sub_4026c5": null, "4204240:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v3;  // r12\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v13;  // eax\n
    unsigned long long v15;  // r8\n
    char *v16;  // rax\n
    unsigned long v17;  // rbp\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v11 = a2->field_8;\n
    if (v11 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v10);\n
        if (!v6)\n
        {\n
            v7 = *(&v0);\n
            if (v7)\n
            {\n
                *(&a2->padding_c[0]) = v7;\n
                v10 = v7 * 0x100000000;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rax<8>, 0x20<8>), Shl(rax<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v10 = a2->field_18;\n
                    if (v10)\n
                    {\n
                        a2 = v7;\n
                        v9 = v7 & 3;\n
                        if (v7 + 1 < 3)\n
                        {\n
                            a1 = 0;\n
                        }\n
                        else\n
                        {\n
                            a2 = &a2[-1 * v9];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[a1] = *((v10 + v3[1].padding_0[a1]));\n
                                v3[1].padding_0[1 + a1] = *((v10 + v3[1].padding_0[1 + a1]));\n
                                v3[1].padding_0[2 + a1] = *((v10 + v3[1].padding_0[2 + a1]));\n
                                v3[1].padding_0[3 + a1] = *((v10 + v3[1].padding_0[3 + a1]));\n
                                a1 += 4;\n
                            } while (a2 != a1);\n
                        }\n
                        if (v9)\n
                        {\n
                            a2 = &v3->padding_0[a1 + 32];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                a2[a1] = *((v10 + a2[a1]));\n
                                a1 += 1;\n
                            } while (v9 != a1);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = v3->field_8;\n
    }\n
    if (v11 != -1)\n
    {\n
        v12 = *(&v3->padding_c[0]) - v11;\n
        if (v12 > v4)\n
            v12 = v4;\n
        v0 = v12;\n
        a1 = &v3->padding_0[v11 + 32];\n
        a2 = v12;\n
        cgc_memcpy();\n
        v13 = v3->field_8 + v12;\n
        v3->field_8 = v13;\n
        if (v13 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v12 < v4))\n
            goto LABEL_402954;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        if (0 >= v4)\n
        {\n
LABEL_402954:\n
            return v12;\n
        }\n
    }\n
    v1 = v5 + 3;\n
    while (true)\n
    {\n
        v10 = cgc_receive(a0, a1, a2, v10);\n
        if (v10)\n
            return -1;\n
        v15 = v0;\n
        if (!v15)\n
            return -1;\n
        v16 = v3->field_18;\n
        if (v16)\n
        {\n
            a2 = v15 & 3;\n
            if (v15 - 1 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v17 = v1 + v12;\n
                a1 = 0;\n
                do\n
                {\n
                    *((v17 + a1 - 3)) = v16[*((v17 + a1 - 3))];\n
                    *((v17 + a1 - 2)) = v16[*((v17 + a1 - 2))];\n
                    *((v17 + a1 - 1)) = v16[*((v17 + a1 - 1))];\n
                    *((v17 + a1)) = v16[*((v17 + a1))];\n
                    a1 += 4;\n
                } while ((v15 & -4) != a1);\n
            }\n
            if (a2)\n
            {\n
                a1 = a1 + v12 + v5;\n
                a0 = 0;\n
                do\n
                {\n
                    a1[a0] = v16[a1[a0]];\n
                    a0 += 1;\n
                } while (a2 != a0);\n
            }\n
        }\n
        v12 += v15;\n
        if (v12 >= v4)\n
            return v12;\n
    }\n
}\n
", "4204722:sub_4028b2": null, "4204902:sub_402966": null, "4204912:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_4029c0;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_4029d1;\n
    while (true)\n
    {\n
LABEL_4029c0:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_4029d1;\n
    }\n
LABEL_4029d1:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4205035:sub_4029eb": null, "4205040:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // rax\n
    unsigned long long v15;  // r8\n
    unsigned long v16;  // rcx\n
    struct struct_0 **v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    void* v19;  // rdi, Other Possible Types: unsigned long\n
    char *v20;  // rsi\n
    unsigned long v21;  // rdi\n
    unsigned long long v22;  // rax\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        v14 = 4294967295;\n
        if (v13)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v16 = a0->field_18;\n
            *(&v14) = v0;\n
            if (!v16)\n
                return v14;\n
            *(&v14) = *(v16 + v14);\n
        }\n
    }\n
    else\n
    {\n
        if (v4 != *(&a0->padding_c[0]))\n
        {\n
            v3->field_8 = v4 + 1;\n
            v22 = v3[1].padding_0[v4];\n
            return v22;\n
        }\n
        *(&a0->field_8) = 0;\n
        if (cgc_receive(a0, v9, v10, v11))\n
            return 4294967295;\n
        v15 = *(&v1);\n
        if (!v15)\n
            return 4294967295;\n
        *(&a0->padding_c[0]) = v15;\n
        if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
        {\n
            v17 = a0->field_18;\n
            if (v17)\n
            {\n
                v18 = v15 & 3;\n
                if (v15 - 1 < 3)\n
                {\n
                    v19 = 0;\n
                }\n
                else\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v3[1].padding_0[v19] = *(v17 + v3[1].padding_0[v19]);\n
                        v3[1].padding_0[1 + v19] = *(v17 + v3[1].padding_0[1 + v19]);\n
                        v3[1].padding_0[2 + v19] = *(v17 + v3[1].padding_0[2 + v19]);\n
                        v3[1].padding_0[3 + v19] = *(v17 + v3[1].padding_0[3 + v19]);\n
                        v19 += 4;\n
                    } while (v15 - v18 != v19);\n
                }\n
                if (v18)\n
                {\n
                    v20 = &v3->padding_0[v19 + 32];\n
                    v21 = 0;\n
                    do\n
                    {\n
                        v20[v21] = *(v17 + v20[v21]);\n
                        v21 += 1;\n
                    } while (v18 != v21);\n
                }\n
            }\n
        }\n
        if (v15 < 0)\n
            return 4294967295;\n
        v4 = v3->field_8;\n
    }\n
}\n
", "4205386:sub_402b4a": null, "4205392:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4205407:sub_402b5f": null, "4205408:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    unsigned long long v3;  // [bp-0x438], Other Possible Types: char\n
    unsigned long long v4;  // [bp-0x437]\n
    unsigned long long v5;  // [bp-0x436]\n
    unsigned long long v6;  // [bp-0x435]\n
    struct_0 *v8;  // rbx\n
    unsigned long v9;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax\n
    char *v12;  // r15\n
    void* v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rcx\n
    struct_2 *v15;  // rdi, Other Possible Types: unsigned long\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // rsi\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rcx\n
    char *v22;  // rcx\n
    unsigned long v23;  // rdx\n
    void* v24;  // r14, Other Possible Types: unsigned long\n
    void* v25;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v26;  // rcx\n
    struct_2 *v27;  // rdi\n
    unsigned long long v28;  // r15\n
\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v11 = a2->field_c;\n
            if (v11 + a1 >= 0x400)\n
            {\n
                v13 = 0x400 - v11;\n
                cgc_memcpy(&a2->padding_0[v11 + 32], a0, v13);\n
                v8->field_c = v8->field_c + v13;\n
                cgc_fflush(a2);\n
                if (v13 < a1)\n
                    goto LABEL_402d52;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_402d52:\n
                    v28 = a1 - v13;\n
                    cgc_memcpy(&v8->padding_0[v8->field_c + 32], a0 + v13, v28);\n
                    v8->field_c = v8->field_c + v28;\n
                    return a1;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v12 = a2->field_10;\n
    if (!v12)\n
    {\n
        v16 = 0;\n
        do\n
        {\n
            if (v16 >= a1)\n
                return a1;\n
            v16 += *(&v3);\n
        } while (!cgc_transmit(a2, a1, a2, v17));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v25 = 0;\n
        v14 = 0x400;\n
        v15 = &v3;\n
        v0 = v10;\n
LABEL_402bc3:\n
        v18 = v9 - v25;\n
        if (0x400 <= v18)\n
            v18 = 0x400;\n
        v1 = v25;\n
        v19 = v10 + v25;\n
        v20 = v18;\n
        cgc_memcpy();\n
        if (v18)\n
        {\n
            v15 = v18 & 3;\n
            if (v18 - 1 < 3)\n
            {\n
                v21 = 0;\n
            }\n
            else\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    *(&v3 + v21) = v12[*(&v3 + v21)];\n
                    *(&v4 + v21) = v12[*(&v4 + v21)];\n
                    *(&v5 + v21) = v12[*(&v5 + v21)];\n
                    *(&v6 + v21) = v12[*(&v6 + v21)];\n
                    v21 += 4;\n
                } while ((v18 & 2044) != v21);\n
            }\n
            if (v15)\n
            {\n
                v22 = &v3 + v21;\n
                v23 = 0;\n
                do\n
                {\n
                    v22[v23] = v12[v22[v23]];\n
                    v23 += 1;\n
                } while (v15 != v23);\n
            }\n
        }\n
        v24 = 0;\n
        do\n
        {\n
            if (v18 <= v24)\n
            {\n
                v25 = v1 + v18;\n
                v10 = v0;\n
                v26 = 0x400;\n
                v27 = &v3;\n
                if (v25 >= v9)\n
                    return v9;\n
                goto LABEL_402bc3;\n
            }\n
            v24 += *(&v2);\n
        } while (!cgc_transmit(v15, v19));\n
    }\n
    return -1;\n
}\n
", "4205736:sub_402ca8": null, "4205963:sub_402d8b": null, "4205968:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[15];\n
    uint128_t field_10;\n
    char padding_20[80];\n
    uint128_t field_70;\n
    uint128_t field_80;\n
    uint128_t field_90;\n
    uint128_t field_a0;\n
    uint128_t field_b0;\n
    uint128_t field_c0;\n
    uint128_t field_d0;\n
    uint128_t field_e0;\n
    uint128_t field_f0;\n
} struct_1;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    struct_1 *v4;  // rbx\n
    unsigned long v7;  // rdx, Other Possible Types: char\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rdi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // esi\n
    unsigned long v13;  // rdx\n
    char v14;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v4 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v4;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v7 = a1[0];\n
    v9 = 826981510;\n
    if (v3[0])\n
    {\n
        v8 = 1;\n
        do\n
        {\n
            v9 = __ROL__((v9 + v9 * 36) ^ v7, 13);\n
            v7 = v3[v8];\n
            v8 = v8 + 1;\n
        } while (v7);\n
    }\n
    *(&v4->field_0) = 0xf0e0d0c0b0a09080706050403020100;\n
    v4->field_10 = 41362427191743139026751447860679676176;\n
    strncpy(&v4->padding_20, \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmno\", 80);\n
    v4->field_70 = 169468730032567031154139535364404179312;\n
    v4->field_80 = 190819780506037679842037549948358263168;\n
    v4->field_90 = 212170830979508328529935564532312347024;\n
    v4->field_a0 = 233521881452978977217833579116266430880;\n
    v4->field_b0 = 254872931926449625905731593700220514736;\n
    v4->field_c0 = 276223982399920274593629608284174598592;\n
    v4->field_d0 = 297575032873390923281527622868128682448;\n
    v4->field_e0 = 318926083346861571969425637452082766304;\n
    v4->field_f0 = 340277133820332220657323652036036850160;\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v9;\n
        v12 = v9 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v9 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = (&v4->field_0)[v10];\n
        (&v4->field_0)[v10] = (&v4->field_0)[v13];\n
        (&v4->field_0)[v13] = v14;\n
        v10 -= 1;\n
    }\n
}\n
", "4206417:sub_402f51": null, "4206432:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4206447:sub_402f6f": null, "4206448:cgc_malloc_alloc": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_8;\n
    struct struct_2 *field_10;\n
    char padding_18[1016];\n
    unsigned long long field_410;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_3 *field_18;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern unsigned long long g_408210;\n
extern unsigned long long g_408242;\n
\n
long long cgc_malloc_alloc(struct_1 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // rbx\n
    struct_1 *v4;  // rbx\n
    struct_1 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rbx\n
    void* v11;  // r15, Other Possible Types: unsigned long, struct_0 *\n
\n
    if (a1 > 2147483647)\n
        return 0;\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
        return tiny_alloc(a0, 4);\n
    if (v2 <= 15)\n
        return tiny_alloc(a0, v2);\n
    if (v2 > 131071)\n
    {\n
        if (!cgc_allocate(a0, a1, v7))\n
        {\n
            v11 = *(&v0);\n
            *(v11) = a0;\n
            *((v11 + 8)) = v2 + 4111 & -0x1000;\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
    v4 = v2 + 31;\n
    v5 = v4 & -0x10;\n
    if (!(v4 & -0x10))\n
    {\n
        v9 = 4294967295;\n
    }\n
    else if (v5 < 513)\n
    {\n
        v10 = v4 / 16;\n
        v9 = v10 + 2;\n
        if (v10 > 128)\n
            v11 = 0;\n
    }\n
    else if (v5 <= 0x1200)\n
    {\n
        v9 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
    }\n
    else\n
    {\n
        v9 = 130;\n
        if (v5 <= 0x20000)\n
            v9 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
    }\n
    v11 = (&a0->field_0)[v9];\n
    if (!v11)\n
        goto LABEL_0x403210;\n
    else\n
        goto LABEL_0x403230;\n
}\n
", "4207360:tiny_alloc": "long long tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    struct struct_0 *v4[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned int v7;  // edx\n
    unsigned short *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
    unsigned long long v12;  // rbp\n
    unsigned long long v13;  // r13\n
    unsigned short *v14;  // r12\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rbx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v9 = *((a0 + v4 * 8));\n
    if (v9)\n
    {\n
        *((a0 + v5 * 8)) = *(&v9);\n
        return v9;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (v6)\n
    {\n
        v7 = v6[0];\n
        a1 = v6[1];\n
    }\n
    else\n
    {\n
        v8 = *((a0 + 5168));\n
        if (v8)\n
        {\n
            v9 = *((a0 + 5176));\n
        }\n
        else if (cgc_allocate(a0, a1, v10))\n
        {\n
            *((a0 + 5168)) = 0;\n
            return 0;\n
        }\n
        else\n
        {\n
            v12 = v0;\n
            v13 = v12 + 1048575;\n
            v14 = v13 & -0x100000;\n
            if (v14 > v12)\n
                cgc_deallocate(a0);\n
            if ((v12 + 0x200000) > (v14 + 0x80000))\n
                cgc_deallocate(a0);\n
            *((a0 + (v13 >> 20) + 1048)) = 1;\n
            v8 = v14;\n
            *((a0 + 5168)) = v14;\n
            v9 = 0;\n
            if (!v14)\n
                return 0;\n
        }\n
        v15 = v8;\n
        v6 = v8 + v9;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v15 + v9)) = v3;\n
        *((v15 + v9 + 2)) = v3;\n
        v16 = v9 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v7 = a1;\n
    }\n
    v17 = v3 + a1;\n
    *((v6 + 2)) = v17;\n
    if (v7 + v17 < 4097)\n
        return a1 + v6;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4207799:sub_4034b7": null, "4207808:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r9\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // r11\n
    unsigned long v9;  // r8\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r10\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // r10\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r11\n
    unsigned long v19;  // rsi\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rax\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdi\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rdi\n
    unsigned long v28;  // rsi\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4038a9;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v19 = a1 - 16;\n
        v7 = *((v19 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_4038a9;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_4038a9;\n
        }\n
        else\n
        {\n
            v8 = *(v19);\n
            v9 = v7 + v19;\n
            v10 = v19 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (!v10)\n
            {\n
                if (*(v9) == v7)\n
                    goto LABEL_4035ff;\n
                goto LABEL_4038b2;\n
            }\n
            else\n
            {\n
                v13 = *((v10 + 8));\n
                if (!((v13 & -2) == v8))\n
                    goto LABEL_4038cc;\n
                if (*(v9) == v7)\n
                {\n
                    if ((v13 & 1))\n
                    {\n
                        if (v8 <= 15)\n
                        {\n
                            v15 = v13 / 4 - 1;\n
                        }\n
                        else if (v8 <= 0x200)\n
                        {\n
                            v15 = (v13 >> 4) + 2;\n
                        }\n
                        else if (v8 <= 0x1200)\n
                        {\n
                            v15 = (0x7ffffffe00 + v8 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v15 = 130;\n
                            if (v8 <= 0x20000)\n
                                v15 = (0x7ffffffee00 + v8 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v8;\n
                        v16 = *((v10 + 16));\n
                        if (v16)\n
                            *((v16 + 24)) = *((v10 + 24));\n
                        v17 = *((v10 + 24));\n
                        if (v17)\n
                            *((v17 + 16)) = v16;\n
                        if (*((v4 + (v15 << 3))) == v10)\n
                            *((v4 + v15 * 8)) = v17;\n
                        *((v10 + 16)) = 0;\n
                        v18 = v8 + *((v19 + 8));\n
                        *((v10 + 8)) = v18;\n
                        *(v9) = v18;\n
                        v19 = v10;\n
                        v14 = *((v9 + 8));\n
                        if (!(!(v14 & 1)))\n
                            goto LABEL_403714;\n
                        goto LABEL_40360c;\n
                    }\n
LABEL_4035ff:\n
                    v14 = *((v9 + 8));\n
                    if ((v14 & 1))\n
                    {\n
LABEL_403714:\n
                        v21 = v14 & -2;\n
                        if (v21 <= 15)\n
                        {\n
                            v22 = v14 / 4 - 1;\n
                        }\n
                        else if (v21 <= 0x200)\n
                        {\n
                            v22 = (v14 >> 4) + 2;\n
                        }\n
                        else if (v21 <= 0x1200)\n
                        {\n
                            v22 = (0x7ffffffe00 + v21 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v22 = 130;\n
                            if (v21 <= 0x20000)\n
                                v22 = (0x7ffffffee00 + v21 >> 11) + 66;\n
                        }\n
                        *((v9 + 8)) = v21;\n
                        v23 = *((v9 + 16));\n
                        if (v23)\n
                            *((v23 + 24)) = *((v9 + 24));\n
                        v24 = *((v9 + 24));\n
                        if (v24)\n
                            *((v24 + 16)) = v23;\n
                        if (*((v4 + (v22 << 3))) == v9)\n
                            *((v4 + v22 * 8)) = v24;\n
                        *((v9 + 16)) = 0;\n
                        v25 = v21 + *((v19 + 8));\n
                        *((v19 + 8)) = v25;\n
                        *((v19 + v25)) = v25;\n
                        v20 = *((v19 + 8));\n
                        if (v20 > 15)\n
                        {\n
LABEL_4037d1:\n
                            if (v20 <= 0x200)\n
                            {\n
                                v3 = (v20 >> 4) + 2;\n
                            }\n
                            else if (v20 <= 0x1200)\n
                            {\n
                                v3 = (0x7ffffffe00 + v20 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v3 = 130;\n
                                if (v20 <= 0x20000)\n
                                    v3 = (0x7ffffffee00 + v20 >> 11) + 66;\n
                            }\n
LABEL_403827:\n
                            if ((v20 & 1))\n
                            {\n
                                v10 = cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                            }\n
                            else\n
                            {\n
                                *((v19 + 8)) = v20 | 1;\n
                                *((v19 + 16)) = 0;\n
                                *((v19 + 24)) = *((v4 + v3 * 8));\n
                                *((v4 + v3 * 8)) = v19;\n
                                v26 = *((v19 + 24));\n
                                if (!v26)\n
                                    return v0;\n
                                *((v26 + 16)) = v19;\n
                                return v0;\n
                            }\n
LABEL_4038cc:\n
                            v27 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                            v28 = v10;\n
LABEL_4038d5:\n
                            cgc_heap_error(v27, v28, v3);\n
                            return cgc_malloc_size(v27, v28, v3, v3, v9, v4);\n
                        }\n
LABEL_40361a:\n
                        v3 = v20 / 4 - 1;\n
                        goto LABEL_403827;\n
                    }\n
LABEL_40360c:\n
                    v20 = *((v19 + 8));\n
                    if (!(v20 <= 15))\n
                        goto LABEL_4037d1;\n
                    goto LABEL_40361a;\n
                }\n
            }\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_4038a9:\n
    cgc_heap_error(v11, v3);\n
LABEL_4038b2:\n
    v27 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v28 = v9;\n
    goto LABEL_4038d5;\n
}\n
", "4208864:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4208908:sub_40390c": null, "4208912:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_403921:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_4039a3;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_4039a3;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_4039a3:\n
                v5 = cgc_malloc_alloc(a0, a2);\n
                if (v5)\n
                {\n
                    cgc_memcpy(v5, a1);\n
                    malloc_free(a0, a1);\n
                    return v5;\n
                }\n
                goto LABEL_403921;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4209172:sub_403a14": null, "4209184:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4209360:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4209396:sub_403af4": null, "4209408:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4209454:sub_403b2e": null, "4209456:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_403bc4:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_403b57;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_403b57:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_403bc4;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_403b57;\n
}\n
", "4209887:sub_403cdf": null, "4209888:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    char *v2;  // r8, Other Possible Types: unsigned long\n
    unsigned long v3;  // r11\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // r9\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    uint128_t *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r10\n
    unsigned long v13;  // r11\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // r9, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm1\n
    int v19;  // xmm1\n
    int v20;  // xmm1\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    unsigned long long v25;  // rdi\n
    uint128_t *v27;  // rcx, Other Possible Types: unsigned long\n
    int v28;  // xmm1\n
    unsigned long v29;  // r8\n
    char *v30;  // rcx\n
    char *v31;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v32;  // r8\n
    char *v33;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r9\n
    char *v35;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v36;  // rdx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 4)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403e35:\n
                if (a2 < 16)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x10;\n
                    v4 = v2 - 16;\n
                    v5 = (v4 >> 4) + 1;\n
                    v6 = v5 & 3;\n
                    if (v4 < 48)\n
                    {\n
                        v10 = 0;\n
                    }\n
                    else\n
                    {\n
                        v11 = v5 & -4;\n
                        v12 = v1 + a2 - 16;\n
                        v13 = &a2[a1 + 16];\n
                        v14 = 0;\n
                        do\n
                        {\n
                            *((v12 + v14)) = *((v13 + v14));\n
                            *((-16 + v12 + v14)) = *((v13 + v14 - 16));\n
                            *((-32 + v12 + v14)) = *((v13 + v14 - 32));\n
                            *((-48 + v12 + v14)) = *((v13 + v14 - 48));\n
                            v14 -= 64;\n
                            tmp_13 = v11;\n
                            v11 -= 4;\n
                        } while (tmp_13 != 4);\n
                        v10 = -(v14);\n
                    }\n
                    if (v6)\n
                    {\n
                        v25 = &a2[-1 * v10];\n
                        v27 = 0;\n
                        do\n
                        {\n
                            *(&v1[16 + v27 + v25]) = *((a1 + v25 - 16 + v27));\n
                            v27 -= 16;\n
                        } while (v6 * 16 + v27);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 12))\n
                        goto LABEL_403d19;\n
                }\n
                v30 = v2;\n
                v2 = a2 & -4;\n
                v31 = -(v30);\n
                do\n
                {\n
                    *((v1 + a2 - 4 + v31)) = *(&a2[4 + v31 + a1]);\n
                    v31 -= 4;\n
                } while (!(v2) != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_403d19:\n
                v34 = &a2[~(v2)];\n
                if ((a2 & 3))\n
                {\n
                    v35 = 0;\n
                    do\n
                    {\n
                        v1[v35 + v34] = *((a1 + v34 + v35));\n
                        v35 -= 1;\n
                    } while (!(a2 & 3) != v35);\n
                    v2 -= v35;\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                v36 = &a2[-1 * v2];\n
                do\n
                {\n
                    v1[1 + v36] = *((a1 + v36 - 1));\n
                    v1[2 + v36] = *((a1 + v36 - 2));\n
                    v1[3 + v36] = *((a1 + v36 - 3));\n
                    v1[4 + v36] = *((a1 + v36 - 4));\n
                    tmp_10 = v36;\n
                    v36 -= 4;\n
                } while (tmp_10 != 4);\n
                return v1;\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403e35;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_403d19;\n
    }\n
    else\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_403e43:\n
                if (a2 < 32)\n
                {\n
                    v3 = 0;\n
                }\n
                else\n
                {\n
                    v3 = a2 & -0x20;\n
                    v7 = v3 - 32;\n
                    v8 = (v7 >> 5) + 1;\n
                    v9 = v8 & 3;\n
                    if (v7 < 96)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v16 = v8 & -4;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v17 = *((a1 + v15 + 16));\n
                            *(&v1[v15]) = *((a1 + v15));\n
                            *(&v1[16 + v15]) = v17;\n
                            v18 = *((a1 + v15 + 48));\n
                            *(&v1[32 + v15]) = *((a1 + v15 + 32));\n
                            *(&v1[48 + v15]) = v18;\n
                            v19 = *((a1 + v15 + 80));\n
                            *(&v1[64 + v15]) = *((a1 + v15 + 64));\n
                            *(&v1[80 + v15]) = v19;\n
                            v20 = *((a1 + v15 + 112));\n
                            *(&v1[96 + v15]) = *((a1 + v15 + 96));\n
                            *(&v1[112 + v15]) = v20;\n
                            v15 -= -128;\n
                            tmp_21 = v16;\n
                            v16 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v9)\n
                    {\n
                        v21 = &v1[v15 + 16];\n
                        v22 = a1 + v15 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v28 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v28;\n
                            v24 += 32;\n
                        } while (v9 * 32 != v24);\n
                    }\n
                    if (v3 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_403dc7;\n
                }\n
                v29 = v3;\n
                v3 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v29]) = *((a1 + v29));\n
                    v29 += 8;\n
                } while (v3 != v29);\n
                if (v3 == a2)\n
                    return v1;\n
LABEL_403dc7:\n
                v32 = &a2[~(v3)];\n
                v33 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v3] = *((a1 + v3));\n
                        v3 += 1;\n
                        tmp_7 = v33;\n
                        v33 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v32 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v3] = *((a1 + v3));\n
                    v1[1 + v3] = *((a1 + v3 + 1));\n
                    v1[2 + v3] = *((a1 + v3 + 2));\n
                    v1[3 + v3] = *((a1 + v3 + 3));\n
                    v3 += 4;\n
                } while (a2 != v3);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_403e43;\n
            }\n
        }\n
        v3 = 0;\n
        goto LABEL_403dc7;\n
    }\n
}\n
", "4210815:sub_40407f": null, "4210816:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long v2;  // rcx\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // r10\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // r10, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rdi\n
    int v15;  // xmm0\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (a2 < 32)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v2 = a2 & -0x20;\n
            tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
            v3 = tmp_43;\n
            v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
            v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
            v6 = v2 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *(&v1[v9]) = v5;\n
                    *(&v1[16 + v9]) = v5;\n
                    *(&v1[32 + v9]) = v5;\n
                    *(&v1[48 + v9]) = v5;\n
                    *(&v1[64 + v9]) = v5;\n
                    *(&v1[80 + v9]) = v5;\n
                    *(&v1[96 + v9]) = v5;\n
                    *(&v1[112 + v9]) = v5;\n
                    *(&v1[128 + v9]) = v5;\n
                    *(&v1[144 + v9]) = v5;\n
                    *(&v1[160 + v9]) = v5;\n
                    *(&v1[176 + v9]) = v5;\n
                    *(&v1[192 + v9]) = v5;\n
                    *(&v1[208 + v9]) = v5;\n
                    *(&v1[224 + v9]) = v5;\n
                    *(&v1[240 + v9]) = v5;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = &v1[v9 + 16];\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = v5;\n
                    *((v11 + v13)) = v5;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            if (v2 == a2)\n
                return v1;\n
            if (!(a2 & 24))\n
                goto LABEL_4041f0;\n
        }\n
        v14 = v2;\n
        v2 = a2 & -8;\n
        tmp_20 = InterleaveLOV(tmp_21, tmp_21);\n
        v15 = tmp_20;\n
        do\n
        {\n
            *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
            v14 += 8;\n
        } while (v2 != v14);\n
        if (v2 == a2)\n
            return v1;\n
    }\n
    do\n
    {\n
LABEL_4041f0:\n
        v1[v2] = a1;\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4211198:sub_4041fe": null, "4211200:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned long v32;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v32 = cgc__vsfprintf();\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v32;\n
    }\n
    v32 = cgc__vsfprintf();\n
    return v32;\n
}\n
", "4211412:sub_4042d4": null, "4211424:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return cgc__vsfprintf();\n
    }\n
    return cgc__vsfprintf();\n
}\n
", "4211502:sub_40432e": null, "4211504:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned long v30;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v30;\n
    }\n
    v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    return v30;\n
}\n
", "4211713:sub_404401": null, "4211728:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4211811:sub_404463": null, "4211824:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4211977:sub_404509": null, "4211984:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4211997:sub_40451d": null, "4212000:cgc__vsfprintf": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
} struct_2;\n
\n
long long cgc__vsfprintf(struct_1 *a0, struct_1 *a1, struct_1 *a2, char *a3)\n
{\n
    int tmp_16;  // tmp #16\n
    int tmp_2;  // tmp #2\n
    unsigned long long v0;  // [bp-0x1c8]\n
    int tmp_50;  // tmp #50\n
    int tmp_70;  // tmp #70\n
    int tmp_12;  // tmp #12\n
    struct_1 *v1;  // [bp-0xa1]\n
    char *v2;  // [bp-0xa0]\n
    struct_1 *v3;  // [bp-0x98], Other Possible Types: unsigned long\n
    struct_1 *v4;  // [bp-0x90]\n
    char v5;  // [bp-0x88]\n
    char v6;  // [bp-0x87]\n
    char v7;  // [bp-0x76]\n
    char v8;  // [bp-0x75]\n
    char v9;  // [bp-0x74]\n
    unsigned long v10;  // [bp-0x40]\n
    struct_1 *v11;  // [bp-0x38]\n
    char *v13;  // rbx, Other Possible Types: unsigned long\n
    struct_1 *v14;  // rbp, Other Possible Types: unsigned long\n
    struct_1 *v15;  // al, Other Possible Types: unsigned long, char\n
    struct_1 *v16;  // r15\n
    unsigned int v17;  // eax\n
    char v18;  // r13b\n
    struct_1 *v19;  // rax, Other Possible Types: unsigned long\n
    char v20;  // cc_dep1\n
    char v21;  // cc_dep2\n
    struct_1 *v22;  // r12\n
    unsigned long long v23;  // rcx\n
    unsigned long long v24;  // rcx\n
    unsigned long long v25;  // rcx\n
    unsigned long long v26;  // rcx\n
    struct struct_1 **v27;  // rax, Other Possible Types: unsigned long\n
    unsigned int *v28;  // rsi\n
    unsigned int v29;  // cc_dep1\n
    struct struct_1 **v30;  // rsi\n
    unsigned int *v31;  // rdi, Other Possible Types: unsigned long\n
    unsigned long v32;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long long *v33;  // rax, Other Possible Types: unsigned long\n
    struct_1 *v34;  // rcx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v35;  // r13\n
    unsigned long long v36;  // rax\n
    unsigned long v37;  // r13, Other Possible Types: unsigned long long\n
    unsigned long v38;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v39;  // rcx\n
    unsigned long v40;  // r12, Other Possible Types: unsigned long long\n
    struct_1 *v41;  // rbp, Other Possible Types: unsigned long\n
    char *v42;  // rbp\n
    unsigned long v43;  // rbp, Other Possible Types: unsigned long long\n
    char *v44;  // r14, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long long v45;  // rax\n
    unsigned int v46;  // ebp\n
    unsigned long long v47;  // r12\n
    char *v48;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v49;  // r8\n
    unsigned long long v50;  // r9\n
\n
    v13 = a3;\n
    v4 = a1;\n
    v14 = &a0->field_0 + 1;\n
    v3 = v14;\n
    v15 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v44 = 0;\n
    }\n
    else\n
    {\n
        v16 = a2;\n
        v34 = &v5;\n
        v10 = 20 + -0x1 * &v5;\n
        v44 = 0;\n
        v2 = v13;\n
        while (true)\n
        {\n
            if (v15 != 37)\n
            {\n
                if (v44 < 2147483647)\n
                {\n
                    *(&v1) = v15;\n
                    if (v16)\n
                    {\n
                        a2 = v16;\n
                        cgc_fwrite(&v1, 1, v16);\n
                    }\n
                    if (v13)\n
                        *((v13 + v44)) = v1;\n
                    v14 = v3;\n
                }\n
                else if (v44 == -1)\n
                {\n
                    goto LABEL_404b0f;\n
                }\n
                v44 += 1;\n
                v34 = v14 + 1;\n
                v3 = v34;\n
                tmp_16 = *(v14);\n
                v15 = *(v14);\n
                v14 = v34;\n
                if (!(!tmp_16))\n
                    continue;\n
                goto LABEL_404a9a;\n
            }\n
            a0 = v14 + 1;\n
            v3 = a0;\n
            v17 = *(v14);\n
            v18 = 32;\n
            if (v17 == 32)\n
            {\n
LABEL_4045c3:\n
                if (!(*(a0) - 48 <= 9))\n
                    goto LABEL_40463a;\n
                goto LABEL_4045cb;\n
            }\n
            else if (v17 != 48)\n
            {\n
                if (!v17)\n
                    goto LABEL_404a9a;\n
                v3 = v14;\n
                a0 = v14;\n
                goto LABEL_4045c3;\n
            }\n
            else\n
            {\n
                v18 = 48;\n
                if (a0->field_0 - 48 <= 9)\n
                {\n
LABEL_4045cb:\n
                    v19 = cgc_strtoul();\n
                    a0 = v3;\n
                    goto LABEL_40463c;\n
                }\n
                else\n
                {\n
LABEL_40463a:\n
                    v19 = 0;\n
LABEL_40463c:\n
                    v34 = a0 + 1;\n
                    v3 = v34;\n
                    a2 = *(a0);\n
                    *(&v13) = 1;\n
                    if (a2 == 104)\n
                    {\n
                        a2 = a0 + 2;\n
                        v20 = *((a0 + 1));\n
                        v21 = 104;\n
                    }\n
                    else if (a2 == 108)\n
                    {\n
                        v20 = *((a0 + 1));\n
                        v21 = 108;\n
                        a2 = a0 + 2;\n
                        *(&v13) = *((a0 + 1)) != 108;\n
                    }\n
                    else\n
                    {\n
                        if (!a2)\n
                            goto LABEL_404a95;\n
                        goto LABEL_404679;\n
                    }\n
                    if (v20 == v21)\n
                        v34 = a2;\n
                    a0 = v34;\n
LABEL_404679:\n
                    v22 = a0 + 1;\n
                    v3 = v22;\n
                    *(&a2) = *(a0);\n
                    v34 = *(a0);\n
                    a1 = v34 - 88;\n
                    if (a1 > 32)\n
                    {\n
                        v13 = v2;\n
                        if (!v34)\n
                        {\n
                            v47 = v22 - v14;\n
                            if (v44 < 2147483647)\n
                            {\n
                                v48 = 2147483647 - v44;\n
                                if (v48 > v47)\n
                                    v48 = v47;\n
                                if (v16)\n
                                    cgc_fwrite(v14, v48, v16);\n
                                if (v13)\n
                                    cgc_memcpy(&v13[v44], v14, v48);\n
                            }\n
                            tmp_2 = v44;\n
                            v44 += v47;\n
                            if (__CFADD__(tmp_2, v47))\n
                                goto LABEL_404b0f;\n
                            goto LABEL_404a9a;\n
                        }\n
                        else\n
                        {\n
                            v40 = v22 - v14;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_404a3f;\n
                            v37 = 2147483647 - v44;\n
                            if (v37 > v40)\n
                                v37 = v40;\n
                            if (v16)\n
                                cgc_fwrite(v14, v37, v16);\n
                            if (!v13)\n
                                goto LABEL_404a3f;\n
                            a0 = &v13[v44];\n
                            a1 = v14;\n
                            a2 = v37;\n
                            goto LABEL_404a3a;\n
                        }\n
                    }\n
                    v0 = 4831842305;\n
                    if (((*(&v0 + ((a1 & 63) >> 3)) >> (a1 & 63 & 7)) & 1))\n
                    {\n
                        v11 = v19;\n
                        if (a2 != 100)\n
                        {\n
                            a1 = v4;\n
                            if (v13)\n
                            {\n
                                v25 = a1->field_0;\n
                                v13 = v2;\n
                                if (v25 > 40)\n
                                {\n
                                    v31 = a1->field_8;\n
                                    a1->field_8 = v31 + 8;\n
                                }\n
                                else\n
                                {\n
                                    v31 = v25 + a1->field_10;\n
                                    *(&a1->field_0) = v25 + 8;\n
                                }\n
                                v32 = *(v31);\n
                                if (a2 == 117)\n
                                    a0 = 10;\n
                                else\n
                                    a0 = 16;\n
                                v42 = (a2 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                if (!v32)\n
                                {\n
                                    v7 = *(v42);\n
                                    a1 = &v7;\n
                                }\n
                                else\n
                                {\n
                                    do\n
                                    {\n
                                        *((a1 - 1)) = v42[(0 CONCAT v32) /m a0 >> 32];\n
                                        a1 = &v7;\n
                                        tmp_50 = v32;\n
                                        v32 = (0 CONCAT v32) /m a0;\n
                                    } while (tmp_50 >= a0);\n
                                }\n
                                v41 = &v5;\n
                                cgc_memmove(&v5, a1, v10 + a1);\n
                                goto LABEL_40492c;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            a2 = v4;\n
                            v41 = &v5;\n
                            if (v13)\n
                            {\n
                                v24 = a2->field_0;\n
                                if (v24 <= 40)\n
                                {\n
                                    v28 = v24 + a2->field_10;\n
                                    *(&a2->field_0) = v24 + 8;\n
                                    v38 = *(v28);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                        goto LABEL_40484f;\n
                                }\n
                                else\n
                                {\n
                                    v30 = a2->field_8;\n
                                    a2->field_8 = &v30[1];\n
                                    v38 = *(v30);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                    {\n
LABEL_40484f:\n
                                        v5 = 45;\n
                                        v38 = -(v38);\n
                                        v9 = 0;\n
                                        a1 = &v9;\n
                                        a0 = &v6;\n
                                        do\n
                                        {\n
                                            v39 = 3435973837 * v38 >> 35;\n
                                            a2 = v39 * 2;\n
                                            *((a1 - 1)) = *((4228092 + v38 + -5 * a2));\n
                                            a1 -= 1;\n
                                            tmp_70 = v38;\n
                                            v38 = v39;\n
                                        } while (tmp_70 > 9);\n
                                        v41 = &v5;\n
LABEL_40489d:\n
                                        cgc_memmove(a0, a1, a1 - a0 + 20);\n
                                        v13 = v2;\n
LABEL_40492c:\n
                                        v45 = cgc_strlen(v41);\n
                                        v40 = v45;\n
                                        v34 = v11;\n
                                        if (v34 > v45)\n
                                        {\n
                                            v46 = v45 - v34;\n
                                            do\n
                                            {\n
                                                if (v44 < 2147483647)\n
                                                {\n
                                                    *(&v1) = v18;\n
                                                    if (v16)\n
                                                    {\n
                                                        a2 = v16;\n
                                                        cgc_fwrite(&v1, 1, v16);\n
                                                    }\n
                                                    if (v13)\n
                                                        *((v13 + v44)) = v1;\n
                                                }\n
                                                else\n
                                                {\n
                                                    if (!(v44 == -1))\n
                                                        continue;\n
                                                }\n
                                                tmp_2 = v44;\n
                                                v44 += 1;\n
                                                tmp_12 = v46 + 1;\n
                                                v46 += 1;\n
                                            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                                        }\n
                                        if (!(v44 < 2147483647))\n
                                            goto LABEL_404a3f;\n
                                        v43 = 2147483647 - v44;\n
                                        if (v43 > v45)\n
                                            v43 = v45;\n
                                        if (v16)\n
                                        {\n
                                            a1 = v43;\n
                                            a2 = v16;\n
                                            cgc_fwrite(&v5, v43, v16);\n
                                        }\n
                                        if (!v13)\n
                                            goto LABEL_404a3f;\n
                                        a0 = v13 + v44;\n
                                        a1 = &v5;\n
LABEL_404a37:\n
                                        a2 = v43;\n
LABEL_404a3a:\n
                                        cgc_memcpy(a0, a1, a2);\n
LABEL_404a3f:\n
                                        tmp_2 = v44;\n
                                        v44 += v40;\n
                                        if (__CFADD__(tmp_2, v40))\n
                                            goto LABEL_404b0f;\n
                                        goto LABEL_404a48;\n
                                    }\n
                                }\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                a0 = &v5;\n
                                if (!v29)\n
                                {\n
                                    v7 = 48;\n
                                    a0 = &v5;\n
                                    a1 = &v7;\n
                                    goto LABEL_40489d;\n
                                }\n
                            }\n
                        }\n
LABEL_404a95:\n
                        v13 = v2;\n
LABEL_404a9a:\n
                        if (v44 < 2147483647)\n
                            break;\n
                        if (v44 == -1)\n
                        {\n
LABEL_404b0f:\n
                            cgc__terminate(a0);\n
                            return cgc_realloc(a0, a1, a2, v34, v49, v50);\n
                        }\n
                        return v44;\n
                    }\n
                    else if (a1 == 11)\n
                    {\n
                        a2 = v4;\n
                        v23 = *(a2);\n
                        if (v23 <= 40)\n
                        {\n
                            v27 = v23 + *((a2 + 16));\n
                            v34 = v23 + 8;\n
                            *(a2) = v34;\n
                            v13 = v2;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_404a80;\n
                            goto LABEL_404806;\n
                        }\n
                        else\n
                        {\n
                            v27 = *((a2 + 8));\n
                            v34 = v27 + 8;\n
                            *((a2 + 8)) = v34;\n
                            v13 = v2;\n
                            if (v44 < 2147483647)\n
                            {\n
LABEL_404806:\n
                                *(&v1) = *(v27);\n
                                if (v16)\n
                                {\n
                                    a2 = v16;\n
                                    cgc_fwrite(&v1, 1, v16);\n
                                }\n
                                if (v13)\n
                                {\n
                                    *((v13 + v44)) = v1;\n
                                    goto LABEL_404a8a;\n
                                }\n
                            }\n
                            else\n
                            {\n
LABEL_404a80:\n
                                if (v44 == -1)\n
                                    goto LABEL_404b0f;\n
LABEL_404a8a:\n
                                v44 += 1;\n
LABEL_404a48:\n
                                v15 = v3;\n
                                v14 = v15 + 1;\n
                                v3 = v14;\n
                                *(&v15) = *(v15);\n
                                if (!*(&v15))\n
                                    goto LABEL_404a9a;\n
                            }\n
                        }\n
                    }\n
                    else if (a1 == 27)\n
                    {\n
                        a2 = v4;\n
                        v26 = a2->field_0;\n
                        if (v26 > 40)\n
                        {\n
                            v33 = a2->field_8;\n
                            v34 = v33 + 8;\n
                            a2->field_8 = v34;\n
                        }\n
                        else\n
                        {\n
                            v33 = v26 + a2->field_10;\n
                            v34 = v26 + 8;\n
                            *(&a2->field_0) = v34;\n
                        }\n
                        v13 = v2;\n
                        v35 = *(v33);\n
                        v36 = cgc_strlen(v35);\n
                        v40 = v36;\n
                        if (!(v44 < 2147483647))\n
                            goto LABEL_404a3f;\n
                        v43 = 2147483647 - v44;\n
                        if (v43 > v36)\n
                            v43 = v36;\n
                        if (v16)\n
                            cgc_fwrite(v35, v43, v16);\n
                        if (!v13)\n
                            goto LABEL_404a3f;\n
                        a0 = &v13[v44];\n
                        a1 = v35;\n
                        goto LABEL_404a37;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v13)\n
        *((v13 + v44)) = 0;\n
    return v44;\n
}\n
", "4212072:sub_404568": null, "4212193:sub_4045e1": null, "4213066:sub_40494a": null, "4213143:sub_404997": null, "4213536:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4213554:sub_404b32": null, "4213568:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    struct_0 *v5;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v5 = a0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v3 = cgc_tolower(v2);\n
            v2 = cgc_tolower(*(v1));\n
            if (v3 != v2)\n
            {\n
                *(&v2) = *((v5 - 1));\n
                return v2 - *(v1);\n
            }\n
            v1 += 1;\n
            v2 = *(v5);\n
            v5 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4213665:sub_404ba1": null, "4213680:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4213776:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    char v1;  // cl, Other Possible Types: unsigned long long, unsigned long\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4213833:sub_404c49": null, "4213840:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4213893:sub_404c85": null, "4213904:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4213957:sub_404cc5": null, "4213968:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214029:sub_404d0d": null, "4214032:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4214066:sub_404d32": null, "4214080:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4214191:sub_404daf": null, "4214192:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    char *v1;  // rax\n
    char v2;  // cl\n
    char *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    unsigned long v5;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r10\n
    char *v7;  // r10\n
    unsigned long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r11\n
    unsigned long long v11;  // r9\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // r11, Other Possible Types: unsigned long long\n
    uint128_t *v14;  // rcx\n
    unsigned long v16;  // rsi\n
    char *v17;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r8\n
    unsigned long long v19;  // rcx\n
    unsigned long v20;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    v4 = 0;\n
    v3 = v1;\n
    if (*(a1) && a2)\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1[v4] = v2;\n
            v2 = a1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
            if (v4 >= a2)\n
                break;\n
        }\n
        v3 = &v1[v4];\n
    }\n
    if (v4 >= a2)\n
        return v1;\n
    v5 = 1 + v3 - v1;\n
    v6 = (!(a2 <= v5) ? v5 : a2);\n
    v7 = &v1[v6 + -1 * v3];\n
    if (v7 < 8)\n
    {\n
LABEL_404e14:\n
        v17 = v3;\n
        goto LABEL_404f46;\n
    }\n
    else\n
    {\n
        if (v7 < 32)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7 & -0x20;\n
            v9 = v8 - 32;\n
            v10 = (v9 >> 5) + 1;\n
            v11 = v10 & 7;\n
            if (v9 < 224)\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                v13 = v10 & -8;\n
                v12 = 0;\n
                do\n
                {\n
                    *((v3 + v12)) = 0;\n
                    *((v3 + v12 + 16)) = 0;\n
                    *((v3 + v12 + 32)) = 0;\n
                    *((v3 + v12 + 48)) = 0;\n
                    *((v3 + v12 + 64)) = 0;\n
                    *((v3 + v12 + 80)) = 0;\n
                    *((v3 + v12 + 96)) = 0;\n
                    *((v3 + v12 + 112)) = 0;\n
                    *((v3 + v12 + 128)) = 0;\n
                    *((v3 + v12 + 144)) = 0;\n
                    *((v3 + v12 + 160)) = 0;\n
                    *((v3 + v12 + 176)) = 0;\n
                    *((v3 + v12 + 192)) = 0;\n
                    *((v3 + v12 + 208)) = 0;\n
                    *((v3 + v12 + 224)) = 0;\n
                    *((v3 + v12 + 240)) = 0;\n
                    v12 += 0x100;\n
                    tmp_21 = v13;\n
                    v13 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v11)\n
            {\n
                v14 = v12 + v3 + 16;\n
                v16 = 0;\n
                do\n
                {\n
                    *((-16 + v14 + v16)) = 0;\n
                    *((v14 + v16)) = 0;\n
                    v16 += 32;\n
                } while (v11 * 32 != v16);\n
            }\n
            if (v7 == v8)\n
                return v1;\n
            if (!(v7 & 24))\n
            {\n
                v3 += v8;\n
                goto LABEL_404e14;\n
            }\n
        }\n
        if (a2 > v5)\n
            v5 = a2;\n
        v18 = &v1[v5 + -1 * v3];\n
        v19 = v18 & -8;\n
        v17 = v3 + v19;\n
        do\n
        {\n
            *((v3 + v8)) = 0;\n
            v8 += 8;\n
        } while (v19 != v8);\n
        if (v18 == v19)\n
            return v1;\n
LABEL_404f46:\n
        v20 = v17 - v1;\n
        do\n
        {\n
            *(v17) = 0;\n
            v17 += 1;\n
            v20 += 1;\n
        } while (v20 < a2);\n
        return v1;\n
    }\n
}\n
", "4214634:sub_404f6a": null, "4214640:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4214711:sub_404fb7": null, "4214720:cgc_strsep": "long long cgc_strsep(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    unsigned long v3;  // r15\n
    unsigned long v4;  // rbx\n
    unsigned long v5;  // rax\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rbx\n
    unsigned long v9;  // rbx\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = cgc_strchr(a1, v2);\n
            if (v5)\n
            {\n
                v7 = v3 + v4;\n
                if (!*((v3 + v4)))\n
                    goto LABEL_405005;\n
                v8 = v4 + 1;\n
                v9 = v8 + v3;\n
                goto LABEL_405007;\n
            }\n
            v4 = v4 + 1;\n
            v2 = *((v3 + v4));\n
        } while (v2);\n
        v6 = v4;\n
    }\n
    v7 = v6 + v3;\n
LABEL_405005:\n
    v9 = 0;\n
LABEL_405007:\n
    *(a0) = v9;\n
    *(v7) = 0;\n
    return *(a0);\n
}\n
", "4214833:sub_405031": null, "4214848:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4214927:sub_40508f": null, "4214928:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    unsigned int v25;  // ebp\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // edx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_405268;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_405151;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_405151:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_405190:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_405299;\n
LABEL_4051a6:\n
                *(&v18) = *(v16);\n
LABEL_4051a8:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_4051b5:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 > 2147483647)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_405268;\n
                }\n
LABEL_405299:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_405268;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_405268;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_4051b5;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_405190;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_405186:\n
            v19 = 16;\n
            goto LABEL_4051a6;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_4051a6;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_4051a8;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_405186;\n
LABEL_405268:\n
    v31 = (!v25 ? -0x80000000 : -(v26));\n
    v32 = (!v25 ? 2147483647 : v26);\n
    if (v30 < 0)\n
        v32 = v31;\n
    return v32;\n
}\n
", "4215273:sub_4051e9": null, "4215471:sub_4052af": null, "4215472:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    void* v25;  // rbp, Other Possible Types: unsigned long, unsigned long long, unsigned int\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned long v32;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_405488;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_405371;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_405371:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_4053b0:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_4054c4;\n
LABEL_4053c6:\n
                *(&v18) = *(v16);\n
LABEL_4053c8:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_4053d5:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 >> 32)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_405488;\n
                }\n
LABEL_4054c4:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_405488;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_405488;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_4053d5;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_4053b0;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_4053a6:\n
            v19 = 16;\n
            goto LABEL_4053c6;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_4053c6;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_4053c8;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_4053a6;\n
LABEL_405488:\n
    if (v30 < 0)\n
    {\n
        v31 = (v26 == -0x80000000 ? 1 : v25);\n
        if (v26 <= 2147483647)\n
            v31 = v25;\n
        v26 = -(v26);\n
        v25 = v31;\n
    }\n
    v32 = (!v25 ? 4294967295 : v26);\n
    return v32;\n
}\n
", "4215817:sub_405409": null, "4216026:sub_4054da": null, "4216032:cgc_print_menu": "long long cgc_print_menu()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_printf(\"1. Compress\\n
\");\n
    cgc_printf(\"2. Decompress\\n
\");\n
    return cgc_printf(\"3. Quit\\n
\");\n
}\n
", "4216076:sub_40550c": null, "4216080:cgc_handle_compress": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_handle_compress()\n
{\n
    void* v0;  // [bp-0x1098]\n
    void* v1;  // [bp-0x1090]\n
    unsigned long long v2;  // [bp-0x1088]\n
    char v5;  // [bp-0x1028]\n
    unsigned long long v7[14];  // r15, Other Possible Types: unsigned long\n
    unsigned long v8;  // r14\n
    char v9;  // dl\n
    unsigned long v10;  // rcx\n
    char v11;  // dl\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // rcx\n
    void* v14;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v15;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v16;  // rdi\n
\n
    v1 = 0;\n
    v0 = 0;\n
    v7 = 0;\n
    cgc_printf(\"Key?\\n
\");\n
    v8 = \"error.\\n
\";\n
    if (cgc_fread(&v2, 95, cgc_stdin) == 95)\n
    {\n
        v7 = 0;\n
        cgc_memset(&v5, 0, 0x1000);\n
        v12 = 1;\n
        v13 = v2;\n
        if (v13 - 127 >= 161)\n
        {\n
            while (true)\n
            {\n
                v9 = (&v5)[v13];\n
                (&v5)[v13] = v9 + 1;\n
                if (v9)\n
                    break;\n
                if (v12 == 95)\n
                {\n
                    v7 = 0;\n
                    cgc_printf(\"Data?\\n
\");\n
                    cgc_memset(&v5, 0, 0x1000);\n
                    cgc_fflush(cgc_stdout);\n
                    if (cgc_freaduntil(&v5, 0x1000, 0, cgc_stdin) >= 0)\n
                    {\n
                        v7 = cgc_sc_new(&v2);\n
                        *((v7 + 96)) = &v5;\n
                        *((v7 + 104)) = cgc_strlen(&v5);\n
                        if (cgc_sc_scompress(v7, &v1, &v0) >= 0)\n
                        {\n
                            cgc_printf(\"Original Size: %d\\n
\");\n
                            cgc_printf(\"Compressed Size: %d (%d%%)\\n
\");\n
                            cgc_printf(\"Compressed Data: \");\n
                            v8 = \"\\n
\";\n
                            if (v0)\n
                            {\n
                                v14 = 0;\n
                                while (true)\n
                                {\n
                                    cgc_printf(\"%02X\");\n
                                    if (v14 > 30)\n
                                        break;\n
                                    v14 += 1;\n
                                    if (v0 <= v14)\n
                                        break;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    v10 = *(&v2 + v12);\n
                    if (v10 - 127 < 161)\n
                        break;\n
                    v11 = (&v5)[v10];\n
                    (&v5)[v10] = v11 + 1;\n
                    if (v11)\n
                        break;\n
                    v12 += 2;\n
                    v13 = *(&v1 + v12);\n
                    if (v13 - 127 < 161)\n
                        break;\n
                }\n
            }\n
        }\n
    }\n
    v15 = cgc_printf(v8);\n
    if (v7)\n
        v15 = cgc_free(v7);\n
    v16 = v1;\n
    if (v16)\n
        v15 = cgc_free(v16);\n
    return v15;\n
}\n
", "4216696:sub_405778": null, "4216704:cgc_handle_decompress": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_handle_decompress()\n
{\n
    void* v0;  // [bp-0x1098]\n
    void* v1;  // [bp-0x1090]\n
    unsigned long long v2;  // [bp-0x1088]\n
    char v5;  // [bp-0x1028]\n
    unsigned long v7;  // rax\n
    unsigned long v8;  // rcx\n
    char v9;  // dl\n
    unsigned long v10;  // rcx\n
    char v11;  // dl\n
    unsigned long long v12;  // rax\n
    unsigned long v14;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v15[14];  // rbx\n
    unsigned long long v16;  // rdi\n
\n
    v0 = 0;\n
    v1 = 0;\n
    cgc_printf(\"Key?\\n
\");\n
    if (cgc_fread(&v2, 95, cgc_stdin) == 95)\n
    {\n
        cgc_memset(&v5, 0, 0x1000);\n
        v7 = 1;\n
        v8 = v2;\n
        if (v8 - 127 >= 161)\n
        {\n
            while (true)\n
            {\n
                v9 = (&v5)[v8];\n
                (&v5)[v8] = v9 + 1;\n
                if (v9)\n
                    break;\n
                if (v7 == 95)\n
                {\n
                    cgc_printf(\"Length?\\n
\");\n
                    cgc_memset(&v5, 0, 0x1000);\n
                    cgc_fflush(cgc_stdout);\n
                    if (cgc_freaduntil(&v5, 0x1000, 10, cgc_stdin) >= 0)\n
                    {\n
                        v12 = cgc_strtoul(&v5, NULL, 10);\n
                        if (v12 <= 0x1000)\n
                        {\n
                            cgc_printf(\"Data?\\n
\");\n
                            cgc_memset(&v5, 0, 0x1000);\n
                            if (cgc_fread(&v5, v12, cgc_stdin) >= 0)\n
                            {\n
                                v15 = cgc_sc_new(&v2);\n
                                v15[12] = &v5;\n
                                v15[13] = v12;\n
                                if (cgc_sc_sdecompress(v15, &v0, &v1) < 0)\n
                                {\n
                                    cgc_printf(\"error.\\n
\");\n
                                }\n
                                else\n
                                {\n
                                    cgc_printf(\"Compressed Size: %d\\n
\");\n
                                    cgc_strlen(v0);\n
                                    cgc_printf(\"Original Size: %d\\n
\");\n
                                    cgc_printf(\"Original Data: \");\n
                                    cgc_fwrite(v0, v1, cgc_stdout);\n
                                    cgc_fwrite(\"\\n
\", 1, cgc_stdout);\n
                                }\n
                                v14 = cgc_free(v15);\n
                                v16 = v0;\n
                                if (v16)\n
                                {\n
                                    v14 = cgc_free(v16);\n
                                    return v14;\n
                                }\n
                                return v14;\n
                            }\n
                            break;\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    v10 = *(&v2 + v7);\n
                    if (v10 - 127 < 161)\n
                        break;\n
                    v11 = (&v5)[v10];\n
                    (&v5)[v10] = v11 + 1;\n
                    if (v11)\n
                        break;\n
                    v7 += 2;\n
                    v8 = *(&v1 + v7);\n
                    if (v8 - 127 < 161)\n
                        break;\n
                }\n
            }\n
        }\n
    }\n
    v14 = cgc_printf(\"error.\\n
\");\n
    return v14;\n
}\n
", "4217295:sub_4059cf": null, "4217296:main": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int main()\n
{\n
    char v0[2];  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    *(v0) = v2;\n
    cgc_fbuffered(cgc_stdin, 1);\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"%02X\");\n
    cgc_printf(\"\\n
\");\n
    cgc_printf(\"1. Compress\\n
\");\n
    cgc_printf(\"2. Decompress\\n
\");\n
    cgc_printf(\"3. Quit\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(v0, 8, 10, cgc_stdin) < 0)\n
        return -1;\n
    v3 = cgc_strtoul(v0, NULL, 10);\n
    if (v3 == 1)\n
    {\n
        cgc_handle_compress();\n
    }\n
    else if (v3 == 2)\n
    {\n
        cgc_handle_decompress();\n
    }\n
    else if (v3 != 3)\n
    {\n
        cgc_printf(\"Invalid menu.\\n
\");\n
    }\n
    else\n
    {\n
        cgc_printf(\"Bye.\\n
\");\n
        cgc_fflush(cgc_stdout);\n
        cgc_exit();\n
    }\n
    cgc_printf(\"1. Compress\\n
\");\n
    cgc_printf(\"2. Decompress\\n
\");\n
    cgc_printf(\"3. Quit\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_freaduntil(v0, 8, 10, cgc_stdin) < 0)\n
        return -1;\n
    do\n
    {\n
        v4 = cgc_strtoul(v0, NULL, 10);\n
        if (v4 == 3)\n
        {\n
            cgc_printf(\"Bye.\\n
\");\n
            cgc_fflush(cgc_stdout);\n
            cgc_exit();\n
        }\n
        else if (v4 == 2)\n
        {\n
            cgc_handle_decompress();\n
        }\n
        else if (v4 == 1)\n
        {\n
            cgc_handle_compress();\n
        }\n
        else\n
        {\n
            cgc_printf(\"Invalid menu.\\n
\");\n
        }\n
        cgc_printf(\"1. Compress\\n
\");\n
        cgc_printf(\"2. Decompress\\n
\");\n
        cgc_printf(\"3. Quit\\n
\");\n
        cgc_fflush(cgc_stdout);\n
    } while (cgc_freaduntil(v0, 8, 10, cgc_stdin) >= 0);\n
    return -1;\n
}\n
", "4217722:sub_405b7a": null, "4217861:sub_405c05": null, "4217879:sub_405c17": null, "4217927:sub_405c47": null, "4217936:cgc_bit_new": "long long cgc_bit_new(unsigned long a0)\n
{\n
    unsigned long long v1[2];  // rax\n
\n
    v1 = cgc_malloc(16);\n
    v1[0] = a0;\n
    v1[1] = 0;\n
    return v1;\n
}\n
", "4217963:sub_405c6b": null, "4217968:cgc_bit_read": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_bit_read(struct_0 *a0, unsigned long a1)\n
{\n
    char *v1;  // r8\n
    unsigned long v2;  // r9\n
    void* v3;  // rax\n
    unsigned int v4;  // r10d, Other Possible Types: char\n
    void* v5;  // rdx, Other Possible Types: unsigned long\n
\n
    if (!a1)\n
        return 0;\n
    v1 = a0->field_0;\n
    v2 = a0->field_8;\n
    v5 = a0->field_c;\n
    v4 = v1[v2];\n
    v3 = 0;\n
    do\n
    {\n
        if (v5 == 8)\n
        {\n
            v2 = v2 + 1;\n
            a0->field_8 = v2;\n
            v4 = v1[v2];\n
            v5 = 0;\n
        }\n
        a1 -= 1;\n
        *(&v3) = v3 | (((1 << (7 - v5 & 31)) & v4) >> (7 - v5 & 31)) << (a1 & 31);\n
        v5 = v5 + 1;\n
        a0->field_c = v5;\n
    } while (a1);\n
    return v3;\n
}\n
", "4217992:sub_405c88": null, "4218069:sub_405cd5": null, "4218080:cgc_bit_write": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_bit_write(struct_0 *a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // r8, Other Possible Types: unsigned long\n
    unsigned long v2;  // r9\n
    void* v5;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v6;  // al, Other Possible Types: char\n
    char v7;  // bl\n
    char v8;  // cl\n
    void* v9;  // r11, Other Possible Types: unsigned long, unsigned long long\n
\n
    v1 = a0->field_0;\n
    v2 = a0->field_8;\n
    v6 = v1[v2];\n
    if (!a2)\n
    {\n
        *((v1 + v2)) = v6;\n
        return v6;\n
    }\n
    v5 = a0->field_c;\n
    v9 = 0;\n
    do\n
    {\n
        if (v5 == 8)\n
        {\n
            *((v1 + v2)) = v6;\n
            v1 = a0->field_0;\n
            v2 = a0->field_8 + 1;\n
            a0->field_8 = v2;\n
            v6 = v1[v2];\n
            v5 = 0;\n
        }\n
        v7 = v6;\n
        v8 = v9 + 7;\n
        v6 = ((1 << (v8 & 31)) & a1) >> (v8 & 31) << (7 - v5 & 31);\n
        *(&v6) = v6 | v7;\n
        v5 = v5 + 1;\n
        a0->field_c = v5;\n
        v9 -= 1;\n
    } while (-(a2) != v9);\n
}\n
", "4218199:sub_405d57": null, "4218208:cgc__find_char": "long long cgc__find_char(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4218242:sub_405d82": null, "4218256:cgc__sc_compare": "long long cgc__sc_compare(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    char *v1;  // r9, Other Possible Types: unsigned long\n
    unsigned long long v2;  // rax\n
    unsigned long long v3;  // r8\n
    char *v4;  // rsi, Other Possible Types: unsigned long\n
    void* v5;  // rdx, Other Possible Types: unsigned long\n
    unsigned long v6;  // rsi\n
\n
    if (!a3)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v2 = *((a1 + v1));\n
        v3 = *((a2 + v1));\n
        if (v2 != v3)\n
            break;\n
        v1 += 1;\n
        if (a3 == v1)\n
            return 0;\n
    }\n
    v5 = 0;\n
    v4 = 0;\n
    do\n
    {\n
        if (*((a0 + v4)) == v2)\n
        {\n
            v5 = v4 + a0;\n
            break;\n
        }\n
        v4 += 1;\n
    } while (a3 != v4);\n
    v6 = 0;\n
    while (*((a0 + v6)) != v3)\n
    {\n
        v6 += 1;\n
        if (a3 == v6)\n
            return v2 - v3;\n
    }\n
    if (!v5)\n
        return v2 - v3;\n
    return v5 - a0 - v6;\n
}\n
", "4218369:sub_405e01": null, "4218384:cgc_sc_new": "typedef struct struct_0 {\n
    char padding_0[112];\n
    unsigned long long field_70;\n
} struct_0;\n
\n
long long cgc_sc_new(unsigned int a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(120);\n
    cgc_memset(v3, 0, 0x78);\n
    cgc_memcpy(v3, a0, 0x5f);\n
    v3->field_70 = cgc__sc_compare;\n
    return v3;\n
}\n
", "4218457:sub_405e59": null, "4218464:cgc_sc_scompress": "long long cgc_sc_scompress(unsigned long long a0[14], unsigned long long *a1, unsigned long long *a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v4[14];  // rbx\n
    unsigned long long v5;  // r13\n
    unsigned long long v6;  // rax\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v4 = a0;\n
        v0 = a0[12];\n
        v5 = a0[13];\n
        v6 = cgc_sc_bwt();\n
        if (v6)\n
        {\n
            a0[12] = v6;\n
            a0[13] = *(a2);\n
            *(a1) = cgc_sc_mtf(a0, 0, a2);\n
            cgc_free(v6);\n
            v4[12] = v0;\n
            v4[13] = v5;\n
            return -(*(a1) < 1);\n
        }\n
        return 4294967295;\n
    }\n
}\n
", "4218604:sub_405eec": null, "4218608:cgc_sc_bwt": "typedef struct struct_2 {\n
    char padding_0[96];\n
    struct struct_3 *field_60;\n
    unsigned long long field_68;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char field_-3;\n
    char field_-2;\n
    char padding_-1[9];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned short field_0;\n
} struct_3;\n
\n
long long cgc_sc_bwt(struct_2 *a0, unsigned long a1, unsigned long long *a2)\n
{\n
    struct_2 *v0;  // [bp-0x290]\n
    int tmp_12;  // tmp #12\n
    int tmp_8;  // tmp #8\n
    char *v1;  // [bp-0x288]\n
    char *v2;  // [bp-0x280]\n
    struct struct_1 **v3;  // [bp-0x278]\n
    unsigned long v4;  // [bp-0x270]\n
    unsigned short *v5;  // [bp-0x268]\n
    char *v6;  // [bp-0x260]\n
    unsigned short *v7;  // [bp-0x258], Other Possible Types: unsigned long\n
    unsigned long v8;  // [bp-0x250]\n
    unsigned long long *v9;  // [bp-0x248]\n
    char *v10;  // [bp-0x240]\n
    char v11;  // [bp-0x238]\n
    char v12;  // [bp-0x237]\n
    char v13;  // [bp-0x236]\n
    char v14;  // [bp-0x235]\n
    unsigned long long v16;  // rax\n
    unsigned short *v17;  // r12, Other Possible Types: unsigned long, void*\n
    unsigned long long *v18;  // r14\n
    struct struct_1 **v19;  // r13\n
    char *v21;  // rax\n
    unsigned long v22;  // rbp\n
    struct_2 *v23;  // r15, Other Possible Types: unsigned long\n
    unsigned long long v24;  // rbp\n
    struct struct_1 **v25;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v26;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v27;  // rax\n
    unsigned long v28;  // r12\n
    struct struct_0 **v29;  // rcx\n
    struct struct_0 **v30;  // rbp\n
    unsigned long v31;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v32;  // esi, Other Possible Types: unsigned int\n
    unsigned int v33;  // eax\n
    struct_4 *v34;  // rax\n
    unsigned long v35;  // rsi\n
    struct struct_0 **v36;  // rax, Other Possible Types: unsigned long\n
    unsigned long v37;  // rdi\n
    unsigned long v38;  // rsi\n
    unsigned long long v39;  // rax\n
    unsigned long v40;  // rdx\n
    unsigned long long v41;  // rbp\n
    unsigned long long v42;  // rax\n
    char *v43;  // r8\n
    void* v44;  // rbp, Other Possible Types: unsigned long, unsigned short\n
    char *v45;  // rax\n
    unsigned long v46;  // rdx\n
    unsigned long long v47;  // r9\n
    unsigned long v48;  // rsi\n
    unsigned long v49;  // rdx\n
    char *v50;  // r8, Other Possible Types: unsigned long long, unsigned long\n
    struct_2 *v51;  // rbp, Other Possible Types: unsigned long\n
    char *v52;  // rax\n
    unsigned long v53;  // rdx\n
    unsigned long v54;  // rsi\n
    char *v55;  // rcx, Other Possible Types: unsigned long\n
    char *v56;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v57;  // r15, Other Possible Types: unsigned long long\n
    char *v58;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v59;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long v60;  // rbx\n
    unsigned long v61;  // rbp\n
    char *v62;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v63;  // r15\n
    unsigned long long v64;  // r12\n
    char *v65;  // rbp\n
    unsigned long v66;  // rax\n
    char *v67;  // rcx\n
    unsigned long v68;  // rax\n
    unsigned long v69;  // rdx\n
    unsigned long long v70;  // rax\n
    char *v71;  // r8\n
    unsigned long long *v72;  // r14\n
    unsigned long v73;  // rax, Other Possible Types: unsigned long long\n
    char *v74;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v75;  // rsi\n
    unsigned short *v76;  // rbx\n
    unsigned long long v77;  // rbp\n
    unsigned long v78;  // rbx\n
\n
    v16 = a0->field_68;\n
    if (v16 > 0x1000)\n
        return 0;\n
    v18 = a2;\n
    v0 = a0;\n
    *(a2) = v16 + ((v16 >> 9) - -1 - ((v16 & 511) < 1)) * 2;\n
    v19 = cgc_malloc(0x1000);\n
    v17 = cgc_malloc(*(a2));\n
    v22 = 0;\n
    cgc_memset(v17, 0, *(a2));\n
    do\n
    {\n
        v21 = cgc_malloc(0x200);\n
        v19[v22] = &v21;\n
        cgc_memset(v21, 0, 0x200);\n
        v22 += 1;\n
    } while (v22 != 0x200);\n
    v5 = v17;\n
    if (a1)\n
    {\n
        *(v18) = 0;\n
        v23 = v0;\n
        v24 = v23->field_68;\n
        if (v24)\n
        {\n
            v25 = v23->field_60->field_0;\n
            v58 = v24 - 2;\n
            if (0x200 <= v58)\n
                v58 = 0x200;\n
            *(v18) = v58;\n
            if (v58 >= v25)\n
            {\n
                v8 = v17 + 1;\n
                v59 = 2;\n
                v7 = v17;\n
                v9 = v18;\n
                while (true)\n
                {\n
                    v3 = v25;\n
                    cgc_memset(&v11, 0, 0x200);\n
                    v4 = v59;\n
                    cgc_memcpy(&v11, *((v23 + 96)) + v59, v58);\n
                    v60 = 0;\n
                    do\n
                    {\n
                        cgc_memset(v19[v60], 0, 0x200);\n
                        v60 += 1;\n
                    } while (v60 != 0x200);\n
                    v1 = v58;\n
                    tmp_12 = v58;\n
                    v61 = v3;\n
                    if (tmp_12)\n
                    {\n
                        v62 = v1;\n
                        v6 = v62 * 8;\n
                        v10 = v62 + 1;\n
                        v63 = v62 & 3;\n
                        v64 = v62 & 1020;\n
                        do\n
                        {\n
                            v2 = v62;\n
                            v65 = v62 - 1;\n
                            if (v10 < 3)\n
                            {\n
                                v66 = 0;\n
                            }\n
                            else\n
                            {\n
                                v66 = 0;\n
                                do\n
                                {\n
                                    *((v19[v66] + v65)) = (&v11)[v66];\n
                                    *((v19[1 + v66] + v65)) = (&v12)[v66];\n
                                    *((v19[2 + v66] + v65)) = (&v13)[v66];\n
                                    *((v19[3 + v66] + v65)) = (&v14)[v66];\n
                                    v66 += 4;\n
                                } while (v64 != v66);\n
                            }\n
                            if (v63)\n
                            {\n
                                v67 = &v19[v66];\n
                                v68 = &(&v11)[v66];\n
                                v69 = 0;\n
                                do\n
                                {\n
                                    v65[*(&v67[8 * v69])] = *((v68 + v69));\n
                                    v69 += 1;\n
                                } while (v63 != v69);\n
                            }\n
                            v70 = cgc_malloc(v6);\n
                            cgc__msort(v19, v70, 0, v1, v0);\n
                            cgc_free(v70);\n
                            v62 = v65;\n
                            v61 = v3;\n
                        } while (v2 > 1);\n
                    }\n
                    v71 = v1;\n
                    v17 = v5;\n
                    v23 = v0;\n
                    v72 = v9;\n
                    if (v71)\n
                    {\n
                        v73 = v71 & 3;\n
                        if (v71 + 1 < 3)\n
                        {\n
                            v74 = 0;\n
                        }\n
                        else\n
                        {\n
                            v75 = v7 + v4;\n
                            v74 = 0;\n
                            do\n
                            {\n
                                *((v75 + v74 - 2)) = *(&v19[v61]->field_0 + v74);\n
                                *((v75 + v74 - 1)) = *(1 + &v19[v61]->field_0 + v74);\n
                                *((v75 + v74)) = *(2 + &v19[v61]->field_0 + v74);\n
                                *((v75 + v74 + 1)) = *(3 + &v19[v61]->field_0 + v74);\n
                                v74 += 4;\n
                            } while ((v71 & 1020) != v74);\n
                        }\n
                        if (v73)\n
                        {\n
                            do\n
                            {\n
                                *((v8 + v4 + v74)) = *(&v19[v61]->field_0 + v74);\n
                                v74 += 1;\n
                                tmp_8 = v73;\n
                                v73 -= 1;\n
                            } while (tmp_8 != 1);\n
                        }\n
                    }\n
                    v76 = &v71[v4];\n
                    v77 = *((v23 + 104));\n
                    if (v76 >= v77)\n
                        break;\n
                    v25 = *((*((v23 + 96)) + v76));\n
                    v59 = v76 + 1;\n
                    v58 = v77 - v59;\n
                    if (0x200 <= v58)\n
                        v58 = 0x200;\n
                    *(v72) = *(v72) + v58;\n
                    v7 += 1;\n
                    v8 -= 2;\n
                    if (v58 < v25)\n
                        goto LABEL_4062c2;\n
                }\n
            }\n
LABEL_4062c2:\n
            cgc_free(v17);\n
            v17 = 0;\n
        }\n
    }\n
    else\n
    {\n
        v51 = v0;\n
        v57 = v51->field_68;\n
        if (v57)\n
        {\n
            v6 = &v17[2] + 1;\n
            v3 = &v17[1];\n
            v50 = 0;\n
            v56 = 0;\n
            do\n
            {\n
                v1 = v50;\n
                v26 = v57 - v56;\n
                if (0x200 <= v26)\n
                    v26 = 0x200;\n
                cgc_memset(&v11, 0, 0x200);\n
                v2 = v56;\n
                cgc_memcpy(&v11, *((v51 + 96)) + v56, v26);\n
                if (!v26)\n
                {\n
                    v27 = cgc_malloc(v26 * 8);\n
                    cgc__msort(v19, v27, 0, 0, v51);\n
                    cgc_free(v27);\n
                    v17 = v5;\n
                    goto LABEL_40633f;\n
                }\n
                else\n
                {\n
                    v28 = 0;\n
                    do\n
                    {\n
                        cgc_memcpy(v19[v28], &v11, v26);\n
                        v29 = v19[v28];\n
                        v30 = 0;\n
                        while (true)\n
                        {\n
                            v31 = v26;\n
                            v32 = v28;\n
                            do\n
                            {\n
                                v33 = v32;\n
                                v32 = v31;\n
                                v31 = (v33 >> 31 CONCAT v33) /m v31 >> 32;\n
                            } while (v31);\n
                            if (v30 >= v32)\n
                                break;\n
                            v34 = v28 + v30;\n
                            v35 = (!(v26 <= v34) ? v26 : 0);\n
                            *(&v50) = *((v29 + v30));\n
                            v36 = &(&v34->field_-3)[-1 * v35];\n
                            v37 = v30;\n
                            if (v30 != v36)\n
                            {\n
                                v38 = v30;\n
                                do\n
                                {\n
                                    v37 = v36;\n
                                    v39 = v36 + v28;\n
                                    v40 = (!(v26 <= v39) ? v26 : 0);\n
                                    *(v29 + v38) = *(v29 + v37);\n
                                    v36 = v39 - v40;\n
                                    v38 = v37;\n
                                } while (v30 != v36);\n
                            }\n
                            *(v29 + v37) = v50;\n
                            v41 = v30 + 1;\n
                        }\n
                        v28 += 1;\n
                    } while (v28 != v26);\n
                    v42 = cgc_malloc(v26 * 8);\n
                    cgc__msort(v19, v42, 0, v26, v0);\n
                    cgc_free(v42);\n
                    v17 = v5;\n
                    if (!v26)\n
                    {\n
LABEL_40633f:\n
                        v55 = v2;\n
                        v43 = v1;\n
                        *((&v55[v17] + 0x2 * v43)) = 0;\n
                        v50 = v43 + 1;\n
                        goto LABEL_406358;\n
                    }\n
                    else\n
                    {\n
                        v44 = 0;\n
                        while (cgc_memcmp(v19[v44], &v11, v26))\n
                        {\n
                            v44 += 1;\n
                            if (v26 == v44)\n
                            {\n
                                v44 = v26;\n
                                break;\n
                            }\n
                        }\n
                        v55 = v2;\n
                        v45 = v1;\n
                        v50 = v45 + 1;\n
                        v46 = v55 + 0x2 * v45;\n
                        *((v17 + v46)) = v44;\n
                        if (!v26)\n
                        {\n
LABEL_406358:\n
                            v51 = v0;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v47 = v26 & 3;\n
                            if (v26 - 1 < 3)\n
                            {\n
                                v48 = 0;\n
                            }\n
                            else\n
                            {\n
                                v49 = &v6[v46];\n
                                v48 = 0;\n
                                do\n
                                {\n
                                    *((v49 + v48 - 3)) = *(-1 + &v19[v48]->field_0 + v26);\n
                                    *((v49 + v48 - 2)) = *(-1 + &v19[1 + v48]->field_0 + v26);\n
                                    *((v49 + v48 - 1)) = *(-1 + &v19[2 + v48]->field_0 + v26);\n
                                    *((v49 + v48)) = *(-1 + &v19[3 + v48]->field_0 + v26);\n
                                    v48 += 4;\n
                                } while ((v26 & 1020) != v48);\n
                            }\n
                            if (!v47)\n
                                goto LABEL_406358;\n
                            v52 = 0x2 * v45 + v48 + v55 + v3;\n
                            v53 = &v19[v48];\n
                            v54 = 0;\n
                            v51 = v0;\n
                            do\n
                            {\n
                                v52[v54] = *((*((v53 + v54 * 8)) + v26 - 1));\n
                                v54 += 1;\n
                            } while (v47 != v54);\n
                        }\n
                    }\n
                }\n
                v56 = v55 + v26;\n
                v57 = *((v51 + 104));\n
            } while (v57 > v56);\n
        }\n
    }\n
    v78 = 0;\n
    do\n
    {\n
        cgc_free(v19[v78]);\n
        v78 += 1;\n
    } while (v78 != 0x200);\n
    cgc_free(v19);\n
    return v17;\n
}\n
", "4219054:sub_4060ae": null, "4219141:sub_406105": null, "4219289:sub_406199": null, "4219345:sub_4061d1": null, "4219652:sub_406304": null, "4219841:sub_4063c1": null, "4219896:sub_4063f8": null, "4220021:sub_406475": null, "4220404:sub_4065f4": null, "4220416:cgc_sc_mtf": "typedef struct struct_1 {\n
    char padding_0[96];\n
    struct struct_2 *field_60;\n
    char *field_68;\n
} struct_1;\n
\n
typedef struct struct_6 {\n
    char padding_0[96];\n
    struct struct_2 *field_60;\n
    unsigned long long field_68;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_5 {\n
    struct struct_2 *field_0;\n
    unsigned int field_8;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    unsigned int field_8;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_3 *field_0;\n
} struct_3;\n
\n
long long cgc_sc_mtf(struct_1 *a0, unsigned long a1, unsigned long long *a2)\n
{\n
    struct_0 *v0;  // [bp-0x1148]\n
    int tmp_19;  // tmp #19\n
    unsigned long long *v1;  // [bp-0x1140]\n
    int v2;  // [bp-0x1138], Other Possible Types: char\n
    int v3;  // [bp-0x1128]\n
    char v4;  // [bp-0x1118]\n
    int v5;  // [bp-0x10b9]\n
    int v6;  // [bp-0x10a9]\n
    int v7;  // [bp-0x1099]\n
    int v8;  // [bp-0x1089]\n
    int v9;  // [bp-0x1079]\n
    int v10;  // [bp-0x1069]\n
    int v11;  // [bp-0x1059]\n
    int v12;  // [bp-0x1049]\n
    char v13;  // [bp-0x1039]\n
    char v14;  // [bp-0x1038]\n
    unsigned long long *v16;  // r15, Other Possible Types: unsigned long\n
    struct_6 *v17;  // r12\n
    unsigned long long v18;  // rbx\n
    char *v19;  // r13\n
    struct_5 *v20;  // r13\n
    struct_0 *v21;  // r9, Other Possible Types: unsigned long\n
    char *v22;  // rax, Other Possible Types: unsigned long\n
    unsigned long v23;  // r15\n
    unsigned long v24;  // rsi\n
    void* v25;  // rbp, Other Possible Types: unsigned long\n
    unsigned int v26;  // edi\n
    void* v27;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v28;  // eax, Other Possible Types: unsigned int\n
    void* v29;  // rbp, Other Possible Types: unsigned long\n
    void* v30;  // rbp, Other Possible Types: unsigned long\n
    void* v31;  // rbp, Other Possible Types: unsigned long\n
    void* v32;  // rbp, Other Possible Types: unsigned long\n
    void* v33;  // rbp, Other Possible Types: unsigned long\n
    void* v34;  // rbp, Other Possible Types: unsigned long\n
    void* v35;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v36;  // rsi\n
    char *v37;  // r14, Other Possible Types: unsigned long\n
    char v38;  // cl\n
    unsigned long v39;  // rax\n
    unsigned long long v40;  // r14\n
    void* v41;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v42;  // r12\n
    unsigned long v43;  // rbx\n
    char *v44;  // rbx\n
    unsigned long v45;  // rbp\n
    struct_4 *v46;  // rax\n
    unsigned long v47;  // r8\n
    unsigned long v48;  // rcx, Other Possible Types: unsigned long long\n
    struct struct_3 **v49;  // rsi, Other Possible Types: unsigned long, char\n
    unsigned long v50;  // rdi\n
    struct struct_3 **v51;  // bl, Other Possible Types: char\n
    unsigned long v52;  // rbp, Other Possible Types: unsigned int\n
    unsigned long long v53;  // rdi\n
    void* v54;  // rbx, Other Possible Types: unsigned long\n
    void* v55;  // rbp, Other Possible Types: unsigned long\n
    struct struct_3 **v56;  // r9, Other Possible Types: unsigned long\n
    unsigned long v57;  // rbp\n
    struct struct_3 **v58;  // rdx, Other Possible Types: unsigned long, char\n
    struct struct_3 **v59;  // r9, Other Possible Types: unsigned long\n
    unsigned long v60;  // rbx\n
    struct struct_3 **v61;  // rdi, Other Possible Types: unsigned long, char\n
    void* v62;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v63;  // rsi\n
    struct struct_3 **v64;  // dl, Other Possible Types: char\n
    void* v65;  // rbp, Other Possible Types: unsigned long\n
    void* v66;  // rbx, Other Possible Types: unsigned long\n
    void* v67;  // rbp, Other Possible Types: unsigned long\n
    void* v68;  // rbx, Other Possible Types: unsigned long\n
    struct struct_3 **v69;  // dl, Other Possible Types: char\n
    void* v70;  // rbp, Other Possible Types: unsigned long\n
    unsigned long v71;  // rdi\n
    void* v72;  // rbx, Other Possible Types: unsigned long\n
    void* v73;  // rbx, Other Possible Types: unsigned long\n
    void* v74;  // rbx, Other Possible Types: unsigned long\n
    void* v75;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v76;  // rdx\n
\n
    v16 = a2;\n
    v17 = a0;\n
    if (!a1)\n
    {\n
        v19 = cgc_malloc(a0->field_68);\n
        v0 = cgc_malloc(a0->field_68 * 2 + 4);\n
        *(&v0) = a0->field_68;\n
        v41 = 0;\n
        cgc_memset(v19, 0, a0->field_68);\n
        *(&v2) = 0xf0e0d0c0b0a09080706050403020100;\n
        *(&v3) = 41362427191743139026751447860679676176;\n
        cgc_memcpy(&v4, a0, 0x5f);\n
        *(&v5) = 189485339851445764299043924036861132927;\n
        *(&v6) = 210836390324916412986941938620815216783;\n
        *(&v7) = 232187440798387061674839953204769300639;\n
        *(&v8) = 253538491271857710362737967788723384495;\n
        *(&v9) = 274889541745328359050635982372677468351;\n
        *(&v10) = 296240592218799007738533996956631552207;\n
        *(&v11) = 317591642692269656426432011540585636063;\n
        *(&v12) = 338942693165740305114330026124539719919;\n
        v13 = 255;\n
        if (a0->field_68)\n
        {\n
            v1 = a2;\n
            v22 = a0->field_60;\n
            v23 = 0;\n
            do\n
            {\n
                v38 = *((v22 + v23));\n
                v39 = 0;\n
                do\n
                {\n
                    if (v38 == *(&v2 + v39))\n
                    {\n
LABEL_406754:\n
                        v19[v23] = v39;\n
                        goto LABEL_406759;\n
                    }\n
                    if (v38 == *(&v2 + v39))\n
                    {\n
                        v39 += 1;\n
                        goto LABEL_406754;\n
                    }\n
                    if (v38 == *(&v2 + v39))\n
                    {\n
                        v39 += 2;\n
                        goto LABEL_406754;\n
                    }\n
                    if (v38 == *(&v2 + v39))\n
                    {\n
                        v39 += 3;\n
                        goto LABEL_406754;\n
                    }\n
                    v39 += 4;\n
                } while (v39 != 0x100);\n
                v39 = 0x100;\n
LABEL_406759:\n
                cgc_memmove(&v2, &v2, v39);\n
                v22 = a0->field_60;\n
                v2 = *((v22 + v23));\n
                v23 += 1;\n
                v40 = a0->field_68;\n
            } while (v40 > v23);\n
            v41 = v40 * 2;\n
            v16 = v1;\n
        }\n
        v44 = v0 + 4;\n
        cgc_memset(v44, 0, v41);\n
        v46 = cgc_malloc(16);\n
        v46->field_0 = &v44;\n
        *(&v46->field_8) = 0;\n
        if (!a0->field_68)\n
        {\n
            v48 = 4;\n
        }\n
        else\n
        {\n
            v47 = 0;\n
            while (true)\n
            {\n
                v49 = v46->field_0;\n
                v50 = v46->field_8;\n
                v51 = *(v49 + v50);\n
                v52 = v46[1].field_0;\n
                if (v19[v47] < 16)\n
                {\n
                    if (v52 == 8)\n
                    {\n
                        v49 = v46->field_0;\n
                        v50 = v46->field_8 + 1;\n
                        v46->field_8 = v50;\n
                        v51 = *((v49 + v50));\n
                        v52 = 0;\n
                    }\n
                    *(&v46[1].field_0) = v52 + 1;\n
                    *((v49 + v50)) = (1 << (7 - v52 & 31)) | v51;\n
                    v55 = v46[1].field_0;\n
                    if (v55 != 8)\n
                    {\n
                        v59 = v46->field_0;\n
                        v60 = v46->field_8;\n
                        v61 = v60 + v59;\n
                    }\n
                    else\n
                    {\n
                        v59 = v46->field_0;\n
                        v60 = v46->field_8 + 1;\n
                        v46->field_8 = v60;\n
                        v61 = v60 + v59;\n
                        v55 = 0;\n
                    }\n
                    v63 = v19[v47] * 16;\n
                    v64 = v63 / 128 << (7 - v55 & 31) | *(v61);\n
                    v65 = v55 + 1;\n
                    *(&v46[1].field_0) = v65;\n
                    if (v65 == 8)\n
                    {\n
                        *((v59 + v60)) = v64;\n
                        v59 = v46->field_0;\n
                        v60 = v46->field_8 + 1;\n
                        v46->field_8 = v60;\n
                        v64 = *((v59 + v60));\n
                        v65 = 0;\n
                    }\n
                    *(&v61) = (v63 / 64 & 1) << (7 - v65 & 31) | v64;\n
                    v67 = v65 + 1;\n
                    *(&v46[1].field_0) = v67;\n
                    if (v67 == 8)\n
                    {\n
                        *((v59 + v60)) = v61;\n
                        v59 = v46->field_0;\n
                        v60 = v46->field_8 + 1;\n
                        v46->field_8 = v60;\n
                        v61 = *((v59 + v60));\n
                        v67 = 0;\n
                    }\n
                    v69 = (v63 / 32 & 1) << (7 - v67 & 31) | v61;\n
                    v70 = v67 + 1;\n
                    *(&v46[1].field_0) = v70;\n
                    v71 = v60;\n
                    if (v70 == 8)\n
                    {\n
                        *((v59 + v60)) = v69;\n
                        v59 = v46->field_0;\n
                        v71 = v46->field_8 + 1;\n
                        v46->field_8 = v71;\n
                        v69 = *((v59 + v71));\n
                        v70 = 0;\n
                    }\n
                    *(&v63) = (v63 / 16 & 1) << (7 - v70 & 31) | v69;\n
                    *(&v46[1].field_0) = v70 + 1;\n
                    *((v59 + v71)) = *(&v63);\n
                    v47 += 1;\n
                    if (v17->field_68 <= v47)\n
                        break;\n
                }\n
                else\n
                {\n
                    if (v52 == 8)\n
                    {\n
                        v49 = v46->field_0;\n
                        v50 = v46->field_8 + 1;\n
                        v46->field_8 = v50;\n
                        v51 = *((v49 + v50));\n
                        v52 = 0;\n
                    }\n
                    *(&v46[1].field_0) = v52 + 1;\n
                    *((v49 + v50)) = v51;\n
                    v53 = v19[v47];\n
                    v54 = v46[1].field_0;\n
                    if (v54 == 8)\n
                    {\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v58 = v56 + v57;\n
                        v54 = 0;\n
                    }\n
                    else\n
                    {\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8;\n
                        v58 = v57 + v56;\n
                    }\n
                    *(&v49) = v53 / 128 << (7 - v54 & 31) | *(v58);\n
                    v62 = v54 + 1;\n
                    *(&v46[1].field_0) = v62;\n
                    if (v62 == 8)\n
                    {\n
                        *((v56 + v57)) = v49;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v49 = *((v56 + v57));\n
                        v62 = 0;\n
                    }\n
                    *(&v58) = (v53 / 64 & 1) << (7 - v62 & 31) | v49;\n
                    v66 = v62 + 1;\n
                    *(&v46[1].field_0) = v66;\n
                    if (v66 == 8)\n
                    {\n
                        *((v56 + v57)) = v58;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v58 = *((v56 + v57));\n
                        v66 = 0;\n
                    }\n
                    *(&v49) = (v53 / 32 & 1) << (7 - v66 & 31) | v58;\n
                    v68 = v66 + 1;\n
                    *(&v46[1].field_0) = v68;\n
                    if (v68 == 8)\n
                    {\n
                        *((v56 + v57)) = v49;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v49 = *((v56 + v57));\n
                        v68 = 0;\n
                    }\n
                    *(&v58) = (v53 / 16 & 1) << (7 - v68 & 31) | v49;\n
                    v72 = v68 + 1;\n
                    *(&v46[1].field_0) = v72;\n
                    if (v72 == 8)\n
                    {\n
                        *((v56 + v57)) = v58;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v58 = *((v56 + v57));\n
                        v72 = 0;\n
                    }\n
                    *(&v49) = (v53 / 8 & 1) << (7 - v72 & 31) | v58;\n
                    v73 = v72 + 1;\n
                    *(&v46[1].field_0) = v73;\n
                    if (v73 == 8)\n
                    {\n
                        *((v56 + v57)) = v49;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v49 = *((v56 + v57));\n
                        v73 = 0;\n
                    }\n
                    *(&v58) = (v53 / 4 & 1) << (7 - v73 & 31) | v49;\n
                    v74 = v73 + 1;\n
                    *(&v46[1].field_0) = v74;\n
                    if (v74 == 8)\n
                    {\n
                        *((v56 + v57)) = v58;\n
                        v56 = v46->field_0;\n
                        v57 = v46->field_8 + 1;\n
                        v46->field_8 = v57;\n
                        v58 = *((v56 + v57));\n
                        v74 = 0;\n
                    }\n
                    *(&v49) = (v53 / 2 & 1) << (7 - v74 & 31) | v58;\n
                    v75 = v74 + 1;\n
                    *(&v46[1].field_0) = v75;\n
                    v76 = v57;\n
                    if (v75 == 8)\n
                    {\n
                        *((v56 + v57)) = v49;\n
                        v56 = v46->field_0;\n
                        v76 = v46->field_8 + 1;\n
                        v46->field_8 = v76;\n
                        v49 = *((v56 + v76));\n
                        v75 = 0;\n
                    }\n
                    *(&v53) = (v53 & 1) << (7 - v75 & 31) | v49;\n
                    *(&v46[1].field_0) = v75 + 1;\n
                    *((v56 + v76)) = *(&v53);\n
                    v47 += 1;\n
                    if (v17->field_68 <= v47)\n
                        break;\n
                }\n
            }\n
            v48 = v46->field_8 - -1 - (v46[1].field_0 < 1) + 4;\n
        }\n
        *(v16) = v48;\n
        cgc_free(v46);\n
        cgc_free(v19);\n
        return v0;\n
    }\n
    else\n
    {\n
        v18 = *(&a0->field_60);\n
        if (v18 > 0x1000)\n
            return 0;\n
        v1 = a2;\n
        v0 = cgc_malloc(v18);\n
        v25 = 0;\n
        cgc_memset(&v14, 0, 0x1000);\n
        v37 = a0->field_60 + 4;\n
        v20 = cgc_malloc(16);\n
        v20->field_0 = v37;\n
        *(&v20->field_8) = 0;\n
        if (v18)\n
        {\n
            v24 = 0;\n
            v21 = 0;\n
            while (true)\n
            {\n
                v26 = ((1 << (7 - v25 & 31)) & *((v37 + v24))) >> (7 - v25 & 31);\n
                v27 = v25 + 1;\n
                *(&v20[1].field_0) = v27;\n
                if (v26)\n
                {\n
                    if (v27 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v27 = 0;\n
                    }\n
                    v28 = *((v37 + v24));\n
                    *(&v26) = (((1 << (7 - v27 & 31)) & v28) >> (7 - v27 & 31)) * 8;\n
                    v29 = v27 + 1;\n
                    *(&v20[1].field_0) = v29;\n
                    if (!(v29 == 8))\n
                        goto LABEL_4068a2;\n
                }\n
                else\n
                {\n
                    if (v27 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v27 = 0;\n
                    }\n
                    v28 = *((v37 + v24));\n
                    *(&v26) = (((1 << (7 - v27 & 31)) & v28) >> (7 - v27 & 31)) * 128;\n
                    v30 = v27 + 1;\n
                    *(&v20[1].field_0) = v30;\n
                    if (v30 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v28 = *((v37 + v24));\n
                        v30 = 0;\n
                    }\n
                    *(&v26) = v26 | ((((1 << (7 - v30 & 31)) & v28) >> (7 - v30 & 31)) * 64);\n
                    v31 = v30 + 1;\n
                    *(&v20[1].field_0) = v31;\n
                    if (v31 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v28 = *((v37 + v24));\n
                        v31 = 0;\n
                    }\n
                    *(&v26) = v26 | ((((1 << (7 - v31 & 31)) & v28) >> (7 - v31 & 31)) * 32);\n
                    v32 = v31 + 1;\n
                    *(&v20[1].field_0) = v32;\n
                    if (v32 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v28 = *((v37 + v24));\n
                        v32 = 0;\n
                    }\n
                    *(&v26) = v26 | ((((1 << (7 - v32 & 31)) & v28) >> (7 - v32 & 31)) * 16);\n
                    v33 = v32 + 1;\n
                    *(&v20[1].field_0) = v33;\n
                    if (v33 == 8)\n
                    {\n
                        v24 = v24 + 1;\n
                        v20->field_8 = v24;\n
                        v28 = *((v37 + v24));\n
                        v33 = 0;\n
                    }\n
                    *(&v26) = v26 | ((((1 << (7 - v33 & 31)) & v28) >> (7 - v33 & 31)) * 8);\n
                    v29 = v33 + 1;\n
                    *(&v20[1].field_0) = v29;\n
                    if (!(v29 == 8))\n
                        goto LABEL_4068a2;\n
                }\n
                v24 = v24 + 1;\n
                v20->field_8 = v24;\n
                v28 = *((v37 + v24));\n
                v29 = 0;\n
LABEL_4068a2:\n
                *(&v26) = v26 | ((((1 << (7 - v29 & 31)) & v28) >> (7 - v29 & 31)) * 4);\n
                v34 = v29 + 1;\n
                *(&v20[1].field_0) = v34;\n
                if (v34 == 8)\n
                {\n
                    v24 = v24 + 1;\n
                    v20->field_8 = v24;\n
                    v28 = *((v37 + v24));\n
                    v34 = 0;\n
                }\n
                *(&v26) = v26 | (((1 << (7 - v34 & 31)) & v28) >> (7 - v34 & 31)) * 2;\n
                v35 = v34 + 1;\n
                *(&v20[1].field_0) = v35;\n
                if (v35 == 8)\n
                {\n
                    v36 = v24 + 1;\n
                    v20->field_8 = v36;\n
                    v28 = *((v37 + v36));\n
                    v35 = 0;\n
                }\n
                *(&v20[1].field_0) = v35 + 1;\n
                (&v14)[v21] = (((1 << (7 - v35 & 31)) & v28) >> (7 - v35 & 31)) | v26;\n
                if (v18 - 1 == v21)\n
                    break;\n
                v37 = v20->field_0;\n
                v24 = v20->field_8;\n
                v25 = v20[1].field_0;\n
                v21 += 1;\n
            }\n
        }\n
        *(&v2) = 0xf0e0d0c0b0a09080706050403020100;\n
        *(&v3) = 41362427191743139026751447860679676176;\n
        cgc_memcpy(&v4, v17, 0x5f);\n
        *(&v5) = 189485339851445764299043924036861132927;\n
        *(&v6) = 210836390324916412986941938620815216783;\n
        *(&v7) = 232187440798387061674839953204769300639;\n
        *(&v8) = 253538491271857710362737967788723384495;\n
        *(&v9) = 274889541745328359050635982372677468351;\n
        *(&v10) = 296240592218799007738533996956631552207;\n
        *(&v11) = 317591642692269656426432011540585636063;\n
        *(&v12) = 338942693165740305114330026124539719919;\n
        v13 = 255;\n
        v42 = v18;\n
        tmp_19 = v18;\n
        v43 = v0;\n
        if (tmp_19)\n
        {\n
            v45 = 0;\n
            do\n
            {\n
                *((v43 + v45)) = *(&v2 + (&v14)[v45]);\n
                cgc_memmove(&v2, &v2, (&v14)[v45]);\n
                v2 = *((v43 + v45));\n
                v45 += 1;\n
            } while (v42 != v45);\n
        }\n
        *(v1) = v42;\n
        cgc_free(v20);\n
        return v0;\n
    }\n
}\n
", "4220739:sub_406743": null, "4220859:sub_4067bb": null, "4221258:sub_40694a": null, "4221852:sub_406b9c": null, "4222074:sub_406c7a": null, "4222501:sub_406e25": null, "4222758:sub_406f26": null, "4222768:cgc_sc_sdecompress": "long long cgc_sc_sdecompress(unsigned long long a0[14], unsigned long long *a1, unsigned long long *a2)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v4;  // r13\n
    unsigned long long v5;  // rax\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a1)\n
    {\n
        return 4294967295;\n
    }\n
    else if (!a2)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        v0 = a0[12];\n
        v4 = a0[13];\n
        v5 = cgc_sc_mtf(a0, 1, a2);\n
        if (v5)\n
        {\n
            a0[12] = v5;\n
            a0[13] = *(a2);\n
            *(a1) = cgc_sc_bwt(a0, 1, a2);\n
            cgc_free(v5);\n
            a0[12] = v0;\n
            a0[13] = v4;\n
            return -(*(a1) < 1);\n
        }\n
        return 4294967295;\n
    }\n
}\n
", "4222914:sub_406fc2": null, "4222928:cgc_sc_set_data": "long long cgc_sc_set_data(unsigned long long a0[14], unsigned int a1, char *a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v1;  // [bp-0x10]\n
    unsigned long v2;  // [bp-0x8]\n
    unsigned long v4;  // r15\n
    unsigned long v5;  // r14\n
    unsigned long v6;  // rbx\n
    unsigned long long v7[14];  // rbx\n
    unsigned long long v8;  // rdi\n
    char *v9;  // rax\n
\n
    if (!a0)\n
        return 4294967295;\n
    v2 = v4;\n
    v1 = v5;\n
    v0 = v6;\n
    v7 = a0;\n
    v8 = a0[12];\n
    if (!v8)\n
    {\n
        v9 = cgc_malloc(a2);\n
        v7[12] = v9;\n
        cgc_memcpy(v9, a1, a2);\n
        v7[13] = a2;\n
        return 0;\n
    }\n
    cgc_free(v8);\n
}\n
", "4223005:sub_40701d": null, "4223008:cgc__gcd": "long long cgc__gcd(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v1;  // rax, Other Possible Types: unsigned int\n
    unsigned long v2;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rcx\n
\n
    v1 = a0;\n
    if (!a1)\n
        return a0;\n
    v2 = a1;\n
    do\n
    {\n
        v3 = v2;\n
        v2 = (v1 >> 31 CONCAT v1) /m v2 >> 32;\n
        v1 = v3;\n
    } while (v2);\n
    return v3;\n
}\n
", "4223038:sub_40703e": null, "4223040:cgc__rot_left": "long long cgc__rot_left(char *a0, unsigned long a1, unsigned long a2)\n
{\n
    unsigned long long v1;  // r9\n
    char *v2;  // r10\n
    unsigned long v3;  // rdx, Other Possible Types: unsigned long long\n
    unsigned long v4;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rax\n
    char v8;  // r11b\n
    unsigned long long v9;  // rdx\n
    unsigned long v11;  // rdx\n
    unsigned long v12;  // rbx\n
    unsigned long v13;  // rcx\n
    unsigned long long v14;  // rdx\n
    char *v16;  // r10\n
    unsigned long v18;  // r11, Other Possible Types: unsigned long long\n
    unsigned long v19;  // r14\n
    char v20;  // r10b\n
    unsigned long v21;  // rsi\n
    unsigned long v22;  // rdx\n
    unsigned long v23;  // rcx, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rbx\n
\n
    v1 = a2;\n
    if (a1)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v3 = a1;\n
            v4 = v1;\n
            do\n
            {\n
                v5 = v4;\n
                v4 = v3;\n
                v6 = (v5 >> 31 CONCAT v5) /m v3;\n
                v3 = v6 / 0x100000000;\n
            } while (v3);\n
            if (v2 >= v4)\n
                break;\n
            v8 = *((a0 + v2));\n
            v9 = &v2[v1];\n
            v11 = v9 - (v9 < a1 ? a1 : 0);\n
            v12 = v2;\n
            if (v2 != v11)\n
            {\n
                v13 = v2;\n
                do\n
                {\n
                    v12 = v11;\n
                    a0[v13] = a0[v11];\n
                    v14 = v11 + v1;\n
                    v11 = v14 - (v14 < a1 ? a1 : 0);\n
                    v13 = v12;\n
                } while (v2 != v11);\n
            }\n
            a0[v12] = v8;\n
            v16 = v2 + 1;\n
        }\n
        return v4;\n
    }\n
    else if (a2 <= 0)\n
    {\n
        return v7;\n
    }\n
    else\n
    {\n
        v18 = a2 * 2;\n
        v19 = 0;\n
        do\n
        {\n
            v20 = a0[v19];\n
            v21 = v19 + v1;\n
            v22 = v19;\n
            if (v19 != v21)\n
            {\n
                v23 = v18;\n
                v24 = v19;\n
                do\n
                {\n
                    v22 = v21;\n
                    a0[v24] = a0[v21];\n
                    v21 += v1;\n
                    v7 = v23;\n
                    v23 += v1;\n
                    v24 = v22;\n
                } while (v19 != v7);\n
            }\n
            a0[v22] = v20;\n
            v19 += 1;\n
            v18 = v18 + 1;\n
        } while (v19 != a2);\n
        return v7;\n
    }\n
}\n
", "4223062:sub_407056": null, "4223206:sub_4070e6": null, "4223296:cgc__merge": "typedef struct struct_1 {\n
    char padding_0[112];\n
    struct struct_0 *field_70;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__merge(unsigned long long *a0, unsigned long long *a1, unsigned long long *a2, unsigned long long *a3, unsigned long a4, struct_1 *a5)\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    int tmp_13;  // tmp #13\n
    int tmp_4;  // tmp #4\n
    int tmp_14;  // tmp #14\n
    int tmp_10;  // tmp #10\n
    unsigned long long *v1;  // [bp-0x48]\n
    unsigned long long *v2;  // [bp-0x40]\n
    struct_1 *v3;  // [bp-0x38]\n
    unsigned long long *v5;  // r10, Other Possible Types: unsigned long\n
    unsigned long long *v6;  // r15, Other Possible Types: unsigned long\n
    unsigned long long v7;  // rax\n
    unsigned long v8;  // rcx\n
    unsigned long v9;  // rbp\n
    unsigned long long *v11;  // r12, Other Possible Types: unsigned long\n
    unsigned long long *v12;  // r11\n
    unsigned long long v13;  // rdx\n
    unsigned long long *v14;  // r12\n
    unsigned long long *v15;  // r14\n
    unsigned long long v16;  // r10\n
    unsigned long long v17;  // rsi\n
    unsigned long long v18;  // r9\n
    unsigned long v19;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v20;  // rsi\n
    unsigned long v21;  // rbx\n
    unsigned long v22;  // rbp\n
    int v23;  // xmm1\n
    int v24;  // xmm1\n
    unsigned long v25;  // rsi\n
    unsigned long v26;  // rbp\n
    int v27;  // xmm1\n
    unsigned long long v28;  // r10\n
    unsigned long long v29;  // rdx\n
    unsigned long v30;  // r10, Other Possible Types: unsigned long long\n
    unsigned long v31;  // rcx\n
    unsigned long long v32;  // r11\n
    unsigned long long *v33;  // rdx\n
    unsigned long v34;  // rsi\n
    unsigned long v35;  // rcx\n
    unsigned long v36;  // rax\n
    unsigned long long *v37;  // r9, Other Possible Types: unsigned long\n
    unsigned long long *v38;  // r13, Other Possible Types: unsigned long\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // rdx\n
    unsigned long long v41;  // r10\n
    unsigned long long *v42;  // r15\n
    unsigned long long v43;  // r11\n
    unsigned long long v44;  // rsi\n
    unsigned long long v45;  // r9\n
    unsigned long v46;  // rbp, Other Possible Types: unsigned long long\n
    uint128_t *v47;  // rdi\n
    unsigned long v48;  // rsi\n
    unsigned long v49;  // rbx\n
    int v50;  // xmm1\n
    int v51;  // xmm1\n
    unsigned long v52;  // rsi\n
    unsigned long v53;  // rbx\n
    int v54;  // xmm1\n
    unsigned long long v55;  // rsi\n
    unsigned long v56;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v57;  // r14\n
    unsigned long long *v58;  // rdx\n
    unsigned long v59;  // rcx\n
    unsigned long v60;  // rsi\n
    unsigned long long *v61;  // rcx\n
\n
    v3 = a5;\n
    v5 = a3;\n
    v6 = a2;\n
    v37 = a0;\n
    v1 = a1;\n
    v2 = a2;\n
    if (a2 < a3 && a3 < a4)\n
    {\n
        v11 = a1 + 0x8 * a2;\n
        v38 = a3;\n
        v9 = a2;\n
        v0 = a4;\n
        do\n
        {\n
            v7 = v3->field_70(v3, a0[v9], a0[v38], 0x200);\n
            v37 = a0;\n
            v8 = (v7 < 0 ? v38 : v9);\n
            v9 += v7 >> 31;\n
            v38 += ~(v7) >> 31;\n
            *(v11) = a0[v8];\n
            v6 = v6 + 1;\n
            if (v9 >= v5)\n
            {\n
                a4 = v0;\n
                if (!(v9 < v5))\n
                    goto LABEL_407392;\n
                goto LABEL_40720f;\n
            }\n
            v11 += 8;\n
            a4 = v0;\n
        } while (v38 < a4);\n
        goto LABEL_407392;\n
    }\n
    v9 = a2;\n
    v38 = a3;\n
    if (v9 >= v5)\n
    {\n
LABEL_407392:\n
        v36 = v1;\n
    }\n
    else\n
    {\n
LABEL_40720f:\n
        v31 = v9;\n
        v12 = v5;\n
        v13 = v5 - v9;\n
        v36 = v1;\n
        if (v13 >= 4)\n
        {\n
            if (v36 + (v6 << 3) < a0 + 0x8 * v5 && &a0[v9] < v36 + (v6 + v5 - v9 << 3))\n
                goto LABEL_4072f6;\n
            v14 = v5;\n
            v15 = a0;\n
            v16 = v13 & -4;\n
            v17 = v16 - 4;\n
            v18 = (v17 >> 2) + 1;\n
            if (v17)\n
            {\n
                v19 = v18 & -2;\n
                v20 = &v15[v9 + 6];\n
                v21 = v36 + v6 * 8 + 48;\n
                v22 = 0;\n
                do\n
                {\n
                    v23 = *((-32 + v20 + 8 * v22));\n
                    *((v21 + v22 * 8 - 48)) = *((-48 + v20 + 8 * v22));\n
                    *((v21 + v22 * 8 - 32)) = v23;\n
                    v24 = *((v20 + 8 * v22));\n
                    *((v21 + v22 * 8 - 16)) = *((-16 + v20 + 8 * v22));\n
                    *((v21 + v22 * 8)) = v24;\n
                    v22 += 8;\n
                    tmp_13 = v19;\n
                    v19 -= 2;\n
                } while (tmp_13 != 2);\n
                tmp_4 = v18 & 1;\n
                v37 = v15;\n
                if (!(tmp_4 & 255))\n
                    goto LABEL_4072e4;\n
            }\n
            else\n
            {\n
                v22 = 0;\n
                tmp_14 = v18 & 1;\n
                v37 = a0;\n
                if (!(tmp_14 & 255))\n
                    goto LABEL_4072e4;\n
            }\n
            v25 = v31 + v22;\n
            v26 = v22 + v6;\n
            v27 = *((v37 + v25 * 8 + 16));\n
            *((v36 + v26 * 8)) = *((v37 + v25 * 8));\n
            *((v36 + v26 * 8 + 16)) = v27;\n
LABEL_4072e4:\n
            v6 += v16;\n
            if (v13 == v16)\n
                goto LABEL_407397;\n
            v31 += v16;\n
            v5 = v14;\n
        }\n
LABEL_4072f6:\n
        v28 = v5 - v31;\n
        v29 = ~(v31) + v12;\n
        v30 = v28 & 3;\n
        if (v30)\n
        {\n
            do\n
            {\n
                *((v36 + v6 * 8)) = *((v37 + v31 * 8));\n
                v31 += 1;\n
                v6 += 1;\n
                tmp_10 = v30;\n
                v30 -= 1;\n
            } while (tmp_10 != 1);\n
        }\n
        if (v29 >= 3)\n
        {\n
            v32 = v12 - v31;\n
            v33 = v37 + v31 * 8 + 24;\n
            v34 = v36 + v6 * 8 + 24;\n
            v35 = 0;\n
            do\n
            {\n
                *((v34 + v35 * 8 - 24)) = v33[3 + v35];\n
                *((v34 + v35 * 8 - 16)) = v33[2 + v35];\n
                *((v34 + v35 * 8 - 8)) = v33[1 + v35];\n
                *((v34 + v35 * 8)) = v33[v35];\n
                v35 += 4;\n
            } while (v32 != v35);\n
            v6 += v35;\n
        }\n
    }\n
LABEL_407397:\n
    if (v38 >= a4)\n
    {\n
        v61 = v2;\n
        return cgc_memcpy(v37 + v61 * 8, v36 + v61 * 8, (a4 - v61) * 8);\n
    }\n
    v39 = v6;\n
    v40 = v38;\n
    v41 = a4 - v38;\n
    if (v41 >= 4)\n
    {\n
        if (v36 + (v6 << 3) < v37 + (a4 << 3) && v37 + (v38 << 3) < v36 + (v6 + a4 - v38 << 3))\n
            goto LABEL_407483;\n
        v42 = v37;\n
        v43 = v41 & -4;\n
        v44 = v43 - 4;\n
        v45 = (v44 >> 2) + 1;\n
        if (v44)\n
        {\n
            v46 = v45 & -2;\n
            v47 = &v42[v38 + 6];\n
            v48 = v36 + v39 * 8 + 48;\n
            v49 = 0;\n
            do\n
            {\n
                v50 = *((-32 + v47 + 8 * v49));\n
                *((v48 + v49 * 8 - 48)) = *((-48 + v47 + 8 * v49));\n
                *((v48 + v49 * 8 - 32)) = v50;\n
                v51 = *((v47 + 8 * v49));\n
                *((v48 + v49 * 8 - 16)) = *((-16 + v47 + 8 * v49));\n
                *((v48 + v49 * 8)) = v51;\n
                v49 += 8;\n
                tmp_13 = v46;\n
                v46 -= 2;\n
            } while (tmp_13 != 2);\n
            tmp_4 = v45 & 1;\n
            v37 = v42;\n
            if (!(tmp_4 & 255))\n
                goto LABEL_407474;\n
        }\n
        else\n
        {\n
            v49 = 0;\n
            tmp_14 = v45 & 1;\n
            v37 = v42;\n
            if (!(tmp_14 & 255))\n
                goto LABEL_407474;\n
        }\n
        v52 = v49 + v38;\n
        v53 = v49 + v39;\n
        v54 = *((v37 + v52 * 8 + 16));\n
        *((v36 + v53 * 8)) = *((v37 + v52 * 8));\n
        *((v36 + v53 * 8 + 16)) = v54;\n
LABEL_407474:\n
        if (v41 == v43)\n
        {\n
            v61 = v2;\n
            return cgc_memcpy(v37 + v61 * 8, v36 + v61 * 8, (a4 - v61) * 8);\n
        }\n
        v40 = v38 + v43;\n
        v39 += v43;\n
    }\n
LABEL_407483:\n
    v55 = ~(v40) + a4;\n
    v56 = a4 - v40 & 3;\n
    if (v56)\n
    {\n
        do\n
        {\n
            *((v36 + v39 * 8)) = *((v37 + v40 * 8));\n
            v40 += 1;\n
            v39 += 1;\n
            tmp_10 = v56;\n
            v56 -= 1;\n
        } while (tmp_10 != 1);\n
    }\n
    if (v55 < 3)\n
    {\n
        v61 = v2;\n
        return cgc_memcpy(v37 + v61 * 8, v36 + v61 * 8, (a4 - v61) * 8);\n
    }\n
    v57 = a4 - v40;\n
    v58 = v37 + v40 * 8 + 24;\n
    v59 = v36 + v39 * 8 + 24;\n
    v60 = 0;\n
    do\n
    {\n
        *((v59 + v60 * 8 - 24)) = v58[3 + v60];\n
        *((v59 + v60 * 8 - 16)) = v58[2 + v60];\n
        *((v59 + v60 * 8 - 8)) = v58[1 + v60];\n
        *((v59 + v60 * 8)) = v58[v60];\n
        v60 += 4;\n
    } while (v57 != v60);\n
    v61 = v2;\n
    return cgc_memcpy(v37 + v61 * 8, v36 + v61 * 8, (a4 - v61) * 8);\n
}\n
", "4224353:sub_407561": null, "4224368:cgc__msort": "long long cgc__msort(unsigned long long *a0, unsigned long long *a1, unsigned long long *a2, unsigned long a3, void* a4)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbp\n
    unsigned long long *v4;  // rbp\n
\n
    v0 = v2;\n
    v3 = a3 - a2;\n
    if (v3 > 1)\n
    {\n
        v4 = (v3 >> 1) + a2;\n
        cgc__msort(a0, a1, a2, v4, a4);\n
        cgc__msort(a0, a1, v4, a3, a4);\n
        return cgc__merge(a0, a1, a2, v4, a3, a4);\n
    }\n
    return v2;\n
}\n
", "4224482:sub_4075e2": null, "4224496:cgc__sort": "long long cgc__sort(unsigned long long *a0, unsigned long a1, void* a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long long *v3;  // rax\n
\n
    v0 = v2;\n
    v3 = cgc_malloc(a1 * 8);\n
    cgc__msort(a0, v3, NULL, a1, a2);\n
    return cgc_free(v3);\n
}\n
", "4224568:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_allocate": null, "5242912:cgc_deallocate": null, "5242920:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}