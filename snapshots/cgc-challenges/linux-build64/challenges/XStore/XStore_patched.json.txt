{"4206592:_init": "extern struct_0 *g_40d3d0;\n
\n
long long _init()\n
{\n
    struct struct_0 **v1;  // rax, Other Possible Types: unsigned long\n
\n
    v1 = g_40d3d0;\n
    if (g_40d3d0)\n
        v1 = g_40d3d0();\n
    return v1;\n
}\n
", "4206624:sub_403020": "extern unsigned long long g_40d3f0;\n
\n
long long sub_403020()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
\n
    v0 = g_40d3f0;\n
    goto *(4248568);\n
}\n
", "4206636:sub_40302c": null, "4206640:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4206656:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4206672:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4206688:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4206704:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4206720:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4206736:__cxa_finalize": "// attributes: PLT stub\n
char * __cxa_finalize()\n
{\n
    goto *(4248544);\n
}\n
", "4206752:_start": "long long _start()\n
{\n
    char v0;  // [bp+0x0], Other Possible Types: unsigned long\n
    unsigned long v1;  // [bp+0x8]\n
    unsigned long long v2;  // rsi\n
    unsigned long v3;  // rax\n
    unsigned long long v4;  // rdx\n
\n
    v2 = *(&v0);\n
    v0 = v3;\n
    __libc_start_main(main, v2, &v1, 0, 0, v4); /* do not return */\n
}\n
", "4206789:sub_4030c5": null, "4206790:sub_4030c6": null, "4206800:deregister_tm_clones": "extern char __bss_start;\n
extern unsigned long long g_40d3c8;\n
\n
long long deregister_tm_clones()\n
{\n
    return &__bss_start;\n
}\n
", "4206841:sub_4030f9": null, "4206848:register_tm_clones": "extern unsigned long long g_40d3d8;\n
\n
long long register_tm_clones()\n
{\n
    return 0;\n
}\n
", "4206905:sub_403139": null, "4206912:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned long long g_40d3e0;\n
\n
long long __do_global_dtors_aux()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    if (__bss_start)\n
        return v2;\n
    *(&v0) = rbp<8>;\n
    if (!g_40d3e0)\n
    {\n
        __bss_start = 1;\n
        return deregister_tm_clones();\n
    }\n
    __cxa_finalize();\n
}\n
", "4206965:sub_403175": null, "4206969:sub_403179": null, "4206976:frame_dummy": "long long frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4206985:sub_403189": null, "4206992:cgc_calloc": "extern unsigned long long g_heap;\n
\n
long long cgc_calloc(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    unsigned long long v4;  // rax\n
\n
    v0 = v2;\n
    v3 = a0 * a1;\n
    v4 = cgc_malloc_alloc(&g_heap, v3);\n
    if (v4)\n
    {\n
        cgc_memset(v4, 0, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4207050:sub_4031ca": null, "4207056:cgc_isascii": "extern char __ctype;\n
\n
long long cgc_isascii(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 1;\n
}\n
", "4207075:sub_4031e3": null, "4207088:cgc_isdigit": "extern char __ctype;\n
\n
long long cgc_isdigit(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 2;\n
}\n
", "4207107:sub_403203": null, "4207120:cgc_isprint": "extern char __ctype;\n
\n
long long cgc_isprint(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 16;\n
}\n
", "4207139:sub_403223": null, "4207152:cgc_isalnum": "extern char __ctype;\n
\n
long long cgc_isalnum(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 14;\n
}\n
", "4207171:sub_403243": null, "4207184:cgc_isalpha": "extern char __ctype;\n
\n
long long cgc_isalpha(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 12;\n
}\n
", "4207203:sub_403263": null, "4207216:cgc_islower": "extern char __ctype;\n
\n
long long cgc_islower(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4;\n
}\n
", "4207235:sub_403283": null, "4207248:cgc_isupper": "extern char __ctype;\n
\n
long long cgc_isupper(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 8;\n
}\n
", "4207267:sub_4032a3": null, "4207280:cgc_isspace": "extern char __ctype;\n
\n
long long cgc_isspace(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 64;\n
}\n
", "4207299:sub_4032c3": null, "4207312:cgc_ispunct": "extern char __ctype;\n
\n
long long cgc_ispunct(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 32;\n
}\n
", "4207331:sub_4032e3": null, "4207344:cgc_iscntrl": "extern char __ctype;\n
\n
long long cgc_iscntrl(unsigned long a0)\n
{\n
    return *(&(&__ctype)[a0]) & 4294967168;\n
}\n
", "4207363:sub_403303": null, "4207376:cgc_isxdigit": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_isxdigit(unsigned long a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&__ctype)[v1 ^ 32] & 2) >> 1);\n
    return v1 - 65 < 6 | ((*((v1 + &__ctype)) & 2) >> 1);\n
}\n
", "4207421:sub_40333d": null, "4207424:cgc_toupper": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_toupper(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207448:sub_403358": null, "4207456:cgc_digittoint": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_digittoint(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
    struct_0 *v2;  // rax, Other Possible Types: unsigned long\n
    unsigned int v3;  // ecx\n
    unsigned long long v4;  // rax\n
    unsigned long long v6;  // rax\n
\n
    v1 = a0;\n
    v2 = v1 ^ 32;\n
    if (!(*((v1 + &__ctype)) & 8))\n
        v2 = v1;\n
    if (!((&__ctype)[v2] & 2))\n
    {\n
        v3 = v2 - 65;\n
        v4 = v2 - 55;\n
        return (v3 < 6 ? 0 : v4);\n
    }\n
    v6 = v2 - 48;\n
    return v6;\n
}\n
", "4207506:sub_403392": null, "4207520:cgc_tolower": "typedef struct struct_0 {\n
    char padding_0[4235280];\n
    char field_40a010;\n
} struct_0;\n
\n
extern char __ctype;\n
\n
long long cgc_tolower(unsigned long a0)\n
{\n
    struct_0 *v1;  // rcx\n
\n
    v1 = a0;\n
    if ((*((v1 + &__ctype)) & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4207544:sub_4033b8": null, "4207552:cgc_exit": "long long cgc_exit()\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // rsi\n
    unsigned long long v5;  // rdx\n
    unsigned long long v6;  // rcx\n
    unsigned long long v7;  // r8\n
    unsigned long long v8;  // r9\n
\n
    v0 = v2;\n
    cgc__terminate();\n
    return cgc_fflush(v3, v4, v5, v6, v7, v8);\n
}\n
", "4207568:cgc_fflush": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fflush(struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x40]\n
    char v1;  // [bp-0x38]\n
    unsigned long long v3;  // r8\n
    void* v4;  // r15, Other Possible Types: unsigned long, unsigned long long\n
    char *v5;  // rcx\n
    unsigned long long v6;  // rdx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v9;  // r13\n
    unsigned long v10;  // rax\n
    char *v11;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r13, Other Possible Types: unsigned long long\n
    void* v14;  // r14, Other Possible Types: unsigned long\n
\n
    v3 = a0->field_8;\n
    if (v3 == -1)\n
        return 0;\n
    if (a0->field_4 == 1)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        v5 = a0->field_10;\n
        v6 = a0->padding_c;\n
        v13 = v6 - v3;\n
        if (v5 && v13)\n
        {\n
            v8 = v13 & 3;\n
            if (~(v3) + v6 < 3)\n
            {\n
                v11 = 0;\n
            }\n
            else\n
            {\n
                v9 = v13 & -4;\n
                v10 = &a0->padding_0[v3 + 35];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v10 + v11 - 3)) = v5[*((v10 + v11 - 3))];\n
                    *((v10 + v11 - 2)) = v5[*((v10 + v11 - 2))];\n
                    *((v10 + v11 - 1)) = v5[*((v10 + v11 - 1))];\n
                    *((v10 + v11)) = v5[*((v10 + v11))];\n
                    v11 += 4;\n
                } while (v9 != v11);\n
            }\n
            if (v8)\n
            {\n
                v12 = &a0->padding_0[v3 + v11 + 32];\n
                v11 = 0;\n
                do\n
                {\n
                    *((v12 + v11)) = v5[*((v12 + v11))];\n
                    v11 += 1;\n
                } while (v8 != v11);\n
            }\n
            v13 = (a0->padding_c - a0->field_8);\n
        }\n
        v0 = a0;\n
        v4 = 0;\n
        v14 = 0;\n
        do\n
        {\n
            if (v13 <= v14)\n
            {\n
LABEL_403505:\n
                a0 = v0;\n
                goto LABEL_40350a;\n
            }\n
            v14 += *(&v1);\n
        } while (!cgc_transmit(a0, v11));\n
        v4 = 4294967295;\n
        goto LABEL_403505;\n
    }\n
LABEL_40350a:\n
    *((a0 + 8)) = 0;\n
    return v4;\n
}\n
", "4207908:sub_403524": null, "4207920:cgc_fbuffered": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fbuffered(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int *v1;  // [bp-0x40]\n
    char v2;  // [bp-0x38]\n
    struct_0 *v4;  // r15\n
    unsigned long long v5;  // r8\n
    unsigned int *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rcx\n
    unsigned long long v8;  // rdx\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rbx\n
    char *v12;  // rax\n
    unsigned long v13;  // rbx, Other Possible Types: unsigned long long\n
    void* v14;  // r13, Other Possible Types: unsigned long\n
\n
    v4 = a0;\n
    v5 = a0->field_8;\n
    if (v5 == -1)\n
    {\n
        v4->field_8 = -(a1 < 1);\n
        v4->field_c = 0;\n
        return -(a1 < 1);\n
    }\n
    if (a0->field_4 == 1)\n
    {\n
        v6 = &a0->field_c;\n
    }\n
    else\n
    {\n
        v7 = a0->field_10;\n
        v8 = a0->field_c;\n
        v13 = v8 - v5;\n
        v0 = a1;\n
        if (v7 && v13)\n
        {\n
            v10 = v13 & 3;\n
            if (~(v5) + v8 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v11 = v13 & -4;\n
                a0 = &a0->padding_0[v5 + 35];\n
                a1 = 0;\n
                do\n
                {\n
                    *((a0 + a1 - 3)) = v7[*((a0 + a1 - 3))];\n
                    *((a0 + a1 - 2)) = v7[*((a0 + a1 - 2))];\n
                    *((a0 + a1 - 1)) = v7[*((a0 + a1 - 1))];\n
                    *((a0 + a1)) = v7[*((a0 + a1))];\n
                    a1 += 4;\n
                } while (v11 != a1);\n
            }\n
            if (v10)\n
            {\n
                v12 = &v4->padding_0[v5 + a1 + 32];\n
                a1 = 0;\n
                do\n
                {\n
                    v12[a1] = v7[v12[a1]];\n
                    a1 += 1;\n
                } while (v10 != a1);\n
            }\n
            v13 = v4->field_c - v4->field_8;\n
        }\n
        v1 = &v4->field_c;\n
        v14 = 0;\n
        while (v13 > v14)\n
        {\n
            v14 += *(&v2);\n
            if (cgc_transmit(a0, a1))\n
                break;\n
        }\n
        a1 = v0;\n
        v6 = v1;\n
    }\n
    *(v6) = 0;\n
}\n
", "4208270:sub_40368e": null, "4208272:cgc_fread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_1 *field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fread(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x40], Other Possible Types: char\n
    unsigned long v1;  // [bp-0x38]\n
    struct_0 *v3;  // r12\n
    unsigned long long v4;  // r14\n
    unsigned long long v5;  // r15\n
    unsigned long long v6;  // rax\n
    char *v7;  // rax\n
    unsigned long long v9;  // rax\n
    char *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rax, Other Possible Types: unsigned long long\n
    void* v12;  // rbx, Other Possible Types: unsigned long\n
    unsigned int v13;  // eax\n
    unsigned long long v15;  // r8\n
    char *v16;  // rax\n
    unsigned long v17;  // rbp\n
\n
    v3 = a2;\n
    v4 = a1;\n
    v5 = a0;\n
    v11 = a2->field_8;\n
    if (v11 == *(&a2->padding_c[0]))\n
    {\n
        *(&a2->field_8) = 0;\n
        v6 = cgc_receive(a0, a1, a2, v10);\n
        if (!v6)\n
        {\n
            v7 = *(&v0);\n
            if (v7)\n
            {\n
                *(&a2->padding_c[0]) = v7;\n
                v10 = v7 * 0x100000000;\n
                if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(rax<8>, 0x20<8>), Shl(rax<8>, 0x1f<8>), cc_ndep<8>)))\n
                {\n
                    v10 = a2->field_18;\n
                    if (v10)\n
                    {\n
                        a2 = v7;\n
                        v9 = v7 & 3;\n
                        if (v7 + 1 < 3)\n
                        {\n
                            a1 = 0;\n
                        }\n
                        else\n
                        {\n
                            a2 = &a2[-1 * v9];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                v3[1].padding_0[a1] = *((v10 + v3[1].padding_0[a1]));\n
                                v3[1].padding_0[1 + a1] = *((v10 + v3[1].padding_0[1 + a1]));\n
                                v3[1].padding_0[2 + a1] = *((v10 + v3[1].padding_0[2 + a1]));\n
                                v3[1].padding_0[3 + a1] = *((v10 + v3[1].padding_0[3 + a1]));\n
                                a1 += 4;\n
                            } while (a2 != a1);\n
                        }\n
                        if (v9)\n
                        {\n
                            a2 = &v3->padding_0[a1 + 32];\n
                            a1 = 0;\n
                            do\n
                            {\n
                                a2[a1] = *((v10 + a2[a1]));\n
                                a1 += 1;\n
                            } while (v9 != a1);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = v3->field_8;\n
    }\n
    if (v11 != -1)\n
    {\n
        v12 = *(&v3->padding_c[0]) - v11;\n
        if (v12 > v4)\n
            v12 = v4;\n
        v0 = v12;\n
        a1 = &v3->padding_0[v11 + 32];\n
        a2 = v12;\n
        cgc_memcpy();\n
        v13 = v3->field_8 + v12;\n
        v3->field_8 = v13;\n
        if (v13 == *(&v3->padding_c[0]))\n
            *(&v3->field_8) = 0;\n
        if (!(v12 < v4))\n
            goto LABEL_403914;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        if (0 >= v4)\n
        {\n
LABEL_403914:\n
            return v12;\n
        }\n
    }\n
    v1 = v5 + 3;\n
    while (true)\n
    {\n
        v10 = cgc_receive(a0, a1, a2, v10);\n
        if (v10)\n
            return -1;\n
        v15 = v0;\n
        if (!v15)\n
            return -1;\n
        v16 = v3->field_18;\n
        if (v16)\n
        {\n
            a2 = v15 & 3;\n
            if (v15 - 1 < 3)\n
            {\n
                a1 = 0;\n
            }\n
            else\n
            {\n
                v17 = v1 + v12;\n
                a1 = 0;\n
                do\n
                {\n
                    *((v17 + a1 - 3)) = v16[*((v17 + a1 - 3))];\n
                    *((v17 + a1 - 2)) = v16[*((v17 + a1 - 2))];\n
                    *((v17 + a1 - 1)) = v16[*((v17 + a1 - 1))];\n
                    *((v17 + a1)) = v16[*((v17 + a1))];\n
                    a1 += 4;\n
                } while ((v15 & -4) != a1);\n
            }\n
            if (a2)\n
            {\n
                a1 = a1 + v12 + v5;\n
                a0 = 0;\n
                do\n
                {\n
                    a1[a0] = v16[a1[a0]];\n
                    a0 += 1;\n
                } while (a2 != a0);\n
            }\n
        }\n
        v12 += v15;\n
        if (v12 >= v4)\n
            return v12;\n
    }\n
}\n
", "4208754:sub_403872": null, "4208934:sub_403926": null, "4208944:cgc_freaduntil": "long long cgc_freaduntil(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long long a3)\n
{\n
    int tmp_1;  // tmp #1\n
    char *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v2;  // r15, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // rax\n
    unsigned long long v4;  // rax\n
\n
    v1 = 0;\n
    v2 = a1 - 1;\n
    if (a1 != 1)\n
    {\n
        while (true)\n
        {\n
            v3 = cgc__getc(a3);\n
            if (v3 == -1)\n
                return -1;\n
            if (v3 == a2)\n
                break;\n
            *((a0 + v1)) = v3;\n
            v1 += 1;\n
            goto LABEL_403980;\n
        }\n
    }\n
    tmp_1 = v2;\n
    v2 = v1;\n
    if (!(v1 == tmp_1))\n
        goto LABEL_403991;\n
    while (true)\n
    {\n
LABEL_403980:\n
        v4 = cgc__getc(a3);\n
        if (v4 == -1)\n
            break;\n
        if (v4 == a2)\n
            goto LABEL_403991;\n
    }\n
LABEL_403991:\n
    *((a0 + v2)) = 0;\n
    return v2;\n
}\n
", "4209067:sub_4039ab": null, "4209072:cgc__getc": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char padding_c[12];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
long long cgc__getc(struct_1 *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x11]\n
    char v1;  // [bp-0x10]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // rsi\n
    unsigned long long v6;  // rdx\n
    unsigned long long v7;  // rcx\n
    unsigned long long v9;  // rsi\n
    unsigned long long v10;  // rdx\n
    unsigned long long v11;  // rcx\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // rax\n
    unsigned long long v15;  // r8\n
    unsigned long v16;  // rcx\n
    struct struct_0 **v17;  // rcx\n
    unsigned long long v18;  // rdx\n
    void* v19;  // rdi, Other Possible Types: unsigned long\n
    char *v20;  // rsi\n
    unsigned long v21;  // rdi\n
    unsigned long long v22;  // rax\n
\n
    v3 = a0;\n
    v4 = a0->field_8;\n
    if (v4 == -1)\n
    {\n
        v13 = cgc_receive(a0, v5, v6, v7);\n
        v14 = 4294967295;\n
        if (v13)\n
        {\n
            return 4294967295;\n
        }\n
        else if (!*(&v1))\n
        {\n
            return 4294967295;\n
        }\n
        else\n
        {\n
            v16 = a0->field_18;\n
            *(&v14) = v0;\n
            if (!v16)\n
                return v14;\n
            *(&v14) = *(v16 + v14);\n
        }\n
    }\n
    else\n
    {\n
        if (v4 != *(&a0->padding_c[0]))\n
        {\n
            v3->field_8 = v4 + 1;\n
            v22 = v3[1].padding_0[v4];\n
            return v22;\n
        }\n
        *(&a0->field_8) = 0;\n
        if (cgc_receive(a0, v9, v10, v11))\n
            return 4294967295;\n
        v15 = *(&v1);\n
        if (!v15)\n
            return 4294967295;\n
        *(&a0->padding_c[0]) = v15;\n
        if (!([D] amd64g_calculate_condition(0x4<64>, 0x20<64>, Shl(r8<8>, 0x20<8>), Shl(r8<8>, 0x1f<8>), cc_ndep<8>)))\n
        {\n
            v17 = a0->field_18;\n
            if (v17)\n
            {\n
                v18 = v15 & 3;\n
                if (v15 - 1 < 3)\n
                {\n
                    v19 = 0;\n
                }\n
                else\n
                {\n
                    v19 = 0;\n
                    do\n
                    {\n
                        v3[1].padding_0[v19] = *(v17 + v3[1].padding_0[v19]);\n
                        v3[1].padding_0[1 + v19] = *(v17 + v3[1].padding_0[1 + v19]);\n
                        v3[1].padding_0[2 + v19] = *(v17 + v3[1].padding_0[2 + v19]);\n
                        v3[1].padding_0[3 + v19] = *(v17 + v3[1].padding_0[3 + v19]);\n
                        v19 += 4;\n
                    } while (v15 - v18 != v19);\n
                }\n
                if (v18)\n
                {\n
                    v20 = &v3->padding_0[v19 + 32];\n
                    v21 = 0;\n
                    do\n
                    {\n
                        v20[v21] = *(v17 + v20[v21]);\n
                        v21 += 1;\n
                    } while (v18 != v21);\n
                }\n
            }\n
        }\n
        if (v15 < 0)\n
            return 4294967295;\n
        v4 = v3->field_8;\n
    }\n
}\n
", "4209418:sub_403b0a": null, "4209424:cgc_free": "extern unsigned long long g_heap;\n
\n
long long cgc_free(unsigned long long a0)\n
{\n
    return malloc_free(&g_heap, a0);\n
}\n
", "4209439:sub_403b1f": null, "4209440:cgc_fwrite": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
long long cgc_fwrite(unsigned long long a0, unsigned long long a1, struct_0 *a2)\n
{\n
    unsigned long v0;  // [bp-0x450]\n
    unsigned long v1;  // [bp-0x448]\n
    char v2;  // [bp-0x440]\n
    char v3;  // [bp-0x438], Other Possible Types: unsigned long long\n
    unsigned long long v4;  // [bp-0x437]\n
    unsigned long long v5;  // [bp-0x436]\n
    unsigned long long v6;  // [bp-0x435]\n
    struct_0 *v8;  // rbx\n
    unsigned long v9;  // r13, Other Possible Types: unsigned long long\n
    unsigned long long v10;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v11;  // rax\n
    char *v12;  // r15\n
    void* v13;  // rbp, Other Possible Types: unsigned long\n
    unsigned long long v14;  // rcx\n
    struct_2 *v15;  // rdi, Other Possible Types: unsigned long\n
    void* v16;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v17;  // rcx\n
    unsigned long v18;  // rbx, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // rsi\n
    unsigned long long v20;  // rdx\n
    unsigned long v21;  // rcx\n
    char *v22;  // rcx\n
    unsigned long v23;  // rdx\n
    void* v24;  // r14, Other Possible Types: unsigned long\n
    void* v25;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v26;  // rcx\n
    struct_2 *v27;  // rdi\n
    unsigned long long v28;  // r15\n
\n
    v8 = a2;\n
    v9 = a1;\n
    v10 = a0;\n
    if (a2->field_8 != -1)\n
    {\n
        if (a1 >= 0x400)\n
        {\n
            cgc_fflush(a2);\n
        }\n
        else\n
        {\n
            v11 = a2->field_c;\n
            if (v11 + a1 >= 0x400)\n
            {\n
                v13 = 0x400 - v11;\n
                cgc_memcpy(&a2->padding_0[v11 + 32], a0, v13);\n
                v8->field_c = v8->field_c + v13;\n
                cgc_fflush(a2);\n
                if (v13 < a1)\n
                    goto LABEL_403d12;\n
            }\n
            else\n
            {\n
                v13 = 0;\n
                if (0 < a1)\n
                {\n
LABEL_403d12:\n
                    v28 = a1 - v13;\n
                    cgc_memcpy(&v8->padding_0[v8->field_c + 32], a0 + v13, v28);\n
                    v8->field_c = v8->field_c + v28;\n
                    return a1;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v12 = a2->field_10;\n
    if (!v12)\n
    {\n
        v16 = 0;\n
        do\n
        {\n
            if (v16 >= a1)\n
                return a1;\n
            v16 += *(&v3);\n
        } while (!cgc_transmit(a2, a1, a2, v17));\n
    }\n
    else\n
    {\n
        if (!a1)\n
            return a1;\n
        v25 = 0;\n
        v14 = 0x400;\n
        v15 = &v3;\n
        v0 = v10;\n
LABEL_403b83:\n
        v18 = v9 - v25;\n
        if (0x400 <= v18)\n
            v18 = 0x400;\n
        v1 = v25;\n
        v19 = v10 + v25;\n
        v20 = v18;\n
        cgc_memcpy();\n
        if (v18)\n
        {\n
            v15 = v18 & 3;\n
            if (v18 - 1 < 3)\n
            {\n
                v21 = 0;\n
            }\n
            else\n
            {\n
                v21 = 0;\n
                do\n
                {\n
                    *(&v3 + v21) = v12[*(&v3 + v21)];\n
                    *(&v4 + v21) = v12[*(&v4 + v21)];\n
                    *(&v5 + v21) = v12[*(&v5 + v21)];\n
                    *(&v6 + v21) = v12[*(&v6 + v21)];\n
                    v21 += 4;\n
                } while ((v18 & 2044) != v21);\n
            }\n
            if (v15)\n
            {\n
                v22 = &v3 + v21;\n
                v23 = 0;\n
                do\n
                {\n
                    v22[v23] = v12[v22[v23]];\n
                    v23 += 1;\n
                } while (v15 != v23);\n
            }\n
        }\n
        v24 = 0;\n
        do\n
        {\n
            if (v18 <= v24)\n
            {\n
                v25 = v1 + v18;\n
                v10 = v0;\n
                v26 = 0x400;\n
                v27 = &v3;\n
                if (v25 >= v9)\n
                    return v9;\n
                goto LABEL_403b83;\n
            }\n
            v24 += *(&v2);\n
        } while (!cgc_transmit(v15, v19));\n
    }\n
    return -1;\n
}\n
", "4209768:sub_403c68": null, "4209995:sub_403d4b": null, "4210000:cgc_fxlat": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[15];\n
    uint128_t field_10;\n
    char padding_20[80];\n
    uint128_t field_70;\n
    uint128_t field_80;\n
    uint128_t field_90;\n
    uint128_t field_a0;\n
    uint128_t field_b0;\n
    uint128_t field_c0;\n
    uint128_t field_d0;\n
    uint128_t field_e0;\n
    uint128_t field_f0;\n
} struct_1;\n
\n
long long cgc_fxlat(struct_0 *a0, char a1[2])\n
{\n
    struct_0 *v1;  // r15\n
    unsigned long long v2;  // rdi\n
    char v3[2];  // r14\n
    struct_1 *v4;  // rbx\n
    unsigned long v7;  // rdx, Other Possible Types: char\n
    unsigned long v8;  // rax\n
    unsigned long v9;  // rsi, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rdi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // esi\n
    unsigned long v13;  // rdx\n
    char v14;  // al\n
\n
    v1 = a0;\n
    v2 = a0->field_10;\n
    if (!a1)\n
    {\n
        *(&v1->field_10) = 0;\n
        return cgc_free(v2);\n
    }\n
    v3 = a1;\n
    v4 = cgc_realloc(v2, 0x100);\n
    v1->field_10 = v4;\n
    *(&v1[1].padding_0[0]) = cgc_realloc(*(&v1[1].padding_0[0]), 0x100);\n
    v7 = a1[0];\n
    v9 = 826981510;\n
    if (v3[0])\n
    {\n
        v8 = 1;\n
        do\n
        {\n
            v9 = __ROL__((v9 + v9 * 36) ^ v7, 13);\n
            v7 = v3[v8];\n
            v8 = v8 + 1;\n
        } while (v7);\n
    }\n
    *(&v4->field_0) = 0xf0e0d0c0b0a09080706050403020100;\n
    v4->field_10 = 41362427191743139026751447860679676176;\n
    strncpy(&v4->padding_20, \" !\\\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmno\", 80);\n
    v4->field_70 = 169468730032567031154139535364404179312;\n
    v4->field_80 = 190819780506037679842037549948358263168;\n
    v4->field_90 = 212170830979508328529935564532312347024;\n
    v4->field_a0 = 233521881452978977217833579116266430880;\n
    v4->field_b0 = 254872931926449625905731593700220514736;\n
    v4->field_c0 = 276223982399920274593629608284174598592;\n
    v4->field_d0 = 297575032873390923281527622868128682448;\n
    v4->field_e0 = 318926083346861571969425637452082766304;\n
    v4->field_f0 = 340277133820332220657323652036036850160;\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v9;\n
        v12 = v9 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v9 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = (&v4->field_0)[v10];\n
        (&v4->field_0)[v10] = (&v4->field_0)[v13];\n
        (&v4->field_0)[v13] = v14;\n
        v10 -= 1;\n
    }\n
}\n
", "4210449:sub_403f11": null, "4210464:cgc_malloc": "extern unsigned long long g_heap;\n
\n
long long cgc_malloc(unsigned long long a0)\n
{\n
    return cgc_malloc_alloc(&g_heap, a0);\n
}\n
", "4210479:sub_403f2f": null, "4210480:cgc_malloc_alloc": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_8;\n
    struct struct_2 *field_10;\n
    char padding_18[1016];\n
    unsigned long long field_410;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    char padding_10[8];\n
    struct struct_0 *field_18;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
    struct struct_3 *field_18;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_2;\n
\n
extern unsigned long long g_40a210;\n
extern unsigned long long g_40a242;\n
\n
long long cgc_malloc_alloc(struct_1 *a0, unsigned long long a1)\n
{\n
    char v0;  // [bp-0x30]\n
    unsigned long long v2;  // rbx\n
    struct_1 *v4;  // rbx\n
    struct_1 *v5;  // r12\n
    unsigned long long v7;  // rdx\n
    unsigned long v9;  // rax\n
    unsigned long v10;  // rbx\n
    struct_0 *v11;  // r15, Other Possible Types: unsigned long, void*\n
\n
    if (a1 > 2147483647)\n
        return 0;\n
    v2 = a1 + 3 & -4;\n
    if (!v2)\n
        return tiny_alloc(a0, 4);\n
    if (v2 <= 15)\n
        return tiny_alloc(a0, v2);\n
    if (v2 > 131071)\n
    {\n
        if (!cgc_allocate(a0, a1, v7))\n
        {\n
            v11 = *(&v0);\n
            *(v11) = a0;\n
            *((v11 + 8)) = v2 + 4111 & -0x1000;\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
    v4 = v2 + 31;\n
    v5 = v4 & -0x10;\n
    if (!(v4 & -0x10))\n
    {\n
        v9 = 4294967295;\n
    }\n
    else if (v5 < 513)\n
    {\n
        v10 = v4 / 16;\n
        v9 = v10 + 2;\n
        if (v10 > 128)\n
            v11 = 0;\n
    }\n
    else if (v5 <= 0x1200)\n
    {\n
        v9 = (&v5[524576157].padding_18[816] >> 7) + 34;\n
    }\n
    else\n
    {\n
        v9 = 130;\n
        if (v5 <= 0x20000)\n
            v9 = (&v5[8393218528].padding_18[232] >> 11) + 66;\n
    }\n
    v11 = (&a0->field_0)[v9];\n
    if (!v11)\n
        goto LABEL_0x4041d0;\n
    else\n
        goto LABEL_0x4041f0;\n
}\n
", "4211392:tiny_alloc": "long long tiny_alloc(unsigned long a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x38]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // rbx\n
    struct struct_0 *v4[648];  // rax, Other Possible Types: unsigned long\n
    unsigned long v5;  // r15\n
    unsigned short v6[2];  // rcx, Other Possible Types: unsigned long\n
    unsigned int v7;  // edx\n
    unsigned short *v8;  // rcx, Other Possible Types: unsigned long\n
    unsigned short *v9;  // rax, Other Possible Types: unsigned long\n
    unsigned long long v10;  // rdx\n
    unsigned long long v12;  // rbp\n
    unsigned long long v13;  // r13\n
    unsigned short *v14;  // r12\n
    unsigned long v15;  // rdx\n
    unsigned long long v16;  // rax\n
    unsigned long long v17;  // rbx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    if (a1 <= 15)\n
    {\n
        v4 = a1 / 4 - 1;\n
    }\n
    else if (a1 <= 0x200)\n
    {\n
        v4 = (a1 >> 4) + 2;\n
    }\n
    else if (a1 <= 0x1200)\n
    {\n
        v4 = (0x7ffffffe00 + a1 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v4 = 130;\n
        if (a1 <= 0x20000)\n
            v4 = (0x7ffffffee00 + a1 >> 11) + 66;\n
    }\n
    v5 = v4;\n
    v9 = *((a0 + v4 * 8));\n
    if (v9)\n
    {\n
        *((a0 + v5 * 8)) = *(&v9);\n
        return v9;\n
    }\n
    v6 = *((a0 + v5 * 8 + 5144));\n
    if (v6)\n
    {\n
        v7 = v6[0];\n
        a1 = v6[1];\n
    }\n
    else\n
    {\n
        v8 = *((a0 + 5168));\n
        if (v8)\n
        {\n
            v9 = *((a0 + 5176));\n
        }\n
        else if (cgc_allocate(a0, a1, v10))\n
        {\n
            *((a0 + 5168)) = 0;\n
            return 0;\n
        }\n
        else\n
        {\n
            v12 = v0;\n
            v13 = v12 + 1048575;\n
            v14 = v13 & -0x100000;\n
            if (v14 > v12)\n
                cgc_deallocate(a0);\n
            if ((v12 + 0x200000) > (v14 + 0x80000))\n
                cgc_deallocate(a0);\n
            *((a0 + (v13 >> 20) + 1048)) = 1;\n
            v8 = v14;\n
            *((a0 + 5168)) = v14;\n
            v9 = 0;\n
            if (!v14)\n
                return 0;\n
        }\n
        v15 = v8;\n
        v6 = v8 + v9;\n
        *((a0 + v5 * 8 + 5144)) = v6;\n
        *((v15 + v9)) = v3;\n
        *((v15 + v9 + 2)) = v3;\n
        v16 = v9 + 0x1000;\n
        *((a0 + 5176)) = v16;\n
        if (v16 == 0x100000)\n
            *((a0 + 5168)) = 0;\n
        v7 = a1;\n
    }\n
    v17 = v3 + a1;\n
    *((v6 + 2)) = v17;\n
    if (v7 + v17 < 4097)\n
        return a1 + v6;\n
    *((a0 + v5 * 8 + 5144)) = 0;\n
}\n
", "4211831:sub_404477": null, "4211840:malloc_free": "long long malloc_free(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // rcx\n
    unsigned long v4;  // r9\n
    char v5;  // al\n
    unsigned long v6;  // rax\n
    unsigned long v7;  // rdi\n
    unsigned long v8;  // r11\n
    unsigned long v9;  // r8\n
    unsigned long v10;  // rax\n
    unsigned long v11;  // rdi\n
    unsigned long v12;  // rax\n
    unsigned long v13;  // r10\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // r10\n
    unsigned long v16;  // rcx\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // r11\n
    unsigned long v19;  // rsi\n
    unsigned long v20;  // rax\n
    unsigned long v21;  // rax\n
    unsigned long v22;  // rcx\n
    unsigned long v23;  // rdx\n
    unsigned long v24;  // rdi\n
    unsigned long v25;  // rax\n
    unsigned long v26;  // rax\n
    unsigned long v27;  // rdi\n
    unsigned long v28;  // rsi\n
\n
    v0 = v2;\n
    if (!a1)\n
        return v0;\n
    v3 = a1;\n
    v4 = a0;\n
    v5 = *((a0 + (a1 >> 20) + 1048));\n
    if (v5 != 2)\n
    {\n
        if (v5 == 1)\n
        {\n
            v6 = (*((a1 & -0x1000)) <= 15 ? (*((a1 & -0x1000)) <= 0x200 ? (*((a1 & -0x1000)) <= 0x1200 ? (*((a1 & -0x1000)) + 0x7ffffffee00 >> 11) + 66 : (*((a1 & -0x1000)) + 0x7ffffffe00 >> 7) + 34) : (*((a1 & -0x1000)) >> 4) + 2) : *((a1 & -0x1000)) / 4 - 1);\n
            *(a1) = *((a0 + v6 * 8));\n
            *((a0 + v6 * 8)) = a1;\n
            return v0;\n
        }\n
        if (v5)\n
            return v0;\n
        if ((a1 & 4095) != 16)\n
        {\n
            v11 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_404869;\n
        }\n
        else\n
        {\n
            if (*((a1 - 16)) != a0)\n
            {\n
                v3 = a0;\n
                v12 = cgc_heap_error(\"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\", a1);\n
            }\n
            else\n
            {\n
                v12 = *((a1 - 8));\n
                if (v12 - 0x20000 <= 2147356671 && !(v12 & 4095))\n
                    return cgc_deallocate(a0, a1);\n
            }\n
            cgc_heap_error(\"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\", v3, v12);\n
        }\n
    }\n
    else if (!(v3 & 7))\n
    {\n
        v19 = a1 - 16;\n
        v7 = *((v19 + 8));\n
        if ((v7 & 1))\n
        {\n
            v11 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_404869;\n
        }\n
        else if (v7 - 131073 <= -131058)\n
        {\n
            v11 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_404869;\n
        }\n
        else\n
        {\n
            v8 = *(v19);\n
            v9 = v7 + v19;\n
            v10 = v19 - v8;\n
            if (!v8)\n
                v10 = v8;\n
            if (!v10)\n
            {\n
                if (*(v9) == v7)\n
                    goto LABEL_4045bf;\n
                goto LABEL_404872;\n
            }\n
            else\n
            {\n
                v13 = *((v10 + 8));\n
                if (!((v13 & -2) == v8))\n
                    goto LABEL_40488c;\n
                if (*(v9) == v7)\n
                {\n
                    if ((v13 & 1))\n
                    {\n
                        if (v8 <= 15)\n
                        {\n
                            v15 = v13 / 4 - 1;\n
                        }\n
                        else if (v8 <= 0x200)\n
                        {\n
                            v15 = (v13 >> 4) + 2;\n
                        }\n
                        else if (v8 <= 0x1200)\n
                        {\n
                            v15 = (0x7ffffffe00 + v8 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v15 = 130;\n
                            if (v8 <= 0x20000)\n
                                v15 = (0x7ffffffee00 + v8 >> 11) + 66;\n
                        }\n
                        *((v10 + 8)) = v8;\n
                        v16 = *((v10 + 16));\n
                        if (v16)\n
                            *((v16 + 24)) = *((v10 + 24));\n
                        v17 = *((v10 + 24));\n
                        if (v17)\n
                            *((v17 + 16)) = v16;\n
                        if (*((v4 + (v15 << 3))) == v10)\n
                            *((v4 + v15 * 8)) = v17;\n
                        *((v10 + 16)) = 0;\n
                        v18 = v8 + *((v19 + 8));\n
                        *((v10 + 8)) = v18;\n
                        *(v9) = v18;\n
                        v19 = v10;\n
                        v14 = *((v9 + 8));\n
                        if (!(!(v14 & 1)))\n
                            goto LABEL_4046d4;\n
                        goto LABEL_4045cc;\n
                    }\n
LABEL_4045bf:\n
                    v14 = *((v9 + 8));\n
                    if ((v14 & 1))\n
                    {\n
LABEL_4046d4:\n
                        v21 = v14 & -2;\n
                        if (v21 <= 15)\n
                        {\n
                            v22 = v14 / 4 - 1;\n
                        }\n
                        else if (v21 <= 0x200)\n
                        {\n
                            v22 = (v14 >> 4) + 2;\n
                        }\n
                        else if (v21 <= 0x1200)\n
                        {\n
                            v22 = (0x7ffffffe00 + v21 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v22 = 130;\n
                            if (v21 <= 0x20000)\n
                                v22 = (0x7ffffffee00 + v21 >> 11) + 66;\n
                        }\n
                        *((v9 + 8)) = v21;\n
                        v23 = *((v9 + 16));\n
                        if (v23)\n
                            *((v23 + 24)) = *((v9 + 24));\n
                        v24 = *((v9 + 24));\n
                        if (v24)\n
                            *((v24 + 16)) = v23;\n
                        if (*((v4 + (v22 << 3))) == v9)\n
                            *((v4 + v22 * 8)) = v24;\n
                        *((v9 + 16)) = 0;\n
                        v25 = v21 + *((v19 + 8));\n
                        *((v19 + 8)) = v25;\n
                        *((v19 + v25)) = v25;\n
                        v20 = *((v19 + 8));\n
                        if (v20 > 15)\n
                        {\n
LABEL_404791:\n
                            if (v20 <= 0x200)\n
                            {\n
                                v3 = (v20 >> 4) + 2;\n
                            }\n
                            else if (v20 <= 0x1200)\n
                            {\n
                                v3 = (0x7ffffffe00 + v20 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v3 = 130;\n
                                if (v20 <= 0x20000)\n
                                    v3 = (0x7ffffffee00 + v20 >> 11) + 66;\n
                            }\n
LABEL_4047e7:\n
                            if ((v20 & 1))\n
                            {\n
                                v10 = cgc_heap_error(\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\");\n
                            }\n
                            else\n
                            {\n
                                *((v19 + 8)) = v20 | 1;\n
                                *((v19 + 16)) = 0;\n
                                *((v19 + 24)) = *((v4 + v3 * 8));\n
                                *((v4 + v3 * 8)) = v19;\n
                                v26 = *((v19 + 24));\n
                                if (!v26)\n
                                    return v0;\n
                                *((v26 + 16)) = v19;\n
                                return v0;\n
                            }\n
LABEL_40488c:\n
                            v27 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
                            v28 = v10;\n
LABEL_404895:\n
                            cgc_heap_error(v27, v28, v3);\n
                            return cgc_malloc_size(v27, v28, v3, v3, v9, v4);\n
                        }\n
LABEL_4045da:\n
                        v3 = v20 / 4 - 1;\n
                        goto LABEL_4047e7;\n
                    }\n
LABEL_4045cc:\n
                    v20 = *((v19 + 8));\n
                    if (!(v20 <= 15))\n
                        goto LABEL_404791;\n
                    goto LABEL_4045da;\n
                }\n
            }\n
        }\n
    }\n
    v11 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_404869:\n
    cgc_heap_error(v11, v3);\n
LABEL_404872:\n
    v27 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    v28 = v9;\n
    goto LABEL_404895;\n
}\n
", "4212896:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_size(unsigned long a0, struct_0 *a1)\n
{\n
    char v1;  // al\n
\n
    v1 = *((a0 + (a1 >> 20) + 1048));\n
    if (!(v1 & 253))\n
    {\n
        return a1[1].field_-8 - 16;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        return *((a1 & -0x1000));\n
    }\n
}\n
", "4212940:sub_4048cc": null, "4212944:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned long long field_-8;\n
} struct_0;\n
\n
long long cgc_malloc_realloc(unsigned long a0, struct_0 *a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v3;  // r12\n
    struct_0 *v5;  // rax\n
\n
    v0 = v2;\n
    if (a2 > 2147483647)\n
    {\n
LABEL_4048e1:\n
        return 0;\n
    }\n
    if (!a2)\n
    {\n
        malloc_free(a0, a1);\n
        return 0;\n
    }\n
    if (!a1)\n
        return cgc_malloc_alloc(a0, a2);\n
    v3 = a1 / 0x100000;\n
    if (!(*((a0 + v3 + 1048)) & 253))\n
    {\n
        if (a1[1].field_-8 - 16 < a2)\n
            goto LABEL_404963;\n
    }\n
    else\n
    {\n
        if (*((a0 + v3 + 1048)) == 1)\n
        {\n
            if (*((a1 & -0x1000)) < a2)\n
                goto LABEL_404963;\n
        }\n
        else\n
        {\n
            if (0 < a2)\n
            {\n
LABEL_404963:\n
                v5 = cgc_malloc_alloc(a0, a2);\n
                if (v5)\n
                {\n
                    cgc_memcpy(v5, a1);\n
                    malloc_free(a0, a1);\n
                    return v5;\n
                }\n
                goto LABEL_4048e1;\n
            }\n
        }\n
    }\n
    return a1;\n
}\n
", "4213204:sub_4049d4": null, "4213216:cgc_heap_error": "extern unsigned long long cgc_stderr;\n
\n
long long cgc_heap_error(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xb0]\n
    unsigned long v5;  // [bp-0xa8]\n
    unsigned long v6;  // [bp-0xa0]\n
    unsigned long v7;  // [bp-0x98]\n
    unsigned long v8;  // [bp-0x90]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    int v16;  // [bp-0x18]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long long v19;  // rdx\n
    unsigned long long v20;  // rcx\n
    unsigned long long v21;  // r8\n
    unsigned long long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    cgc_vfprintf(cgc_stderr, a0, &v0);\n
    cgc__terminate(cgc_stderr);\n
    return cgc_memchr(cgc_stderr, a0, v19, v20, v21, v22);\n
}\n
", "4213392:cgc_memchr": "long long cgc_memchr(char *a0, unsigned long a1, unsigned long long a2)\n
{\n
    int tmp_5;  // tmp #5\n
    char *v1;  // rax, Other Possible Types: unsigned long\n
\n
    if (a2)\n
    {\n
        v1 = a0;\n
        do\n
        {\n
            if (*(v1) == a1)\n
                return v1;\n
            v1 += 1;\n
            tmp_5 = a2;\n
            a2 -= 1;\n
        } while (tmp_5 != 1);\n
    }\n
    return 0;\n
}\n
", "4213428:sub_404ab4": null, "4213440:cgc_memcmp": "long long cgc_memcmp(unsigned long a0, unsigned long a1, unsigned long a2)\n
{\n
    char *v1;  // rcx, Other Possible Types: unsigned long\n
\n
    if (!a2)\n
        return 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v1)) != *((a1 + v1)))\n
            return *((a0 + v1)) - *((a1 + v1));\n
        v1 += 1;\n
        if (a2 == v1)\n
            return 0;\n
    }\n
}\n
", "4213486:sub_404aee": null, "4213488:cgc_memcpy": "long long cgc_memcpy(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    unsigned long v2;  // r11\n
    unsigned long long v3;  // rdi\n
    unsigned long long v4;  // r9\n
    unsigned long long v5;  // r8\n
    int v6;  // xmm1\n
    int v7;  // xmm1\n
    int v8;  // xmm1\n
    int v9;  // xmm1\n
    unsigned long v10;  // rdi\n
    unsigned long v11;  // r9, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r9\n
    unsigned long v13;  // r10\n
    unsigned long v15;  // rdi\n
    int v16;  // xmm1\n
    unsigned long v17;  // r8\n
    unsigned long long v18;  // r8\n
    char *v19;  // rdi, Other Possible Types: unsigned long\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 >= 8)\n
    {\n
        if (&a2[a1] <= a0)\n
        {\n
LABEL_404b84:\n
            if (a2 < 32)\n
            {\n
                v2 = 0;\n
            }\n
            else\n
            {\n
                v2 = a2 & -0x20;\n
                v3 = v2 - 32;\n
                v4 = (v3 >> 5) + 1;\n
                v5 = v4 & 3;\n
                if (v3 < 96)\n
                {\n
                    v10 = 0;\n
                }\n
                else\n
                {\n
                    v11 = v4 & -4;\n
                    v10 = 0;\n
                    do\n
                    {\n
                        v6 = *((a1 + v10 + 16));\n
                        *(&v1[v10]) = *((a1 + v10));\n
                        *(&v1[16 + v10]) = v6;\n
                        v7 = *((a1 + v10 + 48));\n
                        *(&v1[32 + v10]) = *((a1 + v10 + 32));\n
                        *(&v1[48 + v10]) = v7;\n
                        v8 = *((a1 + v10 + 80));\n
                        *(&v1[64 + v10]) = *((a1 + v10 + 64));\n
                        *(&v1[80 + v10]) = v8;\n
                        v9 = *((a1 + v10 + 112));\n
                        *(&v1[96 + v10]) = *((a1 + v10 + 96));\n
                        *(&v1[112 + v10]) = v9;\n
                        v10 -= -128;\n
                        tmp_21 = v11;\n
                        v11 -= 4;\n
                    } while (tmp_21 != 4);\n
                }\n
                if (v5)\n
                {\n
                    v12 = &v1[v10 + 16];\n
                    v13 = a1 + v10 + 16;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v16 = *((v13 + v15));\n
                        *((-16 + v12 + v15)) = *((v13 + v15 - 16));\n
                        *((v12 + v15)) = v16;\n
                        v15 += 32;\n
                    } while (v5 * 32 != v15);\n
                }\n
                if (v2 == a2)\n
                    return v1;\n
                if (!(a2 & 24))\n
                    goto LABEL_404b17;\n
            }\n
            v17 = v2;\n
            v2 = a2 & -8;\n
            do\n
            {\n
                *(&v1[v17]) = *((a1 + v17));\n
                v17 += 8;\n
            } while (v2 != v17);\n
            if (v2 == a2)\n
                return v1;\n
LABEL_404b17:\n
            v18 = &a2[~(v2)];\n
            v19 = a2 & 3;\n
            if ((a2 & 3))\n
            {\n
                do\n
                {\n
                    v1[v2] = *((a1 + v2));\n
                    v2 += 1;\n
                    tmp_7 = v19;\n
                    v19 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v18 < 3)\n
                return v1;\n
            do\n
            {\n
                v1[v2] = *((a1 + v2));\n
                v1[1 + v2] = *((a1 + v2 + 1));\n
                v1[2 + v2] = *((a1 + v2 + 2));\n
                v1[3 + v2] = *((a1 + v2 + 3));\n
                v2 += 4;\n
            } while (a2 != v2);\n
        }\n
        else if (a0 + a2 <= a1)\n
        {\n
            goto LABEL_404b84;\n
        }\n
    }\n
    v2 = 0;\n
    goto LABEL_404b17;\n
}\n
", "4213919:sub_404c9f": null, "4213920:cgc_memmove": "long long cgc_memmove(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_13;  // tmp #13\n
    int tmp_10;  // tmp #10\n
    int tmp_21;  // tmp #21\n
    int tmp_7;  // tmp #7\n
    char *v1;  // rax\n
    char *v2;  // r8, Other Possible Types: unsigned long\n
    unsigned long v3;  // r11\n
    unsigned long long v4;  // rcx\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // r9\n
    unsigned long long v7;  // rdi\n
    unsigned long long v8;  // r9\n
    unsigned long long v9;  // r8\n
    uint128_t *v10;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    uint128_t *v12;  // r10\n
    unsigned long v13;  // r11\n
    unsigned long v14;  // rcx\n
    unsigned long v15;  // rdi\n
    unsigned long v16;  // r9, Other Possible Types: unsigned long long\n
    int v17;  // xmm1\n
    int v18;  // xmm1\n
    int v19;  // xmm1\n
    int v20;  // xmm1\n
    uint128_t *v21;  // r9\n
    unsigned long v22;  // r10\n
    unsigned long v24;  // rdi\n
    unsigned long long v25;  // rdi\n
    uint128_t *v27;  // rcx, Other Possible Types: unsigned long\n
    int v28;  // xmm1\n
    unsigned long v29;  // r8\n
    char *v30;  // rcx\n
    char *v31;  // rcx, Other Possible Types: unsigned long\n
    unsigned long long v32;  // r8\n
    char *v33;  // rdi, Other Possible Types: unsigned long\n
    unsigned long long v34;  // r9\n
    char *v35;  // rcx, Other Possible Types: unsigned long\n
    unsigned long v36;  // rdx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    if (a0 > a1)\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 4)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_404df5:\n
                if (a2 < 16)\n
                {\n
                    v2 = 0;\n
                }\n
                else\n
                {\n
                    v2 = a2 & -0x10;\n
                    v4 = v2 - 16;\n
                    v5 = (v4 >> 4) + 1;\n
                    v6 = v5 & 3;\n
                    if (v4 < 48)\n
                    {\n
                        v10 = 0;\n
                    }\n
                    else\n
                    {\n
                        v11 = v5 & -4;\n
                        v12 = v1 + a2 - 16;\n
                        v13 = &a2[a1 + 16];\n
                        v14 = 0;\n
                        do\n
                        {\n
                            *((v12 + v14)) = *((v13 + v14));\n
                            *((-16 + v12 + v14)) = *((v13 + v14 - 16));\n
                            *((-32 + v12 + v14)) = *((v13 + v14 - 32));\n
                            *((-48 + v12 + v14)) = *((v13 + v14 - 48));\n
                            v14 -= 64;\n
                            tmp_13 = v11;\n
                            v11 -= 4;\n
                        } while (tmp_13 != 4);\n
                        v10 = -(v14);\n
                    }\n
                    if (v6)\n
                    {\n
                        v25 = &a2[-1 * v10];\n
                        v27 = 0;\n
                        do\n
                        {\n
                            *(&v1[16 + v27 + v25]) = *((a1 + v25 - 16 + v27));\n
                            v27 -= 16;\n
                        } while (v6 * 16 + v27);\n
                    }\n
                    if (v2 == a2)\n
                        return v1;\n
                    if (!(a2 & 12))\n
                        goto LABEL_404cd9;\n
                }\n
                v30 = v2;\n
                v2 = a2 & -4;\n
                v31 = -(v30);\n
                do\n
                {\n
                    *((v1 + a2 - 4 + v31)) = *(&a2[4 + v31 + a1]);\n
                    v31 -= 4;\n
                } while (!(v2) != v31);\n
                if (v2 == a2)\n
                    return v1;\n
LABEL_404cd9:\n
                v34 = &a2[~(v2)];\n
                if ((a2 & 3))\n
                {\n
                    v35 = 0;\n
                    do\n
                    {\n
                        v1[v35 + v34] = *((a1 + v34 + v35));\n
                        v35 -= 1;\n
                    } while (!(a2 & 3) != v35);\n
                    v2 -= v35;\n
                }\n
                if (v34 < 3)\n
                    return v1;\n
                v36 = &a2[-1 * v2];\n
                do\n
                {\n
                    v1[1 + v36] = *((a1 + v36 - 1));\n
                    v1[2 + v36] = *((a1 + v36 - 2));\n
                    v1[3 + v36] = *((a1 + v36 - 3));\n
                    v1[4 + v36] = *((a1 + v36 - 4));\n
                    tmp_10 = v36;\n
                    v36 -= 4;\n
                } while (tmp_10 != 4);\n
                return v1;\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_404df5;\n
            }\n
        }\n
        v2 = 0;\n
        goto LABEL_404cd9;\n
    }\n
    else\n
    {\n
        if (!a2)\n
            return a0;\n
        if (a2 >= 8)\n
        {\n
            if (&a2[a1] <= a0)\n
            {\n
LABEL_404e03:\n
                if (a2 < 32)\n
                {\n
                    v3 = 0;\n
                }\n
                else\n
                {\n
                    v3 = a2 & -0x20;\n
                    v7 = v3 - 32;\n
                    v8 = (v7 >> 5) + 1;\n
                    v9 = v8 & 3;\n
                    if (v7 < 96)\n
                    {\n
                        v15 = 0;\n
                    }\n
                    else\n
                    {\n
                        v16 = v8 & -4;\n
                        v15 = 0;\n
                        do\n
                        {\n
                            v17 = *((a1 + v15 + 16));\n
                            *(&v1[v15]) = *((a1 + v15));\n
                            *(&v1[16 + v15]) = v17;\n
                            v18 = *((a1 + v15 + 48));\n
                            *(&v1[32 + v15]) = *((a1 + v15 + 32));\n
                            *(&v1[48 + v15]) = v18;\n
                            v19 = *((a1 + v15 + 80));\n
                            *(&v1[64 + v15]) = *((a1 + v15 + 64));\n
                            *(&v1[80 + v15]) = v19;\n
                            v20 = *((a1 + v15 + 112));\n
                            *(&v1[96 + v15]) = *((a1 + v15 + 96));\n
                            *(&v1[112 + v15]) = v20;\n
                            v15 -= -128;\n
                            tmp_21 = v16;\n
                            v16 -= 4;\n
                        } while (tmp_21 != 4);\n
                    }\n
                    if (v9)\n
                    {\n
                        v21 = &v1[v15 + 16];\n
                        v22 = a1 + v15 + 16;\n
                        v24 = 0;\n
                        do\n
                        {\n
                            v28 = *((v22 + v24));\n
                            *((-16 + v21 + v24)) = *((v22 + v24 - 16));\n
                            *((v21 + v24)) = v28;\n
                            v24 += 32;\n
                        } while (v9 * 32 != v24);\n
                    }\n
                    if (v3 == a2)\n
                        return v1;\n
                    if (!(a2 & 24))\n
                        goto LABEL_404d87;\n
                }\n
                v29 = v3;\n
                v3 = a2 & -8;\n
                do\n
                {\n
                    *(&v1[v29]) = *((a1 + v29));\n
                    v29 += 8;\n
                } while (v3 != v29);\n
                if (v3 == a2)\n
                    return v1;\n
LABEL_404d87:\n
                v32 = &a2[~(v3)];\n
                v33 = a2 & 3;\n
                if ((a2 & 3))\n
                {\n
                    do\n
                    {\n
                        v1[v3] = *((a1 + v3));\n
                        v3 += 1;\n
                        tmp_7 = v33;\n
                        v33 -= 1;\n
                    } while (tmp_7 != 1);\n
                }\n
                if (v32 < 3)\n
                    return v1;\n
                do\n
                {\n
                    v1[v3] = *((a1 + v3));\n
                    v1[1 + v3] = *((a1 + v3 + 1));\n
                    v1[2 + v3] = *((a1 + v3 + 2));\n
                    v1[3 + v3] = *((a1 + v3 + 3));\n
                    v3 += 4;\n
                } while (a2 != v3);\n
            }\n
            else if (a0 + a2 <= a1)\n
            {\n
                goto LABEL_404e03;\n
            }\n
        }\n
        v3 = 0;\n
        goto LABEL_404d87;\n
    }\n
}\n
", "4214847:sub_40503f": null, "4214848:cgc_memset": "long long cgc_memset(char *a0, unsigned long a1, char *a2)\n
{\n
    int tmp_43;  // tmp #43\n
    int tmp_44;  // tmp #44\n
    int tmp_21;  // tmp #21\n
    int tmp_20;  // tmp #20\n
    char *v1;  // rax\n
    unsigned long v2;  // rcx\n
    int v3;  // xmm0\n
    int v4;  // xmm0\n
    int v5;  // xmm0\n
    unsigned long long v6;  // rdi\n
    unsigned long long v7;  // r10\n
    unsigned long long v8;  // r9\n
    unsigned long v9;  // rdi\n
    unsigned long v10;  // r10, Other Possible Types: unsigned long long\n
    uint128_t *v11;  // r10\n
    unsigned long v13;  // rdi\n
    unsigned long v14;  // rdi\n
    int v15;  // xmm0\n
\n
    v1 = a0;\n
    if (!a2)\n
        return a0;\n
    if (a2 < 8)\n
    {\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (a2 < 32)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v2 = a2 & -0x20;\n
            tmp_43 = InterleaveLOV(tmp_44, tmp_44);\n
            v3 = tmp_43;\n
            v4 = v3 / 0x10000000000000000 CONCAT v3 CONCAT v3 CONCAT v3 CONCAT v3;\n
            v5 = v4 CONCAT v4 CONCAT v4 CONCAT v4;\n
            v6 = v2 - 32;\n
            v7 = (v6 >> 5) + 1;\n
            v8 = v7 & 7;\n
            if (v6 < 224)\n
            {\n
                v9 = 0;\n
            }\n
            else\n
            {\n
                v10 = v7 & -8;\n
                v9 = 0;\n
                do\n
                {\n
                    *(&v1[v9]) = v5;\n
                    *(&v1[16 + v9]) = v5;\n
                    *(&v1[32 + v9]) = v5;\n
                    *(&v1[48 + v9]) = v5;\n
                    *(&v1[64 + v9]) = v5;\n
                    *(&v1[80 + v9]) = v5;\n
                    *(&v1[96 + v9]) = v5;\n
                    *(&v1[112 + v9]) = v5;\n
                    *(&v1[128 + v9]) = v5;\n
                    *(&v1[144 + v9]) = v5;\n
                    *(&v1[160 + v9]) = v5;\n
                    *(&v1[176 + v9]) = v5;\n
                    *(&v1[192 + v9]) = v5;\n
                    *(&v1[208 + v9]) = v5;\n
                    *(&v1[224 + v9]) = v5;\n
                    *(&v1[240 + v9]) = v5;\n
                    v9 += 0x100;\n
                    tmp_21 = v10;\n
                    v10 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v8)\n
            {\n
                v11 = &v1[v9 + 16];\n
                v13 = 0;\n
                do\n
                {\n
                    *((-16 + v11 + v13)) = v5;\n
                    *((v11 + v13)) = v5;\n
                    v13 += 32;\n
                } while (v8 * 32 != v13);\n
            }\n
            if (v2 == a2)\n
                return v1;\n
            if (!(a2 & 24))\n
                goto LABEL_4051b0;\n
        }\n
        v14 = v2;\n
        v2 = a2 & -8;\n
        tmp_20 = InterleaveLOV(tmp_21, tmp_21);\n
        v15 = tmp_20;\n
        do\n
        {\n
            *(&v1[v14]) = v15 / 0x10000000000000000 CONCAT v15 CONCAT v15 CONCAT v15 CONCAT v15;\n
            v14 += 8;\n
        } while (v2 != v14);\n
        if (v2 == a2)\n
            return v1;\n
    }\n
    do\n
    {\n
LABEL_4051b0:\n
        v1[v2] = a1;\n
        v2 += 1;\n
    } while (a2 != v2);\n
    return v1;\n
}\n
", "4215230:sub_4051be": null, "4215232:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_printf(unsigned long a0)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xc0]\n
    unsigned long v5;  // [bp-0xb8]\n
    unsigned long v6;  // [bp-0xb0]\n
    unsigned long v7;  // [bp-0xa8]\n
    unsigned long v8;  // [bp-0xa0]\n
    int v9;  // [bp-0x98]\n
    int v10;  // [bp-0x88]\n
    int v11;  // [bp-0x78]\n
    int v12;  // [bp-0x68]\n
    int v13;  // [bp-0x58]\n
    int v14;  // [bp-0x48]\n
    int v15;  // [bp-0x38]\n
    int v16;  // [bp-0x28]\n
    unsigned long v17;  // [bp+0x8]\n
    unsigned long v18;  // rsi\n
    unsigned long v19;  // rdx\n
    unsigned long v20;  // rcx\n
    unsigned long v21;  // r8\n
    unsigned long v22;  // r9\n
    char v23;  // al\n
    int v24;  // xmm0\n
    int v25;  // xmm1\n
    int v26;  // xmm2\n
    int v27;  // xmm3\n
    int v28;  // xmm4\n
    int v29;  // xmm5\n
    int v30;  // xmm6\n
    int v31;  // xmm7\n
    unsigned long v32;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v18;\n
    v5 = v19;\n
    v6 = v20;\n
    v7 = v21;\n
    v8 = v22;\n
    if (v23)\n
    {\n
        v9 = v24;\n
        v10 = v25;\n
        v11 = v26;\n
        v12 = v27;\n
        v13 = v28;\n
        v14 = v29;\n
        v15 = v30;\n
        v16 = v31;\n
    }\n
    v2 = &v3;\n
    v1 = &v17;\n
    v0 = 206158430216;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v32 = cgc__vsfprintf();\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v32;\n
    }\n
    v32 = cgc__vsfprintf();\n
    return v32;\n
}\n
", "4215444:sub_405294": null, "4215456:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
long long cgc_vprintf()\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return cgc__vsfprintf();\n
    }\n
    return cgc__vsfprintf();\n
}\n
", "4215534:sub_4052ee": null, "4215536:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_fprintf(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xe8]\n
    unsigned long v1;  // [bp-0xe0]\n
    unsigned long v2;  // [bp-0xd8]\n
    char v3;  // [bp-0xc8]\n
    unsigned long v4;  // [bp-0xb8]\n
    unsigned long v5;  // [bp-0xb0]\n
    unsigned long v6;  // [bp-0xa8]\n
    unsigned long v7;  // [bp-0xa0]\n
    int v8;  // [bp-0x98]\n
    int v9;  // [bp-0x88]\n
    int v10;  // [bp-0x78]\n
    int v11;  // [bp-0x68]\n
    int v12;  // [bp-0x58]\n
    int v13;  // [bp-0x48]\n
    int v14;  // [bp-0x38]\n
    int v15;  // [bp-0x28]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
    unsigned long v30;  // rbp, Other Possible Types: unsigned long long\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return v30;\n
    }\n
    v30 = cgc__vsfprintf(a1, &v0, a0, 0);\n
    return v30;\n
}\n
", "4215745:sub_4053c1": null, "4215760:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
long long cgc_vfprintf(struct_0 *a0, unsigned long long a1, unsigned long long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_8 == -1)\n
    {\n
        a0->field_8 = 0;\n
        cgc_fflush(a0);\n
        a0->field_8 = -1;\n
        return cgc__vsfprintf(a1, a2, a0, 0);\n
    }\n
    return cgc__vsfprintf(a1, a2, a0, 0);\n
}\n
", "4215843:sub_405423": null, "4215856:cgc_sprintf": "long long cgc_sprintf(unsigned long long a0, unsigned long long a1)\n
{\n
    unsigned long long v0;  // [bp-0xd8]\n
    unsigned long v1;  // [bp-0xd0]\n
    unsigned long v2;  // [bp-0xc8]\n
    char v3;  // [bp-0xb8]\n
    unsigned long v4;  // [bp-0xa8]\n
    unsigned long v5;  // [bp-0xa0]\n
    unsigned long v6;  // [bp-0x98]\n
    unsigned long v7;  // [bp-0x90]\n
    int v8;  // [bp-0x88]\n
    int v9;  // [bp-0x78]\n
    int v10;  // [bp-0x68]\n
    int v11;  // [bp-0x58]\n
    int v12;  // [bp-0x48]\n
    int v13;  // [bp-0x38]\n
    int v14;  // [bp-0x28]\n
    int v15;  // [bp-0x18]\n
    unsigned long v16;  // [bp+0x8]\n
    unsigned long v17;  // rdx\n
    unsigned long v18;  // rcx\n
    unsigned long v19;  // r8\n
    unsigned long v20;  // r9\n
    char v21;  // al\n
    int v22;  // xmm0\n
    int v23;  // xmm1\n
    int v24;  // xmm2\n
    int v25;  // xmm3\n
    int v26;  // xmm4\n
    int v27;  // xmm5\n
    int v28;  // xmm6\n
    int v29;  // xmm7\n
\n
    v4 = v17;\n
    v5 = v18;\n
    v6 = v19;\n
    v7 = v20;\n
    if (v21)\n
    {\n
        v8 = v22;\n
        v9 = v23;\n
        v10 = v24;\n
        v11 = v25;\n
        v12 = v26;\n
        v13 = v27;\n
        v14 = v28;\n
        v15 = v29;\n
    }\n
    v2 = &v3;\n
    v1 = &v16;\n
    v0 = 206158430224;\n
    return cgc__vsfprintf(a1, &v0, 0, a0);\n
}\n
", "4216009:sub_4054c9": null, "4216016:cgc_vsprintf": "long long cgc_vsprintf(unsigned long long a0, unsigned long long a1, unsigned long long a2)\n
{\n
    return cgc__vsfprintf(a1, a2, 0, a0);\n
}\n
", "4216029:sub_4054dd": null, "4216032:cgc__vsfprintf": "long long cgc__vsfprintf(unsigned long a0, unsigned long a1, unsigned long a2, unsigned long a3)\n
{\n
    int tmp_16;  // tmp #16\n
    int tmp_2;  // tmp #2\n
    unsigned long v0;  // [bp-0x1c8]\n
    int tmp_50;  // tmp #50\n
    int tmp_70;  // tmp #70\n
    int tmp_12;  // tmp #12\n
    char v1;  // [bp-0xa1]\n
    unsigned long v2;  // [bp-0xa0]\n
    unsigned long v3;  // [bp-0x98]\n
    unsigned long v4;  // [bp-0x90]\n
    char v5;  // [bp-0x88]\n
    char v6;  // [bp-0x87]\n
    char v7;  // [bp-0x76]\n
    char v8;  // [bp-0x75]\n
    char v9;  // [bp-0x74]\n
    unsigned long v10;  // [bp-0x40]\n
    unsigned long v11;  // [bp-0x38]\n
    unsigned long v13;  // rbx\n
    unsigned long v14;  // rbp\n
    char v15;  // al, Other Possible Types: unsigned long\n
    unsigned long v16;  // r15\n
    unsigned int v17;  // eax\n
    char v18;  // r13b\n
    unsigned long v19;  // rax\n
    char v20;  // cc_dep1\n
    char v21;  // cc_dep2\n
    unsigned long v22;  // r12\n
    unsigned long v23;  // rcx\n
    unsigned long v24;  // rcx\n
    unsigned long v25;  // rcx\n
    unsigned long v26;  // rcx\n
    unsigned long v27;  // rax\n
    unsigned long v28;  // rsi\n
    unsigned int v29;  // cc_dep1\n
    unsigned long v30;  // rsi\n
    unsigned long v31;  // rdi\n
    unsigned long v32;  // rcx\n
    unsigned long v33;  // rax\n
    unsigned long v34;  // rcx\n
    unsigned long v35;  // r13\n
    unsigned long v36;  // rax\n
    unsigned long v37;  // r13\n
    unsigned long v38;  // rbx\n
    unsigned long v39;  // rcx\n
    unsigned long v40;  // r12\n
    unsigned long v41;  // rbp\n
    unsigned long v42;  // rbp\n
    unsigned long v43;  // rbp\n
    unsigned long v44;  // r14\n
    unsigned long v45;  // rax\n
    unsigned int v46;  // ebp\n
    unsigned long v47;  // r12\n
    unsigned long v48;  // r13\n
    unsigned long v49;  // r8\n
    unsigned long v50;  // r9\n
\n
    v13 = a3;\n
    v4 = a1;\n
    v14 = a0 + 1;\n
    v3 = v14;\n
    v15 = *(a0);\n
    if (!*(a0))\n
    {\n
        v44 = 0;\n
    }\n
    else\n
    {\n
        v16 = a2;\n
        v34 = &v5;\n
        v10 = 20 + -0x1 * &v5;\n
        v44 = 0;\n
        v2 = v13;\n
        while (true)\n
        {\n
            if (v15 != 37)\n
            {\n
                if (v44 < 2147483647)\n
                {\n
                    v1 = v15;\n
                    if (v16)\n
                    {\n
                        a2 = v16;\n
                        cgc_fwrite(&v1, 1, v16);\n
                    }\n
                    if (v13)\n
                        *((v13 + v44)) = v1;\n
                    v14 = v3;\n
                }\n
                else if (v44 == -1)\n
                {\n
                    goto LABEL_405acf;\n
                }\n
                v44 += 1;\n
                v34 = v14 + 1;\n
                v3 = v34;\n
                tmp_16 = *(v14);\n
                v15 = *(v14);\n
                v14 = v34;\n
                if (!(!tmp_16))\n
                    continue;\n
                goto LABEL_405a5a;\n
            }\n
            a0 = v14 + 1;\n
            v3 = a0;\n
            v17 = *(v14);\n
            v18 = 32;\n
            if (v17 == 32)\n
            {\n
LABEL_405583:\n
                if (!(*(a0) - 48 <= 9))\n
                    goto LABEL_4055fa;\n
                goto LABEL_40558b;\n
            }\n
            else if (v17 != 48)\n
            {\n
                if (!v17)\n
                    goto LABEL_405a5a;\n
                v3 = v14;\n
                a0 = v14;\n
                goto LABEL_405583;\n
            }\n
            else\n
            {\n
                v18 = 48;\n
                if (*(a0) - 48 <= 9)\n
                {\n
LABEL_40558b:\n
                    v19 = cgc_strtoul();\n
                    a0 = v3;\n
                    goto LABEL_4055fc;\n
                }\n
                else\n
                {\n
LABEL_4055fa:\n
                    v19 = 0;\n
LABEL_4055fc:\n
                    v34 = a0 + 1;\n
                    v3 = v34;\n
                    a2 = *(a0);\n
                    *(&v13) = 1;\n
                    if (a2 == 104)\n
                    {\n
                        a2 = a0 + 2;\n
                        v20 = *((a0 + 1));\n
                        v21 = 104;\n
                    }\n
                    else if (a2 == 108)\n
                    {\n
                        v20 = *((a0 + 1));\n
                        v21 = 108;\n
                        a2 = a0 + 2;\n
                        *(&v13) = *((a0 + 1)) != 108;\n
                    }\n
                    else\n
                    {\n
                        if (!a2)\n
                            goto LABEL_405a55;\n
                        goto LABEL_405639;\n
                    }\n
                    if (v20 == v21)\n
                        v34 = a2;\n
                    a0 = v34;\n
LABEL_405639:\n
                    v22 = a0 + 1;\n
                    v3 = v22;\n
                    *(&a2) = *(a0);\n
                    v34 = *(a0);\n
                    a1 = v34 - 88;\n
                    if (a1 > 32)\n
                    {\n
                        v13 = v2;\n
                        if (!v34)\n
                        {\n
                            v47 = v22 - v14;\n
                            if (v44 < 2147483647)\n
                            {\n
                                v48 = 2147483647 - v44;\n
                                if (v48 > v47)\n
                                    v48 = v47;\n
                                if (v16)\n
                                    cgc_fwrite(v14, v48, v16);\n
                                if (v13)\n
                                    cgc_memcpy(v13 + v44, v14, v48);\n
                            }\n
                            tmp_2 = v44;\n
                            v44 += v47;\n
                            if (__CFADD__(tmp_2, v47))\n
                                goto LABEL_405acf;\n
                            goto LABEL_405a5a;\n
                        }\n
                        else\n
                        {\n
                            v40 = v22 - v14;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_4059ff;\n
                            v37 = 2147483647 - v44;\n
                            if (v37 > v40)\n
                                v37 = v40;\n
                            if (v16)\n
                                cgc_fwrite(v14, v37, v16);\n
                            if (!v13)\n
                                goto LABEL_4059ff;\n
                            a0 = v13 + v44;\n
                            a1 = v14;\n
                            a2 = v37;\n
                            goto LABEL_4059fa;\n
                        }\n
                    }\n
                    v0 = 4831842305;\n
                    if (((*(&v0 + ((a1 & 63) >> 3)) >> (a1 & 63 & 7)) & 1))\n
                    {\n
                        v11 = v19;\n
                        if (a2 != 100)\n
                        {\n
                            a1 = v4;\n
                            if (v13)\n
                            {\n
                                v25 = *(a1);\n
                                v13 = v2;\n
                                if (v25 > 40)\n
                                {\n
                                    v31 = *((a1 + 8));\n
                                    *((a1 + 8)) = v31 + 8;\n
                                }\n
                                else\n
                                {\n
                                    v31 = v25 + *((a1 + 16));\n
                                    *(a1) = v25 + 8;\n
                                }\n
                                v32 = *(v31);\n
                                if (a2 == 117)\n
                                    a0 = 10;\n
                                else\n
                                    a0 = 16;\n
                                v42 = (a2 == 88 ? \"0123456789abcdef\" : \"0123456789ABCDEF\");\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                if (!v32)\n
                                {\n
                                    v7 = *(v42);\n
                                    a1 = &v7;\n
                                }\n
                                else\n
                                {\n
                                    do\n
                                    {\n
                                        *((a1 - 1)) = *((v42 + ((0 CONCAT v32) /m a0 >> 32)));\n
                                        a1 = &v7;\n
                                        tmp_50 = v32;\n
                                        v32 = (0 CONCAT v32) /m a0;\n
                                    } while (tmp_50 >= a0);\n
                                }\n
                                v41 = &v5;\n
                                cgc_memmove(&v5, a1, v10 + a1);\n
                                goto LABEL_4058ec;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            a2 = v4;\n
                            v41 = &v5;\n
                            if (v13)\n
                            {\n
                                v24 = *(a2);\n
                                if (v24 <= 40)\n
                                {\n
                                    v28 = v24 + *((a2 + 16));\n
                                    *(a2) = v24 + 8;\n
                                    v38 = *(v28);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                        goto LABEL_40580f;\n
                                }\n
                                else\n
                                {\n
                                    v30 = *((a2 + 8));\n
                                    *((a2 + 8)) = v30 + 8;\n
                                    v38 = *(v30);\n
                                    v29 = v38;\n
                                    if (v38 < 0)\n
                                    {\n
LABEL_40580f:\n
                                        v5 = 45;\n
                                        v38 = -(v38);\n
                                        v9 = 0;\n
                                        a1 = &v9;\n
                                        a0 = &v6;\n
                                        do\n
                                        {\n
                                            v39 = 3435973837 * v38 >> 35;\n
                                            a2 = v39 * 2;\n
                                            *((a1 - 1)) = *((4236284 + v38 + -5 * a2));\n
                                            a1 -= 1;\n
                                            tmp_70 = v38;\n
                                            v38 = v39;\n
                                        } while (tmp_70 > 9);\n
                                        v41 = &v5;\n
LABEL_40585d:\n
                                        cgc_memmove(a0, a1, a1 - a0 + 20);\n
                                        v13 = v2;\n
LABEL_4058ec:\n
                                        v45 = cgc_strlen(v41);\n
                                        v40 = v45;\n
                                        v34 = v11;\n
                                        if (v34 > v45)\n
                                        {\n
                                            v46 = v45 - v34;\n
                                            do\n
                                            {\n
                                                if (v44 < 2147483647)\n
                                                {\n
                                                    v1 = v18;\n
                                                    if (v16)\n
                                                    {\n
                                                        a2 = v16;\n
                                                        cgc_fwrite(&v1, 1, v16);\n
                                                    }\n
                                                    if (v13)\n
                                                        *((v13 + v44)) = v1;\n
                                                }\n
                                                else\n
                                                {\n
                                                    if (!(v44 == -1))\n
                                                        continue;\n
                                                }\n
                                                tmp_2 = v44;\n
                                                v44 += 1;\n
                                                tmp_12 = v46 + 1;\n
                                                v46 += 1;\n
                                            } while (!([D] amd64g_calculate_condition(0x4<64>, 0x17<64>, t12, 0x0<64>, ((((t2 + 0x1<64>) <= t2)) ? (0x1<64>) : (0x0<64>)))));\n
                                        }\n
                                        if (!(v44 < 2147483647))\n
                                            goto LABEL_4059ff;\n
                                        v43 = 2147483647 - v44;\n
                                        if (v43 > v45)\n
                                            v43 = v45;\n
                                        if (v16)\n
                                        {\n
                                            a1 = v43;\n
                                            a2 = v16;\n
                                            cgc_fwrite(&v5, v43, v16);\n
                                        }\n
                                        if (!v13)\n
                                            goto LABEL_4059ff;\n
                                        a0 = v13 + v44;\n
                                        a1 = &v5;\n
LABEL_4059f7:\n
                                        a2 = v43;\n
LABEL_4059fa:\n
                                        cgc_memcpy(a0, a1, a2);\n
LABEL_4059ff:\n
                                        tmp_2 = v44;\n
                                        v44 += v40;\n
                                        if (__CFADD__(tmp_2, v40))\n
                                            goto LABEL_405acf;\n
                                        goto LABEL_405a08;\n
                                    }\n
                                }\n
                                v8 = 0;\n
                                a1 = &v8;\n
                                a0 = &v5;\n
                                if (!v29)\n
                                {\n
                                    v7 = 48;\n
                                    a0 = &v5;\n
                                    a1 = &v7;\n
                                    goto LABEL_40585d;\n
                                }\n
                            }\n
                        }\n
LABEL_405a55:\n
                        v13 = v2;\n
LABEL_405a5a:\n
                        if (v44 < 2147483647)\n
                            break;\n
                        if (v44 == -1)\n
                        {\n
LABEL_405acf:\n
                            cgc__terminate(a0);\n
                            return cgc_realloc(a0, a1, a2, v34, v49, v50);\n
                        }\n
                        return v44;\n
                    }\n
                    else if (a1 == 11)\n
                    {\n
                        a2 = v4;\n
                        v23 = *(a2);\n
                        if (v23 <= 40)\n
                        {\n
                            v27 = v23 + *((a2 + 16));\n
                            v34 = v23 + 8;\n
                            *(a2) = v34;\n
                            v13 = v2;\n
                            if (!(v44 < 2147483647))\n
                                goto LABEL_405a40;\n
                            goto LABEL_4057c6;\n
                        }\n
                        else\n
                        {\n
                            v27 = *((a2 + 8));\n
                            v34 = v27 + 8;\n
                            *((a2 + 8)) = v34;\n
                            v13 = v2;\n
                            if (v44 < 2147483647)\n
                            {\n
LABEL_4057c6:\n
                                v1 = *(v27);\n
                                if (v16)\n
                                {\n
                                    a2 = v16;\n
                                    cgc_fwrite(&v1, 1, v16);\n
                                }\n
                                if (v13)\n
                                {\n
                                    *((v13 + v44)) = v1;\n
                                    goto LABEL_405a4a;\n
                                }\n
                            }\n
                            else\n
                            {\n
LABEL_405a40:\n
                                if (v44 == -1)\n
                                    goto LABEL_405acf;\n
LABEL_405a4a:\n
                                v44 += 1;\n
LABEL_405a08:\n
                                v15 = v3;\n
                                v14 = v15 + 1;\n
                                v3 = v14;\n
                                *(&v15) = *(v15);\n
                                if (!*(&v15))\n
                                    goto LABEL_405a5a;\n
                            }\n
                        }\n
                    }\n
                    else if (a1 == 27)\n
                    {\n
                        a2 = v4;\n
                        v26 = *(a2);\n
                        if (v26 > 40)\n
                        {\n
                            v33 = *((a2 + 8));\n
                            v34 = v33 + 8;\n
                            *((a2 + 8)) = v34;\n
                        }\n
                        else\n
                        {\n
                            v33 = v26 + *((a2 + 16));\n
                            v34 = v26 + 8;\n
                            *(a2) = v34;\n
                        }\n
                        v13 = v2;\n
                        v35 = *(v33);\n
                        v36 = cgc_strlen(v35);\n
                        v40 = v36;\n
                        if (!(v44 < 2147483647))\n
                            goto LABEL_4059ff;\n
                        v43 = 2147483647 - v44;\n
                        if (v43 > v36)\n
                            v43 = v36;\n
                        if (v16)\n
                            cgc_fwrite(v35, v43, v16);\n
                        if (!v13)\n
                            goto LABEL_4059ff;\n
                        a0 = v13 + v44;\n
                        a1 = v35;\n
                        goto LABEL_4059f7;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v13)\n
        *((v13 + v44)) = 0;\n
    return v44;\n
}\n
", "4216104:sub_405528": null, "4216225:sub_4055a1": null, "4217098:sub_40590a": null, "4217175:sub_405957": null, "4217568:cgc_realloc": "extern unsigned int g_heap;\n
\n
long long cgc_realloc(void* a0, unsigned long long a1)\n
{\n
    return cgc_malloc_realloc(&g_heap, a0, a1);\n
}\n
", "4217586:sub_405af2": null, "4217600:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_strcasecmp(char *a0, char *a1)\n
{\n
    char *v1;  // r14, Other Possible Types: unsigned long\n
    void* v2;  // al, Other Possible Types: unsigned long\n
    unsigned long long v3;  // rax\n
    struct_0 *v5;  // rbx, Other Possible Types: unsigned long\n
\n
    v1 = a1;\n
    v2 = *(a0);\n
    if (*(a0))\n
    {\n
        v5 = a0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v3 = cgc_tolower(v2);\n
            v2 = cgc_tolower(*(v1));\n
            if (v3 != v2)\n
            {\n
                *(&v2) = *((v5 - 1));\n
                return v2 - *(v1);\n
            }\n
            v1 += 1;\n
            v2 = *(v5);\n
            v5 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4217697:sub_405b61": null, "4217712:cgc_strcasestr": "long long cgc_strcasestr(char a0[2], unsigned long long a1)\n
{\n
    unsigned long long v2;  // r15\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    if (a0[0])\n
    {\n
        v2 = cgc_strlen(a1);\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strncasecmp(v5, a1, v2))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4217808:cgc_strchr": "long long cgc_strchr(char *a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // cl, Other Possible Types: unsigned long, char\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // rax\n
\n
    v1 = *(a0);\n
    v2 = 0;\n
    if (*(a0))\n
    {\n
        do\n
        {\n
            if (v1 == a1)\n
                return &a0[v2];\n
            v2 = v2 + 1;\n
            v1 = a0[v2];\n
        } while (v1);\n
    }\n
    v4 = (!a1 ? 0 : &a0[v2]);\n
    return v4;\n
}\n
", "4217865:sub_405c09": null, "4217872:cgc_strcmp": "long long cgc_strcmp(char *a0, char *a1)\n
{\n
    void* v1;  // al, Other Possible Types: unsigned long\n
    char *v2;  // rdi, Other Possible Types: unsigned long\n
    char v3;  // cl\n
\n
    v1 = *(a0);\n
    if (*(a0))\n
    {\n
        v2 = a0 + 1;\n
        do\n
        {\n
            v3 = *(a1);\n
            if (!v3)\n
                return v1 - *(a1);\n
            if (v1 != v3)\n
                return v1 - *(a1);\n
            a1 += 1;\n
            v1 = *(v2);\n
            v2 += 1;\n
        } while (v1);\n
    }\n
    return 0 - *(a1);\n
}\n
", "4217925:sub_405c45": null, "4217936:cgc_strcpy": "long long cgc_strcpy(char *a0, char *a1)\n
{\n
    char v1;  // cl\n
    char *v2;  // rdx, Other Possible Types: unsigned long\n
    char *v3;  // rsi, Other Possible Types: unsigned long\n
\n
    v1 = *(a1);\n
    v2 = a0;\n
    if (*(a1))\n
    {\n
        v3 = a1 + 1;\n
        v2 = a0;\n
        do\n
        {\n
            *(v2) = v1;\n
            v2 += 1;\n
            v1 = *(v3);\n
            v3 += 1;\n
        } while (v1);\n
    }\n
    *(v2) = 0;\n
    return a0;\n
}\n
", "4217989:sub_405c85": null, "4218000:cgc_strdup": "long long cgc_strdup(unsigned int a0)\n
{\n
    char *v1;  // r15\n
    unsigned long v2;  // rax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, a0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4218061:sub_405ccd": null, "4218064:cgc_strlen": "long long cgc_strlen(char *a0)\n
{\n
    void* v1;  // rcx, Other Possible Types: unsigned long\n
    char v2;  // cc_dep1\n
\n
    if (!*(a0))\n
        return 0;\n
    v1 = 0;\n
    do\n
    {\n
        v2 = a0[1 + v1];\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4218098:sub_405cf2": null, "4218112:cgc_strncasecmp": "long long cgc_strncasecmp(char a0[2], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14, Other Possible Types: unsigned long\n
    unsigned long long v4;  // r15\n
    unsigned long long v5;  // rax\n
    char v6[2];  // rbx, Other Possible Types: unsigned long\n
    unsigned long v7;  // rax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v6 = a0;\n
    v4 = &a0[a2];\n
    v2 = a0[0];\n
    if (a0[0])\n
    {\n
        while (*(v3))\n
        {\n
            v5 = cgc_tolower(v2);\n
            if (v5 != cgc_tolower(*(v3)))\n
                break;\n
            if (v6 >= v4)\n
                break;\n
            v3 += 1;\n
            v2 = *((v6 + 1));\n
            v6 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v7 = (v6 == v4 ? *(v6) - *(v3) : 0);\n
    return v7;\n
}\n
", "4218223:sub_405d6f": null, "4218224:cgc_strncpy": "long long cgc_strncpy(char *a0, char *a1, unsigned long a2)\n
{\n
    int tmp_21;  // tmp #21\n
    char *v1;  // rax\n
    char v2;  // cl\n
    char *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v4;  // rdi\n
    unsigned long v5;  // r8, Other Possible Types: unsigned long long\n
    unsigned long v6;  // r10\n
    char *v7;  // r10\n
    unsigned long v8;  // rdi\n
    unsigned long long v9;  // rcx\n
    unsigned long long v10;  // r11\n
    unsigned long long v11;  // r9\n
    unsigned long v12;  // rsi\n
    unsigned long v13;  // r11, Other Possible Types: unsigned long long\n
    uint128_t *v14;  // rcx\n
    unsigned long v16;  // rsi\n
    char *v17;  // rsi, Other Possible Types: unsigned long\n
    unsigned long long v18;  // r8\n
    unsigned long long v19;  // rcx\n
    unsigned long v20;  // rcx, Other Possible Types: unsigned long long\n
\n
    v1 = a0;\n
    v2 = *(a1);\n
    v4 = 0;\n
    v3 = v1;\n
    if (*(a1) && a2)\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1[v4] = v2;\n
            v2 = a1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
            if (v4 >= a2)\n
                break;\n
        }\n
        v3 = &v1[v4];\n
    }\n
    if (v4 >= a2)\n
        return v1;\n
    v5 = 1 + v3 - v1;\n
    v6 = (!(a2 <= v5) ? v5 : a2);\n
    v7 = &v1[v6 + -1 * v3];\n
    if (v7 < 8)\n
    {\n
LABEL_405dd4:\n
        v17 = v3;\n
        goto LABEL_405f06;\n
    }\n
    else\n
    {\n
        if (v7 < 32)\n
        {\n
            v8 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7 & -0x20;\n
            v9 = v8 - 32;\n
            v10 = (v9 >> 5) + 1;\n
            v11 = v10 & 7;\n
            if (v9 < 224)\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                v13 = v10 & -8;\n
                v12 = 0;\n
                do\n
                {\n
                    *((v3 + v12)) = 0;\n
                    *((v3 + v12 + 16)) = 0;\n
                    *((v3 + v12 + 32)) = 0;\n
                    *((v3 + v12 + 48)) = 0;\n
                    *((v3 + v12 + 64)) = 0;\n
                    *((v3 + v12 + 80)) = 0;\n
                    *((v3 + v12 + 96)) = 0;\n
                    *((v3 + v12 + 112)) = 0;\n
                    *((v3 + v12 + 128)) = 0;\n
                    *((v3 + v12 + 144)) = 0;\n
                    *((v3 + v12 + 160)) = 0;\n
                    *((v3 + v12 + 176)) = 0;\n
                    *((v3 + v12 + 192)) = 0;\n
                    *((v3 + v12 + 208)) = 0;\n
                    *((v3 + v12 + 224)) = 0;\n
                    *((v3 + v12 + 240)) = 0;\n
                    v12 += 0x100;\n
                    tmp_21 = v13;\n
                    v13 -= 8;\n
                } while (tmp_21 != 8);\n
            }\n
            if (v11)\n
            {\n
                v14 = v12 + v3 + 16;\n
                v16 = 0;\n
                do\n
                {\n
                    *((-16 + v14 + v16)) = 0;\n
                    *((v14 + v16)) = 0;\n
                    v16 += 32;\n
                } while (v11 * 32 != v16);\n
            }\n
            if (v7 == v8)\n
                return v1;\n
            if (!(v7 & 24))\n
            {\n
                v3 += v8;\n
                goto LABEL_405dd4;\n
            }\n
        }\n
        if (a2 > v5)\n
            v5 = a2;\n
        v18 = &v1[v5 + -1 * v3];\n
        v19 = v18 & -8;\n
        v17 = v3 + v19;\n
        do\n
        {\n
            *((v3 + v8)) = 0;\n
            v8 += 8;\n
        } while (v19 != v8);\n
        if (v18 == v19)\n
            return v1;\n
LABEL_405f06:\n
        v20 = v17 - v1;\n
        do\n
        {\n
            *(v17) = 0;\n
            v17 += 1;\n
            v20 += 1;\n
        } while (v20 < a2);\n
        return v1;\n
    }\n
}\n
", "4218666:sub_405f2a": null, "4218672:cgc_strndup": "long long cgc_strndup(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long long v1;  // rax\n
    char *v2;  // rbx\n
    unsigned long v3;  // rax\n
\n
    v1 = cgc_strlen(a0);\n
    v2 = (!(v1 <= a1) ? v1 : a1);\n
    v3 = cgc_malloc(v2 + 1);\n
    if (v3)\n
    {\n
        cgc_memcpy(v3, a0, v2);\n
        v2[v3] = 0;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4218743:sub_405f77": null, "4218752:cgc_strsep": "long long cgc_strsep(struct struct_0 **a0, char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r15\n
    unsigned long v4;  // rbx\n
    unsigned long long v5;  // rax\n
    char *v6;  // rax, Other Possible Types: unsigned long\n
    char *v7;  // rax, Other Possible Types: unsigned long long, unsigned long\n
    char *v8;  // rbx\n
    void* v9;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = *(a0);\n
    if (!v3)\n
        return *(a0);\n
    v2 = *(v3);\n
    v4 = 0;\n
    if (!*(v3))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = cgc_strchr(a1, v2);\n
            if (v5)\n
            {\n
                v7 = &v3[v4];\n
                if (!v3[v4])\n
                    goto LABEL_405fc5;\n
                v8 = v4 + 1;\n
                v9 = v8 + v3;\n
                goto LABEL_405fc7;\n
            }\n
            v4 = v4 + 1;\n
            v2 = v3[v4];\n
        } while (v2);\n
        v6 = v4;\n
    }\n
    v7 = &v3[v6];\n
LABEL_405fc5:\n
    v9 = 0;\n
LABEL_405fc7:\n
    *(a0) = v9;\n
    *(v7) = 0;\n
    return *(a0);\n
}\n
", "4218865:sub_405ff1": null, "4218880:cgc_strstr": "long long cgc_strstr(char a0[2], char *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    char v3[2];  // rbp, Other Possible Types: unsigned long\n
    unsigned long v4;  // rax\n
    char v5[2];  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    if (a0[0])\n
    {\n
        v3 = 1;\n
        v5 = a0;\n
        do\n
        {\n
            if (!cgc_strcmp(v5, a1))\n
                return v5;\n
            v4 = v3;\n
            v5 = &a0[v3];\n
            v3 = v3 + 1;\n
        } while (a0[v4]);\n
    }\n
    return 0;\n
}\n
", "4218959:sub_40604f": null, "4218960:cgc_strtol": "long long cgc_strtol(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    unsigned int v25;  // ebp\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // edx\n
    unsigned long v31;  // rcx\n
    unsigned long v32;  // rax, Other Possible Types: unsigned long long\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_406228;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_406111;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_406111:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_406150:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_406259;\n
LABEL_406166:\n
                *(&v18) = *(v16);\n
LABEL_406168:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_406175:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 > 2147483647)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_406228;\n
                }\n
LABEL_406259:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_406228;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_406228;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_406175;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_406150;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_406146:\n
            v19 = 16;\n
            goto LABEL_406166;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_406166;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_406168;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_406146;\n
LABEL_406228:\n
    v31 = (!v25 ? -0x80000000 : -(v26));\n
    v32 = (!v25 ? 2147483647 : v26);\n
    if (v30 < 0)\n
        v32 = v31;\n
    return v32;\n
}\n
", "4219305:sub_4061a9": null, "4219503:sub_40626f": null, "4219504:cgc_strtoul": "long long cgc_strtoul(char a0[2], unsigned long long *a1, unsigned long a2)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned long v1;  // [bp-0x40]\n
    char v2[2];  // [bp-0x38]\n
    unsigned long v3;  // [bp-0x30]\n
    unsigned long v4;  // [bp-0x28]\n
    unsigned long v5;  // [bp-0x20]\n
    unsigned long v6;  // [bp-0x18]\n
    unsigned long v7;  // [bp-0x10]\n
    unsigned long v9;  // r15\n
    unsigned long v10;  // r14\n
    unsigned long v11;  // r13\n
    unsigned long v12;  // r12\n
    unsigned long v13;  // rbx\n
    char v14[2];  // rbp\n
    char v16[2];  // rbx, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v17;  // rdi\n
    unsigned long v18;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v19;  // r13, Other Possible Types: unsigned long\n
    unsigned long long v20;  // rax\n
    unsigned long v21;  // rdi\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v24;  // rdi\n
    void* v25;  // rbp, Other Possible Types: unsigned long, unsigned long long, unsigned int\n
    void* v26;  // r12, Other Possible Types: unsigned long, unsigned long long\n
    unsigned int v27;  // r14d\n
    unsigned long long *v28;  // r15, Other Possible Types: unsigned long\n
    char v29[2];  // rax, Other Possible Types: unsigned long\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned long v32;  // rax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = v12;\n
    v3 = v13;\n
    v19 = a2;\n
    v28 = a1;\n
    v14 = a0;\n
    v18 = cgc_isspace(a0[0]);\n
    v16 = v14;\n
    *(&v2) = v14;\n
    if (v18)\n
    {\n
        v16 = v14;\n
        do\n
        {\n
            if (!*(v16))\n
            {\n
                v25 = 0;\n
                v30 = 1;\n
                v27 = 1;\n
                v26 = 0;\n
                if (!a1)\n
                    goto LABEL_406448;\n
            }\n
            v17 = *((v16 + 1));\n
            v16 += 1;\n
            v18 = cgc_isspace(v17);\n
        } while (v18);\n
    }\n
    if (*(v16) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v16) == 43)\n
            v16 += 1;\n
        if (!a2)\n
            goto LABEL_406331;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v0 = -1;\n
        if (!a2)\n
        {\n
LABEL_406331:\n
            *(&v18) = *(v16);\n
            if (*(v16) != 48)\n
            {\n
LABEL_406370:\n
                v18 = cgc_isdigit(v18);\n
                v19 = 10;\n
                if (!v18)\n
                    goto LABEL_406484;\n
LABEL_406386:\n
                *(&v18) = *(v16);\n
LABEL_406388:\n
                if (v18)\n
                {\n
                    v1 = a1;\n
LABEL_406395:\n
                    v26 = 0;\n
                    v25 = 0;\n
                    v27 = 1;\n
                    do\n
                    {\n
                        v20 = cgc_isdigit(v18);\n
                        v21 = *(v16);\n
                        if (v20)\n
                        {\n
                            v22 = v21 - 48;\n
                            if (v22 >= v19)\n
                                break;\n
                            continue;\n
                        }\n
                        else\n
                        {\n
                            v24 = *(v16);\n
                            if (cgc_islower(v21))\n
                            {\n
                                v22 = v24 - 87;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                            else\n
                            {\n
                                if (!cgc_isupper(v24))\n
                                    break;\n
                                v22 = *(v16) - 55;\n
                                if (v22 >= v19)\n
                                    break;\n
                                continue;\n
                            }\n
                        }\n
                        v26 = v22 + v19 * v26;\n
                        if (v26 >> 32)\n
                            v25 = 1;\n
                        v18 = *((v16 + 1));\n
                        v16 += 1;\n
                        v27 = 0;\n
                    } while (v18);\n
                    v28 = v1;\n
                    v30 = v0;\n
                    if (!v28)\n
                        goto LABEL_406448;\n
                }\n
LABEL_406484:\n
                v25 = 0;\n
                v27 = 1;\n
                v26 = 0;\n
                v30 = v0;\n
                if (!a1)\n
                    goto LABEL_406448;\n
                v29 = v2;\n
                if (!v27)\n
                    v29 = v16;\n
                *(v28) = v29;\n
                goto LABEL_406448;\n
            }\n
            else\n
            {\n
                *(&v18) = *((v16 + 1));\n
                if ((v18 & 248) == 48)\n
                {\n
                    v1 = a1;\n
                    v16 += 1;\n
                    v19 = 8;\n
                    goto LABEL_406395;\n
                }\n
                v18 = cgc_tolower(v18);\n
                if (v18 != 120)\n
                {\n
                    *(&v18) = *(v16);\n
                    goto LABEL_406370;\n
                }\n
                else\n
                {\n
                    v16 += 2;\n
                }\n
            }\n
LABEL_406366:\n
            v19 = 16;\n
            goto LABEL_406386;\n
        }\n
    }\n
    if (!(a2 == 16))\n
        goto LABEL_406386;\n
    *(&v18) = *(v16);\n
    v19 = 16;\n
    if (!(*(v16) == 48))\n
        goto LABEL_406388;\n
    v16 += (cgc_tolower(*((v16 + 1))) == 120) * 2;\n
    goto LABEL_406366;\n
LABEL_406448:\n
    if (v30 < 0)\n
    {\n
        v31 = (v26 == -0x80000000 ? 1 : v25);\n
        if (v26 <= 2147483647)\n
            v31 = v25;\n
        v26 = -(v26);\n
        v25 = v31;\n
    }\n
    v32 = (!v25 ? 4294967295 : v26);\n
    return v32;\n
}\n
", "4219849:sub_4063c9": null, "4220058:sub_40649a": null, "4220064:cgc_free_object": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
} struct_1;\n
\n
extern char g_40a410;\n
\n
long long cgc_free_object(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
    unsigned long long v5;  // rax\n
    struct struct_0 **v6;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    switch (a0->field_0)\n
    {\n
    case 3: case 4:\n
        cgc_free(*((a0 + 8)));\n
    case 6:\n
        cgc_tr_destroy(*((a0 + 8)));\n
        goto LABEL_406500;\n
    case 7:\n
        if (*((a0 + 16)))\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                a0 = *((*((a0 + 8)) + v6 * 8));\n
                cgc_free_object(a0);\n
                v6 += 1;\n
            } while (*((a0 + 16)) > v6);\n
        }\n
    case 8:\n
        return v5;\n
    default:\n
LABEL_406500:\n
        return cgc_free(a0);\n
    }\n
}\n
", "4220183:sub_406517": null, "4220192:cgc_send_response": "extern void* cgc_stdout;\n
\n
long long cgc_send_response(unsigned long a0)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    v0 = a0;\n
    cgc_fwrite(&v0, 8, cgc_stdout);\n
    if (v0 == 1347610402002134800)\n
    {\n
        cgc_exit();\n
        return v0;\n
    }\n
    return v0;\n
}\n
", "4220245:sub_406555": null, "4220256:cgc_pack_map_item": "long long cgc_pack_map_item(unsigned long long a0[3], unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    cgc_xpk_pack_str(a1, a0[0]);\n
    return cgc_pack_object(a1, a0[2]);\n
}\n
", "4220296:sub_406588": null, "4220304:cgc_pack_object": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_pack_object(unsigned long long a0, struct_0 *a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    void* v3;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v4;  // r12\n
    unsigned long long *v7;  // rbx, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a1->field_0;\n
    switch (v3)\n
    {\n
    case 0:\n
        return cgc_xpk_pack_int(a0, a1->field_8);\n
    case 1:\n
        return cgc_xpk_pack_uint(a0, a1->field_8);\n
    case 2:\n
        return cgc_xpk_pack_bool(a0, a1->field_8);\n
    case 3:\n
        return cgc_xpk_pack_str(a0, a1->field_8);\n
    case 4:\n
        return cgc_xpk_pack_bytes(a0, a1->field_8, v4->field_10);\n
    case 5:\n
        return cgc_xpk_pack_nil(a0);\n
    case 6:\n
        v3 = cgc_xpk_pack_map(a0, a1->field_10);\n
        if (v3)\n
            return v3;\n
        cgc_tr_apply(a1->field_8, cgc_pack_map_item, a0);\n
        break;\n
    case 7:\n
        v3 = cgc_xpk_pack_array(a0, a1->field_10);\n
        if (v3)\n
        {\n
            return v3;\n
        }\n
        else if (a1->field_10)\n
        {\n
            v7 = 0;\n
            do\n
            {\n
                cgc_pack_object(a0, a1->field_8[v7].field_0);\n
                v7 += 1;\n
            } while (a1->field_10 > v7);\n
        }\n
    case 8:\n
        return cgc_xpk_pack_none(a0);\n
    default:\n
        return a1->field_0;\n
    }\n
    return 0;\n
}\n
", "4220632:sub_4066d8": null, "4220640:cgc_unpack_object": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
long long cgc_unpack_object(unsigned long long a0, unsigned long long *a1)\n
{\n
    char v0;  // [bp-0x50]\n
    char v1;  // [bp-0x41]\n
    struct_2 *v2;  // [bp-0x40]\n
    void* v3;  // [bp-0x38]\n
    void* v5;  // rax, Other Possible Types: unsigned long\n
    struct_0 *v6;  // rax\n
    struct_0 *v7;  // r15\n
    unsigned long v8;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rax\n
    unsigned long long v10;  // rax\n
    void* v11;  // r13, Other Possible Types: unsigned long\n
    void* v12;  // r12, Other Possible Types: unsigned long\n
    unsigned long long *v13;  // rbp, Other Possible Types: unsigned long\n
    struct_2 *v14;  // rbp\n
\n
    v5 = cgc_xpk_next_type();\n
    if (v5)\n
        return v5;\n
    v6 = cgc_malloc(24);\n
    v7 = v6;\n
    *(&v6) = v1 - 128;\n
    switch (v1)\n
    {\n
    case 128: case 208:\n
        v5 = cgc_xpk_unpack_str(a0, &v0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 3;\n
        v9 = cgc_malloc(*(&v0) + 1);\n
        v7->field_8 = v9;\n
        v5 = cgc_xpk_read(a0, v9, *(&v0));\n
        if (v5)\n
            return v5;\n
        *(&v7->field_8->field_0 + *(&v0)) = 0;\n
        break;\n
        break;\n
    case 161: case 162:\n
        v5 = cgc_xpk_unpack_bool(a0, &v0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 2;\n
        v8 = v0;\n
        goto LABEL_406763;\n
    case 163:\n
        v5 = cgc_xpk_unpack_bytes(a0, &v0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 4;\n
        v10 = cgc_malloc(*(&v0));\n
        v7->field_8 = v10;\n
        v5 = cgc_xpk_read(a0, v10, *(&v0));\n
        if (v5)\n
            return v5;\n
        *(&v7[1].field_0) = *(&v0);\n
        goto LABEL_40676f;\n
    case 164:\n
        v5 = cgc_xpk_unpack_array(a0, &v0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 7;\n
        v7->field_8 = cgc_malloc(*(&v0) * 8);\n
        *(&v7[1].field_0) = 0;\n
        if (*(&v0))\n
        {\n
            v13 = 0;\n
            do\n
            {\n
                v2 = 0;\n
                v5 = cgc_unpack_object(a0, &v2);\n
                if (v5)\n
                    return v5;\n
                v7->field_8[v13].field_0 = v2;\n
                *(&v7[1].field_0) = *(&v7[1].field_0) + 1;\n
                v13 += 1;\n
            } while (*(&v0) > v13);\n
        }\n
        goto LABEL_40676f;\n
    case 165:\n
        v5 = cgc_xpk_unpack_map(a0, &v0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 6;\n
        *(&v7[1].field_0) = 0;\n
        if (!*(&v0))\n
        {\n
            v7->field_8 = 0;\n
            goto LABEL_40676f;\n
        }\n
        else\n
        {\n
            v11 = 0;\n
            v12 = 0;\n
            do\n
            {\n
                v2 = 0;\n
                v3 = 0;\n
                v5 = cgc_unpack_object(a0, &v2);\n
                if (v5)\n
                    return v5;\n
                v5 = cgc_unpack_object(a0, &v3);\n
                if (v5)\n
                    return v5;\n
                v14 = v2;\n
                if (v14->field_0 != 3)\n
                {\n
LABEL_406772:\n
                    return 0;\n
                }\n
                v12 = cgc_tr_insert(v12, v14->field_8, v3);\n
                *(&v7[1].field_0) = *(&v7[1].field_0) + 1;\n
                cgc_free_object(v14);\n
                v11 += 1;\n
            } while (*(&v0) > v11);\n
            v7->field_8 = v12;\n
            goto LABEL_40676f;\n
        }\n
    case 166:\n
        v5 = cgc_xpk_unpack_nil(a0);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = 5;\n
        *(&v7->field_8) = 0;\n
        goto LABEL_40676f;\n
    case 176: case 177: case 178: case 179: case 192: case 193: case 194: case 195: case 224: case 256:\n
        v5 = cgc_xpk_unpack_int(a0, &v0, &v2);\n
        if (v5)\n
            return v5;\n
        v7->field_0 = !v2;\n
        v8 = *(&v0);\n
        goto LABEL_406763;\n
    default:\n
LABEL_40676f:\n
        *(a1) = v7;\n
        goto LABEL_406772;\n
    }\n
LABEL_406763:\n
    v7->field_8 = v8;\n
    *(&v7[1].field_0) = 0;\n
    goto LABEL_40676f;\n
}\n
", "4221358:sub_4069ae": null, "4221360:cgc_add_to_gmap": "extern unsigned long long cgc_g_map;\n
\n
long long cgc_add_to_gmap(unsigned long long a0[3])\n
{\n
    unsigned long v1;  // rax\n
\n
    cgc_g_map = cgc_tr_insert(cgc_g_map, a0[0], a0[2]);\n
    return v1;\n
}\n
", "4221392:cgc_create_store_out": "long long cgc_create_store_out(unsigned long long *a0, unsigned long long a1)\n
{\n
    return cgc_xpk_pack_str(a1, *(a0));\n
}\n
", "4221406:sub_4069de": null, "4221408:cgc_handle_store": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern struct_1 *cgc_g_ctx;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_handle_store(unsigned long long a0)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned long long\n
    struct_0 *v1;  // [bp-0x20]\n
    struct_0 *v3;  // r14\n
    unsigned long long v4;  // r15\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_xpk_reset(cgc_g_ctx, a0);\n
    v1 = 0;\n
    if (cgc_fread(cgc_g_ctx->field_0, a0, cgc_stdin) == a0 && !cgc_unpack_object(cgc_g_ctx, &v1))\n
    {\n
        v3 = v1;\n
        if (v3->field_0 != 6)\n
        {\n
            cgc_free_object(v3);\n
        }\n
        else\n
        {\n
            v4 = v3->field_8;\n
            cgc_tr_apply(v4, cgc_add_to_gmap, 0);\n
            cgc_xpk_reset(cgc_g_ctx, a0);\n
            cgc_xpk_pack_array(cgc_g_ctx, v3->field_10);\n
            cgc_tr_apply(v4, cgc_create_store_out, cgc_g_ctx);\n
            cgc_free_object(v3);\n
            v0 = 0;\n
            cgc_fwrite(&v0, 8, cgc_stdout);\n
            if (v0 == 1347610402002134800)\n
                cgc_exit();\n
            v5 = cgc_fwrite(cgc_g_ctx->field_0, cgc_g_ctx->field_8, cgc_stdout);\n
            return v5;\n
        }\n
    }\n
    v0 = 1347610402002134800;\n
    v5 = cgc_fwrite(&v0, 8, cgc_stdout);\n
    if (v0 == 1347610402002134800)\n
    {\n
        v5 = cgc_exit();\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4221752:sub_406b38": null, "4221760:cgc_handle_lookup": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern struct_3 *cgc_g_ctx;\n
extern unsigned long long cgc_g_map;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern char obj_none;\n
\n
long long cgc_handle_lookup(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x58], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    struct_1 *v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x38]\n
    unsigned long long v6;  // r15\n
    struct_1 *v7;  // r14\n
    struct struct_0 **v8;  // r12\n
    struct_0 *v9;  // rax\n
    struct_0 *v10;  // rcx\n
    unsigned long long v11;  // rsi\n
    unsigned long v12;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // rdi\n
    unsigned long long v14;  // rdx\n
    void* v15;  // r13, Other Possible Types: unsigned long\n
    unsigned long v16;  // rbx\n
    unsigned long v17;  // rax, Other Possible Types: unsigned long long\n
\n
    v6 = a0;\n
    cgc_xpk_reset(cgc_g_ctx, a0);\n
    v3 = 0;\n
    if (cgc_fread(cgc_g_ctx->field_0, v6, cgc_stdin) != v6)\n
    {\n
        cgc_tr_destroy(0);\n
        goto LABEL_406c6e;\n
    }\n
    if (!(!cgc_unpack_object(cgc_g_ctx, &v3)))\n
        goto LABEL_406c6e;\n
    v7 = v3;\n
    if (v7->field_0 != 7)\n
    {\n
        v15 = 0;\n
    }\n
    else\n
    {\n
        if (!v7->field_10)\n
        {\n
            v15 = 0;\n
        }\n
        else\n
        {\n
            v8 = v7->field_8;\n
            v16 = 0;\n
            v15 = 0;\n
            do\n
            {\n
                v9 = v8[v16];\n
                if (v9->field_0 != 3)\n
                {\n
                    cgc_tr_destroy(v15);\n
                    if (!v7)\n
                        goto LABEL_406c6e;\n
LABEL_406c66:\n
                    cgc_free_object(v7);\n
LABEL_406c6e:\n
                    v0 = 1347610402002134800;\n
                    v17 = cgc_fwrite(&v0, 8, cgc_stdout);\n
                    if (v0 == 1347610402002134800)\n
                    {\n
                        v17 = cgc_exit();\n
                        return v17;\n
                    }\n
                    return v17;\n
                }\n
                v12 = cgc_tr_find(cgc_g_map, v9->field_8);\n
                v10 = v8[v16];\n
                v11 = v10->field_8;\n
                if (!v12)\n
                    v12 = &obj_none;\n
                v13 = v15;\n
                v14 = v12;\n
                v15 = cgc_tr_insert();\n
                v16 += 1;\n
            } while (v7->field_10 > v16);\n
        }\n
        cgc_xpk_reset(cgc_g_ctx, v6);\n
        v0 = 6;\n
        v1 = v15;\n
        v2 = v7->field_10;\n
        if (!cgc_pack_object(cgc_g_ctx, &v0))\n
        {\n
            cgc_tr_destroy(v15);\n
            cgc_free_object(v7);\n
            v4 = 0;\n
            cgc_fwrite(&v4, 8, cgc_stdout);\n
            if (v4 == 1347610402002134800)\n
                cgc_exit();\n
            v17 = cgc_fwrite(cgc_g_ctx->field_0, cgc_g_ctx->field_8, cgc_stdout);\n
            return v17;\n
        }\n
    }\n
    cgc_tr_destroy(v15);\n
    goto LABEL_406c66;\n
}\n
", "4222246:sub_406d26": null, "4222256:cgc_handle_delete": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    char *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern struct_4 *cgc_g_ctx;\n
extern unsigned long long cgc_g_map;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern char obj_none;\n
\n
long long cgc_handle_delete(unsigned long long a0)\n
{\n
    unsigned long long v0;  // [bp-0x58], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x50]\n
    unsigned long v2;  // [bp-0x48]\n
    struct_3 *v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x38]\n
    unsigned long long v6;  // r12\n
    struct_1 *v7;  // r14\n
    struct struct_0 **v8;  // r13\n
    unsigned long v9;  // rbx\n
    struct_0 *v10;  // rax\n
    unsigned long long v11;  // rsi\n
    unsigned long long v12;  // rcx\n
    unsigned long v13;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v14;  // rdi\n
    unsigned long long v15;  // rdx\n
    void* v16;  // r15, Other Possible Types: unsigned long\n
    unsigned long v17;  // rbp\n
    struct_0 *v18;  // rdi, Other Possible Types: unsigned long\n
    struct struct_0 **v19;  // rbx, Other Possible Types: unsigned long\n
    unsigned long v20;  // rbp\n
    unsigned long v21;  // rax, Other Possible Types: unsigned long long\n
\n
    v6 = a0;\n
    cgc_xpk_reset(cgc_g_ctx, a0);\n
    v3 = 0;\n
    if (cgc_fread(cgc_g_ctx->field_0, v6, cgc_stdin) != v6)\n
    {\n
        cgc_tr_destroy(0);\n
        goto LABEL_406ecc;\n
    }\n
    if (!(!cgc_unpack_object(cgc_g_ctx, &v3)))\n
        goto LABEL_406ecc;\n
    v7 = v3;\n
    if (v7->field_0 != 7)\n
    {\n
        v16 = 0;\n
        cgc_tr_destroy(v16);\n
LABEL_406ec4:\n
        cgc_free_object(v7);\n
LABEL_406ecc:\n
        v0 = 1347610402002134800;\n
        v21 = cgc_fwrite(&v0, 8, cgc_stdout);\n
        if (v0 == 1347610402002134800)\n
        {\n
            v21 = cgc_exit();\n
            return v21;\n
        }\n
        return v21;\n
    }\n
    v8 = v7->field_8;\n
    v9 = cgc_malloc(v7->field_10 * 8);\n
    v16 = 0;\n
    cgc_memset(v9, 0, v7->field_10 * 8);\n
    if (v7->field_10)\n
    {\n
        v17 = 0;\n
        v16 = 0;\n
        do\n
        {\n
            v10 = v8[v17];\n
            if (!(v10->field_0 == 3))\n
                goto LABEL_406e7a;\n
            *((v9 + v17 * 8)) = cgc_strdup(v10->field_8);\n
            v13 = cgc_tr_find(cgc_g_map, v8[v17]->field_8);\n
            v11 = v8[v17]->field_8;\n
            v12 = &obj_none;\n
            if (!v13)\n
                v13 = &obj_none;\n
            v14 = v16;\n
            v15 = v13;\n
            v16 = cgc_tr_insert();\n
            v17 += 1;\n
        } while (v7->field_10 > v17);\n
    }\n
    cgc_xpk_reset(cgc_g_ctx, v6);\n
    v0 = 6;\n
    v1 = v16;\n
    v2 = v7->field_10;\n
    if (!cgc_pack_object(cgc_g_ctx, &v0))\n
    {\n
        cgc_tr_destroy(v16);\n
        cgc_free_object(v7);\n
        if (v7->field_10)\n
        {\n
            v20 = 0;\n
            do\n
            {\n
                cgc_g_map = cgc_tr_delete(cgc_g_map, *((v9 + v20 * 8)));\n
                cgc_free(*((v9 + v20 * 8)));\n
                v20 += 1;\n
            } while (v7->field_10 > v20);\n
        }\n
        cgc_free(v9);\n
        v4 = 0;\n
        cgc_fwrite(&v4, 8, cgc_stdout);\n
        if (v4 == 1347610402002134800)\n
            cgc_exit();\n
        v21 = cgc_fwrite(cgc_g_ctx->field_0, cgc_g_ctx->field_8, cgc_stdout);\n
        return v21;\n
    }\n
LABEL_406e7a:\n
    if (v9)\n
    {\n
        v18 = *(v9);\n
        if (v18)\n
        {\n
            v19 = v9 + 8;\n
            do\n
            {\n
                cgc_free(v18);\n
                v18 = *(v19);\n
                v19 += 8;\n
            } while (v18);\n
            cgc_tr_destroy(v16);\n
            if (!v7)\n
                goto LABEL_406ecc;\n
            goto LABEL_406ec4;\n
        }\n
    }\n
}\n
", "4222906:sub_406fba": null, "4222912:cgc_handle_debug": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned long long field_10;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
extern struct_5 *cgc_g_ctx;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_handle_debug(unsigned long long a0, char *a1)\n
{\n
    unsigned long long v0;  // [bp-0x58], Other Possible Types: unsigned int\n
    unsigned long v1;  // [bp-0x50]\n
    void* v2;  // [bp-0x48]\n
    struct_3 *v3;  // [bp-0x40]\n
    int v4;  // [bp-0x38]\n
    unsigned long long v5;  // [bp-0x2b]\n
    struct_3 *v7;  // r14\n
    struct_2 *v8;  // r12\n
    struct_4 *v9;  // rax\n
    unsigned long v10;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_xpk_reset(cgc_g_ctx, a0);\n
    v3 = 0;\n
    if (cgc_fread(cgc_g_ctx->field_0, a0, cgc_stdin) != a0)\n
    {\n
LABEL_407104:\n
        v0 = 1347610402002134800;\n
        v10 = cgc_fwrite(&v0, 8, cgc_stdout);\n
        if (v0 == 1347610402002134800)\n
        {\n
            v10 = cgc_exit();\n
            return v10;\n
        }\n
        return v10;\n
    }\n
    if (!(!cgc_unpack_object(cgc_g_ctx, &v3)))\n
        goto LABEL_407104;\n
    v7 = v3;\n
    if (v7->field_0 != 7)\n
    {\n
LABEL_4070fc:\n
        cgc_free_object(v7);\n
        goto LABEL_407104;\n
    }\n
    else\n
    {\n
        if (!(v7->field_10 == 2))\n
            goto LABEL_4070fc;\n
        v8 = v7->field_8;\n
        if (!(v8->field_0->field_0 == 2))\n
            goto LABEL_4070fc;\n
        if (!(v8->field_8->field_0 == 4))\n
            goto LABEL_4070fc;\n
        *(&v4) = 299737896114974548378519132327788789267;\n
        v5 = 15664759020027755;\n
        v9 = v8->field_8;\n
        if (v9->field_10 == 20 && !cgc_memcmp(*(&v9->field_8), &v4, 20))\n
        {\n
            *(a1) = v8->field_0->field_8;\n
            cgc_xpk_reset(cgc_g_ctx, a0);\n
            v0 = 2;\n
            v1 = *(a1);\n
            v2 = 0;\n
            if (!cgc_pack_object(cgc_g_ctx, &v0))\n
            {\n
                cgc_send_response(0);\n
                cgc_fwrite(cgc_g_ctx->field_0, cgc_g_ctx->field_8, cgc_stdout);\n
LABEL_4070ad:\n
                v10 = cgc_free_object(v7);\n
                return v10;\n
            }\n
            goto LABEL_4070fc;\n
        }\n
        cgc_send_response(16137815913223768554);\n
        goto LABEL_4070ad;\n
    }\n
}\n
", "4223339:sub_40716b": null, "4223344:cgc_print_item": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char g_40a685;\n
extern char g_40a689;\n
extern char g_40a68d;\n
extern char g_40a6a2;\n
extern unsigned int g_40a6a7;\n
extern char g_40a6aa;\n
extern unsigned int g_40a6ad;\n
extern unsigned int g_40a6b0;\n
extern unsigned int g_40a6e8;\n
\n
long long cgc_print_item(unsigned long a0, struct_1 *a1, unsigned long long *a2, unsigned long long a3)\n
{\n
    unsigned long long *v0;  // [bp-0x10040]\n
    char v1;  // [bp-0x10038]\n
    unsigned long v3;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v5;  // r14\n
    char *v6;  // r12\n
    struct_0 *v7;  // rbp, Other Possible Types: unsigned long, unsigned long long\n
    unsigned long v8;  // r15\n
    unsigned long v10;  // rbx\n
    unsigned long long v12;  // rbx\n
    unsigned long long v13;  // r13\n
    unsigned long long v14;  // rax, Other Possible Types: unsigned long\n
    unsigned long v15;  // rbp\n
\n
    v3 = a1->field_0;\n
    switch (v3)\n
    {\n
    case 0:\n
        return cgc_printf(&g_40a685);\n
    case 1:\n
        return cgc_printf(&g_40a689);\n
    case 2:\n
        if (!a1->field_8)\n
            break;\n
        else\n
            break;\n
        return cgc_printf(&g_40a68d);\n
    case 3:\n
        return cgc_printf(\"\\\"&s\\\"\");\n
    case 4:\n
        v5 = *(&a1->field_10);\n
        if (!v5)\n
        {\n
            v7 = 0;\n
        }\n
        else\n
        {\n
            v6 = a1->field_8;\n
            v7 = 0;\n
            v10 = 0;\n
            do\n
            {\n
                if (!cgc_isalnum(v6[v10]))\n
                {\n
                    if (v7 > 65531)\n
                        break;\n
                    cgc_sprintf(&(&v1)[v7], \"\\\\&02X\");\n
                    v7 += 3;\n
                }\n
                else\n
                {\n
                    if (v7 > 65533)\n
                        break;\n
                    (&v1)[v7] = v6[v10];\n
                    v7 += 1;\n
                    continue;\n
                }\n
                v10 += 1;\n
            } while (v5 != v10);\n
        }\n
        (&v1)[v7] = 0;\n
        v3 = cgc_printf(&g_40a6e8);\n
        return v3;\n
    case 5:\n
        return cgc_printf(&g_40a6a2);\n
    case 6:\n
        cgc_printf(&g_40a6a7);\n
        cgc_print_map(a0 + 1, a1->field_8, a2, a3);\n
        return cgc_printf(&g_40a6aa);\n
    case 7:\n
        cgc_printf(&g_40a6ad);\n
        v8 = a0 + 1;\n
        if (v8 != 32)\n
        {\n
            v0 = &a1->field_8;\n
            v12 = a1->field_10;\n
            cgc_memset(&v1, 9, 0x20);\n
            (&v1)[v8] = 0;\n
            if (v12)\n
            {\n
                v13 = a3 - 1;\n
                v14 = *(a2);\n
                if (v13 >= v14)\n
                {\n
                    v15 = 0;\n
                    do\n
                    {\n
                        if (v13 >= v14)\n
                        {\n
                            cgc_printf(\"&s&d  =>  [VALUE]: \");\n
                            cgc_print_item(v8, v0[v15], a2, a3);\n
                            v14 = *(a2) + 1;\n
                            *(a2) = v14;\n
                        }\n
                        v15 += 1;\n
                    } while (v12 != v15);\n
                }\n
            }\n
        }\n
        v3 = cgc_printf(&g_40a6b0);\n
        return v3;\n
    default:\n
        return a1->field_0;\n
    }\n
}\n
", "4223543:sub_407237": null, "4223607:sub_407277": null, "4223879:sub_407387": null, "4223960:sub_4073d8": null, "4223968:cgc_print_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int g_40a6e8;\n
\n
long long cgc_print_bytes(char *a0, unsigned long a1)\n
{\n
    char v0;  // [bp-0x10028]\n
    struct_0 *v3;  // r13, Other Possible Types: unsigned long\n
    unsigned long v4;  // rbx\n
\n
    if (!a1)\n
    {\n
        v3 = 0;\n
    }\n
    else\n
    {\n
        v3 = 0;\n
        v4 = 0;\n
        while (true)\n
        {\n
            a0 = *((a0 + v4));\n
            if (!cgc_isalnum(a0))\n
            {\n
                if (v3 > 65531)\n
                    break;\n
                cgc_sprintf(&(&v0)[v3], \"\\\\&02X\");\n
                v3 += 3;\n
                v4 += 1;\n
                if (a1 == v4)\n
                    break;\n
            }\n
            else\n
            {\n
                if (v3 > 65533)\n
                    break;\n
                (&v0)[v3] = *((a0 + v4));\n
                v3 += 1;\n
                v4 += 1;\n
                if (a1 == v4)\n
                    break;\n
            }\n
        }\n
    }\n
    (&v0)[v3] = 0;\n
    return cgc_printf(&g_40a6e8);\n
}\n
", "4224009:sub_407409": null, "4224146:sub_407492": null, "4224160:cgc_print_map": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    void* field_10;\n
    unsigned long long field_18;\n
    unsigned long long field_20;\n
} struct_1;\n
\n
long long cgc_print_map(struct_0 *a0, struct_1 *a1, unsigned long long *a2, unsigned long long a3)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v2;  // rax\n
    unsigned long long v3;  // r12\n
\n
    if (a0 == 32)\n
        return v2;\n
    cgc_memset(&v0, 9, 0x20);\n
    *((&v0 + a0)) = 0;\n
    if (!a1)\n
        return a0;\n
    v3 = a3 - 1;\n
    if (v3 < *(a2))\n
        return a0;\n
    v2 = cgc_print_map(a0, a1->field_18, a2, a3);\n
    if (v3 >= *(a2))\n
    {\n
        cgc_printf(\"&s[KEY]: &s  =>  [VALUE]: \");\n
        cgc_print_item(a0, a1->field_10, a2, a3);\n
        *(a2) = *(a2) + 1;\n
        v2 = cgc_print_map(a0, a1->field_20, a2, a3);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4224327:sub_407547": null, "4224336:cgc_print_array": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
long long cgc_print_array(struct_0 *a0, unsigned long a1, unsigned long a2, struct struct_0 **a3, unsigned long long a4)\n
{\n
    char v0;  // [bp-0x58]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v3;  // r13\n
    void* *v4;  // r12, Other Possible Types: unsigned long\n
\n
    if (a0 == 32)\n
        return v2;\n
    cgc_memset(&v0, 9, 0x20);\n
    *((&v0 + a0)) = 0;\n
    if (!a2)\n
        return a0;\n
    v3 = a4 - 1;\n
    v2 = *(a3);\n
    if (v3 < v2)\n
        return *(a3);\n
    v4 = 0;\n
    do\n
    {\n
        if (v3 >= v2)\n
        {\n
            cgc_printf(\"&s&d  =>  [VALUE]: \");\n
            cgc_print_item(a0, *((a1 + v4 * 8)), a3, a4);\n
            v2 = *(a3) + 1;\n
            *(a3) = v2;\n
        }\n
        v4 += 1;\n
    } while (a2 != v4);\n
    return v2;\n
}\n
", "4224439:sub_4075b7": null, "4224518:sub_407606": null, "4224528:cgc_handle_print": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned long long field_8;\n
} struct_1;\n
\n
extern struct_0 *cgc_g_ctx;\n
extern void* cgc_g_map;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern unsigned int g_40a6a0;\n
\n
long long cgc_handle_print(unsigned long long a0, unsigned long a1)\n
{\n
    void* v0;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct_1 *v1;  // [bp-0x18]\n
    struct_1 *v3;  // rbx\n
    unsigned long v4;  // rax, Other Possible Types: unsigned long long\n
\n
    cgc_xpk_reset(cgc_g_ctx, a0);\n
    v1 = 0;\n
    if (cgc_fread(cgc_g_ctx->field_0, a0, cgc_stdin) == a0 && !cgc_unpack_object(cgc_g_ctx, &v1))\n
    {\n
        v3 = v1;\n
        if (v3->field_0 != 1)\n
        {\n
            cgc_free_object(v3);\n
        }\n
        else if (a1)\n
        {\n
            v0 = 0;\n
            cgc_fwrite(&v0, 8, cgc_stdout);\n
            if (v0 == 1347610402002134800)\n
                cgc_exit();\n
            v0 = 0;\n
            cgc_printf(&g_40a6a0);\n
            cgc_print_map(NULL, cgc_g_map, &v0, v3->field_8);\n
            cgc_printf(&g_40a6a0);\n
            return cgc_free_object(v1);\n
        }\n
        else\n
        {\n
            v0 = 6656530227642238064;\n
            cgc_fwrite(&v0, 8, cgc_stdout);\n
            if (v0 == 1347610402002134800)\n
            {\n
                cgc_exit();\n
                return cgc_free_object(v1);\n
            }\n
            return cgc_free_object(v1);\n
        }\n
    }\n
    v0 = 1347610402002134800;\n
    v4 = cgc_fwrite(&v0, 8, cgc_stdout);\n
    if (v0 == 1347610402002134800)\n
    {\n
        v4 = cgc_exit();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4224918:sub_407796": null, "4224928:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
long long cgc_check_seed()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    unsigned long v2;  // rax\n
\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v0 == *(0x4347c000))\n
    {\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4225002:sub_4077ea": null, "4225008:main": "extern unsigned long long cgc_g_ctx;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
extern unsigned int g_40a6ee;\n
\n
int main()\n
{\n
    char v0;  // [bp-0x49]\n
    void* v1;  // [bp-0x48], Other Possible Types: unsigned int, unsigned long long\n
    char v2;  // [bp-0x40]\n
    char v3;  // [bp-0x38]\n
    unsigned long long v5;  // rdi\n
    unsigned long long v6;  // rax\n
\n
    v0 = 0;\n
    cgc_g_ctx = cgc_xpk_init(0x400);\n
    v1 = 0;\n
    cgc_fread(&v1, 4, cgc_stdin);\n
    if (v1 == *(0x4347c000))\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    cgc_fbuffered(cgc_stdout, 1);\n
    cgc_fflush(cgc_stdout);\n
    if (cgc_fread(&v2, 8, cgc_stdin) != 8)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        return 0;\n
    }\n
    while (cgc_fread(&v3, 8, cgc_stdin) == 8)\n
    {\n
        v5 = *(&v3);\n
        if (v5 >= 73729)\n
        {\n
            cgc_printf(&g_40a6ee);\n
            goto LABEL_4078ba;\n
        }\n
        v6 = *(&v2);\n
        if (v6 <= 595227081888027533)\n
        {\n
            if (v6 == 13007316436538644428)\n
            {\n
                v1 = 0;\n
                cgc_fwrite(&v1, 8, cgc_stdout);\n
                if (v1 == 1347610402002134800)\n
                    cgc_exit();\n
                cgc_fflush(cgc_stdout);\n
                cgc_exit();\n
            }\n
            else if (v6 == 17127755793289138267)\n
            {\n
                cgc_handle_print(v5, v0);\n
                goto LABEL_4078ba;\n
            }\n
            else if (v6 == -1094721285928464392)\n
            {\n
                cgc_handle_lookup(v5);\n
                goto LABEL_4078ba;\n
            }\n
            goto LABEL_4079d1;\n
        }\n
        else\n
        {\n
            if (v6 == 595227081888027534)\n
            {\n
                cgc_handle_delete(v5);\n
                goto LABEL_4078ba;\n
            }\n
            if (v6 == 8897221498572240989)\n
            {\n
                cgc_handle_debug(v5, &v0);\n
LABEL_4078ba:\n
                cgc_fflush(cgc_stdout);\n
                if (cgc_fread(&v2, 8, cgc_stdin) != 8)\n
                    break;\n
            }\n
            else\n
            {\n
                if (v6 == 4905686887775909133)\n
                {\n
                    cgc_handle_store(v5);\n
                    goto LABEL_4078ba;\n
                }\n
LABEL_4079d1:\n
                v1 = 6656530227642238064;\n
                cgc_fwrite(&v1, 8, cgc_stdout);\n
                if (v1 == 1347610402002134800)\n
                {\n
                    cgc_exit();\n
                    goto LABEL_4078ba;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4225199:sub_4078af": null, "4225357:sub_40794d": null, "4225620:sub_407a54": null, "4225632:cgc__tr_rot_left": "typedef struct struct_1 {\n
    char padding_0[24];\n
    struct struct_0 *field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned long long field_20;\n
} struct_0;\n
\n
long long cgc__tr_rot_left(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0->field_18;\n
    a0->field_18 = v1->field_20;\n
    v1->field_20 = a0;\n
    return v1;\n
}\n
", "4225649:sub_407a71": null, "4225664:cgc__tr_rot_right": "typedef struct struct_1 {\n
    char padding_0[32];\n
    struct struct_0 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc__tr_rot_right(struct_1 *a0)\n
{\n
    struct_0 *v1;  // rax\n
\n
    v1 = a0->field_20;\n
    a0->field_20 = v1->field_18;\n
    v1->field_18 = a0;\n
    return v1;\n
}\n
", "4225681:sub_407a91": null, "4225696:cgc_tr_insert": "typedef struct struct_1 {\n
    char *field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    void* field_10;\n
    unsigned long long field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    unsigned int field_8;\n
    char padding_c[4];\n
    unsigned long long field_10;\n
    unsigned long long field_18;\n
} struct_0;\n
\n
long long cgc_tr_insert(struct_1 *a0, char *a1, unsigned long long a2)\n
{\n
    unsigned long v1;  // rbx\n
    unsigned int v2;  // edi\n
    struct_0 *v3;  // rax\n
    struct_0 *v4;  // rax\n
\n
    if (!a0)\n
    {\n
        v1 = cgc_malloc(40);\n
        v2 = a1;\n
        *(v1) = cgc_strdup(v2);\n
        cgc_random(*(&v2), a1, a2);\n
        *((v1 + 16)) = a2;\n
        *((v1 + 24)) = 0;\n
        return v1;\n
    }\n
    else if (cgc_strcmp(a1, a0->field_0) < 0)\n
    {\n
        v3 = cgc_tr_insert(a0->field_18, a1, a2);\n
        a0->field_18 = v3;\n
        if (v3->field_8 < a0->field_8)\n
        {\n
            a0->field_18 = v3[1].field_0;\n
            v3[1].field_0 = a0;\n
            return v3;\n
        }\n
        return a0;\n
    }\n
    else if (cgc_strcmp(a1, a0->field_0) > 0)\n
    {\n
        v4 = cgc_tr_insert(a0[1].field_0, a1, a2);\n
        a0[1].field_0 = &v4->field_0;\n
        if (v4->field_8 < a0->field_8)\n
        {\n
            a0[1].field_0 = v4->field_18;\n
            v4->field_18 = a0;\n
            return v4;\n
        }\n
        return a0;\n
    }\n
    else\n
    {\n
        cgc_free_object(a0->field_10);\n
        a0->field_10 = a2;\n
        return a0;\n
    }\n
}\n
", "4225920:cgc__tr_destroy_node": "long long cgc__tr_destroy_node(unsigned long long *a0)\n
{\n
    cgc_free(*(a0));\n
    return cgc_free(a0);\n
}\n
", "4225941:sub_407b95": null, "4225952:cgc_tr_delete": "long long cgc_tr_delete(unsigned long a0, unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    unsigned long v4;  // r12\n
    unsigned long v5;  // r15\n
\n
    v0 = v2;\n
    if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (cgc_strcmp(a1, *(a0)) < 0)\n
    {\n
        *((a0 + 24)) = cgc_tr_delete(*((a0 + 24)), a1);\n
        return a0;\n
    }\n
    else if (cgc_strcmp(a1, *(a0)) > 0)\n
    {\n
        *((a0 + 32)) = cgc_tr_delete(*((a0 + 32)), a1);\n
        return a0;\n
    }\n
    else\n
    {\n
        v4 = *((a0 + 24));\n
        v5 = *((a0 + 32));\n
        if (v4)\n
        {\n
            if (!v5)\n
            {\n
                v5 = v4;\n
            }\n
            else if (*((v4 + 8)) >= *((v5 + 8)))\n
            {\n
                *((a0 + 32)) = *((v5 + 24));\n
                *((v5 + 24)) = a0;\n
                *((v5 + 24)) = cgc_tr_delete(a0, a1);\n
                goto LABEL_407c6f;\n
            }\n
            else\n
            {\n
                *((a0 + 24)) = *((v4 + 32));\n
                *((v4 + 32)) = a0;\n
                *((v4 + 32)) = cgc_tr_delete(a0, a1);\n
                return v4;\n
            }\n
        }\n
        cgc_free(*(a0));\n
        cgc_free(a0);\n
LABEL_407c6f:\n
        return v5;\n
    }\n
}\n
", "4226177:sub_407c81": null, "4226192:cgc_tr_find": "typedef struct struct_1 {\n
    unsigned long long field_0;\n
    char padding_8[8];\n
    unsigned long long field_10;\n
    char padding_18[8];\n
    struct struct_1 *field_20;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    char padding_8[8];\n
    unsigned long long field_10;\n
    char padding_18[8];\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
long long cgc_tr_find(struct_1 *a0, char *a1)\n
{\n
    struct_0 *v1;  // rbx, Other Possible Types: unsigned long\n
\n
    if (!a0)\n
        return 0;\n
    v1 = a0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(a1, *(v1)) < 0)\n
        {\n
            v1 = *((v1 + 24));\n
            if (!v1)\n
                return 0;\n
        }\n
        else if (cgc_strcmp(a1, *(v1)) <= 0)\n
        {\n
            return *((v1 + 16));\n
        }\n
        else\n
        {\n
            v1 = *((v1 + 32));\n
            if (!v1)\n
                return 0;\n
        }\n
    }\n
}\n
", "4226213:sub_407ca5": null, "4226298:sub_407cfa": null, "4226304:cgc_tr_destroy": "typedef struct struct_0 {\n
    unsigned long long field_0;\n
    char padding_8[16];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
long long cgc_tr_destroy(struct_0 *a0)\n
{\n
    struct_0 *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
        return v3;\n
    v1 = a0;\n
    do\n
    {\n
        v2 = *((v1 + 24));\n
        cgc_tr_destroy(v2);\n
        cgc_free(*(v1));\n
        v3 = cgc_free(v1);\n
        v1 = *((v1 + 32));\n
    } while (v1);\n
    return v3;\n
}\n
", "4226356:sub_407d34": null, "4226368:cgc_tr_apply": "typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
    struct struct_1 *field_20;\n
} struct_1;\n
\n
long long cgc_tr_apply(struct_1 *a0, struct struct_0 **a1, unsigned long long a2)\n
{\n
    struct_1 *v1;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v2;  // rdi\n
    unsigned long long v3;  // rax\n
\n
    if (!a0)\n
        return v3;\n
    v1 = a0;\n
    do\n
    {\n
        v2 = *((v1 + 24));\n
        cgc_tr_apply(v2, a1, a2);\n
        v3 = a1(v1, a2);\n
        v1 = *((v1 + 32));\n
    } while (v1);\n
    return v3;\n
}\n
", "4226439:sub_407d87": null, "4226448:cgc_tr_print": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned long long field_18;\n
    struct struct_0 *field_20;\n
} struct_0;\n
\n
extern unsigned int g_40a6f6;\n
\n
long long cgc_tr_print(struct_0 *a0)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    struct_0 *v3;  // rbx, Other Possible Types: unsigned long\n
    unsigned long long v4;  // rdi\n
\n
    v0 = v2;\n
    if (!a0)\n
        return v2;\n
    v3 = a0;\n
    do\n
    {\n
        v4 = *((v3 + 24));\n
        cgc_tr_print(v4);\n
        v2 = cgc_printf(&g_40a6f6);\n
        v3 = *((v3 + 32));\n
    } while (v3);\n
    return v2;\n
}\n
", "4226522:sub_407dda": null, "4226528:cgc_xpk_init": "long long cgc_xpk_init(unsigned long a0)\n
{\n
    unsigned long long v1[3];  // r15\n
    unsigned long long v2;  // rbx\n
\n
    v1 = cgc_malloc(24);\n
    v2 = (a0 ? 0x400 : a0);\n
    v1[0] = cgc_malloc(v2);\n
    v1[1] = 0;\n
    v1[2] = v2;\n
    return v1;\n
}\n
", "4226593:sub_407e21": null, "4226608:cgc__xpk_resize": "typedef struct struct_0 {\n
    void* field_0;\n
    char padding_8[8];\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc__xpk_resize(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax\n
\n
    v0 = v2;\n
    if (a0->field_10 >= a1)\n
    {\n
        return 0;\n
    }\n
    else if (a1 > 0x400000)\n
    {\n
        return 4294967295;\n
    }\n
    else\n
    {\n
        a0->field_0 = cgc_realloc(a0->field_0, a1);\n
        a0->field_10 = a1;\n
        return 0;\n
    }\n
}\n
", "4226668:sub_407e6c": null, "4226672:cgc_xpk_reset": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_reset(struct_0 *a0, unsigned long long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: unsigned long long\n
    unsigned long long v3[3];  // r14\n
    char *v4;  // rdx, Other Possible Types: unsigned long\n
    char *v5;  // rdi, Other Possible Types: unsigned long\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0->field_10;\n
    if (v4 >= a1)\n
    {\n
        v5 = a0->field_0;\n
    }\n
    else\n
    {\n
        if (a1 > 0x400000)\n
            return v2;\n
        v5 = cgc_realloc(a0->field_0, a1);\n
        v3[0] = v5;\n
        v3[2] = a1;\n
        v4 = a1;\n
    }\n
    v2 = cgc_memset(v5, 0, v4);\n
    v3[1] = 0;\n
    return v2;\n
}\n
", "4226752:cgc_le2be16_s": "long long cgc_le2be16_s(unsigned long a0)\n
{\n
    return a0 / 0x100 | a0 * 0x100;\n
}\n
", "4226763:sub_407ecb": null, "4226768:cgc_le2be16_u": "long long cgc_le2be16_u(unsigned long a0)\n
{\n
    unsigned long long v1;  // rax\n
\n
    v1 = a0;\n
    *(&v1) = __ROL__(v1, 8);\n
    return v1;\n
}\n
", "4226775:sub_407ed7": null, "4226784:cgc_le2be32_s": "long long cgc_le2be32_s(unsigned long a0)\n
{\n
    return __buildin_bswap32(a0);\n
}\n
", "4226789:sub_407ee5": null, "4226800:cgc_le2be32_u": "long long cgc_le2be32_u(unsigned long a0)\n
{\n
    return __buildin_bswap32(a0);\n
}\n
", "4226805:sub_407ef5": null, "4226816:cgc_le2be64_s": "long long cgc_le2be64_s(unsigned long a0)\n
{\n
    return (((((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) & -0x100000000) >> 32 | ((((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) * 0x100000000 & -0x100000000;\n
}\n
", "4226823:sub_407f07": null, "4226832:cgc_le2be64_u": "long long cgc_le2be64_u(unsigned long a0)\n
{\n
    return (((((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) & -0x100000000) >> 32 | ((((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a0 & -0xff00ff00ff0100) >> 8 | a0 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) * 0x100000000 & -0x100000000;\n
}\n
", "4226839:sub_407f17": null, "4226848:cgc_xpk_pack_fixint": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_fixint(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    unsigned long v3;  // rax\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r14\n
\n
    v0 = v3;\n
    v4 = a0;\n
    v1 = a1;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            *(&v6) = 5;\n
            if (v7 > 0x400000)\n
                return v6;\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4226952:sub_407f88": null, "4226960:cgc_xpk_write": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_write(unsigned long long a0[3], unsigned int a1, char *a2)\n
{\n
    unsigned long v0;  // [bp-0x28]\n
    unsigned long v2;  // rax\n
    struct_0 *v3;  // rbx\n
    unsigned long v4;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v5;  // rax\n
    unsigned long long v6;  // r12\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = a0[1];\n
    v5 = v3->field_10;\n
    if (&a2[v4] > v5)\n
    {\n
        v6 = v5 * 2;\n
        if (v5 < v6)\n
        {\n
            *(&v5) = 5;\n
            if (v6 > 0x400000)\n
                return v5;\n
            v3->field_0 = cgc_realloc(v3->field_0, v6);\n
            v3->field_10 = v6;\n
            v4 = v3->field_8;\n
        }\n
    }\n
    cgc_memcpy(v4 + v3->field_0, a1, a2);\n
    v3->field_8 = &a2[v3->field_8];\n
    return 0;\n
}\n
", "4227068:sub_407ffc": null, "4227072:cgc_xpk_write_marker": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_write_marker(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    unsigned long v3;  // rax\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r14\n
\n
    v0 = v3;\n
    v4 = a0;\n
    v1 = a1;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            *(&v6) = 5;\n
            if (v7 > 0x400000)\n
                return v6;\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4227176:sub_408068": null, "4227184:cgc_xpk_read_marker": "long long cgc_xpk_read_marker(unsigned long long a0[3], char *a1)\n
{\n
    unsigned long long v1;  // rcx\n
\n
    v1 = a0[1];\n
    if (v1 + 1 <= a0[2])\n
    {\n
        cgc_memcpy(a1, v1 + a0[0], 0x1);\n
        a0[1] = a0[1] + 1;\n
        return 0;\n
    }\n
    return 5;\n
}\n
", "4227232:cgc_xpk_read": "long long cgc_xpk_read(unsigned long long a0[3], char *a1, unsigned long a2)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    char *v3;  // r14\n
    unsigned long long v4;  // rcx\n
\n
    v0 = v2;\n
    v3 = a2;\n
    v4 = a0[1];\n
    v2 = 5;\n
    if (a2 + v4 <= a0[2])\n
    {\n
        cgc_memcpy(a1, v4 + a0[0], v3);\n
        a0[1] = &v3[a0[1]];\n
        return 0;\n
    }\n
    return v2;\n
}\n
", "4227288:sub_4080d8": null, "4227296:cgc_xpk_read_obj": "typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned long long field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned long long field_0;\n
    struct struct_1 *field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    char field_8;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[7];\n
    char field_8;\n
} struct_1;\n
\n
long long cgc_xpk_read_obj(unsigned long long a0[3], char a1[9], unsigned long a2, unsigned long a3, unsigned long a4)\n
{\n
    char v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    unsigned long v3;  // rax\n
    char v4[9];  // r14\n
    unsigned long long v5;  // rsi\n
    unsigned long long v24;  // rdx\n
\n
    *(&v0) = v3;\n
    v4 = a1;\n
    v1 = 160;\n
    v5 = a0[1];\n
    if (v5 + 1 > a0[2])\n
        return 5;\n
    v24 = 1;\n
    cgc_memcpy(&v1, v5 + a0[0], 0x1);\n
    a0[1] = a0[1] + 1;\n
    *(&v24) = v1;\n
    v4[0] = v1;\n
    if ((v24 + 95) <= 47)\n
    {\n
        goto *((0x40a700 + (v24 + 95) * 4)) + 0x40a700;\n
    }\n
    else if (v24 >= 0)\n
    {\n
        v4[0] = 0;\n
        v4[8] = v24;\n
        return 0;\n
    }\n
    else if (v24 <= 159)\n
    {\n
        v4[0] = 128;\n
        *(&v4[8]) = v24 & 31;\n
        return 0;\n
    }\n
    else if (v24 < 224)\n
    {\n
        v4[0] = 160;\n
        *(&v4[8]) = 0;\n
        return 0;\n
    }\n
    else\n
    {\n
        v4[0] = 224;\n
        v4[8] = v24;\n
        return 0;\n
    }\n
}\n
", "4227848:sub_408308": null, "4227856:cgc_xpk_next_type": "long long cgc_xpk_next_type(unsigned long long a0[3], char *a1)\n
{\n
    unsigned long long v0;  // [bp-0x138]\n
    char v1;  // [bp-0x9]\n
    unsigned long long v4;  // rsi\n
    char v5;  // cl\n
    unsigned long v6;  // rcx\n
    char v7;  // dl\n
    unsigned long v8;  // rax, Other Possible Types: char\n
\n
    v4 = a0[1];\n
    v8 = 5;\n
    if (v4 + 1 > a0[2])\n
        return v8;\n
    cgc_memcpy(&v1, v4 + a0[0], 0x1);\n
    v5 = v1;\n
    v8 = v6 + 95;\n
    if (v8 <= 47)\n
    {\n
        v0 = 140769701101631;\n
        if (((*(&v0 + ((v6 + 95 & 63) >> 3)) >> (v6 + 95 & 63 & 7)) & 1))\n
        {\n
            v7 = v6;\n
            goto LABEL_40835a;\n
        }\n
    }\n
    if (v6 >= 0)\n
    {\n
        v7 = 0;\n
    }\n
    else\n
    {\n
        v7 = 128;\n
        if (v6 >= 160)\n
        {\n
            *(&v8) = 4;\n
            v7 = 224;\n
            if (v6 < 224)\n
                return v8;\n
        }\n
    }\n
LABEL_40835a:\n
    *(a1) = v7;\n
    return 0;\n
}\n
", "4227966:sub_40837e": null, "4227968:cgc_xpk_peek": "long long cgc_xpk_peek(unsigned long long a0[3], char *a1, char *a2)\n
{\n
    unsigned long v0;  // [bp-0x8]\n
    unsigned long v2;  // rax, Other Possible Types: char\n
    unsigned long long v3;  // rcx\n
\n
    v0 = v2;\n
    v3 = a0[1];\n
    v2 = 5;\n
    if (&a2[v3] <= a0[2])\n
    {\n
        cgc_memcpy(a1, v3 + a0[0], a2);\n
        return 0;\n
    }\n
    return v2;\n
}\n
", "4228003:sub_4083a3": null, "4228016:cgc_xpk_pack_int": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_int(unsigned long long a0[3], unsigned long long a1)\n
{\n
    char v0;  // [bp-0x25]\n
    char v1;  // [bp-0x24]\n
    char v2;  // [bp-0x23]\n
    char v3;  // [bp-0x22]\n
    char v4;  // [bp-0x21]\n
    unsigned long v5;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct_0 *v7;  // r14\n
    unsigned long v8;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rbx\n
    unsigned long long v10;  // rbx\n
    unsigned long long v11;  // r15\n
    unsigned long v12;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v14;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v15;  // r15\n
    unsigned long long v16;  // r15\n
    char *v17;  // rdi, Other Possible Types: unsigned long\n
    struct_1 *v18;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v19;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v20;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v21;  // rcx\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v24;  // rbx\n
    unsigned int v25;  // esi\n
    unsigned long v26;  // rdx, Other Possible Types: unsigned long long\n
    char *v27;  // rdi\n
    unsigned long long v28;  // rdx\n
\n
    v7 = a0;\n
    v5 = a1;\n
    if (a1 >= 0)\n
        return cgc_xpk_pack_uint(a0, a1);\n
    if (a1 >= -0x20)\n
    {\n
        v0 = a1;\n
        v8 = a0[1];\n
        v13 = v7->field_10;\n
        if (v8 + 1 > v13)\n
        {\n
            v9 = v13 * 2;\n
            if (v13 < v9)\n
            {\n
                *(&v13) = 5;\n
                if (v9 > 0x400000)\n
                    return v13;\n
                v7->field_0 = cgc_realloc(v7->field_0, v9);\n
                v7->field_10 = v9;\n
                v8 = v7->field_8;\n
            }\n
        }\n
        v17 = v8 + v7->field_0;\n
        v18 = &v0;\n
        goto LABEL_4084e0;\n
    }\n
    if (a1 >= -128)\n
    {\n
        v1 = 176;\n
        v19 = a0[1];\n
        v13 = v7->field_10;\n
        if (v19 + 1 <= v13)\n
        {\n
LABEL_40847f:\n
            cgc_memcpy(v19 + v7->field_0, &v1, 0x1);\n
            v21 = v7->field_8;\n
            v22 = v21 + 1;\n
            v7->field_8 = v22;\n
            v13 = v7->field_10;\n
            if (v21 + 2 > v13)\n
            {\n
                v24 = v13 * 2;\n
                if (v13 < v24)\n
                {\n
                    *(&v13) = 5;\n
                    if (v24 > 0x400000)\n
                        return v13;\n
                    v7->field_0 = cgc_realloc(v7->field_0, v24);\n
                    v7->field_10 = v24;\n
                    v22 = v7->field_8;\n
                }\n
            }\n
            v17 = v22 + v7->field_0;\n
            v18 = &v5;\n
LABEL_4084e0:\n
            cgc_memcpy(v17, v18, 0x1);\n
            v7->field_8 = v7->field_8 + 1;\n
            return 0;\n
        }\n
        else\n
        {\n
            v10 = v13 * 2;\n
            if (!(v13 < v10))\n
                goto LABEL_40847f;\n
            if (v10 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v10);\n
                v7->field_10 = v10;\n
                v19 = v7->field_8;\n
                goto LABEL_40847f;\n
            }\n
        }\n
    }\n
    else if (a1 >= -0x8000)\n
    {\n
        v2 = 177;\n
        v20 = a0[1];\n
        v13 = v7->field_10;\n
        if (v20 + 1 <= v13)\n
        {\n
LABEL_408541:\n
            cgc_memcpy(v20 + v7->field_0, &v2, 0x1);\n
            v7->field_8 = v7->field_8 + 1;\n
            v5 = ((((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) & -0x100000000) >> 32 | ((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) * 0x100000000 & -0x100000000) >> 48;\n
            v25 = &v5;\n
            v26 = 2;\n
            goto LABEL_408655;\n
        }\n
        else\n
        {\n
            v11 = v13 * 2;\n
            if (!(v13 < v11))\n
                goto LABEL_408541;\n
            if (v11 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v11);\n
                v7->field_10 = v11;\n
                v20 = v7->field_8;\n
                goto LABEL_408541;\n
            }\n
        }\n
    }\n
    else if (a1 < -0x80000000)\n
    {\n
        v4 = 179;\n
        v14 = a0[1];\n
        v13 = v7->field_10;\n
        if (v14 + 1 <= v13)\n
        {\n
LABEL_40862c:\n
            cgc_memcpy(v14 + v7->field_0, &v4, 0x1);\n
            v7->field_8 = v7->field_8 + 1;\n
            v5 = (((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) & -0x100000000) >> 32 | ((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) * 0x100000000 & -0x100000000;\n
            v25 = &v5;\n
            v26 = 8;\n
LABEL_408655:\n
            v13 = cgc_xpk_write(v7, v25, v26);\n
            return v13;\n
        }\n
        v16 = v13 * 2;\n
        if (!(v13 < v16))\n
            goto LABEL_40862c;\n
        if (v16 <= 0x400000)\n
        {\n
            v7->field_0 = cgc_realloc(v7->field_0, v16);\n
            v7->field_10 = v16;\n
            v14 = v7->field_8;\n
            goto LABEL_40862c;\n
        }\n
    }\n
    else\n
    {\n
        v3 = 178;\n
        v12 = a0[1];\n
        v13 = v7->field_10;\n
        if (v12 + 1 <= v13)\n
        {\n
LABEL_4085c1:\n
            v27 = v12 + v7->field_0;\n
            v28 = 1;\n
            cgc_memcpy(v27, &v3, 0x1);\n
            v7->field_8 = v7->field_8 + 1;\n
            v5 = __buildin_bswap32(a1);\n
            v25 = &v5;\n
            v26 = 4;\n
            goto LABEL_408655;\n
        }\n
        else\n
        {\n
            v15 = v13 * 2;\n
            if (!(v13 < v15))\n
                goto LABEL_4085c1;\n
            if (v15 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v15);\n
                v7->field_10 = v15;\n
                v12 = v7->field_8;\n
                goto LABEL_4085c1;\n
            }\n
        }\n
    }\n
    *(&v13) = 5;\n
    return v13;\n
}\n
", "4228715:sub_40866b": null, "4228720:cgc_xpk_pack_uint": "typedef struct struct_1 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_uint(unsigned long long a0[3], unsigned long a1)\n
{\n
    char v0;  // [bp-0x25]\n
    char v1;  // [bp-0x24]\n
    char v2;  // [bp-0x23]\n
    char v3;  // [bp-0x22]\n
    char v4;  // [bp-0x21]\n
    unsigned long v5;  // [bp-0x20], Other Possible Types: unsigned long long\n
    struct_1 *v7;  // r14\n
    unsigned long v8;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v9;  // rbx\n
    unsigned long long v10;  // rbx\n
    unsigned long long v11;  // r15\n
    unsigned long v12;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v13;  // rax, Other Possible Types: unsigned long long\n
    unsigned long v14;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v15;  // r15\n
    unsigned long long v16;  // r15\n
    char *v17;  // rdi, Other Possible Types: unsigned long\n
    struct_0 *v18;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v19;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v20;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v21;  // rcx\n
    unsigned long v22;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v24;  // rbx\n
    unsigned long long v25;  // rcx\n
    unsigned long v26;  // rdi, Other Possible Types: unsigned long long\n
    char *v28;  // rdi\n
    unsigned long long v29;  // rdx\n
    unsigned long long v30;  // rbx\n
    unsigned long long v31;  // rcx\n
    unsigned long v32;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v34;  // rcx\n
    unsigned long v35;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v37;  // rbx\n
    unsigned long long v38;  // rbx\n
\n
    v7 = a0;\n
    v5 = a1;\n
    if (a1 <= 127)\n
    {\n
        v0 = a1;\n
        v8 = a0[1];\n
        v13 = v7->field_10;\n
        if (v8 + 1 > v13)\n
        {\n
            v9 = v13 * 2;\n
            if (v13 < v9)\n
            {\n
                *(&v13) = 5;\n
                if (v9 > 0x400000)\n
                    return v13;\n
                v7->field_0 = cgc_realloc(v7->field_0, v9);\n
                v7->field_10 = v9;\n
                v8 = v7->field_8;\n
            }\n
        }\n
        v17 = v8 + v7->field_0;\n
        v18 = &v0;\n
        goto LABEL_408786;\n
    }\n
    if (a1 <= 255)\n
    {\n
        v1 = 192;\n
        v19 = a0[1];\n
        v13 = v7->field_10;\n
        if (v19 + 1 <= v13)\n
        {\n
LABEL_408729:\n
            cgc_memcpy(v19 + v7->field_0, &v1, 0x1);\n
            v21 = v7->field_8;\n
            v22 = v21 + 1;\n
            v7->field_8 = v22;\n
            v13 = v7->field_10;\n
            if (v21 + 2 > v13)\n
            {\n
                v24 = v13 * 2;\n
                if (v13 < v24)\n
                {\n
                    *(&v13) = 5;\n
                    if (v24 > 0x400000)\n
                        return v13;\n
                    v7->field_0 = cgc_realloc(v7->field_0, v24);\n
                    v7->field_10 = v24;\n
                    v22 = v7->field_8;\n
                }\n
            }\n
            v17 = v22 + v7->field_0;\n
            v18 = &v5;\n
LABEL_408786:\n
            cgc_memcpy(v17, v18, 0x1);\n
            v7->field_8 = v7->field_8 + 1;\n
            goto LABEL_408795;\n
        }\n
        else\n
        {\n
            v10 = v13 * 2;\n
            if (!(v13 < v10))\n
                goto LABEL_408729;\n
            if (v10 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v10);\n
                v7->field_10 = v10;\n
                v19 = v7->field_8;\n
                goto LABEL_408729;\n
            }\n
        }\n
    }\n
    else if (a1 <= 65535)\n
    {\n
        v2 = 193;\n
        v20 = a0[1];\n
        v13 = v7->field_10;\n
        if (v20 + 1 <= v13)\n
        {\n
LABEL_4087f0:\n
            cgc_memcpy(v20 + v7->field_0, &v2, 0x1);\n
            v25 = v7->field_8;\n
            v26 = v25 + 1;\n
            v7->field_8 = v26;\n
            v5 = __ROL__(v0, 8);\n
            v13 = v7->field_10;\n
            if (v25 + 3 > v13)\n
            {\n
                v30 = v13 * 2;\n
                if (v13 < v30)\n
                {\n
                    *(&v13) = 5;\n
                    if (v30 > 0x400000)\n
                        return v13;\n
                    v7->field_0 = cgc_realloc(v7->field_0, v30);\n
                    v7->field_10 = v30;\n
                    v26 = v7->field_8;\n
                }\n
            }\n
            cgc_memcpy(v26 + v7->field_0, &v5, 0x2);\n
            v7->field_8 = v7->field_8 + 2;\n
            goto LABEL_408795;\n
        }\n
        else\n
        {\n
            v11 = v13 * 2;\n
            if (!(v13 < v11))\n
                goto LABEL_4087f0;\n
            if (v11 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v11);\n
                v7->field_10 = v11;\n
                v20 = v7->field_8;\n
                goto LABEL_4087f0;\n
            }\n
        }\n
    }\n
    else if (a1 >> 32)\n
    {\n
        v4 = 195;\n
        v14 = a0[1];\n
        v13 = v7->field_10;\n
        if (v14 + 1 <= v13)\n
        {\n
LABEL_40897e:\n
            cgc_memcpy(v14 + v7->field_0, &v4, 0x1);\n
            v34 = v7->field_8;\n
            v35 = v34 + 1;\n
            v7->field_8 = v35;\n
            v5 = (((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) & -0x100000000) >> 32 | ((((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) & -0xffff00010000) >> 16 | ((a1 & -0xff00ff00ff0100) >> 8 | a1 * 0x100 & -0xff00ff00ff0100) * 0x10000 & -0xffff00010000) * 0x100000000 & -0x100000000;\n
            v13 = v7->field_10;\n
            if (v34 + 9 > v13)\n
            {\n
                v38 = v13 * 2;\n
                if (v13 < v38)\n
                {\n
                    *(&v13) = 5;\n
                    if (v38 > 0x400000)\n
                        return v13;\n
                    v7->field_0 = cgc_realloc(v7->field_0, v38);\n
                    v7->field_10 = v38;\n
                    v35 = v7->field_8;\n
                }\n
            }\n
            cgc_memcpy(v35 + v7->field_0, &v5, 0x8);\n
            v7->field_8 = v7->field_8 + 8;\n
LABEL_408795:\n
            return 0;\n
        }\n
        else\n
        {\n
            v16 = v13 * 2;\n
            if (!(v13 < v16))\n
                goto LABEL_40897e;\n
            if (v16 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v16);\n
                v7->field_10 = v16;\n
                v14 = v7->field_8;\n
                goto LABEL_40897e;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v3 = 194;\n
        v12 = a0[1];\n
        v13 = v7->field_10;\n
        if (v12 + 1 <= v13)\n
        {\n
LABEL_4088c0:\n
            v28 = v12 + v7->field_0;\n
            v29 = 1;\n
            cgc_memcpy(v28, &v3, 0x1);\n
            v31 = v7->field_8;\n
            v32 = v31 + 1;\n
            v7->field_8 = v32;\n
            v5 = __buildin_bswap32(a1);\n
            v13 = v7->field_10;\n
            if (v31 + 5 > v13)\n
            {\n
                v37 = v13 * 2;\n
                if (v13 < v37)\n
                {\n
                    *(&v13) = 5;\n
                    if (v37 > 0x400000)\n
                        return v13;\n
                    v7->field_0 = cgc_realloc(v7->field_0, v37);\n
                    v7->field_10 = v37;\n
                    v32 = v7->field_8;\n
                }\n
            }\n
            cgc_memcpy(v32 + v7->field_0, &v5, 0x4);\n
            v7->field_8 = v7->field_8 + 4;\n
            goto LABEL_408795;\n
        }\n
        else\n
        {\n
            v15 = v13 * 2;\n
            if (!(v13 < v15))\n
                goto LABEL_4088c0;\n
            if (v15 <= 0x400000)\n
            {\n
                v7->field_0 = cgc_realloc(v7->field_0, v15);\n
                v7->field_10 = v15;\n
                v12 = v7->field_8;\n
                goto LABEL_4088c0;\n
            }\n
        }\n
    }\n
    *(&v13) = 5;\n
    return v13;\n
}\n
", "4229634:sub_408a02": null, "4229648:cgc_xpk_pack_none": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_none(unsigned long long a0[3])\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    unsigned long v3;  // rax\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r14\n
\n
    v0 = v3;\n
    v4 = a0;\n
    v1 = 160;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            *(&v6) = 5;\n
            if (v7 > 0x400000)\n
                return v6;\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4229752:sub_408a78": null, "4229760:cgc_xpk_pack_nil": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_nil(unsigned long long a0[3])\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    unsigned long v3;  // rax\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v6;  // rax\n
    unsigned long long v7;  // r14\n
\n
    v0 = v3;\n
    v4 = a0;\n
    v1 = 166;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            *(&v6) = 5;\n
            if (v7 > 0x400000)\n
                return v6;\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4229864:sub_408ae8": null, "4229872:cgc_xpk_pack_bool": "typedef struct struct_1 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_bool(unsigned long long a0[3], unsigned long a1)\n
{\n
    unsigned long v0;  // [bp-0x18]\n
    char v1;  // [bp-0x12]\n
    char v2;  // [bp-0x11]\n
    unsigned long v4;  // rax\n
    struct_1 *v5;  // rbx\n
    unsigned long long v6;  // r14\n
    unsigned long long v7;  // r14\n
    unsigned long v8;  // rdi, Other Possible Types: unsigned long long\n
    char *v9;  // rdi, Other Possible Types: unsigned long\n
    struct_0 *v10;  // rsi, Other Possible Types: unsigned long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rax\n
\n
    v0 = v4;\n
    v5 = a0;\n
    if (!a1)\n
    {\n
        v2 = 161;\n
        v11 = a0[1];\n
        v12 = v5->field_10;\n
        if (v11 + 1 > v12)\n
        {\n
            v7 = v12 * 2;\n
            if (v12 < v7)\n
            {\n
                *(&v12) = 5;\n
                if (v7 > 0x400000)\n
                    return v12;\n
                v5->field_0 = cgc_realloc(v5->field_0, v7);\n
                v5->field_10 = v7;\n
                v11 = v5->field_8;\n
            }\n
        }\n
        v9 = v11 + v5->field_0;\n
        v10 = &v2;\n
    }\n
    else\n
    {\n
        v1 = 162;\n
        v8 = a0[1];\n
        v12 = v5->field_10;\n
        if (v8 + 1 > v12)\n
        {\n
            v6 = v12 * 2;\n
            if (v12 < v6)\n
            {\n
                *(&v12) = 5;\n
                if (v6 > 0x400000)\n
                    return v12;\n
                v5->field_0 = cgc_realloc(v5->field_0, v6);\n
                v5->field_10 = v6;\n
                v8 = v5->field_8;\n
            }\n
        }\n
        v9 = v8 + v5->field_0;\n
        v10 = &v1;\n
    }\n
    cgc_memcpy(v9, v10, 0x1);\n
    v5->field_8 = v5->field_8 + 1;\n
    return 0;\n
}\n
", "4230054:sub_408ba6": null, "4230064:cgc_xpk_pack_str": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_str(unsigned long long a0[3], unsigned long a1)\n
{\n
    char v0;  // [bp-0x2a]\n
    char v1;  // [bp-0x29]\n
    unsigned long v2;  // [bp-0x28]\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rax, Other Possible Types: unsigned long long\n
    char *v6;  // r14\n
    unsigned long long v7;  // r12\n
    unsigned long long v8;  // r12\n
    unsigned long v9;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v10;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v12;  // rcx\n
    unsigned long v13;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v14;  // rax\n
    unsigned long v16;  // r12, Other Possible Types: unsigned long long\n
    unsigned long long v17;  // r12\n
    unsigned long long v18;  // rcx\n
\n
    v4 = a0;\n
    v5 = cgc_strlen(a1);\n
    v6 = v5;\n
    if (v5 <= 31)\n
    {\n
        v0 = v5 | 128;\n
        v9 = a0[1];\n
        v5 = v4->field_10;\n
        if (v9 + 1 > v5)\n
        {\n
            v7 = v5 * 2;\n
            if (v5 < v7)\n
            {\n
                if (!(v7 <= &g_400000))\n
                    goto LABEL_408da6;\n
                v4->field_0 = cgc_realloc(v4->field_0, v7);\n
                v4->field_10 = v7;\n
                v9 = v4->field_8;\n
            }\n
        }\n
        cgc_memcpy(v9 + v4->field_0, &v0, 0x1);\n
        v11 = v4->field_8 + 1;\n
        v4->field_8 = v11;\n
        if (!v6)\n
            goto LABEL_408d98;\n
        v5 = v4->field_10;\n
        if (&v6[v11] <= v5)\n
            goto LABEL_408d86;\n
        v16 = v5 * 2;\n
        if (!(v5 < v16))\n
            goto LABEL_408d86;\n
        if (v16 <= &g_400000)\n
            goto LABEL_408d70;\n
    }\n
    else\n
    {\n
        *(&v5) = 1;\n
        if (v6 > 65535)\n
            return v5;\n
        v1 = 208;\n
        v10 = a0[1];\n
        v5 = v4->field_10;\n
        if (v10 + 1 <= v5)\n
        {\n
LABEL_408cc6:\n
            cgc_memcpy(v10 + v4->field_0, &v1, 0x1);\n
            v12 = v4->field_8;\n
            v13 = v12 + 1;\n
            v4->field_8 = v13;\n
            v14 = v6;\n
            *(&v14) = __ROL__(v6, 8);\n
            v2 = v14;\n
            v5 = v4->field_10;\n
            if (v12 + 3 > v5)\n
            {\n
                v17 = v5 * 2;\n
                if (v5 < v17)\n
                {\n
                    *(&v5) = 5;\n
                    if (v17 > 0x400000)\n
                        return v5;\n
                    v4->field_0 = cgc_realloc(v4->field_0, v17);\n
                    v4->field_10 = v17;\n
                    v13 = v4->field_8;\n
                }\n
            }\n
            cgc_memcpy(v13 + v4->field_0, &v2, 0x2);\n
            v18 = v4->field_8;\n
            v5 = v4->field_10;\n
            v11 = v18 + 2;\n
            v4->field_8 = v11;\n
            if (&v6[v18 + 2] <= v5)\n
                goto LABEL_408d86;\n
            v16 = v5 * 2;\n
            if (!(v5 < v16))\n
                goto LABEL_408d86;\n
            *(&v5) = 5;\n
            if (v16 > 0x400000)\n
                return v5;\n
LABEL_408d70:\n
            v4->field_0 = cgc_realloc(v4->field_0, v16);\n
            v4->field_10 = v16;\n
            v11 = v4->field_8;\n
LABEL_408d86:\n
            cgc_memcpy(v11 + v4->field_0, a1, v6);\n
            v4->field_8 = &v6[v4->field_8];\n
LABEL_408d98:\n
            return 0;\n
        }\n
        else\n
        {\n
            v8 = v5 * 2;\n
            if (!(v5 < v8))\n
                goto LABEL_408cc6;\n
            if (v8 <= 0x400000)\n
            {\n
                v4->field_0 = cgc_realloc(v4->field_0, v8);\n
                v4->field_10 = v8;\n
                v10 = v4->field_8;\n
                goto LABEL_408cc6;\n
            }\n
        }\n
    }\n
LABEL_408da6:\n
    *(&v5) = 5;\n
    return v5;\n
}\n
", "4230570:sub_408daa": null, "4230576:cgc_xpk_pack_bytes": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_bytes(unsigned long long a0[3], unsigned int a1, char *a2)\n
{\n
    char v0;  // [bp-0x29]\n
    unsigned long v1;  // [bp-0x28]\n
    unsigned long v3;  // al, Other Possible Types: char\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v6;  // r12\n
    unsigned long long v7;  // rcx\n
    unsigned long long v8;  // rax\n
    unsigned long long v10;  // r12\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long v12;  // rdi, Other Possible Types: unsigned long long\n
    unsigned long long v13;  // r12\n
\n
    v3 = 1;\n
    if (a2 > 65535)\n
        return v3;\n
    v4 = a0;\n
    v0 = 163;\n
    v5 = a0[1];\n
    v3 = v4->field_10;\n
    if (v5 + 1 > v3)\n
    {\n
        v6 = v3 * 2;\n
        if (v3 < v6)\n
        {\n
            if (v6 <= 0x400000)\n
            {\n
                v4->field_0 = cgc_realloc(v4->field_0, v6);\n
                v4->field_10 = v6;\n
                v5 = v4->field_8;\n
            }\n
            else\n
            {\n
                *(&v3) = 5;\n
                return v3;\n
            }\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v0, 0x1);\n
    v7 = v4->field_8;\n
    v11 = v7 + 1;\n
    v4->field_8 = v11;\n
    v8 = a2;\n
    *(&v8) = __ROL__(a2, 8);\n
    v1 = v8;\n
    v3 = v4->field_10;\n
    if (v7 + 3 > v3)\n
    {\n
        v10 = v3 * 2;\n
        if (v3 < v10)\n
        {\n
            *(&v3) = 5;\n
            if (v10 > 0x400000)\n
                return v3;\n
            v4->field_0 = cgc_realloc(v4->field_0, v10);\n
            v4->field_10 = v10;\n
            v11 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v11 + v4->field_0, &v1, 0x2);\n
    v12 = v4->field_8 + 2;\n
    v4->field_8 = v12;\n
    if (!a2)\n
        return 0;\n
    v3 = v4->field_10;\n
    if (&a2[v12] > v3)\n
    {\n
        v13 = v3 * 2;\n
        if (v3 < v13)\n
        {\n
            *(&v3) = 5;\n
            if (v13 > 0x400000)\n
                return v3;\n
            v4->field_0 = cgc_realloc(v4->field_0, v13);\n
            v4->field_10 = v13;\n
            v12 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v12 + v4->field_0, a1, a2);\n
    v4->field_8 = &a2[v4->field_8];\n
}\n
", "4230907:sub_408efb": null, "4230912:cgc_xpk_pack_array": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_array(unsigned long long a0[3], unsigned long a1)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v3;  // al, Other Possible Types: char\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    char v6;  // rax\n
    unsigned long long v7;  // r14\n
    unsigned long long v8;  // rcx\n
    unsigned long long v10;  // r14\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = a1;\n
    v3 = 2;\n
    if (a1 > 255)\n
        return v3;\n
    v4 = a0;\n
    v0 = 164;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            if (v7 > 0x400000)\n
            {\n
                v6 = 5;\n
                return v6;\n
            }\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v0, 0x1);\n
    v8 = v4->field_8;\n
    v11 = v8 + 1;\n
    v4->field_8 = v11;\n
    v3 = v4->field_10;\n
    if (v8 + 2 > v3)\n
    {\n
        v10 = v3 * 2;\n
        if (v3 < v10)\n
        {\n
            *(&v3) = 5;\n
            if (v10 > 0x400000)\n
                return v3;\n
            v4->field_0 = cgc_realloc(v4->field_0, v10);\n
            v4->field_10 = v10;\n
            v11 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v11 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4231136:cgc_xpk_pack_map": "typedef struct struct_0 {\n
    void* field_0;\n
    unsigned long long field_8;\n
    unsigned long long field_10;\n
} struct_0;\n
\n
extern char g_400000;\n
\n
long long cgc_xpk_pack_map(unsigned long long a0[3], unsigned long a1)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned long v1;  // [bp-0x18]\n
    unsigned long v3;  // al, Other Possible Types: char\n
    struct_0 *v4;  // rbx\n
    unsigned long v5;  // rdi, Other Possible Types: unsigned long long\n
    char v6;  // rax\n
    unsigned long long v7;  // r14\n
    unsigned long long v8;  // rcx\n
    unsigned long long v10;  // r14\n
    unsigned long v11;  // rdi, Other Possible Types: unsigned long long\n
\n
    v1 = a1;\n
    v3 = 3;\n
    if (a1 > 255)\n
        return v3;\n
    v4 = a0;\n
    v0 = 165;\n
    v5 = a0[1];\n
    v6 = v4->field_10;\n
    if (v5 + 1 > v6)\n
    {\n
        v7 = v6 * 2;\n
        if (v6 < v7)\n
        {\n
            if (v7 > 0x400000)\n
            {\n
                v6 = 5;\n
                return v6;\n
            }\n
            v4->field_0 = cgc_realloc(v4->field_0, v7);\n
            v4->field_10 = v7;\n
            v5 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v5 + v4->field_0, &v0, 0x1);\n
    v8 = v4->field_8;\n
    v11 = v8 + 1;\n
    v4->field_8 = v11;\n
    v3 = v4->field_10;\n
    if (v8 + 2 > v3)\n
    {\n
        v10 = v3 * 2;\n
        if (v3 < v10)\n
        {\n
            *(&v3) = 5;\n
            if (v10 > 0x400000)\n
                return v3;\n
            v4->field_0 = cgc_realloc(v4->field_0, v10);\n
            v4->field_10 = v10;\n
            v11 = v4->field_8;\n
        }\n
    }\n
    cgc_memcpy(v11 + v4->field_0, &v1, 0x1);\n
    v4->field_8 = v4->field_8 + 1;\n
    return 0;\n
}\n
", "4231360:cgc_xpk_unpack_int": "long long cgc_xpk_unpack_int(unsigned long long a0[3], unsigned long long *a1, char *a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x20]\n
    char v1;  // [bp-0x18]\n
    char v3;  // rax\n
    char v4;  // cl\n
    char v5;  // cl\n
    unsigned long long v6;  // rax, Other Possible Types: unsigned long\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (!(!v3))\n
        goto LABEL_4090db;\n
    v3 = 4;\n
    v4 = v0[0] + 80;\n
    switch (v0[0])\n
    {\n
    case -80: case -32:\n
        v6 = v1;\n
        v5 = 1;\n
        break;\n
    case -79:\n
        v6 = *(&v1);\n
        v5 = 1;\n
        break;\n
    case -78:\n
        v6 = *(&v1);\n
        v5 = 1;\n
        break;\n
    case -77:\n
        v5 = 1;\n
        v6 = *(&v1);\n
        break;\n
    case -64: case 0:\n
        v6 = v1;\n
        goto LABEL_409143;\n
    case -63:\n
        v6 = *(&v1);\n
        goto LABEL_409143;\n
    case -62:\n
        v6 = *(&v1);\n
        goto LABEL_409143;\n
    case -61:\n
        v6 = *(&v1);\n
        goto LABEL_409143;\n
    default:\n
LABEL_4090db:\n
        return v3;\n
    }\n
LABEL_409143:\n
    v5 = 0;\n
    *(a1) = v6;\n
    *(a2) = v5;\n
    return 0;\n
}\n
", "4231509:sub_409155": null, "4231520:cgc_xpk_unpack_nil": "long long cgc_xpk_unpack_nil(unsigned long long a0[3], unsigned long a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x10]\n
    int tmp_39;  // tmp #39\n
    unsigned long long v2;  // rax\n
\n
    v2 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    tmp_39 = v2;\n
    if (!tmp_39)\n
        return (v0[0] != 166) * 4;\n
    return v2;\n
}\n
", "4231561:sub_409189": null, "4231568:cgc_xpk_unpack_bool": "long long cgc_xpk_unpack_bool(unsigned long long a0[3], char *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v3;  // rax\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (v3)\n
        return v3;\n
    v3 = 4;\n
    if (v0[0] + 93 < 254)\n
        return v3;\n
    *(a1) = v1;\n
    return 0;\n
}\n
", "4231621:sub_4091c5": null, "4231632:cgc_xpk_unpack_str": "long long cgc_xpk_unpack_str(unsigned long long a0[3], unsigned long long *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v3;  // rax\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (v3)\n
        return v3;\n
    if (v0[0] == 208)\n
    {\n
        *(a1) = *(&v1);\n
        return 0;\n
    }\n
    v3 = 4;\n
    if (v0[0] != 128)\n
        return v3;\n
}\n
", "4231689:sub_409209": null, "4231696:cgc_xpk_unpack_bytes": "long long cgc_xpk_unpack_bytes(unsigned long long a0[3], unsigned long long *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v3;  // rax\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (v3)\n
        return v3;\n
    v3 = 4;\n
    if (v0[0] != 163)\n
        return v3;\n
    *(a1) = *(&v1);\n
    return 0;\n
}\n
", "4231746:sub_409242": null, "4231760:cgc_xpk_unpack_array": "long long cgc_xpk_unpack_array(unsigned long long a0[3], unsigned long long *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v3;  // rax\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (v3)\n
        return v3;\n
    v3 = 4;\n
    if (v0[0] != 164)\n
        return v3;\n
    *(a1) = *(&v1);\n
    return 0;\n
}\n
", "4231810:sub_409282": null, "4231824:cgc_xpk_unpack_map": "long long cgc_xpk_unpack_map(unsigned long long a0[3], unsigned long long *a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    char v0[9];  // [bp-0x18]\n
    char v1;  // [bp-0x10]\n
    char v3;  // rax\n
\n
    v3 = cgc_xpk_read_obj(a0, v0, a2, a3, a4);\n
    if (v3)\n
        return v3;\n
    v3 = 4;\n
    if (v0[0] != 165)\n
        return v3;\n
    *(a1) = *(&v1);\n
    return 0;\n
}\n
", "4231876:_fini": "long long _fini()\n
{\n
    unsigned long v1;  // rax\n
\n
    return v1;\n
}\n
", "5242880:__libc_start_main": null, "5242888:cgc__terminate": null, "5242896:cgc_transmit": null, "5242904:cgc_random": null, "5242912:cgc_allocate": null, "5242920:cgc_deallocate": null, "5242928:cgc_receive": null, "6295632:UnresolvableJumpTarget": null, "6295640:UnresolvableCallTarget": null}