{"4202496:_init": "extern struct_0 *g_40d94c;\n
\n
int _init()\n
{\n
    if (g_40d94c)\n
    {\n
        g_40d94c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 47203;\n
    v6 = v5 + 3174;\n
    v7 = v5 + 3174;\n
    if (v7 == v6)\n
        return v5 + 3174;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 47139;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 3174;\n
    v9 = (v6 + 3174 - (v6 + 3174) >> 31) + (3174 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40d948;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40d948)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_read_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = \"<\";\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4203125:sub_402275": null, "4203136:cgc_write_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = \"<\";\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4203285:sub_402315": null, "4203296:cgc_read_line": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_line(unsigned int v6, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char v1;  // [bp-0x21]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x11]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
\n
    v2 = \"<\";\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v4 != 10)\n
            v1 = v3 < 4095;\n
        if (!(v1 & 1))\n
            break;\n
        v7 = v3;\n
        v3 = v7 + 1;\n
        *((v2 + v7 + 12700)) = v4;\n
    }\n
    v8 = cgc_calloc();\n
    *(a0) = v8;\n
    if (!v8)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v0 = v3;\n
    cgc_memcpy(*(a0), v2 + 12700);\n
    v5 = v3;\n
    return v5;\n
}\n
", "4203531:sub_40240b": null, "4203536:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v1 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v1;\n
        v1 = v5 + 1;\n
        *(v5) = tmp_19;\n
    }\n
    return v2;\n
}\n
", "4203622:sub_402466": null, "4203632:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a0;\n
    }\n
    return v1;\n
}\n
", "4203702:sub_4024b6": null, "4203712:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
    char *v5;  // eax\n
    char *v6;  // eax\n
    char *v7;  // eax\n
\n
    v1 = v3;\n
    v0 = a0;\n
    if (v1 == v0)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    if (v0 < v1)\n
    {\n
        while (true)\n
        {\n
            v4 = a1;\n
            a1 = v4 + 1;\n
            if (!v4)\n
                break;\n
            v1[a1] = *((v0 + a1));\n
        }\n
    }\n
    else\n
    {\n
        while (true)\n
        {\n
            v5 = a1;\n
            a1 = v5 + 1;\n
            if (!v5)\n
                break;\n
            v6 = v0;\n
            v0 = v6 + 1;\n
            tmp_19 = *(v6);\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            *(v7) = tmp_19;\n
        }\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4203907:sub_402583": null, "4203920:cgc_memcmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_memcmp(struct_0 *v3, struct_0 *a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
    struct_0 *v7;  // ecx\n
\n
    v1 = v3;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        if (!v4)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        v5 = v1;\n
        v1 = &v5->field_0;\n
        v6 = v5->field_-1;\n
        v7 = v0;\n
        v0 = &v7->field_0;\n
        if (v6 != v7->field_-1)\n
        {\n
            v2 = *((v1 - 1)) - *((v0 - 1));\n
            return v2;\n
        }\n
    }\n
}\n
", "4204047:sub_40260f": null, "4204048:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204104:sub_402648": null, "4204112:cgc_strnlen": "int cgc_strnlen(char *v2, unsigned int a0)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // ecx\n
    char *v4;  // eax\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v3 = a0;\n
        a0 = v3 - 1;\n
        v0 = 0;\n
        if (v3)\n
        {\n
            v4 = v2;\n
            v2 = v4 + 1;\n
            v0 = *(v4);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4204217:sub_4026b9": null, "4204224:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4204337:sub_402731": null, "4204352:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        v1 = 0;\n
        if (a1)\n
        {\n
            v1 = 0;\n
            if (*(v2))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4204491:sub_4027cb": null, "4204496:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4204579:sub_402823": null, "4204592:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4204747:sub_4028cb": null, "4204752:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    v1 = v3;\n
    v3 = &v3[cgc_strlen(v3)];\n
    cgc_strcpy(v3, a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4204833:sub_402921": null, "4204848:cgc_strncat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncat(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    v1 = v3;\n
    v3 = &v3[cgc_strlen(v3)];\n
    cgc_strncpy(v3, a0, a1);\n
    v3[a1] = 0;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4204949:sub_402995": null, "4204960:cgc_strchr": "int cgc_strchr(char *v1, char a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (!*(v1))\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else if (*(v1) != a0)\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
}\n
", "4205045:sub_4029f5": null, "4205056:cgc_strrchr": "int cgc_strrchr(char *v2, char a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v2); v2 += 1);\n
    while (true)\n
    {\n
        if (v2 < v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*(v2) == a0)\n
        {\n
            v1 = v2;\n
            return v1;\n
        }\n
        v2 -= 1;\n
    }\n
}\n
", "4205185:sub_402a81": null, "4205200:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[16796];\n
    struct struct_1 *field_419c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(unsigned int v4, char a0)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // ebx\n
\n
    v0 = &\"<\";\n
    if (v4)\n
    {\n
LABEL_402aec:\n
        if (v0->field_419c && !(!cgc_strlen(v0->field_419c)))\n
            goto LABEL_402b22;\n
        v0->field_419c = v4;\n
LABEL_402b22:\n
        for (; v0->field_419c->field_0 == a0; v5->field_419c = v5->field_419c + 1)\n
        {\n
            v5 = v0;\n
        }\n
        if (!cgc_strlen(v0->field_419c))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v6 = v0;\n
        v1 = v6->field_419c;\n
        v2 = cgc_strchr(v6->field_419c, a0);\n
        if (!v2)\n
        {\n
            v0->field_419c = 0;\n
        }\n
        else\n
        {\n
            *(v2) = 0;\n
            v0->field_419c = &v2[1];\n
        }\n
        v3 = v1;\n
        return v3;\n
    }\n
    else\n
    {\n
        if (v0->field_419c && !(!cgc_strlen(v0->field_419c)))\n
            goto LABEL_402aec;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4205536:cgc_to_hex": "int cgc_to_hex(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 < 10)\n
    {\n
        v1 = v2 + 48;\n
        return v1;\n
    }\n
    else if (v2 < 16)\n
    {\n
        v1 = v2 + 87;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4205615:sub_402c2f": null, "4205616:cgc_to_bin": "int cgc_to_bin(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 >= 48 && v2 <= 57)\n
    {\n
        v1 = v2 - 48;\n
        return v1;\n
    }\n
    if (v2 >= 97 && v2 <= 102)\n
    {\n
        v1 = v2 + -87;\n
        return v1;\n
    }\n
    if (v2 >= 65 && v2 <= 70)\n
    {\n
        v1 = v2 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4205765:sub_402cc5": null, "4205776:cgc_bin_to_hex": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_bin_to_hex(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_18;  // tmp #18\n
    int tmp_11;  // tmp #11\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v0 = \"<\";\n
    v1 = a0;\n
    for (v2 = 0; v2 < a1; v2 += 1)\n
    {\n
        tmp_18 = cgc_to_hex(v1[v2] >> 4);\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(v4) = tmp_18;\n
        tmp_11 = cgc_to_hex(v1[v2] & 15);\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = tmp_11;\n
    }\n
    return v3;\n
}\n
", "4205939:sub_402d73": null, "4205952:cgc_hex_to_uint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_hex_to_uint(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"<\";\n
    v3 = 0;\n
    for (v2 = 4; v2 > 0; v2 -= 1)\n
    {\n
        v0 = v3 * 0x100;\n
        v3 = v0 | cgc_to_bin(v4[2 + 2 * v2]) * 16;\n
        v3 = cgc_to_bin(v4[1 + 2 * v2]) | v3;\n
    }\n
    return v3;\n
}\n
", "4206113:sub_402e21": null, "4206128:cgc_itoa": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_itoa(unsigned int v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0xd]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v6;  // eax\n
    char *v7;  // eax\n
    unsigned int v8;  // eax\n
    char *v9;  // eax\n
    char *v10;  // eax\n
    char *v11;  // eax\n
\n
    v0 = \"<\";\n
    v3 = 0;\n
    v2 = a0;\n
    v1 = a0;\n
    if (!v5)\n
    {\n
        v4 = cgc_strcpy(a0, v0 - 9684);\n
        return v4;\n
    }\n
    if (v5 < 0)\n
    {\n
        a0 += 1;\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        *(v6) = 45;\n
        v5 = -(v5);\n
    }\n
    for (; v5; v5 = (v8 >> 31 CONCAT v8) /m 10)\n
    {\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        *(v7) = ((v5 >> 31 CONCAT v5) /m 10 >> 32) + 48;\n
        v8 = v5;\n
    }\n
    v9 = v2;\n
    v2 = v9 + 1;\n
    for (*(v9) = 0; &v2[-1 * a0] > 0; *(v11) = v3)\n
    {\n
        v3 = *(a0);\n
        v10 = a0;\n
        a0 = v10 + 1;\n
        *(v10) = *(v2);\n
        v11 = v2;\n
        v2 = v11 + 1;\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4206411:sub_402f4b": null, "4206416:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(unsigned int v6)\n
{\n
    char *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = \"<\";\n
    v5 = 1;\n
    v4 = 0;\n
    if (v4[v6] == 45)\n
        v5 = -1;\n
    v3 = 0;\n
    v2 = v4;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(v6))\n
            break;\n
        v3 = v3 * 10 + *((v6 + v2)) - 48;\n
        v2 += 1;\n
    }\n
    v3 *= v5;\n
    return v3;\n
}\n
", "4206582:sub_402ff6": null, "4206592:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 7);\n
}\n
", "4206643:sub_403033": null, "4206656:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 6);\n
}\n
", "4206707:sub_403073": null, "4206720:cgc_isascii": "int cgc_isascii(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 0)\n
        v1 = v2 < 128;\n
    return v1 & 1;\n
}\n
", "4206768:cgc_isblank": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isblank(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 64);\n
}\n
", "4206819:sub_4030e3": null, "4206832:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 32);\n
}\n
", "4206883:sub_403123": null, "4206896:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 1);\n
}\n
", "4206947:sub_403163": null, "4206960:cgc_isgraph": "int cgc_isgraph(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 > 32)\n
        v1 = v2 <= 126;\n
    return v1 & 1;\n
}\n
", "4207005:sub_40319d": null, "4207008:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 4);\n
}\n
", "4207059:sub_4031d3": null, "4207072:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 <= 126;\n
    return v1 & 1;\n
}\n
", "4207117:sub_40320d": null, "4207120:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    v1 = 0;\n
    if (cgc_isprint(v3))\n
    {\n
        v1 = !(*((v0 + v3 + 12392)) & 15);\n
        return v1 & 1;\n
    }\n
    return v1 & 1;\n
}\n
", "4207218:sub_403272": null, "4207232:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 8);\n
}\n
", "4207283:sub_4032b3": null, "4207296:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 2);\n
}\n
", "4207347:sub_4032f3": null, "4207360:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (*((4262336 + v0)) & 16);\n
}\n
", "4207411:sub_403333": null, "4207424:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & -33;\n
    return v0;\n
}\n
", "4207495:sub_403387": null, "4207504:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isalpha(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4207575:sub_4033d7": null, "4207584:cgc_transmit_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = \"<\";\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    if (!a1)\n
    {\n
        v5 = 2;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 < a1)\n
        {\n
            v0 = &v3;\n
            v2 = cgc_transmit(v6, v4 + a0, a1 - v4);\n
            if (v2)\n
            {\n
                v5 = 3;\n
                return v5;\n
            }\n
            v4 = v3 + v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207788:sub_4034ac": null, "4207792:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = v1;\n
    return cgc_vprintf(v2);\n
}\n
", "4207844:sub_4034e4": null, "4207856:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4207915:sub_40352b": null, "4207920:cgc_vfprintf": "int cgc_vfprintf(unsigned int *v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a1;\n
    return cgc_vdprintf(*(v1), a0);\n
}\n
", "4207981:sub_40356d": null, "4207984:cgc_vdprintf": "int cgc_vdprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x101c]\n
    void* v1;  // [bp-0x1014]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // esi\n
\n
    v2 = v4;\n
    v1 = 0;\n
    cgc_printf_core(cgc_fd_printer, &v0, a0, a1, v3, 0);\n
    return v1;\n
}\n
", "4208099:sub_4035e3": null, "4208112:cgc_printf_core": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_core(struct struct_0 **v9, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    void* v0;  // [bp-0xd4], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    unsigned int v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x24]\n
    char v5;  // [bp-0x1d]\n
    void* v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v10;  // eax\n
    char *v11;  // eax\n
\n
    v2 = \"<\";\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v4 = 0;\n
    v3 = a2;\n
    v10 = a1;\n
    a1 = v10 + 1;\n
    for (v5 = *(v10); v5; v5 = *(v11))\n
    {\n
        v1 = v8;\n
        if (v1 <= 15)\n
        {\n
            if (v5 == 37)\n
            {\n
                v8 = 2;\n
            }\n
            else if (v5 != 92)\n
            {\n
                v0 = 0;\n
                v9(v5, a0);\n
            }\n
            else\n
            {\n
                v8 = 1;\n
            }\n
        }\n
        v11 = a1;\n
        a1 = v11 + 1;\n
    }\n
    v0 = 2;\n
    return v9(0, a0);\n
}\n
", "4208351:sub_4036df": "int sub_4036df()\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_7;  // tmp #7\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0xc]\n
    struct struct_0 **v6;  // [bp+0x8], Other Possible Types: void*\n
    char v7;  // [bp+0xc]\n
    char v8;  // [bp+0x10]\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    struct struct_0 **v17;  // eax\n
\n
    v15 = v0 - 34;\n
    tmp_7 = v15;\n
    v16 = v15 - 86;\n
    if (tmp_7 <= 86)\n
        goto *(((stack_base)[152] + eax<4> * 4 - 10032)) + (stack_base)[152];\n
    if (v0 > 48 && v0 < 56)\n
    {\n
        v3 = 3;\n
        v2 = 1;\n
        v1 = v0 - 48;\n
        goto LABEL_40389e;\n
    }\n
    v17 = v6;\n
    v6 = 0;\n
    v17(*(*(&v8)), *(&v7));\n
LABEL_40389e:\n
}\n
", "4208825:sub_4038b9": "int sub_4038b9()\n
{\n
    char v0;  // [bp-0x19]\n
    void* v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v4;  // [bp+0x8], Other Possible Types: char\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // [bp+0x10], Other Possible Types: char\n
    struct struct_0 **v7;  // eax\n
\n
    if (v0 != 37)\n
    {\n
        v2 = 15;\n
        v1 = 0;\n
        v6 = *(&v6) - 1;\n
    }\n
    else\n
    {\n
        v7 = *(&v4);\n
        v4 = 0;\n
        v7(v0, *(&v5));\n
        v2 = 0;\n
    }\n
}\n
", "4208915:sub_403913": "int sub_403913()\n
{\n
    char v0;  // [bp-0x19]\n
    char v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc]\n
    void* v5;  // [bp+0x8], Other Possible Types: char, struct struct_0 **\n
    char v6;  // [bp+0xc]\n
    unsigned int v7;  // [bp+0x10], Other Possible Types: char\n
    struct struct_0 **v8;  // eax\n
    struct struct_0 **v9;  // eax\n
\n
    if (v0 > 48 && v0 < 56 && *(&v2) < 3)\n
    {\n
        v2 = *(&v2) + 1;\n
        v1 = *(&v1) * 8 + v0 - 48;\n
        if (v2 == 3)\n
        {\n
            v9 = v5;\n
            v5 = 0;\n
            v9(v1, *(&v6));\n
            v3 = 0;\n
        }\n
        goto LABEL_4039c6;\n
    }\n
    v8 = *(&v5);\n
    v5 = 0;\n
    v8(v1, *(&v6));\n
    v3 = 0;\n
    v7 = *(&v7) - 1;\n
LABEL_4039c6:\n
}\n
", "4209099:sub_4039cb": "int sub_4039cb()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    char v1;  // [bp-0x19]\n
    char v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc]\n
    void* v6;  // [bp+0x8], Other Possible Types: char, struct struct_0 **\n
    char v7;  // [bp+0xc]\n
    char v8;  // [bp+0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    struct struct_0 **v10;  // eax\n
\n
    if (cgc_isxdigit(v1) && *(&v3) < 2)\n
    {\n
        v3 = *(&v3) + 1;\n
        v0 = *(&v2) * 16;\n
        v2 = v0 + cgc_hex_value_of();\n
        if (v3 == 2)\n
        {\n
            v10 = v6;\n
            v6 = 0;\n
            v10(v2, *(&v7));\n
            v4 = 0;\n
        }\n
        goto LABEL_403a98;\n
    }\n
    v9 = *(&v6);\n
    v6 = 0;\n
    v9(*(&v2), *(&v7));\n
    v4 = 0;\n
    v8 = *(&v8) - 1;\n
LABEL_403a98:\n
}\n
", "4209309:sub_403a9d": "int sub_403a9d()\n
{\n
    void* v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x19]\n
    void* v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    char *v8;  // [bp+0x10], Other Possible Types: unsigned int, char\n
    char *v9;  // eax\n
\n
    v3 = -1;\n
    v2 = -1;\n
    v5 = 0;\n
    v0 = 0;\n
    v1 = -1;\n
    if (v4 == 48)\n
    {\n
        v8 = *(&v8) - 1;\n
        v6 = 5;\n
    }\n
    else if (!cgc_isdigit(v4))\n
    {\n
        v8 = *(&v8) - 1;\n
        v6 = 5;\n
    }\n
    else\n
    {\n
        for (v3 = 0; cgc_isdigit(v4); v4 = *(v9))\n
        {\n
            v3 = v3 * 10 + v4 - 48;\n
            v9 = v8;\n
            v8 = v9 + 1;\n
        }\n
        if (v4 == 36)\n
        {\n
            v1 = v3 - 1;\n
            v3 = 0;\n
            v6 = 5;\n
        }\n
        else\n
        {\n
            v8 = *(&v8) - 1;\n
            v6 = 7;\n
        }\n
    }\n
}\n
", "4209559:sub_403b97": "int sub_403b97()\n
{\n
}\n
", "4209733:sub_403c45": "int sub_403c45()\n
{\n
    unsigned int *v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x34]\n
    void* v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    char v4;  // [bp-0x19]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // [bp+0x10], Other Possible Types: unsigned int, char\n
    char *v8;  // eax\n
    char *v9;  // eax\n
    unsigned int *v10;  // eax\n
    char *v11;  // eax\n
\n
    if (v4 == 42)\n
    {\n
        v8 = *(&v7);\n
        v7 = v8 + 1;\n
        v4 = *(v8);\n
        if (!cgc_isdigit(v4))\n
        {\n
            v10 = *(&v3);\n
            v3 = v10 + 1;\n
            v0 = v10;\n
            v7 += 1;\n
        }\n
        else\n
        {\n
            for (v0 = 0; cgc_isdigit(v4); v4 = *(v9))\n
            {\n
                v0 = v0 * 10 + v4 - 48;\n
                v9 = v7;\n
                v7 = v9 + 1;\n
            }\n
            v0 -= 1;\n
            if ((Not (Not (Load(addr=stack_base-25, size=1, endness=Iend_LE) == 0x24<8>)))) { Goto None } else { Goto None }\n
        }\n
        v2 = *((*(&v1) + v0 * 4));\n
    }\n
    else if (!cgc_isdigit(v4))\n
    {\n
        v7 += 1;\n
    }\n
    else\n
    {\n
        for (v2 = 0; cgc_isdigit(v4); v4 = *(v11))\n
        {\n
            v2 = v2 * 10 + v4 - 48;\n
            v11 = v7;\n
            v7 = v11 + 1;\n
        }\n
        v7 += 1;\n
    }\n
    v5 = 7;\n
}\n
", "4210075:sub_403d9b": "int sub_403d9b()\n
{\n
    unsigned int *v0;  // [bp-0x3c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x34]\n
    void* v2;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x19]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // [bp+0x10], Other Possible Types: unsigned int, char\n
    char *v8;  // eax\n
    char *v9;  // eax\n
    char *v10;  // eax\n
    unsigned int *v11;  // eax\n
    char *v12;  // eax\n
\n
    if (v4 != 46)\n
    {\n
        v7 += 1;\n
    }\n
    else\n
    {\n
        v8 = *(&v7);\n
        v7 = v8 + 1;\n
        v4 = *(v8);\n
        if (v4 == 42)\n
        {\n
            v9 = v7;\n
            v7 = v9 + 1;\n
            v4 = *(v9);\n
            if (!cgc_isdigit(v4))\n
            {\n
                v11 = *(&v3);\n
                v3 = v11 + 1;\n
                v0 = v11;\n
                v7 += 1;\n
            }\n
            else\n
            {\n
                for (v0 = 0; cgc_isdigit(v4); v4 = *(v10))\n
                {\n
                    v0 = v0 * 10 + v4 - 48;\n
                    v10 = v7;\n
                    v7 = v10 + 1;\n
                }\n
                v0 -= 1;\n
                if ((Not (Not (Load(addr=stack_base-25, size=1, endness=Iend_LE) == 0x24<8>)))) { Goto None } else { Goto None }\n
            }\n
            v2 = *((*(&v1) + v0 * 4));\n
        }\n
        else if (!cgc_isdigit(v4))\n
        {\n
            v7 += 1;\n
        }\n
        else\n
        {\n
            for (v2 = 0; cgc_isdigit(v4); v4 = *(v12))\n
            {\n
                v2 = v2 * 10 + v4 - 48;\n
                v12 = v7;\n
                v7 = v12 + 1;\n
            }\n
            v7 += 1;\n
        }\n
    }\n
    v5 = 8;\n
}\n
", "4210460:sub_403f1c": "int sub_403f1c()\n
{\n
    char v0;  // [bp-0x19]\n
    int tmp_7;  // tmp #7\n
    unsigned int v3;  // [bp+0x10], Other Possible Types: char\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v6 = v0 - 76;\n
    tmp_7 = v6;\n
    v7 = v6 - 46;\n
    if (tmp_7 > 46)\n
        v3 = *(&v3) - 1;\n
    else\n
        goto *(((stack_base)[152] + eax<4> * 4 - 10288)) + (stack_base)[152];\n
}\n
", "4210655:sub_403fdf": "int sub_403fdf()\n
{\n
    unsigned int v0;  // [bp-0xb0]\n
    unsigned int v1;  // [bp-0x64]\n
    char v2;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20], Other Possible Types: char\n
    char v4;  // [bp-0x19]\n
    unsigned int v44;  // eax\n
\n
    v1 = 1;\n
    if (*(&v2) == -1)\n
    {\n
        v44 = *(&v3);\n
        v3 = v44 + 1;\n
        v2 = v44;\n
    }\n
    v0 = v4 - 65;\n
    if (!(v0 <= 55))\n
        goto LABEL_0x405763;\n
    goto *(((stack_base)[152] + (stack_base)[176] * 4 - 10512)) + (stack_base)[152];\n
}\n
", "4216753:sub_4057b1": null, "4216768:cgc_fd_printer": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fd_printer(char v4, unsigned int a0[3], unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2[3];  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // esi\n
    unsigned int v6;  // ecx\n
\n
    v0 = \"<\";\n
    v2[0] = a0;\n
    if (!a1)\n
    {\n
        v5 = v2;\n
        v6 = v5[2];\n
        v5[2] = v6 + 1;\n
        *(12 + &v2[0] + (v6 & 4095)) = v4;\n
        if (!(v2[2] & 4095) && cgc_transmit_all(v2[0], &v4, 0x1000))\n
            cgc__terminate();\n
    }\n
    else if (a1 == 1)\n
    {\n
        v3 = v2[2];\n
        return v3;\n
    }\n
    else if (a1 == 2)\n
    {\n
        v1 = v2[2] & 4095;\n
        if (v1 && cgc_transmit_all(v2[0], v2 + 1, v1))\n
            cgc__terminate();\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4217085:sub_4058fd": null, "4217088:cgc_fgetc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgetc(unsigned int v3[4])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v4[4];  // edx\n
    unsigned int v5;  // ecx\n
    unsigned int v6[4];  // eax\n
    unsigned int v7[4];  // eax\n
    unsigned int v8[4];  // edx\n
    unsigned int v9;  // ecx\n
\n
    v1 = \"<\";\n
    if (v3[3] < v3[2])\n
    {\n
        v4 = v3;\n
        v5 = v4[3];\n
        v4[3] = v5 + 1;\n
        v2 = *(16 + &v3[0] + v5);\n
        return v2;\n
    }\n
    v3[2] = 0;\n
    v3[3] = 0;\n
    v0 = &v3[2];\n
    if (cgc_receive(v3[0], v3 + 1, 0x1000))\n
    {\n
        v6 = v3;\n
        v6[1] = v6[1] | 2;\n
        v2 = -1;\n
        return v2;\n
    }\n
    else if (!v3[2])\n
    {\n
        v7 = v3;\n
        v7[1] = v7[1] | 4;\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v8 = v3;\n
        v9 = v8[3];\n
        v8[3] = v9 + 1;\n
        v2 = *(16 + &v3[0] + v9);\n
        return v2;\n
    }\n
}\n
", "4217331:sub_4059f3": null, "4217344:cgc_getc": "int cgc_getc(unsigned int v0[4])\n
{\n
    return cgc_fgetc(v0);\n
}\n
", "4217381:sub_405a25": null, "4217392:cgc_getchar": "extern unsigned int cgc_stdin[4];\n
\n
int cgc_getchar()\n
{\n
    return cgc_getc(cgc_stdin);\n
}\n
", "4217429:sub_405a55": null, "4217440:cgc_fgets": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fgets(unsigned int v4, unsigned int a0, struct_0 *a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
\n
    v0 = \"<\";\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a0 - 1)\n
        {\n
LABEL_405b14:\n
            *((v4 + v2)) = 0;\n
            v3 = v4;\n
            return v3;\n
        }\n
        v1 = cgc_fgetc(a1);\n
        if (v1 == -1)\n
        {\n
            if ((a1->field_4 & 4) && !(v2 <= 0))\n
                goto LABEL_405b14;\n
            v3 = 0;\n
            return v3;\n
        }\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        *((v4 + v5)) = v1;\n
        if (v1 == 10)\n
            goto LABEL_405b14;\n
    }\n
}\n
", "4217646:sub_405b2e": null, "4217648:cgc_fread": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2[4])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
    char *v7;  // ecx\n
\n
    v0 = \"<\";\n
    v2 = 0;\n
    for (v4 = 0; v4 < a1; v4 += 1)\n
    {\n
        for (v3 = 0; v3 < a0; v3 += 1)\n
        {\n
            v1 = cgc_fgetc(a2);\n
            if (v1 == -1)\n
            {\n
                v5 = v4;\n
                return v5;\n
            }\n
            v7 = v2;\n
            v2 = v7 + 1;\n
            v7[v6] = v1;\n
        }\n
    }\n
    v5 = v4;\n
    return v5;\n
}\n
", "4217837:sub_405bed": null, "4217840:cgc_hex_value_of": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_hex_value_of(char v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    else if (cgc_isalpha(v3))\n
    {\n
        v1 = cgc_toupper(v3) + -55;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = -1;\n
        return v1;\n
    }\n
}\n
", "4217975:sub_405c77": null, "4217984:cgc_r_utoa": "int cgc_r_utoa(unsigned int v2, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v1 = a0;\n
    for (*(v1) = 48; v2; v2 = (0 CONCAT v2) /m 10)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = ((0 CONCAT v2) /m 10 >> 32) + 48;\n
    }\n
    if (v1 == a0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 - 1;\n
    return v0;\n
}\n
", "4218108:sub_405cfc": null, "4218112:cgc_r_otoa": "int cgc_r_otoa(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
\n
    v1 = v3;\n
    v0 = a0;\n
    return cgc_r_llotoa(v2, 0);\n
}\n
", "4218168:sub_405d38": null, "4218176:cgc_r_xtoa": "int cgc_r_xtoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v0 = a1;\n
    return cgc_r_llxtoa(v3, 0, a0);\n
}\n
", "4218243:sub_405d83": null, "4218256:cgc_r_llotoa": "int cgc_r_llotoa(unsigned int v2, unsigned int a0, char *a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v1 = a1;\n
    for (*(v1) = 48; !(!v2) || !(!a0); v2 = (v4 CONCAT v2) * 0x20000000 >> 32)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        *(v3) = v2 & 7 | 48;\n
        v4 = a0;\n
        a0 = v4 / 8;\n
    }\n
    if (v1 == a1)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 - 1;\n
    return v0;\n
}\n
", "4218390:sub_405e16": null, "4218400:cgc_r_llxtoa": "int cgc_r_llxtoa(unsigned int v4, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    unsigned int v6;  // ecx\n
\n
    v3 = a1;\n
    for (*(v3) = 48; !(!v4) || !(!a0); v4 = (v6 CONCAT v4) * 0x10000000 >> 32)\n
    {\n
        v2 = v4 & 15;\n
        if (v2 < 10)\n
        {\n
            v2 += 48;\n
        }\n
        else\n
        {\n
            if (a2)\n
                v1 = v2 - -55;\n
            else\n
                v1 = v2 - -87;\n
            v2 = v1;\n
        }\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = v2;\n
        v6 = a0;\n
        a0 = v6 / 16;\n
    }\n
    if (v3 == a1)\n
    {\n
        v0 = v3;\n
        return v0;\n
    }\n
    v0 = v3 - 1;\n
    return v0;\n
}\n
", "4218614:sub_405ef6": null, "4218624:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[12648];\n
    unsigned int field_3168;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x29]\n
    unsigned int v5;  // [bp-0x28]\n
    struct_0 *v6;  // [bp-0x24]\n
    unsigned int *v7;  // [bp-0x20]\n
    unsigned int *v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v6 = &\"<\";\n
    v11 = 0;\n
    if ((v13 + 3 & -0x4) + 8 < v13)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v13 = (v13 + 3 & -0x4) + 8;\n
    if (v13 < v6->field_3168)\n
        v13 = v6->field_3168;\n
    if (v13 > 4095)\n
    {\n
        v12 = cgc_allocate_large_chunk();\n
        return v12;\n
    }\n
    v5 = cgc_log_base_two();\n
    v10 = v5 - cgc_log_base_two();\n
    if (v10 >= 8)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (!v11)\n
            v4 = v10 < 8;\n
        if (!(v4 & 1))\n
            break;\n
        v14 = v6;\n
        v15 = v10;\n
        v10 = v15 + 1;\n
        v0 = v13;\n
        v9 = cgc_list_find(&v14[1].padding_0[4148 + 8 * v15], &v14[2].padding_0[5136]);\n
        if (!v9)\n
            v3 = 0;\n
        else\n
            v3 = -5 + v9;\n
        v8 = v3;\n
        v11 = v8;\n
    }\n
    if (!v11)\n
    {\n
        v11 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v7 = v11;\n
        v2 = &v6[1].padding_0[4148 + 8 + 8 * v10];\n
        if (!v7)\n
            v1 = 0;\n
        else\n
            v1 = v7 + 1;\n
        cgc_list_remove(v2);\n
    }\n
    cgc_mark_allocated();\n
    if ((*(v11) & -2) > v13)\n
        v11 = cgc_split_chunk(v11);\n
    v12 = cgc_chunk_to_ptr();\n
    return v12;\n
}\n
", "4219182:sub_40612e": null, "4219184:cgc_allocate_large_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_large_chunk(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = \"<\";\n
    v0 = &v2;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = v5;\n
    cgc_mark_allocated();\n
    v3 = cgc_chunk_to_ptr();\n
    return v3;\n
}\n
", "4219306:sub_4061aa": null, "4219312:cgc_log_base_two": "int cgc_log_base_two(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4219366:sub_4061e6": null, "4219376:cgc_list_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_find(struct struct_0 **v4, struct struct_0 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"<\";\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        if (v2)\n
        {\n
            v0 = a1;\n
            if (a0(v2))\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
    }\n
}\n
", "4219500:sub_40626c": null, "4219504:cgc_find_fit": "int cgc_find_fit(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    v4 = a0;\n
    v2 = v5;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    v3 = v1;\n
    return !((*(v3) & -2) < v4);\n
}\n
", "4219604:sub_4062d4": null, "4219616:cgc_grow_heap": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_grow_heap()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = \"<\";\n
    v0 = &v2;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = 0x1000;\n
    cgc_mark_free();\n
    v3 = v2;\n
    return v3;\n
}\n
", "4219726:sub_40634e": null, "4219728:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4219838:sub_4063be": null, "4219840:cgc_mark_allocated": "int cgc_mark_allocated(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) | 1;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4219878:sub_4063e6": null, "4219888:cgc_split_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_sizes;\n
\n
int cgc_split_chunk(unsigned int *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"<\";\n
    v2 = v4 + a0;\n
    v1 = *(v4) & -2;\n
    if ((*(v4) & -2) <= a0 + size_class_sizes)\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
    *(v4) = a0;\n
    cgc_mark_allocated(v4);\n
    *(v2) = v1 - a0;\n
    cgc_mark_allocated(v2);\n
    cgc_chunk_to_ptr();\n
    cgc_free();\n
    v3 = v4;\n
    return v3;\n
}\n
", "4220059:sub_40649b": null, "4220064:cgc_chunk_to_ptr": "int cgc_chunk_to_ptr(unsigned int v0)\n
{\n
    return v0 + 4;\n
}\n
", "4220082:sub_4064b2": null, "4220096:cgc_free": "typedef struct struct_0 {\n
    char padding_0[12648];\n
    unsigned int field_3168;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebx\n
\n
    v5 = v7;\n
    v2 = &\"<\";\n
    v8 = cgc_ptr_to_chunk();\n
    v4 = v8;\n
    if (!v6)\n
        return v8;\n
    cgc_mark_free();\n
    v4 = cgc_coalesce();\n
    v1 = cgc_log_base_two(*(v4) & -2);\n
    v3 = v1 - cgc_log_base_two(v2->field_3168);\n
    if (v3 >= 8)\n
        v3 = 7;\n
    v9 = v2;\n
    v0 = &v9[2].padding_0[3488];\n
    v8 = cgc_list_insert_in_order(&v9[1].padding_0[4148 + 8 * v3], v4 + 1);\n
    return v8;\n
}\n
", "4220298:sub_40658a": null, "4220304:cgc_ptr_to_chunk": "int cgc_ptr_to_chunk(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4220373:sub_4065d5": null, "4220384:cgc_mark_free": "int cgc_mark_free(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) & -2;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4220422:sub_406606": null, "4220432:cgc_coalesce": "typedef struct struct_0 {\n
    char padding_0[12648];\n
    unsigned int field_3168;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_1 *v12)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[2];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    unsigned int *v7;  // [bp-0x1c]\n
    unsigned int *v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v6 = &\"<\";\n
    v11 = 0;\n
    v10 = 0;\n
    if ((v12 & 4095))\n
        v10 = v12 + -(v12->field_0 & -2);\n
    if (((v12 + (v12->field_-4 & -2)) & 4095))\n
        v11 = v12 + (v12->field_-4 & -2);\n
    if (v10 && !(*(v10) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v10) & -2);\n
        v9 = v5 - cgc_log_base_two(v6->field_3168);\n
        if (v9 < 8)\n
        {\n
            v8 = v10;\n
            v4[0] = &v6[1].padding_0[4148 + 8 * v9];\n
            if (!v8)\n
                v3 = 0;\n
            else\n
                v3 = v8 + 1;\n
            cgc_list_remove(v4, v3);\n
            *(v10) = (v12->field_-4 & -2) + (*(v10) & -2);\n
            cgc_mark_free(v10);\n
            v12 = v10;\n
        }\n
    }\n
    if (!v11)\n
    {\n
        return v12;\n
    }\n
    else if ((*(v11) & 1))\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v11) & -2);\n
        v9 = v2 - cgc_log_base_two(v6->field_3168);\n
        if (v9 >= 8)\n
            return v12;\n
        v7 = v11;\n
        v1[0] = &v6[1].padding_0[4148 + 8 * v9];\n
        if (!v7)\n
            v0 = 0;\n
        else\n
            v0 = v7 + 1;\n
        cgc_list_remove(v1, v0);\n
        *(v12) = (*(v12) & -2) + (*(v11) & -2);\n
        cgc_mark_free(v12);\n
    }\n
}\n
", "4220985:sub_406839": null, "4220992:cgc_list_insert_in_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_in_order(struct struct_0 **v3, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct struct_0 **v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = \"<\";\n
    v2 = &*(v3)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v4 = cgc_list_push_back(v3);\n
            return v4;\n
        }\n
        if (a1(a0) >= 0)\n
        {\n
            v0 = a0;\n
            v4 = cgc_list_insert_before(v3, v2);\n
            return v4;\n
        }\n
        v2 = *(v2);\n
    }\n
}\n
", "4221149:sub_4068dd": null, "4221152:cgc_size_cmp": "int cgc_size_cmp(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int *v4;  // [bp-0x14]\n
    unsigned int *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int *v7;  // [bp-0x8]\n
\n
    v6 = v8;\n
    if (!v6)\n
        v1 = 0;\n
    else\n
        v1 = -5 + v6;\n
    v5 = v1;\n
    v7 = v5;\n
    v3 = a0;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v3;\n
    v2 = v0;\n
    v4 = v2;\n
    return (*(v4) & -2) - (*(v7) & -2);\n
}\n
", "4221303:sub_406977": null, "4221312:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    v1 = cgc_malloc(v3);\n
    if (v1)\n
    {\n
        cgc_memset(v1, 0, v3);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4221401:sub_4069d9": null, "4221408:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v3 = \"<\";\n
    if (!v7)\n
    {\n
        v6 = cgc_malloc(a0);\n
        return v6;\n
    }\n
    v5 = (*(cgc_ptr_to_chunk(v7)) & -2) - 8;\n
    if (a0 == v5)\n
    {\n
        v6 = v7;\n
        return v6;\n
    }\n
    v4 = cgc_malloc(a0);\n
    v1 = v4;\n
    v2 = v7;\n
    if (a0 < v5)\n
        v0 = a0;\n
    else\n
        v0 = v5;\n
    cgc_memcpy(v1, v2, v0);\n
    cgc_free(v7);\n
    v6 = v4;\n
    return v6;\n
}\n
", "4221631:sub_406abf": null, "4221632:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_insert_before(struct_1 *v0, struct_3 *a0, unsigned int a1[2])\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4221888:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_push_back(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_list_insert_after(v1, v1->field_4);\n
}\n
", "4221947:sub_406bfb": null, "4221952:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(void* *v1, void* *a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = \"<\";\n
    if (a0)\n
    {\n
        v2 = cgc_list_insert_before(v1, *(a0), a1);\n
        return v2;\n
    }\n
    v2 = cgc_list_insert_before(v1, *(v1), a1);\n
    return v2;\n
}\n
", "4222064:cgc_getDocumentID": "extern void g_40b738;\n
\n
int cgc_getDocumentID()\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x30]\n
\n
    memcpy(&v3, &g_40b738, 40);\n
    v2 = 0x4347c000;\n
    v1 = 1;\n
    for (v0 = 0; v0 < 10; v0 += 1)\n
    {\n
        if (!(0 CONCAT *((v2 + v0))) /m *(&(&v3)[4 * v0]) >> 32)\n
            v1 = *(&(&v3)[4 * v0]) * v1;\n
    }\n
    return v1;\n
}\n
", "4222214:sub_406d06": null, "4222224:cgc_romanNumeral": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_romanNumeral(unsigned int v14)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    char *v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x3c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x38]\n
    void* v4;  // [bp-0x34], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    void* v9;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char *v16;  // eax\n
    unsigned int v17;  // eax\n
\n
    v0 = \"<\";\n
    v4 = 0;\n
    if (!v14)\n
    {\n
        v13 = 0;\n
        return v13;\n
    }\n
    else if (v14 <= 1000)\n
    {\n
        v7 = v14;\n
        v8 = (0 CONCAT v7) /m 100;\n
        v7 = (0 CONCAT v7) /m 100 >> 32;\n
        v9 = (0 CONCAT v7) /m 50;\n
        v7 = (0 CONCAT v7) /m 50 >> 32;\n
        v10 = (0 CONCAT v7) /m 10;\n
        v7 = (0 CONCAT v7) /m 10 >> 32;\n
        v11 = (0 CONCAT v7) /m 5;\n
        v7 = (0 CONCAT v7) /m 5 >> 32;\n
        v12 = v7;\n
        v6 = v8 + v9 + v10 + v11 + v12;\n
        v3 = 0;\n
        v2 = 0x4347c000;\n
        v3 = cgc_malloc(v6 * 2 + 1);\n
        if (!v3)\n
            cgc__terminate();\n
        cgc_memset(v3, 0, v6 * 2 + 1);\n
        if ((v6 << 1) + 1 > 28)\n
        {\n
            for (v1 = 17; v1 < 27; v1 += 1)\n
            {\n
                v15 = v1;\n
                v1 = v15 + 1;\n
                v3[v15] = cgc_to_hex(((*(v2) >> 31 CONCAT *(v2)) /m 16 >> 31 CONCAT (*(v2) >> 31 CONCAT *(v2)) /m 16) /m 16 >> 32);\n
                v16 = v2;\n
                v2 = v16 + 1;\n
                v17 = *(v16);\n
                v3[v1] = cgc_to_hex((v17 >> 31 CONCAT v17) /m 16 >> 32);\n
            }\n
        }\n
        cgc_free(v3);\n
        v5 = cgc_malloc(v6 * 2 + 1);\n
        if (!v5)\n
        {\n
            v13 = 0;\n
            return v13;\n
        }\n
        cgc_memset(v5, 0, v6 + 2);\n
        cgc_memset(v5, 67, v8);\n
        v4 = v8;\n
        if (v9 + v10 == 5)\n
        {\n
            cgc_strcat(v5, v0 - 8935);\n
            v4 += 2;\n
            v9 = 0;\n
            v10 = 0;\n
        }\n
        else\n
        {\n
            if (v9)\n
            {\n
                cgc_strcat(v5, v0 - 8931);\n
                v4 += 1;\n
            }\n
            if (v10 == 4)\n
            {\n
                cgc_strcat(v5, v0 - 8932);\n
                v4 += 2;\n
            }\n
            else\n
            {\n
                cgc_memset(&v5[v4], 88, v10);\n
                v4 = v10 + v4;\n
            }\n
        }\n
        if (v11 + v12 == 5)\n
        {\n
            cgc_strcat(v5, v0 - 8929);\n
            v4 += 2;\n
            v11 = 0;\n
            v12 = 0;\n
        }\n
        else\n
        {\n
            if (v11)\n
            {\n
                cgc_strcat(v5, v0 - 8925);\n
                v4 += 1;\n
            }\n
            if (v12 == 4)\n
            {\n
                cgc_strcat(v5, v0 - 8926);\n
                v4 += 2;\n
            }\n
            else\n
            {\n
                cgc_memset(&v5[v4], 73, v12);\n
                v4 = v12 + v4;\n
            }\n
        }\n
        v13 = v5;\n
        return v13;\n
    }\n
    else\n
    {\n
        v13 = 0;\n
        return v13;\n
    }\n
}\n
", "4223264:cgc_getCustomMacro": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getCustomMacro(struct_0 *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_1 *v1;  // [bp-0x10], Other Possible Types: unsigned int, struct_0 *\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"<\";\n
    v1 = 0;\n
    v1 = &v3->field_0;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v1->field_0, a0))\n
        {\n
            v1 = v1->field_8;\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4223392:cgc_removeObjectFromList": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_removeObjectFromList(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = \"<\";\n
    v2 = 0;\n
    v1 = *(v4);\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (!cgc_strcmp(*(v1), a0))\n
            break;\n
        v2 = v1;\n
        v1 = *((v1 + 8));\n
    }\n
    if (!v2)\n
    {\n
        *(v4) = *((v1 + 8));\n
        *((v1 + 8)) = 0;\n
        v3 = v1;\n
        return v3;\n
    }\n
    *((v2 + 8)) = *((v1 + 8));\n
    *((v1 + 8)) = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4223588:sub_407264": null, "4223600:cgc_reverseObjectList": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int cgc_reverseObjectList(struct struct_0 **v3)\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0xc]\n
    struct_0 *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    for (v0 = *(v3); v0; v0 = v1)\n
    {\n
        v1 = *((v0 + 8));\n
        *((v0 + 8)) = v2;\n
        v2 = v0;\n
    }\n
    *(v3) = v2;\n
    return v3;\n
}\n
", "4223689:sub_4072c9": null, "4223696:cgc_executeMacro": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_executeMacro(unsigned int v13, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
\n
    v0 = \"<\";\n
    v11 = 0;\n
    if (!v13)\n
    {\n
        v12 = a0;\n
        return v12;\n
    }\n
    v10 = a0;\n
    while (true)\n
    {\n
        if (v10)\n
        {\n
            v7 = 0;\n
            v9 = cgc_malloc(12);\n
            if (!v9)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            v8 = cgc_strlen(*(v10));\n
            v14 = cgc_malloc(v8 + 1);\n
            *(v9) = v14;\n
            if (!v14)\n
            {\n
                v12 = 0;\n
                return v12;\n
            }\n
            cgc_memset(*(v9), 0, v8 + 1);\n
            cgc_memcpy(*(v9), *(v10), v8);\n
            for (v6 = v13; v6; v6 = *((v6 + 8)))\n
            {\n
                if (!cgc_strcmp(*(v6), *(v9)))\n
                {\n
                    v7 = 1;\n
                    *((v9 + 4)) = cgc_executeMacro(*((v13 + 4)), *((v10 + 4)));\n
                }\n
            }\n
            if (!v7)\n
                *((v9 + 4)) = cgc_executeMacro(0, *((v10 + 4)));\n
            *((v9 + 8)) = v11;\n
            v11 = v9;\n
            v10 = *((v10 + 8));\n
        }\n
        else\n
        {\n
            v5 = v13;\n
            while (true)\n
            {\n
                if (!v5)\n
                {\n
                    cgc_reverseObjectList(&v11);\n
                    v12 = v11;\n
                    return v12;\n
                }\n
                v4 = 0;\n
                for (v3 = a0; v3; v3 = *((v3 + 8)))\n
                {\n
                    if (!cgc_strcmp(*(v3), *(v5)))\n
                        v4 = 1;\n
                }\n
                if (!v4)\n
                {\n
                    v2 = cgc_malloc(12);\n
                    if (!v2)\n
                    {\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    v1 = cgc_strlen(*(v5));\n
                    v15 = cgc_malloc(v1 + 1);\n
                    *(v2) = v15;\n
                    if (!v15)\n
                    {\n
                        v12 = 0;\n
                        return v12;\n
                    }\n
                    cgc_memset(*(v2), 0, v1 + 1);\n
                    cgc_memcpy(*(v2), *(v5), v1);\n
                    *((v2 + 4)) = cgc_executeMacro(*((v5 + 4)), 0);\n
                    *((v2 + 8)) = v11;\n
                    v11 = v2;\n
                }\n
                v5 = *((v5 + 8));\n
            }\n
        }\n
    }\n
}\n
", "4224505:sub_4075f9": null, "4224512:cgc_getNextInputLine": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getNextInputLine(char **v6)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = \"<\";\n
    v3 = cgc_strchr(*(v6), 10) + 1;\n
    v2 = v3 - *(v6);\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_memset(v1, 0, v2 + 1);\n
    cgc_memcpy(v1, *(v6), v2);\n
    *(v6) = v3;\n
    v4 = v1;\n
    return v4;\n
}\n
", "4224705:sub_4076c1": null, "4224720:cgc_getObject": "typedef struct struct_2 {\n
    char padding_0[12380];\n
    void* field_305c;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    char *field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_3 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getObject(struct struct_1 **v13, char *a0, char **a1)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    struct_2 *v2;  // [bp-0x30]\n
    unsigned int v3[3];  // [bp-0x2c]\n
    struct_0 *v4;  // [bp-0x28], Other Possible Types: unsigned int, struct_4 *\n
    unsigned int v5[3];  // [bp-0x24]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_5 *v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v11[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
\n
    v12 = v14;\n
    v2 = &\"<\";\n
    v6 = 0;\n
    v5[0] = *(v13);\n
    v9 = cgc_malloc(0x400);\n
    if (!v9)\n
    {\n
        v11[0] = 0;\n
        return v11;\n
    }\n
    if (a1)\n
    {\n
        v9 = cgc_getNextInputLine(a1);\n
        v10 = cgc_strlen(v9);\n
        *((v9 + v10 - 1)) = 0;\n
    }\n
    else\n
    {\n
        cgc_fgets(v9, 0x400, v2->field_305c);\n
        v10 = cgc_strlen(v9);\n
        if (v10 == -1)\n
            cgc__terminate();\n
        if (!v10)\n
            cgc__terminate();\n
        *((v9 + v10 - 1)) = 0;\n
    }\n
    if (a0 && !cgc_strcmp(v9, a0))\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v7 = cgc_malloc(12);\n
    if (!v7)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v7->field_4 = 0;\n
    v7->field_8 = 0;\n
    if (*(v9) == 60 && *((v9 + v10 - 2)) == 62)\n
    {\n
        v8 = v10 - 3;\n
        v16 = cgc_malloc(v8 + 1);\n
        v7->field_0 = v16;\n
        if (!v16)\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        cgc_memset(v7->field_0, 0, v8 + 1);\n
        cgc_memcpy(v7->field_0, v9 + 1, v8);\n
        cgc_free(v9);\n
        v0 = v8;\n
        v1 = v0 + cgc_strlen(&v2->padding_0[8923]);\n
        v6 = v1 + cgc_strlen(&v2->padding_0[8920]);\n
        a0 = cgc_malloc(v6 + 1);\n
        if (!a0)\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        cgc_memset(a0, 0, v6 + 1);\n
        cgc_strcat(a0, &v2->padding_0[8923]);\n
        cgc_strcat(a0, v7->field_0);\n
        cgc_strcat(a0, &v2->padding_0[8920]);\n
        while (true)\n
        {\n
            v4 = cgc_getObject(v5, a0, a1);\n
            if (!v4)\n
                break;\n
            if (cgc_strcmp(v4->field_0, &v2->padding_0[8918]))\n
            {\n
                v3[0] = cgc_getCustomMacro(v5, v4->field_0);\n
                if (v3)\n
                    v4 = cgc_executeMacro(v3[1], v4->field_4);\n
            }\n
            else\n
            {\n
                v3[0] = v4->field_4;\n
                if (v4)\n
                {\n
                    v3[2] = v5;\n
                    v5[0] = v3;\n
                    *(v13) = &v5[0];\n
                }\n
            }\n
            *((v4 + 8)) = v7->field_4;\n
            v7->field_4 = v4;\n
        }\n
        cgc_free(a0);\n
        v11 = v7;\n
        return v11;\n
    }\n
    v8 = v10 - 1;\n
    v15 = cgc_malloc(v8 + 1);\n
    v7->field_0 = v15;\n
    if (!v15)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    cgc_memset(v7->field_0, 0, v8 + 1);\n
    cgc_memcpy(v7->field_0, v9, v8);\n
    v11 = v7;\n
    return v11;\n
}\n
", "4225860:sub_407b44": null, "4225872:cgc_getMacro": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    char *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getMacro(struct_1 *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"<\";\n
    v1 = &v3->padding_0;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(*((v1 + 8)), a0))\n
        {\n
            v1 = *((v1 + 4));\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4225995:sub_407bcb": null, "4226000:cgc_table": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_table(unsigned int v43, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    unsigned int v2;  // [bp-0xac]\n
    unsigned int v3;  // [bp-0xa8]\n
    unsigned int v4;  // [bp-0xa4]\n
    unsigned int v5;  // [bp-0xa0]\n
    unsigned int v6;  // [bp-0x9c]\n
    unsigned int v7;  // [bp-0x98]\n
    unsigned int v8;  // [bp-0x94]\n
    unsigned int v9;  // [bp-0x90]\n
    unsigned int v10;  // [bp-0x8c]\n
    unsigned int v11;  // [bp-0x88]\n
    unsigned int v12;  // [bp-0x84]\n
    unsigned int v13;  // [bp-0x80]\n
    unsigned int v14;  // [bp-0x7c]\n
    unsigned int v15;  // [bp-0x74]\n
    unsigned int v16;  // [bp-0x70]\n
    unsigned int v17;  // [bp-0x6c]\n
    unsigned int v18;  // [bp-0x68]\n
    unsigned int v19;  // [bp-0x64]\n
    unsigned int v20;  // [bp-0x60]\n
    unsigned int v21;  // [bp-0x5c]\n
    unsigned int v22;  // [bp-0x58]\n
    unsigned int v23;  // [bp-0x54]\n
    unsigned int v24;  // [bp-0x50]\n
    unsigned int v25;  // [bp-0x4c]\n
    unsigned int v26;  // [bp-0x48]\n
    unsigned int v27;  // [bp-0x44]\n
    unsigned int v28;  // [bp-0x40]\n
    unsigned int v29;  // [bp-0x3c]\n
    unsigned int v30;  // [bp-0x38]\n
    unsigned int v31;  // [bp-0x34]\n
    unsigned int v32;  // [bp-0x30]\n
    unsigned int v33;  // [bp-0x2c]\n
    unsigned int v34;  // [bp-0x28]\n
    unsigned int v35;  // [bp-0x24]\n
    unsigned int v36;  // [bp-0x20]\n
    unsigned int v37;  // [bp-0x1c]\n
    unsigned int v38;  // [bp-0x18]\n
    unsigned int v39;  // [bp-0x14]\n
    unsigned int v40;  // [bp-0x10]\n
    unsigned int v41;  // [bp-0xc]\n
    unsigned int v42;  // [bp-0x8]\n
    unsigned int v44;  // ebx\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // eax\n
\n
    v42 = v44;\n
    v0 = \"<\";\n
    v40 = 0;\n
    v36 = 0;\n
    v35 = 0;\n
    v32 = 0;\n
    v31 = 0;\n
    v27 = 0;\n
    v26 = 0;\n
    v24 = 0;\n
    v37 = v43;\n
    v39 = cgc_getMacro(v37, \"text\");\n
    v38 = cgc_getMacro(v37, v0 - 8907);\n
    for (v23 = *((a0 + 4)); v23; v23 = v34)\n
    {\n
        v34 = *((v23 + 8));\n
        if (!cgc_strcmp(*(v23), v0 - 8900))\n
        {\n
            v23 = *((v23 + 4));\n
            if (v23)\n
                v32 = cgc_atoi(*(v23));\n
        }\n
        else if (!cgc_strcmp(*(v23), v0 - 8895))\n
        {\n
            v23 = *((v23 + 4));\n
            if (v23)\n
                v31 = cgc_atoi(*(v23));\n
        }\n
        else if (!cgc_strcmp(*(v23), v0 - 8888))\n
        {\n
            v23 = *((v23 + 4));\n
            if (v23)\n
            {\n
                if (!cgc_strcmp(*(v23), v0 - 8881))\n
                {\n
                    v24 = 0;\n
                }\n
                else\n
                {\n
                    if (!cgc_strcmp(*(v23), v0 - 8876))\n
                        v24 = 1;\n
                }\n
            }\n
        }\n
        else if (!cgc_strcmp(*(v23), v0 - 8871))\n
        {\n
            *((v23 + 8)) = v35;\n
            v35 = v23;\n
        }\n
    }\n
    if (v32 && v31 && (v31 << 2) + 1 <= *((v0 + 16864)))\n
    {\n
        v30 = (0 CONCAT *((v0 + 16864)) - 1) /m v31 - 3;\n
        v25 = v31 * (v30 + 3) + 1;\n
        v27 = v32 * 2 + 1;\n
        v29 = cgc_malloc(v27 * 4);\n
        if (!v29)\n
        {\n
            v41 = 0;\n
            return v41;\n
        }\n
        for (v22 = 0; v22 < v27; v22 += 1)\n
        {\n
            v45 = cgc_malloc(v25 + 3);\n
            *((v29 + v22 * 4)) = v45;\n
            if (!v45)\n
            {\n
                v41 = 0;\n
                return v41;\n
            }\n
            cgc_memset(*((v29 + v22 * 4)), 0, v25 + 3);\n
        }\n
        v28 = v29;\n
        v33 = v35;\n
        for (v21 = 0; v21 < v32; v21 += 1)\n
        {\n
            v19 = 1;\n
            if (v33)\n
            {\n
                cgc_reverseObjectList(v33 + 4);\n
                v20 = *((v33 + 4));\n
            }\n
            else\n
            {\n
                v20 = 0;\n
            }\n
            if (!v24)\n
            {\n
                for (v18 = 0; v18 < v31; v18 += 1)\n
                {\n
                    cgc_strcat(*((v29 + v26 * 4)), v0 - 8867);\n
                    cgc_memset(*((v29 + v26 * 4)) + (v30 + 3) * v18 + 1, 45, v30 + 2);\n
                }\n
                cgc_strcat(*((v29 + v26 * 4)), v0 - 8867);\n
                v26 += 1;\n
            }\n
            else if (v24 == 1)\n
            {\n
                v46 = v26;\n
                v26 = v46 + 1;\n
                cgc_memset(*((v29 + v46 * 4)), 42, v25);\n
            }\n
            for (v17 = 0; v17 < v31; v17 += 1)\n
            {\n
                v16 = 0;\n
                v15 = 0;\n
                v13 = 0;\n
                v12 = v26;\n
                v11 = 0;\n
                if (!v20)\n
                {\n
                    v16 = cgc_malloc(v30 + 1);\n
                    if (!v16)\n
                    {\n
                        v41 = 0;\n
                        return v41;\n
                    }\n
                    cgc_memset(v16, 32, v30);\n
                    *((v16 + v30)) = 0;\n
                }\n
                else if (!cgc_strcmp(*(v20), v0 - 8865))\n
                {\n
                    v16 = *(v39)(v37);\n
                }\n
                else if (!cgc_strcmp(*(v20), v0 - 8858))\n
                {\n
                    v16 = *(v38)(v37);\n
                }\n
                for (v15 = cgc_strtok(v16, 10); v15; v15 = cgc_strtok(0, 10))\n
                {\n
                    v14 = cgc_strlen(v15);\n
                    if ((0 CONCAT v14) /m v30 >> 32 > 0)\n
                        v13 += 1;\n
                    v13 = (0 CONCAT v14) /m v30 + v13;\n
                    if (v13 > v19)\n
                    {\n
                        v11 = v13 - v19;\n
                        v19 = v11 + v19;\n
                        v27 = v11 + v27;\n
                        v29 = cgc_malloc(v27 * 4);\n
                        if (!v29)\n
                        {\n
                            v41 = 0;\n
                            return v41;\n
                        }\n
                        for (v10 = 0; v10 < v27; v10 += 1)\n
                        {\n
                            if (v10 < v27 - v11)\n
                            {\n
                                *((v29 + v10 * 4)) = *((v28 + v10 * 4));\n
                            }\n
                            else\n
                            {\n
                                v47 = cgc_malloc(v25 + 3);\n
                                *((v29 + v10 * 4)) = v47;\n
                                if (!v47)\n
                                {\n
                                    v41 = 0;\n
                                    return v41;\n
                                }\n
                                cgc_memset(*((v29 + v10 * 4)), 0, v25 + 3);\n
                            }\n
                            if (v10 >= v26 + v19 - v11 && v10 < v26 + v19)\n
                            {\n
                                for (v9 = 0; v9 < v17; v9 += 1)\n
                                {\n
                                    v8 = 0;\n
                                    if (!v24)\n
                                    {\n
                                        cgc_strcat(*((v29 + v10 * 4)), v0 - 8852);\n
                                    }\n
                                    else if (v24 == 1)\n
                                    {\n
                                        cgc_strcat(*((v29 + v10 * 4)), v0 - 8850);\n
                                    }\n
                                    cgc_strcat(*((v29 + v10 * 4)), v0 - 8789);\n
                                    v8 = cgc_strlen(*((v29 + v10 * 4)));\n
                                    cgc_memset(*((v29 + v10 * 4)) + v8, 32, v30);\n
                                    cgc_strcat(*((v29 + v10 * 4)), v0 - 8789);\n
                                }\n
                            }\n
                        }\n
                        v28 = v29;\n
                    }\n
                    for (v7 = v12; v7 < v26 + v13; v7 += 1)\n
                    {\n
                        v6 = 0;\n
                        v6 = cgc_strlen(v15);\n
                        if (!v24)\n
                        {\n
                            cgc_strcat(*((v29 + v7 * 4)), v0 - 8852);\n
                        }\n
                        else if (v24 == 1)\n
                        {\n
                            cgc_strcat(*((v29 + v7 * 4)), v0 - 8850);\n
                        }\n
                        cgc_strcat(*((v29 + v7 * 4)), v0 - 8789);\n
                        if (v6 >= v30)\n
                        {\n
                            cgc_strncat(*((v29 + v7 * 4)), v15, v30);\n
                            v15 = v30 + v15;\n
                        }\n
                        else if (v6 < v30)\n
                        {\n
                            v5 = 0;\n
                            cgc_strcat(*((v29 + v7 * 4)), v15);\n
                            v5 = cgc_strlen(*((v29 + v7 * 4)));\n
                            cgc_memset(*((v29 + v7 * 4)) + v5, 32, v30 - v6);\n
                            v15 = v6 + v15;\n
                        }\n
                        if (v17 != v31 - 1)\n
                        {\n
                            cgc_strcat(*((v29 + v7 * 4)), v0 - 8789);\n
                        }\n
                        else\n
                        {\n
                            cgc_strcat(*((v29 + v7 * 4)), v0 - 8789);\n
                            if (!v24)\n
                            {\n
                                cgc_strcat(*((v29 + v7 * 4)), v0 - 8852);\n
                            }\n
                            else if (v24 == 1)\n
                            {\n
                                cgc_strcat(*((v29 + v7 * 4)), v0 - 8850);\n
                            }\n
                        }\n
                    }\n
                    v12 = v26 + v13;\n
                }\n
                for (v4 = v12; v4 < v26 + v19; v4 += 1)\n
                {\n
                    if (!v24)\n
                    {\n
                        cgc_strcat(*((v29 + v4 * 4)), v0 - 8852);\n
                    }\n
                    else if (v24 == 1)\n
                    {\n
                        cgc_strcat(*((v29 + v4 * 4)), v0 - 8850);\n
                    }\n
                    cgc_strcat(*((v29 + v4 * 4)), v0 - 8789);\n
                    v3 = cgc_strlen(*((v29 + v4 * 4)));\n
                    cgc_memset(*((v29 + v4 * 4)) + v3, 32, v30);\n
                    if (v17 != v31 - 1)\n
                    {\n
                        cgc_strcat(*((v29 + v4 * 4)), v0 - 8789);\n
                    }\n
                    else\n
                    {\n
                        cgc_strcat(*((v29 + v4 * 4)), v0 - 8789);\n
                        if (!v24)\n
                        {\n
                            cgc_strcat(*((v29 + v4 * 4)), v0 - 8852);\n
                        }\n
                        else if (v24 == 1)\n
                        {\n
                            cgc_strcat(*((v29 + v4 * 4)), v0 - 8850);\n
                        }\n
                    }\n
                }\n
                if (v20)\n
                    v20 = *((v20 + 8));\n
            }\n
            v26 = v19 + v26;\n
            if (v33)\n
                v33 = *((v33 + 8));\n
        }\n
        if (!v24)\n
        {\n
            for (v2 = 0; v2 < v31; v2 += 1)\n
            {\n
                cgc_strcat(*((v29 + v26 * 4)), v0 - 8867);\n
                cgc_memset(*((v29 + v26 * 4)) + (v30 + 3) * v2 + 1, 45, v30 + 2);\n
            }\n
            cgc_strcat(*((v29 + v26 * 4)), v0 - 8867);\n
        }\n
        else if (v24 == 1)\n
        {\n
            cgc_memset(*((v29 + v26 * 4)), 42, v25);\n
        }\n
        v40 = cgc_malloc((v25 + 2) * v27 + 1);\n
        if (!v40)\n
        {\n
            v41 = 0;\n
            return v41;\n
        }\n
        cgc_memset(v40, 0, (v25 + 2) * v27 + 1);\n
        for (v1 = 0; v1 < v27; v1 += 1)\n
        {\n
            cgc_strcat(v40, *((v29 + v1 * 4)));\n
            cgc_strcat(v40, v0 - 8937);\n
        }\n
        v41 = v40;\n
        return v41;\n
    }\n
    v41 = 0;\n
    return v41;\n
}\n
", "4229972:sub_408b54": null, "4229984:cgc_element": "typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_element(unsigned int v19, struct_3 *a0)\n
{\n
    char *v0;  // [bp-0x50]\n
    char *v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    void* v6;  // [bp-0x38], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x34], Other Possible Types: unsigned int\n
    struct_1 *v8;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x24], Other Possible Types: unsigned int, char *\n
    void* v12;  // [bp-0x20], Other Possible Types: unsigned int, char *\n
    char *v13;  // [bp-0x1c], Other Possible Types: void*, unsigned int\n
    void* v14;  // [bp-0x18]\n
    struct struct_0 **v15;  // [bp-0x14]\n
    struct struct_0 **v16;  // [bp-0x10]\n
    void* v17;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v18;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
\n
    v18 = v20;\n
    v5 = \"<\";\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v14 = v19;\n
    v16 = cgc_getMacro(v14, \"text\");\n
    v15 = cgc_getMacro(v14, v5 - 8848);\n
    for (v8 = &a0->field_4->field_0; v8; v8 = *((v8 + 8)))\n
    {\n
        if (!cgc_strcmp(*(v8), v5 - 8912))\n
        {\n
            v11 = *(v16)(v14);\n
            v4 = cgc_strlen(v11);\n
            v9 = v4 + cgc_strlen(v5 - 8937) + v9;\n
        }\n
        else if (!cgc_strcmp(*(v8), v5 - 8848))\n
        {\n
            v10 = *(v15)(v14);\n
        }\n
    }\n
    if (v9 > 0)\n
    {\n
        v13 = cgc_malloc(v9 + 1);\n
        if (!v13)\n
        {\n
            v17 = 0;\n
            return v17;\n
        }\n
        cgc_memset(v13, 0, v9 + 1);\n
        v12 = v13;\n
        if (v11)\n
            cgc_strcat(v13, v11);\n
        if (v10)\n
        {\n
            v6 = 0;\n
            cgc_strcat(v13, v5 - 8937);\n
            for (v7 = cgc_strtok(v10, 10); v7; v7 = cgc_strtok(0, 10))\n
            {\n
                v6 = cgc_strlen(v7);\n
                v2 = v6;\n
                v3 = v2 + cgc_strlen(v5 - 8790);\n
                v9 = v3 + cgc_strlen(v5 - 8937) + v9;\n
                v13 = cgc_malloc(v9 + 1);\n
                if (!v13)\n
                {\n
                    v17 = 0;\n
                    return v17;\n
                }\n
                cgc_memset(v13, 0, v9 + 1);\n
                v0 = v13;\n
                v1 = v12;\n
                cgc_memcpy(v0, v1, cgc_strlen(v12));\n
                cgc_free(v12);\n
                v12 = v13;\n
                cgc_strcat(v13, v5 - 8790);\n
                cgc_strcat(v13, v7);\n
                cgc_strcat(v13, v5 - 8937);\n
            }\n
        }\n
    }\n
    v17 = v13;\n
    return v17;\n
}\n
", "4230872:sub_408ed8": null, "4230880:cgc_list": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char *field_0;\n
    struct struct_1 *field_4;\n
    struct struct_4 *field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list(unsigned int v24, struct_2 *a0)\n
{\n
    char *v0;  // [bp-0x64]\n
    char *v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0x54]\n
    void* v5;  // [bp-0x50], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x4c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x48], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x44], Other Possible Types: void*\n
    struct_4 *v9;  // [bp-0x40], Other Possible Types: unsigned int\n
    char **v10;  // [bp-0x3c]\n
    struct_4 *v11;  // [bp-0x38], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_0 *v14;  // [bp-0x2c]\n
    struct_0 *v15;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v16;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_3 **v17;  // [bp-0x20]\n
    char v18;  // [bp-0x1c]\n
    void* v19;  // [bp-0x18]\n
    void* v20;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v21;  // [bp-0x10], Other Possible Types: unsigned int, void*\n
    void* v22;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v23;  // [bp-0x8]\n
    unsigned int v25;  // ebx\n
\n
    v23 = v25;\n
    v4 = \"<\";\n
    v21 = 0;\n
    v20 = 0;\n
    v16 = 0;\n
    v15 = 0;\n
    v13 = 0;\n
    v12 = 42;\n
    v19 = v24;\n
    v17 = cgc_getMacro(v19, \"element\");\n
    cgc_memset(&v18, 0, 4);\n
    for (v11 = &a0->field_4->field_0; v11; v11 = v14)\n
    {\n
        v14 = *((v11 + 8));\n
        if (!cgc_strcmp(*(v11), v4 - 8835))\n
        {\n
            v10 = *((v11 + 4));\n
            if (!v11)\n
                goto LABEL_4090e6;\n
            if (!cgc_strcmp(*(v10), v4 - 8830))\n
            {\n
                v12 = 0;\n
            }\n
            else\n
            {\n
                if (!cgc_strcmp(*(v10), v4 - 8822))\n
                {\n
                    v12 = 1;\n
                }\n
                else\n
                {\n
                    if (!cgc_strcmp(*(v10), v4 - 8816))\n
                    {\n
                        v12 = 2;\n
                    }\n
                    else\n
                    {\n
                        if (cgc_strcmp(*(v10), v4 - 8810))\n
                            cgc_strncat(&v18, *(v10), 3);\n
                        else\n
                            v12 = 3;\n
                    }\n
                }\n
            }\n
        }\n
        else if (!cgc_strcmp(*(v11), v4 - 8843))\n
        {\n
            *((v11 + 8)) = v15;\n
            v15 = v11;\n
        }\n
LABEL_4090e6:\n
    }\n
    v9 = v15;\n
    while (true)\n
    {\n
        if (!v9)\n
        {\n
            v22 = v21;\n
            return v22;\n
        }\n
        v8 = 0;\n
        v7 = 0;\n
        v5 = 0;\n
        if (!cgc_strcmp(*(v9), v4 - 8843))\n
        {\n
            v8 = *(v17)(v19);\n
            if (!v8)\n
                goto LABEL_4093fd;\n
            v7 = cgc_strlen(v8);\n
            v13 += 1;\n
            v6 = cgc_malloc(12);\n
            if (!v6)\n
            {\n
                v22 = 0;\n
                return v22;\n
            }\n
            cgc_memset(v6, 0, 12);\n
            if (!v12)\n
            {\n
                v6 = cgc_itoa(v13, v6);\n
            }\n
            else if (v12 == 1)\n
            {\n
                *(v6) = v13 + 64;\n
            }\n
            else if (v12 == 2)\n
            {\n
                *(v6) = v13 + 96;\n
            }\n
            else if (v12 != 3)\n
            {\n
                *(v6) = v12;\n
            }\n
            else\n
            {\n
                cgc_free(v6);\n
                v6 = cgc_romanNumeral(v13);\n
            }\n
            if (!v6)\n
            {\n
                v22 = 0;\n
                return v22;\n
            }\n
            v5 = cgc_strlen(v6);\n
            v2 = v5 + v7;\n
            v3 = v2 + cgc_strlen(v4 - 8804);\n
            v16 = v3 + cgc_strlen(v4 - 8937) + v16;\n
            v21 = cgc_malloc(v16 + 1);\n
            if (!v21)\n
            {\n
                v22 = 0;\n
                return v22;\n
            }\n
            cgc_memset(v21, 0, v16 + 1);\n
            if (v20)\n
            {\n
                v0 = v21;\n
                v1 = v20;\n
                cgc_memcpy(v0, v1, cgc_strlen(v20));\n
                cgc_free(v20);\n
            }\n
            v20 = v21;\n
            cgc_strcat(v21, v6);\n
            if (v12 < 4)\n
                cgc_strcat(v21, v4 - 8801);\n
            cgc_strcat(v21, v4 - 8789);\n
            cgc_strcat(v21, v8);\n
            cgc_strcat(v21, v4 - 8937);\n
            cgc_free(v8);\n
        }\n
LABEL_4093fd:\n
        v9 = v9->field_8;\n
    }\n
}\n
", "4232223:sub_40941f": null, "4232224:cgc_text": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_text(unsigned int v2, struct_0 *a0)\n
{\n
    unsigned int *v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &a0->field_4->field_0;\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = *(v0);\n
    return v1;\n
}\n
", "4232283:sub_40945b": null, "4232288:cgc_paragraph": "typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_paragraph(unsigned int v12, struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int *v2;  // [bp-0x2c], Other Possible Types: char **\n
    void* v3;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x24]\n
    struct struct_0 **v5;  // [bp-0x20]\n
    struct struct_0 **v6;  // [bp-0x1c]\n
    struct struct_0 **v7;  // [bp-0x18]\n
    char *v8;  // [bp-0x14], Other Possible Types: void*\n
    char *v9;  // [bp-0x10], Other Possible Types: unsigned int, void*\n
    void* v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v1 = \"<\";\n
    v9 = 0;\n
    v8 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v4 = v12;\n
    v7 = cgc_getMacro(v4, \"text\");\n
    v6 = cgc_getMacro(v4, v1 - 8848);\n
    v5 = cgc_getMacro(v4, v1 - 8799);\n
    v2 = &a0->field_4->field_0;\n
    if (!v2)\n
    {\n
        v10 = 0;\n
        return v10;\n
    }\n
    if (!cgc_strcmp(*(v2), v1 - 8912))\n
    {\n
        v8 = *(v7)(v4);\n
        if (!v8)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        v0 = cgc_strlen(v8);\n
        v3 = v0 + cgc_strlen(v1 - 8793);\n
        v9 = cgc_malloc(v3 + 1);\n
        if (!v9)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_memset(v9, 0, v3 + 1);\n
        cgc_strcat(v9, v1 - 8793);\n
        cgc_strcat(v9, v8);\n
        cgc_free(v8);\n
    }\n
    else if (!cgc_strcmp(*(v2), v1 - 8848))\n
    {\n
        v8 = *(v6)(v4);\n
        if (!v8)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        v3 = cgc_strlen(v8);\n
        v9 = cgc_malloc(v3 + 1);\n
        if (!v9)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_memset(v9, 0, v3 + 1);\n
        cgc_strcat(v9, v8);\n
        cgc_free(v8);\n
    }\n
    else if (!cgc_strcmp(*(v2), v1 - 8799))\n
    {\n
        v8 = *(v5)(v4);\n
        if (!v8)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        v3 = cgc_strlen(v8);\n
        v9 = cgc_malloc(v3 + 1);\n
        if (!v9)\n
        {\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_memset(v9, 0, v3 + 1);\n
        cgc_strcat(v9, v8);\n
        cgc_free(v8);\n
    }\n
    v10 = v9;\n
    return v10;\n
}\n
", "4233175:sub_4097d7": null, "4233184:cgc_page": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_page(unsigned int v15, struct_3 *a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char *v3;  // [bp-0x34]\n
    struct_0 *v4;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_1 *v5;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_1 *v6;  // [bp-0x28]\n
    struct_1 *v7;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c]\n
    struct struct_2 **v10;  // [bp-0x18]\n
    void* v11;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x10], Other Possible Types: char *, unsigned int\n
    void* v13;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v16;  // ebx\n
\n
    v14 = v16;\n
    v1 = \"<\";\n
    v12 = 0;\n
    v11 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v9 = v15;\n
    v10 = cgc_getMacro(v9, \"pgraph\");\n
    for (v5 = a0->field_4; v5; v5 = v6)\n
    {\n
        v6 = *((v5 + 8));\n
        *((v5 + 8)) = v7;\n
        v7 = v5;\n
    }\n
    v4 = v7;\n
    while (true)\n
    {\n
        if (v4)\n
        {\n
            if (!cgc_strcmp(v4->field_0, v1 - 8907))\n
            {\n
                v3 = *(v10)(v9);\n
                if (v3)\n
                {\n
                    v2 = cgc_strlen(v3);\n
                    v0 = v2;\n
                    v8 = v0 + cgc_strlen(v1 - 8937) + v8;\n
                    v12 = cgc_malloc(v8 + 1);\n
                    if (!v12)\n
                    {\n
                        v13 = 0;\n
                        return v13;\n
                    }\n
                    cgc_memset(v12, 0, v8 + 1);\n
                    if (v11)\n
                    {\n
                        cgc_strcat(v12, v11);\n
                        cgc_free(v11);\n
                    }\n
                    cgc_strcat(v12, v3);\n
                    cgc_free(v3);\n
                    cgc_strcat(v12, v1 - 8937);\n
                    v11 = v12;\n
                }\n
            }\n
            v4 = v4->field_8;\n
        }\n
        else\n
        {\n
            v13 = v12;\n
            return v13;\n
        }\n
    }\n
}\n
", "4233693:sub_4099dd": null, "4233696:cgc_document": "typedef struct struct_4 {\n
    char padding_0[16864];\n
    unsigned int field_41e0;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char *field_0;\n
    struct struct_2 *field_4;\n
    struct struct_2 *field_8;\n
} struct_2;\n
\n
extern struct_4 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_document(unsigned int v36, struct_3 *a0)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    unsigned int v1;  // [bp-0x9c]\n
    unsigned int v2;  // [bp-0x98]\n
    struct_4 *v3;  // [bp-0x94]\n
    void* v4;  // [bp-0x90], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x88]\n
    unsigned int v6;  // [bp-0x84]\n
    unsigned int v7;  // [bp-0x80]\n
    unsigned int v8;  // [bp-0x7c]\n
    unsigned int v9;  // [bp-0x78]\n
    unsigned int *v10;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x70]\n
    unsigned int v12;  // [bp-0x6c]\n
    unsigned int v13;  // [bp-0x68]\n
    char *v14;  // [bp-0x64], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v16;  // [bp-0x54]\n
    unsigned int v17;  // [bp-0x50]\n
    struct_2 *v18;  // [bp-0x4c], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x48]\n
    struct_1 *v20;  // [bp-0x44], Other Possible Types: struct_2 *, unsigned int\n
    unsigned int v21;  // [bp-0x40]\n
    unsigned int v22;  // [bp-0x3c]\n
    unsigned int v23;  // [bp-0x38]\n
    char **v24;  // [bp-0x34]\n
    void* v25;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_1 *v26;  // [bp-0x2c]\n
    struct_1 *v27;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v28;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v29;  // [bp-0x20]\n
    struct struct_0 **v30;  // [bp-0x1c]\n
    struct struct_0 **v31;  // [bp-0x18]\n
    void* v32;  // [bp-0x14], Other Possible Types: unsigned int, char *\n
    void* v33;  // [bp-0x10], Other Possible Types: unsigned int, char *\n
    void* v34;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v35;  // [bp-0x8]\n
    unsigned int v37;  // ebx\n
    unsigned int v38;  // eax\n
\n
    v35 = v37;\n
    v3 = &\"<\";\n
    v33 = 0;\n
    v32 = 0;\n
    v28 = 0;\n
    v27 = 0;\n
    v25 = 0;\n
    v23 = 11;\n
    v22 = 20;\n
    v21 = 1;\n
    v29 = v36;\n
    v31 = cgc_getMacro(v29, \"page\");\n
    v30 = cgc_getMacro(v29, &v3->padding_0[8782]);\n
    v20 = &a0->field_4->field_0;\n
    while (v20)\n
    {\n
        v26 = &v20->field_8->field_0;\n
        if (!cgc_strcmp(v20->field_0, &v3->padding_0[8787]))\n
        {\n
LABEL_409ade:\n
            v20->field_8 = v27;\n
            v27 = &v20->field_0;\n
            goto LABEL_409b9f;\n
        }\n
        else\n
        {\n
            if (!cgc_strcmp(v20->field_0, &v3->padding_0[8782]))\n
                goto LABEL_409ade;\n
            if (!cgc_strcmp(v20->field_0, &v3->padding_0[8775]))\n
            {\n
                v20 = &v20->field_4->field_0;\n
                if (v20)\n
                    v23 = cgc_atoi(v20->field_0);\n
            }\n
            else if (!cgc_strcmp(v20->field_0, &v3->padding_0[8768]))\n
            {\n
                v20 = &v20->field_4->field_0;\n
                if (v20)\n
                    v22 = cgc_atoi(v20->field_0);\n
            }\n
LABEL_409b9f:\n
            v20 = v26;\n
        }\n
    }\n
    v24 = cgc_malloc(v23 * 4);\n
    if (!v24)\n
    {\n
        v34 = 0;\n
        return v34;\n
    }\n
    v19 = 0;\n
    while (true)\n
    {\n
        if (v19 < v23)\n
        {\n
            v38 = cgc_malloc(v22 + 3);\n
            v24[v19] = v38;\n
            if (!v38)\n
            {\n
                v34 = 0;\n
                return v34;\n
            }\n
            cgc_memset(v24[v19], 0, v22 + 3);\n
            v19 += 1;\n
        }\n
        else\n
        {\n
            v3->field_41e0 = v22;\n
            v18 = v27;\n
            while (true)\n
            {\n
                if (!v18)\n
                {\n
                    v34 = v33;\n
                    return v34;\n
                }\n
                if (!cgc_strcmp(v18->field_0, &v3->padding_0[8782]))\n
                {\n
                    v16 = *(v30)(v29);\n
                    if (!v16)\n
                    {\n
                        v21 = 1;\n
                    }\n
                    else\n
                    {\n
                        v21 = cgc_atoi(v16);\n
                        v2 = (0 CONCAT v22) /m v21;\n
                        if (v2 - cgc_strlen(&v3->padding_0[8792]) < 1)\n
                            v21 = 1;\n
                        v1 = (0 CONCAT v22) /m v21;\n
                        v3->field_41e0 = v1 - cgc_strlen(&v3->padding_0[8792]);\n
                    }\n
                }\n
                else\n
                {\n
                    v17 = *(v31)(v29);\n
                    if (v17)\n
                    {\n
                        v15 = cgc_strtok(v17, 10);\n
                        v25 += 1;\n
                        v28 = (v23 + 2) * (v22 + 1) + v28;\n
                        v33 = cgc_malloc(v28 + 1);\n
                        if (!v33)\n
                        {\n
                            v34 = 0;\n
                            return v34;\n
                        }\n
                        cgc_memset(v33, 0, v28 + 1);\n
                        if (v32)\n
                        {\n
                            v11 = cgc_strlen(v32);\n
                            cgc_memcpy(v33, v32, v11);\n
                            cgc_free(v32);\n
                        }\n
                        v32 = v33;\n
                        v12 = 1;\n
                        for (v10 = 0; v10 < v23; v10 += 1)\n
                        {\n
                            if (v10 != v23 - 1)\n
                            {\n
                                if (!v15)\n
                                {\n
                                    v5 = cgc_strlen(v24[v10]);\n
                                    cgc_memset(&(v24[v10])[v5], 32, v3->field_41e0);\n
                                    cgc_strcat(v24[v10], &v3->padding_0[8792]);\n
                                }\n
                                else\n
                                {\n
                                    v13 = cgc_strlen(v15);\n
                                    if (v13 > v3->field_41e0)\n
                                    {\n
                                        cgc_strncat(v24[v10], v15, v3->field_41e0);\n
                                        if (v21 > 1)\n
                                            cgc_strcat(v24[v10], &v3->padding_0[8792]);\n
                                        v15 = v3->field_41e0 + v15;\n
                                    }\n
                                    else\n
                                    {\n
                                        cgc_strcat(v24[v10], v15);\n
                                        for (v4 = 0; v4 < v3->field_41e0 - v13; v4 += 1)\n
                                        {\n
                                            cgc_strcat(v24[v10], &v3->padding_0[8789]);\n
                                        }\n
                                        if (v21 > 1)\n
                                            cgc_strcat(v24[v10], &v3->padding_0[8792]);\n
                                        v15 = cgc_strtok(0, 10);\n
                                    }\n
                                }\n
                            }\n
                            else\n
                            {\n
                                if (v12 != v21)\n
                                {\n
                                    v12 += 1;\n
                                    v10 = -1;\n
                                }\n
                                else\n
                                {\n
                                    v14 = cgc_malloc(v22);\n
                                    if (!v14)\n
                                    {\n
                                        v34 = 0;\n
                                        return v34;\n
                                    }\n
                                    cgc_memset(v14, 0, v22);\n
                                    v14 = cgc_itoa(v25, v14);\n
                                    cgc_strcat(v24[v10], &v3->padding_0[8789]);\n
                                    cgc_strncat(v24[v10], v14, v22 - 1);\n
                                    cgc_memset(v33, 61, v22);\n
                                    cgc_strcat(v33, &v3->padding_0[8937]);\n
                                    for (v8 = 0; v8 < v23; v8 += 1)\n
                                    {\n
                                        cgc_strcat(v33, v24[v8]);\n
                                        cgc_strcat(v33, &v3->padding_0[8937]);\n
                                    }\n
                                    v9 = cgc_strlen(v33);\n
                                    cgc_memset(&v33[v9], 61, v22);\n
                                    for (v7 = 0; v7 < v23; v7 += 1)\n
                                    {\n
                                        cgc_memset(v24[v7], 0, v22 + 3);\n
                                    }\n
                                    if (v15)\n
                                    {\n
                                        v25 += 1;\n
                                        v28 = (v23 + 2) * (v22 + 1) + v28;\n
                                        v33 = cgc_malloc(v28 + 1);\n
                                        if (!v33)\n
                                        {\n
                                            v34 = 0;\n
                                            return v34;\n
                                        }\n
                                        cgc_memset(v33, 0, v28 + 1);\n
                                        if (v32)\n
                                        {\n
                                            v6 = cgc_strlen(v32);\n
                                            cgc_memcpy(v33, v32, v6);\n
                                            cgc_free(v32);\n
                                        }\n
                                        v32 = v33;\n
                                        v10 = -1;\n
                                        v12 = 1;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                        v0 = v33;\n
                        cgc_transmit_all(1, v0, cgc_strlen(v33));\n
                        cgc_transmit_all(1, &v3->padding_0[8762], cgc_strlen(&v3->padding_0[8762]));\n
                        cgc_free(v33);\n
                        v32 = 0;\n
                        v33 = 0;\n
                    }\n
                }\n
                v18 = v18->field_8;\n
            }\n
        }\n
    }\n
}\n
", "4236266:sub_40a3ea": null, "4236272:cgc_newMacro": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_newMacro(char *v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v0 = \"<\";\n
    v2 = cgc_malloc(12);\n
    if (!v2)\n
    {\n
        v3[0] = 0;\n
        return v3;\n
    }\n
    v1 = cgc_strlen(v5);\n
    v7 = cgc_malloc(v1 + 1);\n
    v2->field_8 = v7;\n
    if (!v7)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memset(v2->field_8, 0, v1 + 1);\n
    cgc_memcpy(v2->field_8, v5, v1);\n
    v2->field_0 = a0;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4236488:sub_40a4c8": null, "4236496:cgc_initMacros": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initMacros(unsigned int *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
    unsigned int v7;  // ebx\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // ebx\n
    unsigned int v13;  // ebx\n
    unsigned int v15;  // ebx\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"<\";\n
    v5 = v0;\n
    v1 = cgc_newMacro(\"element\", cgc_element);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v7 = v0;\n
    v1 = cgc_newMacro(v5 - 8760, v5 - 16248);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v9 = v0;\n
    v1 = cgc_newMacro(v7 - 8787, v7 - 16760);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v11 = v0;\n
    v1 = cgc_newMacro(v9 - 8907, v9 - 17656);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v13 = v0;\n
    v1 = cgc_newMacro(v11 - 8912, v11 - 17720);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v15 = v0;\n
    v1 = cgc_newMacro(v13 - 8848, v13 - 19064);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v17 = v0;\n
    v1 = cgc_newMacro(v15 - 8782, v15 - 17720);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v1 = cgc_newMacro(v17 - 8799, v17 - 23944);\n
    v1->field_4 = *(v3);\n
    *(v3) = v1;\n
    v18 = v2;\n
    return v3;\n
}\n
", "4236916:sub_40a674": null, "4236928:cgc_initCustomMacros": "extern char *FourByFourTable_Macro;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initCustomMacros(struct struct_1 **v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = \"<\";\n
    cgc_getObject(v2, NULL, &FourByFourTable_Macro);\n
    cgc_getObject(v2, NULL, v0 + 12684);\n
    cgc_getObject(v2, NULL, v0 + 12688);\n
    v4 = v1;\n
    return cgc_getObject(v2, NULL, v0 + 12692);\n
}\n
", "4237092:sub_40a724": null, "4237104:cgc_sendDocumentID": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendDocumentID(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // eax\n
\n
    v3 = v5;\n
    v1 = \"<\";\n
    v6 = cgc_malloc(20);\n
    v2 = v6;\n
    if (v6)\n
    {\n
        v2 = cgc_itoa(v4, v2);\n
        cgc_transmit_all(1, v1 - 8751, cgc_strlen(v1 - 8751));\n
        v0 = v2;\n
        cgc_transmit_all(1, v0, cgc_strlen(v2));\n
        v6 = cgc_transmit_all(1, v1 - 8937, cgc_strlen(v1 - 8937));\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4237326:sub_40a80e": null, "4237328:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    void* v6;  // [bp-0x10]\n
    void* v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v0 = \"<\";\n
    v7 = 0;\n
    v3 = 0;\n
    v1 = cgc_getDocumentID();\n
    v2 = cgc_malloc(12);\n
    if (!v2)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    cgc_initMacros(&v5);\n
    cgc_initCustomMacros(&v3);\n
    cgc_free(v2);\n
    v6 = cgc_getObject(&v3, NULL, NULL);\n
    cgc_sendDocumentID(v1);\n
    v4 = cgc_document(v5, v6);\n
    v7 = 0;\n
    return v7;\n
}\n
", "4237548:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:memcpy": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}