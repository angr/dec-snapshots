{"4202496:_init": "extern struct_0 *g_40b640;\n
\n
int _init()\n
{\n
    if (g_40b640)\n
    {\n
        g_40b640();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:sub_4020b0": "int sub_4020b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202678:sub_4020b6": null, "4202688:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202731:sub_4020eb": null, "4202732:sub_4020ec": "int sub_4020ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202736:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202740:sub_4020f4": null, "4202752:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 38215;\n
    v6 = v5 + 46;\n
    v7 = v5 + 46;\n
    if (v7 == v6)\n
        return v5 + 46;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202803:sub_402133": "int sub_402133()\n
{\n
}\n
", "4202809:sub_402139": "int sub_402139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202816:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 38151;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 46;\n
    v9 = (v6 + 46 - (v6 + 46) >> 31) + (46 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202887:sub_402187": "int sub_402187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202896:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40b63c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40b63c)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202971:sub_4021db": "int sub_4021db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202976:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202985:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203071:sub_40223f": null, "4203072:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4203105:sub_402261": null, "4203120:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203139:sub_402283": null, "4203152:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203168:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203184:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203200:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203214:sub_4022ce": null, "4203216:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203238:sub_4022e6": null, "4203248:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203270:sub_402306": null, "4203280:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203302:sub_402326": null, "4203312:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203334:sub_402346": null, "4203344:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13892 + v0];\n
}\n
", "4203369:sub_402369": null, "4203376:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203401:sub_402389": null, "4203408:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[13764 + v0];\n
}\n
", "4203433:sub_4023a9": null, "4203440:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203448:sub_4023b8": null, "4203456:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203475:sub_4023d3": null, "4203488:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203507:sub_4023f3": null, "4203520:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4203609:sub_402459": null, "4203616:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_40b784;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // ebp\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
        return 0;\n
    if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_402517;\n
            else\n
                goto LABEL_0x402530;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_40b784;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_402517;\n
            }\n
            while (true)\n
            {\n
LABEL_402517:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4204042:sub_40260a": null, "4204048:cgc_get_size_class": "extern unsigned int g_40b680;\n
extern unsigned int g_40b684;\n
extern unsigned int g_40b688;\n
extern unsigned int g_40b68c;\n
extern unsigned int g_40b690;\n
extern unsigned int g_40b694;\n
extern unsigned int g_40b698;\n
extern unsigned int g_40b69c;\n
extern unsigned int g_40b6a0;\n
extern unsigned int g_40b6a4;\n
extern unsigned int g_40b6a8;\n
extern unsigned int g_40b6ac;\n
extern unsigned int g_40b6b0;\n
extern unsigned int g_40b6b4;\n
extern unsigned int g_40b6b8;\n
extern unsigned int g_40b6bc;\n
extern unsigned int g_40b6c0;\n
extern unsigned int g_40b6c4;\n
extern unsigned int g_40b6c8;\n
extern unsigned int g_40b6cc;\n
extern unsigned int g_40b6d0;\n
extern unsigned int g_40b6d4;\n
extern unsigned int g_40b6d8;\n
extern unsigned int g_40b6dc;\n
extern unsigned int g_40b6e0;\n
extern unsigned int g_40b6e4;\n
extern unsigned int g_40b6e8;\n
extern unsigned int g_40b6ec;\n
extern unsigned int g_40b6f0;\n
extern unsigned int g_40b6f4;\n
extern unsigned int g_40b6f8;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_40b680 < v1)\n
    {\n
        v2 = 2;\n
        if (g_40b684 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40b688 < v1)\n
            {\n
                v2 = 4;\n
                if (g_40b68c < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_40b690 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_40b694 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40b698 < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_40b69c < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_40b6a0 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_40b6a4 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40b6a8 < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_40b6ac < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_40b6b0 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_40b6b4 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_40b6b8 < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_40b6bc < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_40b6c0 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_40b6c4 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_40b6c8 < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_40b6cc < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_40b6d0 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_40b6d4 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_40b6d8 < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_40b6dc < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_40b6e0 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_40b6e4 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_40b6e8 < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_40b6ec < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_40b6f0 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_40b6f4 < v1)\n
                                                                                                                            v2 = 31 + (g_40b6f8 < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204567:sub_402817": null, "4204576:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4204669:sub_40287d": null, "4204672:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // ecx\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4204767:sub_4028df": null, "4204768:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!*((v1 + 20)))\n
        return v34;\n
    v12 = *((v1 + 16));\n
    if (!*((v2 + 4)))\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!*((v12 + 4)))\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(*(v12));\n
            v6 = *((v12 + 12));\n
            if (v6)\n
                *((v6 + 8)) = *((v12 + 8));\n
            v10 = *((v12 + 8));\n
            if (v10)\n
                *((v10 + 12)) = v6;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[47 + v4] == v12)\n
                (&_GLOBAL_OFFSET_TABLE_)[47 + v4] = v10;\n
            *((v12 + 8)) = 0;\n
            *((v12 + 12)) = 0;\n
            *((v12 + 4)) = 0;\n
            v14 = *(v1);\n
            v15 = cgc_get_size_class(v14);\n
            v17 = *((v1 + 12));\n
            if (v17)\n
                *((v17 + 8)) = *((v1 + 8));\n
            v22 = *((v1 + 8));\n
            if (v22)\n
                *((v22 + 12)) = v17;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[47 + v15] == v1)\n
                (&_GLOBAL_OFFSET_TABLE_)[47 + v15] = v22;\n
            *((v1 + 8)) = 0;\n
            *((v1 + 12)) = 0;\n
            *((v1 + 4)) = 0;\n
            v26 = v14 + *(*((v1 + 16)));\n
            *(v1) = v26;\n
            v27 = cgc_get_size_class(v26);\n
            *((v1 + 4)) = 1;\n
            v29 = (&_GLOBAL_OFFSET_TABLE_)[47 + v27];\n
            if (v29)\n
            {\n
                *((v1 + 8)) = v29;\n
                *(((&_GLOBAL_OFFSET_TABLE_)[47 + v27] + 12)) = v1;\n
                (&_GLOBAL_OFFSET_TABLE_)[47 + v27] = v1;\n
                *((v1 + 12)) = 0;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c5a;\n
            }\n
            else\n
            {\n
                (&_GLOBAL_OFFSET_TABLE_)[47 + v27] = v1;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c5a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_402c5a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_402c61:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && *((v12 + 4)))\n
    {\n
        v3 = cgc_get_size_class(*(v2));\n
        v5 = *((v2 + 12));\n
        if (v5)\n
            *((v5 + 8)) = *((v2 + 8));\n
        v8 = *((v2 + 8));\n
        if (v8)\n
            *((v8 + 12)) = v5;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[47 + v3] == v2)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[47 + v3] = v8;\n
            v12 = *((v1 + 16));\n
        }\n
        *((v2 + 8)) = 0;\n
        *((v2 + 12)) = 0;\n
        *((v2 + 4)) = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            *((v16 + 8)) = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            *((v20 + 12)) = v16;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[47 + v13] == v12)\n
            (&_GLOBAL_OFFSET_TABLE_)[47 + v13] = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = *(v1);\n
        v25 = cgc_get_size_class(v24);\n
        v28 = *((v1 + 12));\n
        if (v28)\n
            *((v28 + 8)) = *((v1 + 8));\n
        v35 = *((v1 + 8));\n
        if (v35)\n
            *((v35 + 12)) = v28;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[47 + v25] == v1)\n
            (&_GLOBAL_OFFSET_TABLE_)[47 + v25] = v35;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 4)) = 0;\n
        v38 = *((v1 + 20));\n
        v39 = v24 + *(*((v1 + 20)));\n
        *(*((v1 + 20))) = v39;\n
        v40 = v39 + *(*((v1 + 16)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 4)) = 1;\n
        v42 = (&_GLOBAL_OFFSET_TABLE_)[47 + v41];\n
        if (v42)\n
        {\n
            *((v38 + 8)) = v42;\n
            *(((&_GLOBAL_OFFSET_TABLE_)[47 + v41] + 12)) = v38;\n
            (&_GLOBAL_OFFSET_TABLE_)[47 + v41] = v38;\n
            *((v38 + 12)) = 0;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a51;\n
        }\n
        else\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[47 + v41] = v38;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a51;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_402a51:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            *((v45 + 20)) = v44;\n
            v34 = *((v1 + 20));\n
            if (!v34)\n
                goto LABEL_402b60;\n
            goto LABEL_402b5a;\n
        }\n
    }\n
    v34 = *((v1 + 16));\n
    if (!v34)\n
        return *((v1 + 16));\n
    if (*((v34 + 4)))\n
        return *((v1 + 16));\n
    v7 = cgc_get_size_class(*(v2));\n
    v9 = *((v2 + 12));\n
    if (v9)\n
        *((v9 + 8)) = *((v2 + 8));\n
    v11 = *((v2 + 8));\n
    if (v11)\n
        *((v11 + 12)) = v9;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[47 + v7] == v2)\n
        (&_GLOBAL_OFFSET_TABLE_)[47 + v7] = v11;\n
    *((v2 + 8)) = 0;\n
    *((v2 + 12)) = 0;\n
    *((v2 + 4)) = 0;\n
    v18 = *(v1);\n
    v19 = cgc_get_size_class(v18);\n
    v21 = *((v1 + 12));\n
    if (v21)\n
        *((v21 + 8)) = *((v1 + 8));\n
    v23 = *((v1 + 8));\n
    if (v23)\n
        *((v23 + 12)) = v21;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[47 + v19] == v1)\n
        (&_GLOBAL_OFFSET_TABLE_)[47 + v19] = v23;\n
    *((v1 + 8)) = 0;\n
    *((v1 + 12)) = 0;\n
    *((v1 + 4)) = 0;\n
    v30 = *((v1 + 20));\n
    v31 = v18 + *(*((v1 + 20)));\n
    *(*((v1 + 20))) = v31;\n
    v32 = cgc_get_size_class(v31);\n
    *((v30 + 4)) = 1;\n
    v36 = (&_GLOBAL_OFFSET_TABLE_)[47 + v32];\n
    if (v36)\n
    {\n
        *((v30 + 8)) = v36;\n
        *(((&_GLOBAL_OFFSET_TABLE_)[47 + v32] + 12)) = v30;\n
        (&_GLOBAL_OFFSET_TABLE_)[47 + v32] = v30;\n
        *((v30 + 12)) = 0;\n
    }\n
    else\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[47 + v32] = v30;\n
        v34 = *((v1 + 20));\n
        if (!v34)\n
            goto LABEL_402b60;\n
LABEL_402b5a:\n
        *((v34 + 16)) = *((v1 + 16));\n
LABEL_402b60:\n
        v37 = *((v1 + 16));\n
        if (!v37)\n
            return v34;\n
        goto LABEL_402c61;\n
    }\n
    v34 = *((v1 + 20));\n
    if (!v34)\n
        goto LABEL_402b60;\n
    goto LABEL_402b5a;\n
}\n
", "4205744:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205801:sub_402ce9": null, "4205808:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v2)) != *((v0 + v2)))\n
            return *((a0 + v2)) - *((v0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205871:sub_402d2f": null, "4205872:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4206002:sub_402db2": null, "4206016:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4206272:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4206382:sub_402f2e": null, "4206384:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
\n
    v6 = a2;\n
    v7 = a1;\n
    v8 = a0;\n
    v11 = v5;\n
    if (v8 < v7)\n
    {\n
        v3 = v8;\n
        v2 = 0;\n
        if (v6 <= 0)\n
            goto LABEL_40300b;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v8) /m v7;\n
        v3 = tmp_9 >> 32;\n
        v11 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v8) /m v7, v7, v6 - 1, a3);\n
        if (v6 <= 0)\n
            goto LABEL_40300b;\n
    }\n
    if (!v2)\n
    {\n
        tmp_2 = v6;\n
        v12 = v6 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_40300b:\n
    if (!(a3 & 2))\n
    {\n
        v13 = v3;\n
        v14 = v13 + 87;\n
    }\n
    else\n
    {\n
        v13 = v3;\n
        v14 = v13 + 55;\n
    }\n
    if (v13 < 10)\n
        v14 = v13 + 48;\n
    v1 = v14;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4206676:sub_403054": null, "4206688:cgc_fdprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fdprintf(unsigned int v10, struct struct_1 **a0)\n
{\n
    char *v0;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    char *v3;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x38]\n
    struct_0 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    struct struct_2 **v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x14]\n
    char v11;  // [bp+0xc]\n
    struct struct_1 **v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    struct_0 *v14;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    struct struct_1 **v19;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v20;  // eax, Other Possible Types: unsigned int\n
    char *v21;  // edx, Other Possible Types: unsigned int\n
    struct struct_2 **v22;  // eax\n
    struct struct_2 **v23;  // eax\n
    char *v24;  // edi, Other Possible Types: unsigned int\n
    struct struct_2 **v25;  // eax\n
    struct struct_2 **v26;  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v20 = v12 + 1;\n
        a0 = v20;\n
        *(&v12) = *(v12);\n
        if (v6 == 37)\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            v19 = v20;\n
            while (true)\n
            {\n
                v20 = v19 + 1;\n
                a0 = v20;\n
                v16 = *(v19);\n
                v17 = v16;\n
                if (v17 - 49 >= 9)\n
                    break;\n
                v18 = cgc_strtol(v19, &a0);\n
                v19 = a0;\n
            }\n
            switch (v17)\n
            {\n
            case 88:\n
                v21 = v9 | 2;\n
                goto LABEL_403219;\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
                v6 = v16;\n
                break;\n
            case 99:\n
                v22 = v8;\n
                v8 = v22 + 1;\n
                v6 = *(v22);\n
                break;\n
            case 100:\n
                v23 = v8;\n
                v8 = v23 + 1;\n
                v24 = *(v23);\n
                if (v24 >= 0)\n
                {\n
                    v28 = v10;\n
                }\n
                else\n
                {\n
LABEL_403257:\n
                    v6 = 45;\n
                    v5 = &v7;\n
                    v28 = v10;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v24 = -(v24);\n
                }\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                v0 = v24;\n
                goto LABEL_403282;\n
            case 115:\n
                v25 = v8;\n
                v8 = v25 + 1;\n
                v9 = &*(v25)->field_0;\n
                v27 = v10;\n
                v14 = &v7;\n
                v15 = &v6;\n
                if (cgc_strlen())\n
                {\n
                    v29 = 0;\n
                    do\n
                    {\n
                        v6 = v9[v29];\n
                        v5 = v14;\n
                        v4 = v15;\n
                        cgc_transmit(v27, v15, 1);\n
                        v29 += 1;\n
                        v15 = &v6;\n
                        v14 = &v7;\n
                    } while (v29 < cgc_strlen(v9, v4, 1));\n
                }\n
                goto LABEL_4030b7;\n
            case 117:\n
                v26 = v8;\n
                v8 = v26 + 1;\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                goto LABEL_40322b;\n
            case 120:\n
                v21 = v9;\n
LABEL_403219:\n
                v26 = v8;\n
                v8 = v26 + 4;\n
                v3 = v21;\n
                v2 = v18;\n
                v1 = 16;\n
LABEL_40322b:\n
                v0 = *(v26);\n
                v28 = v10;\n
LABEL_403282:\n
                cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                v27 = v28;\n
                v14 = &v7;\n
                v15 = &v6;\n
                goto LABEL_4030b7;\n
            default:\n
                if (v17 == 37)\n
                    goto LABEL_0x403233;\n
                else\n
                    goto LABEL_0x403121;\n
            }\n
            v5 = &v7;\n
            v15 = &v6;\n
            cgc_transmit(v10, &v6, 1);\n
            v27 = v10;\n
            goto LABEL_403257;\n
        }\n
        v6 = v12;\n
        v5 = v14;\n
        cgc_transmit(v13, v15, 1);\n
        v27 = v13;\n
        v14 = &v7;\n
LABEL_4030b7:\n
        v13 = v27;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4206742:sub_403096": null, "4207268:sub_4032a4": null, "4207280:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033d4;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033d4;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_4033d4:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4207626:sub_40340a": null, "4207632:cgc_sprintf": "typedef struct struct_0 {\n
    char field_-1;\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_sprintf(char v8[2], struct_0 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_1 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_0 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_0 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_0 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_1 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_1 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_1 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_4035b7;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_403537:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_403537;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_4035b7:\n
                        v8 = v20 + 1;\n
                        goto LABEL_40345d;\n
                    }\n
                }\n
            }\n
LABEL_40345d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4207686:sub_403446": null, "4208085:sub_4035d5": null, "4208096:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40364a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40364a:\n
    return v5;\n
}\n
", "4208212:sub_403654": null, "4208224:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4036ca;\n
        }\n
    }\n
LABEL_4036ca:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4208263:sub_403687": null, "4208368:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4208425:sub_403729": null, "4208432:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a0)\n
            return v1;\n
    }\n
}\n
", "4208466:sub_403752": null, "4208480:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // cl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return *(v1) - v5;\n
            if (v5 != v3)\n
                return *(v1) - v5;\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return *(v1) - 0;\n
}\n
", "4208548:sub_4037a4": null, "4208560:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4208625:sub_4037f1": null, "4208640:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208716:sub_40384c": null, "4208720:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4208747:sub_40386b": null, "4208752:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4208834:sub_4038c2": null, "4208903:sub_403907": null, "4208912:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(a0) - *(v0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v4) - *(v3);\n
        }\n
    }\n
}\n
", "4208994:sub_403962": null, "4209008:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4209146:sub_4039fa": null, "4209152:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_403a6d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_403a6d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4209271:sub_403a77": null, "4209280:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4209323:sub_403aab": null, "4209495:sub_403b57": null, "4209591:sub_403bb7": null, "4209600:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4209641:sub_403be9": null, "4209648:cgc_bbs_help": "int cgc_bbs_help()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
\n
    v1 = v3;\n
    v0 = cgc_strlen(\"Available commands:\\n
\\t(L)ist [thread-id]\\n
\\t\\tList all threads, or messages in a thread\\n
\\t(P)ost [thread-id]\\n
\\t\\tPost a new thread, or a reply to a thread\\n
\\t(R)ead message-id\\n
\\t\\tGet message contents\\n
\\t(H)elp\\n
\\t\\tThis screen\\n
\");\n
    return cgc_modem_output(\"Available commands:\\n
\\t(L)ist [thread-id]\\n
\\t\\tList all threads, or messages in a thread\\n
\\t(P)ost [thread-id]\\n
\\t\\tPost a new thread, or a reply to a thread\\n
\\t(R)ead message-id\\n
\\t\\tGet message contents\\n
\\t(H)elp\\n
\\t\\tThis screen\\n
\");\n
}\n
", "4209697:sub_403c21": null, "4209712:cgc_bbs_menu": "int cgc_bbs_menu()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
\n
    v1 = v3;\n
    v0 = cgc_strlen(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
    return cgc_modem_output(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
}\n
", "4209761:sub_403c61": null, "4209776:cgc_find_thread": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_0 *g_threads;\n
\n
int cgc_find_thread(unsigned int v0)\n
{\n
    struct_0 *v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = g_threads;\n
    if (!g_threads)\n
        return 0;\n
    v2 = v0;\n
    while (true)\n
    {\n
        if (*((v1 + 8)) < v2)\n
        {\n
            return 0;\n
        }\n
        else if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(ecx<4> + 0x8<32>), size=4, endness=Iend_LE), edx<4>, 0x0<32>))\n
        {\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 = *(v1);\n
            if (!v1)\n
                return 0;\n
        }\n
    }\n
}\n
", "4209825:sub_403ca1": null, "4209840:cgc_find_message": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern struct_1 *g_threads;\n
\n
int cgc_find_message(unsigned int v0)\n
{\n
    struct_1 *v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v3;  // edx\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = g_threads;\n
    if (!g_threads)\n
        return 0;\n
    v3 = v0;\n
    v4 = g_threads->field_4;\n
    if (!v4)\n
        goto LABEL_403ce0;\n
    while (true)\n
    {\n
        if (*((v4 + 4)) >= v3)\n
        {\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(esi<4> + 0x4<32>), size=4, endness=Iend_LE), edx<4>, 0x0<32>))\n
                break;\n
            v4 = *(v4);\n
            if (!(!v4))\n
                continue;\n
        }\n
        do\n
        {\n
LABEL_403ce0:\n
            v1 = *(v1);\n
            if (!v1)\n
                return 0;\n
            v4 = *((v1 + 4));\n
        } while (!v4);\n
    }\n
    return v4;\n
}\n
", "4209923:sub_403d03": null, "4209936:cgc_send_thread": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_send_thread(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    char v2[2];  // [bp-0x6c]\n
    struct_0 *v4;  // eax\n
\n
    v4 = v3;\n
    v1 = v4 + 1;\n
    v0 = v4->field_8;\n
    cgc_sprintf(v2, \"%08d - %s\\n
\");\n
    cgc_strlen(v2);\n
    return cgc_modem_output(v2);\n
}\n
", "4210004:sub_403d54": null, "4210016:cgc_send_message_brief": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_send_message_brief(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    char v2[2];  // [bp-0x6c]\n
    struct_0 *v4;  // eax\n
\n
    v4 = v3;\n
    v1 = v4 + 1;\n
    v0 = v4->field_4;\n
    cgc_sprintf(v2, \"%08d - %s\\n
\");\n
    cgc_strlen(v2);\n
    return cgc_modem_output(v2);\n
}\n
", "4210084:sub_403da4": null, "4210096:cgc_send_message": "int cgc_send_message(unsigned int v3[19])\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    char v2[2];  // [bp-0x70]\n
    unsigned int v4[19];  // esi\n
    unsigned int v5;  // esi\n
\n
    v4 = v3;\n
    v1 = &v4[2];\n
    v0 = v4[1];\n
    cgc_sprintf(v2, \"%08d - %s\\n
\");\n
    cgc_strlen(v2);\n
    cgc_modem_output(v2);\n
    v5 = v4[18];\n
    cgc_strlen(v5);\n
    return cgc_modem_output(v5);\n
}\n
", "4210199:sub_403e17": null, "4210208:cgc_send_thread_list": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_0 *g_40b790;\n
extern unsigned int g_state;\n
\n
int cgc_send_thread_list(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    void* v2;  // [bp-0x78]\n
    char v3[2];  // [bp-0x74]\n
    struct_0 *v5;  // esi, Other Possible Types: unsigned int\n
    void* v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v5 = v4;\n
    if (v5)\n
    {\n
        v6 = 0;\n
        v2 = \"%08d - %s\\n
\";\n
        while (true)\n
        {\n
            v1 = v5 + 12;\n
            v0 = *((v5 + 8));\n
            cgc_sprintf(v3, v2);\n
            cgc_strlen(v3);\n
            v7 = cgc_modem_output(v3);\n
            v5 = *(v5);\n
            if (v6 > 38)\n
                break;\n
            v6 += 1;\n
            if (!v5)\n
                break;\n
        }\n
        if (v5)\n
        {\n
            g_state = 1;\n
            g_40b790 = v5;\n
            cgc_strlen(\"(N)ext page, (Q)uit\\n
\");\n
            v7 = cgc_modem_output(\"(N)ext page, (Q)uit\\n
\");\n
            return v7;\n
        }\n
    }\n
    g_state = 0;\n
    return v7;\n
}\n
", "4210377:sub_403ec9": null, "4210384:cgc_send_message_list": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern struct_0 *g_40b794;\n
extern unsigned int g_state;\n
\n
int cgc_send_message_list(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    void* v2;  // [bp-0x78]\n
    char v3[2];  // [bp-0x74]\n
    struct_0 *v5;  // esi, Other Possible Types: unsigned int\n
    void* v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v5 = v4;\n
    if (v5)\n
    {\n
        v6 = 0;\n
        v2 = \"%08d - %s\\n
\";\n
        while (true)\n
        {\n
            v1 = v5 + 8;\n
            v0 = *((v5 + 4));\n
            cgc_sprintf(v3, v2);\n
            cgc_strlen(v3);\n
            v7 = cgc_modem_output(v3);\n
            v5 = *(v5);\n
            if (v6 > 38)\n
                break;\n
            v6 += 1;\n
            if (!v5)\n
                break;\n
        }\n
        if (v5)\n
        {\n
            g_state = 2;\n
            g_40b794 = v5;\n
            cgc_strlen(\"(N)ext page, (Q)uit\\n
\");\n
            v7 = cgc_modem_output(\"(N)ext page, (Q)uit\\n
\");\n
            return v7;\n
        }\n
    }\n
    g_state = 0;\n
    return v7;\n
}\n
", "4210553:sub_403f79": null, "4210560:cgc_do_list": "typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 *g_40b790;\n
extern struct_0 *g_40b794;\n
extern unsigned int g_state;\n
extern struct_1 *g_threads;\n
\n
int cgc_do_list(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x80]\n
    void* v1;  // [bp-0x78]\n
    char v2[2];  // [bp-0x74]\n
    struct_2 *v4;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v5;  // ecx, Other Possible Types: unsigned int\n
    struct_1 *v6;  // esi, Other Possible Types: unsigned int\n
    void* v7;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // esi, Other Possible Types: unsigned int\n
    void* v9;  // edi, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    if (v4->field_1 != 32)\n
    {\n
        v6 = g_threads;\n
        if (g_threads)\n
        {\n
            v7 = 0;\n
            v1 = \"%08d - %s\\n
\";\n
            while (true)\n
            {\n
                v0 = v6 + 12;\n
                cgc_sprintf(v2, v1);\n
                cgc_strlen(v2);\n
                v4 = cgc_modem_output(v2);\n
                v6 = *(v6);\n
                if (v7 > 38)\n
                    break;\n
                v7 += 1;\n
                if (!v6)\n
                    break;\n
            }\n
            if (v6)\n
            {\n
                g_state = 1;\n
                g_40b790 = v6;\n
                goto LABEL_40405d;\n
            }\n
        }\n
    }\n
    v4 = cgc_strtol(v4 + 1, NULL, 10);\n
    v5 = g_threads;\n
    if (!g_threads)\n
    {\n
LABEL_403fd1:\n
        cgc_strlen(\"Thread ID not found.\\n
\");\n
        v4 = cgc_modem_output(\"Thread ID not found.\\n
\");\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (*((v5 + 8)) < v4)\n
            goto LABEL_403fd1;\n
        if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(ecx<4> + 0x8<32>), size=4, endness=Iend_LE), eax<4>, 0x0<32>))\n
        {\n
            v8 = *((v5 + 4));\n
            if (v8)\n
            {\n
                v9 = 0;\n
                v1 = \"%08d - %s\\n
\";\n
                while (true)\n
                {\n
                    v0 = v8 + 8;\n
                    cgc_sprintf(v2, v1);\n
                    cgc_strlen(v2);\n
                    v4 = cgc_modem_output(v2);\n
                    v8 = *(v8);\n
                    if (v9 > 38)\n
                        break;\n
                    v9 += 1;\n
                    if (!v8)\n
                        break;\n
                }\n
                if (!v8)\n
                    goto LABEL_4040ee;\n
                g_state = 2;\n
                g_40b794 = v8;\n
LABEL_40405d:\n
                cgc_strlen(\"(N)ext page, (Q)uit\\n
\");\n
                v4 = cgc_modem_output(\"(N)ext page, (Q)uit\\n
\");\n
                goto LABEL_4040f8;\n
            }\n
LABEL_4040ee:\n
            g_state = 0;\n
LABEL_4040f8:\n
            return v4;\n
        }\n
        v5 = *(v5);\n
        goto LABEL_403fd1;\n
    }\n
}\n
", "4210944:cgc_do_post": "typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_0 *g_40b790;\n
extern unsigned int g_state;\n
extern struct_0 *g_threads;\n
\n
int cgc_do_post(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1->field_1 == 32)\n
    {\n
        v3 = cgc_strtol(v1 + 1, NULL, 10);\n
        v2 = g_threads;\n
        if (!g_threads)\n
        {\n
LABEL_40415d:\n
            cgc_strlen(\"Thread ID not found.\\n
\");\n
            v4 = cgc_modem_output(\"Thread ID not found.\\n
\");\n
            return v4;\n
        }\n
        while (true)\n
        {\n
            if (*((v2 + 8)) < v3)\n
                goto LABEL_40415d;\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(esi<4> + 0x8<32>), size=4, endness=Iend_LE), eax<4>, 0x0<32>))\n
                break;\n
            v2 = *(v2);\n
            goto LABEL_40415d;\n
        }\n
    }\n
    cgc_strlen(\"Subject?\\n
\");\n
    v4 = cgc_modem_output(\"Subject?\\n
\");\n
    g_state = 3;\n
    g_40b790 = v2;\n
    return v4;\n
}\n
", "4211114:sub_4041aa": null, "4211120:cgc_do_read": "typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
    char padding_8[64];\n
    unsigned int field_48;\n
} struct_0;\n
\n
extern struct_1 *g_threads;\n
\n
int cgc_do_read(struct_2 *v2)\n
{\n
    unsigned int v0;  // [bp-0x80]\n
    char v1[2];  // [bp-0x70]\n
    struct_2 *v3;  // eax\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // esi\n
\n
    v3 = v2;\n
    if (v3->field_1 != 32)\n
    {\n
        v7 = \"Missing required argument.\\n
\";\n
    }\n
    else\n
    {\n
        v4 = cgc_strtol(v3 + 1, NULL, 10);\n
        v6 = g_threads;\n
        while (true)\n
        {\n
            if (!v6)\n
            {\n
                v7 = \"Message ID not found.\\n
\";\n
                break;\n
            }\n
            else\n
            {\n
                v5 = *((v6 + 4));\n
                if (v5 && *((v5 + 4)) >= v4)\n
                {\n
                    if (!([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(esi<4> + 0x4<32>), size=4, endness=Iend_LE), eax<4>, 0x0<32>)))\n
                    {\n
                        v5 = *(v5);\n
                    }\n
                    else\n
                    {\n
                        v0 = v5 + 8;\n
                        cgc_sprintf(v1, \"%08d - %s\\n
\");\n
                        cgc_strlen(v1);\n
                        cgc_modem_output(v1);\n
                        v7 = *((v5 + 72));\n
                        break;\n
                    }\n
                }\n
                v6 = *(v6);\n
            }\n
        }\n
    }\n
    cgc_strlen(v7);\n
    return cgc_modem_output(v7);\n
}\n
", "4211178:sub_4041ea": null, "4211313:sub_404271": null, "4211328:cgc_handle_post": "extern struct_0 *g_40b790;\n
extern char g_40b794;\n
extern char g_40b7d3;\n
extern unsigned int g_next_id;\n
extern unsigned int g_state;\n
extern struct_0 *g_threads;\n
\n
int cgc_handle_post(char *v0)\n
{\n
    unsigned int v1[3];  // eax, Other Possible Types: unsigned int, unsigned int [19]\n
    unsigned int v2[3];  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    unsigned int v5[19];  // edi\n
    unsigned int v6;  // eax\n
\n
    if (g_state == 4)\n
    {\n
        v2 = g_40b790;\n
        if (g_40b790)\n
        {\n
LABEL_40434c:\n
            v1 = cgc_malloc(76);\n
            v4 = 0;\n
            if (v1)\n
            {\n
                v5 = v1;\n
                v6 = g_next_id;\n
                g_next_id = g_next_id + 1;\n
                v5[1] = v6;\n
                cgc_strcpy(&v5[2], &g_40b794);\n
                v1 = cgc_strdup(v0);\n
                v5[18] = v1;\n
                if (v1)\n
                {\n
                    v1 = *((v2 + 4));\n
                    v5[0] = v1;\n
                    *((v2 + 4)) = v5;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v1 = cgc_malloc(76);\n
            if (!v1)\n
            {\n
                v4 = 0;\n
            }\n
            else\n
            {\n
                v2 = v1;\n
                cgc_strcpy(v1 + 1, &g_40b794);\n
                v3 = g_next_id;\n
                g_next_id = g_next_id + 1;\n
                *((v2 + 8)) = v3;\n
                *(v2) = g_threads;\n
                *((v2 + 4)) = 0;\n
                g_threads = v2;\n
                goto LABEL_40434c;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (g_state != 3)\n
            return g_state;\n
        cgc_strncpy(&g_40b794, v0, 63);\n
        g_40b7d3 = 0;\n
        cgc_strlen(\"Body?\\n
\");\n
        v1 = cgc_modem_output(\"Body?\\n
\");\n
        v4 = 4;\n
    }\n
    g_state = v4;\n
    return v1;\n
}\n
", "4211638:sub_4043b6": null, "4211648:cgc_handle_list": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 *g_40b790;\n
extern struct_1 *g_40b794;\n
extern unsigned int g_state;\n
\n
int cgc_handle_list(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x80]\n
    void* v2;  // [bp-0x78]\n
    char v3[2];  // [bp-0x74]\n
    char *v5;  // esi\n
    unsigned int v6;  // eax\n
    void* v7;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v8;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v9;  // esi, Other Possible Types: unsigned int\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
\n
    v5 = v4;\n
    v6 = cgc_tolower(*(v5));\n
    if (v6 != 113)\n
    {\n
        v6 = cgc_tolower(*(v5));\n
        if (v6 != 110)\n
        {\n
            v11 = \"Bad input.\\n
\";\n
            goto LABEL_4044a6;\n
        }\n
        else if (g_state == 1)\n
        {\n
            v8 = g_40b790;\n
            if (g_40b790)\n
            {\n
                v7 = 0;\n
                v2 = \"%08d - %s\\n
\";\n
                while (true)\n
                {\n
                    v1 = v8 + 12;\n
                    v0 = *((v8 + 8));\n
                    cgc_sprintf(v3, v2);\n
                    cgc_strlen(v3);\n
                    v6 = cgc_modem_output(v3);\n
                    v8 = *(v8);\n
                    if (v7 > 38)\n
                        break;\n
                    v7 += 1;\n
                    if (!v8)\n
                        break;\n
                }\n
                if (v8)\n
                {\n
                    g_state = 1;\n
                    g_40b790 = v8;\n
                    v11 = \"(N)ext page, (Q)uit\\n
\";\n
                    goto LABEL_4044a6;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v9 = g_40b794;\n
            if (g_40b794)\n
            {\n
                v10 = 0;\n
                v2 = \"%08d - %s\\n
\";\n
                while (true)\n
                {\n
                    v1 = v9 + 8;\n
                    v0 = *((v9 + 4));\n
                    cgc_sprintf(v3, v2);\n
                    cgc_strlen(v3);\n
                    v6 = cgc_modem_output(v3);\n
                    v9 = *(v9);\n
                    if (v10 > 38)\n
                        break;\n
                    v10 += 1;\n
                    if (!v9)\n
                        break;\n
                }\n
                if (v9)\n
                {\n
                    g_state = 2;\n
                    g_40b794 = v9;\n
                    v11 = \"(N)ext page, (Q)uit\\n
\";\n
LABEL_4044a6:\n
                    cgc_strlen(v11);\n
                    v6 = cgc_modem_output(v11);\n
                    return v6;\n
                }\n
            }\n
        }\n
    }\n
    g_state = 0;\n
    return v6;\n
}\n
", "4212035:sub_404543": null, "4212048:cgc_handle_menu": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern struct_0 *g_40b790;\n
extern unsigned int g_state;\n
extern struct_0 *g_threads;\n
\n
int cgc_handle_menu(char v0[2])\n
{\n
    char v1[2];  // eax\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = v0;\n
    if ((v1[1] & 223))\n
    {\n
        v2 = \"Bad input. Unknown command.\\n
\";\n
        goto LABEL_404592;\n
    }\n
    else\n
    {\n
        switch (v1[0])\n
        {\n
        case 63: case 72: case 104:\n
            v2 = \"Available commands:\\n
\\t(L)ist [thread-id]\\n
\\t\\tList all threads, or messages in a thread\\n
\\t(P)ost [thread-id]\\n
\\t\\tPost a new thread, or a reply to a thread\\n
\\t(R)ead message-id\\n
\\t\\tGet message contents\\n
\\t(H)elp\\n
\\t\\tThis screen\\n
\";\n
            break;\n
        case 76: case 108:\n
            v5 = cgc_do_list(v1);\n
            return v5;\n
        case 80: case 112:\n
            v4 = 0;\n
            if (v1[1] == 32)\n
            {\n
                v3 = cgc_strtol(v1 + 1, NULL, 10);\n
                v4 = g_threads;\n
                if (!g_threads)\n
                {\n
LABEL_4045fd:\n
                    v2 = \"Thread ID not found.\\n
\";\n
LABEL_404592:\n
                    cgc_strlen(v2);\n
                    v5 = cgc_modem_output(v2);\n
                    return v5;\n
                }\n
                while (true)\n
                {\n
                    if (*((v4 + 8)) < v3)\n
                        goto LABEL_4045fd;\n
                    if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=(esi<4> + 0x8<32>), size=4, endness=Iend_LE), eax<4>, 0x0<32>))\n
                        break;\n
                    v4 = *(v4);\n
                    goto LABEL_4045fd;\n
                }\n
            }\n
            cgc_strlen(\"Subject?\\n
\");\n
            v5 = cgc_modem_output(\"Subject?\\n
\");\n
            g_state = 3;\n
            g_40b790 = v4;\n
            return v5;\n
        case 81: case 113:\n
            cgc__terminate();\n
            return cgc_bbs_rx();\n
        case 82: case 114:\n
            v5 = cgc_do_read(v1);\n
            return v5;\n
        default:\n
            v2 = \"Bad input. Unknown command.\\n
\";\n
            break;\n
        }\n
    }\n
}\n
", "4212304:cgc_bbs_rx": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int g_state;\n
\n
int cgc_bbs_rx(char *v1, unsigned int a0)\n
{\n
    char v0;  // [bp-0x71]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = (v2 < 100 ? 100 : a0);\n
    cgc_memcpy(&v0, v1, v2);\n
    *((&v0 + v2)) = 0;\n
    v3 = cgc_strlen(&v0);\n
    if (!v3)\n
        return v3;\n
    if (!g_state)\n
    {\n
        v3 = cgc_handle_menu(&v0);\n
    }\n
    else if (g_state - 1 <= 1)\n
    {\n
        v3 = cgc_handle_list(&v0);\n
    }\n
    else\n
    {\n
        v3 = g_state - 3;\n
        if (v3 <= 1)\n
            v3 = cgc_handle_post(&v0);\n
    }\n
    if (!g_state)\n
    {\n
        cgc_strlen(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
        v3 = cgc_modem_output(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4212486:sub_404706": null, "4212496:main": "int main()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    cgc_modem_init();\n
    v0 = cgc_strlen(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
    cgc_modem_output(\"(L)ist, (H)elp, (P)ost, (R)ead\\n
\");\n
    cgc_modem_loop(cgc_bbs_rx);\n
    return 0;\n
}\n
", "4212566:sub_404756": null, "4212576:cgc_buffer_read_bit": "int cgc_buffer_read_bit(unsigned int v1[6])\n
{\n
    int tmp_23;  // tmp #23\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v2[6];  // esi\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // edi\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // edi\n
\n
    v2 = v1;\n
    v3 = v2[0];\n
    v4 = v2[1];\n
    if (!(v2[2] ^ v3) && !(v2[3] ^ v4))\n
        return -1;\n
    v6 = v2[5];\n
    v7 = *((v2[4] + ((v4 CONCAT v3) * 0x20000000 >> 32))) >> (~(v3) & 7 & 31);\n
    tmp_23 = v3;\n
    v8 = v3 + 1;\n
    v9 = v4 + (tmp_23 + 1 < tmp_23);\n
    v2[1] = v9;\n
    v2[0] = v8;\n
    if (!(v8 ^ v6 << 3) && !v9)\n
    {\n
        v2[1] = 0;\n
        v2[0] = 0;\n
    }\n
    else if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(edi<4>, Conv(1->32, (ebp<4> < edx<4>))), Conv(1->32, (ebp<4> < edx<4>))))\n
    {\n
        v0 = 1;\n
        cgc__terminate();\n
        return cgc_buffer_read_bits();\n
    }\n
    return v7 & 1;\n
}\n
", "4212720:cgc_buffer_read_bits": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_buffer_read_bits(unsigned int v5[6], unsigned int a0)\n
{\n
    int tmp_24;  // tmp #24\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7[6];  // edi, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebp\n
    void* v11;  // edx, Other Possible Types: unsigned int\n
    void* v12;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
\n
    v6 = a0;\n
    if (!a0)\n
        return 0;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = v5;\n
    v3 = v7[3];\n
    v2 = v7[2];\n
    v11 = v7[0];\n
    v12 = v7[1];\n
    v13 = 0;\n
    while (true)\n
    {\n
        if (!(v12 ^ v3) && !(v11 ^ v2))\n
            return v13;\n
        v4 = v6;\n
        v8 = *((v7 + 20));\n
        v9 = *((*((v7 + 16)) + ((v12 CONCAT v11) * 0x20000000 >> 32))) >> (~(v11) & 7 & 31);\n
        tmp_24 = v11;\n
        v11 += 1;\n
        v12 += tmp_24 + 1 < tmp_24;\n
        *((v7 + 4)) = v12;\n
        *(v7) = v11;\n
        if (!(v11 ^ v8 * 8) && !v12)\n
        {\n
            *((v7 + 4)) = 0;\n
            *(v7) = 0;\n
            v11 = 0;\n
            v12 = 0;\n
        }\n
        else if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, 0x0<32>, Xor(ebx<4>, Conv(1->32, (esi<4> < edx<4>))), Conv(1->32, (esi<4> < edx<4>))))\n
        {\n
            v0 = 1;\n
            cgc__terminate();\n
            break;\n
        }\n
        v13 = v13 * 2 | v9 & 1;\n
        v6 = v4 - 1;\n
        v7 = v5;\n
        if (v4 == 1)\n
            return v13;\n
    }\n
}\n
", "4212782:sub_40482e": null, "4212926:sub_4048be": null, "4212928:cgc_buffer_read_bytes": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_buffer_read_bytes(unsigned int v8[6], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_7;  // tmp #7\n
    int tmp_10;  // tmp #10\n
    int tmp_17;  // tmp #17\n
    int tmp_20;  // tmp #20\n
    int tmp_8;  // tmp #8\n
    unsigned int v0;  // [bp-0x3c]\n
    int tmp_24;  // tmp #24\n
    int tmp_23;  // tmp #23\n
    int tmp_9;  // tmp #9\n
    int tmp_22;  // tmp #22\n
    char *v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v9;  // ecx\n
    unsigned int v10[6];  // esi\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ebx\n
    char *v20;  // eax\n
    void* v21;  // edx, Other Possible Types: unsigned int\n
    void* v22;  // edi, Other Possible Types: unsigned int\n
    char *v23;  // ebx\n
    void* v24;  // edx, Other Possible Types: unsigned int\n
    void* v25;  // edi, Other Possible Types: unsigned int\n
    unsigned int v26;  // ebp\n
    char *v27;  // ebx\n
    void* v28;  // edx, Other Possible Types: unsigned int\n
    void* v29;  // edi, Other Possible Types: unsigned int\n
    unsigned int v30;  // ebp\n
    char *v31;  // ebx\n
    void* v32;  // edx, Other Possible Types: unsigned int\n
    void* v33;  // edi, Other Possible Types: unsigned int\n
    unsigned int v34;  // ebp\n
    char *v35;  // ebx\n
    void* v36;  // edx, Other Possible Types: unsigned int\n
    void* v37;  // edi, Other Possible Types: unsigned int\n
    unsigned int v38;  // ebp\n
    char *v39;  // ebx\n
    void* v40;  // edx, Other Possible Types: unsigned int\n
    void* v41;  // edi, Other Possible Types: unsigned int\n
    unsigned int v42;  // ebp\n
    char *v43;  // ebx\n
    unsigned int v44;  // ebp\n
    void* v45;  // edx, Other Possible Types: unsigned int\n
    char *v46;  // ebp, Other Possible Types: unsigned int\n
    void* v47;  // edi, Other Possible Types: unsigned int\n
    char *v48;  // eax, Other Possible Types: unsigned int\n
    unsigned int v49;  // ebx\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // ebp\n
    unsigned int v53;  // edx\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // ecx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // edi\n
    char *v59;  // edi, Other Possible Types: unsigned int\n
\n
    v9 = a1;\n
    v10 = v8;\n
    v53 = v10[0];\n
    v54 = v10[1];\n
    if (!(v53 & 7))\n
    {\n
        v11 = v10[2];\n
        v12 = v10[3];\n
        tmp_4 = v11;\n
        v15 = v11 - v53;\n
        tmp_7 = v12;\n
        v14 = v12 - v54 - (tmp_4 < v53);\n
        if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
        {\n
            v13 = v10[5] * 8;\n
            tmp_10 = v15;\n
            v15 += v13;\n
            v14 += tmp_10 + v13 < tmp_10;\n
        }\n
        v16 = (v14 CONCAT v15) >> 3;\n
        v17 = v14 / 8;\n
        v18 = a1;\n
        tmp_17 = v16;\n
        v9 = v18;\n
        tmp_20 = v17;\n
        v48 = v17 - (tmp_17 < v18);\n
        if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>)))))\n
        {\n
            if (!v18)\n
                return v48;\n
            v59 = ((v54 CONCAT v53) * 0x20000000 >> 32);\n
            v48 = 0;\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    *((a0 + v48)) = *((v10[4] + v59));\n
                    v55 = v10[0];\n
                    tmp_8 = v55;\n
                    v56 = v55 + 8;\n
                    v57 = v10[1] + (tmp_8 + 8 < tmp_8);\n
                    v10[0] = v56;\n
                    v10[1] = v57;\n
                    if (!(!(v56 ^ v10[5] * 8)) || !(!v57))\n
                        break;\n
                    v10[1] = 0;\n
                    v10[0] = 0;\n
                    v59 = 0;\n
                    v48 += 1;\n
                    if (a1 == v48)\n
                        return v48;\n
                }\n
                if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                    break;\n
                v59 = (v57 CONCAT v56) * 0x20000000 >> 32;\n
                v48 += 1;\n
                if (a1 == v48)\n
                    return v48;\n
            }\n
LABEL_404d94:\n
            v0 = 1;\n
            cgc__terminate();\n
        }\n
    }\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v9)\n
        return v48;\n
    v7 = v9 - 1;\n
    v46 = 0;\n
    while (true)\n
    {\n
        v4 = v10[3];\n
        v5 = v10[2];\n
        v48 = 0;\n
        if (!(!(v53 ^ v5)) || !(!(v54 ^ v4)))\n
        {\n
            v19 = v10[5];\n
            v2 = v10[4];\n
            v20 = *((v10[4] + ((v54 CONCAT v53) * 0x20000000 >> 32))) >> (~(v53) & 7 & 31);\n
            tmp_24 = v53;\n
            v21 = v53 + 1;\n
            v22 = v54 + (tmp_24 + 1 < tmp_24);\n
            v10[1] = v22;\n
            v10[0] = v21;\n
            v3 = v19 * 8;\n
            if (!(v21 ^ v3) && !v22)\n
            {\n
                v10[1] = 0;\n
                v10[0] = 0;\n
                v21 = 0;\n
                v22 = 0;\n
            }\n
            else if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
            {\n
                break;\n
            }\n
            v48 = v20 & 1;\n
            if (!(!(v22 ^ v4)) || !(!(v21 ^ v5)))\n
            {\n
                v1 = v46;\n
                v23 = *((v2 + ((v22 CONCAT v21) * 0x20000000 >> 32))) >> (~(v21) & 7 & 31);\n
                tmp_23 = v21;\n
                v24 = v21 + 1;\n
                v25 = v22 + (tmp_23 + 1 < tmp_23);\n
                v10[1] = v25;\n
                v10[0] = v24;\n
                v26 = v3;\n
                if (!(v24 ^ v3) && !v25)\n
                {\n
                    v10[1] = 0;\n
                    v10[0] = 0;\n
                    v24 = 0;\n
                    v25 = 0;\n
                    v46 = v1;\n
                }\n
                else\n
                {\n
                    tmp_9 = v26 < v24;\n
                    tmp_17 = v25 ^ v26 < v24;\n
                    v46 = v1;\n
                    if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                        break;\n
                }\n
                v48 = v23 & 1 | v48 + v48;\n
                if (!(!(v25 ^ v4)) || !(!(v24 ^ v5)))\n
                {\n
                    v27 = *((v2 + ((v25 CONCAT v24) * 0x20000000 >> 32))) >> (~(v24) & 7 & 31);\n
                    tmp_22 = v24;\n
                    v28 = v24 + 1;\n
                    v29 = v25 + (tmp_22 + 1 < tmp_22);\n
                    v10[1] = v29;\n
                    v10[0] = v28;\n
                    v30 = v3;\n
                    if (!(v28 ^ v3) && !v29)\n
                    {\n
                        v10[1] = 0;\n
                        v10[0] = 0;\n
                        v28 = 0;\n
                        v29 = 0;\n
                        v46 = v1;\n
                    }\n
                    else\n
                    {\n
                        tmp_9 = v30 < v28;\n
                        tmp_17 = v29 ^ v30 < v28;\n
                        v46 = v1;\n
                        if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                            break;\n
                    }\n
                    v48 = v27 & 1 | v48 + v48;\n
                    if (!(!(v29 ^ v4)) || !(!(v28 ^ v5)))\n
                    {\n
                        v31 = *((v2 + ((v29 CONCAT v28) * 0x20000000 >> 32))) >> (~(v28) & 7 & 31);\n
                        tmp_22 = v28;\n
                        v32 = v28 + 1;\n
                        v33 = v29 + (tmp_22 + 1 < tmp_22);\n
                        v10[1] = v33;\n
                        v10[0] = v32;\n
                        v34 = v3;\n
                        if (!(v32 ^ v3) && !v33)\n
                        {\n
                            v10[1] = 0;\n
                            v10[0] = 0;\n
                            v32 = 0;\n
                            v33 = 0;\n
                            v46 = v1;\n
                        }\n
                        else\n
                        {\n
                            tmp_9 = v34 < v32;\n
                            tmp_17 = v33 ^ v34 < v32;\n
                            v46 = v1;\n
                            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                                break;\n
                        }\n
                        v48 = v31 & 1 | v48 + v48;\n
                        if (!(!(v33 ^ v4)) || !(!(v32 ^ v5)))\n
                        {\n
                            v35 = *((v2 + ((v33 CONCAT v32) * 0x20000000 >> 32))) >> (~(v32) & 7 & 31);\n
                            tmp_22 = v32;\n
                            v36 = v32 + 1;\n
                            v37 = v33 + (tmp_22 + 1 < tmp_22);\n
                            v10[1] = v37;\n
                            v10[0] = v36;\n
                            v38 = v3;\n
                            if (!(v36 ^ v3) && !v37)\n
                            {\n
                                v10[1] = 0;\n
                                v10[0] = 0;\n
                                v36 = 0;\n
                                v37 = 0;\n
                                v46 = v1;\n
                            }\n
                            else\n
                            {\n
                                tmp_9 = v38 < v36;\n
                                tmp_17 = v37 ^ v38 < v36;\n
                                v46 = v1;\n
                                if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                                    break;\n
                            }\n
                            v48 = v35 & 1 | v48 + v48;\n
                            if (!(!(v37 ^ v4)) || !(!(v36 ^ v5)))\n
                            {\n
                                v39 = *((v2 + ((v37 CONCAT v36) * 0x20000000 >> 32))) >> (~(v36) & 7 & 31);\n
                                tmp_22 = v36;\n
                                v40 = v36 + 1;\n
                                v41 = v37 + (tmp_22 + 1 < tmp_22);\n
                                v10[1] = v41;\n
                                v10[0] = v40;\n
                                v42 = v3;\n
                                if (!(v40 ^ v3) && !v41)\n
                                {\n
                                    v10[1] = 0;\n
                                    v10[0] = 0;\n
                                    v40 = 0;\n
                                    v41 = 0;\n
                                    v46 = v1;\n
                                }\n
                                else\n
                                {\n
                                    tmp_9 = v42 < v40;\n
                                    tmp_17 = v41 ^ v42 < v40;\n
                                    v46 = v1;\n
                                    if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                                        break;\n
                                }\n
                                v48 = v39 & 1 | v48 + v48;\n
                                if (!(!(v41 ^ v4)) || !(!(v40 ^ v5)))\n
                                {\n
                                    v43 = *((v2 + ((v41 CONCAT v40) * 0x20000000 >> 32))) >> (~(v40) & 7 & 31);\n
                                    tmp_22 = v40;\n
                                    v45 = v40 + 1;\n
                                    v47 = v41 + (tmp_22 + 1 < tmp_22);\n
                                    v10[1] = v47;\n
                                    v10[0] = v45;\n
                                    v44 = v3;\n
                                    if (!(v45 ^ v3) && !v47)\n
                                    {\n
                                        v10[1] = 0;\n
                                        v10[0] = 0;\n
                                        v45 = 0;\n
                                        v47 = 0;\n
                                        v46 = v1;\n
                                    }\n
                                    else\n
                                    {\n
                                        tmp_9 = v44 < v45;\n
                                        tmp_17 = v47 ^ v44 < v45;\n
                                        v46 = v1;\n
                                        if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                                            break;\n
                                    }\n
                                    v48 = v43 & 1 | v48 + v48;\n
                                    if (!(!(v4 ^ v47)) || !(!(v5 ^ v45)))\n
                                    {\n
                                        v49 = *((v2 + ((v47 CONCAT v45) * 0x20000000 >> 32))) >> (~(v45) & 7 & 31);\n
                                        tmp_22 = v45;\n
                                        v50 = v45 + 1;\n
                                        v51 = v47 + (tmp_22 + 1 < tmp_22);\n
                                        v10[1] = v51;\n
                                        v10[0] = v50;\n
                                        v52 = v3;\n
                                        if (!(v50 ^ v3) && !v51)\n
                                        {\n
                                            v10[1] = 0;\n
                                            v10[0] = 0;\n
                                            v46 = v1;\n
                                        }\n
                                        else\n
                                        {\n
                                            tmp_9 = v52 < v50;\n
                                            tmp_17 = v51 ^ v52 < v50;\n
                                            v46 = v1;\n
                                            if ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t20, Conv(1->32, (t17 < ebx<4>)), Conv(1->32, (t17 < ebx<4>))))\n
                                                break;\n
                                        }\n
                                        v48 = v48 * 2 | v49 & 1;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        *((a0 + v46)) = v48;\n
        if (v7 == v46)\n
            return v48;\n
        v53 = v10[0];\n
        v54 = v10[1];\n
        v46 += 1;\n
    }\n
    v0 = 1;\n
    cgc__terminate();\n
    goto LABEL_404d94;\n
}\n
", "4213149:sub_40499d": null, "4214040:sub_404d18": null, "4214176:cgc_buffer_read_remaining": "int cgc_buffer_read_remaining(unsigned int v0[6])\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1[6];  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    v2 = v1[2];\n
    tmp_4 = v2;\n
    v3 = v2 - v1[0];\n
    if ([D] x86g_calculate_condition(0x8<32>, 0xc<32>, Load(addr=(ecx<4> + 0xc<32>), size=4, endness=Iend_LE), Xor(Load(addr=(ecx<4> + 0x4<32>), size=4, endness=Iend_LE), Conv(1->32, (t4 < Load(addr=ecx<4>, size=4, endness=Iend_LE)))), Conv(1->32, (t4 < Load(addr=ecx<4>, size=4, endness=Iend_LE)))))\n
        return v3 + v0[5] * 8;\n
    return v3;\n
}\n
", "4214206:sub_404dbe": null, "4214208:cgc_buffer_write_bit": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_buffer_write_bit(struct_0 *v0, unsigned int a0)\n
{\n
    int tmp_18;  // tmp #18\n
    int tmp_2;  // tmp #2\n
    struct_0 *v1;  // eax\n
    char *v2;  // esi\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // ecx\n
    char v6;  // bl\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // esi\n
\n
    v1 = v0;\n
    v2 = v1->field_10;\n
    v3 = v1->field_8;\n
    v4 = (v1->field_c CONCAT v3) * 0x20000000 >> 32;\n
    v5 = v3 & 7;\n
    v6 = v2[v4];\n
    if (!v5)\n
        v6 = v5;\n
    v2[v4] = a0 << ((v5 ^ 7) & 31) | v6;\n
    v7 = v1->field_8;\n
    tmp_18 = v7;\n
    v8 = v7 + 1;\n
    v9 = v1->field_c + (tmp_18 + 1 < tmp_18);\n
    v1->field_8 = v8;\n
    v1->field_c = v9;\n
    v10 = v1->field_14 * 8;\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edx<4>, Conv(1->32, (ecx<4> < esi<4>)), Conv(1->32, (ecx<4> < esi<4>)))))\n
    {\n
        tmp_2 = v8;\n
        v1->field_8 = v8 - v10;\n
        v1->field_c = v9 - (tmp_2 < v10);\n
    }\n
    return v0;\n
}\n
", "4214300:sub_404e1c": null, "4214304:cgc_buffer_write_bits": "int cgc_buffer_write_bits(unsigned int v1[6], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_13;  // tmp #13\n
    int tmp_18;  // tmp #18\n
    int tmp_2;  // tmp #2\n
    int tmp_10;  // tmp #10\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // ecx\n
    unsigned int v5[6];  // edi\n
    char v6;  // dl\n
    char v7;  // sil\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // cc_dep2\n
    char *v12;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    tmp_13 = v3;\n
    v4 = v3 - 1;\n
    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t13, 0xffffffff<32>, 0x0<32>))\n
        return v2;\n
    v5 = v1;\n
    v9 = v5[2];\n
    v12 = ((v5[3] CONCAT v9) * 0x20000000 >> 32);\n
    do\n
    {\n
        v0 = v4;\n
        tmp_13 = v9 & 7;\n
        v6 = v9 & 7;\n
        v7 = *((v5[4] + v12));\n
        if (!tmp_13)\n
            v7 = v6;\n
        *((v5[4] + v12)) = ((a0 >> (v4 & 31)) & 1) << ((v7 ^ 7) & 31) | v7;\n
        v8 = v5[2];\n
        tmp_18 = v8;\n
        v9 = v8 + 1;\n
        v10 = v5[3] + (tmp_18 + 1 < tmp_18);\n
        v5[2] = v9;\n
        v5[3] = v10;\n
        v2 = v5[5] * 8;\n
        v11 = v9 < v2;\n
        if (!([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t13, 0xffffffff<32>, 0x0<32>)))\n
        {\n
            tmp_2 = v9;\n
            v9 -= v2;\n
            v10 -= tmp_2 < v2;\n
            v5[2] = v9;\n
            v5[3] = v10;\n
        }\n
        v12 = (v10 CONCAT v9) * 0x20000000 >> 32;\n
        v13 = v0;\n
        tmp_10 = v13;\n
        v4 = v13 - 1;\n
    } while (!([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t13, 0xffffffff<32>, 0x0<32>)));\n
    return v5[5] * 8;\n
}\n
", "4214334:sub_404e3e": null, "4214441:sub_404ea9": null, "4214448:cgc_buffer_write_bytes": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_buffer_write_bytes(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x14]\n
    int tmp_11;  // tmp #11\n
    int tmp_18;  // tmp #18\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    int tmp_8;  // tmp #8\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // ebx\n
    struct_0 *v4;  // esi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    char *v7;  // eax\n
    char v8;  // cl\n
    char v9;  // dil\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // ebp\n
    char *v13;  // eax\n
    unsigned int v14;  // cc_dep2\n
    unsigned int v15;  // ebp\n
    char *v16;  // eax\n
    char v17;  // cl\n
    char v18;  // dil\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    char *v22;  // eax\n
    unsigned int v23;  // cc_dep2\n
    unsigned int v24;  // ebp\n
    char *v25;  // eax\n
    char v26;  // cl\n
    char v27;  // dil\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    char *v31;  // eax\n
    unsigned int v32;  // cc_dep2\n
    unsigned int v33;  // ebp\n
    char *v34;  // eax\n
    char v35;  // cl\n
    char v36;  // dil\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ecx\n
    unsigned int v39;  // ebp\n
    char *v40;  // eax\n
    unsigned int v41;  // cc_dep2\n
    unsigned int v42;  // ebp\n
    char *v43;  // eax\n
    char v44;  // cl\n
    char v45;  // dil\n
    unsigned int v46;  // ecx\n
    unsigned int v47;  // ecx\n
    unsigned int v48;  // ebp\n
    char *v49;  // eax\n
    unsigned int v50;  // cc_dep2\n
    unsigned int v51;  // ebp\n
    char *v52;  // eax\n
    char v53;  // cl\n
    char v54;  // dil\n
    unsigned int v55;  // ecx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // ebp\n
    char *v58;  // eax\n
    unsigned int v59;  // cc_dep2\n
    unsigned int v60;  // ebp\n
    char *v61;  // eax\n
    char v62;  // cl\n
    char v63;  // dil\n
    unsigned int v64;  // ecx\n
    unsigned int v65;  // ecx\n
    unsigned int v66;  // ebp\n
    char *v67;  // eax\n
    unsigned int v68;  // cc_dep2\n
    unsigned int v69;  // ebp\n
    char *v71;  // eax\n
    char v72;  // cl\n
    char v73;  // dil\n
    unsigned int v74;  // ecx\n
    unsigned int v75;  // ecx\n
    unsigned int v76;  // ebp\n
    unsigned int v77;  // cc_dep2\n
    unsigned int v78;  // ebp\n
    char *v79;  // edx, Other Possible Types: unsigned int\n
    unsigned int v80;  // edi\n
    unsigned int v81;  // edi\n
    unsigned int v82;  // ebp\n
    unsigned int v83;  // cc_dep2\n
    char *v84;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v85;  // ecx\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = v1;\n
    v75 = v4->field_8;\n
    v5 = v4->field_c;\n
    if ((v75 & 7))\n
    {\n
        if (!v3)\n
            return v2;\n
        v78 = (v5 CONCAT v75) * 0x20000000 >> 32;\n
        v79 = 0;\n
        do\n
        {\n
            v0 = v79;\n
            v6 = *((a0 + v79));\n
            v7 = v4->field_10;\n
            tmp_11 = v75 & 7;\n
            v8 = v75 & 7;\n
            v9 = v7[v78];\n
            if (!tmp_11)\n
                v9 = v8;\n
            v7[v78] = v6 / 128 << ((v9 ^ 7) & 31) | v9;\n
            v10 = v4->field_8;\n
            tmp_18 = v10;\n
            v11 = v10 + 1;\n
            v12 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v11;\n
            v4->field_c = v12;\n
            v13 = v4->field_14 * 8;\n
            v14 = v11 < v13;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v11;\n
                v11 -= v13;\n
                v12 -= tmp_2 < v13;\n
                v4->field_8 = v11;\n
                v4->field_c = v12;\n
            }\n
            v15 = (v12 CONCAT v11) * 0x20000000 >> 32;\n
            v16 = v4->field_10;\n
            tmp_18 = v11 & 7;\n
            v17 = v11 & 7;\n
            v18 = v16[v15];\n
            if (!tmp_18)\n
                v18 = v17;\n
            v16[v15] = (v6 / 64 & 1) << ((v18 ^ 7) & 31) | v9;\n
            v19 = v4->field_8;\n
            tmp_18 = v19;\n
            v20 = v19 + 1;\n
            v21 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v20;\n
            v4->field_c = v21;\n
            v22 = v4->field_14 * 8;\n
            v23 = v20 < v22;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v20;\n
                v20 -= v22;\n
                v21 -= tmp_2 < v22;\n
                v4->field_8 = v20;\n
                v4->field_c = v21;\n
            }\n
            v24 = (v21 CONCAT v20) * 0x20000000 >> 32;\n
            v25 = v4->field_10;\n
            tmp_18 = v20 & 7;\n
            v26 = v20 & 7;\n
            v27 = v25[v24];\n
            if (!tmp_18)\n
                v27 = v26;\n
            v25[v24] = (v6 / 32 & 1) << ((v27 ^ 7) & 31) | v9;\n
            v28 = v4->field_8;\n
            tmp_18 = v28;\n
            v29 = v28 + 1;\n
            v30 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v29;\n
            v4->field_c = v30;\n
            v31 = v4->field_14 * 8;\n
            v32 = v29 < v31;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v29;\n
                v29 -= v31;\n
                v30 -= tmp_2 < v31;\n
                v4->field_8 = v29;\n
                v4->field_c = v30;\n
            }\n
            v33 = (v30 CONCAT v29) * 0x20000000 >> 32;\n
            v34 = v4->field_10;\n
            tmp_18 = v29 & 7;\n
            v35 = v29 & 7;\n
            v36 = v34[v33];\n
            if (!tmp_18)\n
                v36 = v35;\n
            v34[v33] = (v6 / 16 & 1) << ((v36 ^ 7) & 31) | v9;\n
            v37 = v4->field_8;\n
            tmp_18 = v37;\n
            v38 = v37 + 1;\n
            v39 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v38;\n
            v4->field_c = v39;\n
            v40 = v4->field_14 * 8;\n
            v41 = v38 < v40;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v38;\n
                v38 -= v40;\n
                v39 -= tmp_2 < v40;\n
                v4->field_8 = v38;\n
                v4->field_c = v39;\n
            }\n
            v42 = (v39 CONCAT v38) * 0x20000000 >> 32;\n
            v43 = v4->field_10;\n
            tmp_18 = v38 & 7;\n
            v44 = v38 & 7;\n
            v45 = v43[v42];\n
            if (!tmp_18)\n
                v45 = v44;\n
            v43[v42] = (v6 / 8 & 1) << ((v45 ^ 7) & 31) | v9;\n
            v46 = v4->field_8;\n
            tmp_18 = v46;\n
            v47 = v46 + 1;\n
            v48 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v47;\n
            v4->field_c = v48;\n
            v49 = v4->field_14 * 8;\n
            v50 = v47 < v49;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v47;\n
                v47 -= v49;\n
                v48 -= tmp_2 < v49;\n
                v4->field_8 = v47;\n
                v4->field_c = v48;\n
            }\n
            v51 = (v48 CONCAT v47) * 0x20000000 >> 32;\n
            v52 = v4->field_10;\n
            tmp_18 = v47 & 7;\n
            v53 = v47 & 7;\n
            v54 = v52[v51];\n
            if (!tmp_18)\n
                v54 = v53;\n
            v52[v51] = (v6 / 4 & 1) << ((v54 ^ 7) & 31) | v9;\n
            v55 = v4->field_8;\n
            tmp_18 = v55;\n
            v56 = v55 + 1;\n
            v57 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v56;\n
            v4->field_c = v57;\n
            v58 = v4->field_14 * 8;\n
            v59 = v56 < v58;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v56;\n
                v56 -= v58;\n
                v57 -= tmp_2 < v58;\n
                v4->field_8 = v56;\n
                v4->field_c = v57;\n
            }\n
            v60 = (v57 CONCAT v56) * 0x20000000 >> 32;\n
            v61 = v4->field_10;\n
            tmp_18 = v56 & 7;\n
            v62 = v56 & 7;\n
            v63 = v61[v60];\n
            if (!tmp_18)\n
                v63 = v62;\n
            v61[v60] = (v6 / 2 & 1) << ((v63 ^ 7) & 31) | v9;\n
            v64 = v4->field_8;\n
            tmp_18 = v64;\n
            v65 = v64 + 1;\n
            v66 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v65;\n
            v4->field_c = v66;\n
            v67 = v4->field_14 * 8;\n
            v68 = v65 < v67;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v65;\n
                v65 -= v67;\n
                v66 -= tmp_2 < v67;\n
                v4->field_8 = v65;\n
                v4->field_c = v66;\n
            }\n
            v69 = (v66 CONCAT v65) * 0x20000000 >> 32;\n
            v71 = v4->field_10;\n
            tmp_12 = v65 & 7;\n
            v72 = v65 & 7;\n
            v73 = v71[v69];\n
            if (!tmp_12)\n
                v73 = v72;\n
            v71[v69] = (v6 & 1) << ((v73 ^ 7) & 31) | v9;\n
            v74 = v4->field_8;\n
            tmp_18 = v74;\n
            v75 = v74 + 1;\n
            v76 = v4->field_c + (tmp_18 + 1 < tmp_18);\n
            v4->field_8 = v75;\n
            v4->field_c = v76;\n
            v2 = v4->field_14 * 8;\n
            v77 = v75 < v2;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v75;\n
                v75 -= v2;\n
                v76 -= tmp_2 < v2;\n
                v4->field_8 = v75;\n
                v4->field_c = v76;\n
            }\n
            v78 = (v76 CONCAT v75) * 0x20000000 >> 32;\n
            v79 = v0 + 1;\n
        } while (a1 != v79);\n
        return v4->field_14 * 8;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v2;\n
        v84 = ((v5 CONCAT v75) * 0x20000000 >> 32);\n
        v85 = 0;\n
        do\n
        {\n
            v4->field_10[v84].field_0 = *((a0 + v85));\n
            v80 = v4->field_8;\n
            tmp_8 = v80;\n
            v81 = v80 + 8;\n
            v82 = v4->field_c + (tmp_8 + 8 < tmp_8);\n
            v4->field_8 = v81;\n
            v4->field_c = v82;\n
            v2 = v4->field_14 * 8;\n
            v83 = v81 < v2;\n
            if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, ebp<4>, cc_dep2<4>, cc_dep2<4>)))\n
            {\n
                tmp_2 = v81;\n
                v81 -= v2;\n
                v82 -= tmp_2 < v2;\n
                v4->field_8 = v81;\n
                v4->field_c = v82;\n
            }\n
            v84 = (v82 CONCAT v81) * 0x20000000 >> 32;\n
            v85 += 1;\n
        } while (v3 != v85);\n
        return v4->field_14 * 8;\n
    }\n
}\n
", "4214492:sub_404edc": null, "4215169:sub_405181": null, "4215263:sub_4051df": null, "4215264:cgc_buffer_read_tell": "int cgc_buffer_read_tell(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4215274:sub_4051ea": null, "4215280:cgc_buffer_read_seek": "int cgc_buffer_read_seek(unsigned int v0[2], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1[2];  // edx\n
\n
    v1 = v0;\n
    v1[1] = a1;\n
    v1[0] = a0;\n
    return a0;\n
}\n
", "4215298:sub_405202": null, "4215312:cgc_buffer_write_tell": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_buffer_write_tell(struct_0 *v0)\n
{\n
    return v0->field_8;\n
}\n
", "4215323:sub_40521b": null, "4215328:cgc_buffer_write_seek": "int cgc_buffer_write_seek(unsigned int v0[4], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1[4];  // edx\n
\n
    v1 = v0;\n
    v1[3] = a1;\n
    v1[2] = a0;\n
    return a0;\n
}\n
", "4215347:sub_405233": null, "4215360:cgc_buffer_init": "int cgc_buffer_init(unsigned int v0[6], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1[6];  // ebp\n
\n
    v1 = v0;\n
    v1[4] = a0;\n
    v1[5] = a1;\n
    return cgc_memset(v0, 0, 24);\n
}\n
", "4215421:sub_40527d": null, "4215424:cgc_checksum8": "int cgc_checksum8(unsigned int v0[6], unsigned int a0, char a1)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // al, Other Possible Types: char\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // ecx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    if (!v2)\n
        return v1;\n
    do\n
    {\n
        v3 = v1;\n
        v4 = cgc_buffer_read_bit(v0) | v3 * 2;\n
        v1 = v4 ^ 151;\n
        if (!(v3 & 128))\n
            v1 = v4;\n
        tmp_2 = v2;\n
        v2 -= 1;\n
    } while (tmp_2 != 1);\n
    return v1;\n
}\n
", "4215506:sub_4052d2": null, "4215520:cgc_ecc_init": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_-5;\n
    char field_-4;\n
    char field_-3;\n
    char field_-2;\n
    char padding_-1[1];\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int field;\n
extern unsigned int g_40b7d8;\n
extern struct_1 g_40b7da;\n
extern char g_40b7db;\n
extern struct_0 g_40b7dd;\n
extern char g_40b854;\n
\n
int cgc_ecc_init()\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_5;  // tmp #5\n
    char v1;  // cl\n
    unsigned int v2;  // edx\n
    char v3;  // cl\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
    struct_1 *v6;  // edx, Other Possible Types: unsigned int\n
\n
    field = 134480385;\n
    g_40b7d8 = 155197456;\n
    v1 = 9;\n
    v2 = 118;\n
    v4 = &g_40b7dd.field_-1;\n
    while (true)\n
    {\n
        v3 = v1 * 2;\n
        *((v4 - 1)) = v3;\n
        if ([D] x86g_calculate_condition(0x8<32>, 0x1<32>, 0x9<32>, 0x9<32>, 0x0<32>))\n
        {\n
            v3 = v3 ^ g_40b7db ^ 128;\n
            *((v4 - 1)) = v3;\n
        }\n
        if (!v2)\n
            break;\n
        tmp_4 = v3;\n
        tmp_5 = v3;\n
        v1 = v3 * 2;\n
        *(v4) = v1;\n
        if ([D] x86g_calculate_condition(0x8<32>, 0x1<32>, 0x9<32>, 0x9<32>, 0x0<32>))\n
        {\n
            v1 = v1 ^ g_40b7db ^ 128;\n
            *(v4) = v1;\n
        }\n
        v2 -= 2;\n
        v4 += 2;\n
    }\n
    g_40b854 = 0;\n
    v5 = 1;\n
    v6 = &g_40b7da.field_-5;\n
    do\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *((v6 - 5))] = v5;\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *((v6 - 4))] = v5 + 1;\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *((v6 - 3))] = v5 + 2;\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *((v6 - 2))] = v5 + 3;\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *((v6 - 1))] = v5 + 4;\n
        (&_GLOBAL_OFFSET_TABLE_)[519 + *(v6)] = v5 + 5;\n
        v5 += 6;\n
        v6 += 6;\n
    } while (v5 != 127);\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4215569:sub_405311": null, "4215768:sub_4053d8": null, "4215776:cgc_ecc_encode": "int cgc_ecc_encode(char v33[25])\n
{\n
    char v0;  // [bp-0x7f]\n
    int tmp_138;  // tmp #138\n
    int tmp_139;  // tmp #139\n
    char v1;  // [bp-0x7e]\n
    char v2;  // [bp-0x7d]\n
    char v3;  // [bp-0x7c]\n
    char v4;  // [bp-0x7b]\n
    char v5;  // [bp-0x7a]\n
    char v6;  // [bp-0x79]\n
    void* v7;  // [bp-0x78], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x74], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x70], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x6c], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x60], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v16;  // [bp-0x54], Other Possible Types: unsigned int\n
    void* v17;  // [bp-0x50], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x4c], Other Possible Types: unsigned int\n
    void* v19;  // [bp-0x48], Other Possible Types: unsigned int\n
    void* v20;  // [bp-0x44], Other Possible Types: unsigned int\n
    unsigned int v21;  // [bp-0x40]\n
    void* v22;  // [bp-0x3c], Other Possible Types: unsigned int\n
    void* v23;  // [bp-0x38], Other Possible Types: unsigned int\n
    void* v24;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v25;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v26;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v28;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v29;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v30;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v31;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v32;  // [bp-0x14]\n
    char v34[25];  // edi\n
    unsigned int v35;  // esi\n
    char v36;  // al\n
    void* v37;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // ecx\n
    unsigned int v40;  // ebp\n
    unsigned int v41;  // esi\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // edx\n
    unsigned int v46;  // ebx\n
    unsigned int v47;  // edx\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // ebx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edx\n
    unsigned int v53;  // ebp\n
    unsigned int v54;  // edx\n
    char v55;  // edx\n
    unsigned int v56;  // edx\n
    unsigned int v58;  // esi\n
    void* v59;  // edx, Other Possible Types: unsigned int\n
    char v60;  // cl\n
\n
    v34 = v33;\n
    *(&v34[0]) = 0;\n
    *(&v34[4]) = 0;\n
    *(&v34[8]) = 0;\n
    *(&v34[12]) = 0;\n
    *(&v34[16]) = 0;\n
    *(&v34[20]) = 0;\n
    *(&v34[24]) = 0;\n
    v35 = 127;\n
    v22 = 0;\n
    v24 = 0;\n
    v15 = 0;\n
    v10 = 0;\n
    v30 = 0;\n
    v8 = 0;\n
    v13 = 0;\n
    v36 = 0;\n
    v9 = 0;\n
    v16 = 0;\n
    v29 = 0;\n
    v31 = 0;\n
    v37 = 0;\n
    v28 = 0;\n
    v25 = 0;\n
    v20 = 0;\n
    v19 = 0;\n
    v12 = 0;\n
    v18 = 0;\n
    v14 = 0;\n
    v27 = 0;\n
    v23 = 0;\n
    v17 = 0;\n
    v26 = 0;\n
    v60 = 0;\n
    v11 = 0;\n
    v59 = 0;\n
    v7 = 0;\n
    do\n
    {\n
        v21 = v37;\n
        v4 = v60;\n
        v3 = v23;\n
        v2 = v19;\n
        v1 = v31;\n
        v6 = v36;\n
        v5 = v8;\n
        v0 = v24;\n
        v8 = v35;\n
        tmp_138 = v7;\n
        tmp_139 = v34[1 + v35];\n
        v19 = v20;\n
        v20 = v25;\n
        v25 = v28;\n
        v24 = v22;\n
        v7 = v59;\n
        v34[1 + 2] = v59;\n
        v34[1 + 1] = v11;\n
        v34[1] = v4;\n
        v32 = v26;\n
        v34[24] = v32;\n
        v34[23] = v17;\n
        v34[22] = v3;\n
        v23 = v27;\n
        v34[21] = v23;\n
        v34[20] = v14;\n
        v34[19] = v18;\n
        v34[18] = v12;\n
        v34[17] = v2;\n
        v34[16] = v19;\n
        v34[15] = v20;\n
        v34[14] = v25;\n
        v34[13] = v21;\n
        v34[12] = v1;\n
        v31 = v29;\n
        v34[11] = v31;\n
        v38 = v9;\n
        v39 = v16;\n
        v34[10] = v39;\n
        v40 = v39;\n
        v34[9] = v38;\n
        v41 = v38;\n
        v34[8] = v6;\n
        v34[7] = v13;\n
        v34[6] = v5;\n
        v42 = v30;\n
        v34[5] = v42;\n
        v34[4] = v59;\n
        v34[3] = v15;\n
        v34[2] = v0;\n
        v34[1] = v24;\n
        v34[0] = 0;\n
        v43 = v40;\n
        if (tmp_138 == tmp_139)\n
        {\n
            v22 = 0;\n
            v9 = v41;\n
            v10 = v59;\n
            v50 = v18;\n
            v56 = v17;\n
        }\n
        else\n
        {\n
            v34[0] = 1;\n
            v34[2] = v0;\n
            v16 = v40;\n
            v44 = v41;\n
            v59 = v10;\n
            v46 = v15;\n
            *(&v46) = v46 ^ 1;\n
            v15 = v46;\n
            v34[3] = *(&v46);\n
            *(&v45) = v45 ^ 1;\n
            v10 = v45;\n
            v34[4] = *(&v45);\n
            *(&v42) = v42 ^ 1;\n
            v34[5] = *(&v42);\n
            v47 = v13;\n
            *(&v47) = v47 ^ 1;\n
            v13 = v47;\n
            v34[7] = *(&v47);\n
            *(&v44) = v44 ^ 1;\n
            v9 = v44;\n
            v34[9] = *(&v44);\n
            v43 = v16;\n
            *(&v43) = v43 ^ 1;\n
            v34[10] = *(&v43);\n
            v34[12] = v1;\n
            v48 = v21;\n
            *(&v48) = v48 ^ 1;\n
            v21 = v48;\n
            v34[13] = *(&v48);\n
            v34[15] = v20;\n
            v34[16] = v19;\n
            v34[17] = v2;\n
            v49 = v12;\n
            *(&v49) = v49 ^ 1;\n
            v12 = v49;\n
            v34[18] = *(&v49);\n
            v50 = v18;\n
            *(&v50) = v50 ^ 1;\n
            v34[19] = *(&v50);\n
            v51 = v14;\n
            *(&v51) = v51 ^ 1;\n
            v14 = v51;\n
            v34[20] = *(&v51);\n
            v34[21] = v23;\n
            v34[22] = v3;\n
            v52 = v17;\n
            *(&v52) = v52 ^ 1;\n
            v34[23] = *(&v52);\n
            v53 = v52;\n
            v34[24] = v32;\n
            v34[1] = v4;\n
            v54 = v11;\n
            *(&v54) = v54 ^ 1;\n
            v11 = v54;\n
            v34[1 + 1] = *(&v54);\n
            v55 = v7;\n
            v55 ^= 1;\n
            *(&v7) = v55;\n
            v34[1 + 2] = v55;\n
            v55 = 1;\n
            *(&v22) = v55;\n
            v56 = v53;\n
        }\n
        v58 = v8;\n
        v26 = v56;\n
        v27 = v14;\n
        v14 = v50;\n
        v18 = v12;\n
        v28 = v21;\n
        v29 = v43;\n
        v16 = v9;\n
        v36 = v13;\n
        v8 = v42;\n
        v30 = v10;\n
        v10 = v15;\n
        v7 = v7;\n
        v59 = v11;\n
        v35 = v58 - 1;\n
        v15 = v0;\n
        v13 = v5;\n
        v9 = v6;\n
        v37 = v1;\n
        v12 = v2;\n
        v17 = v3;\n
        v11 = v4;\n
        v60 = v32;\n
    } while (v35 > 28);\n
    return 0;\n
}\n
", "4216828:sub_4057fc": null, "4216832:cgc_ecc_decode": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern char field;\n
\n
int cgc_ecc_decode(unsigned int v47)\n
{\n
    int tmp_367;  // tmp #367\n
    int tmp_366;  // tmp #366\n
    unsigned int v0;  // [bp-0xa0]\n
    char *v1;  // [bp-0x9c], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x98], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x94], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x90], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x8c], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x88]\n
    void* v7;  // [bp-0x84], Other Possible Types: unsigned int\n
    char v8[8];  // [bp-0x7e], Other Possible Types: char\n
    char v9;  // [bp-0x7d]\n
    char v10;  // [bp-0x7c]\n
    char v11;  // [bp-0x7b]\n
    char v12;  // [bp-0x7a]\n
    void* v13;  // [bp-0x79], Other Possible Types: char\n
    char v14;  // [bp-0x78]\n
    char v15;  // [bp-0x77]\n
    char v16;  // [bp-0x76]\n
    void* v17;  // [bp-0x75], Other Possible Types: char\n
    char v18;  // [bp-0x74]\n
    char v19;  // [bp-0x73]\n
    char v20;  // [bp-0x72]\n
    char v21;  // [bp-0x71]\n
    char v22;  // [bp-0x70]\n
    char v23;  // [bp-0x6f]\n
    char v24;  // [bp-0x6e]\n
    void* v25;  // [bp-0x6c], Other Possible Types: unsigned int\n
    void* v26;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v28;  // [bp-0x60], Other Possible Types: unsigned int\n
    void* v29;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v30;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v31;  // [bp-0x54], Other Possible Types: unsigned int\n
    char *v32;  // [bp-0x50], Other Possible Types: unsigned int\n
    char *v33;  // [bp-0x4c], Other Possible Types: unsigned int\n
    char *v34;  // [bp-0x48], Other Possible Types: unsigned int\n
    void* v35;  // [bp-0x44], Other Possible Types: unsigned int\n
    char *v36;  // [bp-0x40], Other Possible Types: unsigned int\n
    char *v37;  // [bp-0x3c]\n
    char *v38;  // [bp-0x38]\n
    void* v39;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v40;  // [bp-0x30]\n
    unsigned int v41;  // [bp-0x2c]\n
    unsigned int v42;  // [bp-0x28]\n
    unsigned int v43;  // [bp-0x24]\n
    unsigned int v44;  // [bp-0x20]\n
    unsigned int v45;  // [bp-0x1c]\n
    char v46;  // [bp-0x15]\n
    unsigned int v48;  // ebp\n
    char *v49;  // ebx, Other Possible Types: unsigned int\n
    char *v50;  // edi, Other Possible Types: unsigned int\n
    void* v51;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v52;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v53;  // edi\n
    unsigned int v54;  // ecx\n
    unsigned int v55;  // ebx\n
    unsigned int v57;  // esi\n
    unsigned int v59;  // eax\n
    unsigned int v60;  // edi\n
    unsigned int v61;  // eax\n
    unsigned int v63;  // ebp\n
    unsigned int v64;  // edx\n
    unsigned int v66;  // edx\n
    unsigned int v67;  // edx\n
    unsigned int v68;  // edi\n
    char *v69;  // ebx, Other Possible Types: unsigned int\n
    char *v70;  // eax\n
    unsigned int v71;  // ecx\n
    char *v73;  // eax\n
    char *v74;  // edi\n
    char *v75;  // edi, Other Possible Types: unsigned int\n
    char *v76;  // edx, Other Possible Types: unsigned int\n
    char *v77;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v78;  // ecx\n
    char *v79;  // esi\n
    unsigned int v80;  // eax\n
    unsigned int v81;  // ecx\n
    struct_0 *v82;  // eax\n
    unsigned int v83;  // eax\n
    unsigned int v84;  // ecx\n
    struct_0 *v85;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v86;  // edi\n
    unsigned int v87;  // esi\n
    unsigned int v88;  // ebx\n
    unsigned int v90;  // ebx\n
    unsigned int v91;  // esi\n
    char *v92;  // edi\n
    unsigned int v93;  // eax\n
    unsigned int v94;  // eax\n
    unsigned int v95;  // eax\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // eax\n
    unsigned int v99;  // edx\n
    struct_0 *v102;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v103;  // eax\n
    unsigned int v104;  // eax\n
    unsigned int v105;  // eax\n
    unsigned int v106;  // edx\n
    unsigned int v107;  // edx\n
    unsigned int v108;  // eax\n
    unsigned int v109;  // edx\n
    unsigned int v112;  // eax\n
    unsigned int v113;  // eax\n
    unsigned int v114;  // eax\n
    unsigned int v115;  // edx\n
    unsigned int v116;  // edx\n
    unsigned int v117;  // eax\n
    unsigned int v118;  // edx\n
    unsigned int v121;  // eax\n
    unsigned int v122;  // eax\n
    unsigned int v123;  // eax\n
    unsigned int v124;  // edx\n
    unsigned int v125;  // edx\n
    unsigned int v126;  // eax\n
    unsigned int v127;  // edx\n
    unsigned int v130;  // edx\n
    struct_0 *v131;  // ecx\n
    char *v133;  // edi, Other Possible Types: unsigned int\n
    void* v134;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v135;  // eax\n
    struct_0 *v136;  // eax, Other Possible Types: unsigned int\n
    char *v137;  // edi, Other Possible Types: unsigned int\n
    unsigned int v138;  // edi\n
    char *v139;  // edx, Other Possible Types: unsigned int\n
    unsigned int v140;  // ecx\n
    void* v141;  // edx, Other Possible Types: unsigned int\n
    char *v142;  // ebx\n
    struct_0 *v143;  // ecx, Other Possible Types: unsigned int\n
    char *v144;  // ebp, Other Possible Types: unsigned int\n
    char *v145;  // eax, Other Possible Types: unsigned int\n
    unsigned int v146;  // ebx\n
    char *v147;  // esi\n
    unsigned int v148;  // eax\n
    unsigned int v149;  // eax\n
    unsigned int v150;  // eax\n
    unsigned int v151;  // eax\n
    char *v152;  // edx\n
    char *v153;  // eax, Other Possible Types: unsigned int\n
    unsigned int v155;  // edx\n
    unsigned int v156;  // edi\n
\n
    v48 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v17 = 0;\n
    v35 = 0;\n
    v39 = 0;\n
    v49 = &field;\n
    v2 = 0;\n
    v50 = &field;\n
    v4 = 0;\n
    v34 = &field;\n
    v36 = &field;\n
    v33 = &field;\n
    v3 = 0;\n
    v7 = 0;\n
    v51 = 0;\n
    v31 = 0;\n
    v30 = 0;\n
    v29 = 0;\n
    v28 = 0;\n
    v27 = 0;\n
    v26 = 0;\n
    v25 = 0;\n
    v52 = 0;\n
    v1 = 0;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v40 = v51;\n
        v37 = v50;\n
        v38 = v49;\n
        v5 = v52;\n
        v43 = v3 * 33818641 >> 32;\n
        v44 = v4 * 33818641 >> 32;\n
        v45 = v2 * 33818641 >> 32;\n
        v32 = v48 * 33818641 >> 32;\n
        v1 = v1;\n
        if (!v1[v47])\n
        {\n
            v69 = v38;\n
            v75 = v37;\n
            v76 = v34;\n
            v77 = v33;\n
        }\n
        else\n
        {\n
            v53 = (v40 - (v51 * 33818641 >> 32) >> 1) + (v51 * 33818641 >> 32) >> 6;\n
            v42 = v53 - v53 * 128;\n
            v54 = (v7 - (v7 * 33818641 >> 32) >> 1) + (v7 * 33818641 >> 32) >> 6;\n
            v41 = v54 - v54 * 128;\n
            v55 = (&v3[-1 * v43] >> 1) + v43 >> 6;\n
            v57 = (v4 - v44 >> 1) + v44 >> 6;\n
            v59 = v45;\n
            v60 = (v2 - v59 >> 1) + v59;\n
            v61 = &v32[v39 - v32 >> 1] >> 6;\n
            v32 = v6 + v55 - v55 * 128 + 392;\n
            v63 = (v35 - (v35 * 33818641 >> 32) >> 1) + (v35 * 33818641 >> 32) >> 6;\n
            v64 = v25;\n
            *(&v64) = v64 ^ *((v32 + v1 * 2));\n
            v25 = v64;\n
            v66 = v26;\n
            *(&v66) = v66 ^ *((v63 - v63 * 128 + v36));\n
            v26 = v66;\n
            v48 = v6;\n
            v67 = v27;\n
            *(&v67) = v67 ^ *((v41 + v6 + 392 + v1 * 4));\n
            v27 = v67;\n
            v68 = v60 / 64;\n
            v69 = v38;\n
            v70 = &v69[v61 + -128 * v61];\n
            v71 = v28;\n
            *(&v71) = v71 ^ *(v70);\n
            v28 = v71;\n
            v73 = v37;\n
            v74 = &v73[v68 + -128 * v68];\n
            v78 = v29;\n
            *(&v78) = v78 ^ *(v74);\n
            v29 = v78;\n
            v75 = v73;\n
            v76 = v34;\n
            v79 = v57 - v57 * 128 + v76;\n
            v80 = v30;\n
            *(&v80) = v80 ^ *(v79);\n
            v30 = v80;\n
            v81 = v31;\n
            *(&v81) = v81 ^ *((v42 + v48 + 392 + v1 * 8));\n
            v31 = v81;\n
            v77 = v33;\n
            v82 = v5;\n
            *(&v82) = v82 ^ *(v77);\n
            v5 = v82;\n
        }\n
        v51 = v40 + 8;\n
        v7 += 4;\n
        v3 += 2;\n
        v33 = v77 + 1;\n
        v34 = v76 + 7;\n
        v4 += 7;\n
        v50 = v75 + 6;\n
        v2 += 6;\n
        v49 = v69 + 5;\n
        v39 += 5;\n
        v36 += 3;\n
        v35 += 3;\n
        v1 += 1;\n
        v52 = v5;\n
    } while (v1 != 127);\n
    v13 = v52;\n
    v14 = v25;\n
    v15 = v26;\n
    v16 = v27;\n
    v17 = v28;\n
    v18 = v29;\n
    v19 = v30;\n
    v20 = v31;\n
    cgc_memset(&v21, 0, 5);\n
    cgc_memset(v8, 0, 5);\n
    v102 = v52;\n
    v21 = 1;\n
    v8 = 1;\n
    v137 = &v12;\n
    v134 = 0;\n
    v3 = 1;\n
    v2 = 1;\n
    v135 = 0;\n
    while (true)\n
    {\n
        v4 = v134;\n
        v5 = v135;\n
        v1 = v137;\n
        if (v134 > 0)\n
        {\n
            v83 = -(v134);\n
            v84 = 0;\n
            v85 = &v9;\n
            do\n
            {\n
                v86 = v102;\n
                v87 = *((v6 + v1[v84] + 519)) + *((v6 + *(v85) + 519));\n
                v88 = (v87 - (v87 * 517 >> 16) >> 1) + (v87 * 517 >> 16) >> 6;\n
                v48 = v6;\n
                v90 = v88 - v88 * 128 + v87;\n
                v91 = v90;\n
                v102 = v86;\n
                *(&v102) = v102 ^ *((v6 + v91 + 392));\n
                v84 -= 1;\n
                v85 = &v10;\n
            } while (v83 != v84);\n
        }\n
        if (!v102)\n
        {\n
            v134 = v4;\n
            v136 = v5;\n
        }\n
        else\n
        {\n
            v92 = v102;\n
            v102 = v48;\n
            cgc_memcpy(&v46, v8, 5);\n
            v93 = v21;\n
            if (v93)\n
            {\n
                v102 = (((127 - *((v48 + v3 + 519))) * 65 >> 15) + ((127 - *((v48 + v3 + 519))) * 65 >> 13)) * 127;\n
                v94 = *((v48 + v93 + 519));\n
                v95 = ...;\n
                v96 = (v95 - (v95 * 517 >> 16) >> 1) + (v95 * 517 >> 16) >> 6;\n
                v97 = v96 - v96 * 128 + v95;\n
                v98 = *((v48 + *((v48 + v97 + 392)) + 519)) + v92[519 + v48];\n
                v99 = (*((v48 + *((v48 + v97 + 392)) + 519)) + v92[519 + v48] - ((*((v48 + *((v48 + v97 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 1) + ((*((v48 + *((v48 + v97 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 6;\n
                *((v8 + v2)) = *((v8 + v2)) ^ *((v48 + v99 - v99 * 128 + v98 + 392));\n
            }\n
            v103 = v22;\n
            if (v103)\n
            {\n
                v102 = (((127 - *((v48 + v3 + 519))) * 65 >> 15) + ((127 - *((v48 + v3 + 519))) * 65 >> 13)) * 127;\n
                v104 = *((v48 + v103 + 519));\n
                v105 = ...;\n
                v106 = (v105 - (v105 * 517 >> 16) >> 1) + (v105 * 517 >> 16) >> 6;\n
                v107 = v106 - v106 * 128 + v105;\n
                v108 = *((v48 + *((v48 + v107 + 392)) + 519)) + v92[519 + v48];\n
                v109 = (*((v48 + *((v48 + v107 + 392)) + 519)) + v92[519 + v48] - ((*((v48 + *((v48 + v107 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 1) + ((*((v48 + *((v48 + v107 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 6;\n
                tmp_367 = *((v48 + v109 - v109 * 128 + v108 + 392));\n
                *((&v9 + v2)) = *((&v9 + v2)) ^ tmp_367;\n
            }\n
            v112 = v23;\n
            if (v112)\n
            {\n
                v102 = (((127 - v3[519 + v48]) * 65 >> 15) + ((127 - v3[519 + v48]) * 65 >> 13)) * 127;\n
                v113 = *((v48 + v112 + 519));\n
                v114 = ...;\n
                v115 = (v114 - (v114 * 517 >> 16) >> 1) + (v114 * 517 >> 16) >> 6;\n
                v116 = v115 - v115 * 128 + v114;\n
                v117 = *((v48 + *((v48 + v116 + 392)) + 519)) + v92[519 + v48];\n
                v118 = (*((v48 + *((v48 + v116 + 392)) + 519)) + v92[519 + v48] - ((*((v48 + *((v48 + v116 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 1) + ((*((v48 + *((v48 + v116 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 6;\n
                tmp_367 = *((v48 + v118 - v118 * 128 + v117 + 392));\n
                *((&v10 + v2)) = *((&v10 + v2)) ^ tmp_367;\n
            }\n
            v121 = v24;\n
            if (v121)\n
            {\n
                v102 = (((127 - *((v48 + v3 + 519))) * 65 >> 15) + ((127 - *((v48 + v3 + 519))) * 65 >> 13)) * 127;\n
                v122 = *((v48 + v121 + 519));\n
                v123 = ...;\n
                v124 = (v123 - (v123 * 517 >> 16) >> 1) + (v123 * 517 >> 16) >> 6;\n
                v125 = v124 - v124 * 128 + v123;\n
                v126 = *((v48 + *((v48 + v125 + 392)) + 519)) + v92[519 + v48];\n
                v127 = (*((v48 + *((v48 + v125 + 392)) + 519)) + v92[519 + v48] - ((*((v48 + *((v48 + v125 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 1) + ((*((v48 + *((v48 + v125 + 392)) + 519)) + v92[519 + v48]) * 517 >> 16) >> 6;\n
                tmp_366 = *((v48 + v127 - v127 * 128 + v126 + 392));\n
                *((&v11 + v2)) = *((&v11 + v2)) ^ tmp_366;\n
            }\n
            v130 = v4;\n
            v131 = v5;\n
            if (v130 << 1 <= v131)\n
            {\n
                v102 = v6;\n
                cgc_memcpy(&v21, &v46, 5);\n
                v136 = v131;\n
                v2 = 0;\n
                v134 = &v131[-1 * v130 + 1];\n
                v48 = v6;\n
                v3 = v92;\n
            }\n
            else\n
            {\n
                v133 = v1;\n
                v134 = v130;\n
                v135 = v131 + 1;\n
                if (v135 == 8)\n
                    break;\n
            }\n
        }\n
        v133 = v1;\n
        v135 = v136 + 1;\n
        if (v135 == 8)\n
            break;\n
        v2 += 1;\n
        *(&v102) = (&v13)[v135];\n
        v137 = v133 + 1;\n
    }\n
    if (v134 >= 0)\n
    {\n
        v2 = v134 + 1;\n
        v7 = 0;\n
        v138 = v48;\n
        v3 = v48 + 392;\n
        v139 = 0;\n
        do\n
        {\n
            v4 = v134;\n
            v143 = 0;\n
            v144 = v3;\n
            v145 = 0;\n
            v146 = 0;\n
            do\n
            {\n
                v5 = v143;\n
                v1 = v145;\n
                v147 = v139;\n
                v148 = (v143 - (v143 * 33818641 >> 32) >> 1) + (v143 * 33818641 >> 32) >> 6;\n
                v149 = *((v144 + v148 - v148 * 128));\n
                v150 = *((v138 + v149 + 519));\n
                v151 = v150 + *((v138 + v8[v146] + 519));\n
                v138 = v6;\n
                v152 = v1;\n
                *(&v152) = v1 ^ *((v6 + ((v151 - (v151 * 517 >> 16) >> 1) + (v151 * 517 >> 16) >> 6) * 127 + v151 + 392));\n
                v1 = v152;\n
                v145 = v1;\n
                v146 += 1;\n
                v144 = &v147[v144];\n
                v139 = v147;\n
                v143 = v5 + v147;\n
            } while (v2 != v146);\n
            if (!v145)\n
            {\n
                v7 += 1;\n
                v153 = 127 + -0x1 * v147;\n
                if (!v147)\n
                    v153 = v147;\n
                *((v47 + v153)) = *((v47 + v153)) ^ 1;\n
            }\n
            v134 = v4;\n
            v155 = v139 + 1;\n
        } while (v155 != 127);\n
    }\n
    else\n
    {\n
        v4 = v134;\n
        v7 = 127;\n
        v140 = 127;\n
        v141 = 0;\n
        v142 = v47;\n
        while (true)\n
        {\n
            v156 = (v140 == 127 ? v140 : 0);\n
            v142[v156] = v142[v156] ^ 1;\n
            if ((v141 | 1) == 127)\n
                break;\n
            v141 += 2;\n
            v142[1 + v140] = v142[1 + v140] ^ 1;\n
            v140 -= 2;\n
        }\n
        v138 = v48;\n
        v134 = v4;\n
    }\n
    if (v134 >= 3)\n
    {\n
        v0 = v134;\n
        cgc_fdprintf(2, v138 - 12552);\n
        return v7 == v134;\n
    }\n
    return v7 == v134;\n
}\n
", "4217016:sub_4058b8": null, "4218733:sub_405f6d": null, "4218746:sub_405f7a": null, "4218878:sub_405ffe": null, "4219245:sub_40616d": null, "4219248:cgc_frame_decode": "int cgc_frame_decode(unsigned int v10[6], void* a0)\n
{\n
    char v0;  // [bp-0xca]\n
    unsigned int v1;  // [bp-0xc9]\n
    unsigned int v2;  // [bp-0xc8]\n
    unsigned int v3;  // [bp-0xc7]\n
    unsigned int v4;  // [bp-0xc6]\n
    unsigned int v5;  // [bp-0xc0]\n
    char v6;  // [bp-0xba]\n
    char v7;  // [bp-0xac]\n
    char v8[8];  // [bp-0x8f], Other Possible Types: char\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // ebp\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // ecx\n
    char *v18;  // ecx\n
    unsigned int v19;  // edx\n
\n
    cgc_memset(v8, 0, 127);\n
    do\n
    {\n
        v8 = cgc_buffer_read_bit(v10);\n
    } while (true);\n
    if (!cgc_ecc_decode(v8))\n
        return 0;\n
    cgc_buffer_init(&v7, &v6, 14);\n
    v12 = 28;\n
    do\n
    {\n
        cgc_buffer_write_bit(&v7, v8[v12]);\n
        v12 += 1;\n
    } while (v12 != 112);\n
    v5 = cgc_buffer_read_tell(&v7);\n
    v0 = cgc_checksum8(&v7, 76, 0);\n
    if (v0 != cgc_buffer_read_bits(&v7, 8))\n
        return 0;\n
    cgc_buffer_read_seek(&v7, v5, v13);\n
    v14 = cgc_buffer_read_bits(&v7, 4);\n
    v15 = (v14 < 9 ? 9 : v14);\n
    cgc_buffer_read_bytes(&v7, &v1, v15);\n
    if (v15)\n
    {\n
        v16 = v15 & 3;\n
        v17 = 0;\n
        if (v15 - 1 >= 3)\n
        {\n
            v17 = 0;\n
            do\n
            {\n
                *(&v1 + v17) = *(&v1 + v17) ^ 85;\n
                *(&v2 + v17) = *(&v2 + v17) ^ 85;\n
                *(&v3 + v17) = *(&v3 + v17) ^ 85;\n
                *(&v4 + v17) = *(&v4 + v17) ^ 85;\n
                v17 += 4;\n
            } while ((v15 & 12) != v17);\n
        }\n
        if (v16)\n
        {\n
            v18 = &v1 + v17;\n
            v19 = 0;\n
            do\n
            {\n
                v18[v19] = v18[v19] ^ 85;\n
                v19 += 1;\n
            } while (v16 != v19);\n
        }\n
    }\n
    cgc_buffer_write_bytes(a0, &v1, v15);\n
    return 2 - (v14 == 15);\n
}\n
", "4219679:sub_40631f": null, "4219680:cgc_frame_encode": "int cgc_frame_encode(unsigned int v22[6], void* a0)\n
{\n
    char v0;  // [bp-0xe9]\n
    unsigned int v1;  // [bp-0xe8]\n
    unsigned int v2;  // [bp-0xe4]\n
    unsigned int v3;  // [bp-0xe0]\n
    char v4;  // [bp-0xd9], Other Possible Types: unsigned int\n
    char v5;  // [bp-0xbd]\n
    char v6;  // [bp-0xbc]\n
    char v7;  // [bp-0xbb]\n
    char v8;  // [bp-0xba]\n
    char v10;  // [bp-0x71]\n
    char v11;  // [bp-0x70]\n
    char v12;  // [bp-0x6f]\n
    char v13;  // [bp-0x6e]\n
    char v14;  // [bp-0x6d]\n
    char v15;  // [bp-0x6c]\n
    char v16;  // [bp-0x6b]\n
    char v17;  // [bp-0x6a]\n
    char v18;  // [bp-0x5a]\n
    char v19;  // [bp-0x4c]\n
    unsigned int v20[6];  // [bp-0x34]\n
    char v21;  // [bp-0x1a]\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edx\n
    void* v26;  // edi, Other Possible Types: unsigned int\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // eax\n
\n
    cgc_buffer_init(v20, &v18, 14);\n
    cgc_buffer_init(&v19, &v21, 10);\n
    v24 = (v23 CONCAT cgc_buffer_read_remaining(v22)) * 0x20000000 >> 32;\n
    v2 = (v24 < 10 ? 15 : v24);\n
    v26 = ([D] x86g_calculate_condition(0x2<32>, 0x6<32>, edx<4>, 0xa<32>, 0x0<32>) ? 9 : v24);\n
    if (!v26)\n
    {\n
        v26 = 0;\n
    }\n
    else\n
    {\n
        v1 = v24;\n
        v27 = v26;\n
        do\n
        {\n
            cgc_buffer_read_bytes(v22, &v4, 1);\n
            v4 = v4 ^ 85;\n
            cgc_buffer_write_bytes(&v19, &v4, 1);\n
            v27 -= 1;\n
        } while (v26 != 1);\n
        if (!(v1 <= 8))\n
            goto LABEL_40643c;\n
    }\n
    v28 = v26 - 9;\n
    do\n
    {\n
        v4 = 85;\n
        cgc_buffer_write_bytes(&v19, &v4, 1);\n
        v28 += 1;\n
    } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>))));\n
LABEL_40643c:\n
    v1 = cgc_buffer_read_tell(&v19);\n
    v3 = v24;\n
    cgc_buffer_write_bits(v20, v2, 4);\n
    v0 = cgc_checksum8(&v19, 72, cgc_checksum8(v20, 4, 0));\n
    cgc_buffer_read_seek(&v19, v1, v3);\n
    cgc_buffer_init(v20, &v18, 14);\n
    cgc_buffer_write_bits(v20, v2, 4);\n
    cgc_buffer_write_bits(v20, v0, 8);\n
    cgc_memset(&v4, 0, 127);\n
    v5 = cgc_buffer_read_bit(v20);\n
    v6 = cgc_buffer_read_bit(v20);\n
    v7 = cgc_buffer_read_bit(v20);\n
    v8 = cgc_buffer_read_bit(v20);\n
    v29 = 32;\n
    do\n
    {\n
        *(&v4 + v29) = cgc_buffer_read_bit(&v19);\n
        v29 += 1;\n
    } while (v29 != 104);\n
    v10 = cgc_buffer_read_bit(v20);\n
    v11 = cgc_buffer_read_bit(v20);\n
    v12 = cgc_buffer_read_bit(v20);\n
    v13 = cgc_buffer_read_bit(v20);\n
    v14 = cgc_buffer_read_bit(v20);\n
    v15 = cgc_buffer_read_bit(v20);\n
    v16 = cgc_buffer_read_bit(v20);\n
    v17 = cgc_buffer_read_bit(v20);\n
    cgc_ecc_encode(&v4);\n
    v30 = 0;\n
    do\n
    {\n
        v31 = cgc_buffer_write_bit(a0, *(&v4 + v30));\n
        v30 += 1;\n
    } while (v30 != 112);\n
    return v31;\n
}\n
", "4220468:sub_406634": null, "4220480:cgc_modem_decode": "typedef struct struct_2 {\n
    unsigned short field_-20;\n
    unsigned short field_-1e;\n
    unsigned short field_-1c;\n
    unsigned short field_-1a;\n
    char padding_-18[18];\n
    unsigned short field_-6;\n
    unsigned short field_-4;\n
    unsigned short field_-2;\n
    unsigned short field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned short field_-4;\n
    unsigned short field_-2;\n
    unsigned short field_0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[180];\n
    unsigned int field_b4;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned short field_-14;\n
    unsigned short field_-12;\n
    char padding_-10[14];\n
    unsigned short field_-2;\n
    unsigned short field_0;\n
} struct_1;\n
\n
typedef struct struct_5 {\n
    char field_0;\n
} struct_5;\n
\n
extern struct_4 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short g_416b0a;\n
extern unsigned short g_416b0c;\n
extern struct_3 *g_416b0e;\n
extern unsigned short g_416b10;\n
extern unsigned short g_416b12;\n
extern unsigned short g_416b14;\n
extern unsigned short g_416b16;\n
extern unsigned short g_416b18;\n
extern unsigned short g_416b1a;\n
extern struct_2 g_416b22;\n
\n
int cgc_modem_decode(unsigned int v16[6], unsigned int a0)\n
{\n
    char v0;  // [bp-0xc7]\n
    unsigned short v1;  // [bp-0xc6]\n
    unsigned short v2;  // [bp-0xc4]\n
    unsigned short v3;  // [bp-0xc2]\n
    struct_3 *v4;  // [bp-0xc0], Other Possible Types: unsigned short\n
    unsigned short v5;  // [bp-0xbc]\n
    unsigned short v6;  // [bp-0xba], Other Possible Types: unsigned int\n
    struct_4 *v7;  // [bp-0xb8]\n
    struct struct_0 **v8;  // [bp-0xb4]\n
    struct struct_0 **v9;  // [bp-0xb0]\n
    char v11;  // [bp-0x88]\n
    char v12;  // [bp-0x86]\n
    char v13;  // [bp-0x84]\n
    char v14;  // [bp-0x82]\n
    char v15;  // [bp-0x80]\n
    struct struct_0 **v17;  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // eax\n
    unsigned short v19;  // dx\n
    struct struct_0 **v21;  // dx, Other Possible Types: unsigned short\n
    struct_2 *v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // esi\n
    struct_3 *v24;  // edi\n
    unsigned short v25;  // cx\n
    unsigned int v26;  // edx\n
    struct struct_0 **v27;  // eax, Other Possible Types: unsigned int\n
    unsigned int v28;  // ebx\n
    unsigned short v29;  // si\n
    unsigned short v30;  // di\n
    unsigned short v31;  // si\n
    struct_3 *v32;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned short v35;  // si\n
    unsigned int v36;  // eax\n
    unsigned short v37;  // ax\n
    unsigned int v38;  // ecx\n
    unsigned short v39;  // si\n
    unsigned short v40;  // ax\n
    unsigned short v41;  // si\n
    unsigned short v42;  // si\n
    unsigned int v43;  // eax\n
    struct_4 *v44;  // ebx\n
    struct_1 *v45;  // eax, Other Possible Types: unsigned int\n
    unsigned int v46;  // ecx\n
    unsigned short v48[3];  // ecx\n
    unsigned int v49;  // esi\n
    struct struct_0 **v50;  // edi, Other Possible Types: unsigned int\n
    struct_3 *v51;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v52;  // eax\n
    unsigned int v53;  // ecx\n
    struct_4 *v54;  // ebx\n
    unsigned int v55;  // edi\n
    unsigned int v56;  // edi\n
    unsigned int v57;  // cc_dep2\n
    unsigned int v58;  // ecx\n
    unsigned int v59;  // cc_dep2\n
    unsigned int v60;  // edx\n
    void* v61;  // ecx, Other Possible Types: unsigned int\n
    void* v62;  // esi, Other Possible Types: unsigned int, struct struct_0 **\n
    unsigned int v63;  // eax\n
    unsigned int v64;  // eax\n
    unsigned int v65;  // esi\n
    void* v66;  // ebp, Other Possible Types: unsigned int\n
    struct_5 *v67;  // esi, Other Possible Types: unsigned int\n
\n
    v17 = 0;\n
    do\n
    {\n
        cgc_buffer_read_bytes(v16, &v0, 1);\n
        v18 = v0 ^ 255;\n
        v19 = (v18 & 15) * 2 + 33 << (v18 / 16 & 7 & 31);\n
        v21 = v19 + 16351;\n
        if ((v18 & 128))\n
            v21 = 33 - v19;\n
        *((&v9 + 2 * v17)) = v21 * 4;\n
        v17 += 1;\n
    } while (v17 != 80);\n
    v22 = &g_416b22.field_-20;\n
    cgc_memcpy(&g_416b22.field_-20, &v9, 160);\n
    v23 = g_416b0a;\n
    v24 = g_416b0c;\n
    *(&v4) = g_416b0e;\n
    v3 = g_416b10;\n
    v2 = g_416b12;\n
    v1 = g_416b14;\n
    v25 = g_416b16;\n
    v26 = g_416b18;\n
    v27 = 0;\n
    v7 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v28 = g_416b1a;\n
    do\n
    {\n
        v5 = v25;\n
        v8 = v27;\n
        v29 = (v23 * 5658 >> 16) + (*((v22 - 26)) * 1604 >> 16) + (*((v22 - 28)) * -4673 >> 16) + (*((v22 - 30)) * -3051 >> 16) + (*((v22 - 32)) * 2468 >> 16);\n
        v6 = v6;\n
        v30 = v4;\n
        v31 = (v4 * -7341 >> 16) + (v6 * -1655 >> 16) + v29;\n
        v32 = v3;\n
        v4 = v32;\n
        v34 = v2;\n
        v3 = v34;\n
        v35 = (v34 * 7776 >> 16) + (v32 * 547 >> 16) + v29;\n
        v36 = v1;\n
        v2 = v36;\n
        v37 = (v36 * 547 >> 16) + v29;\n
        v38 = v5;\n
        v1 = v38;\n
        v39 = (v38 * -7341 >> 16) + v37;\n
        v25 = v26;\n
        v40 = (v26 * -1655 >> 16) + v29;\n
        v26 = v28;\n
        v41 = (v28 * 5658 >> 16) + v37;\n
        v28 = *((v22 - 6));\n
        v42 = (*(v22) * 2468 >> 16) + (*((v22 - 2)) * -3051 >> 16) + (*((v22 - 4)) * -4673 >> 16) + (*((v22 - 6)) * 1604 >> 16) + v29;\n
        v43 = v8;\n
        *((&v9 + 2 * v43)) = v42;\n
        v23 = v6;\n
        v27 = v43 + 1;\n
        v22 += 2;\n
    } while (v27 != 80);\n
    v44 = v7;\n
    cgc_memmove(&v44[251].padding_0[78], &v44[252].padding_0[54], 32);\n
    cgc_memcpy(&v44[252].padding_0[106], &v9, 160);\n
    v45 = &v44[252].padding_0[108];\n
    v46 = 1;\n
    do\n
    {\n
        *((&v8 + 2 * v46)) = *((v45 - 20)) * *((v45 - 2)) >> 16;\n
        *((&v9 + 2 * v46)) = *((v45 - 18)) * *(v45) >> 16;\n
        v45 += 4;\n
        v46 += 2;\n
    } while (v46 != 81);\n
    cgc_memmove(&v44[252].padding_0[88], &v44[253].padding_0[64], 18);\n
    cgc_memcpy(&v44[253].padding_0[170], &v9, 160);\n
    v48 = &v44[253].padding_0[82];\n
    v4 = &v44[67].padding_0[92];\n
    do\n
    {\n
        v49 = 2;\n
        v50 = 0;\n
        v51 = v4;\n
        do\n
        {\n
            v50 = (v48[v49] * *((v51 - 4)) >> 16) + (v48[1 + v49] * *((v51 - 2)) >> 16) + v50 + (v48[2 + v49] * *(v51) >> 16);\n
            v49 += 3;\n
            v51 -= 6;\n
        } while (v49 != 47);\n
        *(&v9) = v50;\n
        v52 = 0 + 1;\n
        v53 = &v48[1];\n
    } while (v52 != 80);\n
    v54 = v7;\n
    v64 = cgc_memmove(&v54[253].padding_0[82], &v54[254].padding_0[58], 88);\n
    v65 = v54->field_b4;\n
    v66 = a0;\n
    if (v65 == -1)\n
    {\n
        v62 = 0;\n
        v63 = 1;\n
        v61 = 0;\n
        while (true)\n
        {\n
            v60 = v63 - 1;\n
            v55 = *((&v8 + 2 * v63));\n
            if ([D] x86g_calculate_condition(0xe<32>, 0x5<32>, Conv(16->32, cx<2>), Conv(16->32, di<2>), 0x0<32>))\n
            {\n
                v56 = -(v55);\n
                v57 = v61;\n
                v66 = a0;\n
                if (v61 > v61)\n
                    v61 = v56;\n
                if ([D] x86g_calculate_condition(0xe<32>, 0x5<32>, Conv(16->32, cx<2>), Conv(16->32, di<2>), 0x0<32>))\n
                    v60 = v62;\n
                v55 = v61;\n
            }\n
            v61 = *((&v9 + 2 * v63));\n
            if ([D] x86g_calculate_condition(0xe<32>, 0x5<32>, Conv(16->32, cx<2>), Conv(16->32, di<2>), 0x0<32>))\n
            {\n
                v58 = -(v61);\n
                v59 = v55;\n
                if (v55 > v55)\n
                    v55 = v58;\n
                if ([D] x86g_calculate_condition(0xe<32>, 0x5<32>, Conv(16->32, cx<2>), Conv(16->32, di<2>), 0x0<32>))\n
                    v60 = v63;\n
                v61 = v55;\n
                v62 = v60;\n
                v63 += 2;\n
                if (v63 == 81)\n
                    break;\n
            }\n
            else\n
            {\n
                v62 = v63;\n
                v63 += 2;\n
                if (v63 == 81)\n
                    break;\n
            }\n
        }\n
        v64 = ((v62 * 1717986919 >> 32 >> 2) + (v62 * 1717986919 >> 32 >> 31)) * 2 * 5;\n
        v65 = v62 - v64;\n
        v54->field_b4 = v65;\n
        if (v65 > 79)\n
            return v64;\n
    }\n
    else if (v65 > 79)\n
    {\n
        return v64;\n
    }\n
    v67 = v65 - 20;\n
    do\n
    {\n
        v64 = cgc_buffer_write_bit(v66, *(&(&v15)[2 * v67]) + *(&(&v14)[2 * v67]) + *(&(&v13)[2 * v67]) + *(&(&v12)[2 * v67]) + *(&(&v11)[2 * v67]) < 0xfffffffc);\n
        v67 += 20;\n
    } while (v67 < 60);\n
    return v64;\n
}\n
", "4221446:sub_406a06": null, "4221657:sub_406ad9": null, "4221664:cgc__modem_encode": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cgc__modem_encode.t;\n
\n
int cgc__modem_encode(unsigned int v0)\n
{\n
    unsigned int v2;  // ecx, Other Possible Types: unsigned short\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
\n
    *(&cgc__modem_encode.t) = (!v0 ? 17203 : 13926) + cgc__modem_encode.t;\n
    if (cgc__modem_encode.t >= 0x4000)\n
    {\n
        v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[12418 + 2 * ~(cgc__modem_encode.t >> 6)]);\n
    }\n
    else if (cgc__modem_encode.t >= 0)\n
    {\n
        v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[12418 + (cgc__modem_encode.t >> 5 & 510)]);\n
    }\n
    else\n
    {\n
        v3 = cgc__modem_encode.t >> 6;\n
        if (cgc__modem_encode.t > 49151)\n
            v3 ^= 255;\n
        v2 = -(*(&(&_GLOBAL_OFFSET_TABLE_)[12418 + 2 * v3]));\n
    }\n
    v4 = v2 >> 2;\n
    v5 = -(v4);\n
    v6 = v4;\n
    *(&v6) = v4 & 0x8000;\n
    if (!(v4 & 0x8000))\n
        v5 = v4;\n
    v7 = (v5 < 8158 ? 8158 : v5);\n
    v8 = v7 + 33;\n
    v9 = v8;\n
    v10 = 7;\n
    if (!(v9 & 0x1000))\n
    {\n
        v10 = 6;\n
        if (!(v9 & 0x800))\n
        {\n
            v10 = 5;\n
            if (!(v9 & 0x400))\n
            {\n
                v10 = 4;\n
                if (!(v9 & 0x200))\n
                {\n
                    v10 = 3;\n
                    if (!(v9 & 0x100))\n
                    {\n
                        v10 = 2;\n
                        if (!(v9 & 128))\n
                            v10 = v9 / 64 & 1;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v11 = v6 / 0x100 | v10 * 16 | v8 >> (v10 + 1 & 31) & 15;\n
    *(&v11) = ~(v11);\n
    return v11;\n
}\n
", "4221951:sub_406bff": null, "4221952:cgc_modem_encode": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cgc__modem_encode.t;\n
\n
int cgc_modem_encode(unsigned int v1[6], void* a0)\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned int v2;  // eax\n
    unsigned short v3;  // si\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    char v11;  // dl\n
\n
    while (true)\n
    {\n
        v2 = cgc_buffer_read_bit(v1);\n
        if (v2 == -1)\n
            break;\n
        v3 = (!v2 ? 17203 : 13926);\n
        v4 = 20;\n
        do\n
        {\n
            cgc__modem_encode.t = cgc__modem_encode.t + v3;\n
            v5 = cgc__modem_encode.t + v3;\n
            if (cgc__modem_encode.t + v3 >= 0x4000)\n
            {\n
                v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[12418 + 2 * ~(v5 >> 6)]);\n
            }\n
            else if (cgc__modem_encode.t + v3 >= 0)\n
            {\n
                v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[12418 + (v5 >> 5 & 510)]);\n
            }\n
            else\n
            {\n
                v6 = v5 / 64;\n
                if (v5 <= 49151)\n
                    *(&v5) = -(*(&(&_GLOBAL_OFFSET_TABLE_)[12418 + 2 * v6]));\n
                else\n
                    *(&v5) = -(*(&(&_GLOBAL_OFFSET_TABLE_)[12418 + 2 * (v6 ^ 255)]));\n
            }\n
            v7 = v5 >> 2;\n
            v8 = -(v7);\n
            if (!(v7 & 0x8000))\n
                v8 = v7;\n
            if (v8 >= 8158)\n
                v8 = 8158;\n
            v9 = v8 + 33;\n
            v10 = v9;\n
            v11 = 7;\n
            if (!(v10 & 0x1000))\n
            {\n
                v11 = 6;\n
                if (!(v10 & 0x800))\n
                {\n
                    v11 = 5;\n
                    if (!(v10 & 0x400))\n
                    {\n
                        v11 = 4;\n
                        if (!(v10 & 0x200))\n
                        {\n
                            v11 = 3;\n
                            if (!(v10 & 0x100))\n
                            {\n
                                v11 = 2;\n
                                if (!(v10 & 128))\n
                                    v11 = v10 / 64 & 1;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
            v0 = ~(((v7 & 0x8000) >> 8) | v11 * 16 | (v10 >> (v11 + 1 & 31)) & 15);\n
            cgc_buffer_write_bytes(a0, &v0, 1);\n
            v4 -= 1;\n
        } while (true);\n
    }\n
    return v2;\n
}\n
", "4222027:sub_406c4b": null, "4222143:sub_406cbf": null, "4222378:sub_406daa": null, "4222384:cgc_modem_output": "extern void g_frames;\n
\n
int cgc_modem_output(unsigned int v1, unsigned int a0)\n
{\n
    char v0;  // [bp-0x24]\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edx\n
\n
    v2 = a0;\n
    cgc_buffer_init(&v0, v1, v2 + 1);\n
    cgc_buffer_write_seek(&v0, v2 * 8, 0);\n
    v3 = cgc_buffer_read_remaining(&v0);\n
    if (!v4 && !v3)\n
        return v3;\n
    do\n
    {\n
        cgc_frame_encode(&v0, &g_frames);\n
        v3 = cgc_buffer_read_remaining(&v0);\n
    } while (!(!v4) || !(!v3));\n
    return v3;\n
}\n
", "4222513:sub_406e31": null, "4222528:cgc_modem_encode_frame": "extern unsigned int g_frames[6];\n
\n
int cgc_modem_encode_frame(void* v3)\n
{\n
    char v0;  // [bp-0x3c]\n
    char v1;  // [bp-0x3b]\n
    char v2;  // [bp-0x2c]\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // cc_dep2\n
\n
    v4 = cgc_buffer_read_remaining(&g_frames[0]);\n
    v5 = v4 < 112;\n
    if (!([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edx<4>, cc_dep2<4>, cc_dep2<4>)))\n
    {\n
        cgc_buffer_init(&v2, &v1, 15);\n
        cgc_buffer_write_bits(&v2, 19, 5);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        cgc_buffer_read_bytes(&g_frames[0], &v0, 1);\n
        cgc_buffer_write_bytes(&v2, &v0, 1);\n
        v4 = cgc_modem_encode(&v2, v3);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4222974:sub_406ffe": null, "4222976:cgc_modem_init": "extern unsigned int g_frames[6];\n
extern unsigned int g_frames_data;\n
\n
int cgc_modem_init()\n
{\n
    cgc_ecc_init();\n
    return cgc_buffer_init(&g_frames[0], &g_frames_data, 0x2000);\n
}\n
", "4223029:sub_407035": null, "4223040:cgc_get_byte": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int buf;\n
extern unsigned int buf_offset;\n
extern unsigned int buf_read;\n
\n
int cgc_get_byte(char *v1)\n
{\n
    unsigned int *v0;  // [bp-0x10]\n
    void* v2;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = buf_offset;\n
    if (buf_read == buf_offset)\n
    {\n
        v0 = &buf_read;\n
        if (cgc_receive(0, &buf, 0x400))\n
            return -1;\n
        v2 = 0;\n
        if (!buf_read)\n
            return -1;\n
    }\n
    *(v1) = (&_GLOBAL_OFFSET_TABLE_)[8876 + v2];\n
    buf_offset = v2 + 1;\n
    return 0;\n
}\n
", "4223150:sub_4070ae": null, "4223152:cgc_ready_to_read": "extern unsigned int buf_offset;\n
extern unsigned int buf_read;\n
\n
int cgc_ready_to_read()\n
{\n
    unsigned int v0;  // [bp-0xac]\n
    char v1;  // [bp-0x90]\n
    void* v2;  // [bp-0x8c]\n
    unsigned int v3;  // [bp-0x88]\n
    unsigned int v4;  // [bp-0x84]\n
    void* v5;  // [bp-0x80]\n
    void* v6;  // [bp-0x7c]\n
    void* v7;  // [bp-0x78]\n
    void* v8;  // [bp-0x74]\n
    void* v9;  // [bp-0x70]\n
    void* v10;  // [bp-0x6c]\n
    void* v11;  // [bp-0x68]\n
    void* v12;  // [bp-0x64]\n
    void* v13;  // [bp-0x60]\n
    void* v14;  // [bp-0x5c]\n
    void* v15;  // [bp-0x58]\n
    void* v16;  // [bp-0x54]\n
    void* v17;  // [bp-0x50]\n
    void* v18;  // [bp-0x4c]\n
    void* v19;  // [bp-0x48]\n
    void* v20;  // [bp-0x44]\n
    void* v21;  // [bp-0x40]\n
    void* v22;  // [bp-0x3c]\n
    void* v23;  // [bp-0x38]\n
    void* v24;  // [bp-0x34]\n
    void* v25;  // [bp-0x30]\n
    void* v26;  // [bp-0x2c]\n
    void* v27;  // [bp-0x28]\n
    void* v28;  // [bp-0x24]\n
    void* v29;  // [bp-0x20]\n
    void* v30;  // [bp-0x1c]\n
    void* v31;  // [bp-0x18]\n
    void* v32;  // [bp-0x14]\n
    void* v33;  // [bp-0x10]\n
    void* v34;  // [bp-0xc]\n
    void* v35;  // [bp-0x8]\n
\n
    if (buf_offset < buf_read)\n
        return 1;\n
    v5 = 0;\n
    v6 = 0;\n
    v7 = 0;\n
    v8 = 0;\n
    v9 = 0;\n
    v10 = 0;\n
    v11 = 0;\n
    v12 = 0;\n
    v13 = 0;\n
    v14 = 0;\n
    v15 = 0;\n
    v16 = 0;\n
    v17 = 0;\n
    v18 = 0;\n
    v19 = 0;\n
    v20 = 0;\n
    v21 = 0;\n
    v22 = 0;\n
    v23 = 0;\n
    v24 = 0;\n
    v25 = 0;\n
    v26 = 0;\n
    v27 = 0;\n
    v28 = 0;\n
    v29 = 0;\n
    v30 = 0;\n
    v31 = 0;\n
    v32 = 0;\n
    v33 = 0;\n
    v34 = 0;\n
    v35 = 0;\n
    v4 = 1;\n
    v2 = 0;\n
    v3 = 1;\n
    v0 = &v1;\n
    if (!cgc_fdwait(1, &v4, 0, &v2))\n
        return (&v4)[*(&v1) >> 5] >> (*(&v1) & 31) & 1;\n
    v0 = 1;\n
    cgc__terminate();\n
    return cgc_send_n_bytes();\n
}\n
", "4223568:cgc_send_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
    {\n
        return -1;\n
    }\n
    else if (!a1)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        v4 = 0;\n
        while (true)\n
        {\n
            v0 = &v1;\n
            if (cgc_transmit(v2, a1 + v4, v3 - v4))\n
            {\n
                cgc__terminate();\n
                return cgc_flush_output();\n
            }\n
            v5 = v1;\n
            if (!v5)\n
                break;\n
            v4 += v5;\n
            if (v4 >= v3)\n
                break;\n
        }\n
        return v4;\n
    }\n
}\n
", "4223696:cgc_flush_output": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* out_buf_len;\n
\n
int cgc_flush_output()\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    void* v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    if (!out_buf_len)\n
        return v1;\n
    v1 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = &v1;\n
        if (cgc_transmit(1, &(&_GLOBAL_OFFSET_TABLE_)[v3 + 9908], out_buf_len - v3))\n
        {\n
            cgc__terminate();\n
            return cgc_write_byte();\n
        }\n
        v4 = v1;\n
        if (!v4)\n
            break;\n
        v3 += v4;\n
        if (v3 >= out_buf_len)\n
            break;\n
    }\n
    out_buf_len = 0;\n
    return v1;\n
}\n
", "4223824:cgc_write_byte": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* out_buf_len;\n
\n
int cgc_write_byte(char v2)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // al, Other Possible Types: char\n
    unsigned int v4;  // ecx\n
    void* v5;  // edi, Other Possible Types: unsigned int\n
\n
    v3 = v2;\n
    v4 = out_buf_len;\n
    out_buf_len = out_buf_len + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[9908 + v4] = v2;\n
    if (out_buf_len < 0x400)\n
        return v3;\n
    v1 = 0;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v0 = &v1;\n
        if (cgc_transmit(1, &(&_GLOBAL_OFFSET_TABLE_)[v5 + 9908], out_buf_len - v5))\n
        {\n
            cgc__terminate();\n
            return cgc_modem_loop();\n
        }\n
        v3 = v1;\n
        if (!v3)\n
            break;\n
        v5 += v3;\n
        if (v5 >= out_buf_len)\n
            break;\n
    }\n
    out_buf_len = 0;\n
    return v1;\n
}\n
", "4223984:cgc_modem_loop": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int buf;\n
extern unsigned int buf_offset;\n
extern struct_0 buf_read;\n
extern unsigned int cgc_modem_loop.decdata;\n
extern unsigned int cgc_modem_loop.indata;\n
extern unsigned int cgc_modem_loop.outdata;\n
extern unsigned int cgc_modem_loop.pktdata;\n
extern void* out_buf_len;\n
\n
int cgc_modem_loop()\n
{\n
}\n
", "4224114:sub_407472": null, "4224908:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_fdwait": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}