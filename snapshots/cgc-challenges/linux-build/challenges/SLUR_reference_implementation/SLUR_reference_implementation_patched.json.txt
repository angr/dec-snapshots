{"4198400:_init": "extern struct_0 *g_4064a4;\n
\n
int _init()\n
{\n
    if (g_4064a4)\n
    {\n
        g_4064a4();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 21435;\n
    v6 = v5 + 43;\n
    v7 = v5 + 43;\n
    if (v7 == v6)\n
        return v5 + 43;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 21371;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 43;\n
    v9 = (v6 + 43 - (v6 + 43) >> 31) + (43 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4064a0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4064a0)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // ecx\n
    unsigned int v4;  // eax\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
        return 0;\n
    v4 = a0;\n
    if (!v4)\n
        return 0;\n
    tmp_2 = v4;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v6 = v4 * v2;\n
    v7 = cgc_malloc();\n
    if (v7)\n
    {\n
        v0 = v6;\n
        return cgc_memset(v7, 0);\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4198993:sub_401251": null, "4199008:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4199027:sub_401273": null, "4199040:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199056:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199072:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199088:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4199102:sub_4012be": null, "4199104:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4199126:sub_4012d6": null, "4199136:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4199158:sub_4012f6": null, "4199168:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4199190:sub_401316": null, "4199200:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4199222:sub_401336": null, "4199232:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9384 + v0];\n
}\n
", "4199257:sub_401359": null, "4199264:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4199289:sub_401379": null, "4199296:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9256 + v0];\n
}\n
", "4199321:sub_401399": null, "4199328:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199336:sub_4013a8": null, "4199344:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4199363:sub_4013c3": null, "4199376:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4199395:sub_4013e3": null, "4199408:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v4;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        v3 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            v4 = cgc_coalesce();\n
            return v4;\n
        }\n
        v0 = *(v3);\n
        v4 = cgc_deallocate(v3);\n
        return v4;\n
    }\n
}\n
", "4199487:sub_40143f": null, "4199488:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_4065dc;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // esi\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct struct_1 **v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
    struct_1 *v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13[6];  // eax\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        v11 = 0;\n
        if (v10 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[4 * v10]);\n
                if (v12)\n
                {\n
                    do\n
                    {\n
                        if (*(v12) >= v9)\n
                        {\n
                            v11 = v12;\n
                            goto LABEL_40151f;\n
                        }\n
                        v12 = *((v12 + 8));\n
                    } while (v12);\n
                }\n
                v10 += 1;\n
            } while (v10 != 32);\n
        }\n
LABEL_40151f:\n
        if (v11)\n
        {\n
LABEL_401523:\n
            cgc_remove_from_flist();\n
            v14 = *(v11) - v9;\n
            if (v14 >= 49)\n
            {\n
                v15 = v9 + v11;\n
                *((&v9->field_0 + v11)) = v14;\n
                *(&v9->padding_4[v11]) = 1;\n
                *((8 + &v9->field_0 + v11)) = 0;\n
                *(&v9->padding_c[v11]) = 0;\n
                *(v11) = v9;\n
                *((20 + &v9->field_0 + v11)) = v11;\n
                *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
                v16 = *((v11 + 16));\n
                if (v16)\n
                    v16->field_14 = v15;\n
                *((v11 + 16)) = v15;\n
                cgc_insert_into_flist();\n
            }\n
            v5 = v11 + 24;\n
            return v5;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v13 = *(&v2);\n
            if (v13)\n
            {\n
                v13[0] = 0x40000;\n
                v13[1] = 1;\n
                v13[3] = 0;\n
                v13[2] = 0;\n
                v13[5] = 0;\n
                v13[4] = 0;\n
                cgc_insert_into_flist();\n
                v11 = g_4065dc;\n
                goto LABEL_401523;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            v5 = v8 + 1;\n
            return v5;\n
        }\n
        return 0;\n
    }\n
}\n
", "4199915:sub_4015eb": null, "4199920:cgc_get_size_class": "extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int *v2;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v2 = &size_class_limits;\n
    while (true)\n
    {\n
        if (*(v2) >= v0)\n
            return v1;\n
        v1 += 1;\n
        v2 += 4;\n
        if (v1 == 32)\n
            return 32;\n
    }\n
}\n
", "4199973:sub_401625": null, "4199984:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // ecx\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    while (*(v3) < v1[0])\n
    {\n
        v2 += 1;\n
        v3 += 4;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    v1[1] = 1;\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]);\n
    if (!v4)\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    }\n
    v1[2] = v4;\n
    *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) + 12)) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
    v1[3] = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4200093:sub_40169d": null, "4200096:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // esi\n
    struct_1 *v5;  // edi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    do\n
    {\n
        if (*(v3) >= v1->field_0)\n
        {\n
            v4 = v1->field_c;\n
            if (v4)\n
                v4->field_8 = v1->field_8;\n
            v5 = v1->field_8;\n
            if (v5)\n
                v5->field_c = v4;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) == v1)\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v5;\n
                goto LABEL_4016fb;\n
            }\n
        }\n
        v2 += 1;\n
        v3 += 4;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4016fb:\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v0;\n
}\n
", "4200211:sub_401713": null, "4200224:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char size_class_limits;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // ebx\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // esi\n
    unsigned int v32;  // edi\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // edi\n
    unsigned int v35;  // edi\n
    unsigned int v36;  // ebx\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // ebx\n
    unsigned int v41;  // ebx\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // esi\n
    unsigned int v47;  // edx\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // edi\n
    unsigned int v50;  // ebx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edx\n
    unsigned int v53;  // edx\n
    unsigned int v54;  // ecx\n
    unsigned int v55;  // edx\n
    unsigned int v56;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
    {\n
        v3 = *((v1 + 16));\n
        if (v3 && *((v3 + 4)))\n
        {\n
            v6 = 0;\n
            v4 = &size_class_limits;\n
            do\n
            {\n
                if (*(v4) >= *(v2))\n
                {\n
LABEL_401784:\n
                    v7 = *((v2 + 12));\n
                    if (v7)\n
                        *((v7 + 8)) = *((v2 + 8));\n
                    v10 = *((v2 + 8));\n
                    if (v10)\n
                        *((v10 + 12)) = v7;\n
                    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v6] == v2)\n
                        (&_GLOBAL_OFFSET_TABLE_)[44 + v6] = v10;\n
                    *((v2 + 8)) = 0;\n
                    *((v2 + 12)) = 0;\n
                    *((v2 + 4)) = 0;\n
                    v15 = *((v1 + 16));\n
                    v16 = 0;\n
                    v17 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v17) >= *(v15))\n
                        {\n
LABEL_4017e4:\n
                            v20 = *((v15 + 12));\n
                            if (v20)\n
                                *((v20 + 8)) = *((v15 + 8));\n
                            v25 = *((v15 + 8));\n
                            if (v25)\n
                                *((v25 + 12)) = v20;\n
                            if ((&_GLOBAL_OFFSET_TABLE_)[44 + v16] == v15)\n
                                (&_GLOBAL_OFFSET_TABLE_)[44 + v16] = v25;\n
                            *((v15 + 8)) = 0;\n
                            *((v15 + 12)) = 0;\n
                            *((v15 + 4)) = 0;\n
                            v30 = *(v1);\n
                            v31 = 0;\n
                            v32 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v32) >= v30)\n
                                {\n
LABEL_401844:\n
                                    v35 = *((v1 + 12));\n
                                    if (v35)\n
                                        *((v35 + 8)) = *((v1 + 8));\n
                                    v41 = *((v1 + 8));\n
                                    if (v41)\n
                                        *((v41 + 12)) = v35;\n
                                    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v31] == v1)\n
                                        (&_GLOBAL_OFFSET_TABLE_)[44 + v31] = v41;\n
                                    *((v1 + 8)) = 0;\n
                                    *((v1 + 12)) = 0;\n
                                    *((v1 + 4)) = 0;\n
                                    v46 = *((v1 + 20));\n
                                    v47 = v30 + *(v46);\n
                                    *(v46) = v47;\n
                                    v48 = v47 + *(*((v1 + 16)));\n
                                    *(v46) = v48;\n
                                    v49 = 0;\n
                                    v50 = &size_class_limits;\n
                                    do\n
                                    {\n
                                        if (*(v50) >= v48)\n
                                        {\n
LABEL_4018b4:\n
                                            *((v46 + 4)) = 1;\n
                                            v52 = (&_GLOBAL_OFFSET_TABLE_)[44 + v49];\n
                                            if (!v52)\n
                                            {\n
                                                (&_GLOBAL_OFFSET_TABLE_)[44 + v49] = v46;\n
                                            }\n
                                            else\n
                                            {\n
                                                *((v46 + 8)) = v52;\n
                                                *(((&_GLOBAL_OFFSET_TABLE_)[44 + v49] + 12)) = v46;\n
                                                (&_GLOBAL_OFFSET_TABLE_)[44 + v49] = v46;\n
                                                *((v46 + 12)) = 0;\n
                                            }\n
                                            v53 = *((v1 + 16));\n
                                            v54 = *((v53 + 20));\n
                                            if (v54)\n
                                                *((v54 + 16)) = *((v53 + 16));\n
                                            v55 = *((v53 + 16));\n
                                            if (v55)\n
                                            {\n
                                                *((v55 + 20)) = v54;\n
                                                goto LABEL_401b96;\n
                                            }\n
                                        }\n
                                        v49 += 1;\n
                                        v50 += 4;\n
                                    } while (v49 != 32);\n
                                    v49 = 32;\n
                                    goto LABEL_4018b4;\n
                                }\n
                                v31 += 1;\n
                                v32 += 4;\n
                            } while (v31 != 32);\n
                            v31 = 32;\n
                            goto LABEL_401844;\n
                        }\n
                        v16 += 1;\n
                        v17 += 4;\n
                    } while (v16 != 32);\n
                    v16 = 32;\n
                    goto LABEL_4017e4;\n
                }\n
                v6 += 1;\n
                v4 += 4;\n
            } while (v6 != 32);\n
            v6 = 32;\n
            goto LABEL_401784;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
    {\n
        v5 = *((v1 + 16));\n
        if (v5 && !*((v5 + 4)))\n
        {\n
            v8 = 0;\n
            v9 = &size_class_limits;\n
            do\n
            {\n
                if (*(v9) >= *(v2))\n
                {\n
                    v12 = *((v2 + 12));\n
                    if (v12)\n
                        *((v12 + 8)) = *((v2 + 8));\n
                    v18 = *((v2 + 8));\n
                    if (v18)\n
                        *((v18 + 12)) = v12;\n
                    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v8] == v2)\n
                        (&_GLOBAL_OFFSET_TABLE_)[44 + v8] = v18;\n
                    *((v2 + 8)) = 0;\n
                    *((v2 + 12)) = 0;\n
                    *((v2 + 4)) = 0;\n
                    v22 = *(v1);\n
                    v23 = 0;\n
                    v24 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v24) >= v22)\n
                        {\n
LABEL_401af4:\n
                            v26 = *((v1 + 12));\n
                            if (v26)\n
                                *((v26 + 8)) = *((v1 + 8));\n
                            v33 = *((v1 + 8));\n
                            if (v33)\n
                                *((v33 + 12)) = v26;\n
                            if ((&_GLOBAL_OFFSET_TABLE_)[44 + v23] == v1)\n
                                (&_GLOBAL_OFFSET_TABLE_)[44 + v23] = v33;\n
                            *((v1 + 8)) = 0;\n
                            *((v1 + 12)) = 0;\n
                            *((v1 + 4)) = 0;\n
                            v37 = *((v1 + 20));\n
                            v38 = v22 + *(v37);\n
                            *(v37) = v38;\n
                            v39 = 0;\n
                            v40 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v40) >= v38)\n
                                {\n
LABEL_401b54:\n
                                    *((v37 + 4)) = 1;\n
                                    v42 = (&_GLOBAL_OFFSET_TABLE_)[44 + v39];\n
                                    if (!v42)\n
                                    {\n
                                        (&_GLOBAL_OFFSET_TABLE_)[44 + v39] = v37;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                    else\n
                                    {\n
                                        *((v37 + 8)) = v42;\n
                                        *(((&_GLOBAL_OFFSET_TABLE_)[44 + v39] + 12)) = v37;\n
                                        (&_GLOBAL_OFFSET_TABLE_)[44 + v39] = v37;\n
                                        *((v37 + 12)) = 0;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                }\n
                                v39 += 1;\n
                                v40 += 4;\n
                            } while (v39 != 32);\n
                            v39 = 32;\n
                            goto LABEL_401b54;\n
                        }\n
                        v23 += 1;\n
                        v24 += 4;\n
                    } while (v23 != 32);\n
                    v23 = 32;\n
                    goto LABEL_401af4;\n
                }\n
                v8 += 1;\n
                v9 += 4;\n
            } while (v8 != 32);\n
            v8 = 32;\n
LABEL_401b96:\n
            v56 = *((v1 + 20));\n
            if (v56)\n
                *((v56 + 16)) = *((v1 + 16));\n
            v1 = *((v1 + 16));\n
            if (!v1)\n
                return v1;\n
            *((v1 + 20)) = v56;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (*((v2 + 4)))\n
        return v1;\n
    v11 = *((v1 + 16));\n
    if (!v11)\n
        return v1;\n
    if (!*((v11 + 4)))\n
        return v1;\n
    v13 = 0;\n
    v14 = &size_class_limits;\n
    do\n
    {\n
        if (*(v14) >= *(v11))\n
        {\n
LABEL_401954:\n
            v19 = *((v11 + 12));\n
            if (v19)\n
                *((v19 + 8)) = *((v11 + 8));\n
            v21 = *((v11 + 8));\n
            if (v21)\n
                *((v21 + 12)) = v19;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[44 + v13] == v11)\n
                (&_GLOBAL_OFFSET_TABLE_)[44 + v13] = v21;\n
            *((v11 + 8)) = 0;\n
            *((v11 + 12)) = 0;\n
            *((v11 + 4)) = 0;\n
            v27 = *(v1);\n
            v28 = 0;\n
            v29 = &size_class_limits;\n
            do\n
            {\n
                if (*(v29) >= v27)\n
                {\n
LABEL_4019b4:\n
                    v34 = *((v1 + 12));\n
                    if (v34)\n
                        *((v34 + 8)) = *((v1 + 8));\n
                    v36 = *((v1 + 8));\n
                    if (v36)\n
                        *((v36 + 12)) = v34;\n
                    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v28] == v1)\n
                        (&_GLOBAL_OFFSET_TABLE_)[44 + v28] = v36;\n
                    *((v1 + 8)) = 0;\n
                    *((v1 + 12)) = 0;\n
                    *((v1 + 4)) = 0;\n
                    v43 = v27 + *(*((v1 + 16)));\n
                    *(v1) = v43;\n
                    v44 = 0;\n
                    v45 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v45) >= v43)\n
                        {\n
LABEL_401a14:\n
                            *((v1 + 4)) = 1;\n
                            v51 = (&_GLOBAL_OFFSET_TABLE_)[44 + v44];\n
                            if (!v51)\n
                            {\n
                                (&_GLOBAL_OFFSET_TABLE_)[44 + v44] = v1;\n
                            }\n
                            else\n
                            {\n
                                *((v1 + 8)) = v51;\n
                                *(((&_GLOBAL_OFFSET_TABLE_)[44 + v44] + 12)) = v1;\n
                                (&_GLOBAL_OFFSET_TABLE_)[44 + v44] = v1;\n
                                *((v1 + 12)) = 0;\n
                            }\n
                            v1 = *((v1 + 16));\n
                            goto LABEL_401b96;\n
                        }\n
                        v44 += 1;\n
                        v45 += 4;\n
                    } while (v44 != 32);\n
                    v44 = 32;\n
                    goto LABEL_401a14;\n
                }\n
                v28 += 1;\n
                v29 += 4;\n
            } while (v28 != 32);\n
            v28 = 32;\n
            goto LABEL_4019b4;\n
        }\n
        v13 += 1;\n
        v14 += 4;\n
    } while (v13 != 32);\n
    v13 = 32;\n
    goto LABEL_401954;\n
    goto LABEL_401b96;\n
}\n
", "4201393:sub_401bb1": null, "4201408:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4201464:sub_401bf8": null, "4201472:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v4 != v3)\n
                return v4 - v3;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4201533:sub_401c3d": null, "4201536:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4201585:sub_401c71": null, "4201600:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    char *v1;  // eax\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // esi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = a0;\n
        v3 += 1;\n
    } while (v2 != v3);\n
    return v0;\n
}\n
", "4201648:cgc_output_number_printf": "int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    char v12;  // al\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    char v16;  // al\n
\n
    v6 = a3;\n
    v7 = a2;\n
    v8 = a1;\n
    v9 = a0;\n
    v14 = v5;\n
    if (v9 < v8)\n
    {\n
        v3 = v9;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v9) /m v8;\n
        v3 = tmp_9 >> 32;\n
        v14 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v9) /m v8, v8, v7 - 1, v6);\n
    }\n
    v12 = v6;\n
    if (v7 > 0 && !v2)\n
    {\n
        tmp_2 = v7;\n
        v13 = v7 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                if ((v12 & 1))\n
                    v1 = 48;\n
                else\n
                    v1 = 32;\n
                v0 = &v4;\n
                cgc_transmit(v14, &v1, 1);\n
                v12 = v6;\n
                v14 = v5;\n
                tmp_6 = v13;\n
                v13 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
    }\n
    if (!(v12 & 2))\n
    {\n
        v15 = v3;\n
        v16 = v15 + 87;\n
    }\n
    else\n
    {\n
        v15 = v3;\n
        v16 = v15 + 55;\n
    }\n
    if (v15 < 10)\n
        v16 = v15 + 48;\n
    v1 = v16;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4201769:sub_401d29": null, "4201889:sub_401da1": null, "4201904:cgc_fdprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fdprintf(unsigned int v5, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    char v2;  // [bp-0x1c]\n
    struct struct_0 **v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14]\n
    char v6;  // [bp+0xc]\n
    unsigned int v7;  // [bp+0x10]\n
    unsigned int v8;  // [bp+0x14]\n
    struct struct_0 **v9;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v10;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v11;  // ecx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    struct struct_0 **v14;  // eax\n
    struct struct_0 **v15;  // eax\n
    char *v16;  // esi\n
    struct struct_0 **v17;  // eax, Other Possible Types: unsigned int\n
    unsigned int v18;  // edi\n
\n
    v3 = &v6;\n
    v9 = a0;\n
    if (!*(v9))\n
        return 0;\n
    v10 = &v2;\n
    do\n
    {\n
        a0 = v9 + 1;\n
        *(&v9) = *(v9);\n
        if (v1 == 37)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                v11 = a0;\n
                a0 = v11 + 1;\n
                v17 = *(v11);\n
                v12 = v17;\n
                if (v12 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(v11, &a0);\n
            }\n
            switch (v12)\n
            {\n
            case 88:\n
                break;\n
            case 100:\n
                v14 = v3;\n
                v3 = v14 + 1;\n
                if (*(v14) < 0)\n
                {\n
LABEL_401f9f:\n
                    v1 = 45;\n
                    v0 = &v2;\n
                    cgc_transmit(v14, &v1, 1);\n
                }\n
                goto LABEL_401f76;\n
            case 115:\n
                v15 = v3;\n
                v3 = v15 + 1;\n
                v16 = *(v15);\n
                v10 = &v2;\n
                if (cgc_strlen())\n
                {\n
                    v18 = 0;\n
                    do\n
                    {\n
                        v1 = v16[v18];\n
                        v0 = v10;\n
                        cgc_transmit(v5, &v1, 1);\n
                        v18 += 1;\n
                        v10 = &v2;\n
                    } while (v18 < cgc_strlen(v16, &v1, 1));\n
                }\n
                goto LABEL_401e08;\n
            case 117:\n
                v3 = v3 + 1;\n
                goto LABEL_401f76;\n
            case 120:\n
                break;\n
            case 99:\n
                v17 = v3;\n
                v3 = v17 + 4;\n
                *(&v17) = *(v17);\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
LABEL_401eb4:\n
                v1 = v17;\n
                goto LABEL_401f83;\n
            default:\n
                if (v12 == 37)\n
                {\n
                    v1 = 37;\n
LABEL_401f83:\n
                    v0 = &v2;\n
                    goto LABEL_401f9f;\n
                }\n
                if (v12 == 48)\n
                    goto LABEL_0x401e80;\n
                else\n
                    goto LABEL_401eb4;\n
            }\n
            v3 = v3 + 1;\n
LABEL_401f76:\n
            cgc_output_number_printf(v5, a0, *(&v6), v7, v8);\n
            v10 = &v2;\n
            goto LABEL_401e08;\n
        }\n
        v1 = v9;\n
        v0 = v10;\n
        cgc_transmit(v5, &v1, 1);\n
        v10 = &v2;\n
LABEL_401e08:\n
        v9 = a0;\n
    } while (*(v9));\n
    return 0;\n
}\n
", "4201954:sub_401de2": null, "4202034:sub_401e32": null, "4202122:sub_401e8a": null, "4202476:sub_401fec": null, "4202480:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    void* v13;  // eax, Other Possible Types: unsigned int\n
    char v14;  // bl\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // esi\n
    unsigned int v18;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v13 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v13 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
    }\n
    v14 = a4;\n
    if (v9 > 0 && !v13)\n
    {\n
        tmp_2 = v9;\n
        v15 = v9 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                *(v11)->field_0 = ((v14 & 1) * 16) | 32;\n
                *(v11) = *(v11) + 1;\n
                *(v12) = *(v12) + 1;\n
                tmp_12 = v15;\n
                v15 -= 1;\n
            } while (tmp_12 != 1);\n
        }\n
    }\n
    v16 = v0;\n
    *(&*(v11)) = (!(v16 < 10) ? 48 : ((!(v14 & 2)) * 32 + 55)) + v16;\n
    *(v11) = *(v11) + 1;\n
    *(v12) = *(v12) + 1;\n
    v18 = v13 + 1;\n
    return v18;\n
}\n
", "4202679:sub_4020b7": null, "4202688:cgc_sprintf": "int cgc_sprintf(char *v8, struct struct_1 **a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct struct_0 **v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct struct_1 **v10;  // eax\n
    char *v11;  // ecx\n
    unsigned int v12;  // eax\n
    struct struct_1 **v13;  // ecx\n
    struct struct_1 **v14;  // dl\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    char *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // edi\n
    struct struct_0 **v18;  // ecx\n
    char *v19;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v20;  // eax\n
    char *v21;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v22;  // edi\n
    struct struct_0 **v23;  // ecx\n
    char *v24;  // edx\n
    unsigned int v25;  // edi\n
    char *v26;  // eax\n
\n
    v5 = 0;\n
    v6 = &v9;\n
    while (true)\n
    {\n
        v10 = a0;\n
        if (!*(v10))\n
            break;\n
        a0 = v10 + 1;\n
        *(&v10) = *(v10);\n
        if (*(&v10) != 37)\n
        {\n
            v11 = v8;\n
            *(v11) = v10;\n
            v8 = v11 + 1;\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            v15 = 0;\n
            while (true)\n
            {\n
                v12 = v15 | 1;\n
                do\n
                {\n
                    v17 = v15;\n
                    v13 = a0;\n
                    a0 = v13 + 1;\n
                    v14 = *(v13);\n
                    v15 = v12;\n
                } while (v14 == 48);\n
                switch (v14)\n
                {\n
                case 37:\n
                    v16 = v8;\n
                    *(v16) = 37;\n
                    goto LABEL_402247;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v4 = 10;\n
                    v7 = cgc_strtol(v13, &a0);\n
                    v15 = v17;\n
                    continue;\n
                case 100:\n
                    v18 = v6;\n
                    v6 = v18 + 1;\n
                    v19 = *(v18);\n
                    if (v19 < 0)\n
                    {\n
                        v24 = v8;\n
                        *(v24) = 45;\n
                        v8 = v24 + 1;\n
                        v5 += 1;\n
                        v19 = -(v19);\n
                    }\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 10;\n
                    v0 = v19;\n
LABEL_4021ce:\n
                    cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                    break;\n
                case 115:\n
                    v20 = v6;\n
                    v6 = v20 + 1;\n
                    v21 = v8;\n
                    v22 = v5;\n
                    if (cgc_strlen())\n
                    {\n
                        v7 = v22;\n
                        v25 = 0;\n
                        do\n
                        {\n
                            v21[v25] = (*(v20))[v25].field_0;\n
                            v25 += 1;\n
                        } while (v25 < cgc_strlen());\n
                        v21 = &v21[v25];\n
                        v22 = v7 + v25;\n
                    }\n
                    v8 = v21;\n
                    v5 = v22;\n
                    break;\n
                case 88:\n
                    v17 |= 2;\n
                case 120:\n
                    v23 = v6;\n
                    v6 = v23 + 1;\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 16;\n
                    v0 = &*(v23)->field_0;\n
                    goto LABEL_4021ce;\n
                default:\n
                    v16 = v8;\n
                    *(v16) = v14;\n
LABEL_402247:\n
                    v8 = v16 + 1;\n
                    v5 += 1;\n
                    break;\n
                }\n
            }\n
        }\n
    }\n
    v26 = v8;\n
    v8 = v26 + 1;\n
    *(v26) = 0;\n
    return v5;\n
}\n
", "4202724:sub_4020e4": null, "4203120:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
    {\n
        v5 = cgc_malloc(v1);\n
        return v5;\n
    }\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            return v5;\n
        }\n
    }\n
    return 0;\n
}\n
", "4203238:sub_4022e6": null, "4203248:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v6 = v0[0];\n
    while (true)\n
    {\n
        if (!v6)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        v3 = *(v1);\n
        if (!v3)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        if (v6 != v3)\n
        {\n
            v5 = cgc_tolower(v6);\n
            if (v5 != cgc_tolower(*(v1)))\n
                return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        }\n
        v1 += 1;\n
        v6 = *((v2 + 1));\n
        v2 += 1;\n
    }\n
}\n
", "4203370:sub_40236a": null, "4203376:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4203433:sub_4023a9": null, "4203440:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a0)\n
            return v1;\n
    }\n
}\n
", "4203474:sub_4023d2": null, "4203488:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // cl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(a0) - *(v2);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return *(v1) - v4;\n
}\n
", "4203552:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v5 = v4 + 1;\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 = v5;\n
        } while (v3);\n
    }\n
    v2[v5] = 0;\n
    return v0;\n
}\n
", "4203612:sub_40245c": null, "4203616:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4203643:sub_40247b": null, "4203648:cgc_strncasecmp": "int cgc_strncasecmp(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char v4;  // cl\n
    char *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    for (v5 = v0; v1 != 1; v2 += 1)\n
    {\n
        v3 = *(v5);\n
        if (!v3)\n
            break;\n
        v4 = *(v2);\n
        if (!v4)\n
            break;\n
        if (v3 != v4)\n
        {\n
            v1 = a1;\n
            if (cgc_tolower(v3) != cgc_tolower(*(v2)))\n
                break;\n
        }\n
        v5 += 1;\n
    }\n
    v6 = cgc_tolower(*(v5)) - cgc_tolower(*(v2));\n
    return v6;\n
}\n
", "4203685:sub_4024a5": null, "4203796:sub_402514": null, "4203808:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    unsigned int v6;  // edx\n
    char *v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v7 = v0;\n
    tmp_4 = v1;\n
    v6 = v1 - 1;\n
    if (tmp_4 != 1)\n
    {\n
        v3 = &v7[v6];\n
        v4 = &v2[v6];\n
        while (true)\n
        {\n
            v5 = *(v7);\n
            if (!v5)\n
                break;\n
            if (!*(v2))\n
                break;\n
            if (v5 != *(v2))\n
                break;\n
            v7 += 1;\n
            v2 += 1;\n
            tmp_8 = v6;\n
            v6 -= 1;\n
            if (tmp_8 == 1)\n
            {\n
                v7 = v3;\n
                v2 = v4;\n
                break;\n
            }\n
        }\n
    }\n
    v8 = *(v2) - *(v7);\n
    return v8;\n
}\n
", "4203888:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, char *a1)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v4 = 0;\n
        if (0 >= v1)\n
            return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v4));\n
            v2[v4] = v3;\n
            if (!v3)\n
                break;\n
            v4 += 1;\n
            if (v1 == v4)\n
            {\n
                v4 = v1;\n
                break;\n
            }\n
        }\n
        if (v4 >= v1)\n
            return v0;\n
    }\n
    do\n
    {\n
        v2[v4] = 0;\n
        v4 += 1;\n
    } while (v1 != v4);\n
    return v0;\n
}\n
", "4203974:sub_4025c6": null, "4203984:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    struct struct_0 **v1;  // esi\n
    char v2[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // al, Other Possible Types: char\n
    unsigned int v4;  // eax\n
    char v6[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a0, v3);\n
            if (v4)\n
                break;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
            if (!v3)\n
                break;\n
        }\n
    }\n
    if (!*(v2))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        v6 = v2 + 1;\n
    }\n
    *(v1) = v6;\n
    return *(v1);\n
}\n
", "4204094:sub_40263e": null, "4204096:cgc_strtol": "int cgc_strtol(char *v3, unsigned int *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // esi\n
    unsigned int *v5;  // ecx, Other Possible Types: unsigned int\n
    char *v6;  // edx, Other Possible Types: unsigned int\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    char *v8;  // ebx, Other Possible Types: unsigned int\n
    char v9;  // bl\n
    char *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ecx\n
    void* v13;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    char *v17;  // esi, Other Possible Types: unsigned int\n
\n
    v4 = a1;\n
    v5 = a0;\n
    v6 = v3;\n
    v7 = 0;\n
    if (v4 > 36)\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
        if (v4 != 1)\n
        {\n
            v10 = v6;\n
            while (true)\n
            {\n
                v9 = *(v10);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v9 != 32)\n
                    break;\n
                v10 += 1;\n
            }\n
            v11 = 0;\n
            *(&v11) = v9 == 45;\n
            v12 = (*((v10 + v11)) == 43) + v11;\n
            v0 = v10 + v12;\n
            if (!v4)\n
            {\n
                v4 = 10;\n
                if (*(v0) == 48)\n
                {\n
                    if ((*((v10 + v12 + 1)) | 32) == 120)\n
                    {\n
                        v0 = v10 + v12 + 2;\n
                        v4 = 16;\n
                    }\n
                    else\n
                    {\n
                        v0 = v10 + v12 + 1;\n
                        v4 = 8;\n
                    }\n
                }\n
            }\n
            else if (v4 == 16)\n
            {\n
                v4 = 16;\n
                if (*(v0) == 48 && (*((v10 + v12 + 1)) | 32) == 120)\n
                    v0 = v10 + v12 + 2;\n
            }\n
            v13 = 0;\n
            v14 = 0;\n
            v1 = v4;\n
            while (true)\n
            {\n
                v15 = *((v0 + v14));\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                {\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                        break;\n
                    v2 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, ((cl<1> & 0xdf<8>) - 0x41<8>)), 0x1a<32>, 0x0<32>);\n
                }\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v16 = v15 - 48;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else if (!v2)\n
                {\n
                    v16 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>);\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else\n
                {\n
                    v16 = v15 + [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x1a<32>, 0x0<32>) * 32 - 87;\n
                    v4 = v1;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                v13 = v4 * v13 + v16;\n
                v14 += 1;\n
            }\n
            v7 = -(v13);\n
            if (v9 != 45)\n
                v7 = v13;\n
            v8 = v14;\n
            v0 += v14;\n
            v5 = a0;\n
            v6 = v3;\n
        }\n
    }\n
    if (!v5)\n
        return v7;\n
    v17 = v0;\n
    if (!v8)\n
        v17 = v6;\n
    *(v5) = v17;\n
    return v7;\n
}\n
", "4204143:sub_40266f": null, "4204382:sub_40275e": null, "4204487:sub_4027c7": null, "4204496:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4204537:sub_4027f9": null, "4204544:sym_list_append": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int sym_list_append(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2[3];  // eax\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v2 = cgc_malloc(12);\n
    if (!v2)\n
    {\n
        cgc__terminate();\n
        return cgc_quote_fn();\n
    }\n
    do\n
    {\n
        v4 = v1;\n
        v1 = *((v1 + 8));\n
    } while (v1);\n
    v4->field_8 = &v2[0];\n
    v2[2] = 0;\n
    v2[1] = v4;\n
    v2[0] = a0;\n
    return 0;\n
}\n
", "4204656:cgc_quote_fn": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_quote_fn(struct_0 *v0)\n
{\n
    if (v0)\n
        return v0->field_c;\n
    return 0;\n
}\n
", "4204671:sub_40287f": null, "4204672:cgc_car_fn": "typedef struct struct_0 {\n
    char padding_0[12];\n
    struct struct_1 *field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int cgc_car_fn(struct_0 *v0)\n
{\n
    struct_0 *v1;  // ecx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3[4];  // ecx\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1)\n
    {\n
        v3 = v1->field_c;\n
        if (v3 && v3[0] == 3)\n
            v2 = v3[3];\n
    }\n
    return v2;\n
}\n
", "4204698:sub_40289a": null, "4204704:cgc_cdr_fn": "typedef struct struct_1 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_cdr_fn(struct_1 *v0)\n
{\n
    struct_1 *v1;  // ecx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1)\n
    {\n
        v3 = v1->field_c;\n
        if (v3)\n
            v2 = v3->field_10;\n
    }\n
    return v2;\n
}\n
", "4204725:sub_4028b5": null, "4204736:cgc_cons_fn": "typedef struct struct_3 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_1;\n
\n
int cgc_cons_fn(struct_3 *v0, unsigned int a0)\n
{\n
    struct_3 *v1;  // edi\n
    unsigned int v2;  // esi\n
    struct_2 *v3;  // eax\n
    struct_0 *v4;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v5;  // ebp\n
    struct_1 *v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v7;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        return 0;\n
    }\n
    else if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!v1->field_c)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v3 = v1->field_10;\n
        if (!v3)\n
        {\n
            return 0;\n
        }\n
        else if (v3->field_0 != 3)\n
        {\n
            return 0;\n
        }\n
        else\n
        {\n
            v2 = cgc_calloc(1, 20);\n
            *(v2) = 3;\n
            *((v2 + 12)) = v1->field_c;\n
            v6 = v1->field_10->field_c;\n
            if (!v6)\n
                return v2;\n
            while (true)\n
            {\n
                if (*(v6) != 3)\n
                    return v2;\n
                *(v2) = 3;\n
                v4 = v2;\n
                while (true)\n
                {\n
                    v5 = v4;\n
                    if (!v4)\n
                        break;\n
                    v4 = *((v4 + 16));\n
                    if (!v4)\n
                        break;\n
                }\n
                if (v5->field_c)\n
                {\n
                    v7 = cgc_calloc(1, 20);\n
                    v5->field_10 = &v7;\n
                    if (v7)\n
                    {\n
                        *(v7) = 3;\n
                        v5->field_10->field_c = v6->field_c;\n
                        v5->field_10->field_10 = 0;\n
                        v5->field_10->field_4 = 0;\n
                    }\n
                    if (!v5->field_10)\n
                    {\n
                        cgc__terminate();\n
                        return cgc_equal_fn();\n
                    }\n
                    v6 = v6->field_10;\n
                    if (!v6)\n
                        return v2;\n
                }\n
                else\n
                {\n
                    v5->field_c = v6->field_c;\n
                    v5->field_10 = 0;\n
                    v6 = v6->field_10;\n
                    if (!v6)\n
                        return v2;\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204859:sub_40293b": null, "4205040:cgc_equal_fn": "typedef struct struct_2 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
    struct struct_1 *field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_4 *field_0;\n
    char padding_4[4];\n
    struct struct_3 *field_8;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_4;\n
\n
extern char g_4042dc;\n
extern char g_4042de;\n
\n
int cgc_equal_fn(struct_2 *v0, struct_3 *a0)\n
{\n
    struct_2 *v1;  // eax\n
    struct_0 *v3;  // ecx\n
    struct_1 *v4;  // edx\n
    char *v5;  // eax\n
    struct_0 *v6;  // ecx\n
    char *v7;  // ecx\n
    unsigned int v8[2];  // eax\n
    char *v9;  // eax\n
    struct_3 *v10;  // edi, Other Possible Types: unsigned int\n
    unsigned int v11[2];  // eax\n
    char *v12;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v3 = v1->field_c;\n
    if (!v3)\n
        return 0;\n
    v4 = v1->field_10;\n
    if (!v4)\n
        return 0;\n
    v5 = v3->field_4;\n
    if (!v5)\n
        return 0;\n
    v6 = v4->field_c;\n
    if (!v6)\n
        return 0;\n
    v7 = v6->field_4;\n
    if (!v7)\n
        return 0;\n
    v10 = a0;\n
    if (!cgc_strcmp(v5, v7))\n
    {\n
        if (!v10)\n
            return 0;\n
        while (true)\n
        {\n
            v11 = *(v10);\n
            if (!v11)\n
                return 0;\n
            v12 = v11[0];\n
            if (!v12)\n
                return 0;\n
            if (!cgc_strcmp(v12, &g_4042dc))\n
                break;\n
            v10 = *((v10 + 8));\n
            if (!v10)\n
                return 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v10)\n
            return 0;\n
        while (true)\n
        {\n
            v8 = *(v10);\n
            if (!v8)\n
                return 0;\n
            v9 = v8[0];\n
            if (!v9)\n
                return 0;\n
            if (!cgc_strcmp(v9, &g_4042de))\n
                break;\n
            v10 = *((v10 + 8));\n
            if (!v10)\n
                return 0;\n
        }\n
    }\n
    return *((*(v10) + 4));\n
}\n
", "4205256:sub_402ac8": null, "4205264:cgc_atom_fn": "typedef struct struct_2 {\n
    char padding_0[12];\n
    struct struct_3 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char g_4042dc;\n
extern char g_4042de;\n
\n
int cgc_atom_fn(struct_2 *v0, struct_0 *a0)\n
{\n
    struct_2 *v1;  // eax\n
    unsigned int *v3;  // eax\n
    unsigned int v4[2];  // eax\n
    char *v5;  // eax\n
    unsigned int v6[2];  // eax\n
    char *v7;  // eax\n
    struct_0 *v8;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v3 = v1->field_c;\n
    if (!v3)\n
        return 0;\n
    v8 = a0;\n
    if (*(v3) != 1)\n
    {\n
        if (!v8)\n
            return 0;\n
        while (true)\n
        {\n
            v6 = *(v8);\n
            if (!v6)\n
                return 0;\n
            v7 = v6[0];\n
            if (!v7)\n
                return 0;\n
            if (!cgc_strcmp(v7, &g_4042de))\n
                break;\n
            v8 = *((v8 + 8));\n
            if (!v8)\n
                return 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v8)\n
            return 0;\n
        while (true)\n
        {\n
            v4 = *(v8);\n
            if (!v4)\n
                return 0;\n
            v5 = v4[0];\n
            if (!v5)\n
                return 0;\n
            if (!cgc_strcmp(v5, &g_4042dc))\n
                break;\n
            v8 = *((v8 + 8));\n
            if (!v8)\n
                return 0;\n
        }\n
    }\n
    return *((*(v8) + 4));\n
}\n
", "4205429:sub_402b75": null, "4205440:cgc_cond_fn": "typedef struct struct_4 {\n
    char padding_0[12];\n
    struct struct_3 *field_c;\n
    struct struct_4 *field_10;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_2 *field_10;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char g_4042dc;\n
\n
int cgc_cond_fn(struct_4 *v2, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x14]\n
    struct_4 *v3;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_3 *v5;  // eax\n
    struct_2 *v6;  // edx\n
    unsigned int v7;  // esi\n
    unsigned int v8[2];  // eax\n
    char *v9;  // eax\n
    unsigned int v10;  // eax\n
\n
    v3 = v2;\n
    if (!v3)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v4 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v3)\n
            return v0;\n
        v5 = *((v3 + 12));\n
        if (!v5)\n
            return v0;\n
        if (v5->field_0 != 3)\n
            return v0;\n
        v6 = v5->field_10;\n
        if (v6)\n
            break;\n
LABEL_402bbf:\n
        return v0;\n
    }\n
    v1 = v6->field_c;\n
    v7 = cgc_eval();\n
    if (v4)\n
    {\n
        while (true)\n
        {\n
            v8 = *(v4);\n
            if (!v8)\n
            {\n
LABEL_402c3b:\n
                v4 = a0;\n
                goto LABEL_402c3f;\n
            }\n
            else\n
            {\n
                v9 = v8[0];\n
                if (!v9)\n
                    goto LABEL_402c3b;\n
                if (!cgc_strcmp(v9, &g_4042dc))\n
                {\n
                    v10 = *((*(v4) + 4));\n
                    v4 = a0;\n
                    if (!(v7 == v10))\n
                        goto LABEL_402c49;\n
                    goto LABEL_402bb0;\n
                }\n
                v4 = *((v4 + 8));\n
                if (!v4)\n
                    goto LABEL_402c3b;\n
            }\n
        }\n
    }\n
LABEL_402c3f:\n
    if (v7)\n
    {\n
LABEL_402c49:\n
        v3 = *((v3 + 16));\n
        continue;\n
    }\n
LABEL_402bb0:\n
    v0 = cgc_eval();\n
    goto LABEL_402bbf;\n
}\n
", "4205485:sub_402bad": null, "4205695:sub_402c7f": null, "4205696:cgc_eval": "extern char g_4042ff;\n
\n
int cgc_eval()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
\n
    if (!v4)\n
        return 0;\n
    v10 = v5;\n
    v12 = v4;\n
    if (*(v4) == 1)\n
    {\n
        v11 = 0;\n
        if (v5)\n
        {\n
            v7 = *((v4 + 4));\n
            if (v7)\n
            {\n
                while (true)\n
                {\n
                    v8 = *(v10);\n
                    if (!v8)\n
                    {\n
LABEL_402ce7:\n
                        v11 = 0;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v9 = *(v8);\n
                        if (!v9)\n
                            goto LABEL_402ce7;\n
                        if (!cgc_strcmp(v9, v7))\n
                        {\n
                            v11 = *((*(v10) + 4));\n
                            break;\n
                        }\n
                        v10 = *((v10 + 8));\n
                        if (!v10)\n
                            goto LABEL_402ce7;\n
                    }\n
                }\n
            }\n
        }\n
        if (!v11)\n
            return v12;\n
        v12 = v11;\n
    }\n
    v6 = *((v4 + 12));\n
    if (!v6)\n
        return 0;\n
    if (*(v6) == 1)\n
    {\n
        v0 = *((v6 + 4));\n
        if (!cgc_strncmp(v0, &g_4042ff, cgc_strlen(&g_4042ff)))\n
        {\n
            v14 = *((v4 + 16));\n
            if (!v14)\n
                return 0;\n
            v15 = *((v14 + 16));\n
            if (!v15)\n
            {\n
                return 0;\n
            }\n
            else if (!*((v15 + 12)))\n
            {\n
                return 0;\n
            }\n
            else\n
            {\n
                v18 = cgc_calloc(1, 20);\n
                if (v18)\n
                {\n
                    *(v18) = 4;\n
                    *((v18 + 12)) = *((*((v4 + 16)) + 12));\n
                    *((v18 + 16)) = *((*((*((v4 + 16)) + 16)) + 12));\n
                    return v18;\n
                }\n
            }\n
            cgc__terminate();\n
            return exptup_list_append();\n
        }\n
    }\n
    v13 = cgc_eval();\n
    if (!v13)\n
        return 0;\n
    v17 = cgc_calloc(1, 20);\n
    if (v17)\n
    {\n
        *(v17) = 3;\n
        *((v17 + 12)) = v13;\n
        *((v17 + 16)) = 0;\n
        *((v17 + 4)) = 0;\n
    }\n
    v0 = v17;\n
    v19 = *((v4 + 16));\n
    if (!v19)\n
    {\n
LABEL_402e3b:\n
        v3 = v0;\n
        v24 = *((v3 + 12));\n
        v25 = *(v24);\n
        if (v25 == 2)\n
        {\n
            v26 = *((v24 + 8))(*((v3 + 16)));\n
        }\n
        else\n
        {\n
            if (v25 != 4)\n
                return v0;\n
            v26 = cgc_lambda(v24, *((v3 + 16)));\n
        }\n
        return v26;\n
    }\n
    while (true)\n
    {\n
        if (!(*(v19) == 3))\n
            goto LABEL_402e3b;\n
        v20 = cgc_eval();\n
        v21 = v0;\n
        *(v21) = 3;\n
        while (true)\n
        {\n
            v22 = v21;\n
            if (!v21)\n
                break;\n
            v21 = *((v21 + 16));\n
            if (!v21)\n
                break;\n
        }\n
        if (!*((v21 + 12)))\n
        {\n
            *((v21 + 12)) = v20;\n
            *((v21 + 16)) = 0;\n
            v19 = *((v19 + 16));\n
            goto LABEL_402e3b;\n
        }\n
        v1 = v20;\n
        v23 = cgc_calloc(1, 20);\n
        *((v22 + 16)) = v23;\n
        if (v23)\n
        {\n
            *(v23) = 3;\n
            *((*((v22 + 16)) + 12)) = v1;\n
            *((*((v22 + 16)) + 16)) = 0;\n
            *((*((v22 + 16)) + 4)) = 0;\n
        }\n
        if (!*((v22 + 16)))\n
            break;\n
        v19 = *((v19 + 16));\n
        goto LABEL_402e3b;\n
    }\n
}\n
", "4205956:sub_402d84": null, "4206320:exptup_list_append": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int exptup_list_append(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2[3];  // eax\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v2 = cgc_malloc(12);\n
    if (!v2)\n
    {\n
        cgc__terminate();\n
        return cgc_lambda();\n
    }\n
    do\n
    {\n
        v4 = v1;\n
        v1 = *((v1 + 8));\n
    } while (v1);\n
    v4->field_8 = &v2[0];\n
    v2[2] = 0;\n
    v2[1] = v4;\n
    v2[0] = a0;\n
    return 0;\n
}\n
", "4206432:cgc_lambda": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lambda(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_3;  // tmp #3\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // ebp\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    char v10;  // cl\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // eax\n
\n
    v5 = v4;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (!a0)\n
    {\n
        return 0;\n
    }\n
    else if (!a1)\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v2 = cgc_malloc(12);\n
        if (!v2)\n
        {\n
LABEL_40321a:\n
            cgc__terminate();\n
            return cgc_subst();\n
        }\n
        v9 = 0;\n
        v0 = &_GLOBAL_OFFSET_TABLE_;\n
        do\n
        {\n
            v8 = *((v5 + 12));\n
            v10 = !v8;\n
            v1 = v9;\n
            if (v9 && v8)\n
            {\n
                v9 -= 1;\n
                while (true)\n
                {\n
                    v8 = *((v8 + 16));\n
                    tmp_3 = v9;\n
                    v9 -= 1;\n
                    v10 = !v8;\n
                    if (!v8)\n
                        break;\n
                    if (tmp_3 < 1)\n
                        break;\n
                }\n
            }\n
            v11 = 0;\n
            if (!v10)\n
                v11 = *((v8 + 12));\n
            v12 = 0;\n
            v13 = v1;\n
            if (v13)\n
            {\n
                v14 = v13 - 1;\n
                v15 = a0;\n
                while (true)\n
                {\n
                    v15 = *((v15 + 16));\n
                    tmp_3 = v14;\n
                    v14 -= 1;\n
                    *(&v9) = tmp_3 < 1;\n
                    if (!v15)\n
                        break;\n
                    if (v9)\n
                        break;\n
                }\n
                if (!(!!v15))\n
                    goto LABEL_40304b;\n
            }\n
            else\n
            {\n
                v15 = a0;\n
                if (!(!0))\n
                    goto LABEL_40304b;\n
            }\n
            v12 = *((v15 + 12));\n
LABEL_40304b:\n
            v16 = 2;\n
            if (!v11 && !v12)\n
            {\n
                v9 = v1;\n
            }\n
            else\n
            {\n
                v17 = cgc_malloc(8);\n
                if (!v17)\n
                    goto LABEL_40320a;\n
                *(v17) = v11;\n
                *((v17 + 4)) = v12;\n
                v16 = 1;\n
                v9 = v1;\n
                if (v11 && v12)\n
                {\n
                    v19 = cgc_malloc(12);\n
                    if (!v19)\n
                        goto LABEL_40320a;\n
                    v20 = v2;\n
                    do\n
                    {\n
                        v21 = v20;\n
                        v20 = *((v20 + 8));\n
                    } while (v20);\n
                    *((v21 + 8)) = v19;\n
                    *((v19 + 8)) = 0;\n
                    *((v19 + 4)) = v21;\n
                    *(v19) = v17;\n
                    v9 = v1 + 1;\n
                    v16 = 0;\n
                }\n
            }\n
            v5 = v4;\n
        } while (!v16);\n
        if (v16 != 2)\n
            return 0;\n
        cgc_subst();\n
        v22 = cgc_eval();\n
        if (v22)\n
        {\n
            v23 = 0;\n
            v2 = v0 - 8654;\n
            v3 = v22;\n
            v24 = v22;\n
            do\n
            {\n
                v25 = *((v24 + 12));\n
                if (!v25)\n
                {\n
LABEL_4031a1:\n
                    v26 = v24;\n
                    goto LABEL_4031a3;\n
                }\n
                if (!(*(v25) == 1))\n
                    goto LABEL_4031a1;\n
                v1 = *((v25 + 4));\n
                if (!(!cgc_strncmp(v1, v2, cgc_strlen(v2))))\n
                    goto LABEL_4031a1;\n
                v26 = *((v24 + 16));\n
                if (!*((v24 + 16)))\n
                    goto LABEL_4031a1;\n
                if (!(*(v26) == 3))\n
                    goto LABEL_4031a1;\n
                v23 += 1;\n
                v24 = v26;\n
            } while (v23 != 4);\n
            v23 = 4;\n
LABEL_4031a3:\n
            if (v23 != 4)\n
                return v3;\n
            v27 = cgc_calloc(1, 20);\n
            v28 = cgc_calloc(1, 20);\n
            if (v27 && v28)\n
            {\n
                *(v28) = 1;\n
                *((v28 + 4)) = v0 - 8649;\n
                *(v27) = 3;\n
                *((v27 + 12)) = v28;\n
                *((v27 + 16)) = 0;\n
                *((v26 + 16)) = v27;\n
                return v3;\n
            }\n
LABEL_40320a:\n
            cgc__terminate();\n
            goto LABEL_40321a;\n
        }\n
    }\n
}\n
", "4206521:sub_402fb9": null, "4206806:sub_4030d6": null, "4207152:cgc_subst": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_4[4];\n
    struct struct_4 *field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char *field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_0 *field_4;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_2;\n
\n
int cgc_subst()\n
{\n
    struct_0 *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_4 *v2;  // ecx\n
    struct_1 *v3;  // edx\n
    struct_3 *v4;  // eax\n
    struct_2 *v5;  // eax\n
    char *v6;  // eax\n
    struct_4 *v7;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebp\n
    unsigned int *v10;  // eax\n
    struct_0 *v11;  // esi, Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (!v2)\n
        return v0;\n
    v11 = v3;\n
    if (!v3)\n
        return v0;\n
    v7 = v2;\n
    if (v3->field_0 != 1)\n
    {\n
        v0 = cgc_calloc(1, 20);\n
        if (v0)\n
        {\n
            while (true)\n
            {\n
                if (*(v11) != 3)\n
                    return v0;\n
                v8 = v0;\n
                v8->field_0 = 3;\n
                while (true)\n
                {\n
                    v9 = v8;\n
                    if (!v8)\n
                        break;\n
                    v8 = *((v8 + 16));\n
                    if (!v8)\n
                        break;\n
                }\n
                if (!*((v8 + 12)))\n
                {\n
                    *((v8 + 12)) = cgc_subst();\n
                    *((v8 + 16)) = 0;\n
                }\n
                else\n
                {\n
                    v10 = cgc_calloc(1, 20);\n
                    v9->field_10 = &v10;\n
                    if (v10)\n
                    {\n
                        *(v10) = 3;\n
                        v9->field_10->field_c = cgc_subst();\n
                        v9->field_10->field_10 = 0;\n
                        v9->field_10->field_4 = 0;\n
                    }\n
                    if (!v9->field_10)\n
                        break;\n
                }\n
                v11 = v11->field_10;\n
                if (!v11)\n
                    return v0;\n
            }\n
        }\n
        cgc__terminate();\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v4 = *(v7);\n
            if (v4)\n
            {\n
                v5 = v4->field_0;\n
                if (v5)\n
                {\n
                    v6 = v5->field_4;\n
                    if (v6 && !cgc_strcmp(v3->field_4, v6))\n
                    {\n
                        v0 = *((*(v7) + 4));\n
                        return v0;\n
                    }\n
                }\n
            }\n
            v7 = *((v7 + 8));\n
        } while (v7);\n
    }\n
    v0 = v11;\n
    return v0;\n
}\n
", "4207237:sub_403285": null, "4207311:sub_4032cf": null, "4207482:sub_40337a": null, "4207488:cgc_repl": "int cgc_repl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    unsigned int v5;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ecx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // ecx\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // ecx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // edx\n
    unsigned int v35;  // ecx\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edi\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // edx\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // eax\n
    unsigned int v44;  // edi\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // eax\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // ecx\n
\n
    v3 = cgc_tokenize();\n
    if (!v3)\n
        return -1;\n
    v5 = *(v3);\n
    if (!v5)\n
    {\n
        return -1;\n
    }\n
    else if (cgc_strncmp(v5, \"(\", cgc_strlen(v5)))\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v0 = cgc_malloc(12);\n
        if (!v0)\n
        {\n
LABEL_4037bf:\n
            if (cgc_eval())\n
            {\n
                cgc_eval();\n
                cgc_print();\n
                return 0;\n
            }\n
            return -1;\n
        }\n
        else\n
        {\n
            v8 = cgc_malloc(12);\n
            if (!v8)\n
            {\n
                cgc__terminate();\n
                return cgc_parse();\n
            }\n
            v9 = v0;\n
            v11 = v0;\n
            do\n
            {\n
                v10 = v11;\n
                v11 = *((v11 + 8));\n
            } while (v11);\n
            *((v10 + 8)) = v8;\n
            *((v8 + 8)) = 0;\n
            *((v8 + 4)) = v10;\n
            *(v8) = cgc_make_fp();\n
            v13 = cgc_malloc(12);\n
            if (v13)\n
            {\n
                v14 = v9;\n
                do\n
                {\n
                    v15 = v14;\n
                    v14 = *((v14 + 8));\n
                } while (v14);\n
                *((v15 + 8)) = v13;\n
                *((v13 + 8)) = 0;\n
                *((v13 + 4)) = v15;\n
                *(v13) = cgc_make_fp();\n
                v17 = cgc_malloc(12);\n
                if (v17)\n
                {\n
                    v18 = v9;\n
                    do\n
                    {\n
                        v19 = v18;\n
                        v18 = *((v18 + 8));\n
                    } while (v18);\n
                    *((v19 + 8)) = v17;\n
                    *((v17 + 8)) = 0;\n
                    *((v17 + 4)) = v19;\n
                    *(v17) = cgc_make_fp();\n
                    v21 = cgc_malloc(12);\n
                    if (v21)\n
                    {\n
                        v22 = v9;\n
                        do\n
                        {\n
                            v23 = v22;\n
                            v22 = *((v22 + 8));\n
                        } while (v22);\n
                        *((v23 + 8)) = v21;\n
                        *((v21 + 8)) = 0;\n
                        *((v21 + 4)) = v23;\n
                        *(v21) = cgc_make_fp();\n
                        v25 = cgc_malloc(12);\n
                        if (v25)\n
                        {\n
                            v26 = v9;\n
                            do\n
                            {\n
                                v27 = v26;\n
                                v26 = *((v26 + 8));\n
                            } while (v26);\n
                            *((v27 + 8)) = v25;\n
                            *((v25 + 8)) = 0;\n
                            *((v25 + 4)) = v27;\n
                            *(v25) = cgc_make_fp();\n
                            v29 = cgc_malloc(12);\n
                            if (v29)\n
                            {\n
                                v30 = v9;\n
                                do\n
                                {\n
                                    v31 = v30;\n
                                    v30 = *((v30 + 8));\n
                                } while (v30);\n
                                *((v31 + 8)) = v29;\n
                                *((v29 + 8)) = 0;\n
                                *((v29 + 4)) = v31;\n
                                *(v29) = cgc_make_fp();\n
                                v33 = cgc_malloc(12);\n
                                if (v33)\n
                                {\n
                                    v34 = v9;\n
                                    do\n
                                    {\n
                                        v35 = v34;\n
                                        v34 = *((v34 + 8));\n
                                    } while (v34);\n
                                    v1 = cgc_parse();\n
                                    *((v35 + 8)) = v33;\n
                                    *((v33 + 8)) = 0;\n
                                    *((v33 + 4)) = v35;\n
                                    *(v33) = cgc_make_fp();\n
                                    v36 = cgc_malloc(12);\n
                                    if (v36)\n
                                    {\n
                                        v37 = v36;\n
                                        v38 = cgc_calloc(1, cgc_strlen(\"nil\") + 1);\n
                                        *(v37) = v38;\n
                                        if (v38)\n
                                        {\n
                                            cgc_strncpy(v38, \"nil\", cgc_strlen(\"nil\"));\n
                                            v39 = cgc_calloc(1, 20);\n
                                            *((v37 + 4)) = v39;\n
                                            if (v39)\n
                                            {\n
                                                *(*((v37 + 4))) = 3;\n
                                                v40 = cgc_malloc(12);\n
                                                v41 = v0;\n
                                                if (v40)\n
                                                {\n
                                                    do\n
                                                    {\n
                                                        v42 = v41;\n
                                                        v41 = *((v41 + 8));\n
                                                    } while (v41);\n
                                                    *((v42 + 8)) = v40;\n
                                                    *((v40 + 8)) = 0;\n
                                                    *((v40 + 4)) = v42;\n
                                                    *(v40) = v37;\n
                                                    v43 = cgc_malloc(12);\n
                                                    if (v43)\n
                                                    {\n
                                                        v44 = v43;\n
                                                        v45 = cgc_calloc(1, cgc_strlen(\"t\") + 1);\n
                                                        *(v44) = v45;\n
                                                        if (v45)\n
                                                        {\n
                                                            cgc_strncpy(v45, \"t\", cgc_strlen(\"t\"));\n
                                                            v46 = cgc_malloc(20);\n
                                                            *((v44 + 4)) = v46;\n
                                                            if (v46)\n
                                                            {\n
                                                                v47 = *((v44 + 4));\n
                                                                *(v47) = 1;\n
                                                                *((v47 + 4)) = *(v44);\n
                                                                v48 = cgc_malloc(12);\n
                                                                if (v48)\n
                                                                {\n
                                                                    v49 = v0;\n
                                                                    do\n
                                                                    {\n
                                                                        v50 = v49;\n
                                                                        v49 = *((v49 + 8));\n
                                                                    } while (v49);\n
                                                                    *((v50 + 8)) = v48;\n
                                                                    *((v48 + 8)) = 0;\n
                                                                    *((v48 + 4)) = v50;\n
                                                                    *(v48) = v44;\n
                                                                    goto LABEL_4037bf;\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4208640:cgc_parse": "int cgc_parse()\n
{\n
    char *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    unsigned int v5[3];  // ecx\n
    unsigned int v7[2];  // eax\n
    unsigned int *v8;  // edx\n
    unsigned int v9;  // ebp\n
    unsigned int *v11;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v12;  // eax\n
    unsigned int v13[2];  // esi, Other Possible Types: unsigned int\n
    unsigned int v14[5];  // eax\n
\n
    if (!v5)\n
        return 0;\n
    v0 = v5[0];\n
    if (cgc_strncmp(v0, \"(\", cgc_strlen(\"(\")))\n
    {\n
        v0 = v5[0];\n
        if (!cgc_strncmp(v0, \")\", cgc_strlen(\")\")))\n
        {\n
            if (!v8)\n
                return 0;\n
            *(v8) = v5[2];\n
        }\n
        v2 = 0;\n
        v7 = cgc_calloc(1, 20);\n
        if (!v7)\n
            goto LABEL_403947;\n
        v13 = v7;\n
        v7[0] = 1;\n
        v7[1] = v5[0];\n
        v9 = cgc_parse();\n
        v11 = v8;\n
        if (!v8)\n
            goto LABEL_403901;\n
        v12 = v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        v13 = cgc_parse();\n
        v9 = cgc_parse();\n
        v11 = v8;\n
        if (!v8)\n
            goto LABEL_403901;\n
        v12 = v1;\n
    }\n
    *(v11) = v12;\n
LABEL_403901:\n
    v14 = cgc_calloc(1, 20);\n
    if (!v14)\n
    {\n
LABEL_403947:\n
        cgc__terminate();\n
        return cgc_print();\n
    }\n
    v14[0] = 3;\n
    v14[3] = v13;\n
    v14[4] = v9;\n
    v14[1] = 0;\n
    return v14;\n
}\n
", "4208992:cgc_print": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_0;\n
\n
int cgc_print()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_1 *v2;  // ecx\n
    void* **v3;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    if (!v2)\n
        return v5;\n
    if (v2->field_0 == 1)\n
    {\n
        v3 = \"%s\";\n
        v0 = v2->field_4;\n
    }\n
    else\n
    {\n
        cgc_fdprintf(1, \"(\");\n
        cgc_print();\n
        v4 = v2->field_10;\n
        if (v4)\n
        {\n
            while (*(v4) == 3)\n
            {\n
                cgc_fdprintf(1, \" \");\n
                cgc_print();\n
                v4 = *((v4 + 16));\n
                if (!v4)\n
                    break;\n
            }\n
        }\n
        v3 = \")\";\n
    }\n
    v5 = cgc_fdprintf(1, v3);\n
    return v5;\n
}\n
", "4209146:sub_4039fa": null, "4209152:cgc_make_fp": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_1;\n
\n
int cgc_make_fp()\n
{\n
    struct_0 *v1;  // eax\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // ecx\n
    char *v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7[3];  // eax\n
    unsigned int v8;  // edx\n
\n
    v1 = cgc_malloc(12);\n
    if (!v1)\n
    {\n
        cgc__terminate();\n
        return main();\n
    }\n
    v2 = v1;\n
    v5 = cgc_calloc(1, cgc_strlen(v3) + 1);\n
    v2->field_0 = v5;\n
    cgc_strncpy(v5, v3, cgc_strlen(v3));\n
    v6 = cgc_calloc(1, 20);\n
    v2->field_4 = v6;\n
    if (v6)\n
    {\n
        v7 = v2->field_4;\n
        v7[0] = 2;\n
        v7[2] = v8;\n
        if (v2->field_0 && v7)\n
            return v2;\n
    }\n
}\n
", "4209328:main": "int main()\n
{\n
    char *v1;  // eax\n
\n
    cgc_fdprintf(1, \"Welcome to the SLUR REPL. Type an expression to evaluate it.\\n
\");\n
    v1 = cgc_malloc(32769);\n
    if (!v1)\n
    {\n
        cgc__terminate();\n
        return cgc_read_balanced_expression();\n
    }\n
    cgc_memset(v1, 0, 32769);\n
    cgc_fdprintf(1, \"> \");\n
    if (cgc_read_balanced_expression(0, v1))\n
    {\n
        do\n
        {\n
            cgc_fdprintf(1, \"Expression too long or unbalanced, try again.\\n
\");\n
            cgc_memset(v1, 0, 32769);\n
            cgc_fdprintf(1, \"> \");\n
        } while (cgc_read_balanced_expression(0, v1));\n
    }\n
    if (cgc_repl(v1))\n
    {\n
        cgc_fdprintf(1, \"Error evaluating expression.\\n
\");\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4209584:cgc_read_balanced_expression": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_balanced_expression(unsigned int v3, char *a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    char v1;  // [bp-0x15]\n
    void* v2;  // [bp-0x14]\n
    unsigned int v4;  // ebp\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    char v7;  // cl\n
    void* v8;  // esi, Other Possible Types: unsigned int\n
    unsigned int v9;  // eax\n
\n
    v4 = a1;\n
    v5 = a0;\n
    v2 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v3, v5, 1))\n
        {\n
LABEL_403c43:\n
            do\n
            {\n
                v0 = &v2;\n
                if (cgc_receive(v3, &v1, 1))\n
                {\n
LABEL_403c92:\n
                    *(v5) = 0;\n
                    return v8;\n
                }\n
                if (!v2)\n
                    goto LABEL_403c92;\n
                v9 = v1;\n
                if (v9 == 10)\n
                    goto LABEL_403c92;\n
            } while (cgc_isspace(v9));\n
        }\n
        v6 = v2;\n
        if (!v6)\n
            goto LABEL_403c43;\n
        if (!v8 && *(v5) != 40)\n
            goto LABEL_403c8b;\n
        v7 = *(v5);\n
        if (v7 != 41)\n
        {\n
            if (v7 == 40)\n
            {\n
                if (v8 == -1)\n
                    goto LABEL_403c8b;\n
                v8 += 1;\n
            }\n
            tmp_2 = v4;\n
            v4 -= v6;\n
            if (tmp_2 == v6)\n
                goto LABEL_403c43;\n
        }\n
        else\n
        {\n
            if (!v8)\n
                goto LABEL_403c8b;\n
            v8 -= 1;\n
            tmp_5 = v4;\n
            v4 -= v6;\n
            if (tmp_5 == v6)\n
                goto LABEL_403c43;\n
        }\n
        v5 += v6;\n
    } while (v8);\n
    v8 = 0;\n
LABEL_403c8b:\n
    return -1;\n
}\n
", "4209704:sub_403c28": null, "4209823:sub_403c9f": null, "4209824:tok_list_append": "typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int tok_list_append(struct_0 *v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2[3];  // eax\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v2 = cgc_malloc(12);\n
    if (!v2)\n
    {\n
        cgc__terminate();\n
        return cgc_tokenize();\n
    }\n
    do\n
    {\n
        v4 = v1;\n
        v1 = *((v1 + 8));\n
    } while (v1);\n
    v4->field_8 = &v2[0];\n
    v2[2] = 0;\n
    v2[1] = v4;\n
    v2[0] = a0;\n
    return 0;\n
}\n
", "4209936:cgc_tokenize": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int cgc_tokenize(char *v6)\n
{\n
    struct_0 *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    struct_0 *v10;  // eax\n
    unsigned int v11;  // eax\n
    char *v12;  // ebp\n
    unsigned int v13;  // eax\n
    char v14[2];  // eax\n
    char v15[2];  // ecx, Other Possible Types: unsigned int\n
    char v16[2];  // ebp\n
    unsigned int v17[3];  // eax\n
    unsigned int v18;  // esi\n
    char *v19;  // ebp\n
    unsigned int v20;  // edi\n
    struct_0 *v21;  // edx, Other Possible Types: unsigned int\n
    unsigned int v22;  // ebp\n
    struct_0 *v23;  // ecx\n
    char *v24;  // eax\n
    unsigned int v26[3];  // eax\n
    struct_0 *v27;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v28;  // ecx\n
\n
    v5 = v7;\n
    v8 = v6;\n
    v9 = cgc_strlen(v8);\n
    v10 = cgc_malloc(12);\n
    if (v10)\n
    {\n
        v1 = v10;\n
        v10->field_0 = \"START\";\n
        v2 = v9;\n
        if (!v9)\n
        {\n
LABEL_403ec4:\n
            v0 = v1->field_8;\n
            return v0;\n
        }\n
        v22 = 0;\n
        while (true)\n
        {\n
            do\n
            {\n
                v20 = v22;\n
                v11 = cgc_isspace(*((v8 + v22)));\n
                v22 += 1;\n
            } while (v11);\n
            v12 = v8 + v20;\n
            v13 = *((v8 + v20));\n
            if ((v13 & 254) != 40)\n
            {\n
                v0 = 0;\n
                if (!cgc_isalnum(v13))\n
                    return v0;\n
                v3 = v12;\n
                v18 = -1;\n
                v4 = v20;\n
                while (true)\n
                {\n
                    v19 = v20 + 1;\n
                    v18 += 1;\n
                    if (!cgc_isalnum(v6[v20]))\n
                        break;\n
                    v20 = v19;\n
                    if (0 >= v2)\n
                        break;\n
                }\n
                v22 = v19 + 1;\n
                if (v22 < v4)\n
                    return v0;\n
                v24 = cgc_malloc(v18 + 1);\n
                if (!v24)\n
                    return v0;\n
                cgc_strncpy(v24, v3, v18);\n
                v26 = cgc_malloc(12);\n
                if (!v26)\n
                    cgc__terminate();\n
                v27 = v1;\n
                v8 = v6;\n
                do\n
                {\n
                    v28 = v27;\n
                    v27 = *((v27 + 8));\n
                } while (v27);\n
                v28->field_8 = &v26[0];\n
                v26[2] = 0;\n
                v26[1] = v28;\n
                v26[0] = v24;\n
                if (v22 < v2)\n
                    continue;\n
                goto LABEL_403ec4;\n
            }\n
            v14 = cgc_malloc(2);\n
            v15 = v14;\n
            if (v14)\n
            {\n
                v14[0] = *(v12);\n
                v16 = v14;\n
                v14[1] = 0;\n
                v17 = cgc_malloc(12);\n
                if (v17)\n
                {\n
                    v21 = v1;\n
                    do\n
                    {\n
                        v23 = v21;\n
                        v21 = *((v21 + 8));\n
                    } while (v21);\n
                    v23->field_8 = &v17[0];\n
                    v17[2] = 0;\n
                    v17[1] = v23;\n
                    v15 = v16;\n
                    v17[0] = v16;\n
                    v20 += 1;\n
                }\n
            }\n
            v22 = v20;\n
            if (!v15)\n
                break;\n
            if (!(v20 < v2))\n
                goto LABEL_403ec4;\n
        }\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210420:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}