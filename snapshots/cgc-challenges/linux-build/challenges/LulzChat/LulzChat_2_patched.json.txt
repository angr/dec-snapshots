{"4202496:_init": "extern struct_0 *g_40a6d8;\n
\n
int _init()\n
{\n
    if (g_40a6d8)\n
    {\n
        g_40a6d8();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:sub_4020b0": "int sub_4020b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202678:sub_4020b6": null, "4202688:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202731:sub_4020eb": null, "4202732:sub_4020ec": "int sub_4020ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202736:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202740:sub_4020f4": null, "4202752:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 34271;\n
    v6 = v5 + 44;\n
    v7 = v5 + 44;\n
    if (v7 == v6)\n
        return v5 + 44;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202803:sub_402133": "int sub_402133()\n
{\n
}\n
", "4202809:sub_402139": "int sub_402139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202816:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 34207;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 44;\n
    v9 = (v6 + 44 - (v6 + 44) >> 31) + (44 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202887:sub_402187": "int sub_402187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202896:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a6d4;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a6d4)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202971:sub_4021db": "int sub_4021db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202976:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202985:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4203173:sub_4022a5": null, "4203184:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203273:sub_402309": null, "4203280:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203369:sub_402369": null, "4203376:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203401:sub_402389": null, "4203408:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203433:sub_4023a9": null, "4203440:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203465:sub_4023c9": null, "4203472:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4203499:sub_4023eb": null, "4203504:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4203549:sub_40241d": null, "4203552:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4203597:sub_40244d": null, "4203600:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203677:sub_40249d": null, "4203680:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4203725:sub_4024cd": null, "4203728:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9948 + v0];\n
}\n
", "4203759:sub_4024ef": null, "4203760:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4203815:sub_402527": null, "4203824:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[9820 + v0];\n
}\n
", "4203855:sub_40254f": null, "4203856:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203870:sub_40255e": null, "4203872:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4203943:sub_4025a7": null, "4203952:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4204023:sub_4025f7": null, "4204032:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4204167:sub_402687": null, "4204176:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4204224:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 180 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4204632:sub_402858": null, "4204640:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4204802:sub_402902": null, "4204816:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 180 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4204994:sub_4029c2": null, "4205008:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4205202:sub_402a92": null, "4205216:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 48)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4205327:sub_402b0f": null, "4205328:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[11 + 1 + v1])\n
    {\n
        v5 = v0;\n
        v5[11 + 1 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[11 + 1 + v1];\n
    *((v6[11 + 1 + v1] + 12)) = v3;\n
    v6[11 + 1 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4205486:sub_402bae": null, "4205488:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 180)) == v3)\n
        *((v0 + v1 * 4 + 180)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4205662:sub_402c5e": null, "4205664:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_402e4c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_402e4c:\n
    return v6;\n
}\n
", "4206172:sub_402e5c": null, "4206176:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_remove_from_blist(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
\n
    if (v0->field_14)\n
        v0->field_14->field_10 = v0->field_10;\n
    v1 = v0;\n
    if (v1->field_10)\n
    {\n
        v1 = v0->field_10;\n
        *((v1 + 20)) = v0->field_14;\n
    }\n
    return v1;\n
}\n
", "4206240:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v0[v2] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4206341:sub_402f05": null, "4206352:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (*(v2) != *(v1))\n
        {\n
            v3 = *(v2) - *(v1);\n
            return v3;\n
        }\n
        v2 += 1;\n
        v1 += 1;\n
        v0 += 1;\n
    }\n
}\n
", "4206492:sub_402f9c": null, "4206496:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4206582:sub_402ff6": null, "4206592:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4206721:sub_403081": null, "4206736:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a0 >= a1)\n
    {\n
        v7 = cgc_output_number_printf(v8, (0 CONCAT a0) /m a1, a1, a2 - 1, a3);\n
        a0 = (0 CONCAT a0) /m a1 >> 32;\n
    }\n
    if (!v7 && a2 > 0)\n
    {\n
        while (true)\n
        {\n
            a2 -= 1;\n
            if (!a2)\n
                break;\n
            if (!(a3 & 1))\n
            {\n
                v5 = 32;\n
                cgc_transmit(v8, &v5, 1);\n
            }\n
            else\n
            {\n
                v6 = 48;\n
                cgc_transmit(v8, &v6, 1);\n
            }\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (a0 < 10)\n
            v1 = a0 + 48;\n
        else\n
            v1 = a0 + 55;\n
        v4 = v1;\n
        cgc_transmit(v8, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (a0 < 10)\n
            v0 = a0 + 48;\n
        else\n
            v0 = a0 + 87;\n
        v3 = v0;\n
        cgc_transmit(v8, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4207235:sub_403283": null, "4207248:cgc_fdprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fdprintf(unsigned int v18, char *a0)\n
{\n
    char *v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned int v2;  // [bp-0x60]\n
    unsigned int v3;  // [bp-0x5c]\n
    char v4;  // [bp-0x55]\n
    char v5;  // [bp-0x4d]\n
    char v6;  // [bp-0x45]\n
    char v7;  // [bp-0x3d]\n
    char v8;  // [bp-0x35]\n
    char v9;  // [bp-0x2d]\n
    struct struct_0 **v10;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x28]\n
    void* v12;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x1c]\n
    unsigned int v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x14]\n
    char *v17;  // [bp-0x10]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            cgc_transmit(v18, &v4, 1);\n
LABEL_4035c2:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                cgc_transmit(v18, &v8, 1);\n
                goto LABEL_40357b;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = *(v22);\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        cgc_transmit(v18, &v6, 1);\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_printf(v18, v16, 10, v12, v13);\n
                    goto LABEL_40357b;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        cgc_transmit(v18, &v7, 1);\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_40357b;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    cgc_transmit(v18, &v5, 1);\n
LABEL_40357b:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_4035c2;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = *(v24);\n
            cgc_output_number_printf(v18, v11, 16, v12, v13);\n
            goto LABEL_40357b;\n
        }\n
    }\n
    return v14;\n
}\n
", "4208081:sub_4035d1": null, "4208096:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char v3;  // [bp-0x2d]\n
    char v4;  // [bp-0x25]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x15]\n
    struct struct_0 **v8;  // eax\n
    unsigned int *v9;  // eax\n
    struct struct_0 **v10;  // eax\n
    unsigned int *v11;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 >= a2)\n
    {\n
        cgc_output_number_sprintf(v7, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (a1 < a2 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v8 = a0;\n
            *(v8) = *(v8) + 1;\n
            v9 = v7;\n
            *(v9) = *(v9) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v10 = a0;\n
    *(v10) = *(v10) + 1;\n
    v11 = v7;\n
    *(v11) = *(v11) + 1;\n
    return v11;\n
}\n
", "4208567:sub_4037b7": null, "4208576:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_403acf:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_403a92;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = *(v22);\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_403a92;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_403a92;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_403a92:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_403acf;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_403a92;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4209389:sub_403aed": null, "4209392:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(char *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[24];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4209650:sub_403bf2": null, "4209664:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (!*(v0))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        v3 = v0;\n
        v0 = v3 + 1;\n
        if (*(v3) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4209748:sub_403c54": null, "4209760:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(a0) - *(v2);\n
}\n
", "4209888:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4209972:sub_403d34": null, "4209984:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4210036:sub_403d74": null, "4210048:cgc_strncpy": "int cgc_strncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
\n
    v1 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *(v2) = *(a0);\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    v1[v0] = 0;\n
    return v1;\n
}\n
", "4210148:sub_403de4": null, "4210160:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4210376:sub_403ec8": null, "4210384:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_403f18:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_403f18;\n
        if (a1 < 0)\n
            goto LABEL_403f18;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 = &v6[1];\n
        }\n
        if (*(v6) == 43)\n
            v6 = &v6[1];\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_40400f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_40400f;\n
                v6 = &v6[1];\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_404084;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_404084:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_4041e2;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4041a2;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4041a2:\n
                if (v8 >= a1)\n
                    goto LABEL_4041e2;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                v6 = &v6[1];\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_404199;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_404199:\n
                v8 += 10;\n
                goto LABEL_4041a2;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_404118;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_404118:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_4041e2:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4211246:sub_40422e": null, "4211248:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4211307:sub_40426b": null, "4211312:cgc_protect": "int cgc_protect(unsigned int v9[4], unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    void* v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v7 = 0;\n
    v6 = a0[0];\n
    v5 = a0[1];\n
    v4 = v9[0];\n
    v3 = v9[1];\n
    v2 = v9[2];\n
    v1 = v9[3];\n
    v0 = 3111729054;\n
    for (v8 = 0; v8 < 32; v8 += 1)\n
    {\n
        v7 = v0 + v7;\n
        v6 = (v5 * 16 + v4 ^ v5 + v7 ^ (v5 >> 5) + v3) + v6;\n
        v5 = (v6 * 16 + v2 ^ v6 + v7 ^ (v6 >> 5) + v1) + v5;\n
    }\n
    a0[0] = v6;\n
    a0[1] = v5;\n
    return a0;\n
}\n
", "4211520:cgc_protect_msg": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_protect_msg(unsigned int v2[4], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v1 = 0; v1 < a1 >> 3; v1 += 1)\n
    {\n
        cgc_protect(v2, a0 + v1 * 8);\n
    }\n
    return v1;\n
}\n
", "4211624:sub_4043a8": null, "4211632:cgc_unprotect": "int cgc_unprotect(unsigned int v9[4], unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    void* v8;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v7 = 791081920;\n
    v6 = a0[0];\n
    v5 = a0[1];\n
    v4 = v9[0];\n
    v3 = v9[1];\n
    v2 = v9[2];\n
    v1 = v9[3];\n
    v0 = 3111729054;\n
    for (v8 = 0; v8 < 32; v8 += 1)\n
    {\n
        v5 -= v6 * 16 + v2 ^ v6 + v7 ^ (v6 >> 5) + v1;\n
        v6 -= v5 * 16 + v4 ^ v5 + v7 ^ (v5 >> 5) + v3;\n
        v7 -= v0;\n
    }\n
    a0[0] = v6;\n
    a0[1] = v5;\n
    return a0;\n
}\n
", "4211846:sub_404486": null, "4211856:cgc_unprotect_msg": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_unprotect_msg(unsigned int v2[4], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v1 = 0; v1 < a1 >> 3; v1 += 1)\n
    {\n
        cgc_unprotect(v2, a0 + v1 * 8);\n
    }\n
    return v1;\n
}\n
", "4211960:sub_4044f8": null, "4211968:cgc_is_alnum_str": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_alnum_str(unsigned int v4)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = v3;\n
        if (v0 >= cgc_strlen(v4))\n
            break;\n
        v2 = (cgc_isalnum(*((v4 + v3))) ^ 255) & 1 | v2;\n
        v3 += 1;\n
    }\n
    return (v2 ^ 255) & 1;\n
}\n
", "4212119:sub_404597": null, "4212128:cgc_quit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_quit()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_fdprintf(1, \"[INFO] Bye!\\n
\");\n
    v1 = 0;\n
    cgc_send_request(&v1);\n
    v5 = v2;\n
    return cgc_exit(0);\n
}\n
", "4212224:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_help(v2, v3);\n
    return;\n
}\n
", "4212256:cgc_help": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_help()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_fdprintf(1, \"---- Commands --------------------\\n
\");\n
    cgc_fdprintf(1, v0 - 9439);\n
    cgc_fdprintf(1, v0 - 9405);\n
    cgc_fdprintf(1, v0 - 9374);\n
    cgc_fdprintf(1, v0 - 9356);\n
    cgc_fdprintf(1, v0 - 9339);\n
    cgc_fdprintf(1, v0 - 9309);\n
    cgc_fdprintf(1, v0 - 9283);\n
    cgc_fdprintf(1, v0 - 9257);\n
    cgc_fdprintf(1, v0 - 9227);\n
    v4 = v1;\n
    return cgc_fdprintf(1, v0 - 9211);\n
}\n
", "4212556:sub_40474c": null, "4212560:cgc_register_user": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_register_user()\n
{\n
    unsigned int v0;  // [bp-0xf0]\n
    unsigned int v1;  // [bp-0xe0]\n
    char v2;  // [bp-0xdc]\n
    char v3;  // [bp-0x9c]\n
    char v4;  // [bp-0x5c]\n
    char v5;  // [bp-0x1c]\n
    char v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    struct_0 *v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    struct_1 *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned int v13;  // ebx\n
\n
    v9 = v11;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = 0;\n
    cgc_fdprintf(1, \"\\n
[[[ REGISTER ]]]\\n
\");\n
    cgc_fdprintf(1, v1 - 9156);\n
    v0 = 10;\n
    v12 = cgc_read_until(0, &v2, 64);\n
    if (v12 >= 0)\n
    {\n
        cgc_fdprintf(1, v1 - 9143);\n
        v0 = 10;\n
        v12 = cgc_read_until(0, &v3, 64);\n
        if (v12 >= 0)\n
        {\n
            cgc_fdprintf(1, v1 - 9130);\n
            v0 = 10;\n
            v12 = cgc_read_until(0, &v4, 64);\n
            if (v12 >= 0)\n
            {\n
                cgc_send_request(&v2);\n
                cgc_fdprintf(1, v1 - 8882);\n
                v12 = cgc_parse_packet(4);\n
                v8 = v12;\n
                if (v8)\n
                {\n
                    v12 = v8;\n
                    if (v12->field_4 >= 8)\n
                    {\n
                        cgc_memcpy(&v5, *((v8 + 8)), 8);\n
                        if (*(&v6) > 0)\n
                            v7 = *((v8 + 8)) + 8;\n
                        v12 = cgc_handle_response(*((v8 + 1)));\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v8)\n
        v12 = cgc_free(v8);\n
    v13 = v9;\n
    return v12;\n
}\n
", "4213122:sub_404982": null, "4213136:cgc_logout_user": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int cgc_logout_user()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!cur_user)\n
    {\n
        v2 = cgc_fdprintf(1, &v0[28].padding_0[261]);\n
        return v2;\n
    }\n
    cgc_memset(v0 + 1, 0, 64);\n
    cgc_memset(&v0[1].padding_0[64], 0, 64);\n
    v3 = v0;\n
    v3->field_134 = 0;\n
    v3->field_138 = 0;\n
    v2 = cgc_fdprintf(1, &v3[28].padding_0[237]);\n
    return v2;\n
}\n
", "4213330:sub_404a52": null, "4213344:cgc_login_user": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned short field_0;\n
    unsigned int field_2;\n
} struct_3;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_login_user()\n
{\n
    unsigned int v0;  // [bp-0xb0]\n
    struct_0 *v1;  // [bp-0xa0]\n
    char v2;  // [bp-0x9c]\n
    char v3;  // [bp-0x5c]\n
    char v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x18]\n
    struct_3 *v6;  // [bp-0x14]\n
    struct_2 *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    struct_1 *v11;  // eax, Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v12;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = 0;\n
    cgc_fdprintf(1, \"\\n
[[[ LOGIN ]]]\\n
\");\n
    cgc_fdprintf(1, &v1[28].field_134);\n
    v0 = 10;\n
    v11 = cgc_read_until(0, &v2, 64);\n
    if (v11 >= 0)\n
    {\n
        cgc_fdprintf(1, &v1[28].padding_0[295]);\n
        v0 = 10;\n
        v11 = cgc_read_until(0, &v3, 64);\n
        if (v11 >= 0)\n
        {\n
            cgc_send_request(&v2);\n
            v11 = cgc_parse_packet(4);\n
            v7 = v11;\n
            if (v7)\n
            {\n
                v11 = v7;\n
                if (v11->field_4 >= 8)\n
                {\n
                    cgc_memcpy(&v4, *((v7 + 8)), 8);\n
                    if (*(&v5) > 0)\n
                        v6 = *((v7 + 8)) + 8;\n
                    v11 = cgc_handle_response(*((v7 + 1)));\n
                    if (!v11)\n
                    {\n
                        v11 = *((v7 + 4)) - 8;\n
                        if (v11 >= *(&v5) && *(&v5) >= 6)\n
                        {\n
                            if (v1->field_134)\n
                                cgc_logout_user();\n
                            cgc_strcpy(v1 + 1, &v2);\n
                            cgc_strcpy(&v1[1].padding_0[64], &v3);\n
                            v11 = v1;\n
                            v11->field_134 = v6->field_0;\n
                            v11->field_138 = *(&(&v6->field_0)[1]);\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v7)\n
        v11 = cgc_free(v7);\n
    v12 = v8;\n
    return v11;\n
}\n
", "4213963:sub_404ccb": null, "4213968:cgc_list_messages": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int cgc_list_messages()\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    struct_0 *v2;  // [bp-0x40]\n
    unsigned short v3;  // [bp-0x3a]\n
    unsigned short v4;  // [bp-0x38]\n
    unsigned short v5;  // [bp-0x36]\n
    unsigned short *v6;  // [bp-0x34]\n
    void* v7;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned short v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    char v10;  // [bp-0x24]\n
    char v11;  // [bp-0x20]\n
    unsigned short *v12;  // [bp-0x1c]\n
    struct_1 *v13;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned short v14;  // [bp-0x10]\n
    unsigned short v15;  // [bp-0xe]\n
    struct_0 *v17;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v15 = 0;\n
    v13 = 0;\n
    if (!cur_user)\n
    {\n
        cgc_fdprintf(1, &v2[28].padding_0[188]);\n
    }\n
    else\n
    {\n
        v17 = v2;\n
        v8 = v17->field_134;\n
        v9 = v17->field_138;\n
        cgc_send_request(&v8);\n
        v13 = cgc_parse_packet(4);\n
        if (v13 && *((v13 + 4)) >= 8)\n
        {\n
            cgc_memcpy(&v10, *((v13 + 8)), 8);\n
            if (*(&v11) > 0)\n
                v12 = *((v13 + 8)) + 8;\n
            if (!cgc_handle_response(*((v13 + 1))) && *((v13 + 4)) - 8 >= *(&v11) && *(&v11) >= 2)\n
            {\n
                v15 = *(v12);\n
                if (*(&v11) - 2 < v15 << 3)\n
                    goto LABEL_404f74;\n
                v7 = 0;\n
                v6 = v12 + 1;\n
                cgc_fdprintf(1, &v2[28].padding_0[158]);\n
                cgc_fdprintf(1, &v2[28].padding_0[139]);\n
                cgc_fdprintf(1, &v2[29].padding_0[41]);\n
                v14 = 0;\n
                for (v7 = 0; v7 < v15; v7 += 1)\n
                {\n
                    v5 = *((v6 + v14));\n
                    v4 = *((4 + v6 + v14));\n
                    v3 = *((6 + v6 + v14));\n
                    if (v5 != 1)\n
                    {\n
                        v0 = v4;\n
                        v1 = v3 - 1;\n
                        cgc_fdprintf(1, &v2[28].padding_0[83]);\n
                    }\n
                    else\n
                    {\n
                        v0 = v4;\n
                        cgc_fdprintf(1, &v2[28].padding_0[109]);\n
                    }\n
                    v14 += 8;\n
                }\n
                cgc_fdprintf(1, &v2[28].padding_0[55]);\n
            }\n
        }\n
    }\n
LABEL_404f74:\n
    if (v13)\n
        cgc_free(v13);\n
    return v15;\n
}\n
", "4214679:sub_404f97": null, "4214688:cgc_display_message": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    char padding_2[6];\n
    char *field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_display_message(char a0, unsigned short a0)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    struct_1 *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    unsigned int v3[4];  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    char *v8;  // [bp-0x10], Other Possible Types: unsigned int, void*\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v10;  // [bp+0x4]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
    struct_0 *v14;  // ebx\n
\n
    v9 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = &a0;\n
    v8 = 0;\n
    v12 = \"Normal\";\n
    if (v10 == 1)\n
        v12 = \"Protected\";\n
    v7 = v12;\n
    cgc_fdprintf(1, \"From: USER_%d\\n
\");\n
    cgc_fdprintf(1, v0 + 28);\n
    if (v1->field_0 != 1)\n
    {\n
        v8 = v1->field_8;\n
    }\n
    else\n
    {\n
        v2 = cgc_malloc(513);\n
        if (!v2)\n
        {\n
            v13 = cgc_fdprintf(1, &v0[27].padding_0[306]);\n
            return v13;\n
        }\n
        cgc_memset(v2, 0, 513);\n
        cgc_strncpy(v2, v1->field_8, 0x200);\n
        v14 = v0;\n
        *(v3) = v14->field_138;\n
        v4 = v14->field_138 ^ v14->field_134;\n
        v5 = v14->field_138 ^ v14->field_134;\n
        v6 = v14->field_138;\n
        cgc_unprotect_msg(v3, v2, 0x200);\n
        v8 = v2;\n
        cgc_free(v2);\n
    }\n
    if (!v8)\n
    {\n
        cgc_fdprintf(1, &v0[27].padding_0[242]);\n
        v13 = cgc_fdprintf(1, &v0[27].padding_0[306]);\n
        return v13;\n
    }\n
    cgc_strlen(v8);\n
    cgc_fdprintf(1, &v0[27].padding_0[275]);\n
    v13 = cgc_fdprintf(1, &v0[27].padding_0[255]);\n
    return v13;\n
}\n
", "4215211:sub_4051ab": null, "4215216:cgc_view_message": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int cgc_view_message()\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    struct_0 *v1;  // [bp-0x68]\n
    char v2;  // [bp-0x64]\n
    char v3;  // [bp-0x60]\n
    unsigned int v4;  // [bp-0x5c]\n
    unsigned int v5;  // [bp-0x58]\n
    unsigned short v6;  // [bp-0x54]\n
    unsigned int v7;  // [bp-0x50]\n
    unsigned int v8;  // [bp-0x4c]\n
    unsigned int v9;  // [bp-0x44]\n
    char v10[2];  // [bp-0x40]\n
    unsigned int v11;  // [bp-0x20]\n
    char v12;  // [bp-0x1c]\n
    char v13;  // [bp-0x18]\n
    char *v14;  // [bp-0x14]\n
    struct_1 *v15;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_2 *v17;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    struct_0 *v18;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v15 = 0;\n
    v9 = -1;\n
    if (!cur_user)\n
    {\n
        v17 = cgc_fdprintf(1, &v1[28].padding_0[188]);\n
        return v17;\n
    }\n
    v5 = cgc_list_messages();\n
    if (!v5)\n
    {\n
        v17 = cgc_fdprintf(1, &v1[27].padding_0[229]);\n
    }\n
    else\n
    {\n
        cgc_fdprintf(1, &v1[27].padding_0[200]);\n
        v0 = 10;\n
        v17 = cgc_read_until(0, v10, 32);\n
        if (v17 >= 0)\n
        {\n
            v9 = cgc_strtol(v10, &v11, 10);\n
            v17 = v10;\n
            if (v10 != v11)\n
            {\n
                if (v9 < 1)\n
                {\n
LABEL_4052cb:\n
                    v17 = cgc_fdprintf(1, &v1[27].padding_0[186]);\n
                }\n
                else\n
                {\n
                    if (!(v9 <= v5))\n
                        goto LABEL_4052cb;\n
                    v18 = v1;\n
                    v6 = v18->field_134;\n
                    v7 = v18->field_138;\n
                    v8 = v9;\n
                    cgc_send_request(&v6);\n
                    cgc_fdprintf(1, &v1[28].padding_0[34]);\n
                    v17 = cgc_parse_packet(4);\n
                    v15 = v17;\n
                    if (v15)\n
                    {\n
                        v17 = v15;\n
                        if (v17->field_4 >= 8)\n
                        {\n
                            cgc_memcpy(&v12, *((v15 + 8)), 8);\n
                            if (*(&v13) > 0)\n
                                v14 = *((v15 + 8)) + 8;\n
                            v17 = cgc_handle_response(*((v15 + 1)));\n
                            if (!v17)\n
                            {\n
                                v17 = *((v15 + 4)) - 8;\n
                                if (v17 >= *(&v13) && *(&v13) >= 8)\n
                                {\n
                                    cgc_memcpy(&v2, v14, 8);\n
                                    v4 = v14 + 8;\n
                                    v17 = cgc_display_message(*(&v2), *(&v3));\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v15)\n
        return v17;\n
    v17 = cgc_free(v15);\n
}\n
", "4215880:sub_405448": null, "4215888:cgc_send_message": "typedef struct struct_1 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int cgc_send_message()\n
{\n
    unsigned int v0;  // [bp-0x2a0]\n
    struct_1 *v1;  // [bp-0x298]\n
    unsigned int v2[4];  // [bp-0x294]\n
    unsigned int v3;  // [bp-0x290]\n
    unsigned int v4;  // [bp-0x28c]\n
    unsigned int v5;  // [bp-0x288]\n
    unsigned short v6;  // [bp-0x284]\n
    unsigned int v7;  // [bp-0x280]\n
    char v8;  // [bp-0x27c]\n
    struct_0 *v9;  // [bp-0x23c]\n
    unsigned short v10;  // [bp-0x234]\n
    unsigned short v11;  // [bp-0x232]\n
    unsigned short v12;  // [bp-0x230]\n
    unsigned short v13;  // [bp-0x22e]\n
    struct_0 *v14;  // [bp-0x22c]\n
    char v15;  // [bp-0x228]\n
    unsigned int v16;  // [bp-0x28]\n
    void* v17;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x20], Other Possible Types: unsigned int\n
    char v19;  // [bp-0x1c]\n
    char v20;  // [bp-0x18]\n
    unsigned int v21;  // [bp-0x14]\n
    struct_3 *v22;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_2 *v24;  // eax, Other Possible Types: unsigned int, struct_0 *\n
    struct_1 *v26;  // ebx\n
    struct_1 *v27;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v22 = 0;\n
    v18 = 0;\n
    v17 = 0;\n
    if (!cur_user)\n
    {\n
        v24 = cgc_fdprintf(1, &v1[28].padding_0[188]);\n
        return v24;\n
    }\n
    cgc_fdprintf(1, &v1[27].padding_0[164]);\n
    cgc_fdprintf(1, &v1[27].padding_0[149]);\n
    v0 = 10;\n
    v24 = cgc_read_until(0, &v8, 64);\n
    if (v24 >= 0)\n
    {\n
        cgc_fdprintf(1, &v1[27].padding_0[141]);\n
        v0 = 10;\n
        v24 = cgc_read_until(0, &v15, 0x200);\n
        if (v24 >= 0)\n
        {\n
            v18 = cgc_strtol(&v15, &v16, 10);\n
            v24 = &v15;\n
            if (&v15 != v16)\n
            {\n
                cgc_memset(&v15, 0, 0x200);\n
                cgc_fdprintf(1, &v1[27].padding_0[105]);\n
                v0 = 10;\n
                v24 = cgc_read_until(0, &v15, 0x200);\n
                v17 = v24;\n
                if (v24 >= 0)\n
                {\n
                    cgc_fdprintf(1, &v1[28].padding_0[34]);\n
                    *(&v10) = (v18 == 1 ? 0 : 1);\n
                    v11 = 65535;\n
                    v12 = v1->field_134;\n
                    v13 = v17;\n
                    if (v10 == 1)\n
                    {\n
                        v26 = v1;\n
                        *(v2) = v26->field_138;\n
                        v3 = v26->field_138 ^ v26->field_134;\n
                        v4 = v26->field_138 ^ v26->field_134;\n
                        v5 = v26->field_138;\n
                        cgc_protect_msg(v2, &v15, 0x200);\n
                        v13 = 0x200;\n
                    }\n
                    v27 = v1;\n
                    v14 = &v15;\n
                    v6 = v27->field_134;\n
                    v7 = v27->field_138;\n
                    v9 = &v10;\n
                    cgc_send_request(&v6);\n
                    v24 = cgc_parse_packet(4);\n
                    v22 = v24;\n
                    if (v22)\n
                    {\n
                        v24 = v22;\n
                        if (v24->field_4 >= 8)\n
                        {\n
                            cgc_memcpy(&v19, *((v22 + 8)), 8);\n
                            if (*(&v20) > 0)\n
                                v21 = *((v22 + 8)) + 8;\n
                            v24 = cgc_handle_response(*((v22 + 1)));\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v22)\n
        return v24;\n
    v24 = cgc_free(v22);\n
}\n
", "4216854:sub_405816": null, "4216864:cgc_delete_message": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned short field_134;\n
    char padding_136[2];\n
    unsigned int field_138;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[1];\n
    char field_1;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int cgc_delete_message()\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    struct_0 *v1;  // [bp-0x5c]\n
    unsigned int v2;  // [bp-0x58]\n
    unsigned short v3;  // [bp-0x54]\n
    unsigned int v4;  // [bp-0x50]\n
    unsigned int v5;  // [bp-0x4c]\n
    unsigned int v6;  // [bp-0x44]\n
    char v7[2];  // [bp-0x40]\n
    unsigned int v8;  // [bp-0x20]\n
    char v9;  // [bp-0x1c]\n
    char v10;  // [bp-0x18]\n
    unsigned int *v11;  // [bp-0x14]\n
    struct_1 *v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_2 *v14;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    struct_0 *v15;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v12 = 0;\n
    v6 = -1;\n
    if (!cur_user)\n
    {\n
        v14 = cgc_fdprintf(1, &v1[28].padding_0[188]);\n
        return v14;\n
    }\n
    v2 = cgc_list_messages();\n
    if (!v2)\n
    {\n
        v14 = cgc_fdprintf(1, &v1[27].padding_0[229]);\n
    }\n
    else\n
    {\n
        cgc_fdprintf(1, &v1[27].padding_0[200]);\n
        v0 = 10;\n
        v14 = cgc_read_until(0, v7, 32);\n
        if (v14 >= 0)\n
        {\n
            v6 = cgc_strtol(v7, &v8, 10);\n
            v14 = v7;\n
            if (v7 != v8)\n
            {\n
                v15 = v1;\n
                v3 = v15->field_134;\n
                v4 = v15->field_138;\n
                v5 = v6;\n
                cgc_send_request(&v3);\n
                cgc_fdprintf(1, &v1[28].padding_0[34]);\n
                v14 = cgc_parse_packet(4);\n
                v12 = v14;\n
                if (v12)\n
                {\n
                    v14 = v12;\n
                    if (v14->field_4 >= 8)\n
                    {\n
                        cgc_memcpy(&v9, *((v12 + 8)), 8);\n
                        if (*(&v10) > 0)\n
                            v11 = *((v12 + 8)) + 8;\n
                        v14 = cgc_handle_response(*((v12 + 1)));\n
                        if (!v14)\n
                        {\n
                            v14 = *((v12 + 4)) - 8;\n
                            if (v14 >= *(&v10) && *(&v10) >= 4)\n
                            {\n
                                v2 = *(v11);\n
                                v14 = cgc_fdprintf(1, &v1[27].padding_0[92]);\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v12)\n
        return v14;\n
    v14 = cgc_free(v12);\n
}\n
", "4217445:sub_405a65": null, "4217456:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short cur_user;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x1030]\n
    unsigned int v1;  // [bp-0x1020]\n
    unsigned int v2;  // [bp-0x101c]\n
    void* v3;  // [bp-0x1018]\n
    void* v4;  // [bp-0x1014]\n
    void* v5;  // [bp-0x1010]\n
    char v6;  // [bp-0x100c]\n
    void* v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    cur_user = 0;\n
    cgc_fdprintf(1, \"[INFO] LulzChat Client v0.1\\n
\");\n
    cgc_fdprintf(1, v2 - 8574);\n
    while (true)\n
    {\n
        cgc_fdprintf(1, v2 - 8721);\n
        v0 = 10;\n
        if (cgc_read_until(0, &v6, 0x1000) <= 0)\n
            cgc_quit();\n
        v1 = v6 - 68;\n
        if (v1 <= 50)\n
            break;\n
        cgc_fdprintf(0, v2 - 8543);\n
    }\n
    goto *(((stack_base)[4124] + (stack_base)[4128] * 4 - 9692)) + (stack_base)[4124];\n
}\n
", "4217728:sub_405b80": "int sub_405b80()\n
{\n
    cgc_help();\n
}\n
", "4217744:sub_405b90": "int sub_405b90()\n
{\n
    cgc_register_user();\n
}\n
", "4217760:sub_405ba0": "int sub_405ba0()\n
{\n
    cgc_login_user();\n
}\n
", "4217776:sub_405bb0": "int sub_405bb0()\n
{\n
    cgc_logout_user();\n
}\n
", "4217792:sub_405bc0": "int sub_405bc0()\n
{\n
    cgc_list_messages();\n
}\n
", "4217808:sub_405bd0": "int sub_405bd0()\n
{\n
    cgc_view_message();\n
}\n
", "4217824:sub_405be0": "int sub_405be0()\n
{\n
    cgc_send_message();\n
}\n
", "4217840:sub_405bf0": "int sub_405bf0()\n
{\n
    cgc_delete_message();\n
}\n
", "4217856:sub_405c00": "int sub_405c00()\n
{\n
    cgc_quit();\n
}\n
", "4217907:sub_405c33": null, "4217920:cgc_parse_message": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
    char padding_2[2];\n
    unsigned int field_4;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_message(unsigned short v10[4], struct_2 *a0, struct_2 *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char *v1;  // [bp-0x28]\n
    unsigned int v2[4];  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    struct_1 *v6;  // [bp-0x14], Other Possible Types: struct_0 *\n
    unsigned int v7;  // [bp-0x10]\n
    struct_0 *v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
\n
    v9 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 8;\n
    v6 = 0;\n
    v6 = cgc_malloc(12);\n
    if (!v6)\n
    {\n
LABEL_405efb:\n
        cgc_free_message();\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (!(v7 <= a2))\n
        goto LABEL_405efb;\n
    v6->field_0 = v10[0];\n
    v6->field_2 = a1->field_0;\n
    v6->field_4 = v10[2];\n
    v6->field_6 = v10[3];\n
    if (!(v6->field_4 == a0->field_0))\n
        goto LABEL_405efb;\n
    if (v6->field_6 > 0 && v6->field_6 <= 0x200)\n
    {\n
        if (a2 - v7 >= v6->field_6)\n
        {\n
            if (v6->field_0 != 1)\n
            {\n
                v6->field_0 = 0;\n
                v6->field_8 = cgc_malloc(v6->field_6 + 1);\n
                if (v6->field_8)\n
                {\n
                    cgc_strncpy(v6->field_8, v10 + 1, v6->field_6);\n
LABEL_405ef0:\n
                    v8 = v6;\n
                    return v8;\n
                }\n
            }\n
            else\n
            {\n
                v1 = cgc_malloc(513);\n
                if (v1)\n
                {\n
                    cgc_memset(v1, 0, 513);\n
                    cgc_strncpy(v1, v6->field_8, 0x200);\n
                    *(v2) = a0->field_4;\n
                    v3 = a0->field_4 ^ a0->field_0;\n
                    v4 = a0->field_4 ^ -1;\n
                    v5 = a0->field_4;\n
                    cgc_unprotect_msg(v2, v1, 0x200);\n
                    *(v2) = a1->field_4;\n
                    v3 = a1->field_4 ^ a1->field_0;\n
                    v4 = a1->field_4 ^ a0->field_0;\n
                    v5 = a1->field_4;\n
                    cgc_protect_msg(v2, v1, 0x200);\n
                    v6->field_8 = cgc_malloc(0x200);\n
                    if (v6->field_8)\n
                    {\n
                        cgc_memcpy(v6->field_8, v1, 0x200);\n
                        v6->field_6 = 0x200;\n
                        goto LABEL_405ef0;\n
                    }\n
                }\n
            }\n
        }\n
        goto LABEL_405efb;\n
    }\n
    goto LABEL_405efb;\n
}\n
", "4218649:sub_405f19": null, "4218656:cgc_free_message": "typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8[2];\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_message(struct_1 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v1)\n
        return v1;\n
    if (!v1->field_8)\n
        return cgc_free(v1);\n
    cgc_free(v1->field_8);\n
}\n
", "4218741:sub_405f75": null, "4218752:cgc_enq_msg": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_enq_msg(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        if (*(v4))\n
        {\n
            v1 = cgc_malloc(8);\n
            if (!v1)\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            *(v1) = a0;\n
            *((v1 + 4)) = 0;\n
            for (v2 = *(v4); *((v2 + 4)); v2 = *((v2 + 4)));\n
            *((v2 + 4)) = v1;\n
        }\n
        else\n
        {\n
            *(v4) = cgc_malloc(8);\n
            if (!*(v4))\n
            {\n
                v3 = -1;\n
                return v3;\n
            }\n
            *(*(v4)) = a0;\n
            *((*(v4) + 4)) = 0;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4219003:sub_40607b": null, "4219008:cgc_deq_msg": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_deq_msg(struct struct_0 **v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[2];  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!*(v3))\n
        return v2;\n
    if (*(v3)->field_4)\n
    {\n
        v1[0] = *(v3);\n
        v2 = v1[0];\n
        *(v3) = v1[1];\n
        cgc_free(v1);\n
    }\n
    else\n
    {\n
        v2 = *(v3)->field_0;\n
        cgc_free(*(v3));\n
        *(v3) = 0;\n
    }\n
    return v2;\n
}\n
", "4219162:sub_40611a": null, "4219168:cgc_deq_msg_at": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_deq_msg_at(struct struct_0 **v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!*(v5))\n
        return v3;\n
    if (!*(v5)->field_4 && a0 == 1)\n
    {\n
        v3 = *(v5)->field_0;\n
        cgc_free(*(v5));\n
        *(v5) = 0;\n
        goto LABEL_40621a;\n
    }\n
    v1 = 0;\n
    v4 = 0;\n
    for (v2 = *(v5); v2; v2 = *((v2 + 4)))\n
    {\n
        if (v4 != a0)\n
        {\n
            v1 = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            if (v1)\n
                *((v1 + 4)) = *((v2 + 4));\n
            else\n
                *(v5) = *((v2 + 4));\n
            v3 = *(v2);\n
            cgc_free(v2);\n
            break;\n
        }\n
    }\n
LABEL_40621a:\n
    return v3;\n
}\n
", "4219437:sub_40622d": null, "4219440:cgc_parse_packet": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_packet(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    struct_0 *v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v3 = cgc_malloc(12);\n
    if (v3)\n
    {\n
        v5 = 8;\n
        v0 = v5;\n
        if (cgc_read_n(v8, v3) == v5 && v3->field_4 <= 0x2000)\n
        {\n
            v4 = cgc_malloc(v3->field_4);\n
            if (v4)\n
            {\n
                v5 = v3->field_4;\n
                v0 = v5;\n
                if (cgc_read_n(v8, v4) == v3->field_4)\n
                {\n
                    v3->field_8 = v4;\n
                    v1 = v3->field_2;\n
                    if (v1 == cgc_calc_checksum())\n
                    {\n
                        v6 = v3;\n
                        return v6;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v4)\n
        cgc_free(v4);\n
    if (v3)\n
        cgc_free(v3);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4219805:sub_40639d": null, "4219808:cgc_calc_checksum": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[1];\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
int cgc_calc_checksum(struct_0 *v5)\n
{\n
    unsigned short v0;  // [bp-0x14]\n
    unsigned short v1;  // [bp-0x12]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    struct_0 *v4;  // [bp-0x8]\n
\n
    v4 = v5;\n
    v2 = 8;\n
    v1 = 0;\n
    v0 = v5->field_2;\n
    v5->field_2 = 0;\n
    for (v3 = 0; v3 < v2; v3 += 1)\n
    {\n
        v1 += v1 ^ (&v4->field_0)[v3];\n
    }\n
    v4 = v5->field_8;\n
    for (v3 = 0; v3 < v5->field_4; v3 += 1)\n
    {\n
        v1 += v1 ^ (&v4->field_0)[v3];\n
    }\n
    v5->field_2 = v0;\n
    return v1;\n
}\n
", "4220006:sub_406466": null, "4220016:cgc_new_packet": "typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_new_packet(char v2, char a0)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = cgc_malloc(12);\n
    if (!v0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v0->field_0 = v2;\n
    v0->field_1 = a0;\n
    v0->field_2 = 0;\n
    v0->field_4 = 0;\n
    v0->field_8 = 0;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4220139:sub_4064eb": null, "4220144:cgc_free_packet": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8[2];\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_packet(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v1)\n
        return v1;\n
    if (!v1->field_8)\n
        return cgc_free(v1);\n
    cgc_free(v1->field_8);\n
}\n
", "4220229:sub_406545": null, "4220240:cgc_send_request": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_request()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    char v7;  // [bp+0x8]\n
    unsigned int v16;  // ebx\n
\n
    v3 = v16;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_new_packet(0, v7);\n
    if (!v2)\n
        return;\n
    v0 = v7;\n
    if (!(v0 <= 6))\n
        goto LABEL_0x406797;\n
    goto *(((stack_base)[32] + (stack_base)[36] * 4 - 8516)) + (stack_base)[32];\n
}\n
", "4220843:sub_4067ab": null, "4220848:cgc_send_response": "typedef struct struct_0 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    unsigned short field_2;\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char *field_8;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_response(struct_2 *v5, char a0)\n
{\n
    void* v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_1 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = cgc_new_packet(1, a0);\n
    v3 = &v7->padding_0;\n
    if (!v3)\n
        return v7;\n
    v3->field_4 = v5->field_4 + 8;\n
    v3->field_8 = cgc_malloc(v3->field_4);\n
    if (v3->field_8)\n
    {\n
        cgc_memcpy(v3->field_8, v5, 8);\n
        if (v5->field_4 > 0 && v5->field_8)\n
            cgc_memcpy(v3->field_8 + 8, v5->field_8, v5->field_4);\n
        v3->field_2 = cgc_calc_checksum(v3);\n
        v2 = v3->field_4 + 8;\n
        v0 = 0;\n
        cgc_transmit(1, v3, v2);\n
    }\n
    v7 = cgc_free_packet(v3);\n
    return v7;\n
}\n
", "4221160:sub_4068e8": null, "4221168:cgc_send_register_res": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_register_res(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v1 = v5;\n
    if (v4)\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
    }\n
    else if (a0)\n
    {\n
        v3 = a0 + 8;\n
        v2 = 64;\n
    }\n
    else\n
    {\n
        return v4;\n
    }\n
    v5 = cgc_send_response(&v1, 0);\n
    return v5;\n
}\n
", "4221292:sub_40696c": null, "4221296:cgc_send_login_res": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    unsigned int field_2;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    char padding_2[2];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_login_res(struct_0 *v4, struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v1 = v5;\n
    if (v4)\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (!a0)\n
            return v4;\n
        v5 = cgc_malloc(6);\n
        v3 = v5;\n
        if (!v3)\n
            return v5;\n
        *(v3) = a0->field_0;\n
        *((v3 + 2)) = a0->field_4;\n
        v2 = 6;\n
    }\n
    v5 = cgc_send_response(&v1, 1);\n
    if (v3)\n
    {\n
        v5 = cgc_free(v3);\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4221490:sub_406a32": null, "4221504:cgc_send_list_res": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
    unsigned short field_6;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_list_res(unsigned short v8[4], struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned short v1[4];  // [bp-0x24]\n
    void* v2;  // [bp-0x20]\n
    unsigned short v3[4];  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned short v4[4];  // [bp-0x18]\n
    unsigned short *v5;  // [bp-0x14]\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned short v9[4];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = v8;\n
    *(&v1[0]) = v9;\n
    if (v8)\n
    {\n
        *(&v3[0]) = 0;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        if (!a0)\n
            return v8;\n
        v9 = cgc_malloc(a1 * 8 + 2);\n
        v3 = v9;\n
        if (!v3)\n
            return v9;\n
        *(v3) = a1;\n
        v5 = v3 + 2;\n
        v7 = 0;\n
        for (v6 = 0; v6 < a1; v6 += 1)\n
        {\n
            v9 = *(a0);\n
            *(&v4[0]) = v9;\n
            if (!v4)\n
                return *(a0);\n
            *((v5 + v7)) = v4[0];\n
            *((2 + v5 + v7)) = v4[1];\n
            *((4 + v5 + v7)) = v4[2];\n
            *((6 + v5 + v7)) = v4[3];\n
            v7 += 8;\n
            a0 = *((a0 + 4));\n
        }\n
    }\n
    v9 = cgc_send_response(v1, 2);\n
    if (v3)\n
    {\n
        v9 = cgc_free(v3);\n
        return v9;\n
    }\n
    return v9;\n
}\n
", "4221847:sub_406b97": null, "4221856:cgc_send_view_res": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_view_res(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v1 = v5;\n
    if (v4)\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
    }\n
    else if (a0)\n
    {\n
        v3 = a0;\n
        v2 = 12;\n
    }\n
    else\n
    {\n
        return v4;\n
    }\n
    v5 = cgc_send_response(&v1, 3);\n
    return v5;\n
}\n
", "4221975:sub_406c17": null, "4221984:cgc_send_send_res": "int cgc_send_send_res(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc]\n
\n
    v0 = v3;\n
    v2 = 0;\n
    v1 = 0;\n
    return cgc_send_response(&v0, 4);\n
}\n
", "4222051:sub_406c63": null, "4222064:cgc_send_delete_res": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_delete_res(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    if (v4)\n
    {\n
        v3 = 0;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        v5 = cgc_malloc(4);\n
        v3 = v5;\n
        if (!v3)\n
            return v5;\n
        *(v3) = a0;\n
        v2 = 4;\n
    }\n
    v5 = cgc_send_response(&v1, 5);\n
    if (v3)\n
    {\n
        v5 = cgc_free(v3);\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4222227:sub_406d13": null, "4222240:cgc_handle_response": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_handle_response()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v4;  // [bp+0x4]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    if (v1 <= 5)\n
        goto *(((stack_base)[20] + (stack_base)[16] * 4 - 8488)) + (stack_base)[20];\n
    else\n
        cgc_fdprintf(1, v0 - 8171);\n
}\n
", "4223001:sub_407019": null, "4223008:cgc_add_user": "typedef struct struct_1 {\n
    unsigned short field_0;\n
    char padding_2[2];\n
    unsigned int field_4;\n
    char padding_8[128];\n
    unsigned int field_88;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[134];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_user(struct struct_0 **v5, struct_1 *a0)\n
{\n
    void* v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    cgc_random(&v2, 4);\n
    if (!*(v5))\n
    {\n
        a0->field_0 = 1;\n
        *(v5) = &a0->field_0;\n
    }\n
    else\n
    {\n
        for (v3 = *(v5); *((v3 + 136)); v3 = *((v3 + 136)));\n
        a0->field_0 = *(v3) + 1;\n
        *((v3 + 136)) = a0;\n
    }\n
    a0->field_4 = *(&v2);\n
    a0->field_88 = 0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4223237:sub_407105": null, "4223248:cgc_find_user": "typedef struct struct_0 {\n
    char padding_0[136];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_user(struct_0 *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int, void*\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v3)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        for (v1 = v3; v1; v1 = *((v1 + 136)))\n
        {\n
            if (!cgc_strcmp(a0, v1 + 8))\n
            {\n
                v2 = v1;\n
                break;\n
            }\n
        }\n
        return v2;\n
    }\n
}\n
", "4223399:sub_4071a7": null, "4223408:cgc_find_user_by_id": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[134];\n
    struct struct_0 *field_88;\n
} struct_0;\n
\n
int cgc_find_user_by_id(struct_0 *v2, unsigned short a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int, struct_0 *\n
\n
    v1 = 0;\n
    if (!v2)\n
        return v1;\n
    for (v0 = v2; v0; v0 = v0->field_88)\n
    {\n
        if (a0 == v0->field_0)\n
        {\n
            v1 = v0;\n
            break;\n
        }\n
    }\n
    return v1;\n
}\n
", "4223518:sub_40721e": null, "4223520:cgc_read_n": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_n(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v3 - a0;\n
        v0 = &v2;\n
        if (cgc_receive(v5, v3, 1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v3 += 1;\n
        v4 += 1;\n
    }\n
    return v3 - a0;\n
}\n
", "4223673:sub_4072b9": null, "4223680:cgc_read_until": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_until(unsigned int v5, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    for (v4 = 0; v4 < a1; v4 += 1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5, v3, 1))\n
        {\n
LABEL_407332:\n
            break;\n
        }\n
        else\n
        {\n
            if (!*(&v2))\n
                goto LABEL_407332;\n
            v6 = v3;\n
            v3 = &v6->field_0;\n
            if (v6->field_-1 == a2)\n
                break;\n
        }\n
    }\n
    *((v3 - 1)) = 0;\n
    return v3 - a0;\n
}\n
", "4223872:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}