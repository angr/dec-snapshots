{"4202496:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202672:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202688:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24559;\n
    v6 = v5 + 15;\n
    v7 = v5 + 15;\n
    if (v7 == v6)\n
        return v5 + 15;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24495;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 15;\n
    v9 = (v6 + 15 - (v6 + 15) >> 31) + (15 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203094:sub_402256": null, "4203104:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203158:sub_402296": null, "4203168:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203222:sub_4022d6": null, "4203232:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isupper(v3) && !cgc_islower(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203328:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isalpha(v3) && !cgc_isdigit(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203424:cgc_isprint": "int cgc_isprint(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 32 && v1 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203478:sub_4023d6": null, "4203488:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + -32;\n
    return v0;\n
}\n
", "4203562:sub_40242a": null, "4203568:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4203642:sub_40247a": null, "4203648:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203742:sub_4024de": null, "4203744:cgc_receive_all": "int cgc_receive_all(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_receive_all_fd(0, v1);\n
}\n
", "4203803:sub_40251b": null, "4203808:cgc_receive_all_fd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_all_fd(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 0; v4 < a1; v4 = *(&v2) + v4)\n
    {\n
        v0 = &v2;\n
        v3 = cgc_receive(v6, a0 + v4, a1 - v4);\n
        if (v3)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (!*(&v2))\n
            break;\n
    }\n
    v5 = v4;\n
    return v5;\n
}\n
", "4203970:sub_4025c2": null, "4203984:cgc_receive_until": "int cgc_receive_until(unsigned int v1, unsigned int a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
\n
    v0 = a1;\n
    return cgc_receive_until_fd(0, v1, a0);\n
}\n
", "4204054:sub_402616": null, "4204064:cgc_receive_until_fd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until_fd(unsigned int v7, unsigned int a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x1d]\n
    char v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    *(a0) = 0;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        v4 = cgc_receive(v7, &v2, 1);\n
        if (v4)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        if (!*(&v3))\n
        {\n
LABEL_4026e0:\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a2)\n
                break;\n
            if (!(v5 < a1))\n
                goto LABEL_4026e0;\n
            v8 = v5;\n
            v5 = v8 + 1;\n
            *((a0 + v8)) = v2;\n
        }\n
    }\n
    if (v5 < a1)\n
        *((a0 + v5)) = 0;\n
    v6 = v5;\n
    return v6;\n
}\n
", "4204299:sub_40270b": null, "4204304:cgc_receive_str_until_fd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_str_until_fd(unsigned int v7, unsigned int a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x1d]\n
    char v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    *(a0) = 0;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        v4 = cgc_receive(v7, &v2, 1);\n
        if (v4)\n
        {\n
            v6 = -1;\n
            return v6;\n
        }\n
        if (!*(&v3))\n
        {\n
LABEL_4027d5:\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a2)\n
                break;\n
            if (!(v5 < a1 - 1))\n
                goto LABEL_4027d5;\n
            v8 = v5;\n
            v5 = v8 + 1;\n
            *((a0 + v8)) = v2;\n
        }\n
    }\n
    *((a0 + v5)) = 0;\n
    v6 = v5;\n
    return v6;\n
}\n
", "4204532:sub_4027f4": null, "4204544:cgc_send_all": "int cgc_send_all(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_send_all_fd(1, v1);\n
}\n
", "4204601:sub_402839": null, "4204608:cgc_send_all_fd": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send_all_fd(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 0; v4 < a1; v4 = *(&v2) + v4)\n
    {\n
        v0 = &v2;\n
        v3 = cgc_transmit(v6, a0 + v4, a1 - v4);\n
        if (v3)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (!*(&v2))\n
            break;\n
    }\n
    v5 = *(&v2);\n
    return v5;\n
}\n
", "4204770:sub_4028e2": null, "4204784:cgc_equals": "int cgc_equals(char *v1, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    while (true)\n
    {\n
        if (*(v1) != *(a0))\n
        {\n
            v0 = 0;\n
            return v0;\n
        }\n
        else if (*(v1))\n
        {\n
            a0 += 1;\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
    }\n
}\n
", "4204879:sub_40294f": null, "4204880:cgc_replace": "int cgc_replace(char *v1, char a0, char a1, unsigned int a2)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return v0;\n
        if (a2 && v0 >= a2)\n
            return v0;\n
        if (*(v1) == a0)\n
        {\n
            *(v1) = a1;\n
            v0 += 1;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4205002:sub_4029ca": null, "4205008:cgc_force_newline": "int cgc_force_newline(unsigned int v0, unsigned int a0, char *a1)\n
{\n
    unsigned int v1;  // ecx\n
\n
    if (a1 == a0)\n
    {\n
        a1[1 + v0] = 10;\n
        return a1;\n
    }\n
    if (a1[1 + v0] != 10)\n
    {\n
        v1 = a1;\n
        a1 = v1 + 1;\n
        *((v0 + v1)) = 10;\n
    }\n
    if (a1 >= a0)\n
        return a1;\n
    *((v0 + a1)) = 0;\n
}\n
", "4205122:sub_402a42": null, "4205136:cgc_getopt": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getopt(unsigned int v5, struct struct_0 **a0, unsigned int a1, unsigned int *a2)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int *v6;  // eax\n
    unsigned int *v7;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = -1;\n
    if (!(*(a2) < v5 && a0[*(a2)]))\n
        return v4;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v1 = v3;\n
        v0 = a1;\n
        if (v1 >= cgc_strlen())\n
        {\n
            v7 = a2;\n
            *(v7) = *(v7) + 1;\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (a0[*(a2)]->field_0 == v3[a1])\n
        {\n
            v4 = *((a1 + v3));\n
            v6 = a2;\n
            *(v6) = *(v6) + 1;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4205359:sub_402b2f": null, "4205360:cgc_bcopy": "int cgc_bcopy(char *v0, char *a0, char *a1)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
\n
    for (v1 = v0; a1 > 0; a1 = v1)\n
    {\n
        *(a0) = *(v0);\n
        a0 += 1;\n
        v0 += 1;\n
        v1 = a1 - 1;\n
    }\n
    return v1;\n
}\n
", "4205426:sub_402b72": null, "4205440:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_link(v2, v3);\n
    return;\n
}\n
", "4205472:cgc_link": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_link(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_lookaside;\n
    if (!v5)\n
        return cgc_lookaside;\n
    v6 = v5;\n
    if (*(v6) <= 1016)\n
    {\n
        if (*(v5) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(v5) >> 3;\n
        *((v5 + 4)) = *((v3 + v2 * 4 + 64));\n
        v1 = v5;\n
        if (*(v5) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(v5) >> 3;\n
        v6 = v3;\n
        *((v6 + v0 * 4 + 64)) = v1;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (!v4)\n
            return v6;\n
        if (!*((v4 + 4)))\n
        {\n
            *((v4 + 4)) = v5;\n
            *((v5 + 8)) = v4;\n
            v6 = v5;\n
            *((v6 + 4)) = 0;\n
            return v5;\n
        }\n
        else if (*(v5) >= *(*((v4 + 4))))\n
        {\n
            v6 = *((v4 + 4));\n
            v4 = v6;\n
        }\n
        else\n
        {\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = v4;\n
            *((*((v4 + 4)) + 8)) = v5;\n
            v6 = v4;\n
            *((v6 + 4)) = v5;\n
            return v4;\n
        }\n
    }\n
}\n
", "4205809:sub_402cf1": null, "4205824:cgc_add_freelist_block": "typedef struct struct_1 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
} struct_1;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_freelist_block(unsigned int v5)\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    struct_1 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_1 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v5 += 4;\n
    v5 = v5 + 4095 & -0x1000;\n
    v0 = &v3;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        cgc_printf(&v1[64].padding_0[28]);\n
        cgc__terminate(-1);\n
    }\n
    cgc_bzero(v3);\n
    *(v3) = v5 - 4;\n
    if (!v1->field_40)\n
    {\n
        v7 = v1;\n
        v7->field_40 = v3;\n
        return v1;\n
    }\n
    v7 = cgc_link(v3);\n
    return v7;\n
}\n
", "4206049:sub_402de1": null, "4206064:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        v1 = v2 - 4;\n
        v3 = cgc_link(v1);\n
    }\n
    return v3;\n
}\n
", "4206135:sub_402e37": null, "4206144:cgc_init_freelist": "typedef struct struct_0 {\n
    char padding_0[64];\n
    struct struct_1 *field_40;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_init_freelist()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    v0 = &cgc_lookaside;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc_printf();\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v1->field_40);\n
    v3[0] = v1->field_40;\n
    v2[0] = v3 + 1;\n
    v3[0] = 0;\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[0] = 4080;\n
    v2[2] = v3;\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4206361:sub_402f19": null, "4206368:cgc_unlink": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
int cgc_unlink(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax, Other Possible Types: struct_0 *, unsigned int\n
\n
    if (!v0)\n
        return v0;\n
    if (v0->field_8)\n
        v0->field_8->field_4 = v0->field_4;\n
    v1 = v0;\n
    if (!v1->field_4)\n
        return v1;\n
    v1 = v0->field_4;\n
    v1->field_8 = v0->field_8;\n
}\n
", "4206452:sub_402f74": null, "4206464:cgc_freelist_alloc": "typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_lookaside;\n
\n
int cgc_freelist_alloc(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v2 = v0->field_40; v2; v2 = v2->field_4)\n
    {\n
        if (v2->field_0 >= v4)\n
            break;\n
    }\n
    if (!v2)\n
    {\n
        cgc_add_freelist_block(v4);\n
        v3 = cgc_freelist_alloc(v4);\n
        return v3;\n
    }\n
    cgc_unlink(v2);\n
    if (*(v2) - v4 < 12)\n
    {\n
        v3 = v2 + 4;\n
        return v3;\n
    }\n
    v1 = v2 + 4 + v4;\n
    *(v1) = *(v2) - (v4 + 4);\n
    *(v2) = v4;\n
    cgc_link(v1);\n
    v3 = v2 + 4;\n
    return v3;\n
}\n
", "4206745:sub_403099": null, "4206752:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc();\n
    if (!v2)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v5 = v5 + 7 & -8;\n
    v0 = v5;\n
    cgc_bzero(v2);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4206860:sub_40310c": null, "4206864:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v5 < 8)\n
        v5 = 8;\n
    v5 = v5 + 7 & -8;\n
    if (v5 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v5 >> 3;\n
    if (!v3)\n
    {\n
        v4 = cgc_freelist_alloc(v5);\n
        return v4;\n
    }\n
    for (v3 = v0; v3 < 128; v3 += 1)\n
    {\n
        if (*((v1 + (v3 << 2) + 64)))\n
            break;\n
    }\n
    if (v3 != 128)\n
    {\n
        v6 = v1;\n
        v2 = *((v6 + v3 * 4 + 64));\n
        *((v6 + v3 * 4 + 64)) = v2->field_4;\n
        v4 = &v2->field_4;\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v5);\n
    return v4;\n
}\n
", "4207149:sub_40322d": null, "4207152:cgc_round": null, "4207298:sub_4032c2": null, "4207312:cgc_floor": null, "4207468:sub_40336c": null, "4207472:cgc_WRAPPER_PUTC": "int cgc_WRAPPER_PUTC(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(v3, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4207572:sub_4033d4": null, "4207584:cgc_WRAPPER_OUTC": "int cgc_WRAPPER_OUTC(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    v0[a1] = a0;\n
    return a1 + 1;\n
}\n
", "4207618:sub_403402": null, "4207632:cgc_WRAPPER_FPUTC": "int cgc_WRAPPER_FPUTC(unsigned int v3, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(a2, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4207735:sub_403477": null, "4207744:cgc_putchar": "int cgc_putchar(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4207836:sub_4034dc": null, "4207840:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = cgc_strlen();\n
    while (true)\n
    {\n
        if (v2 != v3)\n
        {\n
            v0 = &v4;\n
            if (cgc_transmit(1, v7 + v2, v3 - v2))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            if (!*(&v4))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = *(&v4) + v2;\n
        }\n
        else\n
        {\n
            cgc_putchar(10);\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4208028:sub_40359c": null, "4208032:cgc_printf": "int cgc_printf(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x8]\n
\n
    v2 = &v4;\n
    v0 = v2;\n
    v1 = cgc_vprintf(1, v3);\n
    return v1;\n
}\n
", "4208097:sub_4035e1": null, "4208112:cgc_vprintf": "int cgc_vprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edi\n
\n
    v1 = cgc_WRAPPER_PUTC;\n
    v0 = 0;\n
    return cgc_wrapper_output(v3, v1, v0, a0, a1, 0, cgc_WRAPPER_PUTC, v4, v5, *(&v2));\n
}\n
", "4208205:sub_40364d": null, "4208208:cgc_fprintf": "int cgc_fprintf(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4208277:sub_403695": null, "4208288:cgc_wrapper_output": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wrapper_output()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x5c]\n
    char *v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    char v5;  // [bp-0x21]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp+0x4]\n
    unsigned int v12;  // [bp+0x8]\n
    char *v13;  // [bp+0xc]\n
    char *v14;  // [bp+0x10], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp+0xfffb8]\n
    struct struct_0 **v44;  // [bp+0x100014]\n
    unsigned int *v45;  // [bp+0x10001c], Other Possible Types: struct struct_1 **\n
    struct struct_1 **v76;  // eax\n
\n
    v76 = v45;\n
    v45 = &v76[1];\n
    v32 = &*(v76)->field_0;\n
    *(v32) = v44;\n
    while (true)\n
    {\n
        v14 = (&v13)[1] + 1;\n
        while (true)\n
        {\n
LABEL_403bd9:\n
            while (true)\n
            {\n
                if (!*(v14))\n
                    return;\n
                v5 = *(v14);\n
                v14 = (&v13)[1] + 1;\n
                if (v5 != 36)\n
                {\n
                    v0 = v13;\n
                    v13 = v12(v11, v5);\n
                    goto LABEL_403bd9;\n
                }\n
                v6 = 0;\n
                v7 = 0;\n
                v8 = 0;\n
                v9 = 0;\n
                if (!*(v14))\n
                    return;\n
                if (*(v14) != 36)\n
                    break;\n
                v0 = v13;\n
                v13 = v12(v11, 36);\n
            }\n
            if (*(v14) == 45)\n
            {\n
                v9 |= 1;\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (cgc_isdigit(*(v14)))\n
            {\n
                if (*(v14) == 48)\n
                    v9 |= 4;\n
                for (v4 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v8 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (*(v14) == 46)\n
            {\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
                for (v3 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v6 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            v1 = *(v14) - 88;\n
            if (v1 <= 32)\n
                goto *(((stack_base)[88] + (stack_base)[92] * 4 - 4292)) + (stack_base)[88];\n
            break;\n
        }\n
    }\n
}\n
", "4209644:sub_403bec": null, "4209648:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = &v5;\n
    v0 = v2;\n
    v1 = cgc_vsprintf(v4, a0);\n
    return v1;\n
}\n
", "4209717:sub_403c35": null, "4209728:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v9, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct struct_0 **v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = &cgc_WRAPPER_OUTC;\n
    v4 = v9;\n
    v3 = 0;\n
    v0 = a1;\n
    v2 = cgc_wrapper_output(v4, v5, v3, a0);\n
    v5(v4, 0);\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return v2;\n
}\n
", "4209867:sub_403ccb": null, "4209872:cgc_printf_int_to_string": "int cgc_printf_int_to_string(unsigned int v3, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a1) = 48;\n
        v2 = 1;\n
        return v2;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a0 >> 32;\n
        v3 = (0 CONCAT v3) /m a0;\n
        if (a0 != 16)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            a1[v4] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v5 = v1;\n
            v1 = v5 + 1;\n
            a1[v5] = v0 + 48;\n
        }\n
        else if ((a2 & 8))\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a1[v6] = v0 + 55;\n
        }\n
        else\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a1[v7] = v0 + 87;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4210144:cgc_printf_helper_int": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4210800:cgc_printf_float_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4213216:cgc_printf_helper_float": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if (!(a6 & 4))\n
                a1 = a0(v7, 32);\n
            else\n
                a1 = a0(v7, 48);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4213882:sub_404c7a": null, "4213888:cgc_printf_helper_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_string(unsigned int v5, struct struct_0 **a0, unsigned int a1, char *a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    char *v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a2)\n
    {\n
        v4 = a1;\n
        return v4;\n
    }\n
    if (!a4 && !a3)\n
    {\n
        for (v1 = &_GLOBAL_OFFSET_TABLE_; *(a2); a2 += 1)\n
        {\n
            v0 = a1;\n
            a1 = a0(v5, *(a2));\n
        }\n
        v4 = a1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen();\n
    v2 = 0;\n
    if (a4 > 0 && v3 > a4)\n
        v3 = a4;\n
    if (a3 > 0 && v3 < a3)\n
        v2 = a3 - v3;\n
    if (!(a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v6 = v2;\n
            v2 = v6 - 1;\n
            if (v6 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 32);\n
            }\n
            else\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 48);\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        if (v7 <= 0)\n
            break;\n
        v8 = a2;\n
        a2 = v8 + 1;\n
        v0 = a1;\n
        a1 = a0(v5, *(v8));\n
    }\n
    if ((a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v9 = v2;\n
            v2 = v9 - 1;\n
            if (v9 <= 0)\n
                break;\n
            v0 = a1;\n
            a1 = a0(v5, 32);\n
        }\n
    }\n
    v4 = a1;\n
    return v4;\n
}\n
", "4214449:sub_404eb1": null, "4214464:cgc_srand": "typedef struct struct_0 {\n
    char padding_0[588];\n
    char field_24c;\n
    char padding_24d[4103];\n
    unsigned int field_1254;\n
    char padding_1258[4];\n
    unsigned int field_125c;\n
    unsigned int field_1260;\n
    char field_1264;\n
    char field_1265;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int randState;\n
\n
int cgc_srand()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v0 = 0x1000;\n
    cgc_memcpy(&randState, 0x4347c000);\n
    v5 = v1;\n
    v5->field_1254 = 0;\n
    v5->field_1265 = 12;\n
    v5->field_24c = 25;\n
    v5->field_1264 = 27;\n
    v5->field_1260 = *(1128775688);\n
    v5->field_125c = *(1128775684);\n
    v6 = v2;\n
    return v1;\n
}\n
", "4214579:sub_404f33": null, "4214592:cgc_memcpy": "int cgc_memcpy(char *v1, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v1) = *(a0);\n
        v1 += 4;\n
        a0 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 1;\n
        a0 += 1;\n
    }\n
    return v0;\n
}\n
", "4214728:sub_404fc8": null, "4214736:cgc_rand": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char a;\n
extern char b;\n
extern char c;\n
extern unsigned int g_409384;\n
extern unsigned int mult;\n
extern unsigned int randIndex;\n
\n
int cgc_rand()\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    char v2;  // [bp-0x41]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    char v5;  // [bp-0x35]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    unsigned int v11;  // [bp-0x20]\n
    unsigned int v12;  // [bp-0x1c]\n
    unsigned int v13;  // [bp-0x18], Other Possible Types: char\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ebx\n
    void* v20;  // edx, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // eax\n
    void* v23;  // edx, Other Possible Types: unsigned int\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    void* v26;  // edx, Other Possible Types: unsigned int\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // eax\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // eax\n
\n
    v15 = v17;\n
    v14 = v18;\n
    v12 = *(&(&_GLOBAL_OFFSET_TABLE_)[596 + 8 * randIndex]);\n
    v1 = v12;\n
    v19 = *(&v13);\n
    v0 = v19;\n
    v20 = v19 >> (a & 31);\n
    v21 = (v19 CONCAT v1) >> (a & 31);\n
    if ((a & 32))\n
        v21 = v20;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-53, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v20 = 0;\n
    v13 = v0 ^ v20;\n
    v12 = v1 ^ v21;\n
    v22 = v12;\n
    v4 = v22;\n
    v3 = v13;\n
    v2 = b;\n
    v23 = v22 << (b & 31);\n
    v24 = (v3 CONCAT v22) << (v2 & 31) >> 32;\n
    if ((v2 & 32))\n
        v24 = v23;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-53, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v23 = 0;\n
    v13 = v3 ^ v24;\n
    v12 = v4 ^ v23;\n
    v7 = v12;\n
    v25 = v13;\n
    v6 = v25;\n
    v5 = c;\n
    v26 = v25 >> (c & 31);\n
    v27 = (v25 CONCAT v7) >> (v5 & 31);\n
    if ((v5 & 32))\n
        v27 = v26;\n
    if ([D] x86g_calculate_condition(0x5<32>, 0xd<32>, Conv(8->32, (Load(addr=stack_base-53, size=1, endness=Iend_LE) & 0x20<8>)), 0x0<32>, 0x0<32>))\n
        v26 = 0;\n
    v13 = v6 ^ v26;\n
    v12 = v7 ^ v27;\n
    v28 = randIndex;\n
    randIndex = randIndex + 1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[600 + 8 * v28]) = v13;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[596 + 8 * v28]) = v12;\n
    randIndex = randIndex & 511;\n
    v29 = v12;\n
    v8 = v13;\n
    v31 = (v29 * mult >> 32) + g_409384 * v29 + mult * v8;\n
    v10 = v29 * mult;\n
    v11 = v31;\n
    v32 = v12;\n
    v9 = mult;\n
    return (v32 * mult >> 32) + g_409384 * v32 + v9 * v10;\n
}\n
", "4215104:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v6 > a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v6 != a0)\n
    {\n
        v3 = a0 - v6;\n
        v2 = (0 CONCAT -1) /m v3;\n
        v4 = cgc_rand();\n
        v0 = v6;\n
        v5 = v0 + (0 CONCAT v4) /m v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        return v5;\n
    }\n
}\n
", "4215245:sub_4051cd": null, "4215248:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4) == 45)\n
    {\n
        v1 = 1;\n
        v4 += 1;\n
    }\n
    for (; cgc_isdigit(*(v4)); v2 = v2 * 10 + *(v5) - 48)\n
    {\n
        v5 = v4;\n
        v4 = v5 + 1;\n
    }\n
    if (v1)\n
    {\n
        v3 = -(v2);\n
        return v3;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4215485:sub_4052bd": null, "4215488:cgc_atof": null, "4215773:sub_4053dd": null, "4215776:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8]\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v1;\n
        v1 = v4 + 1;\n
    }\n
    *(v1) = 0;\n
    return v0;\n
}\n
", "4215852:sub_40542c": null, "4215856:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4215993:sub_4054b9": null, "4216000:cgc_get_cgc_random": "int cgc_get_cgc_random(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x14]\n
\n
    v0 = 0;\n
    return cgc_random(v1, a0);\n
}\n
", "4216059:sub_4054fb": null, "4216064:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4216123:sub_40553b": null, "4216128:cgc_bzero": "int cgc_bzero(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
\n
    for (; a0; v1[1 + v0] = 0)\n
    {\n
        v1 = a0;\n
        a0 = v1 + 1;\n
    }\n
    *((v0 + a0)) = 0;\n
    return v0;\n
}\n
", "4216183:sub_405577": null, "4216192:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8]\n
    char *v4;  // eax\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(v3) = v0;\n
        v3 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(v4) = v1;\n
    }\n
    return v2;\n
}\n
", "4216347:sub_40561b": null, "4216352:cgc_strchr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strchr(char *v4, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(v4))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (v4[v2] != a0)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = &v4[v2];\n
            return v3;\n
        }\n
    }\n
}\n
", "4216510:sub_4056be": null, "4216512:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[576];\n
    struct struct_1 *field_240;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v6, char *a0)\n
{\n
    char v0;  // [bp-0x21]\n
    struct_0 *v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    if (!v6)\n
    {\n
        if (v1->field_240)\n
        {\n
            v6 = v1->field_240;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (cgc_strchr(a0, *(v6)))\n
            v0 = *(v6);\n
        if (!(v0 & 1))\n
            break;\n
        v6 += 1;\n
    }\n
    if (!*(v6))\n
    {\n
        v1->field_240 = 0;\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = cgc_strlen(v6);\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= v2)\n
        {\n
            v1->field_240 = 0;\n
            v5 = v6;\n
            return v5;\n
        }\n
        if (cgc_strchr(a0, *((v6 + v4))))\n
            break;\n
        v4 += 1;\n
    }\n
    *((v6 + v4)) = 0;\n
    for (v3 = v4 + 1; v3 < v2; v3 += 1)\n
    {\n
        if (cgc_strchr(a0, *((v6 + v3))))\n
        {\n
            *((v6 + v3)) = 0;\n
        }\n
        else\n
        {\n
            v1->field_240 = v6 + v3;\n
            v5 = v6;\n
            return v5;\n
        }\n
    }\n
    if (v3 == v2)\n
        v1->field_240 = 0;\n
    v5 = v6;\n
    return v5;\n
}\n
", "4217031:sub_4058c7": null, "4217040:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4217148:sub_40593c": null, "4217152:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
        {\n
            v0 = 0;\n
            if (*(v2) == *(a0))\n
                v0 = !(a1 <= 0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
        a1 -= 1;\n
    }\n
    if (!a1)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = *(v2) - *(a0);\n
    return v1;\n
}\n
", "4217317:sub_4059e5": null, "4217328:cgc_strcat": "int cgc_strcat(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    for (; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *(v0) = 0;\n
    return v1;\n
}\n
", "4217438:sub_405a5e": null, "4217440:cgc_strstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strstr(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 && a0)\n
    {\n
        v1 = cgc_strlen(a0);\n
        while (true)\n
        {\n
            if (!*(v3))\n
            {\n
                v2 = 0;\n
                return v2;\n
            }\n
            else if (cgc_strncmp(v3, a0, v1))\n
            {\n
                v3 += 1;\n
            }\n
            else\n
            {\n
                v2 = v3;\n
                return v2;\n
            }\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4217610:sub_405b0a": null, "4217616:cgc_rindex": "int cgc_rindex(char *v3, char a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = cgc_strlen(v3);\n
    v0 = v1;\n
    while (true)\n
    {\n
        if (v0 < 0)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (v3[v0] == a0)\n
        {\n
            v2 = &v3[v0];\n
            return v2;\n
        }\n
        v0 -= 1;\n
    }\n
}\n
", "4217742:sub_405b8e": null, "4217744:cgc_usage": "int cgc_usage()\n
{\n
    return cgc_printf(\"lookupd [-s] [-q] names\\n
\");\n
}\n
", "4217781:sub_405bb5": null, "4217792:cgc_lookup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lookup(unsigned int v6, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (cgc_strcmp(*(a0), \"lookup\"))\n
    {\n
        v8 = cgc_usage();\n
        return v8;\n
    }\n
    for (v2 = 1; v2 < v6; v2 += 1)\n
    {\n
        if (a0[v2]->field_0 != 45)\n
            break;\n
        if (a0[v2]->field_1 == 115)\n
        {\n
            v4 = 1;\n
        }\n
        else if (a0[v2]->field_1 == 108)\n
        {\n
            v4 = 0;\n
        }\n
        else if (a0[v2]->field_1 == 113)\n
        {\n
            v3 = 1;\n
        }\n
        else\n
        {\n
            cgc_printf(v0 - 4104);\n
            v8 = cgc_usage();\n
            return v8;\n
        }\n
    }\n
    if (v2 >= v6)\n
    {\n
        if (!v4)\n
            v8 = cgc_print_all_users_long();\n
        else\n
            v8 = cgc_print_all_users_short();\n
        return v8;\n
    }\n
    else\n
    {\n
        while (true)\n
        {\n
            v8 = v2;\n
            if (v8 >= v6)\n
                break;\n
            if (v3)\n
                v1 = cgc_quick_lookup();\n
            else\n
                v1 = cgc_long_lookup();\n
            if (!v1)\n
            {\n
                cgc_printf(v0 - 4083);\n
            }\n
            else if (!v4)\n
            {\n
                cgc_print_user_long();\n
            }\n
            else\n
            {\n
                cgc_print_user_short();\n
            }\n
            v2 += 1;\n
        }\n
        return v2;\n
    }\n
}\n
", "4218341:sub_405de5": null, "4218352:cgc_quick_lookup": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_short_list;\n
\n
int cgc_quick_lookup(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char **v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = cgc_short_list; v2; v2 = *((v2 + 4)))\n
    {\n
        if (!*(v2))\n
            break;\n
        v1 = *(v2);\n
        if (cgc_equals(*(v1), v4))\n
        {\n
            v3 = v1;\n
            return v3;\n
        }\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4218502:sub_405e86": null, "4218512:cgc_long_lookup": "typedef struct struct_2 {\n
    char padding_0[4712];\n
    struct struct_3 *field_1268;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char *field_0;\n
    char padding_4[52];\n
    struct struct_4 *field_38;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[52];\n
    struct struct_1 *field_38;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    struct struct_0 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *cgc_root_user;\n
\n
int cgc_long_lookup(char *v5)\n
{\n
    struct_2 *v0;  // [bp-0x1c]\n
    char **v1;  // [bp-0x18]\n
    struct struct_0 *v2[2];  // [bp-0x14]\n
    struct_4 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = &cgc_root_user->field_0;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (cgc_equals(*(v3), v5))\n
            break;\n
        v3 = *((v3 + 56));\n
    }\n
    v2[0] = &v0->field_1268->field_0;\n
    while (v2[1])\n
    {\n
        v1 = &v2[0]->field_0;\n
        if (!v1)\n
            break;\n
        if (cgc_equals(*(v1), v5))\n
            break;\n
    }\n
    if (!v2[1])\n
    {\n
        v2[1] = cgc_calloc(8);\n
        v2[1]->field_0 = v3;\n
    }\n
    v4 = v3;\n
    return v4;\n
}\n
", "4218782:sub_405f9e": null, "4218784:cgc_print_user_short": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_user_short(unsigned int v3[13])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v3[0];\n
    cgc_printf(\"Username: $s\\n
\");\n
    v0 = v3[11];\n
    cgc_printf(v1 - 4048);\n
    v0 = v3[12];\n
    cgc_printf(v1 - 4033);\n
    v5 = v2;\n
    return cgc_printf(v1 - 3914);\n
}\n
", "4218909:sub_40601d": null, "4218912:cgc_print_user_long": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[36];\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char field_34;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_user_long(struct_0 *v8)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v8->field_0;\n
    v1 = v8->field_2c;\n
    v2 = &v8->padding_4;\n
    v3 = v8->field_28;\n
    cgc_printf(\"Username: $s\\n
Real name: $s\\n
Host name: $s\\n
Idle for: $d seconds\\n
\");\n
    if (!v8->field_34)\n
        cgc_printf(v4 - 3942);\n
    else\n
        cgc_printf(v4 - 3958);\n
    v0 = v8->field_30;\n
    return cgc_printf(v4 - 3925);\n
}\n
", "4219079:sub_4060c7": null, "4219088:cgc_print_all_users_short": "typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_root_user;\n
\n
int cgc_print_all_users_short()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_root_user;\n
    for (v1 = cgc_root_user; v1; v1 = v3)\n
    {\n
        cgc_print_user_short(v1);\n
        v3 = *((v1 + 56));\n
    }\n
    return v3;\n
}\n
", "4219171:sub_406123": null, "4219184:cgc_print_all_users_long": "typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_root_user;\n
\n
int cgc_print_all_users_long()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_root_user;\n
    for (v1 = cgc_root_user; v1; v1 = v3)\n
    {\n
        cgc_print_user_long(v1);\n
        v3 = *((v1 + 56));\n
    }\n
    return v3;\n
}\n
", "4219267:sub_406183": null, "4219280:cgc_gets": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_gets(char *v6)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v0 = &v4;\n
        v2 = cgc_receive(0, v6, 1);\n
        if (v2)\n
            break;\n
        if (!v4)\n
            break;\n
        v3 += 1;\n
        if (*(v6) == 10)\n
        {\n
            *(v6) = 0;\n
            v5 = v3;\n
            return v5;\n
        }\n
        v6 += 1;\n
    }\n
    v5 = v3;\n
    return v5;\n
}\n
", "4219456:cgc_lookupd": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lookupd()\n
{\n
    char v0;  // [bp-0x269]\n
    unsigned int v1;  // [bp-0x268]\n
    struct_0 *v2;  // [bp-0x264], Other Possible Types: unsigned int\n
    struct_1 *v3;  // [bp-0x260], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x25c]\n
    void* v5;  // [bp-0x20c], Other Possible Types: unsigned int, char *\n
    char v6;  // [bp-0x208]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v5 = cgc_receive_until(&v6, 0x200, 10);\n
    v5 = cgc_force_newline(&v6, 0x200, v5);\n
    for (v3 = 0; v3 < 19; v12->field_0 = 0)\n
    {\n
        for (v2 = &v6; cgc_isspace(v2->field_0); v2 = &v2->field_1);\n
        if (!*(v2))\n
            break;\n
        if (*(v2) == 47)\n
        {\n
            if (*((v2 + 1)) != 87 && !(*((v2 + 1)) == 119))\n
                goto LABEL_406391;\n
            v2 += 2;\n
            v10 = v3;\n
            v3 = v10 + 1;\n
            *(&(&v4)[4 * v10]) = v1 - 3912;\n
        }\n
LABEL_406391:\n
        if (*(v2) && !cgc_isspace(*(v2)))\n
        {\n
            v11 = v3;\n
            v3 = v11 + 1;\n
            *(&(&v4)[4 * v11]) = v2;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v2))\n
                    v0 = cgc_isspace(*(v2)) ^ 255;\n
                if (!(v0 & 1))\n
                    break;\n
                v2 = &v2->field_1;\n
            }\n
            v12 = v2;\n
            v2 = &v12->field_1;\n
        }\n
    }\n
    *(&(&v4)[4 * v3]) = 0;\n
    return cgc_lookup(v3, &v4);\n
}\n
", "4220056:sub_406498": null, "4220064:cgc_gen_random_str": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_gen_random_str(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_random_in_range(v5, a0);\n
    v2 = cgc_calloc(v3);\n
    for (v1 = 0; v1 < v3 - 2; v1 += 1)\n
    {\n
        v2[v1] = cgc_random_in_range(48, 126);\n
    }\n
    v7 = v4;\n
    return v2;\n
}\n
", "4220211:sub_406533": null, "4220224:cgc_gen_random_user": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[36];\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char field_34;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_gen_random_user()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    struct_0 *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_calloc(60);\n
    v2->field_0 = cgc_gen_random_str(5, 32);\n
    v1 = cgc_gen_random_str(5, 32);\n
    cgc_strcpy(&v2->padding_4, v1);\n
    cgc_free(v1);\n
    v2->field_28 = cgc_rand() & 16777215;\n
    v2->field_2c = cgc_gen_random_str(5, 64);\n
    v2->field_30 = cgc_gen_random_str(9, 9);\n
    v2->field_34 = cgc_random_in_range(0, 1);\n
    v6 = v3;\n
    return v2;\n
}\n
", "4220481:sub_406641": null, "4220496:main": "typedef struct struct_1 {\n
    char padding_0[4712];\n
    struct struct_2 *field_1268;\n
    struct struct_0 *field_126c;\n
    unsigned int field_1270;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[56];\n
    struct struct_0 *field_38;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v14, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2bc]\n
    struct_1 *v1;  // [bp-0x2b8]\n
    struct_3 *v2;  // [bp-0x2b4], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x2b0], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x2ac], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x2a8]\n
    void* v6;  // [bp-0x2a4]\n
    void* v7;  // [bp-0x2a0]\n
    char v8;  // [bp-0x298]\n
    char v9;  // [bp-0x294], Other Possible Types: unsigned int\n
    char *v10;  // [bp-0x214], Other Possible Types: unsigned int, void*\n
    char v11;  // [bp-0x210]\n
    void* v12;  // [bp-0xc]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    struct_1 *v16;  // ebx\n
    struct_1 *v17;  // eax\n
    struct_1 *v18;  // eax\n
    unsigned int v19;  // ebx\n
\n
    v13 = v15;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v12 = 0;\n
    v10 = 0;\n
    v6 = 0;\n
    v7 = 0;\n
    cgc_srand();\n
    v16 = v1;\n
    v16->field_126c = cgc_gen_random_user();\n
    v16->field_1270 = v16->field_1270 + 1;\n
    v4 = v16->field_126c;\n
    v17 = v1;\n
    v17->field_1268 = cgc_calloc(4);\n
    v17->field_1268->field_0 = v17->field_126c;\n
    for (v3 = 0; v3 < 10; v3 += 1)\n
    {\n
        v18 = v1;\n
        *((v4 + 56)) = cgc_gen_random_user();\n
        v4 = *((v4 + 56));\n
        v18->field_1270 = v18->field_1270 + 1;\n
    }\n
    while (true)\n
    {\n
        for (v2 = 0; v2 < 32; v2 += 1)\n
        {\n
            *(&(&v9)[4 * v2]) = 0;\n
        }\n
        v9 = *(&v9) | 16;\n
        v0 = &v8;\n
        v5 = cgc_fdwait(5, &v9, 0, &v6);\n
        v10 = cgc_receive_until_fd(4, &v11, 0x200, 10);\n
        v10 = cgc_force_newline(&v11, 0x200, v10);\n
        if (cgc_equals(&v11, &v1->padding_0[4311]))\n
            break;\n
        if (v10 > 0)\n
        {\n
            cgc_lookupd();\n
            cgc_send_all_fd(5, &v1->padding_0[3909], 2);\n
        }\n
    }\n
    v19 = v13;\n
    return 0;\n
}\n
", "4221132:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_random": null, "5242904:cgc_allocate": null, "5242908:cgc_rint": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}