{"4198400:_init": "extern struct_0 *g_4081dc;\n
\n
int _init()\n
{\n
    if (g_4081dc)\n
    {\n
        g_4081dc();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198496:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198512:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198528:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198544:sub_401090": "int sub_401090()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198550:sub_401096": null, "4198560:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198603:sub_4010cb": null, "4198604:sub_4010cc": "int sub_4010cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198608:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198612:sub_4010d4": null, "4198624:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28931;\n
    v6 = v5 + 42;\n
    v7 = v5 + 42;\n
    if (v7 == v6)\n
        return v5 + 42;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198675:sub_401113": "int sub_401113()\n
{\n
}\n
", "4198681:sub_401119": "int sub_401119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198688:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28867;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 42;\n
    v9 = (v6 + 42 - (v6 + 42) >> 31) + (42 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198759:sub_401167": "int sub_401167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198768:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4081d8;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4081d8)\n
    {\n
        v0 = __dso_handle;\n
        sub_401090();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198843:sub_4011bb": "int sub_4011bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198848:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198857:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198861:sub_4011cd": null, "4198864:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5 && a0)\n
    {\n
        v3 = a0 * v5;\n
        if ((0 CONCAT v3) /m a0 != v5)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = cgc_malloc();\n
        if (!v2)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v3;\n
        v4 = cgc_memset(v2, 0);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4199045:sub_401285": null, "4199056:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_isalpha())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isdigit();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199145:sub_4012e9": null, "4199152:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_islower())\n
    {\n
        v0 = v4;\n
        v2 = cgc_isupper();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199241:sub_401349": null, "4199248:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199273:sub_401369": null, "4199280:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199305:sub_401389": null, "4199312:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199337:sub_4013a9": null, "4199344:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return ((v0 & -128) ^ 255) & 1;\n
}\n
", "4199371:sub_4013cb": null, "4199376:cgc_isblank": "int cgc_isblank(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
        v1 = v2 == 9;\n
    return v1 & 1;\n
}\n
", "4199421:sub_4013fd": null, "4199424:cgc_iscntrl": "int cgc_iscntrl(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 127)\n
        v1 = v2 < 32;\n
    return v1 & 1;\n
}\n
", "4199469:sub_40142d": null, "4199472:cgc_isgraph": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isgraph(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v3 != 32)\n
    {\n
        v0 = v3;\n
        v2 = cgc_isprint();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4199549:sub_40147d": null, "4199552:cgc_isprint": "int cgc_isprint(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2 >= 32)\n
        v1 = v2 != 127;\n
    return v1 & 1;\n
}\n
", "4199597:sub_4014ad": null, "4199600:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8672 + v0];\n
}\n
", "4199631:sub_4014cf": null, "4199632:cgc_isspace": "int cgc_isspace(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (v2 > 8)\n
    {\n
        v1 = 1;\n
        if (v2 < 14)\n
            return v1 & 1;\n
    }\n
    v1 = v2 == 32;\n
    return v1 & 1;\n
}\n
", "4199687:sub_401507": null, "4199696:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8544 + v0];\n
}\n
", "4199727:sub_40152f": null, "4199728:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199742:sub_40153e": null, "4199744:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 | 32;\n
    return v0;\n
}\n
", "4199815:sub_401587": null, "4199824:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 & 95;\n
    return v0;\n
}\n
", "4199895:sub_4015d7": null, "4199904:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v3[2])\n
{\n
    unsigned int v0[2];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    v2[0] = v3 + 3;\n
    v4 = v2;\n
    if (*((v4 + 4)))\n
    {\n
        return v2;\n
    }\n
    else if (v2[0] >= 0x40000)\n
    {\n
        v0[0] = v2;\n
        v4 = cgc_free_huge();\n
        return v4;\n
    }\n
    else\n
    {\n
        v0[0] = v2;\n
        cgc_insert_into_flist();\n
        v0[0] = v2;\n
        v4 = cgc_coalesce();\n
        return v4;\n
    }\n
}\n
", "4200039:sub_401667": null, "4200048:cgc_free_huge": "int cgc_free_huge(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = *(v1);\n
    return cgc_deallocate(v1);\n
}\n
", "4200096:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v7)\n
{\n
    struct struct_1 **v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[6];  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct struct_1 **v4;  // [bp-0x14]\n
    struct_1 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    else if (v7 + 24 < 0x40000)\n
    {\n
        if ((v7 & 7))\n
            v7 = v7 - -7 & -8;\n
        if (v7 >= 0x80000000)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        v7 += 24;\n
        v5 = 0;\n
        v0 = &v5;\n
        v4 = cgc_find_fit(v7);\n
        if (!v5)\n
        {\n
            if (!cgc_allocate_new_blk())\n
            {\n
                v4 = 31;\n
                v5 = *((v1 + 172 + v4 * 4));\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
        cgc_remove_from_flist();\n
        v3 = *(v5) - v7;\n
        if (v3 > 48)\n
        {\n
            v2[0] = v5 + v7;\n
            v2[0] = v3;\n
            v2[1] = 1;\n
            v2[2] = 0;\n
            v2[3] = 0;\n
            *(v5) = v7;\n
            v2[5] = v5;\n
            v2[4] = *((v5 + 16));\n
            if (*((v5 + 16)))\n
                *((*((v5 + 16)) + 20)) = v2;\n
            *((v5 + 16)) = v2;\n
            cgc_insert_into_flist();\n
        }\n
        v6 = v5 + 24;\n
        return v6;\n
    }\n
    else\n
    {\n
        v6 = cgc_malloc_huge();\n
        return v6;\n
    }\n
}\n
", "4200529:sub_401851": null, "4200544:cgc_malloc_huge": "int cgc_malloc_huge(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[6];  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v4 += 24;\n
    v0 = &v2;\n
    if (cgc_allocate(v4, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v4;\n
    v1[1] = 0;\n
    v1[3] = 0;\n
    v1[2] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v3 = v1 + 1;\n
    return v3;\n
}\n
", "4200706:sub_401902": null, "4200720:cgc_find_fit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_fit(unsigned int v5, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v5;\n
    for (v2 = cgc_get_size_class(); v2 < 32; v2 = v2 + 1)\n
    {\n
        for (*(a0) = *((v1 + 172 + v2 * 4)); *(a0); *(a0) = *(a0)->field_8)\n
        {\n
            if (*(a0)->field_0 >= v5)\n
            {\n
                v3 = v2;\n
                return v3;\n
            }\n
        }\n
    }\n
    *(a0) = 0;\n
    v3 = -1;\n
    return v3;\n
}\n
", "4200898:sub_4019c2": null, "4200912:cgc_allocate_new_blk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_new_blk()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[6];  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0x40000;\n
    v0 = &v4;\n
    if (cgc_allocate(v2, 0))\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    else if (*(&v4))\n
    {\n
        v3[0] = *(&v4);\n
        v3[0] = v2;\n
        v3[1] = 1;\n
        v3[3] = 0;\n
        v3[2] = 0;\n
        v3[5] = 0;\n
        v3[4] = 0;\n
        cgc_insert_into_flist();\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
}\n
", "4201106:sub_401a92": null, "4201120:cgc_get_size_class": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_size_class(unsigned int v3)\n
{\n
    char v0;  // [bp-0xd]\n
    unsigned int v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v2 < 32)\n
            v0 = !(v3 <= *((v1 + (v2 << 2) + 40)));\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4201231:sub_401b0f": null, "4201232:cgc_insert_into_flist": "extern unsigned int _GLOBAL_OFFSET_TABLE_[4];\n
\n
int cgc_insert_into_flist(unsigned int v3[4])\n
{\n
    unsigned int v0[4];  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5[4];  // eax, Other Possible Types: unsigned int\n
    unsigned int v6[4];  // eax\n
\n
    v2 = v4;\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v1 = cgc_get_size_class(v3[0]);\n
    v3[1] = 1;\n
    if (!v0[10 + 3 + v1])\n
    {\n
        v5 = v0;\n
        v5[10 + 3 + v1] = v3;\n
        return v0;\n
    }\n
    v6 = v0;\n
    v3[2] = v6[10 + 3 + v1];\n
    *((v6[10 + 3 + v1] + 12)) = v3;\n
    v6[10 + 3 + v1] = v3;\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    return v3;\n
}\n
", "4201390:sub_401bae": null, "4201392:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_size_class(v3->field_0);\n
    if (v3->field_c)\n
        v3->field_c->field_8 = v3->field_8;\n
    if (v3->field_8)\n
        v3->field_8->field_c = v3->field_c;\n
    if (*((v0 + (v1 << 2) + 172)) == v3)\n
        *((v0 + v1 * 4 + 172)) = v3->field_8;\n
    v3->field_8 = 0;\n
    v3->field_c = 0;\n
    v3->field_4 = 0;\n
    return v3;\n
}\n
", "4201566:sub_401c5e": null, "4201568:cgc_coalesce": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[12];\n
    struct struct_1 *field_10;\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[2];  // eax\n
    unsigned int v3[2];  // eax\n
    unsigned int v4[2];  // eax\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int, unsigned int [2]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1->field_10);\n
        cgc_remove_from_flist(v1);\n
        v2 = v1->field_14;\n
        v2[0] = v1->field_0 + v2[0];\n
        v3 = v1->field_14;\n
        v3[0] = v1->field_10->field_0 + v3[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        cgc_remove_from_blist();\n
        v6 = cgc_remove_from_blist();\n
        return v6;\n
    }\n
    if (v1->field_14 && v1->field_14->field_4 && v1->field_10 && !v1->field_10->field_4)\n
    {\n
        cgc_remove_from_flist(v1->field_14);\n
        cgc_remove_from_flist(v1);\n
        v4 = v1->field_14;\n
        v4[0] = v1->field_0 + v4[0];\n
        cgc_insert_into_flist(v1->field_14);\n
        v6 = cgc_remove_from_blist();\n
        goto LABEL_401e4c;\n
    }\n
    v6 = v1;\n
    if (v6->field_14)\n
    {\n
        v6 = v1->field_14;\n
        if (!v6[1])\n
        {\n
            v6 = v1;\n
            if (v6->field_10)\n
            {\n
                v6 = v1->field_10;\n
                if (v6[1])\n
                {\n
                    cgc_remove_from_flist(v1->field_10);\n
                    cgc_remove_from_flist(v1);\n
                    v5 = v1;\n
                    v5->field_0 = v1->field_10->field_0 + v5->field_0;\n
                    cgc_insert_into_flist(v1);\n
                    v6 = cgc_remove_from_blist();\n
                }\n
            }\n
        }\n
    }\n
LABEL_401e4c:\n
    return v6;\n
}\n
", "4202076:sub_401e5c": null, "4202080:cgc_remove_from_blist": "typedef struct struct_1 {\n
    char padding_0[16];\n
    struct struct_1 *field_10;\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int cgc_remove_from_blist(struct_1 *v0)\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int\n
\n
    if (v0->field_14)\n
        v0->field_14->field_10 = v0->field_10;\n
    v1 = v0;\n
    if (v1->field_10)\n
    {\n
        v1 = v0->field_10;\n
        *((v1 + 20)) = v0->field_14;\n
    }\n
    return v1;\n
}\n
", "4202144:cgc_memchr": "int cgc_memchr(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)) != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4202240:cgc_memcmp": "int cgc_memcmp(char *v2, char *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*(v2) != *(a0))\n
        {\n
            v1 = *(v2) - *(a0);\n
            return v1;\n
        }\n
        v2 += 1;\n
        a0 += 1;\n
        v0 += 1;\n
    }\n
}\n
", "4202368:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4202454:sub_401fd6": null, "4202464:cgc_memmove": "int cgc_memmove(char *v3, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v0 = v3;\n
    if (v0 >= v1)\n
    {\n
        if (v0 <= v1)\n
            return v3;\n
        for (v2 = a1; v2 > 0; v2 -= 1)\n
        {\n
            *((v0 + v2 - 1)) = v1[1 + v2];\n
        }\n
    }\n
    else\n
    {\n
        for (v2 = 0; v2 < a1; v2 += 1)\n
        {\n
            *((v0 + v2)) = v1[v2];\n
        }\n
        return v3;\n
    }\n
}\n
", "4202643:sub_402093": null, "4202656:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v4;  // eax\n
\n
    if (!v3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (a1)\n
    {\n
        v1 = v3;\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            *(v4) = a0;\n
        }\n
        v2 = v3;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v3;\n
        return v2;\n
    }\n
}\n
", "4202785:sub_402121": null, "4202800:cgc_output_number_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_printf(unsigned int v8, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a0 >= a1)\n
    {\n
        v7 = cgc_output_number_printf(v8, (0 CONCAT a0) /m a1, a1, a2 - 1, a3);\n
        a0 = (0 CONCAT a0) /m a1 >> 32;\n
    }\n
    if (!v7 && a2 > 0)\n
    {\n
        while (true)\n
        {\n
            a2 -= 1;\n
            if (!a2)\n
                break;\n
            if ((a3 & 1))\n
            {\n
                v6 = 48;\n
                cgc_transmit(v8, &v6, 1);\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                cgc_transmit(v8, &v5, 1);\n
            }\n
        }\n
    }\n
    if ((a3 & 2))\n
    {\n
        if (a0 < 10)\n
            v1 = a0 + 48;\n
        else\n
            v1 = a0 + 55;\n
        v4 = v1;\n
        cgc_transmit(v8, &v4, 1);\n
        return v7 + 1;\n
    }\n
    else\n
    {\n
        if (a0 < 10)\n
            v0 = a0 + 48;\n
        else\n
            v0 = a0 + 87;\n
        v3 = v0;\n
        cgc_transmit(v8, &v3, 1);\n
        return v7 + 1;\n
    }\n
}\n
", "4203299:sub_402323": null, "4203312:cgc_fdprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fdprintf(unsigned int v20, char *a0)\n
{\n
    char *v0;  // [bp-0x74]\n
    unsigned int v1;  // [bp-0x70]\n
    unsigned int v2;  // [bp-0x6c]\n
    unsigned int v3;  // [bp-0x68]\n
    char v4;  // [bp-0x61]\n
    char v5;  // [bp-0x59]\n
    char v6;  // [bp-0x51]\n
    char v7;  // [bp-0x49]\n
    char v8;  // [bp-0x41]\n
    char v9;  // [bp-0x39]\n
    char v10;  // [bp-0x31]\n
    struct struct_0 **v11;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v12;  // [bp-0x2c]\n
    void* v13;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    char *v17;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v18;  // [bp-0x11]\n
    char *v19;  // [bp-0x10]\n
    char v21;  // [bp+0xc]\n
    char *v22;  // eax\n
    char *v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    struct struct_0 **v25;  // eax\n
    struct struct_0 **v26;  // eax\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = 0;\n
    v14 = 0;\n
    v13 = 0;\n
    v11 = &v21;\n
    while (*(a0))\n
    {\n
        v22 = a0;\n
        a0 = v22 + 1;\n
        v10 = *(v22);\n
        if (v10 != 37)\n
        {\n
            v4 = v10;\n
            cgc_transmit(v20, &v4, 1);\n
LABEL_402706:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v23 = a0;\n
                    a0 = v23 + 1;\n
                    v10 = *(v23);\n
                    v2 = v10;\n
                    if (v2 != 48)\n
                        break;\n
                    v14 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v10;\n
            if (v1 == 37)\n
            {\n
                v9 = 37;\n
                cgc_transmit(v20, &v9, 1);\n
                goto LABEL_4026bf;\n
            }\n
            if (v1 == 88)\n
            {\n
                v14 |= 2;\n
            }\n
            else if (v1 == 99)\n
            {\n
                v24 = v11;\n
                v11 = v24 + 1;\n
                v18 = *(v24);\n
                v6 = v18;\n
                cgc_transmit(v20, &v6, 1);\n
                goto LABEL_4026bf;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v25 = v11;\n
                    v11 = v25 + 1;\n
                    v17 = &*(v25)->field_0;\n
                    if (v17 < 0)\n
                    {\n
                        v7 = 45;\n
                        cgc_transmit(v20, &v7, 1);\n
                        v17 = -(v17);\n
                    }\n
                    cgc_output_number_printf(v20, v17, 10, v13, v14);\n
                    goto LABEL_4026bf;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v26 = v11;\n
                    v11 = v26 + 1;\n
                    v19 = &*(v26)->field_0;\n
                    v16 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v16;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v8 = v19[v16];\n
                        cgc_transmit(v20, &v8, 1);\n
                        v16 += 1;\n
                    }\n
                    goto LABEL_4026bf;\n
                }\n
                if (v1 == 117)\n
                {\n
                    v27 = v11;\n
                    v11 = v27 + 1;\n
                    v12 = &*(v27)->field_0;\n
                    cgc_output_number_printf(v20, v12, 10, v13, v14);\n
                    goto LABEL_4026bf;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v10;\n
                    cgc_transmit(v20, &v5, 1);\n
LABEL_4026bf:\n
                    v13 = 0;\n
                    v14 = 0;\n
                    goto LABEL_402706;\n
                }\n
            }\n
            v28 = v11;\n
            v11 = v28 + 1;\n
            v12 = &*(v28)->field_0;\n
            cgc_output_number_printf(v20, v12, 16, v13, v14);\n
            goto LABEL_4026bf;\n
        }\n
    }\n
    return v15;\n
}\n
", "4204312:sub_402718": null, "4204320:cgc_output_number_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_output_number_sprintf(unsigned int *v8, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    char v3;  // [bp-0x31]\n
    char v4;  // [bp-0x29]\n
    char v5;  // [bp-0x21]\n
    char v6;  // [bp-0x19]\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // eax\n
    unsigned int *v10;  // eax\n
    struct struct_0 **v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    if (a1 >= a2)\n
    {\n
        v7 = cgc_output_number_sprintf(v8, a0, (0 CONCAT a1) /m a2, a2, a3 - 1, a4);\n
        a1 = (0 CONCAT a1) /m a2 >> 32;\n
    }\n
    if (!v7 && a3 > 0)\n
    {\n
        while (true)\n
        {\n
            a3 -= 1;\n
            if (!a3)\n
                break;\n
            if ((a4 & 1))\n
            {\n
                v6 = 48;\n
                *(a0)->field_0 = v6;\n
            }\n
            else\n
            {\n
                v5 = 32;\n
                *(a0)->field_0 = v5;\n
            }\n
            v9 = a0;\n
            *(v9) = *(v9) + 1;\n
            v10 = v8;\n
            *(v10) = *(v10) + 1;\n
        }\n
    }\n
    if ((a4 & 2))\n
    {\n
        if (a1 < 10)\n
            v1 = a1 + 48;\n
        else\n
            v1 = a1 + 55;\n
        v4 = v1;\n
        *(a0)->field_0 = v4;\n
    }\n
    else\n
    {\n
        if (a1 < 10)\n
            v0 = a1 + 48;\n
        else\n
            v0 = a1 + 87;\n
        v3 = v0;\n
        *(a0)->field_0 = v3;\n
    }\n
    v11 = a0;\n
    *(v11) = *(v11) + 1;\n
    v12 = v8;\n
    *(v12) = *(v12) + 1;\n
    return v7 + 1;\n
}\n
", "4204805:sub_402905": null, "4204816:cgc_sprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprintf(char *v18, char *a0)\n
{\n
    char *v0;  // [bp-0x6c]\n
    unsigned int v1;  // [bp-0x68]\n
    unsigned int v2;  // [bp-0x64]\n
    unsigned int v3;  // [bp-0x60]\n
    char v4;  // [bp-0x59]\n
    char v5;  // [bp-0x51]\n
    char v6;  // [bp-0x49]\n
    char v7;  // [bp-0x41]\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x31]\n
    struct struct_0 **v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    char *v17;  // [bp-0x14]\n
    char v19;  // [bp+0xc]\n
    char *v20;  // eax\n
    char *v21;  // eax\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    v13 = 0;\n
    v12 = 0;\n
    v10 = &v19;\n
    while (*(a0))\n
    {\n
        v20 = a0;\n
        a0 = v20 + 1;\n
        v9 = *(v20);\n
        if (v9 != 37)\n
        {\n
            v4 = v9;\n
            *(v18) = v4;\n
            v18 += 1;\n
            v14 += 1;\n
LABEL_402c1f:\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                while (true)\n
                {\n
                    v21 = a0;\n
                    a0 = v21 + 1;\n
                    v9 = *(v21);\n
                    v2 = v9;\n
                    if (v2 != 48)\n
                        break;\n
                    v13 |= 1;\n
                }\n
                if (v2 - 49 >= 9)\n
                    break;\n
                v12 = cgc_strtol(a0 - 1, &a0);\n
            }\n
            v1 = v9;\n
            if (v1 == 37)\n
            {\n
                v8 = 37;\n
                *(v18) = v8;\n
                v18 += 1;\n
                v14 += 1;\n
                goto LABEL_402be2;\n
            }\n
            if (v1 == 88)\n
            {\n
                v13 |= 2;\n
            }\n
            else\n
            {\n
                if (v1 == 100)\n
                {\n
                    v22 = v10;\n
                    v10 = v22 + 1;\n
                    v16 = *(v22);\n
                    if (v16 < 0)\n
                    {\n
                        v6 = 45;\n
                        *(v18) = v6;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v16 = -(v16);\n
                    }\n
                    cgc_output_number_sprintf(&v14, &v18, v16, 10, v12, v13);\n
                    goto LABEL_402be2;\n
                }\n
                if (v1 == 115)\n
                {\n
                    v23 = v10;\n
                    v10 = v23 + 1;\n
                    v17 = &*(v23)->field_0;\n
                    v15 = 0;\n
                    while (true)\n
                    {\n
                        v0 = v15;\n
                        if (v0 >= cgc_strlen())\n
                            break;\n
                        v7 = v17[v15];\n
                        *(v18) = v7;\n
                        v18 += 1;\n
                        v14 += 1;\n
                        v15 += 1;\n
                    }\n
                    goto LABEL_402be2;\n
                }\n
                if (v1 != 120)\n
                {\n
                    v5 = v9;\n
                    *(v18) = v5;\n
                    v18 += 1;\n
                    v14 += 1;\n
LABEL_402be2:\n
                    v12 = 0;\n
                    v13 = 0;\n
                    goto LABEL_402c1f;\n
                }\n
            }\n
            v24 = v10;\n
            v10 = v24 + 1;\n
            v11 = &*(v24)->field_0;\n
            cgc_output_number_sprintf(&v14, &v18, v11, 16, v12, v13);\n
            goto LABEL_402be2;\n
        }\n
    }\n
    v25 = v18;\n
    v18 = v25 + 1;\n
    *(v25) = 0;\n
    return v14;\n
}\n
", "4205629:sub_402c3d": null, "4205632:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(char *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc(a0);\n
        return v3;\n
    }\n
    else if (a0)\n
    {\n
        v2 = cgc_malloc(a0);\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v1 = &v4[24];\n
        if (a0 >= *(v1) - 24)\n
            cgc_memcpy(v2, v4, *(v1) - 24);\n
        else\n
            cgc_memcpy(v2, v4, a0);\n
        cgc_free(v4);\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free(v4);\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4205890:sub_402d42": null, "4205904:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v6, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v6;\n
    v4 = a0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (*(v5))\n
            v2 = *(v4);\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    return v0 - cgc_tolower(*(v4));\n
}\n
", "4206143:sub_402e3f": null, "4206144:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    v0 = a0;\n
    cgc_strcpy(v2 + cgc_strlen());\n
    v6 = v3;\n
    return v4;\n
}\n
", "4206221:sub_402e8d": null, "4206224:cgc_strchr": "int cgc_strchr(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = v2; *(v0); v0 += 1)\n
    {\n
        if (*(v0) == a0)\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4206330:sub_402efa": null, "4206336:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4206464:cgc_strcpy": "int cgc_strcpy(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v0 = v2;\n
    for (v0 = 0; *(a0); *((v1 + v4)) = *(v3))\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4206548:sub_402fd4": null, "4206560:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen() + 1;\n
    v1 = cgc_malloc(v2);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v3 = v1;\n
    return v3;\n
}\n
", "4206684:sub_40305c": null, "4206688:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(v0); v0 += 1);\n
    return v0 - v1;\n
}\n
", "4206740:sub_403094": null, "4206752:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v7, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x19]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v7;\n
    v4 = a0;\n
    v8 = a1;\n
    a1 = v8 - 1;\n
    if (!v8)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (a1)\n
        {\n
            v2 = 0;\n
            if (*(v5))\n
                v2 = *(v4);\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        if (*(v5) != *(v4))\n
        {\n
            v1 = cgc_tolower(*(v5));\n
            if (v1 != cgc_tolower(*(v4)))\n
                break;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
    v0 = cgc_tolower(*(v5));\n
    v6 = v0 - cgc_tolower(*(v4));\n
    return v6;\n
}\n
", "4207052:sub_4031cc": null, "4207056:cgc_strncmp": "int cgc_strncmp(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
\n
    v3 = a1;\n
    a1 = v3 - 1;\n
    if (!v3)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    while (true)\n
    {\n
        v4 = a1;\n
        a1 = v4 - 1;\n
        v0 = 0;\n
        if (v4)\n
        {\n
            v0 = 0;\n
            if (*(v2))\n
                v0 = *(a0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        if (*(v2) != *(a0))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    v1 = *(v2) - *(a0);\n
    return v1;\n
}\n
", "4207257:sub_403299": null, "4207264:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
        if (!v0[v1])\n
            break;\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4207406:sub_40332e": null, "4207408:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, char *a0)\n
{\n
    char v0;  // [bp-0x15]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(v2))\n
            v0 = cgc_strchr(a0, *(v2)) ^ 255;\n
        if (!(v0 & 1))\n
            break;\n
        v2 += 1;\n
    }\n
    a0 = &*(v4)->field_0;\n
    if (!*(v2))\n
    {\n
        *(v4) = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        *(v4) = v2 + 1;\n
    }\n
    v3 = a0;\n
    return v3;\n
}\n
", "4207624:sub_403408": null, "4207632:cgc_strtol": "int cgc_strtol(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x28]\n
    char v2;  // [bp-0x27]\n
    char v3;  // [bp-0x26]\n
    char v4;  // [bp-0x25]\n
    unsigned int v5;  // [bp-0x24]\n
    char v6[2];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    *(&v6) = v12;\n
    if (a1 == 1)\n
    {\n
LABEL_403458:\n
    }\n
    else\n
    {\n
        if (!(a1 <= 36))\n
            goto LABEL_403458;\n
        if (a1 < 0)\n
            goto LABEL_403458;\n
        while (true)\n
        {\n
            if (v6[0] != 32 && v6[0] != 9 && v6[0] != 12 && v6[0] != 10 && v6[0] != 11)\n
                break;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 45)\n
        {\n
            v11 = 1;\n
            v6 += 1;\n
        }\n
        if (*(v6) == 43)\n
            v6 += 1;\n
        v5 = a1;\n
        if (!v5)\n
        {\n
            if (*(v6) != 48)\n
            {\n
                a1 = 10;\n
            }\n
            else if (*((v6 + 1)) == 120)\n
            {\n
LABEL_40354f:\n
                v6 += 2;\n
                a1 = 16;\n
            }\n
            else\n
            {\n
                if (*((v6 + 1)) == 88)\n
                    goto LABEL_40354f;\n
                v6 += 1;\n
                a1 = 8;\n
            }\n
        }\n
        else\n
        {\n
            if (v5 == 16)\n
            {\n
                if (*(v6) == 48)\n
                {\n
                    if (*((v6 + 1)) != 120 && !(*((v6 + 1)) == 88))\n
                        goto LABEL_4035c4;\n
                    v6 += 2;\n
                    a1 = 16;\n
                }\n
LABEL_4035c4:\n
            }\n
        }\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) >= 48)\n
                v4 = *(v6) <= 57;\n
            v8 = v4 & 1;\n
            v3 = 1;\n
            if (!(v4 & 1))\n
                break;\n
            if (!(v3 & 1))\n
                goto LABEL_403722;\n
            if (v8)\n
            {\n
                v8 = *(v6) - 48;\n
                goto LABEL_4036e2;\n
            }\n
            if (!v7)\n
            {\n
LABEL_4036e2:\n
                if (v8 >= a1)\n
                    goto LABEL_403722;\n
                v10 *= a1;\n
                v10 = v8 + v10;\n
                v9 += 1;\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                if (*(v6) >= 65 && *(v6) <= 90)\n
                {\n
                    v8 = *(v6) - 65;\n
                    goto LABEL_4036d9;\n
                }\n
                v8 = *(v6) - 97;\n
LABEL_4036d9:\n
                v8 += 10;\n
                goto LABEL_4036e2;\n
            }\n
        }\n
        if (*(v6) >= 65)\n
        {\n
            v2 = 1;\n
            if (*(v6) <= 90)\n
                goto LABEL_403658;\n
        }\n
        v1 = 0;\n
        if (*(v6) >= 97)\n
            v1 = *(v6) <= 122;\n
        v2 = v1;\n
LABEL_403658:\n
        v7 = v2 & 1;\n
        v3 = v2;\n
LABEL_403722:\n
        if (v11)\n
            v10 = -(v10);\n
    }\n
    if (!a0)\n
        return v10;\n
    if (v9 > 0)\n
        *(&v0) = v6;\n
    else\n
        v0 = v12;\n
    *(a0) = v0;\n
    return v10;\n
}\n
", "4208494:sub_40376e": null, "4208496:cgc_strtoul": "int cgc_strtoul(char v0[2], unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4208555:sub_4037ab": null, "4208560:cgc_pre_process": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pre_process(unsigned int v12, unsigned int *a0, unsigned int *a1)\n
{\n
    char v0;  // [bp-0x2b]\n
    char v1;  // [bp-0x2a]\n
    char v2;  // [bp-0x29]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4[2];  // [bp-0x24], Other Possible Types: void*\n
    unsigned int v5[2];  // [bp-0x20]\n
    unsigned int v6[2];  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int, char *\n
    char *v9;  // [bp-0x10]\n
    unsigned int v10[2];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int *v14;  // eax\n
\n
    v11 = v13;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = v12 + 24;\n
    v8 = 0;\n
    *(a0) = 0;\n
    *(a1) = 1;\n
    v6[0] = 0;\n
    v8 = cgc_strsep(&v9, \"\\n
\");\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v8)\n
        {\n
            v1 = 1;\n
            if (!cgc_strlen(v8))\n
            {\n
                v0 = 0;\n
                if (v9)\n
                    v0 = cgc_strlen(v9);\n
                v1 = v0;\n
            }\n
            v2 = v1;\n
        }\n
        if (!(v2 & 1))\n
            break;\n
        v4[0] = cgc_malloc(8);\n
        if (!v4)\n
        {\n
            v10[0] = 0;\n
            return v10;\n
        }\n
        v7 = cgc_new_linecmp();\n
        if (v7)\n
        {\n
            v4[0] = v7;\n
            v4[1] = 0;\n
            if (!v6)\n
                v6[0] = v4;\n
            else\n
                v5[1] = v4;\n
            v5[0] = v4;\n
            v8 = cgc_strsep(&v9, v3 - 8409);\n
            a0 = &a0[cgc_count_words(v8)];\n
            v14 = a1;\n
            *(v14) = *(v14) + 1;\n
        }\n
        else\n
        {\n
            cgc_free(v4);\n
            v4 = 0;\n
            break;\n
        }\n
    }\n
    v10 = v6;\n
    return v10;\n
}\n
", "4208994:sub_403962": null, "4209008:cgc_new_linecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_new_linecmp(unsigned int v11)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1[6];  // [bp-0x30]\n
    unsigned int v2[6];  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    char v4;  // [bp-0x24]\n
    char v5;  // [bp-0x20]\n
    char v6;  // [bp-0x1c]\n
    char v7;  // [bp-0x18]\n
    unsigned int v8[6];  // [bp-0x10]\n
    unsigned int v9[6];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14[6];  // eax\n
    unsigned int v15[6];  // eax\n
\n
    v10 = v13;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v11)\n
    {\n
        v9[0] = 0;\n
        return v9;\n
    }\n
    v8[0] = cgc_malloc(24);\n
    if (!v8)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8[0] = v11;\n
    v8[1] = cgc_get_no_ws_line();\n
    v1[0] = v8;\n
    v0 = v11;\n
    cgc_get_lhash(&v6);\n
    v14 = v1;\n
    v14[2] = *(&v6);\n
    v14[3] = *(&v7);\n
    v2[0] = v8;\n
    cgc_get_lhash(&v4);\n
    v15 = v2;\n
    v15[4] = *(&v4);\n
    v15[5] = *(&v5);\n
    v9 = v8;\n
    return v9;\n
}\n
", "4209233:sub_403a51": null, "4209248:cgc_count_words": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_count_words(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v3 = cgc_strlen(v6);\n
    v2 = 0;\n
    for (v4 = 0; v4 < v3; v4 += 1)\n
    {\n
        if (!cgc_strchr(v1 - 8416, v6[v4]))\n
            v2 += 1;\n
    }\n
    if (!v3)\n
        v0 = v2;\n
    else\n
        v0 = v2 + 1;\n
    v2 = v0;\n
    v5 = v2;\n
    return v5;\n
}\n
", "4209457:sub_403b31": null, "4209472:cgc_get_no_ws_line": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_no_ws_line(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char *v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v7;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = cgc_strlen(v6) + 1;\n
    v2 = 0;\n
    v2 = cgc_malloc(v4);\n
    if (!v2)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_memset(v2, 0, v4);\n
    v1 = v2;\n
    for (v3 = 0; v3 < v4; v3 += 1)\n
    {\n
        if (!cgc_strchr(v0 - 8411, v6[v3]))\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            *(v7) = v6[v3];\n
        }\n
    }\n
    v5 = v2;\n
    return v5;\n
}\n
", "4209737:sub_403c49": null, "4209744:cgc_free_linecmp_list": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_3 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4[2];\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_linecmp_list(struct struct_1 **v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_3 *v1;  // [bp-0x10]\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = *(v3);\n
    while (v2)\n
    {\n
        v1 = v2;\n
        v2 = *((v2 + 4));\n
        if (v1->field_0->field_4)\n
            cgc_free(v1->field_0->field_4);\n
        cgc_free(v1->field_0);\n
        cgc_free(v1);\n
    }\n
    *(v3) = 0;\n
    return v3;\n
}\n
", "4209886:sub_403cde": null, "4209888:cgc_compare_files": "typedef struct struct_0 {\n
    char padding_0[3];\n
    char field_3;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[79];\n
\n
int cgc_compare_files(struct_0 *v5, struct_0 *a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0[79];  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
    unsigned int v7[79];  // ebx\n
    unsigned int v8[79];  // eax\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (v5 && a0)\n
    {\n
        if (!a2)\n
        {\n
            if (v5->field_3 != a0->field_3)\n
            {\n
                v6 = cgc_fdprintf(1, &v0[26 + 36] + 3);\n
                return v6;\n
            }\n
            else if (!v5->field_3)\n
            {\n
                v6 = cgc_compare_binary_files(v5);\n
                return v6;\n
            }\n
        }\n
        if (!v0[75])\n
        {\n
            if (!v0[76])\n
                v0[76] = cgc_pre_process(v5, &v4, &v3);\n
            if (!v0[76])\n
            {\n
                v6 = cgc_fdprintf(1, &v0[26 + 13]);\n
                return v6;\n
            }\n
            if (!v0[77])\n
                v0[77] = cgc_pre_process(a0, &v2, &v1);\n
            if (!v0[77])\n
            {\n
                v6 = cgc_fdprintf(1, &v0[26 + 5] + 1);\n
                return v6;\n
            }\n
            v7 = v0;\n
            v8 = v0;\n
            v8[78] = cgc_compare_lines(v7[76], v7[77]);\n
            v8[75] = 1;\n
        }\n
        v6 = cgc_print_diff();\n
        return v6;\n
    }\n
    v6 = cgc_fdprintf(1, &v0[26 + 47] + 3);\n
    return v6;\n
}\n
", "4210368:cgc_compare_binary_files": "typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_compare_binary_files(struct_0 *v4, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4->field_14 == a0->field_14)\n
    {\n
        v3 = 0;\n
        v3 = 0;\n
        while (true)\n
        {\n
            if (v3 >= v4->field_14)\n
            {\n
                v5 = cgc_fdprintf(1, v2 - 8164);\n
                return v5;\n
            }\n
            if (*((v4 + v3 + 24)) != *((a0 + v3 + 24)))\n
                break;\n
            v3 += 1;\n
        }\n
    }\n
    v0 = &v4->padding_0[4];\n
    v1 = &a0->padding_0[4];\n
    v5 = cgc_fdprintf(1, v2 - 8206);\n
    return v5;\n
}\n
", "4210588:sub_403f9c": null, "4210592:cgc_compare_lines": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_compare_lines(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a0;\n
    v1 = a1;\n
    v4 = cgc_generate_matches(v6, v0);\n
    v3 = cgc_find_best_match_set(v4, v0);\n
    v8 = v5;\n
    return v3;\n
}\n
", "4210677:sub_403ff5": null, "4210688:cgc_clear_cache": "typedef struct struct_1 {\n
    char padding_0[300];\n
    unsigned int field_12c;\n
    char padding_130[8];\n
    struct struct_2 *field_138;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0[2];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear_cache(unsigned int v2)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int [2]\n
    struct_1 *v3;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1[0] = 0;\n
    while (v0->field_138)\n
    {\n
        v3 = v0;\n
        v1 = &v3->field_138->field_0;\n
        v3->field_138 = v3->field_138->field_4;\n
        cgc_free(v1->field_0);\n
        cgc_free(v1);\n
    }\n
    v0->field_138 = 0;\n
    if (v2 == 1)\n
    {\n
        cgc_free_linecmp_list(&v0->padding_130);\n
    }\n
    else if (v2 == 2)\n
    {\n
        cgc_free_linecmp_list(&v0->padding_130[4]);\n
    }\n
    v0->field_12c = 0;\n
    return v0;\n
}\n
", "4210891:sub_4040cb": null, "4210896:cgc_generate_matches": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0[2];\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_generate_matches(struct_0 *v17, struct_0 *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x49]\n
    unsigned int v1;  // [bp-0x48]\n
    void* v2;  // [bp-0x44], Other Possible Types: unsigned int\n
    struct_1 *v3;  // [bp-0x40], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_3 *v5;  // [bp-0x38]\n
    unsigned int v6[2];  // [bp-0x34], Other Possible Types: unsigned int, struct_1 *\n
    unsigned int v7[3];  // [bp-0x30]\n
    char v8;  // [bp-0x2c]\n
    unsigned int v9;  // [bp-0x28]\n
    unsigned int v10;  // [bp-0x24]\n
    void* v11;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v13;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v14;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_0 *v15;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v16;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v17;\n
    v14 = a0;\n
    v13 = v15;\n
    v12 = 0;\n
    v11 = 0;\n
    v6 = 0;\n
    for (v2 = 0; v15; v12 += 1)\n
    {\n
        v14 = a0;\n
        v11 = 0;\n
        while (v14)\n
        {\n
            v13 = v15;\n
            v2 = 0;\n
            cgc_memset(&v8, 0, 12);\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v13)\n
                {\n
                    v0 = 0;\n
                    if (v14)\n
                        v0 = !cgc_compare_line(*(v13), *(v14));\n
                }\n
                if (!(v0 & 1))\n
                    break;\n
                if (!v2)\n
                {\n
                    v9 = v12;\n
                    *(&v8) = v11;\n
                    v10 = 1;\n
                    v2 = 1;\n
                }\n
                else\n
                {\n
                    v10 += 1;\n
                }\n
                v13 = v13->field_4;\n
                v14 = *((v14 + 4));\n
                v11 += 1;\n
            }\n
            if (!v2)\n
            {\n
                v14 = *((v14 + 4));\n
                v11 += 1;\n
            }\n
            else\n
            {\n
                v7[0] = cgc_malloc(12);\n
                if (!v7)\n
                {\n
                    v16 = v6;\n
                    return v16;\n
                }\n
                cgc_memcpy(v7, &v8, 12);\n
                v5 = cgc_malloc(8);\n
                if (!v5)\n
                {\n
                    cgc_free(v7);\n
                    v16 = v6;\n
                    return v16;\n
                }\n
                v5->field_0 = &v7[0];\n
                v5->field_4 = 0;\n
                if (!v6)\n
                {\n
                    v6[0] = v5;\n
                }\n
                else\n
                {\n
                    v4 = v6;\n
                    for (v3 = v4; v4; v4 = *((v4 + 4)))\n
                    {\n
                        if (*(*(v4)) >= v7[0])\n
                        {\n
                            if (v4 != v6)\n
                            {\n
                                v5->field_4 = v4;\n
                                *((v3 + 4)) = v5;\n
                            }\n
                            else\n
                            {\n
                                v5->field_4 = v4;\n
                                v6[0] = v5;\n
                            }\n
                            break;\n
                        }\n
                        else if (*(*(v4)) + *((*(v4) + 8)) >= v7[0] + v7[2])\n
                        {\n
                            cgc_free(v5->field_0);\n
                            cgc_free(v5);\n
                            break;\n
                        }\n
                        else if (*((v4 + 4)))\n
                        {\n
                            v3 = v4;\n
                        }\n
                        else\n
                        {\n
                            *((v4 + 4)) = v5;\n
                            break;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v15 = v15->field_4;\n
    }\n
    v16 = v6;\n
    return v16;\n
}\n
", "4211687:sub_4043e7": null, "4211696:cgc_find_best_match_set": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0[2];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_best_match_set(unsigned int v8)\n
{\n
    struct_2 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x1c]\n
    struct_0 *v4;  // [bp-0x18], Other Possible Types: struct_1 *\n
    struct_1 *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_1 *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        v6 = cgc_find_single_match_set(&v8);\n
        if (!v6)\n
            break;\n
        if (v3 > v2)\n
        {\n
            while (v5)\n
            {\n
                v4 = &v5->field_0;\n
                v5 = v5->field_4;\n
                cgc_free(v4->field_0);\n
                cgc_free(v4);\n
            }\n
            v2 = v3;\n
            v5 = v6;\n
        }\n
        else\n
        {\n
            while (v6)\n
            {\n
                v4 = &v6->field_0;\n
                v6 = v6->field_4;\n
                cgc_free(v4->field_0);\n
                cgc_free(v4);\n
            }\n
        }\n
    }\n
    v7 = v5;\n
    return v7;\n
}\n
", "4211995:sub_40451b": null, "4212000:cgc_compare_line": "typedef struct struct_0 {\n
    char *field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_compare_line(struct_0 *v8, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x14]\n
    char *v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a1)\n
    {\n
        if (cgc_strlen(v8->field_0) && cgc_strlen(a0->field_0))\n
        {\n
            v0 = cgc_strlen(v8->field_0);\n
            if (v0 == cgc_strlen(a0->field_0) && v8->field_8 == a0->field_8 && v8->field_c == a0->field_c)\n
            {\n
                v4 = v8->field_0;\n
                v3 = a0->field_0;\n
                v7 = cgc_strcmp(v4, v3);\n
                return v7;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_strlen(v8->field_4) && cgc_strlen(a0->field_4))\n
        {\n
            v1 = cgc_strlen(v8->field_4);\n
            if (v1 == cgc_strlen(a0->field_4) && v8->field_10 == a0->field_10 && v8->field_14 == a0->field_14)\n
            {\n
                v6 = v8->field_4;\n
                v5 = a0->field_4;\n
                v7 = cgc_strcmp(v6, v5);\n
                return v7;\n
            }\n
        }\n
    }\n
    v7 = -1;\n
    return v7;\n
}\n
", "4212431:sub_4046cf": null, "4212432:cgc_find_single_match_set": "int cgc_find_single_match_set(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // eax\n
\n
    if (!*(v8))\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v6 = 0;\n
    v4 = *(v8);\n
    v3 = *(v8);\n
    v1 = 0;\n
    v0 = 0;\n
    for (*(a0) = 0; v4; LABEL_404828:\n
)\n
    {\n
        if (*((*(v4) + 4)) >= v1 && *(*(v4)) >= v0)\n
        {\n
            v9 = a0;\n
            *(v9) = ((*((*(v4) + 8)) + 1) * *((*(v4) + 8)) >> 1) + *(v9);\n
            v1 = *((*(v4) + 4)) + *((*(v4) + 8));\n
            v0 = *(*(v4)) + *((*(v4) + 8));\n
            v2 = v4;\n
            if (v4 == *(v8))\n
            {\n
                *(v8) = *((v4 + 4));\n
                v3 = *((v4 + 4));\n
            }\n
            else\n
            {\n
                *((v3 + 4)) = *((v4 + 4));\n
            }\n
            v4 = *((v4 + 4));\n
            *((v2 + 4)) = 0;\n
            if (!v6)\n
            {\n
                v6 = v2;\n
                v5 = v6;\n
            }\n
            else\n
            {\n
                *((v5 + 4)) = v2;\n
                v5 = *((v5 + 4));\n
            }\n
            goto LABEL_404828;\n
        }\n
        v3 = v4;\n
        v4 = *((v4 + 4));\n
    }\n
    v7 = v6;\n
    return v7;\n
}\n
", "4212795:sub_40483b": null, "4212800:cgc_print_diff": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    struct struct_2 *field_4;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_5 *field_0;\n
    struct struct_4 *field_4;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char *field_0;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
} struct_5;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_2 *g_best_match;\n
extern struct_4 *g_lfile_cmp;\n
extern struct_4 *g_rfile_cmp;\n
\n
int cgc_print_diff()\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    unsigned int v3;  // [bp-0x48]\n
    void* v4;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x34]\n
    struct_2 *v6;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x2c], Other Possible Types: unsigned int, struct_4 *\n
    struct_0 *v8;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_2 *v15;  // eax, Other Possible Types: unsigned int\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v12 = 1;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = &g_lfile_cmp->field_0;\n
    v7 = &g_rfile_cmp->field_0;\n
    v15 = g_best_match;\n
    v6 = g_best_match;\n
    if (!v6)\n
    {\n
        v15 = cgc_fdprintf(1, v5 - 8144);\n
        return v15;\n
    }\n
    while (true)\n
    {\n
        if (v6->field_0->field_4 > v6->field_0->field_0)\n
        {\n
            v9 = 1;\n
            v0 = v11;\n
            v1 = v6->field_0->field_4;\n
            v2 = v10;\n
            v3 = v6->field_0->field_0;\n
            cgc_fdprintf(1, v5 - 8118);\n
            for (v13 = 0; v13 < v6->field_0->field_4 - v11; v13 += 1)\n
            {\n
                v0 = v8->field_0->field_0;\n
                cgc_fdprintf(1, v5 - 8105);\n
                v8 = v8->field_4;\n
            }\n
            v11 = v13 + v11;\n
            goto LABEL_404c1d;\n
        }\n
        if (v6->field_0->field_4 < v6->field_0->field_0)\n
        {\n
            v9 = 1;\n
            v0 = v11;\n
            v1 = v6->field_0->field_4;\n
            v2 = v10;\n
            v3 = v6->field_0->field_0;\n
            cgc_fdprintf(1, v5 - 8099);\n
            for (v13 = 0; v13 < v6->field_0->field_0 - v10; v13 += 1)\n
            {\n
                v0 = *(*(v7));\n
                cgc_fdprintf(1, v5 - 8086);\n
                v7 = *((v7 + 4));\n
            }\n
            v10 = v13 + v10;\n
            goto LABEL_404c1d;\n
        }\n
        if (v11 == v6->field_0->field_4 && v10 == v6->field_0->field_0)\n
            goto LABEL_404c1d;\n
        if (v12)\n
        {\n
            if (v12 * v12 == v11)\n
                v4 = v12 + 1;\n
            else\n
                v4 = 0;\n
            v12 = v4;\n
            if (v12 == 32)\n
            {\n
                if (cgc_strlen(v8->field_0->field_0) < 0x1000)\n
                    cgc_strcpy(v5 + 316, v8->field_0->field_0);\n
                else\n
                    v12 = 0;\n
            }\n
        }\n
        v9 = 1;\n
        v0 = v11;\n
        v1 = v6->field_0->field_4;\n
        v2 = v10;\n
        v3 = v6->field_0->field_0;\n
        cgc_fdprintf(1, v5 - 8080);\n
        for (v13 = 0; v13 < v6->field_0->field_4 - v11; v13 += 1)\n
        {\n
            v0 = v8->field_0->field_0;\n
            cgc_fdprintf(1, v5 - 8105);\n
            v8 = v8->field_4;\n
        }\n
        v11 = v13 + v11;\n
        cgc_fdprintf(1, v5 - 7944);\n
        for (v13 = 0; v13 < v6->field_0->field_0 - v10; v13 += 1)\n
        {\n
            v0 = v7->field_0->field_0;\n
            cgc_fdprintf(1, v5 - 8086);\n
            v7 = v7->field_4;\n
        }\n
        v10 = v13 + v10;\n
LABEL_404c1d:\n
        for (; v11 < v6->field_0->field_4 + v6->field_0->field_8; v11 += 1)\n
        {\n
            v8 = *((v8 + 4));\n
        }\n
        for (; v10 < v6->field_0->field_0 + v6->field_0->field_8; v10 += 1)\n
        {\n
            v7 = *((v7 + 4));\n
        }\n
        v15 = v6->field_4;\n
        v6 = v15;\n
    }\n
}\n
", "4214291:sub_404e13": null, "4214304:cgc_get_lhash": "int cgc_get_lhash(unsigned int v5[2], char *a0)\n
{\n
    unsigned int v0[2];  // [bp-0x18]\n
    unsigned int v1[2];  // [bp-0x14]\n
    char v2;  // [bp-0xd]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    char *v6;  // eax\n
    unsigned int v7[2];  // ecx\n
\n
    v0[0] = v5;\n
    v1[0] = v0;\n
    v4 = 261;\n
    v3 = 0;\n
    while (true)\n
    {\n
        v6 = a0;\n
        a0 = v6 + 1;\n
        v2 = *(v6);\n
        if (!v2)\n
            break;\n
        v4 = 33 * v4 + v2;\n
        v3 = v3 * 0x10000 + v3 * 64 - v3 + v2;\n
    }\n
    v7 = v0;\n
    v7[0] = v4;\n
    v7[1] = v3;\n
    return v1;\n
}\n
", "4214433:sub_404ea1": null, "4214448:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_4062a8;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    void* v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8;  // [bp-0x2c]\n
    void* v9;  // [bp-0x28]\n
    void* v10;  // [bp-0x24]\n
    unsigned int v11;  // [bp-0x20]\n
    unsigned int v12;  // [bp-0x1c]\n
    unsigned int v22;  // [bp+0xfffd4]\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // eax\n
\n
    v22 = 1;\n
    while (true)\n
    {\n
        cgc_fdprintf(1, v5 - 8409);\n
        if (!((v6 ^ 255) & 1))\n
        {\n
            cgc_fdprintf(1, v5 - 7564);\n
            return;\n
        }\n
        cgc_fdprintf(1, v5 - 7985);\n
        cgc_fdprintf(1, v5 - 7962);\n
        cgc_fdprintf(1, v5 - 7939);\n
        cgc_fdprintf(1, v5 - 7920);\n
        cgc_fdprintf(1, v5 - 7904);\n
        if (v10)\n
            cgc_fdprintf(1, v5 - 7859);\n
        else\n
            cgc_fdprintf(1, v5 - 7888);\n
        if (v9)\n
            cgc_fdprintf(1, v5 - 7804);\n
        else\n
            cgc_fdprintf(1, v5 - 7829);\n
        cgc_fdprintf(1, v5 - 7779);\n
        cgc_fdprintf(1, v5 - 7761);\n
        v1 = v11;\n
        v0 = v12;\n
        cgc_fdprintf(1, v5 - 7751);\n
        cgc_fdprintf(1, v5 - 7725);\n
        v29 = v5;\n
        v2 = v29 - 7707;\n
        v30 = v29 - 7699;\n
        v3 = v30;\n
        if (v10)\n
            v30 = v2;\n
        v7 = v30;\n
        v0 = v7;\n
        cgc_fdprintf(1, v29 - 7690);\n
        v31 = v5;\n
        v32 = v3;\n
        if (v9)\n
            v32 = v2;\n
        v7 = v32;\n
        v0 = v7;\n
        cgc_fdprintf(1, v31 - 7668);\n
        cgc_fdprintf(1, v5 - 7631);\n
        v8 = cgc_readopt(0);\n
        v4 = v8 - 1;\n
        if (v4 > 5)\n
            cgc_fdprintf(1, v5 - 7579);\n
        else\n
            goto *(((stack_base)[56] + (stack_base)[60] * 4 - 8024)) + (stack_base)[56];\n
    }\n
}\n
", "4215597:sub_40532d": null, "4215600:cgc_readopt": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readopt(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    char v1;  // [bp-0x99]\n
    unsigned int v2;  // [bp-0x98]\n
    char v3;  // [bp-0x94]\n
    struct_0 *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x10]\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    while (true)\n
    {\n
        v0 = &v5;\n
        v1 = 0;\n
        if (!cgc_receive(v7, &v3 + v4, 1))\n
        {\n
            v1 = 0;\n
            if (*(&v5) == 1)\n
                v1 = v4 < 128;\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        if (*((&v3 + v4)) != 10)\n
        {\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            *((&v3 + v4)) = 0;\n
            break;\n
        }\n
    }\n
    if (v4 == 128)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    v6 = cgc_strtol(&v3, NULL, 10);\n
    return v6;\n
}\n
", "4215883:sub_40544b": null, "4215888:cgc_recvall": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recvall(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    while (true)\n
    {\n
        if (!a1)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(v5, a0, a1))\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v3 = *(&v2) + v3;\n
        a1 -= *(&v2);\n
    }\n
    v4 = -1;\n
    return v4;\n
}\n
", "4216044:sub_4054ec": null, "4216048:cgc_open_sfile": "typedef struct struct_0 {\n
    char padding_0[3];\n
    char field_3;\n
    char padding_4[15];\n
    char field_13;\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_open_sfile()\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x38]\n
    char v3;  // [bp-0x34]\n
    void* v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x14]\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v2 = &v3;\n
    v1 = 0;\n
    if (cgc_recvall(0, v2, 24) >= 0 && !cgc_memcmp(v2, v0 - 7552, 3))\n
    {\n
        if (v2->field_3 && !(v2->field_3 == 1))\n
            goto LABEL_405658;\n
        if (!v2->field_13 && v2->field_14)\n
        {\n
            v1 = cgc_malloc(v2->field_14 + 25);\n
            if (v1)\n
            {\n
                cgc_memcpy(v1, v2, 24);\n
                if (cgc_recvall(0, v1 + 24, v2->field_14) >= 0)\n
                {\n
                    *((v1 + v2->field_14 + 24)) = 0;\n
                    v6 = v1;\n
                    return v6;\n
                }\n
            }\n
        }\n
    }\n
LABEL_405658:\n
    if (v1)\n
        cgc_free(v1);\n
    v6 = 0;\n
    return v6;\n
}\n
", "4216448:cgc_close_sfile": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_close_sfile(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1[2];  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = *(v2);\n
    if (v1)\n
        cgc_free(v1);\n
    *(v2) = 0;\n
    return v2;\n
}\n
", "4216520:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_transmit": null, "5242888:cgc_allocate": null, "5242892:cgc_deallocate": null, "5242896:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}