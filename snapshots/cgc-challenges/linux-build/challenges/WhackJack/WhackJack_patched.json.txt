{"4202496:_init": "extern struct_0 *g_4091cc;\n
\n
int _init()\n
{\n
    if (g_4091cc)\n
    {\n
        g_4091cc();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:sub_4020d0": "int sub_4020d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202710:sub_4020d6": null, "4202720:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202763:sub_40210b": null, "4202764:sub_40210c": "int sub_40210c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202768:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202772:sub_402114": null, "4202784:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28851;\n
    v6 = v5 + 28;\n
    v7 = v5 + 28;\n
    if (v7 == v6)\n
        return v5 + 28;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202835:sub_402153": "int sub_402153()\n
{\n
}\n
", "4202841:sub_402159": "int sub_402159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202848:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28787;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 28;\n
    v9 = (v6 + 28 - (v6 + 28) >> 31) + (28 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202919:sub_4021a7": "int sub_4021a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202928:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4091c8;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4091c8)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020d0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203003:sub_4021fb": "int sub_4021fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203008:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203017:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203021:sub_40220d": null, "4203024:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203078:sub_402246": null, "4203088:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203142:sub_402286": null, "4203152:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203206:sub_4022c6": null, "4203216:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isupper(v3) && !cgc_islower(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203312:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_isalpha(v3) && !cgc_isdigit(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4203408:cgc_isprint": "int cgc_isprint(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 32 && v1 != 127)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203462:sub_4023c6": null, "4203472:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_islower(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + -32;\n
    return v0;\n
}\n
", "4203546:sub_40241a": null, "4203552:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = v1 + 32;\n
    return v0;\n
}\n
", "4203626:sub_40246a": null, "4203632:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4203726:sub_4024ce": null, "4203728:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v5, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = 0;\n
        v0 = &v2;\n
        if (cgc_receive(0, v5 + v3, a0 - v3))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v3 = v2 + v3;\n
    }\n
}\n
", "4203882:sub_40256a": null, "4203888:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1 - 1)\n
        {\n
            *((v5 + v4)) = 0;\n
            return v4;\n
        }\n
        *((v5 + v4)) = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            *((v5 + v4)) = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4204112:cgc_link": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_link(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_lookaside;\n
    if (!v5)\n
        return cgc_lookaside;\n
    v6 = v5;\n
    if (*(v6) <= 1016)\n
    {\n
        if (*(v5) > 1016)\n
            v2 = 0;\n
        else\n
            v2 = *(v5) >> 3;\n
        *((v5 + 4)) = *((v3 + v2 * 4 + 116));\n
        v1 = v5;\n
        if (*(v5) > 1016)\n
            v0 = 0;\n
        else\n
            v0 = *(v5) >> 3;\n
        v6 = v3;\n
        *((v6 + v0 * 4 + 116)) = v1;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        if (!v4)\n
            return v6;\n
        if (!*((v4 + 4)))\n
        {\n
            *((v4 + 4)) = v5;\n
            *((v5 + 8)) = v4;\n
            v6 = v5;\n
            *((v6 + 4)) = 0;\n
            return v5;\n
        }\n
        else if (*(v5) >= *(*((v4 + 4))))\n
        {\n
            v6 = *((v4 + 4));\n
            v4 = v6;\n
        }\n
        else\n
        {\n
            *((v5 + 4)) = *((v4 + 4));\n
            *((v5 + 8)) = v4;\n
            *((*((v4 + 4)) + 8)) = v5;\n
            v6 = v4;\n
            *((v6 + 4)) = v5;\n
            return v4;\n
        }\n
    }\n
}\n
", "4204449:sub_4027a1": null, "4204464:cgc_add_freelist_block": "typedef struct struct_0 {\n
    char padding_0[116];\n
    unsigned int field_74;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_freelist_block(unsigned int v5)\n
{\n
    struct struct_1 **v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    struct_0 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v5 += 4;\n
    v5 = v5 + 4095 & -0x1000;\n
    v0 = &v3;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    cgc_bzero(v3);\n
    *(v3) = v5 - 4;\n
    if (!v1->field_74)\n
    {\n
        v7 = v1;\n
        v7->field_74 = v3;\n
        return v1;\n
    }\n
    v7 = cgc_link(v3);\n
    return v7;\n
}\n
", "4204665:sub_402879": null, "4204672:cgc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2;\n
    v1 = 0;\n
    if (v2)\n
    {\n
        v1 = v2 - 4;\n
        v3 = cgc_link(v1);\n
    }\n
    return v3;\n
}\n
", "4204743:sub_4028c7": null, "4204752:cgc_init_freelist": "typedef struct struct_0 {\n
    char padding_0[116];\n
    struct struct_1 *field_74;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_lookaside;\n
\n
int cgc_init_freelist()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3[0] = 0;\n
    v2[0] = 0;\n
    v0 = &cgc_lookaside;\n
    if (cgc_allocate(0x1000, 0))\n
        cgc__terminate();\n
    cgc_bzero(v1->field_74);\n
    v3[0] = v1->field_74;\n
    v2[0] = v3 + 1;\n
    v3[0] = 0;\n
    v3[1] = v2;\n
    v3[2] = 0;\n
    v2[0] = 4080;\n
    v2[2] = v3;\n
    v2[1] = 0;\n
    return v2;\n
}\n
", "4204952:sub_402998": null, "4204960:cgc_unlink": "typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
int cgc_unlink(struct_2 *v0)\n
{\n
    struct_0 *v1;  // eax, Other Possible Types: unsigned int, struct_2 *\n
\n
    if (!v0)\n
        return v0;\n
    if (v0->field_8)\n
        v0->field_8->field_4 = v0->field_4;\n
    v1 = v0;\n
    if (!v1->field_4)\n
        return v1;\n
    v1 = v0->field_4;\n
    v1->field_8 = v0->field_8;\n
}\n
", "4205044:sub_4029f4": null, "4205056:cgc_freelist_alloc": "typedef struct struct_1 {\n
    char padding_0[116];\n
    struct struct_0 *field_74;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_lookaside;\n
\n
int cgc_freelist_alloc(unsigned int v4)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    if (!cgc_lookaside)\n
        cgc_init_freelist();\n
    for (v2 = v0->field_74; v2; v2 = v2->field_4)\n
    {\n
        if (v2->field_0 >= v4)\n
            break;\n
    }\n
    if (!v2)\n
    {\n
        cgc_add_freelist_block(v4);\n
        v3 = cgc_freelist_alloc(v4);\n
        return v3;\n
    }\n
    cgc_unlink(v2);\n
    if (*(v2) - v4 < 12)\n
    {\n
        v3 = v2 + 4;\n
        return v3;\n
    }\n
    v1 = v2 + 4 + v4;\n
    *(v1) = *(v2) - (v4 + 4);\n
    *(v2) = v4;\n
    cgc_link(v1);\n
    v3 = v2 + 4;\n
    return v3;\n
}\n
", "4205337:sub_402b19": null, "4205344:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc();\n
    if (!v2)\n
    {\n
        v3 = v2;\n
        return v3;\n
    }\n
    v5 = v5 + 7 & -8;\n
    v0 = v5;\n
    cgc_bzero(v2);\n
    v3 = v2;\n
    return v3;\n
}\n
", "4205452:sub_402b8c": null, "4205456:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (v5 < 8)\n
        v5 = 8;\n
    v5 = v5 + 7 & -8;\n
    if (v5 > 1016)\n
        v0 = 0;\n
    else\n
        v0 = v5 >> 3;\n
    if (!v3)\n
    {\n
        v4 = cgc_freelist_alloc(v5);\n
        return v4;\n
    }\n
    for (v3 = v0; v3 < 128; v3 += 1)\n
    {\n
        if (*((v1 + (v3 << 2) + 116)))\n
            break;\n
    }\n
    if (v3 != 128)\n
    {\n
        v6 = v1;\n
        v2 = *((v6 + v3 * 4 + 116));\n
        *((v6 + v3 * 4 + 116)) = v2->field_4;\n
        v4 = &v2->field_4;\n
        return v4;\n
    }\n
    v4 = cgc_freelist_alloc(v5);\n
    return v4;\n
}\n
", "4205741:sub_402cad": null, "4205744:cgc_round": null, "4205890:sub_402d42": null, "4205904:cgc_floor": null, "4206060:sub_402dec": null, "4206064:cgc_seed_prng_array": "typedef struct struct_0 {\n
    char padding_0[756];\n
    unsigned int field_2f4;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state;\n
\n
int cgc_seed_prng_array(unsigned int v4, unsigned int *a0)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // eax\n
    unsigned int v8;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_bzero(&state, 128);\n
    v0->field_2f4 = 0;\n
    if (a0 > 32)\n
        a0 = 32;\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        *(&v0->padding_0[628 + 4 * v2]) = *((v4 + v2 * 4));\n
    }\n
    v6 = a0;\n
    while (true)\n
    {\n
        v2 = v6;\n
        if (v2 >= 32)\n
            break;\n
        v7 = v0;\n
        v1 = *(&v7->padding_0[628 + 4 * (v2 + 1 & 31)]);\n
        *((628 + &v7->padding_0[0] + 0x4 * v2)) = (v1 ^ (v1 >> 30) + v2) * 524287;\n
        v6 = v2 + 1;\n
    }\n
    v8 = v3;\n
    return v6;\n
}\n
", "4206287:sub_402ecf": null, "4206288:cgc_seed_prng": "int cgc_seed_prng(unsigned int v0)\n
{\n
    return cgc_seed_prng_array(&v0, 0x1);\n
}\n
", "4206335:sub_402eff": null, "4206336:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int state_n;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
\n
    v9 = v11;\n
    v8 = *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * state_n]);\n
    v7 = *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * (state_n + 3 & 31)]);\n
    v6 = *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * (state_n + 24 & 31)]);\n
    v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * (state_n + 10 & 31)]);\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * (state_n + 31 & 31)]);\n
    v3 = v8 ^ v7 ^ v7 >> 8;\n
    v2 = v6 ^ v6 * 0x80000 ^ v5 ^ v5 * 0x4000;\n
    v1 = v3 ^ v2;\n
    v0 = v4 ^ v4 * 0x800 ^ v3 ^ v3 * 128 ^ v2 ^ v2 * 0x2000;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * state_n]) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[628 + 4 * (state_n + 31 & 31)]) = v0;\n
    state_n = state_n + 31 & 31;\n
    v12 = v9;\n
    return v0;\n
}\n
", "4206619:sub_40301b": null, "4206624:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v6 > a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v6 != a0)\n
    {\n
        v3 = a0 - v6 + 1;\n
        if (!v3)\n
        {\n
            v5 = cgc_prng();\n
            return v5;\n
        }\n
        v2 = (0 CONCAT -1) /m v3;\n
        do\n
        {\n
            v4 = cgc_prng();\n
        } while (v4 >= v3 * v2);\n
        v0 = v6;\n
        v5 = v0 + (0 CONCAT v4) /m v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = v6;\n
        return v5;\n
    }\n
}\n
", "4206812:sub_4030dc": null, "4206816:cgc_WRAPPER_PUTC": "int cgc_WRAPPER_PUTC(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &a0, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = a1 + 1;\n
    return v2;\n
}\n
", "4206917:sub_403145": null, "4206928:cgc_WRAPPER_OUTC": "int cgc_WRAPPER_OUTC(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    v0[a1] = a0;\n
    return a1 + 1;\n
}\n
", "4206962:sub_403172": null, "4206976:cgc_WRAPPER_BUFFER_PUTC": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[255];\n
    unsigned short field_100;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_WRAPPER_BUFFER_PUTC(struct_0 *v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    struct_0 *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_0 *v6;  // eax\n
    struct_0 *v7;  // esi\n
    unsigned int v9;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v5;\n
    while (true)\n
    {\n
        if (v3->field_100 < 0x100)\n
        {\n
            v7 = v3;\n
            v7->field_100 = v7->field_100 + 1;\n
            (&v3->field_0)[v9] = a0;\n
            v4 = a1 + 1;\n
            return v4;\n
        }\n
        v0 = &v2;\n
        if (cgc_transmit(1, v3, v3->field_100))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        else if (*(&v2))\n
        {\n
            v6 = v3;\n
            v6->field_100 = v6->field_100 - *(&v2);\n
        }\n
        else\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
    }\n
}\n
", "4207207:sub_403267": null, "4207216:cgc_putchar": "int cgc_putchar(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    if (cgc_transmit(1, &v3, 1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = v3;\n
    return v2;\n
}\n
", "4207308:sub_4032cc": null, "4207312:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = cgc_strlen();\n
    while (true)\n
    {\n
        if (v2 == v3)\n
        {\n
            cgc_putchar(10);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v4;\n
        if (cgc_transmit(1, v7 + v2, v3 - v2))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (!*(&v4))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v2 = *(&v4) + v2;\n
    }\n
}\n
", "4207500:sub_40338c": null, "4207504:cgc_vprintf_buffered": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf_buffered(unsigned int v12, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x13c]\n
    unsigned int v1;  // [bp-0x130]\n
    unsigned int v2;  // [bp-0x128]\n
    void* v3;  // [bp-0x124]\n
    struct_0 *v4;  // [bp-0x120]\n
    char v5;  // [bp-0x11c]\n
    unsigned short v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // esi\n
\n
    v11 = v13;\n
    v10 = v14;\n
    v9 = v15;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = cgc_WRAPPER_BUFFER_PUTC;\n
    v6 = 0;\n
    v4 = &v5;\n
    v3 = 0;\n
    v0 = a0;\n
    v2 = cgc_wrapper_output(v4, v7, v3, v12);\n
    if (v6 > 0)\n
    {\n
        if (cgc_transmit(1, &v5, v6))\n
        {\n
            v8 = -1;\n
            goto LABEL_40346b;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
        }\n
    }\n
    v8 = v2;\n
LABEL_40346b:\n
    return v8;\n
}\n
", "4207737:sub_403479": null, "4207744:cgc_wrapper_output": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_wrapper_output()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x5c]\n
    char *v3;  // [bp-0x2c]\n
    char *v4;  // [bp-0x28]\n
    char v5;  // [bp-0x21]\n
    void* v6;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp+0x4]\n
    unsigned int v12;  // [bp+0x8]\n
    char *v13;  // [bp+0xc]\n
    char *v14;  // [bp+0x10], Other Possible Types: unsigned int\n
    unsigned int *v32;  // [bp+0xfffb8]\n
    struct struct_0 **v44;  // [bp+0x100014]\n
    unsigned int *v45;  // [bp+0x10001c], Other Possible Types: struct struct_1 **\n
    struct struct_1 **v76;  // eax\n
\n
    v76 = v45;\n
    v45 = &v76[1];\n
    v32 = &*(v76)->field_0;\n
    *(v32) = v44;\n
    while (true)\n
    {\n
        v14 = (&v13)[1] + 1;\n
        while (true)\n
        {\n
LABEL_4039b9:\n
            while (true)\n
            {\n
                if (!*(v14))\n
                    return;\n
                v5 = *(v14);\n
                v14 = (&v13)[1] + 1;\n
                if (v5 != 36)\n
                {\n
                    v0 = v13;\n
                    v13 = v12(v11, v5);\n
                    goto LABEL_4039b9;\n
                }\n
                v6 = 0;\n
                v7 = 0;\n
                v8 = 0;\n
                v9 = 0;\n
                if (!*(v14))\n
                    return;\n
                if (*(v14) != 36)\n
                    break;\n
                v0 = v13;\n
                v13 = v12(v11, 36);\n
            }\n
            if (*(v14) == 45)\n
            {\n
                v9 |= 1;\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (cgc_isdigit(*(v14)))\n
            {\n
                if (*(v14) == 48)\n
                    v9 |= 4;\n
                for (v4 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v8 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            if (*(v14) == 46)\n
            {\n
                v14 = (&v13)[1] + 1;\n
                if (!*(v14))\n
                    return;\n
                for (v3 = v14; cgc_isdigit(*(v14)); v14 = (&v13)[1] + 1);\n
                v6 = cgc_atoi();\n
                if (!*(v14))\n
                    return;\n
            }\n
            v1 = *(v14) - 88;\n
            if (v1 <= 32)\n
                goto *(((stack_base)[88] + (stack_base)[92] * 4 - 8648)) + (stack_base)[88];\n
            break;\n
        }\n
    }\n
}\n
", "4209100:sub_4039cc": null, "4209104:cgc_printf": "int cgc_printf(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf_buffered(v2, v1);\n
    return v0;\n
}\n
", "4209162:sub_403a0a": null, "4209168:cgc_vprintf": "int cgc_vprintf(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = cgc_WRAPPER_PUTC;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = a0;\n
    return cgc_wrapper_output(v2, v3, v1, v6);\n
}\n
", "4209265:sub_403a71": null, "4209280:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v2 = &v5;\n
    v0 = v2;\n
    v1 = cgc_vsprintf(v4, a0);\n
    return v1;\n
}\n
", "4209349:sub_403ac5": null, "4209360:cgc_vsprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v9, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct struct_0 **v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = &cgc_WRAPPER_OUTC;\n
    v4 = v9;\n
    v3 = 0;\n
    v0 = a1;\n
    v2 = cgc_wrapper_output(v4, v5, v3, a0);\n
    v5(v4, 0);\n
    v13 = v6;\n
    v14 = v7;\n
    v15 = v8;\n
    return v2;\n
}\n
", "4209499:sub_403b5b": null, "4209504:cgc_printf_int_to_string": "int cgc_printf_int_to_string(unsigned int v3, unsigned int a0, char *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ecx\n
\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        *(a1) = 48;\n
        v2 = 1;\n
        return v2;\n
    }\n
    while (v3 > 0)\n
    {\n
        v0 = (0 CONCAT v3) /m a0 >> 32;\n
        v3 = (0 CONCAT v3) /m a0;\n
        if (a0 != 16)\n
        {\n
            v4 = v1;\n
            v1 = v4 + 1;\n
            a1[v4] = v0 + 48;\n
        }\n
        else if (v0 < 10)\n
        {\n
            v5 = v1;\n
            v1 = v5 + 1;\n
            a1[v5] = v0 + 48;\n
        }\n
        else if ((a2 & 8))\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            a1[v6] = v0 + 55;\n
        }\n
        else\n
        {\n
            v7 = v1;\n
            v1 = v7 + 1;\n
            a1[v7] = v0 + 87;\n
        }\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4209776:cgc_printf_helper_int": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4210432:cgc_printf_float_to_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4212848:cgc_printf_helper_float": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_int(unsigned int v7, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    struct struct_0 **v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x3c]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (a3 == 10 && a2 < 0)\n
    {\n
        v4 = 1;\n
        a2 = -(a2);\n
        v6 += 1;\n
    }\n
    v3 = cgc_printf_int_to_string(a2, a3, &v2, a6);\n
    v6 = v3 + v6;\n
    if (a4 > 0 && v6 < a4)\n
        v5 = a4 - v6;\n
    if (a5 > 0)\n
    {\n
        a6 |= 4;\n
        if (v3 < a5)\n
            v5 = a5 - v3;\n
    }\n
    if (!(a6 & 1))\n
    {\n
        if (v4 && v5 > 0 && (a6 & 4))\n
        {\n
            a1 = a0(v7, 45);\n
            v4 = 0;\n
        }\n
        while (true)\n
        {\n
            v8 = v5;\n
            v5 = v8 - 1;\n
            if (v8 <= 0)\n
                break;\n
            if ((a6 & 4))\n
                a1 = a0(v7, 48);\n
            else\n
                a1 = a0(v7, 32);\n
        }\n
    }\n
    if (v4)\n
    {\n
        a1 = a0(v7, 45);\n
        v4 = 0;\n
    }\n
    for (v1 = v3; v1 > 0; v1 = v1 + 1)\n
    {\n
        a1 = a0(v7, *((&v1 + v1)));\n
    }\n
    if (!(a6 & 1))\n
        return a1;\n
    while (true)\n
    {\n
        v9 = v5;\n
        v5 = v9 - 1;\n
        if (v9 <= 0)\n
            break;\n
        a1 = a0(v7, 32);\n
    }\n
    return a1;\n
}\n
", "4213514:sub_404b0a": null, "4213520:cgc_printf_helper_string": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printf_helper_string(unsigned int v5, struct struct_0 **a0, unsigned int a1, char *a2, unsigned int a3, unsigned int a4, unsigned int a5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    char *v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a4 && !a3)\n
    {\n
        for (v1 = &_GLOBAL_OFFSET_TABLE_; *(a2); a2 += 1)\n
        {\n
            v0 = a1;\n
            a1 = a0(v5, *(a2));\n
        }\n
        v4 = a1;\n
        return v4;\n
    }\n
    v3 = cgc_strlen();\n
    v2 = 0;\n
    if (a4 > 0 && v3 > a4)\n
        v3 = a4;\n
    if (a3 > 0 && v3 < a3)\n
        v2 = a3 - v3;\n
    if (!(a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v6 = v2;\n
            v2 = v6 - 1;\n
            if (v6 <= 0)\n
                break;\n
            if (!(a5 & 4))\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 32);\n
            }\n
            else\n
            {\n
                v0 = a1;\n
                a1 = a0(v5, 48);\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
        v7 = v3;\n
        v3 = v7 - 1;\n
        if (v7 <= 0)\n
            break;\n
        v8 = a2;\n
        a2 = v8 + 1;\n
        v0 = a1;\n
        a1 = a0(v5, *(v8));\n
    }\n
    if ((a5 & 1))\n
    {\n
        while (true)\n
        {\n
            v9 = v2;\n
            v2 = v9 - 1;\n
            if (v9 <= 0)\n
                break;\n
            v0 = a1;\n
            a1 = a0(v5, 32);\n
        }\n
    }\n
    v4 = a1;\n
    return v4;\n
}\n
", "4214060:sub_404d2c": null, "4214064:cgc_minimum": "int cgc_minimum(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < a0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4214111:sub_404d5f": null, "4214112:cgc_max": "int cgc_max(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 > a0)\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v0 = a0;\n
    return v0;\n
}\n
", "4214159:sub_404d8f": null, "4214160:cgc_rand": "int cgc_rand()\n
{\n
    return cgc_random_in_range(0, 2147483646);\n
}\n
", "4214207:sub_404dbf": null, "4214208:cgc_srand": "int cgc_srand(unsigned int v0)\n
{\n
    return cgc_seed_prng(v0);\n
}\n
", "4214245:sub_404de5": null, "4214256:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v5;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; cgc_isspace(*(v4)); v4 += 1);\n
    if (!*(v4))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    if (*(v4) == 45)\n
    {\n
        v1 = 1;\n
        v4 += 1;\n
    }\n
    for (; cgc_isdigit(*(v4)); v2 = v2 * 10 + *(v5) - 48)\n
    {\n
        v5 = v4;\n
        v4 = v5 + 1;\n
    }\n
    if (v1)\n
    {\n
        v3 = -(v2);\n
        return v3;\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4214493:sub_404edd": null, "4214496:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v9)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned long v8;  // [bp-0xc]\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 1;\n
    for (v5 = 0; *(v9) == 32; v9 += 1);\n
    if (*(v9) != 45)\n
    {\n
        v6 = 1;\n
    }\n
    else\n
    {\n
        v6 = -1;\n
        v9 += 1;\n
    }\n
    while (v9)\n
    {\n
        if (*(v9) == 46)\n
        {\n
            v5 = 1;\n
            v9 += 1;\n
            continue;\n
        }\n
        if (*(v9) < 48)\n
        {\n
LABEL_404fe3:\n
            break;\n
        }\n
        else\n
        {\n
            if (!(*(v9) <= 57))\n
                goto LABEL_404fe3;\n
            v4 = *(v9) - 48;\n
            v11 = ftop<4> - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v12 = v11 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v12 = v11 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v13 = v12 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                v14 = v13 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                v14 = v13 - 1;\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t10,1] = t11\n
            [D] PutI(136:I8x8)[t10,1] = 0x01\n
            [D] PutI(136:I8x8)[t10,0] = 0x00\n
            v15 = v14 + 1;\n
            v8 = ([D] GetI(136:I8x8)[t35,0] ? [D] GetI(72:F64x8)[t35,0] : nan);\n
            [D] PutI(136:I8x8)[t35,0] = 0x00\n
            v1 = v4;\n
            v17 = v15 + 1 - 1;\n
            [D] PutI(72:F64x8)[t50,0] = t53\n
            [D] PutI(136:I8x8)[t50,0] = 0x01\n
            v18 = v17 - 1;\n
            [D] PutI(72:F64x8)[t63,0] = t66\n
            [D] PutI(136:I8x8)[t63,0] = 0x01\n
            [D] PutI(72:F64x8)[t73,1] = t74\n
            [D] PutI(136:I8x8)[t73,1] = 0x01\n
            [D] PutI(136:I8x8)[t73,0] = 0x00\n
            v19 = v18 + 1;\n
            v8 = ([D] GetI(136:I8x8)[t98,0] ? [D] GetI(72:F64x8)[t98,0] : nan);\n
            [D] PutI(136:I8x8)[t98,0] = 0x00\n
            v20 = v19 + 1;\n
            if (v5)\n
                v7 *= 10;\n
            v9 += 1;\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v21 = v6;\n
    v3 = v21;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t5,1] = t6\n
    [D] PutI(136:I8x8)[t5,1] = 0x01\n
    [D] PutI(136:I8x8)[t5,0] = 0x00\n
    v8 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
    [D] PutI(136:I8x8)[t30,0] = 0x00\n
    if (v5)\n
    {\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v21 = v7;\n
        v2 = v21;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t1,1] = t2\n
        [D] PutI(136:I8x8)[t1,1] = 0x01\n
        [D] PutI(136:I8x8)[t1,0] = 0x00\n
        v8 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
        [D] PutI(136:I8x8)[t26,0] = 0x00\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v21;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v21;\n
}\n
", "4214826:sub_40502a": null, "4214832:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8]\n
    int tmp_19;  // tmp #19\n
    char *v2;  // eax\n
    char *v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); *(v4) = tmp_19)\n
    {\n
        v3 = a0;\n
        a0 = v3 + 1;\n
        tmp_19 = *(v3);\n
        v4 = v1;\n
        v1 = v4 + 1;\n
    }\n
    *(v1) = 0;\n
    return v0;\n
}\n
", "4214908:sub_40507c": null, "4214912:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = 0;\n
    }\n
    return v1;\n
}\n
", "4215049:sub_405109": null, "4215056:cgc_memcpy": "int cgc_memcpy(char *v1, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 >= 4; a1 -= 4)\n
    {\n
        *(&v1) = *(&a0);\n
        v1 += 4;\n
        a0 += 4;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        *(v1) = *(a0);\n
        v1 += 1;\n
        a0 += 1;\n
    }\n
    return v0;\n
}\n
", "4215192:sub_405198": null, "4215200:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4215259:sub_4051db": null, "4215264:cgc_bzero": "int cgc_bzero(unsigned int v0, char *a0)\n
{\n
    char *v1;  // ecx\n
\n
    for (; a0; v1[1 + v0] = 0)\n
    {\n
        v1 = a0;\n
        a0 = v1 + 1;\n
    }\n
    *((v0 + a0)) = 0;\n
    return v0;\n
}\n
", "4215319:sub_405217": null, "4215328:cgc_memset": "int cgc_memset(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8]\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; a1 >= 4; a1 -= 4)\n
    {\n
        v4 = v3;\n
        v3 = v4 + 1;\n
        *(&v4) = v0;\n
    }\n
    for (; a1 > 0; a1 -= 1)\n
    {\n
        v5 = v3;\n
        v3 = v5 + 1;\n
        *(v5) = v1;\n
    }\n
    return v2;\n
}\n
", "4215482:sub_4052ba": null, "4215488:cgc_matchDealer": "int cgc_matchDealer(char a0, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = a0;\n
    v1 = cgc_score_cards();\n
    if (v1 > 16)\n
    {\n
        v2 = 83;\n
        return v2;\n
    }\n
    v2 = 72;\n
    return v2;\n
}\n
", "4215560:sub_405308": null, "4215568:cgc_neverBustAlgo": "int cgc_neverBustAlgo(char a0, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
\n
    v0 = a0;\n
    v1 = cgc_score_cards();\n
    if (v1 > 11)\n
    {\n
        v2 = 83;\n
        return v2;\n
    }\n
    v2 = 72;\n
    return v2;\n
}\n
", "4215640:sub_405358": null, "4215648:cgc_basicAlgo": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_basicAlgo(char v8, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x24]\n
    char v2;  // [bp-0x1d]\n
    unsigned int v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x15]\n
    unsigned int v5;  // [bp-0x14]\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 1;\n
    v7 = 0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v7 < 10)\n
            v2 = v7[a0];\n
        if (!(v2 & 1))\n
            break;\n
        if (v7[a0] == 1)\n
            v6 = 0;\n
        v7 += 1;\n
    }\n
    v0 = a0;\n
    v5 = cgc_score_cards();\n
    v1 = v6;\n
    if (!v1)\n
    {\n
        if (v5 < 18)\n
        {\n
            v4 = 72;\n
        }\n
        else\n
        {\n
            if (v5 == 18 && v8 > 8 && v8 < 11)\n
            {\n
                v4 = 72;\n
                goto LABEL_4054eb;\n
            }\n
            v4 = 83;\n
LABEL_4054eb:\n
        }\n
        return v4;\n
    }\n
    else if (v1 != 1)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        if (v5 < 12)\n
        {\n
            v4 = 72;\n
        }\n
        else if (v5 > 16)\n
        {\n
            v4 = 83;\n
        }\n
        else\n
        {\n
            if (v5 > 11 && v5 < 17 && v8 > 6)\n
            {\n
                v4 = 72;\n
                goto LABEL_405493;\n
            }\n
            if (v5 == 12 && v8 < 4)\n
            {\n
                v4 = 72;\n
                goto LABEL_405493;\n
            }\n
            v4 = 83;\n
LABEL_405493:\n
        }\n
        return v4;\n
    }\n
}\n
", "4216063:sub_4054ff": null, "4216064:cgc_simpleAlgo": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_simpleAlgo(char v7, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14]\n
    char *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x9]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v5 < 10)\n
            v1 = *((a0 + v5));\n
        if (!(v1 & 1))\n
            break;\n
        if (*((a0 + v5)) == 1)\n
            v4 = 0;\n
        v5 += 1;\n
    }\n
    v0 = a0;\n
    v3 = cgc_score_cards();\n
    if (v4)\n
    {\n
        if (v3 < 12)\n
        {\n
            v6 = 72;\n
            return v6;\n
        }\n
        else if (v3 > 16)\n
        {\n
            v6 = 83;\n
            return v6;\n
        }\n
        else if (v7 >= 7)\n
        {\n
            v6 = 72;\n
            return v6;\n
        }\n
        else\n
        {\n
            v6 = 83;\n
            return v6;\n
        }\n
    }\n
    else\n
    {\n
        if (v3 >= 18)\n
        {\n
            if (v3 == 18 && v7 < 7)\n
            {\n
                v6 = 83;\n
                return v6;\n
            }\n
            if (v3 == 18 && v7 > 7)\n
            {\n
                v6 = 72;\n
                return v6;\n
            }\n
            v6 = 83;\n
            return v6;\n
        }\n
        else\n
        {\n
            v6 = 72;\n
            return v6;\n
        }\n
    }\n
}\n
", "4216387:sub_405643": null, "4216400:cgc_superDuperAlgo": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_4070ac;\n
\n
int cgc_superDuperAlgo(char v9, unsigned int a0)\n
{\n
    char v0;  // [bp-0x269]\n
    unsigned int v1;  // [bp-0x268]\n
    char v2;  // [bp-0x264]\n
    char v3;  // [bp-0x13e]\n
    char *v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v7;  // [bp-0x9]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    memcpy(&v3, &g_4070ac, 294);\n
    memcpy(&v2, v1 - 8198, 294);\n
    v5 = 1;\n
    v6 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v6 < 10)\n
            v0 = v6[a0];\n
        if (!(v0 & 1))\n
            break;\n
        if (v6[a0] == 1)\n
            v5 = 0;\n
        v6 += 1;\n
    }\n
    v4 = cgc_score_cards();\n
    if (v5)\n
    {\n
        v7 = *((&(&v3)[21 * v9] + v4));\n
        return v7;\n
    }\n
    v7 = *((&(&v2)[21 * v9] + v4));\n
    return v7;\n
}\n
", "4216718:sub_40578e": null, "4216720:cgc_add_player": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_player()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    char v2;  // [bp-0x25]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    char v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp+0x4]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v6 < 8)\n
            v2 = *((v8 + v6 * 48));\n
        if ((v2 & 1))\n
        {\n
            v6 += 1;\n
        }\n
        else if (v6 != 8)\n
        {\n
            cgc_printf(v3 - 7850);\n
            if (!cgc_receive_until(&v5, 10, 12))\n
            {\n
                v7 = -1;\n
                return;\n
            }\n
            cgc_strcpy(v8 + v6 * 48, &v5);\n
            *((v8 + v6 * 48 + 16)) = 500;\n
            *((v8 + v6 * 48 + 30)) = 0;\n
            *((v8 + v6 * 48 + 36)) = 0;\n
            *((v8 + v6 * 48 + 40)) = 0;\n
            *((v8 + v6 * 48 + 32)) = 0;\n
            cgc_printf(v3 - 7831);\n
            if (!cgc_receive_until(&v5, 10, 12))\n
            {\n
                v7 = -1;\n
                return;\n
            }\n
            if (v5 != 121 && v5 != 89)\n
            {\n
                cgc_printf(v3 - 7794);\n
                if (!cgc_receive_until(&v5, 10, 12))\n
                {\n
                    v7 = -1;\n
                    return;\n
                }\n
                if (v5 != 121)\n
                    if (v5 == 89)\n
                        goto LABEL_405a99;\n
                    else\n
                        goto LABEL_0x405b9a;\n
LABEL_405a99:\n
                *((v8 + v6 * 48 + 32)) = 1;\n
                cgc_printf(v3 - 7807);\n
                if (!cgc_receive_until(&v5, 10, 12))\n
                {\n
                    v7 = -1;\n
                    return;\n
                }\n
                v4 = cgc_atoi(&v5);\n
                *((v8 + v6 * 48 + 33)) = v4;\n
                v0 = v4 - 1;\n
                if (!(v0 <= 3))\n
                    goto LABEL_0x405b95;\n
                goto *(((stack_base)[36] + (stack_base)[48] * 4 - 7904)) + (stack_base)[36];\n
            }\n
            *((v8 + v6 * 48 + 30)) = 1;\n
            cgc_printf(v3 - 7807);\n
            if (!cgc_receive_until(&v5, 10, 12))\n
            {\n
                v7 = -1;\n
                return;\n
            }\n
            v4 = cgc_atoi(&v5);\n
            *((v8 + v6 * 48 + 31)) = v4;\n
            v1 = v4 - 1;\n
            if (!(v1 <= 4))\n
                goto LABEL_0x405b9f;\n
            goto *(((stack_base)[36] + (stack_base)[44] * 4 - 7888)) + (stack_base)[36];\n
        }\n
        else\n
        {\n
            cgc_printf(v3 - 7868);\n
            v7 = -1;\n
            return;\n
        }\n
    }\n
}\n
", "4217273:sub_4059b9": "int sub_4059b9()\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    *((*(&v3) + *(&v1) * 48 + 12)) = *(&v0) - 16152;\n
}\n
", "4217299:sub_4059d3": "int sub_4059d3()\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    *((*(&v3) + *(&v1) * 48 + 12)) = *(&v0) - 15992;\n
}\n
", "4217325:sub_4059ed": "int sub_4059ed()\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    *((*(&v3) + *(&v1) * 48 + 12)) = *(&v0) - 15576;\n
}\n
", "4217351:sub_405a07": "int sub_405a07()\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    *((*(&v3) + *(&v1) * 48 + 12)) = *(&v0) - 16072;\n
}\n
", "4217377:sub_405a21": "int sub_405a21()\n
{\n
    char v0;  // [bp-0x20]\n
    char v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    *((*(&v3) + *(&v1) * 48 + 12)) = *(&v0) - 15240;\n
}\n
", "4217775:sub_405baf": null, "4217776:cgc_show_players": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_show_players(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = 0; v2 < 8; v2 += 1)\n
    {\n
        if (*((v3 + v2 * 48)))\n
        {\n
            v0 = v3 + v2 * 48;\n
            cgc_printf(v1 - 7761);\n
            v0 = *((v3 + v2 * 48 + 36));\n
            cgc_printf(v1 - 7744);\n
            v0 = *((v3 + v2 * 48 + 40));\n
            cgc_printf(v1 - 7727);\n
            v0 = *((v3 + v2 * 48 + 16));\n
            cgc_printf(v1 - 7710);\n
        }\n
    }\n
    return 0;\n
}\n
", "4217990:sub_405c86": null, "4218000:cgc_delete_player": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_delete_player(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    for (v3 = 1; v4 < 8; v4 += 1)\n
    {\n
        if (*((v6 + v4 * 48)))\n
        {\n
            cgc_printf(v0 - 7693);\n
            v3 += 1;\n
        }\n
    }\n
    if (v3 == 1)\n
    {\n
        cgc_printf(v0 - 7685);\n
        v5 = -1;\n
        return v5;\n
    }\n
    cgc_printf(v0 - 7673);\n
    if (!cgc_receive_until(&v1, 10, 20))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v2 = cgc_atoi(&v1);\n
    if (v2 >= v3)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v3 = 0;\n
    for (v4 = 0; v4 < 8; v4 += 1)\n
    {\n
        if (*((v6 + v4 * 48)))\n
        {\n
            v3 += 1;\n
            if (v3 == v2)\n
            {\n
                *((v6 + v4 * 48)) = 0;\n
                *((v6 + v4 * 48 + 36)) = 0;\n
                *((v6 + v4 * 48 + 40)) = 0;\n
                *((v6 + v4 * 48 + 16)) = 500;\n
                break;\n
            }\n
        }\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4218459:sub_405e5b": null, "4218464:cgc_score_cards": "int cgc_score_cards(unsigned int v4)\n
{\n
    char v0;  // [bp-0x11]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v3 = 0;\n
    v2 = 0;\n
    for (v1 = 0; v1 < 10; v1 += 1)\n
    {\n
        if (v1[v4] > 1 && v1[v4] < 10)\n
        {\n
            v3 = v1[v4] + v3;\n
            goto LABEL_405f0e;\n
        }\n
        if (v1[v4] >= 10)\n
        {\n
            v3 += 10;\n
        }\n
        else if (v1[v4] == 1)\n
        {\n
            v2 += 1;\n
            v3 += 11;\n
        }\n
LABEL_405f0e:\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v3 > 21)\n
            v0 = !(v2 <= 0);\n
        if (!(v0 & 1))\n
            break;\n
        v3 -= 10;\n
        v2 -= 1;\n
    }\n
    return v3;\n
}\n
", "4218739:sub_405f73": null, "4218752:cgc_show_cards": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_show_cards(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char v1;  // [bp-0x16]\n
    char v2;  // [bp-0x15]\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
    char *v11;  // eax, Other Possible Types: unsigned int\n
    unsigned int v12;  // ebx\n
\n
    v6 = v8;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Dealer:\");\n
    v5 = 0;\n
    while (true)\n
    {\n
        v2 = 0;\n
        if (v5 < 10)\n
            v2 = v5[v7];\n
        if (!(v2 & 1))\n
            break;\n
        v9 = v3;\n
        v0 = *((v9 + v5[v7] * 4 + 56));\n
        cgc_printf(v9 - 7612);\n
        v5 += 1;\n
    }\n
    v0 = cgc_score_cards(v7);\n
    v11 = cgc_printf(v3 - 7608);\n
    for (v5 = 0; v5 < 8; v5 = v11)\n
    {\n
        if (*((a0 + v5 * 48)))\n
        {\n
            v0 = a0 + v5 * 48;\n
            cgc_printf(v3 - 7601);\n
            v4 = 0;\n
            while (true)\n
            {\n
                v1 = 0;\n
                if (v4 < 10)\n
                    v1 = *(20 + a0 + 0x30 * v5 + v4);\n
                if (!(v1 & 1))\n
                    break;\n
                v10 = v3;\n
                v0 = *((v10 + *((a0 + v5 * 48 + v4 + 20)) * 4 + 56));\n
                cgc_printf(v10 - 7612);\n
                v4 += 1;\n
            }\n
            v0 = cgc_score_cards(a0 + v5 * 48 + 20);\n
            cgc_printf(v3 - 7608);\n
        }\n
        v11 = v5 + 1;\n
    }\n
    v12 = v6;\n
    return v11;\n
}\n
", "4219198:sub_40613e": null, "4219200:cgc_play_round": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[40];\n
    unsigned int field_28;\n
} struct_3;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_play_round(unsigned int v21, unsigned short *a0)\n
{\n
    void* v0;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x5c]\n
    char v3;  // [bp-0x55]\n
    void* v4;  // [bp-0x54], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x50], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x4c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x44]\n
    unsigned int v9;  // [bp-0x40]\n
    void* v10;  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x38]\n
    void* v12;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x30]\n
    char v14;  // [bp-0x2b]\n
    char v15;  // [bp-0x26]\n
    char v16;  // [bp-0x25]\n
    struct_0 *v17;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct_0 *v18;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned short *v19;  // [bp-0x14]\n
    unsigned int v20;  // [bp-0x10]\n
    struct_2 *v22;  // eax\n
    struct_1 *v23;  // eax\n
    struct_1 *v24;  // eax\n
    struct_2 *v25;  // eax\n
    struct_2 *v26;  // eax\n
    struct_3 *v27;  // eax\n
\n
    v8 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v18 = 0; v18 < 10; v18 += 1)\n
    {\n
        (&v15)[v18] = 0;\n
    }\n
    v10 = 0;\n
    for (v18 = 0; v18 < 8; v18 += 1)\n
    {\n
        if (*((v21 + v18 * 48)))\n
            v10 += 1;\n
        for (v17 = 0; v17 < 10; v17 += 1)\n
        {\n
            *(20 + v21 + 0x30 * v18 + &v17->field_0) = 0;\n
        }\n
    }\n
    if (!v10)\n
    {\n
        cgc_printf(v8 - 7685);\n
        v20 = -1;\n
        return v20;\n
    }\n
    for (v18 = 0; v18 < 8; v18 += 1)\n
    {\n
        if (*((v21 + v18 * 48)))\n
        {\n
            v12 = 0;\n
            cgc_printf(v8 - 7597);\n
            cgc_printf(v8 - 7585);\n
            if (*((v21 + v18 * 48 + 30)) == 1)\n
            {\n
                *((v21 + v18 * 48 + 44)) = 5;\n
            }\n
            else if (cgc_receive_until(&v14, 10, 5))\n
            {\n
                v9 = cgc_atoi(&v14);\n
                *((v21 + v18 * 48 + 44)) = v9;\n
            }\n
            else\n
            {\n
                v20 = -1;\n
                return v20;\n
            }\n
        }\n
    }\n
    v19 = 0x4347c000;\n
    v15 = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
    if (*(a0) >= 2047)\n
        v7 = 0;\n
    else\n
        v7 = *(a0) + 1;\n
    *(a0) = v7;\n
    for (v18 = 0; v18 < 8; v18 += 1)\n
    {\n
        if (*((v21 + v18 * 48)))\n
        {\n
            *((v21 + v18 * 48 + 20)) = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
            if (*(a0) >= 2047)\n
                v6 = 0;\n
            else\n
                v6 = *(a0) + 1;\n
            *(a0) = v6;\n
        }\n
    }\n
    v16 = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
    if (*(a0) >= 2047)\n
        v5 = 0;\n
    else\n
        v5 = *(a0) + 1;\n
    *(a0) = v5;\n
    for (v18 = 0; v18 < 8; v18 += 1)\n
    {\n
        if (*((v21 + v18 * 48)))\n
        {\n
            *((v21 + v18 * 48 + 21)) = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
            if (*(a0) >= 2047)\n
                v4 = 0;\n
            else\n
                v4 = *(a0) + 1;\n
            *(a0) = v4;\n
        }\n
    }\n
    cgc_show_cards(&v15, v21);\n
    for (v18 = 0; v18 < 8; v18 += 1)\n
    {\n
        if (*((v21 + v18 * 48)))\n
        {\n
            v12 = 0;\n
            cgc_printf(v8 - 7597);\n
            while (((v12 ^ 255) & 1))\n
            {\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v3 = 0;\n
                    if (v17 < 10)\n
                        v3 = *((v21 + v18 * 48 + v17 + 20));\n
                    if (!(v3 & 1))\n
                        break;\n
                    cgc_printf(v8 - 7562);\n
                    v17 += 1;\n
                }\n
                cgc_score_cards(v21 + v18 * 48 + 20);\n
                cgc_printf(v8 - 7607);\n
                if (*((v21 + v18 * 48 + 32)) != 1)\n
                {\n
LABEL_406730:\n
                    cgc_printf(v8 - 7481);\n
                    if (*((v21 + v18 * 48 + 30)) == 1)\n
                    {\n
                        v14 = *((v21 + v18 * 48 + 12))(v16);\n
                    }\n
                    else if (!cgc_receive_until(&v14, 10, 5))\n
                    {\n
                        v20 = -1;\n
                        return v20;\n
                    }\n
                    if (v14 == 83)\n
                    {\n
                        v12 = 1;\n
                    }\n
                    else if (v14 == 72)\n
                    {\n
                        *(20 + v21 + 0x30 * v18 + &v17->field_0) = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
                        if (*(a0) >= 2047)\n
                            v1 = 0;\n
                        else\n
                            v1 = *(a0) + 1;\n
                        *(a0) = v1;\n
                        cgc_printf(v8 - 7450);\n
                        v13 = cgc_score_cards(v21 + v18 * 48 + 20);\n
                        if (v13 > 21)\n
                            v12 = 1;\n
                    }\n
                }\n
                else\n
                {\n
                    cgc_printf(v8 - 7558);\n
                    if (!cgc_receive_until(&v14, 10, 5))\n
                    {\n
                        v20 = -1;\n
                        return v20;\n
                    }\n
                    if (v14 != 121 && !(v14 == 89))\n
                        goto LABEL_406726;\n
                    v14 = *((v21 + v18 * 48 + 12))(v16);\n
                    v2 = v14;\n
                    if (v2 == 72)\n
                    {\n
                        cgc_printf(v8 - 7519);\n
                    }\n
                    else if (v2 != 83)\n
                    {\n
                        cgc_printf(v8 - 7503);\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v8 - 7537);\n
                    }\n
LABEL_406726:\n
                    goto LABEL_406730;\n
                }\n
            }\n
        }\n
    }\n
    v12 = 0;\n
    for (v17 = 0; (&v15)[v17]; v17 += 1);\n
    for (; ((v12 ^ 255) & 1); v17 += 1)\n
    {\n
        v11 = cgc_score_cards(&v15);\n
        if (v11 > 16)\n
            break;\n
        (&v15)[v17] = ((v19[*(a0)] >> 31 CONCAT v19[*(a0)]) /m 13 >> 32) + 1;\n
        cgc_printf(v8 - 7437);\n
        if (*(a0) < 2047)\n
            v0 = *(a0) + 1;\n
        else\n
            v0 = 0;\n
        *(a0) = v0;\n
    }\n
    v18 = 0;\n
    while (v18 < 8)\n
    {\n
        if (!*((v21 + v18 * 48)))\n
        {\n
LABEL_406b96:\n
            v18 += 1;\n
        }\n
        else\n
        {\n
            cgc_printf(v8 - 7420);\n
            v13 = cgc_score_cards(v21 + v18 * 48 + 20);\n
            if (v11 > 21 && v13 < 22)\n
            {\n
                cgc_printf(v8 - 7415);\n
                v22 = v21 + v18 * 48;\n
                v22->field_10 = *((v21 + v18 * 48 + 44)) + v22->field_10;\n
                v23 = v21 + v18 * 48;\n
                v23->field_24 = v23->field_24 + 1;\n
                goto LABEL_406b87;\n
            }\n
            if (v13 < 22 && v13 > v11)\n
            {\n
                cgc_printf(v8 - 7415);\n
                v24 = v21 + v18 * 48;\n
                v24->field_24 = v24->field_24 + 1;\n
                v25 = v21 + v18 * 48;\n
                v25->field_10 = *((v21 + v18 * 48 + 44)) + v25->field_10;\n
                goto LABEL_406b87;\n
            }\n
            if (v13 == v11)\n
            {\n
                cgc_printf(v8 - 7408);\n
            }\n
            else\n
            {\n
                cgc_printf(v8 - 7400);\n
                v26 = v21 + v18 * 48;\n
                v26->field_10 = v26->field_10 - *((v21 + v18 * 48 + 44));\n
                v27 = v21 + v18 * 48;\n
                v27->field_28 = v27->field_28 + 1;\n
                if (!*((v21 + v18 * 48 + 16)))\n
                {\n
                    *((v21 + v18 * 48)) = 0;\n
                    *((v21 + v18 * 48 + 36)) = 0;\n
                    *((v21 + v18 * 48 + 40)) = 0;\n
                    *((v21 + v18 * 48 + 30)) = 0;\n
                }\n
            }\n
LABEL_406b87:\n
            goto LABEL_406b96;\n
        }\n
    }\n
    v20 = 0;\n
    return v20;\n
}\n
", "4221877:sub_406bb5": null, "4221888:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x1a4]\n
    unsigned int v1;  // [bp-0x1a0]\n
    unsigned short v2;  // [bp-0x19a]\n
    unsigned int v3;  // [bp-0x198]\n
    void* v4;  // [bp-0x194]\n
    char v5;  // [bp-0x190]\n
    void* v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v3 = 99;\n
    v4 = 0;\n
    v2 = 0;\n
    do\n
    {\n
        do\n
        {\n
            if (!v3)\n
                cgc__terminate();\n
            if (!v4)\n
            {\n
                cgc_printf(v1 - 7410);\n
                cgc_printf(v1 - 7376);\n
                cgc_printf(v1 - 7361);\n
                cgc_printf(v1 - 7343);\n
                cgc_printf(v1 - 7334);\n
                cgc_printf(v1 - 7319);\n
            }\n
        } while (!cgc_receive_until(&v5, 10, 4));\n
        v3 = cgc_atoi(&v5);\n
        v0 = v3 - 1;\n
    } while (v0 > 3);\n
    goto *(((stack_base)[416] + (stack_base)[420] * 4 - 7392)) + (stack_base)[416];\n
}\n
", "4222228:sub_406d14": "int sub_406d14()\n
{\n
    char v0;  // [bp-0x188]\n
    unsigned int v1;  // [bp+0x0]\n
\n
    v1 = &v0;\n
    cgc_add_player();\n
}\n
", "4222253:sub_406d2d": "int sub_406d2d()\n
{\n
    char v0;  // [bp-0x188]\n
\n
    cgc_delete_player(&v0);\n
}\n
", "4222278:sub_406d46": "int sub_406d46()\n
{\n
    unsigned short v0;  // [bp-0x196]\n
    char v1;  // [bp-0x188]\n
\n
    cgc_play_round(&v1, &v0);\n
}\n
", "4222313:sub_406d69": "int sub_406d69()\n
{\n
    char v0;  // [bp-0x188]\n
\n
    cgc_show_players(&v0);\n
}\n
", "4222368:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:memcpy": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}