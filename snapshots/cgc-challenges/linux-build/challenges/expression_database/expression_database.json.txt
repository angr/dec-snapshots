{"4202496:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:longjmp": "// attributes: PLT stub\n
int longjmp()\n
{\n
    ::libc.so.0::longjmp();\n
    return;\n
}\n
", "4202592:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:setjmp": "// attributes: PLT stub\n
int setjmp()\n
{\n
    ::libc.so.0::setjmp();\n
    return;\n
}\n
", "4202656:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202672:sub_4020b0": "int sub_4020b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202678:sub_4020b6": null, "4202688:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202731:sub_4020eb": null, "4202732:sub_4020ec": "int sub_4020ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202736:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202740:sub_4020f4": null, "4202752:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24607;\n
    v6 = v5 + 145;\n
    v7 = v5 + 145;\n
    if (v7 == v6)\n
        return v5 + 145;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202803:sub_402133": "int sub_402133()\n
{\n
}\n
", "4202809:sub_402139": "int sub_402139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202816:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24543;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 145;\n
    v9 = (v6 + 145 - (v6 + 145) >> 31) + (145 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202887:sub_402187": "int sub_402187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202896:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202971:sub_4021db": "int sub_4021db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202976:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202985:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202989:sub_4021ed": null, "4202992:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203084:sub_40224c": null, "4203088:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v12, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    unsigned int v1;  // [bp-0x6c]\n
    char *v2;  // [bp-0x68]\n
    char *v3;  // [bp-0x64], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x5c]\n
    char *v6;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_1 *v7;  // [bp-0x38], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x34]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
    struct struct_0 **v13;  // eax\n
    struct struct_0 **v14;  // eax\n
    struct struct_0 **v15;  // eax\n
    struct_1 *v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    struct_1 *v19;  // eax\n
    unsigned int v20;  // eax\n
    char *v21;  // eax\n
    struct_1 *v22;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    if (!v12)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    while (true)\n
    {\n
        if (!*(v12))\n
        {\n
            v11 = v10;\n
            return v11;\n
        }\n
        if (*(v12) == 36)\n
            break;\n
        cgc_putc(*(v12));\n
        v12 += 1;\n
        v10 += 1;\n
LABEL_4025bd:\n
    }\n
    v12 += 1;\n
    v0 = *(v12);\n
    if (!v0)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    if (v0 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_40258c;\n
    }\n
    if (v0 != 88)\n
    {\n
        if (v0 == 100)\n
        {\n
            v13 = a0;\n
            a0 = v13 + 1;\n
            v6 = &*(v13)->field_0;\n
            v7 = 0;\n
            if (v6 < 0)\n
            {\n
                v6 = -(v6);\n
                cgc_putc(45);\n
                v10 += 1;\n
            }\n
            else\n
            {\n
                if (!v6)\n
                {\n
                    v7 = 1;\n
                    v8 = 48;\n
                }\n
            }\n
            while (v6)\n
            {\n
                v20 = v7;\n
                v7 = v20 + 1;\n
                (&v8)[v20] = ((v6 >> 31 CONCAT v6) /m 10 >> 32) + 48;\n
                v21 = v6;\n
                v6 = (v21 >> 31 CONCAT v21) /m 10;\n
                if (v7 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v22 = v7;\n
                v7 = v22 + 1;\n
                if (v22 <= 0)\n
                    break;\n
                cgc_putc((&v8)[v7]);\n
                v10 += 1;\n
            }\n
            goto LABEL_40258c;\n
        }\n
        else if (v0 == 115)\n
        {\n
            v14 = a0;\n
            a0 = v14 + 1;\n
            v9 = &*(v14)->field_0;\n
            while (*(v9))\n
            {\n
                cgc_putc(*(v9));\n
                v10 += 1;\n
                v9 += 1;\n
                if (!v9)\n
                    break;\n
            }\n
            goto LABEL_40258c;\n
        }\n
        else if (v0 != 120)\n
        {\n
            v11 = -1;\n
            return v11;\n
        }\n
    }\n
    v15 = a0;\n
    a0 = v15 + 1;\n
    v3 = &*(v15)->field_0;\n
    v4 = 0;\n
    while (v3)\n
    {\n
        v2 = v3 & 15;\n
        v3 >>= 4;\n
        if (v2 < 10)\n
        {\n
            v16 = v4;\n
            v4 = v16 + 1;\n
            *((&v5 + v16)) = v2 + 48;\n
        }\n
        else if (*(v12) != 120)\n
        {\n
            v18 = v4;\n
            v4 = v18 + 1;\n
            (&v5)[v18] = v2 + 55;\n
        }\n
        else\n
        {\n
            v17 = v4;\n
            v4 = v17 + 1;\n
            (&v5)[v17] = v2 + 87;\n
        }\n
        if (v4 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v19 = v4;\n
        v4 = v19 + 1;\n
        if (v19 <= 0)\n
            break;\n
        cgc_putc((&v5)[v4]);\n
        v10 += 1;\n
    }\n
LABEL_40258c:\n
    v12 += 1;\n
    goto LABEL_4025bd;\n
}\n
", "4203985:sub_4025d1": null, "4204000:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4204058:sub_40261a": null, "4204064:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4204158:sub_40267e": null, "4204160:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4204214:sub_4026b6": null, "4204224:cgc_isnan": null, "4204247:sub_4026d7": null, "4204256:cgc_isinf": null, "4204303:sub_40270f": null, "4204304:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204362:sub_40274a": null, "4204368:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204426:sub_40278a": null, "4204432:cgc_strcmp": "int cgc_strcmp(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[v2] && !v0[a0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[v2])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!v0[a0])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (v0[v2] < v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (v0[v2] <= v0[a0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4204670:sub_40287e": null, "4204672:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4204763:sub_4028db": null, "4204768:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4204874:sub_40294a": null, "4204880:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a1; v0 += 4)\n
        {\n
            *(&v0[v1]) = *(&v0[a0]);\n
        }\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4205021:sub_4029dd": null, "4205024:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4205428:sub_402b74": null, "4205440:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4205495:sub_402bb7": null, "4205504:cgc_command_insert": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_insert(unsigned int v18, unsigned int a0)\n
{\n
    unsigned short v0;  // [bp-0x24c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x248]\n
    unsigned int v2;  // [bp-0x244]\n
    unsigned int v3;  // [bp-0x238]\n
    unsigned int v4;  // [bp-0x234]\n
    unsigned int v5;  // [bp-0x230]\n
    unsigned int v6;  // [bp-0x22c]\n
    char v7;  // [bp-0x228]\n
    char v8;  // [bp-0x1a7]\n
    char v9;  // [bp-0x126]\n
    char v10;  // [bp-0xa5]\n
    char v11;  // [bp-0x24]\n
    char v12;  // [bp-0x23]\n
    char v13;  // [bp-0x22]\n
    char v14;  // [bp-0x20]\n
    unsigned int v15;  // [bp-0x18]\n
    char v16;  // [bp-0x11]\n
    unsigned int v17;  // [bp-0x8]\n
    unsigned int v19;  // ebx\n
\n
    v17 = v19;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"First name: \");\n
    v15 = cgc_readLine(0, &v10);\n
    cgc_sanitize_string(&v10, &v10);\n
    cgc_printf(v4 - 4291);\n
    v15 = cgc_readLine(0, &v9);\n
    cgc_sanitize_string(&v9, &v9);\n
    cgc_printf(v4 - 4279);\n
    v15 = cgc_readLine(0, &v8);\n
    cgc_sanitize_string(&v8, &v8);\n
    cgc_printf(v4 - 4267);\n
    v15 = cgc_readLine(0, &v7);\n
    v6 = cgc_parse_date(&v7);\n
    if (!v6)\n
    {\n
        cgc_printf(v4 - 4235);\n
        v16 = 0;\n
        return v16;\n
    }\n
    v3 = v13;\n
    v0 = v11;\n
    v1 = v12;\n
    v2 = v3;\n
    cgc_printf(v4 - 4214);\n
    v0 = *(&v14);\n
    v5 = cgc_db_add_record(&v8, &v10, &v9, *(&v11));\n
    if (v5 == -1)\n
    {\n
        cgc_printf(v4 - 4186);\n
        v16 = 0;\n
        return v16;\n
    }\n
    cgc_printf(v4 - 4170);\n
    v16 = 0;\n
    return v16;\n
}\n
", "4206160:cgc_command_remove": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_remove(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0x98]\n
    char v2;  // [bp-0x91]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter record number to remove: \");\n
    v0 = 128;\n
    v4 = cgc_readLine(0, &v2);\n
    v3 = cgc_atoi(&v2);\n
    if (!cgc_db_remove_record())\n
    {\n
        cgc_printf(v1 - 4095);\n
        return 0;\n
    }\n
    cgc_printf(v1 - 4115);\n
    return 0;\n
}\n
", "4206364:sub_402f1c": null, "4206368:cgc_command_update": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_update(unsigned int v20, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x258], Other Possible Types: unsigned short\n
    unsigned int v1;  // [bp-0x254]\n
    unsigned int v2;  // [bp-0x244]\n
    unsigned int v3;  // [bp-0x240]\n
    unsigned int v4;  // [bp-0x23c]\n
    char v5[394];  // [bp-0x238]\n
    unsigned int v6;  // [bp-0x234]\n
    unsigned int v7;  // [bp-0x230]\n
    unsigned int v8;  // [bp-0x22c]\n
    char v9;  // [bp-0x228]\n
    char v10;  // [bp-0x1a7]\n
    char v11;  // [bp-0x126]\n
    char v12;  // [bp-0xa5]\n
    char v13;  // [bp-0x24]\n
    char v14;  // [bp-0x23]\n
    char v15;  // [bp-0x22]\n
    char v16;  // [bp-0x20]\n
    unsigned int v17;  // [bp-0x18]\n
    char v18;  // [bp-0x11]\n
    unsigned int v19;  // [bp-0x8]\n
    unsigned int v21;  // ebx\n
\n
    v19 = v21;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter record number to update: \");\n
    v17 = cgc_readLine(0, &v9);\n
    v6 = cgc_atoi(&v9);\n
    *(&v5[0]) = cgc_db_search_index();\n
    if (!v5)\n
    {\n
        cgc_printf(v4 - 4095);\n
        v18 = 0;\n
        return v18;\n
    }\n
    cgc_printf(v4 - 4044);\n
    v17 = cgc_readLine(0, &v12);\n
    cgc_sanitize_string(&v12, &v12);\n
    cgc_printf(v4 - 4019);\n
    v17 = cgc_readLine(0, &v11);\n
    cgc_sanitize_string(&v11, &v11);\n
    cgc_printf(v4 - 3995);\n
    v17 = cgc_readLine(0, &v10);\n
    cgc_sanitize_string(&v10, &v10);\n
    v3 = v5[393];\n
    v0 = v5[392];\n
    v1 = v3;\n
    cgc_printf(v4 - 3971);\n
    v17 = cgc_readLine(0, &v9);\n
    v8 = cgc_parse_date(&v9);\n
    if (!v8)\n
    {\n
        cgc_printf(v4 - 4235);\n
        v18 = 0;\n
        return v18;\n
    }\n
    v2 = v15;\n
    v0 = v14;\n
    v1 = v2;\n
    cgc_printf(v4 - 4214);\n
    v0 = *(&v16);\n
    v7 = cgc_db_update_record(v6, &v10, &v12, &v11, *(&v13));\n
    if (!v7)\n
    {\n
        cgc_printf(v4 - 3932);\n
        v18 = 0;\n
        return v18;\n
    }\n
    cgc_printf(v4 - 3909);\n
    v18 = 0;\n
    return v18;\n
}\n
", "4207358:sub_4032fe": null, "4207360:cgc_command_print": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_print(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xa4]\n
    unsigned int v2;  // [bp-0xa0]\n
    unsigned int v3;  // [bp-0x9c]\n
    char v4;  // [bp-0x95]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x10]\n
    char v7;  // [bp-0x9]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter record number to print (or \\\"all\\\" for all records): \");\n
    v0 = 128;\n
    v6 = cgc_readLine(0, &v4);\n
    if (!cgc_strcmp(&v4, v2 - 3831))\n
    {\n
        cgc_db_get_record_count();\n
        cgc_printf(v2 - 3827);\n
        v5 = 0;\n
        while (true)\n
        {\n
            v1 = v5;\n
            if (v1 >= cgc_db_get_record_count())\n
                break;\n
            v3 = cgc_db_search_index();\n
            if (!v3)\n
            {\n
                v7 = 0;\n
                return v7;\n
            }\n
            cgc_print_record_helper();\n
            v5 += 1;\n
        }\n
    }\n
    else\n
    {\n
        v5 = cgc_atoi(&v4);\n
        v3 = cgc_db_search_index();\n
        if (!v3)\n
        {\n
            cgc_printf(v2 - 4095);\n
            v7 = 0;\n
            return v7;\n
        }\n
        cgc_print_record_helper();\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4207775:sub_40349f": null, "4207776:cgc_command_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_find()\n
{\n
    unsigned int v0;  // [bp-0xa4]\n
    unsigned int v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    char v3;  // [bp-0x95]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v6 = v10;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_db_get_record_count())\n
    {\n
        cgc_printf(v2 - 3801);\n
    }\n
    else\n
    {\n
        cgc_printf(v2 - 3764);\n
        v0 = 128;\n
        v4 = cgc_readLine(0, &v3);\n
        cgc_get_next_exception_frame(0, &v3);\n
        v1 = setjmp();\n
        if (!(v1 <= 3))\n
            goto LABEL_0x4035d5;\n
        goto *(((stack_base)[156] + (stack_base)[160] * 4 - 4376)) + (stack_base)[156];\n
    }\n
}\n
", "4208113:sub_4035f1": null, "4208128:cgc_command_login": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_login(unsigned int v2, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (*(a0) == 1)\n
    {\n
        cgc_printf(v0 - 3592);\n
    }\n
    else\n
    {\n
        *(a0) = 1;\n
        cgc_printf(v0 - 3564);\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4208234:sub_40366a": null, "4208240:cgc_command_logout": "int cgc_command_logout(unsigned int v0, unsigned int *a0)\n
{\n
    *(a0) = 0;\n
    cgc_printf(\"You logged out.\\n
\");\n
    return 0;\n
}\n
", "4208297:sub_4036a9": null, "4208304:cgc_command_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    char v2;  // [bp-0x4]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v2;\n
    v1 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Disconnecting.\\n
\");\n
    v6 = v0;\n
    cgc__terminate();\n
    cgc_stringbeg();\n
    return;\n
}\n
", "4208368:cgc_stringbeg": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stringbeg(char *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v3 = 0; *(v5); v3 += 1)\n
    {\n
        if (!cgc_isspace(*(v5)))\n
            break;\n
        v5 += 1;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v5))\n
            v1 = *(a0);\n
        if (!(v1 & 1))\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
        v0 = cgc_tolower(*(v5));\n
        if (v0 != cgc_tolower(*(a0)))\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v5 += 1;\n
        a0 += 1;\n
        v3 += 1;\n
    }\n
}\n
", "4208634:sub_4037fa": null, "4208640:cgc_init_user": "int cgc_init_user(unsigned int *v0)\n
{\n
    *(v0) = 0;\n
    return v0;\n
}\n
", "4208657:sub_403811": null, "4208672:cgc_parse_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_command(char *v5, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x9]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 255;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!*((v0 + 48 + v3 * 44 + 36)))\n
        {\n
            cgc_printf(v0 - 4324);\n
            v4 = 255;\n
            return v4;\n
        }\n
        v2 = cgc_stringbeg(v5, v0 + 48 + v3 * 44);\n
        if (v2 > 0)\n
            break;\n
        v3 += 1;\n
    }\n
    if ((*((v0 + 48 + v3 * 44 + 40)) & 1) && !*(a0))\n
    {\n
        cgc_printf(v0 - 4360);\n
        v4 = 255;\n
        return v4;\n
    }\n
    v4 = *((v0 + 48 + v3 * 44 + 36))(&v5[v2]);\n
    return v4;\n
}\n
", "4208946:sub_403932": null, "4208960:cgc_init_database": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* g_recordCount;\n
\n
int cgc_init_database()\n
{\n
    g_recordCount = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4208987:sub_40395b": null, "4208992:cgc_db_add_record": "typedef struct struct_0 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_recordCount;\n
\n
int cgc_db_add_record(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0x10]\n
    struct_0 *v6;  // ebx\n
    struct_0 *v7;  // ebx\n
    struct_0 *v8;  // ebx\n
    struct_0 *v9;  // ebx\n
    struct_0 *v10;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = &v5;\n
    if (g_recordCount >= 64)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v6 = v0;\n
    v2 = v6->field_24c;\n
    *(&v6[1].padding_0[400 * v6->field_24c]) = v2;\n
    cgc_strncpy(&v6->padding_0[1 + 400 * v6->field_24c + 4], a0, 128);\n
    v7 = v0;\n
    cgc_strncpy(&v7->padding_0[1 + 400 * v7->field_24c + 133], a1, 128);\n
    v8 = v0;\n
    cgc_strncpy(&v8->padding_0[1 + 400 * v8->field_24c + 262], v4, 128);\n
    v9 = v0;\n
    cgc_memcpy(&v9->padding_0[1 + 400 * v9->field_24c + 391], v1, 6);\n
    v10 = v0;\n
    v10->field_24c = v10->field_24c + 1;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4209316:sub_403aa4": null, "4209328:cgc_db_update_record": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_recordCount;\n
\n
int cgc_db_update_record(unsigned int v3, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x14]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = &v4;\n
    if (v3 >= g_recordCount)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    cgc_strncpy(v0 + 592 + v3 * 400 + 4, a1, 128);\n
    cgc_strncpy(v0 + 592 + v3 * 400 + 133, a2, 128);\n
    cgc_strncpy(v0 + 592 + v3 * 400 + 262, a0, 128);\n
    cgc_memcpy(v0 + 592 + v3 * 400 + 391, v1, 6);\n
    v2 = 1;\n
    return v2;\n
}\n
", "4209596:sub_403bbc": null, "4209600:cgc_db_remove_record": "typedef struct struct_0 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_recordCount;\n
\n
int cgc_db_remove_record(unsigned int *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // ebx\n
    struct_0 *v6;  // ebx\n
    struct_0 *v7;  // ebx\n
    struct_0 *v8;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v3 >= g_recordCount)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (v0->field_24c)\n
    {\n
        v4 = v0;\n
        v4->field_24c = v4->field_24c - 1;\n
        for (v1 = v3; v1 < v0->field_24c; v1 += 1)\n
        {\n
            v5 = v0;\n
            *(&v5[1].padding_0[400 * v1]) = *(&v5[1].padding_0[400 + 400 * v1]) - 1;\n
            cgc_strcpy(&v5->padding_0[1 + 400 * v1 + 4], &v5->padding_0[401 + 400 * v1 + 4]);\n
            v6 = v0;\n
            cgc_strcpy(&v6->padding_0[1 + 400 * v1 + 133], &v6->padding_0[401 + 400 * v1 + 133]);\n
            v7 = v0;\n
            cgc_strcpy(&v7->padding_0[1 + 400 * v1 + 262], &v7->padding_0[401 + 400 * v1 + 262]);\n
            v8 = v0;\n
            cgc_memcpy(&v8->padding_0[1 + 400 * v1 + 391], &v8->padding_0[401 + 400 * v1 + 391], 6);\n
        }\n
        v2 = 1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4210041:sub_403d79": null, "4210048:cgc_db_get_record_count": "extern unsigned int g_recordCount;\n
\n
int cgc_db_get_record_count()\n
{\n
    return g_recordCount;\n
}\n
", "4210071:sub_403d97": null, "4210080:cgc_db_search_first_name": "typedef struct struct_0 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_db_search_first_name(unsigned int v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_24c)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strcmp(v3, 5 + v0 + 0x190 * v1))\n
        {\n
            v2 = &v0->padding_0[1 + 400 * v1];\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4210236:sub_403e3c": null, "4210240:cgc_db_search_last_name": "typedef struct struct_0 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_db_search_last_name(unsigned int v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_24c)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v3, 134 + v0 + 0x190 * v1))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &v0->padding_0[1 + 400 * v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4210398:sub_403ede": null, "4210400:cgc_db_search_user_name": "typedef struct struct_0 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_db_search_user_name(unsigned int v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0->field_24c)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v3, 263 + v0 + 0x190 * v1))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = &v0->padding_0[1 + 400 * v1];\n
            return v2;\n
        }\n
    }\n
}\n
", "4210558:sub_403f7e": null, "4210560:cgc_db_search_birth_date": "typedef struct struct_1 {\n
    char padding_0[588];\n
    unsigned int field_24c;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned short field_4;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[391];\n
    unsigned int field_187;\n
    unsigned short field_18b;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_db_search_birth_date()\n
{\n
    unsigned short v0;  // [bp-0x30]\n
    struct_1 *v1;  // [bp-0x24]\n
    struct_2 *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp+0x4]\n
    struct_2 *v8;  // eax\n
    struct_0 *v9;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = &v7;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 < v1->field_24c)\n
        {\n
            v8 = v2;\n
            v9 = 1 + v1 + 0x190 * v5;\n
            v3 = *(&(&v9->padding_0)[1]);\n
            v4 = *((&v9->field_187 + 3));\n
            v0 = v8->field_4;\n
            if (!cgc_date_compare(v3, v4, v8->field_0))\n
            {\n
                v6 = &v1->padding_0[1] + 0x190 * v5;\n
                return v6;\n
            }\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
}\n
", "4210761:sub_404049": null, "4210768:cgc_db_search_index": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_recordCount;\n
\n
int cgc_db_search_index(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v2 >= g_recordCount)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v0 + 592 + v2 * 400;\n
    return v1;\n
}\n
", "4210848:cgc_print_record_helper": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[387];\n
    char field_187;\n
    char field_188;\n
    char field_189;\n
    char field_18a;\n
    char field_18b;\n
    char field_18c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_record_helper(struct_0 *v8)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v8)\n
    {\n
        v0 = v8->field_0;\n
        cgc_printf(v7 - 3515);\n
        v0 = &v8->padding_4;\n
        cgc_printf(v7 - 3502);\n
        v0 = &v8->padding_4[129];\n
        cgc_printf(v7 - 3486);\n
        v0 = &v8->padding_4[258];\n
        cgc_printf(v7 - 3471);\n
        v6 = v8->field_189;\n
        v0 = v8->field_18a;\n
        v1 = v8->field_18b;\n
        v2 = v8->field_18c + 1900;\n
        v3 = v8->field_187;\n
        v4 = v8->field_188;\n
        v5 = v6;\n
        return cgc_printf(v7 - 3456);\n
    }\n
    return v8;\n
}\n
", "4211125:sub_4041b5": null, "4211136:cgc_date_compare": "int cgc_date_compare()\n
{\n
    char v0[6];  // [bp-0x10]\n
    char v1[6];  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp+0x4]\n
    char v4;  // [bp+0x9]\n
    char v5;  // [bp+0xc]\n
    char v6;  // [bp+0x11]\n
\n
    *(&v0[0]) = &v5;\n
    *(&v1[0]) = &v3;\n
    if (v4 < v6)\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[5] > v0[5])\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
    else if (v1[3] < v0[3])\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[3] > v0[3])\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
    else if (v1[4] < v0[4])\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[4] > v0[4])\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
    else if (v1[0] < v0[0])\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[0] > v0[0])\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
    else if (v1[1] < v0[1])\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[1] > v0[1])\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
    else if (v1[2] < v0[2])\n
    {\n
        v2 = -1;\n
        return;\n
    }\n
    else if (v1[2] <= v0[2])\n
    {\n
        v2 = 0;\n
        return;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return;\n
    }\n
}\n
", "4211567:sub_40436f": null, "4211568:cgc_parse_date": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_date(char *v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x1b]\n
    char v3;  // [bp-0x1a]\n
    char v4;  // [bp-0x19]\n
    char v5;  // [bp-0x18]\n
    char v6;  // [bp-0x17]\n
    char *v7;  // [bp-0x10]\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v9)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    for (v7 = v9; cgc_isspace(*(v9)); v9 += 1);\n
    if (!cgc_isdigit(*(v9)))\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v4 = *(v9) - 48;\n
    v9 += 1;\n
    if (cgc_isdigit(*(v9)))\n
    {\n
        v4 *= 10;\n
        v4 += *(v9) - 48;\n
        v9 += 1;\n
        if (*(v9) != 47)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    else if (*(v9) != 47)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v4 && v4 <= 12)\n
    {\n
        v9 += 1;\n
        if (!cgc_isdigit(*(v9)))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        v5 = *(v9) - 48;\n
        v9 += 1;\n
        if (cgc_isdigit(*(v9)))\n
        {\n
            v5 *= 10;\n
            v5 += *(v9) - 48;\n
            v9 += 1;\n
            if (*(v9) != 47)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
        }\n
        else if (*(v9) != 47)\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        if (v5 && v5 <= 31)\n
        {\n
            v9 += 1;\n
            if (!cgc_isdigit(*(v9)))\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v6 = *(v9) - 48;\n
            v9 += 1;\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v6 *= 10;\n
                v6 += *(v9) - 48;\n
                v9 += 1;\n
            }\n
            else if (!cgc_isspace(*(v9)))\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            if (v6 < 28)\n
                v6 += 100;\n
            for (; cgc_isspace(*(v9)); v9 += 1);\n
            if (!cgc_isdigit(*(v9)))\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v1 = *(v9) - 48;\n
            v9 += 1;\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v1 *= 10;\n
                v1 += *(v9) - 48;\n
                v9 += 1;\n
                if (*(v9) != 58)\n
                {\n
                    v8 = 0;\n
                    return v8;\n
                }\n
            }\n
            else if (*(v9) != 58)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            if (v1 >= 24)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v9 += 1;\n
            if (!cgc_isdigit(*(v9)))\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v2 = *(v9) - 48;\n
            v9 += 1;\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v2 *= 10;\n
                v2 += *(v9) - 48;\n
                v9 += 1;\n
                if (*(v9) != 58)\n
                {\n
                    v8 = 0;\n
                    return v8;\n
                }\n
            }\n
            else if (*(v9) != 58)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            if (v2 >= 60)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v9 += 1;\n
            if (!cgc_isdigit(*(v9)))\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            v3 = *(v9) - 48;\n
            v9 += 1;\n
            if (cgc_isdigit(*(v9)))\n
            {\n
                v3 *= 10;\n
                v3 += *(v9) - 48;\n
                v9 += 1;\n
            }\n
            if (v3 >= 60)\n
            {\n
                v8 = 0;\n
                return v8;\n
            }\n
            cgc_memcpy(a0, &v1, 6);\n
            v8 = v9 - v7;\n
            return v8;\n
        }\n
        v8 = 0;\n
        return v8;\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4213039:sub_40492f": null, "4213040:cgc_init_exception_handler": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_exceptionFrameCur;\n
\n
int cgc_init_exception_handler()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_g_exceptionFrameCur = 0;\n
    for (v1 = 0; v1 < 0x80000; v1 = v3)\n
    {\n
        *((v0 + 26192 + v1 + 1600)) = 0;\n
        v3 = v1 + 1;\n
    }\n
    return v3;\n
}\n
", "4213127:sub_404987": null, "4213136:cgc_get_next_exception_frame": "typedef struct struct_0 {\n
    char padding_0[581];\n
    char field_245;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_exceptionFrameCur;\n
\n
int cgc_get_next_exception_frame()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    int tmp_26;  // tmp #26\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_g_exceptionFrameCur >= 5)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v3 = v0;\n
    tmp_26 = v3->field_245;\n
    v3->field_245 = v3->field_245 + 1;\n
    v1 = &v3[47].padding_0[278 + 32 * tmp_26];\n
    return v1;\n
}\n
", "4213235:sub_4049f3": null, "4213248:cgc_get_current_exception_frame": "typedef struct struct_0 {\n
    char padding_0[581];\n
    char field_245;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_exceptionFrameCur;\n
\n
int cgc_get_current_exception_frame()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_g_exceptionFrameCur <= 0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v3 = v0;\n
    v1 = &v3[47].padding_0[278 + 32 + 32 * v3->field_245];\n
    return v1;\n
}\n
", "4213337:sub_404a59": null, "4213344:cgc_pop_exception_frame": "typedef struct struct_0 {\n
    char padding_0[581];\n
    char field_245;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_exceptionFrameCur;\n
\n
int cgc_pop_exception_frame()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_g_exceptionFrameCur <= 0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v3 = v0;\n
    v3->field_245 = v3->field_245 - 1;\n
    v1 = &v3[47].padding_0[278 + 32 * v3->field_245];\n
    return v1;\n
}\n
", "4213445:sub_404ac5": null, "4213456:cgc_peek_parser_stack": "typedef struct struct_0 {\n
    char padding_0[582];\n
    char field_246;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_parseStackSize;\n
\n
int cgc_peek_parser_stack(unsigned int *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc]\n
    struct_0 *v4;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = v3;\n
    v2 = v1;\n
    if (!cgc_g_parseStackSize)\n
    {\n
        *(v1) = 2;\n
        return v2;\n
    }\n
    v4 = v0;\n
    memcpy(v1, &v4[44].padding_0[540 + 72 + 72 * v4->field_246], 72);\n
    return v2;\n
}\n
", "4213575:sub_404b47": null, "4213584:cgc_pop_parser_stack": "typedef struct struct_0 {\n
    char padding_0[582];\n
    char field_246;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_parseStackSize;\n
\n
int cgc_pop_parser_stack(unsigned int *v3)\n
{\n
    struct_0 *v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10]\n
    unsigned int *v2;  // [bp-0xc]\n
    struct_0 *v4;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = v3;\n
    v2 = v1;\n
    if (!cgc_g_parseStackSize)\n
    {\n
        *(v1) = 2;\n
        return v2;\n
    }\n
    v4 = v0;\n
    v4->field_246 = v4->field_246 - 1;\n
    memcpy(v1, &v4[44].padding_0[540 + 72 * v4->field_246], 72);\n
    return v2;\n
}\n
", "4213714:sub_404bd2": null, "4213728:cgc_push_parser_stack": "typedef struct struct_0 {\n
    char padding_0[582];\n
    char field_246;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_memoryGlobal;\n
extern char cgc_g_parseStackSize;\n
\n
int cgc_push_parser_stack()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    struct_0 *v4;  // eax\n
    unsigned int v5;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    memcpy(&(&cgc_g_memoryGlobal)[72 * cgc_g_parseStackSize], &v2, 72);\n
    v4 = v0;\n
    v4->field_246 = v4->field_246 + 1;\n
    v5 = v1;\n
    return v0;\n
}\n
", "4213815:sub_404c37": null, "4213824:cgc_strbeg": "int cgc_strbeg(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[v2] && !v0[a0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[a0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (!v0[v2])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (v0[v2] == v0[a0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4214022:sub_404d06": null, "4214032:cgc_parse_get_symbol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_get_symbol(unsigned int v4, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v1 = 0; cgc_isspace(v1[v4]); v1 += 1);\n
    if (!*((v4 + v1)))\n
    {\n
        *(a0) = v1;\n
        v3 = 13;\n
        return v3;\n
    }\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + (v2 << 3) + 448)) == 12)\n
        {\n
            *(a0) = v1;\n
            v3 = 12;\n
            return v3;\n
        }\n
        else if (cgc_strbeg(v4 + v1, *((v0 + (v2 << 3) + 444))))\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v1 = cgc_strlen(*((v0 + v2 * 8 + 444))) + v1;\n
            *(a0) = v1;\n
            v3 = *((v0 + v2 * 8 + 448));\n
            return v3;\n
        }\n
    }\n
}\n
", "4214323:sub_404e33": null, "4214336:cgc_is_symbol_close_paran": "int cgc_is_symbol_close_paran(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 == 1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214380:sub_404e6c": null, "4214384:cgc_is_symbol_open_paran": "int cgc_is_symbol_open_paran(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214428:sub_404e9c": null, "4214432:cgc_is_symbol_result_operator": "int cgc_is_symbol_result_operator(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 - 6 <= 1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214491:sub_404edb": null, "4214496:cgc_is_symbol_db_operator": "int cgc_is_symbol_db_operator(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 - 2 <= 3)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214555:sub_404f1b": null, "4214560:cgc_is_symbol_element": "int cgc_is_symbol_element(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 - 8 <= 3)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214619:sub_404f5b": null, "4214624:cgc_is_symbol_birthdate": "int cgc_is_symbol_birthdate(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 == 11)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4214668:sub_404f8c": null, "4214672:cgc_do_date_search": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned short field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[391];\n
    unsigned int field_187;\n
    unsigned short field_18b;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_date_search()\n
{\n
    unsigned int v19;  // [bp+0xfff90]\n
    unsigned int v20;  // [bp+0xfff9c]\n
\n
    if (v20)\n
        v19 = 1;\n
}\n
", "4215069:sub_40511d": null, "4215072:cgc_do_string_search": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_string_search()\n
{\n
    unsigned int v16;  // [bp+0xfff98]\n
    unsigned int v17;  // [bp+0xfff9c]\n
\n
    if (v17)\n
        v16 = 1;\n
}\n
", "4215587:sub_405323": null, "4215600:cgc_do_result_search": "typedef struct struct_1 {\n
    char padding_0[68];\n
    char field_44;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_result_search()\n
{\n
    int tmp_23;  // tmp #23\n
    char v0;  // [bp-0x13c]\n
    unsigned int v1;  // [bp-0xe8]\n
    struct_1 *v2;  // [bp-0xe4]\n
    struct_1 *v3;  // [bp-0xe0]\n
    unsigned int v4;  // [bp-0xdc]\n
    char *v5;  // [bp-0xd8]\n
    char *v6;  // [bp-0xd4], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xd0]\n
    char *v8;  // [bp-0xcc]\n
    char *v9;  // [bp-0xc8], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0xc4]\n
    char v11;  // [bp-0xc0]\n
    char v12;  // [bp-0x80]\n
    void* v13;  // [bp-0x7c], Other Possible Types: unsigned int\n
    void* v14;  // [bp-0x78], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x74]\n
    unsigned int v16;  // [bp-0x70]\n
    unsigned int v17;  // [bp-0x6c]\n
    char v18;  // [bp-0x68]\n
    char v19;  // [bp-0x28]\n
    void* v20;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v22;  // [bp-0x18]\n
    unsigned int v23;  // [bp-0x14]\n
    unsigned int v24;  // [bp+0x4]\n
    char v25;  // [bp+0x4c]\n
    char v26;  // [bp+0x50]\n
    unsigned int *v28;  // edi, Other Possible Types: unsigned int\n
    unsigned int v29;  // ecx\n
    unsigned int v31;  // d\n
    struct_0 *v32;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v34;  // edi, Other Possible Types: unsigned int\n
    unsigned int v35;  // ecx\n
    struct_0 *v36;  // esi, Other Possible Types: unsigned int\n
    unsigned int v37;  // d\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v26;\n
    v3 = &v24;\n
    if (*(&v25) != 6)\n
    {\n
        if (*(&v25) != 7)\n
            return;\n
        v16 = v3->field_44;\n
        v15 = v2->field_44;\n
        v10 = 1;\n
        v12 = 0;\n
        for (v14 = 0; v14 < v16; v14 += 1)\n
        {\n
            v9 = 0;\n
            v8 = v12;\n
            v7 = 0;\n
            for (v9 = 0; v9 < v8; v9 += 1)\n
            {\n
                if (*((v3 + v14 + 4)) == (&v11)[v9])\n
                {\n
                    v7 = 1;\n
                    break;\n
                }\n
            }\n
            if (!v7)\n
            {\n
                tmp_23 = v12;\n
                v12 += 1;\n
                (&v11)[tmp_23] = *((v3 + v14 + 4));\n
            }\n
        }\n
        for (v13 = 0; v13 < v15; v13 += 1)\n
        {\n
            v6 = 0;\n
            v5 = v12;\n
            v4 = 0;\n
            for (v6 = 0; v6 < v5; v6 += 1)\n
            {\n
                if (*((v2 + v13 + 4)) == (&v11)[v6])\n
                {\n
                    v4 = 1;\n
                    break;\n
                }\n
            }\n
            if (!v4)\n
            {\n
                tmp_23 = v12;\n
                v12 += 1;\n
                (&v11)[tmp_23] = *((v2 + v13 + 4));\n
            }\n
        }\n
        v34 = &v0;\n
        v35 = 18;\n
        for (v36 = &v10; v35; v36 += v37 * 4)\n
        {\n
            v35 -= 1;\n
            *(v34) = *(v36);\n
            v34 += v37 * 4;\n
        }\n
        cgc_push_parser_stack();\n
    }\n
    else\n
    {\n
        v23 = v3->field_44;\n
        v22 = v2->field_44;\n
        v17 = 1;\n
        v19 = 0;\n
        for (v21 = 0; v21 < v23; v21 += 1)\n
        {\n
            for (v20 = 0; v20 < v22; v20 += 1)\n
            {\n
                if (*((v3 + v21 + 4)) == *((v2 + v20 + 4)))\n
                {\n
                    tmp_23 = v19;\n
                    v19 += 1;\n
                    (&v18)[tmp_23] = *((v3 + v21 + 4));\n
                }\n
            }\n
        }\n
        v28 = &v0;\n
        v29 = 18;\n
        for (v32 = &v17; v29; v32 += v31 * 4)\n
        {\n
            v29 -= 1;\n
            *(v28) = *(v32);\n
            v28 += v31 * 4;\n
        }\n
        cgc_push_parser_stack();\n
        return;\n
    }\n
}\n
", "4216399:sub_40564f": null, "4216400:cgc_do_reduce_stack": "typedef struct struct_0 {\n
    char padding_0[582];\n
    char field_246;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_do_reduce_stack()\n
{\n
    unsigned int v0;  // [bp-0xf8]\n
    unsigned int v1;  // [bp-0xf4]\n
    struct_0 *v2;  // [bp-0xf0]\n
    char v3;  // [bp-0xec]\n
    char v4;  // [bp-0xa4]\n
    char v5;  // [bp-0xa0]\n
    unsigned int v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    struct_1 *v10;  // [bp-0x4]\n
    struct_1 *v11;  // [bp+0x0]\n
    unsigned int v13;  // [bp+0x48]\n
    char v14;  // [bp+0x4c]\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // esi\n
    struct_0 *v21;  // eax\n
    struct_0 *v22;  // eax\n
    struct_0 *v23;  // ebx\n
    struct_0 *v24;  // eax\n
    unsigned int *v25;  // eax, Other Possible Types: unsigned int\n
    unsigned int v26;  // ecx\n
    struct_1 *v27;  // esi, Other Possible Types: unsigned int\n
    struct struct_1 **v28;  // edi, Other Possible Types: unsigned int\n
    unsigned int v29;  // d\n
    unsigned int v30;  // ecx\n
    unsigned int *v31;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v32;  // esi, Other Possible Types: unsigned int\n
\n
    v9 = v18;\n
    v8 = v19;\n
    v7 = v20;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    while (true)\n
    {\n
        v25 = v2->field_246;\n
        if (v25 <= 2)\n
            break;\n
        v21 = v2;\n
        v25 = &v21[44].padding_0[540 + 72 + 72 * v21->field_246];\n
        if (*(v25) != 1)\n
        {\n
LABEL_4057b2:\n
            break;\n
        }\n
        else\n
        {\n
            v22 = v2;\n
            v25 = &v22[44].padding_0[540 + 144 + 72 * v22->field_246];\n
            if (!(!*(v25)))\n
                goto LABEL_4057b2;\n
            v23 = v2;\n
            v11 = *(&v23[44].padding_0[400 + 72 * v23->field_246]);\n
            v25 = cgc_is_symbol_result_operator(*(&v23[44].padding_0[400 + 72 * v23->field_246]));\n
            if (!v25)\n
                goto LABEL_4057b2;\n
            v24 = v2;\n
            v25 = &v24[44].padding_0[540 + 216 + 72 * v24->field_246];\n
            if (!(*(v25) == 1))\n
                goto LABEL_4057b2;\n
            v11 = &v6;\n
            cgc_pop_parser_stack(&v6);\n
            v10 = &v4;\n
            cgc_pop_parser_stack(&v6);\n
            v10 = &v3;\n
            cgc_pop_parser_stack(&v6);\n
            v1 = *(&v5);\n
            v26 = 18;\n
            v0 = 18;\n
            v27 = &v3;\n
            for (v28 = &v10; v26; v27 += v29 * 4)\n
            {\n
                v26 -= 1;\n
                *(v28) = *(v27);\n
                v28 += v29 * 4;\n
            }\n
            v30 = v0;\n
            v31 = &v14;\n
            for (v32 = &v6; v30; v32 += v29 * 4)\n
            {\n
                v30 -= 1;\n
                *(v31) = *(v32);\n
                v31 += v29 * 4;\n
            }\n
            v13 = v1;\n
            cgc_do_result_search();\n
        }\n
    }\n
    return v25;\n
}\n
", "4216775:sub_4057c7": null, "4216784:cgc_parse_search_expression": "typedef struct struct_1 {\n
    char padding_0[582];\n
    char field_246;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_g_parseStackSize;\n
\n
int cgc_parse_search_expression(struct_0 *v37)\n
{\n
    char v0;  // [bp-0x399]\n
    struct_1 *v1;  // [bp-0x398]\n
    struct_0 *v2;  // [bp-0x394], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x390]\n
    unsigned int v4;  // [bp-0x38c]\n
    char v5;  // [bp-0x388]\n
    char v6;  // [bp-0x348]\n
    void* v7;  // [bp-0x344]\n
    struct_0 *v8;  // [bp-0x340]\n
    unsigned int v9;  // [bp-0x2fc]\n
    char v10;  // [bp-0x2f8]\n
    void* v11;  // [bp-0x2b4]\n
    struct_0 *v12;  // [bp-0x2b0]\n
    unsigned int v13;  // [bp-0x26c]\n
    unsigned int v14;  // [bp-0x224]\n
    char v15;  // [bp-0x220]\n
    unsigned int v16;  // [bp-0x1dc]\n
    void* v17;  // [bp-0x194]\n
    struct_0 *v18;  // [bp-0x190]\n
    unsigned int v19;  // [bp-0x14c]\n
    char v20;  // [bp-0x148]\n
    char *v21;  // [bp-0x100], Other Possible Types: unsigned int\n
    char v22;  // [bp-0xf9]\n
    unsigned int v23;  // [bp-0x78]\n
    char v24;  // [bp-0x74]\n
    char v25;  // [bp-0x70]\n
    unsigned int v26;  // [bp-0x6c]\n
    char v27;  // [bp-0x68]\n
    void* v28;  // [bp-0x24]\n
    struct_0 *v29;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v30;  // [bp-0x1c]\n
    struct_0 *v31;  // [bp-0x18]\n
    void* v32;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v33;  // [bp-0x10]\n
    unsigned int v34;  // [bp-0xc]\n
    unsigned int v35;  // [bp-0x8]\n
    struct_0 *v36;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int *v38;  // [bp+0x8], Other Possible Types: unsigned short, char *\n
    unsigned int v42;  // ebx\n
    unsigned int v43;  // edi\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // eax\n
    struct struct_0 **v46;  // edi, Other Possible Types: unsigned int\n
    unsigned int v47;  // ecx\n
    struct_0 *v48;  // esi, Other Possible Types: unsigned int\n
    unsigned int v49;  // ecx\n
    unsigned int v50;  // d\n
    struct struct_0 **v51;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v52;  // esi, Other Possible Types: unsigned int\n
    unsigned int v53;  // ecx\n
    unsigned int v54;  // d\n
    struct struct_0 **v55;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v56;  // esi, Other Possible Types: unsigned int\n
    unsigned int v57;  // d\n
    struct struct_0 **v58;  // edi, Other Possible Types: unsigned int\n
    unsigned int v59;  // ecx\n
    struct_0 *v60;  // esi, Other Possible Types: unsigned int\n
    unsigned int v61;  // d\n
    struct_0 *v62;  // eax, Other Possible Types: unsigned int\n
\n
    v35 = v42;\n
    v34 = v43;\n
    v33 = v44;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v32 = 0;\n
    v29 = v37;\n
    cgc_g_parseStackSize = 0;\n
    v30 = 12;\n
    do\n
    {\n
        v28 = 0;\n
        v36 = v29;\n
        v37 = &v28;\n
        v31 = cgc_parse_get_symbol(v37, v38);\n
        v29 = v28 + v29;\n
        v36 = v31;\n
        if (cgc_is_symbol_db_operator(v31))\n
        {\n
            v36 = &v26;\n
            cgc_pop_parser_stack(&v26);\n
            if (!v26)\n
            {\n
                v36 = *(&v27);\n
                if (cgc_is_symbol_element(*(&v27)))\n
                {\n
                    if (*(&v27) != 11)\n
                    {\n
                        while (true)\n
                        {\n
                            v36 = *(v29);\n
                            if (!cgc_isspace(*(v29)))\n
                                break;\n
                            v29 += 1;\n
                        }\n
                        if (*(v29) != 34)\n
                        {\n
                            v36 = cgc_get_current_exception_frame();\n
                            v37 = 2;\n
                            v62 = longjmp(v36);\n
                            goto LABEL_405f30;\n
                        }\n
                        else\n
                        {\n
                            v29 += 1;\n
                            v21 = 0;\n
                            while (true)\n
                            {\n
                                v0 = 0;\n
                                if (v29->field_0)\n
                                    v0 = v29->field_0 != 34;\n
                                if (!(v0 & 1))\n
                                    break;\n
                                v45 = v21;\n
                                v21 = v45 + 1;\n
                                (&v22)[v45] = *(v29);\n
                                v29 += 1;\n
                                if (v21 >= 128)\n
                                    break;\n
                            }\n
                            (&v22)[v21] = 0;\n
                            if (v29)\n
                            {\n
                                v29 += 1;\n
                                v36 = *(&v27);\n
                                v37 = v31;\n
                                v38 = &v22;\n
                                cgc_do_string_search(v37, v38);\n
                            }\n
                            else\n
                            {\n
                                v36 = cgc_get_current_exception_frame();\n
                                v37 = 2;\n
                                v62 = longjmp(v36);\n
                                goto LABEL_405f30;\n
                            }\n
                        }\n
                    }\n
                    else\n
                    {\n
                        v36 = v29;\n
                        v37 = &v24;\n
                        v23 = cgc_parse_date(v37, v38);\n
                        if (v23)\n
                        {\n
                            v29 = &v29[v23];\n
                            v36 = v31;\n
                            v37 = *(&v24);\n
                            v38 = *(&v25);\n
                            cgc_do_date_search(v37, v38);\n
                        }\n
                        else\n
                        {\n
                            v36 = cgc_get_current_exception_frame();\n
                            v37 = 2;\n
                            v62 = longjmp(v36);\n
                            goto LABEL_405f30;\n
                        }\n
                    }\n
                    goto LABEL_405e11;\n
                }\n
            }\n
            v36 = cgc_get_current_exception_frame();\n
            v37 = 2;\n
            v62 = longjmp(v36);\n
            goto LABEL_405f30;\n
        }\n
        v36 = v31;\n
        if (cgc_is_symbol_open_paran(v31))\n
        {\n
            v36 = &v19;\n
            cgc_peek_parser_stack(&v19);\n
            if (v19 == 2)\n
            {\n
LABEL_405b3f:\n
                v17 = 0;\n
                v18 = v31;\n
                v55 = &v36;\n
                v53 = 18;\n
                for (v56 = &v17; v53; v56 += v54 * 4)\n
                {\n
                    v53 -= 1;\n
                    *(v55) = *(v56);\n
                    v55 += v54 * 4;\n
                }\n
                cgc_push_parser_stack();\n
                goto LABEL_405e11;\n
            }\n
            else\n
            {\n
                if (!v19 && !*(&v20))\n
                    goto LABEL_405b3f;\n
                if (!v19)\n
                {\n
                    v36 = *(&v20);\n
                    if (!(!cgc_is_symbol_result_operator(*(&v20))))\n
                        goto LABEL_405b3f;\n
                }\n
                v36 = cgc_get_current_exception_frame();\n
                v37 = 2;\n
                v62 = longjmp(v36);\n
                goto LABEL_405f30;\n
            }\n
        }\n
        v36 = v31;\n
        if (cgc_is_symbol_close_paran(v31))\n
        {\n
            v36 = &v16;\n
            cgc_pop_parser_stack(&v16);\n
            if (v16 != 1)\n
            {\n
                v36 = cgc_get_current_exception_frame();\n
                v37 = 2;\n
                v62 = longjmp(v36);\n
                goto LABEL_405f30;\n
            }\n
            v36 = &v14;\n
            cgc_pop_parser_stack(&v14);\n
            if (!v14 && !*(&v15))\n
            {\n
                v46 = &v36;\n
                v47 = 18;\n
                for (v48 = &v16; v47; v48 += v57 * 4)\n
                {\n
                    v47 -= 1;\n
                    *(v46) = *(v48);\n
                    v46 += v57 * 4;\n
                }\n
                cgc_push_parser_stack();\n
                goto LABEL_405e11;\n
            }\n
            v36 = cgc_get_current_exception_frame();\n
            v37 = 2;\n
            v62 = longjmp(v36);\n
            goto LABEL_405f30;\n
        }\n
        v36 = v31;\n
        if (cgc_is_symbol_result_operator(v31))\n
        {\n
            v36 = &v13;\n
            cgc_peek_parser_stack(&v13);\n
            if (v13 == 1)\n
            {\n
                v11 = 0;\n
                v12 = v31;\n
                v51 = &v36;\n
                v49 = 18;\n
                for (v52 = &v11; v49; v52 += v50 * 4)\n
                {\n
                    v49 -= 1;\n
                    *(v51) = *(v52);\n
                    v51 += v50 * 4;\n
                }\n
                cgc_push_parser_stack();\n
                goto LABEL_405e11;\n
            }\n
            else\n
            {\n
                v36 = cgc_get_current_exception_frame();\n
                v37 = 2;\n
                v62 = longjmp(v36);\n
                goto LABEL_405f30;\n
            }\n
        }\n
        v36 = v31;\n
        if (cgc_is_symbol_element(v31))\n
        {\n
            v36 = &v9;\n
            cgc_peek_parser_stack(&v9);\n
            if (v9 == 2)\n
            {\n
LABEL_405d99:\n
                v7 = 0;\n
                v8 = v31;\n
                v58 = &v36;\n
                v59 = 18;\n
                for (v60 = &v7; v59; v60 += v61 * 4)\n
                {\n
                    v59 -= 1;\n
                    *(v58) = *(v60);\n
                    v58 += v61 * 4;\n
                }\n
                cgc_push_parser_stack();\n
                goto LABEL_405e11;\n
            }\n
            else\n
            {\n
                if (!v9)\n
                {\n
                    v36 = *(&v10);\n
                    if (!(!cgc_is_symbol_open_paran(*(&v10))))\n
                        goto LABEL_405d99;\n
                }\n
                if (!v9)\n
                {\n
                    v36 = *(&v10);\n
                    if (!(!cgc_is_symbol_result_operator(*(&v10))))\n
                        goto LABEL_405d99;\n
                }\n
                v36 = cgc_get_current_exception_frame();\n
                v37 = 2;\n
                v62 = longjmp(v36);\n
                goto LABEL_405f30;\n
            }\n
        }\n
        if (v31 == 13)\n
        {\n
            v32 = 1;\n
        }\n
        else if (v31 == 12)\n
        {\n
            v36 = cgc_get_current_exception_frame();\n
            v37 = 2;\n
            longjmp(v36);\n
        }\n
LABEL_405e11:\n
        cgc_do_reduce_stack();\n
    } while (((v32 ^ 255) & 1));\n
    v36 = &v4;\n
    cgc_pop_parser_stack(&v4);\n
    if (v4 == 1 && !v1->field_246)\n
    {\n
        v3 = v6;\n
        v36 = &v1[5].padding_0[406];\n
        v37 = v3;\n
        cgc_printf(&v1[5].padding_0[406]);\n
        v2 = 0;\n
        while (true)\n
        {\n
            v62 = v2;\n
            if (v62 >= v3)\n
                break;\n
            v36 = (&v5)[v2];\n
            v36 = cgc_db_search_index((&v5)[v2]);\n
            cgc_print_record_helper(v36);\n
            v2 += 1;\n
        }\n
    }\n
    v36 = cgc_get_current_exception_frame();\n
    v37 = 2;\n
    v62 = longjmp(v36);\n
LABEL_405f30:\n
    return v62;\n
}\n
", "4218683:sub_405f3b": null, "4218688:cgc_readLine": "typedef struct struct_0 {\n
    char padding_0[584];\n
    unsigned int field_248;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readLine(unsigned int v7, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct_0 *v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x12]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    for (v5 = 1; v5 < a1; v5 += 1)\n
    {\n
        v0 = &v2;\n
        v3 = cgc_receive(v7, &v4, 1);\n
        if (v3)\n
        {\n
            v1->field_248 = v3;\n
            v6 = -1;\n
            return v6;\n
        }\n
        if (v4 == 10)\n
            break;\n
        *(a0) = v4;\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    v6 = v5;\n
    return v6;\n
}\n
", "4218885:sub_406005": null, "4218896:cgc_sanitize_string": "int cgc_sanitize_string(char *v2)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8]\n
\n
    v1 = v2;\n
    while (true)\n
    {\n
        v0 = *(v2);\n
        if (!v0)\n
            break;\n
        if (v0 >= 97 && v0 <= 122)\n
            goto LABEL_40607d;\n
        if (v0 >= 65 && v0 <= 90)\n
            goto LABEL_40607d;\n
        if (v0 < 48)\n
        {\n
LABEL_406082:\n
            *(v2) = 95;\n
LABEL_406088:\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            if (!(v0 <= 57))\n
                goto LABEL_406082;\n
LABEL_40607d:\n
            goto LABEL_406088;\n
        }\n
    }\n
    return v1;\n
}\n
", "4219038:sub_40609e": null, "4219040:cgc_run_parser": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_parser()\n
{\n
    unsigned int v0;  // [bp-0x218]\n
    unsigned int v1;  // [bp-0x214]\n
    unsigned int v2;  // [bp-0x210]\n
    char v3;  // [bp-0x20a]\n
    char v4;  // [bp-0x9]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    cgc_init_user(&v1);\n
    do\n
    {\n
        cgc_printf(v0 - 3288);\n
        v2 = cgc_readLine(0, &v3, 0x200);\n
        if (v2 != -1)\n
        {\n
            v8 = cgc_parse_command(&v3, &v1);\n
        }\n
        else\n
        {\n
            v8 = cgc_printf(v0 - 3285);\n
            v4 = 1;\n
        }\n
        *(&v8) = v4 ^ 255;\n
    } while (((v4 ^ 255) & 1));\n
    v9 = v5;\n
    return v8;\n
}\n
", "4219253:sub_406175": null, "4219264:cgc_test": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_test()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter test function\\n
\");\n
    cgc_get_next_exception_frame();\n
    v2 = setjmp();\n
    if (!v2)\n
    {\n
        v0 = 1;\n
        longjmp(cgc_get_current_exception_frame());\n
    }\n
    else\n
    {\n
        if (!(v2 == 1))\n
            goto LABEL_406234;\n
        cgc_printf(v1 - 3235);\n
        v0 = 1;\n
        longjmp(cgc_get_current_exception_frame());\n
    }\n
LABEL_406234:\n
    cgc_printf(v1 - 3228);\n
    cgc_pop_exception_frame();\n
    v6 = v3;\n
    return cgc_printf(v1 - 3222);\n
}\n
", "4219492:sub_406264": null, "4219504:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    cgc_init_exception_handler();\n
    cgc_init_database();\n
    cgc_run_parser();\n
    v5 = v2;\n
    return 0;\n
}\n
", "4219568:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:longjmp": null, "5242888:memcpy": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:setjmp": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}