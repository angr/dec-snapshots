{"4202496:_init": "extern struct_0 *g_408124;\n
\n
int _init()\n
{\n
    if (g_408124)\n
    {\n
        g_408124();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_setjmp": "// attributes: PLT stub\n
int cgc_setjmp()\n
{\n
    ::libc.so.0::cgc_setjmp();\n
    return;\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4202656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202672:cgc_longjmp": "// attributes: PLT stub\n
int cgc_longjmp()\n
{\n
    ::libc.so.0::cgc_longjmp();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24571;\n
    v6 = v5 + 1648;\n
    v7 = v5 + 1648;\n
    if (v7 == v6)\n
        return v5 + 1648;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24507;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 1648;\n
    v9 = (v6 + 1648 - (v6 + 1648) >> 31) + (1648 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408120;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408120)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203119:sub_40226f": null, "4203120:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4203153:sub_402291": null, "4203168:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203187:sub_4022b3": null, "4203200:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203216:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203232:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203248:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203262:sub_4022fe": null, "4203264:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203286:sub_402316": null, "4203296:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203350:sub_402356": null, "4203360:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203382:sub_402376": null, "4203392:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8488 + v0];\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203449:sub_4023b9": null, "4203456:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8360 + v0];\n
}\n
", "4203481:sub_4023d9": null, "4203488:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203496:sub_4023e8": null, "4203504:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203523:sub_402403": null, "4203536:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203555:sub_402423": null, "4203568:cgc_filaments_init": "extern unsigned int g_active_fibs;\n
extern unsigned int g_fib;\n
\n
int cgc_filaments_init()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0x8]\n
    unsigned int v3[3];  // eax\n
\n
    v0 = &v1;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc__terminate();\n
        return cgc_filaments_switch();\n
    }\n
    v3 = *(&v1);\n
    v3[1] = 0;\n
    v3[2] = 0;\n
    v3[0] = 0;\n
    g_fib = *(&v1);\n
    g_active_fibs = g_fib;\n
    return *(&v1);\n
}\n
", "4203680:cgc_filaments_switch": "extern unsigned int g_fib;\n
\n
int cgc_filaments_switch(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1;  // [bp+0x0]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v3 = v2;\n
    if (g_fib == v3)\n
        return g_fib;\n
    v4 = cgc_setjmp();\n
    if (!v4)\n
    {\n
        g_fib = v3;\n
        v0 = 1;\n
        cgc_longjmp(v3 + 12);\n
        return cgc_filaments_yield(*(&v1));\n
    }\n
    return v4;\n
}\n
", "4203760:cgc_filaments_yield": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc_filaments_yield()\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    return cgc_filaments_switch(v1);\n
}\n
", "4203807:sub_40251f": null, "4203808:cgc___filaments_new": "extern unsigned int g_active_fibs;\n
extern struct_1 *g_fib;\n
\n
int cgc___filaments_new()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v0 = v2;\n
    g_fib->field_2c();\n
    while (true)\n
    {\n
        v3 = g_fib->field_0;\n
        if (!v3)\n
            v3 = g_active_fibs;\n
        cgc_filaments_switch(v3);\n
    }\n
}\n
", "4203841:sub_402541": null, "4203884:sub_40256c": null, "4203888:cgc_filaments_new": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned int g_active_fibs;\n
extern unsigned int g_next_id;\n
\n
int cgc_filaments_new(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0x8]\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // ecx\n
    unsigned int v5[13];  // edx\n
    unsigned int v7[6];  // eax\n
\n
    v0 = &v1;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        cgc__terminate();\n
        return cgc_filaments_current();\n
    }\n
    v3 = g_next_id;\n
    g_next_id = g_next_id + 1;\n
    v4 = *(&v1);\n
    v4->field_4 = v3;\n
    v0 = v4 + 1;\n
    if (!cgc_allocate(0x8000, 0))\n
    {\n
        v5 = *(&v1);\n
        v5[11] = v2;\n
        v5[12] = a0;\n
        v0 = 32;\n
        cgc_memset(&v5[3], 0);\n
        v7 = *(&v1);\n
        v7[3] = cgc___filaments_new;\n
        v7[5] = 32764 + v7[2];\n
        v7[0] = g_active_fibs;\n
        g_active_fibs = *(&v1);\n
        return *(&v1);\n
    }\n
}\n
", "4204080:cgc_filaments_current": "extern unsigned int g_fib;\n
\n
int cgc_filaments_current()\n
{\n
    return g_fib;\n
}\n
", "4204099:sub_402643": null, "4204112:cgc___filaments_transmit": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_transmit(unsigned int v1, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v2;  // eax\n
\n
    v2 = g_fib->field_0;\n
    if (!v2)\n
        v2 = g_active_fibs;\n
    cgc_filaments_switch(v2);\n
    v0 = a2;\n
    return cgc_transmit(v1, a0, a1);\n
}\n
", "4204193:sub_4026a1": null, "4204208:cgc___filaments_receive": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_receive(unsigned int v35, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0xa0]\n
    void* v1;  // [bp-0x9c]\n
    void* v2;  // [bp-0x98]\n
    void* v3;  // [bp-0x94]\n
    void* v4;  // [bp-0x90]\n
    void* v5;  // [bp-0x8c]\n
    void* v6;  // [bp-0x88]\n
    void* v7;  // [bp-0x84]\n
    void* v8;  // [bp-0x80]\n
    void* v9;  // [bp-0x7c]\n
    void* v10;  // [bp-0x78]\n
    void* v11;  // [bp-0x74]\n
    void* v12;  // [bp-0x70]\n
    void* v13;  // [bp-0x6c]\n
    void* v14;  // [bp-0x68]\n
    void* v15;  // [bp-0x64]\n
    void* v16;  // [bp-0x60]\n
    void* v17;  // [bp-0x5c]\n
    void* v18;  // [bp-0x58]\n
    void* v19;  // [bp-0x54]\n
    void* v20;  // [bp-0x50]\n
    void* v21;  // [bp-0x4c]\n
    void* v22;  // [bp-0x48]\n
    void* v23;  // [bp-0x44]\n
    void* v24;  // [bp-0x40]\n
    void* v25;  // [bp-0x3c]\n
    void* v26;  // [bp-0x38]\n
    void* v27;  // [bp-0x34]\n
    void* v28;  // [bp-0x30]\n
    void* v29;  // [bp-0x2c]\n
    void* v30;  // [bp-0x28]\n
    void* v31;  // [bp-0x24]\n
    void* v32;  // [bp-0x20]\n
    void* v33;  // [bp-0x1c]\n
    void* v34;  // [bp-0x18]\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // eax\n
\n
    v36 = v35;\n
    v37 = 1 << (v36 & 31);\n
    v38 = v36 / 32;\n
    while (true)\n
    {\n
        v3 = 0;\n
        v4 = 0;\n
        v5 = 0;\n
        v6 = 0;\n
        v7 = 0;\n
        v8 = 0;\n
        v9 = 0;\n
        v10 = 0;\n
        v11 = 0;\n
        v12 = 0;\n
        v13 = 0;\n
        v14 = 0;\n
        v15 = 0;\n
        v16 = 0;\n
        v17 = 0;\n
        v18 = 0;\n
        v19 = 0;\n
        v20 = 0;\n
        v21 = 0;\n
        v22 = 0;\n
        v23 = 0;\n
        v24 = 0;\n
        v25 = 0;\n
        v26 = 0;\n
        v27 = 0;\n
        v28 = 0;\n
        v29 = 0;\n
        v30 = 0;\n
        v31 = 0;\n
        v32 = 0;\n
        v33 = 0;\n
        v34 = 0;\n
        (&v3)[v38] = (&v3)[v38] | v37;\n
        v1 = 0;\n
        v2 = 0;\n
        if (cgc_fdwait(v36 + 1, &v3, 0, &v1))\n
            break;\n
        if ((v37 & (&v3)[v38]))\n
            break;\n
        v39 = g_fib->field_0;\n
        if (!v39)\n
            v39 = g_active_fibs;\n
        cgc_filaments_switch(v39);\n
    }\n
    v0 = a2;\n
    return cgc_receive(v35, a0, a1);\n
}\n
", "4204254:sub_4026de": null, "4204656:cgc___filaments_fdwait": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_fdwait(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = g_fib->field_0;\n
    if (!v1)\n
        v1 = g_active_fibs;\n
    cgc_filaments_switch(v1);\n
    return cgc_fdwait(v0, a0, a1, a2);\n
}\n
", "4204741:sub_4028c5": null, "4204752:cgc___filaments_allocate": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_allocate(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
\n
    v2 = g_fib->field_0;\n
    if (!v2)\n
        v2 = g_active_fibs;\n
    cgc_filaments_switch(v2);\n
    v0 = a1;\n
    return cgc_allocate(v1, a0);\n
}\n
", "4204829:sub_40291d": null, "4204832:cgc___filaments_deallocate": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_deallocate(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    v2 = g_fib->field_0;\n
    if (!v2)\n
        v2 = g_active_fibs;\n
    cgc_filaments_switch(v2);\n
    v0 = a0;\n
    return cgc_deallocate(v1);\n
}\n
", "4204903:sub_402967": null, "4204912:cgc___filaments_random": "extern unsigned int g_active_fibs;\n
extern struct_0 *g_fib;\n
\n
int cgc___filaments_random(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
\n
    v2 = g_fib->field_0;\n
    if (!v2)\n
        v2 = g_active_fibs;\n
    cgc_filaments_switch(v2);\n
    v0 = a1;\n
    return cgc_random(v1, a0);\n
}\n
", "4204989:sub_4029bd": null, "4204992:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
    {\n
        return v4;\n
    }\n
    else if (v1[5].field_-14)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        v2 = v1 + 6;\n
        v3 = *(v2);\n
        if (v3 >= 0x40000)\n
        {\n
            v4 = cgc___filaments_deallocate(v2, v3);\n
            return v4;\n
        }\n
        cgc_mutex_lock();\n
        cgc_insert_into_flist();\n
        cgc_coalesce();\n
        v4 = cgc_mutex_unlock();\n
        return v4;\n
    }\n
}\n
", "4205095:sub_402a27": null, "4205104:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_409b78;\n
\n
int cgc_malloc(unsigned int v2)\n
{\n
    char v0;  // [bp-0x18]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // ecx\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ebp\n
    unsigned int v7[6];  // esi\n
    struct_1 *v8;  // ebp\n
    struct struct_1 **v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // esi\n
    unsigned int v11[6];  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
    struct_0 *v14;  // ecx\n
\n
    v3 = v2;\n
    if (!v3)\n
    {\n
        return 0;\n
    }\n
    else if (v3 - 262120 <= -262145)\n
    {\n
        v5 = v3 + 4119 & -0x1000;\n
        if (!cgc___filaments_allocate(v5, 0, &v0))\n
        {\n
            v7 = *(&v0);\n
            v7[0] = v5;\n
            v7[1] = 0;\n
            v7[3] = 0;\n
            v7[2] = 0;\n
            v7[5] = 0;\n
            v7[4] = 0;\n
            v4 = v7 + 1;\n
            return v4;\n
        }\n
        return 0;\n
    }\n
    else\n
    {\n
        cgc_mutex_lock();\n
        v6 = v3 + 31 & -32;\n
        if (!(v3 & 31))\n
            v6 = v3;\n
        v8 = v6 + 24;\n
        v9 = cgc_get_size_class();\n
        if (v9 <= 31)\n
        {\n
            v10 = *((&cgc_free_lists + 0x4 * v9));\n
            if (!v10)\n
                goto LABEL_402b00;\n
            else\n
                goto LABEL_0x402b10;\n
        }\n
        else\n
        {\n
            if (!cgc___filaments_allocate(0x40000, 0, &v1))\n
            {\n
                v11 = *(&v1);\n
                if (v11)\n
                {\n
                    v11[0] = 0x40000;\n
                    v11[1] = 1;\n
                    v11[3] = 0;\n
                    v11[2] = 0;\n
                    v11[5] = 0;\n
                    v11[4] = 0;\n
                    cgc_insert_into_flist();\n
                    v10 = g_409b78;\n
                    cgc_remove_from_flist();\n
                    v12 = *(v10) - v8;\n
                    if (v12 >= 49)\n
                    {\n
                        v13 = v10 + v8;\n
                        *((&v8->field_0 + v10)) = v12;\n
                        *(&v8->padding_4[v10]) = 1;\n
                        *((8 + &v8->field_0 + v10)) = 0;\n
                        *(&v8->padding_c[v10]) = 0;\n
                        *(v10) = v8;\n
                        *((20 + &v8->field_0 + v10)) = v10;\n
                        *((16 + &v8->field_0 + v10)) = *((v10 + 16));\n
                        v14 = *((v10 + 16));\n
                        if (v14)\n
                            v14->field_14 = v13;\n
                        *((v10 + 16)) = v13;\n
                        cgc_insert_into_flist();\n
                    }\n
                    v4 = v10 + 24;\n
                    goto LABEL_402bdb;\n
                }\n
            }\n
            v4 = 0;\n
            goto LABEL_402bdb;\n
        }\n
        while (true)\n
        {\n
            while (*(v10) < v8)\n
            {\n
                v10 = *((v10 + 8));\n
                if (!v10)\n
                    goto LABEL_402b00;\n
            }\n
            while (true)\n
            {\n
LABEL_402b00:\n
                v9 += 1;\n
                if (v9 == 32)\n
                    break;\n
                v10 = *(&(&cgc_free_lists)[4 * v9]);\n
            }\n
        }\n
LABEL_402bdb:\n
        cgc_mutex_unlock();\n
        return v4;\n
    }\n
}\n
", "4205549:sub_402bed": null, "4205552:cgc_get_size_class": "extern unsigned int g_408174;\n
extern unsigned int g_408178;\n
extern unsigned int g_40817c;\n
extern unsigned int g_408180;\n
extern unsigned int g_408184;\n
extern unsigned int g_408188;\n
extern unsigned int g_40818c;\n
extern unsigned int g_408190;\n
extern unsigned int g_408194;\n
extern unsigned int g_408198;\n
extern unsigned int g_40819c;\n
extern unsigned int g_4081a0;\n
extern unsigned int g_4081a4;\n
extern unsigned int g_4081a8;\n
extern unsigned int g_4081ac;\n
extern unsigned int g_4081b0;\n
extern unsigned int g_4081b4;\n
extern unsigned int g_4081b8;\n
extern unsigned int g_4081bc;\n
extern unsigned int g_4081c0;\n
extern unsigned int g_4081c4;\n
extern unsigned int g_4081c8;\n
extern unsigned int g_4081cc;\n
extern unsigned int g_4081d0;\n
extern unsigned int g_4081d4;\n
extern unsigned int g_4081d8;\n
extern unsigned int g_4081dc;\n
extern unsigned int g_4081e0;\n
extern unsigned int g_4081e4;\n
extern unsigned int g_4081e8;\n
extern unsigned int g_4081ec;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_408174 < v1)\n
    {\n
        v2 = 2;\n
        if (g_408178 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40817c < v1)\n
            {\n
                v2 = 4;\n
                if (g_408180 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_408184 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_408188 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40818c < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_408190 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_408194 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_408198 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40819c < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_4081a0 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_4081a4 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_4081a8 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_4081ac < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_4081b0 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_4081b4 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_4081b8 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_4081bc < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_4081c0 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_4081c4 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_4081c8 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_4081cc < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_4081d0 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_4081d4 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_4081d8 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_4081dc < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_4081e0 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_4081e4 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_4081e8 < v1)\n
                                                                                                                            v2 = 31 + (g_4081ec < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4206071:sub_402df7": null, "4206080:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4206173:sub_402e5d": null, "4206176:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // ecx\n
    struct_1 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4206271:sub_402ebf": null, "4206272:cgc_coalesce": "typedef struct struct_6 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    struct struct_1 *field_c;\n
    struct struct_5 *field_10;\n
    struct struct_3 *field_14;\n
} struct_6;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    struct struct_1 *field_c;\n
    unsigned int field_10;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    struct struct_1 *field_c;\n
    struct struct_4 *field_10;\n
    struct struct_0 *field_14;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_4;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_6 *v0)\n
{\n
    struct_6 *v1;  // esi\n
    struct_3 *v2;  // edi\n
    struct_5 *v3;  // edi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
    struct_1 *v7;  // ecx\n
    struct_1 *v8;  // ecx\n
    struct_1 *v9;  // ecx\n
    struct_2 *v10;  // edx\n
    struct_2 *v11;  // edx\n
    struct_2 *v12;  // edx\n
    struct_5 *v13;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // eax\n
    struct_1 *v19;  // ecx\n
    struct_1 *v20;  // ecx\n
    struct_1 *v21;  // ecx\n
    struct_2 *v22;  // edx\n
    struct_2 *v23;  // edx\n
    struct_2 *v24;  // edx\n
    unsigned int v25;  // ebp\n
    unsigned int v26;  // eax\n
    struct_3 *v27;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v28;  // edi\n
    struct_5 *v29;  // eax\n
    struct_5 *v30;  // ecx\n
    unsigned int v31;  // edi\n
    struct_0 *v32;  // eax\n
    struct_1 *v33;  // ecx\n
    unsigned int v34;  // eax\n
    struct_4 *v35;  // ecx\n
    struct_2 *v36;  // edx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ecx\n
    struct_3 *v39;  // edi, Other Possible Types: unsigned int\n
    unsigned int v40;  // ebp\n
    struct_5 *v41;  // ecx\n
    struct_0 *v42;  // eax\n
    struct_4 *v43;  // ecx\n
    struct_5 *v44;  // eax, Other Possible Types: unsigned int\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_14;\n
    if (v2 && v2->field_4)\n
    {\n
        v13 = v1->field_10;\n
        if (v1->field_10 && v13->field_4)\n
        {\n
            v4 = cgc_get_size_class(v2->field_0);\n
            v7 = v2->field_c;\n
            if (v7)\n
                v7->field_8 = v2->field_8;\n
            v10 = v2->field_8;\n
            if (v10)\n
                v10->field_c = v7;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v4]) == v2)\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v4]) = v10;\n
                v13 = v1->field_10;\n
            }\n
            v2->field_8 = 0;\n
            v2->field_c = 0;\n
            v2->field_4 = 0;\n
            v14 = cgc_get_size_class(*(v13));\n
            v19 = *((v13 + 12));\n
            if (v19)\n
                v19->field_8 = *((v13 + 8));\n
            v22 = *((v13 + 8));\n
            if (v22)\n
                v22->field_c = v19;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v14]) == v13)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v14]) = v22;\n
            *((v13 + 8)) = 0;\n
            *((v13 + 12)) = 0;\n
            *((v13 + 4)) = 0;\n
            v25 = v1->field_0;\n
            v26 = cgc_get_size_class(v1->field_0);\n
            v33 = v1->field_c;\n
            if (v33)\n
                v33->field_8 = v1->field_8;\n
            v36 = v1->field_8;\n
            if (v36)\n
                v36->field_c = v33;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v26]) == v1)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v26]) = v36;\n
            v1->field_8 = 0;\n
            v1->field_c = 0;\n
            v1->field_4 = 0;\n
            v39 = v1->field_14;\n
            v40 = v25 + v39->field_0;\n
            v39->field_0 = v40;\n
            v41 = v1->field_10;\n
            v39->field_0 = v40 + v41->field_0;\n
            v42 = v41->field_14;\n
            if (v42)\n
                v42->field_10 = v41->field_10;\n
            v43 = v41->field_10;\n
            if (!v43)\n
            {\n
LABEL_403007:\n
                *((v39 + 16)) = v1->field_10;\n
                v44 = v1->field_10;\n
                if (!v44)\n
                    goto LABEL_40301a;\n
                goto LABEL_403014;\n
            }\n
            else\n
            {\n
                v43->field_14 = v42;\n
                v39 = v1->field_14;\n
                if (!(!v39))\n
                    goto LABEL_403007;\n
                v39 = 0;\n
                v44 = v1->field_10;\n
                if (!v44)\n
                    goto LABEL_40301a;\n
LABEL_403014:\n
                *((v44 + 20)) = v39;\n
                v39 = v1->field_14;\n
            }\n
LABEL_40301a:\n
            v34 = cgc_get_size_class(*(v39));\n
            *((v39 + 4)) = 1;\n
            v45 = *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]);\n
            if (!v45)\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v39;\n
                return v34;\n
            }\n
            *((v39 + 8)) = v45;\n
            *((*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) + 12)) = v39;\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v39;\n
            *((v39 + 12)) = 0;\n
            return v34;\n
        }\n
        v5 = cgc_get_size_class(v2->field_0);\n
        v8 = v2->field_c;\n
        if (v8)\n
            v8->field_8 = v2->field_8;\n
        v11 = v2->field_8;\n
        if (v11)\n
            v11->field_c = v8;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v5]) == v2)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v5]) = v11;\n
        v2->field_8 = 0;\n
        v2->field_c = 0;\n
        v2->field_4 = 0;\n
        v15 = v1->field_0;\n
        v16 = cgc_get_size_class(v15);\n
        v20 = v1->field_c;\n
        if (v20)\n
            v20->field_8 = v1->field_8;\n
        v23 = v1->field_8;\n
        if (v23)\n
            v23->field_c = v20;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v16]) == v1)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v16]) = v23;\n
        v1->field_8 = 0;\n
        v1->field_c = 0;\n
        v1->field_4 = 0;\n
        v27 = v1->field_14;\n
        v28 = v15 + v1->field_14->field_0;\n
        v1->field_14->field_0 = v28;\n
        v27->field_10 = v1->field_10;\n
        v29 = v1->field_10;\n
        if (v29)\n
        {\n
            v29->field_14 = &v27->field_0;\n
            v27 = v1->field_14;\n
            v28 = v1->field_14->field_0;\n
        }\n
        v34 = cgc_get_size_class(v28);\n
        *((v27 + 4)) = 1;\n
        v37 = *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]);\n
        if (!v37)\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v27;\n
            return v34;\n
        }\n
        *((v27 + 8)) = v37;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) + 12)) = v27;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v27;\n
        *((v27 + 12)) = 0;\n
        return v34;\n
    }\n
    v3 = v1->field_10;\n
    if (!v3)\n
    {\n
        return v34;\n
    }\n
    else if (!v3->field_4)\n
    {\n
        return v34;\n
    }\n
    else\n
    {\n
        v6 = cgc_get_size_class(v3->field_0);\n
        v9 = v3->field_c;\n
        if (v9)\n
            v9->field_8 = v3->field_8;\n
        v12 = v3->field_8;\n
        if (v12)\n
            v12->field_c = v9;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v6]) == v3)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v6]) = v12;\n
        v3->field_8 = 0;\n
        v3->field_c = 0;\n
        v3->field_4 = 0;\n
        v17 = v1->field_0;\n
        v18 = cgc_get_size_class(v17);\n
        v21 = v1->field_c;\n
        if (v21)\n
            v21->field_8 = v1->field_8;\n
        v24 = v1->field_8;\n
        if (v24)\n
            v24->field_c = v21;\n
        if (*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v18]) == v1)\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v18]) = v24;\n
        v1->field_8 = 0;\n
        v1->field_c = 0;\n
        v1->field_4 = 0;\n
        v30 = v1->field_10;\n
        v31 = v17 + v30->field_0;\n
        v1->field_0 = v31;\n
        v32 = v30->field_14;\n
        if (v32)\n
            v32->field_10 = v30->field_10;\n
        v35 = v30->field_10;\n
        if (v35)\n
            v35->field_14 = v32;\n
        v34 = cgc_get_size_class(v31);\n
        v1->field_4 = 1;\n
        v38 = *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]);\n
        if (!v38)\n
        {\n
            *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v1;\n
            return v34;\n
        }\n
        v1->field_8 = v38;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[6604 + 4 * v34]) = v1;\n
        v1->field_c = 0;\n
        return v34;\n
    }\n
}\n
", "4207212:sub_40326c": null, "4207216:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4207273:sub_4032a9": null, "4207280:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((a0 + v2)) != *((v0 + v2)))\n
            return *((a0 + v2)) - *((v0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4207343:sub_4032ef": null, "4207344:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4207474:sub_403372": null, "4207488:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4207744:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4207854:sub_4034ee": null, "4207856:cgc_mutex_lock": "int cgc_mutex_lock(unsigned int v1[3])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3[3];  // esi\n
    unsigned int v4;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    if (v3[0])\n
    {\n
        do\n
        {\n
            v3[2] = cgc_filaments_current();\n
            cgc_filaments_yield();\n
        } while (v3[0]);\n
    }\n
    v3[0] = 1;\n
    v4 = cgc_filaments_current();\n
    v3[1] = v4;\n
    v3[2] = 0;\n
    return v4;\n
}\n
", "4207933:sub_40353d": null, "4207936:cgc_mutex_unlock": "int cgc_mutex_unlock(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v1[0] = 0;\n
    v2 = v1[2];\n
    if (v2)\n
        v2 = cgc_filaments_switch(v2);\n
    return v2;\n
}\n
", "4207982:sub_40356e": null, "4207984:cgc_output_number_printf": "int cgc_output_number_printf(unsigned int v4, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    char v0;  // [bp-0x1d]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
    char v13;  // al\n
\n
    v5 = a2;\n
    v6 = a1;\n
    v7 = a0;\n
    v10 = v4;\n
    if (v7 < v6)\n
    {\n
        v2 = v7;\n
        v1 = 0;\n
        if (v5 <= 0)\n
            goto LABEL_40364b;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v7) /m v6;\n
        v2 = tmp_9 >> 32;\n
        v10 = v4;\n
        v1 = cgc_output_number_printf(v4, (0 CONCAT v7) /m v6, v6, v5 - 1, a3);\n
        if (v5 <= 0)\n
            goto LABEL_40364b;\n
    }\n
    if (!v1)\n
    {\n
        tmp_2 = v5;\n
        v11 = v5 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v0 = 48;\n
                    cgc___filaments_transmit(v10, &v0, 1, &v3);\n
                    v10 = v4;\n
                    tmp_6 = v11;\n
                    v11 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v0 = 32;\n
                    cgc___filaments_transmit(v10, &v0, 1, &v3);\n
                    v10 = v4;\n
                    tmp_6 = v11;\n
                    v11 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_40364b:\n
    if (!(a3 & 2))\n
    {\n
        v12 = v2;\n
        v13 = v12 + 87;\n
    }\n
    else\n
    {\n
        v12 = v2;\n
        v13 = v12 + 55;\n
    }\n
    if (v12 < 10)\n
        v13 = v12 + 48;\n
    v0 = v13;\n
    cgc___filaments_transmit(v10, &v0, 1, &v3);\n
    return v1 + 1;\n
}\n
", "4208276:sub_403694": null, "4208288:cgc_fdprintf": "int cgc_fdprintf(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    char v5;  // [bp-0x1d]\n
    char v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    char v10;  // [bp+0xc]\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // edi\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // ebp\n
    unsigned int v28;  // edi\n
\n
    v11 = a0;\n
    v7 = &v10;\n
    if (!*(v11))\n
        return 0;\n
    v12 = v9;\n
    v13 = &v6;\n
    v14 = &v5;\n
    do\n
    {\n
        v19 = v11 + 1;\n
        a0 = v19;\n
        *(&v11) = *(v11);\n
        if (v5 == 37)\n
        {\n
            v8 = 0;\n
            v17 = 0;\n
            v18 = v19;\n
            while (true)\n
            {\n
                v19 = v18 + 1;\n
                a0 = v19;\n
                v15 = *(v18);\n
                v16 = v15;\n
                if (v16 - 49 >= 9)\n
                    break;\n
                v17 = cgc_strtol(v18, &a0);\n
                v18 = a0;\n
            }\n
            switch (v16)\n
            {\n
            case 88:\n
                v20 = v8 | 2;\n
                goto LABEL_403859;\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
                v5 = v15;\n
                break;\n
            case 99:\n
                v21 = v7;\n
                v7 = v21 + 4;\n
                v5 = *(v21);\n
                break;\n
            case 100:\n
                v22 = v7;\n
                v7 = v22 + 4;\n
                v23 = *(v22);\n
                if (v23 >= 0)\n
                {\n
                    v27 = v9;\n
                }\n
                else\n
                {\n
LABEL_403897:\n
                    v5 = 45;\n
                    v27 = v9;\n
                    cgc___filaments_transmit(v9, &v5, 1, &v6);\n
                    v23 = -(v23);\n
                }\n
                v3 = v8;\n
                v2 = v17;\n
                v1 = 10;\n
                v0 = v23;\n
                goto LABEL_4038c2;\n
            case 115:\n
                v24 = v7;\n
                v7 = v24 + 4;\n
                v8 = *(v24);\n
                v26 = v9;\n
                v13 = &v6;\n
                v14 = &v5;\n
                if (cgc_strlen())\n
                {\n
                    v28 = 0;\n
                    do\n
                    {\n
                        v5 = *((v8 + v28));\n
                        v4 = v14;\n
                        cgc___filaments_transmit(v26, v14, 1, v13);\n
                        v28 += 1;\n
                        v14 = &v5;\n
                        v13 = &v6;\n
                    } while (v28 < cgc_strlen(v8, v4, 1));\n
                }\n
                goto LABEL_4036f7;\n
            case 117:\n
                v25 = v7;\n
                v7 = v25 + 4;\n
                v3 = v8;\n
                v2 = v17;\n
                v1 = 10;\n
                goto LABEL_40386b;\n
            case 120:\n
                v20 = v8;\n
LABEL_403859:\n
                v25 = v7;\n
                v7 = v25 + 4;\n
                v3 = v20;\n
                v2 = v17;\n
                v1 = 16;\n
LABEL_40386b:\n
                v0 = *(v25);\n
                v27 = v9;\n
LABEL_4038c2:\n
                cgc_output_number_printf(v27, v0, v1, v2, v3);\n
                v26 = v27;\n
                v13 = &v6;\n
                v14 = &v5;\n
                goto LABEL_4036f7;\n
            default:\n
                if (v16 == 37)\n
                    goto LABEL_403873;\n
                else\n
                    goto LABEL_0x403761;\n
            }\n
LABEL_403873:\n
            v5 = 37;\n
            v14 = &v5;\n
            cgc___filaments_transmit(v9, &v5, 1, &v6);\n
            v26 = v9;\n
            goto LABEL_403897;\n
        }\n
        v5 = v11;\n
        cgc___filaments_transmit(v12, v14, 1, v13);\n
        v26 = v12;\n
        v13 = &v6;\n
LABEL_4036f7:\n
        v12 = v26;\n
        v11 = a0;\n
    } while (*(v11));\n
    return 0;\n
}\n
", "4208342:sub_4036d6": null, "4208868:sub_4038e4": null, "4208880:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_403a14;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_403a14;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_403a14:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4209226:sub_403a4a": null, "4209232:cgc_sprintf": "typedef struct struct_1 {\n
    char field_-1;\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
int cgc_sprintf(char v8[2], struct_1 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_1 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_1 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_1 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_0 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_0 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_403bf7;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_403b77:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_403b77;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_403bf7:\n
                        v8 = v20 + 1;\n
                        goto LABEL_403a9d;\n
                    }\n
                }\n
            }\n
LABEL_403a9d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4209286:sub_403a86": null, "4209685:sub_403c15": null, "4209696:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = v2[6].field_-18;\n
        if (v3 >> 1 <= v1 && !(v3 - 24 <= v1))\n
            goto LABEL_403c9e;\n
        v4 = cgc_malloc(v1);\n
        if (v4)\n
        {\n
            v5 = v4;\n
            v6 = v2[6].field_-18 - 24;\n
            if (v6 > v1)\n
                v6 = v1;\n
            cgc_memcpy(v5, v2, v6);\n
            cgc_free(v2);\n
            v2 = v5;\n
            goto LABEL_403c9e;\n
        }\n
    }\n
    v2 = 0;\n
LABEL_403c9e:\n
    return v2;\n
}\n
", "4209832:sub_403ca8": null, "4209840:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_403d1a;\n
        }\n
    }\n
LABEL_403d1a:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4209879:sub_403cd7": null, "4209984:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4210041:sub_403d79": null, "4210048:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    char v1[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v2;  // dl, Other Possible Types: char\n
\n
    v1 = v0;\n
    v2 = v1[0];\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (v2 == a0)\n
            return v1;\n
        v2 = *((v1 + 1));\n
        v1 += 1;\n
        if (!v2)\n
            return 0;\n
    }\n
}\n
", "4210104:sub_403db8": null, "4210112:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // cl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return *(v1) - v5;\n
            if (v5 != v3)\n
                return *(v1) - v5;\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return *(v1) - 0;\n
}\n
", "4210180:sub_403e04": null, "4210192:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4210257:sub_403e51": null, "4210272:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4210348:sub_403eac": null, "4210352:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4210379:sub_403ecb": null, "4210384:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4210466:sub_403f22": null, "4210535:sub_403f67": null, "4210544:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(a0) - *(v0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v2) - *(v6);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v4) - *(v3);\n
        }\n
    }\n
}\n
", "4210626:sub_403fc2": null, "4210640:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4210778:sub_40405a": null, "4210784:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_4040cd;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_4040cd:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4210903:sub_4040d7": null, "4210912:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4210955:sub_40410b": null, "4211127:sub_4041b7": null, "4211223:sub_404217": null, "4211232:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4211273:sub_404249": null, "4211280:cgc_ac_init": "typedef struct struct_0 {\n
    char field_-40;\n
    char padding_-3f[63];\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* ac_mutex;\n
extern unsigned int cgc_num_words;\n
extern struct_0 g_408230;\n
extern void* g_409b84;\n
extern void* g_409b88;\n
\n
int cgc_ac_init()\n
{\n
    unsigned int v1;  // ecx\n
    struct_0 *v2;  // edx, Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
\n
    v1 = cgc_num_words + 2;\n
    v2 = \"amature\";\n
    v3 = 100;\n
    while (*((v2 - 64)))\n
    {\n
        cgc_num_words = v1 - 1;\n
        if (!*(v2))\n
            break;\n
        cgc_num_words = v1;\n
        v2 -= -128;\n
        v1 += 2;\n
        v3 -= 2;\n
        if (false)\n
            break;\n
    }\n
    ac_mutex = 0;\n
    g_409b84 = 0;\n
    g_409b88 = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4211398:sub_4042c6": null, "4211408:cgc_ac_add_custom": "typedef struct struct_0 {\n
    char padding_0[6732];\n
    unsigned int field_1a4c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_num_words;\n
extern char g_408210;\n
extern char word_list;\n
\n
int cgc_ac_add_custom(unsigned int v0, char *a0)\n
{\n
    char *v2;  // edi\n
    void* v3;  // ebp, Other Possible Types: unsigned int\n
    char *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v2 = v0;\n
    if (!v2)\n
    {\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        return v5;\n
    }\n
    else if (cgc_num_words > 99)\n
    {\n
        return cgc_num_words;\n
    }\n
    else\n
    {\n
        if (cgc_num_words > 0)\n
        {\n
            v3 = 0;\n
            v4 = \"acceptible\";\n
            do\n
            {\n
                v5 = cgc_strcmp(v2, v4);\n
                if (!v5)\n
                    return v5;\n
                v3 += 1;\n
                v4 += 64;\n
            } while (v3 < cgc_num_words);\n
        }\n
        v5 = cgc_strlen(v2);\n
        if (v5 > 31)\n
            return v5;\n
        v5 = cgc_strlen(a0);\n
        if (v5 > 31)\n
            return v5;\n
        v5 = cgc_strlen(v2);\n
        if (v5)\n
        {\n
            cgc_strcpy(4227568 + 64 * cgc_num_words, v2);\n
            v5 = cgc_strcpy(&(&g_408210)[64 * cgc_num_words], a0);\n
            *(&_GLOBAL_OFFSET_TABLE_.padding_0[6732]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[6732]) + 1;\n
            return v5;\n
        }\n
        return v5;\n
    }\n
}\n
", "4211635:sub_4043b3": null, "4211648:cgc_ac_process": "typedef struct struct_1 {\n
    char padding_0[14952];\n
    unsigned int field_3a68;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern void* ac_buffer;\n
extern unsigned int ac_idx;\n
extern char ac_mutex;\n
extern unsigned int ac_queue_count;\n
extern unsigned int ac_queue_head;\n
extern unsigned int cgc_num_words;\n
extern char word_list;\n
\n
int cgc_ac_process()\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    int tmp_2;  // tmp #2\n
    int tmp_28;  // tmp #28\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    char v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    struct_1 *v12;  // ebx\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // ebp\n
    struct_0 *v15;  // esi\n
    void* v16;  // esi, Other Possible Types: unsigned int\n
    char *v17;  // ebp, Other Possible Types: unsigned int\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    char *v21;  // ebp\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // edx\n
    char *v28;  // edi\n
    unsigned int v29[3];  // edi, Other Possible Types: unsigned int\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // edi\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v29 = &ac_mutex;\n
    v2 = \"acceptible\";\n
    v0 = &ac_mutex;\n
    if (!ac_buffer)\n
        goto LABEL_4043f0;\n
    while (true)\n
    {\n
        if (ac_queue_count)\n
        {\n
            do\n
            {\n
                cgc_mutex_lock(v29);\n
                v13 = ac_buffer;\n
                if (!ac_buffer)\n
                {\n
                    cgc_mutex_unlock(v29);\n
                    cgc_filaments_yield();\n
                    break;\n
                }\n
                v14 = *(&_GLOBAL_OFFSET_TABLE_.padding_0[6760 + 8 * ac_queue_head]);\n
                v1 = *(&_GLOBAL_OFFSET_TABLE_.padding_0[6764 + 8 * ac_queue_head]);\n
                v15 = v1 - *(&_GLOBAL_OFFSET_TABLE_.padding_0[6760 + 8 * ac_queue_head]);\n
                if (v15 <= 31)\n
                {\n
                    cgc_memcpy(&v4, v13 + v14, v15);\n
                    *((&v4 + v15)) = 0;\n
                    cgc_mutex_unlock(v29);\n
                    if (cgc_num_words <= 0)\n
                        goto LABEL_4044c2;\n
                }\n
                else\n
                {\n
                    v4 = 0;\n
                    cgc_mutex_unlock(v29);\n
                    if (cgc_num_words <= 0)\n
                        goto LABEL_4044c2;\n
                }\n
                v3 = v14;\n
                v16 = 0;\n
                v17 = v2;\n
                do\n
                {\n
                    if (!cgc_strcmp(&v4, v17))\n
                    {\n
                        v21 = v17 + 32;\n
                        v22 = cgc_strlen(v21);\n
                        v23 = cgc_strlen(&v4);\n
                        cgc_mutex_lock(v29);\n
                        tmp_2 = v22;\n
                        v18 = v22 - v23;\n
                        if (tmp_2 - v23 < 0)\n
                        {\n
                            v24 = v1;\n
                            cgc_memmove(v18 + v24 + ac_buffer, ac_buffer + v24, ac_idx - v24);\n
                        }\n
                        v25 = cgc_realloc(ac_buffer, ac_idx + v18 + 1);\n
                        if (v25)\n
                        {\n
                            v26 = v25;\n
                            ac_buffer = v25;\n
                            if (v18 > 0)\n
                            {\n
                                v27 = v1;\n
                                cgc_memmove(v18 + v27 + v25, v25 + v27, ac_idx - v27);\n
                                v26 = ac_buffer;\n
                            }\n
                            v28 = v26 + v3;\n
                            cgc_memcpy(v28, v21, cgc_strlen(v21));\n
                            v12->field_3a68 = v12->field_3a68 + v18;\n
                        }\n
                        v29 = v0;\n
                        cgc_mutex_unlock(v29);\n
                        v19 = ac_queue_head;\n
                        v20 = ac_queue_count;\n
                        goto LABEL_4045c6;\n
                    }\n
                    v16 += 1;\n
                    v17 += 64;\n
                } while (v16 < cgc_num_words);\n
                continue;\n
LABEL_4044c2:\n
                v18 = 0;\n
                v19 = ac_queue_head;\n
                v20 = ac_queue_count;\n
                if (!ac_queue_count)\n
                    continue;\n
LABEL_4045c6:\n
                v30 = v19;\n
                if (v20 != 1)\n
                {\n
                    v31 = v20 & -2;\n
                    v30 = v19;\n
                    do\n
                    {\n
                        *(&v12->padding_0[6760 + 8 * v30]) = *(&v12->padding_0[6760 + 8 * v30]) + v18;\n
                        *(&v12->padding_0[6764 + 8 * v30]) = *(&v12->padding_0[6764 + 8 * v30]) + v18;\n
                        *(&v12->padding_0[6760 + 8 * (v30 + 1 & 1023)]) = *(&v12->padding_0[6760 + 8 * (v30 + 1 & 1023)]) + v18;\n
                        *(&v12->padding_0[6764 + 8 * (v30 + 1 & 1023)]) = *(&v12->padding_0[6764 + 8 * (v30 + 1 & 1023)]) + v18;\n
                        v30 = v30 + 2 & 1023;\n
                        tmp_28 = v31;\n
                        v31 -= 2;\n
                    } while (tmp_28 != 2);\n
                }\n
                v29 = v0;\n
                if ((v20 & 1))\n
                {\n
                    *(&v12->padding_0[6760 + 8 * v30]) = *(&v12->padding_0[6760 + 8 * v30]) + v18;\n
                    *(&v12->padding_0[6764 + 8 * v30]) = *(&v12->padding_0[6764 + 8 * v30]) + v18;\n
                }\n
                ac_queue_head = v19 + 1 & 1023;\n
                ac_queue_count = v20 - 1;\n
                if (!ac_buffer)\n
                    break;\n
            } while (ac_queue_count);\n
            continue;\n
        }\n
        do\n
        {\n
LABEL_4043f0:\n
            cgc_filaments_yield();\n
        } while (!ac_buffer);\n
    }\n
}\n
", "4211827:sub_404473": null, "4211933:sub_4044dd": null, "4212315:sub_40465b": null, "4212351:sub_40467f": null, "4212352:cgc_ac_read": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* ac_buffer;\n
extern void* ac_idx;\n
extern char ac_mutex;\n
extern void* ac_queue_count;\n
extern void* ac_queue_head;\n
extern void* ac_queue_tail;\n
\n
int cgc_ac_read(unsigned int v4, char a0)\n
{\n
    unsigned int v0[3];  // [bp-0x38]\n
    char v1;  // [bp-0x34]\n
    char v2;  // [bp-0x30]\n
    char v3;  // [bp-0x2f]\n
    unsigned int v5;  // esi\n
    struct_0 *v6;  // edi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // eax\n
    char *v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    char *v15;  // edx\n
    unsigned int v16[3];  // esi\n
\n
    ac_idx = 0;\n
    ac_queue_tail = 0;\n
    ac_queue_head = 0;\n
    ac_queue_count = 0;\n
    ac_buffer = 0;\n
    v0[0] = &ac_mutex;\n
    while (true)\n
    {\n
LABEL_40472c:\n
        v5 = -1;\n
        v6 = &v2;\n
        do\n
        {\n
            if (cgc___filaments_receive(v4, v6, 1, &v1))\n
            {\n
LABEL_4048ab:\n
                v16 = v0;\n
                cgc_mutex_lock(v16);\n
                cgc_free(ac_buffer);\n
                ac_buffer = 0;\n
                cgc_mutex_unlock(v16);\n
                return 0;\n
            }\n
            if (!*(&v1))\n
                goto LABEL_4048ab;\n
            v7 = *(v6);\n
            if (v7 == a0)\n
            {\n
LABEL_4047a0:\n
                v8 = -(v5);\n
LABEL_4047a2:\n
                cgc_mutex_lock(v0);\n
                v9 = cgc_realloc(ac_buffer, ac_idx + v8 + 1);\n
                if (v9)\n
                {\n
                    ac_buffer = v9;\n
                    cgc_memcpy(v9 + ac_idx, &v2, v8);\n
                    v10 = ac_idx + v8;\n
                    ac_idx = ac_idx + v8;\n
                    *((ac_buffer + v10)) = 0;\n
                    cgc_mutex_unlock(v0);\n
                    if (v8 > 1)\n
                    {\n
                        v11 = ac_queue_count;\n
                        if (ac_queue_count >= 0x400)\n
                        {\n
                            do\n
                            {\n
                                cgc_filaments_yield();\n
                                v11 = ac_queue_count;\n
                            } while (ac_queue_count > 1023);\n
                        }\n
                        v14 = ac_queue_tail;\n
                        ac_queue_tail = ac_queue_tail + 1 & 1023;\n
                        ac_queue_count = v11 + 1;\n
                        v12 = ac_idx;\n
                        *(&(&_GLOBAL_OFFSET_TABLE_)[6760 + 8 * v14]) = ac_idx - v8;\n
                        v15 = ac_idx - 1;\n
                        *(&(&_GLOBAL_OFFSET_TABLE_)[6764 + 8 * v14]) = v15;\n
                        v13 = ac_buffer;\n
                        if (*((ac_buffer + v15)) != a0)\n
                            goto LABEL_40472c;\n
                    }\n
                    else\n
                    {\n
                        v12 = ac_idx;\n
                        v13 = ac_buffer;\n
                        if (*((ac_buffer + ac_idx - 1)) != a0)\n
                            goto LABEL_40472c;\n
                    }\n
                    if (ac_queue_count)\n
                    {\n
                        do\n
                        {\n
                            cgc_filaments_yield();\n
                        } while (ac_queue_count);\n
                        v13 = ac_buffer;\n
                        v12 = ac_idx;\n
                    }\n
                    ac_buffer = 0;\n
                    *((v12 + v13 - 1)) = 0;\n
                    return v13;\n
                }\n
                goto LABEL_4048ab;\n
            }\n
            if (!cgc_isalpha(v7))\n
                goto LABEL_4047a0;\n
            v5 -= 1;\n
            v6 = &v3;\n
        } while (v5 != -33);\n
        v8 = 32;\n
        goto LABEL_4047a2;\n
    }\n
}\n
", "4212433:sub_4046d1": null, "4212630:sub_404796": null, "4212807:sub_404847": null, "4212961:sub_4048e1": null, "4212976:cgc__find_memo_id": "typedef struct struct_0 {\n
    char field_-4;\n
    char field_-3;\n
    char field_-2;\n
    char padding_-1[1];\n
    char field_0;\n
} struct_0;\n
\n
extern struct_0 g_40bbac;\n
\n
int cgc__find_memo_id()\n
{\n
    unsigned int v1;  // eax\n
    struct_0 *v2;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = 4;\n
    v2 = &g_40bbac.field_-4;\n
    while (true)\n
    {\n
        if (!*((v2 - 4)))\n
        {\n
            return v1 - 4;\n
        }\n
        else if (!*((v2 - 3)))\n
        {\n
            return v1 - 3;\n
        }\n
        else if (!*((v2 - 2)))\n
        {\n
            return v1 - 2;\n
        }\n
        else if (!*((v2 - 1)))\n
        {\n
            v1 -= 1;\n
            return v1;\n
        }\n
        else if (!*(v2))\n
        {\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 += 5;\n
            v2 += 5;\n
            if (v1 == 504)\n
                return -1;\n
        }\n
    }\n
}\n
", "4213072:cgc_add_memo": "typedef struct struct_0 {\n
    char padding_0[14964];\n
    unsigned int field_3a74;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    char padding_38[8];\n
    struct struct_3 *field_40;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_-4;\n
    char field_-3;\n
    char field_-2;\n
    char padding_-1[1];\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_3 *field_0;\n
} struct_3;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_g_num_memos;\n
extern struct_1 *cgc_memos;\n
extern struct_2 g_40bbac;\n
\n
int cgc_add_memo()\n
{\n
    unsigned int v0;  // [bp-0x1020]\n
    char v1;  // [bp-0x1010]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    struct_4 *v5;  // esi\n
    struct_1 *v6;  // eax\n
    struct_1 *v7;  // edi\n
    unsigned int v8;  // eax\n
    struct_2 *v9;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    struct_1 *v12;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v13;  // ecx\n
\n
    v5 = cgc_new_memo(cgc_default_view_memo, cgc_default_update_memo);\n
    v6 = cgc_malloc(8);\n
    if (!v6)\n
    {\n
        v5->field_40();\n
    }\n
    else\n
    {\n
        v7 = v6;\n
        cgc_fdprintf(1, \"subject? \");\n
        v0 = 10;\n
        if (cgc_read_until(0, &v1, 0x1000) >= 0 && cgc_strlen(&v1) <= 31)\n
        {\n
            cgc_strcpy(&v5->padding_4, &v1);\n
            cgc_fdprintf(1, \"year? \");\n
            v0 = 10;\n
            if (cgc_read_until(0, &v1, 0x1000) >= 0)\n
            {\n
                v5->field_24 = cgc_strtol(&v1, NULL, 10);\n
                cgc_fdprintf(1, \"month? \");\n
                v0 = 10;\n
                if (cgc_read_until(0, &v1, 0x1000) >= 0)\n
                {\n
                    v5->field_28 = cgc_strtol(&v1, NULL, 10);\n
                    cgc_fdprintf(1, \"date? \");\n
                    v0 = 10;\n
                    if (cgc_read_until(0, &v1, 0x1000) >= 0)\n
                    {\n
                        v5->field_2c = cgc_strtol(&v1, NULL, 10);\n
                        cgc_fdprintf(1, \"priority? \");\n
                        v0 = 10;\n
                        if (cgc_read_until(0, &v1, 0x1000) >= 0)\n
                        {\n
                            v5->field_30 = cgc_strtol(&v1, NULL, 10);\n
                            cgc_fdprintf(1, \"body? \");\n
                            v8 = cgc_ac_read(0, 10);\n
                            v5->field_34 = v8;\n
                            if (v8 && cgc_g_num_memos <= 499)\n
                            {\n
                                v10 = 4;\n
                                v9 = &g_40bbac.field_-4;\n
                                do\n
                                {\n
                                    if (!*((v9 - 4)))\n
                                    {\n
                                        v10 -= 4;\n
                                        goto LABEL_404b83;\n
                                    }\n
                                    if (!*((v9 - 3)))\n
                                    {\n
                                        v10 -= 3;\n
                                        goto LABEL_404b83;\n
                                    }\n
                                    if (!*((v9 - 2)))\n
                                    {\n
                                        v10 -= 2;\n
                                        goto LABEL_404b83;\n
                                    }\n
                                    if (!*((v9 - 1)))\n
                                    {\n
                                        v10 -= 1;\n
                                        goto LABEL_404b83;\n
                                    }\n
                                    if (!*(v9))\n
                                        goto LABEL_404b83;\n
                                    v10 += 5;\n
                                    v9 += 5;\n
                                } while (v10 != 504);\n
                                v10 = -1;\n
LABEL_404b83:\n
                                v5->field_0 = v10;\n
                                if (!cgc_validate_memo())\n
                                {\n
                                    v11 = v5->field_0;\n
                                    *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) + 1;\n
                                    _GLOBAL_OFFSET_TABLE_.padding_0[14968 + v11] = 1;\n
                                    v7->field_0 = v5;\n
                                    v12 = cgc_memos;\n
                                    if (!cgc_memos)\n
                                    {\n
                                        cgc_memos = v7;\n
                                        v7->field_4 = 0;\n
                                    }\n
                                    else\n
                                    {\n
                                        do\n
                                        {\n
                                            v13 = v12;\n
                                            v12 = *((v12 + 4));\n
                                        } while (v12);\n
                                        v7->field_4 = 0;\n
                                        v13->field_4 = v7;\n
                                    }\n
                                    return cgc_fdprintf(v2, v3);\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v5->field_40();\n
        cgc_free(v7);\n
    }\n
    return cgc_fdprintf(v2, v3);\n
}\n
", "4213782:sub_404c16": null, "4213792:cgc_update_memo": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[56];\n
    struct struct_0 *field_3c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 *cgc_memos;\n
\n
int cgc_update_memo(unsigned int v1)\n
{\n
    struct_1 *v0;  // [bp-0xc]\n
    struct_2 *v2;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v3;  // edx\n
\n
    v2 = cgc_memos;\n
    if (!cgc_memos)\n
        return cgc_memos;\n
    while (true)\n
    {\n
        v3 = *(v2);\n
        if (v3 && v3->field_0 == v1)\n
        {\n
            v0 = v3;\n
            v2 = v3->field_3c();\n
            return v2;\n
        }\n
        v2 = *((v2 + 4));\n
        if (!v2)\n
            return v2;\n
    }\n
}\n
", "4213852:sub_404c5c": null, "4213856:cgc_remove_memo": "typedef struct struct_1 {\n
    char padding_0[14964];\n
    unsigned int field_3a74;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    struct struct_4 *field_4;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[60];\n
    struct struct_2 *field_40;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_2 *field_0;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern struct_4 *cgc_memos;\n
\n
int cgc_remove_memo(unsigned int v0)\n
{\n
    struct_4 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // edx\n
    struct_4 *v4;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v5;  // edi\n
    struct_0 *v6;  // ecx\n
    struct_4 *v7;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = cgc_memos;\n
    if (!cgc_memos)\n
        return v7;\n
    v3 = v0;\n
    v4 = cgc_memos;\n
    while (true)\n
    {\n
        v7 = v4;\n
        v5 = *(v4);\n
        if (v5 && *(v5) == v3)\n
            break;\n
        v4 = v7->field_4;\n
        if (!v4)\n
            return v7;\n
    }\n
    _GLOBAL_OFFSET_TABLE_.padding_0[14968 + v3] = 0;\n
    *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) - 1;\n
    if (v7 != cgc_memos)\n
    {\n
        v6->field_4 = v7->field_4;\n
        v2 = v7;\n
    }\n
    else\n
    {\n
        cgc_memos = cgc_memos->field_4;\n
    }\n
    v7->field_0->field_40();\n
    v7 = cgc_free(v2);\n
    return v7;\n
}\n
", "4213892:sub_404c84": null, "4213986:sub_404ce2": null, "4214000:cgc_view_memo": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[52];\n
    struct struct_0 *field_38;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_2 *cgc_memos;\n
\n
int cgc_view_memo(unsigned int v1)\n
{\n
    struct_1 *v0;  // [bp-0xc]\n
    struct_2 *v2;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v3;  // edx\n
\n
    v2 = cgc_memos;\n
    if (!cgc_memos)\n
        return cgc_memos;\n
    while (true)\n
    {\n
        v3 = *(v2);\n
        if (v3 && v3->field_0 == v1)\n
        {\n
            v0 = v3;\n
            v2 = v3->field_38();\n
            return v2;\n
        }\n
        v2 = *((v2 + 4));\n
        if (!v2)\n
            return v2;\n
    }\n
}\n
", "4214060:sub_404d2c": null, "4214064:cgc_quit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_quit()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // ebx\n
\n
    v0 = v2;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_fdprintf(1, \"bye!\\n
\");\n
    cgc__terminate(0, \"bye!\\n
\");\n
    cgc_menu();\n
    return;\n
}\n
", "4214128:cgc_menu": "int cgc_menu()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v0 = v4;\n
    cgc_fdprintf(1, \"======================\\n
\");\n
    cgc_fdprintf(1, \" 1. New memo\\n
\");\n
    cgc_fdprintf(1, \" 2. View memo\\n
\");\n
    cgc_fdprintf(1, \" 3. Update memo\\n
\");\n
    cgc_fdprintf(1, \" 4. Delete memo\\n
\");\n
    cgc_fdprintf(1, \" 5. Add custom AC word\\n
\");\n
    cgc_fdprintf(1, \" 6. Quit\\n
\");\n
    return cgc_fdprintf(1, \"======================\\n
\");\n
}\n
", "4214279:sub_404e07": null, "4214288:main": "typedef struct struct_3 {\n
    char padding_0[14964];\n
    unsigned int field_3a74;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[52];\n
    struct struct_0 *field_38;\n
    struct struct_0 *field_3c;\n
    struct struct_0 *field_40;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_3 _GLOBAL_OFFSET_TABLE_;\n
extern struct_2 *cgc_memos;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    char v1;  // [bp-0x54]\n
    char v2;  // [bp-0x50]\n
    char v3[8];  // [bp-0x30]\n
    unsigned int v8;  // eax\n
    struct_1 *v10;  // edx\n
    struct_2 *v11;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v12;  // ecx, Other Possible Types: unsigned int\n
    struct_1 *v13;  // edx\n
    struct_2 *v14;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v15;  // edx\n
    struct_1 *v16;  // ecx\n
    struct_4 *v17;  // edi\n
    struct_2 *v18;  // ebp, Other Possible Types: unsigned int\n
\n
    cgc_filaments_init();\n
    cgc_filaments_new(cgc_ac_process, 0);\n
    cgc_fdprintf(1, \"====== 3M v0.2 ======\\n
\");\n
    cgc_fdprintf(1, \"======================\\n
\");\n
    cgc_fdprintf(1, \" 1. New memo\\n
\");\n
    cgc_fdprintf(1, \" 2. View memo\\n
\");\n
    cgc_fdprintf(1, \" 3. Update memo\\n
\");\n
    cgc_fdprintf(1, \" 4. Delete memo\\n
\");\n
    cgc_fdprintf(1, \" 5. Add custom AC word\\n
\");\n
    cgc_fdprintf(1, \" 6. Quit\\n
\");\n
    cgc_fdprintf(1, \"======================\\n
\");\n
    cgc_ac_init();\n
    while (true)\n
    {\n
        v0 = 10;\n
        if (cgc_read_until(0, &v1, 4) < 0)\n
            return 0;\n
        switch (cgc_strtol(&v1, NULL, 10))\n
        {\n
        case 1:\n
            cgc_add_memo();\n
            break;\n
        case 2:\n
            cgc_fdprintf(1, \"id? \");\n
            v0 = 10;\n
            if (cgc_read_until(0, &v1, 4) >= 0 && v1)\n
            {\n
                for (v14 = cgc_memos; v14; v14 = *((v14 + 4)))\n
                {\n
                    v13 = *(v14);\n
                    if (v13 && v13->field_0 == cgc_strtol(&v1, NULL, 10))\n
                    {\n
                        v13->field_38();\n
                        break;\n
                    }\n
                }\n
            }\n
        case 3:\n
            cgc_fdprintf(1, \"id? \");\n
            v0 = 10;\n
            if (cgc_read_until(0, &v1, 4) >= 0)\n
            {\n
                for (v11 = cgc_memos; v11; v11 = *((v11 + 4)))\n
                {\n
                    v10 = *(v11);\n
                    if (v10 && v10->field_0 == cgc_strtol(&v1, NULL, 10))\n
                    {\n
                        v10->field_3c();\n
                        break;\n
                    }\n
                }\n
            }\n
        case 4:\n
            cgc_fdprintf(1, \"id? \");\n
            v0 = 10;\n
            if (cgc_read_until(0, &v1, 4) >= 0)\n
            {\n
                v8 = cgc_strtol(&v1, NULL, 10);\n
                v18 = cgc_memos;\n
                if (cgc_memos)\n
                {\n
                    v12 = cgc_memos;\n
                    do\n
                    {\n
                        v15 = v12;\n
                        v16 = *(v12);\n
                        if (v16 && v16->field_0 == v8)\n
                        {\n
                            _GLOBAL_OFFSET_TABLE_.padding_0[14968 + v8] = 0;\n
                            *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[14964]) - 1;\n
                            if (v15 == cgc_memos)\n
                            {\n
                                cgc_memos = cgc_memos->field_4;\n
                            }\n
                            else\n
                            {\n
                                v17->field_4 = v15->field_4;\n
                                v18 = v15;\n
                            }\n
                            v15->field_0->field_40();\n
                            cgc_free(v18);\n
                            break;\n
                        }\n
                        v12 = v15->field_4;\n
                    } while (v12);\n
                }\n
            }\n
        case 5:\n
            cgc_memset(v3, 0, 32);\n
            cgc_memset(&v2, 0, 32);\n
            cgc_fdprintf(1, \"typo? \");\n
            v0 = 10;\n
            if (cgc_read_until(0, v3, 32) >= 0)\n
            {\n
                cgc_fdprintf(1, \"correct? \");\n
                v0 = 10;\n
                if (cgc_read_until(0, &v2, 32) >= 0)\n
                {\n
                    cgc_ac_add_custom(v3, &v2);\n
                    break;\n
                }\n
            }\n
        case 6:\n
            cgc_fdprintf(1, \"bye!\\n
\");\n
            cgc__terminate(0);\n
            return cgc_new_memo();\n
        default:\n
            cgc_fdprintf(1, \"invalid menu, try again.\\n
\");\n
            break;\n
        }\n
    }\n
}\n
", "4214865:sub_405051": null, "4215168:cgc_new_memo": "extern char g_40634d;\n
\n
int cgc_new_memo(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1[17];  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_malloc(68);\n
    if (v1)\n
    {\n
        v1[0] = -1;\n
        cgc_memset(&v1[1], 0, 32);\n
        v1[9] = 1970;\n
        v1[10] = 1;\n
        v1[11] = 1;\n
        v1[12] = 1;\n
        v2 = cgc_malloc(16);\n
        v1[13] = v2;\n
        cgc_strcpy(v2, &g_40634d);\n
        v1[14] = v0;\n
        v1[15] = a0;\n
        v1[16] = a1;\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4215332:sub_405224": null, "4215344:cgc_default_view_memo": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    char padding_2c[4];\n
    unsigned int field_30;\n
    struct struct_2 *field_34;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_default_view_memo(struct_1 *v6)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    struct_0 *v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char v4;  // [bp-0x16], Other Possible Types: unsigned short\n
    unsigned int v5;  // [bp-0x14]\n
    struct_1 *v7;  // esi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // edx\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v4 = 0;\n
    if (!v7)\n
        return 6;\n
    v3 = &v7->padding_4;\n
    v2 = v7->field_0;\n
    cgc_fdprintf(1, \"[%d] %s\\n
\");\n
    v1 = v7->field_28;\n
    v0 = v7->field_24;\n
    cgc_fdprintf(1, \"Date: %04d-%02d-%02d\\n
\");\n
    cgc_fdprintf(1, \"Priority: \");\n
    v9 = v7->field_30;\n
    if (v9 <= 2)\n
        cgc_fdprintf(1, *(&(&_GLOBAL_OFFSET_TABLE_)[296 + 4 * v9]));\n
    cgc_fdprintf(1, \"------------------------------\\n
\");\n
    v10 = cgc_strlen(v7->field_34);\n
    if (v10)\n
    {\n
        v14 = 0;\n
        v5 = \"\\n
\";\n
        do\n
        {\n
            v12 = v14 * 2369637129 >> 32 >> 4;\n
            if (v12 * 9 + (v12 * 9 << 1) + v12 + v12 == v14)\n
                cgc_fdprintf(1, v5);\n
            v4 = v6->field_34[v14].field_0;\n
            v2 = &v4;\n
            cgc_fdprintf(1, \"%s\");\n
            v14 += 1;\n
        } while (v10 != v14);\n
    }\n
    cgc_fdprintf(1, \"\\n
\");\n
    return 0;\n
}\n
", "4215533:sub_4052ed": null, "4215659:sub_40536b": null, "4215664:cgc_default_update_memo": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    struct struct_1 *field_40;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    char *field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    void* field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    struct struct_1 *field_40;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern char g_40634d;\n
\n
int cgc_default_update_memo(unsigned int v6[17])\n
{\n
    char *v0;  // [bp-0x1028]\n
    unsigned int v1;  // [bp-0x1020]\n
    struct_2 *v2;  // [bp-0x101c]\n
    char *v3;  // [bp-0x1018], Other Possible Types: unsigned int\n
    char v4[8];  // [bp-0x1014]\n
    char v5;  // [bp-0x1010]\n
    unsigned int v7[17];  // eax\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ebp\n
    struct_2 *v11;  // eax\n
    struct_2 *v13;  // edi\n
    char *v14;  // eax\n
    struct_3 *v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax\n
    struct_3 *v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    struct_2 *v20;  // ecx, Other Possible Types: unsigned int\n
    struct_3 *v21;  // edi, Other Possible Types: unsigned int\n
    unsigned int v22;  // eax\n
    struct_2 *v23;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v24;  // eax\n
    char *v25;  // eax\n
    unsigned int v27;  // ecx\n
    struct_4 *v28;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v29;  // esi, Other Possible Types: unsigned int\n
    char *v30;  // eax\n
    unsigned int v31;  // eax\n
\n
    v7 = v6;\n
    if (!v7)\n
        return 6;\n
    v8 = v7[14];\n
    v9 = v7[15];\n
    v10 = v7[16];\n
    v11 = cgc_malloc(68);\n
    if (!v11)\n
        return 6;\n
    v11->field_0 = -1;\n
    *(&v4[0]) = &v11->padding_4;\n
    v3 = v10;\n
    v13 = v11;\n
    cgc_memset(v4, 0, 32);\n
    v11->field_24 = 1970;\n
    v11->field_28 = 1;\n
    v11->field_2c = 1;\n
    v11->field_30 = 1;\n
    v14 = cgc_malloc(16);\n
    v13->field_34 = v14;\n
    cgc_strcpy(v14, &g_40634d);\n
    v13->field_38 = v8;\n
    v13->field_3c = v9;\n
    v2 = v13;\n
    v13->field_40 = v3;\n
    cgc_fdprintf(1, \"subject? \");\n
    v1 = 10;\n
    if (cgc_read_until(0, &v5, 0x1000) >= 0 && cgc_strlen(&v5) <= 31)\n
    {\n
        v29 = v6;\n
        v3 = &v29->padding_4[0];\n
        cgc_strcpy(v4, (!v5 ? &v5 : v3));\n
        cgc_fdprintf(1, \"year? \");\n
        v1 = 10;\n
        if (cgc_read_until(0, &v5, 0x1000) >= 0)\n
        {\n
            if (!v5)\n
            {\n
                v17 = v29->field_24;\n
                v16 = &v5;\n
            }\n
            else\n
            {\n
                v16 = &v5;\n
                v17 = cgc_strtol(&v5, NULL, 10);\n
            }\n
            v2->field_24 = v17;\n
            cgc_fdprintf(1, \"month? \");\n
            v1 = 10;\n
            if (cgc_read_until(0, v16, 0x1000) >= 0)\n
            {\n
                if (!v5)\n
                {\n
                    v19 = v29->field_28;\n
                    v20 = v2;\n
                    v18 = &v5;\n
                }\n
                else\n
                {\n
                    v18 = &v5;\n
                    v19 = cgc_strtol(&v5, NULL, 10);\n
                    v20 = v2;\n
                }\n
                *((v20 + 40)) = v19;\n
                cgc_fdprintf(1, \"date? \");\n
                v1 = 10;\n
                if (cgc_read_until(0, v18, 0x1000) >= 0)\n
                {\n
                    if (!v5)\n
                    {\n
                        v22 = v29->field_2c;\n
                        v23 = v2;\n
                        v21 = &v5;\n
                    }\n
                    else\n
                    {\n
                        v21 = &v5;\n
                        v22 = cgc_strtol(&v5, NULL, 10);\n
                        v23 = v2;\n
                    }\n
                    *((v23 + 44)) = v22;\n
                    cgc_fdprintf(1, \"priority? \");\n
                    v1 = 10;\n
                    if (cgc_read_until(0, v21, 0x1000) >= 0)\n
                    {\n
                        if (!v5)\n
                            v24 = v29->field_30;\n
                        else\n
                            v24 = cgc_strtol(&v5, NULL, 10);\n
                        v2->field_30 = v24;\n
                        cgc_fdprintf(1, \"body? \");\n
                        v25 = cgc_readall_until(0);\n
                        if (v25)\n
                        {\n
                            if (!*(v25))\n
                            {\n
                                v28 = v2;\n
                                *((v28 + 52)) = cgc_strdup(v29->field_34);\n
                            }\n
                            else\n
                            {\n
                                v28 = v2;\n
                                v29 = v6;\n
                                v30 = cgc_realloc(v28->field_34, cgc_strlen(v25) + 1);\n
                                if (!v30)\n
                                    return 6;\n
                                v28->field_34 = v30;\n
                                cgc_strcpy(v30, v25);\n
                            }\n
                            *(v28) = *(v29);\n
                            v27 = cgc_validate_memo();\n
                            if (!v27)\n
                            {\n
                                cgc_memcpy(v3, v4, 32);\n
                                v0 = v28 + 36;\n
                                cgc_memcpy(v29 + 36, v0, 12);\n
                                v31 = *((v29 + 52));\n
                                *((v29 + 52)) = *((v28 + 52));\n
                                *((v28 + 52)) = v31;\n
                                *((v29 + 48)) = *((v28 + 48));\n
                                *((v28 + 64))(v28, v0);\n
                                return 0;\n
                            }\n
                            return v27;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4216564:sub_4056f4": null, "4216576:cgc_validate_memo": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[32];\n
    unsigned int field_24;\n
    unsigned int field_28;\n
    unsigned int field_2c;\n
    unsigned int field_30;\n
    struct struct_1 *field_34;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_validate_memo(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x9c]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v3;  // edi\n
    unsigned int v5;  // esi\n
    void* v6;  // ebp, Other Possible Types: unsigned int\n
    char *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
\n
    v3 = v2;\n
    if (!v3)\n
    {\n
        return 6;\n
    }\n
    else if (v3->field_0 > 499)\n
    {\n
        return 5;\n
    }\n
    else\n
    {\n
        v5 = &v3->padding_4;\n
        if (cgc_strlen(v5))\n
        {\n
            v6 = 0;\n
            do\n
            {\n
                if (!cgc_isalnum(v3->padding_4[v6]) && !cgc_isspace(v3->padding_4[v6]))\n
                    return 1;\n
                v6 += 1;\n
            } while (v6 < cgc_strlen(v5));\n
        }\n
        if (-2501 + v3->field_24 < -531)\n
        {\n
            return 2;\n
        }\n
        else if (v3->field_28 - 13 < -12)\n
        {\n
            return 2;\n
        }\n
        else if (v3->field_2c - 32 < -31)\n
        {\n
            return 2;\n
        }\n
        else if (v3->field_30 > 2)\n
        {\n
            return 3;\n
        }\n
        else\n
        {\n
            v1 = cgc_strlen(v3->field_34);\n
            if (!v1)\n
                return 0;\n
            v7 = 0;\n
            while (true)\n
            {\n
                v8 = v3->field_34[v7].field_0;\n
                if (!cgc_isalnum(v8) && !cgc_isspace(v8))\n
                {\n
                    v9 = v8;\n
                    *(&v9) = v9 - 33;\n
                    if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, dl<1>), 0x1a<32>, 0x0<32>)))\n
                        return 4;\n
                    v0 = 100673603;\n
                    if (((*(&v0 + ((v9 & 31) >> 3)) >> (v9 & 31 & 7)) & 1) != 1)\n
                        return 4;\n
                }\n
                v7 += 1;\n
                if (v1 == v7)\n
                    return 0;\n
            }\n
        }\n
    }\n
}\n
", "4216639:sub_40573f": null, "4216794:sub_4057da": null, "4216886:sub_405836": null, "4216896:cgc_default_delete_memo": "typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[52];\n
    void* field_34;\n
} struct_1;\n
\n
int cgc_default_delete_memo(struct_0 *v0)\n
{\n
    struct_1 *v1;  // esi\n
\n
    v1 = v0;\n
    if (v1)\n
    {\n
        cgc_free(v1->field_34);\n
        cgc_free(v1);\n
        return 0;\n
    }\n
    return 6;\n
}\n
", "4216957:sub_40587d": null, "4216960:cgc_read_until": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_until(unsigned int v1, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    int tmp_3;  // tmp #3\n
    char v0;  // [bp-0x14]\n
    unsigned int v2;  // edi\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v2 = a1;\n
    v3 = a0;\n
    if (v2)\n
    {\n
        v6 = v2 - 1;\n
        v4 = a0;\n
        do\n
        {\n
            if (cgc___filaments_receive(v1, v4, 1, &v0))\n
            {\n
LABEL_4058ee:\n
                return -1;\n
            }\n
            if (!*(&v0))\n
                goto LABEL_4058ee;\n
            v3 = v4 + 1;\n
            tmp_3 = v6;\n
            v6 -= 1;\n
            if (*(v4) == a2)\n
                break;\n
            continue;\n
            v4 = v3;\n
        } while (!tmp_3 < 1);\n
    }\n
    *((v3 - 1)) = 0;\n
    v7 = v3 - a0;\n
    return v7;\n
}\n
", "4217083:sub_4058fb": null, "4217088:cgc_readall_until": "extern char cgc_readall_until.buf;\n
\n
int cgc_readall_until(unsigned int v1, char a0)\n
{\n
    char v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // edi\n
    char *v4;  // esi\n
\n
    v2 = &cgc_readall_until.buf;\n
    v3 = 0x80000;\n
    while (true)\n
    {\n
        v4 = v2;\n
        if (cgc___filaments_receive(v1, v2, 1, &v0))\n
        {\n
LABEL_405969:\n
            return 0;\n
        }\n
        if (!*(&v0))\n
            goto LABEL_405969;\n
        if (*(v2) == a0)\n
        {\n
LABEL_40595e:\n
            *(v4) = 0;\n
            return &cgc_readall_until.buf;\n
        }\n
        v2 += 1;\n
        v3 -= 1;\n
        if (!524287)\n
            goto LABEL_40595e;\n
    }\n
}\n
", "4217204:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_setjmp": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_random": null, "5242904:cgc_allocate": null, "5242908:cgc_longjmp": null, "5242912:cgc_deallocate": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}