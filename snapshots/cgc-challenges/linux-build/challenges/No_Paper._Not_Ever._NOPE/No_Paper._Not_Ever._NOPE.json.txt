{"4202496:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24623;\n
    v6 = v5 + 19;\n
    v7 = v5 + 19;\n
    if (v7 == v6)\n
        return v5 + 19;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24559;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 19;\n
    v9 = (v6 + 19 - (v6 + 19) >> 31) + (19 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_is_non_printable": "int cgc_is_non_printable(char v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return 0 == cgc_is_printable(v1, *(&v0));\n
}\n
", "4203028:sub_402214": null, "4203040:cgc_is_printable": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_printable(char v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (cgc_is_digit())\n
        return v2 & 1;\n
    v0 = v4;\n
    v2 = 1;\n
    if (cgc_is_letter())\n
        return v2 & 1;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_is_symbol())\n
    {\n
        v0 = v4;\n
        v2 = cgc_is_white_space();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203193:sub_4022b9": null, "4203200:cgc_is_digit": "int cgc_is_digit(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (48 <= v2)\n
        v1 = v2 <= 57;\n
    return v1 & 1;\n
}\n
", "4203255:sub_4022f7": null, "4203264:cgc_is_letter": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_is_letter(char v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    v2 = 1;\n
    if (!cgc_is_upper())\n
    {\n
        v0 = v4;\n
        v2 = cgc_is_lower();\n
        return v2 & 1;\n
    }\n
    return v2 & 1;\n
}\n
", "4203355:sub_40235b": null, "4203360:cgc_is_symbol": "int cgc_is_symbol(char v3)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x6]\n
    char v2;  // [bp-0x5]\n
    unsigned int v4;  // eax\n
\n
    v0 = v4;\n
    if (33 <= v3)\n
    {\n
        v2 = 1;\n
        if (v3 <= 64)\n
            return v2 & 1;\n
    }\n
    if (91 <= v3)\n
    {\n
        v2 = 1;\n
        if (v3 <= 96)\n
            return v2 & 1;\n
    }\n
    v1 = 0;\n
    if (123 <= v3)\n
        v1 = v3 <= 126;\n
    v2 = v1;\n
    return v2 & 1;\n
}\n
", "4203491:sub_4023e3": null, "4203504:cgc_is_white_space": "int cgc_is_white_space(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 32)\n
    {\n
        v1 = 1;\n
        if (v2 != 10)\n
        {\n
            v1 = 1;\n
            if (v2 != 9)\n
                v1 = 13 == v2;\n
        }\n
    }\n
    return v1 & 1;\n
}\n
", "4203607:sub_402457": null, "4203616:cgc_is_upper": "int cgc_is_upper(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (65 <= v2)\n
        v1 = v2 <= 90;\n
    return v1 & 1;\n
}\n
", "4203671:sub_402497": null, "4203680:cgc_is_lower": "int cgc_is_lower(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (97 <= v2)\n
        v1 = v2 <= 122;\n
    return v1 & 1;\n
}\n
", "4203735:sub_4024d7": null, "4203744:cgc_is_hex_digit": "int cgc_is_hex_digit(char v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (65 <= v1 && 70 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (97 <= v1 && 102 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (48 <= v1 && 57 >= v1)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4203904:cgc_ascii_hex_to_bin": "int cgc_ascii_hex_to_bin(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    if (65 <= v2 && 70 >= v2)\n
    {\n
        v1 = v2 + -55;\n
        return v1;\n
    }\n
    if (97 <= v2 && 102 >= v2)\n
    {\n
        v1 = v2 + -87;\n
        return v1;\n
    }\n
    if (48 <= v2 && 57 >= v2)\n
    {\n
        v1 = v2 - 48;\n
        return v1;\n
    }\n
    v1 = 255;\n
    return v1;\n
}\n
", "4204077:sub_40262d": null, "4204080:cgc_int2str": "int cgc_int2str(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    char *v5;  // ecx\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    v2 = 0;\n
    if (a0 < 2)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (a1 >= 0)\n
    {\n
        a1 *= -1;\n
    }\n
    else if (a0 >= 3)\n
    {\n
        v5 = v2;\n
        v2 = v5 + 1;\n
        v5[v4] = 45;\n
    }\n
    else\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v1 = a1;\n
    do\n
    {\n
        v2 += 1;\n
        v6 = v1;\n
        v1 = (v6 >> 31 CONCAT v6) /m 10;\n
    } while (v1 < 0);\n
    if (v2 >= a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v7 = v2;\n
    v2 = v7 - 1;\n
    *((v4 + v7)) = 0;\n
    do\n
    {\n
        v0 = ((a1 >> 31 CONCAT a1) /m 10 >> 32) * -1;\n
        v8 = v2;\n
        v2 = v8 - 1;\n
        *((v4 + v8)) = v0 + 48;\n
        v9 = a1;\n
        a1 = (v9 >> 31 CONCAT v9) /m 10;\n
    } while (a1 < 0);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4204353:sub_402741": null, "4204368:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned int field_2c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x29]\n
    unsigned int v5;  // [bp-0x28]\n
    struct_0 *v6;  // [bp-0x24]\n
    unsigned int *v7;  // [bp-0x20]\n
    unsigned int *v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    if ((v13 + 3 & -0x4) + 8 < v13)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v13 = (v13 + 3 & -0x4) + 8;\n
    if (v13 < v6->field_2c)\n
        v13 = v6->field_2c;\n
    if (v13 > 4095)\n
    {\n
        v12 = cgc_allocate_large_chunk();\n
        return v12;\n
    }\n
    v5 = cgc_log_base_two();\n
    v10 = v5 - cgc_log_base_two();\n
    if (v10 >= 8)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (!v11)\n
            v4 = v10 < 8;\n
        if (!(v4 & 1))\n
            break;\n
        v14 = v6;\n
        v15 = v10;\n
        v10 = v15 + 1;\n
        v0 = v13;\n
        v9 = cgc_list_find(&v14[1].padding_0[32 + 8 * v15], &v14[460].padding_0[36]);\n
        if (v9)\n
            v3 = -5 + v9;\n
        else\n
            v3 = 0;\n
        v8 = v3;\n
        v11 = v8;\n
    }\n
    if (!v11)\n
    {\n
        v11 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v7 = v11;\n
        v2 = &v6[1].padding_0[32 + 8 + 8 * v10];\n
        if (!v7)\n
            v1 = 0;\n
        else\n
            v1 = v7 + 1;\n
        cgc_list_remove(v2);\n
    }\n
    cgc_mark_allocated();\n
    if ((*(v11) & -2) > v13)\n
        v11 = cgc_split_chunk(v11);\n
    v12 = cgc_chunk_to_ptr();\n
    return v12;\n
}\n
", "4204926:sub_40297e": null, "4204928:cgc_allocate_large_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_large_chunk(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = v5;\n
    cgc_mark_allocated();\n
    v3 = cgc_chunk_to_ptr();\n
    return v3;\n
}\n
", "4205050:sub_4029fa": null, "4205056:cgc_log_base_two": "int cgc_log_base_two(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205110:sub_402a36": null, "4205120:cgc_list_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_find(struct struct_0 **v4, struct struct_0 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = a1;\n
        if (a0(v2))\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        v2 = *(v2);\n
    }\n
}\n
", "4205244:sub_402abc": null, "4205248:cgc_find_fit": "int cgc_find_fit(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    v4 = a0;\n
    v2 = v5;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    v3 = v1;\n
    return !((*(v3) & -2) < v4);\n
}\n
", "4205348:sub_402b24": null, "4205360:cgc_grow_heap": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_grow_heap()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = 0x1000;\n
    cgc_mark_free();\n
    v3 = v2;\n
    return v3;\n
}\n
", "4205470:sub_402b9e": null, "4205472:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4205582:sub_402c0e": null, "4205584:cgc_mark_allocated": "int cgc_mark_allocated(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) | 1;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4205622:sub_402c36": null, "4205632:cgc_split_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_sizes;\n
\n
int cgc_split_chunk(unsigned int *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4 + a0;\n
    v1 = *(v4) & -2;\n
    if ((*(v4) & -2) <= a0 + size_class_sizes)\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
    *(v4) = a0;\n
    cgc_mark_allocated(v4);\n
    *(v2) = v1 - a0;\n
    cgc_mark_allocated(v2);\n
    cgc_chunk_to_ptr();\n
    cgc_free();\n
    v3 = v4;\n
    return v3;\n
}\n
", "4205803:sub_402ceb": null, "4205808:cgc_chunk_to_ptr": "int cgc_chunk_to_ptr(unsigned int v0)\n
{\n
    return v0 + 4;\n
}\n
", "4205826:sub_402d02": null, "4205840:cgc_free": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned int field_2c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v8 = cgc_ptr_to_chunk();\n
    v4 = v8;\n
    if (!v6)\n
        return v8;\n
    cgc_mark_free();\n
    v4 = cgc_coalesce();\n
    v1 = cgc_log_base_two(*(v4) & -2);\n
    v3 = v1 - cgc_log_base_two(v2->field_2c);\n
    if (v3 >= 8)\n
        v3 = 7;\n
    v9 = v2;\n
    v0 = &v9[426].padding_0[20];\n
    v8 = cgc_list_insert_in_order(&v9[1].padding_0[32 + 8 * v3], v4 + 1);\n
    return v8;\n
}\n
", "4206042:sub_402dda": null, "4206048:cgc_ptr_to_chunk": "int cgc_ptr_to_chunk(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4206117:sub_402e25": null, "4206128:cgc_mark_free": "int cgc_mark_free(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) & -2;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4206166:sub_402e56": null, "4206176:cgc_coalesce": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned int field_2c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_1 *v12)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[2];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    unsigned int *v7;  // [bp-0x1c]\n
    unsigned int *v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    v10 = 0;\n
    if ((v12 & 4095))\n
        v10 = v12 + -(v12->field_0 & -2);\n
    if (((v12 + (v12->field_-4 & -2)) & 4095))\n
        v11 = v12 + (v12->field_-4 & -2);\n
    if (v10 && !(*(v10) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v10) & -2);\n
        v9 = v5 - cgc_log_base_two(v6->field_2c);\n
        if (v9 < 8)\n
        {\n
            v8 = v10;\n
            v4[0] = &v6[1].padding_0[32 + 8 * v9];\n
            if (!v8)\n
                v3 = 0;\n
            else\n
                v3 = v8 + 1;\n
            cgc_list_remove(v4, v3);\n
            *(v10) = (v12->field_-4 & -2) + (*(v10) & -2);\n
            cgc_mark_free(v10);\n
            v12 = v10;\n
        }\n
    }\n
    if (!v11)\n
    {\n
        return v12;\n
    }\n
    else if ((*(v11) & 1))\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v11) & -2);\n
        v9 = v2 - cgc_log_base_two(v6->field_2c);\n
        if (v9 >= 8)\n
            return v12;\n
        v7 = v11;\n
        v1[0] = &v6[1].padding_0[32 + 8 * v9];\n
        if (!v7)\n
            v0 = 0;\n
        else\n
            v0 = v7 + 1;\n
        cgc_list_remove(v1, v0);\n
        *(v12) = (*(v12) & -2) + (*(v11) & -2);\n
        cgc_mark_free(v12);\n
    }\n
}\n
", "4206729:sub_403089": null, "4206736:cgc_list_insert_in_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_in_order(struct struct_0 **v3, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct struct_0 **v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v3)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v4 = cgc_list_push_back(v3);\n
            return v4;\n
        }\n
        else if (a1(a0) < 0)\n
        {\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v0 = a0;\n
            v4 = cgc_list_insert_before(v3, v2);\n
            return v4;\n
        }\n
    }\n
}\n
", "4206893:sub_40312d": null, "4206896:cgc_size_cmp": "int cgc_size_cmp(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int *v4;  // [bp-0x14]\n
    unsigned int *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int *v7;  // [bp-0x8]\n
\n
    v6 = v8;\n
    if (!v6)\n
        v1 = 0;\n
    else\n
        v1 = -5 + v6;\n
    v5 = v1;\n
    v7 = v5;\n
    v3 = a0;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v3;\n
    v2 = v0;\n
    v4 = v2;\n
    return (*(v4) & -2) - (*(v7) & -2);\n
}\n
", "4207047:sub_4031c7": null, "4207056:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_malloc(v4);\n
    if (v2)\n
    {\n
        v0 = v4;\n
        cgc_memset(v2, 0);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4207145:sub_403229": null, "4207152:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
    {\n
        v7 = cgc_malloc(a0);\n
        return v7;\n
    }\n
    v6 = (*(cgc_ptr_to_chunk(v8)) & -2) - 8;\n
    if (a0 == v6)\n
    {\n
        v7 = v8;\n
        return v7;\n
    }\n
    v5 = cgc_malloc(a0);\n
    v2 = v5;\n
    v3 = v8;\n
    if (a0 < v6)\n
        v1 = a0;\n
    else\n
        v1 = v6;\n
    v0 = v1;\n
    cgc_memcpy(v2, v3);\n
    cgc_free(v8);\n
    v7 = v5;\n
    return v7;\n
}\n
", "4207375:sub_40330f": null, "4207376:cgc_list_insert_before": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_list_insert_before(struct_3 *v0, struct_0 *a0, unsigned int a1[2])\n
{\n
    struct_3 *v1;  // eax, Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4207632:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_push_back(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_list_insert_after(v1, v1->field_4);\n
}\n
", "4207691:sub_40344b": null, "4207696:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(void* *v1, void* *a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        v2 = cgc_list_insert_before(v1, *(a0), a1);\n
        return v2;\n
    }\n
    v2 = cgc_list_insert_before(v1, *(v1), a1);\n
    return v2;\n
}\n
", "4207808:cgc_memcmp": "int cgc_memcmp(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xd]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a1 > v1)\n
            v0 = v1[v3] == v1[a0];\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    if (a1 == v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*((v3 + v1)) <= *((a0 + v1)))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4208012:sub_40358c": null, "4208016:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v1 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        *(v1) = *(v0);\n
        v1 += 1;\n
        v0 += 1;\n
    }\n
    return v2;\n
}\n
", "4208104:sub_4035e8": null, "4208112:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; a1 > 0; a1 -= 1)\n
    {\n
        *(v0) = a0;\n
        v0 += 1;\n
    }\n
    return v1;\n
}\n
", "4208182:sub_403636": null, "4208192:cgc_read_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (!a1)\n
            return v3;\n
        v0 = &v2;\n
        if (cgc_receive(v5, v4 + v3, a1))\n
            break;\n
        if (!v2)\n
            break;\n
        v3 = v2 + v3;\n
        a1 -= v2;\n
    }\n
    return v3;\n
}\n
", "4208351:sub_4036df": null, "4208352:cgc_recv_all": "int cgc_recv_all(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_read_all(0, v0, a0);\n
}\n
", "4208411:sub_40371b": null, "4208416:cgc_send": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_send(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a0;\n
    if (cgc_sendall(1, v3))\n
    {\n
        cgc__terminate();\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4208502:sub_403776": null, "4208512:cgc_sendall": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sendall(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!a0)\n
    {\n
        v5 = -6;\n
        return v5;\n
    }\n
    if (!a1)\n
    {\n
        v5 = -6;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v3;\n
        v2 = cgc_transmit(v6, a0 + v4, a1 - v4);\n
        if (v2)\n
        {\n
            v5 = -6;\n
            return v5;\n
        }\n
        v4 = v3 + v4;\n
    }\n
}\n
", "4208716:sub_40384c": null, "4208720:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *(v1); v1 += 1)\n
    {\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4208780:sub_40388c": null, "4208784:cgc_strncmp": "int cgc_strncmp(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xd]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = 0;\n
    if (!a1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (a1 > v1)\n
        {\n
            v0 = 0;\n
            if (v1[v3])\n
            {\n
                v0 = 0;\n
                if (v1[a0])\n
                    v0 = v1[v3] == v1[a0];\n
            }\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v1 += 1;\n
    }\n
    if (a1 == v1)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else if (*((v3 + v1)) <= *((a0 + v1)))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1;\n
        return v2;\n
    }\n
}\n
", "4209038:sub_40398e": null, "4209040:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4209195:sub_403a2b": null, "4209200:cgc_vsnprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsnprintf(unsigned int v11, unsigned int a0, char *a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    void* v2;  // [bp-0x4c], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x48]\n
    char v4;  // [bp-0x44]\n
    struct_0 *v5;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x1d]\n
    void* v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x15]\n
    char *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v12;  // eax\n
    unsigned int v13;  // ecx\n
    struct struct_0 **v14;  // eax\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = a1;\n
    if (!v9)\n
        v9 = v1 - 4380;\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            do\n
            {\n
                if (!*(v9))\n
                {\n
                    if (a0 <= 0)\n
                        return v10;\n
                    if (v10 >= a0)\n
                        *((v11 + a0 - 1)) = 0;\n
                    else\n
                        *((v11 + v10)) = 0;\n
                    return v10;\n
                }\n
                if (*(v9) != 126)\n
                {\n
                    if (v10 < a0)\n
                    {\n
                        v12 = v9;\n
                        v9 = v12 + 1;\n
                        v13 = v10;\n
                        v10 = v13 + 1;\n
                        *((v11 + v13)) = *(v12);\n
                    }\n
                    else\n
                    {\n
                        v10 += 1;\n
                        v9 += 1;\n
                    }\n
LABEL_403ada:\n
                    continue;\n
                }\n
                v8 = 0;\n
                v7 = 0;\n
                v6 = 0;\n
                v5 = 0;\n
                v3 = 0;\n
                v2 = 0;\n
                v9 += 1;\n
            } while (!*(v9));\n
            v8 = *(v9);\n
            v0 = v8;\n
            if (v0 == 99)\n
            {\n
                v14 = a2;\n
                a2 = v14 + 1;\n
                v5 = *(v14);\n
                if (v5)\n
                    v7 = cgc_strlen(v5);\n
                else\n
                    v7 = 0;\n
            }\n
            else if (v0 == 110)\n
            {\n
                v15 = a2;\n
                a2 = v15 + 1;\n
                v3 = *(v15);\n
                cgc_int2str(&v4, 32, v3);\n
                v5 = &v4;\n
                v7 = cgc_strlen(v5);\n
            }\n
            else if (v0 == 111)\n
            {\n
                v16 = a2;\n
                a2 = v16 + 1;\n
                v6 = *(v16);\n
                if (v5)\n
                    v7 = 1;\n
                else\n
                    v7 = 0;\n
            }\n
            v9 += 1;\n
            v2 = a0 - v10;\n
            if (0 <= v2)\n
                break;\n
            v10 = v7 + v10;\n
        }\n
        if (v8 != 110 && !(v8 == 99))\n
            goto LABEL_403cc1;\n
        if (v7 <= v2)\n
        {\n
            cgc_memcpy(v11 + v10, v5, v7);\n
            v10 = v7 + v10;\n
        }\n
        else\n
        {\n
            cgc_memcpy(v11 + v10, v5, v2);\n
            v10 = v2 + v10;\n
        }\n
LABEL_403cc1:\n
        if (v8 == 111 && v7 <= v2)\n
        {\n
            *((v11 + v10)) = v6;\n
            v10 = v7 + v10;\n
        }\n
        goto LABEL_403ada;\n
    }\n
}\n
", "4209988:sub_403d44": null, "4210000:cgc_snprintf": "int cgc_snprintf(unsigned int v4, unsigned int a0, char *a1)\n
{\n
    char **v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0x10]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
\n
    v3 = v6;\n
    v2 = v7;\n
    v0 = &v5;\n
    v1 = cgc_vsnprintf(v4, a0, a1, v0);\n
    return v1;\n
}\n
", "4210080:cgc_session_append": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_session_append(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = *(v5);\n
    v2 = *(v5);\n
    v1 = cgc_calloc(54);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_memcpy(v1, a0, 46);\n
    if (!v3)\n
    {\n
        v7 = v5;\n
        *(v7) = v1;\n
        return v5;\n
    }\n
    for (; v3; v3 = *((v3 + 50)))\n
    {\n
        v2 = v3;\n
    }\n
    v7 = v2;\n
    *((v7 + 50)) = v1;\n
    return v2;\n
}\n
", "4210274:sub_403e62": null, "4210288:cgc_session_remove": "typedef struct struct_0 {\n
    char padding_0[50];\n
    struct struct_0 *field_32;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_session_remove(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = *(v4);\n
    v1 = *(v4);\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (!cgc_memcmp(a0, v2, 12))\n
            break;\n
        v1 = v2;\n
        v2 = *((v2 + 50));\n
    }\n
    if (v2 == v1)\n
        *(v4) = *((v2 + 50));\n
    else\n
        *((v1 + 50)) = *((v2 + 50));\n
    v3 = v2;\n
    return v3;\n
}\n
", "4210471:sub_403f27": null, "4210480:cgc_session_get_by_username": "typedef struct struct_0 {\n
    char padding_0[50];\n
    struct struct_0 *field_32;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_session_get_by_username(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = v3;\n
    while (true)\n
    {\n
        if (!v1)\n
            return v2;\n
        if (!cgc_memcmp(a0 + 12, &v1->padding_0[12], 12))\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
        v1 = *(&(&v1->padding_0)[1]);\n
    }\n
}\n
", "4210613:sub_403fb5": null, "4210624:cgc_get_new_audit_record": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_new_audit_record()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_calloc(16);\n
    if (!v1)\n
    {\n
        cgc__terminate();\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4210701:sub_40400d": null, "4210704:cgc_add_auditrecord_to_audit_list": "typedef struct struct_0 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
    char padding_10[136];\n
    unsigned int field_98;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_audit_list;\n
\n
int cgc_add_auditrecord_to_audit_list(unsigned int v3)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v4;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = cgc_audit_list;\n
    if (!v2)\n
    {\n
        v4 = v0;\n
        v4->field_98 = v3;\n
        return v0;\n
    }\n
    for (v1 = cgc_audit_list; v2; v2 = *((v2 + 12)))\n
    {\n
        v1 = v2;\n
    }\n
    v4 = v1;\n
    *((v4 + 12)) = v3;\n
    return v1;\n
}\n
", "4210824:sub_404088": null, "4210832:cgc_is_taxpayer_scheduled_for_audit": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[8];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
extern struct_0 *cgc_audit_list;\n
\n
int cgc_is_taxpayer_scheduled_for_audit(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = cgc_audit_list;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (v2 != v0->field_0)\n
        {\n
            v0 = v0->field_c;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4210928:cgc_find_three_tax_years_for_audit": "typedef struct struct_0 {\n
    char padding_0[672];\n
    unsigned int field_2a0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_three_tax_years_for_audit(struct_0 *v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v2 = cgc_taxpayer_count_submitted_tax_years();\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = cgc_get_new_audit_record();\n
    *(v3) = v6;\n
    v0 = v3 + 1;\n
    cgc_tenfourd_get_last_three_from_list(v6->field_2a0, v2);\n
    v4 = v3;\n
    return v4;\n
}\n
", "4211075:sub_404183": null, "4211088:cgc_we_have_a_winner": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int tp_list;\n
\n
int cgc_we_have_a_winner(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v4 = cgc_taxpayer_get_by_username(tp_list);\n
    if (v4 && !cgc_is_taxpayer_scheduled_for_audit(v4))\n
    {\n
        v1 = cgc_find_three_tax_years_for_audit(v4);\n
        if (!v1)\n
        {\n
            cgc_memcpy(a0 + 12, v0 - 4074, 10);\n
        }\n
        else\n
        {\n
            *(v1) = v4;\n
            cgc_add_auditrecord_to_audit_list(v1);\n
            cgc_memcpy(a0 + 12, v0 - 4095, 20);\n
            cgc_memcpy(a0 - -32, v1 + 1, 6);\n
        }\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_memcpy(a0 + 12, v0 - 4063, 10);\n
    v5 = -1;\n
    return v5;\n
}\n
", "4211427:sub_4042e3": null, "4211440:cgc_recv_cmd_data": "typedef struct struct_0 {\n
    char padding_0[44];\n
    unsigned short field_2c;\n
    unsigned int field_2e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv_cmd_data(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 != v3->field_2c)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    if (0 < a0)\n
    {\n
        *(&(&v3->field_2c)[1]) = cgc_calloc(a0);\n
        if (!*(&(&v3->field_2c)[1]))\n
            cgc__terminate();\n
        v0 = a0;\n
        if (v0 != cgc_recv_all(*(&(&v3->field_2c)[1]), a0))\n
            cgc__terminate();\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4211654:sub_4043c6": null, "4211664:cgc_session_auth": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* s_list;\n
\n
int cgc_session_auth(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_session_get_by_username(s_list, v4);\n
    if (v1 && !cgc_memcmp(v4, v1, 12) && !cgc_memcmp(v4 + 24, v1 + 24, 12))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = -1;\n
    return v2;\n
}\n
", "4211848:sub_404488": null, "4211856:cgc_response_set_key": "int cgc_response_set_key(char *v0, char *a0)\n
{\n
    return cgc_memcpy(a0, v0, 12);\n
}\n
", "4211913:sub_4044c9": null, "4211920:cgc_get_refund": "typedef struct struct_0 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_refund(unsigned int v8, unsigned int a0)\n
{\n
    struct_1 *v0;  // [bp-0xb0]\n
    struct_0 *v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    char v3;  // [bp-0x98]\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    memset(&v3, 0, 128);\n
    v2 = 113;\n
    v5 = cgc_taxpayer_get_by_username(v1->field_94);\n
    if (v5)\n
    {\n
        v0 = &v2;\n
        v4 = cgc_taxpayer_get_refund(v5, v8, &v3);\n
        if (!v4 && v2 < 113)\n
        {\n
            cgc_memcpy(a0 + 12, &v1[27].padding_0[21], 13);\n
            cgc_memcpy(a0 - -25, &v3, v2);\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    cgc_memcpy(a0 + 12, &v1[27].padding_0[7], 15);\n
    v6 = -1;\n
    return v6;\n
}\n
", "4212275:sub_404633": null, "4212288:cgc_pay_taxes": "typedef struct struct_1 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_pay_taxes(void* v8, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xb0]\n
    struct_1 *v1;  // [bp-0xa0]\n
    unsigned int v2;  // [bp-0x9c]\n
    char v3;  // [bp-0x98]\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 0;\n
    memset(&v3, 0, 128);\n
    v2 = 114;\n
    v4 = cgc_recv_cmd_data(v8, 4);\n
    if (!v4)\n
    {\n
        v5 = cgc_taxpayer_get_by_username(v1->field_94);\n
        if (v5)\n
        {\n
            v0 = &v2;\n
            v4 = cgc_taxpayer_pay_taxes(v5, v8, &v3);\n
            if (!v4 && v2 < 114)\n
            {\n
                cgc_memcpy(a0 + 12, &v1[27].padding_0[49], 12);\n
                cgc_memcpy(a0 - -24, &v3, v2);\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a0 + 12, &v1[27].padding_0[36], 14);\n
    v6 = -1;\n
    return v6;\n
}\n
", "4212687:sub_4047cf": null, "4212688:cgc_copy_yr_list_into_answer": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_copy_yr_list_into_answer(unsigned int v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_memcpy(v2 + 12, \"TAXES_SUBMITTED_OK\", 18);\n
    v4 = v1;\n
    return cgc_memcpy(v2 - -30, a0, a1);\n
}\n
", "4212794:sub_40483a": null, "4212800:cgc_taxes_submitted": "typedef struct struct_1 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxes_submitted(void* v9, unsigned int a0)\n
{\n
    struct_2 *v0;  // [bp-0xb0]\n
    struct_1 *v1;  // [bp-0xa4]\n
    void* v2;  // [bp-0xa0]\n
    char v3;  // [bp-0x9c]\n
    struct struct_0 **v4;  // [bp-0x1c]\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = 0;\n
    v4 = &cgc_copy_yr_list_into_answer;\n
    memset(&v3, 0, 128);\n
    v2 = 0;\n
    v5 = cgc_recv_cmd_data(v9, 4);\n
    if (!v5)\n
    {\n
        v6 = cgc_taxpayer_get_by_username(v1->field_94);\n
        if (v6)\n
        {\n
            v0 = &v2;\n
            v5 = cgc_taxpayer_list_submitted_tax_years(v6, v9, &v3);\n
            if (!v5)\n
            {\n
                v4(a0, &v3);\n
                v7 = 0;\n
                return v7;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a0 + 12, &v1[27].padding_0[71], 21);\n
    v7 = -1;\n
    return v7;\n
}\n
", "4213148:sub_40499c": null, "4213152:cgc_taxes_due": "typedef struct struct_0 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxes_due(void* v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = cgc_recv_cmd_data(v6, 4);\n
    if (!v2)\n
    {\n
        v3 = cgc_taxpayer_get_by_username(v0->field_94);\n
        if (v3)\n
        {\n
            v2 = cgc_taxpayer_sum_taxes_due(v3, v6);\n
            if (!v2)\n
            {\n
                cgc_memcpy(a0 + 12, &v0[27].padding_0[118], 12);\n
                cgc_memcpy(a0 - -24, &v1, 4);\n
                v4 = 0;\n
                return v4;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a0 + 12, &v0[27].padding_0[105], 14);\n
    cgc_memcpy(a0 - -26, &v1, 4);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4213491:sub_404af3": null, "4213504:cgc_upload_form": "typedef struct struct_0 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_upload_form(void* v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v1 = 747;\n
    v2 = cgc_recv_cmd_data(v6, v1);\n
    if (!v2)\n
    {\n
        v3 = cgc_taxpayer_get_by_username(v0->field_94);\n
        if (v3)\n
        {\n
            v2 = cgc_taxpayer_add_tenfourdee(v3, v6);\n
            if (!v2)\n
            {\n
                cgc_memcpy(a0 + 12, &v0[27].padding_0[140], 9);\n
                v4 = 0;\n
                return v4;\n
            }\n
        }\n
    }\n
    cgc_memcpy(a0 + 12, &v0[27].padding_0[130], 11);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4213766:sub_404c06": null, "4213776:cgc_login": "typedef struct struct_1 {\n
    char padding_0[144];\n
    void* field_90;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int tp_list;\n
\n
int cgc_login(unsigned int v5, unsigned int a0)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = cgc_taxpayer_get_by_username(tp_list);\n
    if (v2 && !cgc_taxpayer_compare_creds(v2))\n
    {\n
        v1 = cgc_session_get_by_username(v0->field_90, v5);\n
        if (v1 && !(0 == cgc_memcmp(v5, v1, 12)))\n
            goto LABEL_404d10;\n
        cgc_session_append(&v0->field_90, v5);\n
        cgc_memcpy(a0 + 12, &v0[28].padding_0[130], 8);\n
        v3 = 0;\n
        return v3;\n
    }\n
LABEL_404d10:\n
    cgc_memcpy(a0 + 12, &v0[28].padding_0[121], 10);\n
    v3 = -1;\n
    return v3;\n
}\n
", "4214083:sub_404d43": null, "4214096:cgc_logout": "typedef struct struct_0 {\n
    char padding_0[46];\n
    unsigned int field_2e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *s_list;\n
\n
int cgc_logout(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_session_remove(&s_list, v3);\n
    if (v1)\n
    {\n
        if (*(&(&v1->padding_0)[1]))\n
            cgc_free(*(&(&v1->padding_0)[1]));\n
        cgc_free(v1);\n
    }\n
    cgc_memcpy(a0 + 12, v0 - 4254, 9);\n
    return 0;\n
}\n
", "4214247:sub_404de7": null, "4214256:cgc_create_account": "typedef struct struct_0 {\n
    char padding_0[148];\n
    unsigned int field_94;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_account(void* v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v2 = cgc_recv_cmd_data(v5, 648);\n
    if (v2)\n
        return v2;\n
    v3 = cgc_taxpayer_get_by_username(v1->field_94);\n
    if (v3)\n
    {\n
        v2 = -1;\n
    }\n
    else\n
    {\n
        v0 = &v1->field_94;\n
        cgc_taxpayer_new(v5, a0);\n
        v2 = 0;\n
    }\n
    return v2;\n
}\n
", "4214426:sub_404e9a": null, "4214432:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xe8]\n
    char v1;  // [bp-0xe4]\n
    char v2;  // [bp-0xd8]\n
    char v3;  // [bp-0x58]\n
    char v4;  // [bp-0x4c]\n
    char v5;  // [bp-0x28]\n
    char v6;  // [bp-0x1e]\n
    void* v7;  // [bp-0x14]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0xc]\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
\n
    v10 = v12;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    while (true)\n
    {\n
        memset(&v4, 0, 54);\n
        if (cgc_recv_all(&v4, 46) != 46)\n
            cgc__terminate();\n
        v8 = cgc_session_auth(&v4, &v1);\n
        if (!v8)\n
        {\n
            if (!cgc_memcmp(v0 - 4363, &v5, 8))\n
            {\n
                v8 = cgc_logout(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4355, &v5, 8))\n
            {\n
                v8 = cgc_upload_form(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4347, &v5, 8))\n
            {\n
                v8 = cgc_taxes_due(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4339, &v5, 8))\n
            {\n
                v8 = cgc_taxes_submitted(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4331, &v5, 8))\n
            {\n
                v8 = cgc_pay_taxes(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4323, &v5, 8))\n
            {\n
                v8 = cgc_get_refund(&v4, &v1);\n
            }\n
            else if (!cgc_memcmp(v0 - 4315, &v5, 8))\n
            {\n
                v8 = cgc_we_have_a_winner(&v4, &v1);\n
            }\n
            else if (cgc_memcmp(v0 - 4307, &v5, 8))\n
            {\n
                cgc_memcpy(&v2, v0 - 4283, 8);\n
                v8 = -1;\n
            }\n
            else\n
            {\n
                v8 = cgc_we_have_a_winner(&v4, &v1);\n
            }\n
        }\n
        else\n
        {\n
            if (!cgc_memcmp(v0 - 4371, &v5, 8))\n
            {\n
                v8 = cgc_login(&v4, &v1);\n
            }\n
            else if (cgc_memcmp(v0 - 4379, &v5, 8))\n
            {\n
                cgc_memcpy(&v2, v0 - 4283, 8);\n
                v8 = -1;\n
            }\n
            else\n
            {\n
                v8 = cgc_create_account(&v4, &v1);\n
            }\n
        }\n
        if (0 > v8)\n
        {\n
            cgc_memcpy(&v3, v0 - 4291, 8);\n
        }\n
        else\n
        {\n
            cgc_memcpy(&v3, v0 - 4299, 8);\n
            cgc_response_set_key(&v4, &v1);\n
        }\n
        cgc_send(&v1, 148);\n
        if (*(&v6))\n
            cgc_free(*(&v6));\n
    }\n
}\n
", "4215814:sub_405406": null, "4215824:cgc_taxpayer_append": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[672];\n
    unsigned int field_2a4;\n
} struct_0;\n
\n
int cgc_taxpayer_append(struct_0 *v2, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v2->field_0;\n
    if (!v1)\n
    {\n
        v3 = v2;\n
        v3->field_0 = a0;\n
        return v2;\n
    }\n
    for (v0 = v2->field_0; v1; v1 = *((v1 + 676)))\n
    {\n
        v0 = v1;\n
    }\n
    v3 = v0;\n
    *((v3 + 676)) = a0;\n
    return v0;\n
}\n
", "4215932:sub_40547c": null, "4215936:cgc_taxpayer_new": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[45];\n
    char *field_2e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxpayer_new(struct_0 *v5, unsigned int a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    char *v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0x4347c000;\n
    v2 = cgc_calloc(680);\n
    if (!v2)\n
        cgc__terminate();\n
    cgc_memcpy(v2, *(&(&v5->padding_1)[1]), 648);\n
    cgc_memcpy(v2 + 648, &v5->padding_1[11], 12);\n
    for (v1 = 0; v1 < 12; v1 += 1)\n
    {\n
        v2[660 + v1] = (&v5->field_0)[v1] ^ v3[(&v5->field_0)[v1]];\n
    }\n
    cgc_memcpy(a0 + 12, v2 + 660, 12);\n
    return cgc_taxpayer_append(a1, v2);\n
}\n
", "4216237:sub_4055ad": null, "4216240:cgc_taxpayer_get_by_username": "typedef struct struct_0 {\n
    char padding_0[676];\n
    struct struct_0 *field_2a4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxpayer_get_by_username(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = v3;\n
    while (true)\n
    {\n
        if (!v1)\n
            return v2;\n
        if (!cgc_memcmp(a0 + 12, &v1->padding_0[648], 12))\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
        v1 = v1->field_2a4;\n
    }\n
}\n
", "4216378:sub_40563a": null, "4216384:cgc_taxpayer_compare_creds": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxpayer_compare_creds(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_memcmp(v3 + 648, a0 + 12, 12) && !cgc_memcmp(v3 + 660, a0 + 24, 12))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = -1;\n
    return v1;\n
}\n
", "4216540:sub_4056dc": null, "4216544:cgc_taxpayer_add_tenfourdee": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_taxpayer_add_tenfourdee(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = a1;\n
    v3 = cgc_tenfourd_ingest(a0);\n
    if (!v3)\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v0 = v6;\n
    v2 = cgc_tenfourd_validate(v3);\n
    if (!v2)\n
    {\n
        v0 = v3;\n
        cgc_tenfourd_append(v6 + 672);\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_free(v3);\n
    v4 = -1;\n
    return v4;\n
}\n
", "4216723:sub_405793": null, "4216736:cgc_tenfourd_ingest": "typedef struct struct_0 {\n
    char padding_0[46];\n
    char *field_2e;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tenfourd_ingest(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_calloc(755);\n
    if (!v1)\n
        cgc__terminate();\n
    cgc_memcpy(v1, *(&(&v3->padding_0)[1]), a0);\n
    return v1;\n
}\n
", "4216850:sub_405812": null, "4216864:cgc_tenfourd_validate": "typedef struct struct_3 {\n
    char padding_0[644];\n
    unsigned int field_284;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    char field_2;\n
    char field_3;\n
    char padding_4[1];\n
    char field_5;\n
    char padding_6[124];\n
    char field_82;\n
    char field_83;\n
    char padding_84[2];\n
    char field_86;\n
    char padding_87[124];\n
    char field_103;\n
    char field_104;\n
    char padding_105[2];\n
    char field_107;\n
    char padding_108[123];\n
    char field_183;\n
    char field_184;\n
    char padding_185[3];\n
    char field_188;\n
    char padding_189[121];\n
    char field_202;\n
    char field_203;\n
    char field_204;\n
    char field_205;\n
    char padding_206[124];\n
    unsigned int field_282;\n
    char field_286;\n
    unsigned int field_287;\n
    unsigned int field_28b;\n
    unsigned int field_28f;\n
    unsigned int field_293;\n
    unsigned int field_297;\n
    unsigned int field_29b;\n
    unsigned int field_29f;\n
    unsigned int field_2a3;\n
    unsigned int field_2a7;\n
    unsigned int field_2ab;\n
    unsigned int field_2af;\n
    unsigned int field_2b3;\n
    unsigned int field_2b7;\n
    unsigned int field_2bb;\n
    unsigned int field_2bf;\n
    char padding_2c3[32];\n
    unsigned int field_2e3;\n
    unsigned int field_2e7;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    char field_3;\n
    char field_4;\n
    char field_5;\n
    char field_6;\n
    char field_7;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tenfourd_validate(struct_1 *v56, struct_3 *a0)\n
{\n
    unsigned int v0;  // [bp-0xb0]\n
    int tmp_11;  // tmp #11\n
    int tmp_25;  // tmp #25\n
    int tmp_39;  // tmp #39\n
    int tmp_53;  // tmp #53\n
    int tmp_111;  // tmp #111\n
    int tmp_125;  // tmp #125\n
    int tmp_139;  // tmp #139\n
    int tmp_48;  // tmp #48\n
    int tmp_62;  // tmp #62\n
    int tmp_76;  // tmp #76\n
    int tmp_90;  // tmp #90\n
    int tmp_9;  // tmp #9\n
    int tmp_23;  // tmp #23\n
    int tmp_72;  // tmp #72\n
    int tmp_82;  // tmp #82\n
    int tmp_92;  // tmp #92\n
    int tmp_102;  // tmp #102\n
    unsigned int v1;  // [bp-0xac]\n
    unsigned int v2;  // [bp-0xa8]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    unsigned int v9;  // [bp-0x8c]\n
    void* v10;  // [bp-0x88]\n
    char v11;  // [bp-0x7d]\n
    void* v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    struct_2 *v13;  // [bp-0x78]\n
    void* v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    void* v15;  // [bp-0x70], Other Possible Types: unsigned int\n
    struct_2 *v16;  // [bp-0x68]\n
    void* v17;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x60], Other Possible Types: unsigned int\n
    struct_2 *v19;  // [bp-0x58]\n
    void* v20;  // [bp-0x54], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x50], Other Possible Types: unsigned int\n
    struct_2 *v22;  // [bp-0x48]\n
    void* v23;  // [bp-0x44], Other Possible Types: unsigned int\n
    void* v24;  // [bp-0x40], Other Possible Types: unsigned int\n
    void* v25;  // [bp-0x3c], Other Possible Types: unsigned int\n
    void* v26;  // [bp-0x38]\n
    struct_0 *v27;  // [bp-0x34]\n
    unsigned int v28;  // [bp-0x30]\n
    void* v29;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v30;  // [bp-0x28]\n
    char v31;  // [bp-0x27]\n
    char v32;  // [bp-0x26]\n
    char v33;  // [bp-0x25]\n
    char v34;  // [bp-0x24]\n
    char v35;  // [bp-0x23]\n
    char v36;  // [bp-0x22]\n
    char v37;  // [bp-0x21]\n
    char v38;  // [bp-0x20]\n
    char v39;  // [bp-0x1f]\n
    char v40;  // [bp-0x1e]\n
    char v41;  // [bp-0x1d]\n
    char v42;  // [bp-0x1c]\n
    char v43;  // [bp-0x1b]\n
    char v44;  // [bp-0x1a]\n
    char v45;  // [bp-0x19]\n
    char v46;  // [bp-0x18]\n
    char v47;  // [bp-0x17]\n
    char v48;  // [bp-0x16]\n
    char v49;  // [bp-0x15]\n
    char v50;  // [bp-0x14]\n
    char v51;  // [bp-0x13]\n
    char v52;  // [bp-0x12]\n
    char v53;  // [bp-0x11]\n
    void* v54;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v55;  // [bp-0x8]\n
    unsigned int v57;  // ebx\n
    struct_1 *v58;  // ecx\n
    struct_1 *v59;  // ecx\n
    struct_1 *v60;  // ecx\n
    struct_1 *v61;  // ecx\n
    unsigned int v62;  // edx\n
    unsigned int v63;  // ecx\n
    unsigned int v65;  // eax\n
    unsigned int v66;  // edx\n
    unsigned int v67;  // ecx\n
    unsigned int v69;  // eax\n
    unsigned int v70;  // edx\n
    unsigned int v71;  // ecx\n
    unsigned int v73;  // eax\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // ecx\n
    unsigned int v77;  // eax\n
    unsigned int v78;  // edx\n
    unsigned int v79;  // ecx\n
    unsigned int v81;  // eax\n
    unsigned int v82;  // edx\n
    unsigned int v83;  // ecx\n
    unsigned int v85;  // eax\n
    unsigned int v86;  // edx\n
    unsigned int v87;  // ecx\n
    unsigned int v89;  // eax\n
    unsigned int v90;  // edx\n
    unsigned int v91;  // ecx\n
    unsigned int v93;  // eax\n
    unsigned int v94;  // edx\n
    unsigned int v95;  // ecx\n
    unsigned int v97;  // eax\n
    unsigned int v98;  // edx\n
    unsigned int v99;  // ecx\n
    unsigned int v101;  // eax\n
    unsigned int v102;  // edx\n
    unsigned int v103;  // ecx\n
    unsigned int v105;  // eax\n
    unsigned int v106;  // edx\n
    unsigned int v107;  // ecx\n
    unsigned int v109;  // eax\n
    unsigned int v110;  // edx\n
    unsigned int v111;  // ecx\n
    unsigned int v113;  // eax\n
    unsigned int v114;  // ecx\n
    unsigned int v115;  // ecx\n
    unsigned int v116;  // ecx\n
    unsigned int v117;  // ecx\n
    unsigned int v118;  // esi\n
    unsigned int v119;  // ecx\n
    unsigned int v121;  // esi\n
    unsigned int v122;  // ecx\n
    unsigned int v123;  // eax\n
    unsigned int v124;  // esi\n
    unsigned int v125;  // ecx\n
    unsigned int v126;  // eax\n
    unsigned int v127;  // esi\n
    unsigned int v128;  // ecx\n
    unsigned int v129;  // eax\n
    unsigned int v130;  // esi\n
    unsigned int v132;  // eax\n
    unsigned int v133;  // edx\n
\n
    v55 = v57;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    memset(&v30, 0, 24);\n
    v29 = 0;\n
    if (cgc_taxpayer_get_tenfourd_by_taxyear(a0))\n
    {\n
        v29 = -1;\n
        goto LABEL_406108;\n
    }\n
    if (!cgc_memcmp(a0, &v56->field_2, 128) && !cgc_memcmp(&a0->padding_0[128], &v56->field_82, 128) && !cgc_memcmp(&a0->padding_0[0x100], &v56->padding_87[123], 128) && !cgc_memcmp(&a0->padding_0[384], &v56->padding_108[122], 128) && !cgc_memcmp(&a0->padding_0[0x200], &v56->field_202, 128) && a0->field_284 == *(&(&v56->padding_206)[1]))\n
    {\n
        v28 = a0->field_284;\n
        v27 = &v28;\n
        v30 = v27->field_0 ^ v56->field_2;\n
        v31 = v27->field_1 ^ v56->field_82;\n
        v32 = v27->field_2 ^ v56->field_103;\n
        v33 = v27->field_3 ^ v56->field_183;\n
        v58 = v56;\n
        v34 = v58->field_202 ^ v58->field_3;\n
        v59 = v56;\n
        v35 = v59->field_203 ^ v59->field_83;\n
        v60 = v56;\n
        v36 = v60->field_204 ^ v60->field_104;\n
        v61 = v56;\n
        v37 = v61->field_205 ^ v61->field_184;\n
        v26 = 0;\n
        v25 = 0;\n
        if (*(&v56->field_282 + 2) == 78 && *((&v56->field_282 + 3)))\n
        {\n
            v29 = -3;\n
            goto LABEL_406108;\n
        }\n
        if (*(&v56->field_282 + 2) != 89)\n
        {\n
LABEL_405b2b:\n
            v25 = *((&v56->field_282 + 3));\n
            v26 = 0;\n
            v24 = 0;\n
            v23 = 0;\n
            v22 = &v23;\n
            v62 = *((&v56->field_287 + 3));\n
            v63 = v23;\n
            tmp_11 = v63;\n
            v65 = v24 + (tmp_11 + v62 < tmp_11);\n
            v23 = v63 + v62;\n
            v24 = v65;\n
            v66 = *((&v56->field_28b + 3));\n
            v67 = v23;\n
            tmp_25 = v67;\n
            v69 = v24 + (tmp_25 + v66 < tmp_25);\n
            v23 = v67 + v66;\n
            v24 = v69;\n
            v70 = *((&v56->field_28f + 3));\n
            v71 = v23;\n
            tmp_39 = v71;\n
            v73 = v24 + (tmp_39 + v70 < tmp_39);\n
            v23 = v71 + v70;\n
            v24 = v73;\n
            v74 = *((&v56->field_293 + 3));\n
            v75 = v23;\n
            tmp_53 = v75;\n
            v77 = v24 + (tmp_53 + v74 < tmp_53);\n
            v23 = v75 + v74;\n
            v24 = v77;\n
            v34 ^= v22->field_0;\n
            v35 ^= v22->field_1;\n
            v36 ^= v22->field_2;\n
            v37 ^= v22->field_3;\n
            v38 = v22->field_4;\n
            v39 = v22->field_5;\n
            v40 = v22->field_6;\n
            v41 = v22->field_7;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = &v20;\n
            v78 = *((&v56->field_297 + 3));\n
            v79 = v20;\n
            tmp_111 = v79;\n
            v81 = v21 + (tmp_111 + v78 < tmp_111);\n
            v20 = v79 + v78;\n
            v21 = v81;\n
            v82 = *((&v56->field_29b + 3));\n
            v83 = v20;\n
            tmp_125 = v83;\n
            v85 = v21 + (tmp_125 + v82 < tmp_125);\n
            v20 = v83 + v82;\n
            v21 = v85;\n
            v86 = *((&v56->field_29f + 3));\n
            v87 = v20;\n
            tmp_139 = v87;\n
            v89 = v21 + (tmp_139 + v86 < tmp_139);\n
            v20 = v87 + v86;\n
            v21 = v89;\n
            v38 ^= v19->field_0;\n
            v39 ^= v19->field_1;\n
            v40 ^= v19->field_2;\n
            v41 ^= v19->field_3;\n
            v42 = v19->field_4;\n
            v43 = v19->field_5;\n
            v44 = v19->field_6;\n
            v45 = v19->field_7;\n
            v18 = 0;\n
            v17 = 0;\n
            v16 = &v17;\n
            v90 = *((&v56->field_2a3 + 3));\n
            v91 = v17;\n
            tmp_48 = v91;\n
            v93 = v18 + (tmp_48 + v90 < tmp_48);\n
            v17 = v91 + v90;\n
            v18 = v93;\n
            v94 = *((&v56->field_2a7 + 3));\n
            v95 = v17;\n
            tmp_62 = v95;\n
            v97 = v18 + (tmp_62 + v94 < tmp_62);\n
            v17 = v95 + v94;\n
            v18 = v97;\n
            v98 = *((&v56->field_2ab + 3));\n
            v99 = v17;\n
            tmp_76 = v99;\n
            v101 = v18 + (tmp_76 + v98 < tmp_76);\n
            v17 = v99 + v98;\n
            v18 = v101;\n
            v102 = *((&v56->field_2af + 3));\n
            v103 = v17;\n
            tmp_90 = v103;\n
            v105 = v18 + (tmp_90 + v102 < tmp_90);\n
            v17 = v103 + v102;\n
            v18 = v105;\n
            v42 ^= v16->field_0;\n
            v43 ^= v16->field_1;\n
            v44 ^= v16->field_2;\n
            v45 ^= v16->field_3;\n
            v46 = v16->field_4;\n
            v47 = v16->field_5;\n
            v48 = v16->field_6;\n
            v49 = v16->field_7;\n
            v15 = 0;\n
            v14 = 0;\n
            v13 = &v14;\n
            v106 = *((&v56->field_2b3 + 3));\n
            v107 = v14;\n
            tmp_9 = v107;\n
            v109 = v15 + (tmp_9 + v106 < tmp_9);\n
            v14 = v107 + v106;\n
            v15 = v109;\n
            v110 = *((&v56->field_2b7 + 3));\n
            v111 = v14;\n
            tmp_23 = v111;\n
            v113 = v15 + (tmp_23 + v110 < tmp_23);\n
            v14 = v111 + v110;\n
            v15 = v113;\n
            v46 ^= v13->field_0;\n
            v47 ^= v13->field_1;\n
            v48 ^= v13->field_2;\n
            v49 ^= v13->field_3;\n
            v50 = v13->field_4 ^ v56->field_5;\n
            v51 = v13->field_5 ^ v56->field_86;\n
            v52 = v13->field_6 ^ v56->field_107;\n
            v53 = v13->field_7 ^ v56->field_188;\n
            if (cgc_memcmp(&v30, &v56->field_2bb + 3, 24))\n
            {\n
                v29 = -5;\n
                goto LABEL_406108;\n
            }\n
            v12 = 0;\n
            for (v11 = 0; v11 < 8; v11 += 1)\n
            {\n
                v12 = v56->padding_2c3[19 + v11] + v12;\n
            }\n
            if (!v12)\n
            {\n
                v29 = -6;\n
                goto LABEL_406108;\n
            }\n
            if (*(&v56->padding_2c3[27]) && *(&v56->padding_2c3[31]))\n
            {\n
                v29 = -7;\n
                goto LABEL_406108;\n
            }\n
            v10 = 0;\n
            v9 = 12345;\n
            v114 = v24;\n
            v8 = v114 >> 3;\n
            v7 = (v114 CONCAT v23) * 0x20000000 >> 32;\n
            v115 = v21;\n
            v6 = v115 >> 4;\n
            v5 = (v115 CONCAT v20) * 0x10000000 >> 32;\n
            v116 = v18;\n
            v4 = v116 >> 2;\n
            v3 = (v116 CONCAT v17) * 0x40000000 >> 32;\n
            v117 = v9;\n
            v118 = v25;\n
            tmp_62 = v117;\n
            v119 = v117 + v118;\n
            v121 = v7;\n
            tmp_72 = v119;\n
            v122 = v119 + v121;\n
            v123 = v10 + v26 + (tmp_62 + v118 < tmp_62) + v8 + (tmp_72 + v121 < tmp_72);\n
            v124 = v5;\n
            tmp_82 = v122;\n
            v125 = v122 - v124;\n
            v126 = v123 - v6 - (tmp_82 < v124);\n
            v127 = v3;\n
            tmp_92 = v125;\n
            v128 = v125 - v127;\n
            v129 = v126 - v4 - (tmp_92 < v127);\n
            v130 = v14;\n
            tmp_102 = v128;\n
            v132 = v129 - v15 - (tmp_102 < v130);\n
            v1 = v128 - v130;\n
            v2 = v132;\n
            if (!([D] x86g_calculate_condition(0xc<32>, 0xc<32>, Load(addr=stack_base-168, size=4, endness=Iend_LE), Conv(1->32, (Load(addr=stack_base-172, size=4, endness=Iend_LE) < 0x1<32>)), Conv(1->32, (Load(addr=stack_base-172, size=4, endness=Iend_LE) < 0x1<32>)))) && (!(!(*(&v56->padding_2c3[27]) ^ v1)) || !(!v2)))\n
            {\n
                v29 = -8;\n
                goto LABEL_406108;\n
            }\n
            if (v2 < 0)\n
            {\n
                v133 = v1;\n
                tmp_9 = v133;\n
                if (!(!(*(&v56->padding_2c3[31]) ^ -(v133))) || !(!-(v2) - (0 < tmp_9)))\n
                {\n
                    v29 = -9;\n
                    goto LABEL_406108;\n
                }\n
            }\n
            if (!v1 && !v2 && *(&v56->padding_2c3[27]) && *(&v56->padding_2c3[31]))\n
            {\n
                v29 = -10;\n
LABEL_406108:\n
                v54 = v29;\n
                return v54;\n
            }\n
            v54 = 0;\n
            return v54;\n
        }\n
        if (*((&v56->field_282 + 3)) && *(&(&v56->field_286)[3]) && !(5 <= *(&(&v56->field_286)[3])))\n
            goto LABEL_405b2b;\n
        v29 = -0x4;\n
        goto LABEL_406108;\n
    }\n
    v29 = -2;\n
    goto LABEL_406108;\n
}\n
", "4219163:sub_40611b": null, "4219168:cgc_tenfourd_append": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[747];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
int cgc_tenfourd_append(struct_0 *v2, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v2->field_0;\n
    if (!v1)\n
    {\n
        v3 = v2;\n
        v3->field_0 = a0;\n
        return v2;\n
    }\n
    for (v0 = v2->field_0; v1; v1 = *((v1 + 751)))\n
    {\n
        v0 = v1;\n
    }\n
    v3 = v0;\n
    *((v3 + 751)) = a0;\n
    return v0;\n
}\n
", "4219276:sub_40618c": null, "4219280:cgc_taxpayer_get_tenfourd_by_taxyear": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
int cgc_taxpayer_get_tenfourd_by_taxyear(struct_1 *v2, unsigned short a0)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = v2->field_2a0;\n
    while (true)\n
    {\n
        if (!v0)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else if (a0 != v0->field_0)\n
        {\n
            v0 = *(&(&v0->padding_2)[1]);\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4219377:sub_4061f1": null, "4219392:cgc_taxpayer_sum_taxes_due": "typedef struct struct_2 {\n
    char padding_0[46];\n
    struct struct_3 *field_2e;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[737];\n
    unsigned int field_2e3;\n
    unsigned int field_2e7;\n
    unsigned int field_2eb;\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
} struct_3;\n
\n
int cgc_taxpayer_sum_taxes_due(struct_1 *v3, struct_2 *a0, unsigned int *a1)\n
{\n
    struct_0 *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned short v1[2];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int *v4;  // eax\n
    unsigned int *v5;  // eax\n
\n
    *(&v1[0]) = *(&(&a0->padding_0)[1]);\n
    if (v1[1] < v1[0])\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    for (v0 = v3->field_2a0; v0; v0 = *((v0 + 751)))\n
    {\n
        if (v1[0] <= v0->field_0 && v0->field_0 <= v1[1])\n
        {\n
            if (!*(&(&v0->padding_2)[1]))\n
            {\n
                v4 = a1;\n
                *(v4) = *(v4) - (*((&v0->field_2e3 + 3)) - *((&v0->field_2e7 + 3)));\n
            }\n
            else\n
            {\n
                v5 = a1;\n
                *(v5) = *(&(&v0->padding_2)[1]) - *((&v0->field_2e7 + 3)) + *(v5);\n
            }\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4219624:sub_4062e8": null, "4219632:cgc_taxpayer_list_submitted_tax_years": "typedef struct struct_0 {\n
    char padding_0[46];\n
    struct struct_1 *field_2e;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[672];\n
    struct struct_2 *field_2a0;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_2 *field_2ef;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned short field_0;\n
    unsigned short field_2;\n
} struct_1;\n
\n
int cgc_taxpayer_list_submitted_tax_years(struct_3 *v5, struct_0 *a0, unsigned short *a1, unsigned int *a2)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned short *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_2 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned short v3[2];  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned short *v6;  // eax\n
\n
    *(&v3[0]) = *(&(&a0->padding_0)[1]);\n
    if (v3[1] < v3[0])\n
    {\n
        v4 = -1;\n
        return v4;\n
    }\n
    v2 = v5->field_2a0;\n
    v1 = a1;\n
    for (v0 = 0; v2; v2 = *((v2 + 751)))\n
    {\n
        if (v3[0] <= *(v2) && *(v2) <= v3[1])\n
        {\n
            v6 = v1;\n
            v1 = v6 + 1;\n
            *(v6) = *(v2);\n
            v0 += 2;\n
        }\n
    }\n
    *(a2) = v0;\n
    v4 = 0;\n
    return v4;\n
}\n
", "4219838:sub_4063be": null, "4219840:cgc_taxpayer_count_submitted_tax_years": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[751];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
int cgc_taxpayer_count_submitted_tax_years(struct_1 *v2)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v2->field_2a0;\n
    for (v0 = 0; v1; v1 = *((v1 + 751)))\n
    {\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4219913:sub_406409": null, "4219920:cgc_taxpayer_get_refund": "typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[741];\n
    unsigned int field_2e7;\n
    unsigned int field_2eb;\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
int cgc_taxpayer_get_refund(struct_1 *v8, unsigned int a0, unsigned short *a1, unsigned int *a2)\n
{\n
    char v0;  // [bp-0x21]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned short *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    struct_0 *v9;  // eax\n
    unsigned short *v10;  // eax\n
\n
    v6 = v8->field_2a0;\n
    v5 = a1;\n
    v4 = *(a2) - 4;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v5 += 1;\n
    v5 += 1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v6)\n
            v0 = v3 < v4 - 2;\n
        if (!(v0 & 1))\n
            break;\n
        if (*(&(&v6->padding_2)[1]) && *((&v6->field_2e7 + 3)) < *(&(&v6->padding_2)[1]))\n
        {\n
            v2 = *(&(&v6->padding_2)[1]) - *((&v6->field_2e7 + 3));\n
            v9 = v6;\n
            *((&v9->field_2e7 + 3)) = v2 + *((&v9->field_2e7 + 3));\n
            v1 = v2 + v1;\n
            v10 = v5;\n
            v5 = v10 + 1;\n
            *(v10) = v6->field_0;\n
            v3 += 2;\n
        }\n
        v6 = *((&v6->field_2eb + 3));\n
    }\n
    if (!v1)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    *(&a1) = v1;\n
    *(a2) = v3 + 4;\n
    v7 = 0;\n
    return v7;\n
}\n
", "4220247:sub_406557": null, "4220256:cgc_taxpayer_pay_taxes": "typedef struct struct_2 {\n
    char padding_0[46];\n
    struct struct_3 *field_2e;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[672];\n
    struct struct_0 *field_2a0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[737];\n
    unsigned int field_2e3;\n
    char padding_2e7[4];\n
    unsigned int field_2eb;\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
int cgc_taxpayer_pay_taxes(struct_1 *v8, struct_2 *a0, unsigned short *a1, unsigned int *a2)\n
{\n
    char v0;  // [bp-0x21]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned short *v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    struct_0 *v9;  // eax\n
    unsigned short *v10;  // eax\n
\n
    v6 = *(*(&(&a0->padding_0)[1]));\n
    if (!v6)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    v5 = v8->field_2a0;\n
    v4 = a1;\n
    v3 = *(a2);\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v5)\n
            v0 = (v2 < v3 & 0 < v6);\n
        if (!(v0 & 1))\n
            break;\n
        if (*((v5 + 739)) && *((v5 + 747)) < *((v5 + 739)))\n
        {\n
            v1 = *((v5 + 739)) - *((v5 + 747));\n
            if (v1 > v6)\n
                v1 = v6;\n
            v9 = v5;\n
            *(&v9->padding_2e7[3]) = v1 + *(&v9->padding_2e7[3]);\n
            v6 -= v1;\n
            v10 = v4;\n
            v4 = v10 + 1;\n
            *(v10) = *(v5);\n
            v2 += 2;\n
        }\n
        v5 = *((v5 + 751));\n
    }\n
    if (!v1)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    *(a2) = v2;\n
    v7 = 0;\n
    return v7;\n
}\n
", "4220620:sub_4066cc": null, "4220624:cgc_tenfourd_get_last_three_from_list": "typedef struct struct_0 {\n
    unsigned short field_0;\n
    char padding_2[749];\n
    struct struct_0 *field_2ef;\n
} struct_0;\n
\n
int cgc_tenfourd_get_last_three_from_list(struct_0 *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned short *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned short *v4;  // ecx\n
\n
    v2 = v3;\n
    v1 = 0;\n
    for (v0 = a0; 3 < v0; v0 -= 1)\n
    {\n
        v2 = *(&(&v2->padding_2)[1]);\n
    }\n
    for (; v1 < v0; v2 = *((v2 + 751)))\n
    {\n
        v4 = v1;\n
        v1 = v4 + 1;\n
        *((a1 + v4 * 2)) = *(v2);\n
    }\n
    return v1;\n
}\n
", "4220764:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:memset": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}