{"4198400:_init": "extern struct_0 *g_406118;\n
\n
int _init()\n
{\n
    if (g_406118)\n
    {\n
        g_406118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198480:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198496:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198512:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198560:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198576:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4198592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198608:sub_4010d0": "int sub_4010d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198614:sub_4010d6": null, "4198624:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198667:sub_40110b": null, "4198668:sub_40110c": "int sub_40110c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198672:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198676:sub_401114": null, "4198688:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 20479;\n
    v6 = v5 + 378;\n
    v7 = v5 + 378;\n
    if (v7 == v6)\n
        return v5 + 378;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198739:sub_401153": "int sub_401153()\n
{\n
}\n
", "4198745:sub_401159": "int sub_401159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198752:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 20415;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 378;\n
    v9 = (v6 + 378 - (v6 + 378) >> 31) + (378 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198823:sub_4011a7": "int sub_4011a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198832:__do_global_dtors_aux": "extern unsigned int __dso_handle;\n
extern char completed.0;\n
extern unsigned int g_406114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (completed.0)\n
        return;\n
    if (g_406114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010d0();\n
    }\n
    deregister_tm_clones();\n
    completed.0 = 1;\n
    return;\n
}\n
", "4198907:sub_4011fb": "int sub_4011fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198912:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198921:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198925:sub_40120d": null, "4198928:cgc_floor": null, "4199092:sub_4012b4": null, "4199104:cgc_round_away_from_zero": null, "4199258:sub_40135a": null, "4199264:cgc_round": null, "4199408:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4199500:sub_40144c": null, "4199504:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4199713:sub_401521": null, "4199728:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4199921:sub_4015f1": null, "4199936:cgc_float_to_str": null, "4200794:sub_40195a": null, "4200800:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v14, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x7c]\n
    unsigned int v2;  // [bp-0x78]\n
    char *v3;  // [bp-0x74], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x70], Other Possible Types: unsigned int\n
    unsigned long v5;  // [bp-0x6c]\n
    struct_1 *v6;  // [bp-0x64], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x60]\n
    struct_1 *v8;  // [bp-0x5c], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x58]\n
    char v10;  // [bp-0x51]\n
    char v11;  // [bp-0x50]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0xc]\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    if (!v14)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v13 = v12;\n
            return v13;\n
        }\n
        else if (*(v14) != 64)\n
        {\n
            cgc_putc(*(v14));\n
            v14 += 1;\n
            v12 += 1;\n
        }\n
        else\n
        {\n
            v14 += 1;\n
            v1 = *(v14);\n
            if (!v1)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            if (v1 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v1 == 99)\n
            {\n
                v15 = a0;\n
                a0 = v15 + 1;\n
                v10 = *(v15);\n
                cgc_putc(v10);\n
            }\n
            else if (v1 == 100)\n
            {\n
                v16 = a0;\n
                a0 = v16 + 1;\n
                v9 = &*(v16)->field_0;\n
                cgc_int_to_str(v9, &v11);\n
                for (v8 = &v11; *(v8); v8 += 1)\n
                {\n
                    cgc_putc(*(v8));\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t23,0] = t26\n
                [D] PutI(136:I8x8)[t23,0] = 0x01\n
                v5 = ([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan);\n
                [D] PutI(136:I8x8)[t38,0] = 0x00\n
                v19 = ftop<4> - 1 + 1;\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t47,0] = t50\n
                [D] PutI(136:I8x8)[t47,0] = 0x01\n
                v0 = &v11;\n
                [D] PutI(136:I8x8)[t66,0] = 0x00\n
                v21 = v20 + 1;\n
                cgc_float_to_str();\n
                for (v4 = &v11; v4->field_0; v4 += 1)\n
                {\n
                    cgc_putc(v4->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 115)\n
            {\n
                v22 = a0;\n
                a0 = v22 + 1;\n
                for (v3 = &*(v22)->field_0; *(v3); v3 += 1)\n
                {\n
                    cgc_putc(*(v3));\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 120)\n
            {\n
                v23 = a0;\n
                a0 = v23 + 1;\n
                v7 = &*(v23)->field_0;\n
                cgc_int_to_hex(v7, &v11);\n
                for (v6 = &v11; v6->field_0; v6 += 1)\n
                {\n
                    cgc_putc(v6->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            v14 += 1;\n
        }\n
    }\n
}\n
", "4201550:sub_401c4e": null, "4201552:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4201610:sub_401c8a": null, "4201616:cgc_sprng": "typedef struct struct_0 {\n
    char padding_0[1668];\n
    unsigned int field_684;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprng(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // edi\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = a0;\n
    v2 = v4;\n
    for (v1 = 0; v1 < 16; v1 += 1)\n
    {\n
        v5 = v2;\n
        v6 = v3;\n
        v3 = v6 ^ v6 / 0x1000;\n
        v2 = v5 ^ ((v6 CONCAT v5) * 0x100000 >> 32);\n
        v8 = v2;\n
        v9 = v3;\n
        v3 = v9 ^ ((v9 CONCAT v8) * 0x2000000 >> 32);\n
        v2 = v8 ^ v8 * 0x2000000;\n
        v12 = v2;\n
        v13 = v3;\n
        v3 = v13 ^ v13 / 0x8000000;\n
        v2 = v12 ^ ((v13 CONCAT v12) * 32 >> 32);\n
        v15 = v2;\n
        v16 = v0;\n
        v17 = v1;\n
        *(&v16->padding_0[1540 + 8 * v17]) = v15 * 3625897269;\n
        *(&v16->padding_0[1544 + 8 * v17]) = (v15 * 3625897269 >> 32) + v15 * 419896726 + v3 * 3625897269;\n
    }\n
    v0->field_684 = 0;\n
    return v0;\n
}\n
", "4201842:sub_401d72": null, "4201856:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int position;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[1544 + 8 * position]);\n
    v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[1540 + 8 * position]);\n
    v9 = position + 1;\n
    if (v9 < 0)\n
        v9 = position + 16;\n
    position = position + -(v9 & -0x10) + 1;\n
    v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[1544 + 8 * position]);\n
    v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[1540 + 8 * position]);\n
    v10 = v0;\n
    v11 = v1;\n
    v1 = v11 ^ ((v11 CONCAT v10) * 0x8000000 >> 32);\n
    v0 = v10 ^ v10 * 0x8000000;\n
    v14 = v0;\n
    v15 = v1;\n
    v1 = v15 ^ v15 / 0x2000;\n
    v0 = v14 ^ ((v15 CONCAT v14) * 0x80000 >> 32);\n
    v2 ^= v3 >> 14;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[1544 + 8 * position]) = v3 ^ v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[1540 + 8 * position]) = v2 ^ v0;\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[1540 + 8 * position]) * 3479400805;\n
}\n
", "4202120:sub_401e88": null, "4202128:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 <= v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = a0 - v5 + 1;\n
    v2 = (0 CONCAT -1) /m v3;\n
    do\n
    {\n
        v1 = cgc_prng();\n
    } while (v1 >= v3 * v2);\n
    v4 = (0 CONCAT v1) /m v2 + v5;\n
    return v4;\n
}\n
", "4202257:sub_401f11": null, "4202272:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4202344:sub_401f68": null, "4202352:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202406:sub_401fa6": null, "4202416:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202470:sub_401fe6": null, "4202480:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4202546:sub_402032": null, "4202560:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4202626:sub_402082": null, "4202640:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202694:sub_4020c6": null, "4202704:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4202798:sub_40212e": null, "4202800:cgc_isnan": null, "4202823:sub_402147": null, "4202832:cgc_isinf": null, "4202879:sub_40217f": null, "4202880:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4023b2:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40238b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40238b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40238b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4023b2;\n
                if (!v4)\n
                {\n
LABEL_402307:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40238b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_402307;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40238b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4203468:sub_4023cc": null, "4203472:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4203876:sub_402564": null, "4203888:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4203979:sub_4025cb": null, "4203984:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = v1[a0];\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4204139:sub_40266b": null, "4204144:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4204252:sub_4026dc": null, "4204256:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4204334:sub_40272e": null, "4204336:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4204444:sub_40279c": null, "4204448:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4204643:sub_402863": null, "4204656:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4204733:sub_4028bd": null, "4204736:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        *((v5 + v4)) = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            *((v5 + v4)) = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4204950:sub_402996": null, "4204960:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); *((a0 + v2)); v2 += 1)\n
        {\n
            v3[v1] = *((a0 + v2));\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4205119:sub_402a3f": null, "4205120:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4205319:sub_402b07": null, "4205328:cgc_puts": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: char\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v5)\n
        return v5;\n
    v2 = cgc_strlen(v5);\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 >= v2)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                if (v4 == 1)\n
                    return v6;\n
                v0 = &v4;\n
                v6 = cgc_transmit(1, v1 - 4220, 1);\n
                if (v6)\n
                    return v6;\n
            }\n
        }\n
        else\n
        {\n
            v0 = &v4;\n
            v6 = cgc_transmit(1, v5 + v3, v2 - v3);\n
            if (v6)\n
                return v6;\n
            v3 = *(&v4) + v3;\n
        }\n
    }\n
}\n
", "4205556:sub_402bf4": null, "4205568:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4205674:sub_402c6a": null, "4205680:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[1520];\n
    unsigned int field_5f0;\n
    unsigned int field_5f4;\n
    unsigned int field_5f8;\n
    struct struct_1 *field_5fc;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_5f4)\n
        {\n
            cgc_deallocate(v4->field_5f4);\n
            v12 = v4;\n
            v12->field_5f4 = 0;\n
            v12->field_5f8 = 0;\n
            v12->field_5fc = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_5f4)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_5fc >= v11->field_5f4 + v11->field_5f8)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_5f4)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_5f8 = cgc_strlen(v10);\n
        v0 = &v13->field_5f4;\n
        if (cgc_allocate(v13->field_5f8, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_5f4, v10);\n
        v14 = v4;\n
        v14->field_5fc = v14->field_5f4;\n
    }\n
    v10 = &v4->field_5fc->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_5f4 + v15->field_5f8;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_5f4 + v16->field_5f8)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_5f0 = v8;\n
    *(v7) = 0;\n
    v17->field_5fc = v7 + 1;\n
    v9 = v17->field_5f0;\n
    return v9;\n
}\n
", "4206427:sub_402f5b": null, "4206432:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 >= a0)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        v0 = &v3;\n
        if (cgc_transmit(1, v5 + v2, a0 - v2))\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        v2 = *(&v3) + v2;\n
    }\n
}\n
", "4206597:sub_403005": null, "4206608:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4206800:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc();\n
    cgc_memset(v1, 0, v3 * a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4206890:sub_40312a": null, "4206896:cgc_malloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_heap_manager;\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    char v0;  // [bp-0x1d]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(0x1000, 0);\n
        v7 = v1;\n
        *((v7 + 0x600)) = *(&v3);\n
        *(*((v7 + 0x600))) = 0x1000;\n
        *((*((v7 + 0x600)) + 8)) = 4;\n
        *((*((v7 + 0x600)) + 4)) = 0x1000 - *((*((v7 + 0x600)) + 8));\n
        cgc_allocate(0x1000, 0);\n
        cgc_memset(*((*((v1 + 0x600)) + 12)), 0, 0x1000);\n
        v4 = *((*((v1 + 0x600)) + 12));\n
        *(v4) = 4084;\n
        *((v4 + 4)) = 0;\n
    }\n
    v4 = *((*((v1 + 0x600)) + 12));\n
    if (v6 > *(v4))\n
    {\n
        cgc_allocate(0x1000, 0);\n
        if (!*((v4 + 4)))\n
        {\n
            cgc_puts(v1 - 4316);\n
            cgc__terminate();\n
        }\n
        v4 = *((v4 + 4));\n
        *(v4) = 4084;\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        *(v8) = *(v8) - v6;\n
        v2 = v4 + 8;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v2 + 4)) & 1))\n
                v0 = *(v2) < v6 + 8;\n
            if (!(v0 & 1))\n
                break;\n
            v2 = v2 + 8 + *(v2);\n
        }\n
        *(v2) = v6;\n
        *((v2 + 4)) = 1;\n
        v5 = v2 + 8;\n
        return v5;\n
    }\n
}\n
", "4207409:sub_403331": null, "4207424:cgc_free": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_1 *v1;  // [bp-0x8]\n
    struct_0 *v3;  // eax\n
\n
    v1 = v2 - 8;\n
    v1->field_4 = 2;\n
    v0 = &v2 & -0x1000;\n
    v3 = v0;\n
    *(&v3) = v1->field_0 + *(&v3);\n
    return v0;\n
}\n
", "4207477:sub_403375": null, "4207488:cgc_FindCode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindCode(char *v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= 91)\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v0 + 56 + (v1 << 4) + 1, v3))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4207620:sub_403404": null, "4207632:cgc_InitLang": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitLang(unsigned int v3[4], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1;  // [bp-0x13]\n
    unsigned int v2[4];  // [bp-0xc]\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
        return v3;\n
    cgc_bzero(&v1, 7);\n
    cgc_strncat(&v1, a0, 7);\n
    cgc_strncat(&v1, v0 - 4258, 7);\n
    v4 = cgc_FindCode(&v1);\n
    v2[0] = v4;\n
    if (v4 == -1)\n
        return v4;\n
    v5 = v0;\n
    v3[2] = v5 + 56 + v2 * 16;\n
    cgc_InitLang(v5 + 56 + v2 * 16, &v1);\n
    cgc_bzero(&v1, 7);\n
    cgc_strncat(&v1, a0, 7);\n
    cgc_strncat(&v1, v0 - 4256, 7);\n
    v4 = cgc_FindCode(&v1);\n
    v2[0] = v4;\n
    if (v4 != -1)\n
    {\n
        v6 = v0;\n
        v3[3] = v6 + 56 + v2 * 16;\n
        v4 = cgc_InitLang(v6 + 56 + v2 * 16, &v1);\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4208013:sub_40358d": null, "4208016:cgc_ParseCode": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[7];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 cgc_lh;\n
\n
int cgc_ParseCode(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v6;  // ecx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // edx\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = &cgc_lh.field_0; *((v5 + v4)); v4 += 1)\n
    {\n
        if (v3 > 1023)\n
        {\n
            cgc_puts(v1 - 4236);\n
            cgc__terminate();\n
        }\n
        v0 = v4[v5];\n
        if (v0 != 10)\n
        {\n
            if (v0 == 32)\n
            {\n
                if (v2 == v1 + 1672)\n
                {\n
                    v6 = v3;\n
                    v3 = v6 + 1;\n
                    v6[a0] = 32;\n
                }\n
                else if (!v2)\n
                {\n
                    cgc_puts(v1 - 4218);\n
                    cgc__terminate();\n
                }\n
                else\n
                {\n
                    v7 = v3;\n
                    v3 = v7 + 1;\n
                    *((a0 + v7)) = *(v2);\n
                    v2 = v1 + 1672;\n
                    v8 = v3;\n
                    v3 = v8 + 1;\n
                    *((a0 + v8)) = 32;\n
                }\n
            }\n
            else\n
            {\n
                if (v0 == 45)\n
                {\n
                    if (v2)\n
                    {\n
                        v2 = *((v2 + 12));\n
                    }\n
                    else\n
                    {\n
                        cgc_puts(v1 - 4218);\n
                        cgc__terminate();\n
                    }\n
                }\n
                else\n
                {\n
                    if (v0 == 46)\n
                    {\n
                        if (!v2)\n
                        {\n
                            cgc_puts(v1 - 4218);\n
                            cgc__terminate();\n
                        }\n
                        else\n
                        {\n
                            v2 = *((v2 + 8));\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v0 != 124)\n
                        {\n
                            cgc_puts(v1 - 4199);\n
                            cgc__terminate();\n
                        }\n
                        else if (!v2)\n
                        {\n
                            cgc_puts(v1 - 4218);\n
                            cgc__terminate();\n
                        }\n
                        else\n
                        {\n
                            v9 = v3;\n
                            v3 = v9 + 1;\n
                            *((a0 + v9)) = *(v2);\n
                            v2 = v1 + 1672;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (v2)\n
    {\n
        v10 = v3;\n
        v3 = v10 + 1;\n
        *((a0 + v10)) = *(v2);\n
        v11 = v1 + 1672;\n
        v2 = v11;\n
        return v1 + 1672;\n
    }\n
    cgc_puts(v1 - 4218);\n
    v11 = cgc__terminate();\n
    return v11;\n
}\n
", "4208724:sub_403854": null, "4208736:cgc_recv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int *a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 < a1)\n
        {\n
            v0 = &v3;\n
            v2 = cgc_receive(v6, a0 + v4, 1);\n
            if (v2)\n
            {\n
                v5 = v2;\n
                return v5;\n
            }\n
            if (*(&v3) != 1)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            *(a2) = v4;\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4208912:cgc_ReadWav": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReadWav(unsigned int v5[3])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1[3];  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_recv(0, v5, 12, &v3))\n
    {\n
        cgc_puts(v0 - 4183);\n
        cgc__terminate();\n
    }\n
    v1[0] = v5;\n
    if (v1[0] != 541934416)\n
    {\n
        cgc_puts(v0 - 4171);\n
        cgc__terminate();\n
    }\n
    if (v1[2] > 524282)\n
    {\n
        cgc_puts(v0 - 4151);\n
        cgc__terminate();\n
    }\n
    if (!v1[2])\n
    {\n
        cgc_puts(v0 - 4171);\n
        cgc__terminate();\n
    }\n
    if ((0 CONCAT v1[1] << 3) /m v1[2] != 16)\n
    {\n
        cgc_puts(v0 - 4151);\n
        cgc__terminate();\n
    }\n
    for (v2 = 0; v2 != v1[1]; v2 = v3 + v2)\n
    {\n
        if (cgc_receive(0, v5 + 1 + v2, v1[1] - v2))\n
        {\n
            cgc_puts(v0 - 4183);\n
            cgc__terminate();\n
        }\n
        if (!v3)\n
        {\n
            cgc_puts(v0 - 4183);\n
            cgc__terminate();\n
        }\n
    }\n
    v7 = v4;\n
    return v5;\n
}\n
", "4209396:sub_403af4": null, "4209408:cgc_AssignToBucket": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_AssignToBucket(unsigned int v11)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    void* v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    void* v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    void* v6;  // [bp-0x20]\n
    unsigned int v7;  // [bp-0x1c]\n
    void* v8;  // [bp-0x18]\n
    unsigned short *v9;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned short *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // ftop\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    struct_0 *v30;  // eax\n
    unsigned int v31;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 1;\n
    while (true)\n
    {\n
        if (v9 < 4)\n
        {\n
            if (*((v0 + 1688 + (v9 << 4))))\n
            {\n
                v7 = *((v0 + v9 * 16 + 1692));\n
                v8 = 0;\n
                v13 = v21 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v14 = v13 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v14 = v13 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v5 = v11;\n
                v6 = 0;\n
                v15 = v14 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v16 = v15 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v16 = v15 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                v17 = v16 - 1;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    v18 = v17 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    v18 = v17 - 1;\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t2,1] = t3\n
                [D] PutI(136:I8x8)[t2,1] = 0x01\n
                [D] PutI(136:I8x8)[t2,0] = 0x00\n
                v19 = v18 + 1;\n
                [D] PutI(72:F64x8)[t25,0] = t29\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                [D] PutI(72:F64x8)[t25,1] = t22\n
                [D] PutI(136:I8x8)[t25,1] = 0x01\n
                [D] PutI(136:I8x8)[t45,0] = 0x00\n
                [D] PutI(72:F64x8)[t59,0] = t60\n
                [D] PutI(136:I8x8)[t59,0] = 0x01\n
                [D] PutI(136:I8x8)[t59,0] = 0x00\n
                v21 = v19 + 1 + 1;\n
                if (((CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                {\n
                    v3 = *((v0 + v9 * 16 + 1692));\n
                    v4 = 0;\n
                    v22 = v21 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v22 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v22 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = v11;\n
                    v2 = 0;\n
                    v24 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v25 = v24 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v25 = v24 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v26 = v25 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v26 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v26 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t0,1] = t1\n
                    [D] PutI(136:I8x8)[t0,1] = 0x01\n
                    [D] PutI(136:I8x8)[t0,0] = 0x00\n
                    v28 = v27 + 1;\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    v21 = v28 + 1 + 1;\n
                    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) != 1)\n
                    {\n
                        v30 = v0 + 1688 + v9 * 16;\n
                        v30->field_8 = v30->field_8 + 1;\n
                        v10 = v9;\n
                        return v10;\n
                    }\n
                }\n
            }\n
            v9 += 1;\n
        }\n
        else\n
        {\n
            v9 = 1;\n
            while (true)\n
            {\n
                if (v9 >= 4)\n
                {\n
                    cgc_puts(v0 - 4131);\n
                    cgc__terminate();\n
                    return v10;\n
                }\n
                if (!*((v0 + 1688 + (v9 << 4))))\n
                {\n
                    v31 = v0;\n
                    *((v31 + 1688 + v9 * 16)) = 1;\n
                    *((v31 + 1688 + v9 * 16 + 4)) = v11;\n
                    *((v31 + 1688 + v9 * 16 + 8)) = 1;\n
                    v10 = v9;\n
                    return v10;\n
                }\n
                v9 += 1;\n
            }\n
        }\n
    }\n
}\n
", "4209858:sub_403cc2": null, "4209872:cgc_CheckLimits": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CheckLimits(unsigned int v17, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    void* v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    void* v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    void* v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    void* v8;  // [bp-0x30]\n
    unsigned int v9;  // [bp-0x2c]\n
    void* v10;  // [bp-0x28]\n
    unsigned int v11;  // [bp-0x24]\n
    void* v12;  // [bp-0x20]\n
    unsigned int v13;  // [bp-0x1c]\n
    void* v14;  // [bp-0x18]\n
    unsigned int v15;  // [bp-0x14]\n
    void* v16;  // [bp-0x10]\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = *(&(&_GLOBAL_OFFSET_TABLE_)[1692 + 16 * a0]);\n
    v14 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v15 = *(&(&_GLOBAL_OFFSET_TABLE_)[1692 + 16 * v17]) * 3;\n
    v16 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t0,1] = t1\n
    [D] PutI(136:I8x8)[t0,1] = 0x01\n
    [D] PutI(136:I8x8)[t0,0] = 0x00\n
    [D] PutI(136:I8x8)[t25,0] = 0x00\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v18 = v0;\n
        v9 = *((v18 + a0 * 16 + 1692));\n
        v10 = 0;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v11 = *((v18 + v17 * 16 + 1692)) * 3;\n
        v12 = 0;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t2,1] = t3\n
        [D] PutI(136:I8x8)[t2,1] = 0x01\n
        [D] PutI(136:I8x8)[t2,0] = 0x00\n
        [D] PutI(72:F64x8)[t25,0] = t29\n
        [D] PutI(136:I8x8)[t25,0] = 0x01\n
        [D] PutI(72:F64x8)[t25,1] = t22\n
        [D] PutI(136:I8x8)[t25,1] = 0x01\n
        [D] PutI(136:I8x8)[t45,0] = 0x00\n
        [D] PutI(72:F64x8)[t59,0] = t60\n
        [D] PutI(136:I8x8)[t59,0] = 0x01\n
        [D] PutI(136:I8x8)[t59,0] = 0x00\n
        if (((CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69) >> 6) & 1) == 1)\n
            goto LABEL_403db0;\n
    }\n
    cgc_puts(v0 - 4107);\n
    v18 = cgc__terminate();\n
LABEL_403db0:\n
    if (!a1)\n
        return v18;\n
    v19 = v0;\n
    v5 = *((v19 + a1 * 16 + 1692));\n
    v6 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    v7 = *((v19 + v17 * 16 + 1692)) * 7;\n
    v8 = 0;\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t0,1] = t1\n
    [D] PutI(136:I8x8)[t0,1] = 0x01\n
    [D] PutI(136:I8x8)[t0,0] = 0x00\n
    [D] PutI(136:I8x8)[t25,0] = 0x00\n
    [D] PutI(72:F64x8)[t39,0] = t40\n
    [D] PutI(136:I8x8)[t39,0] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v18 = v0;\n
        v1 = *((v18 + a1 * 16 + 1692));\n
        v2 = 0;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v3 = *((v18 + v17 * 16 + 1692)) * 7;\n
        v4 = 0;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t2,1] = t3\n
        [D] PutI(136:I8x8)[t2,1] = 0x01\n
        [D] PutI(136:I8x8)[t2,0] = 0x00\n
        [D] PutI(72:F64x8)[t25,0] = t29\n
        [D] PutI(136:I8x8)[t25,0] = 0x01\n
        [D] PutI(72:F64x8)[t25,1] = t22\n
        [D] PutI(136:I8x8)[t25,1] = 0x01\n
        [D] PutI(136:I8x8)[t45,0] = 0x00\n
        [D] PutI(72:F64x8)[t59,0] = t60\n
        [D] PutI(136:I8x8)[t59,0] = 0x01\n
        [D] PutI(136:I8x8)[t59,0] = 0x00\n
        if (((CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t45,0] ? [D] GetI(72:F64x8)[t45,0] : nan), ([D] GetI(136:I8x8)[t45,1] ? [D] GetI(72:F64x8)[t45,1] : nan)) & 69) >> 6) & 1) == 1)\n
            goto LABEL_403e86;\n
    }\n
    cgc_puts(v0 - 4107);\n
    v18 = cgc__terminate();\n
LABEL_403e86:\n
    return v18;\n
}\n
", "4210321:sub_403e91": null, "4210336:cgc_ValidateBuckets": "typedef struct struct_0 {\n
    char padding_0[1704];\n
    unsigned short field_6a8;\n
    char padding_6aa[2];\n
    unsigned int field_6ac;\n
    char padding_6b0[8];\n
    unsigned short field_6b8;\n
    char padding_6ba[2];\n
    unsigned int field_6bc;\n
    char padding_6c0[8];\n
    unsigned short field_6c8;\n
    char padding_6ca[2];\n
    unsigned int field_6cc;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned short g_4067cc;\n
\n
int cgc_ValidateBuckets()\n
{\n
    struct_0 *v0;  // [bp-0x18]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // ecx\n
    struct_0 *v7;  // ecx\n
    struct_0 *v8;  // ecx\n
    struct_0 *v9;  // ecx\n
    struct_0 *v10;  // ecx\n
    struct_0 *v11;  // ecx\n
    struct_0 *v12;  // ecx\n
    struct_0 *v13;  // ecx\n
    struct_0 *v14;  // ecx\n
    struct_0 *v15;  // ebx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (g_4067cc && v0->field_6b8 && v0->field_6c8)\n
    {\n
        v5 = v0;\n
        if (v5->field_6ac > v5->field_6bc)\n
        {\n
            v6 = v0;\n
            if (v6->field_6ac > v6->field_6cc)\n
            {\n
                v7 = v0;\n
                v1 = 1;\n
                if (v7->field_6bc > v7->field_6cc)\n
                {\n
                    v2 = 2;\n
                    v3 = 3;\n
                }\n
                else\n
                {\n
                    v2 = 3;\n
                    v3 = 2;\n
                }\n
                goto LABEL_404045;\n
            }\n
        }\n
        v8 = v0;\n
        if (v8->field_6bc > v8->field_6ac)\n
        {\n
            v10 = v0;\n
            if (v10->field_6bc > v10->field_6cc)\n
            {\n
                v11 = v0;\n
                v1 = 2;\n
                if (v11->field_6ac > v11->field_6cc)\n
                {\n
                    v2 = 1;\n
                    v3 = 3;\n
                }\n
                else\n
                {\n
                    v2 = 3;\n
                    v3 = 1;\n
                }\n
                goto LABEL_404045;\n
            }\n
        }\n
        v12 = v0;\n
        if (v12->field_6cc > v12->field_6ac)\n
        {\n
            v13 = v0;\n
            if (v13->field_6cc > v13->field_6bc)\n
            {\n
                v14 = v0;\n
                v1 = 3;\n
                if (v14->field_6ac > v14->field_6bc)\n
                {\n
                    v2 = 1;\n
                    v3 = 2;\n
                }\n
                else\n
                {\n
                    v2 = 2;\n
                    v3 = 1;\n
                }\n
            }\n
        }\n
LABEL_404045:\n
        goto LABEL_4040e1;\n
    }\n
    if (v0->field_6a8 && v0->field_6b8)\n
    {\n
        v9 = v0;\n
        v1 = 0;\n
        if (v9->field_6ac > v9->field_6bc)\n
        {\n
            v2 = 1;\n
            v3 = 2;\n
        }\n
        else\n
        {\n
            v2 = 2;\n
            v3 = 1;\n
        }\n
        goto LABEL_4040dc;\n
    }\n
    cgc_puts(&v0[2].padding_0[584]);\n
    cgc__terminate();\n
LABEL_4040dc:\n
LABEL_4040e1:\n
    v15 = v0;\n
    v15->padding_0[1700 + 16 * v1] = 32;\n
    v15->padding_0[1701 + 16 * v1] = 32;\n
    v15->padding_0[1700 + 16 * v2] = 45;\n
    v15->padding_0[1701 + 16 * v2] = 124;\n
    v15->padding_0[1700 + 16 * v3] = 46;\n
    v15->padding_0[1701 + 16 * v3] = 0;\n
    return cgc_CheckLimits(v3, v2, v1);\n
}\n
", "4211055:sub_40416f": null, "4211056:cgc_ParseWav": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned short _GLOBAL_OFFSET_TABLE_[869];\n
\n
int cgc_ParseWav(struct_0 *v19)\n
{\n
    char v0;  // [bp-0xc41]\n
    int tmp_6;  // tmp #6\n
    int tmp_9;  // tmp #9\n
    unsigned short v1[869];  // [bp-0xc40]\n
    void* v2;  // [bp-0xc3c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc38]\n
    unsigned int v4;  // [bp-0xc34]\n
    char v5;  // [bp-0xc30]\n
    char v6;  // [bp-0x830]\n
    unsigned int v7;  // [bp-0x430]\n
    struct_1 *v8;  // [bp-0x42c], Other Possible Types: unsigned int\n
    char v9;  // [bp-0x426]\n
    unsigned short v10;  // [bp-0x26]\n
    void* v11;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_0 *v13;  // [bp-0x1c]\n
    void* v14;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x14]\n
    unsigned int v16;  // [bp-0x10]\n
    unsigned short *v17;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v18;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned short v21[869];  // eax\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // ebx\n
\n
    v18 = v20;\n
    *(&v1[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    v8 = 0;\n
    v2 = 1;\n
    cgc_bzero(&v9, 0x400);\n
    cgc_bzero(&v6, 0x400);\n
    v21 = v1;\n
    v8 = 0;\n
    v21[852] = 0;\n
    v21[860] = 0;\n
    v21[868] = 0;\n
    v13 = v19;\n
    v16 = &v19[1].field_4 + v13->field_4;\n
    v17 = &v19[1].field_4;\n
    v15 = 12;\n
    v14 = 0;\n
    v12 = 1;\n
    v11 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v17 < v16)\n
            v0 = v8 < 1022;\n
        if (!(v0 & 1))\n
            break;\n
        v10 = *(v17);\n
        if (v10 > 65526 && v10 < 10)\n
        {\n
            if (v12 && !v2)\n
                goto LABEL_404377;\n
            v11 += 1;\n
            if (v11 < 50)\n
            {\n
                v17 = v17 + 1;\n
                continue;\n
            }\n
            else if (!v2)\n
            {\n
                v12 = 1;\n
                v11 = 0;\n
                v14 = v17 - v19;\n
                v7 = v14 - 100 - v15 >> 1;\n
                v15 = v14 - 100;\n
                tmp_6 = cgc_AssignToBucket(v7);\n
                v22 = v8;\n
                v8 = v22 + 1;\n
                (&v9)[v22] = tmp_6;\n
                goto LABEL_40447a;\n
            }\n
            else\n
            {\n
                v12 = 1;\n
                v11 = 0;\n
                v2 = 0;\n
                v17 = &v19[1].field_4;\n
                v15 = 12;\n
                v14 = 0;\n
                continue;\n
            }\n
        }\n
LABEL_404377:\n
        if (v10 >= 65526 && v10 <= 10)\n
            goto LABEL_404473;\n
        if (v12)\n
        {\n
LABEL_4043a8:\n
            v11 += 1;\n
            if (v11 < 50)\n
            {\n
                v17 = v17 + 1;\n
            }\n
            else if (!v2)\n
            {\n
                v12 = 0;\n
                v11 = 0;\n
                v14 = v17 - v19;\n
                v7 = v14 - 100 - v15 >> 1;\n
                v15 = v14 - 100;\n
                tmp_9 = cgc_AssignToBucket(v7) * 255;\n
                v23 = v8;\n
                v8 = v23 + 1;\n
                (&v9)[v23] = tmp_9;\n
                goto LABEL_40447a;\n
            }\n
            else\n
            {\n
                v12 = 0;\n
                v11 = 0;\n
                v2 = 0;\n
                v17 = &v19[1].field_4;\n
                v15 = 12;\n
                v14 = 0;\n
            }\n
        }\n
        else\n
        {\n
            if (!(!v2))\n
                goto LABEL_4043a8;\n
LABEL_404473:\n
            v11 = 0;\n
LABEL_40447a:\n
            v17 = v17 + 1;\n
        }\n
    }\n
    v14 = v17 - v19;\n
    v24 = v14 - v15;\n
    v7 = (v24 >> 31 CONCAT v24) /m 2;\n
    if (!v12)\n
    {\n
        tmp_6 = cgc_AssignToBucket(v7);\n
        v25 = v8;\n
        v8 = v25 + 1;\n
        (&v9)[v25] = tmp_6;\n
    }\n
    cgc_ValidateBuckets();\n
    v8 = 0;\n
    for (v4 = 0; v4 < 1023; v4 += 1)\n
    {\n
        if ((&v9)[v4])\n
        {\n
            if ((&v9)[v4] >= 0)\n
            {\n
                v3 = (&v9)[v4];\n
                if (v1[850 + 8 * v3])\n
                {\n
                    v27 = v8;\n
                    v8 = v27 + 1;\n
                    (&v6)[v27] = v1[850 + 8 * v3];\n
                }\n
            }\n
            else\n
            {\n
                v3 = (&v9)[v4] * -1;\n
                if (*(&v1[850 + 8 * v3] + 1))\n
                {\n
                    v26 = v8;\n
                    v8 = v26 + 1;\n
                    (&v6)[v26] = *(&v1[850 + 8 * v3] + 1);\n
                }\n
            }\n
        }\n
    }\n
    v28 = v8;\n
    v8 = v28 + 1;\n
    (&v6)[v28] = 10;\n
    cgc_ParseCode(&v6, &v5);\n
    cgc_puts(&v5);\n
    v29 = v18;\n
    return cgc_puts(&v1[2 + 372]);\n
}\n
", "4212393:sub_4046a9": null, "4212400:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x100010]\n
    char v1;  // [bp-0x10000c]\n
    void* v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    cgc_bzero(&v1, 0x100000);\n
    cgc_InitLang(v0 + 1672, NULL);\n
    cgc_ReadWav(&v1);\n
    cgc_ParseWav(&v1);\n
    v6 = v3;\n
    return 0;\n
}\n
", "4212544:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_deallocate": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}