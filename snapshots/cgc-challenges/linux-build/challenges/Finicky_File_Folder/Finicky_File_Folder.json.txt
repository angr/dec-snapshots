{"4202496:_init": "extern struct_0 *g_40adbc;\n
\n
int _init()\n
{\n
    if (g_40adbc)\n
    {\n
        g_40adbc();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4202576:__cxa_atexit": "// attributes: PLT stub\n
int __cxa_atexit()\n
{\n
    ::libc.so.0::__cxa_atexit();\n
    return;\n
}\n
", "4202592:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202672:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_GLOBAL__sub_I_service.cc": "extern unsigned int _ZL6BCache;\n
extern char __dso_handle;\n
extern unsigned int cgc_Root;\n
extern void* g_40ba58;\n
extern unsigned int g_40ba5c;\n
extern void* g_40ba60;\n
\n
int _GLOBAL__sub_I_service.cc()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
\n
    operator new(132);\n
    BufferCache::__base_ctor__();\n
    _ZL6BCache = v2;\n
    cgc_Root = 0x400;\n
    g_40ba58 = 0;\n
    g_40ba5c = operator new[](0x1000);\n
    g_40ba60 = 0;\n
    v0 = &__dso_handle;\n
    return __cxa_atexit(DirTree::__base_dtor__, &cgc_Root);\n
}\n
", "4202869:sub_402175": null, "4202880:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202923:sub_4021ab": null, "4202924:sub_4021ac": "int sub_4021ac()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202928:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202932:sub_4021b4": null, "4202944:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 35839;\n
    v6 = v5 + 801;\n
    v7 = v5 + 801;\n
    if (v7 == v6)\n
        return v5 + 801;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202995:sub_4021f3": "int sub_4021f3()\n
{\n
}\n
", "4203001:sub_4021f9": "int sub_4021f9()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4203008:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 35775;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 801;\n
    v9 = (v6 + 801 - (v6 + 801) >> 31) + (801 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4203079:sub_402247": "int sub_402247()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4203088:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40adb0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40adb0)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203163:sub_40229b": "int sub_40229b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203168:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203177:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203181:sub_4022ad": null, "4203184:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203274:sub_40230a": null, "4203280:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 1;\n
}\n
", "4203309:sub_40232d": null, "4203312:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 2;\n
}\n
", "4203341:sub_40234d": null, "4203344:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 16;\n
}\n
", "4203373:sub_40236d": null, "4203376:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 14;\n
}\n
", "4203405:sub_40238d": null, "4203408:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 12;\n
}\n
", "4203437:sub_4023ad": null, "4203440:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 4;\n
}\n
", "4203469:sub_4023cd": null, "4203472:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 8;\n
}\n
", "4203501:sub_4023ed": null, "4203504:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 64;\n
}\n
", "4203533:sub_40240d": null, "4203536:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 32;\n
}\n
", "4203565:sub_40242d": null, "4203568:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(char v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[11708 + v0] & 4294967168;\n
}\n
", "4203597:sub_40244d": null, "4203600:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(char v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[11708 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[11708 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[11708 + v1] & 2) >> 1);\n
}\n
", "4203659:sub_40248b": null, "4203664:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[11708 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203698:sub_4024b2": null, "4203712:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[11708 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[11708 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203774:sub_4024fe": null, "4203776:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(char v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[11708 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203810:sub_402522": null, "4203824:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = 1;\n
    cgc__terminate();\n
    cgc_exit();\n
    return;\n
}\n
", "4203856:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203888:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_4026ad;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_4026ad:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4204227:sub_4026c3": null, "4204240:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204592:cgc_fopen": "int cgc_fopen(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2[6];  // eax, Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v2 = cgc_malloc();\n
    if (v2)\n
    {\n
        v2[0] = v1;\n
        v2[1] = 2 - (a0 < 1);\n
        v2[2] = 0;\n
        v2[3] = 0;\n
        v2[5] = 0;\n
        v2[4] = 0;\n
        return v2;\n
    }\n
    return 0;\n
}\n
", "4204685:sub_40288d": null, "4204688:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_1 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_1 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_1 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_402ae1;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_402ae1:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4205039:sub_4029ef": null, "4205291:sub_402aeb": null, "4205296:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_402b48;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402b60;\n
LABEL_402b48:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402b60;\n
    }\n
LABEL_402b60:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205433:sub_402b79": null, "4205440:cgc__getc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    struct struct_0 **v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    struct struct_0 **v10;  // ecx\n
    unsigned int v11;  // edx\n
    void* v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // ebp\n
    char *v14;  // edi\n
    unsigned int v15;  // ebx\n
    struct struct_0 **v16;  // eax, Other Possible Types: unsigned int\n
\n
    v7 = v6;\n
    v8 = v6->field_8;\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(v6->field_0, &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = v6->field_14;\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *(v9 + v16);\n
    }\n
    else if (v8 != v6->field_c)\n
    {\n
LABEL_402c79:\n
        v7->field_8 = v8 + 1;\n
        v16 = *(24 + &v7->field_0 + v8);\n
        return v16;\n
    }\n
    else\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        if (cgc_receive(v6->field_0, v6 + 1, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            v6->field_c = v13;\n
            v10 = v6->field_14;\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *(24 + &v7->field_0 + v12) = *(v10 + *(24 + &v7->field_0 + v12));\n
                        *(25 + &v7->field_0 + v12) = *(v10 + *(25 + &v7->field_0 + v12));\n
                        *(26 + &v7->field_0 + v12) = *(v10 + *(26 + &v7->field_0 + v12));\n
                        *(27 + &v7->field_0 + v12) = *(v10 + *(27 + &v7->field_0 + v12));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = 24 + v12 + v7;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        v14[v15] = *(v10 + v14[v15]);\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = v7->field_8;\n
                goto LABEL_402c79;\n
            }\n
        }\n
    }\n
}\n
", "4205777:sub_402cd1": null, "4205792:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205832:sub_402d08": null, "4205840:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_0 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402d7e:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402d7e;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206430:sub_402f5e": null, "4206432:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206800:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206840:sub_4030f8": null, "4206848:cgc_malloc_alloc": "typedef struct struct_5 {\n
    unsigned int field_0;\n
    struct struct_5 *field_4;\n
    struct struct_4 *field_8;\n
    struct struct_2 *field_c;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[516];\n
    unsigned int field_208;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
} struct_6;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_2 *field_c;\n
} struct_3;\n
\n
int cgc_malloc_alloc(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_6;  // tmp #6\n
    struct_6 *v1;  // [bp-0x20]\n
    struct_5 *v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_3 *v5;  // [bp-0x10]\n
    struct_3 *v6;  // [bp-0xc]\n
    struct_3 *v7;  // [bp-0x8]\n
    struct_5 *v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v12;  // ebp\n
    struct_5 *v13;  // esi\n
    struct_5 *v14;  // edx\n
    unsigned int v15;  // ebp\n
    void* v16;  // eax, Other Possible Types: unsigned int, struct_0 *, struct_6 *\n
    unsigned int v17[2];  // edi\n
    struct_1 *v18;  // esi, Other Possible Types: unsigned int\n
    unsigned int v19;  // ebp\n
    struct_6 *v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    struct_1 *v23;  // edx\n
    unsigned int v24;  // ecx\n
    struct_6 *v25;  // esi\n
    unsigned int v26;  // ecx\n
    struct_2 *v27;  // ecx\n
    struct_5 *v28;  // ecx\n
    struct_4 *v30;  // edx\n
    struct_3 *v31;  // ecx, Other Possible Types: unsigned int\n
    struct_5 *v32;  // ebp\n
    struct_2 *v33;  // edi\n
    unsigned int v34;  // ecx\n
    unsigned int v37;  // ebp\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // esi\n
    struct_1 *v40;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v41;  // esi, Other Possible Types: unsigned int\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edi\n
    struct_2 *v44;  // edx\n
    unsigned int v45;  // eax\n
\n
    v11 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_403404:\n
        return v11;\n
    }\n
    v12 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v45 = cgc_tiny_alloc();\n
        return v45;\n
    }\n
    if (v12 <= 15)\n
    {\n
        v45 = cgc_tiny_alloc();\n
        return v45;\n
    }\n
    if (v12 > 131071)\n
    {\n
        v15 = v12 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v11 = 0;\n
        if (!cgc_allocate(v15, 0))\n
        {\n
            v17 = *(&v4);\n
            v17[0] = v10;\n
            v17[1] = v15;\n
            v11 = v17 + 1;\n
            goto LABEL_403404;\n
        }\n
    }\n
    v13 = v12 + 23;\n
    v14 = v13 & -0x10;\n
    v2 = v14;\n
    if (!(v13 & -0x10))\n
    {\n
        v18 = -1;\n
    }\n
    else if (v14 < 513)\n
    {\n
        v18 = (v13 >> 4) + 2;\n
        v16 = 0;\n
        if (v12 > 2040)\n
        {\n
            if (!(v18 == 131))\n
                goto LABEL_403279;\n
            goto LABEL_403197;\n
        }\n
    }\n
    else if (v14 <= 0x1200)\n
    {\n
        v18 = (v14 + 32 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v18 = 130;\n
        if (v14 <= 0x20000)\n
            v18 = (v14 + 288 >> 11) + 66;\n
    }\n
    do\n
    {\n
        v16 = *((v10 + v18 * 4));\n
        if (v16)\n
        {\n
            while (*((v16 + 4)) < v14)\n
            {\n
                v16 = *((v16 + 12));\n
                if (!v16)\n
                    goto LABEL_403371;\n
            }\n
        }\n
LABEL_403371:\n
        v18 += 1;\n
    } while (v18 != 131);\n
LABEL_403197:\n
    v0 = &v3;\n
    if (!(!cgc_allocate(0x200000, 0)))\n
        goto LABEL_403404;\n
    v19 = *(&v3);\n
    v1 = *(&v3) + 1048575;\n
    v20 = v1 & -0x100000;\n
    if (v20 > *(&v3))\n
        cgc_deallocate(v19);\n
    v21 = v20 + 0x10000;\n
    v22 = v19 + 0x200000;\n
    tmp_6 = v22;\n
    v12 = v22 - v21;\n
    if (tmp_6 > v21)\n
        cgc_deallocate(v21);\n
    v23 = v10;\n
    *(524 + &v23->field_0 + (v1 >> 20)) = 2;\n
    if (!v20)\n
        goto LABEL_403404;\n
    v16 = v20 | 16;\n
    v16->field_0 = 0;\n
    v24 = v20 - v16 + 1048560;\n
    v16->field_4 = v24;\n
    v25 = v20 | 1048560;\n
    v25->field_0 = v24;\n
    v25->field_4 = 0;\n
    v26 = v16->field_4;\n
    if (!(!(v26 & 1)))\n
        goto LABEL_40342e;\n
    v16->field_4 = v26 | 1;\n
    v16->field_8 = 0;\n
    v16->field_c = v23->field_208;\n
    v23->field_208 = v16;\n
    v27 = v16->field_c;\n
    if (v27)\n
    {\n
        v27->field_8 = v16;\n
        v16 = v23->field_208;\n
    }\n
    v18 = 130;\n
LABEL_403279:\n
    v28 = *((v16 + 4));\n
    if (!(v28 & 1))\n
    {\n
        v31 = \"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\";\n
        goto LABEL_403417;\n
    }\n
    else\n
    {\n
        *((v16 + 4)) = v12;\n
        v30 = *((v16 + 8));\n
        if (v30)\n
            v30->field_c = *((v16 + 12));\n
        v12 = v28 & -2;\n
        v33 = *((v16 + 12));\n
        if (v33)\n
            v33->field_8 = v30;\n
        v34 = v10;\n
        if (*((v34 + (v18 << 2))) == v16)\n
            *((v34 + v18 * 4)) = v33;\n
        *((v16 + 8)) = 0;\n
        *((v16 + 12)) = 0;\n
        v37 = v2;\n
        v38 = v32 - v2;\n
        if (v38 < 33)\n
        {\n
LABEL_4033ff:\n
            v11 = v16 + 8;\n
            goto LABEL_403404;\n
        }\n
        else\n
        {\n
            v39 = v32;\n
            v31 = v16 + v37;\n
            *((v16 + 4)) = v37;\n
            *((v37 + v16)) = v37;\n
            *((v37 + v16 + 4)) = v38;\n
            *((v39 + v16)) = v38;\n
            if (v38 <= 0x200)\n
            {\n
                v40 = (v38 >> 4) + 2;\n
            }\n
            else if (v38 <= 0x1200)\n
            {\n
                v40 = (v38 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v41 = 130;\n
                if (!(v38 <= 0x20000))\n
                    goto LABEL_4033d3;\n
                v40 = (v38 - 0x1200 >> 11) + 66;\n
            }\n
            v41 = v40;\n
LABEL_4033d3:\n
            v42 = *((v31 + 4));\n
            if (!(v42 & 1))\n
            {\n
                *((v31 + 4)) = v42 | 1;\n
                *((v31 + 8)) = 0;\n
                v43 = v10;\n
                *((v31 + 12)) = *((v43 + v41 * 4));\n
                *((v43 + v41 * 4)) = v31;\n
                v44 = *((v31 + 12));\n
                if (v44)\n
                {\n
                    v44->field_8 = v31;\n
                    goto LABEL_4033ff;\n
                }\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
LABEL_40342e:\n
        v31 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
LABEL_403417:\n
        v8 = v16;\n
        v7 = v31;\n
        cgc_heap_error(*(&v9));\n
        v6 = v31;\n
        v5 = &\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        v16 = cgc_heap_error(*(&v9));\n
    }\n
}\n
", "4207673:sub_403439": null, "4207680:cgc_tiny_alloc": "int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (cgc_allocate(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4208111:sub_4035ef": null, "4208112:malloc_free": "int malloc_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v15;  // cl\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = v13;\n
    v38 = a0;\n
    if (!v38)\n
    {\n
LABEL_403911:\n
        return v38;\n
    }\n
    v23 = v10;\n
    v15 = *((v23 + (v38 >> 20) + 524));\n
    if (v15 != 2)\n
    {\n
        if (v15 == 1)\n
        {\n
            v24 = *((v38 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v17 = v24 / 4 - 1;\n
                goto LABEL_403776;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v17 = (v24 >> 4) + 2;\n
                goto LABEL_403776;\n
            }\n
        }\n
        if (!(!v15))\n
            goto LABEL_403911;\n
        if ((v38 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40395d;\n
        }\n
        else\n
        {\n
            v20 = *((v38 - 8));\n
            if (v20 != v23)\n
            {\n
                v22 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v23;\n
            }\n
            else\n
            {\n
                v20 = *((v38 - 4));\n
                if (v20 - 0x20000 <= 2147356671 && !(v20 & 4095))\n
                {\n
                    v38 = cgc_deallocate(v38 - 8);\n
                    goto LABEL_403911;\n
                }\n
                v22 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v20;\n
            v38 = cgc_heap_error(v22, v38);\n
        }\n
    }\n
    else if (!(v38 & 7))\n
    {\n
        v24 = v38 - 8;\n
        v16 = *((v24 + 4));\n
        if ((v16 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40395d;\n
        }\n
        else if (v16 - 131073 <= -131058)\n
        {\n
            v19 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_40395d;\n
        }\n
        else\n
        {\n
            v21 = *(v24);\n
            v12 = v24 - *(v24);\n
            if (!*(v24))\n
                v12 = v21;\n
            v23 = v16 + v24;\n
            v2 = v24;\n
            if (v12)\n
            {\n
                v4 = v23;\n
                v3 = *((v12 + 4));\n
                if (!((v3 & -2) == v21))\n
                    goto LABEL_403974;\n
                v23 = v4;\n
                v24 = v3;\n
                if (*(v23) == v16)\n
                {\n
                    if ((v24 & 1))\n
                    {\n
                        if (v21 <= 15)\n
                        {\n
                            v25 = v24 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v21 <= 0x200)\n
                            {\n
                                v25 = (v24 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v21 <= 0x1200)\n
                                {\n
                                    v25 = (v21 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v25 = 130;\n
                                    if (v21 <= 0x20000)\n
                                        v25 = (v21 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v12 + 4)) = v21;\n
                        v26 = *((v12 + 8));\n
                        if (v26)\n
                            *((v26 + 12)) = *((v12 + 12));\n
                        v27 = *((v12 + 12));\n
                        if (v27)\n
                            *((v27 + 8)) = v26;\n
                        if (*((v10 + (v25 << 2))) == v12)\n
                            *((v10 + v25 * 4)) = v27;\n
                        *((v12 + 8)) = 0;\n
                        *((v12 + 12)) = 0;\n
                        v28 = v21 + *((v2 + 4));\n
                        *((v12 + 4)) = v28;\n
                        *(v23) = v28;\n
                        v2 = v12;\n
                    }\n
LABEL_4037fc:\n
                    v29 = *((v23 + 4));\n
                    v30 = v10;\n
                    v12 = v2;\n
                    if ((v29 & 1))\n
                    {\n
                        v31 = v29 & -2;\n
                        if (v31 <= 15)\n
                        {\n
                            v32 = v29 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v31 <= 0x200)\n
                            {\n
                                v32 = (v29 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v31 <= 0x1200)\n
                                {\n
                                    v32 = (v31 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v32 = 130;\n
                                    if (v31 <= 0x20000)\n
                                        v32 = (v31 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v23 + 4)) = v31;\n
                        v33 = *((v23 + 8));\n
                        if (v33)\n
                            *((v33 + 12)) = *((v23 + 12));\n
                        v34 = *((v23 + 12));\n
                        if (*((v23 + 12)))\n
                            *((v34 + 8)) = v33;\n
                        v30 = v10;\n
                        if (*((v30 + (v32 << 2))) == v23)\n
                            *((v30 + v32 * 4)) = v34;\n
                        *((v23 + 8)) = 0;\n
                        *((v23 + 12)) = 0;\n
                        v12 = v2;\n
                        v35 = v31 + *((v12 + 4));\n
                        *((v12 + 4)) = v35;\n
                        *((v12 + v35)) = v35;\n
                    }\n
                    v36 = *((v12 + 4));\n
                    if (v36 <= 15)\n
                    {\n
                        v37 = v36 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v36 <= 0x200)\n
                        {\n
                            v37 = (v36 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v36 <= 0x1200)\n
                            {\n
                                v37 = (v36 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v37 = 130;\n
                                if (v36 <= 0x20000)\n
                                    v37 = (v36 - 0x1200 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(!(v36 & 1)))\n
                        goto LABEL_403964;\n
                    *((v12 + 4)) = v36 | 1;\n
                    *((v12 + 8)) = 0;\n
                    *((v12 + 12)) = *((v30 + v37 * 4));\n
                    *((v30 + v37 * 4)) = v12;\n
                    v38 = *((v12 + 12));\n
                    if (v38)\n
                    {\n
                        *((v38 + 8)) = v12;\n
                        goto LABEL_403911;\n
                    }\n
                }\n
            }\n
            else if (*((v24 + v16)) == v16)\n
            {\n
                goto LABEL_4037fc;\n
            }\n
            v0 = v38;\n
            v38 = cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v23);\n
            v17 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_403776:\n
            *(v38) = *((v23 + v17 * 4));\n
            *((v23 + v17 * 4)) = v38;\n
            goto LABEL_403911;\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40395d:\n
    v8 = v38;\n
    v7 = v19;\n
    cgc_heap_error(*(&v9));\n
LABEL_403964:\n
    v6 = v12;\n
    v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v38 = cgc_heap_error(*(&v9));\n
LABEL_403974:\n
    v7 = v38;\n
    v6 = v12;\n
    v5 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v10, a0);\n
    return cgc_malloc_size(v10, a0);\n
}\n
", "4209040:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4209089:sub_4039c1": null, "4209104:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_403aa5:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_403a9d:\n
        malloc_free(v1, a0);\n
        goto LABEL_403aa5;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_403a80;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_403a80:\n
        v3 = v4;\n
        goto LABEL_403aa5;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_403aa5;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_403a9d;\n
}\n
", "4209327:sub_403aaf": null, "4209328:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4209392:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) != a0)\n
        {\n
            v3 += 1;\n
            tmp_5 = v1;\n
            v1 -= 1;\n
            if (tmp_5 == 1)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v3;\n
        }\n
    }\n
}\n
", "4209446:sub_403b26": null, "4209456:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4209517:sub_403b6d": null, "4209520:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209650:sub_403bf2": null, "4209664:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209958:sub_403d26": null, "4209968:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4210078:sub_403d9e": null, "4210080:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4210193:sub_403e11": null, "4210208:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4210315:sub_403e8b": null, "4210320:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4210429:sub_403efd": null, "4210432:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4210535:sub_403f67": null, "4210544:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210592:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210635:sub_403fcb": null, "4210640:cgc__vsfprintf": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_1 *v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    char *v32;  // ebx\n
    struct struct_1 **v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    struct_1 *v78;  // eax\n
    struct_1 *v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210742:sub_404036": null, "4212240:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4212284:sub_40463c": null, "4212288:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2;  // al, Other Possible Types: unsigned int\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212406:sub_4046b6": null, "4212416:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212505:sub_404719": null, "4212512:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4212580:sub_404764": null, "4212592:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212660:sub_4047b4": null, "4212672:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212724:sub_4047f4": null, "4212736:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212816:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212848:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    char v4;  // al\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212976:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4213057:sub_404941": null, "4213072:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4213161:sub_4049a9": null, "4213168:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_404a11;\n
                goto LABEL_404a0f;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_404a11;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_404a0f:\n
    v4 = 0;\n
LABEL_404a11:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4213298:sub_404a32": null, "4213312:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4213400:sub_404a98": null, "4213408:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    char v11;  // al\n
    unsigned int v12;  // eax, Other Possible Types: char\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ecx\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    char v24[2];  // ebp, Other Possible Types: unsigned int\n
    void* v25;  // esi, Other Possible Types: unsigned int\n
    void* v26;  // edi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v24 = v10;\n
    if (v12)\n
    {\n
        v24 = v10;\n
        do\n
        {\n
            if (!*(v24))\n
            {\n
                v26 = 0;\n
                v23 = 1;\n
                v21 = 1;\n
                v25 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404c74;\n
            }\n
            v11 = *((v24 + 1));\n
            v24 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v24) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v24) == 43)\n
            v24 += 1;\n
        if (!v13)\n
            goto LABEL_404b68;\n
    }\n
    else\n
    {\n
        v24 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404b68:\n
            *(&v12) = *(v24);\n
            if (*(v24) != 48)\n
            {\n
LABEL_404ba3:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404c54;\n
LABEL_404bbb:\n
                *(&v12) = *(v24);\n
LABEL_404bbe:\n
                if (!v12)\n
                {\n
LABEL_404c54:\n
                    v26 = 0;\n
                    v21 = 1;\n
                    v25 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404c74;\n
LABEL_404c69:\n
                    tmp_2 = v21;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v24;\n
                    *(v22) = v27;\n
                    goto LABEL_404c74;\n
                }\n
LABEL_404bc6:\n
                v25 = 0;\n
                v26 = 0;\n
                v21 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v21;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v24);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                    }\n
                    else\n
                    {\n
                        v18 = *(v24);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v18 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v18))\n
                                goto LABEL_404c97;\n
                            v16 = *(v24) - 55;\n
                        }\n
                    }\n
                    v19 = v1;\n
                    if (v16 >= v19)\n
                    {\n
LABEL_404c97:\n
                        v22 = a0;\n
                        v23 = v0;\n
                        v21 = v2;\n
                        if (!v22)\n
                            goto LABEL_404c74;\n
                        goto LABEL_404c69;\n
                    }\n
                    v20 = v19 * v25;\n
                    tmp_5 = v20;\n
                    v25 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v26 = 1;\n
                    v12 = *((v24 + 1));\n
                    v24 += 1;\n
                    v21 = 0;\n
                } while (v12);\n
                goto LABEL_404c69;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v24 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v24 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404bc6;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v24);\n
                    goto LABEL_404ba3;\n
                }\n
                else\n
                {\n
                    v24 += 2;\n
                }\n
            }\n
LABEL_404b99:\n
            v13 = 16;\n
            goto LABEL_404bbb;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_404bbb;\n
    *(&v12) = *(v24);\n
    v13 = 16;\n
    if (!(*(v24) == 48))\n
        goto LABEL_404bbe;\n
    v24 += (cgc_tolower(*((v24 + 1))) == 120) * 2;\n
    goto LABEL_404b99;\n
LABEL_404c74:\n
    v28 = (!v26 ? 0x80000000 : -(v25));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v25);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213756:sub_404bfc": null, "4213929:sub_404ca9": null, "4213936:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    char v13;  // al\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax, Other Possible Types: char\n
    void* v16;  // edi\n
    void* v17;  // edi\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v27;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    char v32[2];  // ebp\n
    unsigned int v33;  // edi\n
    char v34[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v35;  // eax, Other Possible Types: unsigned int\n
    unsigned int v36;  // edx\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    char v38[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404da5;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) == 45)\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
    }\n
    else\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
    }\n
    v15 = a1;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v15 && v15 == 16)\n
    {\n
        *(&v15) = *(v34);\n
        if (*(v34) == 48)\n
        {\n
            v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
            v0 = 16;\n
            goto LABEL_404e0e;\n
        }\n
        else\n
        {\n
            v0 = 16;\n
            if (!(!v15))\n
                goto LABEL_404e15;\n
            goto LABEL_404da3;\n
        }\n
    }\n
    *(&v15) = *(v34);\n
    if (*(v34) == 48)\n
    {\n
        *(&v15) = *((v34 + 1));\n
        if ((v15 & 248) == 48)\n
        {\n
            v1 = v36;\n
            v34 += 1;\n
            v0 = 8;\n
            goto LABEL_404e19;\n
        }\n
        v15 = cgc_tolower(v15);\n
        if (v15 != 120)\n
        {\n
            *(&v15) = *(v34);\n
        }\n
        else\n
        {\n
            v34 += 2;\n
            v0 = 16;\n
            goto LABEL_404e0e;\n
        }\n
    }\n
    v1 = v36;\n
    v15 = cgc_isdigit(v15);\n
    v0 = 10;\n
    if (!v15)\n
    {\n
        v14 = 0;\n
        v37 = 1;\n
        v2 = 0;\n
        v16 = 0;\n
        v35 = a0;\n
        v36 = v1;\n
        if (!v35)\n
            goto LABEL_404f0f;\n
LABEL_404f04:\n
        tmp_2 = v37;\n
        v38 = v8;\n
        if (!tmp_2)\n
            v38 = v34;\n
        *(v35) = v38;\n
    }\n
    else\n
    {\n
        v36 = v1;\n
LABEL_404e0e:\n
        *(&v15) = *(v34);\n
        if (*(v34))\n
        {\n
LABEL_404e15:\n
            v1 = v36;\n
LABEL_404e19:\n
            v2 = 0;\n
            v18 = 0;\n
            v14 = 0;\n
            v37 = 1;\n
            do\n
            {\n
                *(&v3) = v37;\n
                v19 = cgc_isdigit(v15);\n
                v20 = *(v34);\n
                if (v19)\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v34);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else\n
                    {\n
                        if (!cgc_isupper(v23))\n
                            goto LABEL_404ed5;\n
                        v21 = *(v34) - 55;\n
                    }\n
                }\n
                v24 = v0;\n
                if (v21 >= v24)\n
                {\n
LABEL_404ed5:\n
                    v35 = a0;\n
                    v36 = v1;\n
                    v37 = v3;\n
                    if (!v35)\n
                        goto LABEL_404f0f;\n
                    goto LABEL_404f04;\n
                }\n
                *(&v3) = v34;\n
                v25 = v2;\n
                v27 = v14;\n
                tmp_67 = v25 * v24;\n
                v30 = tmp_67;\n
                v31 = v24 * v18 + v25 * (v24 >> 31) + (v25 * v24 >> 32);\n
                v32 = v3;\n
                v33 = v21 >> 31;\n
                v2 = v30 + v21;\n
                tmp_41 = v33;\n
                v18 = v33 + v31 + (v30 + v21 < v30);\n
                v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                v15 = v32[1];\n
                v34 = &v32[1];\n
                v37 = 0;\n
            } while (v15);\n
            goto LABEL_404f0f;\n
        }\n
LABEL_404da3:\n
        v14 = 0;\n
LABEL_404da5:\n
        v37 = 1;\n
        v2 = 0;\n
        v17 = 0;\n
        v35 = a0;\n
        if (!v35)\n
            goto LABEL_404f0f;\n
        goto LABEL_404f04;\n
    }\n
LABEL_404f0f:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214592:_ZN6Buffer8MarkFreeEv": "typedef struct struct_0 {\n
    char padding_0[4100];\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_0;\n
\n
int Buffer::MarkFree(struct_0 *v0)\n
{\n
    struct_0 *v1;  // eax\n
\n
    v1 = v0;\n
    v1->field_1008 = 1;\n
    v1->field_1004 = 0x1000;\n
    return v0;\n
}\n
", "4214614:sub_404f56": null, "4214624:_ZN6Buffer8MarkUsedEv": "typedef struct struct_4 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    char padding_1004[4];\n
    char field_1008;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    char padding_4[124];\n
    struct struct_2 *field_80;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_3 *_ZL6BCache;\n
\n
int Buffer::MarkUsed(struct_4 *v4)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    struct_3 *v3;  // [bp-0x14]\n
    struct_4 *v5;  // esi, Other Possible Types: unsigned int\n
    struct_2 *v6;  // edx\n
    unsigned int v7;  // ecx\n
    unsigned int *v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ebx\n
    char v11;  // bl\n
    unsigned int v12;  // eax\n
    unsigned int *v13;  // edi, Other Possible Types: unsigned int\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebp\n
    unsigned int v16;  // eax\n
    unsigned int *v17;  // edi\n
    void* v18;  // ebp\n
    unsigned int *v19;  // esi\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // esi\n
    unsigned int v22;  // esi\n
    struct_0 *v23;  // edi\n
    unsigned int *v24;  // ecx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // eax\n
\n
    v5 = v4;\n
    v5->field_1008 = 0;\n
    v3 = _ZL6BCache;\n
    v6 = _ZL6BCache->field_80;\n
    v7 = v6->field_4;\n
    if (v7)\n
    {\n
        v8 = v6->field_8;\n
        v9 = v7;\n
        *(&v9) = v7 + 3;\n
        v15 = 0;\n
        do\n
        {\n
            if (v8[v15] == v5)\n
            {\n
                v2 = &_GLOBAL_OFFSET_TABLE_;\n
                v8[v15] = 0;\n
                v10 = v7 - 1;\n
                v1 = v10;\n
                tmp_6 = v10;\n
                v11 = v10 - v15;\n
                if (tmp_6 > v15)\n
                {\n
                    v0 = v7 - v15 - 2;\n
                    if ((v11 & 3))\n
                    {\n
                        v12 = v9 & 3;\n
                        do\n
                        {\n
                            v14 = v6->field_8;\n
                            v13 = v15 + 1;\n
                            *((v14 + v15 * 4)) = *((v14 + v15 * 4 + 4));\n
                            v15 = v13;\n
                            tmp_6 = v12;\n
                            v12 -= 1;\n
                        } while (tmp_6 != 1);\n
                        if (v0 < 3)\n
                            goto LABEL_40507a;\n
                    }\n
                    else\n
                    {\n
                        v13 = v15;\n
                        if (v0 < 3)\n
                            goto LABEL_40507a;\n
                    }\n
                    v16 = ~(v13) + v7;\n
                    v17 = v13 * 4;\n
                    v18 = 0;\n
                    do\n
                    {\n
                        v19 = v6->field_8 + v17;\n
                        *((v19 + 0x4 * v18)) = *((4 + v19 + 0x4 * v18));\n
                        v20 = v6->field_8 + v17;\n
                        *((v20 + v18 * 4 + 4)) = *((v20 + v18 * 4 + 8));\n
                        v21 = v6->field_8 + v17;\n
                        *((v21 + v18 * 4 + 8)) = *((v21 + v18 * 4 + 12));\n
                        v22 = v6->field_8 + v17;\n
                        *((v22 + v18 * 4 + 12)) = *((v22 + v18 * 4 + 16));\n
                    } while (v16 != 4);\n
                }\n
LABEL_40507a:\n
                v6->field_8[1 + v7].field_0 = 0;\n
                v6->field_4 = v1;\n
                v5 = v4;\n
                break;\n
            }\n
            v15 += 1;\n
            *(&v9) = v9 + 3;\n
        } while (v7 != v15);\n
    }\n
    v23 = (&v3->field_0)[*((v5 + 0x1000)) & 31];\n
    v24 = v23->field_4;\n
    v25 = v23->field_8;\n
    v26 = v24 + 1;\n
    v23->field_4 = v26;\n
    *((v25 + v24 * 4)) = v5;\n
    if (v26 == v23->field_0)\n
    {\n
        v23->field_0 = v26 * 2;\n
        v26 = cgc_realloc(v23->field_8, v26 * 8);\n
        v23->field_8 = v26;\n
        return v26;\n
    }\n
    return v24 + 1;\n
}\n
", "4215001:sub_4050d9": null, "4215008:_Z8api_openPKc12open_flags_tj": "typedef struct struct_1 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_2 *field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_8 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_9 *field_8;\n
} struct_8;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    unsigned int field_-c;\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_4;\n
\n
typedef struct struct_6 {\n
    struct struct_7 *field_0;\n
    char padding_4[12];\n
    unsigned int field_10;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
typedef struct struct_9 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_9;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    struct struct_5 *field_0;\n
} struct_7;\n
\n
typedef struct struct_5 {\n
    struct struct_5 *field_0;\n
} struct_5;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_Root;\n
extern void* cgc_stderr;\n
extern struct_4 g_40ba70;\n
\n
int api_open(unsigned int v5, unsigned int a0)\n
{\n
    char v0;  // [bp-0x21]\n
    int tmp_8;  // tmp #8\n
    struct struct_6 **v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_8 *v2;  // [bp-0x1c]\n
    struct struct_10 **v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    struct_1 *v9;  // edi\n
    struct_8 *v10;  // eax\n
    struct_2 *v11;  // edi\n
    unsigned int v12[2];  // esi\n
    unsigned int v13;  // eax\n
    struct struct_1 **v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    struct_1 *v16;  // ebp, Other Possible Types: unsigned int\n
    char *v17;  // eax\n
    unsigned int v18[3];  // esi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    char *v21;  // edi, Other Possible Types: unsigned int\n
    struct struct_10 **v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23[2];  // esi\n
    char *v24;  // ebp\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // edi\n
    struct_4 *v28;  // eax, Other Possible Types: unsigned int\n
    unsigned int v29;  // esi\n
    unsigned int v30[3];  // ebp\n
    struct_6 *v31;  // ecx\n
    void* v32;  // eax, Other Possible Types: unsigned int\n
\n
    v6 = a0;\n
    if ((~(v6) & 3) && (v6 & 12) != 12)\n
    {\n
        v7 = (!(v6 & 1) ? 5 : v6);\n
        v8 = v7 | 8;\n
        if ((v7 & 12))\n
            v8 = v7;\n
        v4 = v8;\n
        v0 = !(v8 & 3);\n
        v9 = operator new(12);\n
        v9->field_4 = &cgc_Root;\n
        v9->field_8 = 0;\n
        v9->field_0 = 1;\n
        v10 = operator new(12);\n
        Pathname::__base_ctor__(v10);\n
        v2 = v10;\n
        v18 = v10->field_8;\n
        if (v18[1])\n
        {\n
            v3 = 0;\n
            v16 = v9;\n
            while (v16)\n
            {\n
                if (!*(v16))\n
                    break;\n
                v11 = *((v16 + 4));\n
                v12 = *((*((v18 + 8)) + v3 * 4));\n
                v13 = v12[0];\n
                cgc_memcpy(v1, v2->field_4 + v13, v12[1] - v13);\n
                v1 = operator new[](v12[1] - v12[0] + 1);\n
                *(v1 + v12[1] - v12[0]) = 0;\n
                if (!v11->field_4)\n
                {\n
LABEL_405190:\n
                    v16 = 0;\n
                }\n
                else\n
                {\n
                    v14 = 0;\n
                    while (true)\n
                    {\n
                        v15 = v11->field_8;\n
                        v16 = *((v15 + v14 * 4));\n
                        v17 = (!*(*((v15 + (v14 << 2)))) ? *((*((v16 + 4)) + 12)) : *((*((v16 + 8)) + 20)));\n
                        if (!cgc_strcmp(v17, v1))\n
                            break;\n
                        v14 += 1;\n
                        if (v14 >= v11->field_4)\n
                            goto LABEL_405190;\n
                    }\n
                }\n
                v18 = v2->field_8;\n
                v19 = *((v18 + 4));\n
                v3 += 1;\n
                if (v3 >= v19)\n
                {\n
                    if (!v16)\n
                        break;\n
                    if (!(!*(v16)))\n
                        break;\n
                    v1 = v16 + 8;\n
                    v21 = *((*((v16 + 8)) + 20));\n
                    tmp_8 = v19;\n
                    v22 = v19 - 1;\n
                    if (!(tmp_8 < 1))\n
                        goto LABEL_4052b6;\n
LABEL_405283:\n
                    cgc_fprintf(cgc_stderr, \"ERROR:\\tBad get: %d\\n
\");\n
                    cgc_exit(1, \"ERROR:\\tBad get: %d\\n
\");\n
                    v22 = -1;\n
LABEL_4052b6:\n
                    v23 = *((*((v18 + 8)) + v22 * 4));\n
                    v24 = operator new[](v23[1] - v23[0] + 1);\n
                    v25 = v23[0];\n
                    cgc_memcpy(v24, v2->field_4 + v25, v23[1] - v25);\n
                    v24[v23[1] + -1 * v23[0]] = 0;\n
                    if (!cgc_strcmp(v21, v24))\n
                    {\n
                        v26 = v0 | v4;\n
                        v27 = 0;\n
                        v28 = &g_40ba70.field_-c;\n
                        do\n
                        {\n
                            if (!*((v28 - 12)))\n
                            {\n
                                v29 = v26;\n
                                goto LABEL_405392;\n
                            }\n
                            if (!*((v28 - 8)))\n
                            {\n
                                v29 = v26;\n
                                v27 += 1;\n
                                goto LABEL_405392;\n
                            }\n
                            if (!*((v28 - 4)))\n
                            {\n
                                v29 = v26;\n
                                v27 += 2;\n
                                goto LABEL_405392;\n
                            }\n
                            else if (!*(v28))\n
                            {\n
                                v29 = v26;\n
                                v27 += 3;\n
LABEL_405392:\n
                                v30 = operator new(12);\n
                                v31 = *(v1);\n
                                v30[0] = v31;\n
                                v30[2] = v29;\n
                                v31->field_10 = v31->field_10 + 1;\n
                                v32 = 0;\n
                                if ((v4 & 8))\n
                                    v32 = v31->field_0->field_0();\n
                                v30[1] = v32;\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v27]) = v30;\n
                                return v27;\n
                            }\n
                            v27 += 4;\n
                            v28 += 16;\n
                        } while (v27 != 0x400);\n
                    }\n
                }\n
            }\n
            goto LABEL_405351;\n
        }\n
        if (!v9->field_0)\n
        {\n
            v21 = v9->field_8->field_14;\n
            v1 = &v9->field_8;\n
            goto LABEL_405283;\n
        }\n
    }\n
LABEL_405351:\n
    return -1;\n
}\n
", "4215182:sub_40518e": null, "4215348:sub_405234": null, "4215756:sub_4053cc": null, "4215760:_Z8api_readiPhm": "typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* cgc_stderr;\n
\n
int api_read(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v2;  // eax\n
    struct_2 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    unsigned int v6;  // ecx\n
\n
    v2 = v1;\n
    if (v2 > 1023)\n
        return -1;\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v2]);\n
    if (!v4)\n
        return -1;\n
    v5 = a1;\n
    v6 = v4->field_4;\n
    if (v4->field_0->field_0->field_0() - v6 < v5)\n
        return -1;\n
    v0 = v5;\n
    if (File::Read(v4->field_0, a0, v6))\n
    {\n
        cgc_fprintf(cgc_stderr, \"ERROR:\\tBad fh read\\n
\");\n
        cgc_exit(1);\n
    }\n
    v4->field_4 = v4->field_4 + v5;\n
    return v5;\n
}\n
", "4215903:sub_40545f": null, "4215904:_Z9api_writeiPhm": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* cgc_stderr;\n
\n
int api_write(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // esi\n
    struct_0 *v4;  // edi\n
\n
    v2 = v1;\n
    if (v2 > 1023)\n
        return -1;\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v2]);\n
    if (!v4)\n
    {\n
        return -1;\n
    }\n
    else if ((v4->field_8 & 1))\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v3 = a1;\n
        v0 = v3;\n
        if (File::Write(v4->field_0, a0, v4->field_4))\n
        {\n
            cgc_fprintf(cgc_stderr, \"ERROR:\\tBad fh write\\n
\");\n
            cgc_exit(1);\n
        }\n
        v4->field_4 = v4->field_4 + v3;\n
        return a1;\n
    }\n
}\n
", "4216023:sub_4054d7": null, "4216032:_Z9api_lseekili": "typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int api_lseek(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct struct_1 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    struct_2 *v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ebp\n
\n
    v3 = v2;\n
    if (v3 > 1023)\n
        return -1;\n
    v5 = *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v3]);\n
    if (!v5)\n
        return -1;\n
    v6 = a1;\n
    v7 = a0;\n
    if (v6 == 1)\n
    {\n
        v1 = v5->field_4 + v7;\n
        v0 = &v5->field_0->field_0;\n
        if (v1 >= *(v0)->field_0())\n
            return -1;\n
        v7 += v5->field_4;\n
    }\n
    else if (v6)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v0 = &v5->field_0->field_0;\n
        if (*(v0)->field_0() <= v7)\n
            return -1;\n
    }\n
    v5->field_4 = v7;\n
    return v7;\n
}\n
", "4216152:sub_405558": null, "4216160:_Z9api_closei": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int api_close(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    struct struct_0 **v3;  // ecx\n
\n
    v1 = v0;\n
    if (v1 > 1023)\n
        return -1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v1]);\n
    if (v3)\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[3232 + 4 * v1]) = 0;\n
        *(v3)->field_10 = *(v3)->field_10 - 1;\n
        operator delete(v3);\n
        return 0;\n
    }\n
    return -1;\n
}\n
", "4216236:sub_4055ac": null, "4216240:_Z9api_creatPKci": "typedef struct struct_8 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_9 *field_4;\n
    struct struct_4 *field_8;\n
} struct_8;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_15 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_16 *field_8;\n
} struct_15;\n
\n
typedef struct struct_11 {\n
    unsigned int field_0;\n
    struct struct_12 *field_4;\n
    struct struct_12 *field_8;\n
    unsigned int field_c;\n
} struct_11;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    struct struct_7 *field_4;\n
    struct struct_7 *field_8;\n
} struct_6;\n
\n
typedef struct struct_5 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_3 *field_4;\n
    struct struct_4 *field_8;\n
} struct_5;\n
\n
typedef struct struct_13 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_13;\n
\n
typedef struct struct_9 {\n
    unsigned int field_0;\n
    struct struct_7 *field_4;\n
    struct struct_10 *field_8;\n
    unsigned int field_c;\n
} struct_9;\n
\n
typedef struct struct_4 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_16 {\n
    struct struct_14 *field_0;\n
} struct_16;\n
\n
typedef struct struct_12 {\n
    unsigned int field_0;\n
} struct_12;\n
\n
typedef struct struct_7 {\n
    struct struct_5 *field_0;\n
} struct_7;\n
\n
typedef struct struct_3 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_10 {\n
    struct struct_8 *field_0;\n
} struct_10;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_14 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_15 *field_4;\n
    struct struct_4 *field_8;\n
} struct_14;\n
\n
extern char cgc_Root;\n
extern struct_8 *cgc_stderr;\n
extern char g_40ac88;\n
\n
int api_creat(char *v9, unsigned int a0)\n
{\n
    int tmp_3;  // tmp #3\n
    struct struct_0 **v0;  // [bp-0x48]\n
    struct_8 *v1;  // [bp-0x34]\n
    struct_8 *v2;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x2c]\n
    struct struct_0 **v4;  // [bp-0x28]\n
    char v5;  // [bp-0x24]\n
    char v6;  // [bp-0x20]\n
    char v7;  // [bp-0x1c]\n
    struct_8 *v8;  // [bp-0x14]\n
    char *v10;  // ecx\n
    struct_1 *v12;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13[2];  // esi\n
    unsigned int v14;  // eax\n
    struct_8 *v15;  // eax\n
    struct_15 *v16;  // edi\n
    struct struct_8 **v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // eax\n
    struct_8 *v19;  // ebp, Other Possible Types: unsigned int\n
    char *v20;  // eax\n
    unsigned int v21[4];  // edi\n
    struct_11 *v22;  // esi\n
    unsigned int *v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    struct struct_0 **v26;  // esi, Other Possible Types: unsigned int\n
    unsigned int v27;  // eax\n
    struct struct_5 **v28;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v29;  // esi\n
    unsigned int v31[2];  // esi\n
    char *v32;  // edi\n
    unsigned int v33;  // eax\n
    struct_6 *v34;  // esi\n
    struct_5 *v35;  // eax\n
    unsigned int v37[6];  // edi\n
    unsigned int v38[3];  // esi\n
    unsigned int v39[2];  // esi\n
    char *v40;  // ebp\n
    unsigned int v41;  // eax\n
    struct_6 *v42;  // esi\n
    struct_13 *v43;  // eax\n
    struct struct_5 **v44;  // edx\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // ecx\n
\n
    v10 = v9;\n
    if (v10 && *(v10) != 47)\n
        return -1;\n
    Pathname::__base_ctor__(&v5);\n
    v19 = operator new(12);\n
    v19->field_4 = &cgc_Root;\n
    v19->field_8 = 0;\n
    v19->field_0 = 1;\n
    v12 = *(&v7);\n
    v27 = v12->field_4;\n
    if (v27 != 1)\n
    {\n
        v8 = cgc_stderr;\n
        v26 = 0;\n
        v2 = v19;\n
        do\n
        {\n
            if (v27 <= v26)\n
            {\n
                cgc_fprintf(v8, \"ERROR:\\tBad get: %d\\n
\");\n
                cgc_exit(1, \"ERROR:\\tBad get: %d\\n
\");\n
            }\n
            v4 = v26;\n
            v13 = *((*((v12 + 8)) + v26 * 4));\n
            v14 = v13[0];\n
            cgc_memcpy(v1, *(&v6) + v14, v13[1] - v14);\n
            v1 = operator new[](v13[1] - v13[0] + 1);\n
            (&v1->field_0)[v13[1] + -1 * v13[0]] = 0;\n
            v15 = v2;\n
            if (!v15->field_0)\n
            {\n
                v3 = -1;\n
                goto LABEL_405a07;\n
            }\n
            else\n
            {\n
                v3 = -1;\n
                v16 = v15->field_4;\n
                if (v16->field_4)\n
                {\n
                    v17 = 0;\n
                    while (true)\n
                    {\n
                        v18 = v16->field_8;\n
                        v19 = *((v18 + v17 * 4));\n
                        v20 = (!*(*((v18 + (v17 << 2)))) ? *((*((v19 + 4)) + 12)) : *((*((v19 + 8)) + 20)));\n
                        if (!cgc_strcmp(v20, v1))\n
                            break;\n
                        v17 += 1;\n
                        if (v17 >= v16->field_4)\n
                            goto LABEL_405856;\n
                    }\n
                }\n
LABEL_405856:\n
                if (!(a0 & 2))\n
                    goto LABEL_405a07;\n
                v19 = operator new(12);\n
                v21 = operator new(16);\n
                v21[0] = 0x400;\n
                v21[1] = 0;\n
                v21[2] = operator new[](0x1000);\n
                v21[3] = v1;\n
                *((v19 + 4)) = v21;\n
                *((v19 + 8)) = 0;\n
                *(v19) = 1;\n
                v22 = *((v2 + 4));\n
                v23 = v22->field_4;\n
                v24 = v22->field_8;\n
                v25 = v23 + 1;\n
                v22->field_4 = v25;\n
                *((v24 + v23 * 4)) = v19;\n
                if (v25 == v22->field_0)\n
                {\n
                    v22->field_0 = v25 * 2;\n
                    v22->field_8 = cgc_realloc(v22->field_8, v25 * 8);\n
                }\n
            }\n
            v26 = v4 + 1;\n
            v12 = *(&v7);\n
            v27 = *((v12 + 4));\n
            v2 = v19;\n
        } while (v26 < v27 - 1);\n
        goto LABEL_405a07;\n
    }\n
    v3 = -1;\n
    if (*(v19))\n
    {\n
        v1 = v19;\n
        if (*((*((v19 + 4)) + 4)))\n
        {\n
            v2 = cgc_stderr;\n
            v28 = 0;\n
            v4 = &\"ERROR:\\tBad get: %d\\n
\";\n
            while (true)\n
            {\n
                v29 = *((v12 + 4));\n
                tmp_3 = v29;\n
                if (tmp_3 < 1)\n
                {\n
                    v0 = v4;\n
                    cgc_fprintf(v2, v0);\n
                    cgc_exit(1, v0);\n
                }\n
                v31 = *((*((v12 + 8)) + (v29 - 1) * 4));\n
                v32 = operator new[](v31[1] - v31[0] + 1);\n
                v33 = v31[0];\n
                cgc_memcpy(v32, *(&v6) + v33, v31[1] - v33);\n
                v32[v31[1] + -1 * v31[0]] = 0;\n
                v34 = v1->field_4;\n
                if (v34->field_4 <= v28)\n
                {\n
                    v0 = v4;\n
                    cgc_fprintf(v2, v0);\n
                    cgc_exit(1, v0);\n
                }\n
                v35 = v34->field_8[v28].field_0;\n
                if (!cgc_strcmp((!v35->field_0 ? v35->field_4->field_c : v35->field_8->field_14), v32))\n
                    break;\n
                v28 += 1;\n
                if (!(v28 < v1->field_4->field_4))\n
                    goto LABEL_4058ec;\n
                v12 = *(&v7);\n
            }\n
            goto LABEL_405a07;\n
        }\n
LABEL_4058ec:\n
        v37 = operator new(24);\n
        v38 = *(&v7);\n
        if (v38[1] < 1)\n
        {\n
            cgc_fprintf(cgc_stderr, \"ERROR:\\tBad get: %d\\n
\");\n
            cgc_exit(1, \"ERROR:\\tBad get: %d\\n
\");\n
        }\n
        v39 = *((v38[2] + (v38[1] - 1) * 4));\n
        v40 = operator new[](v39[1] - v39[0] + 1);\n
        v41 = v39[0];\n
        cgc_memcpy(v40, *(&v6) + v41, v39[1] - v41);\n
        v40[v39[1] + -1 * v39[0]] = 0;\n
        v37[0] = &g_40ac88;\n
        v37[1] = 0x400;\n
        v37[2] = 0;\n
        v37[3] = operator new[](0x1000);\n
        v37[5] = v40;\n
        v37[4] = 0;\n
        v42 = v1->field_4;\n
        v43 = operator new(12);\n
        v43->field_4 = 0;\n
        v43->field_8 = v37;\n
        v43->field_0 = 0;\n
        v44 = v42->field_4;\n
        v45 = v42->field_8;\n
        v46 = v44 + 1;\n
        v42->field_4 = v46;\n
        *((v45 + v44 * 4)) = v43;\n
        if (v46 != v42->field_0)\n
        {\n
            v3 = 0;\n
        }\n
        else\n
        {\n
            v3 = 0;\n
            v42->field_0 = v46 * 2;\n
            v42->field_8 = cgc_realloc(v42->field_8, v46 * 8);\n
        }\n
    }\n
LABEL_405a07:\n
    return v3;\n
}\n
", "4216589:sub_40570d": null, "4216666:sub_40575a": null, "4216868:sub_405824": null, "4217363:sub_405a13": null, "4217376:_Z10api_unlinkPKc": "typedef struct struct_3 {\n
    char field_0;\n
    char padding_1[3];\n
    struct struct_4 *field_4;\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_7 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_8 *field_8;\n
} struct_7;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_5 *field_8;\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    char padding_4[16];\n
    unsigned int field_14;\n
} struct_2;\n
\n
typedef struct struct_8 {\n
    struct struct_6 *field_0;\n
} struct_8;\n
\n
typedef struct struct_5 {\n
    struct struct_3 *field_0;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern char cgc_Root;\n
\n
int api_unlink(unsigned int v7)\n
{\n
    struct_4 *v0;  // [bp-0x2c]\n
    int tmp_6;  // tmp #6\n
    int tmp_7;  // tmp #7\n
    struct struct_6 **v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char v4;  // [bp-0x1c]\n
    char v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    struct_3 *v8;  // esi, Other Possible Types: unsigned int\n
    struct_7 *v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    unsigned int v11[2];  // edi\n
    char *v12;  // ebp\n
    unsigned int v13;  // eax\n
    char *v14;  // eax\n
    struct struct_3 **v15;  // edi, Other Possible Types: unsigned int\n
    struct_4 *v16;  // eax, Other Possible Types: unsigned int\n
    struct struct_6 **v17;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct struct_3 **v21;  // ecx\n
    char v22;  // dl\n
    unsigned int v23;  // ebp\n
    unsigned int v24;  // ecx\n
    char v25;  // cl\n
    struct_4 *v26;  // edi, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    struct struct_3 **v28;  // edx, Other Possible Types: unsigned int\n
    unsigned int v29;  // edi\n
    struct struct_3 **v30;  // edx\n
    void* v31;  // ebp\n
    unsigned int *v32;  // eax\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // eax\n
    struct_4 *v36;  // edi\n
    struct struct_3 **v37;  // eax\n
    struct_2 *v38;  // edi\n
\n
    Pathname::__base_ctor__(&v4);\n
    v8 = operator new(12);\n
    v8->field_4 = &cgc_Root;\n
    v8->field_8 = 0;\n
    v8->field_0 = 1;\n
    v9 = *(&v6);\n
    if (v9->field_4)\n
    {\n
        v17 = 0;\n
        do\n
        {\n
            v10 = *((v9 + 8));\n
            v1 = v17;\n
            v11 = *((v10 + v17 * 4));\n
            v12 = operator new[](v11[1] - v11[0] + 1);\n
            v13 = v11[0];\n
            cgc_memcpy(v12, *(&v5) + v13, v11[1] - v13);\n
            v12[v11[1] + -1 * v11[0]] = 0;\n
            if (!*(v8))\n
                return -1;\n
            v16 = *((v8 + 4));\n
            if (!v16->field_4)\n
                return -1;\n
            v15 = 0;\n
            v0 = v16;\n
            while (true)\n
            {\n
                v8 = *((*((v16 + 8)) + v15 * 4));\n
                v14 = (!*(v8) ? *((*((v8 + 4)) + 12)) : *((*((v8 + 8)) + 20)));\n
                if (!cgc_strcmp(v14, v12))\n
                    break;\n
                v15 += 1;\n
                v16 = v0;\n
                if (v15 >= *((v16 + 4)))\n
                    return -1;\n
            }\n
            v17 = v1 + 1;\n
            v9 = *(&v6);\n
        } while (v17 < *((v9 + 4)));\n
    }\n
    if (*(v8))\n
    {\n
        return -1;\n
    }\n
    else if (*((*(*((v8 + 8))) + 4))() > 1)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v19 = v0;\n
        v20 = v19->field_4;\n
        if (!v20)\n
            return 0;\n
        v21 = v19->field_8;\n
        v22 = v20 + 3;\n
        v23 = 0;\n
        while (v21[v23] != v8)\n
        {\n
            v23 += 1;\n
            v22 += 3;\n
            if (v20 == v23)\n
                return 0;\n
        }\n
        v21[v23] = 0;\n
        v2 = v20;\n
        v24 = v20 - 1;\n
        v3 = v24;\n
        tmp_6 = v24;\n
        v25 = v24 - v23;\n
        v26 = v0;\n
        if (tmp_6 > v23)\n
        {\n
            v1 = v2 - v23 - 2;\n
            if (!(v25 & 3))\n
            {\n
                v28 = v23;\n
                v26 = v0;\n
            }\n
            else\n
            {\n
                v27 = v22 & 3;\n
                v26 = v0;\n
                do\n
                {\n
                    v29 = *((v26 + 8));\n
                    v28 = v23 + 1;\n
                    *((v29 + v23 * 4)) = *((v29 + v23 * 4 + 4));\n
                    v26 = v0;\n
                    v23 = v28;\n
                    tmp_7 = v27;\n
                    v27 -= 1;\n
                } while (tmp_7 != 1);\n
            }\n
            if (v1 >= 3)\n
            {\n
                v1 = ~(v28) + v2;\n
                v30 = v28 * 4;\n
                v31 = 0;\n
                do\n
                {\n
                    v32 = *((v26 + 8)) + v30;\n
                    *((v32 + 0x4 * v31)) = *((4 + v32 + 0x4 * v31));\n
                    v33 = *((v26 + 8)) + v30;\n
                    *((v33 + v31 * 4 + 4)) = *((v33 + v31 * 4 + 8));\n
                    v34 = *((v26 + 8)) + v30;\n
                    *((v34 + v31 * 4 + 8)) = *((v34 + v31 * 4 + 12));\n
                    v35 = *((v26 + 8)) + v30;\n
                    *((v35 + v31 * 4 + 12)) = *((v35 + v31 * 4 + 16));\n
                } while (v1 != 4);\n
            }\n
        }\n
        *((*((v26 + 8)) + v2 * 4 - 4)) = 0;\n
        *((v26 + 4)) = v3;\n
        if (!v8)\n
            return 0;\n
        v36 = *((v8 + 4));\n
        if (v36)\n
        {\n
            v37 = v36->field_8;\n
            if (v37)\n
                operator delete(v37);\n
            operator delete(v36);\n
        }\n
        v38 = *((v8 + 8));\n
        if (v38)\n
        {\n
            File::__base_dtor__();\n
            operator delete(v38);\n
        }\n
        operator delete(v8);\n
    }\n
}\n
", "4217587:sub_405af3": null, "4217636:sub_405b24": null, "4218041:sub_405cb9": null, "4218048:_Z8load_reqP4FILEPP7Request": "int load_req(void* v2, unsigned int *a0)\n
{\n
    char v0;  // [bp-0x18]\n
    char v1;  // [bp-0x14]\n
    void* v3;  // ebp\n
    unsigned int v5;  // edi\n
    unsigned int v6[3];  // eax\n
\n
    v3 = v2;\n
    *(a0) = 0;\n
    if (cgc_fread(&v1, 4, v2) != 4)\n
    {\n
        return -1;\n
    }\n
    else if (*(&v1) == 12053374)\n
    {\n
        return -1;\n
    }\n
    else if (cgc_fread(&v0, 4, v3) != 4)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v5 = operator new[](*(&v0));\n
        if (cgc_fread(v5, *(&v0), v3) == *(&v0))\n
        {\n
            v6 = operator new(12);\n
            v6[1] = *(&v0);\n
            v6[0] = v1;\n
            v6[2] = v5;\n
            *(a0) = v6;\n
            return 0;\n
        }\n
        return -1;\n
    }\n
}\n
", "4218232:sub_405d78": null, "4218240:_Z11process_reqP7Request": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_stderr;\n
extern char g_4083e2;\n
extern char g_4083f6;\n
\n
int process_req(unsigned int v5)\n
{\n
    return 0;\n
}\n
", "4219620:sub_4062e4": null, "4219632:_Z9send_respP4FILEP8Response": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern void* cgc_stderr;\n
extern void* cgc_stdout;\n
\n
int send_resp(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // esi\n
\n
    v1 = a0;\n
    if (v0 && !(!v1))\n
        goto LABEL_406332;\n
    cgc_fprintf(cgc_stderr, \"ERROR:\\tBad send_resp\\n
\");\n
    cgc_exit(1);\n
LABEL_406332:\n
    cgc_fwrite(v1, 4, cgc_stdout);\n
    cgc_fwrite(&v1->field_4, 4, cgc_stdout);\n
    return cgc_fwrite(v1 + 1, v1->field_4, cgc_stdout);\n
}\n
", "4219759:sub_40636f": null, "4219760:main": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern unsigned int cgc_stderr;\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x28]\n
    void* v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int *v7;  // ecx, Other Possible Types: unsigned int\n
    void* v8;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax\n
\n
    v5 = 2218976402;\n
    v4 = -229261519;\n
    v7 = 0;\n
    v8 = 0;\n
    do\n
    {\n
        v8 = v8 ^ *((1128775708 + v7 * 4 - 28)) ^ *((1128775708 + v7 * 4 - 24)) ^ *((1128775708 + v7 * 4 - 20)) ^ *((1128775708 + v7 * 4 - 16)) ^ *((1128775708 + v7 * 4 - 12)) ^ *((1128775708 + v7 * 4 - 8)) ^ *((1128775708 + v7 * 4 - 4)) ^ *((1128775708 + v7 * 4));\n
        v7 += 8;\n
    } while (v7 != 0x400);\n
    cgc_printf(\"FSAAS\\n
\");\n
    cgc_printf(\"%x\\n
\");\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v3 = \"QQQ\\n
\";\n
    cgc_printf(\"QQQ\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    if (load_req(cgc_stdin, &v0))\n
    {\n
        cgc_fflush(cgc_stdout);\n
        return 0;\n
    }\n
    v2 = cgc_stderr;\n
    v1 = \"ERROR:\\tBad send_resp\\n
\";\n
    while (true)\n
    {\n
        v9 = process_req(v0);\n
        if (!v9)\n
            break;\n
        if (!cgc_stdout)\n
        {\n
            cgc_fprintf(v2, v1);\n
            cgc_exit(1);\n
        }\n
        cgc_fwrite(v9, 4, cgc_stdout);\n
        cgc_fwrite(&v9->field_4, 4, cgc_stdout);\n
        cgc_fwrite(v9 + 1, v9->field_4, cgc_stdout);\n
        cgc_fwrite(&v4, 8, cgc_stdout);\n
        cgc_printf(v3);\n
        cgc_fflush(cgc_stdout);\n
        if (load_req(cgc_stdin, &v0))\n
            break;\n
    }\n
}\n
", "4220005:sub_406465": null, "4220218:sub_40653a": null, "4220224:_ZN11BufferCacheC2Ev": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[124];\n
    struct struct_1 *field_80;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern unsigned int _ZN6Buffer7counterE;\n
\n
int BufferCache::__base_ctor__(struct_3 *v0)\n
{\n
    struct_3 *v1;  // edi\n
    unsigned int v2[3];  // esi\n
    struct_0 *v3;  // eax\n
    unsigned int *v4;  // edx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // ebp\n
    struct_1 *v8;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    do\n
    {\n
        v2 = operator new(12);\n
        v2[0] = 0x400;\n
        v2[1] = 0;\n
        v2[2] = operator new[](0x1000);\n
        v1->field_0 = v2;\n
    } while (true);\n
    v8 = operator new(12);\n
    v8->field_0 = 0x400;\n
    v8->field_4 = 0;\n
    v8->field_8 = operator new[](0x1000);\n
    v1->field_80 = v8;\n
    v7 = 31;\n
    while (true)\n
    {\n
        v3 = operator new(4108);\n
        _ZN6Buffer7counterE = _ZN6Buffer7counterE + 1;\n
        v3->field_1000 = _ZN6Buffer7counterE;\n
        v3->field_1004 = 0x1000;\n
        v3->field_1008 = 1;\n
        v4 = *((v8 + 4));\n
        v5 = *((v8 + 8));\n
        v6 = v4 + 1;\n
        *((v8 + 4)) = v6;\n
        *((v5 + v4 * 4)) = v3;\n
        if (v6 == *(v8))\n
        {\n
            *(v8) = v6 * 2;\n
            *((v8 + 8)) = cgc_realloc(*((v8 + 8)), v6 * 8);\n
        }\n
        v7 -= 1;\n
        v8 = v0->field_80;\n
    }\n
}\n
", "4220488:sub_406648": null, "4220496:_ZN7DirTreeD2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int DirTree::__base_dtor__(struct_0 *v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0->field_8;\n
    if (v1)\n
        v1 = operator delete(v1);\n
    return v1;\n
}\n
", "4220536:sub_406678": null, "4220544:_ZN8PathnameC2EPKc": "typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Pathname::__base_ctor__(struct_2 *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v3;  // ebp\n
    struct_2 *v4;  // edi\n
    unsigned int v5[3];  // esi\n
    unsigned int v6;  // eax\n
    char *v7;  // eax\n
    char *v8;  // cc_dep1\n
    unsigned int v9[2];  // cc_dep2\n
    struct_0 *v10;  // edi\n
    unsigned int v11[2];  // eax\n
    unsigned int *v12;  // edx\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // ecx\n
    struct_2 *v15;  // edx, Other Possible Types: unsigned int\n
    char v16;  // cc_dep1\n
    unsigned int v17;  // esi\n
    unsigned int v18[2];  // eax, Other Possible Types: unsigned int\n
    void* v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // cc_dep1\n
    unsigned int v21[2];  // cc_dep2\n
    struct_0 *v22;  // edi\n
    unsigned int *v23;  // edx\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // ecx\n
\n
    v3 = a0;\n
    v4 = v2;\n
    v5 = operator new(12);\n
    v5[0] = 0x400;\n
    v5[1] = 0;\n
    v5[2] = operator new[](0x1000);\n
    v4->field_8 = &v5[0];\n
    v6 = cgc_strlen(v3);\n
    v4->field_0 = v6;\n
    v7 = operator new[](v6 + 1);\n
    v4->field_4 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_memcpy(v7, v3, v4->field_0);\n
    v18 = v4->field_0;\n
    if (!v18)\n
        return v4->field_0;\n
    v15 = v4;\n
    v19 = 0;\n
    v17 = 0;\n
    while (true)\n
    {\n
        if (v3[v17] == 47)\n
        {\n
            if (v17 > v19)\n
            {\n
                v10 = *((v15 + 8));\n
                v1 = v19;\n
                v11 = operator new(8);\n
                v11[0] = v1;\n
                v11[1] = v17;\n
                v12 = v10->field_4;\n
                v13 = v10->field_8;\n
                v14 = v12 + 1;\n
                v10->field_4 = v14;\n
                *((v13 + v12 * 4)) = v11;\n
                v15 = v2;\n
                if (v14 == v10->field_0)\n
                {\n
                    v10->field_0 = v14 * 2;\n
                    v15 = v2;\n
                    v10->field_8 = cgc_realloc(v10->field_8, v14 * 8);\n
                }\n
            }\n
            do\n
            {\n
                v16 = v3[v17];\n
                v17 += 1;\n
            } while (v16 == 47);\n
            v18 = *(v15);\n
            v19 = v17 - 1;\n
            v20 = v17;\n
            v21 = v18;\n
            if (v17 >= v18)\n
                break;\n
        }\n
        else\n
        {\n
            v17 += 1;\n
            v8 = v17;\n
            v9 = v18;\n
            if (v17 >= v18)\n
                break;\n
        }\n
    }\n
    if (!([D] x86g_calculate_condition(0x4<32>, 0x6<32>, cc_dep1<4>, cc_dep2<4>, 0x0<32>)))\n
    {\n
        return v18;\n
    }\n
    else if (v17 <= v19)\n
    {\n
        return v18;\n
    }\n
    else\n
    {\n
        v22 = *((v15 + 8));\n
        v18 = operator new(8);\n
        *(v18) = v19;\n
        *((v18 + 4)) = v17;\n
        v23 = v22->field_4;\n
        v24 = v22->field_8;\n
        v25 = v23 + 1;\n
        v22->field_4 = v25;\n
        *((v24 + v23 * 4)) = v18;\n
        if (v25 == v22->field_0)\n
        {\n
            v22->field_0 = v25 * 2;\n
            v18 = cgc_realloc(v22->field_8, v25 * 8);\n
            v22->field_8 = v18;\n
            return v18;\n
        }\n
        return v18;\n
    }\n
}\n
", "4220680:sub_406708": null, "4220908:sub_4067ec": null, "4220912:_ZN4File4ReadEPhmm": "typedef struct struct_5 {\n
    unsigned int field_-148;\n
    char padding_-144[3536];\n
    unsigned int field_c8c;\n
} struct_5;\n
\n
typedef struct struct_7 {\n
    struct struct_8 *field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_7;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
} struct_0;\n
\n
typedef struct struct_8 {\n
    struct struct_6 *field_0;\n
} struct_8;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_6 {\n
    struct struct_6 *field_0;\n
} struct_6;\n
\n
extern struct_5 _GLOBAL_OFFSET_TABLE_;\n
\n
int File::Read(struct_7 *v8, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    struct_5 *v1;  // [bp-0x2c]\n
    struct struct_4 **v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_4 **v7;  // [bp-0x14]\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // ecx\n
    struct_5 *v12;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    struct struct_4 **v14;  // edx, Other Possible Types: unsigned int\n
    struct struct_1 **v15;  // ecx\n
    struct_1 *v16;  // eax\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // ebx\n
    unsigned int v22;  // ebp\n
    struct_0 *v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // edi\n
    unsigned int v26;  // esi\n
    char *v27;  // ecx, Other Possible Types: unsigned int\n
    void* v28;  // esi, Other Possible Types: unsigned int\n
\n
    if (!a0)\n
        return -1;\n
    v10 = a2;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.field_-148;\n
    if (a1 + a2 > v8->field_0->field_0())\n
        return -1;\n
    if (!v10)\n
        return 0;\n
    v11 = a1;\n
    v14 = v11 / 0x1000;\n
    v12 = v1;\n
    v3 = *(&v12->padding_-144[324]);\n
    v6 = v11 & 4095;\n
    v13 = 0x1000 - v6;\n
    v25 = v10;\n
    if (v13 > v10)\n
        v13 = v10;\n
    v5 = v13;\n
    v28 = 0;\n
    v7 = v14;\n
    do\n
    {\n
        v4 = v28;\n
        v2 = v14;\n
        if (v8->field_8 <= v14)\n
        {\n
            v0 = v12 - 10742;\n
            cgc_fprintf(v3, v0);\n
            cgc_exit(1, v0);\n
            v14 = v2;\n
        }\n
        v15 = *(*((v8->field_c + v14 * 4)));\n
        v16 = *((*((v12 + 3212)) + (v15 & 31) * 4));\n
        v17 = v16->field_4;\n
        v18 = v25;\n
        if (!v17)\n
        {\n
            v23 = 0;\n
        }\n
        else\n
        {\n
            v19 = v25;\n
            v22 = 0;\n
            do\n
            {\n
                v23 = v16->field_8[v22].field_0;\n
                if (*((v23 + 0x1000)) == v15)\n
                {\n
                    v18 = v19;\n
                    if (v17 <= v22)\n
                    {\n
                        v0 = &v1[3].padding_-144[106];\n
                        cgc_fprintf(v3, v0);\n
                        cgc_exit(1, v0);\n
                        v23 = v16->field_8[v22].field_0;\n
                        goto LABEL_4069a0;\n
                    }\n
                }\n
                v22 += 1;\n
            } while (v17 != v22);\n
            v23 = 0;\n
            v18 = v19;\n
        }\n
LABEL_4069a0:\n
        if (!a1)\n
        {\n
LABEL_406880:\n
            v24 = v18;\n
            v25 = v18;\n
            v26 = v4;\n
            if (v24 - v26 >= 0x1000)\n
                v24 = 0x1000;\n
            v27 = a0 + v26;\n
            continue;\n
        }\n
        else\n
        {\n
            if (!(v2 == v7))\n
                goto LABEL_406880;\n
            v25 = v18;\n
            v26 = v4;\n
            v27 = a0 + v26;\n
            v23 += v6;\n
            v24 = v5;\n
        }\n
        cgc_memcpy(v27, v23, v24);\n
        v28 = v26 + v24;\n
        v14 = v2 + 1;\n
        v12 = v1;\n
    } while (v28 < v25);\n
}\n
", "4221053:sub_40687d": null, "4221256:sub_406948": null, "4221268:sub_406954": null, "4221413:sub_4069e5": null, "4221424:_ZN4File5WriteEPhmm": "typedef struct struct_8 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_1 *field_c;\n
} struct_8;\n
\n
typedef struct struct_9 {\n
    unsigned int field_-148;\n
    char padding_-144[3532];\n
    unsigned int field_c88;\n
    struct struct_6 *field_c8c;\n
} struct_9;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_12 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_12;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_4 *field_8;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[4096];\n
    struct struct_6 *field_1000;\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_5;\n
\n
typedef struct struct_6 {\n
    struct struct_0 *field_0;\n
    char padding_4[124];\n
    struct struct_2 *field_80;\n
} struct_6;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    struct struct_3 *field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_5 *field_0;\n
} struct_4;\n
\n
extern struct_9 _GLOBAL_OFFSET_TABLE_;\n
extern struct_7 *_ZL6BCache;\n
\n
int File::Write(struct_8 *v13, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    int tmp_29;  // tmp #29\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x58]\n
    struct_3 *v1;  // [bp-0x40]\n
    struct_9 *v2;  // [bp-0x3c]\n
    void* v3;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    struct struct_11 **v6;  // [bp-0x2c]\n
    struct struct_11 **v7;  // [bp-0x28]\n
    void* v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    struct_6 *v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    struct_8 *v14;  // esi\n
    unsigned int v15;  // eax\n
    void* v16;  // eax, Other Possible Types: unsigned int\n
    struct_9 *v17;  // ebx\n
    struct_12 *v18;  // eax\n
    unsigned int v19;  // ecx\n
    unsigned int *v20;  // edx\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ebp\n
    struct_0 *v24;  // esi, Other Possible Types: unsigned int\n
    unsigned int v25;  // ecx\n
    struct_8 *v26;  // eax\n
    struct struct_3 **v27;  // eax\n
    struct_3 *v28;  // edx\n
    unsigned int v29;  // ecx\n
    unsigned int v31;  // edi\n
    struct_6 *v32;  // ebx, Other Possible Types: unsigned int\n
    struct_2 *v33;  // ecx\n
    unsigned int *v34;  // edi\n
    struct_3 *v35;  // eax\n
    struct_3 *v36;  // edx\n
    unsigned int v37;  // eax\n
    struct_3 *v38;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v39;  // edi, Other Possible Types: unsigned int\n
    unsigned int v40;  // eax\n
    unsigned int *v41;  // edi\n
    unsigned int *v42;  // edx, Other Possible Types: unsigned int\n
    unsigned int v43;  // ebx\n
    unsigned int v44;  // ebx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // ebx\n
    unsigned int v47;  // eax\n
    struct_0 *v48;  // ebp\n
    unsigned int *v49;  // ecx\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // eax\n
    struct_8 *v52;  // edi\n
    unsigned int *v53;  // ecx\n
    unsigned int v54;  // edx\n
    unsigned int v55;  // eax\n
    struct_9 *v57;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v58;  // ebp\n
    struct_5 *v59;  // esi, Other Possible Types: unsigned int\n
    unsigned int v60;  // edi\n
    unsigned int v61;  // ecx\n
    unsigned int v62;  // eax\n
    struct struct_11 **v63;  // esi, Other Possible Types: unsigned int\n
\n
    if (!a0)\n
        return -1;\n
    v14 = v13;\n
    v6 = a1 >> 12;\n
    v15 = (a2 + 4095 >> 12) + (a1 >> 12);\n
    tmp_29 = v15;\n
    v16 = v15 - v14->field_8;\n
    if (tmp_29 < v14->field_8)\n
        v16 = 0;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.field_-148;\n
    v24 = _ZL6BCache->field_80;\n
    if (v24->field_4 < v16)\n
    {\n
        v23 = 31;\n
        while (true)\n
        {\n
            v17 = v2;\n
            v18 = operator new(4108);\n
            v19 = *(&v17->padding_-144[3204]);\n
            *(&v17->padding_-144[3204]) = v19 + 1;\n
            v18->field_1000 = v19;\n
            v18->field_1004 = 0x1000;\n
            v18->field_1008 = 1;\n
            v20 = *((v24 + 4));\n
            v21 = *((v24 + 8));\n
            v22 = v20 + 1;\n
            *((v24 + 4)) = v22;\n
            *((v21 + v20 * 4)) = v18;\n
            if (v22 == *(v24))\n
            {\n
                *(v24) = v22 * 2;\n
                *((v24 + 8)) = cgc_realloc(*((v24 + 8)), v22 * 8);\n
            }\n
            v23 -= 1;\n
            if (false)\n
                break;\n
            v24 = _ZL6BCache->field_80;\n
        }\n
    }\n
    v58 = a2;\n
    if (!a2)\n
        return 0;\n
    v57 = v2;\n
    v12 = a1 & 4095;\n
    v25 = (!(v12 <= v58) ? 0x1000 - v12 : v58);\n
    v8 = *(&v57->padding_-144[324]);\n
    v4 = v25;\n
    v5 = v4 - v4;\n
    v3 = 0;\n
    v63 = v6;\n
    do\n
    {\n
        v26 = v13;\n
        v7 = v63;\n
        if (v63 >= v26->field_8)\n
        {\n
            v59 = BufferCache::GetFree();\n
            v59->field_1008 = 0;\n
            v32 = *((v57 + 3212));\n
            v33 = v32->field_80;\n
            v1 = v33->field_4;\n
            if (v1)\n
            {\n
                v34 = v33->field_8;\n
                v35 = v1;\n
                v36 = v35;\n
                *(&v36) = v35 + 3;\n
                v37 = 0;\n
                do\n
                {\n
                    if (v34[v37] == v59)\n
                    {\n
                        v11 = v32;\n
                        v34[v37] = 0;\n
                        v10 = &v1->padding_0[1];\n
                        if (v10 > v37)\n
                        {\n
                            v9 = &v1->padding_0[-1 * v37 + 2];\n
                            if (((v10 - v37) & 3))\n
                            {\n
                                v38 = v36 & 3;\n
                                do\n
                                {\n
                                    v39 = v37 + 1;\n
                                    v33->field_8[v37].field_0 = v33->field_8[1 + v37].field_0;\n
                                    v37 = v39;\n
                                    tmp_6 = v38;\n
                                    v38 -= 1;\n
                                } while (tmp_6 != 1);\n
                                if (v9 < 3)\n
                                    goto LABEL_406d0a;\n
                            }\n
                            else\n
                            {\n
                                v39 = v37;\n
                                if (v9 < 3)\n
                                    goto LABEL_406d0a;\n
                            }\n
                            v40 = &v1->padding_0[~(v39)];\n
                            v41 = v39 * 4;\n
                            v42 = 0;\n
                            do\n
                            {\n
                                v43 = v33->field_8 + v41;\n
                                *((v43 + v42 * 4)) = *((v43 + v42 * 4 + 4));\n
                                v44 = v33->field_8 + v41;\n
                                *((v44 + v42 * 4 + 4)) = *((v44 + v42 * 4 + 8));\n
                                v45 = v33->field_8 + v41;\n
                                *((v45 + v42 * 4 + 8)) = *((v45 + v42 * 4 + 12));\n
                                v46 = v33->field_8 + v41;\n
                                *((v46 + v42 * 4 + 12)) = *((v46 + v42 * 4 + 16));\n
                                v42 += 4;\n
                            } while (v40 != v42);\n
                        }\n
LABEL_406d0a:\n
                        *((-4 + &v33->field_8->field_0 + 0x4 * v1)) = 0;\n
                        v33->field_4 = v10;\n
                        v32 = v11;\n
                        break;\n
                    }\n
                    v37 += 1;\n
                    *(&v36) = v36 + 3;\n
                } while (v1 != v37);\n
            }\n
            v1 = &v59->field_1000;\n
            v47 = v59->field_1000 & 31;\n
            v48 = *((v32 + v47 * 4));\n
            v49 = *((*((v32 + v47 * 4)) + 4));\n
            v50 = *((*((v32 + v47 * 4)) + 8));\n
            v51 = v49 + 1;\n
            v48->field_4 = v51;\n
            *((v50 + v49 * 4)) = v59;\n
            if (v51 == v48->field_0)\n
            {\n
                v48->field_0 = v51 * 2;\n
                v48->field_8 = cgc_realloc(v48->field_8, v51 * 8);\n
            }\n
            v52 = v13;\n
            v53 = v52->field_8;\n
            v54 = v52->field_c;\n
            v55 = v53 + 1;\n
            v52->field_8 = v55;\n
            *((v54 + v53 * 4)) = v1;\n
            v58 = a2;\n
            if (v55 != v52->field_4)\n
            {\n
                v57 = v2;\n
                if (!a1)\n
                    goto LABEL_406e20;\n
LABEL_406dcb:\n
                if (v7 == v6)\n
                {\n
                    v60 = v4;\n
                    cgc_memcpy(v12 + v59, a0 + v3, v60);\n
                    if (v5 < *((v59 + 4100)))\n
                    {\n
                        *((v59 + 4100)) = v5;\n
                        v60 = v4;\n
                    }\n
                    continue;\n
                }\n
LABEL_406e20:\n
                v61 = v3;\n
                v60 = v58 - v61;\n
                if (v60 >= 0x1000)\n
                    v60 = 0x1000;\n
                cgc_memcpy(v59, a0 + v61, v60);\n
                v62 = 0x1000 - v60;\n
                if (v62 < *((v59 + 4100)))\n
                    *((v59 + 4100)) = v62;\n
            }\n
            else\n
            {\n
                v52->field_4 = v55 * 2;\n
                v57 = v2;\n
                v52->field_c = cgc_realloc(v52->field_c, v55 * 8);\n
LABEL_406dad:\n
                if (!a1)\n
                    goto LABEL_406e20;\n
                goto LABEL_406dcb;\n
            }\n
        }\n
        else\n
        {\n
            v27 = *(v26->field_c[v63].field_0);\n
            v28 = *((*((v57 + 3212)) + (v27 & 31) * 4));\n
            v29 = v28->field_4;\n
            if (v29)\n
            {\n
                v1 = v28;\n
                v31 = 0;\n
                do\n
                {\n
                    v59 = v28->field_8[v31].field_0;\n
                    if (v59->field_1000 == v27)\n
                    {\n
                        if (v29 <= v31)\n
                        {\n
                            v0 = &v57[3].padding_-144[106];\n
                            cgc_fprintf(v8, v0);\n
                            cgc_exit(1, v0);\n
                            v59 = v1->field_8[v31].field_0;\n
                            if (!a1)\n
                                goto LABEL_406e20;\n
                            goto LABEL_406dcb;\n
                        }\n
                        goto LABEL_406dad;\n
                    }\n
                    v31 += 1;\n
                } while (v29 != v31);\n
                goto LABEL_406e20;\n
            }\n
            v59 = 0;\n
            if (!a1)\n
                goto LABEL_406e20;\n
            goto LABEL_406dcb;\n
        }\n
        v63 = v7 + 1;\n
        v3 += v60;\n
    } while (v3 < v58);\n
    return 0;\n
}\n
", "4221743:sub_406b2f": null, "4221860:sub_406ba4": null, "4222390:sub_406db6": null, "4222490:sub_406e1a": null, "4222585:sub_406e79": null, "4222592:_ZN11BufferCache7GetFreeEv": "typedef struct struct_2 {\n
    char padding_0[128];\n
    struct struct_0 *field_80;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern unsigned int _ZN6Buffer7counterE;\n
extern void* cgc_stderr;\n
extern unsigned int g_4083ce;\n
\n
int BufferCache::GetFree(struct_2 *v4)\n
{\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    struct_0 *v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v6;  // edx, Other Possible Types: unsigned int\n
    struct_3 *v7;  // eax\n
    unsigned int *v8;  // edx\n
    unsigned int v9;  // edi\n
    unsigned int *v10;  // ecx\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int *v16;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v17;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    unsigned int *v19;  // eax\n
    unsigned int *v20;  // eax\n
    unsigned int *v21;  // eax\n
    unsigned int *v22;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v23;  // ebx\n
\n
    v5 = v4->field_80;\n
    v6 = v5->field_4;\n
    if (v6)\n
    {\n
        v13 = *(*((v5 + 8)));\n
        *(*((v5 + 8))) = 0;\n
        v1 = v6 - 1;\n
        if (v6 != 1)\n
        {\n
            v2 = v13;\n
            v3 = v6;\n
            v15 = v1 & 3;\n
            v16 = 0;\n
            if (v6 - 2 >= 3)\n
            {\n
                v17 = 0;\n
                do\n
                {\n
                    v18 = *((v5 + 8));\n
                    *((v18 + v17 * 4)) = *((v18 + v17 * 4 + 4));\n
                    v19 = *((v5 + 8));\n
                    v19[1 + v17] = v19[2 + v17];\n
                    v20 = *((v5 + 8));\n
                    v20[2 + v17] = v20[3 + v17];\n
                    v21 = *((v5 + 8));\n
                    v16 = v17 + 4;\n
                    v21[3 + v17] = v21[4 + v17];\n
                    v17 = v16;\n
                } while ((v1 & -0x4) != v16);\n
            }\n
            v6 = v3;\n
            v13 = v2;\n
            if (v15)\n
            {\n
                v22 = v16 + 1;\n
                do\n
                {\n
                    v23 = *((v5 + 8));\n
                    *((v23 + v22 * 4 - 4)) = *((v23 + v22 * 4));\n
                    v22 += 1;\n
                    tmp_8 = v15;\n
                    v15 -= 1;\n
                } while (tmp_8 != 1);\n
            }\n
        }\n
        *((*((v5 + 8)) + v6 * 4 - 4)) = 0;\n
        *((v5 + 4)) = v1;\n
        return v13;\n
    }\n
    v12 = 32;\n
    while (true)\n
    {\n
        v7 = operator new(4108);\n
        _ZN6Buffer7counterE = _ZN6Buffer7counterE + 1;\n
        v7->field_1000 = _ZN6Buffer7counterE;\n
        v7->field_1004 = 0x1000;\n
        v7->field_1008 = 1;\n
        v8 = *((v5 + 4));\n
        v9 = *((v5 + 8));\n
        v10 = v8 + 1;\n
        *((v5 + 4)) = v10;\n
        *((v9 + v8 * 4)) = v7;\n
        if (v10 == *(v5))\n
        {\n
            *(v5) = v10 * 2;\n
            *((v5 + 8)) = cgc_realloc(*((v5 + 8)), v10 * 8);\n
        }\n
        v5 = v4->field_80;\n
        v12 -= 1;\n
    }\n
}\n
", "4222639:sub_406eaf": null, "4223026:sub_407032": null, "4223040:_ZN4File4SizeEv": "typedef struct struct_6 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    struct struct_7 *field_c;\n
} struct_6;\n
\n
typedef struct struct_0 {\n
    char padding_0[3212];\n
    unsigned int field_c8c;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_3 *field_8;\n
} struct_2;\n
\n
typedef struct struct_7 {\n
    struct struct_5 *field_0;\n
} struct_7;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    struct struct_4 *field_0;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    unsigned int field_1004;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    struct struct_2 *field_0;\n
} struct_4;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern struct_4 *_ZL6BCache;\n
extern unsigned int cgc_stderr;\n
\n
int File::Size(struct_6 *v7)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    struct struct_1 **v1;  // [bp-0x34]\n
    struct struct_2 **v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x1c]\n
    struct_0 *v5;  // [bp-0x18]\n
    struct_2 *v6;  // [bp-0x14]\n
    struct struct_5 **v8;  // ebp, Other Possible Types: unsigned int\n
    void* v9;  // esi, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    struct_2 *v11;  // ecx\n
    struct struct_1 **v12;  // ebx\n
    struct struct_1 **v14;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v15;  // ebx\n
    unsigned int v16[1026];  // edx, Other Possible Types: unsigned int\n
\n
    v3 = v7->field_8;\n
    if (!v3)\n
        return 0;\n
    v4 = cgc_stderr;\n
    v8 = 0;\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = &_ZL6BCache->field_0;\n
    v9 = 0;\n
    do\n
    {\n
        v10 = v7->field_c[v8].field_0->field_0;\n
        v11 = v2[v10 & 31];\n
        v12 = v11->field_8;\n
        v16 = *(v12);\n
        if (v16[0x400] != v10)\n
        {\n
            v6 = v11;\n
            v14 = 0;\n
            do\n
            {\n
                v16 = v12[1 + v14];\n
                v14 += 1;\n
            } while (*((v16 + 0x1000)) != v10);\n
            if (v11->field_4 <= v14)\n
            {\n
                v15 = v5;\n
                v1 = v14;\n
                v0 = &v15[3].padding_0[1094];\n
                cgc_fprintf(v4, v0);\n
                cgc_exit(1, v0);\n
                v16 = v6->field_8[v14].field_0;\n
                v2 = v15->field_c8c;\n
                v3 = v7->field_8;\n
            }\n
        }\n
        v9 = v9 - *((v16 + 4100)) + 0x1000;\n
        v8 += 1;\n
    } while (v8 < v3);\n
    return v9;\n
}\n
", "4223110:sub_407086": null, "4223304:sub_407148": null, "4223312:_ZN4File6RefCntEv": "typedef struct struct_0 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_0;\n
\n
int File::RefCnt(struct_0 *v0)\n
{\n
    return v0->field_10;\n
}\n
", "4223320:sub_407158": null, "4223328:_ZN4FileD2Ev": "typedef struct struct_8 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    struct struct_9 *field_c;\n
} struct_8;\n
\n
typedef struct struct_7 {\n
    unsigned int field_-148;\n
    char padding_-144[3536];\n
    struct struct_5 *field_c8c;\n
} struct_7;\n
\n
typedef struct struct_5 {\n
    struct struct_1 *field_0;\n
    char padding_4[124];\n
    struct struct_3 *field_80;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4096];\n
    unsigned int field_1000;\n
    unsigned int field_1004;\n
    char field_1008;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    struct struct_4 *field_4;\n
    struct struct_4 *field_8;\n
} struct_3;\n
\n
typedef struct struct_9 {\n
    struct struct_6 *field_0;\n
} struct_9;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
} struct_4;\n
\n
typedef struct struct_6 {\n
    struct struct_5 *field_0;\n
} struct_6;\n
\n
extern struct_7 _GLOBAL_OFFSET_TABLE_;\n
extern char g_40ac88;\n
\n
int File::__base_dtor__(struct_8 *v5)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    struct struct_0 **v1;  // [bp-0x24]\n
    struct_7 *v2;  // [bp-0x1c]\n
    struct_5 *v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14]\n
    struct_8 *v6;  // edx, Other Possible Types: unsigned int\n
    struct_7 *v7;  // ecx\n
    struct struct_6 **v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edx\n
    struct_1 *v10;  // edi\n
    unsigned int v11;  // eax\n
    struct struct_0 **v12;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v13;  // ecx, Other Possible Types: unsigned int\n
    struct_5 *v14;  // ebx, Other Possible Types: unsigned int\n
    struct_7 *v15;  // ebx\n
    struct_3 *v16;  // esi\n
    unsigned int *v17;  // edx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    struct struct_6 **v20;  // eax, Other Possible Types: unsigned int\n
\n
    v6 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.field_-148;\n
    v6->field_0 = &g_40ac88;\n
    if (v6->field_8)\n
    {\n
        v7 = v2;\n
        v4 = *(&v7->padding_-144[324]);\n
        v8 = 0;\n
        v14 = *(&v7->padding_-144[3208]);\n
        do\n
        {\n
            v9 = *(*((*((v6 + 12)) + v8 * 4)));\n
            v10 = *((v14 + (v9 & 31) * 4));\n
            v11 = v10->field_4;\n
            if (!v11)\n
            {\n
                v13 = 0;\n
            }\n
            else\n
            {\n
                v3 = v14;\n
                v12 = 0;\n
                do\n
                {\n
                    v13 = v10->field_8[v12].field_0;\n
                    if (*((v13 + 0x1000)) == v9)\n
                    {\n
                        v14 = v3;\n
                        if (v11 <= v12)\n
                        {\n
                            v1 = v12;\n
                            v15 = v2;\n
                            v0 = &v15[3].padding_-144[106];\n
                            cgc_fprintf(v4, v0);\n
                            cgc_exit(1, v0);\n
                            v13 = v10->field_8[v12].field_0;\n
                            v14 = *(&v15->padding_-144[3208]);\n
                            goto LABEL_407250;\n
                        }\n
                    }\n
                    v12 += 1;\n
                } while (v11 != v12);\n
                v13 = 0;\n
                v14 = v3;\n
            }\n
LABEL_407250:\n
            *((v13 + 4104)) = 1;\n
            *((v13 + 4100)) = 0x1000;\n
            v16 = *((v14 + 128));\n
            v17 = v16->field_4;\n
            v18 = v16->field_8;\n
            v19 = v17 + 1;\n
            v16->field_4 = v19;\n
            *((v18 + v17 * 4)) = v13;\n
            if (v19 == v16->field_0)\n
            {\n
                v16->field_0 = v19 * 2;\n
                v16->field_8 = cgc_realloc(v16->field_8, v19 * 8);\n
                v14 = *(&v2->padding_-144[3208]);\n
            }\n
            v8 += 1;\n
            v6 = v5;\n
        } while (v8 < *((v6 + 8)));\n
    }\n
    v20 = *((v6 + 12));\n
    if (v20)\n
        v20 = operator delete(v20);\n
    return v20;\n
}\n
", "4223399:sub_4071a7": null, "4223482:sub_4071fa": null, "4223492:sub_407204": null, "4223684:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:__cxa_atexit": null, "5242888:__libc_start_main": null, "5242892:cgc_receive": null, "5242896:_Znaj": null, "5242900:cgc_allocate": null, "5242904:cgc__terminate": null, "5242908:_ZdlPv": null, "5242912:cgc_deallocate": null, "5242916:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}