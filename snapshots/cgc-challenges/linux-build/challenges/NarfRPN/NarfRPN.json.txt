{"4198400:_init": "extern struct_0 *g_407b14;\n
\n
int _init()\n
{\n
    if (g_407b14)\n
    {\n
        g_407b14();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198496:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198512:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198528:sub_401080": "int sub_401080()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198534:sub_401086": null, "4198544:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198587:sub_4010bb": null, "4198588:sub_4010bc": "int sub_4010bc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198592:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198596:sub_4010c4": null, "4198608:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 27211;\n
    v6 = v5 + 25;\n
    v7 = v5 + 25;\n
    if (v7 == v6)\n
        return v5 + 25;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198659:sub_401103": "int sub_401103()\n
{\n
}\n
", "4198665:sub_401109": "int sub_401109()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198672:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 27147;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 25;\n
    v9 = (v6 + 25 - (v6 + 25) >> 31) + (25 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198743:sub_401157": "int sub_401157()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198752:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407b10;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407b10)\n
    {\n
        v0 = __dso_handle;\n
        sub_401080();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198827:sub_4011ab": "int sub_4011ab()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198832:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198841:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198845:sub_4011bd": null, "4198848:cgc_read_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_read_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4198997:sub_401255": null, "4199008:cgc_write_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write_all(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v5, a0 + v3, a1))\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            a1 -= *(&v2);\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
    }\n
}\n
", "4199157:sub_4012f5": null, "4199168:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        *(v4) = a0;\n
    }\n
    return v1;\n
}\n
", "4199238:sub_401346": null, "4199248:cgc_memcpy": "int cgc_memcpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    int tmp_19;  // tmp #19\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char *v4;  // eax\n
    char *v5;  // eax\n
\n
    v1 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        v3 = a1;\n
        a1 = v3 - 1;\n
        if (!v3)\n
            break;\n
        v4 = v0;\n
        v0 = v4 + 1;\n
        tmp_19 = *(v4);\n
        v5 = v1;\n
        v1 = v5 + 1;\n
        *(v5) = tmp_19;\n
    }\n
    return v2;\n
}\n
", "4199334:sub_4013a6": null, "4199344:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4199400:sub_4013e8": null, "4199408:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v13)\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int *v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x29]\n
    unsigned int v5;  // [bp-0x28]\n
    struct_0 *v6;  // [bp-0x24]\n
    unsigned int *v7;  // [bp-0x20]\n
    unsigned int *v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    unsigned int v10;  // [bp-0x14]\n
    unsigned int *v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v14;  // ebx\n
    unsigned int v15;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    if ((v13 + 3 & -0x4) + 8 < v13)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    v13 = (v13 + 3 & -0x4) + 8;\n
    if (v13 < v6->field_24)\n
        v13 = v6->field_24;\n
    if (v13 > 4095)\n
    {\n
        v12 = cgc_allocate_large_chunk();\n
        return v12;\n
    }\n
    v5 = cgc_log_base_two();\n
    v10 = v5 - cgc_log_base_two();\n
    if (v10 >= 8)\n
    {\n
        v12 = 0;\n
        return v12;\n
    }\n
    while (true)\n
    {\n
        v4 = 0;\n
        if (!v11)\n
            v4 = v10 < 8;\n
        if (!(v4 & 1))\n
            break;\n
        v14 = v6;\n
        v15 = v10;\n
        v10 = v15 + 1;\n
        v0 = v13;\n
        v9 = cgc_list_find(&v14[2].padding_0[24 + 8 * v15], &v14[638].padding_0[16]);\n
        if (v9)\n
            v3 = -5 + v9;\n
        else\n
            v3 = 0;\n
        v8 = v3;\n
        v11 = v8;\n
    }\n
    if (!v11)\n
    {\n
        v11 = cgc_grow_heap();\n
    }\n
    else\n
    {\n
        v7 = v11;\n
        v2 = &v6[2].padding_0[24 + 8 + 8 * v10];\n
        if (!v7)\n
            v1 = 0;\n
        else\n
            v1 = v7 + 1;\n
        ::0x401840::cgc_list_remove(v2);\n
    }\n
    cgc_mark_allocated();\n
    if ((*(v11) & -2) > v13)\n
        v11 = cgc_split_chunk(v11);\n
    v12 = cgc_chunk_to_ptr();\n
    return v12;\n
}\n
", "4199966:sub_40161e": null, "4199968:cgc_allocate_large_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_allocate_large_chunk(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(v5, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = v5;\n
    cgc_mark_allocated();\n
    v3 = cgc_chunk_to_ptr();\n
    return v3;\n
}\n
", "4200090:sub_40169a": null, "4200096:cgc_log_base_two": "int cgc_log_base_two(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v1 >>= 1;\n
        if (!v1)\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4200150:sub_4016d6": null, "4200160:cgc_list_find": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_find(struct struct_0 **v4, struct struct_0 **a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_0 **v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v4)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        v0 = a1;\n
        if (a0(v2))\n
        {\n
            v3 = v2;\n
            return v3;\n
        }\n
        v2 = *(v2);\n
    }\n
}\n
", "4200284:sub_40175c": null, "4200288:cgc_find_fit": "int cgc_find_fit(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
\n
    v4 = a0;\n
    v2 = v5;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    v3 = v1;\n
    return !((*(v3) & -2) < v4);\n
}\n
", "4200388:sub_4017c4": null, "4200400:cgc_grow_heap": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_grow_heap()\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x1000, 0))\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    *(v2) = 0x1000;\n
    cgc_mark_free();\n
    v3 = v2;\n
    return v3;\n
}\n
", "4200510:sub_40183e": null, "4200512:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4200622:sub_4018ae": null, "4200624:cgc_mark_allocated": "int cgc_mark_allocated(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) | 1;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4200662:sub_4018d6": null, "4200672:cgc_split_chunk": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_sizes;\n
\n
int cgc_split_chunk(unsigned int *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4 + a0;\n
    v1 = *(v4) & -2;\n
    if ((*(v4) & -2) <= a0 + size_class_sizes)\n
    {\n
        v3 = v4;\n
        return v3;\n
    }\n
    *(v4) = a0;\n
    cgc_mark_allocated(v4);\n
    *(v2) = v1 - a0;\n
    cgc_mark_allocated(v2);\n
    cgc_chunk_to_ptr();\n
    cgc_free();\n
    v3 = v4;\n
    return v3;\n
}\n
", "4200843:sub_40198b": null, "4200848:cgc_chunk_to_ptr": "int cgc_chunk_to_ptr(unsigned int v0)\n
{\n
    return v0 + 4;\n
}\n
", "4200866:sub_4019a2": null, "4200880:cgc_free": "typedef struct struct_0 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v8 = cgc_ptr_to_chunk();\n
    v4 = v8;\n
    if (!v6)\n
        return v8;\n
    cgc_mark_free();\n
    v4 = cgc_coalesce();\n
    v1 = cgc_log_base_two(*(v4) & -2);\n
    v3 = v1 - cgc_log_base_two(v2->field_24);\n
    if (v3 >= 8)\n
        v3 = 7;\n
    v9 = v2;\n
    v0 = &v9[597].padding_0[8];\n
    v8 = cgc_list_insert_in_order(&v9[2].padding_0[24 + 8 * v3], v4 + 1);\n
    return v8;\n
}\n
", "4201082:sub_401a7a": null, "4201088:cgc_ptr_to_chunk": "int cgc_ptr_to_chunk(unsigned int v3)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    if (!v2)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v2;\n
    v1 = v0;\n
    return v1;\n
}\n
", "4201157:sub_401ac5": null, "4201168:cgc_mark_free": "int cgc_mark_free(unsigned int *v0)\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = v0;\n
    *(v1) = *(v1) & -2;\n
    *((-4 + v0 + (*(v0) & -2))) = *(v0);\n
    return v0;\n
}\n
", "4201206:sub_401af6": null, "4201216:cgc_coalesce": "typedef struct struct_0 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(struct_1 *v12)\n
{\n
    void* v0;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v1[2];  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    void* v3;  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v4[2];  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    unsigned int *v7;  // [bp-0x1c]\n
    unsigned int *v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11 = 0;\n
    v10 = 0;\n
    if ((v12 & 4095))\n
        v10 = v12 + -(v12->field_0 & -2);\n
    if (((v12 + (v12->field_-4 & -2)) & 4095))\n
        v11 = v12 + (v12->field_-4 & -2);\n
    if (v10 && !(*(v10) & 1))\n
    {\n
        v5 = cgc_log_base_two(*(v10) & -2);\n
        v9 = v5 - cgc_log_base_two(v6->field_24);\n
        if (v9 < 8)\n
        {\n
            v8 = v10;\n
            v4[0] = &v6[2].padding_0[24 + 8 * v9];\n
            if (!v8)\n
                v3 = 0;\n
            else\n
                v3 = v8 + 1;\n
            ::0x401840::cgc_list_remove(v4, v3);\n
            *(v10) = (v12->field_-4 & -2) + (*(v10) & -2);\n
            cgc_mark_free(v10);\n
            v12 = v10;\n
        }\n
    }\n
    if (!v11)\n
    {\n
        return v12;\n
    }\n
    else if ((*(v11) & 1))\n
    {\n
        return v12;\n
    }\n
    else\n
    {\n
        v2 = cgc_log_base_two(*(v11) & -2);\n
        v9 = v2 - cgc_log_base_two(v6->field_24);\n
        if (v9 >= 8)\n
            return v12;\n
        v7 = v11;\n
        v1[0] = &v6[2].padding_0[24 + 8 * v9];\n
        if (!v7)\n
            v0 = 0;\n
        else\n
            v0 = v7 + 1;\n
        ::0x401840::cgc_list_remove(v1, v0);\n
        *(v12) = (*(v12) & -2) + (*(v11) & -2);\n
        cgc_mark_free(v12);\n
    }\n
}\n
", "4201769:sub_401d29": null, "4201776:cgc_list_insert_in_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_in_order(struct struct_0 **v3, unsigned int a0, struct struct_0 **a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct struct_0 **v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &*(v3)->field_0;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v4 = cgc_list_push_back(v3);\n
            return v4;\n
        }\n
        else if (a1(a0) < 0)\n
        {\n
            v2 = *(v2);\n
        }\n
        else\n
        {\n
            v0 = a0;\n
            v4 = ::0x401fb0::cgc_list_insert_before(v3, v2);\n
            return v4;\n
        }\n
    }\n
}\n
", "4201933:sub_401dcd": null, "4201936:cgc_size_cmp": "int cgc_size_cmp(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int *v4;  // [bp-0x14]\n
    unsigned int *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int *v7;  // [bp-0x8]\n
\n
    v6 = v8;\n
    if (!v6)\n
        v1 = 0;\n
    else\n
        v1 = -5 + v6;\n
    v5 = v1;\n
    v7 = v5;\n
    v3 = a0;\n
    if (!v3)\n
        v0 = 0;\n
    else\n
        v0 = -5 + v3;\n
    v2 = v0;\n
    v4 = v2;\n
    return (*(v4) & -2) - (*(v7) & -2);\n
}\n
", "4202087:sub_401e67": null, "4202096:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc(v3);\n
    if (v1)\n
    {\n
        cgc_memset(v1, 0, v3);\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4202185:sub_401ec9": null, "4202192:cgc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_realloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char *v1;  // [bp-0x20]\n
    char *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v7)\n
    {\n
        v6 = cgc_malloc(a0);\n
        return v6;\n
    }\n
    v5 = (*(cgc_ptr_to_chunk(v7)) & -2) - 8;\n
    if (a0 == v5)\n
    {\n
        v6 = v7;\n
        return v6;\n
    }\n
    v4 = cgc_malloc(a0);\n
    v1 = v4;\n
    v2 = v7;\n
    if (a0 < v5)\n
        v0 = a0;\n
    else\n
        v0 = v5;\n
    cgc_memcpy(v1, v2, v0);\n
    cgc_free(v7);\n
    v6 = v4;\n
    return v6;\n
}\n
", "4202415:sub_401faf": null, "4202416:cgc_list_insert_before": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    struct struct_2 *field_4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    struct struct_2 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_insert_before(struct_1 *v0, struct_3 *a0, unsigned int a1[2])\n
{\n
    struct_1 *v1;  // eax, Other Possible Types: unsigned int, struct_3 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4202672:cgc_list_push_back": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_list_push_back(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_list_insert_after(v1, v1->field_4);\n
}\n
", "4202731:sub_4020eb": null, "4202736:cgc_list_insert_after": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_insert_after(void* *v1, void* *a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0)\n
    {\n
        v2 = ::0x401fb0::cgc_list_insert_before(v1, *(a0), a1);\n
        return v2;\n
    }\n
    v2 = ::0x401fb0::cgc_list_insert_before(v1, *(v1), a1);\n
    return v2;\n
}\n
", "4202848:cgc_rpncalc_init": "int cgc_rpncalc_init(unsigned int v0[2])\n
{\n
    v0[1] = 0;\n
    v0[0] = 0;\n
    return v0;\n
}\n
", "4202875:sub_40217b": null, "4202880:cgc_rpncalc_destroy": "int cgc_rpncalc_destroy(unsigned int v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_clear(v1, *(&v0));\n
}\n
", "4202917:sub_4021a5": null, "4202928:cgc_clear": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_clear(unsigned int *v20)\n
{\n
    unsigned int v0;  // [bp-0x58]\n
    struct_1 *v1;  // [bp-0x54]\n
    struct_0 *v2;  // [bp-0x50], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0x4c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x48], Other Possible Types: unsigned int\n
    unsigned int *v5;  // [bp-0x44]\n
    struct_0 *v6;  // [bp-0x40], Other Possible Types: unsigned int\n
    struct_0 *v7;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct_0 *v8;  // [bp-0x38], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x34]\n
    struct_0 *v10;  // [bp-0x30]\n
    unsigned int v11;  // [bp-0x2c]\n
    struct_0 *v12;  // [bp-0x28]\n
    struct_0 *v13;  // [bp-0x24]\n
    unsigned int v14;  // [bp-0x20]\n
    struct_0 *v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    char v17;  // [bp-0x14]\n
    struct_0 *v18;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v19;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
\n
    v9 = &_GLOBAL_OFFSET_TABLE_;\n
    v16 = *(v20);\n
    if (!v16)\n
        v8 = 0;\n
    else\n
        v8 = -9 + v16;\n
    v15 = v8;\n
    v19 = v15;\n
    if (!v19)\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        v14 = v19->field_8;\n
        if (!v14)\n
            v7 = 0;\n
        else\n
            v7 = -9 + v14;\n
        v13 = v7;\n
        v6 = v13;\n
    }\n
    for (v18 = v6; v19; v18 = v2)\n
    {\n
        v12 = v19;\n
        v5 = v20;\n
        if (!v12)\n
            v4 = 0;\n
        else\n
            v4 = &v12->field_8;\n
        v0 = v4;\n
        ::0x4023e0::cgc_list_remove(v5);\n
        v22 = v23 - 1;\n
        [D] PutI(72:F64x8)[t11,0] = t14\n
        [D] PutI(136:I8x8)[t11,0] = 0x01\n
        [D] PutI(136:I8x8)[t25,0] = 0x00\n
        v23 = v22 + 1;\n
        if (cgc_get_type() == 1)\n
        {\n
            v24 = v23 - 1;\n
            [D] PutI(72:F64x8)[t13,0] = t16\n
            [D] PutI(136:I8x8)[t13,0] = 0x01\n
            v1 = &v17;\n
            [D] PutI(136:I8x8)[t32,0] = 0x00\n
            v23 = v24 + 1;\n
            if (!cgc_as_matrix())\n
                cgc_free(*(&v17));\n
        }\n
        cgc_free(v19);\n
        v19 = v18;\n
        if (!v19)\n
        {\n
            v2 = 0;\n
        }\n
        else\n
        {\n
            v11 = *((v19 + 8));\n
            if (!v11)\n
                v3 = 0;\n
            else\n
                v3 = -9 + v11;\n
            v10 = v3;\n
            v2 = v10;\n
        }\n
    }\n
    return 0;\n
}\n
", "4203379:sub_402373": null, "4203392:cgc_perform_rpncalc_op": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_perform_rpncalc_op(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = a0;\n
    if (v2 >= 8)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    v0 = v4;\n
    v3 = *((v1 + v2 * 4 + 68))();\n
    return v3;\n
}\n
", "4203481:sub_4023d9": null, "4203488:cgc_list_remove": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_2 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
int cgc_list_remove(unsigned int v0[2], struct_0 *a0)\n
{\n
    unsigned int v1;  // eax\n
\n
    if (!a0)\n
        return v0;\n
    if (!a0->field_4)\n
        v0[0] = a0->field_0;\n
    else\n
        a0->field_4->field_0 = a0->field_0;\n
    if (!a0->field_0)\n
    {\n
        v1 = v0;\n
        *((v1 + 4)) = a0->field_4;\n
        return v0;\n
    }\n
    v1 = a0->field_0;\n
    *((v1 + 4)) = a0->field_4;\n
    return a0->field_0;\n
}\n
", "4203598:sub_40244e": null, "4203600:cgc_get_type": null, "4203708:sub_4024bc": null, "4203712:cgc_as_matrix": null, "4203824:cgc_push": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_push(unsigned int v14)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2[2];  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    void* v6;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v7;  // [bp-0x24]\n
    char v8;  // [bp-0x20]\n
    char v9;  // [bp-0x18]\n
    char v10;  // [bp-0x14]\n
    void* v11;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0xc]\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
\n
    v13 = v15;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = 0;\n
    v2[0] = 0;\n
    v11 = cgc_malloc(16);\n
    if (!v11)\n
    {\n
        v12 = -1;\n
        return v12;\n
    }\n
    if (cgc_read_all(0, &v10, 4) != 4)\n
    {\n
LABEL_4027cb:\n
        cgc_free(v11);\n
        v12 = -1;\n
        return v12;\n
    }\n
    v0 = *(&v10);\n
    if (!v0)\n
    {\n
        if (!(cgc_read_all(0, &v9, 4) == 4))\n
            goto LABEL_4027cb;\n
        cgc_set_integer(*(&v9));\n
        goto LABEL_402799;\n
    }\n
    if (v0 != 1)\n
    {\n
        if (!(v0 == 2))\n
            goto LABEL_4027cb;\n
        if (!(cgc_read_all(0, &v7, 8) == 8))\n
            goto LABEL_4027cb;\n
        if (!(~(*(&v8)) & 0x7ff00000))\n
            goto LABEL_4027cb;\n
        if ([D] GetI(136:I8x8)[t7,0])\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(136:I8x8)[t14,0] = 0x00\n
        cgc_set_double();\n
        goto LABEL_402799;\n
    }\n
    v5 = (*(&v10) & -0x1000000) >> 24;\n
    v4 = (*(&v10) & 0xff0000) >> 16;\n
    v3 = v4 * v5 * 8;\n
    if (v5 && v4)\n
    {\n
        v2[0] = cgc_malloc(v3 + 8);\n
        if (!v2)\n
            goto LABEL_4027cb;\n
        v2[0] = v5;\n
        v2[1] = v4;\n
        if (cgc_read_all(0, v2 + 1, v3) == v3)\n
        {\n
            v6 = 0;\n
            while (true)\n
            {\n
                if (v6 >= v3 >> 3)\n
                {\n
                    cgc_set_matrix(v2);\n
LABEL_402799:\n
                    cgc_list_push_front(v14);\n
                    v12 = 0;\n
                    return v12;\n
                }\n
                if (!(~(*((12 + &v2[0] + 0x8 * v6))) & 0x7ff00000))\n
                    break;\n
                v6 += 1;\n
            }\n
        }\n
        cgc_free(v2);\n
        goto LABEL_4027cb;\n
    }\n
    goto LABEL_4027cb;\n
}\n
", "4204521:sub_4027e9": null, "4204528:cgc_pop": null, "4205235:sub_402ab3": null, "4205248:cgc_add": "int cgc_add(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = cgc_generic_add;\n
    return cgc_binary_op(v1);\n
}\n
", "4205297:sub_402af1": null, "4205312:cgc_sub": "int cgc_sub(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = cgc_generic_sub;\n
    return cgc_binary_op(v1);\n
}\n
", "4205361:sub_402b31": null, "4205376:cgc_mul": "int cgc_mul(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = cgc_generic_mul;\n
    return cgc_binary_op(v1);\n
}\n
", "4205425:sub_402b71": null, "4205440:cgc_div": "int cgc_div(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = cgc_generic_div;\n
    return cgc_binary_op(v1);\n
}\n
", "4205489:sub_402bb1": null, "4205504:cgc_inv": null, "4205944:sub_402d78": null, "4205952:cgc_set_integer": "int cgc_set_integer(unsigned int v6, unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10]\n
    unsigned int v4[2];  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // esi\n
    unsigned int v8[2];  // eax\n
    unsigned int v9;  // esi\n
\n
    v5 = v7;\n
    v4[0] = a0;\n
    v3 = 0;\n
    v2 = 0;\n
    v0 = v6;\n
    v1 = 0;\n
    v8 = v4;\n
    v8[0] = v2 | v0;\n
    v8[1] = v3 | v1 | 0x7ff80000;\n
    v9 = v5;\n
    return v4;\n
}\n
", "4206034:sub_402dd2": null, "4206048:cgc_set_matrix": "int cgc_set_matrix(unsigned int v6, unsigned int a0[2])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4[2];  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // esi\n
    unsigned int v8[2];  // eax\n
    unsigned int v9;  // esi\n
\n
    v5 = v7;\n
    v4[0] = a0;\n
    v3 = 1;\n
    v2 = 0;\n
    v0 = v6;\n
    v1 = 0;\n
    v8 = v4;\n
    v8[0] = v2 | v0;\n
    v8[1] = v3 | v1 | 0x7ff80000;\n
    v9 = v5;\n
    return v4;\n
}\n
", "4206130:sub_402e32": null, "4206144:cgc_set_double": "int cgc_set_double()\n
{\n
    char v0;  // [bp-0x4]\n
    unsigned long long *v2;  // [bp+0xc]\n
    unsigned int v3;  // ebp\n
\n
    if ([D] GetI(136:I8x8)[t12,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,0] = t8\n
    [D] PutI(136:I8x8)[t7,0] = 0x01\n
    [D] PutI(136:I8x8)[t7,0] = 0x00\n
    [D] PutI(72:F64x8)[t21,0] = t24\n
    [D] PutI(136:I8x8)[t21,0] = 0x01\n
    *(v2) = ([D] GetI(136:I8x8)[t37,0] ? [D] GetI(72:F64x8)[t37,0] : nan);\n
    [D] PutI(136:I8x8)[t37,0] = 0x00\n
    v3 = *(&v0);\n
    return;\n
}\n
", "4206165:sub_402e55": null, "4206176:cgc_list_push_front": "int cgc_list_push_front(unsigned int *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return ::0x402ea0::cgc_list_insert_before(v1, *(v1));\n
}\n
", "4206234:sub_402e9a": null, "4206240:cgc_list_insert_before": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    struct struct_1 *field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_list_insert_before(struct_3 *v0, struct_0 *a0, unsigned int a1[2])\n
{\n
    struct_3 *v1;  // eax, Other Possible Types: unsigned int, struct_0 *\n
    unsigned int v2[2];  // ecx\n
\n
    if (!a1)\n
        return v0;\n
    a1[1] = 0;\n
    a1[0] = 0;\n
    if (!v0->field_0 && !v0->field_4)\n
    {\n
        v2 = a1;\n
        v0->field_4 = &v2[0];\n
        v1 = v0;\n
        *(v1) = v2;\n
        return v0;\n
    }\n
    if (!a0)\n
    {\n
        a1[1] = v0->field_4;\n
        v0->field_4->field_0 = a1;\n
        a1[0] = 0;\n
        v1 = v0;\n
        v1->field_4 = &a1[0];\n
    }\n
    else if (a0 == v0->field_0)\n
    {\n
        a1[0] = v0->field_0;\n
        v0->field_0->field_4 = a1;\n
        a1[1] = 0;\n
        v1 = v0;\n
        v1->field_0 = &a1[0];\n
    }\n
    else\n
    {\n
        a1[1] = a0->field_4;\n
        a1[0] = a0;\n
        a0->field_4->field_0 = a1;\n
        v1 = a0;\n
        v1->field_4 = &a1[0];\n
    }\n
    return v1;\n
}\n
", "4206496:cgc_list_pop_front": "int cgc_list_pop_front(unsigned int *v1)\n
{\n
    void* v0;  // [bp-0xc]\n
\n
    v0 = *(v1);\n
    ::0x4023e0::cgc_list_remove(v1, v0);\n
    return v0;\n
}\n
", "4206553:sub_402fd9": null, "4206560:cgc_as_integer": null, "4206699:sub_40306b": null, "4206704:cgc_as_double": null, "4206816:cgc_binary_op": null, "4207454:sub_40335e": null, "4207456:cgc_generic_add": null, "4209292:sub_403a8c": null, "4209296:cgc_list_length": "int cgc_list_length(struct struct_0 **v2)\n
{\n
    struct struct_0 **v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    for (v0 = &*(v2)->field_0; v0; v0 = *(v0))\n
    {\n
        v1 += 1;\n
    }\n
    return v1;\n
}\n
", "4209360:cgc_swap": "int cgc_swap(unsigned long long *v1, unsigned long long *a0)\n
{\n
    unsigned long v0;  // [bp-0xc]\n
\n
    [D] PutI(72:F64x8)[t36,0] = t39\n
    [D] PutI(136:I8x8)[t36,0] = 0x01\n
    v0 = ([D] GetI(136:I8x8)[t51,0] ? [D] GetI(72:F64x8)[t51,0] : nan);\n
    [D] PutI(136:I8x8)[t51,0] = 0x00\n
    [D] PutI(72:F64x8)[t61,0] = t64\n
    [D] PutI(136:I8x8)[t61,0] = 0x01\n
    *(v1) = ([D] GetI(136:I8x8)[t77,0] ? [D] GetI(72:F64x8)[t77,0] : nan);\n
    [D] PutI(136:I8x8)[t77,0] = 0x00\n
    [D] PutI(72:F64x8)[t86,0] = t89\n
    [D] PutI(136:I8x8)[t86,0] = 0x01\n
    *(a0) = ([D] GetI(136:I8x8)[t102,0] ? [D] GetI(72:F64x8)[t102,0] : nan);\n
    [D] PutI(136:I8x8)[t102,0] = 0x00\n
    return a0;\n
}\n
", "4209403:sub_403afb": null, "4209408:cgc_generic_sub": null, "4210069:sub_403d95": null, "4210080:cgc_generic_mul": null, "4212330:sub_40466a": null, "4212336:cgc_generic_div": null, "4214596:sub_404f44": null, "4214608:cgc_matrix_inv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_matrix_inv(unsigned int v4[2], struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned long v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4 + 1;\n
    if (!a0)\n
    {\n
        v3 = -1;\n
        return v3;\n
    }\n
    if (v4[0] == v4[1] && v4[0] <= 2)\n
    {\n
        if (v4[0] == 1)\n
        {\n
            [D] PutI(72:F64x8)[t6,0] = t9\n
            [D] PutI(136:I8x8)[t6,0] = 0x01\n
            v2 = ([D] GetI(136:I8x8)[t21,0] ? [D] GetI(72:F64x8)[t21,0] : nan);\n
            [D] PutI(136:I8x8)[t21,0] = 0x00\n
        }\n
        else if (v4[0] == 2)\n
        {\n
            [D] PutI(72:F64x8)[t11,0] = t14\n
            [D] PutI(136:I8x8)[t11,0] = 0x01\n
            [D] PutI(72:F64x8)[t23,0] = t26\n
            [D] PutI(136:I8x8)[t23,0] = 0x01\n
            [D] PutI(72:F64x8)[t35,0] = t38\n
            [D] PutI(136:I8x8)[t35,0] = 0x01\n
            [D] PutI(72:F64x8)[t47,0] = t50\n
            [D] PutI(136:I8x8)[t47,0] = 0x01\n
            [D] PutI(72:F64x8)[t57,1] = t58\n
            [D] PutI(136:I8x8)[t57,1] = 0x01\n
            [D] PutI(136:I8x8)[t57,0] = 0x00\n
            [D] PutI(72:F64x8)[t80,0] = t84\n
            [D] PutI(136:I8x8)[t80,0] = 0x01\n
            [D] PutI(72:F64x8)[t80,2] = t77\n
            [D] PutI(136:I8x8)[t80,2] = 0x01\n
            [D] PutI(72:F64x8)[t95,1] = t96\n
            [D] PutI(136:I8x8)[t95,1] = 0x01\n
            [D] PutI(136:I8x8)[t95,0] = 0x00\n
            [D] PutI(72:F64x8)[t115,1] = t116\n
            [D] PutI(136:I8x8)[t115,1] = 0x01\n
            [D] PutI(136:I8x8)[t115,0] = 0x00\n
            v2 = ([D] GetI(136:I8x8)[t140,0] ? [D] GetI(72:F64x8)[t140,0] : nan);\n
            [D] PutI(136:I8x8)[t140,0] = 0x00\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        if (!(~((&v2)[1]) & 0x7ff00000))\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        v5 = cgc_malloc(v4[1] * v4[0] * 8 + 8);\n
        *(a0) = v5;\n
        if (!v5)\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
        *(a0)->field_0 = v4[0];\n
        *(a0)->field_4 = v4[1];\n
        if (*(a0)->field_0 == 1)\n
        {\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
            [D] PutI(72:F64x8)[t13,1] = t14\n
            [D] PutI(136:I8x8)[t13,1] = 0x01\n
            [D] PutI(136:I8x8)[t13,0] = 0x00\n
            *(&*(a0)->field_8) = ([D] GetI(136:I8x8)[t42,0] ? [D] GetI(72:F64x8)[t42,0] : nan);\n
            [D] PutI(136:I8x8)[t42,0] = 0x00\n
        }\n
        else if (*(a0)->field_0 == 2)\n
        {\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t21,1] = t22\n
            [D] PutI(136:I8x8)[t21,1] = 0x01\n
            [D] PutI(136:I8x8)[t21,0] = 0x00\n
            *(&*(a0)->field_8) = ([D] GetI(136:I8x8)[t50,0] ? [D] GetI(72:F64x8)[t50,0] : nan);\n
            [D] PutI(136:I8x8)[t50,0] = 0x00\n
            [D] PutI(72:F64x8)[t62,0] = t65\n
            [D] PutI(136:I8x8)[t62,0] = 0x01\n
            [D] PutI(72:F64x8)[t72,0] = t73\n
            [D] PutI(136:I8x8)[t72,0] = 0x01\n
            [D] PutI(72:F64x8)[t84,0] = t87\n
            [D] PutI(136:I8x8)[t84,0] = 0x01\n
            [D] PutI(72:F64x8)[t94,1] = t95\n
            [D] PutI(136:I8x8)[t94,1] = 0x01\n
            [D] PutI(136:I8x8)[t94,0] = 0x00\n
            *(&*(a0)->field_10) = ([D] GetI(136:I8x8)[t123,0] ? [D] GetI(72:F64x8)[t123,0] : nan);\n
            [D] PutI(136:I8x8)[t123,0] = 0x00\n
            [D] PutI(72:F64x8)[t135,0] = t138\n
            [D] PutI(136:I8x8)[t135,0] = 0x01\n
            [D] PutI(72:F64x8)[t145,0] = t146\n
            [D] PutI(136:I8x8)[t145,0] = 0x01\n
            [D] PutI(72:F64x8)[t157,0] = t160\n
            [D] PutI(136:I8x8)[t157,0] = 0x01\n
            [D] PutI(72:F64x8)[t167,1] = t168\n
            [D] PutI(136:I8x8)[t167,1] = 0x01\n
            [D] PutI(136:I8x8)[t167,0] = 0x00\n
            *(&*(a0)->field_18) = ([D] GetI(136:I8x8)[t196,0] ? [D] GetI(72:F64x8)[t196,0] : nan);\n
            [D] PutI(136:I8x8)[t196,0] = 0x00\n
            [D] PutI(72:F64x8)[t206,0] = t209\n
            [D] PutI(136:I8x8)[t206,0] = 0x01\n
            [D] PutI(72:F64x8)[t218,0] = t221\n
            [D] PutI(136:I8x8)[t218,0] = 0x01\n
            [D] PutI(72:F64x8)[t228,1] = t229\n
            [D] PutI(136:I8x8)[t228,1] = 0x01\n
            [D] PutI(136:I8x8)[t228,0] = 0x00\n
            *(&*(a0)->field_20) = ([D] GetI(136:I8x8)[t257,0] ? [D] GetI(72:F64x8)[t257,0] : nan);\n
            [D] PutI(136:I8x8)[t257,0] = 0x00\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4215054:sub_40510e": null, "4215056:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1[2];  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    cgc_rpncalc_init(v1);\n
    while (true)\n
    {\n
        do\n
        { } while (cgc_read_all(0, &v3, 4) != 4);\n
        if (*(&v3) == -1)\n
            break;\n
        v2 = cgc_perform_rpncalc_op(v1, *(&v3));\n
        cgc_write_all(1, &v2, 4);\n
    }\n
    cgc_rpncalc_destroy(v1);\n
    v8 = v5;\n
    return 0;\n
}\n
", "4215244:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_transmit": null, "5242888:cgc_allocate": null, "5242892:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}