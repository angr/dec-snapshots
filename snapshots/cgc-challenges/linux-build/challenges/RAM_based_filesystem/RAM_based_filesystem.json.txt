{"4202496:_init": "extern struct_0 *g_40b4b0;\n
\n
int _init()\n
{\n
    if (g_40b4b0)\n
    {\n
        g_40b4b0();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:sub_4020d0": "int sub_4020d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202710:sub_4020d6": null, "4202720:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202763:sub_40210b": null, "4202764:sub_40210c": "int sub_40210c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202768:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202772:sub_402114": null, "4202784:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 37783;\n
    v6 = v5 + 47;\n
    v7 = v5 + 47;\n
    if (v7 == v6)\n
        return v5 + 47;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202835:sub_402153": "int sub_402153()\n
{\n
}\n
", "4202841:sub_402159": "int sub_402159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202848:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 37719;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 47;\n
    v9 = (v6 + 47 - (v6 + 47) >> 31) + (47 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202919:sub_4021a7": "int sub_4021a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202928:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40b4ac;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40b4ac)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020d0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203003:sub_4021fb": "int sub_4021fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203008:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203017:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203021:sub_40220d": null, "4203024:cgc_floor": null, "4203188:sub_4022b4": null, "4203200:cgc_round_away_from_zero": null, "4203354:sub_40235a": null, "4203360:cgc_round": null, "4203504:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203596:sub_40244c": null, "4203600:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4203809:sub_402521": null, "4203824:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v3 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4204017:sub_4025f1": null, "4204032:cgc_float_to_str": null, "4204890:sub_40295a": null, "4204896:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v14, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x7c]\n
    unsigned int v2;  // [bp-0x78]\n
    char *v3;  // [bp-0x74], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x70], Other Possible Types: unsigned int\n
    unsigned long v5;  // [bp-0x6c]\n
    struct_1 *v6;  // [bp-0x64], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x60]\n
    struct_1 *v8;  // [bp-0x5c], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x58]\n
    char v10;  // [bp-0x51]\n
    char v11;  // [bp-0x50]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0xc]\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    if (!v14)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v13 = v12;\n
            return v13;\n
        }\n
        else if (*(v14) != 64)\n
        {\n
            cgc_putc(*(v14));\n
            v14 += 1;\n
            v12 += 1;\n
        }\n
        else\n
        {\n
            v14 += 1;\n
            v1 = *(v14);\n
            if (!v1)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            if (v1 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v1 == 99)\n
            {\n
                v15 = a0;\n
                a0 = v15 + 1;\n
                v10 = *(v15);\n
                cgc_putc(v10);\n
            }\n
            else if (v1 == 100)\n
            {\n
                v16 = a0;\n
                a0 = v16 + 1;\n
                v9 = &*(v16)->field_0;\n
                cgc_int_to_str(v9, &v11);\n
                for (v8 = &v11; v8->field_0; v8 += 1)\n
                {\n
                    cgc_putc(v8->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t23,0] = t26\n
                [D] PutI(136:I8x8)[t23,0] = 0x01\n
                v5 = ([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan);\n
                [D] PutI(136:I8x8)[t38,0] = 0x00\n
                v19 = ftop<4> - 1 + 1;\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t47,0] = t50\n
                [D] PutI(136:I8x8)[t47,0] = 0x01\n
                v0 = &v11;\n
                [D] PutI(136:I8x8)[t66,0] = 0x00\n
                v21 = v20 + 1;\n
                cgc_float_to_str();\n
                for (v4 = &v11; v4->field_0; v4 += 1)\n
                {\n
                    cgc_putc(v4->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 115)\n
            {\n
                v22 = a0;\n
                a0 = v22 + 1;\n
                for (v3 = &*(v22)->field_0; *(v3); v3 += 1)\n
                {\n
                    cgc_putc(*(v3));\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 120)\n
            {\n
                v23 = a0;\n
                a0 = v23 + 1;\n
                v7 = &*(v23)->field_0;\n
                cgc_int_to_hex(v7, &v11);\n
                for (v6 = &v11; v6->field_0; v6 += 1)\n
                {\n
                    cgc_putc(v6->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            v14 += 1;\n
        }\n
    }\n
}\n
", "4205646:sub_402c4e": null, "4205648:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4205706:sub_402c8a": null, "4205712:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v0;\n
}\n
", "4205784:sub_402cd8": null, "4205792:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205846:sub_402d16": null, "4205856:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4205910:sub_402d56": null, "4205920:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4205986:sub_402da2": null, "4206000:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4206066:sub_402df2": null, "4206080:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206134:sub_402e36": null, "4206144:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206238:sub_402e9e": null, "4206240:cgc_isnan": null, "4206263:sub_402eb7": null, "4206272:cgc_isinf": null, "4206319:sub_402eef": null, "4206320:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_403122:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_4030fb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_4030fb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_4030fb;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_403122;\n
                if (!v4)\n
                {\n
LABEL_403077:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_4030fb;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_403077;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_4030fb:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4206908:sub_40313c": null, "4206912:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4207316:sub_4032d4": null, "4207328:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4207419:sub_40333b": null, "4207424:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = v1[a0];\n
        if (!(v0 & 1))\n
            break;\n
        v1[v2] = v1[a0];\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        v1[v2] = 0;\n
    }\n
    return v2;\n
}\n
", "4207579:sub_4033db": null, "4207584:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4207692:sub_40344c": null, "4207696:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4207774:sub_40349e": null, "4207776:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4207884:sub_40350c": null, "4207888:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4208083:sub_4035d3": null, "4208096:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4208173:sub_40362d": null, "4208176:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        if (v2 == a0)\n
            return v4;\n
        v4[v5] = v2;\n
        v4 += 1;\n
    }\n
}\n
", "4208390:sub_403706": null, "4208400:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208559:sub_4037af": null, "4208560:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4208759:sub_403877": null, "4208768:cgc_puts": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: char\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v5)\n
        return v5;\n
    v2 = cgc_strlen(v5);\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 >= v2)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                if (v4 == 1)\n
                    return v6;\n
                v0 = &v4;\n
                v6 = cgc_transmit(1, v1 - 8017, 1);\n
                if (v6)\n
                    return v6;\n
            }\n
        }\n
        else\n
        {\n
            v0 = &v4;\n
            v6 = cgc_transmit(1, v5 + v3, v2 - v3);\n
            if (v6)\n
                return v6;\n
            v3 = *(&v4) + v3;\n
        }\n
    }\n
}\n
", "4208996:sub_403964": null, "4209008:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4209114:sub_4039da": null, "4209120:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[192];\n
    unsigned int field_c0;\n
    unsigned int field_c4;\n
    unsigned int field_c8;\n
    struct struct_1 *field_cc;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_c4)\n
        {\n
            cgc_deallocate(v4->field_c4);\n
            v12 = v4;\n
            v12->field_c4 = 0;\n
            v12->field_c8 = 0;\n
            v12->field_cc = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_c4)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_cc >= v11->field_c4 + v11->field_c8)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_c4)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_c8 = cgc_strlen(v10);\n
        v0 = &v13->field_c4;\n
        if (cgc_allocate(v13->field_c8, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_c4, v10);\n
        v14 = v4;\n
        v14->field_cc = v14->field_c4;\n
    }\n
    v10 = &v4->field_cc->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_c4 + v15->field_c8;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_c4 + v16->field_c8)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_c0 = v8;\n
    *(v7) = 0;\n
    v17->field_cc = v7 + 1;\n
    v9 = v17->field_c0;\n
    return v9;\n
}\n
", "4209867:sub_403ccb": null, "4209872:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 < a0)\n
        {\n
            v0 = &v3;\n
            if (cgc_transmit(1, v5 + v2, a0 - v2))\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            v2 = *(&v3) + v2;\n
        }\n
        else\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
    }\n
}\n
", "4210037:sub_403d75": null, "4210048:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4210240:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc();\n
    cgc_memset(v1, 0, v3 * a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4210330:sub_403e9a": null, "4210336:cgc_malloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_heap_manager;\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    char v0;  // [bp-0x1d]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(0x1000, 0);\n
        v7 = v1;\n
        *((v7 + 208)) = *(&v3);\n
        *(*((v7 + 208))) = 0x1000;\n
        *((*((v7 + 208)) + 8)) = 4;\n
        *((*((v7 + 208)) + 4)) = 0x1000 - *((*((v7 + 208)) + 8));\n
        cgc_allocate(0x1000, 0);\n
        cgc_memset(*((*((v1 + 208)) + 12)), 0, 0x1000);\n
        v4 = *((*((v1 + 208)) + 12));\n
        *(v4) = 4084;\n
        *((v4 + 4)) = 0;\n
    }\n
    v4 = *((*((v1 + 208)) + 12));\n
    if (v6 > *(v4))\n
    {\n
        cgc_allocate(0x1000, 0);\n
        if (!*((v4 + 4)))\n
        {\n
            cgc_puts(v1 - 9332);\n
            cgc__terminate();\n
        }\n
        v4 = *((v4 + 4));\n
        *(v4) = 4084;\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        *(v8) = *(v8) - v6;\n
        v2 = v4 + 8;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v2 + 4)) & 1))\n
                v0 = *(v2) < v6 + 8;\n
            if (!(v0 & 1))\n
                break;\n
            v2 = v2 + 8 + *(v2);\n
        }\n
        *(v2) = v6;\n
        *((v2 + 4)) = 1;\n
        v5 = v2 + 8;\n
        return v5;\n
    }\n
}\n
", "4210849:sub_4040a1": null, "4210864:cgc_free": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    struct_1 *v1;  // [bp-0x8]\n
    struct_0 *v3;  // eax\n
\n
    v1 = v2 - 8;\n
    v1->field_4 = 2;\n
    v0 = &v2 & -0x1000;\n
    v3 = v0;\n
    *(&v3) = v1->field_0 + *(&v3);\n
    return v0;\n
}\n
", "4210917:sub_4040e5": null, "4210928:cgc_LsHandler": "typedef struct struct_0 {\n
    char padding_0[2528];\n
    unsigned int field_9e0;\n
    char padding_9e4[260];\n
    struct struct_1 *field_ae8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_LsHandler()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110]\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC == 1)\n
    {\n
        v3 = cgc_ls();\n
        return v3;\n
    }\n
    else if (v1->field_9e0 != 2)\n
    {\n
        cgc_puts(&v1[3].padding_0[533]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v1->field_ae8->field_0 != 47)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        v0 = cgc_strlen(&v1->padding_9e4);\n
        if (v0 + cgc_strlen(v1->field_ae8) + 1 > 255)\n
        {\n
            cgc_puts(&v1[3].padding_0[579]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(&v2, &v1->padding_9e4);\n
        cgc_strcat(&v2, v1->field_ae8);\n
        v3 = cgc_ls(&v2);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = cgc_ls();\n
        return v3;\n
    }\n
}\n
", "4211359:sub_40429f": null, "4211360:cgc_CatHandler": "typedef struct struct_0 {\n
    char padding_0[2792];\n
    struct struct_1 *field_ae8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_CatHandler()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110]\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(&v1[3].padding_0[408]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v1->field_ae8->field_0 != 47)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        v0 = cgc_strlen(&v1->padding_0[2532]);\n
        if (v0 + cgc_strlen(v1->field_ae8) + 1 > 255)\n
        {\n
            cgc_puts(&v1[3].padding_0[579]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(&v2, &v1->padding_0[2532]);\n
        cgc_strcat(&v2, v1->field_ae8);\n
        v3 = cgc_ReadFile(&v2);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = cgc_ReadFile();\n
        return v3;\n
    }\n
}\n
", "4211742:sub_40441e": null, "4211744:cgc_RmHandler": "typedef struct struct_0 {\n
    char padding_0[2792];\n
    struct struct_1 *field_ae8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_RmHandler()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110]\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(&v1[3].padding_0[509]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v1->field_ae8->field_0 != 47)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        v0 = cgc_strlen(&v1->padding_0[2532]);\n
        if (v0 + cgc_strlen(v1->field_ae8) + 1 > 255)\n
        {\n
            cgc_puts(&v1[3].padding_0[579]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(&v2, &v1->padding_0[2532]);\n
        cgc_strcat(&v2, v1->field_ae8);\n
        v3 = cgc_unlink(&v2);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = cgc_unlink();\n
        return v3;\n
    }\n
}\n
", "4212126:sub_40459e": null, "4212128:cgc_MkdirHandler": "typedef struct struct_0 {\n
    char padding_0[2792];\n
    struct struct_1 *field_ae8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_MkdirHandler()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110]\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(&v1[3].padding_0[607]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v1->field_ae8->field_0 != 47)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        v0 = cgc_strlen(&v1->padding_0[2532]);\n
        if (v0 + cgc_strlen(v1->field_ae8) + 1 > 255)\n
        {\n
            cgc_puts(&v1[3].padding_0[579]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(&v2, &v1->padding_0[2532]);\n
        cgc_strcat(&v2, v1->field_ae8);\n
        v3 = cgc_mkdir(&v2);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = cgc_mkdir();\n
        return v3;\n
    }\n
}\n
", "4212510:sub_40471e": null, "4212512:cgc_RmdirHandler": "typedef struct struct_0 {\n
    char padding_0[2792];\n
    struct struct_1 *field_ae8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_RmdirHandler()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110]\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC != 2)\n
    {\n
        cgc_puts(&v1[3].padding_0[562]);\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v1->field_ae8->field_0 != 47)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        v0 = cgc_strlen(&v1->padding_0[2532]);\n
        if (v0 + cgc_strlen(v1->field_ae8) + 1 > 255)\n
        {\n
            cgc_puts(&v1[3].padding_0[579]);\n
            v3 = 0;\n
            return v3;\n
        }\n
        cgc_strcpy(&v2, &v1->padding_0[2532]);\n
        cgc_strcat(&v2, v1->field_ae8);\n
        v3 = cgc_rmdir(&v2);\n
        return v3;\n
    }\n
    else\n
    {\n
        v3 = cgc_rmdir();\n
        return v3;\n
    }\n
}\n
", "4212894:sub_40489e": null, "4212896:cgc_ExitHandler": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ExitHandler()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    char v2;  // [bp-0x4]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v2;\n
    v1 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_puts(\"bye\");\n
    v6 = v0;\n
    cgc__terminate();\n
    cgc_EchoHandler();\n
    return;\n
}\n
", "4212960:cgc_EchoHandler": "typedef struct struct_0 {\n
    char padding_0[2528];\n
    unsigned int field_9e0;\n
    char padding_9e4[260];\n
    unsigned int field_ae8;\n
    unsigned int field_aec;\n
    struct struct_1 *field_af0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[2528];\n
    unsigned int field_9e0;\n
    char padding_9e4[260];\n
    unsigned int field_ae8;\n
    char *field_aec;\n
    struct struct_1 *field_af0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_EchoHandler()\n
{\n
    unsigned int v0;  // [bp-0x228]\n
    unsigned int v1;  // [bp-0x220]\n
    unsigned int v2;  // [bp-0x21c]\n
    struct_0 *v3;  // [bp-0x218]\n
    unsigned int v4;  // [bp-0x214]\n
    unsigned int v5;  // [bp-0x210]\n
    char v6;  // [bp-0x20c]\n
    char v7;  // [bp-0x10c]\n
    unsigned int v8;  // [bp-0xc]\n
    struct_2 *v10;  // ebx\n
    struct_2 *v11;  // ebx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_ARGC >= 2 && v3->field_9e0 != 3)\n
    {\n
        if (v3->field_9e0 == 2)\n
        {\n
            cgc_bzero(&v6, 0x100);\n
            v0 = v3->field_ae8;\n
            cgc_strncpy(&v6, v0, 255);\n
            v4 = cgc_Unescape(&v6, v0);\n
            if (v4 == -1)\n
            {\n
                cgc_puts(&v3[3].padding_0[431]);\n
                v8 = -1;\n
                return v8;\n
            }\n
            cgc_write(&v6, v4);\n
            v8 = 0;\n
            return v8;\n
        }\n
        else\n
        {\n
            if (v3->field_9e0 == 4)\n
            {\n
                cgc_bzero(&v7, 0x100);\n
                if (v3->field_af0->field_0 != 47)\n
                {\n
                    v2 = cgc_strlen(&v3->padding_9e4);\n
                    if (v2 + cgc_strlen(v3->field_af0) + 1 > 255)\n
                    {\n
                        cgc_puts(&v3[3].padding_0[555]);\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                    cgc_strcpy(&v7, &v3->padding_9e4);\n
                    cgc_strcat(&v7, v3->field_af0);\n
                }\n
                else if (cgc_strlen(v3->field_af0) <= 255)\n
                {\n
                    cgc_strcpy(&v7, v3->field_af0);\n
                }\n
                else\n
                {\n
                    cgc_puts(&v3[3].padding_0[407]);\n
                    v8 = -1;\n
                    return v8;\n
                }\n
                v10 = v3;\n
                if (cgc_strcmp(v10->field_aec, &v10[3].padding_0[388]))\n
                {\n
                    v11 = v3;\n
                    if (cgc_strcmp(v11->field_aec, &v11[3].padding_0[389]))\n
                    {\n
                        cgc_puts(&v3[3].padding_0[464]);\n
                        v8 = 0;\n
                        return v8;\n
                    }\n
                    v5 = cgc_fopen(&v7);\n
                    if (!v5)\n
                    {\n
                        cgc_puts(&v3[3].padding_0[431]);\n
                        v8 = -1;\n
                        return v8;\n
                    }\n
                    cgc_bzero(&v6, 0x100);\n
                    v0 = v3->field_ae8;\n
                    cgc_strncpy(&v6, v0, 255);\n
                    v4 = cgc_Unescape(&v6, v0);\n
                    if (v4 == -1)\n
                    {\n
                        cgc_fclose();\n
                        cgc_puts(&v3[3].padding_0[431]);\n
                        v8 = -1;\n
                        return v8;\n
                    }\n
                    v0 = v4;\n
                    v1 = v5;\n
                    cgc_fwrite(&v6, v0, 1);\n
                    cgc_fclose(v5, v0, 1);\n
                }\n
                else\n
                {\n
                    v5 = cgc_fopen(&v7);\n
                    if (!v5)\n
                    {\n
                        cgc_puts(&v3[3].padding_0[431]);\n
                        v8 = -1;\n
                        return v8;\n
                    }\n
                    cgc_bzero(&v6, 0x100);\n
                    v0 = v3->field_ae8;\n
                    cgc_strncpy(&v6, v0, 255);\n
                    v4 = cgc_Unescape(&v6, v0);\n
                    if (v4 == -1)\n
                    {\n
                        cgc_puts(&v3[3].padding_0[431]);\n
                        cgc_fclose();\n
                        v8 = -1;\n
                        return v8;\n
                    }\n
                    v0 = v4;\n
                    v1 = v5;\n
                    cgc_fwrite(&v6, v0, 1);\n
                    cgc_fclose(v5, v0, 1);\n
                }\n
            }\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    cgc_puts(&v3[3].padding_0[464]);\n
    v8 = 0;\n
    return v8;\n
}\n
", "4214414:sub_404e8e": null, "4214416:cgc_DfHandler": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ARGC;\n
\n
int cgc_DfHandler()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_ARGC == 1)\n
        cgc_StatusFS();\n
    else\n
        cgc_puts(v0 - 8774);\n
    v1 = 0;\n
    return v1;\n
}\n
", "4214506:sub_404eea": null, "4214512:cgc_HelpHandler": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_cmds[3];\n
\n
int cgc_HelpHandler()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v3[0] = &cgc_cmds[0]; v3[0]; v3 += 1)\n
    {\n
        v0 = v3[0];\n
        cgc_printf(v1 - 8777);\n
        v2 = 20 - cgc_strlen(v3[0]);\n
        while (true)\n
        {\n
            v5 = v2;\n
            v2 = v5 - 1;\n
            if (v5 <= 0)\n
                break;\n
            cgc_printf(v1 - 7883);\n
        }\n
        v0 = v3[2];\n
        cgc_printf(v1 - 7891);\n
    }\n
    return 0;\n
}\n
", "4214700:sub_404fac": null, "4214704:cgc_readUntil": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readUntil(char *v6, unsigned int a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x14]\n
    char v4;  // [bp-0xd]\n
    unsigned int v5;  // [bp-0xc]\n
    char *v7;  // eax\n
    char *v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(0, &v4, 1))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (*(&v3) != 1)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v4 == a1)\n
            break;\n
        v7 = v6;\n
        v6 = v7 + 1;\n
        *(v7) = v4;\n
    }\n
    v8 = v6;\n
    v6 = v8 + 1;\n
    *(v8) = 0;\n
    v5 = v2;\n
    return v5;\n
}\n
", "4214916:sub_405084": null, "4214928:cgc_Unescape": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_Unescape(char v6[4])\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3[4];  // [bp-0x18], Other Possible Types: unsigned int\n
    char v4[4];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    for (*(&v4[0]) = v6; *(v4); v4 += 1)\n
    {\n
        if (*(v4) == 92 && *((v4 + 1)) == 120)\n
        {\n
            v0 = *((v4 + 2));\n
            if (cgc_IsHex())\n
            {\n
                v0 = *((v4 + 3));\n
                if (cgc_IsHex())\n
                {\n
                    v0 = v4 + 2;\n
                    *(v4) = cgc_Hex2Char();\n
                    *(&v3[0]) = v4 + 1;\n
                    while (true)\n
                    {\n
                        v1 = 0;\n
                        if (*(v3))\n
                            v1 = *((v3 + 3));\n
                        if (!(v1 & 1))\n
                            break;\n
                        *(v3) = *((v3 + 3));\n
                        v3 += 1;\n
                    }\n
                    *(v3) = 0;\n
                }\n
            }\n
        }\n
    }\n
    v5 = v4 - v6;\n
    return v5;\n
}\n
", "4215233:sub_4051c1": null, "4215248:cgc_IsHex": "int cgc_IsHex(char v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (v1 >= 97 && v1 <= 102)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    if (v1 >= 65 && v1 <= 70)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4215384:sub_405258": null, "4215392:cgc_Hex2Char": "int cgc_Hex2Char(char v2[2])\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2[0] >= 48 && v2[0] <= 57)\n
        v1 += (v2[0] - 48) * 16;\n
    if (v2[0] >= 97 && v2[0] <= 102)\n
        v1 += (v2[0] + -87) * 16;\n
    if (v2[0] >= 65 && v2[0] <= 70)\n
        v1 += (v2[0] + -55) * 16;\n
    if (v2[1] >= 48 && v2[1] <= 57)\n
        v1 += v2[1] - 48;\n
    if (v2[1] >= 97 && v2[1] <= 102)\n
        v1 += v2[1] + -87;\n
    if (v2[1] >= 65 && v2[1] <= 70)\n
        v1 += v2[1] + -55;\n
    return v1;\n
}\n
", "4215730:sub_4053b2": null, "4215744:cgc_InitFS": "typedef struct struct_2 {\n
    char padding_0[212];\n
    char field_d4;\n
    char padding_d5[3];\n
    char *field_d8;\n
    char padding_dc[2044];\n
    unsigned int field_8d8;\n
    unsigned int field_8dc;\n
    struct struct_1 *field_8e0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[212];\n
    char field_d4;\n
    char padding_d5[3];\n
    unsigned int field_d8;\n
    char padding_dc[2044];\n
    unsigned int field_8d8;\n
    unsigned int field_8dc;\n
    struct struct_1 *field_8e0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    char padding_dc[4];\n
    unsigned int field_e0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitFS(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_2 *v1;  // [bp-0x14]\n
    unsigned int v2[57];  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    struct_0 *v5;  // ebx\n
    struct_0 *v6;  // ebx\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if ((v4 & 4095))\n
    {\n
        v4 -= v4 & 4095;\n
        v4 += 0x1000;\n
    }\n
    if (v4 > 0x100000)\n
    {\n
        cgc_puts(&v1[3].padding_dc[1712]);\n
        v3 = -1;\n
        return v3;\n
    }\n
    else if (!(v4 & 511))\n
    {\n
        cgc_bzero(&v1->padding_dc[2040], 268);\n
        v5 = v1;\n
        strncpy(&v5->padding_dc[2040], \"SFRC\", 4);\n
        v5->field_8d8 = 0x200;\n
        v5->field_8dc = v4;\n
        v0 = &v5->field_8e0;\n
        if (cgc_allocate(0x1000, 0))\n
        {\n
            cgc_puts(&v1[3].padding_dc[1613]);\n
            v3 = -1;\n
            return v3;\n
        }\n
        cgc_bzero(v1->field_8e0, 0x1000);\n
        cgc_bzero(&v1->field_d4, 0x800);\n
        v0 = &v1->field_d8;\n
        if (cgc_allocate(0x1000, 0))\n
        {\n
            cgc_puts(&v1[3].padding_dc[1582]);\n
            v3 = -1;\n
            return v3;\n
        }\n
        cgc_bzero(v1->field_d8, 0x1000);\n
        v6 = v1;\n
        v2[0] = v6->field_8e0;\n
        cgc_strcpy(v2, &v6[3].padding_dc[1270]);\n
        v7 = v1;\n
        v2[52] = 2;\n
        v2[53] = 0;\n
        v2[54] = 1;\n
        v2[56] = v7->field_d8;\n
        v7->field_d4 = 128;\n
        v3 = 0;\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_puts(&v1[3].padding_dc[1672]);\n
        v3 = -1;\n
        return v3;\n
    }\n
}\n
", "4216296:sub_4055e8": null, "4216304:cgc_DestroyFS": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_40bd98;\n
\n
int cgc_DestroyFS()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = g_40bd98 >> 12;\n
    for (v2 = 0; v2 < v3; v2 += 1)\n
    {\n
        if (*((v1 + (v2 << 3) + 216)))\n
        {\n
            v0 = 0x1000;\n
            cgc_deallocate(v1 + 212 + v2 * 8 + 4);\n
        }\n
    }\n
    for (v2 = 0; v2 < 64; v2 += 1)\n
    {\n
        if (*((v1 + (v2 << 2) + 2272)))\n
        {\n
            v0 = 0x1000;\n
            cgc_deallocate(v1 + 2272 + v2 * 4);\n
        }\n
    }\n
    return 0;\n
}\n
", "4216532:sub_4056d4": null, "4216544:cgc_FindInode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindInode(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = 0;\n
    while (v3 < 64)\n
    {\n
        if (!*((v0 + (v3 << 2) + 2272)))\n
            break;\n
        v1 = *((v0 + v3 * 4 + 2272));\n
        v2 = 0;\n
        while (true)\n
        {\n
            if (v2 >= 16)\n
            {\n
                v3 += 1;\n
                break;\n
            }\n
            if (*((v1 + (v2 << 8) + 208)) != 1 && !(*((v1 + (v2 << 8) + 208)) == 2))\n
                goto LABEL_4057c3;\n
            if (!cgc_strcmp(v1 + (v2 << 8), v5))\n
            {\n
                v4 = v1 + v2 * 0x100;\n
                return v4;\n
            }\n
LABEL_4057c3:\n
            v2 += 1;\n
        }\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4216825:sub_4057f9": null, "4216832:cgc_FindDirEntry": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindDirEntry(unsigned int v7[54], char *a0)\n
{\n
    char v0;  // [bp-0x21]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v7 && a0)\n
    {\n
        if (v7[52] == 2)\n
        {\n
            for (v5 = 0; v5 < 8; v5 += 1)\n
            {\n
                v2 = *((224 + &v7[0] + 0x4 * v5));\n
                if (v2)\n
                {\n
                    v4 = 0;\n
                    while (true)\n
                    {\n
                        v0 = 0;\n
                        if (v4 <= 128)\n
                            v0 = v4 + 1 << 2 <= v7[53];\n
                        if (!(v0 & 1))\n
                            break;\n
                        v3 = v2[v4];\n
                        if (v3 && !cgc_strcmp(v3, a0))\n
                        {\n
                            v6 = v3;\n
                            return v6;\n
                        }\n
                        v4 += 1;\n
                    }\n
                }\n
            }\n
            v6 = 0;\n
            return v6;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
    v6 = 0;\n
    return v6;\n
}\n
", "4217155:sub_405943": null, "4217168:cgc_CheckFileExists": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CheckFileExists(char *v7, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x1c]\n
    struct_0 *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v7;\n
    v1 = 1;\n
    if (!v7)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    else if (*(v7) == 47)\n
    {\n
        v3 = cgc_FindInode(v0 - 8318);\n
        if (!v3)\n
        {\n
            cgc_puts(v0 - 8581);\n
            v6 = -1;\n
            return v6;\n
        }\n
        else if (cgc_strcmp(v7, v0 - 8318))\n
        {\n
            while (true)\n
            {\n
                v5 = cgc_strtok(v4, v0 - 8318);\n
                if (!v5)\n
                    break;\n
                v4 = 0;\n
                v1 = 0;\n
                v2 = cgc_FindDirEntry(v3, v5);\n
                if (v2)\n
                {\n
                    if (v2->field_d0 == 2)\n
                    {\n
                        v3 = v2;\n
                        *(a0) = v2;\n
                        v1 = 2;\n
                    }\n
                    else\n
                    {\n
                        *(a0) = v2;\n
                        v1 = 1;\n
                        break;\n
                    }\n
                }\n
            }\n
            if (v4)\n
                v1 = 0;\n
            v6 = v1;\n
            return v6;\n
        }\n
        else\n
        {\n
            *(a0) = v3;\n
            v6 = 2;\n
            return v6;\n
        }\n
    }\n
    else\n
    {\n
        cgc_puts(v0 - 8598);\n
        v6 = -1;\n
        return v6;\n
    }\n
}\n
", "4217578:sub_405aea": null, "4217584:cgc_FindFreeInode": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindFreeInode()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 < 64)\n
        {\n
            v3 = *((v1 + v5 * 4 + 2272));\n
            if (!v3)\n
            {\n
                v0 = v1 + 2272 + v5 * 4;\n
                if (cgc_allocate(0x1000, 0))\n
                {\n
                    cgc_puts(v1 - 8661);\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                cgc_bzero(*((v1 + v5 * 4 + 2272)), 0x1000);\n
                v3 = *((v1 + v5 * 4 + 2272));\n
            }\n
            for (v4 = 0; v4 < 16; v4 += 1)\n
            {\n
                v2 = v3 + v4 * 0x100;\n
                if (!v2->field_d0)\n
                {\n
                    v6 = v2;\n
                    return v6;\n
                }\n
            }\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
    }\n
}\n
", "4217890:sub_405c22": null, "4217904:cgc_FindFreeDataBlock": "typedef struct struct_0 {\n
    char padding_0[2268];\n
    unsigned int field_8dc;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FindFreeDataBlock()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char v1;  // [bp-0x25]\n
    struct_0 *v2;  // [bp-0x24]\n
    char v3;  // [bp-0x1d]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    void* v6;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax\n
    unsigned int v10;  // ecx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v4 = 7;\n
    v6 = 0;\n
    while (true)\n
    {\n
        if (v6 < 0x100)\n
        {\n
            v5 = *(&v2->padding_0[216 + 8 * v6]);\n
            if (!v5)\n
            {\n
                if (v6 << 12 >= v2->field_8dc)\n
                {\n
                    v7 = 0;\n
                    return v7;\n
                }\n
                v0 = &v2->padding_0[212 + 8 * v6 + 4];\n
                if (cgc_allocate(0x1000, 0))\n
                {\n
                    cgc_puts(&v2[3].padding_0[1814]);\n
                    v7 = 0;\n
                    return v7;\n
                }\n
                cgc_bzero(*(&v2->padding_0[216 + 8 * v6]), 0x1000);\n
                v5 = *(&v2->padding_0[216 + 8 * v6]);\n
            }\n
            if (v2->padding_0[212 + 8 * v6] == 255)\n
            {\n
                v6 += 1;\n
            }\n
            else\n
            {\n
                v3 = v2->padding_0[212 + 8 * v6];\n
                while (true)\n
                {\n
                    v1 = 0;\n
                    if ((v3 & 1))\n
                        v1 = v4;\n
                    if (!(v1 & 1))\n
                        break;\n
                    v3 >>= 1;\n
                    v4 -= 1;\n
                }\n
                v9 = v2;\n
                v10 = v6;\n
                v9->padding_0[212 + 8 * v10] = v9->padding_0[212 + 8 * v10] | (128 >> (v4 & 31));\n
                v7 = *(&v9->padding_0[216 + 8 * v6]) + v4 * 0x200;\n
                return v7;\n
            }\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            return v7;\n
        }\n
    }\n
}\n
", "4218349:sub_405ded": null, "4218352:cgc_SplitPath": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_SplitPath(unsigned int v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 && a0 && a1)\n
    {\n
        cgc_strcpy(a0, v3);\n
        for (v1 = cgc_strlen(a0); v1 > 0; v1 -= 1)\n
        {\n
            if (a0[v1] == 47)\n
            {\n
                cgc_strcpy(a1, &a0[v1 + 1]);\n
                a0[v1] = 0;\n
                break;\n
            }\n
        }\n
        if (!v1)\n
        {\n
            cgc_strcpy(a1, v3 + 1);\n
            a0[1 + v1] = 0;\n
        }\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4218614:sub_405ef6": null, "4218624:cgc_CreateFile": "typedef struct struct_3 {\n
    char padding_0[2264];\n
    unsigned int field_8d8;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    char padding_d8[8];\n
    struct struct_2 *field_e0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
} struct_2;\n
\n
extern struct_3 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_CreateFile(char *v20, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x250]\n
    unsigned int v1;  // [bp-0x24c]\n
    unsigned int v2;  // [bp-0x248]\n
    struct_3 *v3;  // [bp-0x244]\n
    unsigned int v4;  // [bp-0x240]\n
    char v5;  // [bp-0x23c]\n
    char v6;  // [bp-0x13c]\n
    unsigned int *v7;  // [bp-0x3c]\n
    struct_0 *v8;  // [bp-0x38], Other Possible Types: unsigned int\n
    struct_0 *v9;  // [bp-0x34], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x30], Other Possible Types: unsigned int\n
    struct_1 *v11;  // [bp-0x2c]\n
    void* v12;  // [bp-0x28]\n
    unsigned int v13;  // [bp-0x24]\n
    struct_0 *v14;  // [bp-0x20]\n
    unsigned int v15;  // [bp-0x1c]\n
    unsigned int v16;  // [bp-0x18]\n
    void* v17;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int *v18;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v19;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    if (v20 && a0)\n
    {\n
        cgc_bzero(&v6, 0x100);\n
        cgc_bzero(&v5, 0x100);\n
        if (cgc_strlen(&v5) > 207)\n
        {\n
            cgc_puts(&v3[3].padding_0[1751]);\n
            v19 = 0;\n
            return v19;\n
        }\n
        v18 = cgc_CheckFileExists(v20, &v12);\n
        if (v18 == -1)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
        else if (v18 != 1)\n
        {\n
            cgc_SplitPath(v20, &v6, &v5);\n
            if (cgc_CheckFileExists(&v6, &v11) != 2)\n
            {\n
                cgc_puts(&v3[3].padding_0[1598]);\n
                v19 = 0;\n
                return v19;\n
            }\n
            v16 = (0 CONCAT cgc_strlen(a0)) /m v3->field_8d8;\n
            if ((0 CONCAT cgc_strlen(a0)) /m v3->field_8d8 >> 32)\n
                v16 += 1;\n
            if (!v16)\n
                v16 = 1;\n
            v15 = v16 >> 3;\n
            if ((v16 & 7))\n
                v15 += 1;\n
            for (v18 = 0; v18 < v15; v18 += 1)\n
            {\n
                v14 = cgc_FindFreeInode();\n
                if (!v14)\n
                {\n
                    cgc_puts(&v3[3].padding_0[1719]);\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (!v18)\n
                    v9 = v14;\n
                v14->field_d0 = 1;\n
                v14->field_d4 = cgc_strlen(a0);\n
                v14->field_d8 = v16;\n
                if (v10)\n
                    *((v10 + 220)) = v14;\n
                v10 = v14;\n
                cgc_strncpy(v14, &v5, 207);\n
            }\n
            v8 = v9;\n
            v17 = 0;\n
            for (v18 = 0; v18 < v16; v17 += 1)\n
            {\n
                v13 = cgc_FindFreeDataBlock();\n
                if (v13)\n
                {\n
                    if (v18 && !(v18 >> 31 CONCAT v18) /m 8 >> 32)\n
                    {\n
                        v8 = v8->field_dc;\n
                        v17 = 0;\n
                    }\n
                    *((v8 + v17 * 4 + 224)) = v13;\n
                    v4 = cgc_strlen(a0 + v18 * 0x200);\n
                    v1 = v13;\n
                    v2 = a0 + v18 * 0x200;\n
                    if (v4 > 0x200)\n
                        v0 = 0x200;\n
                    else\n
                        v0 = v4;\n
                    cgc_memcpy(v1, v2, v0);\n
                    v18 += 1;\n
                }\n
                else\n
                {\n
                    cgc_puts(&v3[3].padding_0[1705]);\n
                    while (v8)\n
                    {\n
                        v10 = v8;\n
                        v8 = *((v8 + 220));\n
                        cgc_bzero(v10, 0x100);\n
                    }\n
                    v19 = 0;\n
                    return v19;\n
                }\n
            }\n
            v7 = &v11->field_e0->field_0;\n
            for (v18 = 0; v18 < 128; v18 += 1)\n
            {\n
                if (!v7[v18])\n
                {\n
                    v7[v18] = v9;\n
                    if (v18 + 1 << 2 > v11->field_d4)\n
                        v11->field_d4 = (v18 + 1) * 4;\n
                    break;\n
                }\n
            }\n
            if (v18 != 128)\n
            {\n
                cgc_puts(&v3[3].padding_0[1674]);\n
                v19 = v9;\n
                return v19;\n
            }\n
            v8 = v9;\n
            while (v8)\n
            {\n
                v10 = v8;\n
                v8 = *((v8 + 220));\n
                for (v17 = 0; v17 < 8; v17 += 1)\n
                {\n
                    cgc_FreeDataBlock();\n
                }\n
                cgc_bzero(v10, 0x100);\n
            }\n
            cgc_puts(&v3[3].padding_0[1692]);\n
            v19 = 0;\n
            return v19;\n
        }\n
        else\n
        {\n
            cgc_puts(&v3[3].padding_0[1731]);\n
            v19 = 0;\n
            return v19;\n
        }\n
    }\n
    v19 = 0;\n
    return v19;\n
}\n
", "4220090:sub_4064ba": null, "4220096:cgc_FreeDataBlock": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[3];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FreeDataBlock(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    struct_0 *v6;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 1;\n
        return v4;\n
    }\n
    for (v3 = 0; v3 < 0x100; v3 += 1)\n
    {\n
        v1 = v0 + 212 + v3 * 8;\n
        if (v5 >= v1->field_4 && v5 <= v1->field_4 + 0xe00)\n
        {\n
            for (v2 = 0; v2 < 8; v2 += 1)\n
            {\n
                if (v5 == v1->field_4 + (v2 << 9))\n
                {\n
                    v6 = v1;\n
                    v6->field_0 = v6->field_0 ^ (128 >> (v2 & 31));\n
                    cgc_bzero(v1->field_4 + v2 * 0x200, 0x200);\n
                    break;\n
                }\n
            }\n
            if (v2 == 8)\n
            {\n
                cgc_puts(v0 - 8121);\n
                v4 = 1;\n
                return v4;\n
            }\n
            break;\n
        }\n
    }\n
    if (v3 != 0x100)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_puts(v0 - 8121);\n
    v4 = 1;\n
    return v4;\n
}\n
", "4220463:sub_40662f": null, "4220464:cgc_ReadFile": "typedef struct struct_0 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReadFile(char *v8)\n
{\n
    unsigned int v0;  // [bp-0x22c]\n
    unsigned int v1;  // [bp-0x228]\n
    unsigned int v2;  // [bp-0x20]\n
    struct_0 *v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v5 = cgc_CheckFileExists(v8, &v3);\n
    if (v5 == -1)\n
    {\n
        v6 = 1;\n
        return v6;\n
    }\n
    if (!v5)\n
    {\n
        cgc_puts(v0 - 8465);\n
        v6 = 1;\n
        return v6;\n
    }\n
    if (v5 == 2)\n
    {\n
        cgc_puts(v0 - 8446);\n
        v6 = 1;\n
        return v6;\n
    }\n
    v4 = 0;\n
    v1 = v3->field_d4;\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 >= v3->field_d8)\n
        {\n
            cgc_puts(v0 - 8016);\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (v5 && !(v5 >> 31 CONCAT v5) /m 8 >> 32)\n
        {\n
            v3 = v3->field_dc;\n
            if (!v3)\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            v4 = 0;\n
        }\n
        v2 = *((v3 + v4 * 4 + 224));\n
        if (!v2)\n
        {\n
            v6 = 0;\n
            return v6;\n
        }\n
        if (v1 < 0x200)\n
        {\n
            cgc_write(v2, v1);\n
        }\n
        else\n
        {\n
            cgc_write(v2, 0x200);\n
            v1 -= 0x200;\n
        }\n
        v5 += 1;\n
        v4 += 1;\n
    }\n
}\n
", "4220952:sub_406818": null, "4220960:cgc_mkdir": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
    struct struct_0 *field_dc;\n
    unsigned int field_e0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_mkdir(char *v12)\n
{\n
    unsigned int v0;  // [bp-0x230]\n
    void* v1;  // [bp-0x22c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x228]\n
    char v3;  // [bp-0x128]\n
    unsigned int *v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    struct_0 *v6;  // [bp-0x20]\n
    struct_0 *v7;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    unsigned int *v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v12)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    cgc_bzero(&v3, 0x100);\n
    cgc_bzero(&v2, 0x100);\n
    v10 = cgc_CheckFileExists(v12, &v9);\n
    if (v10 == -1)\n
    {\n
        v11 = -1;\n
        return v11;\n
    }\n
    else if (v10 == 1)\n
    {\n
        cgc_puts(v0 - 8535);\n
        v11 = -1;\n
        return v11;\n
    }\n
    else if (v10 != 2)\n
    {\n
        cgc_SplitPath(v12, &v3, &v2);\n
        if (cgc_strlen(&v2) > 207)\n
        {\n
            cgc_puts(v0 - 8555);\n
            v11 = -1;\n
            return v11;\n
        }\n
        else if (cgc_CheckFileExists(&v3, &v8) == 2)\n
        {\n
            v5 = cgc_FindFreeDataBlock();\n
            if (!v5)\n
            {\n
                cgc_puts(v0 - 8509);\n
                v11 = -1;\n
                return v11;\n
            }\n
            v7 = cgc_FindFreeInode();\n
            if (!v7)\n
            {\n
                cgc_puts(v0 - 8523);\n
                v11 = -1;\n
                return v11;\n
            }\n
            v7->field_d0 = 2;\n
            v7->field_d4 = 0;\n
            v7->field_d8 = 1;\n
            v7->field_dc = 0;\n
            cgc_strncpy(v7, &v2, 207);\n
            v7->field_e0 = v5;\n
            v4 = *((v8 + 224));\n
            for (v10 = 0; v10 <= 128; v10 += 1)\n
            {\n
                if (!v4[v10])\n
                {\n
                    v4[v10] = v7;\n
                    if (v10 + 1 << 2 > *((v8 + 212)))\n
                        *((v8 + 212)) = (v10 + 1) * 4;\n
                    break;\n
                }\n
            }\n
            if (v10 <= 128)\n
            {\n
                cgc_puts(v0 - 8378);\n
                v11 = 0;\n
                return v11;\n
            }\n
            while (v7)\n
            {\n
                v6 = v7;\n
                v7 = *((v7 + 220));\n
                for (v1 = 0; v1 < 8; v1 += 1)\n
                {\n
                    cgc_FreeDataBlock(*((224 + &v6->padding_0[0] + 0x4 * v1)));\n
                }\n
                cgc_bzero(v6, 0x100);\n
            }\n
            cgc_puts(v0 - 8496);\n
            v11 = -1;\n
            return v11;\n
        }\n
        else\n
        {\n
            cgc_puts(v0 - 8409);\n
            v11 = -1;\n
            return v11;\n
        }\n
    }\n
    else\n
    {\n
        cgc_puts(v0 - 8426);\n
        v11 = -1;\n
        return v11;\n
    }\n
}\n
", "4221935:sub_406bef": null, "4221936:cgc_rmdir": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_rmdir(char *v11)\n
{\n
    unsigned int v0;  // [bp-0x22c]\n
    struct_0 *v1;  // [bp-0x228]\n
    struct_0 *v2;  // [bp-0x224], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x220], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x21c]\n
    char v5;  // [bp-0x218]\n
    char v6;  // [bp-0x118]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int *v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v11)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    cgc_bzero(&v6, 0x100);\n
    cgc_bzero(&v5, 0x100);\n
    v9 = cgc_CheckFileExists(v11, &v8);\n
    if (v9 && v9 != -1)\n
    {\n
        if (*((v8 + 208)) != 2)\n
        {\n
            cgc_puts(v0 - 7928);\n
            v10 = -1;\n
            return v10;\n
        }\n
        else if (!cgc_strcmp(v11, v0 - 8318))\n
        {\n
            cgc_puts(v0 - 8335);\n
            v10 = -1;\n
            return v10;\n
        }\n
        else\n
        {\n
            v4 = *((v8 + 224));\n
            for (v9 = 0; v9 < 128; v9 += 1)\n
            {\n
                if (v4[v9])\n
                {\n
                    cgc_puts(v0 - 8316);\n
                    v10 = -1;\n
                    return v10;\n
                }\n
            }\n
            cgc_SplitPath(v11, &v6, &v5);\n
            if (cgc_CheckFileExists(&v6, &v7) != 2)\n
            {\n
                cgc_puts(v0 - 8296);\n
                v10 = 1;\n
                return v10;\n
            }\n
            v4 = *((v7 + 224));\n
            for (v9 = 0; v9 < 128; v9 += 1)\n
            {\n
                if (v4[v9] == v8)\n
                {\n
                    v4[v9] = 0;\n
                    if (v9 + 1 << 2 == *((v7 + 212)))\n
                        *((v7 + 212)) = v9 * 4;\n
                    break;\n
                }\n
            }\n
            if (v9 == 128)\n
            {\n
                cgc_puts(v0 - 8231);\n
                v10 = 1;\n
                return v10;\n
            }\n
            v3 = 0;\n
            v2 = v8;\n
            for (v9 = 0; v9 < v2->field_d8; v3 += 1)\n
            {\n
                if (v9 && !(v9 >> 31 CONCAT v9) /m 8 >> 32)\n
                {\n
                    v1 = v2->field_dc;\n
                    cgc_bzero(v2, 0x100);\n
                    v2 = v1;\n
                    v3 = 0;\n
                    if (!v2)\n
                        break;\n
                }\n
                if (*((v2 + (v3 << 2) + 224)))\n
                    cgc_FreeDataBlock(*((v2 + v3 * 4 + 224)));\n
                v9 += 1;\n
            }\n
            cgc_bzero(v8, 0x100);\n
            cgc_puts(v0 - 8139);\n
            v10 = 0;\n
            return v10;\n
        }\n
    }\n
    cgc_puts(v0 - 8360);\n
    v10 = -1;\n
    return v10;\n
}\n
", "4222955:sub_406feb": null, "4222960:cgc_unlink": "typedef struct struct_0 {\n
    char padding_0[216];\n
    unsigned int field_d8;\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_unlink(char *v12)\n
{\n
    unsigned int v0;  // [bp-0x22c]\n
    unsigned int *v1;  // [bp-0x228]\n
    char v2;  // [bp-0x224]\n
    char v3;  // [bp-0x124]\n
    struct_0 *v4;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int *v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_bzero(&v3, 0x100);\n
    cgc_bzero(&v2, 0x100);\n
    v9 = cgc_CheckFileExists(v12, &v7);\n
    if (v9 == -1)\n
    {\n
        v10 = 1;\n
        return v10;\n
    }\n
    else if (!v9)\n
    {\n
        cgc_puts(v0 - 8465);\n
        v10 = 1;\n
        return v10;\n
    }\n
    else if (v9 != 2)\n
    {\n
        cgc_SplitPath(v12, &v3, &v2);\n
        if (cgc_CheckFileExists(&v3, &v6) != 2)\n
        {\n
            cgc_puts(v0 - 8296);\n
            v10 = 1;\n
            return v10;\n
        }\n
        v8 = 0;\n
        v4 = v7;\n
        for (v9 = 0; v9 < *((v4 + 216)); v8 += 1)\n
        {\n
            if (v9 && !(v9 >> 31 CONCAT v9) /m 8 >> 32)\n
            {\n
                v5 = *((v4 + 220));\n
                cgc_bzero(v4, 0x100);\n
                v4 = v5;\n
                v8 = 0;\n
                if (!v4)\n
                    break;\n
            }\n
            if (*((v4 + (v8 << 2) + 224)))\n
                cgc_FreeDataBlock(*((v4 + v8 * 4 + 224)));\n
            v9 += 1;\n
        }\n
        v1 = *((v6 + 224));\n
        for (v9 = 0; v9 < 128; v9 += 1)\n
        {\n
            if (v1[v9] == v7)\n
            {\n
                v1[v9] = 0;\n
                if (v9 + 1 << 2 == *((v6 + 212)))\n
                    *((v6 + 212)) = v9 * 4;\n
                break;\n
            }\n
        }\n
        cgc_bzero(v7, 0x100);\n
        cgc_puts(v0 - 8100);\n
        v10 = 0;\n
        return v10;\n
    }\n
    else\n
    {\n
        cgc_puts(v0 - 8446);\n
        v10 = 1;\n
        return v10;\n
    }\n
}\n
", "4223701:sub_4072d5": null, "4223712:cgc_fopen": "typedef struct struct_2 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
    char padding_d8[4];\n
    struct struct_1 *field_dc;\n
    char *field_e0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[220];\n
    struct struct_1 *field_dc;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fopen(char *v9, char *a0)\n
{\n
    struct struct_0 **v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x2c]\n
    struct_1 *v2;  // [bp-0x28]\n
    struct_1 *v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int *v5;  // [bp-0x18]\n
    struct_2 *v6;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    if (!v9)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    v7 = cgc_CheckFileExists(v9, &v6);\n
    if (v7 == -1)\n
    {\n
        v8 = 0;\n
        return v8;\n
    }\n
    if (v7)\n
    {\n
        if (v7 == 2)\n
        {\n
            cgc_puts(v1 - 8446);\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_strcmp(a0, v1 - 9269))\n
        {\n
            cgc_puts(v1 - 8465);\n
            v8 = 0;\n
            return v8;\n
        }\n
        v6 = cgc_CreateFile(v9, v1 - 8016);\n
        if (!v6)\n
        {\n
            cgc_puts(v1 - 8087);\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
    v0 = &v5;\n
    if (cgc_allocate(24, 0))\n
    {\n
        cgc_puts(v1 - 8065);\n
        v8 = 0;\n
        return v8;\n
    }\n
    cgc_bzero(v5, 24);\n
    *(v5) = v6;\n
    if (!cgc_strcmp(a0, v1 - 9180))\n
    {\n
        v5[1] = 0;\n
        v5[2] = 0;\n
        v5[3] = v6;\n
    }\n
    else if (!cgc_strcmp(a0, v1 - 9269))\n
    {\n
        for (v7 = 1; v7 < 8; v7 += 1)\n
        {\n
            cgc_FreeDataBlock(*((v6 + v7 * 4 + 224)));\n
            *((v6 + v7 * 4 + 224)) = 0;\n
        }\n
        for (v3 = *((v6 + 220)); v3; v3 = v2)\n
        {\n
            for (v7 = 0; v7 < 8; v7 += 1)\n
            {\n
                cgc_FreeDataBlock(*((224 + &v3->padding_0[0] + 0x4 * v7)));\n
                *((224 + &v3->padding_0[0] + 0x4 * v7)) = 0;\n
            }\n
            v2 = v3->field_dc;\n
            cgc_bzero(v3, 0x100);\n
        }\n
        cgc_bzero(*((v6 + 224)), 0x200);\n
        *((v6 + 212)) = 0;\n
        v5[1] = 0;\n
        v5[2] = 1;\n
        v5[3] = v6;\n
    }\n
    else\n
    {\n
        if (cgc_strcmp(a0, v1 - 8798))\n
        {\n
            cgc_deallocate(v5);\n
            v8 = 0;\n
            return v8;\n
        }\n
        v5[1] = *((v6 + 212));\n
        v5[2] = 2;\n
        v5[3] = v6;\n
        v4 = *((v6 + 212)) >> 12;\n
        v5[4] = (*((v6 + 212)) & 4095) >> 9;\n
        v5[5] = *((v6 + 212)) & 4095 & 511;\n
        while (true)\n
        {\n
            v10 = v4;\n
            v4 = v10 - 1;\n
            if (!v10)\n
                break;\n
            v5[3] = *((v5[3] + 220));\n
        }\n
    }\n
    v8 = v5;\n
    return v8;\n
}\n
", "4224737:sub_4076e1": null, "4224752:cgc_fread": "typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
    struct struct_3 *field_14;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[220];\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[212];\n
    unsigned int field_d4;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
int cgc_fread(char *v8, unsigned int a0, unsigned int a1, struct_2 *a2)\n
{\n
    char v0;  // [bp-0x21]\n
    char *v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    char *v7;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    struct_2 *v10;  // eax\n
\n
    v1 = v8;\n
    if (v8 && a2)\n
    {\n
        if (!a2->field_8 && a2->field_0)\n
        {\n
            v2 = a2->field_c;\n
            v5 = a2->field_10;\n
            v3 = *(&v2[1].padding_0[4 * v5]);\n
            v4 = &a2->field_14->field_0;\n
            v6 = 0;\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (v6 < a1 * a0)\n
                    v0 = a2->field_4 < a2->field_0->field_d4;\n
                if (!(v0 & 1))\n
                {\n
                    a2->field_c = v2;\n
                    a2->field_10 = v5;\n
                    a2->field_14 = v4;\n
                    v7 = v6;\n
                    return v7;\n
                }\n
                if (v4 && !(v4 >> 31 CONCAT v4) /m 0x200 >> 32)\n
                {\n
                    if (v5 && !(v5 >> 31 CONCAT v5) /m 8 >> 32)\n
                    {\n
                        v2 = *((v2 + 220));\n
                        if (!v2)\n
                        {\n
                            a2->field_c = v2;\n
                            a2->field_10 = v5;\n
                            a2->field_14 = v4;\n
                            v7 = v6;\n
                            return v7;\n
                        }\n
                        v5 = -1;\n
                    }\n
                    v5 += 1;\n
                    v3 = *((v2 + v5 * 4 + 224));\n
                    if (!v3)\n
                    {\n
                        a2->field_c = v2;\n
                        a2->field_10 = v5;\n
                        a2->field_14 = v4;\n
                        v7 = v6;\n
                        return v7;\n
                    }\n
                    v4 = 0;\n
                }\n
                v9 = v4;\n
                v4 = v9 + 1;\n
                v1[v6] = *((v3 + v9));\n
                v10 = a2;\n
                v10->field_4 = v10->field_4 + 1;\n
                v6 += 1;\n
            }\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    v7 = 0;\n
    return v7;\n
}\n
", "4225256:sub_4078e8": null, "4225264:cgc_fwrite": "typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
    struct struct_3 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[220];\n
    struct struct_0 *field_dc;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
    unsigned int field_d4;\n
    unsigned int field_d8;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(char *v10, unsigned int a0, unsigned int a1, struct_1 *a2)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x30], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x28], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x24]\n
    struct_0 *v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v6[56];  // [bp-0x1c]\n
    char *v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    char *v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11[55];  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13[55];  // eax\n
    struct_1 *v14;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = v10;\n
    if (v10 && a2)\n
    {\n
        if (a2->field_8 != 1 && a2->field_8 != 2)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v5 = a2->field_c;\n
        v3 = a2->field_10;\n
        v1 = *(&v5[1].padding_0[4 * v3]);\n
        v2 = &a2->field_14->field_0;\n
        v8 = 0;\n
        while (true)\n
        {\n
            if (v8 >= a1 * a0)\n
            {\n
                a2->field_c = v5;\n
                a2->field_10 = v3;\n
                a2->field_14 = v2;\n
                v9 = v8;\n
                return v9;\n
            }\n
            if (v2 && !(v2 >> 31 CONCAT v2) /m 0x200 >> 32)\n
            {\n
                v3 += 1;\n
                if (v3 && !(v3 >> 31 CONCAT v3) /m 8 >> 32)\n
                {\n
                    if (v5->field_dc)\n
                    {\n
                        a2->field_c = v5;\n
                        a2->field_10 = v3;\n
                        a2->field_14 = v2;\n
                        v9 = v8;\n
                        return v9;\n
                    }\n
                    v6[0] = cgc_FindFreeInode();\n
                    if (!v6)\n
                    {\n
                        cgc_puts(v0 - 8523);\n
                        v9 = 0;\n
                        return v9;\n
                    }\n
                    v6[52] = a2->field_0->field_d0;\n
                    v6[53] = a2->field_0->field_d4;\n
                    v6[54] = a2->field_0->field_d8;\n
                    v6[55] = 0;\n
                    cgc_strncpy(v6, a2->field_0, 207);\n
                    v5->field_dc = &v6[0];\n
                    v3 = 0;\n
                }\n
                v1 = cgc_FindFreeDataBlock();\n
                if (v1)\n
                {\n
                    *(&v5[1].padding_0[4 * v3]) = v1;\n
                    v2 = 0;\n
                    v11 = a2->field_0;\n
                    v11[54] = v11[54] + 1;\n
                }\n
                else\n
                {\n
                    cgc_puts(v0 - 8509);\n
                    a2->field_c = v5;\n
                    a2->field_10 = v3;\n
                    a2->field_14 = v2;\n
                    while (v5)\n
                    {\n
                        v4 = v5;\n
                        v5 = *((v5 + 220));\n
                        cgc_bzero(v4, 0x100);\n
                    }\n
                    v9 = v8;\n
                    return v9;\n
                }\n
            }\n
            v12 = v2;\n
            v2 = v12 + 1;\n
            *((v1 + v12)) = v7[v8];\n
            v13 = a2->field_0;\n
            v13[53] = v13[53] + 1;\n
            v14 = a2;\n
            v14->field_4 = v14->field_4 + 1;\n
            v8 += 1;\n
        }\n
    }\n
    v9 = 0;\n
    return v9;\n
}\n
", "4226026:sub_407bea": null, "4226032:cgc_fclose": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fclose(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v3)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v0 = 24;\n
    cgc_deallocate(v3);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4226117:sub_407c45": null, "4226128:cgc_StatusFS": "extern unsigned int _GLOBAL_OFFSET_TABLE_[568];\n
\n
int cgc_StatusFS()\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2[568];  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12[568];  // ebx\n
    unsigned int v13[568];  // ebx\n
\n
    v9 = v11;\n
    v2[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    cgc_printf(\"Filesystem info:\\n
\");\n
    v12 = v2;\n
    v0 = v12[566];\n
    cgc_printf(&v12[3 + 299] + 3);\n
    for (v8 = 0; v8 < 64; v8 += 1)\n
    {\n
        if (!v2[1 + v8])\n
            break;\n
        v3 = v2[1 + v8];\n
        for (v7 = 0; v7 < 16; v7 += 1)\n
        {\n
            if (*((v3 + (v7 << 8) + 208)))\n
                v6 += 1;\n
        }\n
    }\n
    v0 = v6;\n
    v1 = 0x400;\n
    cgc_printf(&v2[3 + 295] + 2);\n
    for (v8 = 0; v8 < 0x100; v8 += 1)\n
    {\n
        if (!v2[54 + 2 * v8])\n
            break;\n
        v4 += 1;\n
        for (v7 = 0; v7 < 8; v7 += 1)\n
        {\n
            if (((*(212 + &v2[0] + 0x8 * v8) >> (v7 & 31)) & 1))\n
                v5 += 1;\n
        }\n
    }\n
    v13 = v2;\n
    v0 = v5;\n
    v1 = v13[567] >> 9;\n
    cgc_printf(&v13[3 + 290]);\n
    return 0;\n
}\n
", "4226584:sub_407e18": null, "4226592:cgc_ls": "typedef struct struct_0 {\n
    char padding_0[208];\n
    unsigned int field_d0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ls(char *v8)\n
{\n
    char v0;  // [bp-0x25]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    struct struct_0 **v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct_0 *v5;  // [bp-0x14]\n
    struct struct_0 **v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v9;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v8)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    v6 = cgc_CheckFileExists(v8, &v4);\n
    if (!v6)\n
    {\n
        cgc_puts(v1 - 7954);\n
        v7 = -1;\n
        return v7;\n
    }\n
    else if (v6 == 1)\n
    {\n
        cgc_puts(v1 - 0x1f00);\n
        v7 = -1;\n
        return v7;\n
    }\n
    else if (v6 != -1)\n
    {\n
        v3 = *((v4 + 224));\n
        if (!v3)\n
        {\n
            v7 = -1;\n
            return v7;\n
        }\n
        cgc_printf(v1 - 7912);\n
        v6 = 0;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v6 < 128)\n
            {\n
                v5 = v3[v6];\n
                v0 = v5;\n
            }\n
            if (!(v0 & 1))\n
                break;\n
            if (v5->field_d0 == 2)\n
                cgc_printf(v1 - 7887);\n
            else\n
                cgc_printf(v1 - 7884);\n
            cgc_printf(v1 - 8777);\n
            v2 = cgc_strlen(v5);\n
            v2 = 50 - v2;\n
            while (true)\n
            {\n
                v9 = v2;\n
                v2 = v9 - 1;\n
                if (v9 <= 0)\n
                    break;\n
                cgc_printf(v1 - 7883);\n
            }\n
            cgc_printf(v1 - 8003);\n
            v6 += 1;\n
        }\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
}\n
", "4227102:sub_40801e": null, "4227104:cgc_FreeArgs": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FreeArgs()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // ebx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v3 = 0; *((v2 + (v3 << 2) + 2788)); v3 += 1)\n
    {\n
        v5 = v2;\n
        v1 = *((v5 + v3 * 4 + 2788));\n
        v0 = cgc_strlen(*((v5 + v3 * 4 + 2788)));\n
        cgc_deallocate(v1);\n
        *((v2 + v3 * 4 + 2788)) = 0;\n
    }\n
    return 0;\n
}\n
", "4227244:sub_4080ac": null, "4227248:cgc_ParseArgs": "typedef struct struct_0 {\n
    char padding_0[2528];\n
    unsigned int field_9e0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_ARGV;\n
\n
int cgc_ParseArgs(char *v18)\n
{\n
    struct_1 *v0;  // [bp-0x54]\n
    char *v1;  // [bp-0x4c]\n
    char *v2;  // [bp-0x48]\n
    unsigned int v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    char *v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    unsigned int v8;  // [bp-0x30]\n
    char *v9;  // [bp-0x2c]\n
    char v10;  // [bp-0x25]\n
    struct_0 *v11;  // [bp-0x24]\n
    void* v12;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x1c]\n
    char v14;  // [bp-0x18]\n
    char *v15;  // [bp-0x14]\n
    void* v16;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v17;  // [bp-0x8]\n
    unsigned int v19;  // ebx\n
    struct_0 *v20;  // ebx\n
    struct_0 *v21;  // eax\n
    unsigned int v22;  // ecx\n
    struct_0 *v23;  // ebx\n
    struct_0 *v24;  // ebx\n
    struct_0 *v25;  // ebx\n
    struct_0 *v26;  // ebx\n
    struct_0 *v27;  // eax\n
    unsigned int v28;  // ecx\n
    struct_0 *v29;  // eax\n
    struct_0 *v30;  // eax\n
    unsigned int v31;  // ecx\n
    struct_0 *v32;  // ebx\n
    struct_0 *v33;  // ebx\n
    struct_0 *v34;  // eax\n
    unsigned int v35;  // ecx\n
    struct_0 *v36;  // eax\n
\n
    v17 = v19;\n
    v11 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v12 = 0;\n
    cgc_bzero(&cgc_ARGV, 40);\n
    v20 = v11;\n
    v20->field_9e0 = 0;\n
    v15 = cgc_strtok(v18, &v20[3].padding_0[287]);\n
    if (!v15)\n
    {\n
        v11->field_9e0 = 0;\n
        v16 = 0;\n
        return v16;\n
    }\n
    v21 = v11;\n
    v22 = v21->field_9e0;\n
    v21->field_9e0 = v22 + 1;\n
    *(&v21[1].padding_0[0x100 + 4 * v22]) = cgc_strdup(v15);\n
    while (true)\n
    {\n
        v15 = cgc_strtok(NULL, &v11[3].padding_0[287]);\n
        v10 = 0;\n
        if (v15)\n
            v10 = v11->field_9e0 < 9;\n
        if (!(v10 & 1))\n
            break;\n
        if (v12)\n
        {\n
            v9 = v15;\n
            if (v9[1 + cgc_strlen(v15)] == 34)\n
            {\n
                v23 = v11;\n
                v8 = cgc_strlen(*(&v23[1].padding_0[0x100 + 4 * v23->field_9e0]));\n
                v13 = v8 + cgc_strlen(v15) + 1;\n
                v0 = &v14;\n
                if (cgc_allocate(v13, 0))\n
                {\n
                    cgc_FreeArgs();\n
                    v11->field_9e0 = 0;\n
                    v16 = 0;\n
                    return v16;\n
                }\n
                v25 = v11;\n
                cgc_strcpy(*(&v14), *(&v25[1].padding_0[0x100 + 4 * v25->field_9e0]) + 1);\n
                cgc_strcat(*(&v14), &v11[3].padding_0[287]);\n
                v6 = v15;\n
                v6[1 + cgc_strlen(v15)] = 0;\n
                cgc_strcat(*(&v14), v15);\n
                v32 = v11;\n
                v7 = *(&v32[1].padding_0[0x100 + 4 * v32->field_9e0]);\n
                cgc_strlen(*(&v32[1].padding_0[0x100 + 4 * v32->field_9e0]));\n
                cgc_deallocate(v7);\n
                v34 = v11;\n
                v35 = v34->field_9e0;\n
                v34->field_9e0 = v35 + 1;\n
                *(&v34[1].padding_0[0x100 + 4 * v35]) = *(&v14);\n
                v12 = 0;\n
                goto LABEL_408564;\n
            }\n
        }\n
        if (!v12)\n
        {\n
            v3 = *(v15) == 34;\n
            v2 = v15;\n
            if ((v3 & v2[1 + cgc_strlen(v15)] == 34))\n
            {\n
                v1 = v15;\n
                v1[1 + cgc_strlen(v15)] = 0;\n
                v27 = v11;\n
                v28 = v27->field_9e0;\n
                v27->field_9e0 = v28 + 1;\n
                *(&v27[1].padding_0[0x100 + 4 * v28]) = cgc_strdup(v15 + 1);\n
            }\n
            else if (*(v15) == 34)\n
            {\n
                v12 = 1;\n
                v29 = v11;\n
                *(&v29[1].padding_0[0x100 + 4 * v29->field_9e0]) = cgc_strdup(v15);\n
            }\n
            else\n
            {\n
                v30 = v11;\n
                v31 = v30->field_9e0;\n
                v30->field_9e0 = v31 + 1;\n
                *(&v30[1].padding_0[0x100 + 4 * v31]) = cgc_strdup(v15);\n
            }\n
        }\n
        else\n
        {\n
            v24 = v11;\n
            v5 = cgc_strlen(*(&v24[1].padding_0[0x100 + 4 * v24->field_9e0]));\n
            v13 = v5 + cgc_strlen(v15) + 2;\n
            v0 = &v14;\n
            if (cgc_allocate(v13, 0))\n
            {\n
                cgc_FreeArgs();\n
                v11->field_9e0 = 0;\n
                v16 = 0;\n
                return v16;\n
            }\n
            v26 = v11;\n
            cgc_strcpy(*(&v14), *(&v26[1].padding_0[0x100 + 4 * v26->field_9e0]));\n
            cgc_strcat(*(&v14), &v11[3].padding_0[287]);\n
            cgc_strcat(*(&v14), v15);\n
            v33 = v11;\n
            v4 = *(&v33[1].padding_0[0x100 + 4 * v33->field_9e0]);\n
            cgc_strlen(*(&v33[1].padding_0[0x100 + 4 * v33->field_9e0]));\n
            cgc_deallocate(v4);\n
            v36 = v11;\n
            *(&v36[1].padding_0[0x100 + 4 * v36->field_9e0]) = *(&v14);\n
        }\n
LABEL_408564:\n
    }\n
    if (v12)\n
    {\n
        cgc_puts(&v11[3].padding_0[285]);\n
        cgc_FreeArgs();\n
        v11->field_9e0 = 0;\n
        v16 = 0;\n
        return v16;\n
    }\n
    else if (v11->field_9e0 == 9)\n
    {\n
        cgc_puts(&v11[3].padding_0[271]);\n
        cgc_FreeArgs();\n
        v11->field_9e0 = 0;\n
        v16 = 0;\n
        return v16;\n
    }\n
    else\n
    {\n
        v16 = v11->field_9e0;\n
        return v16;\n
    }\n
}\n
", "4228610:sub_408602": null, "4228624:main": "typedef struct struct_0 {\n
    char padding_0[2528];\n
    unsigned int field_9e0;\n
    char padding_9e4[256];\n
    char *field_ae4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char *field_0;\n
    struct struct_1 *field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[698];\n
extern char cgc_CWD;\n
\n
int main(unsigned int v5, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x114]\n
    struct_2 *v1;  // [bp-0x110], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7[698];  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v3 = 0;\n
    cgc_bzero(&cgc_CWD, 0x100);\n
    v7 = v0;\n
    cgc_strcpy(&v7[633], &v7[2 + 683] + 2);\n
    if (cgc_InitFS(0x80000))\n
    {\n
        cgc_puts(&v0[2].padding_0[2269]);\n
        v3 = -1;\n
        return v3;\n
    }\n
    cgc_puts(&v0[2].padding_0[2227]);\n
    cgc_puts(&v0[2].padding_0[2199]);\n
    cgc_printf(&v0[2].padding_0[2155]);\n
    cgc_bzero(&v2, 0x100);\n
    while (cgc_readUntil(&v2, 255, 10) != -1)\n
    {\n
        cgc_ParseArgs(&v2);\n
        if (!v0->field_9e0)\n
        {\n
            cgc_FreeArgs();\n
            cgc_bzero(&v2, 0x100);\n
            cgc_printf(&v0[2].padding_0[2155]);\n
        }\n
        else\n
        {\n
            if (v0->field_ae4)\n
            {\n
                for (v1 = &v0->padding_0[56]; *(v1); v1 += 12)\n
                {\n
                    if (!cgc_strcmp(*(v1), v0->field_ae4))\n
                    {\n
                        *((v1 + 4))();\n
                        break;\n
                    }\n
                }\n
            }\n
            if (!v1)\n
                cgc_puts(&v0[2].padding_0[2152]);\n
            if (!*(v1))\n
                cgc_puts(&v0[2].padding_0[2152]);\n
            cgc_FreeArgs();\n
            cgc_bzero(&v2, 0x100);\n
            cgc_printf(&v0[2].padding_0[2155]);\n
        }\n
    }\n
    if (!cgc_DestroyFS())\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_puts(&v0[2].padding_0[2136]);\n
    v3 = -1;\n
    return v3;\n
}\n
", "4229356:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_deallocate": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}