{"4198400:_init": "extern struct_0 *g_404118;\n
\n
int _init()\n
{\n
    if (g_404118)\n
    {\n
        g_404118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198528:sub_401080": "int sub_401080()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198534:sub_401086": null, "4198544:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198587:sub_4010bb": null, "4198588:sub_4010bc": "int sub_4010bc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198592:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198596:sub_4010c4": null, "4198608:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 12367;\n
    v6 = v5 + 30;\n
    v7 = v5 + 30;\n
    if (v7 == v6)\n
        return v5 + 30;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198659:sub_401103": "int sub_401103()\n
{\n
}\n
", "4198665:sub_401109": "int sub_401109()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198672:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 12303;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 30;\n
    v9 = (v6 + 30 - (v6 + 30) >> 31) + (30 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198743:sub_401157": "int sub_401157()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198752:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_404114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_404114)\n
    {\n
        v0 = __dso_handle;\n
        sub_401080();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198827:sub_4011ab": "int sub_4011ab()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198832:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198841:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198845:sub_4011bd": null, "4198848:cgc_readLine": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readLine(unsigned int v8, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1c]\n
    char *v4;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v6;  // [bp-0xd]\n
    char *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v2 = a1;\n
    if (!a0)\n
    {\n
        v7 = -3;\n
        return v7;\n
    }\n
    do\n
    {\n
        v0 = &v3;\n
        v5 = cgc_receive(v8, &v6, 1);\n
        if (!v5 && !(!*(&v3)))\n
            continue;\n
        cgc__terminate();\n
        v4[a0] = v6;\n
        v4 += 1;\n
        if (v4 >= v2)\n
            v4 = v2 - 1;\n
    } while (v6 != 10);\n
    v4[a0] = 0;\n
    v7 = v4;\n
    return v7;\n
}\n
", "4199088:cgc_myStrLen": "int cgc_myStrLen(char *v2)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    for (v0 = 0; v2[v0]; v0 += 1);\n
    v1 = v0;\n
    return v1;\n
}\n
", "4199185:sub_401311": null, "4199200:cgc_my_printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_my_printf(char *v7)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = -1;\n
        return v6;\n
    }\n
    v3 = cgc_myStrLen(v7);\n
    do\n
    {\n
        v0 = &v5;\n
        v2 = cgc_transmit(1, &v7[v4], v3 - v4);\n
        if (v2)\n
            cgc__terminate();\n
        v4 = *(&v5) + v4;\n
    } while (v4 < v3);\n
    v6 = v4;\n
    return v6;\n
}\n
", "4199390:sub_4013de": null, "4199392:cgc_snprintdecimal": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_snprintdecimal(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x2c]\n
    void* v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v4[2];  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v3 = 0;\n
    *(&v2) = 0;\n
    v1 = 0;\n
    v0 = 48;\n
    if (v5 && a0 >= 2)\n
    {\n
        if (a1)\n
        {\n
            for (v0 = 0; a1; v3 += 1)\n
            {\n
                v1 = (0 CONCAT a1) /m 10 >> 32;\n
                (&v0)[v3] = v1 + 48;\n
                a1 = (0 CONCAT a1) /m 10;\n
            }\n
            if (v3 >= a0)\n
            {\n
                v4 = -1;\n
                return v4;\n
            }\n
            for (v3 -= 1; v3 >= 0; v3 -= 1)\n
            {\n
                v2[v5] = (&v0)[v3];\n
                v2 = &v2[1];\n
            }\n
            v2[v5] = 0;\n
            v4 = v2;\n
            return v4;\n
        }\n
        else\n
        {\n
            *(v5) = 48;\n
            *((v5 + 1)) = 0;\n
            v4 = 1;\n
            return v4;\n
        }\n
    }\n
    *(&v4) = -1;\n
    return v4;\n
}\n
", "4199683:sub_401503": null, "4199696:cgc_strToUint32": "int cgc_strToUint32(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    int tmp_26;  // tmp #26\n
    char v1;  // [bp-0x19]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v12;  // eax\n
\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v7)\n
    {\n
        v6 = 0;\n
        return v6;\n
    }\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (v5[v7] >= 48)\n
            v1 = v5[v7] <= 57;\n
        if (!(v1 & 1))\n
            break;\n
        v2 = v5[v7] - 48;\n
        v8 = v3;\n
        v0 = v4;\n
        v3 = v8 * 10;\n
        v4 = (v8 * 10 >> 32) + v0 * 10;\n
        v9 = v2;\n
        v10 = v3;\n
        tmp_26 = v10;\n
        v12 = v4 + (tmp_26 + v9 < tmp_26);\n
        v3 = v10 + v9;\n
        v4 = v12;\n
        v5 += 1;\n
    }\n
    v6 = v3;\n
    return v6;\n
}\n
", "4199916:sub_4015ec": null, "4199920:cgc_printLargeInt": "int cgc_printLargeInt(unsigned int v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v0 = 0;\n
    if (!v1)\n
        return v1;\n
    for (v0 = 0; v0 < 8; v0 = v3)\n
    {\n
        v3 = v0 + 1;\n
    }\n
    return v3;\n
}\n
", "4199990:sub_401636": null, "4200000:cgc_largeIntAdd": "int cgc_largeIntAdd(unsigned int *v7, unsigned int *a0, unsigned int *a1)\n
{\n
    void* v0;  // [bp-0x28], Other Possible Types: unsigned int\n
    int tmp_22;  // tmp #22\n
    int tmp_32;  // tmp #32\n
    void* v1;  // [bp-0x24], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x18]\n
    void* v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v8;  // eax, Other Possible Types: unsigned int\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v13;  // edi\n
    unsigned int v15;  // eax\n
\n
    v8 = v7;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!(v7 && a0 && a1))\n
        return v7;\n
    for (v0 = 0; v0 < 8; v0 = v8)\n
    {\n
        v3 = a0[7 + -1 * v0];\n
        v4 = 0;\n
        v1 = a1[7 + -1 * v0];\n
        v2 = 0;\n
        v9 = v5;\n
        v10 = v3;\n
        tmp_22 = v9;\n
        v11 = v9 + v10;\n
        v13 = v1;\n
        tmp_32 = v11;\n
        v15 = v6 + v4 + (tmp_22 + v10 < tmp_22) + v2 + (tmp_32 + v13 < tmp_32);\n
        v5 = v11 + v13;\n
        v6 = v15;\n
        v7[7 + -1 * v0] = v5;\n
        v5 = v6;\n
        v6 = 0;\n
        v8 = v0 + 1;\n
    }\n
    return v8;\n
}\n
", "4200249:sub_401739": null, "4200256:cgc_largeIntShl1": "int cgc_largeIntShl1(unsigned int v1[8])\n
{\n
    unsigned int v0[8];  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2[8];  // eax\n
\n
    v0[0] = v2;\n
    v0[0] = 0;\n
    if (!v1)\n
        return v1;\n
    for (v0 = 0; v0 < 7; v0 += 1)\n
    {\n
        v1[v0] = v1[v0] * 2;\n
        v1[v0] = v1[v0] | (v1[1 + v0] & 0x80000000) >> 31;\n
    }\n
    v1[7] = v1[7] * 2;\n
    return v1;\n
}\n
", "4200395:sub_4017cb": null, "4200400:cgc_largeIntShl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_largeIntShl(unsigned int v2[8], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    int tmp_17;  // tmp #17\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    v3 = a0;\n
    v4 = v3 >> 31;\n
    tmp_17 = (v4 CONCAT v3) /m 0x100;\n
    v5 = (v4 CONCAT v3) /m 0x100;\n
    a0 = tmp_17 >> 32;\n
    for (v1 = 0; v1 < 0x100; v1 = v5)\n
    {\n
        cgc_largeIntShl1(v2);\n
        v5 = v1 + 1;\n
    }\n
    return v5;\n
}\n
", "4200503:sub_401837": null, "4200512:cgc_largeIntMul": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_largeIntMul(struct_0 *v7, struct_0 *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x60]\n
    unsigned int v1;  // [bp-0x5c]\n
    unsigned int v2;  // [bp-0x58]\n
    unsigned int v3;  // [bp-0x54]\n
    void* v4;  // [bp-0x50], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x4c]\n
    char v6;  // [bp-0x2c]\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = v7;\n
    v4 = 0;\n
    if (!(v7 && a0 && a1))\n
        return v7;\n
    for (v3 = 0; v3 < 8; v3 = v8)\n
    {\n
        *(&(&v5)[4 * v3]) = 0;\n
        v8 = v3 + 1;\n
    }\n
    for (v2 = 0; v2 < 8; v2 = v8)\n
    {\n
        *(&(&v6)[4 * v2]) = *(&a0[4 * v2]);\n
        v8 = v2 + 1;\n
    }\n
    for (v4 = 0; v4 < 0x100; v4 = v8)\n
    {\n
        if ((a1[7 + -1 * (v4 >> 5)] & 1 << (v4 & 31 & 31)))\n
            cgc_largeIntAdd(&v5, &v5, &v6);\n
        cgc_largeIntShl1(&v6);\n
        v8 = v4 + 1;\n
    }\n
    for (v1 = 0; v1 < 8; v1 = v8)\n
    {\n
        *(&v7[4 * v1]) = *(&(&v5)[4 * v1]);\n
        v8 = v1 + 1;\n
    }\n
    return v8;\n
}\n
", "4200875:sub_4019ab": null, "4200880:cgc_largeIntCmp": "int cgc_largeIntCmp(unsigned int *v2, unsigned int *a0)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    if (v2 && a0)\n
    {\n
        v0 = 0;\n
        while (true)\n
        {\n
            if (v0 >= 8)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
            if (*((v2 + 0x4 * v0)) > *((a0 + 0x4 * v0)))\n
            {\n
                v1 = 1;\n
                return v1;\n
            }\n
            else if (*((v2 + 0x4 * v0)) >= *((a0 + 0x4 * v0)))\n
            {\n
                v0 += 1;\n
            }\n
            else\n
            {\n
                v1 = -1;\n
                return v1;\n
            }\n
        }\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4201059:sub_401a63": null, "4201072:cgc_userMenu1": "int cgc_userMenu1()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(1, *(&v0));\n
}\n
", "4201107:sub_401a93": null, "4201120:cgc_userMenu": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_userMenu()\n
{\n
}\n
", "4201613:sub_401c8d": null, "4201616:cgc_userMenu2": "int cgc_userMenu2()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(2, *(&v0));\n
}\n
", "4201651:sub_401cb3": null, "4201664:cgc_userMenu3": "int cgc_userMenu3()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(3, *(&v0));\n
}\n
", "4201699:sub_401ce3": null, "4201712:cgc_userMenu4": "int cgc_userMenu4()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(4, *(&v0));\n
}\n
", "4201747:sub_401d13": null, "4201760:cgc_userMenu5": "int cgc_userMenu5()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(5, *(&v0));\n
}\n
", "4201795:sub_401d43": null, "4201808:cgc_userMenu6": "int cgc_userMenu6()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(6, *(&v0));\n
}\n
", "4201843:sub_401d73": null, "4201856:cgc_userMenu7": "int cgc_userMenu7()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(7, *(&v0));\n
}\n
", "4201891:sub_401da3": null, "4201904:cgc_userMenu8": "int cgc_userMenu8()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(8, *(&v0));\n
}\n
", "4201939:sub_401dd3": null, "4201952:cgc_userMenu9": "int cgc_userMenu9()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(9, *(&v0));\n
}\n
", "4201987:sub_401e03": null, "4202000:cgc_userMenu10": "int cgc_userMenu10()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(10, *(&v0));\n
}\n
", "4202035:sub_401e33": null, "4202048:cgc_userMenu11": "int cgc_userMenu11()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(11, *(&v0));\n
}\n
", "4202083:sub_401e63": null, "4202096:cgc_userMenu12": "int cgc_userMenu12()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(12, *(&v0));\n
}\n
", "4202131:sub_401e93": null, "4202144:cgc_userMenu13": "int cgc_userMenu13()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(13, *(&v0));\n
}\n
", "4202179:sub_401ec3": null, "4202192:cgc_userMenu14": "int cgc_userMenu14()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(14, *(&v0));\n
}\n
", "4202227:sub_401ef3": null, "4202240:cgc_userMenu15": "int cgc_userMenu15()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(15, *(&v0));\n
}\n
", "4202275:sub_401f23": null, "4202288:cgc_userMenu16": "int cgc_userMenu16()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(16, *(&v0));\n
}\n
", "4202323:sub_401f53": null, "4202336:cgc_userMenu17": "int cgc_userMenu17()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(17, *(&v0));\n
}\n
", "4202371:sub_401f83": null, "4202384:cgc_userMenu18": "int cgc_userMenu18()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(18, *(&v0));\n
}\n
", "4202419:sub_401fb3": null, "4202432:cgc_userMenu19": "int cgc_userMenu19()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(19, *(&v0));\n
}\n
", "4202467:sub_401fe3": null, "4202480:cgc_userMenu20": "int cgc_userMenu20()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(20, *(&v0));\n
}\n
", "4202515:sub_402013": null, "4202528:cgc_userMenu21": "int cgc_userMenu21()\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return cgc_userMenu(21, *(&v0));\n
}\n
", "4202563:sub_402043": null, "4202576:cgc_initTable": "extern unsigned int _GLOBAL_OFFSET_TABLE_[69069];\n
\n
int cgc_initTable()\n
{\n
    unsigned int v0[69069];  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v5[69069];  // eax\n
\n
    v0[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    for (v3 = 0; v3 < 50; v3 += 1)\n
    {\n
        for (v2 = 0; v2 < 50; v2 += 1)\n
        {\n
            for (v1 = 0; v1 < 50; v1 += 1)\n
            {\n
                *((124 + &v0[0] + 0x2710 * v3 + 0xc8 * v2 + 4 * v1)) = 0;\n
            }\n
        }\n
    }\n
    v5 = v0;\n
    v5[7736] = &v5[2477];\n
    v5[2839] = &v5[2341];\n
    v5[15441] = &v5[2329];\n
    v5[23146] = &v5[2317];\n
    v5[8049] = &v5[2305];\n
    v5[18248] = &v5[2293];\n
    v5[30851] = &v5[2281];\n
    v5[10903] = &v5[2269];\n
    v5[8455] = &v5[2257];\n
    v5[46002] = &v5[2245];\n
    v5[28308] = &v5[2233];\n
    v5[38556] = &v5[2221];\n
    v5[46261] = &v5[2209];\n
    v5[16067] = &v5[2197];\n
    v5[36465] = &v5[2185];\n
    v5[16664] = &v5[2173];\n
    v5[53966] = &v5[2161];\n
    v5[41222] = &v5[2149];\n
    v5[14071] = &v5[2137];\n
    v5[69068] = &v5[2125];\n
    v5[61671] = &v5[2113];\n
    v5[5647] = &v5[2317];\n
    v5[11263] = &v5[2209];\n
    v5[5921] = &v5[2173];\n
    v5[9368] = &v5[2125];\n
    return v0;\n
}\n
", "4203066:sub_40223a": null, "4203072:cgc_initPasswords": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initPasswords()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = 0; v2 < 21; v2 = v4)\n
    {\n
        for (v1 = 0; v1 < 10; v1 += 1)\n
        {\n
            v5 = v0;\n
            *((v5 + 500124 + v2 * 120 + v1 * 12)) = 0;\n
            *((v5 + 500124 + v2 * 120 + v1 * 12 + 4)) = 0;\n
            *((v5 + 500124 + v2 * 120 + v1 * 12 + 8)) = 0;\n
        }\n
        v4 = v2 + 1;\n
    }\n
    return v4;\n
}\n
", "4203242:sub_4022ea": null, "4203248:cgc_addPW": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_addPW(unsigned int v3, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 < 10)\n
        {\n
            if (!*((v0 + 500124 + v3 * 120 + v1 * 12)) && !*((v0 + 500124 + v3 * 120 + v1 * 12 + 4)) && !*((v0 + 500124 + v3 * 120 + v1 * 12 + 8)))\n
            {\n
                v4 = v0;\n
                *((v4 + 500124 + v3 * 120 + v1 * 12)) = a0;\n
                *((v4 + 500124 + v3 * 120 + v1 * 12 + 4)) = a1;\n
                *((v4 + 500124 + v3 * 120 + v1 * 12 + 8)) = a2;\n
                v2 = 0;\n
                return v2;\n
            }\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = -1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4203519:sub_4023ff": null, "4203520:cgc_rmPW": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_rmPW(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < 10)\n
        {\n
            if (*((v0 + 500124 + v4 * 120 + v2 * 12)) && *((v0 + 500124 + v4 * 120 + v2 * 12 + 4)) && *((v0 + 500124 + v4 * 120 + v2 * 12 + 8)))\n
            {\n
                if (v1 != a0)\n
                {\n
                    v1 += 1;\n
                }\n
                else\n
                {\n
                    v5 = v0;\n
                    *((v5 + 500124 + v4 * 120 + v2 * 12)) = 0;\n
                    *((v5 + 500124 + v4 * 120 + v2 * 12 + 4)) = 0;\n
                    *((v5 + 500124 + v4 * 120 + v2 * 12 + 8)) = 0;\n
                    v3 = 0;\n
                    return v3;\n
                }\n
            }\n
            v2 = v2 + 1;\n
        }\n
        else\n
        {\n
            v3 = -1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_printPW": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_printPW(unsigned int *v4)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    char v1;  // [bp-0x50]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v5;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v4;\n
    v3 = 0;\n
    v2 = 0;\n
    for (v3 = 0; v3 < 10; v3 = v5)\n
    {\n
        if (!*((v0 + 500124 + v4 * 120 + v3 * 12)) && !*((v0 + 500124 + v4 * 120 + v3 * 12 + 4)) && !*((v0 + 500124 + v4 * 120 + v3 * 12 + 8)))\n
            goto LABEL_402703;\n
        cgc_my_printf(v0 - 4308);\n
        cgc_snprintdecimal(&v1, 64, v2);\n
        cgc_my_printf(&v1);\n
        cgc_my_printf(v0 - 4298);\n
        cgc_snprintdecimal(&v1, 64, *((v0 + 500124 + v4 * 120 + v3 * 12)));\n
        cgc_my_printf(&v1);\n
        cgc_my_printf(v0 - 4294);\n
        cgc_snprintdecimal(&v1, 64, *((v0 + 500124 + v4 * 120 + v3 * 12 + 4)));\n
        cgc_my_printf(&v1);\n
        cgc_my_printf(v0 - 4294);\n
        cgc_snprintdecimal(&v1, 64, *((v0 + 500124 + v4 * 120 + v3 * 12 + 8)));\n
        cgc_my_printf(&v1);\n
        cgc_my_printf(v0 - 4233);\n
        v2 += 1;\n
LABEL_402703:\n
        v5 = v3 + 1;\n
    }\n
    return v5;\n
}\n
", "4204316:sub_40271c": null, "4204320:cgc_checkLogin": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checkLogin(unsigned int *v6, void* a0, void* a1, void* a2)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    struct_0 *v1;  // [bp-0x50], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x4c]\n
    char v3;  // [bp-0x2c]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_largeIntCmp(a0, a1) < 0 && cgc_largeIntCmp(a1, a2) < 0 && cgc_largeIntCmp(a2, v6) < 0)\n
    {\n
        for (v1 = 0; v1 < 8; v1 += 1)\n
        {\n
            *((&v3 + 0x4 * v1)) = 0;\n
        }\n
        cgc_largeIntMul(&v2, a0, a0);\n
        cgc_largeIntMul(&v2, &v2, a0);\n
        cgc_largeIntAdd(&v3, &v3, &v2);\n
        cgc_largeIntMul(&v2, a1, a1);\n
        cgc_largeIntMul(&v2, &v2, a1);\n
        cgc_largeIntAdd(&v3, &v3, &v2);\n
        cgc_largeIntMul(&v2, a2, a2);\n
        cgc_largeIntMul(&v2, &v2, a2);\n
        cgc_largeIntAdd(&v3, &v3, &v2);\n
        cgc_largeIntMul(&v2, v6, v6);\n
        cgc_largeIntMul(&v2, &v2, v6);\n
        v4 = !cgc_largeIntCmp(&v2, &v3);\n
        return v4;\n
    }\n
    v4 = 0;\n
    return v4;\n
}\n
", "4204836:sub_402924": null, "4204848:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v12, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xe8]\n
    char v1;  // [bp-0xe4]\n
    struct struct_0 **v2;  // [bp-0xa4]\n
    void* v3;  // [bp-0xa0], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x9c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x98], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x94]\n
    char v7;  // [bp-0x74]\n
    char v8;  // [bp-0x54]\n
    unsigned int v9;  // [bp-0x34]\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    cgc_initTable();\n
    cgc_initPasswords();\n
    while (true)\n
    {\n
        cgc_my_printf(v0 - 4218);\n
        cgc_my_printf(v0 - 4174);\n
        cgc_readLine(0, &v1, 64);\n
        v5 = cgc_strToUint32(&v1);\n
        cgc_my_printf(v0 - 4290);\n
        cgc_readLine(0, &v1, 64);\n
        v4 = cgc_strToUint32(&v1);\n
        cgc_my_printf(v0 - 4276);\n
        cgc_readLine(0, &v1, 64);\n
        v3 = cgc_strToUint32(&v1);\n
        cgc_my_printf(v0 - 4261);\n
        cgc_readLine(0, &v1, 64);\n
        v2 = cgc_strToUint32(&v1);\n
        if (v5 >= 21)\n
        {\n
            cgc_my_printf(v0 - 4167);\n
            v10 = 0;\n
            return v10;\n
        }\n
        cgc_intToLargeInt(&v9);\n
        cgc_intToLargeInt(&v8);\n
        cgc_intToLargeInt(&v7);\n
        cgc_intToLargeInt(&v6);\n
        if (!cgc_checkLogin(&v9, &v8, &v7, &v6))\n
        {\n
            cgc_my_printf(v0 - 4151);\n
            v10 = 0;\n
            return v10;\n
        }\n
        *((v0 + 124 + v4 * 10000 + v3 * 200 + v2 * 4))();\n
    }\n
}\n
", "4205630:sub_402c3e": null, "4205632:cgc_intToLargeInt": "int cgc_intToLargeInt(unsigned int v1[8], unsigned int a0)\n
{\n
    unsigned int v0[8];  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2[8];  // eax\n
\n
    v0[0] = v2;\n
    if (!v1)\n
        return v1;\n
    for (v0 = 0; v0 < 8; v0 += 1)\n
    {\n
        v1[v0] = 0;\n
    }\n
    v1[7] = a0;\n
    return v1;\n
}\n
", "4205728:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}