{"4202496:_init": "extern struct_0 *g_409558;\n
\n
int _init()\n
{\n
    if (g_409558)\n
    {\n
        g_409558();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202672:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202688:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 29743;\n
    v6 = v5 + 135;\n
    v7 = v5 + 135;\n
    if (v7 == v6)\n
        return v5 + 135;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 29679;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 135;\n
    v9 = (v6 + 135 - (v6 + 135) >> 31) + (135 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409554;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409554)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_floor": null, "4203204:sub_4022c4": null, "4203216:cgc_round_away_from_zero": null, "4203370:sub_40236a": null, "4203376:cgc_round": null, "4203520:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203612:sub_40245c": null, "4203616:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4203825:sub_402531": null, "4203840:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v3 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4204033:sub_402601": null, "4204048:cgc_float_to_str": null, "4204906:sub_40296a": null, "4204912:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v14, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x7c]\n
    unsigned int v2;  // [bp-0x78]\n
    char *v3;  // [bp-0x74], Other Possible Types: unsigned int\n
    struct_1 *v4;  // [bp-0x70], Other Possible Types: unsigned int\n
    unsigned long v5;  // [bp-0x6c]\n
    struct_1 *v6;  // [bp-0x64], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x60]\n
    struct_1 *v8;  // [bp-0x5c], Other Possible Types: unsigned int\n
    char *v9;  // [bp-0x58]\n
    char v10;  // [bp-0x51]\n
    char v11;  // [bp-0x50]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0xc]\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    struct struct_0 **v22;  // eax\n
    struct struct_0 **v23;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    if (!v14)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v13 = v12;\n
            return v13;\n
        }\n
        else if (*(v14) != 64)\n
        {\n
            cgc_putc(*(v14));\n
            v14 += 1;\n
            v12 += 1;\n
        }\n
        else\n
        {\n
            v14 += 1;\n
            v1 = *(v14);\n
            if (!v1)\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            if (v1 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v1 == 99)\n
            {\n
                v15 = a0;\n
                a0 = v15 + 1;\n
                v10 = *(v15);\n
                cgc_putc(v10);\n
                v12 += 1;\n
            }\n
            else if (v1 == 100)\n
            {\n
                v16 = a0;\n
                a0 = v16 + 1;\n
                v9 = &*(v16)->field_0;\n
                cgc_int_to_str(v9, &v11);\n
                for (v8 = &v11; *(v8); v8 += 1)\n
                {\n
                    cgc_putc(*(v8));\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t23,0] = t26\n
                [D] PutI(136:I8x8)[t23,0] = 0x01\n
                v5 = ([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan);\n
                [D] PutI(136:I8x8)[t38,0] = 0x00\n
                v19 = ftop<4> - 1 + 1;\n
                v20 = v19 - 1;\n
                [D] PutI(72:F64x8)[t47,0] = t50\n
                [D] PutI(136:I8x8)[t47,0] = 0x01\n
                v0 = &v11;\n
                [D] PutI(136:I8x8)[t66,0] = 0x00\n
                v21 = v20 + 1;\n
                cgc_float_to_str();\n
                for (v4 = &v11; v4->field_0; v4 += 1)\n
                {\n
                    cgc_putc(v4->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 115)\n
            {\n
                v22 = a0;\n
                a0 = v22 + 1;\n
                for (v3 = &*(v22)->field_0; *(v3); v3 += 1)\n
                {\n
                    cgc_putc(*(v3));\n
                    v12 += 1;\n
                }\n
            }\n
            else if (v1 == 120)\n
            {\n
                v23 = a0;\n
                a0 = v23 + 1;\n
                v7 = &*(v23)->field_0;\n
                cgc_int_to_hex(v7, &v11);\n
                for (v6 = &v11; v6->field_0; v6 += 1)\n
                {\n
                    cgc_putc(v6->field_0);\n
                    v12 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v13 = -1;\n
                return v13;\n
            }\n
            v14 += 1;\n
        }\n
    }\n
}\n
", "4205671:sub_402c67": null, "4205680:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4205738:sub_402caa": null, "4205744:cgc_sprng": "typedef struct struct_0 {\n
    char padding_0[692];\n
    unsigned int field_2b4;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprng(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // edi\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = a0;\n
    v2 = v4;\n
    for (v1 = 0; v1 < 16; v1 += 1)\n
    {\n
        v5 = v2;\n
        v6 = v3;\n
        v3 = v6 ^ v6 / 0x1000;\n
        v2 = v5 ^ ((v6 CONCAT v5) * 0x100000 >> 32);\n
        v8 = v2;\n
        v9 = v3;\n
        v3 = v9 ^ ((v9 CONCAT v8) * 0x2000000 >> 32);\n
        v2 = v8 ^ v8 * 0x2000000;\n
        v12 = v2;\n
        v13 = v3;\n
        v3 = v13 ^ v13 / 0x8000000;\n
        v2 = v12 ^ ((v13 CONCAT v12) * 32 >> 32);\n
        v15 = v2;\n
        v16 = v0;\n
        v17 = v1;\n
        *(&v16->padding_0[564 + 8 * v17]) = v15 * 3625897269;\n
        *(&v16->padding_0[568 + 8 * v17]) = (v15 * 3625897269 >> 32) + v15 * 419896726 + v3 * 3625897269;\n
    }\n
    v0->field_2b4 = 0;\n
    return v0;\n
}\n
", "4205970:sub_402d92": null, "4205984:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int position;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[568 + 8 * position]);\n
    v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[564 + 8 * position]);\n
    v9 = position + 1;\n
    if (v9 < 0)\n
        v9 = position + 16;\n
    position = position + -(v9 & -0x10) + 1;\n
    v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[568 + 8 * position]);\n
    v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[564 + 8 * position]);\n
    v10 = v0;\n
    v11 = v1;\n
    v1 = v11 ^ ((v11 CONCAT v10) * 0x8000000 >> 32);\n
    v0 = v10 ^ v10 * 0x8000000;\n
    v14 = v0;\n
    v15 = v1;\n
    v1 = v15 ^ v15 / 0x2000;\n
    v0 = v14 ^ ((v15 CONCAT v14) * 0x80000 >> 32);\n
    v2 ^= v3 >> 14;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[568 + 8 * position]) = v3 ^ v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[564 + 8 * position]) = v2 ^ v0;\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[564 + 8 * position]) * 3479400805;\n
}\n
", "4206248:sub_402ea8": null, "4206256:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 <= v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = a0 - v5 + 1;\n
    v2 = (0 CONCAT -1) /m v3;\n
    do\n
    {\n
        v1 = cgc_prng();\n
    } while (v1 >= v3 * v2);\n
    v4 = (0 CONCAT v1) /m v2 + v5;\n
    return v4;\n
}\n
", "4206385:sub_402f31": null, "4206400:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v0;\n
}\n
", "4206472:sub_402f88": null, "4206480:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206534:sub_402fc6": null, "4206544:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206598:sub_403006": null, "4206608:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4206674:sub_403052": null, "4206688:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4206754:sub_4030a2": null, "4206768:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4206822:sub_4030e6": null, "4206832:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4206926:sub_40314e": null, "4206928:cgc_isnan": null, "4206951:sub_403167": null, "4206960:cgc_isinf": null, "4207007:sub_40319f": null, "4207008:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4033d2:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_4033ab;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_4033ab;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_4033ab;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4033d2;\n
                if (!v4)\n
                {\n
LABEL_403327:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_4033ab;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_403327;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_4033ab:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4207596:sub_4033ec": null, "4207600:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4208004:sub_403584": null, "4208016:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4208107:sub_4035eb": null, "4208112:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = v1[a0];\n
        if (!(v0 & 1))\n
            break;\n
        v1[v2] = v1[a0];\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        v1[v2] = 0;\n
    }\n
    return v2;\n
}\n
", "4208267:sub_40368b": null, "4208272:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4208380:sub_4036fc": null, "4208384:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4208462:sub_40374e": null, "4208464:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4208572:sub_4037bc": null, "4208576:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4208771:sub_403883": null, "4208784:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4208861:sub_4038dd": null, "4208864:cgc_receive_fixed_input": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_fixed_input(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 < a1)\n
            *((v5 + v4)) = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 == a0)\n
        {\n
            return v4;\n
        }\n
        else if (v4 < a1)\n
        {\n
            *((v5 + v4)) = v2;\n
            v4 += 1;\n
        }\n
    }\n
}\n
", "4209063:sub_4039a7": null, "4209072:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        *((v5 + v4)) = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            *((v5 + v4)) = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4209264:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); *((a0 + v2)); v2 += 1)\n
        {\n
            v3[v1] = *((a0 + v2));\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4209423:sub_403b0f": null, "4209424:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4209623:sub_403bd7": null, "4209632:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 9280, 1);\n
}\n
", "4209755:sub_403c5b": null, "4209760:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4209866:sub_403cca": null, "4209872:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[544];\n
    unsigned int field_220;\n
    unsigned int field_224;\n
    unsigned int field_228;\n
    struct struct_1 *field_22c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_224)\n
        {\n
            cgc_deallocate(v4->field_224);\n
            v12 = v4;\n
            v12->field_224 = 0;\n
            v12->field_228 = 0;\n
            v12->field_22c = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_224)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_22c >= v11->field_224 + v11->field_228)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_224)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_228 = cgc_strlen(v10);\n
        v0 = &v13->field_224;\n
        if (cgc_allocate(v13->field_228, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_224, v10);\n
        v14 = v4;\n
        v14->field_22c = v14->field_224;\n
    }\n
    v10 = &v4->field_22c->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_224 + v15->field_228;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_224 + v16->field_228)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_220 = v8;\n
    *(v7) = 0;\n
    v17->field_22c = v7 + 1;\n
    v9 = v17->field_220;\n
    return v9;\n
}\n
", "4210619:sub_403fbb": null, "4210624:cgc_write": "int cgc_write(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    cgc_transmit(1, v3, a0);\n
    if (a0 != *(&v1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4210721:sub_404021": null, "4210736:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4210928:cgc_is_an_ace": "int cgc_is_an_ace(char v2)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 1;\n
    if (v2 != 13)\n
    {\n
        v1 = 1;\n
        if (v2 != 26)\n
        {\n
            v1 = 1;\n
            if (v2 != 39)\n
                v1 = v2 == 52;\n
        }\n
    }\n
    return v1 & 1;\n
}\n
", "4211015:sub_404147": null, "4211024:cgc_hand_total": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_hand_total(unsigned int v5, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v4 = a1;\n
            return v4;\n
        }\n
        if (cgc_is_an_ace(v3[v5]))\n
            break;\n
        a1 = *((v0 + v3[v5] * 4 - 9500)) + a1;\n
        v3 += 1;\n
    }\n
    v3 += 1;\n
    v2 = cgc_hand_total(&v3[v5], a0 - v3, a1 + 11);\n
    v1 = cgc_hand_total(&v3[v5], a0 - v3, a1 + 1);\n
    if (v2 <= 21)\n
    {\n
        v4 = v2;\n
        return v4;\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4211285:sub_404255": null, "4211296:cgc_blackjack": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[82];\n
\n
int cgc_blackjack(unsigned int v12[13])\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0xac]\n
    unsigned int v1;  // [bp-0xa8]\n
    unsigned int v2;  // [bp-0xa4]\n
    unsigned int v3[82];  // [bp-0xa0]\n
    struct_0 *v4;  // [bp-0x9c], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x95]\n
    char v6;  // [bp-0x5c]\n
    char v7;  // [bp-0x1e]\n
    char v8;  // [bp-0x1d]\n
    char v9;  // [bp-0x13]\n
    char v10;  // [bp-0x12]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14[13];  // eax\n
    unsigned int v15[13];  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18[13];  // eax, Other Possible Types: unsigned int\n
\n
    v11 = v13;\n
    v3[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    cgc_bzero(&v9, 11);\n
    cgc_bzero(&v7, 11);\n
    if (!v12)\n
        v12 = &v6;\n
    cgc_shuffle();\n
    v14 = v12;\n
    v14[9] = v14[9] + 50;\n
    if (*((v12 + 48)) >= 10)\n
    {\n
        v15 = v12;\n
        v15[12] = v15[12] - 10;\n
    }\n
    v9 = cgc_draw();\n
    v7 = cgc_draw();\n
    v10 = cgc_draw();\n
    v8 = cgc_draw();\n
    cgc_printf(&v3[28 + 26]);\n
    cgc_printf(&v3[28 + 23] + 2);\n
    if (cgc_hand_total(&v7, 11, 0) != 21)\n
    {\n
        if (cgc_hand_total(&v9, 11, 0) == 21)\n
        {\n
            cgc_printf(&v3[28 + 1] + 2);\n
            v18 = v12;\n
            *((v18 + 48)) = v3[80] + *((v18 + 48));\n
            return v12;\n
        }\n
        v5 = 0;\n
        v4 = 2;\n
        do\n
        {\n
            cgc_printf(&v3[27 + 78] + 1);\n
            cgc_receive_fixed_input(&v5, 10, 1);\n
            if (v5 == 104)\n
            {\n
                tmp_13 = cgc_draw();\n
                v16 = v4;\n
                v4 = v16 + 1;\n
                (&v9)[v16] = tmp_13;\n
                cgc_printf(&v3[27 + 70] + 1);\n
                cgc_print_hand(&v9);\n
                if (cgc_hand_total(&v9, 11, 0) > 21)\n
                {\n
                    cgc_printf(&v3[27 + 69] + 1);\n
                    break;\n
                }\n
            }\n
        } while (v5 != 115);\n
        v4 = 2;\n
        while (true)\n
        {\n
            cgc_printf(&v3[27 + 67] + 3);\n
            cgc_print_hand(&v7);\n
            if (cgc_hand_total(&v7, 11, 0) >= 17)\n
                break;\n
            tmp_13 = cgc_draw();\n
            v17 = v4;\n
            v4 = v17 + 1;\n
            (&v7)[v17] = tmp_13;\n
        }\n
        v2 = cgc_hand_total(&v9, 11, 0);\n
        cgc_hand_total(&v7, 11, 0);\n
        cgc_printf(&v3[27 + 66] + 3);\n
        if (cgc_hand_total(&v9, 11, 0) > 21)\n
        {\n
            v18 = cgc_printf(&v3[27 + 64]);\n
            return v18;\n
        }\n
        if (cgc_hand_total(&v7, 11, 0) <= 21)\n
        {\n
            v1 = cgc_hand_total(&v9, 11, 0);\n
            if (v1 <= cgc_hand_total(&v7, 11, 0))\n
            {\n
                v0 = cgc_hand_total(&v9, 11, 0);\n
                if (v0 != cgc_hand_total(&v7, 11, 0))\n
                {\n
                    v18 = cgc_printf(&v3[27 + 60] + 3);\n
                }\n
                else\n
                {\n
                    cgc_printf(&v3[27 + 52] + 1);\n
                    v18 = v12;\n
                    v18[12] = v3[79] + v18[12];\n
                }\n
            }\n
            else\n
            {\n
                cgc_printf(&v3[27 + 54] + 3);\n
                v18 = v12;\n
                v18[12] = v3[81] + v18[12];\n
            }\n
        }\n
        else\n
        {\n
            cgc_printf(&v3[27 + 58]);\n
            v18 = v12;\n
            v18[12] = v3[81] + v18[12];\n
        }\n
        return v18;\n
    }\n
    else\n
    {\n
        if (cgc_hand_total(&v9, 11, 0) != 21)\n
        {\n
            v18 = cgc_printf(&v3[28 + 8] + 3);\n
            return v18;\n
        }\n
        cgc_printf(&v3[28 + 20] + 3);\n
        v18 = v12;\n
        *((v18 + 48)) = v3[79] + *((v18 + 48));\n
        return v12;\n
    }\n
}\n
", "4212943:sub_4048cf": null, "4212944:cgc_lookup_by_number": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[48];\n
    struct struct_0 *field_34;\n
} struct_0;\n
\n
int cgc_lookup_by_number(unsigned int v1, struct_0 *a0)\n
{\n
    struct_0 *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    struct_0 *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = a0;\n
    while (true)\n
    {\n
        if (!v0)\n
            return v0;\n
        if (*(v0) == v1)\n
            return v0;\n
        v0 = *((v0 + 52));\n
    }\n
}\n
", "4213011:sub_404913": null, "4213024:cgc_login_player_by_number": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_login_player_by_number(void* v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Enter Player Number:\");\n
    memset(&v3, 0, 12);\n
    cgc_receive_fixed_input(&v3, 10, 11);\n
    v2 = cgc_atoi(&v3);\n
    v1 = cgc_lookup_by_number(v2, v5);\n
    if (v1)\n
    {\n
        cgc_printf(v0 - 8445);\n
        return v1;\n
    }\n
    cgc_printf(v0 - 8463);\n
    return v1;\n
}\n
", "4213234:sub_4049f2": null, "4213248:cgc_print_player_info": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_player_info(unsigned int v2[13])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v3 = cgc_printf(v1 - 8433);\n
        return v3;\n
    }\n
    v0 = &v2[1];\n
    cgc_printf(v1 - 8410);\n
    v0 = v2[0];\n
    cgc_printf(v1 - 8393);\n
    v0 = v2[9];\n
    cgc_printf(v1 - 8374);\n
    v0 = v2[10];\n
    cgc_printf(v1 - 8353);\n
    v0 = v2[11];\n
    cgc_printf(v1 - 8336);\n
    v0 = v2[12];\n
    cgc_printf(v1 - 8319);\n
    v3 = cgc_printf(v1 - 9280);\n
    return v3;\n
}\n
", "4213489:sub_404af1": null, "4213504:cgc_register_player": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_register_player(void* v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x1c]\n
    unsigned int *v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_allocate(56, 0, &v2))\n
    {\n
        cgc_printf(v0 - 8292);\n
        v3 = v5;\n
        return v3;\n
    }\n
    cgc_memset(v2, 0, 56);\n
    do\n
    {\n
        *(v2) = cgc_prng() & 2147483647;\n
    } while (cgc_lookup_by_number(*(v2), v5));\n
    cgc_printf(v0 - 8252);\n
    cgc_receive_fixed_input(v2 + 1, 10, 31);\n
    cgc_printf(v0 - 8235);\n
    memset(&v1, 0, 12);\n
    cgc_receive_fixed_input(&v1, 10, 11);\n
    v2[12] = cgc_atoi(&v1);\n
    if (v2[12] <= 1000 && !(v2[12] < 0))\n
        goto LABEL_404c6e;\n
    v2[12] = 1000;\n
LABEL_404c6e:\n
    cgc_print_player_info(v2);\n
    v2[13] = v5;\n
    v3 = v2;\n
    return v3;\n
}\n
", "4213908:sub_404c94": null, "4213920:cgc_print_all_players": "typedef struct struct_0 {\n
    char padding_0[52];\n
    struct struct_0 *field_34;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_all_players(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = v1; v1; v1 = v2)\n
    {\n
        cgc_print_player_info(v1);\n
        v2 = v1->field_34;\n
    }\n
    return v2;\n
}\n
", "4213989:sub_404ce5": null, "4214000:cgc_lookup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lookup(char v4)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4 - 33;\n
    if (v2 > 93)\n
    {\n
        v0 = 1;\n
        cgc__terminate();\n
        return *(&v3);\n
    }\n
    goto *(((stack_base)[20] + (stack_base)[16] * 4 - 8892)) + (stack_base)[20];\n
}\n
", "4214277:sub_404e05": null, "4214288:cgc_decode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_decode(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1;  // [bp-0x11]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc]\n
    char *v5;  // eax\n
    char *v6;  // eax\n
    char *v7;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v4;\n
    for (v2 = a0; v3 < &v4[a1]; *(v7) = v1)\n
    {\n
        if (*(v3) != 96)\n
        {\n
            v5 = v3;\n
            v3 = v5 + 1;\n
            v1 = cgc_lookup(*(v5));\n
            v6 = v3;\n
            v3 = v6 + 1;\n
            v1 = cgc_lookup(*(v6)) * 16 | v1;\n
        }\n
        else\n
        {\n
            v3 += 1;\n
            v1 = 0;\n
        }\n
        v7 = v2;\n
        v2 = v7 + 1;\n
    }\n
    return v3;\n
}\n
", "4214473:sub_404ec9": null, "4214480:cgc_programming_interface": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_programming_interface()\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    char v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x20]\n
    void* v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    char v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // ebx\n
\n
    v8 = v10;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = cgc_receive(0, &v5, 4, &v6);\n
    if (!v7 && !(!*(&v6)))\n
        goto LABEL_404f30;\n
    cgc__terminate();\n
LABEL_404f30:\n
    if (*(&v5) > 0 && *(&v5) <= 112)\n
        goto LABEL_404f53;\n
    cgc__terminate();\n
LABEL_404f53:\n
    v7 = cgc_allocate(*(&v5), 1);\n
    if (!v7 && !(!*(&v4)))\n
        goto LABEL_404f96;\n
    cgc__terminate();\n
LABEL_404f96:\n
    v3 = 0;\n
    for (v2 = *(&v4); v3 < *(&v5); v2 = *(&v6) + v2)\n
    {\n
        v7 = cgc_receive(0, v2, *(&v5) - v3);\n
        if (v7)\n
            cgc__terminate();\n
        v3 = *(&v6) + v3;\n
    }\n
    cgc_decode(*(&v4), &v1, *(&v5));\n
    cgc_memcpy(v0 + 272, &v1, 56);\n
    v11 = v8;\n
    return cgc_deallocate(*(&v4));\n
}\n
", "4214882:sub_405062": null, "4214896:main": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[48];\n
    unsigned int field_30;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x90]\n
    struct_0 *v3;  // [bp-0x7c]\n
    unsigned int v4;  // [bp-0x78]\n
    void* v6;  // [bp-0x70]\n
    struct_1 *v7;  // [bp-0x6c]\n
    unsigned int v8;  // [bp-0x68]\n
    void* v9;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v11;  // [bp-0x5c]\n
    unsigned int v12;  // [bp-0x58]\n
    unsigned int v13;  // [bp-0x54]\n
    void* v14;  // [bp-0x14]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v24;  // ebx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // esi\n
    unsigned int v36;  // edi\n
    unsigned int v37;  // eax\n
\n
    v15 = v24;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = 0;\n
    cgc_printf(\"Enter your name:\");\n
    v0 = &v11;\n
    v12 = cgc_receive(0, &v13, 83);\n
    if (!v12 && !(!*(&v11)))\n
        goto LABEL_4050f3;\n
    cgc__terminate();\n
LABEL_4050f3:\n
    *(&v13 + *(&v11)) = 0;\n
    if (*(&v12 + cgc_strlen(&v13)) == 10)\n
        *(&v12 + cgc_strlen(&v13)) = 0;\n
    cgc_printf(v4 - 8445);\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    while (true)\n
    {\n
        v3 = v8;\n
        if (v3 < cgc_strlen(&v13))\n
        {\n
            v31 = v9;\n
            v32 = v10;\n
            v36 = *(&v13 + v8);\n
            v37 = v31 * 0x100 | v32 / 0x1000000 ^ v36;\n
            v10 = ((v32 CONCAT v31) * 0x100 >> 32) | v36 >> 31;\n
            v9 = v37;\n
            v8 += 1;\n
        }\n
        else\n
        {\n
            cgc_sprng(v9, v10);\n
            if (!(v9 ^ 842401362) && !(v10 ^ 1684156720))\n
            {\n
                cgc_printf(v4 - 8198);\n
                cgc_programming_interface();\n
            }\n
            v7 = 0;\n
            v6 = 0;\n
        }\n
    }\n
}\n
", "4216159:sub_40555f": null, "4216160:cgc_shuffle": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_shuffle(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2[53];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    for (*(&v2[0]) = 0; v2 < 52; v2 = &v2[1])\n
    {\n
        v1 = cgc_random_in_range(0, v2);\n
        v2[v3] = *((v3 + v1));\n
        *((v3 + v1)) = v2 + 1;\n
    }\n
    *((v3 + 52)) = 0;\n
    return v3;\n
}\n
", "4216291:sub_4055e3": null, "4216304:cgc_print_deck": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_deck(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2[53];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"deck: \");\n
    for (*(&v2[0]) = 0; v2 < 52; v2 += 1)\n
    {\n
        v6 = v1;\n
        v0 = *((v6 + *((v4 + v2)) * 4 + 328));\n
        cgc_printf(v6 - 7772);\n
    }\n
    v0 = *((v4 + 52));\n
    v7 = v3;\n
    return cgc_printf(v1 - 7768);\n
}\n
", "4216446:sub_40567e": null, "4216448:cgc_print_hand": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_hand(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // ebx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v2 = 0; v2 < a0; v2 += 1)\n
    {\n
        if (v2[v3] > 0 && v2[v3] < 53)\n
        {\n
            v4 = v1;\n
            v0 = *((v4 + v2[v3] * 4 + 328));\n
            cgc_printf(v4 - 7772);\n
        }\n
    }\n
    return cgc_printf(v1 - 9280);\n
}\n
", "4216613:sub_405725": null, "4216624:cgc_draw": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_draw(char v2[53])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    char v4[53];  // eax\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_is_empty())\n
    {\n
        cgc_printf(v0 - 7758);\n
        cgc__terminate();\n
    }\n
    v4 = v2;\n
    v4[52] = v4[52] + 1;\n
    return v2[v2[52] - 1];\n
}\n
", "4216737:sub_4057a1": null, "4216752:cgc_is_empty": "typedef struct struct_0 {\n
    char padding_0[52];\n
    char field_34;\n
} struct_0;\n
\n
int cgc_is_empty(struct_0 *v0)\n
{\n
    return !(v0->field_34 < 52);\n
}\n
", "4216778:sub_4057ca": null, "4216784:cgc_get_suit": "int cgc_get_suit(char v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 > 0 && v1 <= 53)\n
    {\n
        if (v1 < 14)\n
        {\n
            v0 = 1;\n
            return v0;\n
        }\n
        else if (v1 < 27)\n
        {\n
            v0 = 2;\n
            return v0;\n
        }\n
        else if (v1 >= 40)\n
        {\n
            v0 = 4;\n
            return v0;\n
        }\n
        else\n
        {\n
            v0 = 3;\n
            return v0;\n
        }\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4216919:sub_405857": null, "4216928:cgc_sort_by_suit": "int cgc_sort_by_suit(unsigned int v4, unsigned int a0)\n
{\n
    char v0;  // [bp-0xe]\n
    char v1;  // [bp-0xd]\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v3 = 1; v3 < a0; v3 += 1)\n
    {\n
        v2 = v3;\n
        v1 = v2[v4];\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v2 > 0)\n
                v0 = *((v4 + v2)) < *((v4 + v2 - 1));\n
            if (!(v0 & 1))\n
                break;\n
            *((v4 + v2)) = *((v4 + v2 - 1));\n
            v2 -= 1;\n
            *((v4 + v2)) = v1;\n
        }\n
    }\n
    return v3;\n
}\n
", "4217110:sub_405916": null, "4217120:cgc_sort_by_value": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sort_by_value(unsigned int v5, unsigned int a0)\n
{\n
    char v0;  // [bp-0x19]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 1; v4 < a0; v4 += 1)\n
    {\n
        v3 = v4;\n
        v2 = v3[v5];\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v3 > 0)\n
            {\n
                v6 = v1;\n
                v0 = *((v6 + *((v5 + v3)) * 4 - 7720)) < *((v6 + *((v5 + v3 - 1)) * 4 - 7720));\n
            }\n
            if (!(v0 & 1))\n
                break;\n
            v3[v5] = v3[1 + v5];\n
            v3 += 1;\n
            v3[v5] = v2;\n
        }\n
    }\n
    return v4;\n
}\n
", "4217334:sub_4059f6": null, "4217344:cgc_count_cards": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_count_cards(unsigned int v3, unsigned int a0, char a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v4;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    for (v1 = 0; v1 < a0; v1 += 1)\n
    {\n
        v4 = v0;\n
        if (*((v4 + (*((v3 + v1)) << 2) - 7720)) == *((v4 + (a1 << 2) - 7720)))\n
            v2 += 1;\n
    }\n
    return v2;\n
}\n
", "4217473:sub_405a81": null, "4217488:cgc_poker": "extern unsigned int _GLOBAL_OFFSET_TABLE_[79];\n
\n
int cgc_poker(unsigned int v23[13])\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    char v2;  // [bp-0xc2]\n
    unsigned int v3;  // [bp-0xc0]\n
    unsigned int v4;  // [bp-0xbc]\n
    unsigned int v5[79];  // [bp-0xb8]\n
    unsigned int v6;  // [bp-0xb4]\n
    void* v7;  // [bp-0xb0], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0xac], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xa8]\n
    void* v10;  // [bp-0xa4]\n
    unsigned int v11;  // [bp-0xa0]\n
    unsigned int v12;  // [bp-0x9c]\n
    unsigned int v13;  // [bp-0x98]\n
    char v14;  // [bp-0x91]\n
    char v15;  // [bp-0x8c]\n
    char v16;  // [bp-0x4e]\n
    char v17;  // [bp-0x49]\n
    char v18;  // [bp-0x48]\n
    char v19;  // [bp-0x47]\n
    char v20;  // [bp-0x46]\n
    char v21;  // [bp-0x45]\n
    char v22[53];  // [bp-0x44]\n
    unsigned int v24;  // eax\n
    unsigned int v25[13];  // eax\n
    unsigned int v26[13];  // eax\n
    unsigned int v27[13];  // eax\n
    unsigned int v28[13];  // eax\n
    unsigned int v29[13];  // eax\n
    unsigned int v30[13];  // eax\n
    unsigned int v31[13];  // eax\n
    unsigned int v32[13];  // eax\n
    unsigned int v33[13];  // eax\n
    unsigned int v34[13];  // eax\n
    unsigned int v35[13];  // eax\n
    unsigned int v36[79];  // ecx\n
    unsigned int v37[13];  // eax\n
\n
    v5[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (!v23)\n
        v23 = &v15;\n
    while (true)\n
    {\n
        cgc_shuffle(v22);\n
        v17 = cgc_draw(v22);\n
        v18 = cgc_draw(v22);\n
        v19 = cgc_draw(v22);\n
        v20 = cgc_draw(v22);\n
        v21 = cgc_draw(v22);\n
        cgc_print_hand(&v17, 5);\n
        cgc_bzero(&v16, 5);\n
        cgc_printf(&v5[23 + 60]);\n
        cgc_receive_fixed_input(&v16, 10, 5);\n
        v24 = v16;\n
        if (v24 == 113)\n
            break;\n
        v25 = v23;\n
        v25[10] = v25[10] + 100;\n
        if (*((v23 + 48)) >= 5)\n
        {\n
            v26 = v23;\n
            v26[12] = v26[12] - 5;\n
        }\n
        cgc_bzero(&v14, 5);\n
        for (v13 = 0; v13 < 5; v13 += 1)\n
        {\n
            if ((&v16)[v13] >= 49 && (&v16)[v13] <= 53)\n
                (&v2)[(&v16)[v13]] = 1;\n
        }\n
        for (v12 = 0; v12 < 5; v12 += 1)\n
        {\n
            if (!(&v14)[v12])\n
                (&v17)[v12] = cgc_draw(v22);\n
        }\n
        cgc_print_hand(&v17, 5);\n
        cgc_sort_by_suit(&v17, 5);\n
        v4 = cgc_get_suit(v17);\n
        if (v4 == cgc_get_suit(v18))\n
        {\n
            v3 = cgc_get_suit(v17);\n
            if (v3 == cgc_get_suit(v19))\n
            {\n
                v1 = cgc_get_suit(v17);\n
                if (v1 == cgc_get_suit(v20))\n
                {\n
                    v0 = cgc_get_suit(v17);\n
                    if (v0 == cgc_get_suit(v21))\n
                    {\n
                        if (v17 != 9 && v17 != 22 && v17 != 35 && v17 != 48)\n
                        {\n
                            if (v21 == v17 + 4)\n
                            {\n
                                cgc_printf(&v5[23 + 37] + 3);\n
                                v33 = v23;\n
                                v33[12] = v5[71] + v33[12];\n
                                goto LABEL_4061a0;\n
                            }\n
                            else\n
                            {\n
                                cgc_printf(&v5[23 + 39] + 3);\n
                                v34 = v23;\n
                                v34[12] = v5[72] + v34[12];\n
                                goto LABEL_4061a0;\n
                            }\n
                        }\n
                        cgc_printf(&v5[23 + 41] + 1);\n
                        v31 = v23;\n
                        v31[12] = v5[70] + v31[12];\n
                        goto LABEL_4061a0;\n
                    }\n
                }\n
            }\n
        }\n
        cgc_sort_by_value(&v17, 5);\n
        v11 = 0;\n
        v10 = 0;\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 0;\n
        while (true)\n
        {\n
            if (v11 < 5)\n
            {\n
                v6 = cgc_count_cards(&v17, 5, (&v17)[v11]);\n
                if (v6 == 4)\n
                {\n
                    cgc_printf(&v5[23 + 33] + 2);\n
                    v27 = v23;\n
                    v27[12] = v5[73] + v27[12];\n
                    break;\n
                }\n
                else\n
                {\n
                    if (v6 == 3)\n
                    {\n
                        if (v8 != 1)\n
                        {\n
                            v9 = 1;\n
                        }\n
                        else\n
                        {\n
                            cgc_printf(&v5[23 + 29] + 1);\n
                            v28 = v23;\n
                            v28[12] = v5[74] + v28[12];\n
                            break;\n
                        }\n
                    }\n
                    if (v6 == 2)\n
                    {\n
                        if (v9 == 1)\n
                        {\n
                            cgc_printf(&v5[23 + 29] + 1);\n
                            v29 = v23;\n
                            v29[12] = v5[74] + v29[12];\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (v5[24 + 34 + (&v17)[v11]] >= 11)\n
                                v7 = 1;\n
                            if (v8 != 1)\n
                            {\n
                                v8 = 1;\n
                            }\n
                            else\n
                            {\n
                                cgc_printf(&v5[23 + 26]);\n
                                v30 = v23;\n
                                v30[12] = v5[75] + v30[12];\n
                                break;\n
                            }\n
                        }\n
                    }\n
                    v11 = v6 + v11;\n
                }\n
            }\n
            else if (v9 == 1)\n
            {\n
                cgc_printf(&v5[23 + 23] + 1);\n
                v32 = v23;\n
                v32[12] = v5[76] + v32[12];\n
                break;\n
            }\n
            else if (v7 == 1)\n
            {\n
                cgc_printf(&v5[23 + 18] + 3);\n
                v35 = v23;\n
                v35[12] = v5[77] + v35[12];\n
                break;\n
            }\n
            else\n
            {\n
                if (!v8)\n
                {\n
                    v36 = v5;\n
                    if (v36[24 + 34 + v21] == v36[24 + 34 + v17] + 4)\n
                    {\n
                        cgc_printf(&v5[23 + 14] + 1);\n
                        v37 = v23;\n
                        v37[12] = v5[78] + v37[12];\n
                        break;\n
                    }\n
                }\n
                cgc_printf(&v5[29 + 9] + 1);\n
                break;\n
            }\n
        }\n
LABEL_4061a0:\n
    }\n
    return v24;\n
}\n
", "4219310:sub_4061ae": null, "4219312:cgc_print_board": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_board(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    for (v4 = 0; v4 < v5; v4 += 1)\n
    {\n
        for (v3 = 0; v3 < v5; v3 += 1)\n
        {\n
            v0 = v4[v3 * v2 + a0];\n
            cgc_printf(v1 - 7314);\n
        }\n
        cgc_printf(v1 - 9280);\n
    }\n
    return v4;\n
}\n
", "4219475:sub_406253": null, "4219488:cgc_slots": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
    unsigned int field_-10;\n
    char padding_-c[12];\n
    char field_0;\n
    char padding_1[4294967283];\n
    unsigned int field_fffffff4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[70];\n
extern char g_406359;\n
\n
int cgc_slots(unsigned int v18[13])\n
{\n
    unsigned int v0;  // [bp-0x7c]\n
    int <0x406260[is_12]|Stack bp, 1 B>;  // [bp+0x0]\n
    struct_0 *v1;  // [bp-0x78]\n
    unsigned int v2;  // [bp-0x74]\n
    unsigned int v3[70];  // [bp-0x70]\n
    char *v4;  // [bp-0x6c], Other Possible Types: unsigned int\n
    struct_0 *v5;  // [bp-0x68], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x64], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x60], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x59]\n
    unsigned int v9;  // [bp-0x58]\n
    unsigned int v10;  // [bp-0x54]\n
    unsigned int v11;  // [bp-0x50]\n
    unsigned int v12;  // [bp-0x4c]\n
    char v13;  // [bp-0x45]\n
    char v14;  // [bp-0x44]\n
    unsigned int v15;  // [bp-0x10]\n
    struct_0 *v16;  // [bp-0xc], Other Possible Types: char *\n
    struct_1 *v17;  // [bp+0x0]\n
    unsigned int v19;  // [bp+0x8]\n
    unsigned int v20;  // [bp+0xc]\n
    unsigned int v21;  // eax\n
    unsigned int v22[13];  // eax\n
    unsigned int v23[13];  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v29[13];  // eax\n
    struct_0 *v30;  // ecx\n
    unsigned int v31;  // edx\n
    unsigned int v34[13];  // eax\n
\n
    v3[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (!v18)\n
        v18 = &v14;\n
    cgc_printf(&v3[26 + 7] + 2);\n
    cgc_receive_fixed_input(&v13, 10, 1);\n
    v21 = v13;\n
    if (v21 < 50)\n
        return v21;\n
    v21 = v13;\n
    if (v21 <= 53)\n
    {\n
        v12 = v13 - 48;\n
        while (true)\n
        {\n
            v21 = v13;\n
            if (v21 == 113)\n
                break;\n
            if (*((v18 + 48)) >= 2)\n
            {\n
                v22 = v18;\n
                v22[12] = v22[12] - 2;\n
            }\n
            v23 = v18;\n
            v23[11] = v23[11] + 1;\n
            v0 = v12;\n
            v11 = &<0x406260[is_12]|Stack bp, 1 B>;\n
            v24 = v0 * v0;\n
            v1 = &<0x406260[is_12]|Stack bp, 1 B> - (v24 + 15 & -0x10);\n
            v10 = v0;\n
            v9 = v0;\n
            *(&v1->padding_-c[4]) = v24;\n
            *(&v1->padding_-c[8]) = v1;\n
            *(&v1->field_0) = &g_406359;\n
            cgc_bzero(v18, v19);\n
            v8 = 47;\n
            v2 = v12;\n
            if (v2 == 3)\n
            {\n
                v8 = 39;\n
            }\n
            else if (v2 == 4)\n
            {\n
                v8 = 37;\n
            }\n
            else if (v2 == 5)\n
            {\n
                v8 = 35;\n
            }\n
            for (v7 = 0; v7 < v12; v7 += 1)\n
            {\n
                for (v6 = 0; v6 < v12; v6 += 1)\n
                {\n
                    v15 = 33;\n
                    v16 = v8;\n
                    *(&v1->field_-14 + v7 * v0 + v6) = cgc_random_in_range(v18, v19);\n
                }\n
            }\n
            v15 = v12;\n
            v16 = v1;\n
            cgc_print_board(v18, v19);\n
            for (v5 = 0; v5 < v12; v5 = &v5->field_-14 + 1)\n
            {\n
                for (v4 = 1; v4 < v12; v4 += 1)\n
                {\n
                    v25 = v1;\n
                    v26 = v0;\n
                    if (*((v25 + v5 * v26 + v4)) != *((v25 + v5 * v26)))\n
                        break;\n
                }\n
                if (v4 == v12)\n
                {\n
                    v15 = &v3[25 + 69] + 3;\n
                    v16 = v5;\n
                    cgc_printf(&v13);\n
                    if (v18)\n
                    {\n
                        v29 = v18;\n
                        v29[12] = v3[68] + v29[12];\n
                    }\n
                }\n
            }\n
            for (v4 = 0; v4 < v12; v4 += 1)\n
            {\n
                for (v5 = 1; v5 < v12; v5 = &v5->field_-14 + 1)\n
                {\n
                    v30 = v1;\n
                    v31 = v0;\n
                    if (*((v30 + v5 * v31 + v4)) != *((&v30[0 * v31] + v4)))\n
                        break;\n
                }\n
                if (v5 == v12)\n
                {\n
                    v15 = &v3[25 + 65];\n
                    v16 = v4;\n
                    cgc_printf(&v13);\n
                    if (v18)\n
                    {\n
                        v34 = v18;\n
                        v34[12] = v3[69] + v34[12];\n
                    }\n
                }\n
            }\n
            v15 = &v3[25 + 61];\n
            cgc_printf(&v13);\n
            v17 = &v13;\n
            v18 = 10;\n
            v19 = 1;\n
            cgc_receive_fixed_input(v18, v19, v20);\n
        }\n
        return v21;\n
    }\n
}\n
", "4220444:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:memset": null, "5242908:cgc_deallocate": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}