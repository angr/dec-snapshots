{"4202496:_init": "extern struct_0 *g_408128;\n
\n
int _init()\n
{\n
    if (g_408128)\n
    {\n
        g_408128();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202624:sub_402080": "int sub_402080()\n
{\n
    goto *((ebx<4> - 24));\n
}\n
", "4202630:sub_402086": null, "4202632:sub_402088": "int sub_402088()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202638:sub_40208e": null, "4202640:sub_402090": "int sub_402090()\n
{\n
    goto *((ebx<4> - 12));\n
}\n
", "4202646:sub_402096": null, "4202656:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202699:sub_4020cb": null, "4202700:sub_4020cc": "int sub_4020cc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202704:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202708:sub_4020d4": null, "4202720:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24659;\n
    v6 = v5 + 1560;\n
    v7 = v5 + 1560;\n
    if (v7 == v6)\n
        return v5 + 1560;\n
    v7 = v5[7].field_-1c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[7].field_-1c();\n
    }\n
    return v5[7].field_-1c;\n
}\n
", "4202771:sub_402113": "int sub_402113()\n
{\n
}\n
", "4202777:sub_402119": "int sub_402119()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202784:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24595;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 1560;\n
    v9 = (v6 + 1560 - (v6 + 1560) >> 31) + (1560 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202855:sub_402167": "int sub_402167()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202864:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408120;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408120)\n
    {\n
        v0 = __dso_handle;\n
        sub_402080();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202939:sub_4021bb": "int sub_4021bb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202944:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202953:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202957:sub_4021cd": null, "4202960:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203050:sub_40222a": null, "4203056:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 1;\n
}\n
", "4203084:sub_40224c": null, "4203088:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 2;\n
}\n
", "4203116:sub_40226c": null, "4203120:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 16;\n
}\n
", "4203148:sub_40228c": null, "4203152:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 14;\n
}\n
", "4203180:sub_4022ac": null, "4203184:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 12;\n
}\n
", "4203212:sub_4022cc": null, "4203216:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 4;\n
}\n
", "4203244:sub_4022ec": null, "4203248:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 8;\n
}\n
", "4203276:sub_40230c": null, "4203280:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 64;\n
}\n
", "4203308:sub_40232c": null, "4203312:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 32;\n
}\n
", "4203340:sub_40234c": null, "4203344:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8496 + v0] & 4294967168;\n
}\n
", "4203372:sub_40236c": null, "4203376:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8496 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8496 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8496 + v1] & 2) >> 1);\n
}\n
", "4203434:sub_4023aa": null, "4203440:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8496 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203473:sub_4023d1": null, "4203488:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8496 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8496 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203549:sub_40241d": null, "4203552:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8496 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203585:sub_402441": null, "4203600:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203632:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    struct_0 *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    char *v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    void* v18;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
\n
    v5 = v4;\n
    v6 = v4->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 != 1)\n
    {\n
        v8 = v5->field_c;\n
        v9 = v5->field_10;\n
        v16 = v8 - v6;\n
        if (v9 && v16)\n
        {\n
            v2 = v6;\n
            v10 = v8 + ~(v6);\n
            v1 = v16 & 3;\n
            v13 = 0;\n
            if (v10 >= 3)\n
            {\n
                v11 = v16 & -0x4;\n
                v12 = 27 + v2 + v4;\n
                v13 = 0;\n
                do\n
                {\n
                    *((v12 + v13 - 3)) = v9[*((v12 + v13 - 3))];\n
                    *((v12 + v13 - 2)) = v9[*((v12 + v13 - 2))];\n
                    *((v12 + v13 - 1)) = v9[*((v12 + v13 - 1))];\n
                    *((v12 + v13)) = v9[*((v12 + v13))];\n
                    v13 += 4;\n
                } while (v11 != v13);\n
            }\n
            v5 = v4;\n
            if (v1)\n
            {\n
                v14 = v13 + v2 + v5 + 24;\n
                v15 = 0;\n
                do\n
                {\n
                    v14[v15] = v9[v14[v15]];\n
                    v15 += 1;\n
                } while (v1 != v15);\n
            }\n
            v6 = *((v5 + 8));\n
            v16 = *((v5 + 12)) - v6;\n
        }\n
        v1 = *(v5);\n
        v17 = v6 + v5 + 24;\n
        v18 = 0;\n
        while (v16 > v18)\n
        {\n
            v0 = &v3;\n
            v19 = cgc_transmit(v1, v17 + v18, v16 - v18);\n
            v18 += *(&v3);\n
            if (v19)\n
            {\n
                v7 = -1;\n
                v5 = v4;\n
                goto LABEL_4025ad;\n
            }\n
        }\n
        v5 = v4;\n
    }\n
    v7 = 0;\n
LABEL_4025ad:\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4203971:sub_4025c3": null, "4203984:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int *v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v5;  // eax\n
    struct_0 *v6;  // ebp, Other Possible Types: unsigned int\n
    unsigned int *v7;  // edi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v9;  // esi\n
    char *v10;  // ecx\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    char *v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // esi\n
    void* v19;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v4->field_8;\n
    if (v7 == -1)\n
    {\n
        v21 = -(v5 < 1);\n
        *((v6 + 8)) = v21;\n
        *((v6 + 12)) = 0;\n
        return v21;\n
    }\n
    if (v6->field_4 == 1)\n
    {\n
        v8 = &v6->field_c;\n
    }\n
    else\n
    {\n
        v9 = v6->field_c;\n
        v10 = v6->field_10;\n
        v17 = v9 - v7;\n
        if (v10 && v17)\n
        {\n
            v1 = v7;\n
            v11 = v9 + ~(v7);\n
            v2 = v17 & 3;\n
            v14 = 0;\n
            if (v11 >= 3)\n
            {\n
                v12 = v17 & -0x4;\n
                v13 = v1 + v4 + 27;\n
                v14 = 0;\n
                do\n
                {\n
                    *((v13 + v14 - 3)) = v10[*((v13 + v14 - 3))];\n
                    *((v13 + v14 - 2)) = v10[*((v13 + v14 - 2))];\n
                    *((v13 + v14 - 1)) = v10[*((v13 + v14 - 1))];\n
                    *((v13 + v14)) = v10[*((v13 + v14))];\n
                    v14 += 4;\n
                } while (v12 != v14);\n
            }\n
            v6 = v4;\n
            if (v2)\n
            {\n
                v15 = 24 + v14 + v1 + v6;\n
                v16 = 0;\n
                do\n
                {\n
                    v15[v16] = v10[v15[v16]];\n
                    v16 += 1;\n
                } while (v2 != v16);\n
            }\n
            v7 = *((v6 + 8));\n
            v17 = *((v6 + 12)) - v7;\n
        }\n
        v1 = v6 + 12;\n
        v2 = *(v6);\n
        v18 = v7 + v6 + 24;\n
        v19 = 0;\n
        while (v17 > v19)\n
        {\n
            v0 = &v3;\n
            v20 = cgc_transmit(v2, v18 + v19, v17 - v19);\n
            v19 += *(&v3);\n
            if (v20)\n
                break;\n
        }\n
        v6 = v4;\n
        v5 = a0;\n
        v8 = v1;\n
    }\n
    *(v8) = 0;\n
}\n
", "4204336:cgc_fread": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    struct_1 *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    struct_1 *v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // ecx\n
    struct_1 *v13;  // ebp\n
    void* v15;  // edi, Other Possible Types: unsigned int\n
    char *v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // ecx\n
    void* v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    char *v23;  // eax\n
    unsigned int v24;  // edx\n
    unsigned int v26;  // edx\n
    char *v27;  // edi, Other Possible Types: unsigned int\n
    unsigned int v28;  // esi\n
    char *v29;  // edi\n
    unsigned int v30;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = a1;\n
    v8 = v7->field_8;\n
    if (v8 == v7->field_c)\n
    {\n
        v7->field_c = 0;\n
        v7->field_8 = 0;\n
        v0 = &v5;\n
        if (!cgc_receive(v7->field_0, v7 + 1, 0x400))\n
        {\n
            v9 = *(&v5);\n
            if (v9)\n
            {\n
                v10 = a1;\n
                v10->field_c = v9;\n
                v11 = v10->field_14;\n
                if (v11)\n
                {\n
                    v12 = v9 & 3;\n
                    v15 = 0;\n
                    v13 = a1;\n
                    if (v9 - 1 >= 3)\n
                    {\n
                        v15 = 0;\n
                        do\n
                        {\n
                            *(24 + &v13->field_0 + v15) = v11[*(24 + &v13->field_0 + v15)];\n
                            *(25 + &v13->field_0 + v15) = v11[*(25 + &v13->field_0 + v15)];\n
                            *(26 + &v13->field_0 + v15) = v11[*(26 + &v13->field_0 + v15)];\n
                            *(27 + &v13->field_0 + v15) = v11[*(27 + &v13->field_0 + v15)];\n
                            v15 += 4;\n
                        } while ((v9 & -0x4) != v15);\n
                    }\n
                    if (v12)\n
                    {\n
                        v16 = 24 + a1 + v15;\n
                        v17 = 0;\n
                        do\n
                        {\n
                            v16[v17] = v11[v16[v17]];\n
                            v17 += 1;\n
                        } while (v12 != v17);\n
                    }\n
                }\n
            }\n
        }\n
        v7 = a1;\n
        v8 = *((v7 + 8));\n
    }\n
    v18 = a0;\n
    v19 = v6;\n
    if (v8 != -1)\n
    {\n
        v20 = *((v7 + 12)) - v8;\n
        if (*((v7 + 12)) - v8 > v18)\n
            v20 = v18;\n
        v3 = v20;\n
        cgc_memcpy();\n
        v21 = *((v7 + 8)) + v20;\n
        *((v7 + 8)) = v21;\n
        if (v21 == *((v7 + 12)))\n
        {\n
            *((v7 + 12)) = 0;\n
            *((v7 + 8)) = 0;\n
        }\n
        v19 = v6;\n
        if (!(v20 < v18))\n
            goto LABEL_402981;\n
    }\n
    else\n
    {\n
        v20 = 0;\n
        if (0 >= v18)\n
        {\n
LABEL_402981:\n
            return v20;\n
        }\n
    }\n
    v4 = v19 + 3;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(*(v7), v6 + v20, v18 - v20))\n
            return -1;\n
        v2 = v3;\n
        if (!v2)\n
            return -1;\n
        v23 = *((v7 + 20));\n
        if (v23)\n
        {\n
            v24 = v2;\n
            v26 = v24 & 3;\n
            v27 = 0;\n
            if (v24 - 1 >= 3)\n
            {\n
                v28 = v4 + v20;\n
                v27 = 0;\n
                do\n
                {\n
                    *((v28 + v27 - 3)) = v23[*((v28 + v27 - 3))];\n
                    *((v28 + v27 - 2)) = v23[*((v28 + v27 - 2))];\n
                    *((v28 + v27 - 1)) = v23[*((v28 + v27 - 1))];\n
                    *((v28 + v27)) = v23[*((v28 + v27))];\n
                    v27 += 4;\n
                } while ((v2 & -0x4) != v27);\n
            }\n
            if (v26)\n
            {\n
                v29 = v27 + v20 + v6;\n
                v30 = 0;\n
                do\n
                {\n
                    v29[v30] = v23[v29[v30]];\n
                    v30 += 1;\n
                } while (v26 != v30);\n
            }\n
        }\n
        v20 += v2;\n
        v18 = a0;\n
        v7 = a1;\n
        if (v20 >= v18)\n
            return v20;\n
    }\n
}\n
", "4204687:sub_40288f": null, "4204939:sub_40298b": null, "4204944:cgc_freaduntil": "int cgc_freaduntil(unsigned int v0, unsigned int a0, char a1, unsigned int a2)\n
{\n
    int tmp_21;  // tmp #21\n
    int tmp_1;  // tmp #1\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // ebp\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = a1;\n
    v3 = 0;\n
    tmp_21 = v1;\n
    v5 = v1 - 1;\n
    if (tmp_21 != 1)\n
    {\n
        while (true)\n
        {\n
            v4 = cgc__getc();\n
            if (v4 == -1)\n
                return -1;\n
            if (v4 == v2)\n
                break;\n
            *((v0 + v3)) = v4;\n
            v3 += 1;\n
            goto LABEL_4029e8;\n
        }\n
    }\n
    tmp_1 = v5;\n
    v5 = v3;\n
    if (!(v3 == tmp_1))\n
        goto LABEL_402a00;\n
LABEL_4029e8:\n
    while (true)\n
    {\n
        v6 = cgc__getc();\n
        if (v6 == -1)\n
            break;\n
        if (v6 == v2)\n
            goto LABEL_402a00;\n
    }\n
LABEL_402a00:\n
    *((v0 + v5)) = 0;\n
    return v5;\n
}\n
", "4205081:sub_402a19": null, "4205088:cgc__getc": "int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // eax\n
\n
    v7 = v6;\n
    v8 = *((v6 + 8));\n
    if (v8 == -1)\n
    {\n
        v0 = &v3;\n
        v16 = -1;\n
        if (cgc_receive(*(v6), &v1, 1))\n
            return -1;\n
        if (!*(&v3))\n
            return -1;\n
        v9 = *((v6 + 20));\n
        *(&v16) = v1;\n
        if (!v9)\n
            return v16;\n
        *(&v16) = *((v9 + v16));\n
    }\n
    else if (v8 != *((v6 + 12)))\n
    {\n
LABEL_402b19:\n
        *((v7 + 8)) = v8 + 1;\n
        v16 = *((v7 + v8 + 24));\n
        return v16;\n
    }\n
    else\n
    {\n
        *((v6 + 12)) = 0;\n
        *((v6 + 8)) = 0;\n
        v0 = &v4;\n
        if (cgc_receive(*(v6), v6 + 24, 0x400))\n
            return -1;\n
        v13 = *(&v4);\n
        if (*(&v4))\n
        {\n
            *((v6 + 12)) = v13;\n
            v10 = *((v6 + 20));\n
            if (v10)\n
            {\n
                v2 = v13;\n
                v11 = v13 & 3;\n
                v12 = 0;\n
                if (v13 - 1 >= 3)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        *((v7 + v12 + 24)) = *((v10 + *((v7 + v12 + 24))));\n
                        *((v7 + v12 + 25)) = *((v10 + *((v7 + v12 + 25))));\n
                        *((v7 + v12 + 26)) = *((v10 + *((v7 + v12 + 26))));\n
                        *((v7 + v12 + 27)) = *((v10 + *((v7 + v12 + 27))));\n
                        v12 += 4;\n
                    } while ((v2 & -0x4) != v12);\n
                }\n
                v13 = v2;\n
                if (v11)\n
                {\n
                    v14 = v12 + v7 + 24;\n
                    v15 = 0;\n
                    do\n
                    {\n
                        *((v14 + v15)) = *((v10 + *((v14 + v15))));\n
                        v15 += 1;\n
                    } while (v11 != v15);\n
                }\n
            }\n
            if (v13 >= 0)\n
            {\n
                v8 = *((v7 + 8));\n
                goto LABEL_402b19;\n
            }\n
        }\n
    }\n
}\n
", "4205425:sub_402b71": null, "4205440:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4205480:sub_402ba8": null, "4205488:cgc_fwrite": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v9, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x430]\n
    unsigned int v1;  // [bp-0x420]\n
    unsigned int v2;  // [bp-0x41c]\n
    unsigned int v3;  // [bp-0x418]\n
    char v4;  // [bp-0x414]\n
    char v5;  // [bp-0x410]\n
    unsigned int v6;  // [bp-0x40f]\n
    unsigned int v7;  // [bp-0x40e]\n
    unsigned int v8;  // [bp-0x40d]\n
    struct_0 *v10;  // esi\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // eax\n
    char *v13;  // edi\n
    unsigned int v14;  // eax\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    void* v16;  // edi, Other Possible Types: unsigned int\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    unsigned int v19;  // ecx\n
    char *v20;  // ecx\n
    unsigned int v21;  // edx\n
    void* v22;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    void* v24;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = a1;\n
    v11 = a0;\n
    if (v10->field_8 != -1)\n
    {\n
        if (v11 >= 0x400)\n
        {\n
            cgc_fflush(v10);\n
        }\n
        else\n
        {\n
            v12 = v10->field_c;\n
            v16 = 0;\n
            if (v12 + v11 >= 0x400)\n
            {\n
                v16 = 0x400 - v12;\n
                cgc_memcpy(&v10[1].padding_4[v12], v9);\n
                v10->field_c = v10->field_c + v16;\n
                cgc_fflush(v10);\n
            }\n
            if (v16 >= v11)\n
                return v16;\n
            cgc_memcpy(&v10[1].padding_4[v10->field_c], v9 + v16);\n
            v10->field_c = v10->field_c + a0 - v16;\n
            return a0;\n
        }\n
    }\n
    v2 = v10->field_0;\n
    v13 = v10->field_10;\n
    if (!v13)\n
    {\n
        v15 = 0;\n
        do\n
        {\n
            if (v15 >= v11)\n
                return a0;\n
            v0 = &v5;\n
            v14 = cgc_transmit(v2, v9 + v15, v11 - v15);\n
            v15 += *(&v5);\n
        } while (!v14);\n
    }\n
    else\n
    {\n
        if (!v11)\n
            return a0;\n
        v24 = 0;\n
LABEL_402c1e:\n
        v17 = v11 - v24;\n
        if (v17 >= 0x400)\n
            v17 = 0x400;\n
        v3 = v24;\n
        cgc_memcpy();\n
        if (v17)\n
        {\n
            v18 = v17 & 3;\n
            v19 = 0;\n
            if (v17 - 1 >= 3)\n
            {\n
                v19 = 0;\n
                do\n
                {\n
                    (&v5)[v19] = v13[(&v5)[v19]];\n
                    *(&v6 + v19) = v13[*(&v6 + v19)];\n
                    *(&v7 + v19) = v13[*(&v7 + v19)];\n
                    *(&v8 + v19) = v13[*(&v8 + v19)];\n
                    v19 += 4;\n
                } while ((v17 & 2044) != v19);\n
            }\n
            if (v18)\n
            {\n
                v20 = &(&v5)[v19];\n
                v21 = 0;\n
                do\n
                {\n
                    v20[v21] = v13[v20[v21]];\n
                    v21 += 1;\n
                } while (v18 != v21);\n
            }\n
        }\n
        v22 = 0;\n
        do\n
        {\n
            if (v17 <= v22)\n
            {\n
                v24 = v3 + v17;\n
                v11 = a0;\n
                if (v24 >= a0)\n
                    return a0;\n
                goto LABEL_402c1e;\n
            }\n
            v0 = &v4;\n
            v23 = cgc_transmit(v2, &(&v5)[v22], v17 - v22);\n
            v22 += *(&v4);\n
        } while (!v23);\n
    }\n
    return -1;\n
}\n
", "4206078:sub_402dfe": null, "4206080:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // ebp\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // esi\n
    unsigned int v7;  // eax\n
    char *v8;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!a0)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    v0 = 0x100;\n
    v5 = cgc_realloc(v7);\n
    v3[4] = v5;\n
    v0 = 0x100;\n
    v3[5] = cgc_realloc(v3[5]);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v9 = 826981510;\n
    }\n
    else\n
    {\n
        v8 = v2 + 1;\n
        v9 = 826981510;\n
        do\n
        {\n
            v9 = __ROL__(v9 + v9 * 36 ^ v7, 13);\n
            v7 = *(v8);\n
            v8 += 1;\n
        } while (v7);\n
    }\n
    v10 = 0;\n
    do\n
    {\n
        *((v5 + v10)) = v10;\n
        *((v5 + v10 + 1)) = v10 + 1;\n
        *((v5 + v10 + 2)) = v10 + 2;\n
        *((v5 + v10 + 3)) = v10 + 3;\n
        *((v5 + v10 + 4)) = v10 + 4;\n
        *((v5 + v10 + 5)) = v10 + 5;\n
        *((v5 + v10 + 6)) = v10 + 6;\n
        *((v5 + v10 + 7)) = v10 + 7;\n
        v10 += 8;\n
    } while (v10 != 0x100);\n
    v11 = 255;\n
    while (true)\n
    {\n
        v12 = v9;\n
        v13 = v9 * 3;\n
        v14 = (0 CONCAT v12) /m v11 >> 32;\n
        v9 = v13 / 0x200000 ^ __ROL__(v13, 13);\n
        v15 = *((v5 + v11));\n
        *((v5 + v11)) = *((v5 + v14));\n
        *((v5 + v14)) = v15;\n
        v11 -= 1;\n
    }\n
}\n
", "4206448:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4206488:sub_402f98": null, "4206496:cgc_malloc_alloc": "typedef struct struct_4 {\n
    unsigned int field_0;\n
    struct struct_4 *field_4;\n
    struct struct_2 *field_8;\n
    struct struct_3 *field_c;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char padding_4[516];\n
    unsigned int field_208;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
typedef struct struct_6 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_3 *field_c;\n
} struct_6;\n
\n
typedef struct struct_3 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_3 *field_c;\n
} struct_5;\n
\n
int cgc_malloc_alloc(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    int tmp_6;  // tmp #6\n
    struct_6 *v1;  // [bp-0x20]\n
    struct_4 *v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    struct_5 *v5;  // [bp-0x10]\n
    struct_5 *v6;  // [bp-0xc]\n
    struct_5 *v7;  // [bp-0x8]\n
    struct_4 *v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v12;  // ebp\n
    struct_4 *v13;  // esi\n
    struct_4 *v14;  // edx\n
    unsigned int v15;  // ebp\n
    void* v16;  // eax, Other Possible Types: unsigned int, struct_6 *, struct_0 *\n
    unsigned int v17[2];  // edi\n
    struct_1 *v18;  // esi, Other Possible Types: unsigned int\n
    unsigned int v19;  // ebp\n
    struct_6 *v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    struct_1 *v23;  // edx\n
    unsigned int v24;  // ecx\n
    struct_6 *v25;  // esi\n
    unsigned int v26;  // ecx\n
    struct_3 *v27;  // ecx\n
    struct_4 *v28;  // ecx\n
    struct_2 *v30;  // edx\n
    struct_5 *v31;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v32;  // ebp\n
    struct_3 *v33;  // edi\n
    unsigned int v34;  // ecx\n
    unsigned int v37;  // ebp\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // esi\n
    struct_1 *v40;  // edx, Other Possible Types: unsigned int\n
    struct_1 *v41;  // esi, Other Possible Types: unsigned int\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edi\n
    struct_3 *v44;  // edx\n
    unsigned int v45;  // eax\n
\n
    v11 = 0;\n
    if (a0 < 0)\n
    {\n
LABEL_4032a4:\n
        return v11;\n
    }\n
    v12 = a0 + 3 & -0x4;\n
    if (!(a0 + 3 & -0x4))\n
    {\n
        v45 = cgc_tiny_alloc();\n
        return v45;\n
    }\n
    if (v12 <= 15)\n
    {\n
        v45 = cgc_tiny_alloc();\n
        return v45;\n
    }\n
    if (v12 > 131071)\n
    {\n
        v15 = v12 + 4103 & -0x1000;\n
        v0 = &v4;\n
        v11 = 0;\n
        if (!sub_402088(v15, 0))\n
        {\n
            v17 = *(&v4);\n
            v17[0] = v10;\n
            v17[1] = v15;\n
            v11 = v17 + 1;\n
            goto LABEL_4032a4;\n
        }\n
    }\n
    v13 = v12 + 23;\n
    v14 = v13 & -0x10;\n
    v2 = v14;\n
    if (!(v13 & -0x10))\n
    {\n
        v18 = -1;\n
    }\n
    else if (v14 < 513)\n
    {\n
        v18 = (v13 >> 4) + 2;\n
        v16 = 0;\n
        if (v12 > 2040)\n
        {\n
            if (!(v18 == 131))\n
                goto LABEL_403119;\n
            goto LABEL_403037;\n
        }\n
    }\n
    else if (v14 <= 0x1200)\n
    {\n
        v18 = (v14 + 32 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v18 = 130;\n
        if (v14 <= 0x20000)\n
            v18 = (v14 + 288 >> 11) + 66;\n
    }\n
    do\n
    {\n
        v16 = *((v10 + v18 * 4));\n
        if (v16)\n
        {\n
            while (*((v16 + 4)) < v14)\n
            {\n
                v16 = *((v16 + 12));\n
                if (!v16)\n
                    goto LABEL_403211;\n
            }\n
        }\n
LABEL_403211:\n
        v18 += 1;\n
    } while (v18 != 131);\n
LABEL_403037:\n
    v0 = &v3;\n
    if (!(!sub_402088(0x200000, 0)))\n
        goto LABEL_4032a4;\n
    v19 = *(&v3);\n
    v1 = *(&v3) + 1048575;\n
    v20 = v1 & -0x100000;\n
    if (v20 > *(&v3))\n
        sub_402090(v19);\n
    v21 = v20 + 0x10000;\n
    v22 = v19 + 0x200000;\n
    tmp_6 = v22;\n
    v12 = v22 - v21;\n
    if (tmp_6 > v21)\n
        sub_402090(v21);\n
    v23 = v10;\n
    *(524 + &v23->field_0 + (v1 >> 20)) = 2;\n
    if (!v20)\n
        goto LABEL_4032a4;\n
    v16 = v20 | 16;\n
    v16->field_0 = 0;\n
    v24 = v20 - v16 + 1048560;\n
    v16->field_4 = v24;\n
    v25 = v20 | 1048560;\n
    v25->field_0 = v24;\n
    v25->field_4 = 0;\n
    v26 = v16->field_4;\n
    if (!(!(v26 & 1)))\n
        goto LABEL_4032ce;\n
    v16->field_4 = v26 | 1;\n
    v16->field_8 = 0;\n
    v16->field_c = v23->field_208;\n
    v23->field_208 = v16;\n
    v27 = v16->field_c;\n
    if (v27)\n
    {\n
        v27->field_8 = v16;\n
        v16 = v23->field_208;\n
    }\n
    v18 = 130;\n
LABEL_403119:\n
    v28 = *((v16 + 4));\n
    if (!(v28 & 1))\n
    {\n
        v31 = \"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\";\n
        goto LABEL_4032b7;\n
    }\n
    else\n
    {\n
        *((v16 + 4)) = v12;\n
        v30 = *((v16 + 8));\n
        if (v30)\n
            v30->field_c = *((v16 + 12));\n
        v12 = v28 & -2;\n
        v33 = *((v16 + 12));\n
        if (v33)\n
            v33->field_8 = v30;\n
        v34 = v10;\n
        if (*((v34 + (v18 << 2))) == v16)\n
            *((v34 + v18 * 4)) = v33;\n
        *((v16 + 8)) = 0;\n
        *((v16 + 12)) = 0;\n
        v37 = v2;\n
        v38 = v32 - v2;\n
        if (v38 < 33)\n
        {\n
LABEL_40329f:\n
            v11 = v16 + 8;\n
            goto LABEL_4032a4;\n
        }\n
        else\n
        {\n
            v39 = v32;\n
            v31 = v16 + v37;\n
            *((v16 + 4)) = v37;\n
            *((v37 + v16)) = v37;\n
            *((v37 + v16 + 4)) = v38;\n
            *((v39 + v16)) = v38;\n
            if (v38 <= 0x200)\n
            {\n
                v40 = (v38 >> 4) + 2;\n
            }\n
            else if (v38 <= 0x1200)\n
            {\n
                v40 = (v38 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v41 = 130;\n
                if (!(v38 <= 0x20000))\n
                    goto LABEL_403273;\n
                v40 = (v38 - 0x1200 >> 11) + 66;\n
            }\n
            v41 = v40;\n
LABEL_403273:\n
            v42 = *((v31 + 4));\n
            if (!(v42 & 1))\n
            {\n
                *((v31 + 4)) = v42 | 1;\n
                *((v31 + 8)) = 0;\n
                v43 = v10;\n
                *((v31 + 12)) = *((v43 + v41 * 4));\n
                *((v43 + v41 * 4)) = v31;\n
                v44 = *((v31 + 12));\n
                if (v44)\n
                {\n
                    v44->field_8 = v31;\n
                    goto LABEL_40329f;\n
                }\n
            }\n
        }\n
    }\n
    while (true)\n
    {\n
LABEL_4032ce:\n
        v31 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
LABEL_4032b7:\n
        v8 = v16;\n
        v7 = v31;\n
        cgc_heap_error(*(&v9));\n
        v6 = v31;\n
        v5 = &\"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        v16 = cgc_heap_error(*(&v9));\n
    }\n
}\n
", "4207321:sub_4032d9": null, "4207328:cgc_tiny_alloc": "int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned short *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned short *v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    struct struct_0 *v9[1160];  // ecx\n
    struct struct_0 *v10[1160];  // esi\n
    unsigned int v11;  // ebp\n
    unsigned short *v12;  // eax, Other Possible Types: unsigned int\n
    unsigned short v13[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
\n
    v8 = v7;\n
    v10 = v9;\n
    if (v7 <= 15)\n
    {\n
        v11 = v7 / 4 - 1;\n
    }\n
    else if (v7 <= 0x200)\n
    {\n
        v11 = (v7 >> 4) + 2;\n
    }\n
    else if (v7 <= 0x1200)\n
    {\n
        v11 = (v7 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v11 = 130;\n
        if (v7 <= 0x20000)\n
            v11 = (v7 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = v9[v11];\n
    if (v12)\n
    {\n
        v9[v11] = *(&v12);\n
        return v9[v11];\n
    }\n
    v13 = v9[1155 + v11];\n
    if (v13)\n
    {\n
        v14 = v13[0];\n
        v15 = v13[1];\n
    }\n
    else\n
    {\n
        v16 = v10[1158];\n
        if (v16)\n
        {\n
            v12 = v10[1159];\n
        }\n
        else\n
        {\n
            v0 = &v5;\n
            if (sub_402088(0x200000, 0))\n
            {\n
                v10[1158] = 0;\n
                return 0;\n
            }\n
            v17 = *(&v5);\n
            v4 = v17 + 1048575;\n
            v16 = v4 & -0x100000;\n
            v1 = v17;\n
            v2 = v16;\n
            if (v16 > v1)\n
            {\n
                sub_402090(v1);\n
                v16 = v2;\n
            }\n
            v18 = v1 + 0x200000;\n
            v3 = v16 + 0x100000;\n
            v1 = v18 - v3;\n
            if (v18 > v3)\n
            {\n
                sub_402090(v3);\n
                v16 = v2;\n
            }\n
            *(524 + &v10[0] + (v4 >> 20)) = 1;\n
            v10[1158] = v16;\n
            v12 = 0;\n
            if (!v16)\n
                return 0;\n
        }\n
        v13 = v12 + v16;\n
        v10[1155 + v11] = v13;\n
        *((v12 + v16)) = v8;\n
        *((v12 + v16 + 2)) = v8;\n
        v19 = v12 + 0x1000;\n
        v10[1159] = v19;\n
        if (v19 == 0x100000)\n
            v10[1158] = 0;\n
        v14 = v8;\n
        v15 = v8;\n
    }\n
    v20 = v8 + v15;\n
    *((v13 + 2)) = v20;\n
    if (v14 + v20 < 4097)\n
        return v15 + v13;\n
    v10[1155 + v11] = 0;\n
}\n
", "4207759:sub_40348f": null, "4207760:malloc_free": "int malloc_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v8;  // [bp-0x4]\n
    char v9;  // [bp+0x0]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // esi\n
    char v15;  // cl\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // ecx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
\n
    v7 = v11;\n
    v6 = v12;\n
    v5 = v13;\n
    v38 = a0;\n
    if (!v38)\n
    {\n
LABEL_4037b1:\n
        return v38;\n
    }\n
    v23 = v10;\n
    v15 = *((v23 + (v38 >> 20) + 524));\n
    if (v15 != 2)\n
    {\n
        if (v15 == 1)\n
        {\n
            v24 = *((v38 & -0x1000));\n
            if (v24 <= 15)\n
            {\n
                v17 = v24 / 4 - 1;\n
                goto LABEL_403616;\n
            }\n
            if (v24 <= 0x200)\n
            {\n
                v17 = (v24 >> 4) + 2;\n
                goto LABEL_403616;\n
            }\n
        }\n
        if (!(!v15))\n
            goto LABEL_4037b1;\n
        if ((v38 & 4095) != 8)\n
        {\n
            v19 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_4037fd;\n
        }\n
        else\n
        {\n
            v20 = *((v38 - 8));\n
            if (v20 != v23)\n
            {\n
                v22 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v23;\n
            }\n
            else\n
            {\n
                v20 = *((v38 - 4));\n
                if (v20 - 0x20000 <= 2147356671 && !(v20 & 4095))\n
                {\n
                    v38 = sub_402090(v38 - 8);\n
                    goto LABEL_4037b1;\n
                }\n
                v22 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v20;\n
            v38 = cgc_heap_error(v22, v38);\n
        }\n
    }\n
    else if (!(v38 & 7))\n
    {\n
        v24 = v38 - 8;\n
        v16 = *((v24 + 4));\n
        if ((v16 & 1))\n
        {\n
            v19 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_4037fd;\n
        }\n
        else if (v16 - 131073 <= -131058)\n
        {\n
            v19 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
            goto LABEL_4037fd;\n
        }\n
        else\n
        {\n
            v21 = *(v24);\n
            v12 = v24 - *(v24);\n
            if (!*(v24))\n
                v12 = v21;\n
            v23 = v16 + v24;\n
            v2 = v24;\n
            if (v12)\n
            {\n
                v4 = v23;\n
                v3 = *((v12 + 4));\n
                if (!((v3 & -2) == v21))\n
                    goto LABEL_403814;\n
                v23 = v4;\n
                v24 = v3;\n
                if (*(v23) == v16)\n
                {\n
                    if ((v24 & 1))\n
                    {\n
                        if (v21 <= 15)\n
                        {\n
                            v25 = v24 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v21 <= 0x200)\n
                            {\n
                                v25 = (v24 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v21 <= 0x1200)\n
                                {\n
                                    v25 = (v21 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v25 = 130;\n
                                    if (v21 <= 0x20000)\n
                                        v25 = (v21 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v12 + 4)) = v21;\n
                        v26 = *((v12 + 8));\n
                        if (v26)\n
                            *((v26 + 12)) = *((v12 + 12));\n
                        v27 = *((v12 + 12));\n
                        if (v27)\n
                            *((v27 + 8)) = v26;\n
                        if (*((v10 + (v25 << 2))) == v12)\n
                            *((v10 + v25 * 4)) = v27;\n
                        *((v12 + 8)) = 0;\n
                        *((v12 + 12)) = 0;\n
                        v28 = v21 + *((v2 + 4));\n
                        *((v12 + 4)) = v28;\n
                        *(v23) = v28;\n
                        v2 = v12;\n
                    }\n
LABEL_40369c:\n
                    v29 = *((v23 + 4));\n
                    v30 = v10;\n
                    v12 = v2;\n
                    if ((v29 & 1))\n
                    {\n
                        v31 = v29 & -2;\n
                        if (v31 <= 15)\n
                        {\n
                            v32 = v29 / 4 - 1;\n
                        }\n
                        else\n
                        {\n
                            if (v31 <= 0x200)\n
                            {\n
                                v32 = (v29 >> 4) + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v31 <= 0x1200)\n
                                {\n
                                    v32 = (v31 - 0x200 >> 7) + 34;\n
                                }\n
                                else\n
                                {\n
                                    v32 = 130;\n
                                    if (v31 <= 0x20000)\n
                                        v32 = (v31 - 0x1200 >> 11) + 66;\n
                                }\n
                            }\n
                        }\n
                        *((v23 + 4)) = v31;\n
                        v33 = *((v23 + 8));\n
                        if (v33)\n
                            *((v33 + 12)) = *((v23 + 12));\n
                        v34 = *((v23 + 12));\n
                        if (*((v23 + 12)))\n
                            *((v34 + 8)) = v33;\n
                        v30 = v10;\n
                        if (*((v30 + (v32 << 2))) == v23)\n
                            *((v30 + v32 * 4)) = v34;\n
                        *((v23 + 8)) = 0;\n
                        *((v23 + 12)) = 0;\n
                        v12 = v2;\n
                        v35 = v31 + *((v12 + 4));\n
                        *((v12 + 4)) = v35;\n
                        *((v12 + v35)) = v35;\n
                    }\n
                    v36 = *((v12 + 4));\n
                    if (v36 <= 15)\n
                    {\n
                        v37 = v36 / 4 - 1;\n
                    }\n
                    else\n
                    {\n
                        if (v36 <= 0x200)\n
                        {\n
                            v37 = (v36 >> 4) + 2;\n
                        }\n
                        else\n
                        {\n
                            if (v36 <= 0x1200)\n
                            {\n
                                v37 = (v36 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v37 = 130;\n
                                if (v36 <= 0x20000)\n
                                    v37 = (v36 - 0x1200 >> 11) + 66;\n
                            }\n
                        }\n
                    }\n
                    if (!(!(v36 & 1)))\n
                        goto LABEL_403804;\n
                    *((v12 + 4)) = v36 | 1;\n
                    *((v12 + 8)) = 0;\n
                    *((v12 + 12)) = *((v30 + v37 * 4));\n
                    *((v30 + v37 * 4)) = v12;\n
                    v38 = *((v12 + 12));\n
                    if (v38)\n
                    {\n
                        *((v38 + 8)) = v12;\n
                        goto LABEL_4037b1;\n
                    }\n
                }\n
            }\n
            else if (*((v24 + v16)) == v16)\n
            {\n
                goto LABEL_40369c;\n
            }\n
            v0 = v38;\n
            v38 = cgc_heap_error(\"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\", v23);\n
            v17 = (v24 <= 0x1200 ? (v24 - 0x1200 >> 11) + 66 : (v24 - 0x200 >> 7) + 34);\n
LABEL_403616:\n
            *(v38) = *((v23 + v17 * 4));\n
            *((v23 + v17 * 4)) = v38;\n
            goto LABEL_4037b1;\n
        }\n
    }\n
    v19 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_4037fd:\n
    v8 = v38;\n
    v7 = v19;\n
    cgc_heap_error(*(&v9));\n
LABEL_403804:\n
    v6 = v12;\n
    v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v38 = cgc_heap_error(*(&v9));\n
LABEL_403814:\n
    v7 = v38;\n
    v6 = v12;\n
    v5 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v10, a0);\n
    return cgc_malloc_size(v10, a0);\n
}\n
", "4208688:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208737:sub_403861": null, "4208752:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
    {\n
LABEL_403945:\n
        return v3;\n
    }\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_40393d:\n
        malloc_free(v1, a0);\n
        goto LABEL_403945;\n
    }\n
    if (!v4)\n
    {\n
        v11 = cgc_malloc_alloc(v7, v2);\n
        return v11;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_403920;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_403920:\n
        v3 = v4;\n
        goto LABEL_403945;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        goto LABEL_403945;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_40393d;\n
}\n
", "4208975:sub_40394f": null, "4208976:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4209040:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4209094:sub_4039c6": null, "4209104:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4209165:sub_403a0d": null, "4209168:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4209298:sub_403a92": null, "4209312:cgc_memmove": "int cgc_memmove(char *v1, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ebp\n
    char *v4;  // ecx\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // esi\n
    char *v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // ebp\n
    unsigned int v13;  // edi\n
    char *v14;  // edi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edi\n
    unsigned int v20;  // edi\n
    char *v21;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int v24;  // edi\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = a0;\n
    v15 = v1;\n
    if (v15 > v4)\n
    {\n
        if (!v3)\n
            return v15;\n
        v5 = v3 - 1;\n
        v16 = v3 & 3;\n
        v14 = 0;\n
        if (v5 >= 3)\n
        {\n
            v0 = v16;\n
            v7 = v3;\n
            v8 = v15 + v5;\n
            v9 = &v4[v5];\n
            v11 = 0;\n
            do\n
            {\n
                v8[v11] = *((v9 + v11));\n
                v8[1 + v11] = *((v9 + v11 - 1));\n
                v8[2 + v11] = *((v9 + v11 - 2));\n
                v8[3 + v11] = *((v9 + v11 - 3));\n
                v11 -= 4;\n
            } while (-(v7 & -0x4) != v11);\n
            v14 = -(v11);\n
            v15 = v1;\n
            v3 = a1;\n
            v16 = v0;\n
        }\n
        if (!v16)\n
            return v15;\n
        v20 = ~(v14) + v3;\n
        v21 = v15 + v20;\n
        v23 = -(v16);\n
        v24 = 0;\n
        do\n
        {\n
            v21[v24] = v4[v24 + v20];\n
            v24 -= 1;\n
        } while (v23 != v24);\n
        return v15;\n
    }\n
    else\n
    {\n
        if (!v3)\n
            return v15;\n
        v6 = v3 & 3;\n
        v13 = 0;\n
        if (v3 - 1 >= 3)\n
        {\n
            v12 = v3 & -0x4;\n
            v13 = 0;\n
            do\n
            {\n
                *((v15 + v13)) = v4[v13];\n
                *((v15 + v13 + 1)) = v4[1 + v13];\n
                *((v15 + v13 + 2)) = v4[2 + v13];\n
                *((v15 + v13 + 3)) = v4[3 + v13];\n
                v13 += 4;\n
            } while (v12 != v13);\n
        }\n
        if (!v6)\n
            return v1;\n
        v17 = v15 + v13;\n
        v18 = &v4[v13];\n
        v19 = 0;\n
        do\n
        {\n
            v17[v19] = *((v18 + v19));\n
            v19 += 1;\n
        } while (v6 != v19);\n
        return v1;\n
    }\n
}\n
", "4209606:sub_403bc6": null, "4209616:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4209726:sub_403c3e": null, "4209728:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_stdout->field_8 = 0;\n
        v0 = 0;\n
        v4 = cgc__vsfprintf(cgc_stdout);\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    return v4;\n
}\n
", "4209841:sub_403cb1": null, "4209856:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v2 = cgc__vsfprintf(cgc_stdout);\n
        return v2;\n
    }\n
    cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    cgc_fflush(cgc_stdout);\n
    cgc_stdout->field_8 = -1;\n
    return v2;\n
}\n
", "4209963:sub_403d2b": null, "4209968:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
    {\n
        v4->field_8 = 0;\n
        v0 = 0;\n
        v5 = cgc__vsfprintf(v4);\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    return v5;\n
}\n
", "4210077:sub_403d9d": null, "4210080:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 != -1)\n
    {\n
        v0 = 0;\n
        v3 = cgc__vsfprintf(v2);\n
        return v3;\n
    }\n
    v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    cgc_fflush(v2);\n
    v2->field_8 = -1;\n
    return v3;\n
}\n
", "4210183:sub_403e07": null, "4210192:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210240:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4210283:sub_403e6b": null, "4210288:cgc__vsfprintf": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char field_1;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v1;  // [bp-0x6c]\n
    struct_1 *v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v6;  // [bp-0x58]\n
    char v8;  // [bp-0x50]\n
    unsigned int v11;  // [bp-0x8]\n
    char v13;  // [bp+0x8]\n
    unsigned int v31;  // ebx\n
    char *v32;  // ebx\n
    struct struct_1 **v33;  // ecx\n
    unsigned int v40;  // edx\n
    unsigned int v77;  // esi\n
    struct_1 *v78;  // eax\n
    struct_1 *v79;  // ebp\n
\n
    v11 = v31;\n
    v32 = *(&v13);\n
    v79 = v33 + 1;\n
    v3 = v33 + 1;\n
    v78 = *(v33);\n
    if (!*(v33))\n
    {\n
        v77 = 0;\n
    }\n
    else\n
    {\n
        v4 = v40;\n
        v6 = 20 + -0x1 * &v8;\n
        v77 = 0;\n
        v1 = &_GLOBAL_OFFSET_TABLE_;\n
    }\n
}\n
", "4210390:sub_403ed6": null, "4211888:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4211932:sub_4044dc": null, "4211936:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    unsigned int v2;  // al, Other Possible Types: char\n
    struct_0 *v3;  // ebp, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v3 = v0 + 1;\n
        do\n
        {\n
            if (!*(v1))\n
                return v2 - *(v1);\n
            v2 = cgc_tolower(v2);\n
            if (v2 != cgc_tolower(*(v1)))\n
                return *((v3 - 1)) - *(v1);\n
            v1 += 1;\n
            v2 = *(v3);\n
            v3 += 1;\n
        } while (v2);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212054:sub_404556": null, "4212064:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212153:sub_4045b9": null, "4212160:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4212228:sub_404604": null, "4212240:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4212308:sub_404654": null, "4212320:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4212372:sub_404694": null, "4212384:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        v1[v2] = 0;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4212464:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4212496:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // al, Other Possible Types: char\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4212624:cgc_strncpy": "int cgc_strncpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi\n
    char *v3;  // eax\n
    char v4;  // bl\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = *(v2);\n
    v6 = 0;\n
    v5 = v3;\n
    if (*(v2) && v1)\n
    {\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3[v6] = v4;\n
            v4 = v2[1 + v6];\n
            v6 += 1;\n
            if (!v4)\n
                break;\n
            if (v6 >= v1)\n
                break;\n
        }\n
        v5 = &v3[v6];\n
    }\n
    if (v6 >= v1)\n
        return v0;\n
    v7 = v5 - v3;\n
    do\n
    {\n
        *(v5) = 0;\n
        v5 += 1;\n
        v7 += 1;\n
    } while (v7 < v1);\n
    return v0;\n
}\n
", "4212705:sub_4047e1": null, "4212720:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (v4)\n
    {\n
        cgc_memcpy(v4, v0, v3);\n
        v3[v4] = 0;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4212809:sub_404849": null, "4212816:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14]\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // edi, Other Possible Types: unsigned int\n
    void* v5;  // ebp, Other Possible Types: unsigned int\n
    char *v6;  // ebp, Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v0 = v2;\n
    if (!*(v2))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = v2 + 1;\n
        v5 = 0;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v6 = v4 - 1;\n
                v2 = v0;\n
                v7 = v1;\n
                if (!(!*((v4 - 1))))\n
                    goto LABEL_4048b1;\n
                goto LABEL_4048af;\n
            }\n
            v5 += 1;\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        goto LABEL_4048b1;\n
    }\n
    v2 = v0;\n
    v6 = &v2[v5];\n
    v7 = v1;\n
LABEL_4048af:\n
    v4 = 0;\n
LABEL_4048b1:\n
    *(v7) = v4;\n
    *(v6) = 0;\n
    return v2;\n
}\n
", "4212946:sub_4048d2": null, "4212960:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (cgc_strcmp(v1, a0))\n
        {\n
            tmp_7 = *((v1 + 1));\n
            v1 += 1;\n
            if (!tmp_7)\n
                return 0;\n
        }\n
        else\n
        {\n
            return v1;\n
        }\n
    }\n
}\n
", "4213048:sub_404938": null, "4213056:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    char v10[2];  // esi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // ecx\n
    unsigned int *v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // edx\n
    char v24[2];  // ebp, Other Possible Types: unsigned int\n
    void* v25;  // esi, Other Possible Types: unsigned int\n
    void* v26;  // edi, Other Possible Types: unsigned int\n
    char v27[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = v6;\n
    v12 = cgc_isspace(v10[0]);\n
    v24 = v10;\n
    if (v12)\n
    {\n
        v24 = v10;\n
        do\n
        {\n
            if (!*(v24))\n
            {\n
                v26 = 0;\n
                v23 = 1;\n
                v21 = 1;\n
                v25 = 0;\n
                v22 = a0;\n
                if (!v22)\n
                    goto LABEL_404b14;\n
            }\n
            v11 = *((v24 + 1));\n
            v24 += 1;\n
            v12 = cgc_isspace(v11);\n
        } while (v12);\n
    }\n
    v13 = a1;\n
    if (*(v24) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v24) == 43)\n
            v24 += 1;\n
        if (!v13)\n
            goto LABEL_404a08;\n
    }\n
    else\n
    {\n
        v24 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_404a08:\n
            *(&v12) = *(v24);\n
            if (*(v24) != 48)\n
            {\n
LABEL_404a43:\n
                v12 = cgc_isdigit(v12);\n
                v13 = 10;\n
                if (!v12)\n
                    goto LABEL_404af4;\n
LABEL_404a5b:\n
                *(&v12) = *(v24);\n
LABEL_404a5e:\n
                if (!v12)\n
                {\n
LABEL_404af4:\n
                    v26 = 0;\n
                    v21 = 1;\n
                    v25 = 0;\n
                    v22 = a0;\n
                    v23 = v0;\n
                    if (!v22)\n
                        goto LABEL_404b14;\n
LABEL_404b09:\n
                    tmp_2 = v21;\n
                    v27 = v6;\n
                    if (!tmp_2)\n
                        v27 = v24;\n
                    *(v22) = v27;\n
                    goto LABEL_404b14;\n
                }\n
LABEL_404a66:\n
                v25 = 0;\n
                v26 = 0;\n
                v21 = 1;\n
                v1 = v13;\n
                do\n
                {\n
                    v2 = v21;\n
                    v14 = cgc_isdigit(v12);\n
                    v15 = *(v24);\n
                    if (v14)\n
                    {\n
                        v16 = v15 - 48;\n
                    }\n
                    else\n
                    {\n
                        v18 = *(v24);\n
                        if (cgc_islower(v15))\n
                        {\n
                            v16 = v18 - 87;\n
                        }\n
                        else\n
                        {\n
                            if (!cgc_isupper(v18))\n
                                goto LABEL_404b37;\n
                            v16 = *(v24) - 55;\n
                        }\n
                    }\n
                    v19 = v1;\n
                    if (v16 >= v19)\n
                    {\n
LABEL_404b37:\n
                        v22 = a0;\n
                        v23 = v0;\n
                        v21 = v2;\n
                        if (!v22)\n
                            goto LABEL_404b14;\n
                        goto LABEL_404b09;\n
                    }\n
                    v20 = v19 * v25;\n
                    tmp_5 = v20;\n
                    v25 = v20 + v16;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v26 = 1;\n
                    v12 = *((v24 + 1));\n
                    v24 += 1;\n
                    v21 = 0;\n
                } while (v12);\n
                goto LABEL_404b09;\n
            }\n
            else\n
            {\n
                *(&v12) = *((v24 + 1));\n
                if ((v12 & 248) == 48)\n
                {\n
                    v24 += 1;\n
                    v13 = 8;\n
                    goto LABEL_404a66;\n
                }\n
                v12 = cgc_tolower(v12);\n
                if (v12 != 120)\n
                {\n
                    *(&v12) = *(v24);\n
                    goto LABEL_404a43;\n
                }\n
                else\n
                {\n
                    v24 += 2;\n
                }\n
            }\n
LABEL_404a39:\n
            v13 = 16;\n
            goto LABEL_404a5b;\n
        }\n
    }\n
    if (!(v13 == 16))\n
        goto LABEL_404a5b;\n
    *(&v12) = *(v24);\n
    v13 = 16;\n
    if (!(*(v24) == 48))\n
        goto LABEL_404a5e;\n
    v24 += (cgc_tolower(*((v24 + 1))) == 120) * 2;\n
    goto LABEL_404a39;\n
LABEL_404b14:\n
    v28 = (!v26 ? 0x80000000 : -(v25));\n
    v29 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, edi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v25);\n
    if (v23 < 0)\n
        v29 = v28;\n
    return v29;\n
}\n
", "4213404:sub_404a9c": null, "4213577:sub_404b49": null, "4213584:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(unsigned int v8, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v27;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // ebp\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // edx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ecx\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(*(v12)))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404c45;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) == 45)\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
    }\n
    else\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
    }\n
    v15 = a1;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v15 && v15 == 16)\n
    {\n
        *(&v15) = *(v34);\n
        if (*(v34) == 48)\n
        {\n
            v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
            v0 = 16;\n
            goto LABEL_404cae;\n
        }\n
        else\n
        {\n
            v0 = 16;\n
            if (!(!v15))\n
                goto LABEL_404cb5;\n
            goto LABEL_404c43;\n
        }\n
    }\n
    *(&v15) = *(v34);\n
    if (*(v34) == 48)\n
    {\n
        *(&v15) = *((v34 + 1));\n
        if ((v15 & 248) == 48)\n
        {\n
            v1 = v36;\n
            v34 += 1;\n
            v0 = 8;\n
            goto LABEL_404cb9;\n
        }\n
        v15 = cgc_tolower(v15);\n
        if (v15 != 120)\n
        {\n
            *(&v15) = *(v34);\n
        }\n
        else\n
        {\n
            v34 += 2;\n
            v0 = 16;\n
            goto LABEL_404cae;\n
        }\n
    }\n
    v1 = v36;\n
    v15 = cgc_isdigit(v15);\n
    v0 = 10;\n
    if (!v15)\n
    {\n
        v14 = 0;\n
        v37 = 1;\n
        v2 = 0;\n
        v16 = 0;\n
        v35 = a0;\n
        v36 = v1;\n
        if (!v35)\n
            goto LABEL_404daf;\n
LABEL_404da4:\n
        tmp_2 = v37;\n
        v38 = v8;\n
        if (!tmp_2)\n
            v38 = v34;\n
        *(v35) = v38;\n
    }\n
    else\n
    {\n
        v36 = v1;\n
LABEL_404cae:\n
        *(&v15) = *(v34);\n
        if (*(v34))\n
        {\n
LABEL_404cb5:\n
            v1 = v36;\n
LABEL_404cb9:\n
            v2 = 0;\n
            v18 = 0;\n
            v14 = 0;\n
            v37 = 1;\n
            do\n
            {\n
                v3 = v37;\n
                v19 = cgc_isdigit(v15);\n
                v20 = *(v34);\n
                if (v19)\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v34);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else\n
                    {\n
                        if (!cgc_isupper(v23))\n
                            goto LABEL_404d75;\n
                        v21 = *(v34) - 55;\n
                    }\n
                }\n
                v24 = v0;\n
                if (v21 >= v24)\n
                {\n
LABEL_404d75:\n
                    v35 = a0;\n
                    v36 = v1;\n
                    v37 = v3;\n
                    if (!v35)\n
                        goto LABEL_404daf;\n
                    goto LABEL_404da4;\n
                }\n
                v3 = v34;\n
                v25 = v2;\n
                v27 = v14;\n
                tmp_67 = v25 * v24;\n
                v30 = tmp_67;\n
                v31 = v24 * v18 + v25 * (v24 >> 31) + (v25 * v24 >> 32);\n
                v32 = v3;\n
                v33 = v21 >> 31;\n
                v2 = v30 + v21;\n
                tmp_41 = v33;\n
                v18 = v33 + v31 + (v30 + v21 < v30);\n
                v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                v15 = *((v32 + 1));\n
                v34 = v32 + 1;\n
                v37 = 0;\n
            } while (v15);\n
            goto LABEL_404daf;\n
        }\n
LABEL_404c43:\n
        v14 = 0;\n
LABEL_404c45:\n
        v37 = 1;\n
        v2 = 0;\n
        v17 = 0;\n
        v35 = a0;\n
        if (!v35)\n
            goto LABEL_404daf;\n
        goto LABEL_404da4;\n
    }\n
LABEL_404daf:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214240:cgc_unpack": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(unsigned int v8, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_2;  // tmp #2\n
    int tmp_67;  // tmp #67\n
    int tmp_41;  // tmp #41\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // esi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v27;  // ebx\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // ebp\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // edx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ecx\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // eax\n
    unsigned int v41;  // ecx\n
    unsigned int v42;  // cc_dep2\n
    unsigned int v43;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v34 = v12;\n
    if (cgc_isspace(*(v12)))\n
    {\n
        v34 = v12;\n
        do\n
        {\n
            if (!*(v34))\n
            {\n
                v14 = 0;\n
                v36 = 1;\n
                goto LABEL_404c45;\n
            }\n
            v13 = *((v34 + 1));\n
            v34 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v0 = a1;\n
    if (*(v34) == 45)\n
    {\n
        v34 += 1;\n
        v36 = -1;\n
    }\n
    else\n
    {\n
        v36 = 1;\n
        if (*(v34) == 43)\n
            v34 += 1;\n
    }\n
    v15 = a1;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v15 && v15 == 16)\n
    {\n
        *(&v15) = *(v34);\n
        if (*(v34) == 48)\n
        {\n
            v34 += (cgc_tolower(*((v34 + 1))) == 120) * 2;\n
            v0 = 16;\n
            goto LABEL_404cae;\n
        }\n
        else\n
        {\n
            v0 = 16;\n
            if (!(!v15))\n
                goto LABEL_404cb5;\n
            goto LABEL_404c43;\n
        }\n
    }\n
    *(&v15) = *(v34);\n
    if (*(v34) == 48)\n
    {\n
        *(&v15) = *((v34 + 1));\n
        if ((v15 & 248) == 48)\n
        {\n
            v1 = v36;\n
            v34 += 1;\n
            v0 = 8;\n
            goto LABEL_404cb9;\n
        }\n
        v15 = cgc_tolower(v15);\n
        if (v15 != 120)\n
        {\n
            *(&v15) = *(v34);\n
        }\n
        else\n
        {\n
            v34 += 2;\n
            v0 = 16;\n
            goto LABEL_404cae;\n
        }\n
    }\n
    v1 = v36;\n
    v15 = cgc_isdigit(v15);\n
    v0 = 10;\n
    if (!v15)\n
    {\n
        v14 = 0;\n
        v37 = 1;\n
        v2 = 0;\n
        v16 = 0;\n
        v35 = a0;\n
        v36 = v1;\n
        if (!v35)\n
            goto LABEL_404daf;\n
LABEL_404da4:\n
        tmp_2 = v37;\n
        v38 = v8;\n
        if (!tmp_2)\n
            v38 = v34;\n
        *(v35) = v38;\n
    }\n
    else\n
    {\n
        v36 = v1;\n
LABEL_404cae:\n
        *(&v15) = *(v34);\n
        if (*(v34))\n
        {\n
LABEL_404cb5:\n
            v1 = v36;\n
LABEL_404cb9:\n
            v2 = 0;\n
            v18 = 0;\n
            v14 = 0;\n
            v37 = 1;\n
            do\n
            {\n
                v3 = v37;\n
                v19 = cgc_isdigit(v15);\n
                v20 = *(v34);\n
                if (v19)\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v34);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else\n
                    {\n
                        if (!cgc_isupper(v23))\n
                            goto LABEL_404d75;\n
                        v21 = *(v34) - 55;\n
                    }\n
                }\n
                v24 = v0;\n
                if (v21 >= v24)\n
                {\n
LABEL_404d75:\n
                    v35 = a0;\n
                    v36 = v1;\n
                    v37 = v3;\n
                    if (!v35)\n
                        goto LABEL_404daf;\n
                    goto LABEL_404da4;\n
                }\n
                v3 = v34;\n
                v25 = v2;\n
                v27 = v14;\n
                tmp_67 = v25 * v24;\n
                v30 = tmp_67;\n
                v31 = v24 * v18 + v25 * (v24 >> 31) + (v25 * v24 >> 32);\n
                v32 = v3;\n
                v33 = v21 >> 31;\n
                v2 = v30 + v21;\n
                tmp_41 = v33;\n
                v18 = v33 + v31 + (v30 + v21 < v30);\n
                v14 = ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))), Conv(1->32, ((eax<4> + ecx<4>) < eax<4>))) ? v27 : 1);\n
                v15 = *((v32 + 1));\n
                v34 = v32 + 1;\n
                v37 = 0;\n
            } while (v15);\n
            goto LABEL_404daf;\n
        }\n
LABEL_404c43:\n
        v14 = 0;\n
LABEL_404c45:\n
        v37 = 1;\n
        v2 = 0;\n
        v17 = 0;\n
        v35 = a0;\n
        if (!v35)\n
            goto LABEL_404daf;\n
        goto LABEL_404da4;\n
    }\n
LABEL_404daf:\n
    v39 = v2;\n
    v40 = -(v39);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v40 = v39;\n
    v41 = -(0 < v14) | v40;\n
    v42 = v39 < 2147483649;\n
    v43 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v41);\n
    if ((v36 >> 31 & 1 ^ 1))\n
        v43 = v41;\n
    return v43;\n
}\n
", "4214398:sub_404e7e": null, "4214400:cgc_init": "extern char heap_propagate_bytes;\n
extern struct_0 *heap_propagate_memory;\n
extern struct_0 *heap_propagate_unpacked;\n
extern char heap_sort_bytes;\n
extern struct_0 *heap_sort_memory;\n
extern struct_0 *heap_sort_unpacked;\n
extern char heapify_bytes;\n
extern struct_0 *heapify_memory;\n
extern struct_0 *heapify_unpacked;\n
extern char insertion_sort_bytes;\n
extern struct_0 *insertion_sort_memory;\n
extern struct_0 *insertion_sort_unpacked;\n
extern char merge_helper_bytes;\n
extern struct_0 *merge_helper_memory;\n
extern struct_0 *merge_helper_unpacked;\n
extern char merge_sort_bytes;\n
extern struct_0 *merge_sort_memory;\n
extern struct_0 *merge_sort_unpacked;\n
extern char selection_sort_bytes;\n
extern struct_0 *selection_sort_memory;\n
extern struct_0 *selection_sort_unpacked;\n
\n
int cgc_init()\n
{\n
    char v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    char *v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // edi\n
    char *v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edi\n
    char *v11;  // esi, Other Possible Types: unsigned int\n
    char *v12;  // esi, Other Possible Types: unsigned int\n
    unsigned int v13;  // eax\n
    char *v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // edi\n
    char *v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // eax\n
    char *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edi\n
\n
    sub_402088(343, 1);\n
    cgc_memcpy(selection_sort_memory, &selection_sort_bytes, 343);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v4 = 0;\n
    v5 = cgc_strlen(&v0);\n
    while (true)\n
    {\n
        selection_sort_memory[v4].field_0 = selection_sort_memory[v4].field_0 ^ (&v0)[(v4 >> 31 CONCAT v4) /m v5 >> 32];\n
        v6 = v4 + 1;\n
        if (v6 == 343)\n
            break;\n
        selection_sort_memory[1 + v4].field_0 = selection_sort_memory[1 + v4].field_0 ^ (&v0)[(v6 >> 31 CONCAT v6) /m v5 >> 32];\n
        v4 = v6 + 1;\n
    }\n
    selection_sort_unpacked = selection_sort_memory;\n
    sub_402088(480, 1);\n
    cgc_memcpy(heap_propagate_memory, &heap_propagate_bytes, 480);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v7 = 0;\n
    v8 = cgc_strlen(&v0);\n
    do\n
    {\n
        heap_propagate_memory[v7].field_0 = heap_propagate_memory[v7].field_0 ^ (&v0)[(v7 >> 31 CONCAT v7) /m v8 >> 32];\n
        heap_propagate_memory[1 + v7].field_0 = heap_propagate_memory[1 + v7].field_0 ^ (&v0)[(v7 + 1 >> 31 CONCAT v7 + 1) /m v8 >> 32];\n
        v7 += 2;\n
    } while (v7 != 480);\n
    heap_propagate_unpacked = heap_propagate_memory;\n
    sub_402088(695, 1);\n
    cgc_memcpy(heapify_memory, &heapify_bytes, 695);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v11 = 0;\n
    v9 = cgc_strlen(&v0);\n
    while (true)\n
    {\n
        heapify_memory[v11].field_0 = heapify_memory[v11].field_0 ^ (&v0)[(v11 >> 31 CONCAT v11) /m v9 >> 32];\n
        v10 = v11 + 1;\n
        if (v10 == 695)\n
            break;\n
        heapify_memory[1 + v11].field_0 = heapify_memory[1 + v11].field_0 ^ (&v0)[(v10 >> 31 CONCAT v10) /m v9 >> 32];\n
        v11 = v10 + 1;\n
    }\n
    heapify_unpacked = heapify_memory;\n
    sub_402088(298, 1);\n
    cgc_memcpy(heap_sort_memory, &heap_sort_bytes, 298);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v12 = 0;\n
    v13 = cgc_strlen(&v0);\n
    do\n
    {\n
        heap_sort_memory[v12].field_0 = heap_sort_memory[v12].field_0 ^ (&v0)[(v12 >> 31 CONCAT v12) /m v13 >> 32];\n
        heap_sort_memory[1 + v12].field_0 = heap_sort_memory[1 + v12].field_0 ^ (&v0)[(v12 + 1 >> 31 CONCAT v12 + 1) /m v13 >> 32];\n
        v12 += 2;\n
    } while (v12 != 298);\n
    heap_sort_unpacked = heap_sort_memory;\n
    sub_402088(495, 1);\n
    cgc_memcpy(merge_helper_memory, &merge_helper_bytes, 495);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v14 = 0;\n
    v15 = cgc_strlen(&v0);\n
    while (true)\n
    {\n
        merge_helper_memory[v14].field_0 = merge_helper_memory[v14].field_0 ^ (&v0)[(v14 >> 31 CONCAT v14) /m v15 >> 32];\n
        v16 = v14 + 1;\n
        if (v16 == 495)\n
            break;\n
        merge_helper_memory[1 + v14].field_0 = merge_helper_memory[1 + v14].field_0 ^ (&v0)[(v16 >> 31 CONCAT v16) /m v15 >> 32];\n
        v14 = v16 + 1;\n
    }\n
    merge_helper_unpacked = merge_helper_memory;\n
    sub_402088(400, 1);\n
    cgc_memcpy(merge_sort_memory, &merge_sort_bytes, 400);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v17 = 0;\n
    v18 = cgc_strlen(&v0);\n
    do\n
    {\n
        merge_sort_memory[v17].field_0 = merge_sort_memory[v17].field_0 ^ (&v0)[(v17 >> 31 CONCAT v17) /m v18 >> 32];\n
        merge_sort_memory[1 + v17].field_0 = merge_sort_memory[1 + v17].field_0 ^ (&v0)[(v17 + 1 >> 31 CONCAT v17 + 1) /m v18 >> 32];\n
        v17 += 2;\n
    } while (v17 != 400);\n
    merge_sort_unpacked = merge_sort_memory;\n
    sub_402088(349, 1);\n
    cgc_memcpy(insertion_sort_memory, &insertion_sort_bytes, 349);\n
    v2 = 0;\n
    strncpy(&v1, \"FUN!\", 4);\n
    strncpy(&v0, \"CS10\", 4);\n
    v19 = 0;\n
    v20 = cgc_strlen(&v0);\n
    while (true)\n
    {\n
        insertion_sort_memory[v19].field_0 = insertion_sort_memory[v19].field_0 ^ (&v0)[(v19 >> 31 CONCAT v19) /m v20 >> 32];\n
        v21 = v19 + 1;\n
        if (v21 == 349)\n
            break;\n
        insertion_sort_memory[1 + v19].field_0 = insertion_sort_memory[1 + v19].field_0 ^ (&v0)[(v21 >> 31 CONCAT v21) /m v20 >> 32];\n
        v19 = v21 + 1;\n
    }\n
    insertion_sort_unpacked = insertion_sort_memory;\n
    return insertion_sort_memory;\n
}\n
", "4215552:cgc_swap": "int cgc_swap(unsigned int *v0, unsigned int *a0)\n
{\n
    unsigned int *v1;  // eax\n
    unsigned int *v2;  // ecx\n
    unsigned int v3;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    *(v2) = *(v1);\n
    *(v1) = v3;\n
    return a0;\n
}\n
", "4215571:sub_405313": null, "4215584:cgc_print_array": "int cgc_print_array(unsigned int *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // eax\n
\n
    if (v3 && a0)\n
    {\n
        cgc_printf(\"Array data\\n
[\");\n
        v2 = a0 - 1;\n
        v5 = 0;\n
        v1 = \"%d\";\n
        do\n
        {\n
            v0 = v3[v5];\n
            cgc_printf(v1);\n
            v6 = (v5 < v2 ? \"]\\n
\" : \", \");\n
            v4 = cgc_printf(v6);\n
            v5 += 1;\n
        } while (a0 != v5);\n
        return v4;\n
    }\n
    v4 = cgc_printf(\"Empty Array\\n
\");\n
    return v4;\n
}\n
", "4215753:sub_4053c9": null, "4215760:cgc_create_number_array": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_create_number_array(unsigned int *v5)\n
{\n
    unsigned int *v0;  // [bp-0x5c], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x58], Other Possible Types: unsigned int\n
    unsigned int *v2;  // [bp-0x54]\n
    char v3;  // [bp-0x51]\n
    char v4;  // [bp-0x50]\n
    struct_0 *v6;  // esi, Other Possible Types: unsigned int\n
    char *v7;  // edi\n
    char v8;  // al\n
    unsigned int *v9;  // edi\n
    unsigned int v10;  // ecx\n
\n
    v0 = cgc_malloc(8);\n
    *(v5) = 2;\n
    cgc_printf(\"Enter a list of numbers to sort. End the list with ';;'\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    v6 = 0;\n
    v1 = 0;\n
    do\n
    {\n
        v7 = &v4;\n
        cgc_fread(v7, 1, cgc_stdin);\n
        v8 = (&v4)[v6];\n
        if (!v6)\n
        {\n
            if (v8 == 44)\n
            {\n
                *(v7) = 0;\n
                v6 = 0;\n
                continue;\n
            }\n
        }\n
        else\n
        {\n
            if (v8 == 44)\n
            {\n
                *(v7) = 0;\n
                v9 = v0;\n
                v10 = v1;\n
                v9[v10] = cgc_strtol(&v4, NULL, 10);\n
                v6 = 0;\n
                v1 = v10 + 1;\n
                if (v1 == *(v5))\n
                {\n
                    v2 = cgc_malloc(v1 * 8);\n
                    cgc_memcpy(v2, v9, *(v5) * 4);\n
                    cgc_free(v9);\n
                    *(v5) = *(v5) * 2;\n
                    v0 = v2;\n
                }\n
                continue;\n
            }\n
            else if (v8 == 59 && (&v3)[v6] == 59)\n
            {\n
                break;\n
            }\n
        }\n
        v6 += 1;\n
    } while (v6 < 63);\n
    do\n
    { } while (cgc_freaduntil(&v4, 64, 10, cgc_stdin) == -1);\n
    *(v5) = v1;\n
    return v0;\n
}\n
", "4215862:sub_405436": null, "4215938:sub_405482": null, "4215963:sub_40549b": null, "4216152:sub_405558": null, "4216160:cgc_multiply_array": "extern unsigned int cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_multiply_array(unsigned int *v4, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x54]\n
    char v3[2];  // [bp-0x50]\n
    unsigned int *v5;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v6;  // ecx\n
    char *v7;  // ebp\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edx\n
    void* v10;  // esi, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
\n
    v5 = *(a0);\n
    if (v5 >= 10001)\n
    {\n
        v5 = cgc_printf(\"Array is too long. Can't multiply any more\\n
\");\n
        return v5;\n
    }\n
    v6 = v4;\n
    v7 = *(v6);\n
    if (!(*(v6) && v5))\n
        return v5;\n
    cgc_printf(\"Quick Grow! Enter a list multiplier. End number with ';'\\n
\");\n
    cgc_fflush(cgc_stdout);\n
    v11 = cgc_stdin;\n
    if (cgc_freaduntil(v3, 64, 59, cgc_stdin) == -1)\n
    {\n
        v12 = 0;\n
LABEL_40568f:\n
        v0 = v12;\n
        do\n
        { } while (cgc_freaduntil(v3, 64, 10, v11) == -1);\n
        cgc_free(v7);\n
        v5 = v4;\n
        *(v5) = v0;\n
    }\n
    else\n
    {\n
        v8 = cgc_strtol(v3, NULL, 10);\n
        if (v8 && v8 <= 10000)\n
        {\n
            v1 = cgc_stdin;\n
            v2 = v8 * *(a0);\n
            v0 = v8;\n
            v12 = cgc_malloc(v2 * 4);\n
            if (v0 > 0)\n
            {\n
                v10 = 0;\n
                do\n
                {\n
                    v9 = *(a0);\n
                    cgc_memcpy(v12 + v10 * v9 * 4, v7, v9 * 4);\n
                    v10 += 1;\n
                } while (v0 != v10);\n
            }\n
            *(a0) = v2;\n
            v11 = v1;\n
            goto LABEL_40568f;\n
        }\n
        cgc_printf(\"Multiplier too big, try again\\n
\");\n
        do\n
        {\n
            v5 = cgc_freaduntil(v3, 64, 10, cgc_stdin);\n
        } while (v5 == -1);\n
    }\n
}\n
", "4216571:sub_4056fb": null, "4216576:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_check_seed()\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v0 != *(0x4347c000))\n
        return cgc_fflush(cgc_stdout);\n
    cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    return cgc_fflush(cgc_stdout);\n
}\n
", "4216680:sub_405768": null, "4216688:main": null, "4218191:sub_405d4f": null, "4218192:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242888:__libc_start_main": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}