{"4198400:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28719;\n
    v6 = v5 + 11;\n
    v7 = v5 + 11;\n
    if (v7 == v6)\n
        return v5 + 11;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28655;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 11;\n
    v9 = (v6 + 11 - (v6 + 11) >> 31) + (11 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v2 = v1;\n
    tmp_21 = v2;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t21, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v5 = v2 * a0;\n
    v6 = cgc_malloc();\n
    if (v6)\n
    {\n
        v0 = v5;\n
        cgc_memset(v6, 0);\n
        return v6;\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4198974:sub_40123e": null, "4198976:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = !((&_GLOBAL_OFFSET_TABLE_)[8476 + v1] & 32);\n
    }\n
    return v2;\n
}\n
", "4199016:sub_401268": null, "4199024:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[8476 + v1] & 7);\n
    }\n
    return v2;\n
}\n
", "4199061:sub_401295": null, "4199072:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[8476 + v1] & 3);\n
    }\n
    return v2;\n
}\n
", "4199109:sub_4012c5": null, "4199120:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8476 + v1] & 1;\n
    return v2;\n
}\n
", "4199155:sub_4012f3": null, "4199168:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8476 + v1] >> 1 & 1;\n
    return v2;\n
}\n
", "4199205:sub_401325": null, "4199216:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8476 + v1] >> 4 & 1;\n
    return v2;\n
}\n
", "4199254:sub_401356": null, "4199264:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8476 + v1] >> 3 & 1;\n
    return v2;\n
}\n
", "4199302:sub_401386": null, "4199312:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 91 > -27)\n
        v1 += 32;\n
    return v1;\n
}\n
", "4199333:sub_4013a5": null, "4199344:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 123 > -27)\n
        v1 -= 32;\n
    return v1;\n
}\n
", "4199365:sub_4013c5": null, "4199376:cgc_free": "typedef struct struct_1 {\n
    char field_-4;\n
    char padding_-3[3];\n
    struct struct_1 *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern unsigned int __bss_start;\n
extern char cgc_g_malloc;\n
\n
int cgc_free(struct_1 *v1)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    struct_1 *v2;  // eax, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int *v4;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v5;  // ebx\n
    unsigned int v6;  // edi\n
    unsigned int *v7;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v8;  // edi\n
    struct_1 *v9;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v11;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
        return v2;\n
    v3 = v2->field_0;\n
    if ((v2->field_0 & 1))\n
    {\n
        cgc__terminate();\n
        return cgc_malloc();\n
    }\n
    v2 = &v2->field_4;\n
    if ((v3 & 2))\n
    {\n
        v0 = *(v2);\n
        v2 = cgc_deallocate(v2);\n
        return v2;\n
    }\n
    *((v2 + 4)) = v3 | 1;\n
    v4 = &__bss_start;\n
    v9 = *(v2);\n
    v10 = -1;\n
    do\n
    {\n
        v10 += 1;\n
        v4 += 4;\n
    } while (v9 > 32 << (v10 & 31));\n
    if (v10 <= 11)\n
    {\n
        while (true)\n
        {\n
            v5 = v9 ^ v2;\n
            if (!(v5->field_0 & 1))\n
                break;\n
            if (*(&v5->field_-4) != v9)\n
                break;\n
            v6 = v5->field_8;\n
            v7 = v6 + 8;\n
            if (!v6)\n
                v7 = v4;\n
            *(v7) = *(&v5->field_4);\n
            v8 = *(&v5->field_4);\n
            if (v8)\n
                v8->field_c = v5->field_8;\n
            if (v5 < v2)\n
                v2 = v5;\n
            v9 = *(v2) * 2;\n
            *(v2) = v9;\n
            v10 += 1;\n
            v4 += 4;\n
            if (v10 == 12)\n
            {\n
                v10 = 12;\n
                break;\n
            }\n
        }\n
    }\n
    v11 = *(&(&cgc_g_malloc)[4 * v10]);\n
    *((v2 + 8)) = v11;\n
    if (v11)\n
        v11->field_c = v2;\n
    *((v2 + 12)) = 0;\n
    *(&(&cgc_g_malloc)[4 * v10]) = v2;\n
    return v2;\n
}\n
", "4199480:sub_401438": null, "4199632:cgc_malloc": "typedef struct struct_3 {\n
    struct struct_2 *field_0;\n
    char padding_4[44];\n
    unsigned int field_30;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern struct_1 *__bss_start;\n
extern struct_3 cgc_g_malloc;\n
\n
int cgc_malloc(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_3 *v1;  // [bp-0x20]\n
    struct_3 *v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    struct struct_1 **v7;  // esi, Other Possible Types: unsigned int\n
    struct_5 *v8;  // eax\n
    struct_3 *v9;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    struct_4 *v12;  // ebp\n
    struct_3 *v13;  // ecx\n
    struct_3 *v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // edx\n
    unsigned int *v16;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v17;  // edx\n
    struct_0 *v18;  // ebx\n
    unsigned int v19;  // edi\n
    unsigned int *v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21;  // ebp\n
    unsigned int v22[4];  // edi\n
    unsigned int v23[4];  // ebx\n
    struct_0 *v24;  // edi\n
    struct_1 *v25;  // ecx\n
    struct_0 *v26;  // eax\n
    unsigned int v27;  // edx\n
    struct struct_1 **v28;  // edi, Other Possible Types: unsigned int\n
\n
    v6 = v5 + 8;\n
    if (v5 + 8 > 65535)\n
    {\n
        v0 = &v4;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v4);\n
            v8->field_4 = v8->field_4 & 252 | 2;\n
            v8->field_0 = v6;\n
            return &v8[1].field_0 + 3;\n
        }\n
        return 0;\n
    }\n
    else\n
    {\n
        v1 = &cgc_g_malloc.field_0;\n
        v7 = &__bss_start;\n
        v14 = -1;\n
        do\n
        {\n
            v14 += 1;\n
            v7 += 4;\n
        } while (v6 > 32 << (v14 & 31));\n
        v2 = v14;\n
        v9 = v14;\n
        if (v14 <= 12)\n
        {\n
            while (!(&v1->field_0)[v9])\n
            {\n
                v9 += 1;\n
                if (v9 == 13)\n
                    goto LABEL_40158d;\n
            }\n
        }\n
        else if (v14 == 13)\n
        {\n
LABEL_40158d:\n
            v0 = &v3;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v11 = *(&v3);\n
            v12 = v11 + 131071 & -0x20000;\n
            if ((v11 + 131071 & -0x20000) != v11)\n
                cgc_deallocate(v11);\n
            cgc_deallocate(v12 + 0x2000);\n
            v12->field_0 = 0x20000;\n
            v12->field_4 = v12->field_4 & 252 | 1;\n
            v13 = v1;\n
            v12->field_8 = v13->field_30;\n
            v12->field_c = 0;\n
            v13->field_30 = v12;\n
            v9 = 12;\n
            v14 = v2;\n
        }\n
        if (v9 > v14)\n
        {\n
            v15 = v1;\n
            v16 = v15 + v9 * 4;\n
            v17 = *((v15 + v9 * 4));\n
            do\n
            {\n
                v18 = v17->field_8;\n
                if (v18)\n
                    v18->field_c = v17->field_c;\n
                v19 = v17->field_c;\n
                v20 = v19 + 8;\n
                if (!v19)\n
                    v20 = v16;\n
                *(v20) = v18;\n
                v17->field_8 = 0;\n
                v17->field_c = 0;\n
                v21 = v17->field_4;\n
                v22 = v17->field_0 >> 1;\n
                v17->field_0 = v22;\n
                v23 = v22 ^ v17;\n
                v23[1] = v21;\n
                v23[0] = v22;\n
                v23[3] = 0;\n
                v23[2] = 0;\n
                v17->field_c = 0;\n
                v17->field_8 = &v23[0];\n
                v23[3] = v17;\n
                v24 = *(&v1->padding_4[4 * v9]);\n
                v23[2] = v24;\n
                if (v24)\n
                    v24->field_c = v23;\n
                *(&v1->padding_4[4 * v9]) = v17;\n
                v16 -= 4;\n
                v9 -= 1;\n
            } while (v9 > v2);\n
        }\n
        v25 = *(v7);\n
        v26 = v25->field_8;\n
        if (v26)\n
            v26->field_c = v25->field_c;\n
        v27 = v25->field_c;\n
        v28 = v27 + 8;\n
        if (!v27)\n
            v28 = v7;\n
        *(v28) = v26;\n
        v25->field_8 = 0;\n
        v25->field_c = 0;\n
        v25->field_4 = v25->field_4 & 254;\n
        return &v25->field_8;\n
    }\n
}\n
", "4199986:sub_401632": null, "4200185:sub_4016f9": null, "4200192:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_malloc_size(struct_0 *v0)\n
{\n
    return v0[2].field_-8 - 8;\n
}\n
", "4200203:sub_40170b": null, "4200208:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4200265:sub_401749": null, "4200272:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4200402:sub_4017d2": null, "4200416:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    char *v2;  // eax\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // esi\n
    char *v7;  // esi\n
    unsigned int v8;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 7;\n
    v5 = 0;\n
    if (v1 - 1 >= 7)\n
    {\n
        v5 = 0;\n
        do\n
        {\n
            v2[v5] = v3;\n
            v2[1 + v5] = v3;\n
            v2[2 + v5] = v3;\n
            v2[3 + v5] = v3;\n
            v2[4 + v5] = v3;\n
            v2[5 + v5] = v3;\n
            v2[6 + v5] = v3;\n
            v2[7 + v5] = v3;\n
            v5 += 8;\n
        } while ((v1 & -8) != v5);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v5];\n
    v8 = 0;\n
    do\n
    {\n
        v7[v8] = v3;\n
        v8 += 1;\n
    } while (v4 != v8);\n
    return v0;\n
}\n
", "4200526:sub_40184e": null, "4200528:cgc_writeall": "int cgc_writeall(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    v3 = a0;\n
    v4 = a1 + v3;\n
    while (true)\n
    {\n
        if (v3 == v4)\n
            return v4 - a0;\n
        v5 = v3;\n
        v6 = v4 - v3;\n
        v0 = &v1;\n
        if (cgc_transmit(v2, a0, v6))\n
            return v5 - a0;\n
        v7 = *(&v1);\n
        v3 = v5 + v7;\n
        if (!v7)\n
            return v5 - a0;\n
    }\n
}\n
", "4200637:sub_4018bd": null, "4200640:cgc_fdprintf": "int cgc_fdprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = v4;\n
    v1 = &v3;\n
    v0 = &v3;\n
    return cgc__printf(a0);\n
}\n
", "4200692:sub_4018f4": null, "4200704:cgc__printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__printf(unsigned int v15, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x64]\n
    int tmp_12;  // tmp #12\n
    int tmp_9;  // tmp #9\n
    int tmp_43;  // tmp #43\n
    unsigned int v1;  // [bp-0x5c], Other Possible Types: char\n
    unsigned int v2;  // [bp-0x58]\n
    unsigned int v3;  // [bp-0x54]\n
    unsigned int v4;  // [bp-0x50]\n
    unsigned int v5;  // [bp-0x4c]\n
    unsigned int v6;  // [bp-0x48]\n
    unsigned int v7;  // [bp-0x44]\n
    unsigned int v8;  // [bp-0x40]\n
    unsigned int v9;  // [bp-0x3c]\n
    unsigned int v10;  // [bp-0x38]\n
    unsigned int v11;  // [bp-0x34]\n
    char v12;  // [bp-0x12]\n
    char v13;  // [bp-0x11]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // ebx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // ebp\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v37;  // esi\n
    unsigned int v39;  // ebx\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // edi\n
    unsigned int v42;  // edi\n
    unsigned int v43;  // ebp\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // ecx\n
    unsigned int v46;  // esi\n
    unsigned int v47;  // ebp\n
    unsigned int v48;  // eax\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // eax\n
    unsigned int v51;  // ebx\n
    unsigned int v52;  // ebx\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // ebx\n
    unsigned int v55;  // eax\n
    unsigned int v56;  // eax\n
\n
    v14 = v16;\n
    v5 = v17;\n
    v47 = v18;\n
    v22 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v21 = v15;\n
    v2 = 0;\n
    v45 = \" \";\n
    v11 = \" \";\n
    v1 = 0;\n
    v20 = 0;\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = v47;\n
    while (true)\n
    {\n
        if (*(v21) != 37)\n
        {\n
            if (*(v21))\n
            {\n
                if (!v20)\n
                    v20 = v21;\n
                v8 = v20;\n
                v15 = v21 + 1;\n
                *(&v20) = v1;\n
                goto LABEL_401965;\n
            }\n
            else\n
            {\n
                if (!v20)\n
                    return v2;\n
                tmp_2 = v21;\n
                v55 = v21 - v20;\n
                if (tmp_2 != v20)\n
                {\n
                    v0 = v55;\n
                    v56 = v47(v5, v20);\n
                    if (v56 >= 0)\n
                    {\n
                        v2 += v56;\n
                        return v2;\n
                    }\n
                    goto LABEL_401e9d;\n
                }\n
            }\n
        }\n
        if (v20 && v21 != v20)\n
        {\n
            v0 = v21 - v20;\n
            v19 = v47(v5, v20);\n
            if (v19 < 0)\n
                goto LABEL_401e9d;\n
            v2 += v19;\n
            if (v19 < v0)\n
                return v2;\n
            v21 = v15;\n
            v22 = v3;\n
        }\n
        v23 = v21 + 1;\n
        v15 = v23;\n
        if (*((v21 + 1)) == 37)\n
        {\n
            v0 = 1;\n
            v24 = v47(v5, v23);\n
            v2 += v24;\n
            tmp_12 = v24;\n
            v49 = (!v24) * 9;\n
            v45 = 8;\n
            if (tmp_12 < 0)\n
                v49 = 8;\n
            if (!v49)\n
            {\n
                v15 += 1;\n
                v8 = 0;\n
                *(&v20) = v1;\n
                goto LABEL_401961;\n
            }\n
            v27 = v3;\n
            v45 = v1;\n
            if (!(v49 == 2))\n
                goto LABEL_401e98;\n
            goto LABEL_401e2c;\n
        }\n
        v9 = v11;\n
        if (*((v21 + 1)) == 48)\n
        {\n
            v25 = v21 + 2;\n
            do\n
            {\n
                v15 = v25;\n
                tmp_9 = *(v25);\n
                v25 += 1;\n
            } while (tmp_9 == 48);\n
            v26 = v25 - 1;\n
            v9 = v22 - 8216;\n
            v23 = v26;\n
        }\n
        v0 = 10;\n
        v28 = cgc_strtoul(v23, &v15);\n
        v29 = v15;\n
        *(&v20) = *(v29);\n
        v30 = *(v29);\n
        if (v30 == 72)\n
        {\n
LABEL_401a48:\n
            v15 = v29 + 1;\n
            *(&v20) = *((v29 + 1));\n
            v29 = v15;\n
            goto LABEL_401a9f;\n
        }\n
        else\n
        {\n
            if (v30 == 108)\n
                goto LABEL_401a48;\n
            if (v30 == 104)\n
                goto LABEL_401a48;\n
            *(&v20) = v20;\n
            *(&v20) = v1;\n
LABEL_401a9f:\n
            v8 = 0;\n
            v45 = v20 - 88;\n
            v31 = v3;\n
            switch (v45)\n
            {\n
            case 0: case 23: case 29: case 32:\n
                v32 = (v20 != 111) * 8 + 8;\n
                if (v20 == 117)\n
                    v32 = 10;\n
                v45 = *(v4);\n
                if (v20 != 72)\n
                {\n
                    v6 = v28;\n
                    if (!v45)\n
                        goto LABEL_401bf2;\n
                }\n
                else\n
                {\n
                    v6 = v28;\n
                    if (!v45)\n
                    {\n
LABEL_401bf2:\n
                        v13 = 48;\n
                        v46 = 1;\n
                        v4 += 4;\n
                        v47 = v7;\n
                        if (v6 > 1)\n
                        {\n
                            v0 = 1;\n
                            v50 = v47(v5, v9);\n
                            v2 += v50;\n
                            tmp_12 = v50;\n
                            v49 = (!v50) * 9;\n
                            v45 = 8;\n
                            if (tmp_12 < 0)\n
                                v49 = 8;\n
                            if (!v49)\n
                            {\n
                                v6 -= 1;\n
                                if (!(v6 <= v46))\n
                                    continue;\n
                            }\n
                            else\n
                            {\n
                                *(&v45) = v1;\n
                                v52 = v3;\n
                                if (!(v49 == 2))\n
                                    goto LABEL_401e98;\n
                                goto LABEL_401e2c;\n
                            }\n
                        }\n
LABEL_401baf:\n
                        v0 = v46;\n
                        goto LABEL_401da0;\n
                    }\n
                }\n
                v39 = v31 - 8195;\n
                if (v20 == 88)\n
                    v39 = v31 - 8212;\n
                v13 = *((v39 + ((0 CONCAT v45) /m v32 >> 32)));\n
                v46 = 1;\n
                if (v45 >= v32)\n
                {\n
                    v46 = 1;\n
                    v41 = &v13;\n
                    do\n
                    {\n
                        v46 += 1;\n
                        v45 = (0 CONCAT v45) /m v32;\n
                        *((v41 - 1)) = *((v39 + ((0 CONCAT v45) /m v32 >> 32)));\n
                        v41 = &v12;\n
                    } while (v45 >= v32);\n
                }\n
                v4 += 4;\n
                v47 = v7;\n
                if (!(v6 <= v46))\n
                    continue;\n
                goto LABEL_401baf;\n
            case 12: case 17:\n
                v33 = *(v4);\n
                v6 = v28;\n
                if (v20 == 72)\n
                {\n
                    v33 = v33;\n
                }\n
                else if (v20 == 104)\n
                {\n
                    v33 = v33;\n
                }\n
                v37 = -(v33);\n
                if (!(v33) < 0)\n
                    v37 = v33;\n
                v10 = v33;\n
                if (v37)\n
                {\n
                    v13 = *((v3 + v37 - (v37 * 3435973837 >> 32 >> 2 & -2) * 5 - 8195));\n
                    v43 = 1;\n
                    v45 = 3435973837;\n
                    v42 = &v13;\n
                    if (v37 >= 10)\n
                    {\n
                        v43 = 1;\n
                        v42 = &v13;\n
                        do\n
                        {\n
                            v40 = v37 * 3435973837 >> 32 >> 3;\n
                            *((v42 - 1)) = *((v3 + v40 - ((v37 * 3435973837 >> 32 >> 3) * 3435973837 >> 32 >> 2 & -2) * 5 - 8195));\n
                            v43 += 1;\n
                            v42 = &v12;\n
                            tmp_43 = v37;\n
                            v37 = v40;\n
                            v45 = 3435973837;\n
                        } while (tmp_43 > 99);\n
                    }\n
                    if (v10 - 0 < 0)\n
                        goto LABEL_401de4;\n
                }\n
                else\n
                {\n
                    v13 = 48;\n
                    v43 = 1;\n
                    v42 = &v13;\n
                    if (v10 < 0)\n
                    {\n
LABEL_401de4:\n
                        *((v42 - 1)) = 45;\n
                        v43 += 1;\n
                        v44 = v6;\n
                        v4 += 4;\n
                        if (v44 > v43)\n
                        {\n
                            v0 = 1;\n
                            v48 = v7(v5, v9);\n
                            v2 += v48;\n
                            tmp_12 = v48;\n
                            v49 = (!v48) * 9;\n
                            v45 = 8;\n
                            if (tmp_12 < 0)\n
                                v49 = 8;\n
                            if (!v49)\n
                            {\n
                                v44 -= 1;\n
                                if (!(v44 <= v43))\n
                                    continue;\n
                            }\n
                            else\n
                            {\n
                                *(&v45) = v1;\n
                                v51 = v3;\n
                                v47 = v7;\n
                                if (v49 != 2)\n
                                {\n
LABEL_401e98:\n
                                    if (v49 != 8)\n
                                        return v2;\n
LABEL_401e9d:\n
                                    v2 = -1;\n
                                    return v2;\n
                                }\n
LABEL_401e2c:\n
                                v8 = 0;\n
                                *(&v20) = v45;\n
                                goto LABEL_401965;\n
                            }\n
                        }\n
LABEL_401d8d:\n
                        if (v43)\n
                        {\n
                            v0 = v43;\n
                            v46 = v43;\n
                            v47 = v7;\n
                        }\n
                        else\n
                        {\n
                            *(&v20) = v1;\n
                            v47 = v7;\n
                            v15 += 1;\n
LABEL_401961:\n
                            v54 = v3;\n
                            goto LABEL_401965;\n
                        }\n
LABEL_401da0:\n
                        v53 = v47(v15, a0);\n
                        *(&v20) = v1;\n
                        if (v53 >= 0)\n
                        {\n
                            v2 += v53;\n
                            if (v53 < v46)\n
                                return v2;\n
                            v15 += 1;\n
                            break;\n
                            break;\n
                        }\n
                    }\n
                }\n
                v44 = v6;\n
                v4 += 4;\n
                if (!(v44 <= v43))\n
                    continue;\n
                goto LABEL_401d8d;\n
            case 22:\n
                v45 = *(v4);\n
                if (v20 == 72)\n
                {\n
                    *(v45) = v2;\n
                    v29 = v15;\n
                }\n
                else\n
                {\n
                    if (v20 != 104)\n
                        *(v45) = v2;\n
                    else\n
                        *(v45) = v2;\n
                    *(&v20) = v1;\n
                }\n
                v4 += 4;\n
                v15 = v29 + 1;\n
                goto LABEL_401965;\n
            case 27:\n
                v34 = cgc_strlen();\n
                if (v34)\n
                {\n
                    v0 = v34;\n
                    v36 = v47(v5, *(v4));\n
                    if (v36 < 0)\n
                        goto LABEL_401e9d;\n
                    v2 += v36;\n
                    if (v36 < v34)\n
                        return v2;\n
                }\n
                v4 += 4;\n
                v15 += 1;\n
                break;\n
            default:\n
LABEL_401965:\n
                v21 = v15;\n
                *(&v45) = v20;\n
                v1 = v45;\n
                v20 = v8;\n
                continue;\n
            }\n
        }\n
    }\n
}\n
", "4200856:sub_401998": null, "4202161:sub_401eb1": null, "4202176:_consumer_fd": "int _consumer_fd(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    v3 = a0;\n
    v4 = a1 + v3;\n
    while (true)\n
    {\n
        if (v3 != v4)\n
        {\n
            v5 = v3;\n
            v6 = v4 - v3;\n
            v0 = &v1;\n
            if (cgc_transmit(v2, a0, v6))\n
                return v5 - a0;\n
            v7 = *(&v1);\n
            v3 = v5 + v7;\n
            if (!v7)\n
                return v5 - a0;\n
        }\n
        else\n
        {\n
            return v4 - a0;\n
        }\n
    }\n
}\n
", "4202285:sub_401f2d": null, "4202288:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_sprintf(unsigned int v1)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp+0x8]\n
    char v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v0 = v4;\n
    v0 = &v3;\n
    return cgc__printf(*(&v2), &v3);\n
}\n
", "4202340:sub_401f64": null, "4202352:cgc__consumer_string": "int cgc__consumer_string(struct struct_0 **v1, char *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
    char *v3;  // esi\n
    struct struct_0 **v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = v1;\n
    cgc_memcpy(*(v4), a0, v3);\n
    v5 = *(v4);\n
    *(v4) = &v3[v5];\n
    v3[v5] = 0;\n
    return a1;\n
}\n
", "4202410:sub_401faa": null, "4202416:cgc_vsnprintf": "int cgc_vsnprintf(unsigned int v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
        return 0;\n
    v0 = v2;\n
    v1 = v3 - 1;\n
    return cgc__printf(a1, a2);\n
}\n
", "4202499:sub_402003": null, "4202512:cgc__consumer_string_checked": "int cgc__consumer_string_checked(struct struct_0 *v0[2], char *a0, char *a1)\n
{\n
    struct struct_0 *v1[2];  // edi\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    v2 = a1;\n
    if (v2 < v2)\n
        v2 = v1[1];\n
    if (v2)\n
    {\n
        cgc_memcpy(v1[0], a0, v2);\n
        v3 = v1[0];\n
        v1[0] = v3 + v2;\n
        *((v3 + v2)) = 0;\n
        v1[1] = &(v1[1])[-1 * v2];\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4202585:sub_402059": null, "4202592:cgc_snprintf": "int cgc_snprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v4;  // [bp+0x10]\n
    unsigned int v5;  // ecx\n
\n
    v5 = a0;\n
    v0 = &v4;\n
    if (v5)\n
    {\n
        v1 = v3;\n
        v2 = v5 - 1;\n
        return cgc__printf(a1, v0);\n
    }\n
    return 0;\n
}\n
", "4202685:sub_4020bd": null, "4202688:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!a0)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        if (!v2)\n
            return cgc_malloc(v1);\n
        v3 = v2[2].field_-8;\n
        if (v3 >> 1 < v1 && !(v3 - 8 <= v1))\n
            goto LABEL_402134;\n
        v4 = cgc_malloc(v1);\n
        if (v4)\n
        {\n
            v5 = v4;\n
            v6 = v2[2].field_-8 - 8;\n
            if (v6 > v1)\n
                v6 = v1;\n
            cgc_memcpy(v5, v2, v6);\n
            cgc_free(v2);\n
            v2 = v5;\n
            goto LABEL_402134;\n
        }\n
    }\n
    v2 = 0;\n
LABEL_402134:\n
    return v2;\n
}\n
", "4202824:sub_402148": null, "4202832:cgc_strchr": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strchr(unsigned int v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0 - 1;\n
    while (true)\n
    {\n
        v2 = *((v1 + 1));\n
        v1 += 1;\n
        if (!v2)\n
            break;\n
        if (v2 == a0)\n
            break;\n
    }\n
    if (v2)\n
        return v1;\n
    return 0;\n
}\n
", "4202871:sub_402177": null, "4202880:cgc_strcmp": "int cgc_strcmp(char *v0, unsigned int a0)\n
{\n
    char *v1;  // esi\n
    char v2;  // dl\n
    char v3;  // bl\n
    char *v4;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        do\n
        {\n
            v3 = *((a0 + v4));\n
            if (!v3)\n
                return *((a0 + v4)) - v2;\n
            if (v2 != v3)\n
                return *((a0 + v4)) - v2;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
        } while (v2);\n
    }\n
    return *((a0 + v4)) - 0;\n
}\n
", "4202950:sub_4021c6": null, "4202960:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        do\n
        {\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4203013:sub_402205": null, "4203024:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4203051:sub_40222b": null, "4203056:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, unsigned int a0)\n
{\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // esi\n
    unsigned int v3;  // al, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    struct_1 *v6;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v6 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v5 = cgc_strchr(a0, v3);\n
            if (v5)\n
            {\n
                v1 = v0;\n
                v6 = 0;\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v6 = v4;\n
                    goto LABEL_40229c;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v6 = 0;\n
    }\n
LABEL_40229c:\n
    *(v1) = v6;\n
    return v2;\n
}\n
", "4203176:sub_4022a8": null, "4203184:cgc_strtol": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strtol(struct_0 *v4, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // edi\n
    char v6;  // ecx\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    struct_0 *v9;  // esi, Other Possible Types: unsigned int\n
    unsigned int v10;  // cc_dep1\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // cc_dep1\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v14;  // ebp\n
    unsigned int v15;  // edx\n
    struct_0 *v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // eax\n
    unsigned int *v20;  // eax\n
\n
    v5 = a1;\n
    if (v5)\n
    {\n
        v6 = v5 - 37;\n
        if (v6 < -35)\n
            return 0;\n
    }\n
    v9 = v4;\n
    *(&v7) = v9->field_-1;\n
    v6 = 1;\n
    *(&v1) = v6;\n
    if (v9->field_-1)\n
    {\n
        v9 = &v9->field_0;\n
        while (true)\n
        {\n
            v8 = cgc_isspace(v7);\n
            if (v8)\n
            {\n
                v7 = *(v9);\n
                v9 += 1;\n
                if (!v7)\n
                    goto LABEL_402320;\n
            }\n
            else\n
            {\n
                if (*((v9 - 1)) == 43)\n
                    break;\n
                if (*((v9 - 1)) == 45)\n
                {\n
                    v1 = 0;\n
                    break;\n
                }\n
LABEL_402320:\n
                v9 -= 1;\n
                break;\n
            }\n
        }\n
    }\n
    if (!(v5 & -17))\n
    {\n
        if (*(v9) != 48)\n
        {\n
            v10 = v5;\n
            v11 = 10;\n
        }\n
        else if (*((v9 + 1)) == 120)\n
        {\n
            v9 += 2;\n
            v0 = 16;\n
            goto LABEL_40235a;\n
        }\n
        else\n
        {\n
            v12 = v5;\n
            v11 = 8;\n
        }\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
            v5 = v11;\n
    }\n
    v0 = v5;\n
LABEL_40235a:\n
    v13 = 0;\n
    v2 = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n
    v14 = v2;\n
    while (true)\n
    {\n
        v15 = v13;\n
        v16 = v9;\n
        v17 = *(v9);\n
        if (!v17)\n
            break;\n
        v3 = v13;\n
        v18 = v0;\n
        v19 = cgc_memchr(v14, cgc_tolower(v17), v18);\n
        v15 = v3;\n
        v13 = v18 * v15 - v14 + v19;\n
        v9 = &v16->field_0;\n
        if (!v19)\n
            break;\n
    }\n
    v20 = a0;\n
    if (v20)\n
        *(v20) = v9;\n
    if (!v1)\n
        return -(v15);\n
    return v15;\n
}\n
", "4203469:sub_4023cd": null, "4203472:cgc_strtoul": "int cgc_strtoul(void* v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4203513:sub_4023f9": null, "4203520:cgc_bitwriter_output": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_bitwriter_output(struct_1 *v1, unsigned int a0, char a1)\n
{\n
    int tmp_9;  // tmp #9\n
    unsigned int v0;  // [bp-0x1c]\n
    char v2;  // cl\n
    unsigned int v3;  // ecx\n
    struct_1 *v4;  // ebp\n
    char v5;  // cl\n
    unsigned int v6;  // esi\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v7 = v3;\n
    *(&v7) = v7 - 33;\n
    if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, al<1>), 0xe0<32>, 0x0<32>))\n
        return v7;\n
    v6 = 1 << (v3 - 1 & 31);\n
    v4 = v1;\n
    *(&v7) = v1->field_4;\n
    v5 = v1[1].field_0;\n
    do\n
    {\n
        v5 = v5 * 2 | (a0 & v6);\n
        *(&v4[1].field_0) = v5;\n
        *(&v7) = v7 + 1;\n
        v4->field_4 = *(&v7);\n
        if (*(&v7) == 8)\n
        {\n
            v0 = v5;\n
            v4->field_0();\n
            *(&v4->field_4) = 0;\n
            v7 = 0;\n
            v5 = 0;\n
        }\n
        tmp_9 = v6;\n
        v6 /= 2;\n
    } while (tmp_9 > 1);\n
    return v7;\n
}\n
", "4203585:sub_402441": null, "4203653:sub_402485": null, "4203664:cgc_bitwriter_flush": "typedef struct struct_1 {\n
    struct struct_0 *field_0;\n
    char field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_bitwriter_flush(struct_1 *v1, char a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    int tmp_3;  // tmp #3\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // esi\n
    char v4;  // cl\n
    char v6;  // al\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ecx\n
\n
    v0 = v2;\n
    v3 = v1;\n
    v4 = v3->field_4;\n
    if (!v3->field_4)\n
        return v2;\n
    v6 = v3[1].field_0;\n
    v7 = v8;\n
    while (true)\n
    {\n
        v6 = v6 * 2 | a0;\n
        *(&v7) = v7 + 1;\n
        if (v8 == 255)\n
        {\n
            *(&v3[1].field_0) = v6;\n
            v3->field_4 = v7;\n
            return eax<4>;\n
        }\n
        tmp_3 = v8;\n
        v8 = v7;\n
        if (tmp_3 == 7)\n
        {\n
            *(&v3[1].field_0) = v6;\n
            v3->field_4 = v7;\n
            v0 = eax<4>;\n
            v2 = v3->field_0();\n
            *(&v3->field_4) = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4203769:sub_4024f9": null, "4203776:cgc_idct": "int cgc_idct(unsigned short v68[64], char a0[64], char a1[64])\n
{\n
    unsigned int v0;  // [bp-0x11c]\n
    unsigned int v1;  // [bp-0x118]\n
    unsigned int v2;  // [bp-0x114]\n
    unsigned int v3;  // [bp-0x110]\n
    unsigned int v4;  // [bp-0x10c]\n
    unsigned int v5;  // [bp-0x108]\n
    unsigned int v6;  // [bp-0x104]\n
    unsigned int v7;  // [bp-0x100]\n
    unsigned int v8;  // [bp-0xfc]\n
    unsigned int v9;  // [bp-0xf8]\n
    unsigned int v10;  // [bp-0xf4]\n
    unsigned int v11;  // [bp-0xf0]\n
    unsigned int v12;  // [bp-0xec]\n
    unsigned int v13;  // [bp-0xe8]\n
    unsigned int v14;  // [bp-0xe4]\n
    unsigned int v15;  // [bp-0xe0]\n
    unsigned int v16;  // [bp-0xdc]\n
    unsigned int v17;  // [bp-0xd8]\n
    unsigned int v18;  // [bp-0xd4]\n
    unsigned int v19;  // [bp-0xd0]\n
    unsigned int v20;  // [bp-0xcc]\n
    unsigned int v21;  // [bp-0xc8]\n
    unsigned int v22;  // [bp-0xc4]\n
    unsigned int v23;  // [bp-0xc0]\n
    unsigned int v24;  // [bp-0xbc]\n
    unsigned int v25;  // [bp-0xb8]\n
    unsigned int v26;  // [bp-0xb4]\n
    unsigned int v27;  // [bp-0xb0]\n
    unsigned int v28;  // [bp-0xac]\n
    unsigned int v29;  // [bp-0xa8]\n
    unsigned int v30;  // [bp-0xa4]\n
    unsigned int v31;  // [bp-0xa0]\n
    unsigned int v32;  // [bp-0x9c]\n
    unsigned int v33;  // [bp-0x98]\n
    unsigned int v34;  // [bp-0x94]\n
    unsigned int v35;  // [bp-0x90]\n
    unsigned int v36;  // [bp-0x8c]\n
    unsigned int v37;  // [bp-0x88]\n
    unsigned int v38;  // [bp-0x84]\n
    unsigned int v39;  // [bp-0x80]\n
    unsigned int v40;  // [bp-0x7c]\n
    unsigned int v41;  // [bp-0x78]\n
    unsigned int v42;  // [bp-0x74]\n
    unsigned int v43;  // [bp-0x70]\n
    unsigned int v44;  // [bp-0x6c]\n
    unsigned int v45;  // [bp-0x68]\n
    unsigned int v46;  // [bp-0x64]\n
    unsigned int v47;  // [bp-0x60]\n
    unsigned int v48;  // [bp-0x5c]\n
    unsigned int v49;  // [bp-0x58]\n
    unsigned int v50;  // [bp-0x54]\n
    unsigned int v51;  // [bp-0x50]\n
    unsigned int v52;  // [bp-0x4c]\n
    unsigned int v53;  // [bp-0x48]\n
    unsigned int v54;  // [bp-0x44]\n
    unsigned int v55;  // [bp-0x40]\n
    unsigned int v56;  // [bp-0x3c]\n
    unsigned int v57;  // [bp-0x38]\n
    unsigned int v58;  // [bp-0x34]\n
    unsigned int v59;  // [bp-0x30]\n
    unsigned int v60;  // [bp-0x2c]\n
    unsigned int v61;  // [bp-0x28]\n
    unsigned int v62;  // [bp-0x24]\n
    unsigned int v63;  // [bp-0x20]\n
    unsigned int v64;  // [bp-0x1c]\n
    unsigned int v65;  // [bp-0x18]\n
    unsigned int v66;  // [bp-0x14]\n
    unsigned int v67;  // [bp-0x10]\n
    unsigned int v69;  // esi\n
    char v70[64];  // ecx\n
    unsigned short v71[64];  // edx\n
    unsigned int v73;  // ecx\n
    unsigned int v74;  // esi\n
    unsigned int v75;  // eax\n
    unsigned int v76;  // edx\n
    unsigned int v77;  // edi\n
    unsigned int v78;  // ebx\n
    unsigned int v79;  // esi\n
    unsigned int v80;  // edi\n
    unsigned int v81;  // ebp\n
    unsigned int v82;  // ebx\n
    unsigned int v83;  // esi\n
    unsigned int v84;  // eax\n
    unsigned int v86;  // ebp\n
    unsigned int v87;  // edx\n
    unsigned int v93;  // esi\n
    unsigned int v94;  // ebp\n
    unsigned int v95;  // edx\n
    unsigned int v96;  // edi\n
    unsigned int v97;  // ebp\n
    unsigned int v98;  // esi\n
    unsigned int v99;  // eax\n
    unsigned int v100;  // edx\n
    unsigned int v103;  // edx\n
    unsigned int v104;  // ebp\n
    unsigned int v105;  // edx\n
    unsigned int v106;  // ebx\n
    unsigned int v107;  // edx\n
    unsigned int v108;  // ebx\n
    unsigned int v109;  // edi\n
    unsigned int v110;  // eax\n
    unsigned int v111;  // ebp\n
    unsigned int v112;  // edi\n
    unsigned int v113;  // ebp\n
    unsigned int v114;  // ebx\n
    unsigned int v115;  // eax\n
    unsigned int v117;  // edx\n
    unsigned int v118;  // eax\n
    unsigned int v119;  // ecx\n
    unsigned int v120;  // esi\n
    unsigned int v121;  // edi\n
    unsigned int v122;  // edx\n
    unsigned int v123;  // esi\n
    unsigned int v124;  // ebp\n
    unsigned int v125;  // edi\n
    unsigned int v126;  // edx\n
    unsigned int v127;  // eax\n
    unsigned int v129;  // ebp\n
    unsigned int v130;  // eax\n
    unsigned int v136;  // edx\n
    unsigned int v137;  // ebp\n
    unsigned int v138;  // eax\n
    unsigned int v139;  // esi\n
    unsigned int v140;  // ebp\n
    unsigned int v141;  // edx\n
    unsigned int v142;  // ecx\n
    unsigned int v143;  // eax\n
    unsigned int v146;  // eax\n
    unsigned int v147;  // ebp\n
    unsigned int v148;  // eax\n
    unsigned int v149;  // edi\n
    unsigned int v150;  // eax\n
    unsigned int v151;  // edi\n
    unsigned int v152;  // esi\n
    unsigned int v153;  // ecx\n
    unsigned int v154;  // ebp\n
    unsigned int v155;  // esi\n
    unsigned int v156;  // ebp\n
    unsigned int v157;  // edi\n
    unsigned int v158;  // ecx\n
    unsigned int v160;  // ebx\n
    char v161[64];  // ecx\n
\n
    v67 = v69;\n
    v70 = a1;\n
    v71 = v68;\n
    v3 = v71[0] * v70[0] * 0x400;\n
    v4 = v71[1] * v70[1] * 1138;\n
    v5 = v71[2] * v70[2] * 1730;\n
    v6 = v71[3] * v70[3] * 1609;\n
    v7 = v71[4] * v70[4] * 0x400;\n
    v8 = v71[5] * v70[5] * 1609;\n
    v9 = v71[6] * v70[6] * 1730;\n
    v10 = v71[7] * v70[7] * 1138;\n
    v11 = v71[8] * v70[8] * 1138;\n
    v12 = v71[9] * v70[9] * 1264;\n
    v13 = v71[10] * v70[10] * 1922;\n
    v14 = v71[11] * v70[11] * 1788;\n
    v15 = v71[12] * v70[12] * 1138;\n
    v16 = v71[13] * v70[13] * 1788;\n
    v17 = v71[14] * v70[14] * 1922;\n
    v18 = v71[15] * v70[15] * 1264;\n
    v19 = v71[16] * v70[16] * 1730;\n
    v20 = v71[17] * v70[17] * 1922;\n
    v21 = v71[18] * v70[18] * 2923;\n
    v22 = v71[19] * v70[19] * 2718;\n
    v23 = v71[20] * v70[20] * 1730;\n
    v24 = v71[21] * v70[21] * 2718;\n
    v25 = v71[22] * v70[22] * 2923;\n
    v26 = v71[23] * v70[23] * 1922;\n
    v27 = v71[24] * v70[24] * 1609;\n
    v28 = v71[25] * v70[25] * 1788;\n
    v29 = v71[26] * v70[26] * 2718;\n
    v30 = v71[27] * v70[27] * 2528;\n
    v31 = v71[28] * v70[28] * 1609;\n
    v32 = v71[29] * v70[29] * 2528;\n
    v33 = v71[30] * v70[30] * 2718;\n
    v34 = v71[31] * v70[31] * 1788;\n
    v35 = v71[32] * v70[32] * 0x400;\n
    v36 = v71[33] * v70[33] * 1138;\n
    v37 = v71[34] * v70[34] * 1730;\n
    v38 = v71[35] * v70[35] * 1609;\n
    v39 = v71[36] * v70[36] * 0x400;\n
    v40 = v71[37] * v70[37] * 1609;\n
    v41 = v71[38] * v70[38] * 1730;\n
    v42 = v71[39] * v70[39] * 1138;\n
    v43 = v71[40] * v70[40] * 1609;\n
    v44 = v71[41] * v70[41] * 1788;\n
    v45 = v71[42] * v70[42] * 2718;\n
    v46 = v71[43] * v70[43] * 2528;\n
    v47 = v71[44] * v70[44] * 1609;\n
    v48 = v71[45] * v70[45] * 2528;\n
    v49 = v71[46] * v70[46] * 2718;\n
    v50 = v71[47] * v70[47] * 1788;\n
    v51 = v71[48] * v70[48] * 1730;\n
    v52 = v71[49] * v70[49] * 1922;\n
    v53 = v71[50] * v70[50] * 2923;\n
    v54 = v71[51] * v70[51] * 2718;\n
    v55 = v71[52] * v70[52] * 1730;\n
    v56 = v71[53] * v70[53] * 2718;\n
    v57 = v71[54] * v70[54] * 2923;\n
    v58 = v71[55] * v70[55] * 1922;\n
    v59 = v71[56] * v70[56] * 1138;\n
    v60 = v71[57] * v70[57] * 1264;\n
    v61 = v71[58] * v70[58] * 1922;\n
    v62 = v71[59] * v70[59] * 1788;\n
    v63 = v71[60] * v70[60] * 1138;\n
    v64 = v71[61] * v70[61] * 1788;\n
    v65 = v71[62] * v70[62] * 1922;\n
    v66 = v71[63] * v70[63] * 1264;\n
    v3 += 0x800;\n
    v73 = 0;\n
    do\n
    {\n
        v74 = *((&v4 + v73));\n
        v75 = *((&v6 + v73));\n
        v76 = *((&v8 + v73));\n
        v77 = *((&v10 + v73));\n
        v78 = v77 + v74;\n
        v79 = v74 - v77;\n
        v80 = v79 + v76;\n
        v81 = v78 + v75;\n
        v82 = v78 - v75;\n
        v83 = v79 - v76;\n
        v84 = (v81 >> 9) - v81;\n
        v2 = (v80 >> 1) + (v84 >> 2) - v84;\n
        v1 = ((v80 >> 9) - v80 >> 2) - ((v80 >> 9) - v80 + (v81 >> 1));\n
        v0 = v82;\n
        v86 = (v82 >> 3) - (v82 >> 7);\n
        v87 = (v83 >> 3) - (v83 >> 7);\n
        v93 = v83 - v87 + v86;\n
        v94 = v86 - (v82 >> 11);\n
        v95 = v87 + v86 + (v87 - (v83 >> 11) >> 1);\n
        v96 = *((&v5 + v73));\n
        v97 = v94 >> 1;\n
        v0 -= v95;\n
        v98 = v93 + v97;\n
        v99 = (v96 >> 5) + v96;\n
        v100 = v99 >> 2;\n
        v103 = *((&v9 + v73));\n
        v104 = (v103 >> 5) + v103;\n
        v105 = (v103 >> 4) + v99 - v100;\n
        v106 = v104 >> 2;\n
        v107 = v105 + v106;\n
        v108 = v106 - v104 + (v96 >> 4) + v100;\n
        v109 = *((&v7 + v73));\n
        v110 = v109 + *((&v3 + v73));\n
        v111 = *((&v3 + v73)) - v109;\n
        v112 = v108 + *((&v3 + v73)) - v109;\n
        v113 = v111 - v108;\n
        v114 = v107 + v110;\n
        v115 = v110 - v107;\n
        *((&v3 + v73)) = v2 + v114;\n
        *((&v4 + v73)) = v98 + v112;\n
        *((&v5 + v73)) = v0 + v113;\n
        *((&v6 + v73)) = v1 + v115;\n
        *((&v7 + v73)) = v115 - v1;\n
        *((&v8 + v73)) = v113 - v0;\n
        *((&v9 + v73)) = v112 - v98;\n
        *((&v10 + v73)) = v114 - v2;\n
        v73 += 32;\n
    } while (v73 != 0x100);\n
    v160 = -32;\n
    do\n
    {\n
        v117 = *((&v19 + v160));\n
        v118 = *((&v35 + v160));\n
        v119 = *((&v51 + v160));\n
        v120 = *((&v67 + v160));\n
        v121 = v120 + v117;\n
        v122 = v117 - v120;\n
        v123 = v122 + v119;\n
        v124 = v121 + v118;\n
        v125 = v121 - v118;\n
        v126 = v122 - v119;\n
        v127 = (v124 >> 9) - v124;\n
        v2 = (v123 >> 1) + (v127 >> 2) - v127;\n
        v1 = ((v123 >> 9) - v123 >> 2) - ((v123 >> 9) - v123 + (v124 >> 1));\n
        v0 = v125;\n
        v129 = (v125 >> 3) - (v125 >> 7);\n
        v130 = (v126 >> 3) - (v126 >> 7);\n
        v136 = v126 - v130 + v129;\n
        v137 = v129 - (v125 >> 11);\n
        v138 = v130 + v129 + (v130 - (v126 >> 11) >> 1);\n
        v139 = *((&v27 + v160));\n
        v140 = v137 >> 1;\n
        v0 -= v138;\n
        v141 = v136 + v140;\n
        v142 = (v139 >> 5) + v139;\n
        v143 = v142 >> 2;\n
        v146 = *((&v59 + v160));\n
        v147 = (v146 >> 5) + v146;\n
        v148 = (v146 >> 4) + v142 - v143;\n
        v149 = v147 >> 2;\n
        v150 = v148 + v149;\n
        v151 = v149 - v147 + (v139 >> 4) + v143;\n
        v152 = *((&v43 + v160));\n
        v153 = v152 + *((&v11 + v160));\n
        v154 = *((&v11 + v160)) - v152;\n
        v155 = v151 + *((&v11 + v160)) - v152;\n
        v156 = v154 - v151;\n
        v157 = v150 + v153;\n
        v158 = v153 - v150;\n
        *((&v11 + v160)) = v2 + v157;\n
        *((&v19 + v160)) = v141 + v155;\n
        *((&v27 + v160)) = v0 + v156;\n
        *((&v35 + v160)) = v1 + v158;\n
        *((&v43 + v160)) = v158 - v1;\n
        *((&v51 + v160)) = v156 - v0;\n
        *((&v59 + v160)) = v155 - v141;\n
        *((&v67 + v160)) = v157 - v2;\n
        v160 += 4;\n
    } while (true);\n
    v161 = a0;\n
    v161[0] = v3 >> 13;\n
    v161[1] = v4 >> 13;\n
    v161[2] = v5 >> 13;\n
    v161[3] = v6 >> 13;\n
    v161[4] = v7 >> 13;\n
    v161[5] = v8 >> 13;\n
    v161[6] = v9 >> 13;\n
    v161[7] = v10 >> 13;\n
    v161[8] = v11 >> 13;\n
    v161[9] = v12 >> 13;\n
    v161[10] = v13 >> 13;\n
    v161[11] = v14 >> 13;\n
    v161[12] = v15 >> 13;\n
    v161[13] = v16 >> 13;\n
    v161[14] = v17 >> 13;\n
    v161[15] = v18 >> 13;\n
    v161[16] = v19 >> 13;\n
    v161[17] = v20 >> 13;\n
    v161[18] = v21 >> 13;\n
    v161[19] = v22 >> 13;\n
    v161[20] = v23 >> 13;\n
    v161[21] = v24 >> 13;\n
    v161[22] = v25 >> 13;\n
    v161[23] = v26 >> 13;\n
    v161[24] = v27 >> 13;\n
    v161[25] = v28 >> 13;\n
    v161[26] = v29 >> 13;\n
    v161[27] = v30 >> 13;\n
    v161[28] = v31 >> 13;\n
    v161[29] = v32 >> 13;\n
    v161[30] = v33 >> 13;\n
    v161[31] = v34 >> 13;\n
    v161[32] = v35 >> 13;\n
    v161[33] = v36 >> 13;\n
    v161[34] = v37 >> 13;\n
    v161[35] = v38 >> 13;\n
    v161[36] = v39 >> 13;\n
    v161[37] = v40 >> 13;\n
    v161[38] = v41 >> 13;\n
    v161[39] = v42 >> 13;\n
    v161[40] = v43 >> 13;\n
    v161[41] = v44 >> 13;\n
    v161[42] = v45 >> 13;\n
    v161[43] = v46 >> 13;\n
    v161[44] = v47 >> 13;\n
    v161[45] = v48 >> 13;\n
    v161[46] = v49 >> 13;\n
    v161[47] = v50 >> 13;\n
    v161[48] = v51 >> 13;\n
    v161[49] = v52 >> 13;\n
    v161[50] = v53 >> 13;\n
    v161[51] = v54 >> 13;\n
    v161[52] = v55 >> 13;\n
    v161[53] = v56 >> 13;\n
    v161[54] = v57 >> 13;\n
    v161[55] = v58 >> 13;\n
    v161[56] = v59 >> 13;\n
    v161[57] = v60 >> 13;\n
    v161[58] = v61 >> 13;\n
    v161[59] = v62 >> 13;\n
    v161[60] = v63 >> 13;\n
    v161[61] = v64 >> 13;\n
    v161[62] = v65 >> 13;\n
    v161[63] = v66 >> 13;\n
    return v66 >> 13;\n
}\n
", "4206628:sub_403024": null, "4206640:cgc_dct": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-1c;\n
    unsigned int field_-18;\n
    unsigned int field_-14;\n
    unsigned int field_-10;\n
    unsigned int field_-c;\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dct(char v72[64], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_79;  // tmp #79\n
    struct_1 *v0;  // [bp-0x12c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x128]\n
    unsigned int v2;  // [bp-0x124]\n
    unsigned int v3;  // [bp-0x120]\n
    unsigned int v4;  // [bp-0x11c]\n
    unsigned int v5;  // [bp-0x118]\n
    unsigned int v6;  // [bp-0x114]\n
    unsigned int v7;  // [bp-0x110]\n
    unsigned int v8;  // [bp-0x10c]\n
    unsigned int v9;  // [bp-0x108]\n
    unsigned int v10;  // [bp-0x104]\n
    unsigned int v11;  // [bp-0x100]\n
    unsigned int v12;  // [bp-0xfc]\n
    unsigned int v13;  // [bp-0xf8]\n
    unsigned int v14;  // [bp-0xf4]\n
    unsigned int v15;  // [bp-0xf0]\n
    unsigned int v16;  // [bp-0xec]\n
    unsigned int v17;  // [bp-0xe8]\n
    unsigned int v18;  // [bp-0xe4]\n
    unsigned int v19;  // [bp-0xe0]\n
    unsigned int v20;  // [bp-0xdc]\n
    unsigned int v21;  // [bp-0xd8]\n
    unsigned int v22;  // [bp-0xd4]\n
    unsigned int v23;  // [bp-0xd0]\n
    unsigned int v24;  // [bp-0xcc]\n
    unsigned int v25;  // [bp-0xc8]\n
    unsigned int v26;  // [bp-0xc4]\n
    unsigned int v27;  // [bp-0xc0]\n
    unsigned int v28;  // [bp-0xbc]\n
    unsigned int v29;  // [bp-0xb8]\n
    unsigned int v30;  // [bp-0xb4]\n
    unsigned int v31;  // [bp-0xb0]\n
    unsigned int v32;  // [bp-0xac]\n
    unsigned int v33;  // [bp-0xa8]\n
    unsigned int v34;  // [bp-0xa4]\n
    unsigned int v35;  // [bp-0xa0]\n
    unsigned int v36;  // [bp-0x9c]\n
    unsigned int v37;  // [bp-0x98]\n
    unsigned int v38;  // [bp-0x94]\n
    unsigned int v39;  // [bp-0x90]\n
    unsigned int v40;  // [bp-0x8c]\n
    unsigned int v41;  // [bp-0x88]\n
    unsigned int v42;  // [bp-0x84]\n
    unsigned int v43;  // [bp-0x80]\n
    unsigned int v44;  // [bp-0x7c]\n
    unsigned int v45;  // [bp-0x78]\n
    unsigned int v46;  // [bp-0x74]\n
    unsigned int v47;  // [bp-0x70]\n
    unsigned int v48;  // [bp-0x6c]\n
    unsigned int v49;  // [bp-0x68]\n
    unsigned int v50;  // [bp-0x64]\n
    unsigned int v51;  // [bp-0x60]\n
    unsigned int v52;  // [bp-0x5c]\n
    unsigned int v53;  // [bp-0x58]\n
    unsigned int v54;  // [bp-0x54]\n
    unsigned int v55;  // [bp-0x50]\n
    unsigned int v56;  // [bp-0x4c]\n
    unsigned int v57;  // [bp-0x48]\n
    unsigned int v58;  // [bp-0x44]\n
    unsigned int v59;  // [bp-0x40]\n
    unsigned int v60;  // [bp-0x3c]\n
    unsigned int v61;  // [bp-0x38]\n
    unsigned int v62;  // [bp-0x34]\n
    unsigned int v63;  // [bp-0x30]\n
    unsigned int v64;  // [bp-0x2c]\n
    unsigned int v65;  // [bp-0x28]\n
    unsigned int v66;  // [bp-0x24]\n
    unsigned int v67;  // [bp-0x20]\n
    unsigned int v68;  // [bp-0x1c]\n
    unsigned int v69;  // [bp-0x18]\n
    unsigned int v70;  // [bp-0x14]\n
    char v71;  // [bp-0x10]\n
    char v73[64];  // edx\n
    unsigned int v74;  // eax\n
    unsigned int v75;  // esi\n
    unsigned int v76;  // eax\n
    unsigned int v77;  // edx\n
    unsigned int v78;  // ebx\n
    unsigned int v79;  // ecx\n
    unsigned int v80;  // edi\n
    unsigned int v81;  // eax\n
    unsigned int v82;  // edx\n
    unsigned int v83;  // ecx\n
    unsigned int v84;  // ebp\n
    unsigned int v85;  // ecx\n
    unsigned int v86;  // edi\n
    unsigned int v87;  // edx\n
    unsigned int v88;  // ebp\n
    unsigned int v89;  // esi\n
    unsigned int v94;  // ebp\n
    unsigned int v95;  // eax\n
    unsigned int v96;  // ebx\n
    unsigned int v97;  // ecx\n
    unsigned int v98;  // eax\n
    unsigned int v99;  // edi\n
    unsigned int v100;  // ecx\n
    unsigned int v101;  // eax\n
    unsigned int v102;  // edi\n
    unsigned int v103;  // ebx\n
    unsigned int v104;  // edx\n
    unsigned int v105;  // ecx\n
    unsigned int v106;  // ebx\n
    unsigned int v108;  // eax\n
    unsigned int v110;  // edi\n
    unsigned int v111;  // ecx\n
    unsigned int v112;  // esi\n
    unsigned int v113;  // eax\n
    unsigned int v114;  // esi\n
    unsigned int v115;  // eax\n
    unsigned int v116;  // ecx\n
    unsigned int v117;  // ebx\n
    unsigned int v118;  // edi\n
    unsigned int v119;  // ecx\n
    unsigned int v120;  // eax\n
    unsigned int v121;  // edx\n
    unsigned int v122;  // edi\n
    unsigned int v123;  // ecx\n
    struct_1 *v124;  // ebx\n
    unsigned int v125;  // edx\n
    unsigned int v126;  // edi\n
    unsigned int v127;  // ecx\n
    unsigned int v128;  // edx\n
    unsigned int v133;  // ecx\n
    unsigned int v134;  // eax\n
    unsigned int v135;  // ebx\n
    unsigned int v136;  // ecx\n
    struct_1 *v137;  // edx\n
    unsigned int v138;  // eax\n
    unsigned int v139;  // edi\n
    unsigned int v140;  // ecx\n
    unsigned int v141;  // eax\n
    unsigned int v142;  // edi\n
    unsigned int v143;  // ebx\n
    unsigned int v144;  // edx\n
    unsigned int v145;  // ecx\n
    unsigned int v146;  // ebx\n
    unsigned int v148;  // eax\n
    unsigned int v150;  // edi\n
    unsigned int v151;  // ecx\n
    unsigned int v152;  // eax\n
    unsigned int v153;  // eax\n
    unsigned short v154;  // ax\n
    unsigned int v155;  // eax\n
    unsigned int v156;  // eax\n
    unsigned short v157;  // ax\n
    unsigned int v158;  // eax\n
    unsigned int v159;  // eax\n
    unsigned short v160;  // ax\n
    unsigned int v161;  // eax\n
    unsigned int v162;  // eax\n
    unsigned short v163;  // ax\n
    unsigned int v164;  // eax\n
    unsigned int v165;  // eax\n
    unsigned short v166;  // ax\n
    unsigned int v167;  // eax\n
    unsigned int v168;  // eax\n
    unsigned short v169;  // ax\n
    unsigned int v170;  // eax\n
    unsigned int v171;  // edi\n
    struct_0 *v172;  // ebx, Other Possible Types: unsigned int\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v73 = v72;\n
    v7 = v73[0] * 128;\n
    v8 = v73[1] * 128;\n
    v9 = v73[2] * 128;\n
    v10 = v73[3] * 128;\n
    v11 = v73[4] * 128;\n
    v12 = v73[5] * 128;\n
    v13 = v73[6] * 128;\n
    v14 = v73[7] * 128;\n
    v15 = v73[8] * 128;\n
    v16 = v73[9] * 128;\n
    v17 = v73[10] * 128;\n
    v18 = v73[11] * 128;\n
    v19 = v73[12] * 128;\n
    v20 = v73[13] * 128;\n
    v21 = v73[14] * 128;\n
    v22 = v73[15] * 128;\n
    v23 = v73[16] * 128;\n
    v24 = v73[17] * 128;\n
    v25 = v73[18] * 128;\n
    v26 = v73[19] * 128;\n
    v27 = v73[20] * 128;\n
    v28 = v73[21] * 128;\n
    v29 = v73[22] * 128;\n
    v30 = v73[23] * 128;\n
    v31 = v73[24] * 128;\n
    v32 = v73[25] * 128;\n
    v33 = v73[26] * 128;\n
    v34 = v73[27] * 128;\n
    v35 = v73[28] * 128;\n
    v36 = v73[29] * 128;\n
    v37 = v73[30] * 128;\n
    v38 = v73[31] * 128;\n
    v39 = v73[32] * 128;\n
    v40 = v73[33] * 128;\n
    v41 = v73[34] * 128;\n
    v42 = v73[35] * 128;\n
    v43 = v73[36] * 128;\n
    v44 = v73[37] * 128;\n
    v45 = v73[38] * 128;\n
    v46 = v73[39] * 128;\n
    v47 = v73[40] * 128;\n
    v48 = v73[41] * 128;\n
    v49 = v73[42] * 128;\n
    v50 = v73[43] * 128;\n
    v51 = v73[44] * 128;\n
    v52 = v73[45] * 128;\n
    v53 = v73[46] * 128;\n
    v54 = v73[47] * 128;\n
    v55 = v73[48] * 128;\n
    v56 = v73[49] * 128;\n
    v57 = v73[50] * 128;\n
    v58 = v73[51] * 128;\n
    v59 = v73[52] * 128;\n
    v60 = v73[53] * 128;\n
    v61 = v73[54] * 128;\n
    v62 = v73[55] * 128;\n
    v63 = v73[56] * 128;\n
    v64 = v73[57] * 128;\n
    v65 = v73[58] * 128;\n
    v66 = v73[59] * 128;\n
    v67 = v73[60] * 128;\n
    v68 = v73[61] * 128;\n
    v69 = v73[62] * 128;\n
    v70 = v73[63] * 128;\n
    v74 = -32;\n
    do\n
    {\n
        v0 = v74;\n
        v75 = *((&v15 + v74));\n
        v76 = *((&v23 + v0));\n
        v77 = *((&v31 + v0));\n
        v78 = *((&v55 + v0));\n
        v79 = *(&(&v71)[v0]);\n
        v80 = v75 - v79;\n
        v5 = v79 + v75;\n
        v1 = v76 - *((&v63 + v0));\n
        v4 = *((&v63 + v0)) + v76;\n
        v81 = v77 - v78;\n
        v2 = v78 + v77;\n
        v82 = *((&v39 + v0));\n
        v83 = *((&v47 + v0));\n
        v84 = v82 - v83;\n
        v3 = v83 + v82;\n
        v85 = (v80 >> 9) - v80;\n
        v86 = (v80 >> 1) + ((v84 >> 9) - v84 >> 2) - ((v84 >> 9) - v84);\n
        v87 = (v85 >> 2) - (v85 + (v84 >> 1));\n
        v88 = (v81 >> 3) - (v81 >> 7);\n
        v89 = (v1 >> 3) - (v1 >> 7);\n
        v94 = v88 - (v81 >> 11);\n
        v95 = v81 - ((v81 >> 3) - (v81 >> 7)) + v89 + (v89 - (v1 >> 11) >> 1);\n
        v96 = v1 - (v89 + v88 + (v94 >> 1));\n
        v97 = v95 + v87;\n
        *((&v39 + v0)) = v87 - v95;\n
        v98 = v96 + v86;\n
        *((&v55 + v0)) = v86 - v96;\n
        *(&(&v71)[v0]) = v97 - v98;\n
        *((&v23 + v0)) = v98 + v97;\n
        v99 = v4;\n
        v100 = v2;\n
        v101 = v99 + v100;\n
        v102 = v99 - v100;\n
        v103 = v5;\n
        v104 = v3;\n
        v105 = v103 + v104;\n
        v106 = v103 - v104;\n
        *((&v15 + v0)) = v105 + v101;\n
        *((&v47 + v0)) = v105 - v101;\n
        v108 = (v102 >> 5) + v102 >> 2;\n
        v110 = (v102 >> 4) + v108 + (v106 >> 5) + v106;\n
        v111 = (v106 >> 5) + v106 >> 2;\n
        *((&v31 + v0)) = v110 - v111;\n
        v112 = (v106 >> 4) - ((v102 >> 5) + v102) + v108;\n
        v113 = v0;\n
        *((&v63 + v113)) = v112 + v111;\n
        tmp_79 = v113;\n
        v74 = v113 + 4;\n
    } while (tmp_79 + 4);\n
    v114 = 0;\n
    do\n
    {\n
        v115 = *((&v7 + v114));\n
        v116 = *((&v8 + v114));\n
        v2 = *((&v9 + v114));\n
        v117 = *((&v12 + v114));\n
        v118 = *((&v14 + v114));\n
        v0 = v115 - v118;\n
        v5 = v118 + v115;\n
        v1 = v116 - *((&v13 + v114));\n
        v4 = *((&v13 + v114)) + v116;\n
        v119 = v2;\n
        v120 = v119 - v117;\n
        v2 = v117 + v119;\n
        v121 = *((&v10 + v114));\n
        v122 = *((&v11 + v114));\n
        v123 = v121 - v122;\n
        v3 = v122 + v121;\n
        v124 = v0;\n
        v125 = (v124 >> 9) - v124;\n
        v0 = (v0 >> 1) + ((v123 >> 9) - v123 >> 2) - ((v123 >> 9) - v123);\n
        v126 = (v125 >> 2) - (v125 + (v123 >> 1));\n
        v127 = (v120 >> 3) - (v120 >> 7);\n
        v128 = (v1 >> 3) - (v1 >> 7);\n
        v133 = v127 - (v120 >> 11);\n
        v134 = v120 - v127 + v128 + (v128 - (v1 >> 11) >> 1);\n
        v135 = v1 - (v128 + v127 + (v133 >> 1));\n
        v136 = v134 + v126;\n
        *((&v10 + v114)) = v126 - v134;\n
        v137 = v0;\n
        v138 = &v137[v135];\n
        *((&v12 + v114)) = &v137[-1 * v135];\n
        *((&v14 + v114)) = v136 - v138;\n
        *((&v8 + v114)) = v138 + v136;\n
        v139 = v4;\n
        v140 = v2;\n
        v141 = v139 + v140;\n
        v142 = v139 - v140;\n
        v143 = v5;\n
        v144 = v3;\n
        v145 = v143 + v144;\n
        v146 = v143 - v144;\n
        *((&v7 + v114)) = v145 + v141;\n
        *((&v11 + v114)) = v145 - v141;\n
        v148 = (v142 >> 5) + v142 >> 2;\n
        v150 = (v142 >> 4) + v148 + (v146 >> 5) + v146;\n
        v151 = (v146 >> 5) + v146 >> 2;\n
        *((&v9 + v114)) = v150 - v151;\n
        *((&v13 + v114)) = (v146 >> 4) - ((v142 >> 5) + v142) + v148 + v151;\n
        v114 += 32;\n
    } while (v114 != 0x100);\n
    v171 = 0;\n
    v172 = v6 - 8112;\n
    do\n
    {\n
        v152 = (&v7)[2 * v171] * *((v172 - 28));\n
        v153 = (v152 >> 31 CONCAT v152) /m *((a1 + v171 * 2));\n
        v154 = v153 + ((&v7)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4)) = v154;\n
        v155 = (&v8)[2 * v171] * *((v172 - 24));\n
        v156 = (v155 >> 31 CONCAT v155) /m *((a1 + v171 * 2 + 1));\n
        v157 = v156 + ((&v8)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 2)) = v157;\n
        v158 = (&v9)[2 * v171] * *((v172 - 20));\n
        v159 = (v158 >> 31 CONCAT v158) /m *((a1 + v171 * 2 + 2));\n
        v160 = v159 + ((&v9)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 4)) = v160;\n
        v161 = (&v10)[2 * v171] * *((v172 - 16));\n
        v162 = (v161 >> 31 CONCAT v161) /m *((a1 + v171 * 2 + 3));\n
        v163 = v162 + ((&v10)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 6)) = v163;\n
        v164 = (&v11)[2 * v171] * *((v172 - 12));\n
        v165 = (v164 >> 31 CONCAT v164) /m *((a1 + v171 * 2 + 4));\n
        v166 = v165 + ((&v11)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 8)) = v166;\n
        v167 = (&v12)[2 * v171] * *((v172 - 8));\n
        v168 = (v167 >> 31 CONCAT v167) /m *((a1 + v171 * 2 + 5));\n
        v169 = v168 + ((&v12)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 10)) = v169;\n
        *((a0 + v171 * 4 + 12)) = ((&v13)[2 * v171] * *((v172 - 4)) >> 31 CONCAT (&v13)[2 * v171] * *((v172 - 4))) /m *((a1 + v171 * 2 + 6)) + ((&v13)[2 * v171] >> 31) + 0x80000 >> 20;\n
        v170 = ((&v14)[2 * v171] * *(v172) >> 31 CONCAT (&v14)[2 * v171] * *(v172)) /m *((a1 + v171 * 2 + 7)) + ((&v14)[2 * v171] >> 31) + 0x80000 >> 20;\n
        *((a0 + v171 * 4 + 14)) = v170;\n
        v171 += 4;\n
        v172 += 32;\n
    } while (v171 != 32);\n
    return v170;\n
}\n
", "4208623:sub_4037ef": null, "4208624:cgc_huffman_decode_table": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_huffman_decode_table(char *v6, char a0[17])\n
{\n
    char <0x4037f0[is_1]|Stack bp-0x310, 1 B>;  // [bp-0x310]\n
    int tmp_6;  // tmp #6\n
    char v0;  // [bp-0x315]\n
    int tmp_9;  // tmp #9\n
    unsigned int s_210;  // [bp-0x210]\n
    struct_0 *v1;  // [bp-0x314]\n
    unsigned int v2;  // [bp-0x310]\n
    unsigned int v3;  // [bp-0x30c]\n
    char v4;  // [bp-0x20e]\n
    char v5;  // [bp-0x20c]\n
    char v7[17];  // ebx\n
    struct_0 *v8;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v9;  // eax\n
    unsigned int v10;  // edx\n
    char *v11;  // ecx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // edx\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // edx\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // edi\n
    unsigned int v34;  // edx\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // edi\n
    unsigned int v37;  // edx\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edx\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // edi\n
    unsigned int v43;  // edx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // edx\n
    unsigned int v47;  // eax\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // eax\n
    unsigned int v51;  // edi\n
    unsigned int v52;  // edx\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // edi\n
    unsigned int v55;  // edx\n
    unsigned int v56;  // eax\n
    unsigned int v57;  // edi\n
    unsigned int v58;  // edx\n
    unsigned int v59;  // eax\n
    unsigned int v60;  // esi, Other Possible Types: char\n
    unsigned int v61;  // edi\n
    unsigned int v62;  // ebx\n
    unsigned int v63;  // eax\n
    void* v64;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v65;  // ecx\n
    unsigned int v66;  // eax\n
    char v67[17];  // esi, Other Possible Types: unsigned int\n
    unsigned int v68;  // ecx\n
    struct_0 *v69;  // ecx, Other Possible Types: unsigned int, char\n
    unsigned int v70;  // edx\n
    struct_0 *v71;  // ecx\n
    unsigned int v72;  // edx\n
    char v73[17];  // ebp\n
    unsigned int v74;  // esi\n
    unsigned int v75;  // esi\n
    unsigned int v76;  // esi\n
\n
    v7 = a0;\n
    v8 = v7[0];\n
    if (v7[0])\n
    {\n
        v9 = v8 & 7;\n
        v10 = 0;\n
        if (v8 + 1 >= 7)\n
        {\n
            v10 = 0;\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v10]) = 16843009;\n
                *((&v3 + v10)) = 16843009;\n
                v10 += 8;\n
            } while ((v8 & -8) != v10);\n
        }\n
        if (v9)\n
        {\n
            v11 = &(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v10];\n
            v12 = 0;\n
            do\n
            {\n
                v11[v12] = 1;\n
                v12 += 1;\n
            } while (v9 != v12);\n
        }\n
    }\n
    v13 = v7[1];\n
    if (v13)\n
    {\n
        v14 = v8;\n
        v15 = v13 & 7;\n
        if ((v13 & 7))\n
        {\n
            v14 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v14] = 2;\n
                v14 += 1;\n
                tmp_6 = v15;\n
                v15 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 = &v8[v13];\n
        if (v13 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v14]) = 33686018;\n
                *((&v3 + v14)) = 33686018;\n
                v14 += 8;\n
            } while (v8 != v14);\n
        }\n
    }\n
    v16 = v7[2];\n
    if (v16)\n
    {\n
        v17 = v8;\n
        v18 = v16 & 7;\n
        if ((v16 & 7))\n
        {\n
            v17 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v17] = 3;\n
                v17 += 1;\n
                tmp_6 = v18;\n
                v18 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v16;\n
        if (v16 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v17]) = 50529027;\n
                *((&v3 + v17)) = 50529027;\n
                v17 += 8;\n
            } while (v8 != v17);\n
        }\n
    }\n
    v19 = v7[3];\n
    if (v19)\n
    {\n
        v20 = v8;\n
        v21 = v19 & 7;\n
        if ((v19 & 7))\n
        {\n
            v20 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v20] = 4;\n
                v20 += 1;\n
                tmp_6 = v21;\n
                v21 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v19;\n
        if (v19 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v20]) = 67372036;\n
                *((&v3 + v20)) = 67372036;\n
                v20 += 8;\n
            } while (v8 != v20);\n
        }\n
    }\n
    v22 = v7[4];\n
    if (v22)\n
    {\n
        v23 = v8;\n
        v24 = v22 & 7;\n
        if ((v22 & 7))\n
        {\n
            v23 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v23] = 5;\n
                v23 += 1;\n
                tmp_6 = v24;\n
                v24 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v22;\n
        if (v22 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v23]) = 84215045;\n
                *((&v3 + v23)) = 84215045;\n
                v23 += 8;\n
            } while (v8 != v23);\n
        }\n
    }\n
    v25 = v7[5];\n
    if (v25)\n
    {\n
        v26 = v8;\n
        v27 = v25 & 7;\n
        if ((v25 & 7))\n
        {\n
            v26 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v26] = 6;\n
                v26 += 1;\n
                tmp_6 = v27;\n
                v27 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v25;\n
        if (v25 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v26]) = 101058054;\n
                *((&v3 + v26)) = 101058054;\n
                v26 += 8;\n
            } while (v8 != v26);\n
        }\n
    }\n
    v28 = v7[6];\n
    if (v28)\n
    {\n
        v30 = v8;\n
        v29 = v28 & 7;\n
        if ((v28 & 7))\n
        {\n
            v30 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v30] = 7;\n
                v30 += 1;\n
                tmp_6 = v29;\n
                v29 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v28;\n
        if (v28 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v30]) = 117901063;\n
                *((&v3 + v30)) = 117901063;\n
                v30 += 8;\n
            } while (v8 != v30);\n
        }\n
    }\n
    v31 = v7[7];\n
    if (v31)\n
    {\n
        v32 = v8;\n
        v33 = v31 & 7;\n
        if ((v31 & 7))\n
        {\n
            v32 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v32] = 8;\n
                v32 += 1;\n
                tmp_6 = v33;\n
                v33 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v31;\n
        if (v31 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v32]) = 134744072;\n
                *((&v3 + v32)) = 134744072;\n
                v32 += 8;\n
            } while (v8 != v32);\n
        }\n
    }\n
    v34 = v7[8];\n
    if (v34)\n
    {\n
        v35 = v8;\n
        v36 = v34 & 7;\n
        if ((v34 & 7))\n
        {\n
            v35 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v35] = 9;\n
                v35 += 1;\n
                tmp_6 = v36;\n
                v36 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v34;\n
        if (v34 - 1 >= 7)\n
        {\n
            do\n
            {\n
                strncpy(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v35], \"\\t\\t\\t\\t\", 4);\n
                strncpy(&v3 + eax<4>, \"\\t\\t\\t\\t\", 4);\n
                v35 = eax<4> + 8;\n
            } while (v8 != v35);\n
        }\n
    }\n
    v37 = v7[9];\n
    if (v37)\n
    {\n
        v38 = v8;\n
        v39 = v37 & 7;\n
        if ((v37 & 7))\n
        {\n
            v38 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v38] = 10;\n
                v38 += 1;\n
                tmp_6 = v39;\n
                v39 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v37;\n
        if (v37 - 1 >= 7)\n
        {\n
            do\n
            {\n
                strncpy(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v38], \"\\n
\\n
\\n
\\n
\", 4);\n
                strncpy(&v3 + eax<4>, \"\\n
\\n
\\n
\\n
\", 4);\n
                v38 = eax<4> + 8;\n
            } while (v8 != v38);\n
        }\n
    }\n
    v40 = v7[10];\n
    if (v40)\n
    {\n
        v41 = v8;\n
        v42 = v40 & 7;\n
        if ((v40 & 7))\n
        {\n
            v41 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v41] = 11;\n
                v41 += 1;\n
                tmp_6 = v42;\n
                v42 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v40;\n
        if (v40 - 1 >= 7)\n
        {\n
            do\n
            {\n
                strncpy(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v41], \"\\x0b\\x0b\\x0b\\x0b\", 4);\n
                strncpy(&v3 + eax<4>, \"\\x0b\\x0b\\x0b\\x0b\", 4);\n
                v41 = eax<4> + 8;\n
            } while (v8 != v41);\n
        }\n
    }\n
    v43 = v7[11];\n
    if (v43)\n
    {\n
        v44 = v8;\n
        v45 = v43 & 7;\n
        if ((v43 & 7))\n
        {\n
            v44 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v44] = 12;\n
                v44 += 1;\n
                tmp_6 = v45;\n
                v45 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v43;\n
        if (v43 - 1 >= 7)\n
        {\n
            do\n
            {\n
                strncpy(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v44], \"\\x0c\\x0c\\x0c\\x0c\", 4);\n
                strncpy(&v3 + eax<4>, \"\\x0c\\x0c\\x0c\\x0c\", 4);\n
                v44 = eax<4> + 8;\n
            } while (v8 != v44);\n
        }\n
    }\n
    v46 = v7[12];\n
    if (v46)\n
    {\n
        v47 = v8;\n
        v48 = v46 & 7;\n
        if ((v46 & 7))\n
        {\n
            v47 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v47] = 13;\n
                v47 += 1;\n
                tmp_6 = v48;\n
                v48 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v46;\n
        if (v46 - 1 >= 7)\n
        {\n
            do\n
            {\n
                strncpy(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v47], \"\\r\\r\\r\\r\", 4);\n
                strncpy(&v3 + eax<4>, \"\\r\\r\\r\\r\", 4);\n
                v47 = eax<4> + 8;\n
            } while (v8 != v47);\n
        }\n
    }\n
    v49 = v7[13];\n
    if (v49)\n
    {\n
        v50 = v8;\n
        v51 = v49 & 7;\n
        if ((v49 & 7))\n
        {\n
            v50 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v50] = 14;\n
                v50 += 1;\n
                tmp_6 = v51;\n
                v51 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v49;\n
        if (v49 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v50]) = 235802126;\n
                *((&v3 + v50)) = 235802126;\n
                v50 += 8;\n
            } while (v8 != v50);\n
        }\n
    }\n
    v52 = v7[14];\n
    if (v52)\n
    {\n
        v53 = v8;\n
        v54 = v52 & 7;\n
        if ((v52 & 7))\n
        {\n
            v53 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v53] = 15;\n
                v53 += 1;\n
                tmp_6 = v54;\n
                v54 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v52;\n
        if (v52 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v53]) = 252645135;\n
                *((&v3 + v53)) = 252645135;\n
                v53 += 8;\n
            } while (v8 != v53);\n
        }\n
    }\n
    v55 = v7[15];\n
    if (v55)\n
    {\n
        v56 = v8;\n
        v57 = v55 & 7;\n
        if ((v55 & 7))\n
        {\n
            v56 = v8;\n
            do\n
            {\n
                (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v56] = 16;\n
                v56 += 1;\n
                tmp_6 = v57;\n
                v57 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
        v8 += v55;\n
        if (v55 - 1 >= 7)\n
        {\n
            do\n
            {\n
                *(&(&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v56]) = 269488144;\n
                *((&v3 + v56)) = 269488144;\n
                v56 += 8;\n
            } while (v8 != v56);\n
        }\n
    }\n
    (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v8] = 0;\n
    v58 = v2;\n
    v59 = v58;\n
    v0 = v58;\n
    if (v58)\n
    {\n
        v60 = 0;\n
        *(&v59) = v0;\n
        v61 = 0;\n
        v1 = v8;\n
        do\n
        {\n
            v62 = v59;\n
            if (v58 != v62)\n
            {\n
                v63 = ~(v58) + v62;\n
                if (((v62 - v58) & 7))\n
                {\n
                    v64 = 0;\n
                    do\n
                    {\n
                        v60 *= 2;\n
                        v64 -= 1;\n
                    } while (!(v62 - v58 & 7) != v64);\n
                    v58 -= v64;\n
                }\n
                v65 = v58;\n
                v8 = v1;\n
                v58 = v62;\n
                if (v63 >= 7)\n
                {\n
                    v66 = v62 - v65;\n
                    do\n
                    {\n
                        v60 *= 0x100;\n
                        tmp_9 = v66;\n
                        v66 -= 8;\n
                    } while (tmp_9 != 8);\n
                    v58 = v62;\n
                }\n
            }\n
            do\n
            {\n
                *(&(&v60)[2 * v61]) = v60;\n
                v60 += 1;\n
                v59 = *(&v2 + v61);\n
                v61 += 1;\n
            } while (v62 == v59);\n
        } while (v59);\n
    }\n
    v67 = a0;\n
    if (v8 <= 0)\n
        return v59;\n
    v59 = v6;\n
    v68 = v67[16];\n
    *((v59 + v68)) = v0;\n
    *((v59 + v68 * 2 + 0x100)) = s_210;\n
    if (v8 == 1)\n
        return v59;\n
    v69 = v8 - 1;\n
    v70 = 1;\n
    if (v8 != 2)\n
    {\n
        v1 = v69;\n
        v71 = v69 & -2;\n
        v72 = 0;\n
        v73 = v67;\n
        do\n
        {\n
            v74 = v73[1 + v72];\n
            *((v59 + v74)) = *(&v2 + v72);\n
            *((v59 + v74 * 2 + 0x100)) = *(&(&v4)[2 * v72]);\n
            v75 = v73[1 + 1 + v72];\n
            *((v59 + v75)) = *(&v2 + v72);\n
            *((v59 + v75 * 2 + 0x100)) = *(&(&v5)[2 * v72]);\n
            v72 += 2;\n
        } while (v71 != v72);\n
        v70 = v72 + 1;\n
        v67 = v73;\n
        v69 = v1;\n
    }\n
    if (!(v69 & 1))\n
        return v6;\n
    v76 = *((v67 + v70 + 16));\n
    *((v59 + v76)) = (&<0x4037f0[is_1]|Stack bp-0x310, 1 B>)[v70];\n
    *((v59 + v76 * 2 + 0x100)) = *(&(&v60)[2 * v70]);\n
}\n
", "4210294:sub_403e76": null, "4210304:main": "typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[3492];\n
    unsigned int field_da4;\n
    unsigned int field_da8;\n
    unsigned int field_dac;\n
    char padding_db0[131072];\n
    unsigned int field_20db0;\n
    unsigned int field_20db4;\n
    unsigned short field_20db8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_-2;\n
    char padding_-1[1];\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int main()\n
{\n
    struct_2 *v0;  // [bp-0xc0]\n
    int tmp_32;  // tmp #32\n
    struct_0 *v1;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xa8]\n
    unsigned int v6;  // [bp-0xa4]\n
    char v25;  // [bp-0x74]\n
    char v26;  // [bp-0x72]\n
    char v27;  // [bp-0x6a]\n
    char v36;  // [bp-0x40]\n
    char v37;  // [bp-0x3c]\n
    char v38;  // [bp-0x38]\n
    char v39;  // [bp-0x34]\n
    char v40;  // [bp-0x30]\n
    char v41;  // [bp-0x2e]\n
    char v42;  // [bp-0x2c]\n
    char v43;  // [bp-0x28]\n
    unsigned int v44;  // [bp-0x8]\n
    unsigned int v46;  // ebx\n
    struct_2 *v47;  // ebp, Other Possible Types: unsigned int\n
    void* v48;  // edi, Other Possible Types: unsigned int\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // ecx\n
    void* v51;  // edi, Other Possible Types: unsigned int\n
    unsigned int v52;  // eax\n
    struct_2 *v53;  // esi, Other Possible Types: unsigned int\n
    unsigned int v54;  // ecx\n
    unsigned int v55;  // eax\n
    unsigned int v56;  // edx\n
    unsigned int v57;  // edi\n
    unsigned int v58;  // edx\n
    unsigned int v59;  // eax\n
    struct_0 *v60;  // edx\n
    unsigned int v61;  // eax\n
    unsigned int v62;  // eax\n
    unsigned int v63;  // eax\n
    unsigned int v64;  // eax\n
    unsigned int v65;  // eax\n
    unsigned int v66;  // eax\n
    unsigned int v67;  // eax\n
    unsigned int v68;  // eax\n
    unsigned int v69;  // eax\n
    unsigned int v70;  // eax\n
    unsigned int v71;  // eax\n
    unsigned int v72;  // eax\n
    unsigned int v73;  // eax\n
    unsigned int v74;  // eax\n
    unsigned int v75;  // eax\n
    unsigned int v76;  // eax\n
    unsigned int v77;  // eax\n
    unsigned int v78;  // eax\n
    unsigned int v79;  // eax\n
    unsigned int v80;  // eax\n
    struct_0 *v81;  // ebx\n
    unsigned int v82;  // eax\n
    unsigned int v83;  // eax\n
    unsigned int v84;  // eax\n
    unsigned int v85;  // eax\n
    unsigned int v86;  // eax\n
    unsigned int v87;  // ecx\n
    unsigned int v88;  // ecx\n
    unsigned int v89;  // ecx\n
    unsigned int v90;  // ecx\n
    unsigned int v91;  // eax\n
    unsigned int v92;  // eax\n
    unsigned int v93;  // eax\n
    unsigned int v94;  // eax\n
    unsigned int v95;  // eax\n
    unsigned int v96;  // eax\n
    unsigned int v97;  // eax\n
    unsigned int v98;  // eax\n
    unsigned int v99;  // eax\n
    unsigned int v100;  // eax\n
    unsigned int v101;  // eax\n
    unsigned int v102;  // eax\n
    unsigned int v103;  // eax\n
    unsigned int v104;  // eax\n
    unsigned int v105;  // eax\n
    unsigned int v106;  // eax\n
    unsigned int v107;  // eax\n
    unsigned int v108;  // eax\n
    unsigned int v109;  // eax\n
    unsigned int v110;  // eax\n
    unsigned int v111;  // eax\n
    unsigned int v112;  // eax\n
    unsigned int v113;  // eax\n
    unsigned int v114;  // eax\n
    unsigned int v115;  // eax\n
    unsigned int v116;  // eax\n
    unsigned int v117;  // eax\n
    unsigned int v118;  // eax\n
    unsigned int v119;  // eax\n
    unsigned int v120;  // eax\n
    unsigned int v121;  // eax\n
    unsigned int v122;  // eax\n
    unsigned int v123;  // eax\n
    unsigned int v124;  // eax\n
    unsigned int v125;  // eax\n
    unsigned int v126;  // eax\n
    unsigned int v127;  // eax\n
    unsigned int v128;  // eax\n
    unsigned int v129;  // eax\n
    unsigned int v130;  // eax\n
    unsigned int v131;  // eax\n
    unsigned int v132;  // eax\n
    unsigned int v133;  // eax\n
    unsigned int v134;  // eax\n
    unsigned int v135;  // eax\n
    unsigned int v136;  // eax\n
    unsigned int v137;  // eax\n
    unsigned int v138;  // eax\n
    unsigned int v139;  // eax\n
    unsigned int v140;  // eax\n
    unsigned int v141;  // eax\n
    unsigned int v142;  // eax\n
    unsigned int v143;  // eax\n
    unsigned int v144;  // eax\n
    unsigned int v145;  // eax\n
    unsigned int v146;  // eax\n
    unsigned int v147;  // eax\n
    unsigned int v148;  // eax\n
    unsigned int v149;  // eax\n
    unsigned int v150;  // eax\n
    unsigned int v151;  // eax\n
    unsigned int v152;  // eax\n
    unsigned int v153;  // eax\n
    unsigned int v154;  // eax\n
    unsigned int v155;  // eax\n
    unsigned int v156;  // eax\n
    unsigned int v157;  // eax\n
    unsigned int v158;  // eax\n
    unsigned int v159;  // eax\n
    unsigned int v160;  // eax\n
    unsigned int v161;  // eax\n
    unsigned int v162;  // eax\n
    unsigned int v163;  // eax\n
    unsigned int v164;  // eax\n
    unsigned int v165;  // eax\n
    unsigned int v166;  // eax\n
    unsigned int v167;  // eax\n
    unsigned int v168;  // eax\n
    unsigned int v169;  // eax\n
    unsigned int v170;  // eax\n
    unsigned int v171;  // eax\n
    struct_1 *v172;  // eax, Other Possible Types: unsigned int\n
    unsigned int v173;  // ecx\n
    char v174;  // dl\n
    unsigned int v175;  // esi\n
    char v176;  // dl\n
    unsigned int v177;  // esi\n
\n
    v44 = v46;\n
    v47 = &v25;\n
    v48 = 0;\n
    v53 = &v37;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    do\n
    {\n
        v0 = &v37;\n
        v49 = cgc_receive(0, v47, 14 - v48);\n
        v50 = *(&v37);\n
        tmp_32 = !v50 | v49;\n
        *(&v49) = !v50 | v49;\n
        if (tmp_32)\n
        {\n
            if (!(!v49) || !(v48 == 14))\n
                goto LABEL_404f2d;\n
            if (*(&v25) == 18243 && *(&v26) >= 54 && *(&v27) == 54)\n
            {\n
                v51 = 0;\n
                do\n
                {\n
                    v0 = &v36;\n
                    if (cgc_receive(0, v53, 40 - v51))\n
                    {\n
LABEL_404f29:\n
                        v6 = v51;\n
                        goto LABEL_404f2d;\n
                    }\n
                    v52 = *(&v36);\n
                    if (!v52)\n
                        goto LABEL_404f29;\n
                    v53 += v52;\n
                    v51 += v52;\n
                } while (v51 < 40);\n
                v6 = v51;\n
                if (!([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edi<4>, 0x28<32>, 0x0<32>)))\n
                    goto LABEL_404f2d;\n
                if (*(&v37) != 40)\n
                    goto LABEL_404f2d;\n
                v54 = *(&v38);\n
                if ((v54 & 7))\n
                    goto LABEL_404f2d;\n
                v55 = *(&v39);\n
                if ((v55 & 7))\n
                    goto LABEL_404f2d;\n
                if (*(&v42))\n
                    goto LABEL_404f2d;\n
                if (*(&v40) != 1)\n
                    goto LABEL_404f2d;\n
                v56 = *(&v41);\n
                if (v56 != 32 && v56 != 24)\n
                    goto LABEL_404f2d;\n
                v57 = *(&v26) - *(&v27);\n
                if (v57 == *(&v43) && v54 * v55 * (v56 >> 3) == v57)\n
                {\n
                    v58 = v55 * v54 >> 32;\n
                    v59 = v55 * v54;\n
                    if (!([D] x86g_calculate_condition(0x4<32>, 0x6<32>, edi<4>, 0x28<32>, 0x0<32>)))\n
                    {\n
                        v5 = cgc_malloc(v57);\n
                        if (v5)\n
                        {\n
                            v60 = v1;\n
                            if (!recvall())\n
                            {\n
                                if (v6 == v57)\n
                                {\n
                                    v60->field_20db0 = 0;\n
                                    v60->field_20db4 = &v60->padding_db0[8452];\n
                                    v60->field_20db8 = 0;\n
                                    cgc_huffman_decode_table(&v60->padding_0[420], &v60->padding_db0[4316]);\n
                                    cgc_huffman_decode_table(&v1->padding_0[1188], &v1->padding_db0[4288]);\n
                                    cgc_huffman_decode_table(&v1->padding_0[1956], &v1->padding_db0[4260]);\n
                                    cgc_huffman_decode_table(&v1->padding_0[2724], &v1->padding_db0[4082]);\n
                                    cgc_memcpy(&v60->padding_0[292], &v1->padding_db0[3904], 64);\n
                                    cgc_memcpy(&v1->padding_0[356], &v1->padding_db0[0xf00], 64);\n
                                    set_quality();\n
                                    set_quality();\n
                                    v61 = v1->field_20db0;\n
                                    v1->field_20db0 = v61 + 1;\n
                                    v1->padding_db0[v61] = 255;\n
                                    v62 = v1->field_20db0;\n
                                    v1->field_20db0 = v62 + 1;\n
                                    v1->padding_db0[v62] = 2;\n
                                    v63 = v1->field_20db0;\n
                                    v1->field_20db0 = v63 + 1;\n
                                    v1->padding_db0[v63] = 255;\n
                                    v64 = v1->field_20db0;\n
                                    v1->field_20db0 = v64 + 1;\n
                                    v1->padding_db0[v64] = 6;\n
                                    v65 = v1->field_20db0;\n
                                    v1->field_20db0 = v65 + 1;\n
                                    v1->padding_db0[v65] = 0;\n
                                    v66 = v1->field_20db0;\n
                                    v1->field_20db0 = v66 + 1;\n
                                    v1->padding_db0[v66] = 16;\n
                                    v67 = v1->field_20db0;\n
                                    v1->field_20db0 = v67 + 1;\n
                                    v1->padding_db0[v67] = 65;\n
                                    v68 = v1->field_20db0;\n
                                    v1->field_20db0 = v68 + 1;\n
                                    v1->padding_db0[v68] = 67;\n
                                    v69 = v1->field_20db0;\n
                                    v1->field_20db0 = v69 + 1;\n
                                    v1->padding_db0[v69] = 71;\n
                                    v70 = v1->field_20db0;\n
                                    v1->field_20db0 = v70 + 1;\n
                                    v1->padding_db0[v70] = 67;\n
                                    v71 = v1->field_20db0;\n
                                    v1->field_20db0 = v71 + 1;\n
                                    v1->padding_db0[v71] = 0;\n
                                    v72 = v1->field_20db0;\n
                                    v1->field_20db0 = v72 + 1;\n
                                    v1->padding_db0[v72] = 170;\n
                                    v73 = v1->field_20db0;\n
                                    v1->field_20db0 = v73 + 1;\n
                                    v1->padding_db0[v73] = 204;\n
                                    v74 = v1->field_20db0;\n
                                    v1->field_20db0 = v74 + 1;\n
                                    v1->padding_db0[v74] = 1;\n
                                    v75 = v1->field_20db0;\n
                                    v1->field_20db0 = v75 + 1;\n
                                    v1->padding_db0[v75] = 0;\n
                                    v76 = v1->field_20db0;\n
                                    v1->field_20db0 = v76 + 1;\n
                                    v1->padding_db0[v76] = 72;\n
                                    v77 = v1->field_20db0;\n
                                    v1->field_20db0 = v77 + 1;\n
                                    v1->padding_db0[v77] = 0;\n
                                    v78 = v1->field_20db0;\n
                                    v1->field_20db0 = v78 + 1;\n
                                    v1->padding_db0[v78] = 72;\n
                                    v79 = v1->field_20db0;\n
                                    v1->field_20db0 = v79 + 1;\n
                                    v1->padding_db0[v79] = 0;\n
                                    v80 = v1->field_20db0;\n
                                    v1->field_20db0 = v80 + 1;\n
                                    v1->padding_db0[v80] = 0;\n
                                    output_dqt();\n
                                    output_dqt();\n
                                    v81 = v1;\n
                                    v82 = v81->field_20db0;\n
                                    v81->field_20db0 = v82 + 1;\n
                                    v81->padding_db0[v82] = 255;\n
                                    v83 = v81->field_20db0;\n
                                    v81->field_20db0 = v83 + 1;\n
                                    v81->padding_db0[v83] = 0;\n
                                    v84 = v81->field_20db0;\n
                                    v81->field_20db0 = v84 + 1;\n
                                    v81->padding_db0[v84] = 0;\n
                                    v85 = v81->field_20db0;\n
                                    v81->field_20db0 = v85 + 1;\n
                                    v81->padding_db0[v85] = 17;\n
                                    v86 = v81->field_20db0;\n
                                    v81->field_20db0 = v86 + 1;\n
                                    v81->padding_db0[v86] = 8;\n
                                    v87 = v81->field_20db0;\n
                                    v81->field_20db0 = v87 + 1;\n
                                    v81->padding_db0[v87] = v86;\n
                                    v88 = v81->field_20db0;\n
                                    v81->field_20db0 = v88 + 1;\n
                                    v81->padding_db0[v88] = *(&v38);\n
                                    v89 = v81->field_20db0;\n
                                    v81->field_20db0 = v89 + 1;\n
                                    v81->padding_db0[v89] = v86;\n
                                    v90 = v81->field_20db0;\n
                                    v81->field_20db0 = v90 + 1;\n
                                    v81->padding_db0[v90] = *(&v39);\n
                                    v91 = v81->field_20db0;\n
                                    v81->field_20db0 = v91 + 1;\n
                                    v81->padding_db0[v91] = 3;\n
                                    v92 = v81->field_20db0;\n
                                    v81->field_20db0 = v92 + 1;\n
                                    v81->padding_db0[v92] = 1;\n
                                    v93 = v81->field_20db0;\n
                                    v81->field_20db0 = v93 + 1;\n
                                    v81->padding_db0[v93] = 17;\n
                                    v94 = v81->field_20db0;\n
                                    v81->field_20db0 = v94 + 1;\n
                                    v81->padding_db0[v94] = 0;\n
                                    v95 = v81->field_20db0;\n
                                    v81->field_20db0 = v95 + 1;\n
                                    v81->padding_db0[v95] = 2;\n
                                    v96 = v81->field_20db0;\n
                                    v81->field_20db0 = v96 + 1;\n
                                    v81->padding_db0[v96] = 17;\n
                                    v97 = v81->field_20db0;\n
                                    v81->field_20db0 = v97 + 1;\n
                                    v81->padding_db0[v97] = 1;\n
                                    v98 = v81->field_20db0;\n
                                    v81->field_20db0 = v98 + 1;\n
                                    v81->padding_db0[v98] = 3;\n
                                    v99 = v81->field_20db0;\n
                                    v81->field_20db0 = v99 + 1;\n
                                    v81->padding_db0[v99] = 17;\n
                                    v100 = v81->field_20db0;\n
                                    v81->field_20db0 = v100 + 1;\n
                                    v81->padding_db0[v100] = 1;\n
                                    v101 = v81->field_20db0;\n
                                    v81->field_20db0 = v101 + 1;\n
                                    v81->padding_db0[v101] = 255;\n
                                    v102 = v81->field_20db0;\n
                                    v81->field_20db0 = v102 + 1;\n
                                    v81->padding_db0[v102] = 1;\n
                                    v103 = v81->field_20db0;\n
                                    v81->field_20db0 = v103 + 1;\n
                                    v81->padding_db0[v103] = 0;\n
                                    v104 = v81->field_20db0;\n
                                    v81->field_20db0 = v104 + 1;\n
                                    v81->padding_db0[v104] = 31;\n
                                    v105 = v81->field_20db0;\n
                                    v81->field_20db0 = v105 + 1;\n
                                    v81->padding_db0[v105] = 0;\n
                                    v106 = v81->field_20db0;\n
                                    v81->field_20db0 = v106 + 1;\n
                                    v81->padding_db0[v106] = 0;\n
                                    v107 = v81->field_20db0;\n
                                    v81->field_20db0 = v107 + 1;\n
                                    v81->padding_db0[v107] = 1;\n
                                    v108 = v81->field_20db0;\n
                                    v81->field_20db0 = v108 + 1;\n
                                    v81->padding_db0[v108] = 5;\n
                                    v109 = v81->field_20db0;\n
                                    v81->field_20db0 = v109 + 1;\n
                                    v81->padding_db0[v109] = 1;\n
                                    v110 = v81->field_20db0;\n
                                    v81->field_20db0 = v110 + 1;\n
                                    v81->padding_db0[v110] = 1;\n
                                    v111 = v81->field_20db0;\n
                                    v81->field_20db0 = v111 + 1;\n
                                    v81->padding_db0[v111] = 1;\n
                                    v112 = v81->field_20db0;\n
                                    v81->field_20db0 = v112 + 1;\n
                                    v81->padding_db0[v112] = 1;\n
                                    v113 = v81->field_20db0;\n
                                    v81->field_20db0 = v113 + 1;\n
                                    v81->padding_db0[v113] = 1;\n
                                    v114 = v81->field_20db0;\n
                                    v81->field_20db0 = v114 + 1;\n
                                    v81->padding_db0[v114] = 1;\n
                                    v115 = v81->field_20db0;\n
                                    v81->field_20db0 = v115 + 1;\n
                                    v81->padding_db0[v115] = 0;\n
                                    v116 = v81->field_20db0;\n
                                    v81->field_20db0 = v116 + 1;\n
                                    v81->padding_db0[v116] = 0;\n
                                    v117 = v81->field_20db0;\n
                                    v81->field_20db0 = v117 + 1;\n
                                    v81->padding_db0[v117] = 0;\n
                                    v118 = v81->field_20db0;\n
                                    v81->field_20db0 = v118 + 1;\n
                                    v81->padding_db0[v118] = 0;\n
                                    v119 = v81->field_20db0;\n
                                    v81->field_20db0 = v119 + 1;\n
                                    v81->padding_db0[v119] = 0;\n
                                    v120 = v81->field_20db0;\n
                                    v81->field_20db0 = v120 + 1;\n
                                    v81->padding_db0[v120] = 0;\n
                                    v121 = v81->field_20db0;\n
                                    v81->field_20db0 = v121 + 1;\n
                                    v81->padding_db0[v121] = 0;\n
                                    v122 = v81->field_20db0;\n
                                    v81->field_20db0 = v122 + 1;\n
                                    v81->padding_db0[v122] = 0;\n
                                    v123 = v81->field_20db0;\n
                                    v81->field_20db0 = v123 + 1;\n
                                    v81->padding_db0[v123] = 1;\n
                                    v124 = v81->field_20db0;\n
                                    v81->field_20db0 = v124 + 1;\n
                                    v81->padding_db0[v124] = 2;\n
                                    v125 = v81->field_20db0;\n
                                    v81->field_20db0 = v125 + 1;\n
                                    v81->padding_db0[v125] = 3;\n
                                    v126 = v81->field_20db0;\n
                                    v81->field_20db0 = v126 + 1;\n
                                    v81->padding_db0[v126] = 4;\n
                                    v127 = v81->field_20db0;\n
                                    v81->field_20db0 = v127 + 1;\n
                                    v81->padding_db0[v127] = 5;\n
                                    v128 = v81->field_20db0;\n
                                    v81->field_20db0 = v128 + 1;\n
                                    v81->padding_db0[v128] = 6;\n
                                    v129 = v81->field_20db0;\n
                                    v81->field_20db0 = v129 + 1;\n
                                    v81->padding_db0[v129] = 7;\n
                                    v130 = v81->field_20db0;\n
                                    v81->field_20db0 = v130 + 1;\n
                                    v81->padding_db0[v130] = 8;\n
                                    v131 = v81->field_20db0;\n
                                    v81->field_20db0 = v131 + 1;\n
                                    v81->padding_db0[v131] = 9;\n
                                    v132 = v81->field_20db0;\n
                                    v81->field_20db0 = v132 + 1;\n
                                    v81->padding_db0[v132] = 10;\n
                                    v133 = v81->field_20db0;\n
                                    v81->field_20db0 = v133 + 1;\n
                                    v81->padding_db0[v133] = 11;\n
                                    v134 = v81->field_20db0;\n
                                    v81->field_20db0 = v134 + 1;\n
                                    v81->padding_db0[v134] = 255;\n
                                    v135 = v81->field_20db0;\n
                                    v81->field_20db0 = v135 + 1;\n
                                    v81->padding_db0[v135] = 1;\n
                                    v136 = v81->field_20db0;\n
                                    v81->field_20db0 = v136 + 1;\n
                                    v81->padding_db0[v136] = 0;\n
                                    v137 = v81->field_20db0;\n
                                    v81->field_20db0 = v137 + 1;\n
                                    v81->padding_db0[v137] = 31;\n
                                    v138 = v81->field_20db0;\n
                                    v81->field_20db0 = v138 + 1;\n
                                    v81->padding_db0[v138] = 1;\n
                                    v139 = v81->field_20db0;\n
                                    v81->field_20db0 = v139 + 1;\n
                                    v81->padding_db0[v139] = 0;\n
                                    v140 = v81->field_20db0;\n
                                    v81->field_20db0 = v140 + 1;\n
                                    v81->padding_db0[v140] = 3;\n
                                    v141 = v81->field_20db0;\n
                                    v81->field_20db0 = v141 + 1;\n
                                    v81->padding_db0[v141] = 1;\n
                                    v142 = v81->field_20db0;\n
                                    v81->field_20db0 = v142 + 1;\n
                                    v81->padding_db0[v142] = 1;\n
                                    v143 = v81->field_20db0;\n
                                    v81->field_20db0 = v143 + 1;\n
                                    v81->padding_db0[v143] = 1;\n
                                    v144 = v81->field_20db0;\n
                                    v81->field_20db0 = v144 + 1;\n
                                    v81->padding_db0[v144] = 1;\n
                                    v145 = v81->field_20db0;\n
                                    v81->field_20db0 = v145 + 1;\n
                                    v81->padding_db0[v145] = 1;\n
                                    v146 = v81->field_20db0;\n
                                    v81->field_20db0 = v146 + 1;\n
                                    v81->padding_db0[v146] = 1;\n
                                    v147 = v81->field_20db0;\n
                                    v81->field_20db0 = v147 + 1;\n
                                    v81->padding_db0[v147] = 1;\n
                                    v148 = v81->field_20db0;\n
                                    v81->field_20db0 = v148 + 1;\n
                                    v81->padding_db0[v148] = 1;\n
                                    v149 = v81->field_20db0;\n
                                    v81->field_20db0 = v149 + 1;\n
                                    v81->padding_db0[v149] = 1;\n
                                    v150 = v81->field_20db0;\n
                                    v81->field_20db0 = v150 + 1;\n
                                    v81->padding_db0[v150] = 0;\n
                                    v151 = v81->field_20db0;\n
                                    v81->field_20db0 = v151 + 1;\n
                                    v81->padding_db0[v151] = 0;\n
                                    v152 = v81->field_20db0;\n
                                    v81->field_20db0 = v152 + 1;\n
                                    v81->padding_db0[v152] = 0;\n
                                    v153 = v81->field_20db0;\n
                                    v81->field_20db0 = v153 + 1;\n
                                    v81->padding_db0[v153] = 0;\n
                                    v154 = v81->field_20db0;\n
                                    v81->field_20db0 = v154 + 1;\n
                                    v81->padding_db0[v154] = 0;\n
                                    v155 = v81->field_20db0;\n
                                    v81->field_20db0 = v155 + 1;\n
                                    v81->padding_db0[v155] = 0;\n
                                    v156 = v81->field_20db0;\n
                                    v81->field_20db0 = v156 + 1;\n
                                    v81->padding_db0[v156] = 1;\n
                                    v157 = v81->field_20db0;\n
                                    v81->field_20db0 = v157 + 1;\n
                                    v81->padding_db0[v157] = 2;\n
                                    v158 = v81->field_20db0;\n
                                    v81->field_20db0 = v158 + 1;\n
                                    v81->padding_db0[v158] = 3;\n
                                    v159 = v81->field_20db0;\n
                                    v81->field_20db0 = v159 + 1;\n
                                    v81->padding_db0[v159] = 4;\n
                                    v160 = v81->field_20db0;\n
                                    v81->field_20db0 = v160 + 1;\n
                                    v81->padding_db0[v160] = 5;\n
                                    v161 = v81->field_20db0;\n
                                    v81->field_20db0 = v161 + 1;\n
                                    v81->padding_db0[v161] = 6;\n
                                    v162 = v81->field_20db0;\n
                                    v81->field_20db0 = v162 + 1;\n
                                    v81->padding_db0[v162] = 7;\n
                                    v163 = v81->field_20db0;\n
                                    v81->field_20db0 = v163 + 1;\n
                                    v81->padding_db0[v163] = 8;\n
                                    v164 = v81->field_20db0;\n
                                    v81->field_20db0 = v164 + 1;\n
                                    v81->padding_db0[v164] = 9;\n
                                    v165 = v81->field_20db0;\n
                                    v81->field_20db0 = v165 + 1;\n
                                    v81->padding_db0[v165] = 10;\n
                                    v166 = v81->field_20db0;\n
                                    v81->field_20db0 = v166 + 1;\n
                                    v81->padding_db0[v166] = 11;\n
                                    v167 = v81->field_20db0;\n
                                    v81->field_20db0 = v167 + 1;\n
                                    v81->padding_db0[v167] = 255;\n
                                    v168 = v81->field_20db0;\n
                                    v81->field_20db0 = v168 + 1;\n
                                    v81->padding_db0[v168] = 1;\n
                                    v169 = v81->field_20db0;\n
                                    v81->field_20db0 = v169 + 1;\n
                                    v81->padding_db0[v169] = 0;\n
                                    v170 = v81->field_20db0;\n
                                    v81->field_20db0 = v170 + 1;\n
                                    v81->padding_db0[v170] = 181;\n
                                    v171 = v81->field_20db0;\n
                                    v81->field_20db0 = v171 + 1;\n
                                    v81->padding_db0[v171] = 16;\n
                                    v172 = &v81->padding_db0[4259];\n
                                    v173 = 178;\n
                                    while (true)\n
                                    {\n
                                        v174 = *((v172 - 1));\n
                                        v175 = v81->field_20db0;\n
                                        v81->field_20db0 = v175 + 1;\n
                                        v81->padding_db0[v175] = v174;\n
                                        v176 = *(v172);\n
                                        v177 = v81->field_20db0;\n
                                        v81->field_20db0 = v177 + 1;\n
                                        v81->padding_db0[v177] = v176;\n
                                        v172 += 2;\n
                                        v173 -= 2;\n
                                    }\n
                                }\n
                                goto LABEL_404f2d;\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v47 += v50;\n
        v48 += v50;\n
    } while (v48 < 14);\n
LABEL_404f2d:\n
    return 1;\n
}\n
", "4215289:sub_4051f9": null, "4215296:recvall": "int recvall(unsigned int *v2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edi\n
    unsigned int *v5;  // ebp\n
    void* v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ecx\n
\n
    v4 = v3;\n
    v5 = v2;\n
    *(v2) = 0;\n
    v6 = 0;\n
    while (true)\n
    {\n
        v0 = &v1;\n
        if (cgc_receive(0, v4, v7 - v6))\n
            return 1;\n
        v8 = *(&v1);\n
        if (!v8)\n
            return 1;\n
        v4 += v8;\n
        v6 = v8 + *(v5);\n
        *(v5) = v6;\n
        if (v6 >= v7)\n
            return 0;\n
    }\n
}\n
", "4215406:sub_40526e": null, "4215408:cgc_output_byte_stuffed": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_428ed4;\n
\n
int cgc_output_byte_stuffed(char v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // ecx\n
\n
    v1 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v1] = v0;\n
    if (v0 == 255)\n
    {\n
        v2 = g_428ed4;\n
        g_428ed4 = g_428ed4 + 1;\n
        (&_GLOBAL_OFFSET_TABLE_)[3504 + v2] = 0;\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    }\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4215479:sub_4052b7": null, "4215488:set_quality": "int set_quality()\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // eax\n
    char v5;  // edx, Other Possible Types: unsigned int\n
    char *v6;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = (v1 <= 49 ? 200 - v1 * 2 : (0 CONCAT 5000) /m v1);\n
    v6 = 0;\n
    do\n
    {\n
        v4 = (v2 * *((v3 + v6)) + 50) * 1374389535 >> 32 >> 31;\n
        v5 = ((v2 * *((v3 + v6)) + 50) * 1374389535 >> 32 >> 5) + v4;\n
        if (v5 >= 255)\n
        {\n
            v5 = 255;\n
            if (!(255 < 2))\n
                continue;\n
        }\n
        else if (!(v5 < 2))\n
        {\n
            continue;\n
        }\n
        v5 = 1;\n
        *((v3 + v6)) = v5;\n
        v6 += 1;\n
    } while (v6 != 64);\n
    return v4;\n
}\n
", "4215529:sub_4052e9": null, "4215605:sub_405335": null, "4215616:output_dqt": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 g_4064b5;\n
extern unsigned int g_428ed4;\n
\n
int output_dqt()\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // esi\n
    char v6;  // dl\n
    char *v7;  // ecx\n
    char v8;  // bl\n
    unsigned int v9;  // edi\n
    char v10;  // bl\n
    unsigned int v11;  // edi\n
    struct_0 *v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13;  // esi\n
\n
    v1 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v1] = 255;\n
    v2 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v2] = 5;\n
    v3 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v3] = 0;\n
    v4 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v4] = 67;\n
    v5 = g_428ed4;\n
    g_428ed4 = g_428ed4 + 1;\n
    (&_GLOBAL_OFFSET_TABLE_)[3504 + v5] = v6;\n
    v12 = &g_4064b5.field_-1;\n
    v13 = 64;\n
    do\n
    {\n
        v8 = v7[*((v12 - 1))];\n
        v9 = g_428ed4;\n
        g_428ed4 = g_428ed4 + 1;\n
        (&_GLOBAL_OFFSET_TABLE_)[3504 + v9] = v8;\n
        v10 = v7[*(v12)];\n
        v11 = g_428ed4;\n
        g_428ed4 = g_428ed4 + 1;\n
        (&_GLOBAL_OFFSET_TABLE_)[3504 + v11] = v10;\n
        v12 += 2;\n
        v13 -= 2;\n
    } while (true);\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4215832:sub_405418": null, "4215840:cgc_encode_comp": null, "4216078:sub_40550e": null, "4216378:sub_40563a": null, "4216380:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}