{"4202496:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24623;\n
    v6 = v5 + 43;\n
    v7 = v5 + 43;\n
    if (v7 == v6)\n
        return v5 + 43;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24559;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 43;\n
    v9 = (v6 + 43 - (v6 + 43) >> 31) + (43 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "int cgc_calloc(unsigned int v2, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
\n
    v1 = v3;\n
    v4 = v2;\n
    if (!v4)\n
        return 0;\n
    v5 = a0;\n
    if (!v5)\n
        return 0;\n
    tmp_2 = v5;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v7 = v5 * v4;\n
    v8 = cgc_malloc();\n
    if (v8)\n
    {\n
        v0 = v7;\n
        return cgc_memset(v8, 0);\n
    }\n
    return 0;\n
}\n
", "4203055:sub_40222f": null, "4203056:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4203089:sub_402251": null, "4203104:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4203123:sub_402273": null, "4203136:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4203152:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4203168:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4203184:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4203198:sub_4022be": null, "4203200:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4203222:sub_4022d6": null, "4203232:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4203254:sub_4022f6": null, "4203264:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4203286:sub_402316": null, "4203296:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4203318:sub_402336": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8476 + v0];\n
}\n
", "4203353:sub_402359": null, "4203360:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4203385:sub_402379": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8348 + v0];\n
}\n
", "4203417:sub_402399": null, "4203424:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4203432:sub_4023a8": null, "4203440:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4203459:sub_4023c3": null, "4203472:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4203491:sub_4023e3": null, "4203504:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    struct_0 *v2;  // esi\n
    unsigned int v3;  // eax\n
    unsigned int *v4;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v3;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v4 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            return cgc_coalesce();\n
        }\n
        v0 = *(v4);\n
        return cgc_deallocate(v4);\n
    }\n
}\n
", "4203593:sub_402449": null, "4203600:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_408250;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // ecx\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct_2 *v10;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12[6];  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        if (v10 <= 31)\n
        {\n
            v11 = *((&cgc_free_lists + 0x4 * v10));\n
            if (!*((&cgc_free_lists + 0x4 * v10)))\n
                goto LABEL_402507;\n
            else\n
                goto LABEL_0x402520;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v2);\n
            if (!v12)\n
                return 0;\n
            v12[0] = 0x40000;\n
            v12[1] = 1;\n
            v12[3] = 0;\n
            v12[2] = 0;\n
            v12[5] = 0;\n
            v12[4] = 0;\n
            cgc_insert_into_flist();\n
            v11 = g_408250;\n
            cgc_remove_from_flist();\n
            v13 = *(v11) - v9;\n
            if (v13 < 49)\n
                return v11 + 24;\n
            v14 = v9 + v11;\n
            *((&v9->field_0 + v11)) = v13;\n
            *(&v9->padding_4[v11]) = 1;\n
            *((8 + &v9->field_0 + v11)) = 0;\n
            *(&v9->padding_c[v11]) = 0;\n
            *(v11) = v9;\n
            *((20 + &v9->field_0 + v11)) = v11;\n
            *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
            v15 = *((v11 + 16));\n
            if (v15)\n
                v15->field_14 = v14;\n
            *((v11 + 16)) = v14;\n
            cgc_insert_into_flist();\n
        }\n
        while (true)\n
        {\n
            while (true)\n
            {\n
LABEL_402507:\n
                v10 += 1;\n
                if (v10 == 32)\n
                    break;\n
                v11 = *(&(&cgc_free_lists)[4 * v10]);\n
            }\n
            while (*(v11) < v9)\n
            {\n
                v11 = *((v11 + 8));\n
                if (!v11)\n
                    goto LABEL_402507;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            return v8 + 1;\n
        }\n
        return 0;\n
    }\n
}\n
", "4204026:sub_4025fa": null, "4204032:cgc_get_size_class": "extern unsigned int g_408154;\n
extern unsigned int g_408158;\n
extern unsigned int g_40815c;\n
extern unsigned int g_408160;\n
extern unsigned int g_408164;\n
extern unsigned int g_408168;\n
extern unsigned int g_40816c;\n
extern unsigned int g_408170;\n
extern unsigned int g_408174;\n
extern unsigned int g_408178;\n
extern unsigned int g_40817c;\n
extern unsigned int g_408180;\n
extern unsigned int g_408184;\n
extern unsigned int g_408188;\n
extern unsigned int g_40818c;\n
extern unsigned int g_408190;\n
extern unsigned int g_408194;\n
extern unsigned int g_408198;\n
extern unsigned int g_40819c;\n
extern unsigned int g_4081a0;\n
extern unsigned int g_4081a4;\n
extern unsigned int g_4081a8;\n
extern unsigned int g_4081ac;\n
extern unsigned int g_4081b0;\n
extern unsigned int g_4081b4;\n
extern unsigned int g_4081b8;\n
extern unsigned int g_4081bc;\n
extern unsigned int g_4081c0;\n
extern unsigned int g_4081c4;\n
extern unsigned int g_4081c8;\n
extern unsigned int g_4081cc;\n
extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (size_class_limits >= v1)\n
        return v2;\n
    v2 = 1;\n
    if (g_408154 < v1)\n
    {\n
        v2 = 2;\n
        if (g_408158 < v1)\n
        {\n
            v2 = 3;\n
            if (g_40815c < v1)\n
            {\n
                v2 = 4;\n
                if (g_408160 < v1)\n
                {\n
                    v2 = 5;\n
                    if (g_408164 < v1)\n
                    {\n
                        v2 = 6;\n
                        if (g_408168 < v1)\n
                        {\n
                            v2 = 7;\n
                            if (g_40816c < v1)\n
                            {\n
                                v2 = 8;\n
                                if (g_408170 < v1)\n
                                {\n
                                    v2 = 9;\n
                                    if (g_408174 < v1)\n
                                    {\n
                                        v2 = 10;\n
                                        if (g_408178 < v1)\n
                                        {\n
                                            v2 = 11;\n
                                            if (g_40817c < v1)\n
                                            {\n
                                                v2 = 12;\n
                                                if (g_408180 < v1)\n
                                                {\n
                                                    v2 = 13;\n
                                                    if (g_408184 < v1)\n
                                                    {\n
                                                        v2 = 14;\n
                                                        if (g_408188 < v1)\n
                                                        {\n
                                                            v2 = 15;\n
                                                            if (g_40818c < v1)\n
                                                            {\n
                                                                v2 = 16;\n
                                                                if (g_408190 < v1)\n
                                                                {\n
                                                                    v2 = 17;\n
                                                                    if (g_408194 < v1)\n
                                                                    {\n
                                                                        v2 = 18;\n
                                                                        if (g_408198 < v1)\n
                                                                        {\n
                                                                            v2 = 19;\n
                                                                            if (g_40819c < v1)\n
                                                                            {\n
                                                                                v2 = 20;\n
                                                                                if (g_4081a0 < v1)\n
                                                                                {\n
                                                                                    v2 = 21;\n
                                                                                    if (g_4081a4 < v1)\n
                                                                                    {\n
                                                                                        v2 = 22;\n
                                                                                        if (g_4081a8 < v1)\n
                                                                                        {\n
                                                                                            v2 = 23;\n
                                                                                            if (g_4081ac < v1)\n
                                                                                            {\n
                                                                                                v2 = 24;\n
                                                                                                if (g_4081b0 < v1)\n
                                                                                                {\n
                                                                                                    v2 = 25;\n
                                                                                                    if (g_4081b4 < v1)\n
                                                                                                    {\n
                                                                                                        v2 = 26;\n
                                                                                                        if (g_4081b8 < v1)\n
                                                                                                        {\n
                                                                                                            v2 = 27;\n
                                                                                                            if (g_4081bc < v1)\n
                                                                                                            {\n
                                                                                                                v2 = 28;\n
                                                                                                                if (g_4081c0 < v1)\n
                                                                                                                {\n
                                                                                                                    v2 = 29;\n
                                                                                                                    if (g_4081c4 < v1)\n
                                                                                                                    {\n
                                                                                                                        v2 = 30;\n
                                                                                                                        if (g_4081c8 < v1)\n
                                                                                                                            v2 = 31 + (g_4081cc < v1);\n
                                                                                                                    }\n
                                                                                                                }\n
                                                                                                            }\n
                                                                                                        }\n
                                                                                                    }\n
                                                                                                }\n
                                                                                            }\n
                                                                                        }\n
                                                                                    }\n
                                                                                }\n
                                                                            }\n
                                                                        }\n
                                                                    }\n
                                                                }\n
                                                            }\n
                                                        }\n
                                                    }\n
                                                }\n
                                            }\n
                                        }\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
}\n
", "4204551:sub_402807": null, "4204560:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1[0]);\n
    v1[1] = 1;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]);\n
    if (v3)\n
    {\n
        v1[2] = v3;\n
        *((*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) + 12)) = v1;\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
        v1[3] = 0;\n
        return v2;\n
    }\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v1;\n
    return v2;\n
}\n
", "4204653:sub_40286d": null, "4204656:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // esi\n
    unsigned int v2;  // eax\n
    struct_1 *v3;  // ecx\n
    struct_0 *v4;  // edx\n
\n
    v1 = v0;\n
    v2 = cgc_get_size_class(v1->field_0);\n
    v3 = v1->field_c;\n
    if (v3)\n
        v3->field_8 = v1->field_8;\n
    v4 = v1->field_8;\n
    if (v4)\n
        v4->field_c = v3;\n
    if (*(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) == v1)\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[176 + 4 * v2]) = v4;\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v2;\n
}\n
", "4204751:sub_4028cf": null, "4204752:cgc_coalesce": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_coalesce(unsigned int v0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ecx\n
    unsigned int v29;  // ecx\n
    unsigned int v30;  // ebp\n
    unsigned int v31;  // edi\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ecx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // edx\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // ecx\n
    unsigned int v38;  // ebp\n
    unsigned int v39;  // edi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // eax\n
    unsigned int v45;  // ecx\n
\n
    v1 = v0;\n
    v2 = *((v1 + 20));\n
    if (!*((v1 + 20)))\n
        return v34;\n
    v12 = *((v1 + 16));\n
    if (!*((v2 + 4)))\n
    {\n
        if (!v12)\n
        {\n
            return v34;\n
        }\n
        else if (!*((v12 + 4)))\n
        {\n
            return v34;\n
        }\n
        else\n
        {\n
            v4 = cgc_get_size_class(*(v12));\n
            v6 = *((v12 + 12));\n
            if (v6)\n
                *((v6 + 8)) = *((v12 + 8));\n
            v10 = *((v12 + 8));\n
            if (v10)\n
                *((v10 + 12)) = v6;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[44 + v4] == v12)\n
                (&_GLOBAL_OFFSET_TABLE_)[44 + v4] = v10;\n
            *((v12 + 8)) = 0;\n
            *((v12 + 12)) = 0;\n
            *((v12 + 4)) = 0;\n
            v14 = *(v1);\n
            v15 = cgc_get_size_class(v14);\n
            v17 = *((v1 + 12));\n
            if (v17)\n
                *((v17 + 8)) = *((v1 + 8));\n
            v22 = *((v1 + 8));\n
            if (v22)\n
                *((v22 + 12)) = v17;\n
            if ((&_GLOBAL_OFFSET_TABLE_)[44 + v15] == v1)\n
                (&_GLOBAL_OFFSET_TABLE_)[44 + v15] = v22;\n
            *((v1 + 8)) = 0;\n
            *((v1 + 12)) = 0;\n
            *((v1 + 4)) = 0;\n
            v26 = v14 + *(*((v1 + 16)));\n
            *(v1) = v26;\n
            v27 = cgc_get_size_class(v26);\n
            *((v1 + 4)) = 1;\n
            v29 = (&_GLOBAL_OFFSET_TABLE_)[44 + v27];\n
            if (v29)\n
            {\n
                *((v1 + 8)) = v29;\n
                *(((&_GLOBAL_OFFSET_TABLE_)[44 + v27] + 12)) = v1;\n
                (&_GLOBAL_OFFSET_TABLE_)[44 + v27] = v1;\n
                *((v1 + 12)) = 0;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            else\n
            {\n
                (&_GLOBAL_OFFSET_TABLE_)[44 + v27] = v1;\n
                v33 = *((v1 + 16));\n
                v34 = *((v33 + 20));\n
                if (!v34)\n
                    goto LABEL_402c4a;\n
            }\n
            *((v34 + 16)) = *((v33 + 16));\n
LABEL_402c4a:\n
            v37 = *((v33 + 16));\n
            if (!v37)\n
                return v34;\n
        }\n
LABEL_402c51:\n
        *((v37 + 20)) = v34;\n
        return v34;\n
    }\n
    if (v12 && *((v12 + 4)))\n
    {\n
        v3 = cgc_get_size_class(*(v2));\n
        v5 = *((v2 + 12));\n
        if (v5)\n
            *((v5 + 8)) = *((v2 + 8));\n
        v8 = *((v2 + 8));\n
        if (v8)\n
            *((v8 + 12)) = v5;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[44 + v3] == v2)\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[44 + v3] = v8;\n
            v12 = *((v1 + 16));\n
        }\n
        *((v2 + 8)) = 0;\n
        *((v2 + 12)) = 0;\n
        *((v2 + 4)) = 0;\n
        v13 = cgc_get_size_class(*(v12));\n
        v16 = *((v12 + 12));\n
        if (v16)\n
            *((v16 + 8)) = *((v12 + 8));\n
        v20 = *((v12 + 8));\n
        if (v20)\n
            *((v20 + 12)) = v16;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[44 + v13] == v12)\n
            (&_GLOBAL_OFFSET_TABLE_)[44 + v13] = v20;\n
        *((v12 + 8)) = 0;\n
        *((v12 + 12)) = 0;\n
        *((v12 + 4)) = 0;\n
        v24 = *(v1);\n
        v25 = cgc_get_size_class(v24);\n
        v28 = *((v1 + 12));\n
        if (v28)\n
            *((v28 + 8)) = *((v1 + 8));\n
        v35 = *((v1 + 8));\n
        if (v35)\n
            *((v35 + 12)) = v28;\n
        if ((&_GLOBAL_OFFSET_TABLE_)[44 + v25] == v1)\n
            (&_GLOBAL_OFFSET_TABLE_)[44 + v25] = v35;\n
        *((v1 + 8)) = 0;\n
        *((v1 + 12)) = 0;\n
        *((v1 + 4)) = 0;\n
        v38 = *((v1 + 20));\n
        v39 = v24 + *(*((v1 + 20)));\n
        *(*((v1 + 20))) = v39;\n
        v40 = v39 + *(*((v1 + 16)));\n
        *(v38) = v40;\n
        v41 = cgc_get_size_class(v40);\n
        *((v38 + 4)) = 1;\n
        v42 = (&_GLOBAL_OFFSET_TABLE_)[44 + v41];\n
        if (v42)\n
        {\n
            *((v38 + 8)) = v42;\n
            *(((&_GLOBAL_OFFSET_TABLE_)[44 + v41] + 12)) = v38;\n
            (&_GLOBAL_OFFSET_TABLE_)[44 + v41] = v38;\n
            *((v38 + 12)) = 0;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        else\n
        {\n
            (&_GLOBAL_OFFSET_TABLE_)[44 + v41] = v38;\n
            v43 = *((v1 + 16));\n
            v44 = *((v43 + 20));\n
            if (!v44)\n
                goto LABEL_402a41;\n
        }\n
        *((v44 + 16)) = *((v43 + 16));\n
LABEL_402a41:\n
        v45 = *((v43 + 16));\n
        if (v45)\n
        {\n
            *((v45 + 20)) = v44;\n
            v34 = *((v1 + 20));\n
            if (!v34)\n
                goto LABEL_402b50;\n
            goto LABEL_402b4a;\n
        }\n
    }\n
    v34 = *((v1 + 16));\n
    if (!v34)\n
        return *((v1 + 16));\n
    if (*((v34 + 4)))\n
        return *((v1 + 16));\n
    v7 = cgc_get_size_class(*(v2));\n
    v9 = *((v2 + 12));\n
    if (v9)\n
        *((v9 + 8)) = *((v2 + 8));\n
    v11 = *((v2 + 8));\n
    if (v11)\n
        *((v11 + 12)) = v9;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v7] == v2)\n
        (&_GLOBAL_OFFSET_TABLE_)[44 + v7] = v11;\n
    *((v2 + 8)) = 0;\n
    *((v2 + 12)) = 0;\n
    *((v2 + 4)) = 0;\n
    v18 = *(v1);\n
    v19 = cgc_get_size_class(v18);\n
    v21 = *((v1 + 12));\n
    if (v21)\n
        *((v21 + 8)) = *((v1 + 8));\n
    v23 = *((v1 + 8));\n
    if (v23)\n
        *((v23 + 12)) = v21;\n
    if ((&_GLOBAL_OFFSET_TABLE_)[44 + v19] == v1)\n
        (&_GLOBAL_OFFSET_TABLE_)[44 + v19] = v23;\n
    *((v1 + 8)) = 0;\n
    *((v1 + 12)) = 0;\n
    *((v1 + 4)) = 0;\n
    v30 = *((v1 + 20));\n
    v31 = v18 + *(*((v1 + 20)));\n
    *(*((v1 + 20))) = v31;\n
    v32 = cgc_get_size_class(v31);\n
    *((v30 + 4)) = 1;\n
    v36 = (&_GLOBAL_OFFSET_TABLE_)[44 + v32];\n
    if (v36)\n
    {\n
        *((v30 + 8)) = v36;\n
        *(((&_GLOBAL_OFFSET_TABLE_)[44 + v32] + 12)) = v30;\n
        (&_GLOBAL_OFFSET_TABLE_)[44 + v32] = v30;\n
        *((v30 + 12)) = 0;\n
    }\n
    else\n
    {\n
        (&_GLOBAL_OFFSET_TABLE_)[44 + v32] = v30;\n
        v34 = *((v1 + 20));\n
        if (!v34)\n
            goto LABEL_402b50;\n
LABEL_402b4a:\n
        *((v34 + 16)) = *((v1 + 16));\n
LABEL_402b50:\n
        v37 = *((v1 + 16));\n
        if (!v37)\n
            return v34;\n
        goto LABEL_402c51;\n
    }\n
    v34 = *((v1 + 20));\n
    if (!v34)\n
        goto LABEL_402b50;\n
    goto LABEL_402b4a;\n
}\n
", "4205728:cgc_memchr": "int cgc_memchr(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) == a0)\n
            return v0 + v2;\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205785:sub_402cd9": null, "4205792:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (*((v0 + v2)) != *((a0 + v2)))\n
            return *((v0 + v2)) - *((a0 + v2));\n
        v2 += 1;\n
        if (v1 == v2)\n
            return 0;\n
    }\n
}\n
", "4205855:sub_402d1f": null, "4205856:cgc_memcpy": "int cgc_memcpy(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // edx\n
    unsigned int v6;  // edi\n
    char *v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
        return v0;\n
    v3 = a0;\n
    v4 = v1 & 3;\n
    v6 = 0;\n
    if (v1 - 1 >= 3)\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v2[v6] = *((v3 + v6));\n
            v2[1 + v6] = *((v3 + v6 + 1));\n
            v2[2 + v6] = *((v3 + v6 + 2));\n
            v2[3 + v6] = *((v3 + v6 + 3));\n
            v6 += 4;\n
        } while ((v1 & -0x4) != v6);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = &v2[v6];\n
    v8 = v3 + v6;\n
    v9 = 0;\n
    do\n
    {\n
        v7[v9] = *((v8 + v9));\n
        v9 += 1;\n
    } while (v4 != v9);\n
    return v0;\n
}\n
", "4205986:sub_402da2": null, "4206000:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // edx\n
    char *v2;  // ebp\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // ebx\n
    char *v10;  // edx\n
    unsigned int v11;  // ebp\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < a0)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = v1 & 3;\n
        v7 = 0;\n
        if (v1 - 1 >= 3)\n
        {\n
            v5 = v1 & -0x4;\n
            v7 = 0;\n
            do\n
            {\n
                *((v3 + v7)) = v2[v7];\n
                *((v3 + v7 + 1)) = v2[1 + v7];\n
                *((v3 + v7 + 2)) = v2[2 + v7];\n
                *((v3 + v7 + 3)) = v2[3 + v7];\n
                v7 += 4;\n
            } while (v5 != v7);\n
        }\n
        if (!v4)\n
            return v0;\n
        v10 = v3 + v7;\n
        v11 = &v2[v7];\n
        v12 = 0;\n
        do\n
        {\n
            v10[v12] = *((v11 + v12));\n
            v12 += 1;\n
        } while (v4 != v12);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ebp<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v6 = v1 - 1;\n
            v9 = v1 & 3;\n
            if (!(v1 & 3))\n
            {\n
                v8 = v1;\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v8 = v1 - 1;\n
                    *((v3 + v1 - 1)) = v2[1 + v1];\n
                    v1 = v8;\n
                    tmp_5 = v9;\n
                    v9 -= 1;\n
                } while (tmp_5 != 1);\n
                if (v6 < 3)\n
                    return v0;\n
            }\n
            v13 = v8;\n
            do\n
            {\n
                *((v3 + v8 - 1)) = v2[1 + v8];\n
                *((v3 + v8 - 2)) = v2[2 + v8];\n
                *((v3 + v8 - 3)) = v2[3 + v8];\n
                *((v3 + v8 - 4)) = v2[4 + v8];\n
                v13 -= 4;\n
                v8 = v13;\n
            } while (v13 != 4);\n
            return v0;\n
        }\n
    }\n
}\n
", "4206256:cgc_memset": "int cgc_memset(char v0[8], unsigned int a0, unsigned int a1)\n
{\n
    int tmp_13;  // tmp #13\n
    char v1[8];  // eax\n
    unsigned int v2;  // edi\n
    char v3;  // cl\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edi\n
    char v6[8];  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // edi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = a0;\n
    v4 = v2 & 7;\n
    v6 = v1;\n
    if (v2 - 1 >= 7)\n
    {\n
        v5 = v2 & -8;\n
        v6 = v1;\n
        do\n
        {\n
            *(v6) = v3;\n
            *((v6 + 1)) = v3;\n
            *((v6 + 2)) = v3;\n
            *((v6 + 3)) = v3;\n
            *((v6 + 4)) = v3;\n
            *((v6 + 5)) = v3;\n
            *((v6 + 6)) = v3;\n
            *((v6 + 7)) = v3;\n
            v6 += 8;\n
            tmp_13 = v5;\n
            v5 -= 8;\n
        } while (tmp_13 != 8);\n
    }\n
    if (!v4)\n
        return v0;\n
    v7 = 0;\n
    do\n
    {\n
        *((v6 + v7)) = v3;\n
        v7 += 1;\n
    } while (v4 != v7);\n
    return v0;\n
}\n
", "4206366:sub_402f1e": null, "4206368:cgc_output_number_printf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // esi\n
    char v14;  // al\n
\n
    v6 = a2;\n
    v7 = a1;\n
    v8 = a0;\n
    v11 = v5;\n
    if (v8 < v7)\n
    {\n
        v3 = v8;\n
        v2 = 0;\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v8) /m v7;\n
        v3 = tmp_9 >> 32;\n
        v11 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v8) /m v7, v7, v6 - 1, a3);\n
        if (v6 <= 0)\n
            goto LABEL_402ffb;\n
    }\n
    if (!v2)\n
    {\n
        tmp_2 = v6;\n
        v12 = v6 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            if ((a3 & 1))\n
            {\n
                do\n
                {\n
                    v1 = 48;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
            else\n
            {\n
                do\n
                {\n
                    v1 = 32;\n
                    v0 = &v4;\n
                    cgc_transmit(v11, &v1, 1);\n
                    v11 = v5;\n
                    tmp_6 = v12;\n
                    v12 -= 1;\n
                } while (tmp_6 != 1);\n
            }\n
        }\n
    }\n
LABEL_402ffb:\n
    if (!(a3 & 2))\n
    {\n
        v13 = v3;\n
        v14 = v13 + 87;\n
    }\n
    else\n
    {\n
        v13 = v3;\n
        v14 = v13 + 55;\n
    }\n
    if (v13 < 10)\n
        v14 = v13 + 48;\n
    v1 = v14;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4206660:sub_403044": null, "4206672:cgc_fdprintf": "int cgc_fdprintf(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x44]\n
    unsigned int v2;  // [bp-0x40]\n
    unsigned int v3;  // [bp-0x3c]\n
    unsigned int v4;  // [bp-0x38]\n
    unsigned int v5;  // [bp-0x30]\n
    char v6;  // [bp-0x1d]\n
    char v7;  // [bp-0x1c]\n
    unsigned int v8;  // [bp-0x18]\n
    unsigned int v9;  // [bp-0x14]\n
    char v11;  // [bp+0xc]\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // edi\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // ebp\n
    unsigned int v29;  // edi\n
\n
    v12 = a0;\n
    v8 = &v11;\n
    if (!*(v12))\n
        return 0;\n
    v13 = v10;\n
    v14 = &v7;\n
    v15 = &v6;\n
    do\n
    {\n
        v20 = v12 + 1;\n
        a0 = v20;\n
        *(&v12) = *(v12);\n
        if (v6 == 37)\n
        {\n
            v9 = 0;\n
            v18 = 0;\n
            v19 = v20;\n
            while (true)\n
            {\n
                v20 = v19 + 1;\n
                a0 = v20;\n
                v16 = *(v19);\n
                v17 = v16;\n
                if (v17 - 49 >= 9)\n
                    break;\n
                v18 = cgc_strtol(v19, &a0);\n
                v19 = a0;\n
            }\n
            switch (v17)\n
            {\n
            case 88:\n
                v21 = v9 | 2;\n
                goto LABEL_403209;\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
                v6 = v16;\n
                break;\n
            case 99:\n
                v22 = v8;\n
                v8 = v22 + 4;\n
                v6 = *(v22);\n
                break;\n
            case 100:\n
                v23 = v8;\n
                v8 = v23 + 4;\n
                v24 = *(v23);\n
                if (v24 >= 0)\n
                {\n
                    v28 = v10;\n
                }\n
                else\n
                {\n
LABEL_403247:\n
                    v6 = 45;\n
                    v5 = &v7;\n
                    v28 = v10;\n
                    cgc_transmit(v10, &v6, 1);\n
                    v24 = -(v24);\n
                }\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                v0 = v24;\n
                goto LABEL_403272;\n
            case 115:\n
                v25 = v8;\n
                v8 = v25 + 4;\n
                v9 = *(v25);\n
                v27 = v10;\n
                v14 = &v7;\n
                v15 = &v6;\n
                if (cgc_strlen())\n
                {\n
                    v29 = 0;\n
                    do\n
                    {\n
                        v6 = *((v9 + v29));\n
                        v5 = v14;\n
                        v4 = v15;\n
                        cgc_transmit(v27, v15, 1);\n
                        v29 += 1;\n
                        v15 = &v6;\n
                        v14 = &v7;\n
                    } while (v29 < cgc_strlen(v9, v4, 1));\n
                }\n
                goto LABEL_4030a7;\n
            case 117:\n
                v26 = v8;\n
                v8 = v26 + 4;\n
                v3 = v9;\n
                v2 = v18;\n
                v1 = 10;\n
                goto LABEL_40321b;\n
            case 120:\n
                v21 = v9;\n
LABEL_403209:\n
                v26 = v8;\n
                v8 = v26 + 4;\n
                v3 = v21;\n
                v2 = v18;\n
                v1 = 16;\n
LABEL_40321b:\n
                v0 = *(v26);\n
                v28 = v10;\n
LABEL_403272:\n
                cgc_output_number_printf(v28, v0, v1, v2, v3);\n
                v27 = v28;\n
                v14 = &v7;\n
                v15 = &v6;\n
                goto LABEL_4030a7;\n
            default:\n
                if (v17 == 37)\n
                    goto LABEL_403223;\n
                else\n
                    goto LABEL_0x403111;\n
            }\n
LABEL_403223:\n
            v6 = 37;\n
            v5 = &v7;\n
            v15 = &v6;\n
            cgc_transmit(v10, &v6, 1);\n
            v27 = v10;\n
            goto LABEL_403247;\n
        }\n
        v6 = v12;\n
        v5 = v14;\n
        cgc_transmit(v13, v15, 1);\n
        v27 = v13;\n
        v14 = &v7;\n
LABEL_4030a7:\n
        v13 = v27;\n
        v12 = a0;\n
    } while (*(v12));\n
    return 0;\n
}\n
", "4206726:sub_403086": null, "4207252:sub_403294": null, "4207264:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_20;  // tmp #20\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    char v13;  // bl\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int v15;  // ecx\n
    char v16[2];  // edx, Other Possible Types: unsigned int\n
    char v17[2];  // edx\n
    char v18[2];  // edx\n
    unsigned int v19;  // esi\n
    char v20;  // dl\n
    unsigned int v21;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v14 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033c4;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v14 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
        v13 = a4;\n
        if (v9 <= 0)\n
            goto LABEL_4033c4;\n
    }\n
    if (!v14)\n
    {\n
        v15 = v9 - 1;\n
        if (v9 != 1)\n
        {\n
            v16 = *(v11);\n
            if ((v13 & 1))\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 48;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 48;\n
                        v18 = *(v11);\n
                        *(v11) = &v18[1];\n
                        *(v12) = *(v12) + 1;\n
                        v18[1] = 48;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
            else\n
            {\n
                if ((v15 & 1))\n
                {\n
                    v16[0] = 32;\n
                    v16 = &*(v11)->field_1;\n
                    *(v11) = v16;\n
                    *(v12) = *(v12) + 1;\n
                    v15 = v9 - 2;\n
                }\n
                if (v9 != 2)\n
                {\n
                    do\n
                    {\n
                        *(v16) = 32;\n
                        v17 = *(v11);\n
                        *(v11) = &v17[1];\n
                        *(v12) = *(v12) + 1;\n
                        v17[1] = 32;\n
                        v16 = &*(v11)->field_1;\n
                        *(v11) = v16;\n
                        *(v12) = *(v12) + 1;\n
                        tmp_20 = v15;\n
                        v15 -= 2;\n
                    } while (tmp_20 != 2);\n
                }\n
            }\n
        }\n
    }\n
LABEL_4033c4:\n
    v19 = v0;\n
    v20 = (!(v19 < 10) ? 48 : ((!(v13 & 2)) * 32 + 55));\n
    *(v11)->field_0 = v20 + v19;\n
    *(v11) = &*(v11)->field_1;\n
    *(v12) = *(v12) + 1;\n
    v21 = v14 + 1;\n
    return v21;\n
}\n
", "4207610:sub_4033fa": null, "4207616:cgc_sprintf": "typedef struct struct_1 {\n
    char field_-1;\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
int cgc_sprintf(char v8[2], struct_1 *a0)\n
{\n
    char *v0;  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_0 **v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct_1 *v10;  // eax, Other Possible Types: unsigned int\n
    char *v11;  // ecx, Other Possible Types: unsigned int\n
    void* v12;  // eax, Other Possible Types: unsigned int\n
    char *v13;  // ecx\n
    unsigned int v14;  // eax\n
    char v15;  // dl\n
    struct_1 *v16;  // ecx, Other Possible Types: unsigned int\n
    void* v17;  // esi, Other Possible Types: unsigned int\n
    unsigned int v18;  // ecx\n
    struct_1 *v19;  // ecx, Other Possible Types: unsigned int\n
    char *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    struct struct_0 **v22;  // ecx\n
    char *v23;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v24;  // eax\n
    char *v25;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v26;  // edi\n
    struct struct_0 **v27;  // ecx\n
    char *v28;  // edx\n
    unsigned int v29;  // edi\n
\n
    v10 = a0;\n
    v11 = v8;\n
    v5 = 0;\n
    v7 = &v9;\n
    if (!v10->field_-1)\n
    {\n
        v12 = 0;\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v19 = v10 + 1;\n
            a0 = v19;\n
            *(&v10) = *(v10);\n
            if (*(&v10) != 37)\n
            {\n
                v13 = v8;\n
                *(v13) = v10;\n
                *(&v8) = v13 + 1;\n
            }\n
            else\n
            {\n
                v6 = 0;\n
                v17 = 0;\n
                while (true)\n
                {\n
                    v14 = v17 | 1;\n
                    v16 = v19 + 1;\n
                    do\n
                    {\n
                        v21 = v17;\n
                        a0 = v16;\n
                        v15 = *((v16 - 1));\n
                        v16 += 1;\n
                        v17 = v14;\n
                    } while (v15 == 48);\n
                    switch (v15)\n
                    {\n
                    case 37:\n
                        v20 = v8;\n
                        *(v20) = 37;\n
                        goto LABEL_4035a7;\n
                    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                        v18 = v16 - 2;\n
                        v4 = 10;\n
                        v6 = cgc_strtol(v18, &a0);\n
                        v19 = a0;\n
                        v17 = v21;\n
                        continue;\n
                    case 100:\n
                        v22 = v7;\n
                        v7 = v22 + 1;\n
                        v23 = *(v22);\n
                        if (v23 < 0)\n
                        {\n
                            v28 = v8;\n
                            *(v28) = 45;\n
                            v8 = v28 + 1;\n
                            v5 += 1;\n
                            v23 = -(v23);\n
                        }\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 10;\n
                        v0 = v23;\n
LABEL_403527:\n
                        cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                        break;\n
                    case 115:\n
                        v24 = v7;\n
                        v7 = v24 + 1;\n
                        v25 = v8;\n
                        v26 = v5;\n
                        if (cgc_strlen())\n
                        {\n
                            v6 = v26;\n
                            v29 = 0;\n
                            do\n
                            {\n
                                v25[v29] = (*(v24))[v29].field_0;\n
                                v29 += 1;\n
                            } while (v29 < cgc_strlen());\n
                            v25 = &v25[v29];\n
                            v26 = v6 + v29;\n
                        }\n
                        v8 = v25;\n
                        v5 = v26;\n
                        break;\n
                    case 88:\n
                        v21 |= 2;\n
                    case 120:\n
                        v27 = v7;\n
                        v7 = v27 + 1;\n
                        v3 = v21;\n
                        v2 = v6;\n
                        v1 = 16;\n
                        v0 = &*(v27)->field_0;\n
                        goto LABEL_403527;\n
                    default:\n
                        v20 = v8;\n
                        *(v20) = v15;\n
LABEL_4035a7:\n
                        v8 = v20 + 1;\n
                        goto LABEL_40344d;\n
                    }\n
                }\n
            }\n
LABEL_40344d:\n
            v5 += 1;\n
            v10 = a0;\n
        } while (*(v10));\n
        v11 = v8;\n
        v12 = v5;\n
    }\n
    *(v11) = 0;\n
    return v12;\n
}\n
", "4207670:sub_403436": null, "4208069:sub_4035c5": null, "4208080:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
        return cgc_malloc(v1);\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            goto LABEL_40363a;\n
        }\n
    }\n
    v5 = 0;\n
LABEL_40363a:\n
    return v5;\n
}\n
", "4208196:sub_403644": null, "4208208:cgc_strcasecmp": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_strcasecmp(char *v0, char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    void* v2;  // al, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    struct_0 *v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a0;\n
    v2 = *(v0);\n
    if (*(v0))\n
    {\n
        v7 = v0 + 1;\n
        while (true)\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                break;\n
            if (v2 != v3)\n
            {\n
                v5 = cgc_tolower(v2);\n
                v2 = cgc_tolower(*(v1));\n
                if (v5 != v2)\n
                {\n
                    *(&v2) = *((v7 - 1));\n
                    break;\n
                }\n
            }\n
            v1 += 1;\n
            v2 = *(v7);\n
            v7 += 1;\n
            if (!v2)\n
                goto LABEL_4036ba;\n
        }\n
    }\n
LABEL_4036ba:\n
    v2 = 0;\n
    v8 = cgc_tolower(v2);\n
    return v8 - cgc_tolower(*(v1));\n
}\n
", "4208247:sub_403677": null, "4208352:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4208409:sub_403719": null, "4208416:cgc_strchr": "int cgc_strchr(char v0[2], unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // dl, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        do\n
        {\n
            if (v3 == v1)\n
                return v2;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
        } while (v3);\n
    }\n
    if (!v1)\n
        return v2;\n
    return 0;\n
}\n
", "4208458:sub_40374a": null, "4208464:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char v3;  // bl\n
    char *v4;  // edx, Other Possible Types: unsigned int\n
    char v5;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v5 = *(v2);\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = *(v1);\n
            if (!v3)\n
                return v5 - *(v1);\n
            if (v5 != v3)\n
                return v5 - *(v1);\n
            v1 += 1;\n
            v5 = *(v4);\n
            v4 += 1;\n
        } while (v5);\n
    }\n
    return 0 - *(v1);\n
}\n
", "4208532:sub_403794": null, "4208544:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        *(v2) = 0;\n
        return v0;\n
    }\n
    v4 = 0;\n
    do\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
        v4 += 1;\n
    } while (v3);\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4208609:sub_4037e1": null, "4208624:cgc_strdup": "int cgc_strdup(char *v0)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (v2)\n
    {\n
        cgc_memcpy(v2, v0, v1);\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208700:sub_40383c": null, "4208704:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4208731:sub_40385b": null, "4208736:cgc_strncasecmp": "int cgc_strncasecmp(char v0[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    char v6[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax, Other Possible Types: char\n
\n
    v1 = a1;\n
    if (!v1)\n
        return a1;\n
    v2 = a0;\n
    v6 = v0;\n
    if (v1 != 1)\n
    {\n
        for (v7 = v6[0]; v7; v6 += 1)\n
        {\n
            v3 = *(v2);\n
            if (!v3)\n
                break;\n
            if (v7 != v3)\n
            {\n
                v5 = cgc_tolower(v7);\n
                if (v5 != cgc_tolower(*(v2)))\n
                    break;\n
            }\n
            v2 += 1;\n
            v7 = *((v6 + 1));\n
        }\n
    }\n
    v1 = cgc_tolower(*(v6)) - cgc_tolower(*(v2));\n
    return v1;\n
}\n
", "4208818:sub_4038b2": null, "4208887:sub_4038f7": null, "4208896:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    char *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // edx\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v6 = v0;\n
    tmp_4 = v1;\n
    v7 = v1 - 1;\n
    if (tmp_4 == 1)\n
        return *(v0) - *(a0);\n
    v3 = &v6[v7];\n
    v4 = &v2[v7];\n
    while (true)\n
    {\n
        v5 = *(v6);\n
        if (!v5)\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (!*(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else if (v5 != *(v2))\n
        {\n
            return *(v6) - *(v2);\n
        }\n
        else\n
        {\n
            v6 += 1;\n
            v2 += 1;\n
            tmp_8 = v7;\n
            v7 -= 1;\n
            if (tmp_8 == 1)\n
                return *(v3) - *(v4);\n
        }\n
    }\n
}\n
", "4208978:sub_403952": null, "4208992:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_6;  // tmp #6\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edi\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v5));\n
            v2[v5] = v3;\n
            if (!v3)\n
                break;\n
            v5 += 1;\n
            if (v1 == v5)\n
                return v0;\n
        }\n
    }\n
    if (v5 >= v1)\n
        return v0;\n
    v4 = ~(v5) + v1;\n
    v6 = v1 - v5 & 7;\n
    if (v6)\n
    {\n
        do\n
        {\n
            v2[v5] = 0;\n
            v5 += 1;\n
            tmp_6 = v6;\n
            v6 -= 1;\n
        } while (tmp_6 != 1);\n
    }\n
    if (v4 < 7)\n
        return v0;\n
    do\n
    {\n
        *(&v2[v5]) = 0;\n
        *(&v2[4 + v5]) = 0;\n
        v5 += 8;\n
    } while (v1 != v5);\n
}\n
", "4209130:sub_4039ea": null, "4209136:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, char a0[2])\n
{\n
    struct struct_0 **v1;  // edx, Other Possible Types: unsigned int\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // cl, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            if (cgc_strchr(a0, v3))\n
            {\n
                v1 = v0;\n
                v2 = *(v1);\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_403a5d;\n
                }\n
            }\n
            v3 = *(v4);\n
            v4 += 1;\n
        } while (v3);\n
        v1 = v0;\n
        v2 = *(v1);\n
    }\n
LABEL_403a5d:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4209255:sub_403a67": null, "4209264:cgc_strtol": "int cgc_strtol(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    void* v4;  // ebp, Other Possible Types: unsigned int\n
    char *v5;  // edi, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    char *v7;  // eax, Other Possible Types: unsigned int\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    char *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // ebp\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = 0;\n
    if (v1 > 36)\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
    }\n
    else\n
    {\n
        v12 = 0;\n
        v5 = v3;\n
        if (v1 != 1)\n
        {\n
            v7 = v3;\n
            while (true)\n
            {\n
                v6 = *(v7);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v6 != 32)\n
                    break;\n
                v7 += 1;\n
            }\n
            v8 = 0;\n
            *(&v8) = v6 == 45;\n
            v9 = (*((v7 + v8)) == 43) + v8;\n
            v10 = v7 + v9;\n
            if (!v1)\n
            {\n
                v1 = 10;\n
                if (*(v10) == 48)\n
                {\n
                    if ((*((v7 + v9 + 1)) | 32) == 120)\n
                    {\n
                        v10 = v7 + v9 + 2;\n
                        v1 = 16;\n
                    }\n
                    else\n
                    {\n
                        v10 = v7 + v9 + 1;\n
                        v1 = 8;\n
                    }\n
                }\n
            }\n
            else if (v1 == 16)\n
            {\n
                v1 = 16;\n
                if (*(v10) == 48 && (*((v7 + v9 + 1)) | 32) == 120)\n
                    v10 = v7 + v9 + 2;\n
            }\n
            v11 = 0;\n
            v12 = 0;\n
            while (true)\n
            {\n
                v13 = *((v10 + v12));\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v14 = v13 - 48;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                else\n
                {\n
                    v15 = -65;\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                    {\n
                        v15 = -97;\n
                        if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (dl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                            break;\n
                    }\n
                    v14 = v13 + v15 + 10;\n
                    if (v14 >= v1)\n
                        break;\n
                }\n
                v11 = v1 * v11 + v14;\n
                v12 += 1;\n
            }\n
            v4 = -(v11);\n
            if (v6 != 45)\n
                v4 = v11;\n
            v5 = v10 + v12;\n
            v2 = a0;\n
            v3 = v0;\n
        }\n
    }\n
    if (!v2)\n
        return v4;\n
    if (!v12)\n
        v5 = v3;\n
    *(v2) = v5;\n
    return v4;\n
}\n
", "4209307:sub_403a9b": null, "4209479:sub_403b47": null, "4209575:sub_403ba7": null, "4209584:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4209625:sub_403bd9": null, "4209632:cgc_send_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_send_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    void* v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
\n
    v3 = a0;\n
    if (!v3)\n
        return -1;\n
    v5 = a1;\n
    if (!v5)\n
        return -1;\n
    v1 = 0;\n
    v7 = v3;\n
    do\n
    {\n
        v0 = &v1;\n
        if (cgc_transmit(v2, v3 - v7 + v5, v7))\n
        {\n
            v8 = -1;\n
            goto LABEL_403c54;\n
        }\n
        v6 = v1;\n
        if (!v6)\n
        {\n
            v8 = v3 - v7;\n
            goto LABEL_403c54;\n
        }\n
        v7 -= v6;\n
    } while (v3 != v6);\n
    v7 = 0;\n
LABEL_403c54:\n
    return v8;\n
}\n
", "4209758:sub_403c5e": null, "4209760:cgc_read_n_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_read_n_bytes(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x14]\n
    unsigned int v3;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    void* v7;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v8;  // esi\n
\n
    v3 = a0;\n
    if (!v3)\n
        return -1;\n
    v5 = a1;\n
    if (!v5)\n
        return -1;\n
    v1 = 0;\n
    v7 = v3;\n
    do\n
    {\n
        v0 = &v1;\n
        if (cgc_receive(v2, v3 - v7 + v5, v7))\n
        {\n
            v8 = -1;\n
            goto LABEL_403cd4;\n
        }\n
        v6 = v1;\n
        if (!v6)\n
        {\n
            v8 = v3 - v7;\n
            goto LABEL_403cd4;\n
        }\n
        v7 -= v6;\n
    } while (v3 != v6);\n
    v7 = 0;\n
LABEL_403cd4:\n
    return v8;\n
}\n
", "4209886:sub_403cde": null, "4209888:cgc_transmit_string": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_transmit_string(unsigned int v3, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    int tmp_2;  // tmp #2\n
    void* v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    void* v10;  // ebp, Other Possible Types: unsigned int\n
\n
    v2 = v4;\n
    v5 = a0;\n
    v6 = cgc_strlen(v5);\n
    if (!v6)\n
        return 0;\n
    v7 = v6;\n
    if (v5)\n
    {\n
        v1 = 0;\n
        v10 = v6;\n
        while (true)\n
        {\n
            v0 = &v1;\n
            if (cgc_transmit(v3, v7 - v10 + v5, v10))\n
                break;\n
            v8 = v1;\n
            if (!v8)\n
            {\n
LABEL_403d4b:\n
                v9 = v7 - v10;\n
                goto LABEL_403d5a;\n
            }\n
            tmp_2 = v10;\n
            v10 -= v8;\n
            if (tmp_2 == v8)\n
            {\n
                v10 = 0;\n
                goto LABEL_403d4b;\n
            }\n
        }\n
    }\n
    v9 = -1;\n
LABEL_403d5a:\n
    return -(v9 != v7);\n
}\n
", "4210027:sub_403d6b": null, "4210032:cgc_read_until": "int cgc_read_until(unsigned int v2, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // ebp\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
\n
    if (!a0)\n
        return -1;\n
    v3 = a1;\n
    v4 = 0;\n
    do\n
    {\n
        v5 = a2 + v4;\n
        v0 = &v1;\n
        if (cgc_receive(v2, v5, 1))\n
            return -1;\n
        v6 = *(&v1);\n
        if (!v6)\n
            return -1;\n
        v8 = *(&v1);\n
        if (cgc_memchr(v5, v3, v6))\n
        {\n
            *(cgc_memchr(v5, v3, v8)) = 0;\n
            v9 = v4 + *(&v1);\n
            return v9;\n
        }\n
        v4 += v8;\n
    } while (v4 < a0);\n
}\n
", "4210194:sub_403e12": null, "4210208:cgc_get_note": "typedef struct struct_1 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern struct_0 *cgc_note_store;\n
\n
int cgc_get_note(char *v0)\n
{\n
    struct struct_0 **v1;  // esi, Other Possible Types: unsigned int\n
    unsigned int v2;  // edi\n
    struct_1 *v3;  // eax\n
\n
    v1 = &cgc_note_store;\n
    v2 = 0x200;\n
    while (true)\n
    {\n
        v3 = *(v1);\n
        if (v3 && !cgc_strcmp(v0, v3->field_c))\n
            break;\n
        v1 += 4;\n
        v2 -= 1;\n
    }\n
    return *(v1);\n
}\n
", "4210244:sub_403e44": null, "4210303:sub_403e7f": null, "4210304:cgc_new_note": "typedef struct struct_2 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_-c;\n
    unsigned int field_-8;\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_0 *cgc_note_store;\n
extern struct_1 g_408260;\n
\n
int cgc_new_note(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[4];  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v4;  // ebp\n
    struct struct_0 **v5;  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    struct_2 *v7;  // eax\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    char *v11;  // eax, Other Possible Types: unsigned int\n
    unsigned int v12[4];  // esi, Other Possible Types: unsigned int\n
    unsigned int v13[4];  // ecx, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    void* v15;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v16;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
\n
    v4 = v3;\n
    if (v3)\n
    {\n
        v2[0] = 0;\n
        if (!a0)\n
            return v2;\n
        v5 = &cgc_note_store;\n
        v6 = 0x200;\n
        while (true)\n
        {\n
            v7 = *(v5);\n
            if (v7 && !cgc_strcmp(v4, v7->field_c))\n
            {\n
                if (*(v5))\n
                    return v2;\n
LABEL_403eea:\n
                v2 = cgc_calloc(16, 1);\n
                if (!v2)\n
                {\n
                    v1 = 75;\n
                    goto LABEL_40407b;\n
                }\n
                v8 = cgc_strlen(a0);\n
                v9 = v8;\n
                v10 = v8 + 1;\n
                if (v10 < 1025)\n
                {\n
                    v11 = cgc_calloc(1, 0x400);\n
                    v12 = v2;\n
                    *((v12 + 8)) = v11;\n
                    if (!v11)\n
                    {\n
                        v1 = 89;\n
LABEL_40407b:\n
                        v0 = \"src/main.c\";\n
                        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
                        cgc__terminate(1, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
                        return cgc_append_note();\n
                    }\n
                    *(v12) = v9;\n
                    v13 = v12 + 4;\n
                    v9 = 0x400;\n
                }\n
                else\n
                {\n
                    v11 = cgc_calloc(1, v10);\n
                    v12 = v2;\n
                    v12[2] = v11;\n
                    if (v11)\n
                    {\n
                        v12[1] = v9;\n
                        v13 = v12;\n
                    }\n
                    else\n
                    {\n
                        v1 = 82;\n
                        goto LABEL_40407b;\n
                    }\n
                }\n
                *(v13) = v9;\n
                cgc_strcpy(v11, a0);\n
                v14 = cgc_calloc(1, cgc_strlen(v4) + 1);\n
                *((v12 + 12)) = v14;\n
                if (!v14)\n
                {\n
                    v1 = 96;\n
                    goto LABEL_40407b;\n
                }\n
                else\n
                {\n
                    cgc_strcpy(v14, v4);\n
                    v15 = 0;\n
                    v16 = &g_408260.field_-c;\n
                    do\n
                    {\n
                        if (!*((v16 - 12)))\n
                        {\n
LABEL_404000:\n
                            *(&(&_GLOBAL_OFFSET_TABLE_)[304 + 4 * v15]) = v2;\n
                            if (v15 != 0x200)\n
                                return v2;\n
                            break;\n
                        }\n
                        else\n
                        {\n
                            if (!*((v16 - 8)))\n
                            {\n
                                v17 = v15 + 1;\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[304 + 4 * v17]) = v2;\n
                                if (v17 != 0x200)\n
                                    return v2;\n
                                break;\n
                            }\n
                            if (!*((v16 - 4)))\n
                            {\n
                                v15 += 2;\n
                                goto LABEL_404000;\n
                            }\n
                            else if (!*(v16))\n
                            {\n
                                v18 = v15 + 3;\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[304 + 4 * v18]) = v2;\n
                                if (v18 != 0x200)\n
                                    return v2;\n
                                break;\n
                            }\n
                        }\n
                        v15 += 4;\n
                        v16 += 16;\n
                    } while (v15 != 0x200);\n
                }\n
            }\n
            v5 += 4;\n
            v6 -= 1;\n
            if (!511)\n
                goto LABEL_403eea;\n
        }\n
    }\n
    v2 = 0;\n
    return v2;\n
}\n
", "4210367:sub_403ebf": null, "4210832:cgc_append_note": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    void* field_8;\n
} struct_0;\n
\n
int cgc_append_note(unsigned int v1[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v2;  // esi\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
        return 0;\n
    v4 = a0;\n
    if (!v4)\n
        return 0;\n
    if (cgc_strlen(v4) + v2->field_0 + 1 > v2->field_4)\n
    {\n
        v5 = (cgc_strlen(v4) + v2->field_0) * 2 + 2;\n
        v2->field_4 = v5;\n
        v6 = cgc_realloc(v2->field_8, v5);\n
        v2->field_8 = v6;\n
        if (!(!v6))\n
            goto LABEL_40412f;\n
        v0 = 124;\n
        cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
        cgc__terminate(1, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\");\n
    }\n
    v6 = v2->field_8;\n
LABEL_40412f:\n
    cgc_strcat(v6, v4);\n
    v2->field_0 = v2->field_0 + cgc_strlen(v4);\n
    return v2;\n
}\n
", "4211022:sub_40414e": null, "4211024:cgc_delete_note": "typedef struct struct_1 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 g_408258;\n
\n
int cgc_delete_note(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // esi\n
    struct_1 *v2;  // eax, Other Possible Types: unsigned int\n
    unsigned int v3;  // ecx\n
\n
    v1 = v0;\n
    if (!v1)\n
        return -1;\n
    v2 = &g_408258.field_-4;\n
    v3 = 0x200;\n
    while (true)\n
    {\n
        if (*((v2 - 4)) == v1)\n
        {\n
            *((v2 - 4)) = 0;\n
            if (!(*(v2) == v1))\n
                goto LABEL_404180;\n
        }\n
        else if (!(*(v2) == v1))\n
        {\n
            goto LABEL_404180;\n
        }\n
        *(v2) = 0;\n
LABEL_404180:\n
        v2 += 8;\n
        v3 -= 2;\n
    }\n
}\n
", "4211060:sub_404174": null, "4211091:sub_404193": null, "4211180:sub_4041ec": null, "4211184:cgc_free_thunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_free_thunk(struct_0 *v0)\n
{\n
    struct_0 *v1;  // esi\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    void* v4;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_0;\n
    if (v2)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            v4 = v1->field_4[v3].field_0;\n
            if (v4)\n
            {\n
                cgc_free(v4);\n
                v2 = v1->field_0;\n
            }\n
            v3 += 1;\n
        } while (v3 < v2);\n
    }\n
    cgc_free(v1->field_4);\n
    return cgc_free(v0);\n
}\n
", "4211271:sub_404247": null, "4211280:cgc_new_thunk": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_new_thunk(unsigned int v5, unsigned int a0, unsigned int a1[2])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x0]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
    unsigned int v8[2];  // edi\n
    struct_0 *v9;  // eax\n
    unsigned int v10;  // eax\n
    char *v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // ebp\n
    unsigned int *v15;  // edi, Other Possible Types: unsigned int\n
    void* v16;  // ecx\n
\n
    v6 = a0;\n
    if (a0 > 4)\n
        return 0;\n
    v8 = a1;\n
    if (!v8)\n
        return 0;\n
    v9 = cgc_calloc(12, 1);\n
    if (v9)\n
    {\n
        v7 = v9;\n
        v9->field_8 = v5;\n
        v9->field_0 = v6;\n
        v10 = cgc_calloc(4, v6);\n
        *((v7 + 4)) = v10;\n
        if (!v10)\n
        {\n
            v0 = 185;\n
            goto LABEL_404385;\n
        }\n
        else\n
        {\n
            v12 = *(v7);\n
            if (!v12)\n
                return v7;\n
            v13 = v8[0];\n
            if (v13)\n
            {\n
                v14 = 1;\n
                do\n
                {\n
                    *((*((v7 + 4)) + v14 * 4 - 4)) = cgc_calloc(1, cgc_strlen(v13) + 1);\n
                    v11 = *((*((v7 + 4)) + v14 * 4 - 4));\n
                    if (!v11)\n
                    {\n
                        v0 = 193;\n
                        goto LABEL_404385;\n
                    }\n
                    cgc_strcpy(v11, v8[1 + v14]);\n
                    v12 = *(v7);\n
                    if (v14 >= v12)\n
                        return v7;\n
                    v13 = v8[v14];\n
                    v14 += 1;\n
                } while (v13);\n
            }\n
            v15 = 0;\n
            do\n
            {\n
                v16 = *((*((v7 + 4)) + v15 * 4));\n
                if (v16)\n
                {\n
                    cgc_free(v16);\n
                    v12 = *(v7);\n
                }\n
                v15 += 1;\n
            } while (v15 < v12);\n
            cgc_free(*((v7 + 4)));\n
            cgc_free(v7);\n
            return 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        v3 = 180;\n
LABEL_404385:\n
        v3 = \"src/main.c\";\n
        v2 = \"ERROR %s:%d:\\tbad alloc\\n
\";\n
        v1 = 2;\n
        cgc_fdprintf(v5, a0);\n
        v4 = 1;\n
        cgc__terminate(v5, a0);\n
    }\n
}\n
", "4211491:sub_404323": null, "4211646:sub_4043be": null, "4211648:cgc_run_thunk": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int cgc_run_thunk(struct struct_2 **v1)\n
{\n
    struct struct_2 **v0;  // [bp-0x18]\n
    struct struct_2 **v2;  // eax\n
    struct_2 *v3;  // ecx\n
    struct_1 *v4;  // ecx\n
\n
    v2 = v1;\n
    if (!v2)\n
        return v1;\n
    v3 = *(v2);\n
    if (v3)\n
    {\n
        v4 = v3->field_8;\n
        v0 = v2;\n
        return v4->field_8(v4->field_4);\n
    }\n
    return v1;\n
}\n
", "4211701:sub_4043f5": null, "4211712:cgc_append_thunk": "typedef struct struct_2 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    char padding_0[4];\n
    struct struct_4 *field_4;\n
} struct_5;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_3 *cgc_note_store;\n
\n
int cgc_append_thunk(unsigned int v8[2], struct struct_5 **a0)\n
{\n
    unsigned int v0;  // [bp-0x2030]\n
    unsigned int v1;  // [bp-0x2028]\n
    char *v2;  // [bp-0x2024], Other Possible Types: char\n
    char *v3;  // [bp-0x2020]\n
    char *v4;  // [bp-0x201c]\n
    char *v5;  // [bp-0x2018]\n
    char v6;  // [bp-0x2011]\n
    char v7;  // [bp-0x11]\n
    unsigned int v9[2];  // eax\n
    unsigned int v12;  // edi\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    char *v14;  // eax\n
    void* v15;  // ebp, Other Possible Types: unsigned int\n
    struct struct_3 **v16;  // esi, Other Possible Types: unsigned int\n
    unsigned int v17;  // edi\n
    struct_2 *v18;  // eax\n
    struct_3 *v19;  // eax\n
    struct struct_5 **v20;  // ecx\n
    struct_5 *v21;  // eax\n
    struct_4 *v22;  // eax\n
    struct_4 *v23;  // eax\n
    struct_1 *v24;  // eax\n
\n
    v9 = v8;\n
    if (!v9)\n
        return -1;\n
    v4 = v9[0];\n
    if (!v4)\n
    {\n
        return -1;\n
    }\n
    else if (!*(&v2))\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        v2 = v9[1];\n
        cgc_strncpy(&v6, *(&v2), 0x2000);\n
        v7 = 0;\n
        v5 = \"cloud\";\n
        v12 = cgc_strlen(\"cloud\");\n
        v1 = v12 - 0x2000;\n
        if (v12 != 0x2000)\n
        {\n
            v1 = -(v1);\n
            v13 = 0;\n
            v3 = \"butt \";\n
            do\n
            {\n
                if (!cgc_strncmp(&(&v6)[v13], v5, v12))\n
                {\n
                    cgc_memcpy(&(&v6)[v13], v3, v12);\n
                    v13 += v12;\n
                }\n
                v13 += 1;\n
            } while (v13 < v1);\n
        }\n
        v15 = v2;\n
        if (cgc_strcmp(v2, &v6))\n
        {\n
            v14 = cgc_realloc(v15, cgc_strlen(&v6) + 1);\n
            if (!v14)\n
            {\n
                v0 = 246;\n
                cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
                cgc__terminate(1, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\");\n
                return cgc_remove_head_list();\n
            }\n
            v15 = v14;\n
            cgc_strcpy(v14, &v6);\n
        }\n
        v16 = &cgc_note_store;\n
        v17 = 0x200;\n
        do\n
        {\n
            v18 = *(v16);\n
            if (v18 && !cgc_strcmp(v4, v18->field_c))\n
            {\n
                v19 = *(v16);\n
                if (v19)\n
                {\n
                    cgc_append_note(v19, v15);\n
                    break;\n
                }\n
            }\n
            v16 += 4;\n
            v17 -= 1;\n
        } while (true);\n
        v20 = a0;\n
        if (!v20)\n
            return 0;\n
        v21 = *(v20);\n
        if (!v21)\n
            return 0;\n
        v22 = v21->field_4;\n
        if (!v22)\n
        {\n
            *(v20) = 0;\n
            return 0;\n
        }\n
        v22->field_0 = 0;\n
        v23 = *(v20)->field_4;\n
        *(v20) = &v23->field_0;\n
        if (v23)\n
        {\n
            v24->field_8(v23->field_8->field_4);\n
            return 0;\n
        }\n
        return 0;\n
    }\n
}\n
", "4211941:sub_4044e5": null, "4212094:sub_40457e": null, "4212224:cgc_remove_head_list": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
int cgc_remove_head_list(struct struct_0 **v0)\n
{\n
    struct struct_0 **v1;  // eax\n
    struct_0 *v2;  // ecx\n
    unsigned int *v3;  // ecx\n
    unsigned int *v4;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return v0;\n
    v3 = v2->field_4;\n
    if (!v3)\n
    {\n
        v4 = 0;\n
    }\n
    else\n
    {\n
        *(v3) = 0;\n
        v4 = *(v1)->field_4;\n
    }\n
    *(v1) = v4;\n
    return v0;\n
}\n
", "4212263:sub_404627": null, "4212272:cgc_delete_thunk": "typedef struct struct_6 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    char *field_c;\n
} struct_6;\n
\n
typedef struct struct_7 {\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_7;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    struct struct_3 *field_4;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_2 *field_8;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern struct_0 *cgc_note_store;\n
extern struct_5 g_408258;\n
\n
int cgc_delete_thunk(unsigned int *v0, struct struct_4 **a0)\n
{\n
    char *v1;  // esi\n
    struct struct_0 **v2;  // ebp, Other Possible Types: unsigned int\n
    struct_6 *v3;  // eax\n
    unsigned int v4;  // edi\n
    unsigned int v5[4];  // esi\n
    struct_7 *v6;  // eax, Other Possible Types: unsigned int\n
    unsigned int v7;  // ecx\n
    struct struct_4 **v11;  // edx\n
    struct_4 *v12;  // eax\n
    struct_3 *v13;  // eax\n
    struct_3 *v14;  // eax\n
    struct_2 *v15;  // eax\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return -1;\n
    v2 = &cgc_note_store;\n
    v4 = 0x200;\n
    while (true)\n
    {\n
        v3 = *(v2);\n
        if (v3 && !cgc_strcmp(v1, v3->field_c))\n
        {\n
            v5 = *(v2);\n
            if (v5)\n
            {\n
                v6 = &g_408258.field_-4;\n
                v7 = 0x200;\n
                while (true)\n
                {\n
                    if (*((v6 - 4)) == v5)\n
                    {\n
                        *((v6 - 4)) = 0;\n
                        if (!(*(v6) == v5))\n
                            goto LABEL_4046a0;\n
                    }\n
                    else if (!(*(v6) == v5))\n
                    {\n
                        goto LABEL_4046a0;\n
                    }\n
                    *(v6) = 0;\n
LABEL_4046a0:\n
                    v6 += 8;\n
                    v7 -= 2;\n
                }\n
            }\n
LABEL_404700:\n
            v11 = a0;\n
            if (!v11)\n
                return 0;\n
            v12 = *(v11);\n
            if (!v12)\n
                return 0;\n
            v13 = v12->field_4;\n
            if (!v13)\n
            {\n
                *(v11) = 0;\n
                return 0;\n
            }\n
            v13->field_0 = 0;\n
            v14 = *(v11)->field_4;\n
            *(v11) = &v14->field_0;\n
            if (!v14)\n
                return 0;\n
            v15->field_8(v14->field_8->field_4);\n
            break;\n
        }\n
        v2 += 4;\n
        v4 -= 1;\n
        if (!511)\n
            goto LABEL_404700;\n
    }\n
    return 0;\n
}\n
", "4212318:sub_40465e": null, "4212378:sub_40469a": null, "4212403:sub_4046b3": null, "4212554:sub_40474a": null, "4212560:cgc_new_list": "int cgc_new_list(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6[3];  // eax\n
\n
    v2 = v4;\n
    v1 = v5;\n
    v6 = cgc_calloc(12, 1);\n
    if (v6)\n
    {\n
        v6[0] = v3;\n
        v6[1] = a0;\n
        v6[2] = a1;\n
        return v6;\n
    }\n
    v0 = 288;\n
    cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
    cgc__terminate(1, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\");\n
}\n
", "4212656:cgc_append_list": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
int cgc_append_list(struct struct_0 **v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct struct_0 **v2;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4[3];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v5;  // edi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    v3 = *(v2);\n
    if (!v3)\n
    {\n
        v4 = cgc_calloc(12, 1);\n
        if (v4)\n
        {\n
            v5 = 0;\n
LABEL_404806:\n
            *(v4) = v5;\n
            *((v4 + 4)) = 0;\n
            *((v4 + 8)) = a0;\n
            *(v2) = v4;\n
            return 0;\n
        }\n
    }\n
    else\n
    {\n
        do\n
        {\n
            v5 = v3;\n
            v3 = *((v3 + 4));\n
        } while (v3);\n
        v4 = cgc_calloc(12, 1);\n
        if (v4)\n
        {\n
            v2 = &v5->field_4;\n
            goto LABEL_404806;\n
        }\n
    }\n
    v0 = 288;\n
    cgc_fdprintf(2, \"ERROR %s:%d:\\tbad alloc\\n
\");\n
    cgc__terminate(1, \"ERROR %s:%d:\\tbad alloc\\n
\", \"src/main.c\");\n
    return cgc_len_list();\n
}\n
", "4212816:cgc_len_list": "typedef struct struct_0 {\n
    char padding_0[4];\n
    struct struct_0 *field_4;\n
} struct_0;\n
\n
int cgc_len_list(struct_0 *v0)\n
{\n
    struct_0 *v1;  // ecx, Other Possible Types: unsigned int\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (!v1)\n
        return 0;\n
    while (true)\n
    {\n
        if (v2 == -1)\n
            return 0;\n
        v1 = *((v1 + 4));\n
        v2 += 1;\n
        if (!v1)\n
            return v2;\n
    }\n
}\n
", "4212851:sub_404873": null, "4212864:cgc_prompt": "int cgc_prompt(unsigned int v0)\n
{\n
    return cgc_transmit_string(v0, \"nk9001> \");\n
}\n
", "4212904:sub_4048a8": null, "4212912:cgc_yell": "int cgc_yell(unsigned int v0)\n
{\n
    return cgc_transmit_string(v0, \"I don't know what you want, but you can't find it here.\\n
\");\n
}\n
", "4212952:sub_4048d8": null, "4212960:cgc_nth_word": "int cgc_nth_word(unsigned int v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x220]\n
    char *v1;  // [bp-0x210]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v4;  // esi\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // eax\n
    char *v9;  // eax\n
    unsigned int v10;  // ebp\n
    char v11[2];  // edi\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // esi\n
    char *v16;  // eax\n
\n
    v2 = v4;\n
    v5 = a0;\n
    v6 = cgc_strlen(v5);\n
    cgc_memset(&v1, 0, 0x200);\n
    v7 = &v5[v6];\n
    v10 = 0;\n
    while (true)\n
    {\n
        v8 = *(v5);\n
        if (v8)\n
            v5 = v5 - -1 - (cgc_isspace(v8) < 1);\n
        if (v5 >= v7)\n
            break;\n
        (&v1)[v10] = v5;\n
        v9 = cgc_strchr(v5, 32);\n
        if (!v9)\n
            break;\n
        v5 = v9;\n
        v10 += 1;\n
        if (false)\n
            break;\n
    }\n
    v11 = (&v1)[v3];\n
    if (!v11)\n
        return 0;\n
    if (!a1)\n
    {\n
        v13 = cgc_strchr(v11, 32);\n
        if (!(!v13))\n
            goto LABEL_4049c7;\n
    }\n
    v13 = cgc_strchr(v11, 0);\n
    if (!v13)\n
    {\n
        v14 = \"ERROR %s:%d:\\tmalformed string\\n
\";\n
        v0 = 389;\n
        goto LABEL_404a08;\n
    }\n
LABEL_4049c7:\n
    v15 = v13 - v11;\n
    v16 = cgc_calloc(1, v15 + 1);\n
    if (v16)\n
        return cgc_strncpy(v16, v11, v15);\n
    v14 = \"ERROR %s:%d:\\tbad alloc\\n
\";\n
    v0 = 392;\n
LABEL_404a08:\n
    cgc_fdprintf(2, v14);\n
    cgc__terminate(1, v14);\n
    return cgc_make_argv();\n
}\n
", "4213280:cgc_make_argv": "int cgc_make_argv(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // edi\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
    void* v10;  // ebp, Other Possible Types: unsigned int\n
    void* v11;  // eax\n
\n
    v1 = v3;\n
    v4 = a0;\n
    v5 = cgc_calloc(4, v4);\n
    v0 = v4 - 1;\n
    v6 = 1;\n
    while (true)\n
    {\n
        if (v4 != v6)\n
        {\n
            v7 = cgc_nth_word(v6, v2, 0);\n
            *((-4 + v5 + 4 * v6)) = v7;\n
            v6 += 1;\n
            if (!v7)\n
                goto LABEL_404a9a;\n
        }\n
        else\n
        {\n
            v8 = cgc_nth_word(v4, v2, 1);\n
            *((-4 + v5 + 4 * v4)) = v8;\n
            if (v8)\n
                return v5;\n
LABEL_404a9a:\n
            if (v0 >= 2)\n
            {\n
                v10 = 0;\n
                do\n
                {\n
                    v11 = *((4 + v5 + 4 * v10));\n
                    if (v11)\n
                        cgc_free(v11);\n
                    v10 += 1;\n
                } while (v4 - 2 != v10);\n
            }\n
        }\n
    }\n
    cgc_free(v5);\n
    return 0;\n
}\n
", "4213416:sub_404aa8": null, "4213477:sub_404ae5": null, "4213488:cgc_print_argv": "int cgc_print_argv()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4213489:sub_404af1": null, "4213504:cgc_free_argv": "int cgc_free_argv(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int *v1;  // esi\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // ebp\n
    void* v4;  // eax\n
    unsigned int v5;  // eax\n
\n
    v1 = v0;\n
    if (!v1)\n
        return v5;\n
    v2 = a0;\n
    if (!v2)\n
        return v5;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = v1[v3];\n
        if (v4)\n
            cgc_free(v4);\n
        v3 += 1;\n
    } while (v2 != v3);\n
    v5 = cgc_free(v1);\n
    return v5;\n
}\n
", "4213543:sub_404b27": null, "4213592:sub_404b58": null, "4213600:main": "typedef struct struct_3 {\n
    char field_0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    char padding_0[4];\n
    struct struct_4 *field_4;\n
    struct struct_2 *field_8;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_5 {\n
    char padding_0[12];\n
    char *field_c;\n
} struct_5;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern struct_0 *cgc_note_store;\n
extern struct_4 *cgc_thunks;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x401c]\n
    int tmp_2;  // tmp #2\n
    unsigned int v1;  // [bp-0x4018]\n
    char *v2;  // [bp-0x4014]\n
    char v3;  // [bp-0x4010]\n
    unsigned int v5;  // ebp\n
    struct_3 *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    void* v8;  // edi, Other Possible Types: unsigned int\n
    void* v9;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v10;  // edx, Other Possible Types: unsigned int\n
    struct_2 *v11;  // eax\n
    struct_2 *v12;  // eax\n
    unsigned int v13[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    char *v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // ebp\n
    void* v20;  // eax\n
    struct_2 *v21;  // eax\n
    void* v22;  // eax\n
    void* v23;  // eax, Other Possible Types: unsigned int\n
    unsigned int v24;  // ebp\n
    void* v25;  // eax\n
    unsigned int *v26;  // ebp\n
    unsigned int v27;  // eax\n
    struct struct_0 **v29;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v30;  // esi\n
    struct_5 *v31;  // eax\n
\n
    v5 = \"nk9001> \";\n
    cgc_transmit_string(1, \"nk9001> \");\n
    v6 = &v3;\n
    cgc_memset(&v3, 0, 0x4000);\n
    if (cgc_read_until(0, 0x4000, 10, &v3) < 0)\n
        return 0;\n
    v2 = \"quit\";\n
    v1 = \"nk9001> \";\n
    while (true)\n
    {\n
        if (!cgc_strncmp(v6, v2, 4))\n
            cgc__terminate();\n
        v7 = cgc_nth_word(0, v6, 0);\n
        if (v7)\n
            break;\n
LABEL_404bec:\n
        cgc_transmit_string(1, v5);\n
        cgc_memset(v6, 0, 0x4000);\n
        if (cgc_read_until(0, 0x4000, 10, v6) < 0)\n
            return 0;\n
    }\n
    v8 = v7;\n
    if (cgc_thunks)\n
    {\n
        v9 = 0;\n
        v10 = cgc_thunks;\n
        while (v9 != 1)\n
        {\n
            v10 = *((v10 + 4));\n
            v9 -= 1;\n
            if (!v10 && !(v9) >= 33)\n
            {\n
                v11->field_8(cgc_thunks->field_8->field_4);\n
                break;\n
            }\n
        }\n
    }\n
    if (!cgc_strncmp(v8, \"new-note\", cgc_strlen(\"new-note\")))\n
    {\n
        v0 = v8;\n
        if (cgc_thunks)\n
            v12->field_8(cgc_thunks->field_8->field_4);\n
        v13 = cgc_calloc(4, 2);\n
        v6 = &v3;\n
        v15 = cgc_nth_word(1, &v3, 0);\n
        *(v13) = v15;\n
        if (v15)\n
        {\n
            v17 = cgc_nth_word(2, &v3, 1);\n
            *((v13 + 4)) = v17;\n
            if (v17)\n
            {\n
                v19 = cgc_new_note(*(v13), v17);\n
                v20 = *(v13);\n
                if (v20)\n
                    cgc_free(v20);\n
                v25 = *((v13 + 4));\n
                if (v25)\n
                    cgc_free(v25);\n
                tmp_2 = v19;\n
                v24 = \"Note successfully created.\\n
\";\n
                if (!tmp_2)\n
                    v24 = \"Your note book is full.\\n
\";\n
                goto LABEL_404fb6;\n
            }\n
        }\n
    }\n
    else if (!cgc_strncmp(v8, \"append-note\", cgc_strlen(\"append-note\")))\n
    {\n
        v0 = v8;\n
        v13 = cgc_calloc(4, 2);\n
        v6 = &v3;\n
        v14 = cgc_nth_word(1, &v3, 0);\n
        v13[0] = v14;\n
        if (v14)\n
        {\n
            v16 = cgc_nth_word(2, &v3, 1);\n
            v13[1] = v16;\n
            if (v16)\n
            {\n
                cgc_append_list(&cgc_thunks, cgc_new_thunk(cgc_append_thunk, 2, v13));\n
                v22 = v13[0];\n
                if (v22)\n
                    cgc_free(v22);\n
                v23 = v13[1];\n
                v24 = \"Note successfully appended.\\n
\";\n
                if (!v23)\n
                    goto LABEL_404fb6;\n
                goto LABEL_404faa;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        if (cgc_strncmp(v8, \"delete-note\", cgc_strlen(\"delete-note\")))\n
        {\n
            if (cgc_strncmp(v8, \"get-note\", cgc_strlen(\"get-note\")))\n
            {\n
                cgc_transmit_string(1, \"I don't know what you want, but you can't find it here.\\n
\");\n
                v6 = &v3;\n
                goto LABEL_404be0;\n
            }\n
            v0 = v8;\n
            if (cgc_thunks)\n
                v21->field_8(cgc_thunks->field_8->field_4);\n
            v26 = cgc_calloc(4, 1);\n
            v6 = &v3;\n
            v27 = cgc_nth_word(1, &v3, 1);\n
            *(v26) = v27;\n
            if (!v27)\n
            {\n
                cgc_free(v26);\n
                v5 = v1;\n
                goto LABEL_404fec;\n
            }\n
            else\n
            {\n
                v29 = &cgc_note_store;\n
                v30 = 0x200;\n
                while (true)\n
                {\n
                    v31 = *(v29);\n
                    if (v31)\n
                        break;\n
LABEL_404da0:\n
                    v29 += 4;\n
                    v30 -= 1;\n
                    if (!511)\n
                        goto LABEL_404ff4;\n
                }\n
                if (!(!cgc_strcmp(v27, v31->field_c)))\n
                    goto LABEL_404da0;\n
                if (*(v29))\n
                {\n
                    cgc_fdprintf(1, \"%s\\n
\");\n
                    v5 = v1;\n
                    v6 = &v3;\n
                    goto LABEL_404fec;\n
                }\n
                else\n
                {\n
LABEL_404ff4:\n
                    v24 = \"Unknown note.\\n
\";\n
                    v6 = &v3;\n
LABEL_404fc2:\n
                    v8 = v0;\n
                    cgc_transmit_string(1, v24);\n
                    v5 = v1;\n
                    goto LABEL_404be0;\n
                }\n
            }\n
        }\n
        v0 = v8;\n
        v13 = cgc_calloc(4, 1);\n
        v6 = &v3;\n
        v18 = cgc_nth_word(1, &v3, 1);\n
        *(v13) = v18;\n
        if (v18)\n
        {\n
            cgc_append_list(&cgc_thunks, cgc_new_thunk(cgc_delete_thunk, 1, v13));\n
            v23 = *(v13);\n
            v24 = \"Note successfully deleted.\\n
\";\n
            if (!v23)\n
                goto LABEL_404fb6;\n
LABEL_404faa:\n
            cgc_free(v23);\n
LABEL_404fb6:\n
            cgc_free(v13);\n
            goto LABEL_404fc2;\n
        }\n
    }\n
    cgc_free(v13);\n
LABEL_404fec:\n
    v8 = v0;\n
LABEL_404be0:\n
    cgc_free(v8);\n
    goto LABEL_404bec;\n
}\n
", "4214166:sub_404d96": null, "4214261:sub_404df5": null, "4214748:sub_404fdc": null, "4214828:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}