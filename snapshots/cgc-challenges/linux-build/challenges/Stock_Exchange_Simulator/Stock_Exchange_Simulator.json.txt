{"4198400:_init": "extern struct_0 *g_411454;\n
\n
int _init()\n
{\n
    if (g_411454)\n
    {\n
        g_411454();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198528:sub_401080": "int sub_401080()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198534:sub_401086": null, "4198544:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198587:sub_4010bb": null, "4198588:sub_4010bc": "int sub_4010bc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198592:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198596:sub_4010c4": null, "4198608:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 66443;\n
    v6 = v5 + 10;\n
    v7 = v5 + 10;\n
    if (v7 == v6)\n
        return v5 + 10;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198659:sub_401103": "int sub_401103()\n
{\n
}\n
", "4198665:sub_401109": "int sub_401109()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198672:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 66379;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 10;\n
    v9 = (v6 + 10 - (v6 + 10) >> 31) + (10 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198743:sub_401157": "int sub_401157()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198752:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_411450;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_411450)\n
    {\n
        v0 = __dso_handle;\n
        sub_401080();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198827:sub_4011ab": "int sub_4011ab()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198832:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198841:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198845:sub_4011bd": null, "4198848:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = v2[v0];\n
    }\n
    return v0;\n
}\n
", "4198931:sub_401213": null, "4198944:cgc_strlen": "int cgc_strlen(unsigned int v2)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= 65535)\n
        {\n
            v1 = 65535;\n
            return v1;\n
        }\n
        else if (*((v2 + v0)))\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = v0;\n
            return v1;\n
        }\n
    }\n
}\n
", "4199037:sub_40127d": null, "4199040:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
\n
    v2 = v4;\n
    v1 = a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v2[v0] != *((v1 + v0)))\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4199160:sub_4012f8": null, "4199168:cgc_memclr": "int cgc_memclr(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
\n
    v1 = v2;\n
    for (v0 = 0; v0 < a0; v0 += 1)\n
    {\n
        v1[v0] = 0;\n
    }\n
    return v0;\n
}\n
", "4199234:sub_401342": null, "4199248:cgc_recv_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv_all(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 1; v3 < v6; v3 += v4)\n
    {\n
        v0 = &v4;\n
        v2 = cgc_receive(0, a0 + v3, v6 - v3);\n
        if (v2)\n
        {\n
            v5 = v2;\n
            return v5;\n
        }\n
        if (!v4)\n
        {\n
            v5 = 1;\n
            return v5;\n
        }\n
    }\n
    if (v3 != v6)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4199453:sub_40141d": null, "4199456:cgc_transmit_all": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v3 < a0)\n
        {\n
            v0 = &v4;\n
            v2 = cgc_transmit(1, v6 + v3, a0 - v3);\n
            if (v2)\n
            {\n
                v5 = v2;\n
                return v5;\n
            }\n
            if (!v4)\n
            {\n
                v5 = 1;\n
                return v5;\n
            }\n
            v3 += v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4199635:sub_4014d3": null, "4199648:cgc_init_account": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_init_account(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if ([D] GetI(136:I8x8)[t22,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t8,0] = t9\n
    [D] PutI(136:I8x8)[t8,0] = 0x01\n
    [D] PutI(136:I8x8)[t8,0] = 0x00\n
    [D] PutI(72:F64x8)[t25,0] = t28\n
    [D] PutI(136:I8x8)[t25,0] = 0x01\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[61484 + 420 * v2]) = ([D] GetI(136:I8x8)[t48,0] ? [D] GetI(72:F64x8)[t48,0] : nan);\n
    [D] PutI(136:I8x8)[t48,0] = 0x00\n
    for (v1 = 0; v1 < 32; v1 = v3)\n
    {\n
        v0[61488 + 420 * v2 + v1] = *((a1 + v1));\n
        v3 = v1 + 1;\n
    }\n
    return v3;\n
}\n
", "4199769:sub_401559": null, "4199776:cgc_next_holding": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_next_holding(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= 32)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (*((v0 + 61484 + v3 * 420 + 36 + v1 * 12 + 4)))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v0 + 61484 + v3 * 420 + 36 + v1 * 12;\n
            return v2;\n
        }\n
    }\n
}\n
", "4199926:sub_4015f6": null, "4199936:cgc_init_holding": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_ACCOUNTS;\n
\n
int cgc_init_holding(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &(&cgc_ACCOUNTS)[36 + 420 * v5 + 12 * a0];\n
    *(v3) = a2;\n
    v1 = a1;\n
    v2 = &v3[1];\n
    v7 = v4;\n
    return cgc_memcpy(v1, v2, cgc_strlen(a1));\n
}\n
", "4200062:sub_40167e": null, "4200064:cgc_init_accounts": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_402083;\n
extern unsigned int g_4056c5;\n
extern unsigned int g_40d9e1;\n
extern unsigned int g_41451e;\n
extern unsigned int g_41813f;\n
extern unsigned int g_41957f;\n
extern unsigned int g_41b09b;\n
extern unsigned int g_41be70;\n
extern unsigned int g_41e4a8;\n
extern unsigned int g_4217db;\n
extern unsigned int g_4237c4;\n
extern unsigned int g_42654a;\n
extern unsigned int g_428444;\n
extern char g_602aaa;\n
extern char g_6073e0;\n
extern char g_713805;\n
extern char g_803e90;\n
extern char g_803ea1;\n
extern char g_80725a;\n
\n
int cgc_init_accounts()\n
{\n
    char v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_init_account(0, 0x48abd000, \"f97adfe8fa275092adf100d06900aed0\");\n
    cgc_init_account(1, 1227987120, v1 - 9271);\n
    cgc_init_account(2, 1231551904, v1 - 9238);\n
    cgc_init_account(3, 0x482ed100, v1 - 9205);\n
    cgc_init_account(4, 1227430432, v1 - 9172);\n
    cgc_init_account(5, 1217089664, v1 - 9139);\n
    cgc_init_account(6, 1224445120, v1 - 9106);\n
    cgc_init_account(7, 1211622208, v1 - 9073);\n
    cgc_init_account(8, 1231795760, v1 - 9040);\n
    cgc_init_account(9, 1226192144, v1 - 9007);\n
    cgc_init_account(10, 1229660032, v1 - 8974);\n
    cgc_init_account(11, 1232120704, v1 - 8941);\n
    cgc_init_account(12, 1221009504, v1 - 8908);\n
    cgc_init_account(13, 1230150576, v1 - 8875);\n
    cgc_init_account(14, 1230678624, v1 - 8842);\n
    cgc_init_account(15, 1228195632, v1 - 8809);\n
    strncpy(&v0, \"`\\n
.I\", 4);\n
    cgc_init_account(16, 1228195632, v1 - 8776);\n
    cgc_init_account(17, 1225402096, v1 - 8743);\n
    cgc_init_account(18, 1207937408, v1 - 8710);\n
    cgc_init_account(19, 1224756592, v1 - 8677);\n
    cgc_init_account(20, 1212091072, v1 - 8644);\n
    cgc_init_account(21, 0x46f21200, v1 - 8611);\n
    cgc_init_account(22, 1229863568, v1 - 8578);\n
    cgc_init_account(23, 1208955200, v1 - 8545);\n
    cgc_init_account(24, 0x47c67e00, v1 - 8512);\n
    cgc_init_account(25, 1223604064, v1 - 8479);\n
    cgc_init_account(26, 1225398064, v1 - 8446);\n
    cgc_init_account(27, 1226744960, v1 - 8413);\n
    cgc_init_account(28, 1211447168, v1 - 8380);\n
    cgc_init_account(29, 1220317632, v1 - 8347);\n
    cgc_init_account(30, 1220942496, v1 - 8314);\n
    cgc_init_account(31, 1222661280, v1 - 8281);\n
    cgc_init_account(32, 1227817392, v1 - 8248);\n
    cgc_init_account(33, 1231588320, v1 - 8215);\n
    cgc_init_account(34, 0x46aa3a00, v1 - 8182);\n
    cgc_init_account(35, 0x48a8aa00, v1 - 8149);\n
    cgc_init_account(36, 1222761440, v1 - 8116);\n
    cgc_init_account(37, 0x46cc3a00, v1 - 8083);\n
    cgc_init_account(38, 1228030992, v1 - 8050);\n
    cgc_init_account(39, 0x47aef800, v1 - 8017);\n
    cgc_init_account(40, 1226048496, v1 - 7984);\n
    cgc_init_account(41, 1223838912, v1 - 7951);\n
    cgc_init_account(42, 1208194112, v1 - 7918);\n
    cgc_init_account(43, 0x476e6d00, v1 - 7885);\n
    cgc_init_account(44, 1220419392, v1 - 7852);\n
    strncpy(&v0, \"@~tH\", 4);\n
    cgc_init_account(45, 1220419392, v1 - 7819);\n
    cgc_init_account(46, 0x473f0c00, v1 - 7786);\n
    cgc_init_account(47, 1230908848, v1 - 7753);\n
    cgc_init_account(48, 1227254240, v1 - 7720);\n
    cgc_init_account(49, 1231847984, v1 - 7687);\n
    cgc_init_account(50, 1232142704, v1 - 7654);\n
    cgc_init_account(51, 1229077904, v1 - 7621);\n
    cgc_init_account(52, 1231288784, v1 - 7588);\n
    cgc_init_account(53, 0x49038200, v1 - 7555);\n
    strncpy(&v0, \"@\\reH\", 4);\n
    cgc_init_account(54, 0x49038200, v1 - 7522);\n
    cgc_init_account(55, 1223719232, v1 - 7489);\n
    cgc_init_account(56, 1223903264, v1 - 7456);\n
    cgc_init_account(57, 1217295680, v1 - 7423);\n
    cgc_init_account(58, 1230761024, v1 - 7390);\n
    cgc_init_account(59, 1229426032, v1 - 7357);\n
    cgc_init_account(60, 1225129376, v1 - 7324);\n
    cgc_init_account(61, 1218799968, v1 - 7291);\n
    cgc_init_account(62, 1226148336, v1 - 7258);\n
    cgc_init_account(63, 1215449280, v1 - 7225);\n
    cgc_init_account(64, 1208378688, v1 - 7192);\n
    cgc_init_account(65, 1225979920, v1 - 7159);\n
    cgc_init_account(66, 0x495aa700, v1 - 7126);\n
    cgc_init_account(67, 1229367872, v1 - 7093);\n
    cgc_init_account(68, 1230792832, v1 - 7060);\n
    cgc_init_account(69, 1232038352, v1 - 7027);\n
    cgc_init_account(70, 1227831712, v1 - 6994);\n
    cgc_init_account(71, 1219802304, v1 - 6961);\n
    cgc_init_account(72, 1231134112, v1 - 6928);\n
    cgc_init_account(73, 1218055872, v1 - 6895);\n
    strncpy(&v0, \"P&EI\", 4);\n
    cgc_init_account(74, 1218055872, v1 - 6862);\n
    cgc_init_account(75, 1228428240, v1 - 6829);\n
    cgc_init_account(76, 1225498416, v1 - 6796);\n
    cgc_init_account(77, 1231016000, v1 - 6763);\n
    cgc_init_account(78, 1216301952, v1 - 6730);\n
    strncpy(&v0, \"@)$I\", 4);\n
    cgc_init_account(79, 1216301952, v1 - 6697);\n
    cgc_init_account(80, 1229745584, v1 - 6664);\n
    cgc_init_account(81, 0x4726e100, v1 - 6631);\n
    cgc_init_account(82, 1221501920, v1 - 6598);\n
    cgc_init_account(83, 0x493d2200, v1 - 6565);\n
    cgc_init_account(84, 1229867184, v1 - 6532);\n
    cgc_init_account(85, 1221186272, v1 - 6499);\n
    cgc_init_account(86, 1217910400, v1 - 6466);\n
    cgc_init_account(87, 1216374976, v1 - 6433);\n
    cgc_init_account(88, 0x47ecca00, v1 - 0x1900);\n
    cgc_init_account(89, 1218327488, v1 - 6367);\n
    cgc_init_account(90, 0x47e86200, v1 - 6334);\n
    cgc_init_account(91, 1210495296, v1 - 6301);\n
    cgc_init_account(92, 1217999232, v1 - 6268);\n
    cgc_init_account(93, 1218591840, v1 - 6235);\n
    cgc_init_account(94, 1227985136, v1 - 6202);\n
    cgc_init_account(95, 1221918400, v1 - 6169);\n
    cgc_init_account(96, 1231681920, v1 - 6136);\n
    cgc_init_account(97, 0x47376200, v1 - 6103);\n
    cgc_init_account(98, 0x4865fe00, v1 - 6070);\n
    cgc_init_account(99, 1229902272, v1 - 6037);\n
    cgc_init_holding(0, 0, v1 - 6004, 12697418);\n
    cgc_init_holding(0, 1, v1 - 5999, 13609627);\n
    cgc_init_holding(0, 2, v1 - 5993, 5962175);\n
    cgc_init_holding(0, 3, v1 - 5987, 2164075);\n
    cgc_init_holding(0, 4, v1 - 5981, 7107186);\n
    cgc_init_holding(0, 5, v1 - 5976, 9147668);\n
    cgc_init_holding(0, 6, v1 - 5972, -1);\n
    cgc_init_holding(0, 7, v1 - 5966, 12454340);\n
    cgc_init_holding(0, 8, v1 - 5961, 13645664);\n
    cgc_init_holding(0, 9, v1 - 5955, 9417541);\n
    cgc_init_holding(0, 10, v1 - 5948, 10179641);\n
    cgc_init_holding(1, 0, v1 - 6004, 12929200);\n
    cgc_init_holding(1, 1, v1 - 5999, 14026567);\n
    cgc_init_holding(1, 2, v1 - 5993, 16257266);\n
    cgc_init_holding(1, 3, v1 - 5987, 1501564);\n
    cgc_init_holding(1, 4, v1 - 5981, 6155379);\n
    cgc_init_holding(1, 5, v1 - 5976, 16460465);\n
    cgc_init_holding(1, 6, v1 - 5972, -1);\n
    cgc_init_holding(1, 7, v1 - 5966, 10590440);\n
    cgc_init_holding(1, 8, v1 - 5961, 4065689);\n
    cgc_init_holding(1, 9, v1 - 5955, 12342544);\n
    cgc_init_holding(1, 10, v1 - 5948, 13571855);\n
    cgc_init_holding(2, 0, v1 - 6004, 9562695);\n
    cgc_init_holding(2, 1, v1 - 5999, -1);\n
    cgc_init_holding(2, 2, v1 - 5993, 8335444);\n
    cgc_init_holding(2, 3, v1 - 5987, 3689543);\n
    cgc_init_holding(2, 4, v1 - 5981, 11318699);\n
    cgc_init_holding(2, 5, v1 - 5976, 15206633);\n
    cgc_init_holding(2, 6, v1 - 5972, 6387741);\n
    cgc_init_holding(2, 7, v1 - 5966, 15315607);\n
    cgc_init_holding(2, 8, v1 - 5961, 15930862);\n
    cgc_init_holding(2, 9, v1 - 5955, 1207764);\n
    cgc_init_holding(2, 10, v1 - 5948, 6822811);\n
    cgc_init_holding(3, 0, v1 - 6004, 13230134);\n
    cgc_init_holding(3, 1, v1 - 5999, 6577574);\n
    cgc_init_holding(3, 2, v1 - 5993, 7860633);\n
    cgc_init_holding(3, 3, v1 - 5987, 6681541);\n
    cgc_init_holding(3, 4, v1 - 5981, 4580790);\n
    cgc_init_holding(3, 5, v1 - 5976, 5084198);\n
    cgc_init_holding(3, 6, v1 - 5972, -1);\n
    cgc_init_holding(3, 7, v1 - 5966, 7264059);\n
    cgc_init_holding(3, 8, v1 - 5961, 3060599);\n
    cgc_init_holding(3, 9, v1 - 5955, 4860182);\n
    cgc_init_holding(3, 10, v1 - 5948, 11247052);\n
    cgc_init_holding(4, 0, v1 - 6004, 15570477);\n
    cgc_init_holding(4, 1, v1 - 5999, 3432318);\n
    cgc_init_holding(4, 2, v1 - 5993, 12741618);\n
    cgc_init_holding(4, 3, v1 - 5987, 3172918);\n
    cgc_init_holding(4, 4, v1 - 5981, 7604478);\n
    cgc_init_holding(4, 5, v1 - 5976, 6492051);\n
    cgc_init_holding(4, 6, v1 - 5972, 6761905);\n
    cgc_init_holding(4, 7, v1 - 5966, -1);\n
    cgc_init_holding(4, 8, v1 - 5961, 9215083);\n
    cgc_init_holding(4, 9, v1 - 5955, 11751177);\n
    cgc_init_holding(4, 10, v1 - 5948, 6121063);\n
    cgc_init_holding(5, 0, v1 - 6004, 16767060);\n
    cgc_init_holding(5, 1, v1 - 5999, 3120718);\n
    cgc_init_holding(5, 2, v1 - 5993, 2222454);\n
    cgc_init_holding(5, 3, v1 - 5987, 15925974);\n
    cgc_init_holding(5, 4, v1 - 5981, 9007607);\n
    cgc_init_holding(5, 5, v1 - 5976, 3734544);\n
    cgc_init_holding(5, 6, v1 - 5972, -1);\n
    cgc_init_holding(5, 7, v1 - 5966, 9858813);\n
    cgc_init_holding(5, 8, v1 - 5961, 1140598);\n
    cgc_init_holding(5, 9, v1 - 5955, 14471737);\n
    cgc_init_holding(5, 10, v1 - 5948, 5019638);\n
    cgc_init_holding(6, 0, v1 - 6004, 6875083);\n
    cgc_init_holding(6, 1, v1 - 5999, -1);\n
    cgc_init_holding(6, 2, v1 - 5993, 10347720);\n
    cgc_init_holding(6, 3, v1 - 5987, 3731967);\n
    cgc_init_holding(6, 4, v1 - 5981, 13351890);\n
    cgc_init_holding(6, 5, v1 - 5976, 1050721);\n
    cgc_init_holding(6, 6, v1 - 5972, 1875851);\n
    cgc_init_holding(6, 7, v1 - 5966, &g_41b09b);\n
    cgc_init_holding(6, 8, v1 - 5961, 16431291);\n
    cgc_init_holding(6, 9, v1 - 5955, 15860601);\n
    cgc_init_holding(6, 10, v1 - 5948, 6882954);\n
    cgc_init_holding(7, 0, v1 - 6004, 16635781);\n
    cgc_init_holding(7, 1, v1 - 5999, 10306122);\n
    cgc_init_holding(7, 2, v1 - 5993, 7533549);\n
    cgc_init_holding(7, 3, v1 - 5987, 11826853);\n
    cgc_init_holding(7, 4, v1 - 5981, 16602355);\n
    cgc_init_holding(7, 5, v1 - 5976, 5836793);\n
    cgc_init_holding(7, 6, v1 - 5972, -1);\n
    cgc_init_holding(7, 7, v1 - 5966, 11905535);\n
    cgc_init_holding(7, 8, v1 - 5961, 12145804);\n
    cgc_init_holding(7, 9, v1 - 5955, 13676509);\n
    cgc_init_holding(7, 10, v1 - 5948, 10686102);\n
    cgc_init_holding(8, 0, v1 - 6004, 11880185);\n
    cgc_init_holding(8, 1, v1 - 5999, 5848188);\n
    cgc_init_holding(8, 2, v1 - 5993, 3691309);\n
    cgc_init_holding(8, 3, v1 - 5987, 14501760);\n
    cgc_init_holding(8, 4, v1 - 5981, 12428824);\n
    cgc_init_holding(8, 5, v1 - 5976, 4757678);\n
    cgc_init_holding(8, 6, v1 - 5972, 2714757);\n
    cgc_init_holding(8, 7, v1 - 5966, -1);\n
    cgc_init_holding(8, 8, v1 - 5961, 13154036);\n
    cgc_init_holding(8, 9, v1 - 5955, 1984745);\n
    cgc_init_holding(8, 10, v1 - 5948, 10440271);\n
    cgc_init_holding(9, 0, v1 - 6004, 2806291);\n
    cgc_init_holding(9, 1, v1 - 5999, 2472935);\n
    cgc_init_holding(9, 2, v1 - 5993, 10294218);\n
    cgc_init_holding(9, 3, v1 - 5987, 1667285);\n
    cgc_init_holding(9, 4, v1 - 5981, 12327449);\n
    cgc_init_holding(9, 5, v1 - 5976, 5585729);\n
    cgc_init_holding(9, 6, v1 - 5972, -1);\n
    cgc_init_holding(9, 7, v1 - 5966, 7133955);\n
    cgc_init_holding(9, 8, v1 - 5961, 3133595);\n
    cgc_init_holding(9, 9, v1 - 5955, 11437347);\n
    cgc_init_holding(9, 10, v1 - 5948, 2946842);\n
    cgc_init_holding(10, 0, v1 - 6004, 15636185);\n
    cgc_init_holding(10, 1, v1 - 5999, 3810043);\n
    cgc_init_holding(10, 2, v1 - 5993, 1757482);\n
    cgc_init_holding(10, 3, v1 - 5987, 7349362);\n
    cgc_init_holding(10, 4, v1 - 5981, 2772326);\n
    cgc_init_holding(10, 5, v1 - 5976, 6657587);\n
    cgc_init_holding(10, 6, v1 - 5972, 4557832);\n
    cgc_init_holding(10, 7, v1 - 5966, -1);\n
    cgc_init_holding(10, 8, v1 - 5961, 1007084);\n
    cgc_init_holding(10, 9, v1 - 5955, 11768340);\n
    cgc_init_holding(10, 10, v1 - 5948, 14135472);\n
    cgc_init_holding(11, 0, v1 - 6004, 8960182);\n
    cgc_init_holding(11, 1, v1 - 5999, -1);\n
    cgc_init_holding(11, 2, v1 - 5993, 12269480);\n
    cgc_init_holding(11, 3, v1 - 5987, 11421740);\n
    cgc_init_holding(11, 4, v1 - 5981, 9016835);\n
    cgc_init_holding(11, 5, v1 - 5976, 11283725);\n
    cgc_init_holding(11, 6, v1 - 5972, 3155420);\n
    cgc_init_holding(11, 7, v1 - 5966, 14404065);\n
    cgc_init_holding(11, 8, v1 - 5961, 6893048);\n
    cgc_init_holding(11, 9, v1 - 5955, 13478505);\n
    cgc_init_holding(11, 10, v1 - 5948, 14703193);\n
    cgc_init_holding(12, 0, v1 - 6004, 11688733);\n
    cgc_init_holding(12, 1, v1 - 5999, 13295258);\n
    cgc_init_holding(12, 2, v1 - 5993, 15108918);\n
    cgc_init_holding(12, 3, v1 - 5987, 14035081);\n
    cgc_init_holding(12, 4, v1 - 5981, 16044264);\n
    cgc_init_holding(12, 5, v1 - 5976, 16391840);\n
    cgc_init_holding(12, 6, v1 - 5972, -1);\n
    cgc_init_holding(12, 7, v1 - 5966, 12502629);\n
    cgc_init_holding(12, 8, v1 - 5961, 12604407);\n
    cgc_init_holding(12, 9, v1 - 5955, 10121798);\n
    cgc_init_holding(12, 10, v1 - 5948, 9433220);\n
    cgc_init_holding(13, 0, v1 - 6004, 11524495);\n
    cgc_init_holding(13, 1, v1 - 5999, 1168846);\n
    cgc_init_holding(13, 2, v1 - 5993, 3230299);\n
    cgc_init_holding(13, 3, v1 - 5987, 2193972);\n
    cgc_init_holding(13, 4, v1 - 5981, 8841774);\n
    cgc_init_holding(13, 5, v1 - 5976, 5088434);\n
    cgc_init_holding(13, 6, v1 - 5972, -1);\n
    cgc_init_holding(13, 7, v1 - 5966, 11436443);\n
    cgc_init_holding(13, 8, v1 - 5961, 6832703);\n
    cgc_init_holding(13, 9, v1 - 5955, 1615197);\n
    cgc_init_holding(13, 10, v1 - 5948, 14707618);\n
    cgc_init_holding(14, 0, v1 - 6004, 11979219);\n
    cgc_init_holding(14, 1, v1 - 5999, -1);\n
    cgc_init_holding(14, 2, v1 - 5993, 4503091);\n
    cgc_init_holding(14, 3, v1 - 5987, 10393294);\n
    cgc_init_holding(14, 4, v1 - 5981, 13581203);\n
    cgc_init_holding(14, 5, v1 - 5976, 15458811);\n
    cgc_init_holding(14, 6, v1 - 5972, 1351048);\n
    cgc_init_holding(14, 7, v1 - 5966, 11574131);\n
    cgc_init_holding(14, 8, v1 - 5961, 9216316);\n
    cgc_init_holding(14, 9, v1 - 5955, 7530688);\n
    cgc_init_holding(14, 10, v1 - 5948, 1355327);\n
    cgc_init_holding(15, 0, v1 - 6004, 3608426);\n
    cgc_init_holding(15, 1, v1 - 5999, -1);\n
    cgc_init_holding(15, 2, v1 - 5993, 6898679);\n
    cgc_init_holding(15, 3, v1 - 5987, 3984264);\n
    cgc_init_holding(15, 4, v1 - 5981, 5892330);\n
    cgc_init_holding(15, 5, v1 - 5976, 16657794);\n
    cgc_init_holding(15, 6, v1 - 5972, 3241989);\n
    cgc_init_holding(15, 7, v1 - 5966, 1396362);\n
    cgc_init_holding(15, 8, v1 - 5961, 5049554);\n
    cgc_init_holding(15, 9, v1 - 5955, 14805136);\n
    cgc_init_holding(15, 10, v1 - 5948, 15810129);\n
    cgc_init_holding(16, 0, v1 - 6004, 10472799);\n
    cgc_init_holding(16, 1, v1 - 5999, 11170086);\n
    cgc_init_holding(16, 2, v1 - 5993, 13261757);\n
    cgc_init_holding(16, 3, v1 - 5987, &g_41451e);\n
    cgc_init_holding(16, 4, v1 - 5981, 13749354);\n
    cgc_init_holding(16, 5, v1 - 5976, 5570437);\n
    cgc_init_holding(16, 6, v1 - 5972, -1);\n
    cgc_init_holding(16, 7, v1 - 5966, 10770226);\n
    cgc_init_holding(16, 8, v1 - 5961, 6944056);\n
    cgc_init_holding(16, 9, v1 - 5955, 10885405);\n
    cgc_init_holding(16, 10, v1 - 5948, 7438621);\n
    cgc_init_holding(17, 0, v1 - 6004, 1160878);\n
    cgc_init_holding(17, 1, v1 - 5999, 10548236);\n
    cgc_init_holding(17, 2, v1 - 5993, 1045249);\n
    cgc_init_holding(17, 3, v1 - 5987, 1080544);\n
    cgc_init_holding(17, 4, v1 - 5981, 14443389);\n
    cgc_init_holding(17, 5, v1 - 5976, 15469281);\n
    cgc_init_holding(17, 6, v1 - 5972, -1);\n
    cgc_init_holding(17, 7, v1 - 5966, 5223098);\n
    cgc_init_holding(17, 8, v1 - 5961, 9362632);\n
    cgc_init_holding(17, 9, v1 - 5955, 3557867);\n
    cgc_init_holding(17, 10, v1 - 5948, 3424844);\n
    cgc_init_holding(18, 0, v1 - 6004, 10955106);\n
    cgc_init_holding(18, 1, v1 - 5999, 6616950);\n
    cgc_init_holding(18, 2, v1 - 5993, 12400890);\n
    cgc_init_holding(18, 3, v1 - 5987, 7731846);\n
    cgc_init_holding(18, 4, v1 - 5981, 10431312);\n
    cgc_init_holding(18, 5, v1 - 5976, 7502579);\n
    cgc_init_holding(18, 6, v1 - 5972, 9146814);\n
    cgc_init_holding(18, 7, v1 - 5966, -1);\n
    cgc_init_holding(18, 8, v1 - 5961, 5557237);\n
    cgc_init_holding(18, 9, v1 - 5955, 12472140);\n
    cgc_init_holding(18, 10, v1 - 5948, 10605366);\n
    cgc_init_holding(19, 0, v1 - 6004, 11682743);\n
    cgc_init_holding(19, 1, v1 - 5999, 12213053);\n
    cgc_init_holding(19, 2, v1 - 5993, 13150087);\n
    cgc_init_holding(19, 3, v1 - 5987, 1058239);\n
    cgc_init_holding(19, 4, v1 - 5981, 11739330);\n
    cgc_init_holding(19, 5, v1 - 5976, 8524322);\n
    cgc_init_holding(19, 6, v1 - 5972, -1);\n
    cgc_init_holding(19, 7, v1 - 5966, 6767717);\n
    cgc_init_holding(19, 8, v1 - 5961, 16382912);\n
    cgc_init_holding(19, 9, v1 - 5955, 7020133);\n
    cgc_init_holding(19, 10, v1 - 5948, 10949651);\n
    cgc_init_holding(20, 0, v1 - 6004, 6361454);\n
    cgc_init_holding(20, 1, v1 - 5999, 10624090);\n
    cgc_init_holding(20, 2, v1 - 5993, 9729863);\n
    cgc_init_holding(20, 3, v1 - 5987, 5489966);\n
    cgc_init_holding(20, 4, v1 - 5981, 1644367);\n
    cgc_init_holding(20, 5, v1 - 5976, 13704543);\n
    cgc_init_holding(20, 6, v1 - 5972, 13296132);\n
    cgc_init_holding(20, 7, v1 - 5966, -1);\n
    cgc_init_holding(20, 8, v1 - 5961, 12534300);\n
    cgc_init_holding(20, 9, v1 - 5955, 3314227);\n
    cgc_init_holding(20, 10, v1 - 5948, 8091103);\n
    cgc_init_holding(21, 0, v1 - 6004, 15116102);\n
    cgc_init_holding(21, 1, v1 - 5999, -1);\n
    cgc_init_holding(21, 2, v1 - 5993, 7163303);\n
    cgc_init_holding(21, 3, v1 - 5987, 2411851);\n
    cgc_init_holding(21, 4, v1 - 5981, 1282178);\n
    cgc_init_holding(21, 5, v1 - 5976, 3917628);\n
    cgc_init_holding(21, 6, v1 - 5972, 10812358);\n
    cgc_init_holding(21, 7, v1 - 5966, 15979282);\n
    cgc_init_holding(21, 8, v1 - 5961, 9688700);\n
    cgc_init_holding(21, 9, v1 - 5955, 7870488);\n
    cgc_init_holding(21, 10, v1 - 5948, 6164509);\n
    cgc_init_holding(22, 0, v1 - 6004, 4077423);\n
    cgc_init_holding(22, 1, v1 - 5999, -1);\n
    cgc_init_holding(22, 2, v1 - 5993, 9445055);\n
    cgc_init_holding(22, 3, v1 - 5987, 12406389);\n
    cgc_init_holding(22, 4, v1 - 5981, 13620598);\n
    cgc_init_holding(22, 5, v1 - 5976, 3267007);\n
    cgc_init_holding(22, 6, v1 - 5972, 4471790);\n
    cgc_init_holding(22, 7, v1 - 5966, 13305435);\n
    cgc_init_holding(22, 8, v1 - 5961, 4483329);\n
    cgc_init_holding(22, 9, v1 - 5955, 5539467);\n
    cgc_init_holding(22, 10, v1 - 5948, 16179529);\n
    cgc_init_holding(23, 0, v1 - 6004, 15257167);\n
    cgc_init_holding(23, 1, v1 - 5999, 4086382);\n
    cgc_init_holding(23, 2, v1 - 5993, 10537523);\n
    cgc_init_holding(23, 3, v1 - 5987, 1924550);\n
    cgc_init_holding(23, 4, v1 - 5981, 7884583);\n
    cgc_init_holding(23, 5, v1 - 5976, 7048308);\n
    cgc_init_holding(23, 6, v1 - 5972, -1);\n
    cgc_init_holding(23, 7, v1 - 5966, 6235064);\n
    cgc_init_holding(23, 8, v1 - 5961, 2426566);\n
    cgc_init_holding(23, 9, v1 - 5955, 15526648);\n
    cgc_init_holding(23, 10, v1 - 5948, 6321120);\n
    cgc_init_holding(24, 0, v1 - 6004, 1065341);\n
    cgc_init_holding(24, 1, v1 - 5999, 11509928);\n
    cgc_init_holding(24, 2, v1 - 5993, 2120379);\n
    cgc_init_holding(24, 3, v1 - 5987, 8701824);\n
    cgc_init_holding(24, 4, v1 - 5981, 9024411);\n
    cgc_init_holding(24, 5, v1 - 5976, 16086740);\n
    cgc_init_holding(24, 6, v1 - 5972, -1);\n
    cgc_init_holding(24, 7, v1 - 5966, 11273924);\n
    cgc_init_holding(24, 8, v1 - 5961, 8791335);\n
    cgc_init_holding(24, 9, v1 - 5955, 8773724);\n
    cgc_init_holding(24, 10, v1 - 5948, 15272393);\n
    cgc_init_holding(25, 0, v1 - 6004, 4140026);\n
    cgc_init_holding(25, 1, v1 - 5999, 1454170);\n
    cgc_init_holding(25, 2, v1 - 5993, 5145732);\n
    cgc_init_holding(25, 3, v1 - 5987, 9224234);\n
    cgc_init_holding(25, 4, v1 - 5981, 8689009);\n
    cgc_init_holding(25, 5, v1 - 5976, 16382073);\n
    cgc_init_holding(25, 6, v1 - 5972, -1);\n
    cgc_init_holding(25, 7, v1 - 5966, 6269156);\n
    cgc_init_holding(25, 8, v1 - 5961, 13240935);\n
    cgc_init_holding(25, 9, v1 - 5955, 14765083);\n
    cgc_init_holding(25, 10, v1 - 5948, 4798408);\n
    cgc_init_holding(26, 0, v1 - 6004, 2784024);\n
    cgc_init_holding(26, 1, v1 - 5999, 13549293);\n
    cgc_init_holding(26, 2, v1 - 5993, 2667817);\n
    cgc_init_holding(26, 3, v1 - 5987, 3492991);\n
    cgc_init_holding(26, 4, v1 - 5981, 3847288);\n
    cgc_init_holding(26, 5, v1 - 5976, 5313095);\n
    cgc_init_holding(26, 6, v1 - 5972, 6009818);\n
    cgc_init_holding(26, 7, v1 - 5966, -1);\n
    cgc_init_holding(26, 8, v1 - 5961, 8466828);\n
    cgc_init_holding(26, 9, v1 - 5955, 1507424);\n
    cgc_init_holding(26, 10, v1 - 5948, 14210083);\n
    cgc_init_holding(27, 0, v1 - 6004, 8770132);\n
    cgc_init_holding(27, 1, v1 - 5999, -1);\n
    cgc_init_holding(27, 2, v1 - 5993, 7530052);\n
    cgc_init_holding(27, 3, v1 - 5987, 9274559);\n
    cgc_init_holding(27, 4, v1 - 5981, 16244414);\n
    cgc_init_holding(27, 5, v1 - 5976, 13591144);\n
    cgc_init_holding(27, 6, v1 - 5972, 12820445);\n
    cgc_init_holding(27, 7, v1 - 5966, 7494192);\n
    cgc_init_holding(27, 8, v1 - 5961, 3214744);\n
    cgc_init_holding(27, 9, v1 - 5955, 9732092);\n
    cgc_init_holding(27, 10, v1 - 5948, 5384540);\n
    cgc_init_holding(28, 0, v1 - 6004, 14101661);\n
    cgc_init_holding(28, 1, v1 - 5999, 9880693);\n
    cgc_init_holding(28, 2, v1 - 5993, 4824828);\n
    cgc_init_holding(28, 3, v1 - 5987, 6640789);\n
    cgc_init_holding(28, 4, v1 - 5981, 5985061);\n
    cgc_init_holding(28, 5, v1 - 5976, 12082003);\n
    cgc_init_holding(28, 6, v1 - 5972, -1);\n
    cgc_init_holding(28, 7, v1 - 5966, 11992980);\n
    cgc_init_holding(28, 8, v1 - 5961, 6663090);\n
    cgc_init_holding(28, 9, v1 - 5955, 15536331);\n
    cgc_init_holding(28, 10, v1 - 5948, 1693762);\n
    cgc_init_holding(29, 0, v1 - 6004, 2499199);\n
    cgc_init_holding(29, 1, v1 - 5999, 4406436);\n
    cgc_init_holding(29, 2, v1 - 5993, 14519628);\n
    cgc_init_holding(29, 3, v1 - 5987, 7419909);\n
    cgc_init_holding(29, 4, v1 - 5981, 10165991);\n
    cgc_init_holding(29, 5, v1 - 5976, 4372799);\n
    cgc_init_holding(29, 6, v1 - 5972, 6544820);\n
    cgc_init_holding(29, 7, v1 - 5966, -1);\n
    cgc_init_holding(29, 8, v1 - 5961, 16537451);\n
    cgc_init_holding(29, 9, v1 - 5955, 1716661);\n
    cgc_init_holding(29, 10, v1 - 5948, 5788997);\n
    cgc_init_holding(30, 0, v1 - 6004, 6611019);\n
    cgc_init_holding(30, 1, v1 - 5999, 12997587);\n
    cgc_init_holding(30, 2, v1 - 5993, 1091133);\n
    cgc_init_holding(30, 3, v1 - 5987, 15135738);\n
    cgc_init_holding(30, 4, v1 - 5981, 8348263);\n
    cgc_init_holding(30, 5, v1 - 5976, 4912346);\n
    cgc_init_holding(30, 6, v1 - 5972, 4385542);\n
    cgc_init_holding(30, 7, v1 - 5966, -1);\n
    cgc_init_holding(30, 8, v1 - 5961, 15877165);\n
    cgc_init_holding(30, 9, v1 - 5955, 15099072);\n
    cgc_init_holding(30, 10, v1 - 5948, 1874078);\n
    cgc_init_holding(31, 0, v1 - 6004, 16304977);\n
    cgc_init_holding(31, 1, v1 - 5999, -1);\n
    cgc_init_holding(31, 2, v1 - 5993, 5052570);\n
    cgc_init_holding(31, 3, v1 - 5987, 2877027);\n
    cgc_init_holding(31, 4, v1 - 5981, &g_41be70);\n
    cgc_init_holding(31, 5, v1 - 5976, 1627498);\n
    cgc_init_holding(31, 6, v1 - 5972, 3976235);\n
    cgc_init_holding(31, 7, v1 - 5966, 9268624);\n
    cgc_init_holding(31, 8, v1 - 5961, 5030385);\n
    cgc_init_holding(31, 9, v1 - 5955, 3795706);\n
    cgc_init_holding(31, 10, v1 - 5948, 5022202);\n
    cgc_init_holding(32, 0, v1 - 6004, 16145286);\n
    cgc_init_holding(32, 1, v1 - 5999, 15701401);\n
    cgc_init_holding(32, 2, v1 - 5993, 7052302);\n
    cgc_init_holding(32, 3, v1 - 5987, 8553136);\n
    cgc_init_holding(32, 4, v1 - 5981, 14804565);\n
    cgc_init_holding(32, 5, v1 - 5976, 7324258);\n
    cgc_init_holding(32, 6, v1 - 5972, -1);\n
    cgc_init_holding(32, 7, v1 - 5966, 10434500);\n
    cgc_init_holding(32, 8, v1 - 5961, 14462869);\n
    cgc_init_holding(32, 9, v1 - 5955, 13583913);\n
    cgc_init_holding(32, 10, v1 - 5948, 10595086);\n
    cgc_init_holding(33, 0, v1 - 6004, 13202499);\n
    cgc_init_holding(33, 1, v1 - 5999, -1);\n
    cgc_init_holding(33, 2, v1 - 5993, 12766986);\n
    cgc_init_holding(33, 3, v1 - 5987, 12046145);\n
    cgc_init_holding(33, 4, v1 - 5981, 11015974);\n
    cgc_init_holding(33, 5, v1 - 5976, 16370510);\n
    cgc_init_holding(33, 6, v1 - 5972, 3796352);\n
    cgc_init_holding(33, 7, v1 - 5966, 13760909);\n
    cgc_init_holding(33, 8, v1 - 5961, 15326706);\n
    cgc_init_holding(33, 9, v1 - 5955, 1693165);\n
    cgc_init_holding(33, 10, v1 - 5948, 6146198);\n
    cgc_init_holding(34, 0, v1 - 6004, 14201410);\n
    cgc_init_holding(34, 1, v1 - 5999, 8511288);\n
    cgc_init_holding(34, 2, v1 - 5993, 1063994);\n
    cgc_init_holding(34, 3, v1 - 5987, 6268552);\n
    cgc_init_holding(34, 4, v1 - 5981, 15198355);\n
    cgc_init_holding(34, 5, v1 - 5976, 15873769);\n
    cgc_init_holding(34, 6, v1 - 5972, -1);\n
    cgc_init_holding(34, 7, v1 - 5966, 6637311);\n
    cgc_init_holding(34, 8, v1 - 5961, 0xf88b00);\n
    cgc_init_holding(34, 9, v1 - 5955, 10642319);\n
    cgc_init_holding(34, 10, v1 - 5948, 7302469);\n
    cgc_init_holding(35, 0, v1 - 6004, 16050794);\n
    cgc_init_holding(35, 1, v1 - 5999, -1);\n
    cgc_init_holding(35, 2, v1 - 5993, 3856488);\n
    cgc_init_holding(35, 3, v1 - 5987, 4569063);\n
    cgc_init_holding(35, 4, v1 - 5981, 15567455);\n
    cgc_init_holding(35, 5, v1 - 5976, 2392423);\n
    cgc_init_holding(35, 6, v1 - 5972, 16498540);\n
    cgc_init_holding(35, 7, v1 - 5966, 5971020);\n
    cgc_init_holding(35, 8, v1 - 5961, &g_4217db);\n
    cgc_init_holding(35, 9, v1 - 5955, 15865335);\n
    cgc_init_holding(35, 10, v1 - 5948, 11754313);\n
    cgc_init_holding(36, 0, v1 - 6004, 2479175);\n
    cgc_init_holding(36, 1, v1 - 5999, -1);\n
    cgc_init_holding(36, 2, v1 - 5993, 3822240);\n
    cgc_init_holding(36, 3, v1 - 5987, 11635880);\n
    cgc_init_holding(36, 4, v1 - 5981, 8990382);\n
    cgc_init_holding(36, 5, v1 - 5976, 1264252);\n
    cgc_init_holding(36, 6, v1 - 5972, 2171273);\n
    cgc_init_holding(36, 7, v1 - 5966, 9414321);\n
    cgc_init_holding(36, 8, v1 - 5961, 14730966);\n
    cgc_init_holding(36, 9, v1 - 5955, 7244390);\n
    cgc_init_holding(36, 10, v1 - 5948, 8947020);\n
    cgc_init_holding(37, 0, v1 - 6004, 15679785);\n
    cgc_init_holding(37, 1, v1 - 5999, 8646879);\n
    cgc_init_holding(37, 2, v1 - 5993, 8806663);\n
    cgc_init_holding(37, 3, v1 - 5987, 5198906);\n
    cgc_init_holding(37, 4, v1 - 5981, 12170318);\n
    cgc_init_holding(37, 5, v1 - 5976, 8386977);\n
    cgc_init_holding(37, 6, v1 - 5972, -1);\n
    cgc_init_holding(37, 7, v1 - 5966, 11035897);\n
    cgc_init_holding(37, 8, v1 - 5961, 7972249);\n
    cgc_init_holding(37, 9, v1 - 5955, 9495625);\n
    cgc_init_holding(37, 10, v1 - 5948, 14516338);\n
    cgc_init_holding(38, 0, v1 - 6004, 15969557);\n
    cgc_init_holding(38, 1, v1 - 5999, 13218669);\n
    cgc_init_holding(38, 2, v1 - 5993, 6567289);\n
    cgc_init_holding(38, 3, v1 - 5987, 13161176);\n
    cgc_init_holding(38, 4, v1 - 5981, 12798783);\n
    cgc_init_holding(38, 5, v1 - 5976, 4921208);\n
    cgc_init_holding(38, 6, v1 - 5972, -1);\n
    cgc_init_holding(38, 7, v1 - 5966, 6433043);\n
    cgc_init_holding(38, 8, v1 - 5961, 14405305);\n
    cgc_init_holding(38, 9, v1 - 5955, 2158462);\n
    cgc_init_holding(38, 10, v1 - 5948, 13782478);\n
    cgc_init_holding(39, 0, v1 - 6004, 4860109);\n
    cgc_init_holding(39, 1, v1 - 5999, -1);\n
    cgc_init_holding(39, 2, v1 - 5993, 1571076);\n
    cgc_init_holding(39, 3, v1 - 5987, 13933799);\n
    cgc_init_holding(39, 4, v1 - 5981, 7004055);\n
    cgc_init_holding(39, 5, v1 - 5976, 12118951);\n
    cgc_init_holding(39, 6, v1 - 5972, 11810231);\n
    cgc_init_holding(39, 7, v1 - 5966, 14670828);\n
    cgc_init_holding(39, 8, v1 - 5961, &g_41957f);\n
    cgc_init_holding(39, 9, v1 - 5955, 3730513);\n
    cgc_init_holding(39, 10, v1 - 5948, 3767108);\n
    cgc_init_holding(40, 0, v1 - 6004, 4822938);\n
    cgc_init_holding(40, 1, v1 - 5999, 5772139);\n
    cgc_init_holding(40, 2, v1 - 5993, 7993294);\n
    cgc_init_holding(40, 3, v1 - 5987, 8806511);\n
    cgc_init_holding(40, 4, v1 - 5981, 9141741);\n
    cgc_init_holding(40, 5, v1 - 5976, 2945848);\n
    cgc_init_holding(40, 6, v1 - 5972, -1);\n
    cgc_init_holding(40, 7, v1 - 5966, 16722448);\n
    cgc_init_holding(40, 8, v1 - 5961, 12282640);\n
    cgc_init_holding(40, 9, v1 - 5955, 14585954);\n
    cgc_init_holding(40, 10, v1 - 5948, 9488914);\n
    cgc_init_holding(41, 0, v1 - 6004, 16777118);\n
    cgc_init_holding(41, 1, v1 - 5999, 2552391);\n
    cgc_init_holding(41, 2, v1 - 5993, 10080659);\n
    cgc_init_holding(41, 3, v1 - 5987, 8860583);\n
    cgc_init_holding(41, 4, v1 - 5981, 1356122);\n
    cgc_init_holding(41, 5, v1 - 5976, 4099862);\n
    cgc_init_holding(41, 6, v1 - 5972, 5354722);\n
    cgc_init_holding(41, 7, v1 - 5966, -1);\n
    cgc_init_holding(41, 8, v1 - 5961, 6737652);\n
    cgc_init_holding(41, 9, v1 - 5955, 6075612);\n
    cgc_init_holding(41, 10, v1 - 5948, 15594271);\n
    cgc_init_holding(42, 0, v1 - 6004, 13790057);\n
    cgc_init_holding(42, 1, v1 - 5999, 5159107);\n
    cgc_init_holding(42, 2, v1 - 5993, 5646950);\n
    cgc_init_holding(42, 3, v1 - 5987, 1164374);\n
    cgc_init_holding(42, 4, v1 - 5981, 2481370);\n
    cgc_init_holding(42, 5, v1 - 5976, 2834358);\n
    cgc_init_holding(42, 6, v1 - 5972, 8643482);\n
    cgc_init_holding(42, 7, v1 - 5966, -1);\n
    cgc_init_holding(42, 8, v1 - 5961, 1215390);\n
    cgc_init_holding(42, 9, v1 - 5955, 3940411);\n
    cgc_init_holding(42, 10, v1 - 5948, 9107762);\n
    cgc_init_holding(43, 0, v1 - 6004, 7702169);\n
    cgc_init_holding(43, 1, v1 - 5999, -1);\n
    cgc_init_holding(43, 2, v1 - 5993, 10362436);\n
    cgc_init_holding(43, 3, v1 - 5987, 15077270);\n
    cgc_init_holding(43, 4, v1 - 5981, 14129608);\n
    cgc_init_holding(43, 5, v1 - 5976, 14233452);\n
    cgc_init_holding(43, 6, v1 - 5972, 16448692);\n
    cgc_init_holding(43, 7, v1 - 5966, 9150686);\n
    cgc_init_holding(43, 8, v1 - 5961, 10499415);\n
    cgc_init_holding(43, 9, v1 - 5955, 2691104);\n
    cgc_init_holding(43, 10, v1 - 5948, 15821369);\n
    cgc_init_holding(44, 0, v1 - 6004, 9713656);\n
    cgc_init_holding(44, 1, v1 - 5999, 4753509);\n
    cgc_init_holding(44, 2, v1 - 5993, 14443410);\n
    cgc_init_holding(44, 3, v1 - 5987, 7617582);\n
    cgc_init_holding(44, 4, v1 - 5981, 8641563);\n
    cgc_init_holding(44, 5, v1 - 5976, 11563330);\n
    cgc_init_holding(44, 6, v1 - 5972, 13496268);\n
    cgc_init_holding(44, 7, v1 - 5966, -1);\n
    cgc_init_holding(44, 8, v1 - 5961, 16040095);\n
    cgc_init_holding(44, 9, v1 - 5955, 5411080);\n
    cgc_init_holding(44, 10, v1 - 5948, 9992150);\n
    cgc_init_holding(45, 0, v1 - 6004, 9704535);\n
    cgc_init_holding(45, 1, v1 - 5999, 14950974);\n
    cgc_init_holding(45, 2, v1 - 5993, 3479247);\n
    cgc_init_holding(45, 3, v1 - 5987, 8800218);\n
    cgc_init_holding(45, 4, v1 - 5981, 10062457);\n
    cgc_init_holding(45, 5, v1 - 5976, 12240112);\n
    cgc_init_holding(45, 6, v1 - 5972, -1);\n
    cgc_init_holding(45, 7, v1 - 5966, 5254871);\n
    cgc_init_holding(45, 8, v1 - 5961, 12010930);\n
    cgc_init_holding(45, 9, v1 - 5955, 5428519);\n
    cgc_init_holding(45, 10, v1 - 5948, 3168296);\n
    cgc_init_holding(46, 0, v1 - 6004, 15197400);\n
    cgc_init_holding(46, 1, v1 - 5999, -1);\n
    cgc_init_holding(46, 2, v1 - 5993, 12293353);\n
    cgc_init_holding(46, 3, v1 - 5987, 7231493);\n
    cgc_init_holding(46, 4, v1 - 5981, 15038197);\n
    cgc_init_holding(46, 5, v1 - 5976, 7537714);\n
    cgc_init_holding(46, 6, v1 - 5972, 8976901);\n
    cgc_init_holding(46, 7, v1 - 5966, 5854179);\n
    cgc_init_holding(46, 8, v1 - 5961, 13599544);\n
    cgc_init_holding(46, 9, v1 - 5955, 6037412);\n
    cgc_init_holding(46, 10, v1 - 5948, 1147968);\n
    cgc_init_holding(47, 0, v1 - 6004, 14545414);\n
    cgc_init_holding(47, 1, v1 - 5999, -1);\n
    cgc_init_holding(47, 2, v1 - 5993, 12402620);\n
    cgc_init_holding(47, 3, v1 - 5987, 4575737);\n
    cgc_init_holding(47, 4, v1 - 5981, 7790090);\n
    cgc_init_holding(47, 5, v1 - 5976, 3512099);\n
    cgc_init_holding(47, 6, v1 - 5972, 7019948);\n
    cgc_init_holding(47, 7, v1 - 5966, 4138803);\n
    cgc_init_holding(47, 8, v1 - 5961, 6069633);\n
    cgc_init_holding(47, 9, v1 - 5955, 11084242);\n
    cgc_init_holding(47, 10, v1 - 5948, 11015884);\n
    cgc_init_holding(48, 0, v1 - 6004, 4126452);\n
    cgc_init_holding(48, 1, v1 - 5999, -1);\n
    cgc_init_holding(48, 2, v1 - 5993, 11633903);\n
    cgc_init_holding(48, 3, v1 - 5987, 12098836);\n
    cgc_init_holding(48, 4, v1 - 5981, 13406575);\n
    cgc_init_holding(48, 5, v1 - 5976, 5137850);\n
    cgc_init_holding(48, 6, v1 - 5972, 13244385);\n
    cgc_init_holding(48, 7, v1 - 5966, 16412901);\n
    cgc_init_holding(48, 8, v1 - 5961, 6759125);\n
    cgc_init_holding(48, 9, v1 - 5955, &g_428444);\n
    cgc_init_holding(48, 10, v1 - 5948, 6563685);\n
    cgc_init_holding(49, 0, v1 - 6004, 7100466);\n
    cgc_init_holding(49, 1, v1 - 5999, 13433096);\n
    cgc_init_holding(49, 2, v1 - 5993, 10989497);\n
    cgc_init_holding(49, 3, v1 - 5987, 2311380);\n
    cgc_init_holding(49, 4, v1 - 5981, 7502571);\n
    cgc_init_holding(49, 5, v1 - 5976, 12389247);\n
    cgc_init_holding(49, 6, v1 - 5972, -1);\n
    cgc_init_holding(49, 7, v1 - 5966, 3104833);\n
    cgc_init_holding(49, 8, v1 - 5961, 1310083);\n
    cgc_init_holding(49, 9, v1 - 5955, 1396315);\n
    cgc_init_holding(49, 10, v1 - 5948, 16022222);\n
    cgc_init_holding(50, 0, v1 - 6004, 9521571);\n
    cgc_init_holding(50, 1, v1 - 5999, 9851935);\n
    cgc_init_holding(50, 2, v1 - 5993, 6779201);\n
    cgc_init_holding(50, 3, v1 - 5987, 8971014);\n
    cgc_init_holding(50, 4, v1 - 5981, 10194938);\n
    cgc_init_holding(50, 5, v1 - 5976, 9568752);\n
    cgc_init_holding(50, 6, v1 - 5972, -1);\n
    cgc_init_holding(50, 7, v1 - 5966, 12504729);\n
    cgc_init_holding(50, 8, v1 - 5961, 16567495);\n
    cgc_init_holding(50, 9, v1 - 5955, 12482248);\n
    cgc_init_holding(50, 10, v1 - 5948, 14402093);\n
    cgc_init_holding(51, 0, v1 - 6004, 8938918);\n
    cgc_init_holding(51, 1, v1 - 5999, 16422979);\n
    cgc_init_holding(51, 2, v1 - 5993, 9717293);\n
    cgc_init_holding(51, 3, v1 - 5987, 12927708);\n
    cgc_init_holding(51, 4, v1 - 5981, 4023909);\n
    cgc_init_holding(51, 5, v1 - 5976, 4624917);\n
    cgc_init_holding(51, 6, v1 - 5972, -1);\n
    cgc_init_holding(51, 7, v1 - 5966, 11195165);\n
    cgc_init_holding(51, 8, v1 - 5961, 3630205);\n
    cgc_init_holding(51, 9, v1 - 5955, 1666946);\n
    cgc_init_holding(51, 10, v1 - 5948, 4870922);\n
    cgc_init_holding(52, 0, v1 - 6004, 1282578);\n
    cgc_init_holding(52, 1, v1 - 5999, 3522009);\n
    cgc_init_holding(52, 2, v1 - 5993, 14292547);\n
    cgc_init_holding(52, 3, v1 - 5987, 1776975);\n
    cgc_init_holding(52, 4, v1 - 5981, 6899032);\n
    cgc_init_holding(52, 5, v1 - 5976, 11253110);\n
    cgc_init_holding(52, 6, v1 - 5972, 13974089);\n
    cgc_init_holding(52, 7, v1 - 5966, -1);\n
    cgc_init_holding(52, 8, v1 - 5961, 9976917);\n
    cgc_init_holding(52, 9, v1 - 5955, &g_41e4a8);\n
    cgc_init_holding(52, 10, v1 - 5948, 11286875);\n
    cgc_init_holding(53, 0, v1 - 6004, 12585617);\n
    cgc_init_holding(53, 1, v1 - 5999, 7232735);\n
    cgc_init_holding(53, 2, v1 - 5993, 1775133);\n
    cgc_init_holding(53, 3, v1 - 5987, 15060652);\n
    cgc_init_holding(53, 4, v1 - 5981, 14787293);\n
    cgc_init_holding(53, 5, v1 - 5976, 5493411);\n
    cgc_init_holding(53, 6, v1 - 5972, 1941501);\n
    cgc_init_holding(53, 7, v1 - 5966, -1);\n
    cgc_init_holding(53, 8, v1 - 5961, 14717141);\n
    cgc_init_holding(53, 9, v1 - 5955, 11124581);\n
    cgc_init_holding(53, 10, v1 - 5948, 10364605);\n
    cgc_init_holding(54, 0, v1 - 6004, 13862266);\n
    cgc_init_holding(54, 1, v1 - 5999, -1);\n
    cgc_init_holding(54, 2, v1 - 5993, 13113962);\n
    cgc_init_holding(54, 3, v1 - 5987, 16235160);\n
    cgc_init_holding(54, 4, v1 - 5981, 10907064);\n
    cgc_init_holding(54, 5, v1 - 5976, 5753074);\n
    cgc_init_holding(54, 6, v1 - 5972, 3400066);\n
    cgc_init_holding(54, 7, v1 - 5966, 8520428);\n
    cgc_init_holding(54, 8, v1 - 5961, 0xcb2e00);\n
    cgc_init_holding(54, 9, v1 - 5955, 1092891);\n
    cgc_init_holding(54, 10, v1 - 5948, 11637532);\n
    cgc_init_holding(55, 0, v1 - 6004, 8247773);\n
    cgc_init_holding(55, 1, v1 - 5999, 4520806);\n
    cgc_init_holding(55, 2, v1 - 5993, 12714003);\n
    cgc_init_holding(55, 3, v1 - 5987, 12930141);\n
    cgc_init_holding(55, 4, v1 - 5981, 16665840);\n
    cgc_init_holding(55, 5, v1 - 5976, 5912732);\n
    cgc_init_holding(55, 6, v1 - 5972, -1);\n
    cgc_init_holding(55, 7, v1 - 5966, 3599110);\n
    cgc_init_holding(55, 8, v1 - 5961, 9691210);\n
    cgc_init_holding(55, 9, v1 - 5955, 5729274);\n
    cgc_init_holding(55, 10, v1 - 5948, 9155966);\n
    cgc_init_holding(56, 0, v1 - 6004, 2473636);\n
    cgc_init_holding(56, 1, v1 - 5999, 8030245);\n
    cgc_init_holding(56, 2, v1 - 5993, 2154361);\n
    cgc_init_holding(56, 3, v1 - 5987, 15066579);\n
    cgc_init_holding(56, 4, v1 - 5981, 11435178);\n
    cgc_init_holding(56, 5, v1 - 5976, 9445123);\n
    cgc_init_holding(56, 6, v1 - 5972, -1);\n
    cgc_init_holding(56, 7, v1 - 5966, 15336216);\n
    cgc_init_holding(56, 8, v1 - 5961, 2024765);\n
    cgc_init_holding(56, 9, v1 - 5955, 8916118);\n
    cgc_init_holding(56, 10, v1 - 5948, 14447678);\n
    cgc_init_holding(57, 0, v1 - 6004, 9638472);\n
    cgc_init_holding(57, 1, v1 - 5999, 8460099);\n
    cgc_init_holding(57, 2, v1 - 5993, 16471372);\n
    cgc_init_holding(57, 3, v1 - 5987, 5887745);\n
    cgc_init_holding(57, 4, v1 - 5981, 6038510);\n
    cgc_init_holding(57, 5, v1 - 5976, &g_4056c5);\n
    cgc_init_holding(57, 6, v1 - 5972, -1);\n
    cgc_init_holding(57, 7, v1 - 5966, 15256299);\n
    cgc_init_holding(57, 8, v1 - 5961, 13022481);\n
    cgc_init_holding(57, 9, v1 - 5955, 15319177);\n
    cgc_init_holding(57, 10, v1 - 5948, 13204310);\n
    cgc_init_holding(58, 0, v1 - 6004, 13859747);\n
    cgc_init_holding(58, 1, v1 - 5999, -1);\n
    cgc_init_holding(58, 2, v1 - 5993, 4166866);\n
    cgc_init_holding(58, 3, v1 - 5987, 6713079);\n
    cgc_init_holding(58, 4, v1 - 5981, 7908228);\n
    cgc_init_holding(58, 5, v1 - 5976, 15410039);\n
    cgc_init_holding(58, 6, v1 - 5972, 16148226);\n
    cgc_init_holding(58, 7, v1 - 5966, 1492497);\n
    cgc_init_holding(58, 8, v1 - 5961, 5704136);\n
    cgc_init_holding(58, 9, v1 - 5955, 4759536);\n
    cgc_init_holding(58, 10, v1 - 5948, 14976006);\n
    cgc_init_holding(59, 0, v1 - 6004, 6094082);\n
    cgc_init_holding(59, 1, v1 - 5999, 2480789);\n
    cgc_init_holding(59, 2, v1 - 5993, 16055547);\n
    cgc_init_holding(59, 3, v1 - 5987, 7692201);\n
    cgc_init_holding(59, 4, v1 - 5981, 7394235);\n
    cgc_init_holding(59, 5, v1 - 5976, 12207680);\n
    cgc_init_holding(59, 6, v1 - 5972, -1);\n
    cgc_init_holding(59, 7, v1 - 5966, 15624481);\n
    cgc_init_holding(59, 8, v1 - 5961, 8729836);\n
    cgc_init_holding(59, 9, v1 - 5955, 7247667);\n
    cgc_init_holding(59, 10, v1 - 5948, 1864472);\n
    cgc_init_holding(60, 0, v1 - 6004, 6143374);\n
    cgc_init_holding(60, 1, v1 - 5999, 6514718);\n
    cgc_init_holding(60, 2, v1 - 5993, 8077271);\n
    cgc_init_holding(60, 3, v1 - 5987, 10153214);\n
    cgc_init_holding(60, 4, v1 - 5981, 1822598);\n
    cgc_init_holding(60, 5, v1 - 5976, 10901156);\n
    cgc_init_holding(60, 6, v1 - 5972, 9443404);\n
    cgc_init_holding(60, 7, v1 - 5966, -1);\n
    cgc_init_holding(60, 8, v1 - 5961, 9853321);\n
    cgc_init_holding(60, 9, v1 - 5955, 12226631);\n
    cgc_init_holding(60, 10, v1 - 5948, 12759456);\n
    cgc_init_holding(61, 0, v1 - 6004, 15053460);\n
    cgc_init_holding(61, 1, v1 - 5999, 2844003);\n
    cgc_init_holding(61, 2, v1 - 5993, 13464004);\n
    cgc_init_holding(61, 3, v1 - 5987, 9305531);\n
    cgc_init_holding(61, 4, v1 - 5981, 10214556);\n
    cgc_init_holding(61, 5, v1 - 5976, 6983249);\n
    cgc_init_holding(61, 6, v1 - 5972, -1);\n
    cgc_init_holding(61, 7, v1 - 5966, 1987918);\n
    cgc_init_holding(61, 8, v1 - 5961, 11312556);\n
    cgc_init_holding(61, 9, v1 - 5955, 8102804);\n
    cgc_init_holding(61, 10, v1 - 5948, 16147711);\n
    cgc_init_holding(62, 0, v1 - 6004, 2843061);\n
    cgc_init_holding(62, 1, v1 - 5999, -1);\n
    cgc_init_holding(62, 2, v1 - 5993, 5779362);\n
    cgc_init_holding(62, 3, v1 - 5987, 14292545);\n
    cgc_init_holding(62, 4, v1 - 5981, 15510736);\n
    cgc_init_holding(62, 5, v1 - 5976, 2856217);\n
    cgc_init_holding(62, 6, v1 - 5972, 11561860);\n
    cgc_init_holding(62, 7, v1 - 5966, 16580772);\n
    cgc_init_holding(62, 8, v1 - 5961, 11043724);\n
    cgc_init_holding(62, 9, v1 - 5955, 14155851);\n
    cgc_init_holding(62, 10, v1 - 5948, 11034770);\n
    cgc_init_holding(63, 0, v1 - 6004, 14609439);\n
    cgc_init_holding(63, 1, v1 - 5999, 10511271);\n
    cgc_init_holding(63, 2, v1 - 5993, 1852432);\n
    cgc_init_holding(63, 3, v1 - 5987, 10827303);\n
    cgc_init_holding(63, 4, v1 - 5981, 5241151);\n
    cgc_init_holding(63, 5, v1 - 5976, 2778639);\n
    cgc_init_holding(63, 6, v1 - 5972, -1);\n
    cgc_init_holding(63, 7, v1 - 5966, 13442907);\n
    cgc_init_holding(63, 8, v1 - 5961, 8417882);\n
    cgc_init_holding(63, 9, v1 - 5955, 11015539);\n
    cgc_init_holding(63, 10, v1 - 5948, 2447684);\n
    cgc_init_holding(64, 0, v1 - 6004, 6339394);\n
    cgc_init_holding(64, 1, v1 - 5999, 3673932);\n
    cgc_init_holding(64, 2, v1 - 5993, 2319024);\n
    cgc_init_holding(64, 3, v1 - 5987, 1867974);\n
    cgc_init_holding(64, 4, v1 - 5981, 2271985);\n
    cgc_init_holding(64, 5, v1 - 5976, 3711519);\n
    cgc_init_holding(64, 6, v1 - 5972, 1942460);\n
    cgc_init_holding(64, 7, v1 - 5966, -1);\n
    cgc_init_holding(64, 8, v1 - 5961, 7933304);\n
    cgc_init_holding(64, 9, v1 - 5955, 8379052);\n
    cgc_init_holding(64, 10, v1 - 5948, 9294378);\n
    cgc_init_holding(65, 0, v1 - 6004, 2591017);\n
    cgc_init_holding(65, 1, v1 - 5999, 5478390);\n
    cgc_init_holding(65, 2, v1 - 5993, 3848650);\n
    cgc_init_holding(65, 3, v1 - 5987, 9231715);\n
    cgc_init_holding(65, 4, v1 - 5981, 9178149);\n
    cgc_init_holding(65, 5, v1 - 5976, 1417773);\n
    cgc_init_holding(65, 6, v1 - 5972, -1);\n
    cgc_init_holding(65, 7, v1 - 5966, 3150120);\n
    cgc_init_holding(65, 8, v1 - 5961, 3591382);\n
    cgc_init_holding(65, 9, v1 - 5955, 12120170);\n
    cgc_init_holding(65, 10, v1 - 5948, 8404641);\n
    cgc_init_holding(66, 0, v1 - 6004, 3249878);\n
    cgc_init_holding(66, 1, v1 - 5999, 5677542);\n
    cgc_init_holding(66, 2, v1 - 5993, 2899829);\n
    cgc_init_holding(66, 3, v1 - 5987, 4525060);\n
    cgc_init_holding(66, 4, v1 - 5981, 5684300);\n
    cgc_init_holding(66, 5, v1 - 5976, 8285880);\n
    cgc_init_holding(66, 6, v1 - 5972, 3114578);\n
    cgc_init_holding(66, 7, v1 - 5966, -1);\n
    cgc_init_holding(66, 8, v1 - 5961, 3136496);\n
    cgc_init_holding(66, 9, v1 - 5955, 7436642);\n
    cgc_init_holding(66, 10, v1 - 5948, 9557924);\n
    cgc_init_holding(67, 0, v1 - 6004, 9943232);\n
    cgc_init_holding(67, 1, v1 - 5999, 10243760);\n
    cgc_init_holding(67, 2, v1 - 5993, 11205024);\n
    cgc_init_holding(67, 3, v1 - 5987, 5172102);\n
    cgc_init_holding(67, 4, v1 - 5981, 4061144);\n
    cgc_init_holding(67, 5, v1 - 5976, 12408111);\n
    cgc_init_holding(67, 6, v1 - 5972, -1);\n
    cgc_init_holding(67, 7, v1 - 5966, 14784684);\n
    cgc_init_holding(67, 8, v1 - 5961, 16070561);\n
    cgc_init_holding(67, 9, v1 - 5955, 4604413);\n
    cgc_init_holding(67, 10, v1 - 5948, 9280211);\n
    cgc_init_holding(68, 0, v1 - 6004, 10721570);\n
    cgc_init_holding(68, 1, v1 - 5999, -1);\n
    cgc_init_holding(68, 2, v1 - 5993, 1371650);\n
    cgc_init_holding(68, 3, v1 - 5987, 11461531);\n
    cgc_init_holding(68, 4, v1 - 5981, 3230262);\n
    cgc_init_holding(68, 5, v1 - 5976, 2427359);\n
    cgc_init_holding(68, 6, v1 - 5972, 1282727);\n
    cgc_init_holding(68, 7, v1 - 5966, 7075011);\n
    cgc_init_holding(68, 8, v1 - 5961, 2277629);\n
    cgc_init_holding(68, 9, v1 - 5955, 10275192);\n
    cgc_init_holding(68, 10, v1 - 5948, &g_40d9e1);\n
    cgc_init_holding(69, 0, v1 - 6004, 11367300);\n
    cgc_init_holding(69, 1, v1 - 5999, -1);\n
    cgc_init_holding(69, 2, v1 - 5993, 9873926);\n
    cgc_init_holding(69, 3, v1 - 5987, 10169213);\n
    cgc_init_holding(69, 4, v1 - 5981, &g_4237c4);\n
    cgc_init_holding(69, 5, v1 - 5976, 8465192);\n
    cgc_init_holding(69, 6, v1 - 5972, 1696409);\n
    cgc_init_holding(69, 7, v1 - 5966, 6159680);\n
    cgc_init_holding(69, 8, v1 - 5961, 4010481);\n
    cgc_init_holding(69, 9, v1 - 5955, 14469126);\n
    cgc_init_holding(69, 10, v1 - 5948, 15804958);\n
    cgc_init_holding(70, 0, v1 - 6004, 6949049);\n
    cgc_init_holding(70, 1, v1 - 5999, -1);\n
    cgc_init_holding(70, 2, v1 - 5993, 2358002);\n
    cgc_init_holding(70, 3, v1 - 5987, 11345952);\n
    cgc_init_holding(70, 4, v1 - 5981, 12242159);\n
    cgc_init_holding(70, 5, v1 - 5976, 2239732);\n
    cgc_init_holding(70, 6, v1 - 5972, 5356987);\n
    cgc_init_holding(70, 7, v1 - 5966, 11822903);\n
    cgc_init_holding(70, 8, v1 - 5961, 1714463);\n
    cgc_init_holding(70, 9, v1 - 5955, 2558635);\n
    cgc_init_holding(70, 10, v1 - 5948, 8127364);\n
    cgc_init_holding(71, 0, v1 - 6004, 13736182);\n
    cgc_init_holding(71, 1, v1 - 5999, 16294150);\n
    cgc_init_holding(71, 2, v1 - 5993, 4851774);\n
    cgc_init_holding(71, 3, v1 - 5987, 2328528);\n
    cgc_init_holding(71, 4, v1 - 5981, 8097256);\n
    cgc_init_holding(71, 5, v1 - 5976, 12756603);\n
    cgc_init_holding(71, 6, v1 - 5972, -1);\n
    cgc_init_holding(71, 7, v1 - 5966, 10697697);\n
    cgc_init_holding(71, 8, v1 - 5961, 15419543);\n
    cgc_init_holding(71, 9, v1 - 5955, 4160055);\n
    cgc_init_holding(71, 10, v1 - 5948, 8095420);\n
    cgc_init_holding(72, 0, v1 - 6004, &g_42654a);\n
    cgc_init_holding(72, 1, v1 - 5999, -1);\n
    cgc_init_holding(72, 2, v1 - 5993, 1464943);\n
    cgc_init_holding(72, 3, v1 - 5987, 1728588);\n
    cgc_init_holding(72, 4, v1 - 5981, 13875405);\n
    cgc_init_holding(72, 5, v1 - 5976, 11729595);\n
    cgc_init_holding(72, 6, v1 - 5972, 12116345);\n
    cgc_init_holding(72, 7, v1 - 5966, 9579724);\n
    cgc_init_holding(72, 8, v1 - 5961, 5214966);\n
    cgc_init_holding(72, 9, v1 - 5955, 12151145);\n
    cgc_init_holding(72, 10, v1 - 5948, 8362213);\n
    cgc_init_holding(73, 0, v1 - 6004, 10997557);\n
    cgc_init_holding(73, 1, v1 - 5999, -1);\n
    cgc_init_holding(73, 2, v1 - 5993, 3512052);\n
    cgc_init_holding(73, 3, v1 - 5987, 7866577);\n
    cgc_init_holding(73, 4, v1 - 5981, 8637268);\n
    cgc_init_holding(73, 5, v1 - 5976, 2921250);\n
    cgc_init_holding(73, 6, v1 - 5972, 15339788);\n
    cgc_init_holding(73, 7, v1 - 5966, 6429327);\n
    cgc_init_holding(73, 8, v1 - 5961, 5708918);\n
    cgc_init_holding(73, 9, v1 - 5955, 0xd1ab00);\n
    cgc_init_holding(73, 10, v1 - 5948, 0x6bfd00);\n
    cgc_init_holding(74, 0, v1 - 6004, 16146022);\n
    cgc_init_holding(74, 1, v1 - 5999, -1);\n
    cgc_init_holding(74, 2, v1 - 5993, 8084313);\n
    cgc_init_holding(74, 3, v1 - 5987, 10747493);\n
    cgc_init_holding(74, 4, v1 - 5981, 9331574);\n
    cgc_init_holding(74, 5, v1 - 5976, 14612865);\n
    cgc_init_holding(74, 6, v1 - 5972, 14456201);\n
    cgc_init_holding(74, 7, v1 - 5966, 15638824);\n
    cgc_init_holding(74, 8, v1 - 5961, 5114190);\n
    cgc_init_holding(74, 9, v1 - 5955, 15954376);\n
    cgc_init_holding(74, 10, v1 - 5948, 5308003);\n
    cgc_init_holding(75, 0, v1 - 6004, 7113924);\n
    cgc_init_holding(75, 1, v1 - 5999, &g_402083);\n
    cgc_init_holding(75, 2, v1 - 5993, 7302506);\n
    cgc_init_holding(75, 3, v1 - 5987, 14673068);\n
    cgc_init_holding(75, 4, v1 - 5981, 15710354);\n
    cgc_init_holding(75, 5, v1 - 5976, 7975668);\n
    cgc_init_holding(75, 6, v1 - 5972, 15730691);\n
    cgc_init_holding(75, 7, v1 - 5966, -1);\n
    cgc_init_holding(75, 8, v1 - 5961, 3410437);\n
    cgc_init_holding(75, 9, v1 - 5955, 8906117);\n
    cgc_init_holding(75, 10, v1 - 5948, 9414731);\n
    cgc_init_holding(76, 0, v1 - 6004, 14833268);\n
    cgc_init_holding(76, 1, v1 - 5999, 5009385);\n
    cgc_init_holding(76, 2, v1 - 5993, 16662223);\n
    cgc_init_holding(76, 3, v1 - 5987, 12544022);\n
    cgc_init_holding(76, 4, v1 - 5981, 1708631);\n
    cgc_init_holding(76, 5, v1 - 5976, 6890600);\n
    cgc_init_holding(76, 6, v1 - 5972, 6346253);\n
    cgc_init_holding(76, 7, v1 - 5966, -1);\n
    cgc_init_holding(76, 8, v1 - 5961, 2017784);\n
    cgc_init_holding(76, 9, v1 - 5955, 2516169);\n
    cgc_init_holding(76, 10, v1 - 5948, 15957197);\n
    cgc_init_holding(77, 0, v1 - 6004, 16725064);\n
    cgc_init_holding(77, 1, v1 - 5999, &g_41813f);\n
    cgc_init_holding(77, 2, v1 - 5993, 11590977);\n
    cgc_init_holding(77, 3, v1 - 5987, 15983349);\n
    cgc_init_holding(77, 4, v1 - 5981, 12612147);\n
    cgc_init_holding(77, 5, v1 - 5976, 16268769);\n
    cgc_init_holding(77, 6, v1 - 5972, 12190990);\n
    cgc_init_holding(77, 7, v1 - 5966, -1);\n
    cgc_init_holding(77, 8, v1 - 5961, 16133556);\n
    cgc_init_holding(77, 9, v1 - 5955, 2124874);\n
    cgc_init_holding(77, 10, v1 - 5948, 14701799);\n
    cgc_init_holding(78, 0, v1 - 6004, 2787457);\n
    cgc_init_holding(78, 1, v1 - 5999, 5750399);\n
    cgc_init_holding(78, 2, v1 - 5993, 16412843);\n
    cgc_init_holding(78, 3, v1 - 5987, 15409168);\n
    cgc_init_holding(78, 4, v1 - 5981, 6932703);\n
    cgc_init_holding(78, 5, v1 - 5976, 8020924);\n
    cgc_init_holding(78, 6, v1 - 5972, 2190798);\n
    cgc_init_holding(78, 7, v1 - 5966, -1);\n
    cgc_init_holding(78, 8, v1 - 5961, 10638180);\n
    cgc_init_holding(78, 9, v1 - 5955, 8047783);\n
    cgc_init_holding(78, 10, v1 - 5948, 14872850);\n
    cgc_init_holding(79, 0, v1 - 6004, 5712747);\n
    cgc_init_holding(79, 1, v1 - 5999, -1);\n
    cgc_init_holding(79, 2, v1 - 5993, 5038932);\n
    cgc_init_holding(79, 3, v1 - 5987, 16287904);\n
    cgc_init_holding(79, 4, v1 - 5981, 7591532);\n
    cgc_init_holding(79, 5, v1 - 5976, 1801423);\n
    cgc_init_holding(79, 6, v1 - 5972, 4942595);\n
    cgc_init_holding(79, 7, v1 - 5966, 6893675);\n
    cgc_init_holding(79, 8, v1 - 5961, 10679577);\n
    cgc_init_holding(79, 9, v1 - 5955, 8771892);\n
    cgc_init_holding(79, 10, v1 - 5948, 8812499);\n
    cgc_init_holding(80, 0, v1 - 6004, 3494735);\n
    cgc_init_holding(80, 1, v1 - 5999, -1);\n
    cgc_init_holding(80, 2, v1 - 5993, 15660796);\n
    cgc_init_holding(80, 3, v1 - 5987, 7079911);\n
    cgc_init_holding(80, 4, v1 - 5981, 3192245);\n
    cgc_init_holding(80, 5, v1 - 5976, 8257291);\n
    cgc_init_holding(80, 6, v1 - 5972, 1102113);\n
    cgc_init_holding(80, 7, v1 - 5966, 9285787);\n
    cgc_init_holding(80, 8, v1 - 5961, 7689556);\n
    cgc_init_holding(80, 9, v1 - 5955, 11300844);\n
    cgc_init_holding(80, 10, v1 - 5948, 3570038);\n
    cgc_init_holding(81, 0, v1 - 6004, 3671913);\n
    cgc_init_holding(81, 1, v1 - 5999, 14140569);\n
    cgc_init_holding(81, 2, v1 - 5993, 1582316);\n
    cgc_init_holding(81, 3, v1 - 5987, 8350548);\n
    cgc_init_holding(81, 4, v1 - 5981, 15291318);\n
    cgc_init_holding(81, 5, v1 - 5976, 7800388);\n
    cgc_init_holding(81, 6, v1 - 5972, 7152120);\n
    cgc_init_holding(81, 7, v1 - 5966, -1);\n
    cgc_init_holding(81, 8, v1 - 5961, 5563149);\n
    cgc_init_holding(81, 9, v1 - 5955, 4914026);\n
    cgc_init_holding(81, 10, v1 - 5948, 1023698);\n
    cgc_init_holding(82, 0, v1 - 6004, 16486627);\n
    cgc_init_holding(82, 1, v1 - 5999, 6574802);\n
    cgc_init_holding(82, 2, v1 - 5993, 16413030);\n
    cgc_init_holding(82, 3, v1 - 5987, 14936637);\n
    cgc_init_holding(82, 4, v1 - 5981, 3672900);\n
    cgc_init_holding(82, 5, v1 - 5976, 13902760);\n
    cgc_init_holding(82, 6, v1 - 5972, 8258594);\n
    cgc_init_holding(82, 7, v1 - 5966, -1);\n
    cgc_init_holding(82, 8, v1 - 5961, 12641224);\n
    cgc_init_holding(82, 9, v1 - 5955, 8376158);\n
    cgc_init_holding(82, 10, v1 - 5948, 3275268);\n
    cgc_init_holding(83, 0, v1 - 6004, 11912262);\n
    cgc_init_holding(83, 1, v1 - 5999, 6228655);\n
    cgc_init_holding(83, 2, v1 - 5993, 14793059);\n
    cgc_init_holding(83, 3, v1 - 5987, 7595741);\n
    cgc_init_holding(83, 4, v1 - 5981, 1758682);\n
    cgc_init_holding(83, 5, v1 - 5976, 2460156);\n
    cgc_init_holding(83, 6, v1 - 5972, -1);\n
    cgc_init_holding(83, 7, v1 - 5966, 10657454);\n
    cgc_init_holding(83, 8, v1 - 5961, 15520122);\n
    cgc_init_holding(83, 9, v1 - 5955, 1399931);\n
    cgc_init_holding(83, 10, v1 - 5948, 7799706);\n
    cgc_init_holding(84, 0, v1 - 6004, 14374714);\n
    cgc_init_holding(84, 1, v1 - 5999, -1);\n
    cgc_init_holding(84, 2, v1 - 5993, 6560926);\n
    cgc_init_holding(84, 3, v1 - 5987, 15669180);\n
    cgc_init_holding(84, 4, v1 - 5981, 12366596);\n
    cgc_init_holding(84, 5, v1 - 5976, 9024028);\n
    cgc_init_holding(84, 6, v1 - 5972, 7452913);\n
    cgc_init_holding(84, 7, v1 - 5966, 10582196);\n
    cgc_init_holding(84, 8, v1 - 5961, 2746395);\n
    cgc_init_holding(84, 9, v1 - 5955, 11199896);\n
    cgc_init_holding(84, 10, v1 - 5948, 8404624);\n
    cgc_init_holding(85, 0, v1 - 6004, 10457180);\n
    cgc_init_holding(85, 1, v1 - 5999, 8013075);\n
    cgc_init_holding(85, 2, v1 - 5993, 8314568);\n
    cgc_init_holding(85, 3, v1 - 5987, 7326279);\n
    cgc_init_holding(85, 4, v1 - 5981, 12665809);\n
    cgc_init_holding(85, 5, v1 - 5976, 2397706);\n
    cgc_init_holding(85, 6, v1 - 5972, -1);\n
    cgc_init_holding(85, 7, v1 - 5966, 5660432);\n
    cgc_init_holding(85, 8, v1 - 5961, 10432953);\n
    cgc_init_holding(85, 9, v1 - 5955, 12261688);\n
    cgc_init_holding(85, 10, v1 - 5948, 12782155);\n
    cgc_init_holding(86, 0, v1 - 6004, 9567690);\n
    cgc_init_holding(86, 1, v1 - 5999, -1);\n
    cgc_init_holding(86, 2, v1 - 5993, 15521683);\n
    cgc_init_holding(86, 3, v1 - 5987, 15940535);\n
    cgc_init_holding(86, 4, v1 - 5981, 3745123);\n
    cgc_init_holding(86, 5, v1 - 5976, 2678419);\n
    cgc_init_holding(86, 6, v1 - 5972, 1698777);\n
    cgc_init_holding(86, 7, v1 - 5966, 10671356);\n
    cgc_init_holding(86, 8, v1 - 5961, 1393160);\n
    cgc_init_holding(86, 9, v1 - 5955, 7388263);\n
    cgc_init_holding(86, 10, v1 - 5948, 8568913);\n
    cgc_init_holding(87, 0, v1 - 6004, 16702215);\n
    cgc_init_holding(87, 1, v1 - 5999, 9128904);\n
    cgc_init_holding(87, 2, v1 - 5993, 5635369);\n
    cgc_init_holding(87, 3, v1 - 5987, 15665003);\n
    cgc_init_holding(87, 4, v1 - 5981, 11689635);\n
    cgc_init_holding(87, 5, v1 - 5976, 6718626);\n
    cgc_init_holding(87, 6, v1 - 5972, 14856793);\n
    cgc_init_holding(87, 7, v1 - 5966, -1);\n
    cgc_init_holding(87, 8, v1 - 5961, 13131543);\n
    cgc_init_holding(87, 9, v1 - 5955, 7093023);\n
    cgc_init_holding(87, 10, v1 - 5948, 12546139);\n
    cgc_init_holding(88, 0, v1 - 6004, 8969934);\n
    cgc_init_holding(88, 1, v1 - 5999, -1);\n
    cgc_init_holding(88, 2, v1 - 5993, 2934940);\n
    cgc_init_holding(88, 3, v1 - 5987, 8910883);\n
    cgc_init_holding(88, 4, v1 - 5981, 3531946);\n
    cgc_init_holding(88, 5, v1 - 5976, 15537263);\n
    cgc_init_holding(88, 6, v1 - 5972, 2483600);\n
    cgc_init_holding(88, 7, v1 - 5966, 6217737);\n
    cgc_init_holding(88, 8, v1 - 5961, 16624633);\n
    cgc_init_holding(88, 9, v1 - 5955, 15306041);\n
    cgc_init_holding(88, 10, v1 - 5948, 5975488);\n
    cgc_init_holding(89, 0, v1 - 6004, 14401400);\n
    cgc_init_holding(89, 1, v1 - 5999, 2836599);\n
    cgc_init_holding(89, 2, v1 - 5993, 10175949);\n
    cgc_init_holding(89, 3, v1 - 5987, 2925119);\n
    cgc_init_holding(89, 4, v1 - 5981, 2570426);\n
    cgc_init_holding(89, 5, v1 - 5976, 8634400);\n
    cgc_init_holding(89, 6, v1 - 5972, 6959244);\n
    cgc_init_holding(89, 7, v1 - 5966, -1);\n
    cgc_init_holding(89, 8, v1 - 5961, 14143461);\n
    cgc_init_holding(89, 9, v1 - 5955, 12596979);\n
    cgc_init_holding(89, 10, v1 - 5948, 3518919);\n
    cgc_init_holding(90, 0, v1 - 6004, 13688486);\n
    cgc_init_holding(90, 1, v1 - 5999, 10770343);\n
    cgc_init_holding(90, 2, v1 - 5993, 13479577);\n
    cgc_init_holding(90, 3, v1 - 5987, 3711162);\n
    cgc_init_holding(90, 4, v1 - 5981, 16061864);\n
    cgc_init_holding(90, 5, v1 - 5976, 10855270);\n
    cgc_init_holding(90, 6, v1 - 5972, 12291769);\n
    cgc_init_holding(90, 7, v1 - 5966, -1);\n
    cgc_init_holding(90, 8, v1 - 5961, 7482761);\n
    cgc_init_holding(90, 9, v1 - 5955, 10481084);\n
    cgc_init_holding(90, 10, v1 - 5948, 10474951);\n
    cgc_init_holding(91, 0, v1 - 6004, 11854170);\n
    cgc_init_holding(91, 1, v1 - 5999, 1002800);\n
    cgc_init_holding(91, 2, v1 - 5993, 9758578);\n
    cgc_init_holding(91, 3, v1 - 5987, 10599882);\n
    cgc_init_holding(91, 4, v1 - 5981, 14373358);\n
    cgc_init_holding(91, 5, v1 - 5976, 3491571);\n
    cgc_init_holding(91, 6, v1 - 5972, -1);\n
    cgc_init_holding(91, 7, v1 - 5966, 8742348);\n
    cgc_init_holding(91, 8, v1 - 5961, 10194246);\n
    cgc_init_holding(91, 9, v1 - 5955, 14896322);\n
    cgc_init_holding(91, 10, v1 - 5948, 15584914);\n
    cgc_init_holding(92, 0, v1 - 6004, 2709273);\n
    cgc_init_holding(92, 1, v1 - 5999, -1);\n
    cgc_init_holding(92, 2, v1 - 5993, 6682562);\n
    cgc_init_holding(92, 3, v1 - 5987, 3447284);\n
    cgc_init_holding(92, 4, v1 - 5981, 9172244);\n
    cgc_init_holding(92, 5, v1 - 5976, 7673008);\n
    cgc_init_holding(92, 6, v1 - 5972, 7230331);\n
    cgc_init_holding(92, 7, v1 - 5966, 11705022);\n
    cgc_init_holding(92, 8, v1 - 5961, 9207167);\n
    cgc_init_holding(92, 9, v1 - 5955, 15335959);\n
    cgc_init_holding(92, 10, v1 - 5948, 6256057);\n
    cgc_init_holding(93, 0, v1 - 6004, 6853876);\n
    cgc_init_holding(93, 1, v1 - 5999, -1);\n
    cgc_init_holding(93, 2, v1 - 5993, 1481538);\n
    cgc_init_holding(93, 3, v1 - 5987, 13172296);\n
    cgc_init_holding(93, 4, v1 - 5981, 14457233);\n
    cgc_init_holding(93, 5, v1 - 5976, 9962927);\n
    cgc_init_holding(93, 6, v1 - 5972, 14147388);\n
    cgc_init_holding(93, 7, v1 - 5966, 12221322);\n
    cgc_init_holding(93, 8, v1 - 5961, 6393747);\n
    cgc_init_holding(93, 9, v1 - 5955, 16596042);\n
    cgc_init_holding(93, 10, v1 - 5948, 5943723);\n
    cgc_init_holding(94, 0, v1 - 6004, 11970548);\n
    cgc_init_holding(94, 1, v1 - 5999, 8225578);\n
    cgc_init_holding(94, 2, v1 - 5993, 3727297);\n
    cgc_init_holding(94, 3, v1 - 5987, 6302378);\n
    cgc_init_holding(94, 4, v1 - 5981, 15614148);\n
    cgc_init_holding(94, 5, v1 - 5976, 14270557);\n
    cgc_init_holding(94, 6, v1 - 5972, 3765633);\n
    cgc_init_holding(94, 7, v1 - 5966, -1);\n
    cgc_init_holding(94, 8, v1 - 5961, 9647374);\n
    cgc_init_holding(94, 9, v1 - 5955, 5053676);\n
    cgc_init_holding(94, 10, v1 - 5948, 2402456);\n
    cgc_init_holding(95, 0, v1 - 6004, 12314570);\n
    cgc_init_holding(95, 1, v1 - 5999, -1);\n
    cgc_init_holding(95, 2, v1 - 5993, 15021239);\n
    cgc_init_holding(95, 3, v1 - 5987, 8283273);\n
    cgc_init_holding(95, 4, v1 - 5981, 5548686);\n
    cgc_init_holding(95, 5, v1 - 5976, 15807611);\n
    cgc_init_holding(95, 6, v1 - 5972, 16561606);\n
    cgc_init_holding(95, 7, v1 - 5966, 11124284);\n
    cgc_init_holding(95, 8, v1 - 5961, 13590917);\n
    cgc_init_holding(95, 9, v1 - 5955, 11378273);\n
    cgc_init_holding(95, 10, v1 - 5948, 16135094);\n
    cgc_init_holding(96, 0, v1 - 6004, 1003383);\n
    cgc_init_holding(96, 1, v1 - 5999, -1);\n
    cgc_init_holding(96, 2, v1 - 5993, 13581236);\n
    cgc_init_holding(96, 3, v1 - 5987, 15529685);\n
    cgc_init_holding(96, 4, v1 - 5981, 12596233);\n
    cgc_init_holding(96, 5, v1 - 5976, 10046791);\n
    cgc_init_holding(96, 6, v1 - 5972, 5229777);\n
    cgc_init_holding(96, 7, v1 - 5966, 13897105);\n
    cgc_init_holding(96, 8, v1 - 5961, 12115604);\n
    cgc_init_holding(96, 9, v1 - 5955, 14707702);\n
    cgc_init_holding(96, 10, v1 - 5948, 16634243);\n
    cgc_init_holding(97, 0, v1 - 6004, 3508084);\n
    cgc_init_holding(97, 1, v1 - 5999, 8303761);\n
    cgc_init_holding(97, 2, v1 - 5993, 12053208);\n
    cgc_init_holding(97, 3, v1 - 5987, 1426317);\n
    cgc_init_holding(97, 4, v1 - 5981, 7446843);\n
    cgc_init_holding(97, 5, v1 - 5976, 15625017);\n
    cgc_init_holding(97, 6, v1 - 5972, -1);\n
    cgc_init_holding(97, 7, v1 - 5966, 8714698);\n
    cgc_init_holding(97, 8, v1 - 5961, 5724050);\n
    cgc_init_holding(97, 9, v1 - 5955, 14289022);\n
    cgc_init_holding(97, 10, v1 - 5948, 2516546);\n
    cgc_init_holding(98, 0, v1 - 6004, 5255555);\n
    cgc_init_holding(98, 1, v1 - 5999, 8304671);\n
    cgc_init_holding(98, 2, v1 - 5993, 6669642);\n
    cgc_init_holding(98, 3, v1 - 5987, 3654473);\n
    cgc_init_holding(98, 4, v1 - 5981, 9432303);\n
    cgc_init_holding(98, 5, v1 - 5976, 6476300);\n
    cgc_init_holding(98, 6, v1 - 5972, 16520773);\n
    cgc_init_holding(98, 7, v1 - 5966, -1);\n
    cgc_init_holding(98, 8, v1 - 5961, 9705914);\n
    cgc_init_holding(98, 9, v1 - 5955, 11793019);\n
    cgc_init_holding(98, 10, v1 - 5948, 7968175);\n
    cgc_init_holding(99, 0, v1 - 6004, 10028966);\n
    cgc_init_holding(99, 1, v1 - 5999, 15284950);\n
    cgc_init_holding(99, 2, v1 - 5993, 9615739);\n
    cgc_init_holding(99, 3, v1 - 5987, 10343294);\n
    cgc_init_holding(99, 4, v1 - 5981, 5544000);\n
    cgc_init_holding(99, 5, v1 - 5976, 8899801);\n
    cgc_init_holding(99, 6, v1 - 5972, -1);\n
    cgc_init_holding(99, 7, v1 - 5966, 14290409);\n
    cgc_init_holding(99, 8, v1 - 5961, 9381942);\n
    cgc_init_holding(99, 9, v1 - 5955, 7062546);\n
    v5 = v2;\n
    return cgc_init_holding(99, 10, v1 - 5948, 15755308);\n
}\n
", "4248611:sub_40d423": null, "4248624:cgc_checksum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checksum(char v8, char a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    char *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v9;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if ([D] GetI(136:I8x8)[t26,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t4,0] = t5\n
    [D] PutI(136:I8x8)[t4,0] = 0x01\n
    [D] PutI(136:I8x8)[t4,0] = 0x00\n
    for (v7 = 0; v7 < 32; v7 += 1)\n
    {\n
        *((a3 + v7)) = 0;\n
    }\n
    v6 = 24;\n
    for (v5 = 0; v5 < 8; v5 += 1)\n
    {\n
        *((a3 + v5)) = *((a1 + v5));\n
        *((a3 + v6 + v5)) = *((a1 + v5));\n
    }\n
    cgc_memcpy(&a0, a3 + 8, 4);\n
    cgc_memcpy(&v8, a3 + 12, 4);\n
    *(&v4) = *(&v8) * 2 + *(&a0);\n
    v3 = 16;\n
    cgc_memcpy(&v4, a3 + v3, 4);\n
    v2 = v0 + 61484 + *(&v8) * 420 + 4;\n
    v9 = cgc_memcpy(v2, a3 + v3 + 4, 4);\n
    for (v1 = 0; v1 < 32; v1 = v9)\n
    {\n
        *((a3 + v1)) = *((a3 + v1)) ^ *((v2 + v1));\n
        v9 = v1 + 1;\n
    }\n
    return v9;\n
}\n
", "4249024:cgc_match_holding": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_match_holding(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < 32)\n
        {\n
            v2 = v0 + 61484 + v5 * 420 + 36 + v3 * 12;\n
            v1 = cgc_memcmp(a0 + 8, v2 + 4, 8);\n
            if (!v1)\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4249190:sub_40d666": null, "4249200:cgc_add_holding": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_holding(unsigned int v3, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_match_holding(v3, a0);\n
    if (!v1)\n
        cgc__terminate();\n
    if (*(v1) != -1)\n
        *(v1) = *(v1) + a0->field_4;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4249311:sub_40d6df": null, "4249312:cgc_dec_holding": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dec_holding(unsigned int v3, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_match_holding(v3, a0);\n
    if (!v1)\n
        cgc__terminate();\n
    if (*(v1) > a0->field_4)\n
        *(v1) = *(v1) - a0->field_4;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4249428:sub_40d754": null, "4249440:cgc_fill_order": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_ACCOUNTS;\n
\n
int cgc_fill_order(unsigned int v9, struct_1 *a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    void* v2;  // [bp-0x20]\n
    unsigned int *v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_0 *v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = &a1[1];\n
    v1 = a0->field_4;\n
    v2 = 0;\n
    if ([D] GetI(136:I8x8)[t60,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t28,0] = t31\n
    [D] PutI(136:I8x8)[t28,0] = 0x01\n
    [D] PutI(72:F64x8)[t39,1] = t40\n
    [D] PutI(136:I8x8)[t39,1] = 0x01\n
    [D] PutI(136:I8x8)[t39,0] = 0x00\n
    v5 = ([D] GetI(136:I8x8)[t65,0] ? [D] GetI(72:F64x8)[t65,0] : nan);\n
    [D] PutI(136:I8x8)[t65,0] = 0x00\n
    [D] PutI(72:F64x8)[t83,0] = t86\n
    [D] PutI(136:I8x8)[t83,0] = 0x01\n
    [D] PutI(72:F64x8)[t96,0] = t99\n
    [D] PutI(136:I8x8)[t96,0] = 0x01\n
    [D] PutI(72:F64x8)[t107,1] = t108\n
    [D] PutI(136:I8x8)[t107,1] = 0x01\n
    [D] PutI(136:I8x8)[t107,0] = 0x00\n
    (&cgc_ACCOUNTS)[105 * v9] = ([D] GetI(136:I8x8)[t135,0] ? [D] GetI(72:F64x8)[t135,0] : nan);\n
    [D] PutI(136:I8x8)[t135,0] = 0x00\n
    [D] PutI(72:F64x8)[t152,0] = t155\n
    [D] PutI(136:I8x8)[t152,0] = 0x01\n
    [D] PutI(72:F64x8)[t165,0] = t168\n
    [D] PutI(136:I8x8)[t165,0] = 0x01\n
    [D] PutI(72:F64x8)[t176,1] = t177\n
    [D] PutI(136:I8x8)[t176,1] = 0x01\n
    [D] PutI(136:I8x8)[t176,0] = 0x00\n
    (&cgc_ACCOUNTS)[105 * *(a1)] = ([D] GetI(136:I8x8)[t204,0] ? [D] GetI(72:F64x8)[t204,0] : nan);\n
    [D] PutI(136:I8x8)[t204,0] = 0x00\n
    v4 = cgc_match_holding(*(a1), a0);\n
    if (!v4)\n
        cgc__terminate();\n
    cgc_dec_holding(*(a1), a0);\n
    v3 = cgc_match_holding(v9, a0);\n
    if (!v3)\n
        cgc__terminate();\n
    cgc_add_holding(v9, a0);\n
    if (a0->field_4 > v6->field_4)\n
        cgc__terminate();\n
    v6->field_4 = v6->field_4 - a0->field_4;\n
    if (!v6->field_4)\n
    {\n
        v6->field_8 = 0;\n
        v6->field_0 = 0;\n
        v7 = 0xff0000;\n
        return v7;\n
    }\n
    else if (*(v3) != -1)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    else\n
    {\n
        v7 = 238;\n
        return v7;\n
    }\n
}\n
", "4249830:sub_40d8e6": null, "4249840:cgc_match_symbol": "int cgc_match_symbol(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_memcmp(v0 + 8, a0 + 8, 8);\n
}\n
", "4249903:sub_40d92f": null, "4249904:cgc_get_current_ask": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_get_current_ask(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // ftop\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = v6;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (v2 < 0x400)\n
    {\n
        if (*((v0 + 44 + v2 * 60 + 56)) != 255)\n
        {\n
LABEL_40da2b:\n
            v8 = v2 + 1;\n
            v2 = v8;\n
        }\n
        else\n
        {\n
            v1 = cgc_memcmp(v0 + 44 + v2 * 60 + 12, v6, 8);\n
            if (v1)\n
            {\n
LABEL_40da26:\n
                goto LABEL_40da2b;\n
            }\n
            if (*((v0 + 44 + v2 * 60 + 8)) <= 0)\n
                goto LABEL_40da26;\n
            if (*((v0 + 44 + v2 * 60 + 52)) >= v3 && !(!v3))\n
                goto LABEL_40da21;\n
            v3 = *((v0 + v2 * 60 + 96));\n
            v10 = v12 - 1;\n
            if (![D] GetI(136:I8x8)[t3,0])\n
            {\n
                v11 = v10 - 1;\n
                [D] PutI(72:F64x8)[t6,0] = t9\n
                [D] PutI(136:I8x8)[t6,0] = 0x01\n
            }\n
            else\n
            {\n
                v11 = v10 - 1;\n
                [D] PutI(72:F64x8)[t6,0] = t9\n
                [D] PutI(136:I8x8)[t6,0] = 0x01\n
            }\n
            if (![D] GetI(136:I8x8)[t3,0])\n
            {\n
                v4 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v12 = v11 + 1;\n
            }\n
            else\n
            {\n
                v4 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v12 = v11 + 1;\n
            }\n
LABEL_40da21:\n
            goto LABEL_40da26;\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v8;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v8;\n
}\n
", "4250183:sub_40da47": null, "4250192:cgc_find_sell_order": "typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_sell_order(struct_0 *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_1 *v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v9;  // ftop\n
    unsigned int v10;  // ftop\n
    unsigned int v11;  // ftop\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    for (v3 = 0; v3 < 0x400; v3 += 1)\n
    {\n
        v2 = v0 + 44 + v3 * 60 + 4;\n
        v1 = 1;\n
        if (v2 && v2->field_8)\n
            v1 = cgc_match_symbol(v2, v6);\n
        if (v2 && !v1)\n
        {\n
            [D] PutI(72:F64x8)[t7,0] = t10\n
            [D] PutI(136:I8x8)[t7,0] = 0x01\n
            v9 = ftop<4> - 1 - 1;\n
            [D] PutI(72:F64x8)[t21,0] = t24\n
            [D] PutI(136:I8x8)[t21,0] = 0x01\n
            [D] PutI(136:I8x8)[t37,0] = 0x00\n
            v10 = v9 + 1;\n
            [D] PutI(72:F64x8)[t51,0] = t52\n
            [D] PutI(136:I8x8)[t51,0] = 0x01\n
            [D] PutI(136:I8x8)[t51,0] = 0x00\n
            v11 = v10 + 1;\n
            if ((CmpF(([D] GetI(136:I8x8)[t37,0] ? [D] GetI(72:F64x8)[t37,0] : nan), ([D] GetI(136:I8x8)[t37,1] ? [D] GetI(72:F64x8)[t37,1] : nan)) & 1) != 1 && v2->field_4 > 0 && v2->field_4 >= v6->field_4)\n
            {\n
                if (!v5)\n
                {\n
                    v12 = v0;\n
                    v5 = *((v12 + 44 + v3 * 60 + 52));\n
                    v4 = v12 + 44 + v3 * 60;\n
                }\n
                else if (*((v0 + 44 + v3 * 60 + 52)) < v5)\n
                {\n
                    v13 = v0;\n
                    v5 = *((v13 + 44 + v3 * 60 + 52));\n
                    v4 = v13 + 44 + v3 * 60;\n
                }\n
            }\n
        }\n
    }\n
    return v4;\n
}\n
", "4250557:sub_40dbbd": null, "4250560:cgc_add_to_order_book": "typedef struct struct_0 {\n
    char padding_0[36];\n
    unsigned int field_24;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_to_order_book(struct_1 *v4, unsigned int a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= 0x400)\n
        {\n
            v3 = 16777215;\n
            return v3;\n
        }\n
        if (!*(&v0->padding_0[60 * v2 + 56]))\n
            break;\n
        v2 += 1;\n
    }\n
    v1 = &v0->padding_0[60 * v2 + 56];\n
    cgc_memcpy(v4 + 1, v1, 8);\n
    v5 = v0;\n
    *(&v5->padding_0[60 * v2 + 52]) = v4->field_4;\n
    [D] PutI(72:F64x8)[t50,0] = t53\n
    [D] PutI(136:I8x8)[t50,0] = 0x01\n
    *(&v5->padding_0[60 * v2 + 48]) = ([D] GetI(136:I8x8)[t73,0] ? [D] GetI(72:F64x8)[t73,0] : nan);\n
    [D] PutI(136:I8x8)[t73,0] = 0x00\n
    *(&v5->padding_0[60 * v2 + 44]) = a0;\n
    if (a1 && a1 != 255)\n
        cgc__terminate();\n
    v6 = v0;\n
    *(&v6->padding_0[60 * v2 + 100]) = a1;\n
    *(&v6->padding_0[60 * v2 + 96]) = v6->field_24;\n
    v6->field_24 = v6->field_24 + 1;\n
    v3 = 153;\n
    return v3;\n
}\n
", "4250887:sub_40dd07": null, "4250896:cgc_check_account_balance_can_buy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_check_account_balance_can_buy(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0x8]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 >= 100)\n
    {\n
        v3 = 240;\n
        return v3;\n
    }\n
    v1 = v4->field_4;\n
    v2 = 0;\n
    if ([D] GetI(136:I8x8)[t22,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    [D] PutI(72:F64x8)[t7,0] = t10\n
    [D] PutI(136:I8x8)[t7,0] = 0x01\n
    [D] PutI(72:F64x8)[t18,1] = t19\n
    [D] PutI(136:I8x8)[t18,1] = 0x01\n
    [D] PutI(136:I8x8)[t18,0] = 0x00\n
    [D] PutI(72:F64x8)[t47,0] = t50\n
    [D] PutI(136:I8x8)[t47,0] = 0x01\n
    [D] PutI(136:I8x8)[t63,0] = 0x00\n
    [D] PutI(72:F64x8)[t77,0] = t78\n
    [D] PutI(136:I8x8)[t77,0] = 0x01\n
    [D] PutI(136:I8x8)[t77,0] = 0x00\n
    if (((CmpF(([D] GetI(136:I8x8)[t63,0] ? [D] GetI(72:F64x8)[t63,0] : nan), ([D] GetI(136:I8x8)[t63,1] ? [D] GetI(72:F64x8)[t63,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t63,0] ? [D] GetI(72:F64x8)[t63,0] : nan), ([D] GetI(136:I8x8)[t63,1] ? [D] GetI(72:F64x8)[t63,1] : nan)) & 69) >> 6)) & 1) == 1)\n
    {\n
        v3 = 85;\n
        return v3;\n
    }\n
    v3 = 0;\n
    return v3;\n
}\n
", "4251031:sub_40dd97": null, "4251040:cgc_generic_resp": "int cgc_generic_resp(unsigned int v0[3], unsigned int a0, unsigned int a1)\n
{\n
    v0[0] = 1;\n
    v0[1] = a0;\n
    v0[2] = a1;\n
    return v0;\n
}\n
", "4251081:sub_40ddc9": null, "4251088:cgc_gen_order_fill_msg": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_gen_order_fill_msg(unsigned int v3[3], unsigned int a0, char *a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_generic_resp(v3, a0, a3);\n
    if (a0 && a0 != 255)\n
        cgc__terminate();\n
    v1 = &v3[1 + 2];\n
    cgc_memcpy(a1, v1, 8);\n
    v1->field_8 = a2;\n
    return 8;\n
}\n
", "4251246:sub_40de6e": null, "4251248:cgc_check_account_holding_in_qty_sell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_ACCOUNTS;\n
\n
int cgc_check_account_holding_in_qty_sell(struct_0 *v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int *v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &(&cgc_ACCOUNTS)[420 * a0];\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= 32)\n
        {\n
            v4 = 136;\n
            return v4;\n
        }\n
        v1 = v3 + 36 + v2 * 12;\n
        if (!cgc_memcmp(v1 + 1, v5 + 1, 8))\n
            break;\n
        v2 += 1;\n
    }\n
    if (v5->field_4 <= *(v1))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = 102;\n
    return v4;\n
}\n
", "4251446:sub_40df36": null, "4251456:cgc_fill_buy_order": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fill_buy_order(unsigned int v2, unsigned int *a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        v1 = 136;\n
        return v1;\n
    }\n
    v1 = cgc_fill_order(v2, a1, a0);\n
    return v1;\n
}\n
", "4251549:sub_40df9d": null, "4251552:cgc_run_option_transaction": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_option_transaction(unsigned int v6, void* a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a1)\n
    {\n
        v4 = cgc_check_account_balance_can_buy(a0, v6);\n
        if (v4)\n
        {\n
            v5 = v4;\n
            return v5;\n
        }\n
        v3 = cgc_find_sell_order(a0);\n
        v2 = cgc_fill_buy_order(v6, v3, a0);\n
        if (!v2)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v5 = v2;\n
        return v5;\n
    }\n
    else if (a1 == 255)\n
    {\n
        v1 = cgc_check_account_holding_in_qty_sell(a0, v6);\n
        if (v1)\n
        {\n
            v5 = v1;\n
            return v5;\n
        }\n
        v5 = cgc_add_to_order_book(a0, v6, 255);\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 241;\n
        return v5;\n
    }\n
}\n
", "4251835:sub_40e0bb": null, "4251840:cgc_get_data_len": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_get_data_len(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = v2->field_4;\n
    if (!v0)\n
    {\n
        v1 = 44;\n
        return v1;\n
    }\n
    else if (v0 == 255)\n
    {\n
        v1 = 44;\n
        return v1;\n
    }\n
    else if (v0 != 0xdd00)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 8;\n
        return v1;\n
    }\n
}\n
", "4251960:sub_40e138": null, "4251968:cgc_recv_rest": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_recv_rest(void* v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_get_data_len(v3);\n
    v5 = v2;\n
    return cgc_recv_all(v1, v3 + 24);\n
}\n
", "4252037:sub_40e185": null, "4252048:cgc_err_resp": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char *field_10;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_err_resp(unsigned int v3, struct_0 *a0, unsigned int a1[6])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3 != 238)\n
    {\n
        a1[5] = v3;\n
        a1[2] = a0->field_8;\n
        a1[1] = 65535;\n
        a1[0] = 1;\n
        v2 = 24;\n
        return v2;\n
    }\n
    v1 = a0 + 1;\n
    cgc_memcpy(a0->field_10, &a1[5], a0->field_c);\n
    a1[3] = a0->field_c;\n
    v2 = a1[3];\n
    return v2;\n
}\n
", "4252220:sub_40e23c": null, "4252224:cgc_checksum_order": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_checksum_order(unsigned int v7, struct_0 *a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
    struct_0 *v11;  // eax\n
\n
    v6 = v8;\n
    v5 = v9;\n
    v4 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v11 = a0;\n
    [D] PutI(72:F64x8)[t63,0] = t66\n
    [D] PutI(136:I8x8)[t63,0] = 0x01\n
    v0 = ([D] GetI(136:I8x8)[t87,0] ? [D] GetI(72:F64x8)[t87,0] : nan);\n
    [D] PutI(136:I8x8)[t87,0] = 0x00\n
    cgc_checksum(v7, v11->field_4, v11 + 1, v0, a1);\n
    v2 = cgc_memcmp(a1, a0 + 2, 32);\n
    if (!v2)\n
        v3 = 0;\n
    else\n
        v3 = 204;\n
    return v3;\n
}\n
", "4252372:sub_40e2d4": null, "4252384:cgc_run_sell": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_sell(unsigned int v10[3], unsigned int a0[3])\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    void* v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    char v7;  // [bp-0x30]\n
    struct_0 *v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
\n
    v9 = v11;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = &v10[1 + 2];\n
    v6 = cgc_checksum_order(v10[2], v8, &v7);\n
    if (v6)\n
        cgc__terminate();\n
    v5 = cgc_run_option_transaction(v10[2], v8, v10[1]);\n
    v4 = 0;\n
    if (v5)\n
    {\n
        v3 = cgc_err_resp(v5, v10, a0);\n
        v12 = cgc_transmit_all(a0, v3);\n
        v2 = v12;\n
        if (!v2)\n
            return v12;\n
        v12 = cgc__terminate();\n
    }\n
    else\n
    {\n
        v1 = cgc_gen_order_fill_msg(a0, 255, v8 + 1, v8->field_4, v10[2]);\n
        v12 = cgc_transmit_all(a0, v1 + 24);\n
        if (!v12)\n
            return v12;\n
        v12 = cgc__terminate();\n
    }\n
}\n
", "4252732:sub_40e43c": null, "4252736:cgc_run_buy": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_buy(unsigned int v9[3], unsigned int a0[3])\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    unsigned int v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x44]\n
    unsigned int v3;  // [bp-0x40]\n
    unsigned int v4;  // [bp-0x3c]\n
    unsigned int v5;  // [bp-0x38]\n
    char v6;  // [bp-0x34]\n
    struct_0 *v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
\n
    v8 = v10;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = &v9[1 + 2];\n
    v5 = cgc_checksum_order(v9[2], v7, &v6);\n
    if (v5)\n
        cgc__terminate();\n
    v4 = cgc_run_option_transaction(v9[2], v7, v9[1]);\n
    if (v4)\n
    {\n
        v3 = cgc_err_resp(v4, v9, a0);\n
        v11 = cgc_transmit_all(a0, v3);\n
        v2 = v11;\n
        if (v2)\n
            v11 = cgc__terminate();\n
        if (v4 != 238)\n
            return v11;\n
        v11 = cgc__terminate();\n
    }\n
    else\n
    {\n
        v1 = cgc_gen_order_fill_msg(a0, 0, v7 + 1, v7->field_4, v9[2]);\n
        v11 = cgc_transmit_all(a0, v1 + 24);\n
        if (!v11)\n
            return v11;\n
        v11 = cgc__terminate();\n
    }\n
}\n
", "4253109:sub_40e5b5": null, "4253120:cgc_run_quote": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_quote(char *v4, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
    unsigned int v5;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v4[20];\n
    if (!v3 + 1)\n
    {\n
        cgc__terminate();\n
        main(); /* do not return */\n
    }\n
    cgc_get_current_ask(v3 + 1);\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        v2 = [D] GetI(72:F64x8)[t7,0];\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    else\n
    {\n
        v2 = nan;\n
        [D] PutI(136:I8x8)[t7,0] = 0x00\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    else\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
    }\n
    *(v3) = ([D] GetI(136:I8x8)[t12,0] ? [D] GetI(72:F64x8)[t12,0] : nan);\n
    [D] PutI(136:I8x8)[t12,0] = 0x00\n
    v1 = cgc_get_data_len(v4);\n
    cgc_memcpy(v4, a0, v1 + 24);\n
    *(a0) = 1;\n
    v5 = cgc_transmit_all(a0, v1 + 24);\n
    if (v5)\n
    {\n
        v5 = cgc__terminate();\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4253328:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v12, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x802c]\n
    unsigned int v1;  // [bp-0x8028]\n
    unsigned int v2;  // [bp-0x8024]\n
    unsigned int v3;  // [bp-0x8020]\n
    void* v4;  // [bp-0x801c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x8018], Other Possible Types: unsigned int\n
    unsigned int *v6;  // [bp-0x8014]\n
    unsigned int v7[3];  // [bp-0x8010]\n
    char v8;  // [bp-0x800c]\n
    char v9;  // [bp-0x400c]\n
    void* v10;  // [bp-0xc]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
\n
    v11 = v13;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    cgc_init_accounts();\n
    v7[0] = &v9;\n
    v6 = &v8;\n
    v5 = 0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        v4 += 1;\n
        cgc_memclr(v7, 24);\n
        v3 = cgc_recv_all(24, v7);\n
        if (v3)\n
            cgc__terminate();\n
        if (v7[0])\n
            cgc__terminate();\n
        if (v7[2] >= 100)\n
            cgc__terminate();\n
        v2 = cgc_recv_rest(v7);\n
        if (v2)\n
            cgc__terminate();\n
        v0 = v7[1];\n
        if (!v0)\n
        {\n
            cgc_run_buy(v7, v6);\n
        }\n
        else if (v0 == 255)\n
        {\n
            cgc_run_sell(v7, v6);\n
        }\n
        else if (v0 == 0xdd00)\n
        {\n
            cgc_run_quote(v7, v6);\n
        }\n
        else if (v0 == 65535)\n
        {\n
            cgc__terminate();\n
        }\n
        v5 += 1;\n
    }\n
}\n
", "4253892:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}