{"4202496:_init": "extern struct_0 *g_409138;\n
\n
int _init()\n
{\n
    if (g_409138)\n
    {\n
        g_409138();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202592:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202640:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202656:sub_4020a0": "int sub_4020a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202662:sub_4020a6": null, "4202672:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202715:sub_4020db": null, "4202716:sub_4020dc": "int sub_4020dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202720:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202724:sub_4020e4": null, "4202736:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28751;\n
    v6 = v5 + 794;\n
    v7 = v5 + 794;\n
    if (v7 == v6)\n
        return v5 + 794;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202787:sub_402123": "int sub_402123()\n
{\n
}\n
", "4202793:sub_402129": "int sub_402129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202800:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28687;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 794;\n
    v9 = (v6 + 794 - (v6 + 794) >> 31) + (794 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202871:sub_402177": "int sub_402177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202880:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409134;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409134)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202955:sub_4021cb": "int sub_4021cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202960:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4202969:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4202973:sub_4021dd": null, "4202976:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v4;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v4 = cgc_malloc_alloc(&g_heap);\n
    if (v4)\n
    {\n
        v0 = v1 * a0;\n
        cgc_memset(v4, 0);\n
        return v4;\n
    }\n
    return 0;\n
}\n
", "4203066:sub_40223a": null, "4203072:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 1;\n
}\n
", "4203100:sub_40225c": null, "4203104:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 2;\n
}\n
", "4203132:sub_40227c": null, "4203136:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 16;\n
}\n
", "4203164:sub_40229c": null, "4203168:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 14;\n
}\n
", "4203196:sub_4022bc": null, "4203200:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 12;\n
}\n
", "4203228:sub_4022dc": null, "4203232:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 4;\n
}\n
", "4203260:sub_4022fc": null, "4203264:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 8;\n
}\n
", "4203292:sub_40231c": null, "4203296:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 64;\n
}\n
", "4203324:sub_40233c": null, "4203328:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 32;\n
}\n
", "4203356:sub_40235c": null, "4203360:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8508 + v0] & 4294967168;\n
}\n
", "4203388:sub_40237c": null, "4203392:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8508 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8508 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8508 + v1] & 2) >> 1);\n
}\n
", "4203450:sub_4023ba": null, "4203456:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8508 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203489:sub_4023e1": null, "4203504:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8508 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8508 + v2] & 2))\n
        return v2 - 48;\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    return 0;\n
}\n
", "4203565:sub_40242d": null, "4203568:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8508 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203601:sub_402451": null, "4203616:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v2;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203648:cgc_fflush": "int cgc_fflush(unsigned int v3[4])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4[4];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    void* v13;  // ecx, Other Possible Types: unsigned int\n
    void* v14;  // eax, Other Possible Types: unsigned int\n
\n
    v4 = v3;\n
    v5 = v4[2];\n
    if (v5 == -1)\n
        return 0;\n
    if (v4[1] == 1)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v1 = v4[0];\n
        v6 = 16 + v4 + v5;\n
        v7 = v4[3] - v5;\n
        v13 = 0;\n
        while (true)\n
        {\n
            v8 = v13;\n
            v9 = v7 - v13;\n
            if (v7 <= v13)\n
                break;\n
            v10 = v6 + v13;\n
            v0 = &v2;\n
            v11 = cgc_transmit(v1, v10, v9);\n
            v12 = 0;\n
            if (!v11)\n
                v12 = *(&v2);\n
            v13 = v12 + v8;\n
            if (v11)\n
                break;\n
        }\n
        v14 = -(v8 < v7);\n
        v4 = v3;\n
    }\n
    *((v4 + 12)) = 0;\n
    *((v4 + 8)) = 0;\n
    return v14;\n
}\n
", "4203714:sub_4024c2": null, "4203806:sub_40251e": null, "4203808:cgc_fbuffered": "int cgc_fbuffered(unsigned int v3[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // edx\n
    unsigned int v5[4];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7[4];  // ecx\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ecx\n
    void* v12;  // ebp, Other Possible Types: unsigned int\n
\n
    v4 = a0;\n
    v5 = v3;\n
    v6 = v5[2];\n
    if (v6 == -1)\n
    {\n
        *((v5 + 8)) = -(v4 < 1);\n
        *((v5 + 12)) = 0;\n
        return -(v4 < 1);\n
    }\n
    if (v5[1] != 1)\n
    {\n
        v7 = v3;\n
        v1 = v7[0];\n
        v9 = v7[3] - v6;\n
        v12 = 0;\n
        while (v9 > v12)\n
        {\n
            v0 = &v2;\n
            v10 = cgc_transmit(v1, (16 + v7 + v6 + v12), v9 - v12);\n
            v11 = 0;\n
            if (!v10)\n
                v11 = *(&v2);\n
            v12 += v11;\n
            if (v10)\n
                break;\n
        }\n
    }\n
    v5 = v3;\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    v4 = a0;\n
}\n
", "4203919:sub_40258f": null, "4203966:sub_4025be": null, "4203968:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_fread(unsigned int v3, unsigned int a0, unsigned int a1[4])\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4[4];  // edi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v10;  // edi\n
    void* v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12[4];  // ecx\n
    unsigned int v13;  // eax\n
    unsigned int v15;  // ecx\n
\n
    v4 = a1;\n
    if (v4[2] == v4[3])\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v0 = &v2;\n
        if (!cgc_receive(v4[0], v4 + 1, 0x400))\n
        {\n
            v5 = *(&v2);\n
            if (v5)\n
                v4[3] = v5;\n
        }\n
    }\n
    v6 = a0;\n
    v7 = v3;\n
    v8 = v4[2];\n
    if (v8 != -1)\n
    {\n
        v9 = v4[3] - v8;\n
        if (v9 > v6)\n
            v9 = v6;\n
        v1 = v9;\n
        v10 = v7;\n
        cgc_memcpy();\n
        v11 = v1;\n
        v12 = a1;\n
        v13 = v12[2] + v1;\n
        v12[2] = v13;\n
        if (v13 == v12[3])\n
        {\n
            v12[3] = 0;\n
            v12[2] = 0;\n
        }\n
        if (!(v11 < v6))\n
            goto LABEL_4026c1;\n
    }\n
    else\n
    {\n
        v10 = v7;\n
        v11 = 0;\n
        if (0 >= v6)\n
        {\n
LABEL_4026c1:\n
            return v11;\n
        }\n
    }\n
    while (true)\n
    {\n
        v0 = &v1;\n
        if (cgc_receive(a1[0], v10 + v11, v6 - v11))\n
            return -1;\n
        v15 = v1;\n
        if (!v15)\n
            return -1;\n
        v11 += v15;\n
        if (v11 >= v6)\n
            return v11;\n
    }\n
}\n
", "4204235:sub_4026cb": null, "4204240:cgc_freaduntil": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_freaduntil(unsigned int v5, unsigned int a0, char a1, unsigned int a2[4])\n
{\n
    int tmp_20;  // tmp #20\n
    struct_0 *v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6[4];  // ebp\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
    char *v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
\n
    v6 = a2;\n
    v7 = a0;\n
    v4 = a1;\n
    tmp_20 = v7;\n
    v8 = v7 - 1;\n
    if (tmp_20 == 1)\n
    {\n
        v14 = 0;\n
    }\n
    else\n
    {\n
        v3 = v6 + 1;\n
        v14 = 0;\n
        while (true)\n
        {\n
            v9 = v6[2];\n
            if (v9 == -1)\n
            {\n
                v0 = &v2;\n
                v12 = -1;\n
                if (!cgc_receive(v6[0], &v1, 1) && *(&v2))\n
                    v12 = v1;\n
                if (v12 == -1)\n
                    goto LABEL_4027d0;\n
                goto LABEL_4027a5;\n
            }\n
            if (v9 != v6[3])\n
            {\n
LABEL_402755:\n
                v11 = v6[2];\n
                v6[2] = v11 + 1;\n
                v12 = *(16 + &v6[0] + v11);\n
                if (v12 == -1)\n
                    goto LABEL_4027d0;\n
                goto LABEL_4027a5;\n
            }\n
            v6[3] = 0;\n
            v6[2] = 0;\n
            v0 = &v2;\n
            if (!cgc_receive(v6[0], v3, 0x400))\n
            {\n
                v10 = *(&v2);\n
                if (v10)\n
                {\n
                    v6[3] = v10;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
                        goto LABEL_4027c0;\n
                    goto LABEL_402755;\n
                }\n
            }\n
LABEL_4027c0:\n
            v12 = -1;\n
            if (false)\n
            {\n
LABEL_4027a5:\n
                v13 = 2;\n
                if (v12 != v4)\n
                {\n
                    *((v5 + v14)) = v12;\n
                    v13 = 0;\n
                    goto LABEL_4027d5;\n
                }\n
            }\n
LABEL_4027d0:\n
            v13 = 1;\n
LABEL_4027d5:\n
            if (v13)\n
                break;\n
            v14 += 1;\n
            if (v8 == v14)\n
                goto LABEL_4027f3;\n
        }\n
        if (!(v13 == 2))\n
            goto LABEL_4028be;\n
    }\n
LABEL_4027f3:\n
    if (v14 != v8)\n
    {\n
        *((v5 + v14)) = 0;\n
        return v14;\n
    }\n
    v3 = v6 + 1;\n
    do\n
    {\n
        v15 = v6[2];\n
        if (v15 == -1)\n
        {\n
            v0 = &v2;\n
            v16 = -1;\n
            if (!cgc_receive(v6[0], &v1, 1) && *(&v2))\n
            {\n
                v16 = v1;\n
                goto LABEL_4028a5;\n
            }\n
        }\n
        if (v15 != v6[3])\n
        {\n
LABEL_402851:\n
            v18 = v6[2];\n
            v6[2] = v18 + 1;\n
            v16 = *(16 + &v6[0] + v18);\n
            goto LABEL_4028a5;\n
        }\n
        else\n
        {\n
            v6[3] = 0;\n
            v6[2] = 0;\n
            v0 = &v2;\n
            if (!cgc_receive(v6[0], v3, 0x400))\n
            {\n
                v17 = *(&v2);\n
                if (v17)\n
                {\n
                    v6[3] = v17;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
                        goto LABEL_4028a0;\n
                    goto LABEL_402851;\n
                }\n
            }\n
LABEL_4028a0:\n
            v16 = -1;\n
LABEL_4028a5:\n
            if (v16 == -1)\n
                goto LABEL_4028be;\n
            else\n
                goto LABEL_4028aa;\n
        }\n
LABEL_4028aa:\n
    } while (v16 != v4);\n
LABEL_4028be:\n
    return -1;\n
}\n
", "4204394:sub_40276a": null, "4204475:sub_4027bb": null, "4204641:sub_402861": null, "4204698:sub_40289a": null, "4204749:sub_4028cd": null, "4204752:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4204792:sub_4028f8": null, "4204800:cgc_fwrite": "int cgc_fwrite(unsigned int v2, unsigned int a0, unsigned int a1[4])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3[4];  // edi\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    void* v9;  // edi, Other Possible Types: unsigned int\n
    void* v10;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v11[4];  // ecx\n
\n
    v3 = a1;\n
    v4 = a0;\n
    if (v3[2] != -1)\n
    {\n
        if (v4 >= 0x400)\n
        {\n
            cgc_fflush(v3);\n
        }\n
        else\n
        {\n
            v5 = v3[3];\n
            v10 = 0;\n
            if (v5 + v4 >= 0x400)\n
            {\n
                v10 = 0x400 - v5;\n
                cgc_memcpy(16 + v5 + v3, v2);\n
                v3[3] = v3[3] + v10;\n
                cgc_fflush(v3);\n
            }\n
            if (v10 >= v4)\n
                return v10;\n
            v11 = v3;\n
            cgc_memcpy(16 + v11[3] + v11, v2 + v10);\n
            a1[3] = a1[3] + v4 - v10;\n
            return a0;\n
        }\n
    }\n
    v6 = v3[0];\n
    v9 = 0;\n
    while (true)\n
    {\n
        if (v9 >= v4)\n
            return a0;\n
        v0 = &v1;\n
        v7 = cgc_transmit(v6, v2 + v9, v4 - v9);\n
        v8 = 0;\n
        if (!v7)\n
            v8 = *(&v1);\n
        v9 += v8;\n
        if (v7)\n
            return -1;\n
    }\n
}\n
", "4204859:sub_40293b": null, "4205042:sub_4029f2": null, "4205056:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4205096:sub_402a28": null, "4205104:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_4[516];\n
    struct struct_2 *field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_3 *field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int cgc_malloc_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[262142];  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    struct_5 *v6;  // [bp-0xc]\n
    char v7;  // [bp+0x0]\n
    unsigned int v9;  // ebp\n
    unsigned int v10;  // edi\n
    struct_2 *v11;  // ebp\n
    struct_2 *v12;  // esi\n
    unsigned int v13;  // ebp\n
    struct_4 *v14;  // ebp, Other Possible Types: unsigned int\n
    struct_3 *v15;  // edi, Other Possible Types: unsigned int\n
    struct_3 *v16;  // eax, Other Possible Types: unsigned int\n
    struct_4 *v17;  // edx, Other Possible Types: unsigned int\n
    unsigned int v18[262142];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct_5 *v21;  // eax, Other Possible Types: unsigned int\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    struct_0 *v24;  // ecx\n
    struct_2 *v25;  // ecx\n
    unsigned int v26;  // ecx\n
    struct_1 *v27;  // eax\n
    struct_0 *v28;  // edx\n
    unsigned int v29;  // edx\n
    unsigned int v30;  // edx\n
    struct_4 *v31;  // edx, Other Possible Types: unsigned int\n
    struct_4 *v32;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // esi\n
    struct_0 *v35;  // ecx\n
\n
    if (a0 < 0)\n
        return 0;\n
    v9 = a0 + 3 & -0x4;\n
    if ((a0 + 3 & -0x4) && v9 > 15)\n
    {\n
        if (v9 > 131071)\n
        {\n
            v13 = v9 + 4103 & -0x1000;\n
            v0 = &v4;\n
            if (cgc_allocate(v13, 0))\n
                return 0;\n
            v15 = *(&v4);\n
            *(v15) = v8;\n
            *((v15 + 4)) = v13;\n
            goto LABEL_402d0f;\n
        }\n
        v11 = v9 + 23;\n
        v12 = v11 & -0x10;\n
        if (!(v11 & -0x10))\n
        {\n
            v14 = -1;\n
        }\n
        else if (v12 <= 0x200)\n
        {\n
            v14 = (v11 >> 4) + 2;\n
        }\n
        else if (v12 <= 0x1200)\n
        {\n
            v14 = (v12 + 32 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v14 = 130;\n
            if (v12 <= 0x20000)\n
                v14 = (v12 + 288 >> 11) + 66;\n
        }\n
        v15 = 0;\n
        if (v14 <= 130)\n
        {\n
            do\n
            {\n
                v16 = *((v8 + v14 * 4));\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        if (*((v16 + 4)) >= v12)\n
                        {\n
                            v15 = v16;\n
                            goto LABEL_402b40;\n
                        }\n
                        v16 = *((v16 + 12));\n
                    } while (v16);\n
                }\n
                v14 += 1;\n
            } while (v14 != 131);\n
            v14 = 131;\n
            if (!(131 == 131))\n
                goto LABEL_402c43;\n
            goto LABEL_402b4c;\n
        }\n
LABEL_402b40:\n
        if (!(v14 == 131))\n
            goto LABEL_402c43;\n
LABEL_402b4c:\n
        v0 = &v3;\n
        v17 = v8;\n
        v18 = 0;\n
        if (!cgc_allocate(0x200000, 0))\n
        {\n
            v19 = *(&v3);\n
            v2[0] = v19 + 1048575;\n
            v18 = v19 + 1048575 & -0x100000;\n
            if ((v19 + 1048575 & -0x100000) > v19)\n
            {\n
                v1 = v19;\n
                cgc_deallocate(v19);\n
                v19 = v1;\n
                v17 = v8;\n
            }\n
            v20 = v18 + 0x100000;\n
            if (v19 + 0x200000 > v20)\n
            {\n
                cgc_deallocate(v20);\n
                v17 = v8;\n
            }\n
            *((v17 + (v2 >> 20) + 524)) = 2;\n
        }\n
        if (!v18)\n
            return 0;\n
        v21 = v18 + 19 & -0x10;\n
        v21->field_0 = 0;\n
        v22 = 1048560 + v18 - v21;\n
        v21->field_4 = v22;\n
        *((v18 + 1048560)) = v22;\n
        *((v18 + 1048564)) = 0;\n
        v23 = v21->field_4;\n
        if (!(!(v23 & 1)))\n
            goto LABEL_402d42;\n
        v21->field_4 = v23 | 1;\n
        v21->field_8 = 0;\n
        v21->field_c = *((v17 + 520));\n
        *((v17 + 520)) = v21;\n
        v24 = v21->field_c;\n
        if (v24)\n
            v24->field_8 = v21;\n
        v15 = *((v17 + 520));\n
        v14 = 130;\n
LABEL_402c43:\n
        v25 = *((v15 + 4));\n
        if (!(v25 & 1))\n
        {\n
            v21 = cgc_heap_error(\"BAD SMALL UNLINK: block is not free hdr=%08X\\n
\");\n
        }\n
        else\n
        {\n
            v26 = v25 & -2;\n
            *((v15 + 4)) = v26;\n
            v27 = *((v15 + 8));\n
            if (v27)\n
                v27->field_c = *((v15 + 12));\n
            v28 = *((v15 + 12));\n
            if (v28)\n
                v28->field_8 = v27;\n
            v29 = v8;\n
            if (*((v29 + (v14 << 2))) == v15)\n
                *((v29 + v14 * 4)) = *((v15 + 12));\n
            *((v15 + 8)) = 0;\n
            *((v15 + 12)) = 0;\n
            v30 = v26 - v12;\n
            if (v30 < 33)\n
            {\n
LABEL_402d0f:\n
                v10 = v15 + 8;\n
                return v10;\n
            }\n
            v21 = v12 + v15;\n
            *((v15 + 4)) = v12;\n
            *((&v12->field_0 + v15)) = v12;\n
            *((4 + &v12->field_0 + v15)) = v30;\n
            *((v26 + v15)) = v30;\n
            if (v30 <= 0x200)\n
            {\n
                v31 = (v30 >> 4) + 2;\n
            }\n
            else if (v30 <= 0x1200)\n
            {\n
                v31 = (v30 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v32 = 130;\n
                if (!(v30 <= 0x20000))\n
                    goto LABEL_402ce3;\n
                v31 = (v30 - 0x1200 >> 11) + 66;\n
            }\n
            v32 = v31;\n
LABEL_402ce3:\n
            v33 = *((v21 + 4));\n
            if (!(v33 & 1))\n
            {\n
                *((v21 + 4)) = v33 | 1;\n
                *((v21 + 8)) = 0;\n
                v34 = v8;\n
                *((v21 + 12)) = *((v34 + v32 * 4));\n
                *((v34 + v32 * 4)) = v21;\n
                v35 = *((v21 + 12));\n
                if (v35)\n
                {\n
                    v35->field_8 = v21;\n
                    goto LABEL_402d0f;\n
                }\n
            }\n
        }\n
LABEL_402d42:\n
        v6 = v21;\n
        v5 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
        cgc_heap_error(*(&v7));\n
        return cgc_tiny_alloc(v8);\n
    }\n
    v10 = cgc_tiny_alloc();\n
    return v10;\n
}\n
", "4205920:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    struct struct_2 *field_1218;\n
    struct struct_2 *field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x28]\n
    struct_0 *v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    char v6;  // [bp-0x14]\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // esi\n
    struct_0 *v10;  // edi, Other Possible Types: unsigned int\n
    unsigned short v11[2];  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v13;  // ebp, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    unsigned short *v16;  // ebx\n
    unsigned int v17;  // edx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
\n
    v9 = v8;\n
    if (v8 <= 15)\n
    {\n
        v10 = v8 / 4 - 1;\n
    }\n
    else if (v8 <= 0x200)\n
    {\n
        v10 = (v8 >> 4) + 2;\n
    }\n
    else if (v8 <= 0x1200)\n
    {\n
        v10 = (v8 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v8 <= 0x20000)\n
            v10 = (v8 - 0x1200 >> 11) + 66;\n
    }\n
    v13 = *((v12 + v10 * 4));\n
    if (*((v12 + (v10 << 2))))\n
    {\n
        *((v12 + v10 * 4)) = *(v13);\n
        return *((v12 + v10 * 4));\n
    }\n
    v11 = *((v12 + v10 * 4 + 4620));\n
    if (!v11)\n
    {\n
        if (!*((v12 + 4632)))\n
        {\n
            v0 = &v6;\n
            v2 = v12;\n
            v12 = v2;\n
            v14 = 0;\n
            if (!cgc_allocate(0x200000, 0))\n
            {\n
                v1 = *(&v6);\n
                v5 = v1 + 1048575;\n
                v14 = v5 & -0x100000;\n
                v3 = v14;\n
                if (v14 > v1)\n
                {\n
                    cgc_deallocate(v1);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                v4 = v14 + 0x100000;\n
                v15 = v1 + 0x200000;\n
                v1 = v15 - v4;\n
                if (v15 > v4)\n
                {\n
                    cgc_deallocate(v4);\n
                    v14 = v3;\n
                    v12 = v2;\n
                }\n
                *((v12 + (v5 >> 20) + 524)) = 1;\n
            }\n
            *((v12 + 4632)) = v14;\n
            if (!v14)\n
                return 0;\n
            *((v12 + 4636)) = 0;\n
        }\n
        v16 = *((v12 + 4632));\n
        v17 = *((v12 + 4636));\n
        v11 = v17 + v16;\n
        *((v12 + v10 * 4 + 4620)) = v11;\n
        *((v17 + v16)) = v9;\n
        *((2 + v17 + v16)) = v9;\n
        v18 = v17 + 0x1000;\n
        *((v12 + 4636)) = v18;\n
        if (v18 == 0x100000)\n
            *((v12 + 4632)) = 0;\n
    }\n
    v19 = *((v11 + 2));\n
    v13 = v19 + v11;\n
    v20 = v9 + v19;\n
    *((v11 + 2)) = v20;\n
    v21 = *(v11);\n
    if (v21 + v20 < 4097)\n
        return v13;\n
    *((v12 + v10 * 4 + 4620)) = 0;\n
}\n
", "4206374:sub_402f26": null, "4206384:malloc_free": "int malloc_free(unsigned int v9, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v7;  // [bp-0x4]\n
    char v8;  // [bp+0x0]\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebp\n
    char v12;  // cl\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edi\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // ebp\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
\n
    v10 = a0;\n
    if (!v10)\n
        return v10;\n
    v11 = v9;\n
    v12 = *((v9 + (v10 >> 20) + 524));\n
    if (v12 != 2)\n
    {\n
        if (v12 == 1)\n
        {\n
            v13 = (*((v10 & -0x1000)) <= 15 ? (*((v10 & -0x1000)) <= 0x200 ? (*((v10 & -0x1000)) <= 0x1200 ? (*((v10 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v10 & -0x1000)) - 0x200 >> 7) + 34) : (*((v10 & -0x1000)) >> 4) + 2) : *((v10 & -0x1000)) / 4 - 1);\n
            *(v10) = *((v11 + v13 * 4));\n
            *((v11 + v13 * 4)) = v10;\n
            return v10;\n
        }\n
        if (v12)\n
            return v10;\n
        if ((v10 & 4095) != 8)\n
        {\n
            v17 = \"BAD FREE: large address is not aligned ptr=%08X\\n
\";\n
            goto LABEL_40329c;\n
        }\n
        else\n
        {\n
            v18 = *((v10 - 8));\n
            if (v18 != v11)\n
            {\n
                v19 = \"BAD FREE: wrong heap address ptr=%08X (%08X != %08X)\\n
\";\n
                v1 = v11;\n
            }\n
            else\n
            {\n
                v18 = *((v10 - 4));\n
                if (v18 - 0x20000 <= 2147356671 && !(v18 & 4095))\n
                {\n
                    v10 = cgc_deallocate(v10 - 8);\n
                    return v10;\n
                }\n
                v19 = \"BAD FREE: wrong block size ptr=%08X (%08X)\\n
\";\n
            }\n
            v0 = v18;\n
            v10 = cgc_heap_error(v19, v10);\n
        }\n
    }\n
    else if (!(v10 & 7))\n
    {\n
        v17 = v10 - 8;\n
        v14 = *((v17 + 4));\n
        if ((v14 & 1))\n
        {\n
            v17 = \"BAD SMALL FREE: double free ptr=%08x\\n
\";\n
            goto LABEL_40329c;\n
        }\n
        else\n
        {\n
            v20 = v14 - 131073;\n
            if (v20 <= -131058)\n
            {\n
                v17 = \"BAD SMALL FREE: corrupted size ptr=%08x\\n
\";\n
                goto LABEL_40329c;\n
            }\n
            else\n
            {\n
                v15 = *(v17);\n
                v16 = v17 - v15;\n
                if (!v15)\n
                    v16 = v15;\n
                if (v16)\n
                {\n
                    v11 = v9;\n
                    if (!((*((v16 + 4)) & -2) == v15))\n
                        goto LABEL_4032c4;\n
                }\n
                v20 = v14 + v17;\n
                if (*(v20) == v14)\n
                {\n
                    if (v16)\n
                    {\n
                        v21 = *((v16 + 4));\n
                        if ((v21 & 1))\n
                        {\n
                            v22 = v21 & -2;\n
                            v3 = v20;\n
                            if ((v21 & -2) <= 15)\n
                            {\n
                                v23 = v21 / 4 - 1;\n
                            }\n
                            else if (v22 <= 0x200)\n
                            {\n
                                v23 = (v21 >> 4) + 2;\n
                            }\n
                            else if (v22 <= 0x1200)\n
                            {\n
                                v23 = (v22 - 0x200 >> 7) + 34;\n
                            }\n
                            else\n
                            {\n
                                v23 = 130;\n
                                if (v22 <= 0x20000)\n
                                    v23 = (v22 - 0x1200 >> 11) + 66;\n
                            }\n
                            *((v16 + 4)) = v22;\n
                            v24 = *((v16 + 8));\n
                            if (v24)\n
                                *((v24 + 12)) = *((v16 + 12));\n
                            v25 = *((v16 + 12));\n
                            if (v25)\n
                                *((v25 + 8)) = v24;\n
                            if (*((v9 + (v23 << 2))) == v16)\n
                            {\n
                                v2 = v22;\n
                                *((v9 + v23 * 4)) = *((v16 + 12));\n
                                v22 = v2;\n
                            }\n
                            *((v16 + 8)) = 0;\n
                            *((v16 + 12)) = 0;\n
                            v26 = v22 + *((v17 + 4));\n
                            *((v16 + 4)) = v26;\n
                            v20 = v3;\n
                            *(v20) = v26;\n
                            v17 = v16;\n
                            v11 = v9;\n
                        }\n
                    }\n
                    v27 = *((v20 + 4));\n
                    if ((v27 & 1))\n
                    {\n
                        v28 = v27 & -2;\n
                        if (v28 <= 15)\n
                        {\n
                            v29 = v27 / 4 - 1;\n
                        }\n
                        else if (v28 <= 0x200)\n
                        {\n
                            v29 = (v27 >> 4) + 2;\n
                        }\n
                        else if (v28 <= 0x1200)\n
                        {\n
                            v29 = (v28 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v29 = 130;\n
                            if (v28 <= 0x20000)\n
                                v29 = (v28 - 0x1200 >> 11) + 66;\n
                        }\n
                        *((v20 + 4)) = v28;\n
                        v30 = *((v20 + 8));\n
                        if (v30)\n
                            *((v30 + 12)) = *((v20 + 12));\n
                        if (*((v20 + 12)))\n
                            *((*((v20 + 12)) + 8)) = v30;\n
                        v11 = v9;\n
                        if (*((v9 + (v29 << 2))) == v20)\n
                            *((v11 + v29 * 4)) = *((v20 + 12));\n
                        *((v20 + 8)) = 0;\n
                        *((v20 + 12)) = 0;\n
                        v16 = v28 + *((v17 + 4));\n
                        *((v17 + 4)) = v16;\n
                        *((v17 + v16)) = v16;\n
                    }\n
                    v31 = *((v17 + 4));\n
                    if (v31 <= 15)\n
                    {\n
                        v32 = v31 / 4 - 1;\n
                    }\n
                    else if (v31 <= 0x200)\n
                    {\n
                        v32 = (v31 >> 4) + 2;\n
                    }\n
                    else if (v31 <= 0x1200)\n
                    {\n
                        v32 = (v31 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v32 = 130;\n
                        if (v31 <= 0x20000)\n
                            v32 = (v31 - 0x1200 >> 11) + 66;\n
                    }\n
                    if (!(v31 & 1))\n
                    {\n
                        *((v17 + 4)) = v31 | 1;\n
                        *((v17 + 8)) = 0;\n
                        *((v17 + 12)) = *((v11 + v32 * 4));\n
                        *((v11 + v32 * 4)) = v17;\n
                        v10 = *((v17 + 12));\n
                        if (!v10)\n
                            return *((v17 + 12));\n
                        *((v10 + 8)) = v17;\n
                    }\n
                    goto LABEL_4032b4;\n
                }\n
            }\n
        }\n
    }\n
    v17 = \"BAD SMALL FREE: address is not aligned ptr=%08X\\n
\";\n
LABEL_40329c:\n
    v7 = v10;\n
    v6 = v17;\n
    v10 = cgc_heap_error(*(&v8));\n
    v6 = v10;\n
    v5 = v20;\n
    v4 = \"BAD SMALL FREE: heap corruption next=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
LABEL_4032b4:\n
    v5 = v17;\n
    v4 = \"BAD SMALL UNLINK: block is already free hdr=%08X\\n
\";\n
    v10 = cgc_heap_error(*(&v8));\n
LABEL_4032c4:\n
    v6 = v10;\n
    v5 = v16;\n
    v4 = \"BAD SMALL FREE: heap corruption prev=%08X ptr=%08X\\n
\";\n
    cgc_heap_error(v9, a0);\n
    return cgc_malloc_size(v9, a0);\n
}\n
", "4207328:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4207377:sub_403311": null, "4207392:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(unsigned int v1, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // ebp\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
        return 0;\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_4033ef:\n
        malloc_free(v1, a0);\n
        return v3;\n
    }\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc_alloc(v7, v2);\n
        return v3;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + (v4 >> 20));\n
    if ((*(524 + v7 + (v4 >> 20)) & 253))\n
    {\n
        v7 = 0;\n
        if (v6 == 1)\n
            v7 = *((v4 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_4033d2;\n
    }\n
    else if (*(&v4->field_0) - 8 >= v2)\n
    {\n
LABEL_4033d2:\n
        return v4;\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        return 0;\n
    v3 = v8;\n
    v9 = v1;\n
    *(&v7) = *((v9 + v5 + 524));\n
    if (!(*((v9 + v5 + 524)) & 253))\n
    {\n
        v10 = *(&v4->field_0) - 8;\n
    }\n
    else\n
    {\n
        v10 = 0;\n
        if (v7 == 1)\n
            v10 = *((v4 & -0x1000));\n
    }\n
    v0 = v10;\n
    cgc_memcpy(v3, v4);\n
    goto LABEL_4033ef;\n
    goto LABEL_4033ef;\n
}\n
", "4207617:sub_403401": null, "4207632:cgc_heap_error": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    char v5;  // [bp+0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v3 = v6;\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v5;\n
    v1 = &v5;\n
    v0 = v4;\n
    cgc_vfprintf(cgc_stderr, v0);\n
    cgc__terminate(1, v0);\n
    cgc_memchr();\n
    return;\n
}\n
", "4207696:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4207750:sub_403486": null, "4207760:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4207821:sub_4034cd": null, "4207824:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4207873:sub_403501": null, "4207888:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            tmp_4 = v1;\n
            v1 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4207969:sub_403561": null, "4207984:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4208028:sub_40359c": null, "4208032:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // eax\n
\n
    v1 = &v3;\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4208134:sub_403606": null, "4208144:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v2;  // eax\n
\n
    if (cgc_stdout->field_8 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v2 = cgc__vsfprintf(cgc_stdout);\n
    if (cgc_stdout->field_8 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4208242:sub_403672": null, "4208256:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    if (v4->field_8 == -1)\n
        v4->field_8 = 0;\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(v4);\n
    if (v4->field_8 == -1)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4208354:sub_4036e2": null, "4208368:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x18]\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
\n
    v2 = v1;\n
    if (v2->field_8 == -1)\n
        v2->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(v2);\n
    if (v2->field_8 == -1)\n
    {\n
        cgc_fflush(v2);\n
        v2->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4208462:sub_40374e": null, "4208464:cgc_sprintf": "int cgc_sprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v3;  // [bp+0xc]\n
\n
    v1 = &v3;\n
    v0 = v2;\n
    return cgc__vsfprintf(0);\n
}\n
", "4208512:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc__vsfprintf(0);\n
}\n
", "4208555:sub_4037ab": null, "4208560:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(unsigned int v16, unsigned int a0)\n
{\n
    int tmp_13;  // tmp #13\n
    unsigned int v0;  // [bp-0x78]\n
    int tmp_2;  // tmp #2\n
    int tmp_25;  // tmp #25\n
    unsigned int v1;  // [bp-0x74]\n
    char v2;  // [bp-0x69]\n
    unsigned int v3;  // [bp-0x68], Other Possible Types: char\n
    unsigned int v4;  // [bp-0x64]\n
    char v5;  // [bp-0x60], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x5c]\n
    unsigned int v7;  // [bp-0x58]\n
    unsigned int v8;  // [bp-0x54]\n
    char v9;  // [bp-0x50]\n
    char v10;  // [bp-0x4f]\n
    char v11;  // [bp-0x3e]\n
    char v12;  // [bp-0x3d]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v20;  // ebx\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // ebp\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // al, Other Possible Types: char\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // eax\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // ebx, Other Possible Types: char\n
    unsigned int v36;  // ecx\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // eax\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v45;  // ebx\n
    unsigned int v46;  // cc_op\n
    unsigned int v47;  // cc_dep1\n
    unsigned int v48;  // cc_dep2\n
    unsigned int v49;  // edx\n
    unsigned int v50;  // edi\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // cc_op\n
    unsigned int v53;  // cc_dep1\n
    unsigned int v54;  // cc_dep2\n
    unsigned int v56;  // edx\n
    unsigned int v57;  // edx\n
    unsigned int v58;  // ebp\n
    unsigned int v59;  // edi\n
    unsigned int v61;  // edi\n
    unsigned int v62;  // edx\n
    unsigned int v63;  // eax\n
    unsigned int v64;  // ecx\n
    unsigned int v65;  // ebx\n
    unsigned int v66;  // edx\n
    unsigned int v67;  // edi\n
    unsigned int v68;  // ebp\n
    unsigned int v72;  // ebx\n
    unsigned int v73;  // ecx, Other Possible Types: char\n
    unsigned int v74;  // edx\n
    unsigned int v75;  // edx\n
    unsigned int v76;  // ecx\n
    unsigned int v77;  // edx\n
    unsigned int v79;  // eax\n
    unsigned int v80;  // ecx\n
    unsigned int v81;  // ebp\n
    unsigned int v83;  // edx\n
    unsigned int v84;  // edx\n
    unsigned int v86;  // ebx\n
    unsigned int v87;  // cc_op\n
    unsigned int v88;  // cc_dep1\n
    unsigned int v89;  // cc_dep2\n
    unsigned int v90;  // cc_op\n
    unsigned int v91;  // cc_dep1\n
    unsigned int v92;  // cc_dep2\n
    unsigned int v93;  // ebp\n
    unsigned int v94;  // edx\n
    unsigned int v95;  // edi\n
    unsigned int v96;  // edx\n
    unsigned int v97;  // edx\n
    unsigned int v98;  // cc_op\n
    unsigned int v99;  // cc_dep1\n
    unsigned int v100;  // cc_dep2\n
    unsigned int v101;  // eax\n
\n
    v15 = v20;\n
    v14 = v21;\n
    v13 = v22;\n
    v6 = v23;\n
    v24 = &_GLOBAL_OFFSET_TABLE_;\n
    v59 = a0;\n
    v26 = v16;\n
    v4 = v25;\n
    v8 = 20 + -0x1 * &v9;\n
    v27 = 0;\n
    v29 = v4;\n
    v4 = v29 + 1;\n
    *(&v29) = *(v29);\n
    if (*(&v29))\n
    {\n
        while (true)\n
        {\n
            if (v29 != 37)\n
            {\n
                if (v27 < 2147483647)\n
                {\n
                    v2 = v29;\n
                    if (v26)\n
                    {\n
                        cgc_fwrite(&v2, 1, v26);\n
                        v26 = v16;\n
                    }\n
                    if (v59)\n
                        *((v59 + v27)) = v2;\n
                }\n
                else if (v27 == -1)\n
                {\n
                    goto LABEL_403e1a;\n
                }\n
                v27 += 1;\n
                v28 = v4;\n
                v4 = v28 + 1;\n
                v29 = *(v28);\n
                if (!v29)\n
                    goto LABEL_4037f0;\n
            }\n
            else\n
            {\n
                v30 = v4;\n
                v4 = *(&v3) + 1;\n
                v31 = *(*(&v3));\n
                if (v31 == 48)\n
                {\n
                    v3 = v30;\n
                    v5 = 48;\n
                    goto LABEL_4038ae;\n
                }\n
                else\n
                {\n
                    v5 = 32;\n
                    if (v31 == 32)\n
                    {\n
                        v3 = *(&v3);\n
LABEL_4038ae:\n
                        v32 = v4;\n
                        v33 = 0;\n
                        if ([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2))))\n
                            v33 = cgc_strtoul(v32, &v4);\n
                        v34 = v4;\n
                        v4 = v34 + 1;\n
                        v35 = *(v34);\n
                        if (v35 == 108)\n
                        {\n
                            v7 = v33;\n
                            *(&v35) = 1;\n
                            if (*(v4) == 108)\n
                            {\n
                                v4 = v34 + 2;\n
                                v35 = 0;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            if (v35 == 104)\n
                            {\n
                                *(&v35) = 1;\n
                                v7 = v33;\n
                                if (*(v4) == 104)\n
                                    v4 = v34 + 2;\n
                            }\n
                            else\n
                            {\n
                                if (v35)\n
                                {\n
                                    v7 = v33;\n
                                    v4 = v34;\n
                                    *(&v35) = 1;\n
                                }\n
                                else\n
                                {\n
                                    v73 = 0;\n
                                    v49 = v16;\n
                                }\n
                            }\n
                        }\n
                        v36 = v4;\n
                        v37 = v36 + 1;\n
                        v4 = v37;\n
                        *(&v32) = *(v36);\n
                        v73 = *(v36);\n
                        v59 = v73 - 88;\n
                        switch (v59)\n
                        {\n
                        case 0: case 12: case 29: case 32:\n
                            if (v32 != 100)\n
                            {\n
                                if (!v35)\n
                                {\n
                                    v73 = 0;\n
                                    v59 = a0;\n
                                    v51 = v16;\n
                                    break;\n
                                }\n
                                else\n
                                {\n
                                    v50 = (v32 == 117 ? 16 : 10);\n
                                    v76 = *(v6);\n
                                    v3 = v24;\n
                                    v65 = v24 - 7627;\n
                                    if (v32 == 88)\n
                                        v65 = v24 - 7644;\n
                                    v12 = 0;\n
                                    v68 = &v12;\n
                                    if (!v76)\n
                                    {\n
                                        v11 = *(v65);\n
                                        v68 = &v11;\n
                                    }\n
                                    else\n
                                    {\n
                                        do\n
                                        {\n
                                            *((v68 - 1)) = *((v65 + ((0 CONCAT v76) /m v50 >> 32)));\n
                                            v68 = &v11;\n
                                            tmp_13 = v76;\n
                                            v76 = (0 CONCAT v76) /m v50;\n
                                        } while (tmp_13 >= v50);\n
                                    }\n
                                    v1 = v8 + v68;\n
                                    v0 = v68;\n
                                    v81 = v3;\n
                                    cgc_memmove(&v9, v0, v1);\n
                                }\n
LABEL_403c7d:\n
                                v73 = v7;\n
                                v3 = cgc_strlen();\n
                                if (v73 <= v3)\n
                                {\n
                                    v94 = v16;\n
                                }\n
                                else\n
                                {\n
                                    v59 = v3 - v73;\n
                                    v94 = v16;\n
                                    do\n
                                    {\n
                                        if (v27 < 2147483647)\n
                                        {\n
                                            v2 = v5;\n
                                            if (v94)\n
                                            {\n
                                                cgc_fwrite(&v2, 1, v94);\n
                                                v94 = v16;\n
                                            }\n
                                            v73 = a0;\n
                                            if (v73)\n
                                                *((v73 + v27)) = v2;\n
                                        }\n
                                        else\n
                                        {\n
                                            if (!(v27 == -1))\n
                                                continue;\n
                                        }\n
                                        tmp_2 = v27;\n
                                        v27 += 1;\n
                                        v59 += 1;\n
                                    } while (!([D] x86g_calculate_condition(0x4<32>, 0x12<32>, edi<4>, 0x0<32>, Conv(1->32, ((t2 + 0x1<32>) < t2)))));\n
                                    goto LABEL_403e1a;\n
                                }\n
                                v6 += 4;\n
                                if (v27 < 2147483647)\n
                                {\n
                                    v95 = 2147483647 - v27;\n
                                    if (v95 > v95)\n
                                        v95 = v3;\n
                                    if (v94)\n
                                    {\n
                                        cgc_fwrite(&v9, v95, v94);\n
                                        v96 = v16;\n
                                    }\n
                                    v79 = a0;\n
                                    if (v79)\n
                                    {\n
                                        cgc_memcpy(a0 + v27, &v9, v95);\n
                                        v79 = a0;\n
                                        v97 = v16;\n
                                    }\n
                                    *(&v73) = 1;\n
                                    v98 = 3;\n
                                    v99 = v27;\n
                                    v100 = v3;\n
                                    v27 += v3;\n
                                }\n
                                else\n
                                {\n
                                    *(&v73) = 1;\n
                                    tmp_2 = v27;\n
                                    v27 += v3;\n
                                    v59 = a0;\n
                                    if ([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t2, Load(addr=stack_base-104, size=4, endness=Iend_LE), 0x0<32>))\n
                                        goto LABEL_403e1a;\n
                                    break;\n
                                }\n
LABEL_403d8d:\n
                                v59 = v79;\n
                                if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                    goto LABEL_403e1a;\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v59 = a0;\n
                                if (v35)\n
                                {\n
                                    v64 = *(v6);\n
                                    if (v64 >= 0)\n
                                    {\n
                                        v63 = &v9;\n
                                    }\n
                                    else\n
                                    {\n
                                        v9 = 45;\n
                                        v64 = -(v64);\n
                                        v63 = &v10;\n
                                    }\n
                                    *((v63 + 19)) = 0;\n
                                    v3 = v63;\n
                                    if (!v64)\n
                                    {\n
                                        v67 = v63 + 18;\n
                                        *((v63 + 18)) = 48;\n
                                    }\n
                                    else\n
                                    {\n
                                        v67 = v63 + 19;\n
                                        do\n
                                        {\n
                                            v75 = v64 * 3435973837 >> 32 >> 3;\n
                                            *((v67 - 1)) = *((v24 + v64 - v75 * 2 * 5 - 7627));\n
                                            v67 -= 1;\n
                                            tmp_25 = v64;\n
                                            v64 = v75;\n
                                        } while (tmp_25 > 9);\n
                                    }\n
                                    v80 = v3;\n
                                    cgc_memmove(v80, v67, v67 - v80 + 20);\n
                                    goto LABEL_403c7d;\n
                                }\n
                            }\n
                        case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 30: case 31:\n
LABEL_403a16:\n
                            v73 = v3;\n
                            v72 = v37 - v73;\n
                            if (v27 >= 2147483647)\n
                            {\n
                                v45 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v46 = 6;\n
                                v47 = v45;\n
                                v48 = v27;\n
                                v27 = v45;\n
                                goto LABEL_403a91;\n
                            }\n
                            else\n
                            {\n
                                v61 = 2147483647 - v27;\n
                                if (v61 > v72)\n
                                    v61 = v72;\n
                                v62 = v16;\n
                                v5 = v72;\n
                                if (v62)\n
                                {\n
                                    v3 = v73;\n
                                    cgc_fwrite(v73, v61, v62);\n
                                    v72 = v5;\n
                                    v73 = v3;\n
                                    v74 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v73, v61);\n
                                    v79 = a0;\n
                                    v72 = v5;\n
                                    v83 = v16;\n
                                }\n
                                v86 = v72 + v27;\n
                                *(&v73) = 1;\n
                                v87 = 6;\n
                                v88 = v86;\n
                                v89 = v27;\n
                                v27 = v86;\n
                                goto LABEL_403d8d;\n
                            }\n
                        case 11:\n
                            v38 = v6;\n
                            v59 = v38 + 4;\n
                            if (v27 < 2147483647)\n
                            {\n
                                v2 = *(v38);\n
                                v43 = v16;\n
                                if (v43)\n
                                {\n
                                    cgc_fwrite(&v2, 1, v43);\n
                                    v56 = v16;\n
                                }\n
                                if (v59)\n
                                    *((v59 + v27)) = v2;\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            v42 = v16;\n
                            if (v27 != -1)\n
                            {\n
                                v27 += 1;\n
                                *(&v73) = 1;\n
                                v6 = v59;\n
                                v59 = a0;\n
                                break;\n
                            }\n
                            goto LABEL_403e1a;\n
                        case 27:\n
                            v39 = v6;\n
                            v40 = *(v39);\n
                            v6 = v39 + 4;\n
                            v41 = cgc_strlen();\n
                            if (v27 >= 2147483647)\n
                            {\n
                                *(&v73) = 1;\n
                                v52 = 3;\n
                                v53 = v27;\n
                                v54 = v41;\n
                                v27 += v41;\n
                            }\n
                            else\n
                            {\n
                                v58 = 2147483647 - v27;\n
                                v5 = v41;\n
                                if (2147483647 - v27 > v41)\n
                                    v58 = v41;\n
                                v66 = v16;\n
                                if (v66)\n
                                {\n
                                    cgc_fwrite(v40, v58, v66);\n
                                    v77 = v16;\n
                                }\n
                                v79 = a0;\n
                                if (v79)\n
                                {\n
                                    cgc_memcpy(a0 + v27, v40, v58);\n
                                    v79 = a0;\n
                                    v84 = v16;\n
                                }\n
                                *(&v73) = 1;\n
                                v90 = 3;\n
                                v91 = v27;\n
                                v92 = v5;\n
                                v27 += v5;\n
                                v93 = v24;\n
                                goto LABEL_403d8d;\n
                            }\n
LABEL_403a91:\n
                            v59 = a0;\n
                            v57 = v16;\n
                            if ([D] x86g_calculate_condition(0x2<32>, cc_op<4>, cc_dep1<4>, cc_dep2<4>, 0x0<32>))\n
                                goto LABEL_403e1a;\n
                            break;\n
                        default:\n
                            if (!v73)\n
                                goto LABEL_0x4039ef;\n
                            else\n
                                goto LABEL_403a16;\n
                        }\n
                    }\n
                    else if (v31)\n
                    {\n
                        v3 = *(&v3);\n
                        v4 = *(&v3);\n
                        goto LABEL_4038ae;\n
                    }\n
                }\n
LABEL_4037f0:\n
                v73 = 0;\n
            }\n
        }\n
    }\n
    if (v27 >= 2147483647)\n
    {\n
        if (!(v27 == -1))\n
            goto LABEL_403e2e;\n
LABEL_403e1a:\n
        cgc__terminate();\n
    }\n
    if (v59)\n
        *((v59 + v27)) = 0;\n
LABEL_403e2e:\n
    v101 = v27 + 1;\n
    return v101;\n
}\n
", "4208614:sub_4037e6": null, "4208748:sub_40386c": null, "4209825:sub_403ca1": null, "4210235:sub_403e3b": null, "4210240:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4210284:sub_403e6c": null, "4210288:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v3;  // al, Other Possible Types: char\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = v0[0];\n
    if (!v0[0])\n
        return v0[0] - *(a0);\n
    while (true)\n
    {\n
        if (!*(v1))\n
            return *(v2) - *(v1);\n
        v4 = cgc_tolower(v3);\n
        if (v4 != cgc_tolower(*(v1)))\n
            return *(v2) - *(v1);\n
        v1 += 1;\n
        v3 = *((v2 + 1));\n
        v2 += 1;\n
        if (!v3)\n
            return *(v2) - *(v1);\n
    }\n
}\n
", "4210400:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4210489:sub_403f39": null, "4210496:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4210564:sub_403f84": null, "4210576:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4210640:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4210692:sub_404004": null, "4210704:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4210788:sub_404064": null, "4210800:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    char v3;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v1[1 + v2];\n
        v2 += 1;\n
    } while (v3);\n
    return v2;\n
}\n
", "4210832:cgc_strncasecmp": "int cgc_strncasecmp(char v1[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v4;  // al, Other Possible Types: char\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v0 = &v1[a1];\n
    v4 = v1[0];\n
    if (v1[0])\n
    {\n
        while (*(v2))\n
        {\n
            v5 = cgc_tolower(v4);\n
            if (v5 != cgc_tolower(*(v2)))\n
                break;\n
            if (v3 >= v0)\n
                break;\n
            v2 += 1;\n
            v4 = *((v3 + 1));\n
            v3 += 1;\n
            if (!v4)\n
                break;\n
        }\n
    }\n
    v6 = (v3 == v0 ? *(v3) - *(v2) : 0);\n
    return v6;\n
}\n
", "4210960:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // esi\n
    char *v3;  // eax\n
    unsigned int v4;  // edi\n
    char *v5;  // edx, Other Possible Types: unsigned int\n
    char v6;  // bl\n
    unsigned int v7;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v6 = v2[0];\n
    v5 = v3;\n
    if (v2[0])\n
    {\n
        v5 = v3;\n
        if (v1)\n
        {\n
            v4 = 1;\n
            v5 = v3;\n
            while (true)\n
            {\n
                *(v5) = v6;\n
                v5 += 1;\n
                v6 = v2[v4];\n
                if (!v6)\n
                    break;\n
                v4 += 1;\n
                if (1 >= v1)\n
                    break;\n
            }\n
        }\n
    }\n
    v7 = v5 - v3;\n
    if (v7 < v1)\n
    {\n
        do\n
        {\n
            *(v5) = 0;\n
            v5 += 1;\n
            v7 += 1;\n
        } while (v7 < v1);\n
    }\n
    return v0;\n
}\n
", "4211058:sub_404172": null, "4211072:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (!v4)\n
        return 0;\n
    cgc_memcpy(v4, v0, v3);\n
    v3[v4] = 0;\n
    return v4;\n
}\n
", "4211165:sub_4041dd": null, "4211168:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // al, Other Possible Types: char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a0, v2);\n
            if (v3)\n
                break;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v5 = &v1[v4 + 1];\n
    if (!v1[v4])\n
        v5 = 0;\n
    *(v0) = v5;\n
    v1[v4] = 0;\n
    return *(v0);\n
}\n
", "4211288:sub_404258": null, "4211296:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4211384:sub_4042b8": null, "4211392:cgc_strtol": "int cgc_strtol(char v6[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // esi\n
    unsigned int *v10;  // esi, Other Possible Types: unsigned int\n
    char v11[2];  // edi\n
    unsigned int v12;  // eax\n
    char v13[2];  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // esi\n
    void* v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // eax\n
    void* v18;  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // al, Other Possible Types: char\n
    unsigned int v25;  // edi\n
    char v26[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = v9;\n
    v10 = a0;\n
    v11 = v6;\n
    v13 = v11;\n
    if (cgc_isspace(v11[0]))\n
    {\n
        v13 = v11;\n
        do\n
        {\n
            if (!*(v13))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v17 = 1;\n
                v18 = 0;\n
                if (!v10)\n
                    goto LABEL_40449c;\n
            }\n
            v12 = *((v13 + 1));\n
            v13 += 1;\n
        } while (cgc_isspace(v12));\n
    }\n
    v14 = a1;\n
    if (*(v13) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v13) == 43)\n
            v13 += 1;\n
        if (!v14)\n
            goto LABEL_404383;\n
    }\n
    else\n
    {\n
        v13 += 1;\n
        v0 = -1;\n
        if (!v14)\n
        {\n
LABEL_404383:\n
            if (*(v13) == 48)\n
            {\n
                if ((*((v13 + 1)) & 248) == 48)\n
                {\n
                    v13 += 1;\n
                    v14 = 8;\n
                    goto LABEL_4043d7;\n
                }\n
                if (cgc_tolower(*((v13 + 1))) == 120)\n
                {\n
                    v13 += 2;\n
                    v14 = 16;\n
                    goto LABEL_4043d7;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v13)))\n
            {\n
                v15 = 0;\n
                v17 = 1;\n
                v18 = 0;\n
                v10 = a0;\n
                v16 = v0;\n
                if (!v10)\n
                    goto LABEL_40449c;\n
                tmp_2 = v17;\n
                v26 = v6;\n
                if (!tmp_2)\n
                    v26 = v13;\n
                *(v10) = v26;\n
                goto LABEL_40449c;\n
            }\n
LABEL_4043d7:\n
            v1 = 0;\n
            v2 = 1;\n
            v18 = 0;\n
            while (true)\n
            {\n
                v19 = *(v13);\n
                if (!v19)\n
                    break;\n
                v20 = *(v13);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v13);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (cgc_isupper(v23))\n
                    {\n
                        v21 = *(v13) - 55;\n
                    }\n
                    else\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_4043f0;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v14)\n
                {\n
                    v25 = v14 * v18;\n
                    tmp_5 = v25;\n
                    v18 = v25 + v21;\n
                    v24 = v1;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t5, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v1 = v24;\n
                    v13 += 1;\n
                    *(&v24) = 1;\n
                    v2 = 0;\n
                }\n
LABEL_4043f0:\n
                if (!v24)\n
                    break;\n
            }\n
            v10 = a0;\n
            v16 = v0;\n
            v15 = v1;\n
            v17 = v2;\n
            if (!v10)\n
                goto LABEL_40449c;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v13) == 48)\n
        {\n
            v13 += (cgc_tolower(*((v13 + 1))) == 120) * 2;\n
            goto LABEL_4043d7;\n
        }\n
    }\n
LABEL_40449c:\n
    v27 = (!v15 ? 0x80000000 : -(v18));\n
    v28 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, ecx<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v18);\n
    if (v16 < 0)\n
        v28 = v27;\n
    return v28;\n
}\n
", "4211733:sub_404415": null, "4211926:sub_4044d6": null, "4211936:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v8[2], unsigned int *a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    int tmp_38;  // tmp #38\n
    int tmp_41;  // tmp #41\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // edi\n
    unsigned int v11;  // esi\n
    char v12[2];  // esi\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // edi\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int v16;  // edx\n
    void* v17;  // edi\n
    unsigned int *v18;  // eax, Other Possible Types: unsigned int\n
    char v19[2];  // ebp, Other Possible Types: unsigned int\n
    void* v20;  // edi\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v25;  // ecx\n
    unsigned int v26;  // dl, Other Possible Types: char\n
    unsigned int v27;  // esi\n
    unsigned int v28;  // edi\n
    unsigned int v29;  // eax\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // eax\n
    unsigned int v35;  // ebx\n
    unsigned int v36;  // edi\n
    char v37[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v38;  // ebx\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // cc_dep2\n
    unsigned int v42;  // eax\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v5 = v11;\n
    v12 = v8;\n
    v19 = v12;\n
    if (cgc_isspace(v12[0]))\n
    {\n
        v19 = v12;\n
        do\n
        {\n
            if (!*(v19))\n
            {\n
                v15 = 0;\n
                v16 = 1;\n
                v0 = 1;\n
                v1 = 0;\n
                v17 = 0;\n
                v18 = a0;\n
                if (!v18)\n
                    goto LABEL_404712;\n
            }\n
            v13 = *((v19 + 1));\n
            v19 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v14 = a1;\n
    if (*(v19) != 45)\n
    {\n
        v2 = 1;\n
        if (*(v19) == 43)\n
            v19 += 1;\n
        if (!v14)\n
            goto LABEL_4045bd;\n
    }\n
    else\n
    {\n
        v19 += 1;\n
        v2 = -1;\n
        if (!v14)\n
        {\n
LABEL_4045bd:\n
            if (*(v19) == 48)\n
            {\n
                if ((*((v19 + 1)) & 248) == 48)\n
                {\n
                    v19 += 1;\n
                    v14 = 8;\n
                    goto LABEL_404615;\n
                }\n
                if (cgc_tolower(*((v19 + 1))) == 120)\n
                {\n
                    v19 += 2;\n
                    v14 = 16;\n
                    goto LABEL_404615;\n
                }\n
            }\n
            v14 = 10;\n
            if (!cgc_isdigit(*(v19)))\n
            {\n
                v15 = 0;\n
                v0 = 1;\n
                v1 = 0;\n
                v20 = 0;\n
                v18 = a0;\n
                v16 = v2;\n
                if (!v18)\n
                    goto LABEL_404712;\n
                v37 = v8;\n
                if (!v0)\n
                    v37 = v19;\n
                *(v18) = v37;\n
                goto LABEL_404712;\n
            }\n
LABEL_404615:\n
            v15 = 0;\n
            v0 = 1;\n
            v1 = 0;\n
            v3 = 0;\n
            while (true)\n
            {\n
                v21 = *(v19);\n
                if (!v21)\n
                    break;\n
                v22 = *(v19);\n
                if (cgc_isdigit(v21))\n
                {\n
                    v23 = v22 - 48;\n
                }\n
                else\n
                {\n
                    v25 = *(v19);\n
                    if (cgc_islower(v22))\n
                    {\n
                        v23 = v25 - 87;\n
                    }\n
                    else if (cgc_isupper(v25))\n
                    {\n
                        v23 = *(v19) - 55;\n
                    }\n
                    else\n
                    {\n
                        v26 = 0;\n
                        goto LABEL_404640;\n
                    }\n
                }\n
                v26 = 0;\n
                if (v23 < v14)\n
                {\n
                    v0 = v15;\n
                    v27 = v14;\n
                    v28 = v14 >> 31;\n
                    v29 = v1;\n
                    v32 = v29 * v27;\n
                    v33 = v27 * v3 + v29 * v28 + (v29 * v27 >> 32);\n
                    v14 = v27;\n
                    v15 = v0;\n
                    v26 = v23 >> 31;\n
                    tmp_38 = v32;\n
                    v34 = v32 + v23;\n
                    tmp_41 = v33;\n
                    v35 = v33 + v26 + (tmp_38 + v23 < tmp_38);\n
                    v3 = v35;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, Xor(edx<4>, Conv(1->32, ((t38 + ecx<4>) < t38))), Conv(1->32, ((t38 + ecx<4>) < t38))))\n
                        v15 = 1;\n
                    v19 += 1;\n
                    *(&v26) = 1;\n
                    v0 = 0;\n
                    v1 = v34;\n
                }\n
LABEL_404640:\n
                if (!v26)\n
                    break;\n
            }\n
            v18 = a0;\n
            v16 = v2;\n
            v36 = v3;\n
            if (!v18)\n
                goto LABEL_404712;\n
        }\n
    }\n
    if (v14 == 16)\n
    {\n
        v14 = 16;\n
        if (*(v19) == 48)\n
        {\n
            v19 += (cgc_tolower(*((v19 + 1))) == 120) * 2;\n
            goto LABEL_404615;\n
        }\n
    }\n
LABEL_404712:\n
    v38 = v1;\n
    v39 = -(v38);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v39 = v38;\n
    v40 = -(0 < v15) | v39;\n
    v41 = v38 < 2147483649;\n
    v42 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, edi<4>, cc_dep2<4>, cc_dep2<4>) ? -1 : v40);\n
    if ((v16 >> 31 & 1 ^ 1))\n
        v42 = v40;\n
    return v42;\n
}\n
", "4212333:sub_40466d": null, "4212581:sub_404765": null, "4212592:cgc_seedRandomGen": "extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern char *playerName;\n
\n
int cgc_seedRandomGen(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // ecx\n
\n
    v1 = cgc_strcmp(playerName, \"magic\");\n
    v2 = v1;\n
    if (v1)\n
    {\n
        v1 = v0;\n
        v2 = a0;\n
    }\n
    cgc_seed1 = v1;\n
    cgc_seed2 = v2;\n
    return v1;\n
}\n
", "4212663:sub_4047b7": null, "4212672:cgc_getRandomInt": "extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
\n
int cgc_getRandomInt()\n
{\n
    cgc_seed1 = (cgc_seed1 >> 16) + cgc_seed1 * 42871;\n
    cgc_seed2 = (cgc_seed2 >> 16) + cgc_seed2 * 28172;\n
    return cgc_seed1 * 0x10000 + cgc_seed2;\n
}\n
", "4212744:sub_404808": null, "4212752:cgc_createEnemies": "extern unsigned int columns;\n
extern struct_1 *enemies;\n
extern unsigned int rowCount;\n
\n
int cgc_createEnemies()\n
{\n
    struct struct_0 **v1;  // eax, Other Possible Types: unsigned int, unsigned int *\n
    struct struct_0 **v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // ecx\n
\n
    v1 = cgc_calloc(rowCount, 4);\n
    enemies = v1;\n
    if (rowCount <= 0)\n
        return v1;\n
    v2 = 0;\n
    do\n
    {\n
        v1 = cgc_calloc((columns >> 31) + columns >> 1, 4);\n
        enemies[v2].field_0 = v1;\n
        if (columns >= 2)\n
        {\n
            v1 = enemies[v2].field_0;\n
            v3 = 0;\n
            do\n
            {\n
                v1[v3] = 1;\n
                v3 += 1;\n
            } while (v3 < (columns >> 31) + columns >> 1);\n
        }\n
        v2 += 1;\n
    } while (v2 < rowCount);\n
    return v1;\n
}\n
", "4212805:sub_404845": null, "4212931:sub_4048c3": null, "4212944:cgc_createBoard": "int cgc_createBoard(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // eax\n
    struct struct_0 **v4;  // ebp\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ebx\n
    unsigned int *v8;  // ecx\n
    unsigned int v9;  // edx\n
\n
    v2 = a0;\n
    v4 = cgc_malloc(v3 * 4);\n
    v3 = v1;\n
    if (v3 > 0)\n
    {\n
        v0 = v2 * 4;\n
        v6 = 0;\n
        do\n
        {\n
            v4[v6] = cgc_malloc(v0);\n
            v5 = v1;\n
            v6 += 1;\n
        } while (v5 != v6);\n
    }\n
    if (v5 <= 0)\n
        return v4;\n
    v7 = 0;\n
    do\n
    {\n
        if (v2 > 0)\n
        {\n
            v8 = v4[v7];\n
            v9 = 0;\n
            do\n
            {\n
                v8[v9] = 0;\n
                v9 += 1;\n
            } while (v2 != v9);\n
        }\n
        v7 += 1;\n
    } while (v7 != v5);\n
    return v4;\n
}\n
", "4213045:sub_404935": null, "4213114:sub_40497a": null, "4213120:cgc_clearEnemies": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *board;\n
extern unsigned int columns;\n
extern unsigned int rows;\n
\n
int cgc_clearEnemies()\n
{\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v2;  // esi\n
    unsigned int v3;  // edi\n
\n
    if (rows <= 0)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    do\n
    {\n
        if (columns > 0)\n
        {\n
            v2 = board[v1].field_0;\n
            v3 = 0;\n
            do\n
            {\n
                if (v2[v3] == 3)\n
                    v2[v3] = 0;\n
                v3 += 1;\n
            } while (v3 < columns);\n
        }\n
        v1 += 1;\n
    } while (v1 < rows);\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4213153:sub_4049a1": null, "4213195:sub_4049cb": null, "4213229:sub_4049ed": null, "4213232:cgc_setEnemies": "extern unsigned int board;\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_1 *enemies;\n
extern unsigned int rowCount;\n
\n
int cgc_setEnemies()\n
{\n
    struct struct_0 **v0;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int *v1;  // [bp-0x24]\n
    unsigned int *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    struct struct_0 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edx\n
    unsigned int *v9;  // ebx\n
    void* v13;  // edx\n
    void* v14;  // eax\n
\n
    if (rowCount <= 0)\n
        return 1717986919 * cgc_turnCounter;\n
    v4 = &enemies->field_0;\n
    v5 = (1717986919 * cgc_turnCounter >> 32 >> 3) + (1717986919 * cgc_turnCounter >> 32 >> 31);\n
    v3 = v5 + 1;\n
    v0 = 0;\n
    while (columns < 2)\n
    {\n
        v7 = v0 + 1;\n
        v0 = v7;\n
        if (v7 >= rowCount)\n
            return v7;\n
    }\n
    v8 = v0;\n
    v9 = v4[v8];\n
    v2 = v3 + v8 * 2;\n
    v1 = v5 + v8 * 2;\n
    v14 = 0;\n
    v13 = 0;\n
}\n
", "4213315:sub_404a43": null, "4213402:sub_404a9a": null, "4213494:sub_404af6": null, "4213528:sub_404b18": null, "4213536:cgc_movePieces": "int cgc_movePieces()\n
{\n
    return 0;\n
}\n
", "4213539:sub_404b23": null, "4213552:cgc_canEnemyFire": "extern unsigned int enemies;\n
extern unsigned int rowCount;\n
\n
int cgc_canEnemyFire(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    struct struct_0 **v3;  // edx, Other Possible Types: unsigned int\n
    unsigned int *v4;  // ebx\n
\n
    v1 = v0;\n
    if (rowCount - 1 == v1)\n
        return 0;\n
    v3 = v1 + 1;\n
    while (v3 < rowCount)\n
    {\n
        v4 = *((enemies + v3 * 4));\n
        v3 += 1;\n
        if (v4[a0])\n
            break;\n
    }\n
    return v3 < rowCount;\n
}\n
", "4213629:sub_404b7d": null, "4213632:cgc_enemyFire": "extern unsigned int columns;\n
extern struct_1 *enemyBullets;\n
extern unsigned int rows;\n
\n
int cgc_enemyFire(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ecx\n
    unsigned int v2;  // edi\n
    void* v3;  // ebx, Other Possible Types: unsigned int\n
    struct struct_2 **v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5[2];  // eax\n
\n
    v1 = v0;\n
    v2 = rows * ((columns >> 31) + columns >> 1);\n
    v4 = -1;\n
    if (v2 > 0)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            if (enemyBullets[v3].field_0->field_0 == -1)\n
            {\n
                v4 = v3;\n
                break;\n
            }\n
            v3 += 1;\n
        } while (v2 != v3);\n
        v1 = v0;\n
    }\n
    v5 = enemyBullets[v4].field_0;\n
    v5[0] = a0;\n
    v5[1] = v1;\n
    return v5;\n
}\n
", "4213739:sub_404beb": null, "4213744:cgc_updateEnemies": "extern unsigned int cgc_lost;\n
extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_3 *enemies;\n
extern struct_2 *enemyBullets;\n
extern unsigned int rowCount;\n
extern unsigned int rows;\n
\n
int cgc_updateEnemies()\n
{\n
    unsigned int *v0;  // [bp-0x2c]\n
    struct struct_0 **v1;  // [bp-0x28]\n
    struct struct_0 **v2;  // [bp-0x24]\n
    struct struct_0 **v3;  // [bp-0x20]\n
    struct struct_0 **v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct struct_1 **v5;  // [bp-0x18]\n
    struct struct_0 **v6;  // [bp-0x14]\n
    void* v8;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v10;  // edi\n
    unsigned int *v11;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // ecx\n
    unsigned int *v14;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    struct struct_0 **v16;  // edx\n
    unsigned int *v17;  // ebx\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    void* v20;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v21;  // ecx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // edi\n
    struct struct_1 **v24;  // eax, Other Possible Types: unsigned int\n
    unsigned int v25;  // edi\n
    unsigned int v26[2];  // eax\n
    unsigned int v27;  // eax\n
\n
    if (rowCount <= 0)\n
    {\n
        v8 = 0;\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        v4 = 1;\n
        v6 = &enemies->field_0;\n
        v9 = 0;\n
        do\n
        {\n
            v27 = columns;\n
            if (columns >= 2)\n
            {\n
                v10 = (columns >> 31) + columns >> 1;\n
                v14 = v6[v9];\n
                v3 = v9 * 2;\n
                v2 = v9 * 2 + 1;\n
                v11 = 0;\n
                v5 = &enemyBullets->field_0;\n
                v1 = v9;\n
                v0 = v14;\n
                do\n
                {\n
                    if (*((v14 + (v11 << 2))))\n
                    {\n
                        cgc_seed1 = (cgc_seed1 >> 16) + cgc_seed1 * 42871;\n
                        cgc_seed2 = (cgc_seed2 >> 16) + cgc_seed2 * 28172;\n
                        if ((cgc_seed1 * 0x10000 + cgc_seed2) * 3067833783 + 1227133513 <= 613566756)\n
                        {\n
                            v20 = 0;\n
                            if (rowCount - 1 != v9)\n
                            {\n
                                v13 = v4;\n
                                while (true)\n
                                {\n
                                    v16 = v13;\n
                                    if (v13 >= rowCount)\n
                                        break;\n
                                    v17 = v6[v13];\n
                                    v13 += 1;\n
                                    if (*((v17 + 0x4 * v11)))\n
                                        break;\n
                                }\n
                                v20 = 0;\n
                                *(&v20) = v16 < rowCount;\n
                                v9 = v1;\n
                            }\n
                            v8 = 1;\n
                            if (!v20)\n
                            {\n
                                v21 = -1;\n
                                v22 = -1;\n
                                switch (v0[v11])\n
                                {\n
                                case 1:\n
                                    v21 = v11 + v11;\n
                                    break;\n
                                case 2:\n
                                    v21 = v11 + 1 + v11;\n
                                    break;\n
                                case 3:\n
                                    v21 = v11 + 1 + v11;\n
                                    goto LABEL_404e10;\n
                                case 4:\n
                                    v21 = v11 + v11;\n
LABEL_404e10:\n
                                    v22 = (1717986919 * cgc_turnCounter >> 32 >> 3) + (1717986919 * cgc_turnCounter >> 32 >> 31) + v2;\n
                                    goto LABEL_404e29;\n
                                default:\n
LABEL_404e29:\n
                                    v23 = rows * v10;\n
                                    if (v23 > 0)\n
                                    {\n
                                        v24 = 0;\n
                                        do\n
                                        {\n
                                            if (v5[v24]->field_0 == -1)\n
                                            {\n
                                                v25 = v24;\n
                                                v9 = v1;\n
                                                goto LABEL_404e64;\n
                                            }\n
                                            v24 += 1;\n
                                        } while (v23 != v24);\n
                                        v9 = v1;\n
                                    }\n
                                    v25 = -1;\n
LABEL_404e64:\n
                                    v26 = v5[v25];\n
                                    v26[0] = v22;\n
                                    v26[1] = v21;\n
                                    v14 = v0;\n
                                    v8 = 1;\n
                                    goto LABEL_404ca0;\n
                                }\n
                                v22 = (1717986919 * cgc_turnCounter >> 32 >> 3) + (1717986919 * cgc_turnCounter >> 32 >> 31) + v3;\n
                                goto LABEL_404e29;\n
                            }\n
                        }\n
                        else\n
                        {\n
                            v12 = cgc_seed1 * 0x10000 + cgc_seed2 - ((cgc_seed1 * 0x10000 + cgc_seed2) * 2863311531 >> 32 >> 1) * 3;\n
                            v8 = 1;\n
                            if (v12 == 1)\n
                            {\n
                                v14 = v0;\n
                                v15 = *((v14 + v11 * 4));\n
                                if (v15 != 4)\n
                                {\n
                                    v19 = v15 + 1;\n
                                }\n
                                else\n
                                {\n
                                    *((v14 + v11 * 4)) = 1;\n
                                    continue;\n
                                }\n
LABEL_404dd5:\n
                                *((v14 + v11 * 4)) = v19;\n
                                continue;\n
                            }\n
                            else if (!v12)\n
                            {\n
                                v14 = v0;\n
                                v18 = *((v14 + v11 * 4));\n
                                if (v18 != 1)\n
                                {\n
                                    v19 = v18 - 1;\n
                                    goto LABEL_404dd5;\n
                                }\n
                                else\n
                                {\n
                                    *((v14 + v11 * 4)) = 4;\n
                                    continue;\n
                                }\n
                            }\n
                        }\n
                        v14 = v0;\n
                        continue;\n
                    }\n
LABEL_404ca0:\n
                    v11 += 1;\n
                    v27 = columns;\n
                    v10 = (columns >> 31) + columns >> 1;\n
                } while (v11 < v10);\n
            }\n
            v9 += 1;\n
            v4 += 1;\n
        } while (v9 < rowCount);\n
    }\n
    if (!v8)\n
        cgc_lost = -1;\n
    return v27;\n
}\n
", "4213800:sub_404c28": null, "4214095:sub_404d4f": null, "4214421:sub_404e95": null, "4214432:cgc_clearScreen": "int cgc_clearScreen()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4214433:sub_404ea1": null, "4214448:cgc_drawBoard": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *board;\n
extern void* cgc_stdout;\n
extern unsigned int columns;\n
extern unsigned int playerName;\n
extern unsigned int rows;\n
\n
int cgc_drawBoard()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int *v9;  // esi, Other Possible Types: unsigned int\n
    void* v10;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
\n
    v0 = playerName;\n
    cgc_fprintf(cgc_stdout, \"\\tWelcome to Attackers General %s!\\n
\");\n
    if (columns >= -1)\n
    {\n
        v6 = -1;\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, L\"-|=W#!+ \\u0a7c\u5000\u656c\u7361\\u2065\u6e69\u7570\u2074\u6f79\u7275\u6e20\u6d61\u3a65\\n
\u0909\u654c\u6576\\u206c\u2523\\u0a64\u0900\u7909\u756f\u6c20\u736f\\u0a65\u0a0a\u0a0a\u0900\u2109\u2121\u4144\u434e\u2045\u4f4d\u4544\u2121\u0a21\u0a0a\u0a0a\u4200\u7375\u2074\\u2061\u6f6d\u6576\u2820\u2077\u203d\u312b\\u202c\u3d73\u6153\u6576\u6944\u6967\u2c74\u6420\u463d\u5249\u2c45\u7120\u513d\u6975\u2974\u250a\");\n
            v6 += 1;\n
        } while (v6 <= columns);\n
    }\n
    v1 = \"\\n
\";\n
    cgc_fprintf(cgc_stdout, \"\\n
\");\n
    if (rows > 0)\n
    {\n
        v10 = 0;\n
        v3 = \"|\";\n
        v4 = \" \";\n
        v2 = \"|\\n
\";\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, v3);\n
            if (columns > 0)\n
            {\n
                v9 = 0;\n
                do\n
                {\n
                    v7 = *((*((&board->field_0 + 0x4 * v10)) + v9 * 4));\n
                    v8 = v4;\n
                    if (v7 - 1 <= 4)\n
                        v8 = *(&(&_GLOBAL_OFFSET_TABLE_)[308 + 4 * v7]);\n
                    cgc_fprintf(cgc_stdout, v8);\n
                    v9 += 1;\n
                } while (v9 < columns);\n
            }\n
            cgc_fprintf(cgc_stdout, v2);\n
            v10 += 1;\n
        } while (v10 < rows);\n
    }\n
    if (columns >= -1)\n
    {\n
        v11 = -1;\n
        do\n
        {\n
            cgc_fprintf(cgc_stdout, L\"-|=W#!+ \\u0a7c\u5000\u656c\u7361\\u2065\u6e69\u7570\u2074\u6f79\u7275\u6e20\u6d61\u3a65\\n
\u0909\u654c\u6576\\u206c\u2523\\u0a64\u0900\u7909\u756f\u6c20\u736f\\u0a65\u0a0a\u0a0a\u0900\u2109\u2121\u4144\u434e\u2045\u4f4d\u4544\u2121\u0a21\u0a0a\u0a0a\u4200\u7375\u2074\\u2061\u6f6d\u6576\u2820\u2077\u203d\u312b\\u202c\u3d73\u6153\u6576\u6944\u6967\u2c74\u6420\u463d\u5249\u2c45\u7120\u513d\u6975\u2974\u250a\");\n
            v11 += 1;\n
        } while (v11 <= columns);\n
    }\n
    cgc_fprintf(cgc_stdout, v1);\n
    return 0;\n
}\n
", "4214684:sub_404f9c": null, "4214818:sub_405022": null, "4214832:cgc_setupNewGame": "extern struct_4 *board;\n
extern unsigned int cgc_stdin[4];\n
extern unsigned int cgc_stdout[4];\n
extern unsigned int columns;\n
extern struct_4 *enemies;\n
extern struct_1 *enemyBullets;\n
extern struct_2 *playerName;\n
extern unsigned int rowCount;\n
extern unsigned int rows;\n
extern struct_0 *shipCords;\n
extern struct_1 *userBullets;\n
\n
int cgc_setupNewGame()\n
{\n
    struct struct_3 **v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct struct_3 **v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4;  // edi\n
    unsigned int *v5;  // ecx\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edi\n
    unsigned int v8[2];  // ecx\n
    char *v9;  // eax, Other Possible Types: unsigned int\n
    struct struct_3 **v10;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // eax\n
    struct struct_0 **v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15[2];  // eax\n
    struct struct_0 **v16;  // esi, Other Possible Types: unsigned int\n
    unsigned int v17[2];  // eax\n
\n
    v3 = cgc_malloc(rows * 4);\n
    if (rows > 0)\n
    {\n
        v1 = columns * 4;\n
        v0 = v3;\n
        v4 = 0;\n
        do\n
        {\n
            v0[v4] = cgc_malloc(v1);\n
            v4 += 1;\n
        } while (rows != v4);\n
        v3 = v0;\n
        if (rows > 0)\n
        {\n
            v7 = 0;\n
            do\n
            {\n
                if (columns > 0)\n
                {\n
                    v5 = *((v3 + v7 * 4));\n
                    v6 = 0;\n
                    do\n
                    {\n
                        v5[v6] = 0;\n
                        v6 += 1;\n
                    } while (columns != v6);\n
                }\n
                v7 += 1;\n
            } while (v7 != rows);\n
        }\n
    }\n
    board = v3;\n
    shipCords = cgc_calloc(2, 4);\n
    shipCords->field_0 = 0;\n
    shipCords->field_4 = rows - 1;\n
    v8 = shipCords;\n
    board[v8[1]].field_0[v8[0]].field_0 = 2;\n
    cgc_fprintf(cgc_stdout, \"Please input your name:\\n
\");\n
    playerName = cgc_calloc(1, 0x100);\n
    cgc_fflush(cgc_stdout);\n
    cgc_freaduntil(playerName, 0x100, 10, cgc_stdin);\n
    v9 = 0;\n
    do\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, (Load(addr=(Load(addr=0x40afe8<32>, size=4, endness=Iend_LE) + eax<4>), size=1, endness=Iend_LE) - 0x7b<8>)), 0xe5<32>, 0x0<32>))\n
            playerName[v9].field_0 = 0;\n
        if (playerName[v9].field_0 == 10)\n
            playerName[v9].field_0 = 0;\n
        v9 += 1;\n
    } while (v9 != 4);\n
    enemies = cgc_calloc(rowCount, 4);\n
    if (rowCount > 0)\n
    {\n
        v10 = 0;\n
        do\n
        {\n
            enemies[v10].field_0 = cgc_calloc((columns >> 31) + columns >> 1, 4);\n
            if (columns >= 2)\n
            {\n
                v11 = enemies[v10].field_0;\n
                v12 = 0;\n
                do\n
                {\n
                    v11[v12] = 1;\n
                    v12 += 1;\n
                } while (v12 < (columns >> 31) + columns >> 1);\n
            }\n
            v10 += 1;\n
        } while (v10 < rowCount);\n
    }\n
    cgc_setEnemies();\n
    userBullets = cgc_calloc(rows, 4);\n
    v13 = rows;\n
    if (rows > 0)\n
    {\n
        v14 = 0;\n
        do\n
        {\n
            userBullets[v14].field_0 = cgc_calloc(2, 4);\n
            v15 = userBullets[v14].field_0;\n
            v15[0] = -1;\n
            v15[1] = -1;\n
            v14 += 1;\n
            v13 = rows;\n
        } while (v14 < rows);\n
    }\n
    enemyBullets = cgc_calloc(v13 * ((columns >> 31) + columns >> 1), 4);\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return 0;\n
    v16 = 0;\n
    do\n
    {\n
        enemyBullets[v16].field_0 = cgc_calloc(2, 4);\n
        v17 = enemyBullets[v16].field_0;\n
        v17[0] = -1;\n
        v17[1] = -1;\n
        v16 += 1;\n
    } while (v16 < rows * ((columns >> 31) + columns >> 1));\n
    return 0;\n
}\n
", "4214953:sub_4050a9": null, "4215157:sub_405175": null, "4215254:sub_4051d6": null, "4215637:sub_405355": null, "4215648:cgc_getUserInput": "extern unsigned int cgc_stdin[4];\n
extern unsigned int cgc_stdout[4];\n
\n
int cgc_getUserInput()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v0 = v2;\n
    v3 = cgc_calloc(0x100, 1);\n
    cgc_fflush(cgc_stdout);\n
    v4 = cgc_freaduntil(v3, 200, 10, cgc_stdin);\n
    *(&v4) = *(v3);\n
    return v4;\n
}\n
", "4215734:sub_4053b6": null, "4215744:cgc_clearShip": "extern unsigned int board;\n
extern struct_0 *shipCords;\n
\n
int cgc_clearShip()\n
{\n
    unsigned int *v1;  // eax\n
\n
    v1 = *((board + shipCords->field_4 * 4));\n
    v1[shipCords->field_0] = 0;\n
    return v1;\n
}\n
", "4215784:sub_4053e8": null, "4215792:cgc_setShip": "extern unsigned int board;\n
extern unsigned int cgc_lost;\n
extern struct_0 *shipCords;\n
\n
int cgc_setShip()\n
{\n
    unsigned int v1[2];  // edx\n
    unsigned int *v2;  // eax\n
\n
    v1 = shipCords;\n
    if (*((*((board + (v1[1] << 2))) + (v1[0] << 2))) == 5)\n
        cgc_lost = 1;\n
    v2 = *((board + shipCords->field_4 * 4));\n
    v2[shipCords->field_0] = 2;\n
    return v2;\n
}\n
", "4215860:sub_405434": null, "4215872:cgc_userFire": "extern unsigned int _GLOBAL_OFFSET_TABLE_[2];\n
extern unsigned int rows;\n
extern struct_2 *shipCords;\n
extern struct_1 *userBullets;\n
\n
int cgc_userFire()\n
{\n
    unsigned int v1[2];  // eax, Other Possible Types: unsigned int\n
    struct struct_2 **v2;  // ecx, Other Possible Types: unsigned int\n
    struct struct_2 **v3;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_[0];\n
    v2 = -1;\n
    if (rows > 0)\n
    {\n
        v3 = 0;\n
        do\n
        {\n
            if (userBullets[v3].field_0->field_0 == -1)\n
            {\n
                v2 = v3;\n
                break;\n
            }\n
            v3 += 1;\n
        } while (rows != v3);\n
    }\n
    if (shipCords->field_4 > 0)\n
    {\n
        v1 = userBullets[v2].field_0;\n
        *(v1) = shipCords->field_0;\n
        *((v1 + 4)) = shipCords->field_4;\n
    }\n
    return v1;\n
}\n
", "4215974:sub_4054a6": null, "4215984:cgc_moveUser": "extern char board;\n
extern char cgc_lost;\n
extern char cgc_stdin;\n
extern char cgc_stdout;\n
extern char columns;\n
extern char rows;\n
extern char shipCords;\n
extern char userBullets;\n
\n
int cgc_moveUser()\n
{\n
    unsigned int v1;  // eax\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // edx\n
\n
    v1 = cgc_calloc(0x100, 1);\n
    cgc_fflush(cgc_stdout);\n
    cgc_freaduntil(v1, 200, 10, cgc_stdin);\n
    v2 = *(v1) - 97;\n
    switch (v2)\n
    {\n
    case 0:\n
        v3 = shipCords;\n
        v4 = *(shipCords);\n
        if (v4 <= 0)\n
            return shipCords;\n
        v8 = board;\n
        *((*((board + *((shipCords + 4)) * 4)) + v4 * 4)) = 0;\n
        v9 = *(shipCords);\n
        v10 = *((shipCords + 4));\n
        *(shipCords) = v9 - 1;\n
        if (!(*((*((board + (v10 << 2))) + (v9 << 2) - 4)) == 5))\n
            goto LABEL_40564e;\n
        break;\n
    case 3:\n
        v3 = shipCords;\n
        v5 = *(shipCords);\n
        if (v5 >= columns - 1)\n
            return shipCords;\n
        v8 = board;\n
        *((*((board + *((shipCords + 4)) * 4)) + v5 * 4)) = 0;\n
        v12 = *(shipCords);\n
        v13 = *((shipCords + 4));\n
        *(shipCords) = v12 + 1;\n
        if (!(*((*((board + (v13 << 2))) + (v12 << 2) + 4)) == 5))\n
            goto LABEL_40564e;\n
        break;\n
    case 18:\n
        v3 = shipCords;\n
        v6 = *((shipCords + 4));\n
        if (v6 >= rows - 1)\n
            return shipCords;\n
        v8 = board;\n
        *((*((board + v6 * 4)) + *(shipCords) * 4)) = 0;\n
        v14 = *(shipCords);\n
        v15 = *((shipCords + 4));\n
        *((shipCords + 4)) = v15 + 1;\n
        if (!(*((*((board + (v15 << 2) + 4)) + (v14 << 2))) == 5))\n
            goto LABEL_40564e;\n
        break;\n
    case 22:\n
        v3 = shipCords;\n
        v7 = *((shipCords + 4));\n
        if (v7 <= 0)\n
            return shipCords;\n
        v8 = board;\n
        *((*((board + v7 * 4)) + *(shipCords) * 4)) = 0;\n
        v16 = *(shipCords);\n
        v17 = *((shipCords + 4));\n
        *((shipCords + 4)) = v17 - 1;\n
        if (!(*((*((board + (v17 << 2) - 4)) + (v16 << 2))) == 5))\n
            goto LABEL_40564e;\n
        break;\n
    default:\n
        v3 = -1;\n
        if (rows > 0)\n
        {\n
            v11 = 0;\n
            do\n
            {\n
                if (*(*((userBullets + (v11 << 2)))) == -1)\n
                {\n
                    v3 = v11;\n
                    break;\n
                }\n
                v11 += 1;\n
            } while (rows != v11);\n
        }\n
        if (*((shipCords + 4)) <= 0)\n
            return v3;\n
        v3 = *((userBullets + v3 * 4));\n
        *(v3) = *(shipCords);\n
        *((v3 + 4)) = *((shipCords + 4));\n
    }\n
    cgc_lost = 1;\n
LABEL_40564e:\n
    v18 = *(v3);\n
    v3 = *((v8 + *((v3 + 4)) * 4));\n
    *((v3 + v18 * 4)) = 2;\n
    return v3;\n
}\n
", "4216452:sub_405684": null, "4216464:cgc_updateBullets": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int columns;\n
extern struct_1 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_1 *userBullets;\n
\n
int cgc_updateBullets()\n
{\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v2[2];  // esi\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // ecx\n
    struct struct_0 **v6;  // edx, Other Possible Types: unsigned int\n
    unsigned int v7[2];  // edi\n
    unsigned int v8;  // ebx\n
\n
    if (rows > 0)\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v2 = userBullets[v1].field_0;\n
            if (v2[0] != -1)\n
            {\n
                v3 = v2[1];\n
                if (!v3)\n
                {\n
                    v2[0] = -1;\n
                    v4 = -1;\n
                }\n
                else\n
                {\n
                    v4 = v3 - 1;\n
                }\n
                v2[1] = v4;\n
            }\n
            v1 += 1;\n
        } while (v1 < rows);\n
    }\n
    v5 = rows;\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    do\n
    {\n
        v7 = enemyBullets[v6].field_0;\n
        v8 = v7[0];\n
        if (v8 != -1)\n
        {\n
            if (v8 == v5 - 1)\n
            {\n
                v7[0] = -1;\n
                v7[1] = -1;\n
            }\n
            else\n
            {\n
                v7[0] = v8 + 1;\n
            }\n
        }\n
        v6 += 1;\n
        v5 = rows;\n
    } while (v6 < rows * ((columns >> 31) + columns >> 1));\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4216498:sub_4056b2": null, "4216595:sub_405713": null, "4216680:sub_405768": null, "4216688:cgc_clearBullets": "typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int board;\n
extern unsigned int columns;\n
extern struct_4 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_5 *userBullets;\n
\n
int cgc_clearBullets()\n
{\n
    struct struct_3 **v1;  // edx, Other Possible Types: unsigned int\n
    struct_3 *v2;  // ebx\n
    unsigned int *v3;  // edi\n
    unsigned int v4;  // ebx\n
    struct_1 *v5;  // edi\n
    struct struct_0 **v6;  // ebx\n
    unsigned int *v7;  // ebx\n
    unsigned int v8;  // edi\n
    struct struct_1 **v9;  // edx, Other Possible Types: unsigned int\n
\n
    if (rows > 0)\n
    {\n
        v1 = 0;\n
        do\n
        {\n
            v2 = userBullets[v1].field_0;\n
            v3 = v2->field_0;\n
            if (v3 != -1)\n
            {\n
                v4 = *((board + v2->field_4 * 4));\n
                if (*((v4 + (v3 << 2))) == 4)\n
                    *((v4 + v3 * 4)) = 0;\n
            }\n
            v1 += 1;\n
        } while (v1 < rows);\n
    }\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    do\n
    {\n
        v5 = enemyBullets[v9].field_0;\n
        v6 = v5->field_0;\n
        if (v6 != -1)\n
        {\n
            v7 = *((board + v6 * 4));\n
            v8 = v5->field_4;\n
            if (v7[v8] == 5)\n
                v7[v8] = 0;\n
        }\n
        v9 += 1;\n
    } while (v9 < rows * ((columns >> 31) + columns >> 1));\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4216728:sub_405798": null, "4216820:sub_4057f4": null, "4216896:cgc_setBullets": "typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
    unsigned int field_4;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_2 *field_0;\n
    struct struct_0 *field_4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
extern unsigned int board;\n
extern unsigned int cgc_lost;\n
extern unsigned int cgc_turnCounter;\n
extern struct_5 *columns;\n
extern struct_2 *enemies;\n
extern struct_5 *enemyBullets;\n
extern unsigned int rows;\n
extern struct_4 *userBullets;\n
\n
int cgc_setBullets()\n
{\n
    struct struct_0 **v0;  // [bp-0x18]\n
    unsigned int *v1;  // [bp-0x14]\n
    struct struct_3 **v3;  // ebx, Other Possible Types: unsigned int\n
    struct_3 *v4;  // ebp\n
    unsigned int *v5;  // eax\n
    unsigned int v6;  // edx\n
    struct_1 *v7;  // edi\n
    struct struct_0 **v8;  // ebx\n
    unsigned int *v9;  // ebx\n
    unsigned int v10;  // edi\n
    struct struct_1 **v11;  // edx, Other Possible Types: unsigned int\n
\n
    if (rows > 0)\n
    {\n
        v3 = 0;\n
        v0 = &enemies->field_0;\n
        do\n
        {\n
            v4 = userBullets[v3].field_0;\n
            v5 = userBullets[v3].field_0->field_0;\n
            if (v5 != -1)\n
            {\n
                v6 = *((board + v4->field_4 * 4));\n
                if (*((v6 + (v5 << 2))) != 3)\n
                {\n
                    *((v6 + v5 * 4)) = 4;\n
                }\n
                else\n
                {\n
                    *((v6 + v5 * 4)) = 0;\n
                    v1 = *((v0 + 2 * (((2576980377 * cgc_turnCounter >> 32 >> 3) + (2576980377 * cgc_turnCounter >> 32 >> 31) + v4->field_4 >> 31) + (2576980377 * cgc_turnCounter >> 32 >> 3) + (2576980377 * cgc_turnCounter >> 32 >> 31) + v4->field_4 & -2)));\n
                    *((v1 + 2 * ((v4->field_0 >> 31) + v4->field_0 & -2))) = 0;\n
                    v4->field_0 = -1;\n
                    v4->field_4 = -1;\n
                }\n
            }\n
            v3 += 1;\n
        } while (v3 < rows);\n
    }\n
    if (rows * ((columns >> 31) + columns >> 1) <= 0)\n
        return columns;\n
    v11 = 0;\n
    do\n
    {\n
        v7 = enemyBullets[v11].field_0;\n
        v8 = v7->field_0;\n
        if (v8 != -1)\n
        {\n
            v9 = *((board + v8 * 4));\n
            v10 = v7->field_4;\n
            if (v9[v10] != 2)\n
                v9[v10] = 5;\n
            else\n
                cgc_lost = 1;\n
        }\n
        v11 += 1;\n
    } while (v11 < rows * ((columns >> 31) + columns >> 1));\n
    return enemyBullets;\n
}\n
", "4216953:sub_405879": null, "4217145:sub_405939": null, "4217230:sub_40598e": null, "4217232:main": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    struct struct_3 *field_0;\n
    struct struct_1 *field_4;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    struct struct_1 *field_0;\n
} struct_3;\n
\n
extern struct_3 *board;\n
extern unsigned int cgc_lost;\n
extern unsigned int cgc_seed1;\n
extern unsigned int cgc_seed2;\n
extern unsigned int cgc_stdin;\n
extern unsigned int cgc_stdout[4];\n
extern unsigned int cgc_turnCounter;\n
extern unsigned int columns;\n
extern struct_4 *enemyBullets;\n
extern unsigned int g_407441;\n
extern unsigned int g_407443;\n
extern char g_407447;\n
extern char g_40744f;\n
extern unsigned int g_407451;\n
extern unsigned int g_4074a0;\n
extern unsigned int g_4074a2;\n
extern char *playerName;\n
extern unsigned int rows;\n
extern struct_5 *shipCords;\n
extern struct_6 *userBullets;\n
\n
int main()\n
{\n
    unsigned int v1;  // [bp-0x140]\n
    unsigned int v2;  // [bp-0x13c]\n
    void* v3;  // [bp-0x138]\n
    void* v4;  // [bp-0x134]\n
    char *v5;  // [bp-0x130]\n
    char *v6;  // [bp-0x12c]\n
    unsigned int v8;  // [bp-0x124]\n
    unsigned int v9;  // [bp-0x120]\n
    unsigned int v10[4];  // [bp-0x11c]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v18;  // edi\n
    unsigned int v19;  // edi\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // eax\n
    struct struct_1 **v29;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v30;  // edx\n
    unsigned int v31;  // esi\n
    struct struct_0 **v32;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v33;  // edi\n
    unsigned int *v34;  // esi\n
    unsigned int v35;  // edi\n
    struct struct_2 **v36;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v37;  // esi\n
    struct struct_1 **v38;  // edi\n
    unsigned int *v39;  // edi\n
    unsigned int v40;  // esi\n
    struct struct_0 **v41;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v42;  // edx\n
    unsigned int v43;  // esi\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // eax\n
    struct struct_2 **v46;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v47;  // esi\n
    struct struct_1 **v48;  // edi\n
    unsigned int v49[2];  // eax\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // ecx\n
    unsigned int v52;  // eax\n
    void* v53;  // ecx\n
\n
    v14 = v18;\n
    v19 = cgc_stdout;\n
    cgc_fbuffered(cgc_stdout, 1);\n
    v4 = cgc_stdout;\n
    if (!cgc_turnCounter)\n
    {\n
        cgc_setupNewGame();\n
        v26 = *(1128775684) ^ *(0x4347c000);\n
        v27 = *(1128775692) ^ *(1128775688);\n
        v28 = cgc_strcmp(playerName, \"magic\");\n
        if (!v28)\n
            v26 = v28;\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
            v27 = v28;\n
        cgc_seed1 = v26;\n
        cgc_seed2 = v27;\n
        v19 = v4;\n
    }\n
    v51 = cgc_turnCounter;\n
    v52 = cgc_lost;\n
    if (!(cgc_turnCounter <= 9999))\n
        goto LABEL_405d09;\n
    if (!(!cgc_lost))\n
        goto LABEL_405d09;\n
    while (true)\n
    {\n
        if (v51)\n
        {\n
            if (rows > 0)\n
            {\n
                v29 = 0;\n
                do\n
                {\n
                    if (columns > 0)\n
                    {\n
                        v30 = board[v29].field_0;\n
                        v31 = 0;\n
                        do\n
                        {\n
                            if (v30[v31] == 3)\n
                                v30[v31] = 0;\n
                            v31 += 1;\n
                        } while (v31 < columns);\n
                    }\n
                    v29 += 1;\n
                } while (v29 < rows);\n
            }\n
            cgc_updateEnemies();\n
            cgc_setEnemies();\n
            if (rows > 0)\n
            {\n
                v32 = 0;\n
                do\n
                {\n
                    v33 = userBullets[v32].field_0;\n
                    v34 = v33->field_0;\n
                    if (v34 != -1)\n
                    {\n
                        v35 = board[v33->field_4].field_0;\n
                        if (*((v35 + (v34 << 2))) == 4)\n
                            *((v35 + v34 * 4)) = 0;\n
                    }\n
                    v32 += 1;\n
                } while (v32 < rows);\n
            }\n
            if (rows * ((columns >> 31) + columns >> 1) > 0)\n
            {\n
                v36 = 0;\n
                do\n
                {\n
                    v37 = enemyBullets[v36].field_0;\n
                    v38 = v37->field_0;\n
                    if (v38 != -1)\n
                    {\n
                        v39 = *((&board->field_0 + 0x4 * v38));\n
                        v40 = v37->field_4;\n
                        if (v39[v40] == 5)\n
                            v39[v40] = 0;\n
                    }\n
                    v36 += 1;\n
                } while (v36 < rows * ((columns >> 31) + columns >> 1));\n
            }\n
            if (rows > 0)\n
            {\n
                v41 = 0;\n
                do\n
                {\n
                    v42 = userBullets[v41].field_0;\n
                    if (v42->field_0 != -1)\n
                    {\n
                        v43 = v42->field_4;\n
                        if (!v43)\n
                        {\n
                            v42->field_0 = -1;\n
                            v44 = -1;\n
                        }\n
                        else\n
                        {\n
                            v44 = v43 - 1;\n
                        }\n
                        v42->field_4 = v44;\n
                    }\n
                    v41 += 1;\n
                } while (v41 < rows);\n
            }\n
            v45 = rows;\n
            if (rows * ((columns >> 31) + columns >> 1) > 0)\n
            {\n
                v46 = 0;\n
                do\n
                {\n
                    v47 = enemyBullets[v46].field_0;\n
                    v48 = v47->field_0;\n
                    if (v48 != -1)\n
                    {\n
                        if (v48 == v45 - 1)\n
                        {\n
                            v47->field_0 = -1;\n
                            v47->field_4 = -1;\n
                        }\n
                        else\n
                        {\n
                            v47->field_0 = v48 + 1;\n
                        }\n
                    }\n
                    v46 += 1;\n
                    v45 = rows;\n
                } while (v46 < rows * ((columns >> 31) + columns >> 1));\n
            }\n
            cgc_setBullets();\n
            v19 = v4;\n
        }\n
        v49 = shipCords;\n
        v50 = shipCords->field_0;\n
        if (v50 != -1)\n
        {\n
            if (board[shipCords->field_4].field_0[v50].field_0 == 5)\n
                cgc_lost = 1;\n
            board[v49[1]].field_0[v49[0]].field_0 = 2;\n
        }\n
        cgc_drawBoard();\n
        cgc_fprintf(v19, \"\\t\\tLevel #%d\\n
\");\n
        cgc_moveUser();\n
        cgc_turnCounter = cgc_turnCounter + 1;\n
        if (((cgc_turnCounter + 1) * 1717986919 >> 32 >> 31) + ((cgc_turnCounter + 1) * 1717986919 >> 32 >> 3) + 1 == rows - 2)\n
            cgc_lost = 1;\n
        v51 = cgc_turnCounter;\n
        v52 = cgc_lost;\n
        if (!(cgc_turnCounter <= 9999))\n
            goto LABEL_405d09;\n
        if (cgc_lost)\n
        {\n
LABEL_405d09:\n
            if (v52 == -1)\n
            {\n
                v6 = cgc_calloc(100000, 1);\n
                v10[0] = cgc_stdin;\n
                v2 = 5;\n
                v1 = 4;\n
                v5 = 0;\n
                v9 = \"\\t\\t!!!DANCE MODE!!!\\n
\\n
\\n
\\n
\";\n
                v8 = \"\\n
\\n
\\n
\";\n
                v3 = 0;\n
                v53 = 0;\n
            }\n
            else\n
            {\n
                if (!(v52 == 1))\n
                    goto LABEL_0x406099;\n
                cgc_fprintf(v19, \"\\t\\tyou lose\\n
\\n
\\n
\\n
\\n
\");\n
            }\n
        }\n
    }\n
}\n
", "4217435:sub_405a5b": null, "4217467:sub_405a7b": null, "4217498:sub_405a9a": null, "4217539:sub_405ac3": null, "4217594:sub_405afa": null, "4217642:sub_405b2a": null, "4217708:sub_405b6c": null, "4217731:sub_405b83": null, "4217789:sub_405bbd": null, "4217830:sub_405be6": null, "4217908:sub_405c34": null, "4219060:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}