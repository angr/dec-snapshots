{"4202496:_init": "extern struct_0 *g_40ce6c;\n
\n
int _init()\n
{\n
    if (g_40ce6c)\n
    {\n
        g_40ce6c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:_Znwj": "// attributes: PLT stub\n
int operator new(unsigned int v0)\n
{\n
    ::libstdc++.so::operator new();\n
    return;\n
}\n
", "4202576:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202592:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202608:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4202624:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4202672:_ZdlPv": "// attributes: PLT stub\n
int operator delete(unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4202704:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4202720:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4202736:sub_4020f0": "int sub_4020f0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202742:sub_4020f6": null, "4202752:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202795:sub_40212b": null, "4202796:sub_40212c": "int sub_40212c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202800:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202804:sub_402134": null, "4202816:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 44335;\n
    v6 = v5 + 866;\n
    v7 = v5 + 866;\n
    if (v7 == v6)\n
        return v5 + 866;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202867:sub_402173": "int sub_402173()\n
{\n
}\n
", "4202873:sub_402179": "int sub_402179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202880:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 44271;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 866;\n
    v9 = (v6 + 866 - (v6 + 866) >> 31) + (866 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202951:sub_4021c7": "int sub_4021c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202960:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40ce60;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40ce60)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203035:sub_40221b": "int sub_40221b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203040:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203049:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203053:sub_40222d": null, "4203056:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"@\";\n
    v3 = a0 * v5;\n
    if (v5 * a0 >> 32)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = cgc_malloc_alloc(v1 + 3472);\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v4 = v2;\n
    return v4;\n
}\n
", "4203224:sub_4022d8": null, "4203232:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 1;\n
}\n
", "4203272:sub_402308": null, "4203280:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 2;\n
}\n
", "4203320:sub_402338": null, "4203328:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 16;\n
}\n
", "4203368:sub_402368": null, "4203376:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 14;\n
}\n
", "4203416:sub_402398": null, "4203424:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 12;\n
}\n
", "4203464:sub_4023c8": null, "4203472:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 4;\n
}\n
", "4203512:sub_4023f8": null, "4203520:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 8;\n
}\n
", "4203560:sub_402428": null, "4203568:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 64;\n
}\n
", "4203608:sub_402458": null, "4203616:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 32;\n
}\n
", "4203656:sub_402488": null, "4203664:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return *((4247220 + v0)) & 128;\n
}\n
", "4203706:sub_4024ba": null, "4203712:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v4)\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = \"@\";\n
    v4 = cgc_toupper();\n
    v2 = 1;\n
    if (cgc_isdigit(v4))\n
        return v2 & 1;\n
    v0 = 0;\n
    if (v4 >= 65)\n
        v0 = v4 <= 70;\n
    v2 = v0;\n
    return v2 & 1;\n
}\n
", "4203826:sub_402532": null, "4203840:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203925:sub_402595": null, "4203936:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = \"@\";\n
    v3 = cgc_toupper(v3);\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    if (v3 >= 65 && v3 <= 70)\n
    {\n
        v1 = v3 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4204065:sub_402621": null, "4204080:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204165:sub_402685": null, "4204176:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = \"@\";\n
    cgc__terminate(1, v0);\n
    cgc_exit(v2, v3);\n
    return;\n
}\n
", "4204208:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = \"@\";\n
    cgc__terminate(v2, v0);\n
    cgc_fflush(v2, v3);\n
    return;\n
}\n
", "4204240:cgc_fflush": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fflush(unsigned int v4[5])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = \"@\";\n
    if (v4[2] == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v4[1] != 1)\n
    {\n
        v2 = 0;\n
        v0 = v4[3] - v4[2];\n
        ::0x4027d0::cgc_xlat(v4[4], &v4[1 + 1] + v4[2]);\n
        v0 = v4[3] - v4[2];\n
        if (::0x402840::cgc_transmit_all(v4[0], &v4[1 + 1] + v4[2]))\n
            v2 = -1;\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4204492:sub_4027cc": null, "4204496:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204595:sub_402833": null, "4204608:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = \"@\";\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4204758:sub_4028d6": null, "4204768:cgc_fbuffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fbuffered(unsigned int v1[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = \"@\";\n
    if (v1[2] != -1)\n
        cgc_fflush(v1);\n
    if (a0)\n
        v1[2] = 0;\n
    else\n
        v1[2] = -1;\n
    v1[3] = 0;\n
    return v1;\n
}\n
", "4204884:sub_402954": null, "4204896:cgc_fopen": "int cgc_fopen(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[6];  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v1[0] = cgc_malloc();\n
    if (!v1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v1[0] = v3;\n
    v1[1] = (a0 ? 1 : 2);\n
    v1[2] = 0;\n
    v1[3] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4205046:sub_4029f6": null, "4205056:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1[6])\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[6];  // eax\n
\n
    v1 = \"@\";\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] == a1[3])\n
        cgc__refill();\n
    if (a1[2] != -1)\n
    {\n
        v2 = a1[3] - a1[2];\n
        if (v2 > a0)\n
            v2 = a0;\n
        cgc_memcpy(v4, 1 + a1 + a1[2]);\n
        v3 = v2 + v3;\n
        v7 = a1;\n
        v7[2] = v2 + v7[2];\n
        if (a1[2] == a1[3])\n
        {\n
            a1[3] = 0;\n
            a1[2] = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(a1[0], v4 + v3, a0 - v3))\n
            break;\n
        if (!v2)\n
            break;\n
        ::0x402c60::cgc_xlat(a1[5], v4 + v3);\n
        v3 = v2 + v3;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4205435:sub_402b7b": null, "4205440:cgc__refill": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__refill(unsigned int v4[6])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = \"@\";\n
    if (v4[2] == v4[3])\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
    }\n
    v0 = &v2;\n
    if (!cgc_receive(v4[0], (1 + v4 + v4[3]), 0x400 - v4[3]) && *(&v2))\n
    {\n
        v4[3] = *(&v2);\n
        ::0x402c60::cgc_xlat(v4[5], v4 + 1);\n
        v3 = *(&v2);\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205651:sub_402c53": null, "4205664:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205763:sub_402cc3": null, "4205776:cgc_freaduntil": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freaduntil(unsigned int v6, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"@\";\n
    for (v4 = 0; v4 < a0 - 1; v4 += 1)\n
    {\n
        v0 = a2;\n
        v3 = cgc__getc();\n
        if (v3 == -1)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v3 == a1)\n
            break;\n
        v4[v6] = v3;\n
    }\n
    if (v4 == a0 - 1)\n
    {\n
        do\n
        {\n
            v0 = a2;\n
            v2 = cgc__getc();\n
            if (v2 == -1)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        } while (v2 != a1);\n
    }\n
    v4[v6] = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4206042:sub_402dda": null, "4206048:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    char *field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__getc(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6[6];  // edx\n
    unsigned int v7;  // ecx\n
\n
    v1 = \"@\";\n
    if (v5->field_8 == -1)\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v5->field_0, &v3, 1) && *(&v2))\n
        {\n
            ::0x402c60::cgc_xlat(v5->field_14, &v3, 1);\n
            v4 = v3;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    else\n
    {\n
        if (v5->field_8 == v5->field_c && cgc__refill(v5) < 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v6 = v5;\n
        v7 = v6[2];\n
        v6[2] = v7 + 1;\n
        v4 = *(24 + &v5->field_0 + v7);\n
        return v4;\n
    }\n
}\n
", "4206293:sub_402ed5": null, "4206304:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4206353:sub_402f11": null, "4206368:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v6, unsigned int a0, unsigned int a1[5])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[5];  // eax\n
    unsigned int v8[5];  // eax\n
\n
    v1 = \"@\";\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] != -1)\n
    {\n
        if (a0 >= 0x400)\n
        {\n
            cgc_fflush(a1);\n
        }\n
        else\n
        {\n
            if (a1[3] + a0 >= 0x400)\n
            {\n
                v2 = 0x400 - a1[3];\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4);\n
                v7 = a1;\n
                v7[3] = v2 + v7[3];\n
                v3 = v2 + v3;\n
                cgc_fflush(a1);\n
            }\n
            if (v3 < a0)\n
            {\n
                v2 = a0 - v3;\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4 + v3);\n
                v8 = a1;\n
                v8[3] = v2 + v8[3];\n
                v3 = v2 + v3;\n
            }\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
    if (a1[4])\n
    {\n
        v0 = a0;\n
        if (cgc_transmit_xlat(a1[0], a1[4], v6))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
    else if (::0x4030e0::cgc_transmit_all(a1[0], v6))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = a0;\n
    return v5;\n
}\n
", "4206813:sub_4030dd": null, "4206816:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = \"@\";\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 = *(&v2) + v3;\n
    }\n
}\n
", "4206966:sub_403176": null, "4206976:cgc_transmit_xlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_xlat(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x414], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x410]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = \"@\";\n
    v4 = a1;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v1 = a2 - v2;\n
            if (v1 > 0x400)\n
                v1 = 0x400;\n
            cgc_memcpy(&v3, v4 + v2);\n
            ::0x4032b0::cgc_xlat(a0, &v3);\n
            if (::0x4030e0::cgc_transmit_all(v6, &v3, v1))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = v1 + v2;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207268:sub_4032a4": null, "4207280:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4207379:sub_403313": null, "4207392:cgc_fxlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fxlat(unsigned int v8[6], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char *v4;  // [bp-0x1c]\n
    char *v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    char *v9;  // eax\n
    char *v10;  // eax, Other Possible Types: unsigned int, unsigned int [6]\n
    char *v11;  // eax\n
\n
    v1 = \"@\";\n
    if (!a0)\n
    {\n
        cgc_free(v8[4]);\n
        v8[4] = 0;\n
        v10 = v8;\n
        v10[5] = 0;\n
        return v8;\n
    }\n
    v0 = 0x100;\n
    v9 = cgc_realloc(v8[4]);\n
    v8[4] = v9;\n
    v5 = v9;\n
    v0 = 0x100;\n
    v11 = cgc_realloc(v8[5]);\n
    v8[5] = v11;\n
    v4 = v11;\n
    v10 = cgc_hash_seed(a0);\n
    v7 = v10;\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v5[v6] = v6;\n
        v10 = v6 + 1;\n
    }\n
    for (v6 = 255; v6 >= 1; v6 = v10)\n
    {\n
        v3 = (0 CONCAT v7) /m v6 >> 32;\n
        v7 *= 3;\n
        v7 = v7 * 0x2000 ^ v7 >> 19 ^ v7 >> 21;\n
        v2 = v5[v6];\n
        v5[v6] = v5[v3];\n
        v5[v3] = v2;\n
        v10 = v6 - 1;\n
    }\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v4[v5[v6]] = v6;\n
        v10 = v6 + 1;\n
    }\n
    return v10;\n
}\n
", "4207787:sub_4034ab": null, "4207792:cgc_hash_seed": "int cgc_hash_seed(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 826981510;\n
    for (v1 = 0; v1[v2]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = v1[v2] ^ v0;\n
        v0 = v0 * 0x2000 ^ v0 >> 19;\n
    }\n
    return v0;\n
}\n
", "4207896:sub_403518": null, "4207904:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4207953:sub_403551": null, "4207968:cgc_malloc_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_alloc(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"@\";\n
    if (a0 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    a0 = a0 - -3 & -0x4;\n
    if (a0 < 4)\n
    {\n
        v0 = 4;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 16)\n
    {\n
        v0 = a0;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 0x20000)\n
    {\n
        v0 = a0;\n
        v2 = cgc_small_alloc(v4);\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v2 = cgc_large_alloc(v4);\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4208206:sub_40364e": null, "4208208:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    unsigned int field_1218;\n
    unsigned int field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tiny_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned short v3[2];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned short v10[2];  // eax\n
    struct_0 *v11;  // eax\n
    unsigned short v12[2];  // eax\n
\n
    v7 = v9;\n
    v1 = \"@\";\n
    v5 = cgc_size_to_bin();\n
    v4 = *((v8 + v5 * 4));\n
    if (v4)\n
    {\n
        *((v8 + v5 * 4)) = *(v4);\n
        v6 = v4;\n
        return v6;\n
    }\n
    *(&v3[0]) = *((v8 + v5 * 4 + 4620));\n
    if (!v3)\n
    {\n
        if (!*((v8 + 4632)))\n
        {\n
            v0 = 1;\n
            *((v8 + 4632)) = cgc_run_alloc(v8);\n
            if (!*((v8 + 4632)))\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((v8 + 4636)) = 0;\n
        }\n
        v10 = *((v8 + 4632)) + *((v8 + 4636));\n
        *((v8 + v5 * 4 + 4620)) = v10;\n
        v3 = v10;\n
        *(v3) = a0;\n
        *((v3 + 2)) = a0;\n
        v11 = v8;\n
        v11->field_121c = v11->field_121c + 0x1000;\n
        if (*((v8 + 4636)) == 0x100000)\n
            *((v8 + 4632)) = 0;\n
    }\n
    v2 = v3 + *((v3 + 2));\n
    v12 = v3;\n
    v12[1] = v12[1] + a0;\n
    if (*((v3 + 2)) + *(v3) > 0x1000)\n
        *((v8 + v5 * 4 + 4620)) = 0;\n
    v6 = v2;\n
    return v6;\n
}\n
", "4208619:sub_4037eb": null, "4208624:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc(unsigned int v7, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    struct struct_0 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = \"@\";\n
    v3 = a0 - -23 & -0x10;\n
    for (v4 = cgc_size_to_bin(); v4 < 131; v4 = v4 + 1)\n
    {\n
        for (v2 = *((v7 + v4 * 4)); v2; v2 = *((v2 + 12)))\n
        {\n
            if (*((v2 + 4)) >= v3)\n
                break;\n
        }\n
        if (v2)\n
            break;\n
    }\n
    if (v4 == 131)\n
    {\n
        if (!cgc_small_alloc_run())\n
        {\n
            v4 = 130;\n
            v2 = *((v7 + v4 * 4));\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    v0 = v2;\n
    cgc_small_unlink_free(v7, v4);\n
    if (*((v2 + 4)) - v3 > 32)\n
    {\n
        v0 = v3;\n
        cgc_small_split(v7, v2);\n
    }\n
    v5 = v2 + 8;\n
    return v5;\n
}\n
", "4208951:sub_403937": null, "4208960:cgc_large_alloc": "int cgc_large_alloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = a0 - -4103 & -0x1000;\n
    v0 = &v2;\n
    if (cgc_allocate(v3, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v5;\n
    v1[1] = v3;\n
    v4 = v1 + 1;\n
    return v4;\n
}\n
", "4209097:sub_4039c9": null, "4209104:malloc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int malloc_free(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = \"@\";\n
    v4 = *((v3 + (a0 >> 20) + 524));\n
    v2 = v4;\n
    if (!a0)\n
    {\n
        return *((v3 + (a0 >> 20) + 524));\n
    }\n
    else if (v2)\n
    {\n
        if (v2 == 2)\n
        {\n
            v0 = a0;\n
            v4 = cgc_small_free(v3);\n
        }\n
        else if (v2 == 1)\n
        {\n
            v0 = a0;\n
            v4 = cgc_tiny_free(v3);\n
        }\n
        return v4;\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v4 = cgc_large_free(v3);\n
        return v4;\n
    }\n
}\n
", "4209306:sub_403a9a": null, "4209312:cgc_large_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_large_free(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[2];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = \"@\";\n
    v3 = a0;\n
    if ((v3 & 4095) != 8)\n
        cgc_heap_error(v1 - 11788);\n
    v2[0] = a0 - 8;\n
    if (v2[0] != v4)\n
    {\n
        v0 = v4;\n
        cgc_heap_error(v1 - 11739, v3, v2[0]);\n
    }\n
    if (v2[1] >= 0x20000 && v2[1] <= 2147487743 && !(v2[1] & 4095))\n
        return cgc_deallocate(v2);\n
    cgc_heap_error(v1 - 11685, v3);\n
    return cgc_deallocate(v2);\n
}\n
", "4209568:cgc_small_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6[2];  // [bp-0x18]\n
    unsigned int v7[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v8[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11[2];  // eax\n
    unsigned int v12[2];  // eax\n
\n
    v4 = \"@\";\n
    v9 = a0;\n
    v8[0] = v9 - 8;\n
    v5 = v9 & -0x100000;\n
    if ((v9 & 7))\n
        cgc_heap_error(v4 - 11641);\n
    if ((v8[1] & 1))\n
        cgc_heap_error(v4 - 11592);\n
    if (v8[1] <= 0x20000 && !(v8[1] < 16))\n
        goto LABEL_403c5c;\n
    cgc_heap_error(v4 - 11554);\n
LABEL_403c5c:\n
    if (!v8[0])\n
        v7[0] = 0;\n
    else\n
        v7 = v8 - v8[0];\n
    v6[0] = v8 + v8[1];\n
    if (v7 && (*((v7 + 4)) & -2) != v8[0])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 11513, v7);\n
    }\n
    if (v6[0] != v8[1])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 11461, v6);\n
    }\n
    if (v7 && (*((v7 + 4)) & 1))\n
    {\n
        v3 = v10;\n
        v0[0] = v7;\n
        cgc_small_unlink_free(v3, cgc_size_to_bin());\n
        v11 = v7;\n
        v11[1] = v8[1] + v11[1];\n
        v8 = v7;\n
        v6[0] = *((v8 + 4));\n
    }\n
    if ((v6[1] & 1))\n
    {\n
        v2 = v10;\n
        v0[0] = v6;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin());\n
        v12 = v8;\n
        v12[1] = v6[1] + v12[1];\n
        v6[0] = v8 + v8[1];\n
        v6[0] = *((v8 + 4));\n
    }\n
    v1 = v10;\n
    v0[0] = v8;\n
    return cgc_small_insert_free(v1, cgc_size_to_bin());\n
}\n
", "4210190:sub_403e0e": null, "4210192:cgc_tiny_free": "int cgc_tiny_free(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned short *v1;  // [bp-0x14]\n
    unsigned short *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
\n
    v2 = a0 & -0x1000;\n
    v1 = a0;\n
    v0 = *(v2);\n
    v3 = cgc_size_to_bin();\n
    *(&v1) = *((v4 + v3 * 4));\n
    *((v4 + v3 * 4)) = v1;\n
    return v4;\n
}\n
", "4210283:sub_403e6b": null, "4210288:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned short *v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = *((v4 + (a0 >> 20) + 524));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a0 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &a0[4];\n
    v3 = v1->field_4 - 8;\n
    return v3;\n
}\n
", "4210426:sub_403efa": null, "4210432:cgc_malloc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_realloc(unsigned int v6, unsigned short *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = \"@\";\n
    if (a1 > 2147483647)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a1)\n
    {\n
        malloc_free(v6, a0);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        v5 = cgc_malloc_alloc(v6, a1);\n
        return v5;\n
    }\n
    else if (cgc_malloc_size(v6, a0) < a1)\n
    {\n
        v4 = cgc_malloc_alloc(v6, a1);\n
        if (!v4)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v1 = v4;\n
        v2 = a0;\n
        v0 = cgc_malloc_size(v6, a0);\n
        cgc_memcpy(v1, v2);\n
        malloc_free(v6, a0);\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
}\n
", "4210751:sub_40403f": null, "4210752:cgc_size_to_bin": "int cgc_size_to_bin(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 16)\n
    {\n
        v0 = (v1 >> 2) - 1;\n
        return v0;\n
    }\n
    else if (v1 <= 0x200)\n
    {\n
        v0 = (v1 >> 4) - -2;\n
        return v0;\n
    }\n
    else if (v1 <= 0x1200)\n
    {\n
        v0 = (v1 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (v1 <= 0x20000)\n
    {\n
        v0 = (v1 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210915:sub_4040e3": null, "4210928:cgc_run_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_alloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = \"@\";\n
    v0 = &v2;\n
    if (cgc_allocate(0x200000, 0))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = *(&v2);\n
    v3 = v4 - -1048575 & -0x100000;\n
    if (v4 < v3)\n
        cgc_deallocate(v4);\n
    if (v3 + 0x100000 < v4 + 0x200000)\n
        cgc_deallocate(v3 + 0x100000);\n
    *((v7 + (v3 >> 20) + 524)) = a0;\n
    v5 = v3;\n
    return v5;\n
}\n
", "4211181:sub_4041ed": null, "4211184:cgc_small_alloc_run": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc_run(unsigned int v7)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = \"@\";\n
    v2 = cgc_run_alloc(v7, 2);\n
    if (!v2)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v4[0] = v2 - -19 & -0x10;\n
    v4[0] = 0;\n
    v4[1] = 1048560 + -0x1 * v4 + v2;\n
    v3[0] = v4 + v4[1];\n
    v3[0] = v4[1];\n
    v3[1] = 0;\n
    v0[0] = v4;\n
    cgc_small_insert_free(v7, 130);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211382:sub_4042b6": null, "4211392:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_unlink_free(unsigned int *v2, unsigned int a0, struct_2 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_2 *v3;  // eax\n
\n
    v1 = \"@\";\n
    if (!(a1->field_4 & 1))\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 11834);\n
    }\n
    v3 = a1;\n
    v3->field_4 = v3->field_4 & -2;\n
    if (a1->field_8)\n
        a1->field_8->field_c = a1->field_c;\n
    if (a1->field_c)\n
        a1->field_c->field_8 = a1->field_8;\n
    if (v2[a0] == a1)\n
        v2[a0] = a1->field_c;\n
    a1->field_8 = 0;\n
    a1->field_c = 0;\n
    return a1;\n
}\n
", "4211592:sub_404388": null, "4211600:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_split(unsigned int v7, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v1 = \"@\";\n
    v5 = a0->field_4 - a1;\n
    v4[0] = &a0->padding_0[a1];\n
    v3 = &a0->padding_0[a0->field_4];\n
    a0->field_4 = a1;\n
    v4[0] = a0->field_4;\n
    v4[1] = v5;\n
    *(v3) = v5;\n
    v2 = v7;\n
    v0[0] = v4;\n
    v9 = v6;\n
    return cgc_small_insert_free(v2, cgc_size_to_bin(v5));\n
}\n
", "4211751:sub_404427": null, "4211760:cgc_small_insert_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_insert_free(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = \"@\";\n
    if ((*((a1 + 4)) & 1) == 1)\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 11884);\n
    }\n
    v3 = a1;\n
    *((v3 + 4)) = *((v3 + 4)) | 1;\n
    *((a1 + 8)) = 0;\n
    *((a1 + 12)) = *((v2 + a0 * 4));\n
    *((v2 + a0 * 4)) = a1;\n
    v4 = a1;\n
    if (*((v4 + 12)))\n
    {\n
        v4 = *((a1 + 12));\n
        *((v4 + 8)) = a1;\n
    }\n
    return v4;\n
}\n
", "4211913:sub_4044c9": null, "4211920:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    char v5;  // [bp-0x4]\n
    unsigned int v6;  // [bp+0x4]\n
    char v7;  // [bp+0x8]\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v8 = &v5;\n
    v4 = v9;\n
    v2 = \"@\";\n
    v3 = &v7;\n
    v0 = v6;\n
    v1 = v3;\n
    cgc_vfprintf(cgc_stderr, v0, v1, \"@\", &v7, v9);\n
    v10 = v2;\n
    cgc__terminate(1, v0, v1, \"@\", &v7, v4);\n
    cgc_memchr();\n
    return;\n
}\n
", "4212016:cgc_memchr": "int cgc_memchr(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v1[v0] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v2 = &v1[v0];\n
            return v2;\n
        }\n
    }\n
}\n
", "4212123:sub_40459b": null, "4212128:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v4;\n
    v0 = a0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (v1[v2] == *((v0 + v2)))\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = v1[v2] - *((v0 + v2));\n
            return v3;\n
        }\n
    }\n
}\n
", "4212266:sub_40462a": null, "4212272:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4212358:sub_404686": null, "4212368:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    if (v3 > a0)\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[1 + a1 + -1 * v0] = *((v1 + a1 - v0 - 1));\n
        }\n
        return v3;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[v0] = *((v1 + v0));\n
        }\n
        return v3;\n
    }\n
}\n
", "4212539:sub_40473b": null, "4212544:cgc_memset": "int cgc_memset(char *v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = v2;\n
    for (v1 = 0; v1 < a1; v1 += 1)\n
    {\n
        v0[v1] = a0;\n
    }\n
    return v2;\n
}\n
", "4212620:sub_40478c": null, "4212624:cgc_printf": "int cgc_printf(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x8]\n
\n
    v1 = &v4;\n
    v0 = v1;\n
    v2 = cgc_vprintf(v3);\n
    return v2;\n
}\n
", "4212682:sub_4047ca": null, "4212688:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4212749:sub_40480d": null, "4212752:cgc_fprintf": "int cgc_fprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vfprintf(v4, a0);\n
    return v2;\n
}\n
", "4212821:sub_404855": null, "4212832:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vfprintf(struct_0 *v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = \"@\";\n
    v2 = 1;\n
    if (v4->field_8 == -1)\n
    {\n
        v2 = 0;\n
        v4->field_8 = 0;\n
    }\n
    v0 = 2147483647;\n
    v3 = cgc__vsfprintf(a0, a1, v4, 0);\n
    if (!v2)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4212994:sub_404902": null, "4213008:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vsprintf(v4, a0);\n
    return v2;\n
}\n
", "4213077:sub_404955": null, "4213088:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = 2147483647;\n
    return cgc__vsfprintf(a0, a1, 0, v1);\n
}\n
", "4213167:sub_4049af": null, "4213168:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(char *v30, unsigned int *a0, unsigned int a1[5], unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    void* v2;  // [bp-0xc0], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xb8]\n
    unsigned int v4;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xb0]\n
    unsigned int v6;  // [bp-0xac]\n
    char v7;  // [bp-0xa5]\n
    unsigned int v8;  // [bp-0xa4]\n
    unsigned int v9;  // [bp-0xa0]\n
    char v10;  // [bp-0x99]\n
    unsigned int v11;  // [bp-0x98]\n
    unsigned int v12;  // [bp-0x94]\n
    char v13;  // [bp-0x8d]\n
    unsigned int v14;  // [bp-0x8c]\n
    unsigned int v15;  // [bp-0x88]\n
    unsigned int v16;  // [bp-0x84]\n
    unsigned int v17;  // [bp-0x80]\n
    char v18;  // [bp-0x79]\n
    unsigned int v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x74]\n
    char *v21;  // [bp-0x70]\n
    char *v22;  // [bp-0x6c]\n
    char v23;  // [bp-0x65]\n
    unsigned int v24;  // [bp-0x64]\n
    char v25;  // [bp-0x60]\n
    char *v26;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0x18]\n
    char v29;  // [bp-0x11]\n
    char *v31;  // eax\n
    char *v32;  // eax\n
    char *v33;  // eax\n
    char *v34;  // eax\n
    char *v35;  // eax\n
    char *v36;  // eax\n
    unsigned int *v37;  // eax\n
    char *v38;  // eax\n
    unsigned int *v39;  // eax\n
    unsigned int *v40;  // eax\n
    unsigned int *v41;  // eax\n
    unsigned int v42;  // ecx\n
    char *v43;  // eax\n
    char *v44;  // eax\n
\n
    v6 = \"@\";\n
    v26 = 0;\n
    while (true)\n
    {\n
        v31 = v30;\n
        v30 = v31 + 1;\n
        v29 = *(v31);\n
        if (!v29)\n
            break;\n
        v23 = 32;\n
        while (v29 != 1)\n
        {\n
            if (v26 >= a3)\n
            {\n
                v32 = v26;\n
                v26 = v32 + 1;\n
                if (v32 == -1)\n
                    cgc__terminate();\n
            }\n
            else\n
            {\n
                v18 = v29;\n
                if (a1)\n
                    cgc_fwrite(&v18, 1, a1);\n
                if (a2)\n
                    v26[a2] = v18;\n
                v26 += 1;\n
            }\n
            v33 = v30;\n
            v30 = v33 + 1;\n
            v29 = *(v33);\n
            if (!v29)\n
                goto LABEL_405346;\n
        }\n
        v22 = v30;\n
        v28 = 4;\n
        v27 = 0;\n
        v34 = v30;\n
        v30 = v34 + 1;\n
        v5 = *(v34);\n
        v29 = v5;\n
        if (!v5)\n
            break;\n
        if (v5 == 32)\n
        {\n
            v23 = 32;\n
        }\n
        else if (v5 != 48)\n
        {\n
            v30 += 1;\n
        }\n
        else\n
        {\n
            v23 = 48;\n
        }\n
        if (*(v30) >= 48 && *(v30) <= 57)\n
            v27 = cgc_strtoul(v30, &v30);\n
        v35 = v30;\n
        v30 = v35 + 1;\n
        v4 = *(v35);\n
        v29 = v4;\n
        if (!v4)\n
            break;\n
        if (v4 == 104)\n
        {\n
            if (*(v30) == 104)\n
            {\n
                v30 += 1;\n
                v28 = 1;\n
            }\n
            else\n
            {\n
                v28 = 2;\n
            }\n
        }\n
        else\n
        {\n
            if (v4 != 108)\n
            {\n
                v30 += 1;\n
            }\n
            else if (*(v30) != 108)\n
            {\n
                v28 = 4;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 8;\n
            }\n
        }\n
        v36 = v30;\n
        v30 = v36 + 1;\n
        v3 = *(v36);\n
        v29 = v3;\n
        if (!v3)\n
        {\n
            v17 = v30 - v22;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            else\n
            {\n
                v16 = a3 - v26;\n
                if (v16 > v17)\n
                    v16 = v17;\n
                if (a1)\n
                    cgc_fwrite(v22, v16, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, v22, v16);\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            break;\n
        }\n
        if (v3 == 88)\n
        {\n
LABEL_404ecf:\n
            if (v29 == 100)\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v40 = a0;\n
                a0 = v40 + 1;\n
                v19 = *(v40);\n
                v0 = v19;\n
                v1 = 10;\n
                v2 = 0;\n
                cgc__convert_signed(&v25, v0, 10);\n
            }\n
            else\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v41 = a0;\n
                a0 = v41 + 1;\n
                v20 = *(v41);\n
                v42 = (v29 == 117 ? 16 : 10);\n
                v0 = v20;\n
                v1 = v42;\n
                v2 = v29 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v24 = cgc_strlen(&v25, v0, v1);\n
            if (v24 < v27)\n
            {\n
                v27 -= v24;\n
                do\n
                {\n
                    if (v26 >= a3)\n
                    {\n
                        v43 = v26;\n
                        v26 = v43 + 1;\n
                        if (v43 == -1)\n
                            cgc__terminate();\n
                    }\n
                    else\n
                    {\n
                        v13 = v23;\n
                        if (a1)\n
                            cgc_fwrite(&v13, 1, a1);\n
                        if (a2)\n
                            v26[a2] = v13;\n
                        v26 += 1;\n
                    }\n
                    v27 -= 1;\n
                } while (v27 > 0);\n
            }\n
            v12 = v24;\n
            if (v26 < a3)\n
            {\n
                v11 = a3 - v26;\n
                if (v11 > v12)\n
                    v11 = v12;\n
                if (a1)\n
                    cgc_fwrite(&v25, v11, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, &v25, v11);\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            else\n
            {\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            goto LABEL_405337;\n
        }\n
        else\n
        {\n
            if (v3 == 99)\n
            {\n
                v37 = a0;\n
                a0 = v37 + 1;\n
                v29 = *(v37);\n
                if (v26 >= a3)\n
                {\n
                    v38 = v26;\n
                    v26 = v38 + 1;\n
                    if (v38 == -1)\n
                        cgc__terminate();\n
                }\n
                else\n
                {\n
                    v10 = v29;\n
                    if (a1)\n
                        cgc_fwrite(&v10, 1, a1);\n
                    if (a2)\n
                        v26[a2] = v10;\n
                    v26 += 1;\n
                }\n
                goto LABEL_405337;\n
            }\n
            if (v3 == 100)\n
                goto LABEL_404ecf;\n
            if (v3 == 115)\n
            {\n
                v39 = a0;\n
                a0 = v39 + 1;\n
                v21 = *(v39);\n
                v9 = cgc_strlen();\n
                if (v26 >= a3)\n
                {\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
                else\n
                {\n
                    v8 = a3 - v26;\n
                    if (v8 > v9)\n
                        v8 = v9;\n
                    if (a1)\n
                        cgc_fwrite(v21, v8, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v21, v8);\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
LABEL_405337:\n
            }\n
            else if (v3 != 117 && v3 != 120)\n
            {\n
                v15 = v30 - v22;\n
                if (v26 >= a3)\n
                {\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                else\n
                {\n
                    v14 = a3 - v26;\n
                    if (v14 > v15)\n
                        v14 = v15;\n
                    if (a1)\n
                        cgc_fwrite(v22, v14, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v22, v14);\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                goto LABEL_405337;\n
            }\n
        }\n
    }\n
LABEL_405346:\n
    a1 = 0;\n
    if (v26 >= a3)\n
    {\n
        v44 = v26;\n
        v26 = v44 + 1;\n
        if (v44 != -1)\n
            return v26 - 1;\n
        cgc__terminate();\n
    }\n
    else\n
    {\n
        v7 = 0;\n
        if (a1)\n
            cgc_fwrite(&v7, 1, a1);\n
        if (a2)\n
            v26[a2] = v7;\n
        v26 += 1;\n
        return v26 - 1;\n
    }\n
}\n
", "4215787:sub_4053eb": null, "4215792:cgc__convert_signed": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_signed(char *v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v3;  // eax\n
\n
    v1 = \"@\";\n
    if (a0 < 0)\n
    {\n
        v3 = v2;\n
        v2 = v3 + 1;\n
        *(v3) = 45;\n
        a0 = -(a0);\n
    }\n
    v0 = a2;\n
    return cgc__convert_unsigned(v2, a0, a1);\n
}\n
", "4215901:sub_40545d": null, "4215904:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_unsigned(char *v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
    struct_0 *v7;  // eax\n
\n
    v1 = \"@\";\n
    v2 = &v4[20];\n
    if (a2)\n
        v3 = v1 - 11409;\n
    else\n
        v3 = v1 - 11392;\n
    v5 = v2;\n
    v2 = v5 + 1;\n
    if (!a0)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        v6[1].field_-1 = *(v3);\n
        return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
    }\n
    for (v5[1].field_-1 = 0; a0; a0 = (0 CONCAT a0) /m a1)\n
    {\n
        v0 = v3;\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT a0) /m a1 >> 32];\n
    }\n
    return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
}\n
", "4216153:sub_405559": null, "4216160:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(unsigned short *v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4216219:sub_40559b": null, "4216224:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = \"@\";\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(a0));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4216401:sub_405651": null, "4216416:cgc_strcasestr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasestr(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = \"@\";\n
    v2 = cgc_strlen();\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!v3[v6])\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v0 = v2;\n
        if (!cgc_strncasecmp(&v3[v6], a0))\n
        {\n
            v4 = v6 + v3;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4216573:sub_4056fd": null, "4216576:cgc_strchr": "int cgc_strchr(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = 0; *((v2 + v0)); v0 += 1)\n
    {\n
        if (*((v2 + v0)) == a0)\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2 + v0;\n
    return v1;\n
}\n
", "4216705:sub_405781": null, "4216720:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4216848:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); v0 += 1)\n
    {\n
        *(v0) = *(a0);\n
        a0 += 1;\n
    }\n
    *(v0) = 0;\n
    return v1;\n
}\n
", "4216926:sub_40585e": null, "4216928:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = \"@\";\n
    v2 = cgc_strlen();\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v2[v1] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217062:sub_4058e6": null, "4217072:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217128:sub_405928": null, "4217136:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = \"@\";\n
    v3 = &v5[a1];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v5))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v5));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(a0)))\n
                    v1 = v5 < v3;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v5 += 1;\n
        a0 += 1;\n
    }\n
    if (v5 == v3)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = *(v5) - *(a0);\n
    return v4;\n
}\n
", "4217372:sub_405a1c": null, "4217376:cgc_strncpy": "int cgc_strncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v2;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(a0))\n
            v0 = v1 - v2 < a1;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(a0);\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - v2 < a1; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return v2;\n
}\n
", "4217533:sub_405abd": null, "4217536:cgc_strndup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strndup(char *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = \"@\";\n
    v2 = cgc_strlen(v5);\n
    if (v2 > a0)\n
        v2 = a0;\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    *((v1 + v2)) = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217691:sub_405b5b": null, "4217696:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"@\";\n
    v1 = &*(v4)->field_0;\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v2 = 0; v1[v2]; v2 += 1)\n
    {\n
        if (cgc_strchr(a0, v1[v2]))\n
            break;\n
    }\n
    if (!v1[v2])\n
        *(v4) = 0;\n
    else\n
        *(v4) = &v1[1 + v2];\n
    v1[v2] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217915:sub_405c3b": null, "4217920:cgc_strstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strstr(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = \"@\";\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!v1[v3])\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        if (!cgc_strcmp(&v1[v3], a0))\n
        {\n
            v2 = v3 + v1;\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4218056:sub_405cc8": null, "4218064:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v11[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x14]\n
    char v9[2];  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
\n
    v3 = \"@\";\n
    *(&v9) = v11;\n
    v8 = 1;\n
    v7 = 1;\n
    v6 = 0;\n
    for (v5 = 0; cgc_isspace(v11[0]); v11 = &v11[1])\n
    {\n
        if (!v11[0])\n
            goto LABEL_405e8f;\n
    }\n
    if (*(v11) == 43)\n
    {\n
        v8 = 1;\n
        v11 = &v11[1];\n
    }\n
    else if (*(v11) == 45)\n
    {\n
        v8 = -1;\n
        v11 = &v11[1];\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
            v11 += 2;\n
        goto LABEL_405e9e;\n
    }\n
    if (a1)\n
    {\n
LABEL_405e9e:\n
        for (; *(v11); v11 = &v11[1])\n
        {\n
            if (cgc_isdigit(*(v11)))\n
            {\n
                v4 = *(v11) - 48;\n
            }\n
            else if (cgc_islower(*(v11)))\n
            {\n
                v4 = *(v11) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v11)))\n
                    break;\n
                v4 = *(v11) + -55;\n
            }\n
            if (v4 >= a1)\n
                break;\n
            v7 = 0;\n
            v5 = a1 * v5 + v4;\n
            if (v5 > 2147483647)\n
                v6 = 1;\n
        }\n
    }\n
    if (*(v11) == 48 && *((v11 + 1)) >= 48 && *((v11 + 1)) <= 55)\n
    {\n
        *(&v11) = &v11[1];\n
        a1 = 8;\n
        goto LABEL_405e8f;\n
    }\n
    if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
    {\n
        v11 += 2;\n
        a1 = 16;\n
        goto LABEL_405e8f;\n
    }\n
    if (!cgc_isdigit(*(v11)))\n
        goto LABEL_405e8f;\n
    a1 = 10;\n
LABEL_405e8f:\n
    if (a0)\n
    {\n
        if (v7)\n
            *(&v2) = v9;\n
        else\n
            v2 = v11;\n
        *(a0) = v2;\n
    }\n
    if (v8 >= 0)\n
    {\n
        if (v6)\n
            v0 = 2147483647;\n
        else\n
            v0 = v5;\n
        v10 = v0;\n
        return v10;\n
    }\n
    else\n
    {\n
        if (v6)\n
            v1 = 0x80000000;\n
        else\n
            v1 = -(v5);\n
        v10 = v1;\n
        return v10;\n
    }\n
}\n
", "4218915:sub_406023": null, "4218928:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_41;  // tmp #41\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x18]\n
    char v11[2];  // [bp-0x14]\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // eax\n
\n
    v4 = \"@\";\n
    *(&v11) = v12;\n
    v10 = 1;\n
    v9 = 1;\n
    v8 = 0;\n
    v7 = 0;\n
    for (v6 = 0; cgc_isspace(*(v12)); v12 += 1)\n
    {\n
        if (!*(v12))\n
            goto LABEL_4061f8;\n
    }\n
    if (*(v12) == 43)\n
    {\n
        v10 = 1;\n
        v12 += 1;\n
    }\n
    else if (*(v12) == 45)\n
    {\n
        v10 = -1;\n
        v12 += 1;\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
            v12 += 2;\n
        goto LABEL_406207;\n
    }\n
    if (a1)\n
    {\n
LABEL_406207:\n
        for (; *(v12); v12 += 1)\n
        {\n
            if (cgc_isdigit(*(v12)))\n
            {\n
                v5 = *(v12) - 48;\n
            }\n
            else if (cgc_islower(*(v12)))\n
            {\n
                v5 = *(v12) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v12)))\n
                    break;\n
                v5 = *(v12) + -55;\n
            }\n
            if (v5 >= a1)\n
                break;\n
            v9 = 0;\n
            v3 = v7;\n
            v13 = v6 * a1;\n
            tmp_41 = v13;\n
            v15 = (v6 * a1 >> 32) + (a1 >> 31) * v6 + a1 * v3 + (v5 >> 31) + (tmp_41 + v5 < tmp_41);\n
            v6 = v13 + v5;\n
            v7 = v15;\n
            if (v7)\n
                v8 = 1;\n
        }\n
    }\n
    if (*(v12) == 48 && *((v12 + 1)) >= 48 && *((v12 + 1)) <= 55)\n
    {\n
        *(&v12) = v12 + 1;\n
        a1 = 8;\n
        goto LABEL_4061f8;\n
    }\n
    if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
    {\n
        v12 += 2;\n
        a1 = 16;\n
        goto LABEL_4061f8;\n
    }\n
    if (!cgc_isdigit(*(v12)))\n
        goto LABEL_4061f8;\n
    a1 = 10;\n
LABEL_4061f8:\n
    if (a0)\n
    {\n
        if (v9)\n
            *(&v2) = v11;\n
        else\n
            v2 = v12;\n
        *(a0) = v2;\n
    }\n
    if (v10 < 0)\n
    {\n
        if ((!(!(v7 CONCAT v6) << 1 >> 32) || !(!v7 >> 31)) && (!(!(v6 ^ 0x80000000)) || !(!v7)))\n
            v8 = 1;\n
        tmp_6 = v6;\n
        v6 = -(v6);\n
        v7 = -(v7) - (0 < tmp_6);\n
    }\n
    if (v8)\n
    {\n
        v0 = -1;\n
        v1 = 0;\n
        return v0;\n
    }\n
    v0 = v6;\n
    v1 = v7;\n
    return v0;\n
}\n
", "4219879:sub_4063e7": null, "4219888:_Z10CompareIdsP12tag_and_fileS0_": "typedef struct struct_0 {\n
    char padding_0[132];\n
    unsigned int field_84;\n
} struct_0;\n
\n
int CompareIds(struct_0 *v1, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1->field_84 > a0->field_84)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (v1->field_84 != a0->field_84)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4219985:sub_406451": null, "4220000:_Z13CompareTitlesP12tag_and_fileS0_": "int CompareTitles(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_memcmp(v0 + 7, a0 + 7, 30);\n
}\n
", "4220069:sub_4064a5": null, "4220080:_Z14CompareArtistsP12tag_and_fileS0_": "int CompareArtists(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_memcmp(v0 + 37, a0 + 37, 30);\n
}\n
", "4220149:sub_4064f5": null, "4220160:_Z13CompareAlbumsP12tag_and_fileS0_": "int CompareAlbums(unsigned int v0, unsigned int a0)\n
{\n
    return cgc_memcmp(v0 + 67, a0 + 67, 30);\n
}\n
", "4220229:sub_406545": null, "4220240:_Z18CompareAlbumTracksP12tag_and_fileS0_": "typedef struct struct_0 {\n
    char padding_0[130];\n
    char field_82;\n
} struct_0;\n
\n
int CompareAlbumTracks(struct_0 *v1, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1->field_82 > a0->field_82)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    else if (v1->field_82 != a0->field_82)\n
    {\n
        v0 = -1;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
}\n
", "4220345:sub_4065b9": null, "4220352:_ZN7MgcFileC1Ev": "int MgcFile::__ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[0] = 0;\n
    v1[1] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4220383:sub_4065df": null, "4220384:_ZN7MgcFile11ReadMgcFileEP4FILE": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcFile::ReadMgcFile(unsigned int v10, unsigned int a0[6])\n
{\n
    unsigned int v0;  // [bp-0x192c]\n
    char *v1;  // [bp-0x1928]\n
    char *v2;  // [bp-0x1924]\n
    unsigned int v3;  // [bp-0x1920]\n
    unsigned int v4;  // [bp-0x191c]\n
    char *v5;  // [bp-0x1918]\n
    char v6;  // [bp-0x1914]\n
    char v7;  // [bp-0x1911]\n
    char v8;  // [bp-0x1909]\n
    char v9;  // [bp-0x9]\n
    unsigned int v11;  // eax\n
\n
    v3 = \"@\";\n
    v4 = v10;\n
    while (true)\n
    {\n
        cgc_fread(&v6, 5, a0);\n
        if (!(MgcHeaderInfo::Synced(&v6, 5) & 1))\n
            break;\n
        if (!(MgcHeaderInfo::SongV1() & 1))\n
            break;\n
        v0 = &v8;\n
        v11 = MgcHeaderInfo::CalcFrameSize();\n
        cgc_fread(v0, v11, a0);\n
        v5 = cgc_malloc(MgcHeaderInfo::CalcFrameSize(&v6, v11) + 5);\n
        cgc_memcpy(v5, &v6, 5);\n
        v1 = v5 + 5;\n
        v2 = &v8;\n
        cgc_memcpy(v1, v2, MgcHeaderInfo::CalcFrameSize(&v6, &v6));\n
        MgcFile::AddFrame(v4);\n
        if (!*(&v7))\n
        {\n
            v9 = 1;\n
            return v9 & 1;\n
        }\n
    }\n
    MgcFile::Clear();\n
    v9 = 0;\n
    return v9 & 1;\n
}\n
", "4220844:sub_4067ac": null, "4220848:_ZN7MgcFile5ClearEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcFile::Clear(unsigned int v4[3])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // eax\n
\n
    v1 = \"@\";\n
    v2[0] = v4;\n
    if (v2[0])\n
    {\n
        for (v3 = 0; v3 < v2[1]; v3 = v3 + 1)\n
        {\n
            cgc_free(*((v2[0] + v3 * 4)));\n
        }\n
        v0 = v2[0];\n
        if (v0)\n
            operator delete[](v0);\n
        v2[0] = 0;\n
    }\n
    v5 = v2;\n
    v5[1] = 0;\n
    v5[2] = 0;\n
    return v2;\n
}\n
", "4221009:sub_406851": null, "4221024:_ZN7MgcFile8AddFrameEP9mgc_frame": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    struct struct_1 *field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcFile::AddFrame(struct_0 *v5, unsigned int a0)\n
{\n
    int tmp_6;  // tmp #6\n
    int tmp_14;  // tmp #14\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    struct_0 *v2;  // [bp-0x1c]\n
    char *v3;  // [bp-0x18]\n
    char v4;  // [bp-0x11]\n
    struct_0 *v6;  // eax\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
    struct_0 *v9;  // ecx\n
    struct_0 *v10;  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // esi\n
    unsigned int *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v1 = \"@\";\n
    v2 = v5;\n
    if (!a0)\n
    {\n
        v4 = 0;\n
        return v4 & 1;\n
    }\n
    if (!v2->field_0)\n
    {\n
        v6 = v2;\n
        v6->field_8 = 16;\n
        v7 = v6->field_8;\n
        tmp_6 = v7;\n
        v8 = v7 * 4;\n
        if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t14, 0x4<32>, 0x0<32>))\n
            v8 = -1;\n
        v2->field_0 = operator new[](v8);\n
    }\n
    v9 = v2;\n
    if (v9->field_4 == v9->field_8)\n
    {\n
        v10 = v2;\n
        v10->field_8 = v10->field_8 * 2;\n
        v11 = v10->field_8;\n
        tmp_14 = v11;\n
        v12 = v11 * 4;\n
        if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t14, 0x4<32>, 0x0<32>))\n
            v12 = -1;\n
        v13 = operator new[](v12);\n
        v14 = v2;\n
        v3 = v13;\n
        cgc_memcpy(v3, v14->field_0, v14->field_4 * 4);\n
        v0 = v2->field_0;\n
        if (v0)\n
            operator delete(v0);\n
        v2->field_0 = &v3;\n
    }\n
    v15 = v2;\n
    v16 = v15->field_0;\n
    v17 = v15->field_4;\n
    v15->field_4 = v17 + 1;\n
    v16[v17] = a0;\n
    v4 = 1;\n
    return v4 & 1;\n
}\n
", "4221318:sub_406986": null, "4221328:_ZNK7MgcFile8GetFrameEj": "int MgcFile::GetFrame const(unsigned int v2[2], unsigned int *a0)\n
{\n
    unsigned int v0[2];  // [bp-0xc]\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0[0] = v2;\n
    if (a0 >= v0[1])\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = *((v0[0] + a0 * 4));\n
    return v1;\n
}\n
", "4221392:_ZN7MgcFile5RemixEPhPjj": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcFile::Remix(unsigned int v7[2], char *a0, unsigned int *a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3[2];  // [bp-0x18]\n
    char *v4;  // [bp-0x14]\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v8;  // eax\n
\n
    v2 = \"@\";\n
    v3[0] = v7;\n
    for (v6 = 0; v6 < v3[1]; v6 = v6 + 1)\n
    {\n
        v5 = 0;\n
        while (true)\n
        {\n
            v1 = v5;\n
            v0 = *((v3[0] + v6 * 4));\n
            if (v1 >= MgcHeaderInfo::CalcFrameSize())\n
                break;\n
            v4 = *((v3[0] + v6 * 4)) + 5 + v5;\n
            v8 = v4;\n
            *(v8) = a0[*(a1)] * *(v8);\n
            *(a1) = (0 CONCAT *(a1) + 33) /m a2 >> 32;\n
            v5 += 1;\n
        }\n
    }\n
    return v6;\n
}\n
", "4221602:sub_406aa2": null, "4221616:_ZN7MgcFile14PrintFrameDataEv": "typedef struct struct_1 {\n
    unsigned int field_-13c[5];\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_40a205;\n
\n
int MgcFile::PrintFrameData(unsigned int v8[2])\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char *v1;  // [bp-0x20]\n
    struct_1 *v2;  // [bp-0x1c]\n
    unsigned int v3[2];  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    char *v5;  // [bp-0x10]\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v7 = v9;\n
    v2 = &\"@\";\n
    v3[0] = v8;\n
    cgc_printf(&g_40a205);\n
    for (v6 = 0; v6 < v3[1]; v6 = v6 + 1)\n
    {\n
        v5 = *((v3[0] + v6 * 4)) + 5;\n
        v4 = 0;\n
        while (true)\n
        {\n
            v1 = v4;\n
            if (v1 >= MgcHeaderInfo::CalcFrameSize())\n
                break;\n
            v0 = v5[v4];\n
            cgc_printf(&v2[2839].field_-13c + 1);\n
            v4 += 1;\n
        }\n
    }\n
    cgc_printf(&v2[2837].field_-13c + 2);\n
    v10 = v7;\n
    return cgc_fflush(v2[79].field_-13c);\n
}\n
", "4221870:sub_406bae": null, "4221872:_ZN7MgcFile11TotalFramesEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int MgcFile::TotalFrames(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4221886:sub_406bbe": null, "4221888:_ZN13MgcHeaderInfo6SyncedEP9mgc_frame": "int MgcHeaderInfo::Synced(char v2[2])\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    v1 = 0;\n
    if (v2[0] == 255)\n
        v1 = (v2[1] & 240) == 240;\n
    return v1 & 1;\n
}\n
", "4221960:sub_406c08": null, "4221968:_ZN13MgcHeaderInfo6SongV1EP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
int MgcHeaderInfo::SongV1(struct_0 *v0)\n
{\n
    return (v0->field_1 & 8);\n
}\n
", "4221997:sub_406c2d": null, "4222000:_ZN13MgcHeaderInfo5LayerEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
int MgcHeaderInfo::Layer(struct_0 *v0)\n
{\n
    return (v0->field_1 & 6) >> 1;\n
}\n
", "4222021:sub_406c45": null, "4222032:_ZN13MgcHeaderInfo7BitrateEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcHeaderInfo::Bitrate()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    void* v3;  // [bp-0x8]\n
    struct_0 *v4;  // [bp+0x4]\n
\n
    v0 = \"@\";\n
    v2 = v4->field_2 >> 4;\n
    v1 = v2 - 1;\n
    if (v1 > 13)\n
    {\n
        v3 = 0;\n
        return;\n
    }\n
    goto *(((stack_base)[20] + (stack_base)[16] * 4 - 11328)) + (stack_base)[20];\n
}\n
", "4222288:_ZN13MgcHeaderInfo4FreqEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_0;\n
\n
int MgcHeaderInfo::Freq(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = v3->field_2;\n
    v0 = (v1 & 12) >> 2;\n
    if (!v0)\n
    {\n
        v2 = 44100;\n
        return v2;\n
    }\n
    else if (v0 == 1)\n
    {\n
        v2 = 48000;\n
        return v2;\n
    }\n
    else if (v0 != 2)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0x7d00;\n
        return v2;\n
    }\n
}\n
", "4222417:sub_406dd1": null, "4222432:_ZN13MgcHeaderInfo15SamplesPerFrameEP9mgc_frame": "int MgcHeaderInfo::SamplesPerFrame(void* v3)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned short v2;  // [bp-0xa]\n
\n
    v1 = MgcHeaderInfo::Layer(v3);\n
    v0 = v1;\n
    if (v0 == 1)\n
    {\n
        v2 = 384;\n
        return v2;\n
    }\n
    else if (v0 == 2)\n
    {\n
        v2 = 1152;\n
        return v2;\n
    }\n
    else if (v0 != 3)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 1152;\n
        return v2;\n
    }\n
}\n
", "4222572:sub_406e6c": null, "4222576:_ZN13MgcHeaderInfo19NumAdditionalFramesEP9mgc_frame": "typedef struct struct_0 {\n
    char padding_0[3];\n
    unsigned short field_3;\n
} struct_0;\n
\n
int MgcHeaderInfo::NumAdditionalFrames(struct_0 *v0)\n
{\n
    return *(&(&v0->padding_0)[1]);\n
}\n
", "4222591:sub_406e7f": null, "4222592:_ZN13MgcHeaderInfo13CalcFrameSizeEP9mgc_frame": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int MgcHeaderInfo::CalcFrameSize(void* v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
\n
    v3 = \"@\";\n
    if (v6 && MgcHeaderInfo::Freq(v6))\n
    {\n
        v7 = MgcHeaderInfo::SamplesPerFrame(v6);\n
        v1 = (v7 >> 31 CONCAT v7) /m 8;\n
        v2 = MgcHeaderInfo::Bitrate() * v1;\n
        v8 = v2;\n
        v4 = (v8 >> 31 CONCAT v8) /m MgcHeaderInfo::Freq(v6);\n
        if (!(v4 & 3))\n
            v0 = v4;\n
        else\n
            v0 = v4 + 4 - (v4 & 3);\n
        v5 = v0;\n
        return v5;\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4222802:sub_406f52": null, "4222816:_ZN7mgc_tag11header_sizeEv": "int mgc_tag::header_size(unsigned int v0)\n
{\n
    return 128;\n
}\n
", "4222829:sub_406f6d": null, "4222832:_ZN8PlaylistC1Ev": "int Playlist::__ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[2] = 0;\n
    v1[0] = 0;\n
    return v0;\n
}\n
", "4222863:sub_406f8f": null, "4222864:_ZN8Playlist7AddSongEPK12tag_and_file": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::AddSong(unsigned int v5[3], void* a0)\n
{\n
    int tmp_6;  // tmp #6\n
    int tmp_14;  // tmp #14\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2[3];  // [bp-0x1c]\n
    char *v3;  // [bp-0x18]\n
    char v4;  // [bp-0x11]\n
    unsigned int v6[3];  // eax\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
    unsigned int v9[3];  // ecx\n
    unsigned int v10[3];  // eax\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    struct_0 *v14;  // eax\n
    unsigned int v15[3];  // esi\n
    unsigned int v16;  // ecx\n
    unsigned int v17;  // edx\n
\n
    v1 = \"@\";\n
    v2[0] = v5;\n
    if (a0 && v2[1] < 16000)\n
    {\n
        if (!v2[0])\n
        {\n
            v6 = v2;\n
            v6[2] = 16;\n
            v7 = v6[2];\n
            tmp_6 = v7;\n
            v8 = v7 * 136;\n
            if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t14, 0x88<32>, 0x0<32>))\n
                v8 = -1;\n
            v2[0] = operator new[](v8);\n
        }\n
        v9 = v2;\n
        if (v9[1] == v9[2])\n
        {\n
            v10 = v2;\n
            v10[2] = v10[2] * 2;\n
            v11 = v10[2];\n
            tmp_14 = v11;\n
            v12 = v11 * 136;\n
            if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t14, 0x88<32>, 0x0<32>))\n
                v12 = -1;\n
            v13 = operator new[](v12);\n
            v14 = v2;\n
            v3 = v13;\n
            cgc_memcpy(v3, v14->field_0, v14->field_4 * 136);\n
            v0 = v2[0];\n
            if (v0)\n
                operator delete[](v0);\n
            v2[0] = v3;\n
        }\n
        v15 = v2;\n
        v16 = v15[0];\n
        v17 = v15[1];\n
        v15[1] = v17 + 1;\n
        memcpy(v16 + v17 * 136, a0, 136);\n
        v4 = 1;\n
        return v4 & 1;\n
    }\n
    v4 = 0;\n
    return v4 & 1;\n
}\n
", "4223203:sub_4070e3": null, "4223216:_ZN8Playlist10RemoveSongEjP12tag_and_file": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::RemoveSong(unsigned int v4[2], unsigned int a0, void* a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[2];  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0xd]\n
    unsigned int v5[2];  // eax\n
    unsigned int v6[2];  // eax\n
\n
    v0 = \"@\";\n
    v1[0] = v4;\n
    v3 = 0;\n
    for (v2 = 0; v2 < v1[1]; v2 += 1)\n
    {\n
        if (*((v1[0] + v2 * 136 + 132)) == a0)\n
        {\n
            if (a1)\n
                memcpy(a1, v1[0] + v2 * 136, 136);\n
            v3 = 1;\n
            break;\n
        }\n
    }\n
    if (!(v3 & 1))\n
        return v3 & 1;\n
    if (v2 < v1[1] - 1)\n
    {\n
        v5 = v1;\n
        cgc_memmove(v5[0] + v2 * 136, v5[0] + (v2 + 1) * 136, (v5[1] - (v2 + 1)) * 136);\n
    }\n
    v6 = v1;\n
    v6[1] = v6[1] - 1;\n
    return v3 & 1;\n
}\n
", "4223510:sub_407216": null, "4223520:_ZN8Playlist7GetSongEj": "int Playlist::GetSong(unsigned int v3[2], unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0[0] = v3;\n
    v2 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (v1 >= v0[1])\n
            return v2;\n
        if (*((v0[0] + v1 * 136 + 132)) == a0)\n
        {\n
            v2 = v0[0] + v1 * 136;\n
            return v2;\n
        }\n
        v1 += 1;\n
    }\n
}\n
", "4223645:sub_40729d": null, "4223648:_ZN8Playlist8SortByIdEv": "int Playlist::SortById(unsigned int v2[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char v1;  // [bp-0x8]\n
    unsigned int v3;  // esi\n
    unsigned int v4[2];  // esi\n
\n
    v0 = v3;\n
    v4 = v2;\n
    return Playlist::Sort(v4, v4[0], v4[1], CompareIds, v0, *(&v1));\n
}\n
", "4223712:_ZN8Playlist4SortEP12tag_and_filejPFiS1_S1_E": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::Sort(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    int tmp_23;  // tmp #23\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
\n
    v4 = v6;\n
    v1 = \"@\";\n
    v7 = a1;\n
    tmp_23 = v7;\n
    v8 = v7 * 136;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t23, 0x88<32>, 0x0<32>))\n
        v8 = -1;\n
    v3 = operator new[](v8);\n
    v0 = a2;\n
    Playlist::SortHelper(v5, a0, v3, 0, a1);\n
    v9 = v3;\n
    v2 = v9;\n
    if (v9)\n
    {\n
        v9 = operator delete[](v2);\n
        return v9;\n
    }\n
    return v3;\n
}\n
", "4223869:sub_40737d": null, "4223872:_ZN8Playlist11SortByTitleEv": "int Playlist::SortByTitle(unsigned int v1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
    unsigned int v3[2];  // esi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    return Playlist::Sort(v3, v3[0], v3[1], CompareTitles);\n
}\n
", "4223936:_ZN8Playlist20SortByArtistAndAlbumEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::SortByArtistAndAlbum(unsigned int v8[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: char *\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // esi\n
    unsigned int v11[2];  // esi\n
    unsigned int v12[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v13[2];  // esi\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v0 = \"@\";\n
    v1[0] = v8;\n
    Playlist::Sort(v1, v1[0], v1[1], CompareArtists);\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (v1[1])\n
        v4 = v1[0] + 37;\n
    for (v2 = 0; v2 < v1[1]; v2 += 1)\n
    {\n
        v3 = v1[0] + v2 * 136 + 37;\n
        if (cgc_memcmp(v4, v3, 1))\n
        {\n
            v11 = v1;\n
            Playlist::Sort(v11, v11[0] + v5 * 136, v2 - v5, v0 - 26996);\n
            v5 = v2;\n
            v4 = v3;\n
        }\n
    }\n
    v12 = v1;\n
    if (v12[1])\n
    {\n
        v13 = v1;\n
        v12 = Playlist::Sort(v13, v13[0] + v5 * 136, v13[1] - v5, v0 - 26996);\n
    }\n
    return v12;\n
}\n
", "4224279:sub_407517": null, "4224288:_ZN8Playlist20SortByArtistAndTitleEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::SortByArtistAndTitle(unsigned int v8[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x18], Other Possible Types: void*\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // esi\n
    unsigned int v11[2];  // esi\n
    unsigned int v12[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v13[2];  // esi\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v0 = \"@\";\n
    v1[0] = v8;\n
    Playlist::Sort(v1, v1[0], v1[1], CompareArtists);\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (v1[1])\n
        v4 = v1[0] + 37;\n
    for (v2 = 0; v2 < v1[1]; v2 += 1)\n
    {\n
        v3 = v1[0] + v2 * 136 + 37;\n
        if (cgc_memcmp(v4, v3, 1))\n
        {\n
            v11 = v1;\n
            Playlist::Sort(v11, v11[0] + v5 * 136, v2 - v5, v0 - 27156);\n
            v5 = v2;\n
            v4 = v3;\n
        }\n
    }\n
    v12 = v1;\n
    if (v12[1])\n
    {\n
        v13 = v1;\n
        v12 = Playlist::Sort(v13, v13[0] + v5 * 136, v13[1] - v5, v0 - 27156);\n
    }\n
    return v12;\n
}\n
", "4224631:sub_407677": null, "4224640:_ZN8Playlist11SortByAlbumEv": "int Playlist::SortByAlbum(unsigned int v1[2])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
    unsigned int v3[2];  // esi\n
\n
    v0 = v2;\n
    v3 = v1;\n
    return Playlist::Sort(v3, v3[0], v3[1], CompareAlbums);\n
}\n
", "4224704:_ZN8Playlist19SortByAlbumAndTitleEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::SortByAlbumAndTitle(unsigned int v8[2])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x20]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x18], Other Possible Types: void*\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0xc]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // esi\n
    unsigned int v11[2];  // esi\n
    unsigned int v12[2];  // eax, Other Possible Types: unsigned int\n
    unsigned int v13[2];  // esi\n
\n
    v7 = v9;\n
    v6 = v10;\n
    v0 = \"@\";\n
    v1[0] = v8;\n
    Playlist::Sort(v1, v1[0], v1[1], CompareAlbums);\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (v1[1])\n
        v4 = v1[0] + 67;\n
    for (v2 = 0; v2 < v1[1]; v2 += 1)\n
    {\n
        v3 = v1[0] + v2 * 136 + 67;\n
        if (cgc_memcmp(v4, v3, 1))\n
        {\n
            v11 = v1;\n
            Playlist::Sort(v11, v11[0] + v5 * 136, v2 - v5, v0 - 27156);\n
            v5 = v2;\n
            v4 = v3;\n
        }\n
    }\n
    v12 = v1;\n
    if (v12[1])\n
    {\n
        v13 = v1;\n
        v12 = Playlist::Sort(v13, v13[0] + v5 * 136, v13[1] - v5, v0 - 27156);\n
    }\n
    return v12;\n
}\n
", "4225047:sub_407817": null, "4225056:_ZN8Playlist12ListAllSongsEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::ListAllSongs(unsigned int v10[2])\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2[2];  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    char *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = \"@\";\n
    v2[0] = v10;\n
    for (v9 = 0; v9 < v2[1]; v9 += 1)\n
    {\n
        v0 = *((v2[0] + v9 * 136 + 132));\n
        cgc_printf(v1 - 11272);\n
        cgc_printf(v1 - 11259);\n
        v8 = v2[0] + v9 * 136 + 7;\n
        for (v7 = 0; v7 < 30; v7 += 1)\n
        {\n
            v0 = v8[v7];\n
            cgc_printf(v1 - 11251);\n
        }\n
        cgc_printf(v1 - 11248);\n
        v6 = v2[0] + v9 * 136 + 37;\n
        for (v5 = 0; v5 < 30; v5 += 1)\n
        {\n
            v0 = v6[v5];\n
            cgc_printf(v1 - 11251);\n
        }\n
        cgc_printf(v1 - 11238);\n
        v4 = v2[0] + v9 * 136 + 67;\n
        for (v3 = 0; v3 < 30; v3 += 1)\n
        {\n
            v0 = v4[v3];\n
            cgc_printf(v1 - 11251);\n
        }\n
        v0 = *((v2[0] + v9 * 136 + 97));\n
        cgc_printf(v1 - 11229);\n
        v0 = *((v2[0] + v9 * 136 + 130));\n
        cgc_printf(v1 - 11218);\n
        cgc_printf(v1 - 11343);\n
    }\n
    return v9;\n
}\n
", "4225589:sub_407a35": null, "4225600:_ZN8Playlist13ClearPlaylistEb": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::ClearPlaylist(unsigned int v4[3], char a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    char v3;  // [bp-0x9]\n
    unsigned int v5[3];  // eax\n
\n
    v1 = \"@\";\n
    v3 = a0 & 1;\n
    v2[0] = v4;\n
    if ((v3 & 1) && v2[0])\n
    {\n
        v0 = v2[0];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v5 = v2;\n
    v5[0] = 0;\n
    v5[1] = 0;\n
    v5[2] = 0;\n
    return v2;\n
}\n
", "4225726:sub_407abe": null, "4225728:_ZN8Playlist6lengthEv": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int Playlist::length(struct_0 *v0)\n
{\n
    return v0->field_4;\n
}\n
", "4225742:sub_407ace": null, "4225744:_ZN8Playlist10SortHelperEP12tag_and_fileS1_jjPFiS1_S1_E": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Playlist::SortHelper(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3, struct struct_0 **a4)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // ecx\n
\n
    v0 = \"@\";\n
    v1 = v6;\n
    v7 = a3 - a2;\n
    if (v7 < 2)\n
        return a3 - a2;\n
    v5 = a3 + a2 >> 1;\n
    Playlist::SortHelper(v1, a0, a1, a2, v5, a4);\n
    Playlist::SortHelper(v1, a0, a1, v5, a3, a4);\n
    v4 = a2;\n
    v3 = v5;\n
    v2 = a2;\n
    while (v2 < a3)\n
    {\n
        if (v4 >= v5)\n
        {\n
            v8 = v3;\n
            v3 = v8 + 1;\n
            memcpy(a1 + v2 * 136, a0 + v8 * 136, 136);\n
LABEL_407c9d:\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            if (v3 < a3 && a4(a0 + v4 * 136) > 0)\n
            {\n
                v9 = v3;\n
                v3 = v9 + 1;\n
LABEL_407c5f:\n
                memcpy(a1 + v2 * 136, a0 + v9 * 136, 136);\n
                goto LABEL_407c9d;\n
            }\n
            v9 = v4;\n
            v4 = v9 + 1;\n
            goto LABEL_407c5f;\n
        }\n
    }\n
    v7 = cgc_memcpy(a0 + a2 * 136, a1 + a2 * 136, (a3 - a2) * 136);\n
    return v7;\n
}\n
", "4226287:sub_407cef": null, "4226288:_Z11RecvNewSongP12tag_and_file": "typedef struct struct_1 {\n
    unsigned int field_-140[6];\n
    unsigned int field_-13c[5];\n
    char padding_-138[3780];\n
    unsigned int field_d8c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-140;\n
    unsigned int field_-13c;\n
    char padding_-138[3780];\n
    unsigned int field_d8c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int RecvNewSong(unsigned int v7[34])\n
{\n
    unsigned int v0[34];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    struct_1 *v3;  // [bp-0x18]\n
    unsigned int v4[3];  // [bp-0x14]\n
    char v5;  // [bp-0xd]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    struct_0 *v9;  // eax\n
    unsigned int v10;  // ecx\n
\n
    v6 = v8;\n
    v3 = &\"@\";\n
    v4[0] = operator new(12);\n
    MgcFile::__ctor__(v4);\n
    v7[0] = v4;\n
    if (!(MgcFile::ReadMgcFile(v7[0], *(&v3->padding_-138[312])) & 1))\n
    {\n
        v5 = 0;\n
        return v5 & 1;\n
    }\n
    cgc_fflush(*(&v3->padding_-138[308]));\n
    v1 = &v7[1];\n
    v2 = cgc_fread(v1, mgc_tag::header_size(&v7[1]), *(&v3->padding_-138[312]));\n
    if (v2 == mgc_tag::header_size(&v7[1]))\n
    {\n
        v9 = v3;\n
        v10 = *(&v9->padding_-138[3460]);\n
        *(&v9->padding_-138[3460]) = v10 + 1;\n
        v7[33] = v10;\n
        v5 = 1;\n
        return v5 & 1;\n
    }\n
    v0[0] = v7;\n
    if (v0)\n
        operator delete(v0);\n
    v5 = 0;\n
    return v5 & 1;\n
}\n
", "4226612:sub_407e34": null, "4226624:_Z13PrintPlaylistP8Playlistj": "typedef struct struct_0 {\n
    unsigned int field_-13c[5];\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int PrintPlaylist(void* v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0xc]\n
\n
    v1 = &\"@\";\n
    if (v2)\n
    {\n
        v0 = a0;\n
        cgc_printf(&v1[2432].field_-13c + 1);\n
        v0 = Playlist::length(v2);\n
        cgc_printf(&v1[2801].field_-13c + 1);\n
        return cgc_fflush(v1[79].field_-13c);\n
    }\n
    return v2;\n
}\n
", "4226757:sub_407ec5": null, "4226768:main": "typedef struct struct_2 {\n
    char field_-2b86;\n
    char padding_-2b85[10821];\n
    unsigned int field_-140;\n
    unsigned int field_-13c[4];\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[2];\n
    char field_2;\n
} struct_1;\n
\n
typedef struct struct_3 {\n
    char field_-2b86;\n
    char padding_-2b85[10821];\n
    unsigned int field_-140;\n
    unsigned int field_-13c[6];\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_-2b86;\n
    char padding_-2b85[10821];\n
    unsigned int field_-140;\n
    unsigned int field_-13c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stdin[6];\n
\n
int main(unsigned int v33, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x594]\n
    unsigned int v1[3];  // [bp-0x590]\n
    unsigned int v2;  // [bp-0x58c]\n
    struct_2 *v3;  // [bp-0x588]\n
    unsigned int v4[3];  // [bp-0x584]\n
    unsigned int v5;  // [bp-0x580]\n
    unsigned int v6;  // [bp-0x57c]\n
    unsigned int v7;  // [bp-0x578]\n
    void* v8;  // [bp-0x574], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x570]\n
    unsigned int v10;  // [bp-0x56c]\n
    unsigned int *v11[2];  // [bp-0x568]\n
    unsigned int v12;  // [bp-0x564]\n
    unsigned int v13;  // [bp-0x560]\n
    unsigned int v14;  // [bp-0x55c]\n
    void* v15;  // [bp-0x558]\n
    unsigned int v16;  // [bp-0x554]\n
    unsigned int v17;  // [bp-0x550]\n
    void* v18;  // [bp-0x54c], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x548]\n
    char v20;  // [bp-0x544]\n
    char v21;  // [bp-0x4bc]\n
    void* v22;  // [bp-0x430], Other Possible Types: unsigned int\n
    void* v23;  // [bp-0x42c], Other Possible Types: unsigned int\n
    char v24[2];  // [bp-0x428]\n
    void* v25;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v26;  // [bp-0x24]\n
    unsigned int v27[3];  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v28[3];  // [bp-0x1c]\n
    unsigned int v29;  // [bp-0x18]\n
    struct_1 *v30;  // [bp-0x14]\n
    void* v31;  // [bp-0x10]\n
    unsigned int v32;  // [bp-0x8]\n
    unsigned int v34;  // ebx\n
    struct_3 *v35;  // ebx\n
    struct_0 *v36;  // ebx\n
    struct_0 *v37;  // ebx\n
    struct_0 *v38;  // ebx\n
    struct_0 *v39;  // ebx\n
    struct_0 *v40;  // ebx\n
    struct_0 *v41;  // ebx\n
    struct_0 *v42;  // ebx\n
\n
    v32 = v34;\n
    v3 = &\"@\";\n
    v31 = 0;\n
    v33 = 0x4347c000;\n
    v30 = v33;\n
    cgc_fxlat(cgc_stdin, \"393748225\");\n
    v35 = v3;\n
    cgc_fxlat(*(&v35->padding_-2b85[315]), &v35[1].padding_-2b85[333]);\n
    v29 = v30->field_2;\n
    cgc_fbuffered(*(&v3->padding_-2b85[315]), 1);\n
    cgc_printf(&v3[1].padding_-2b85[323]);\n
    cgc_printf(&v3[1].padding_-2b85[310]);\n
    cgc_fflush(*(&v3->padding_-2b85[315]));\n
    v4[0] = operator new(12);\n
    Playlist::__ctor__(v4);\n
    v28[0] = v4;\n
    v27[0] = v28;\n
    v5 = operator new[](120);\n
    v6 = v5 + 120;\n
    v7 = v5;\n
    do\n
    {\n
        v1[0] = v7;\n
        Playlist::__ctor__(v1);\n
        v2 = v1 + 1;\n
        v7 = v2;\n
    } while (v2 != v6);\n
    v26 = v5;\n
    v25 = 0;\n
    v23 = 0;\n
    v22 = 0;\n
    while (true)\n
    {\n
        do\n
        {\n
            if (!((v23 ^ 255) & 1))\n
            {\n
LABEL_409151:\n
                cgc_printf(&v3->padding_-2b85[9711]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                return 0;\n
            }\n
            cgc_printf(&v3[1].padding_-2b85[307]);\n
            if (v27 == v28)\n
            {\n
                cgc_printf(&v3[1].padding_-2b85[295]);\n
                cgc_printf(&v3[1].padding_-2b85[271]);\n
                cgc_printf(&v3[1].padding_-2b85[242]);\n
            }\n
            else\n
            {\n
                cgc_printf(&v3[1].padding_-2b85[222]);\n
                cgc_printf(&v3[1].padding_-2b85[197]);\n
                cgc_printf(&v3[1].padding_-2b85[167]);\n
            }\n
            cgc_printf(&v3[1].padding_-2b85[140]);\n
            cgc_printf(&v3[1].padding_-2b85[125]);\n
            cgc_printf(&v3[1].padding_-2b85[90]);\n
            cgc_printf(&v3[1].padding_-2b85[67]);\n
            cgc_printf(&v3[1].padding_-2b85[38]);\n
            cgc_printf(&v3[1].padding_-2b85[4]);\n
            cgc_printf(&v3->padding_-2b85[10818]);\n
            cgc_printf(&v3->padding_-2b85[10784]);\n
            if (v27 != v28)\n
            {\n
                cgc_printf(&v3->padding_-2b85[10695]);\n
                cgc_printf(&v3->padding_-2b85[10664]);\n
            }\n
            else\n
            {\n
                cgc_printf(&v3->padding_-2b85[10767]);\n
                cgc_printf(&v3->padding_-2b85[10746]);\n
                cgc_printf(&v3->padding_-2b85[10725]);\n
                cgc_printf(&v3->padding_-2b85[10705]);\n
            }\n
            cgc_printf(&v3->padding_-2b85[10654]);\n
            cgc_fflush(*(&v3->padding_-2b85[315]));\n
            v36 = v3;\n
            if (cgc_freaduntil(v24, 0x400, v36[1].padding_-2b85[309], *(&v36->padding_-2b85[319])) < 0)\n
                goto LABEL_409151;\n
            if (!v24[0])\n
                continue;\n
            v22 = cgc_strtol(v24, NULL, 10);\n
            if (v22 == 1 && v27 == v28)\n
            {\n
                if ((RecvNewSong(&v21) & 1) && (Playlist::AddSong(v28, &v21) & 1))\n
                {\n
                    cgc_printf(&v3->padding_-2b85[10647]);\n
                    goto LABEL_4083a6;\n
                }\n
                cgc_printf(&v3->padding_-2b85[10624]);\n
LABEL_4083a6:\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_40914c;\n
            }\n
            if (v22 == 2 && v27 == v28)\n
            {\n
                cgc_printf(&v3->padding_-2b85[10593]);\n
                cgc_printf(&v3->padding_-2b85[10555]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                v37 = v3;\n
                if (cgc_freaduntil(v24, 0x400, v37[1].padding_-2b85[309], *(&v37->padding_-2b85[319])) <= 0)\n
                    continue;\n
                v19 = cgc_strtol(v24, NULL, 10);\n
                if (!(Playlist::RemoveSong(v28, v19, &v20) & 1))\n
                {\n
                    cgc_printf(&v3->padding_-2b85[10509]);\n
                }\n
                else\n
                {\n
                    for (v18 = 0; v18 < v25; v18 += 1)\n
                    {\n
                        Playlist::RemoveSong(v26 + v18 * 12, v19, NULL);\n
                    }\n
                    v0 = *(&v20);\n
                    if (v0)\n
                        operator delete(v0);\n
                    cgc_printf(&v3->padding_-2b85[10549]);\n
                }\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 3 && v27 == v28)\n
            {\n
                cgc_printf(&v3->padding_-2b85[10473]);\n
                cgc_printf(&v3->padding_-2b85[10555]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                v38 = v3;\n
                if (cgc_freaduntil(v24, 0x400, v38[1].padding_-2b85[309], *(&v38->padding_-2b85[319])) <= 0)\n
                    continue;\n
                v17 = cgc_strtol(v24, NULL, 10);\n
                if (v17 < v25)\n
                    v27 = v26 + v17 * 12;\n
                else\n
                    cgc_printf(&v3->padding_-2b85[10453]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 1)\n
            {\n
                cgc_printf(&v3->padding_-2b85[10436]);\n
                cgc_printf(&v3->padding_-2b85[10555]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                v39 = v3;\n
                if (cgc_freaduntil(v24, 0x400, v39[1].padding_-2b85[309], *(&v39->padding_-2b85[319])) <= 0)\n
                    continue;\n
                v16 = cgc_strtol(v24, NULL, 10);\n
                v15 = Playlist::GetSong(v28, v16);\n
                v14 = Playlist::GetSong(v27, v16);\n
                if (v15 && !v14 && (Playlist::AddSong(v27, v15) & 1))\n
                {\n
                    cgc_printf(&v3->padding_-2b85[10402]);\n
                    goto LABEL_40883e;\n
                }\n
                cgc_printf(&v3->padding_-2b85[10378]);\n
LABEL_40883e:\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 2)\n
            {\n
                cgc_printf(&v3->padding_-2b85[10346]);\n
                cgc_printf(&v3->padding_-2b85[10555]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                v40 = v3;\n
                if (cgc_freaduntil(v24, 0x400, v40[1].padding_-2b85[309], *(&v40->padding_-2b85[319])) <= 0)\n
                    continue;\n
                v13 = cgc_strtol(v24, NULL, 10);\n
                if (!(Playlist::RemoveSong(v27, v13, NULL) & 1))\n
                    cgc_printf(&v3->padding_-2b85[10266]);\n
                else\n
                    cgc_printf(&v3->padding_-2b85[10307]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 3)\n
            {\n
                v27 = v28;\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 4)\n
            {\n
                Playlist::ListAllSongs(v27);\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 5)\n
            {\n
                Playlist::SortById(v27);\n
                cgc_printf(&v3->padding_-2b85[10229]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 6)\n
            {\n
                Playlist::SortByTitle(v27);\n
                cgc_printf(&v3->padding_-2b85[10192]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 7)\n
            {\n
                Playlist::SortByArtistAndAlbum(v27);\n
                cgc_printf(&v3->padding_-2b85[10152]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 8)\n
            {\n
                Playlist::SortByArtistAndTitle(v27);\n
                cgc_printf(&v3->padding_-2b85[10101]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 9)\n
            {\n
                Playlist::SortByAlbum(v27);\n
                cgc_printf(&v3->padding_-2b85[10045]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 10)\n
            {\n
                Playlist::SortByAlbumAndTitle(v27);\n
                cgc_printf(&v3->padding_-2b85[10010]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 11)\n
            {\n
                cgc_printf(&v3->padding_-2b85[9960]);\n
                cgc_printf(&v3->padding_-2b85[10555]);\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                v41 = v3;\n
                if (cgc_freaduntil(v24, 0x400, v41[1].padding_-2b85[309], *(&v41->padding_-2b85[319])) <= 0)\n
                    continue;\n
                v12 = cgc_strtol(v24, NULL, 10);\n
                v11 = Playlist::GetSong(v27, v12);\n
                if (v11)\n
                {\n
                    cgc_printf(&v3->padding_-2b85[9936]);\n
                    MgcFile::PrintFrameData(*(v11));\n
                    v10 = 0x1000;\n
                    MgcFile::Remix(*(v11), v30, &v29, v10);\n
                    cgc_printf(&v3->padding_-2b85[9914]);\n
                    cgc_printf(&v3->padding_-2b85[9887]);\n
                    MgcFile::PrintFrameData(*(v11));\n
                }\n
                else\n
                {\n
                    cgc_printf(&v3->padding_-2b85[9861]);\n
                }\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 == 12 && v27 == v28)\n
            {\n
                if (v25 < 10)\n
                {\n
                    Playlist::ClearPlaylist(v26 + v25 * 12, 1);\n
                    v25 += 1;\n
                    cgc_printf(&v3->padding_-2b85[9838]);\n
                }\n
                else\n
                {\n
                    cgc_printf(&v3->padding_-2b85[9801]);\n
                }\n
                cgc_fflush(*(&v3->padding_-2b85[315]));\n
                goto LABEL_4090f2;\n
            }\n
            if (v22 != 13)\n
            {\n
LABEL_40901c:\n
                if (v22 == 14 && v27 == v28)\n
                {\n
                    for (v8 = 0; v8 < v25; v8 += 1)\n
                    {\n
                        PrintPlaylist(v26 + v8 * 12, v8);\n
                    }\n
                    goto LABEL_4090f2;\n
                }\n
                if (v22 == 15 && v27 == v28)\n
                {\n
                    v23 = 1;\n
                    goto LABEL_4090f2;\n
                }\n
                if (v22 == 12)\n
                {\n
                    Playlist::ListAllSongs(v28);\n
                }\n
                else if (v22 == 13)\n
                {\n
                    v23 = 1;\n
                }\n
LABEL_4090f2:\n
                goto LABEL_40914c;\n
            }\n
            if (!(v27 == v28))\n
                goto LABEL_40901c;\n
            cgc_printf(&v3->padding_-2b85[9764]);\n
            cgc_printf(&v3->padding_-2b85[10555]);\n
            cgc_fflush(*(&v3->padding_-2b85[315]));\n
            v42 = v3;\n
        } while (cgc_freaduntil(v24, 0x400, v42[1].padding_-2b85[309], *(&v42->padding_-2b85[319])) <= 0);\n
        v9 = cgc_strtol(v24, NULL, 10);\n
        if (v9 >= v25)\n
        {\n
            cgc_printf(&v3->padding_-2b85[10453]);\n
        }\n
        else\n
        {\n
            Playlist::ClearPlaylist(v26 + v9 * 12, 1);\n
            if (v9 < v25 - 1)\n
                cgc_memmove(v26 + v9 * 12, v26 + (v9 + 1) * 12, (v25 - (v9 + 1)) * 12);\n
            v25 -= 1;\n
            Playlist::ClearPlaylist(v26 + v25 * 12, 0);\n
            cgc_printf(&v3->padding_-2b85[9736]);\n
        }\n
        cgc_fflush(*(&v3->padding_-2b85[315]));\n
        goto LABEL_4090f2;\n
LABEL_40914c:\n
    }\n
}\n
", "4231568:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:_Znwj": null, "5242884:memcpy": null, "5242888:__libc_start_main": null, "5242892:cgc_receive": null, "5242896:_Znaj": null, "5242900:cgc_allocate": null, "5242904:cgc__terminate": null, "5242908:_ZdlPv": null, "5242912:cgc_deallocate": null, "5242916:_ZdaPv": null, "5242920:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}