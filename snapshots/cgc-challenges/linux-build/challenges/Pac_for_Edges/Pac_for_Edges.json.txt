{"4202496:_init": "extern struct_0 *g_409134;\n
\n
int _init()\n
{\n
    if (g_409134)\n
    {\n
        g_409134();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_fabs": "// attributes: PLT stub\n
int cgc_fabs()\n
{\n
    ::libc.so.0::cgc_fabs();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202608:cgc_atan2": "// attributes: PLT stub\n
int cgc_atan2()\n
{\n
    ::libc.so.0::cgc_atan2();\n
    return;\n
}\n
", "4202624:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202640:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202672:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202688:cgc_sqrt": "// attributes: PLT stub\n
int cgc_sqrt()\n
{\n
    ::libc.so.0::cgc_sqrt();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28683;\n
    v6 = v5 + 801;\n
    v7 = v5 + 801;\n
    if (v7 == v6)\n
        return v5 + 801;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28619;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 801;\n
    v9 = (v6 + 801 - (v6 + 801) >> 31) + (801 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409130;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409130)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "extern unsigned int g_heap;\n
\n
int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, ecx<4>, edi<4>, 0x0<32>))\n
        return 0;\n
    v5 = v1 * a0;\n
    v6 = cgc_malloc_alloc(&g_heap);\n
    if (v6)\n
    {\n
        v0 = v5;\n
        cgc_memset(v6, 0);\n
        return v6;\n
    }\n
    return 0;\n
}\n
", "4203131:sub_40227b": null, "4203136:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 1;\n
}\n
", "4203172:sub_4022a4": null, "4203184:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 2;\n
}\n
", "4203220:sub_4022d4": null, "4203232:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 16;\n
}\n
", "4203268:sub_402304": null, "4203280:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 14;\n
}\n
", "4203316:sub_402334": null, "4203328:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 12;\n
}\n
", "4203364:sub_402364": null, "4203376:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 4;\n
}\n
", "4203412:sub_402394": null, "4203424:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 8;\n
}\n
", "4203460:sub_4023c4": null, "4203472:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 64;\n
}\n
", "4203508:sub_4023f4": null, "4203520:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 32;\n
}\n
", "4203556:sub_402424": null, "4203568:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8504 + v0] & 4294967168;\n
}\n
", "4203604:sub_402454": null, "4203616:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8504 + v1] & 8))\n
        return (v1 ^ 32) - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8504 + (v1 ^ 32)] & 2) >> 1);\n
    return v1 - 65 < 6 | (((&_GLOBAL_OFFSET_TABLE_)[8504 + v1] & 2) >> 1);\n
}\n
", "4203682:sub_4024a2": null, "4203696:cgc_toupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8504 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203737:sub_4024d9": null, "4203744:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // ecx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = v1 ^ 32;\n
    if (!((&_GLOBAL_OFFSET_TABLE_)[8504 + v1] & 8))\n
        v2 = v1;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8504 + v2] & 2))\n
    {\n
        v4 = v2 - 48;\n
        return v4;\n
    }\n
    v3 = v2 - 65;\n
    v4 = v2 - 55;\n
    if (v3 < 6)\n
        return v4;\n
    v4 = 0;\n
}\n
", "4203814:sub_402526": null, "4203824:cgc_tolower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
\n
    v1 = v0;\n
    if (((&_GLOBAL_OFFSET_TABLE_)[8504 + v1] & 8))\n
        return v1 ^ 32;\n
    return v1;\n
}\n
", "4203865:sub_402559": null, "4203872:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    char v2;  // [bp-0x4]\n
    unsigned int v3;  // [bp+0x4]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v2;\n
    v1 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v3;\n
    cgc__terminate();\n
    cgc_fflush();\n
    return;\n
}\n
", "4203920:cgc_fflush": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fflush(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    struct_0 *v5;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    char *v8;  // edi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // esi\n
    void* v12;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
\n
    v5 = v4;\n
    v6 = v5->field_8;\n
    if (v6 == -1)\n
        return 0;\n
    if (v5->field_4 == 1)\n
    {\n
        v7 = 0;\n
    }\n
    else\n
    {\n
        v8 = v5->field_10;\n
        if (v8)\n
        {\n
            v9 = v5->field_c;\n
            if (v9 != v6)\n
            {\n
                do\n
                {\n
                    *(24 + &v4->field_0 + v6) = v8[*((v5 + v6 + 24))];\n
                    v5 = v4;\n
                    v6 += 1;\n
                } while (v9 != v6);\n
            }\n
        }\n
        v2 = *(v5);\n
        v10 = *((v5 + 8));\n
        v1 = v5 + v10 + 24;\n
        v11 = *((v5 + 12)) - v10;\n
        v12 = 0;\n
        while (true)\n
        {\n
            v13 = v12;\n
            if (v11 <= v12)\n
                break;\n
            v0 = &v3;\n
            v14 = cgc_transmit(v2, v1 + v12, v11 - v12);\n
            v15 = 0;\n
            if (!v14)\n
                v15 = *(&v3);\n
            v12 = v15 + v13;\n
            if (v14)\n
                break;\n
        }\n
        v7 = -(v13 < v11);\n
        v5 = v4;\n
    }\n
    *((v5 + 12)) = 0;\n
    *((v5 + 8)) = 0;\n
    return v7;\n
}\n
", "4204053:sub_402615": null, "4204143:sub_40266f": null, "4204144:cgc_fbuffered": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_1 *field_10;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_fbuffered(struct_0 *v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    unsigned int v5;  // edx\n
    struct_0 *v6;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    char *v8;  // edi\n
    unsigned int v9;  // edx\n
    struct_0 *v10;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edi\n
    void* v13;  // esi, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
\n
    v5 = a0;\n
    v6 = v4;\n
    v7 = v6->field_8;\n
    if (v7 == -1)\n
    {\n
        *((v6 + 8)) = -(v5 < 1);\n
        *((v6 + 12)) = 0;\n
        return -(v5 < 1);\n
    }\n
    if (v6->field_4 != 1)\n
    {\n
        v10 = v4;\n
        v8 = v10->field_10;\n
        if (v8)\n
        {\n
            v9 = v10->field_c;\n
            if (v9 != v7)\n
            {\n
                do\n
                {\n
                    *(24 + &v4->field_0 + v7) = v8[*((v10 + v7 + 24))];\n
                    v10 = v4;\n
                    v7 += 1;\n
                } while (v9 != v7);\n
            }\n
        }\n
        v2 = *(v10);\n
        v11 = *((v10 + 8));\n
        v1 = v10 + v11 + 24;\n
        v12 = *((v10 + 12)) - v11;\n
        v13 = 0;\n
        while (v12 > v13)\n
        {\n
            v0 = &v3;\n
            v14 = cgc_transmit(v2, v1 + v13, v12 - v13);\n
            v15 = 0;\n
            if (!v14)\n
                v15 = *(&v3);\n
            v13 += v15;\n
            if (v14)\n
                break;\n
        }\n
    }\n
    v6 = v4;\n
    *((v6 + 12)) = 0;\n
    *((v6 + 8)) = 0;\n
    v5 = a0;\n
}\n
", "4204309:sub_402715": null, "4204376:sub_402758": null, "4204384:cgc_fread": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v5, unsigned int a0, struct_0 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    char v4;  // [bp-0x18]\n
    struct_0 *v6;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ebx\n
    unsigned int v8;  // edi\n
    char *v9;  // ecx\n
    void* v10;  // edx, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    void* v14;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v15;  // eax\n
    char *v17;  // esi\n
    unsigned int v18;  // ebx\n
    char *v19;  // eax\n
    unsigned int v20;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = a1;\n
    if (v6->field_8 == v6->field_c)\n
    {\n
        v6->field_c = 0;\n
        v6->field_8 = 0;\n
        v0 = &v4;\n
        v7 = v6;\n
        if (!cgc_receive(v6->field_0, v6 + 1, 0x400))\n
        {\n
            v8 = *(&v4);\n
            if (v8)\n
            {\n
                v7->field_c = v8;\n
                v9 = v7->field_14;\n
                if (v9)\n
                {\n
                    v10 = 0;\n
                    do\n
                    {\n
                        *(24 + &v7->field_0 + v10) = v9[*(24 + &v7->field_0 + v10)];\n
                        v10 += 1;\n
                    } while (v8 != v10);\n
                }\n
            }\n
        }\n
        v6 = v7;\n
    }\n
    v11 = a0;\n
    v12 = *((v6 + 8));\n
    if (v12 != -1)\n
    {\n
        v13 = *((v6 + 12)) - v12;\n
        if (v13 > v11)\n
            v13 = v11;\n
        v2 = v13;\n
        cgc_memcpy();\n
        v14 = v2;\n
        v15 = *((v6 + 8)) + v14;\n
        *((v6 + 8)) = v15;\n
        if (v15 == *((v6 + 12)))\n
        {\n
            *((v6 + 12)) = 0;\n
            *((v6 + 8)) = 0;\n
        }\n
        if (v14 < v11)\n
            goto LABEL_402860;\n
    }\n
    else\n
    {\n
        v14 = 0;\n
        if (0 < v11)\n
        {\n
            while (true)\n
            {\n
LABEL_402860:\n
                v17 = v5 + v14;\n
                v3 = v14;\n
                v0 = &v2;\n
                if (cgc_receive(*(v6), v17, a0 - v14))\n
                    return -1;\n
                v18 = v2;\n
                if (!v18)\n
                    return -1;\n
                v19 = *((v6 + 20));\n
                if (v19)\n
                {\n
                    v20 = 0;\n
                    do\n
                    {\n
                        v17[v20] = v19[v17[v20]];\n
                        v20 += 1;\n
                    } while (v18 != v20);\n
                }\n
                v14 = v3 + v18;\n
                v6 = a1;\n
                if (v14 >= a0)\n
                    return v14;\n
            }\n
        }\n
    }\n
    return v14;\n
}\n
", "4204621:sub_40284d": null, "4204724:sub_4028b4": null, "4204736:cgc_freaduntil": "int cgc_freaduntil(unsigned int v1, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_25;  // tmp #25\n
    unsigned int v2;  // edi\n
    char *v3;  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // eax\n
\n
    v2 = a0;\n
    v0 = a1;\n
    v3 = 0;\n
    tmp_25 = v2;\n
    v4 = v2 - 1;\n
    if (tmp_25 != 1)\n
    {\n
        while (true)\n
        {\n
            v5 = cgc__getc();\n
            if (v5 == -1)\n
            {\n
                v6 = 1;\n
            }\n
            else\n
            {\n
                v6 = 2;\n
                if (v5 != v0)\n
                {\n
                    *((v1 + v3)) = v5;\n
                    v6 = 0;\n
                }\n
            }\n
            if (v6)\n
                break;\n
            v3 += 1;\n
            if (v4 == v3)\n
                goto LABEL_402937;\n
        }\n
        if (!(v6 == 2))\n
            goto LABEL_40295a;\n
    }\n
LABEL_402937:\n
    if (v3 != v4)\n
    {\n
LABEL_402951:\n
        *((v1 + v3)) = 0;\n
        return v3;\n
    }\n
    while (true)\n
    {\n
        v7 = cgc__getc();\n
        if (v7 == -1)\n
            break;\n
        if (v7 == v0)\n
            goto LABEL_402951;\n
    }\n
LABEL_40295a:\n
    return -1;\n
}\n
", "4204818:sub_402912": null, "4204905:sub_402969": null, "4204912:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_1 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc__getc()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x1d]\n
    char v2;  // [bp-0x1c]\n
    char v3;  // [bp-0x18]\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
    char *v9;  // eax\n
    char *v10;  // edx\n
    void* v11;  // edi, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // eax\n
\n
    v6 = v5;\n
    v7 = v5->field_8;\n
    if (v7 == -1)\n
    {\n
        v0 = &v2;\n
        if (cgc_receive(v5->field_0, &v1, 1))\n
        {\n
            return -1;\n
        }\n
        else if (!*(&v2))\n
        {\n
            return -1;\n
        }\n
        else\n
        {\n
            v9 = v5->field_14;\n
            if (!v9)\n
                return v1;\n
            v1 = v9[v1];\n
        }\n
    }\n
    else\n
    {\n
        if (v7 == v5->field_c)\n
        {\n
            v5->field_c = 0;\n
            v5->field_8 = 0;\n
            v0 = &v3;\n
            v13 = -1;\n
            if (!cgc_receive(v5->field_0, v5 + 1, 0x400))\n
            {\n
                v8 = *(&v3);\n
                v13 = -1;\n
                if (v8)\n
                {\n
                    v6->field_c = v8;\n
                    v10 = v6->field_14;\n
                    if (v10)\n
                    {\n
                        v11 = 0;\n
                        do\n
                        {\n
                            *(24 + &v6->field_0 + v11) = v10[*(24 + &v6->field_0 + v11)];\n
                            v11 += 1;\n
                        } while (v8 != v11);\n
                    }\n
                    v13 = v8;\n
                }\n
            }\n
            if (v13 < 0)\n
                return -1;\n
        }\n
        v14 = v6->field_8;\n
        v6->field_8 = v14 + 1;\n
        return *(24 + &v6->field_0 + v14);\n
    }\n
}\n
", "4205154:sub_402a62": null, "4205168:cgc_free": "extern char g_heap;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = &g_heap;\n
    return malloc_free();\n
}\n
", "4205217:sub_402aa1": null, "4205232:cgc_fwrite": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    struct struct_2 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
int cgc_fwrite(unsigned int v6, unsigned int a0, struct_1 *a1)\n
{\n
    struct_0 *v0;  // [bp-0x434]\n
    int tmp_2;  // tmp #2\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // [bp-0x424]\n
    char *v2;  // [bp-0x420]\n
    unsigned int v3;  // [bp-0x41c]\n
    char v4;  // [bp-0x418]\n
    char v5;  // [bp-0x414]\n
    struct_1 *v7;  // esi\n
    unsigned int v8;  // edx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edi\n
    char *v11;  // esi\n
    unsigned int v12;  // edi\n
    struct_0 *v13;  // eax, Other Possible Types: unsigned int\n
    void* v14;  // edx, Other Possible Types: unsigned int\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // eax\n
    void* v17;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // eax\n
    void* v20;  // ecx, Other Possible Types: unsigned int\n
    char *v21;  // esi\n
    unsigned int v22;  // edi\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // ecx\n
    unsigned int v27;  // edi\n
\n
    v7 = a1;\n
    v8 = a0;\n
    if (v7->field_8 != -1)\n
    {\n
        if (v8 >= 0x400)\n
        {\n
            cgc_fflush(v7);\n
            v8 = a0;\n
        }\n
        else\n
        {\n
            v9 = v7->field_c;\n
            v10 = 0;\n
            if (v9 + v8 >= 0x400)\n
            {\n
                v10 = 0x400 - v9;\n
                cgc_memcpy(&v7[1].padding_4[v9], v6);\n
                v7->field_c = v7->field_c + v10;\n
                cgc_fflush(v7);\n
                v8 = a0;\n
            }\n
            if (v10 < v8)\n
            {\n
                v1 = v10;\n
                v27 = v8 - v10;\n
                cgc_memcpy(&v7[1].padding_4[v7->field_c], v6 + v1);\n
                v7->field_c = v7->field_c + v27;\n
                return a0;\n
            }\n
            return v10;\n
        }\n
    }\n
    v1 = v7->field_0;\n
    v11 = v7->field_10;\n
    v20 = 0;\n
    if (!v11)\n
    {\n
        while (v20 < v8)\n
        {\n
            v22 = v20;\n
            v23 = v6 + v20;\n
            v24 = v8 - v20;\n
            v0 = &v5;\n
            v25 = cgc_transmit(v1, v23, v24);\n
            v26 = 0;\n
            if (!v25)\n
                v26 = *(&v5);\n
            v20 = v26 + v22;\n
            v8 = a0;\n
            if (v25)\n
            {\n
                tmp_2 = v22;\n
                if (tmp_2 < v8)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v2 = v11;\n
        while (v20 < v8)\n
        {\n
            v12 = v8 - v20;\n
            if (v12 >= 0x400)\n
                v12 = 0x400;\n
            v3 = v20;\n
            cgc_memcpy();\n
            if (v12)\n
            {\n
                v13 = 0;\n
                do\n
                {\n
                    (&v5)[v13] = v11[(&v5)[v13]];\n
                    v13 += 1;\n
                } while (v12 != v13);\n
            }\n
            v14 = 0;\n
            do\n
            {\n
                v15 = v14;\n
                if (v12 <= v14)\n
                {\n
                    v17 = v12;\n
                    break;\n
                }\n
                v0 = &v4;\n
                v16 = cgc_transmit(v1, &(&v5)[v14], v12 - v14);\n
                v17 = 0;\n
                v18 = 0;\n
                if (!v16)\n
                    v18 = *(&v4);\n
                v14 = v18 + v15;\n
            } while (!v16);\n
            v19 = v3;\n
            v20 = v17 + v19;\n
            tmp_5 = v15;\n
            v8 = a0;\n
            v21 = v2;\n
            if (v12 > tmp_5)\n
            {\n
                if (v19 < v8)\n
                    return -1;\n
                break;\n
            }\n
        }\n
    }\n
    return v8;\n
}\n
", "4205323:sub_402b0b": null, "4205448:sub_402b88": null, "4205643:sub_402c4b": null, "4205731:sub_402ca3": null, "4205744:cgc_fxlat": "int cgc_fxlat(unsigned int v1[6], char *a0)\n
{\n
    char v0[256];  // [bp-0x18]\n
    char *v2;  // esi\n
    unsigned int v3[6];  // edi\n
    char v4[256];  // eax, Other Possible Types: unsigned int\n
    char *v6;  // esi, Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ebx\n
    char v15;  // al\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v7 = v3[4];\n
    if (!v2)\n
    {\n
        v4 = cgc_free(v7);\n
        v3[4] = 0;\n
        v3[5] = 0;\n
        return v4;\n
    }\n
    *(&v0[0]) = cgc_realloc(v7);\n
    v3[4] = v0;\n
    v3[5] = cgc_realloc(v3[5], 0x100);\n
    *(&v7) = *(v2);\n
    if (!*(v2))\n
    {\n
        v8 = 826981510;\n
    }\n
    else\n
    {\n
        v6 = v2 + 1;\n
        v8 = 826981510;\n
        do\n
        {\n
            v8 = __ROL__(v8 + v8 * 36 ^ v7, 13);\n
            v7 = *(v6);\n
            v6 += 1;\n
        } while (v7);\n
    }\n
    v9 = 0;\n
    do\n
    {\n
        v0[v9] = v9;\n
        v9 += 1;\n
    } while (v9 != 0x100);\n
    v10 = 255;\n
    while (true)\n
    {\n
        v11 = v8;\n
        v12 = v8 * 3;\n
        v13 = (0 CONCAT v11) /m v10 >> 32;\n
        v8 = v12 / 0x200000 ^ __ROL__(v12, 13);\n
        v14 = v0;\n
        v15 = *((v14 + v10));\n
        *((v14 + v10)) = *((v14 + v13));\n
        *((v14 + v13)) = v15;\n
        v10 -= 1;\n
    }\n
}\n
", "4206025:sub_402dc9": null, "4206032:cgc_malloc": "extern char g_heap;\n
\n
int cgc_malloc(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = &g_heap;\n
    return cgc_malloc_alloc();\n
}\n
", "4206081:sub_402e01": null, "4206096:cgc_malloc_alloc": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    struct struct_2 *field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_4 {\n
    struct struct_3 *field_0;\n
    char padding_4[516];\n
    struct struct_2 *field_208;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_3 *field_c;\n
} struct_3;\n
\n
typedef struct struct_5 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_5;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_6 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
} struct_6;\n
\n
int cgc_malloc_alloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2[262142];  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    struct_2 *v4;  // [bp-0x20]\n
    char v5;  // [bp-0x1c]\n
    char v6;  // [bp-0x18]\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // edi\n
    struct_2 *v11;  // esi\n
    struct_2 *v12;  // edx\n
    unsigned int v13;  // esi\n
    struct_3 *v14;  // edi, Other Possible Types: unsigned int, struct_2 *\n
    struct_4 *v15;  // esi, Other Possible Types: unsigned int\n
    struct_3 *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17[262142];  // esi, Other Possible Types: unsigned int\n
    struct_4 *v18;  // edx, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20[262142];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    struct_5 *v22;  // eax\n
    unsigned int v23;  // ecx\n
    struct_0 *v24;  // ecx\n
    struct_1 *v25;  // eax\n
    unsigned int v26;  // edx\n
    struct_0 *v27;  // ecx\n
    unsigned int v28;  // esi\n
    unsigned int v29;  // ecx\n
    struct_6 *v30;  // eax\n
    struct_4 *v31;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v32;  // edx, Other Possible Types: unsigned int\n
    unsigned int v33;  // esi\n
    struct_0 *v34;  // ecx\n
\n
    v8 = a0;\n
    if (v8 < 0)\n
        return 0;\n
    v9 = v8 + 3 & -0x4;\n
    if (v9 && v9 > 15)\n
    {\n
        if (v9 > 131071)\n
        {\n
            v13 = v9 + 4103 & -0x1000;\n
            v0 = &v6;\n
            if (cgc_allocate(v13, 0))\n
                return 0;\n
            v14 = *(&v6);\n
            v14->field_0 = v7;\n
            v14->field_4 = v13;\n
            goto LABEL_4030e8;\n
        }\n
        v11 = v9 + 23;\n
        v12 = v11 & -0x10;\n
        if (!(v11 & -0x10))\n
        {\n
            v15 = -1;\n
        }\n
        else if (v12 <= 0x200)\n
        {\n
            v15 = (v11 >> 4) + 2;\n
        }\n
        else if (v12 <= 0x1200)\n
        {\n
            v15 = (v12 + 32 >> 7) + 34;\n
        }\n
        else\n
        {\n
            v15 = 130;\n
            if (v12 <= 0x20000)\n
                v15 = (v12 + 288 >> 11) + 66;\n
        }\n
        v14 = 0;\n
        v4 = v12;\n
        if (v15 <= 130)\n
        {\n
            do\n
            {\n
                v16 = *((v7 + v15 * 4));\n
                if (v16)\n
                {\n
                    do\n
                    {\n
                        if (*((v16 + 4)) >= v12)\n
                        {\n
                            v14 = v16;\n
                            goto LABEL_402f30;\n
                        }\n
                        v16 = *((v16 + 12));\n
                    } while (v16);\n
                }\n
                v15 += 1;\n
            } while (v15 != 131);\n
            v15 = 131;\n
            if (!(131 == 131))\n
                goto LABEL_403038;\n
            goto LABEL_402f3c;\n
        }\n
LABEL_402f30:\n
        if (!(v15 == 131))\n
            goto LABEL_403038;\n
LABEL_402f3c:\n
        v0 = &v5;\n
        v17 = 0;\n
        v18 = v7;\n
        if (!cgc_allocate(0x200000, 0))\n
        {\n
            v19 = *(&v5);\n
            v20 = v19 + 1048575;\n
            v17 = v20 & -0x100000;\n
            v1 = v19;\n
            v2[0] = v20;\n
            if (v17 > v1)\n
            {\n
                cgc_deallocate(v1);\n
                v20 = v2;\n
            }\n
            v21 = v1 + 0x200000;\n
            v3 = v17 + 0x100000;\n
            v1 = v21 - v3;\n
            v18 = v7;\n
            if (v21 > v3)\n
            {\n
                cgc_deallocate(v3);\n
                v20 = v2;\n
                v18 = v7;\n
            }\n
            *((v18 + (v20 >> 20) + 524)) = 2;\n
        }\n
        if (!v17)\n
            return 0;\n
        v22 = v17 + 19 & -0x10;\n
        v22->field_0 = 0;\n
        v23 = 1048560 + v17 - v22;\n
        *(&v22->field_4) = v23;\n
        *((v17 + 1048560)) = v23;\n
        *((v17 + 1048564)) = 0;\n
        v22->field_4 = v22->field_4 | 1;\n
        v22->field_8 = 0;\n
        v22->field_c = *((v18 + 520));\n
        *((v18 + 520)) = v22;\n
        v24 = v22->field_c;\n
        if (v24)\n
            v24->field_8 = v22;\n
        v14 = *((v18 + 520));\n
        v15 = 130;\n
LABEL_403038:\n
        v25 = *((v14 + 8));\n
        v26 = *((v14 + 4)) & -2;\n
        *((v14 + 4)) = v26;\n
        if (v25)\n
            v25->field_c = *((v14 + 12));\n
        v27 = *((v14 + 12));\n
        if (v27)\n
            v27->field_8 = v25;\n
        if (*((v7 + (v15 << 2))) == v14)\n
            *((v7 + v15 * 4)) = *((v14 + 12));\n
        v28 = v4;\n
        v29 = v26 - v28;\n
        if (v29 >= 33)\n
        {\n
            v30 = v28 + v14;\n
            *((v14 + 4)) = v28;\n
            *((v28 + v14)) = v28;\n
            *((v28 + v14 + 4)) = v29;\n
            *((v26 + v14)) = v29;\n
            if (v29 <= 0x200)\n
            {\n
                v31 = (v29 >> 4) + 2;\n
            }\n
            else if (v29 <= 0x1200)\n
            {\n
                v31 = (v29 - 0x200 >> 7) + 34;\n
            }\n
            else\n
            {\n
                v32 = 130;\n
                if (!(v29 <= 0x20000))\n
                    goto LABEL_4030c7;\n
                v31 = (v29 - 0x1200 >> 11) + 66;\n
            }\n
            v32 = v31;\n
LABEL_4030c7:\n
            v30->field_4 = v30->field_4 | 1;\n
            v30->field_8 = 0;\n
            v33 = v7;\n
            v30->field_c = *((v33 + v32 * 4));\n
            *((v33 + v32 * 4)) = v30;\n
            v34 = v30->field_c;\n
            if (v34)\n
                v34->field_8 = v30;\n
        }\n
LABEL_4030e8:\n
        v10 = v14 + 8;\n
        return v10;\n
    }\n
    v10 = cgc_tiny_alloc();\n
    return v10;\n
}\n
", "4206859:sub_40310b": null, "4206864:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    struct struct_2 *field_1218;\n
    struct struct_2 *field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned short field_0;\n
} struct_2;\n
\n
int cgc_tiny_alloc()\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x30]\n
    struct_0 *v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    char v7;  // [bp-0x18]\n
    unsigned int v9;  // edx\n
    struct_0 *v10;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v11;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v12;  // esi, Other Possible Types: unsigned int\n
    void* v13;  // edx, Other Possible Types: unsigned int\n
    unsigned int v14;  // eax\n
    unsigned short *v15;  // esi\n
    unsigned int v16;  // edx\n
    unsigned short v17[2];  // eax, Other Possible Types: unsigned int\n
    unsigned short v18;  // bx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // edx\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // eax\n
\n
    if (v9 <= 15)\n
    {\n
        v10 = v9 / 4 - 1;\n
    }\n
    else if (v9 <= 0x200)\n
    {\n
        v10 = (v9 >> 4) + 2;\n
    }\n
    else if (v9 <= 0x1200)\n
    {\n
        v10 = (v9 - 0x200 >> 7) + 34;\n
    }\n
    else\n
    {\n
        v10 = 130;\n
        if (v9 <= 0x20000)\n
            v10 = (v9 - 0x1200 >> 11) + 66;\n
    }\n
    v12 = *((v11 + v10 * 4));\n
    if (v12)\n
    {\n
        *((v11 + v10 * 4)) = *(v12);\n
        return *((v11 + v10 * 4));\n
    }\n
    v5 = v9;\n
    v17 = *((v11 + v10 * 4 + 4620));\n
    if (!v17)\n
    {\n
        if (!*((v11 + 4632)))\n
        {\n
            v0 = &v7;\n
            v2 = v11;\n
            v11 = v2;\n
            v13 = 0;\n
            if (!cgc_allocate(0x200000, 0))\n
            {\n
                v1 = *(&v7);\n
                v6 = v1 + 1048575;\n
                v13 = v6 & -0x100000;\n
                v3 = v13;\n
                if (v13 > v1)\n
                {\n
                    cgc_deallocate(v1);\n
                    v13 = v3;\n
                    v11 = v2;\n
                }\n
                v4 = v13 + 0x100000;\n
                v14 = v1 + 0x200000;\n
                v1 = v14 - v4;\n
                if (v14 > v4)\n
                {\n
                    cgc_deallocate(v4);\n
                    v13 = v3;\n
                    v11 = v2;\n
                }\n
                *((v11 + (v6 >> 20) + 524)) = 1;\n
            }\n
            *((v11 + 4632)) = v13;\n
            if (!v13)\n
                return 0;\n
            *((v11 + 4636)) = 0;\n
        }\n
        v15 = *((v11 + 4632));\n
        v16 = *((v11 + 4636));\n
        v17 = v16 + v15;\n
        *((v11 + v10 * 4 + 4620)) = v17;\n
        v18 = v5;\n
        *((v16 + v15)) = v18;\n
        *((2 + v16 + v15)) = v18;\n
        v19 = v16 + 0x1000;\n
        *((v11 + 4636)) = v19;\n
        if (v19 == 0x100000)\n
            *((v11 + 4632)) = 0;\n
    }\n
    v20 = *((v17 + 2));\n
    v12 = v20 + v17;\n
    v21 = v5 + v20;\n
    *((v17 + 2)) = v21;\n
    v22 = *(v17);\n
    if (v22 + v21 < 4097)\n
        return v12;\n
    *((v11 + v10 * 4 + 4620)) = 0;\n
}\n
", "4207324:sub_4032dc": null, "4207328:malloc_free": "typedef struct struct_3 {\n
    struct struct_2 *field_-8;\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    struct struct_0 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
int malloc_free(struct struct_0 **v2, struct_3 *a0)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_3 *v3;  // edx\n
    struct struct_0 **v4;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v6;  // eax\n
    unsigned int v7;  // ecx\n
    struct_2 *v8;  // esi, Other Possible Types: unsigned int\n
    struct_2 *v9;  // edx\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // ebx\n
    struct_1 *v12;  // edi\n
    struct_0 *v13;  // eax\n
    unsigned int v14;  // eax\n
    struct_2 *v15;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // ebx\n
    struct_1 *v19;  // eax\n
    struct_0 *v20;  // edi\n
    unsigned int v21;  // esi\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
\n
    v3 = a0;\n
    if (!v3)\n
        return v5;\n
    v4 = v2;\n
    v5 = v3 / 0x100000;\n
    *(&v5) = *((v4 + v5 + 524));\n
    if (*(&v5) == 2)\n
    {\n
        v15 = &v3->field_0;\n
        v6 = *(&v3->field_0);\n
        v8 = v15 - v6;\n
        if (!v6)\n
            v8 = v6;\n
        v9 = v3->field_-4 + v15;\n
        if (v8)\n
        {\n
            v10 = *((v8 + 4));\n
            if ((v10 & 1))\n
            {\n
                v1 = v10 & -2;\n
                if (v1 <= 15)\n
                {\n
                    v11 = v10 / 4 - 1;\n
                }\n
                else\n
                {\n
                    if (v1 <= 0x200)\n
                    {\n
                        v11 = (v10 >> 4) + 2;\n
                    }\n
                    else\n
                    {\n
                        if (v1 <= 0x1200)\n
                        {\n
                            v11 = (v1 - 0x200 >> 7) + 34;\n
                        }\n
                        else\n
                        {\n
                            v11 = 130;\n
                            if (v1 <= 0x20000)\n
                                v11 = (v1 - 0x1200 >> 11) + 66;\n
                        }\n
                    }\n
                }\n
                *((v8 + 4)) = v1;\n
                v12 = *((v8 + 8));\n
                if (v12)\n
                    v12->field_c = *((v8 + 12));\n
                v13 = *((v8 + 12));\n
                if (v13)\n
                    v13->field_8 = v12;\n
                if (v2[v11] == v8)\n
                    v2[v11] = *((v8 + 12));\n
                v14 = v1 + v15->field_4;\n
                *((v8 + 4)) = v14;\n
                v9->field_0 = v14;\n
                v15 = v8;\n
                v4 = v2;\n
            }\n
        }\n
        v16 = v9->field_4;\n
        if ((v16 & 1))\n
        {\n
            v17 = v16 & -2;\n
            if (v17 <= 15)\n
            {\n
                v18 = v16 / 4 - 1;\n
            }\n
            else\n
            {\n
                if (v17 <= 0x200)\n
                {\n
                    v18 = (v16 >> 4) + 2;\n
                }\n
                else\n
                {\n
                    if (v17 <= 0x1200)\n
                    {\n
                        v18 = (v17 - 0x200 >> 7) + 34;\n
                    }\n
                    else\n
                    {\n
                        v18 = 130;\n
                        if (v17 <= 0x20000)\n
                            v18 = (v17 - 0x1200 >> 11) + 66;\n
                    }\n
                }\n
            }\n
            v9->field_4 = v17;\n
            v19 = v9->field_8;\n
            if (v19)\n
                v19->field_c = v9->field_c;\n
            v20 = v9->field_c;\n
            if (v20)\n
                v20->field_8 = v19;\n
            v4 = v2;\n
            if (*((v4 + (v18 << 2))) == v9)\n
                *((v4 + v18 * 4)) = v9->field_c;\n
            v21 = v17 + *((v15 + 4));\n
            *((v15 + 4)) = v21;\n
            *((v15 + v21)) = v21;\n
        }\n
        v22 = *((v15 + 4));\n
        if (v22 <= 15)\n
        {\n
            v23 = v22 / 4 - 1;\n
        }\n
        else\n
        {\n
            if (v22 <= 0x200)\n
            {\n
                v23 = (v22 >> 4) + 2;\n
            }\n
            else\n
            {\n
                if (v22 <= 0x1200)\n
                {\n
                    v23 = (v22 - 0x200 >> 7) + 34;\n
                }\n
                else\n
                {\n
                    v23 = 130;\n
                    if (v22 <= 0x20000)\n
                        v23 = (v22 - 0x1200 >> 11) + 66;\n
                }\n
            }\n
        }\n
        *((v15 + 4)) = v22 | 1;\n
        *((v15 + 8)) = 0;\n
        *((v15 + 12)) = *((v4 + v23 * 4));\n
        *((v4 + v23 * 4)) = v15;\n
        v5 = *((v15 + 12));\n
        if (!v5)\n
            return *((v15 + 12));\n
        *((v5 + 8)) = v15;\n
    }\n
    else if (*(&v5) == 1)\n
    {\n
        v7 = (*((v3 & -0x1000)) <= 15 ? (*((v3 & -0x1000)) <= 0x200 ? (*((v3 & -0x1000)) <= 0x1200 ? (*((v3 & -0x1000)) - 0x1200 >> 11) + 66 : (*((v3 & -0x1000)) - 0x200 >> 7) + 34) : (*((v3 & -0x1000)) >> 4) + 2) : *((v3 & -0x1000)) / 4 - 1);\n
        v5 = v4[v7];\n
        v3->field_-8 = v5;\n
        v4[v7] = &v3;\n
        return v4[v7];\n
    }\n
    else if (*(&v5))\n
    {\n
        return v5;\n
    }\n
    else\n
    {\n
        v0 = v3->field_-4;\n
        v5 = cgc_deallocate(&v3->field_0);\n
        return v5;\n
    }\n
}\n
", "4207974:sub_403566": null, "4207984:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v0, struct_0 *a0)\n
{\n
    struct_0 *v1;  // ecx\n
    char v2;  // dl\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = *((v0 + (v1 >> 20) + 524));\n
    if (!(v2 & 253))\n
        return *(&v1->field_0) - 8;\n
    v3 = 0;\n
    if (v2 != 1)\n
        return v3;\n
    v3 = *((v1 & -0x1000));\n
}\n
", "4208041:sub_4035a9": null, "4208048:cgc_malloc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-4;\n
    unsigned short field_0;\n
} struct_0;\n
\n
int cgc_malloc_realloc(struct struct_0 **v1, struct_0 *a0, unsigned int a1)\n
{\n
    int tmp_7;  // tmp #7\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi\n
    unsigned int v5;  // edi\n
    char v6;  // dl\n
    void* v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    struct_0 *v9;  // edx, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v12;  // ecx, Other Possible Types: unsigned int\n
\n
    v2 = a1;\n
    v3 = 0;\n
    if (v2 < 0)\n
        return 0;\n
    v4 = a0;\n
    v7 = v1;\n
    if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, eax<4>, 0x0<32>, 0x0<32>))\n
    {\n
LABEL_40368a:\n
        malloc_free(v1, a0);\n
        return v3;\n
    }\n
    if (!v4)\n
    {\n
        v3 = cgc_malloc_alloc(v7, v2);\n
        return v3;\n
    }\n
    v5 = v4 / 0x100000;\n
    v6 = *(524 + v7 + v5);\n
    if ((*(524 + v7 + v5) & 253))\n
    {\n
        v7 = 0;\n
        tmp_7 = v6;\n
        v9 = a0;\n
        if (tmp_7 == 1)\n
            v7 = *((v9 & -0x1000));\n
        if (!(v7 < v2))\n
            goto LABEL_403669;\n
    }\n
    else\n
    {\n
        v9 = a0;\n
        if (*((v9 - 4)) - 8 >= v2)\n
        {\n
LABEL_403669:\n
            return v9;\n
        }\n
    }\n
    v8 = cgc_malloc_alloc(v1, v2);\n
    if (!v8)\n
        return 0;\n
    v3 = v8;\n
    v10 = v1;\n
    *(&v7) = *((v10 + v5 + 524));\n
    if (!(*((v10 + v5 + 524)) & 253))\n
    {\n
        v12 = a0;\n
        v11 = *((v12 - 4)) - 8;\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        tmp_7 = v7;\n
        v12 = a0;\n
        if (tmp_7 == 1)\n
            v11 = *((v12 & -0x1000));\n
    }\n
    v0 = v11;\n
    cgc_memcpy(v3, v12);\n
    goto LABEL_40368a;\n
    goto LABEL_40368a;\n
}\n
", "4208284:sub_40369c": null, "4208288:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v1;  // ecx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v3 = v0;\n
    while (true)\n
    {\n
        if (*(v3) == a0)\n
            return v3;\n
        v3 += 1;\n
        tmp_5 = v1;\n
        v1 -= 1;\n
        if (tmp_5 == 1)\n
            return 0;\n
    }\n
}\n
", "4208346:sub_4036da": null, "4208352:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebx\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v3 != v4)\n
                return v3 - v4;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4208417:sub_403721": null, "4208432:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4208485:sub_403765": null, "4208496:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    unsigned int v1;  // ecx\n
    char *v2;  // edx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 > v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        do\n
        {\n
            *((v3 + v1 - 1)) = v2[1 + v1];\n
            tmp_4 = v1;\n
            v1 -= 1;\n
        } while (tmp_4 != 1);\n
    }\n
    else if (!v1)\n
    {\n
        return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
}\n
", "4208581:sub_4037c5": null, "4208592:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4208640:cgc_printf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_printf(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char v3;  // [bp+0x8]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v1 = &v3;\n
    v4 = cgc_stdout->field_8;\n
    if (v4 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v5 = cgc__vsfprintf(cgc_stdout);\n
    if (v4 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4208745:sub_403869": null, "4208752:cgc_vprintf": "extern struct_0 *cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // eax\n
\n
    v2 = cgc_stdout->field_8;\n
    if (v2 == -1)\n
        cgc_stdout->field_8 = 0;\n
    v0 = 0;\n
    v3 = cgc__vsfprintf(cgc_stdout);\n
    if (v2 == -1)\n
    {\n
        cgc_fflush(cgc_stdout);\n
        cgc_stdout->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4208853:sub_4038d5": null, "4208864:cgc_fprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_fprintf(struct_0 *v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char v3;  // [bp+0xc]\n
    struct_0 *v4;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    struct_0 *v7;  // edi\n
\n
    v4 = v2;\n
    v1 = &v3;\n
    v5 = v4->field_8;\n
    if (v5 == -1)\n
        v4->field_8 = 0;\n
    v0 = 0;\n
    v6 = cgc__vsfprintf(v4);\n
    if (v5 == -1)\n
    {\n
        v7 = v2;\n
        cgc_fflush(v7);\n
        v7->field_8 = -1;\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4208967:sub_403947": null, "4208976:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_vfprintf(struct_0 *v1, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x1c]\n
    struct_0 *v2;  // eax\n
    unsigned int v3;  // edi\n
    unsigned int v4;  // eax\n
    struct_0 *v5;  // edi\n
\n
    v2 = v1;\n
    v3 = v2->field_8;\n
    if (v3 == -1)\n
        v2->field_8 = 0;\n
    v0 = 0;\n
    v4 = cgc__vsfprintf(v2);\n
    if (v3 == -1)\n
    {\n
        v5 = v1;\n
        cgc_fflush(v5);\n
        v5->field_8 = -1;\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4209075:sub_4039b3": null, "4209088:cgc_sprintf": "int cgc_sprintf(unsigned int v3, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x18]\n
    char v4;  // [bp+0xc]\n
\n
    v2 = &v4;\n
    v1 = v3;\n
    v0 = 0;\n
    return cgc__vsfprintf();\n
}\n
", "4209142:sub_4039f6": null, "4209152:cgc_vsprintf": "int cgc_vsprintf(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
\n
    v1 = v2;\n
    v0 = 0;\n
    return cgc__vsfprintf();\n
}\n
", "4209202:sub_403a32": null, "4209216:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf()\n
{\n
    unsigned int v10;  // [bp-0x10]\n
    unsigned int v11;  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // [bp+0x4]\n
    char v15;  // [bp+0x8]\n
    char v17;  // [bp+0xc], Other Possible Types: unsigned int\n
    unsigned int v18;  // [bp+0x10]\n
    char v20;  // [bp+0x1c], Other Possible Types: unsigned int\n
    unsigned int v21;  // [bp+0x20]\n
    unsigned int v29;  // [bp+0x10000c]\n
    unsigned int v30;  // [bp+0x100010]\n
    unsigned int v39;  // eax\n
    unsigned int v44;  // eax\n
    unsigned int v49;  // esi\n
    char v54;  // cl\n
    unsigned int v55;  // cc_op\n
    unsigned int v56;  // cc_dep1\n
    unsigned int v57;  // cc_dep2\n
    unsigned int v58;  // edi\n
    unsigned int v65;  // cc_dep1\n
    unsigned int v66;  // cc_dep2\n
    unsigned int v67;  // edx\n
    char v70;  // ecx\n
    unsigned int v74;  // esi\n
    unsigned int v76;  // eax\n
\n
    v39 = *(&v20);\n
    v20 = v39 + 4;\n
    v10 = *(v39);\n
    v44 = cgc_strlen();\n
    if (v49 >= 2147483647)\n
    {\n
        v54 = 1;\n
        v55 = 3;\n
        v56 = v49;\n
        v57 = v44;\n
        v74 = v49 + v44;\n
    }\n
    else\n
    {\n
        v18 = v10;\n
        v58 = 2147483647 - v49;\n
        v21 = v44;\n
        if (v58 > v44)\n
            v58 = v44;\n
        v67 = v29;\n
        if (v67)\n
        {\n
            v12 = v67;\n
            v11 = v58;\n
            v10 = v18;\n
            cgc_fwrite(v14, *(&v15), v17);\n
            v67 = v29;\n
        }\n
        v76 = v30;\n
        if (v76)\n
        {\n
            v12 = v58;\n
            v11 = v18;\n
            v10 = v30 + v49;\n
            cgc_memcpy(v14, *(&v15), *(&v17));\n
            v76 = v30;\n
            v67 = v29;\n
        }\n
        v70 = 1;\n
        v65 = v49;\n
        v66 = v21;\n
        v74 = v49 + v21;\n
    }\n
}\n
", "4209277:sub_403a7d": null, "4209398:sub_403af6": null, "4210880:cgc_realloc": "extern struct_0 *g_heap;\n
\n
int cgc_realloc(void* v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4210932:sub_4040f4": null, "4210944:cgc_strcasecmp": "int cgc_strcasecmp(char v1[2], char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    char v3[2];  // esi, Other Possible Types: unsigned int\n
    unsigned int v4;  // al, Other Possible Types: char\n
    unsigned int v5;  // eax\n
\n
    v2 = a0;\n
    v3 = v1;\n
    v4 = v3[0];\n
    if (!v3[0])\n
        return v1[0] - *(a0);\n
    while (true)\n
    {\n
        if (!*(v2))\n
            return *(v3) - *(v2);\n
        v5 = cgc_tolower(v4);\n
        v0 = v5;\n
        if (v0 != cgc_tolower(*(v2)))\n
            return *(v3) - *(v2);\n
        v2 += 1;\n
        v4 = *((v3 + 1));\n
        v3 += 1;\n
        if (!v4)\n
            return *(v3) - *(v2);\n
    }\n
}\n
", "4211059:sub_404173": null, "4211072:cgc_strcasestr": "int cgc_strcasestr(char v1[2], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    int tmp_7;  // tmp #7\n
    char v2[2];  // esi, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (!v2[0])\n
        return 0;\n
    while (true)\n
    {\n
        v0 = cgc_strlen();\n
        if (!cgc_strncasecmp(v2, a0))\n
            return v2;\n
        tmp_7 = *((v2 + 1));\n
        v2 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4211179:sub_4041eb": null, "4211184:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // bl, Other Possible Types: char\n
    void* v4;  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v2);\n
    v4 = 0;\n
    if (*(v2))\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == v1)\n
                return &v2[v4];\n
            v3 = v2[1 + v4];\n
            v4 += 1;\n
        } while (v3);\n
    }\n
    v5 = (!v1 ? 0 : &v2[v4]);\n
    return v5;\n
}\n
", "4211256:sub_404238": null, "4211264:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // al\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(v2) - *(a0);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return v4 - *(v1);\n
}\n
", "4211331:sub_404283": null, "4211344:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    char v4;  // dl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v1);\n
    v5 = v2;\n
    if (*(v1))\n
    {\n
        v3 = v1 + 1;\n
        v5 = v2;\n
        do\n
        {\n
            *(v5) = v4;\n
            v5 += 1;\n
            v4 = *(v3);\n
            v3 += 1;\n
        } while (v4);\n
    }\n
    *(v5) = 0;\n
    return v0;\n
}\n
", "4211400:sub_4042c8": null, "4211408:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen();\n
    v2 = cgc_malloc(v1 + 1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    v1[v2] = 0;\n
    return v2;\n
}\n
", "4211499:sub_40432b": null, "4211504:cgc_strlen": "int cgc_strlen(char *v0)\n
{\n
    char *v1;  // ecx\n
    void* v2;  // edx, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char v4;  // cc_dep1\n
\n
    v1 = v0;\n
    if (!*(v1))\n
        return 0;\n
    v2 = 0;\n
    do\n
    {\n
        v3 = v2 + 1;\n
        v4 = v1[1 + v2];\n
        v2 = v3;\n
    } while (v4);\n
    return v3;\n
}\n
", "4211540:sub_404354": null, "4211552:cgc_strncasecmp": "int cgc_strncasecmp(char v2[2], char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    char *v3;  // edi, Other Possible Types: unsigned int\n
    char v4[2];  // esi, Other Possible Types: unsigned int\n
    unsigned int v5;  // al, Other Possible Types: char\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v3 = a0;\n
    v4 = v2;\n
    v0 = &v4[a1];\n
    v5 = v4[0];\n
    if (v4[0])\n
    {\n
        while (*(v3))\n
        {\n
            v6 = cgc_tolower(v5);\n
            v1 = v6;\n
            if (v1 != cgc_tolower(*(v3)))\n
                break;\n
            if (v4 >= v0)\n
                break;\n
            v3 += 1;\n
            v5 = *((v4 + 1));\n
            v4 += 1;\n
            if (!v5)\n
                break;\n
        }\n
    }\n
    v7 = (v4 == v0 ? *(v4) - *(v3) : 0);\n
    return v7;\n
}\n
", "4211683:sub_4043e3": null, "4211696:cgc_strncpy": "int cgc_strncpy(char *v0, char a0[2], unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char v2[2];  // eax\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // bl\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    v4 = v2[0];\n
    if (v2[0])\n
    {\n
        v3 = v0;\n
        if (v1)\n
        {\n
            v5 = 1;\n
            v3 = v0;\n
            while (true)\n
            {\n
                *(v3) = v4;\n
                v3 += 1;\n
                v4 = v2[v5];\n
                if (!v4)\n
                    break;\n
                v5 += 1;\n
                if (1 >= v1)\n
                    break;\n
            }\n
        }\n
    }\n
    v6 = v3 - v0;\n
    if (v6 < v1)\n
    {\n
        do\n
        {\n
            *(v3) = 0;\n
            v3 += 1;\n
            v6 += 1;\n
        } while (v6 < v1);\n
    }\n
    return v0;\n
}\n
", "4211800:sub_404458": null, "4211808:cgc_strndup": "int cgc_strndup(char *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
    char *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = a0;\n
    v2 = cgc_strlen(v0);\n
    v3 = (!(v2 <= v1) ? v2 : v1);\n
    v4 = cgc_malloc(v3 + 1);\n
    if (!v4)\n
        return 0;\n
    cgc_memcpy(v4, v0, v3);\n
    v3[v4] = 0;\n
    return v4;\n
}\n
", "4211907:sub_4044c3": null, "4211920:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    char *v1;  // esi\n
    unsigned int v2;  // al, Other Possible Types: char\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // edi\n
    void* v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = *(v0);\n
    if (!v1)\n
        return 0;\n
    v2 = *(v1);\n
    v4 = 0;\n
    if (*(v1))\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = cgc_strchr(a0, v2);\n
            if (v3)\n
                break;\n
            v2 = v1[1 + v4];\n
            v4 += 1;\n
            if (!v2)\n
                break;\n
        }\n
    }\n
    v5 = &v1[v4 + 1];\n
    if (!v1[v4])\n
        v5 = 0;\n
    *(v0) = v5;\n
    v1[v4] = 0;\n
    return *(v0);\n
}\n
", "4212041:sub_404549": null, "4212048:cgc_strstr": "int cgc_strstr(char v0[2], char *a0)\n
{\n
    int tmp_7;  // tmp #7\n
    char v1[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    if (!v1[0])\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v1, a0))\n
            return v1;\n
        tmp_7 = *((v1 + 1));\n
        v1 += 1;\n
        if (!tmp_7)\n
            return 0;\n
    }\n
}\n
", "4212136:sub_4045a8": null, "4212144:cgc_strtol": "int cgc_strtol(char v7[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    int tmp_6;  // tmp #6\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
    char v11[2];  // esi\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // esi\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // edx\n
    void* v16;  // ebx, Other Possible Types: unsigned int\n
    unsigned int *v17;  // eax, Other Possible Types: unsigned int\n
    char v18[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // al, Other Possible Types: char\n
    unsigned int v25;  // eax\n
    char v26[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
\n
    v6 = v8;\n
    v5 = v9;\n
    v4 = v10;\n
    v11 = v7;\n
    v18 = v11;\n
    if (cgc_isspace(v11[0]))\n
    {\n
        v18 = v11;\n
        do\n
        {\n
            if (!*(v18))\n
            {\n
                v14 = 0;\n
                v15 = 1;\n
                v1 = 1;\n
                v16 = 0;\n
                v17 = a0;\n
                if (!v17)\n
                    goto LABEL_4047a5;\n
            }\n
            v12 = *((v18 + 1));\n
            v18 += 1;\n
        } while (cgc_isspace(v12));\n
    }\n
    v13 = a1;\n
    if (*(v18) != 45)\n
    {\n
        v0 = 1;\n
        if (*(v18) == 43)\n
            v18 += 1;\n
        if (!v13)\n
            goto LABEL_40467c;\n
    }\n
    else\n
    {\n
        v18 += 1;\n
        v0 = -1;\n
        if (!v13)\n
        {\n
LABEL_40467c:\n
            if (*(v18) == 48)\n
            {\n
                if ((*((v18 + 1)) & 248) == 48)\n
                {\n
                    v18 += 1;\n
                    v13 = 8;\n
                    goto LABEL_4046ce;\n
                }\n
                if (cgc_tolower(*((v18 + 1))) == 120)\n
                {\n
                    v18 += 2;\n
                    v13 = 16;\n
                    goto LABEL_4046ce;\n
                }\n
            }\n
            v13 = 10;\n
            if (!cgc_isdigit(*(v18)))\n
            {\n
                v14 = 0;\n
                v1 = 1;\n
                v16 = 0;\n
                v17 = a0;\n
                v15 = v0;\n
                if (!v17)\n
                    goto LABEL_4047a5;\n
                v26 = v7;\n
                if (!v1)\n
                    v26 = v18;\n
                *(v17) = v26;\n
                goto LABEL_4047a5;\n
            }\n
LABEL_4046ce:\n
            v3 = 0;\n
            v1 = 1;\n
            v2 = 0;\n
            while (true)\n
            {\n
                v19 = *(v18);\n
                if (!v19)\n
                    break;\n
                v20 = *(v18);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v18);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (cgc_isupper(v23))\n
                    {\n
                        v21 = *(v18) - 55;\n
                    }\n
                    else\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_4046f0;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v13)\n
                {\n
                    v25 = v13 * v2;\n
                    tmp_6 = v25;\n
                    v2 = v25 + v21;\n
                    v24 = v3;\n
                    if ([D] x86g_calculate_condition(0x8<32>, 0x3<32>, t6, ecx<4>, 0x0<32>))\n
                        v24 = 1;\n
                    v3 = v24;\n
                    v18 += 1;\n
                    *(&v24) = 1;\n
                    v1 = 0;\n
                }\n
LABEL_4046f0:\n
                if (!v24)\n
                    break;\n
            }\n
            v17 = a0;\n
            v15 = v0;\n
            v14 = v3;\n
            v16 = v2;\n
            if (!v17)\n
                goto LABEL_4047a5;\n
        }\n
    }\n
    if (v13 == 16)\n
    {\n
        v13 = 16;\n
        if (*(v18) == 48)\n
        {\n
            v13 = 16;\n
            v18 += (cgc_tolower(*((v18 + 1))) == 120) * 2;\n
            goto LABEL_4046ce;\n
        }\n
    }\n
LABEL_4047a5:\n
    v27 = (!v14 ? 0x80000000 : -(v16));\n
    v28 = ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, esi<4>, 0x0<32>, 0x0<32>) ? 2147483647 : v16);\n
    if (v15 < 0)\n
        v28 = v27;\n
    return v28;\n
}\n
", "4212503:sub_404717": null, "4212705:sub_4047e1": null, "4212720:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v9[2], unsigned int *a0, unsigned int a1)\n
{\n
    char v0[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    int tmp_38;  // tmp #38\n
    int tmp_41;  // tmp #41\n
    int tmp_87;  // tmp #87\n
    int tmp_95;  // tmp #95\n
    int tmp_17;  // tmp #17\n
    void* v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x20]\n
    void* v4;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // eax\n
    void* v14;  // esi, Other Possible Types: unsigned int\n
    unsigned int v15;  // edx\n
    unsigned int *v16;  // eax, Other Possible Types: unsigned int\n
    char v17[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // ecx\n
    unsigned int v21;  // ecx\n
    unsigned int v23;  // ecx\n
    char v24;  // dl, Other Possible Types: unsigned int\n
    unsigned int v25;  // edi\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // eax\n
    unsigned int v30;  // eax\n
    unsigned int v31;  // ebx\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ecx\n
    char v35[2];  // ecx, Other Possible Types: unsigned int\n
    unsigned int v36;  // edi\n
    unsigned int v37;  // eax\n
    unsigned int v38;  // ecx\n
    unsigned int v39;  // cc_dep2\n
    unsigned int v40;  // eax\n
\n
    v8 = v10;\n
    v7 = v11;\n
    v6 = v12;\n
    v17 = v9;\n
    if (cgc_isspace(v17[0]))\n
    {\n
        v17 = v9;\n
        do\n
        {\n
            if (!*(v17))\n
            {\n
                v14 = 0;\n
                v15 = 1;\n
                *(&v0) = 1;\n
                v1 = 0;\n
                v2 = 0;\n
                v16 = a0;\n
                if (!v16)\n
                    goto LABEL_404a28;\n
            }\n
            v13 = *((v17 + 1));\n
            v17 += 1;\n
        } while (cgc_isspace(v13));\n
    }\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v18 = a1;\n
    if (*(v17) != 45)\n
    {\n
        v3 = 1;\n
        if (*(v17) == 43)\n
            v17 += 1;\n
        if (!v18)\n
            goto LABEL_4048cd;\n
    }\n
    else\n
    {\n
        v17 += 1;\n
        v3 = -1;\n
        if (!v18)\n
        {\n
LABEL_4048cd:\n
            if (*(v17) == 48)\n
            {\n
                if ((*((v17 + 1)) & 248) == 48)\n
                {\n
                    v17 += 1;\n
                    v18 = 8;\n
                    goto LABEL_404923;\n
                }\n
                if (cgc_tolower(*((v17 + 1))) == 120)\n
                {\n
                    v17 += 2;\n
                    v18 = 16;\n
                    goto LABEL_404923;\n
                }\n
            }\n
            v18 = 10;\n
            if (!cgc_isdigit(*(v17)))\n
            {\n
                v14 = 0;\n
                v0 = 1;\n
                v1 = 0;\n
                v2 = 0;\n
                v16 = a0;\n
                v15 = v3;\n
                if (!v16)\n
                    goto LABEL_404a28;\n
                v35 = v9;\n
                if (!v0)\n
                    v35 = v17;\n
                *(v16) = v35;\n
                goto LABEL_404a28;\n
            }\n
LABEL_404923:\n
            v4 = 0;\n
            *(&v0) = 1;\n
            v1 = 0;\n
            v2 = 0;\n
            while (true)\n
            {\n
                v19 = *(v17);\n
                if (!v19)\n
                    break;\n
                v20 = *(v17);\n
                if (cgc_isdigit(v19))\n
                {\n
                    v21 = v20 - 48;\n
                }\n
                else\n
                {\n
                    v23 = *(v17);\n
                    if (cgc_islower(v20))\n
                    {\n
                        v21 = v23 - 87;\n
                    }\n
                    else if (cgc_isupper(v23))\n
                    {\n
                        v21 = *(v17) - 55;\n
                    }\n
                    else\n
                    {\n
                        v24 = 0;\n
                        goto LABEL_404950;\n
                    }\n
                }\n
                v24 = 0;\n
                if (v21 < v18)\n
                {\n
                    *(&v0) = v17;\n
                    v25 = v18;\n
                    v26 = v18 >> 31;\n
                    v27 = v1;\n
                    v30 = v27 * v25;\n
                    v31 = v25 * v2 + v27 * v26 + (v27 * v25 >> 32);\n
                    v18 = v25;\n
                    v24 = v21 >> 31;\n
                    tmp_38 = v30;\n
                    v32 = v30 + v21;\n
                    tmp_41 = v31;\n
                    tmp_87 = tmp_38 + v21 < tmp_38;\n
                    tmp_95 = v24 ^ tmp_38 + v21 < tmp_38;\n
                    v33 = v31 + v24 + (tmp_38 + v21 < tmp_38);\n
                    v2 = v33;\n
                    v34 = v4;\n
                    if ([D] x86g_calculate_condition(0x5<32>, 0x9<32>, t41, t95, t87))\n
                        v34 = 1;\n
                    v4 = v34;\n
                    v17 = &v0[1];\n
                    *(&v24) = 1;\n
                    *(&v0) = 0;\n
                    v1 = v32;\n
                }\n
LABEL_404950:\n
                if (!v24)\n
                    break;\n
            }\n
            v16 = a0;\n
            v15 = v3;\n
            v14 = v4;\n
            if (!v16)\n
                goto LABEL_404a28;\n
        }\n
    }\n
    if (v18 == 16)\n
    {\n
        v18 = 16;\n
        if (*(v17) == 48)\n
        {\n
            v17 += (cgc_tolower(*((v17 + 1))) == 120) * 2;\n
            goto LABEL_404923;\n
        }\n
    }\n
LABEL_404a28:\n
    v36 = v1;\n
    v37 = -(v36);\n
    if ((v15 >> 31 & 1 ^ 1))\n
        v37 = v36;\n
    v38 = -(0 < v14) | v37;\n
    tmp_17 = v2;\n
    v2 -= v36 < 2147483649;\n
    v39 = v36 < 2147483649;\n
    v40 = ([D] x86g_calculate_condition(0x2<32>, 0xc<32>, t17, cc_dep2<4>, cc_dep2<4>) ? -1 : v38);\n
    if ((v15 >> 31 & 1 ^ 1))\n
        v40 = v38;\n
    return v40;\n
}\n
", "4213115:sub_40497b": null, "4213378:sub_404a82": null, "4213392:cgc_dataIntoPixels": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_dataIntoPixels(struct_1 *v0)\n
{\n
    struct_1 *v1;  // ecx\n
    struct struct_0 **v2;  // eax\n
    char *v3;  // ecx\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edx\n
\n
    v1 = v0;\n
    v2 = v1->field_8;\n
    v3 = v1->field_10;\n
    v7 = 0;\n
    do\n
    {\n
        v4 = v2[v7];\n
        v5 = 0;\n
        do\n
        {\n
            *((v4 + v5 * 4)) = v3[v5];\n
            v5 += 1;\n
        } while (v5 != 0x200);\n
        v7 += 1;\n
        v6 = v3 + 0x200;\n
    } while (v7 != 0x200);\n
    return v2;\n
}\n
", "4213483:sub_404aeb": null, "4213488:cgc_acceptImage": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    struct struct_3 *field_c;\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern void* cgc_stdin;\n
\n
int cgc_acceptImage(struct_1 *v5)\n
{\n
    char v0;  // [bp-0x31]\n
    void* v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    char v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6;  // esi\n
    char *v7;  // eax\n
    char *v8;  // esi\n
    char *v9;  // edi, Other Possible Types: unsigned int\n
    char v10;  // al\n
    char v11;  // al\n
    unsigned int v12;  // edi\n
    struct_1 *v14;  // edi\n
    unsigned int *v15;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v16;  // esi, Other Possible Types: unsigned int\n
    char *v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ecx\n
\n
    v4 = v6;\n
    cgc_fread(&v3, 3, cgc_stdin);\n
    v1 = cgc_stdin;\n
    cgc_fread(&v0, 1, cgc_stdin);\n
    v7 = cgc_calloc(1, 20);\n
    v8 = v7;\n
    v9 = v7;\n
    do\n
    {\n
        v10 = v0;\n
        if (v10 == 2)\n
        {\n
            *(v9) = 0;\n
            v2 = cgc_strtol(v8, NULL, 0);\n
            cgc_fread(&v0, 1, v1);\n
            *(v8) = 0;\n
            v12 = 0;\n
            do\n
            {\n
                v11 = v0;\n
                if (v11 == 2)\n
                {\n
                    v8[v12] = 0;\n
                    if (v2 == 0x200)\n
                    {\n
                        if (cgc_strtol(v8, NULL, 0) == 0x200)\n
                        {\n
                            cgc_fread(&v0, 4, v1);\n
                            v14 = v5;\n
                            v14->field_10 = cgc_calloc(1, 0x40000);\n
                            v14->field_8 = cgc_calloc(1, 0x800);\n
                            v15 = 0;\n
                            do\n
                            {\n
                                v14->field_8[v15].field_0 = cgc_calloc(1, 0x800);\n
                                v15 += 1;\n
                            } while (v15 != 0x200);\n
                            v14->field_c = cgc_calloc(1, 0x800);\n
                            v16 = 0;\n
                            do\n
                            {\n
                                v14->field_c[v16].field_0 = cgc_calloc(1, 0x800);\n
                                v16 += 1;\n
                            } while (v16 != 0x200);\n
                            v14->field_0 = 0x200;\n
                            v14->field_4 = 0x200;\n
                            cgc_fread(v14->field_10, 0x40000, v1);\n
                            v18 = v14->field_10;\n
                            v19 = 0;\n
                            do\n
                            {\n
                                v20 = v14->field_8[v19].field_0;\n
                                v21 = 0;\n
                                do\n
                                {\n
                                    *((v20 + v21 * 4)) = v18[v21];\n
                                    v21 += 1;\n
                                } while (v21 != 0x200);\n
                                v19 += 1;\n
                                v22 = v18 + 0x200;\n
                            } while (v19 != 0x200);\n
                            return 0;\n
                        }\n
                        break;\n
                    }\n
                }\n
                else\n
                {\n
                    v8[v12] = v11;\n
                    if (v12 == 19)\n
                        break;\n
                    continue;\n
                }\n
                v12 += 1;\n
            } while (cgc_fread(&v0, 1, v1) == 1);\n
        }\n
        *(v9) = v10;\n
        v9 += 1;\n
    } while (cgc_fread(&v0, 1, v1) == 1);\n
    cgc__terminate();\n
    return cgc_outputImage();\n
}\n
", "4214080:cgc_outputImage": "extern void* cgc_stdout;\n
\n
int cgc_outputImage(unsigned int v4[5])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v5[5];  // ecx\n
\n
    v3 = 143665;\n
    v2 = 822227505;\n
    v1 = 889336369;\n
    v0 = 889341763;\n
    cgc_fwrite(&v0, cgc_strlen(&v0), cgc_stdout);\n
    v5 = v4;\n
    cgc_fwrite(v5[4], v5[0] * v5[1], cgc_stdout);\n
    return 0;\n
}\n
", "4214209:sub_404dc1": null, "4214224:cgc_getVal": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int cgc_getVal(unsigned int v1, unsigned int a0, unsigned int a1, unsigned int a2, struct_0 *a3)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // esi\n
    unsigned int *v3;  // ecx, Other Possible Types: unsigned int\n
    unsigned int *v4;  // eax, Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = v1 - a1;\n
    v4 = a0 - a2;\n
    if (v3 >= 511)\n
        v3 = 511;\n
    if (v3 < 0)\n
        v3 = 0;\n
    if (v4 >= 511)\n
        v4 = 511;\n
    if (v4 < 0)\n
        v4 = 0;\n
    v5 = *((*((a3->field_8 + v3 * 4)) + v4 * 4));\n
    return v5;\n
}\n
", "4214295:sub_404e17": null, "4214304:cgc_applyFilter": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_407224;\n
\n
int cgc_applyFilter(struct_1 *v13)\n
{\n
    unsigned short v0;  // [bp-0x40]\n
    unsigned short v1;  // [bp-0x3e]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int *v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    struct struct_0 **v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    struct_1 *v14;  // edi, Other Possible Types: unsigned int\n
    void* v15;  // eax, Other Possible Types: unsigned int\n
    void* v16;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v18;  // ftop\n
    unsigned int *v19;  // edi\n
    unsigned int v20;  // eax\n
    char *v21;  // ebx\n
    unsigned int v22;  // ecx\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // esi\n
    void* v26;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ebx\n
    struct struct_0 **v30;  // eax\n
    char *v31;  // ecx\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // esi\n
    unsigned int v34;  // edi\n
    unsigned int v35;  // ecx\n
\n
    v14 = v13;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = &g_407224;\n
    v15 = 0;\n
    do\n
    {\n
        v8 = v15 + 2;\n
        v3 = v15;\n
        v6 = v15 * 0x200;\n
        v2 = 2;\n
        v16 = 0;\n
        do\n
        {\n
            v7 = v16;\n
            v9 = *((v14 + 8));\n
            v18 = v28 - 1;\n
            [D] PutI(72:F64x8)[t16,0] = t19\n
            [D] PutI(136:I8x8)[t16,0] = 0x01\n
            v19 = v4;\n
            v26 = 0;\n
            do\n
            {\n
                v10 = v26;\n
                v20 = v8 - v26;\n
                if (v20 >= 511)\n
                    v20 = 511;\n
                if (v20 < 0)\n
                    v20 = 0;\n
                v21 = v9[v20];\n
                v22 = v2;\n
                v23 = 0;\n
                do\n
                {\n
                    v24 = (v22 < 511 ? 511 : v22);\n
                    if (v24 < 0)\n
                        v24 = 0;\n
                    v25 = v19[v23] * *(&v21[4 * v24]);\n
                    v12 = v25;\n
                    if (![D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t4\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t4\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v23 += 1;\n
                    v22 -= 1;\n
                } while (v23 != 5);\n
                v26 = v10 + 1;\n
                v27 = v19 + 5;\n
            } while (v26 != 5);\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v0 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-64, size=2, endness=Iend_LE)))));\n
            v1 = v0 | 0xc00;\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                v11 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v28 = v18 + 1;\n
            }\n
            else\n
            {\n
                v11 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v28 = v18 + 1;\n
            }\n
            v14 = v13;\n
            v29 = v7;\n
            *((*((v14 + 16)) + v6 + v29)) = v11;\n
            v16 = v29 + 1;\n
            v2 += 1;\n
        } while (v16 != 0x200);\n
        v15 = v3 + 1;\n
    } while (v15 != 0x200);\n
    v30 = *((v14 + 8));\n
    v31 = *((v14 + 16));\n
    v32 = 0;\n
    do\n
    {\n
        v33 = v30[v32];\n
        v34 = 0;\n
        do\n
        {\n
            *((v33 + v34 * 4)) = v31[v34];\n
            v34 += 1;\n
        } while (v34 != 0x200);\n
        v32 += 1;\n
        v35 = v31 + 0x200;\n
    } while (v32 != 0x200);\n
    return 0;\n
}\n
", "4214701:sub_404fad": null, "4214704:cgc_onlyTwoDecimals": null, "4214823:sub_405027": null, "4214832:cgc_findGradients": null, "4215068:sub_40511c": null, "4215130:sub_40515a": null, "4216109:sub_40552d": null, "4216112:cgc_non_max_suppressions": "typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_3 *field_8;\n
    struct struct_4 *field_c;\n
    struct struct_0 *field_10;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    struct struct_0 *field_0;\n
} struct_3;\n
\n
typedef struct struct_4 {\n
    struct struct_1 *field_0;\n
} struct_4;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_non_max_suppressions(struct_2 *v6)\n
{\n
    struct struct_0 **v0;  // [bp-0x28], Other Possible Types: unsigned int\n
    int tmp_4;  // tmp #4\n
    void* v1;  // [bp-0x24], Other Possible Types: unsigned int\n
    struct struct_0 **v2;  // [bp-0x20]\n
    unsigned int *v3;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_2 *v7;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v8;  // esi, Other Possible Types: unsigned int\n
    char *v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
    struct struct_0 **v11;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v12;  // ecx\n
    void* v13;  // ebx, Other Possible Types: unsigned int\n
    struct struct_0 **v14;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v15;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // ecx\n
    unsigned int *v19;  // edx\n
    unsigned int v20;  // esi\n
    char v21;  // al\n
    char v22;  // cl\n
    struct struct_0 **v23;  // eax\n
    char *v24;  // ecx\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // esi\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // ecx\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    v7 = v6;\n
    v8 = 0;\n
    do\n
    {\n
        v9 = 0;\n
        v2 = v8;\n
        do\n
        {\n
            v10 = *((*((*((v7 + 12)) + v8 * 4)) + v9 * 4));\n
            v13 = 0;\n
            v11 = 0;\n
            if (v10 <= 7)\n
            {\n
                v12 = v4;\n
                v13 = *((v12 + v10 * 4 - 6216));\n
                v11 = *((v12 + v10 * 4 - 6184));\n
            }\n
            v5 = v13;\n
            v14 = v13 + v8;\n
            if (v14 >= 511)\n
                v14 = 511;\n
            v15 = v11 + v9;\n
            if (v14 < 0)\n
                v14 = 0;\n
            v0 = v11;\n
            if (v15 >= 511)\n
                v15 = 511;\n
            v3 = v15;\n
            if (v15 < 0)\n
                v3 = 0;\n
            v16 = v8 - v5;\n
            if (v16 >= 511)\n
                v16 = 511;\n
            v17 = v9 - v0;\n
            if (v16 < 0)\n
                v16 = 0;\n
            if (v17 >= 511)\n
                v17 = 511;\n
            v0 = v14;\n
            if (v17 < 0)\n
                v17 = 0;\n
            v18 = *((v7 + 8));\n
            v19 = *((v18 + v16 * 4));\n
            v20 = *((*((v18 + v2 * 4)) + v9 * 4));\n
            v21 = 0;\n
            if (v20 >= v19[v17])\n
                v21 = v20;\n
            tmp_4 = *((*((v18 + v0 * 4)) + v3 * 4));\n
            v22 = 0;\n
            if (v20 >= tmp_4)\n
                v22 = v21;\n
            v7 = v6;\n
            *(v9 + *((v7 + 16)) + v1) = v22;\n
            v9 += 1;\n
            v8 = v2;\n
        } while (v9 != 0x200);\n
        v8 += 1;\n
        v1 += 0x200;\n
    } while (v8 != 0x200);\n
    v23 = *((v7 + 8));\n
    v24 = *((v7 + 16));\n
    v25 = 0;\n
    do\n
    {\n
        v26 = v23[v25];\n
        v27 = 0;\n
        do\n
        {\n
            *((v26 + v27 * 4)) = v24[v27];\n
            v27 += 1;\n
        } while (v27 != 0x200);\n
        v25 += 1;\n
        v28 = v24 + 0x200;\n
    } while (v25 != 0x200);\n
    return v23;\n
}\n
", "4216155:sub_40555b": null, "4216191:sub_40557f": null, "4216507:sub_4056bb": null, "4216512:cgc_double_thresholding": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_double_thresholding(struct_1 *v0, unsigned int a0, unsigned int a1)\n
{\n
    void* v1;  // eax\n
    struct_1 *v2;  // esi\n
    void* v3;  // ebx\n
    unsigned int v4;  // edi\n
    char v5;  // cl\n
    char *v6;  // edx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
    char *v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // esi\n
    unsigned int v13;  // edi\n
    unsigned int v14;  // ecx\n
\n
    v1 = 0;\n
    v2 = v0;\n
    v3 = 0;\n
    do\n
    {\n
        v6 = 0;\n
        do\n
        {\n
            v4 = *((*((&v2->field_8->field_0 + 0x4 * v3)) + v6 * 4));\n
            v5 = 60;\n
            if (v4 <= a0)\n
                v5 = 0;\n
            if (v4 > a1)\n
                v5 = 254;\n
            *((v6 + v2->field_10 + v1)) = v5;\n
            v6 += 1;\n
        } while (v6 != 0x200);\n
        v8 = v1 + 0x200;\n
    } while (v3 + 1 != 0x200);\n
    v10 = v2->field_10;\n
    v11 = 0;\n
    do\n
    {\n
        v12 = v2->field_8[v11].field_0;\n
        v13 = 0;\n
        do\n
        {\n
            *((v12 + v13 * 4)) = v10[v13];\n
            v13 += 1;\n
        } while (v13 != 0x200);\n
        v11 += 1;\n
        v14 = v10 + 0x200;\n
    } while (v11 != 0x200);\n
    return 0;\n
}\n
", "4216530:sub_4056d2": null, "4216564:sub_4056f4": null, "4216701:sub_40577d": null, "4216704:cgc_hysteresis": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_2 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_hysteresis(struct_1 *v5)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    struct struct_0 **v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    struct_1 *v6;  // ecx, Other Possible Types: unsigned int\n
    void* v7;  // esi, Other Possible Types: unsigned int\n
    char *v8;  // ebx, Other Possible Types: unsigned int\n
    struct struct_0 **v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10;  // esi\n
    char *v11;  // esi\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // ecx\n
    char v15;  // al\n
    void* v16;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v17;  // eax\n
    char *v18;  // ecx\n
    unsigned int v19;  // edx\n
    unsigned int v20;  // esi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ecx\n
\n
    v6 = v5;\n
    v7 = 0;\n
    do\n
    {\n
        v0 = v7 + 1;\n
        v1 = v7 * 0x200;\n
        v8 = 0;\n
        v2 = v7;\n
        do\n
        {\n
            v9 = *((v6 + 8));\n
            if (*(&(v9[v7])[4 * v8]) == 60)\n
            {\n
                v16 = 0;\n
                v15 = 0;\n
                v3 = v9;\n
                do\n
                {\n
                    v4 = v16;\n
                    v10 = v0 - v16;\n
                    if (v10 >= 511)\n
                        v10 = 511;\n
                    if (v10 < 0)\n
                        v10 = 0;\n
                    v11 = *((v9 + v10 * 4));\n
                    v12 = 1;\n
                    do\n
                    {\n
                        v13 = &v8[v12];\n
                        if (v13 >= 511)\n
                            v13 = 511;\n
                        if (v13 < 0)\n
                            v13 = 0;\n
                        v14 = *(&v11[4 * v13]);\n
                        if (v14 == 254)\n
                            v15 = v14;\n
                        v12 -= 1;\n
                    } while (v12 != -2);\n
                    v16 = v4 + 1;\n
                    v9 = v3;\n
                } while (v16 != 3);\n
                v6 = v5;\n
                v8[v1 + *((v6 + 16))] = v15;\n
                v7 = v2;\n
            }\n
            v8 += 1;\n
        } while (v8 != 0x200);\n
        v7 = v0;\n
    } while (v7 != 0x200);\n
    v17 = *((v6 + 8));\n
    v18 = *((v6 + 16));\n
    v19 = 0;\n
    do\n
    {\n
        v20 = v17[v19];\n
        v21 = 0;\n
        do\n
        {\n
            *((v20 + v21 * 4)) = v18[v21];\n
            v21 += 1;\n
        } while (v21 != 0x200);\n
        v19 += 1;\n
        v22 = v18 + 0x200;\n
    } while (v19 != 0x200);\n
    return 0;\n
}\n
", "4216728:sub_405798": null, "4216777:sub_4057c9": null, "4217037:sub_4058cd": null, "4217040:cgc_performImageMagic": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_4 {\n
    void* field_-134;\n
} struct_4;\n
\n
typedef struct struct_2 {\n
    struct struct_0 *field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_3 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_407224;\n
\n
int cgc_performImageMagic()\n
{\n
    struct_1 *v0;  // [bp-0x5c]\n
    unsigned short v1;  // [bp-0x56]\n
    struct struct_0 **v2;  // [bp-0x54]\n
    struct struct_0 **v3;  // [bp-0x50]\n
    struct_4 *v4;  // [bp-0x4c]\n
    struct struct_0 **v5;  // [bp-0x48]\n
    struct struct_0 **v6;  // [bp-0x44]\n
    unsigned int v7;  // [bp-0x40]\n
    unsigned short v8;  // [bp-0x3a]\n
    unsigned int v9;  // [bp-0x38]\n
    unsigned int *v10;  // [bp-0x34]\n
    unsigned int v11;  // [bp-0x30]\n
    unsigned int v12;  // [bp-0x2c]\n
    unsigned int v13;  // [bp-0x28]\n
    unsigned int v14;  // [bp-0x24]\n
    unsigned int v15;  // [bp-0x20]\n
    unsigned int v16;  // [bp-0x1c]\n
    unsigned int v17;  // [bp-0x18]\n
    struct_1 *v19;  // eax\n
    struct_1 *v20;  // edi, Other Possible Types: unsigned int\n
    void* v21;  // ecx, Other Possible Types: unsigned int\n
    struct struct_0 **v22;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v24;  // ftop\n
    unsigned int *v25;  // edx\n
    unsigned int v26;  // esi\n
    unsigned int *v27;  // edi\n
    struct struct_0 **v28;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v29;  // esi\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // ecx\n
    void* v32;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // ebx\n
    struct struct_0 **v36;  // eax\n
    char *v37;  // ecx\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // esi\n
    unsigned int v40;  // edi\n
    unsigned int v41;  // ecx\n
    struct_1 *v42;  // edi, Other Possible Types: unsigned int\n
    void* v43;  // eax\n
    void* v44;  // edx\n
    char *v45;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v46;  // ecx\n
    unsigned int v47;  // edi\n
    unsigned int v48;  // edi\n
    char v49;  // bl\n
    unsigned int v51;  // eax\n
    char *v53;  // ecx\n
    unsigned int v54;  // edx\n
    unsigned int v55;  // esi\n
    unsigned int v56;  // edi\n
    unsigned int v57;  // ecx\n
    struct struct_0 **v58;  // eax, Other Possible Types: unsigned int\n
    struct_1 *v59;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v60;  // ebx, Other Possible Types: unsigned int\n
    struct struct_0 **v61;  // edi, Other Possible Types: unsigned int\n
    void* v62;  // eax, Other Possible Types: unsigned int\n
    char v63;  // dl\n
    unsigned int v64;  // esi\n
    unsigned int *v65;  // esi\n
    unsigned int v66;  // edi\n
    unsigned int v67;  // eax\n
    unsigned int v68;  // eax\n
    struct_1 *v69;  // eax\n
    struct struct_0 **v70;  // eax\n
    char *v71;  // ecx\n
    unsigned int v72;  // edx\n
    unsigned int v73;  // esi\n
    unsigned int v74;  // edi\n
    unsigned int v75;  // ecx\n
    struct_1 *v76;  // edx\n
\n
    v19 = cgc_calloc(1, 20);\n
    v20 = v19;\n
    cgc_acceptImage(v19);\n
    v4 = &_GLOBAL_OFFSET_TABLE_.field_-134;\n
    v10 = &g_407224;\n
    v21 = 0;\n
    v0 = v19;\n
    do\n
    {\n
        v6 = v21 + 2;\n
        v9 = v21;\n
        v11 = v21 * 0x200;\n
        v3 = 2;\n
        v22 = 0;\n
        do\n
        {\n
            v5 = v22;\n
            v2 = *((v20 + 8));\n
            v24 = v34 - 1;\n
            [D] PutI(72:F64x8)[t16,0] = t19\n
            [D] PutI(136:I8x8)[t16,0] = 0x01\n
            v25 = v10;\n
            v32 = 0;\n
            do\n
            {\n
                v7 = v32;\n
                v26 = v6 - v32;\n
                if (v26 >= 511)\n
                    v26 = 511;\n
                if (v26 < 0)\n
                    v26 = 0;\n
                v27 = v2[v26];\n
                v28 = v3;\n
                v29 = 0;\n
                do\n
                {\n
                    v30 = (v28 < 511 ? 511 : v28);\n
                    if (v30 < 0)\n
                        v30 = 0;\n
                    v31 = v25[v29] * v27[v30];\n
                    v13 = v31;\n
                    if (![D] GetI(136:I8x8)[t36,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t4\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t4\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v29 += 1;\n
                    v28 -= 1;\n
                } while (v29 != 5);\n
                v32 = v7 + 1;\n
                v33 = v25 + 5;\n
            } while (v32 != 5);\n
            if ([D] GetI(136:I8x8)[t36,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t4\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            v1 = [D] x86g_create_fpucw(Conv(64->32, [D] x86g_check_fldcw(Conv(16->32, Load(addr=stack_base-86, size=2, endness=Iend_LE)))));\n
            v8 = v1 | 0xc00;\n
            if (![D] GetI(136:I8x8)[t36,0])\n
            {\n
                v12 = nan;\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v34 = v24 + 1;\n
            }\n
            else\n
            {\n
                v12 = [D] GetI(72:F64x8)[t7,0];\n
                [D] PutI(136:I8x8)[t7,0] = 0x00\n
                v34 = v24 + 1;\n
            }\n
            v20 = v0;\n
            v35 = v5;\n
            *(*((v20 + 16)) + v11 + v35) = v12;\n
            v22 = v35 + 1;\n
            v3 = v3 + 1;\n
        } while (v22 != 0x200);\n
        v21 = v9 + 1;\n
    } while (v21 != 0x200);\n
    v36 = *((v20 + 8));\n
    v37 = *((v20 + 16));\n
    v38 = 0;\n
    do\n
    {\n
        v39 = v36[v38];\n
        v40 = 0;\n
        do\n
        {\n
            *((v39 + v40 * 4)) = v37[v40];\n
            v40 += 1;\n
        } while (v40 != 0x200);\n
        v38 += 1;\n
        v41 = v37 + 0x200;\n
    } while (v38 != 0x200);\n
    v42 = v0;\n
    cgc_findGradients(v42);\n
    cgc_non_max_suppressions(v42);\n
    v43 = 0;\n
    v44 = 0;\n
    do\n
    {\n
        v45 = 0;\n
        do\n
        {\n
            v46 = v42;\n
            v47 = *((*((v42 + 8)) + v44 * 4));\n
            v48 = *((v47 + v45 * 4));\n
            v49 = 60;\n
            if (v48 < 21)\n
                v49 = 0;\n
            if (v48 >= 71)\n
                v49 = 254;\n
            *((v45 + v46->field_10 + v43)) = v49;\n
            v45 += 1;\n
            v42 = v46;\n
        } while (v45 != 0x200);\n
        v51 = v43 + 0x200;\n
    } while (v44 + 1 != 0x200);\n
    v53 = v46->field_10;\n
    v54 = 0;\n
    do\n
    {\n
        v55 = v46->field_8[v54].field_0;\n
        v56 = 0;\n
        do\n
        {\n
            *((v55 + v56 * 4)) = v53[v56];\n
            v56 += 1;\n
        } while (v56 != 0x200);\n
        v54 += 1;\n
        v57 = v53 + 0x200;\n
    } while (v54 != 0x200);\n
    v58 = 0;\n
    v59 = v0;\n
    do\n
    {\n
        v2 = v58 + 1;\n
        v5 = v58 * 0x200;\n
        v60 = 0;\n
        v6 = v58;\n
        do\n
        {\n
            v61 = *((v59 + 8));\n
            if (*(&(v61[v58])[4 * v60]) == 60)\n
            {\n
                v62 = 0;\n
                v63 = 0;\n
                v3 = v61;\n
                do\n
                {\n
                    v7 = v62;\n
                    v64 = v2 - v62;\n
                    if (v64 >= 511)\n
                        v64 = 511;\n
                    if (v64 < 0)\n
                        v64 = 0;\n
                    v65 = *((v61 + v64 * 4));\n
                    v66 = 1;\n
                    do\n
                    {\n
                        v67 = v60 + v66;\n
                        if (v67 >= 511)\n
                            v67 = 511;\n
                        if (v67 < 0)\n
                            v67 = 0;\n
                        v68 = v65[v67];\n
                        if (v68 == 254)\n
                            v63 = v68;\n
                        v66 -= 1;\n
                    } while (v66 != -2);\n
                    v62 = v7 + 1;\n
                    v61 = v3;\n
                } while (v62 != 3);\n
                v69 = v0;\n
                *(&v69->field_10->field_0 + v5 + v60) = v63;\n
                v59 = v69;\n
                v58 = v6;\n
            }\n
            v60 += 1;\n
        } while (v60 != 0x200);\n
        v58 = v2;\n
    } while (v58 != 0x200);\n
    v70 = *((v59 + 8));\n
    v71 = *((v59 + 16));\n
    v72 = 0;\n
    do\n
    {\n
        v73 = v70[v72];\n
        v74 = 0;\n
        do\n
        {\n
            *((v73 + v74 * 4)) = v71[v74];\n
            v74 += 1;\n
        } while (v74 != 0x200);\n
        v72 += 1;\n
        v75 = v71 + 0x200;\n
    } while (v72 != 0x200);\n
    v17 = 143665;\n
    v16 = 822227505;\n
    v15 = 889336369;\n
    v14 = 889341763;\n
    cgc_fwrite(&v14, cgc_strlen(&v14), v4[77].field_-134);\n
    v76 = v0;\n
    return cgc_fwrite(v76->field_10, v76->field_0 * v76->field_4, v4[77].field_-134);\n
}\n
", "4217489:sub_405a91": null, "4217524:sub_405ab4": null, "4217722:sub_405b7a": null, "4218080:cgc_getUserInput": "extern void* cgc_stdin;\n
\n
int cgc_getUserInput()\n
{\n
    struct struct_0 **v0;  // [bp-0x15], Other Possible Types: char\n
    struct struct_0 **v2;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // esi\n
\n
    v2 = cgc_calloc(1, 10);\n
    v3 = v2;\n
    *(&v2) = *(v2);\n
    *(&v0) = 32;\n
    if (*(&v2) == 12)\n
    {\n
        *(&v2) = v0;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (cgc_fread(v3, 1, cgc_stdin) != 1)\n
        {\n
            cgc__terminate();\n
            return cgc_drawBoard();\n
        }\n
        v2 = *(v3);\n
        if (v2 == 12)\n
            return v0;\n
    }\n
}\n
", "4218208:cgc_drawBoard": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void* cgc_stdout;\n
extern unsigned int g_4078e4;\n
extern unsigned int g_4078f6;\n
\n
int cgc_drawBoard(unsigned int *v6)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    unsigned int v4;  // [bp-0x1c]\n
    unsigned int v5;  // [bp-0x18]\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edi\n
    void* v11;  // eax, Other Possible Types: unsigned int\n
    unsigned int v12;  // esi\n
\n
    v1 = v6;\n
    v7 = 22;\n
    v0 = L\"-| +.O\u0c7c\u2a00\\u0c64\u4900\u414d\u4547\u4d20\u4741\u4349\\x0c\\x01\";\n
    do\n
    {\n
        cgc_fprintf(cgc_stdout, v0);\n
        v7 -= 1;\n
    } while (true);\n
    v2 = &g_4078f6;\n
    cgc_fprintf(cgc_stdout, &g_4078f6);\n
    v11 = 0;\n
    v3 = L\"| +.O\u0c7c\u2a00\\u0c64\u4900\u414d\u4547\u4d20\u4741\";\n
    v5 = \" \";\n
    do\n
    {\n
        v4 = v11;\n
        cgc_fprintf(cgc_stdout, v3);\n
        v10 = 0;\n
        do\n
        {\n
            v8 = v1[v10];\n
            v9 = v5;\n
            if (v8 - 1 <= 3)\n
                v9 = *(&(&_GLOBAL_OFFSET_TABLE_)[304 + 4 * v8]);\n
            cgc_fprintf(cgc_stdout, v9);\n
            v10 += 1;\n
        } while (v10 != 20);\n
        cgc_fprintf(cgc_stdout, &g_4078e4);\n
        v11 = v4 + 1;\n
        v1 += 20;\n
    } while (v11 != 20);\n
    v12 = 22;\n
    do\n
    {\n
        cgc_fprintf(cgc_stdout, v0);\n
        v12 -= 1;\n
    } while (true);\n
    return cgc_fprintf(cgc_stdout, v2);\n
}\n
", "4218340:sub_405de4": null, "4218525:sub_405e9d": null, "4218528:cgc_moveUserIfValid": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stdin;\n
\n
int cgc_moveUserIfValid(unsigned int *v1, char a0, unsigned int *a1, struct struct_0 **a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int *v2;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v3;  // edx, Other Possible Types: unsigned int\n
    char v4[2];  // esi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    void* v7;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v8;  // edi, Other Possible Types: unsigned int\n
    unsigned int v9;  // ecx\n
    unsigned int *v10;  // ebx\n
\n
    v2 = a0;\n
    v3 = a2;\n
    v8 = *(v3);\n
    if (v2 == 97 && !v8)\n
        goto LABEL_406006;\n
    if (v2 == 100 && v8 == 19)\n
        goto LABEL_406006;\n
    v7 = *(a1);\n
    if (v2 == 119 && !v7)\n
        goto LABEL_406006;\n
    if (v2 == 115 && v7 == 19)\n
        goto LABEL_406006;\n
    v2 = &v2[24] + 1;\n
    switch (v2)\n
    {\n
    case 0:\n
        v8 = v8 + 1;\n
        goto LABEL_405fd2;\n
    case 3:\n
        v8 = v8 + 1;\n
        goto LABEL_405fd2;\n
    case 16:\n
        v4 = cgc_calloc(1, 250);\n
        cgc_freaduntil(v4, 200, 12, cgc_stdin);\n
        v5 = cgc_strtol(v4, NULL, 0);\n
        v0 = v4;\n
        v6 = cgc_strtol(v4, NULL, 0);\n
        v7 = 0;\n
        if (v5 - 400 >= -419)\n
            v7 = (v5 * 1717986919 >> 32 >> 3) + (v5 * 1717986919 >> 32 >> 31);\n
        v8 = (!(v6 - ((v6 * 1717986919 >> 32 >> 3) + (v6 * 1717986919 >> 32) / 0x80000000) * 4 * 5 >> 31 & 1) ? 0 : v6 - ((v6 * 1717986919 >> 32 >> 3) + (v6 * 1717986919 >> 32) / 0x80000000) * 4 * 5);\n
        cgc_free(v0);\n
        v3 = a2;\n
        goto LABEL_405fd2;\n
    case 18:\n
        v7 += 1;\n
        goto LABEL_405fd2;\n
    case 22:\n
        v7 -= 1;\n
LABEL_405fd2:\n
        v2 = v1;\n
        v9 = v7 * 80 + v2;\n
        if (*((v9 + (v8 << 2))) != 2)\n
        {\n
            *((v9 + v8 * 4)) = 4;\n
            v10 = a1;\n
            v2 += *(v10) * 80;\n
            *((v2 + *(v3) * 4)) = 0;\n
            *(v10) = v7;\n
            *(v3) = v8;\n
            break;\n
        }\n
    }\n
LABEL_406006:\n
    return v2;\n
}\n
", "4218894:sub_40600e": null, "4218896:cgc_userHasNotWon": "int cgc_userHasNotWon(unsigned int *v0)\n
{\n
    unsigned int *v2;  // edx\n
    void* v3;  // eax, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // ecx\n
    unsigned int v6;  // edx\n
\n
    v2 = v0;\n
    v3 = 0;\n
    do\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            if (v3 == 1)\n
                v3 = v2[v4];\n
            v4 += 1;\n
        } while (v4 != 20);\n
        v5 = 0 + 1;\n
        v6 = v2 + 20;\n
    } while (v5 != 20);\n
    return v3;\n
}\n
", "4218963:sub_406053": null, "4218976:cgc_startPacAttack": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int cgc_stdin;\n
extern unsigned int cgc_stdout;\n
extern void g_407288;\n
extern unsigned int g_4078e7;\n
extern unsigned int g_4078eb;\n
\n
int cgc_startPacAttack()\n
{\n
    char v0;  // [bp-0x669]\n
    void* v1;  // [bp-0x668], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x664]\n
    void* v3;  // [bp-0x660]\n
    void* v4;  // [bp-0x65c]\n
    void* v5;  // [bp-0x658]\n
    char v6;  // [bp-0x654]\n
    char v7;  // [bp-0x604]\n
    struct_0 *v9;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v10;  // eax\n
    unsigned int v12;  // ecx\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // eax\n
    void* v16;  // esi\n
    struct struct_1 **v17;  // eax, Other Possible Types: unsigned int, char\n
    struct struct_1 **v18;  // esi\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // ecx\n
    void* v25;  // esi\n
\n
    v9 = &v6;\n
    memcpy(&v6, &g_407288, 1600);\n
    v5 = 0;\n
    v4 = 0;\n
    v2 = cgc_stdout;\n
    v3 = cgc_stdin;\n
    v1 = 0;\n
    while (true)\n
    {\n
        v10 = v9;\n
        v12 = 0;\n
        do\n
        {\n
            v13 = 0;\n
            do\n
            {\n
                if (v12 == 1)\n
                    v12 = *(&v10[4 * v13]);\n
                v13 += 1;\n
            } while (v13 != 20);\n
            v14 = 0 + 1;\n
            v15 = &v7;\n
        } while (v14 != 20);\n
        v9 = &v6;\n
        if (v12 != 1)\n
            break;\n
        v1 += 1;\n
        v16 = v2;\n
        cgc_fprintf(v16, &g_4078e7);\n
        cgc_drawBoard(&v6);\n
        cgc_fflush(v16);\n
        v17 = cgc_calloc(1, 10);\n
        v18 = v17;\n
        *(&v17) = *(v17);\n
        v0 = 32;\n
        if (*(&v17) != 12)\n
        {\n
            do\n
            {\n
                v0 = v17;\n
                if (cgc_fread(v18, 1, v3) != 1)\n
                {\n
                    cgc__terminate();\n
                    return cgc_check_seed();\n
                }\n
                v17 = *(v18);\n
            } while (v17 != 12);\n
        }\n
        cgc_moveUserIfValid(&v6, v0, &v5, &v4);\n
        if (v1 == 682)\n
            break;\n
    }\n
    v21 = 0;\n
    do\n
    {\n
        v22 = 0;\n
        do\n
        {\n
            if (v21 == 1)\n
                v21 = *(&(&v6)[4 * v22]);\n
            v22 += 1;\n
        } while (v22 != 20);\n
        v23 = 0 + 1;\n
        v24 = &v7;\n
    } while (v23 != 20);\n
    if (!v21)\n
    {\n
        v25 = v2;\n
        cgc_fprintf(v25, &g_4078eb);\n
        cgc_fflush(v25);\n
        cgc_performImageMagic();\n
        cgc_fflush(v25);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4219081:sub_4060c9": null, "4219472:cgc_check_seed": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int cgc_check_seed()\n
{\n
    void* v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // eax\n
\n
    v2 = v4;\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_fread(&v1, 4, cgc_stdin);\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    v5 = v1;\n
    if (v5 != *(0x4347c000))\n
    {\n
        return v1;\n
    }\n
    else if (v0 != 0x4347c000)\n
    {\n
        return v1;\n
    }\n
    else\n
    {\n
        v5 = cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
        return v5;\n
    }\n
}\n
", "4219612:sub_4062dc": null, "4219616:main": "extern void* cgc_stdin;\n
extern void* cgc_stdout;\n
\n
int main()\n
{\n
    void* v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // esi\n
\n
    v2 = v4;\n
    v1 = 0;\n
    v0 = 0;\n
    cgc_fread(&v1, 4, cgc_stdin);\n
    cgc_fread(&v0, 4, cgc_stdin);\n
    if (v1 == *(0x4347c000) && v0 == 0x4347c000)\n
        cgc_fwrite(0x4347c000, 0x1000, cgc_stdout);\n
    cgc_fbuffered(cgc_stdout, 1);\n
    cgc_startPacAttack();\n
    cgc_fflush(cgc_stdout);\n
    return 0;\n
}\n
", "4219800:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_fabs": null, "5242884:__libc_start_main": null, "5242888:memcpy": null, "5242892:cgc_atan2": null, "5242896:cgc__terminate": null, "5242900:cgc_transmit": null, "5242904:cgc_allocate": null, "5242908:cgc_deallocate": null, "5242912:cgc_sqrt": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}