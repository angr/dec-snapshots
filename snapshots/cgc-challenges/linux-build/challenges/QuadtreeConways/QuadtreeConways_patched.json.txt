{"4198400:_init": "extern struct_0 *g_408118;\n
\n
int _init()\n
{\n
    if (g_408118)\n
    {\n
        g_408118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 28719;\n
    v6 = v5 + 47;\n
    v7 = v5 + 47;\n
    if (v7 == v6)\n
        return v5 + 47;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 28655;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 47;\n
    v9 = (v6 + 47 - (v6 + 47) >> 31) + (47 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_408114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_408114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // ecx\n
    unsigned int v4;  // eax\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
        return 0;\n
    v4 = a0;\n
    if (!v4)\n
        return 0;\n
    tmp_2 = v4;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t2, ecx<4>, 0x0<32>))\n
        return 0;\n
    v6 = v4 * v2;\n
    v7 = cgc_malloc();\n
    if (v7)\n
    {\n
        v0 = v6;\n
        return cgc_memset(v7, 0);\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isalnum": "int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 - 48 < 10 | (v1 & -33) - 65 < 26;\n
}\n
", "4198993:sub_401251": null, "4199008:cgc_isalpha": "int cgc_isalpha(unsigned int v0)\n
{\n
    return (v0 & -33) - 65 < 26;\n
}\n
", "4199027:sub_401273": null, "4199040:cgc_isdigit": "int cgc_isdigit(unsigned int v0)\n
{\n
    return v0 - 48 < 10;\n
}\n
", "4199056:cgc_islower": "int cgc_islower(unsigned int v0)\n
{\n
    return v0 - 97 < 26;\n
}\n
", "4199072:cgc_isupper": "int cgc_isupper(unsigned int v0)\n
{\n
    return v0 - 65 < 26;\n
}\n
", "4199088:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4199102:sub_4012be": null, "4199104:cgc_isblank": "int cgc_isblank(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 9 | v1 == 32;\n
}\n
", "4199126:sub_4012d6": null, "4199136:cgc_iscntrl": "int cgc_iscntrl(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 < 32 | v1 == 127;\n
}\n
", "4199158:sub_4012f6": null, "4199168:cgc_isgraph": "int cgc_isgraph(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return !(v1 < 33) & v1 != 127;\n
}\n
", "4199190:sub_401316": null, "4199200:cgc_isprint": "int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 != 127 & !(v1 < 32);\n
}\n
", "4199222:sub_401336": null, "4199232:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8476 + v0];\n
}\n
", "4199257:sub_401359": null, "4199264:cgc_isspace": "int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    return v1 == 32 | v1 - 9 < 5;\n
}\n
", "4199289:sub_401379": null, "4199296:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[8348 + v0];\n
}\n
", "4199321:sub_401399": null, "4199328:cgc_toascii": "int cgc_toascii(unsigned int v0)\n
{\n
    return v0 & 127;\n
}\n
", "4199336:sub_4013a8": null, "4199344:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 91 >= -26)\n
        return v1 | 32;\n
    return v1;\n
}\n
", "4199363:sub_4013c3": null, "4199376:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // ecx\n
\n
    v1 = v0;\n
    if (v1 - 123 >= -26)\n
        return v1 & 95;\n
    return v1;\n
}\n
", "4199395:sub_4013e3": null, "4199408:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_-14;\n
} struct_0;\n
\n
int cgc_free(struct_0 *v1)\n
{\n
    char v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v2;  // esi\n
    unsigned int *v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v2 = v1;\n
    if (!v2)\n
    {\n
        return v4;\n
    }\n
    else if (v2[5].field_-14)\n
    {\n
        return v4;\n
    }\n
    else\n
    {\n
        v3 = v2 + 6;\n
        if (*(&v0) < 0x40000)\n
        {\n
            cgc_insert_into_flist();\n
            v4 = cgc_coalesce();\n
            return v4;\n
        }\n
        v0 = *(v3);\n
        v4 = cgc_deallocate(v3);\n
        return v4;\n
    }\n
}\n
", "4199487:sub_40143f": null, "4199488:cgc_malloc": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_1 *field_8;\n
    char padding_c[4];\n
    struct struct_0 *field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
extern char cgc_free_lists;\n
extern struct_1 *g_408260;\n
\n
int cgc_malloc(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    char v1;  // [bp-0x14]\n
    char v2;  // [bp-0x10]\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // esi\n
    struct_1 *v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8[6];  // esi\n
    struct_1 *v9;  // edi\n
    struct struct_1 **v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // esi\n
    struct_1 *v12;  // edx, Other Possible Types: unsigned int\n
    unsigned int v13[6];  // eax\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ecx\n
\n
    v4 = v3;\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (v4 - 262120 > -262145)\n
    {\n
        v7 = v4 + 7 & -8;\n
        if (!(v4 & 7))\n
            v7 = v4;\n
        if (v7 < 0)\n
            return 0;\n
        v9 = v7 + 24;\n
        v10 = cgc_get_size_class();\n
        v11 = 0;\n
        if (v10 <= 31)\n
        {\n
            do\n
            {\n
                v12 = *(&(&cgc_free_lists)[4 * v10]);\n
                if (v12)\n
                {\n
                    do\n
                    {\n
                        if (*(v12) >= v9)\n
                        {\n
                            v11 = v12;\n
                            goto LABEL_40151f;\n
                        }\n
                        v12 = *((v12 + 8));\n
                    } while (v12);\n
                }\n
                v10 += 1;\n
            } while (v10 != 32);\n
        }\n
LABEL_40151f:\n
        if (v11)\n
        {\n
LABEL_401523:\n
            cgc_remove_from_flist();\n
            v14 = *(v11) - v9;\n
            if (v14 >= 49)\n
            {\n
                v15 = v9 + v11;\n
                *((&v9->field_0 + v11)) = v14;\n
                *(&v9->padding_4[v11]) = 1;\n
                *((8 + &v9->field_0 + v11)) = 0;\n
                *(&v9->padding_c[v11]) = 0;\n
                *(v11) = v9;\n
                *((20 + &v9->field_0 + v11)) = v11;\n
                *((16 + &v9->field_0 + v11)) = *((v11 + 16));\n
                v16 = *((v11 + 16));\n
                if (v16)\n
                    v16->field_14 = v15;\n
                *((v11 + 16)) = v15;\n
                cgc_insert_into_flist();\n
            }\n
            v5 = v11 + 24;\n
            return v5;\n
        }\n
        else\n
        {\n
            v0 = &v2;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v13 = *(&v2);\n
            if (v13)\n
            {\n
                v13[0] = 0x40000;\n
                v13[1] = 1;\n
                v13[3] = 0;\n
                v13[2] = 0;\n
                v13[5] = 0;\n
                v13[4] = 0;\n
                cgc_insert_into_flist();\n
                v11 = g_408260;\n
                goto LABEL_401523;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v6 = v4 + 24;\n
        v0 = &v1;\n
        if (!cgc_allocate(v6, 0))\n
        {\n
            v8 = *(&v1);\n
            v8[0] = v6;\n
            v8[1] = 0;\n
            v8[3] = 0;\n
            v8[2] = 0;\n
            v8[5] = 0;\n
            v8[4] = 0;\n
            v5 = v8 + 1;\n
            return v5;\n
        }\n
        return 0;\n
    }\n
}\n
", "4199915:sub_4015eb": null, "4199920:cgc_get_size_class": "extern unsigned int size_class_limits;\n
\n
int cgc_get_size_class(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    unsigned int *v2;  // ecx, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v2 = &size_class_limits;\n
    while (true)\n
    {\n
        if (*(v2) >= v0)\n
            return v1;\n
        v1 += 1;\n
        v2 += 4;\n
        if (v1 == 32)\n
            return 32;\n
    }\n
}\n
", "4199973:sub_401625": null, "4199984:cgc_insert_into_flist": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_insert_into_flist(unsigned int v0[4])\n
{\n
    unsigned int v1[4];  // ecx\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    unsigned int v4;  // esi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    while (*(v3) < v1[0])\n
    {\n
        v2 += 1;\n
        v3 += 4;\n
        if (v2 == 32)\n
        {\n
            v2 = 32;\n
            break;\n
        }\n
    }\n
    v1[1] = 1;\n
    v4 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]);\n
    if (!v4)\n
    {\n
        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v1;\n
        return &_GLOBAL_OFFSET_TABLE_;\n
    }\n
    v1[2] = v4;\n
    *((*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) + 12)) = v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v1;\n
    v1[3] = 0;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4200093:sub_40169d": null, "4200096:cgc_remove_from_flist": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_remove_from_flist(struct_2 *v0)\n
{\n
    struct_2 *v1;  // eax\n
    unsigned int v2;  // edx\n
    unsigned int *v3;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v4;  // esi\n
    struct_0 *v5;  // edi\n
\n
    v1 = v0;\n
    v2 = 0;\n
    v3 = &size_class_limits;\n
    do\n
    {\n
        if (*(v3) >= v1->field_0)\n
        {\n
            v4 = v1->field_c;\n
            if (v4)\n
                v4->field_8 = v1->field_8;\n
            v5 = v1->field_8;\n
            if (v5)\n
                v5->field_c = v4;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) == v1)\n
            {\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v2]) = v5;\n
                goto LABEL_4016fb;\n
            }\n
        }\n
        v2 += 1;\n
        v3 += 4;\n
    } while (v2 != 32);\n
    v2 = 32;\n
LABEL_4016fb:\n
    v1->field_8 = 0;\n
    v1->field_c = 0;\n
    v1->field_4 = 0;\n
    return v0;\n
}\n
", "4200211:sub_401713": null, "4200224:cgc_coalesce": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
    struct struct_3 *field_10;\n
    struct struct_2 *field_14;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int size_class_limits;\n
\n
int cgc_coalesce(struct_3 *v0)\n
{\n
    struct_3 *v1;  // eax, Other Possible Types: unsigned int\n
    struct_2 *v2;  // edx\n
    struct_3 *v3;  // esi\n
    unsigned int *v4;  // ebx, Other Possible Types: unsigned int\n
    struct_3 *v5;  // esi\n
    unsigned int v6;  // esi\n
    struct_1 *v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int *v9;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v10;  // ebx\n
    struct_3 *v11;  // edx\n
    struct_1 *v12;  // edi\n
    unsigned int v13;  // esi\n
    unsigned int *v14;  // ebx, Other Possible Types: unsigned int\n
    struct_3 *v15;  // edx\n
    unsigned int v16;  // esi\n
    unsigned int *v17;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v18;  // ebx\n
    struct_1 *v19;  // edi\n
    struct_1 *v20;  // edi\n
    struct_0 *v21;  // ebx\n
    unsigned int v22;  // edx\n
    unsigned int v23;  // esi\n
    unsigned int *v24;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v25;  // ebx\n
    struct_1 *v26;  // edi\n
    unsigned int v27;  // edx\n
    unsigned int v28;  // esi\n
    unsigned int *v29;  // edi, Other Possible Types: unsigned int\n
    unsigned int v30;  // edx\n
    unsigned int v31;  // esi\n
    unsigned int *v32;  // edi, Other Possible Types: unsigned int\n
    struct_0 *v33;  // ebx\n
    struct_1 *v34;  // edi\n
    struct_1 *v35;  // edi\n
    struct_0 *v36;  // ebx\n
    struct_2 *v37;  // esi\n
    unsigned int v38;  // edx\n
    unsigned int v39;  // edi\n
    unsigned int *v40;  // ebx, Other Possible Types: unsigned int\n
    struct_0 *v41;  // ebx\n
    unsigned int v42;  // edx\n
    unsigned int v43;  // edx\n
    unsigned int v44;  // esi\n
    unsigned int *v45;  // edi, Other Possible Types: unsigned int\n
    struct_2 *v46;  // esi\n
    unsigned int v47;  // edx\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // edi\n
    unsigned int *v50;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // edx\n
    struct_3 *v53;  // edx\n
    struct_2 *v54;  // ecx\n
    struct_3 *v55;  // edx\n
    struct_2 *v56;  // ecx\n
\n
    v1 = v0;\n
    v2 = v1->field_14;\n
    if (!v2)\n
        return v1;\n
    if (v2->field_4)\n
    {\n
        v3 = v1->field_10;\n
        if (v3 && v3->field_4)\n
        {\n
            v6 = 0;\n
            v4 = &size_class_limits;\n
            do\n
            {\n
                if (*(v4) >= v2->field_0)\n
                {\n
LABEL_401784:\n
                    v7 = v2->field_c;\n
                    if (v7)\n
                        v7->field_8 = v2->field_8;\n
                    v10 = v2->field_8;\n
                    if (v10)\n
                        v10->field_c = v7;\n
                    if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v6]) == v2)\n
                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v6]) = v10;\n
                    v2->field_8 = 0;\n
                    v2->field_c = 0;\n
                    v2->field_4 = 0;\n
                    v15 = v1->field_10;\n
                    v16 = 0;\n
                    v17 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v17) >= v15->field_0)\n
                        {\n
LABEL_4017e4:\n
                            v20 = v15->field_c;\n
                            if (v20)\n
                                v20->field_8 = v15->field_8;\n
                            v25 = v15->field_8;\n
                            if (v25)\n
                                v25->field_c = v20;\n
                            if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v16]) == v15)\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v16]) = v25;\n
                            v15->field_8 = 0;\n
                            v15->field_c = 0;\n
                            v15->field_4 = 0;\n
                            v30 = v1->field_0;\n
                            v31 = 0;\n
                            v32 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v32) >= v30)\n
                                {\n
LABEL_401844:\n
                                    v35 = v1->field_c;\n
                                    if (v35)\n
                                        v35->field_8 = v1->field_8;\n
                                    v41 = v1->field_8;\n
                                    if (v41)\n
                                        v41->field_c = v35;\n
                                    if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v31]) == v1)\n
                                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v31]) = v41;\n
                                    v1->field_8 = 0;\n
                                    v1->field_c = 0;\n
                                    v1->field_4 = 0;\n
                                    v46 = v1->field_14;\n
                                    v47 = v30 + v46->field_0;\n
                                    v46->field_0 = v47;\n
                                    v48 = v47 + v1->field_10->field_0;\n
                                    v46->field_0 = v48;\n
                                    v49 = 0;\n
                                    v50 = &size_class_limits;\n
                                    do\n
                                    {\n
                                        if (*(v50) >= v48)\n
                                        {\n
LABEL_4018b4:\n
                                            v46->field_4 = 1;\n
                                            v52 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v49]);\n
                                            if (!v52)\n
                                            {\n
                                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v49]) = v46;\n
                                            }\n
                                            else\n
                                            {\n
                                                v46->field_8 = v52;\n
                                                *((*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v49]) + 12)) = v46;\n
                                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v49]) = v46;\n
                                                v46->field_c = 0;\n
                                            }\n
                                            v53 = v1->field_10;\n
                                            v54 = v53->field_14;\n
                                            if (v54)\n
                                                v54->field_10 = v53->field_10;\n
                                            v55 = v53->field_10;\n
                                            if (v55)\n
                                            {\n
                                                v55->field_14 = v54;\n
                                                goto LABEL_401b96;\n
                                            }\n
                                        }\n
                                        v49 += 1;\n
                                        v50 += 4;\n
                                    } while (v49 != 32);\n
                                    v49 = 32;\n
                                    goto LABEL_4018b4;\n
                                }\n
                                v31 += 1;\n
                                v32 += 4;\n
                            } while (v31 != 32);\n
                            v31 = 32;\n
                            goto LABEL_401844;\n
                        }\n
                        v16 += 1;\n
                        v17 += 4;\n
                    } while (v16 != 32);\n
                    v16 = 32;\n
                    goto LABEL_4017e4;\n
                }\n
                v6 += 1;\n
                v4 += 4;\n
            } while (v6 != 32);\n
            v6 = 32;\n
            goto LABEL_401784;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (v2->field_4)\n
    {\n
        v5 = v1->field_10;\n
        if (v5 && !v5->field_4)\n
        {\n
            v8 = 0;\n
            v9 = &size_class_limits;\n
            do\n
            {\n
                if (*(v9) >= v2->field_0)\n
                {\n
                    v12 = v2->field_c;\n
                    if (v12)\n
                        v12->field_8 = v2->field_8;\n
                    v18 = v2->field_8;\n
                    if (v18)\n
                        v18->field_c = v12;\n
                    if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v8]) == v2)\n
                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v8]) = v18;\n
                    v2->field_8 = 0;\n
                    v2->field_c = 0;\n
                    v2->field_4 = 0;\n
                    v22 = v1->field_0;\n
                    v23 = 0;\n
                    v24 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v24) >= v22)\n
                        {\n
LABEL_401af4:\n
                            v26 = v1->field_c;\n
                            if (v26)\n
                                v26->field_8 = v1->field_8;\n
                            v33 = v1->field_8;\n
                            if (v33)\n
                                v33->field_c = v26;\n
                            if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v23]) == v1)\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v23]) = v33;\n
                            v1->field_8 = 0;\n
                            v1->field_c = 0;\n
                            v1->field_4 = 0;\n
                            v37 = v1->field_14;\n
                            v38 = v22 + v37->field_0;\n
                            v37->field_0 = v38;\n
                            v39 = 0;\n
                            v40 = &size_class_limits;\n
                            do\n
                            {\n
                                if (*(v40) >= v38)\n
                                {\n
LABEL_401b54:\n
                                    v37->field_4 = 1;\n
                                    v42 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v39]);\n
                                    if (!v42)\n
                                    {\n
                                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v39]) = v37;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                    else\n
                                    {\n
                                        v37->field_8 = v42;\n
                                        *((*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v39]) + 12)) = v37;\n
                                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v39]) = v37;\n
                                        v37->field_c = 0;\n
                                        goto LABEL_401b96;\n
                                    }\n
                                }\n
                                v39 += 1;\n
                                v40 += 4;\n
                            } while (v39 != 32);\n
                            v39 = 32;\n
                            goto LABEL_401b54;\n
                        }\n
                        v23 += 1;\n
                        v24 += 4;\n
                    } while (v23 != 32);\n
                    v23 = 32;\n
                    goto LABEL_401af4;\n
                }\n
                v8 += 1;\n
                v9 += 4;\n
            } while (v8 != 32);\n
            v8 = 32;\n
LABEL_401b96:\n
            v56 = *((v1 + 20));\n
            if (v56)\n
                v56->field_10 = *((v1 + 16));\n
            v1 = *((v1 + 16));\n
            if (!v1)\n
                return v1;\n
            *((v1 + 20)) = v56;\n
        }\n
    }\n
    if (!v2)\n
        return v1;\n
    if (v2->field_4)\n
        return v1;\n
    v11 = v1->field_10;\n
    if (!v11)\n
        return v1;\n
    if (!v11->field_4)\n
        return v1;\n
    v13 = 0;\n
    v14 = &size_class_limits;\n
    do\n
    {\n
        if (*(v14) >= v11->field_0)\n
        {\n
LABEL_401954:\n
            v19 = v11->field_c;\n
            if (v19)\n
                v19->field_8 = v11->field_8;\n
            v21 = v11->field_8;\n
            if (v21)\n
                v21->field_c = v19;\n
            if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v13]) == v11)\n
                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v13]) = v21;\n
            v11->field_8 = 0;\n
            v11->field_c = 0;\n
            v11->field_4 = 0;\n
            v27 = v1->field_0;\n
            v28 = 0;\n
            v29 = &size_class_limits;\n
            do\n
            {\n
                if (*(v29) >= v27)\n
                {\n
LABEL_4019b4:\n
                    v34 = v1->field_c;\n
                    if (v34)\n
                        v34->field_8 = v1->field_8;\n
                    v36 = v1->field_8;\n
                    if (v36)\n
                        v36->field_c = v34;\n
                    if (*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v28]) == v1)\n
                        *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v28]) = v36;\n
                    v1->field_8 = 0;\n
                    v1->field_c = 0;\n
                    v1->field_4 = 0;\n
                    v43 = v27 + v1->field_10->field_0;\n
                    v1->field_0 = v43;\n
                    v44 = 0;\n
                    v45 = &size_class_limits;\n
                    do\n
                    {\n
                        if (*(v45) >= v43)\n
                        {\n
LABEL_401a14:\n
                            v1->field_4 = 1;\n
                            v51 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v44]);\n
                            if (!v51)\n
                            {\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v44]) = v1;\n
                            }\n
                            else\n
                            {\n
                                v1->field_8 = v51;\n
                                *((*(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v44]) + 12)) = v1;\n
                                *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 4 * v44]) = v1;\n
                                v1->field_c = 0;\n
                            }\n
                            v1 = v1->field_10;\n
                            goto LABEL_401b96;\n
                        }\n
                        v44 += 1;\n
                        v45 += 4;\n
                    } while (v44 != 32);\n
                    v44 = 32;\n
                    goto LABEL_401a14;\n
                }\n
                v28 += 1;\n
                v29 += 4;\n
            } while (v28 != 32);\n
            v28 = 32;\n
            goto LABEL_4019b4;\n
        }\n
        v13 += 1;\n
        v14 += 4;\n
    } while (v13 != 32);\n
    v13 = 32;\n
    goto LABEL_401954;\n
    goto LABEL_401b96;\n
}\n
", "4201393:sub_401bb1": null, "4201408:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4201464:sub_401bf8": null, "4201472:cgc_memcmp": "int cgc_memcmp(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = 0;\n
        do\n
        {\n
            v3 = *((v0 + v2));\n
            v4 = *((a0 + v2));\n
            if (v4 != v3)\n
                return v4 - v3;\n
            v2 += 1;\n
        } while (v1 != v2);\n
    }\n
    return 0;\n
}\n
", "4201533:sub_401c3d": null, "4201536:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4201585:sub_401c71": null, "4201600:cgc_memmove": "int cgc_memmove(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // ecx\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // esi\n
    unsigned int v5;  // esi\n
\n
    v1 = a1;\n
    v2 = a0;\n
    v3 = v0;\n
    if (v3 < v2)\n
    {\n
        if (!v1)\n
            return v0;\n
        v4 = 0;\n
        do\n
        {\n
            *((v3 + v4)) = v2[v4];\n
            v4 += 1;\n
        } while (v1 != v4);\n
        return v0;\n
    }\n
    else\n
    {\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x6<32>, eax<4>, ecx<4>, 0x0<32>))\n
        {\n
            return v0;\n
        }\n
        else if (!v1)\n
        {\n
            return v0;\n
        }\n
        else\n
        {\n
            v5 = v1;\n
            do\n
            {\n
                *((v3 + v1 - 1)) = v2[1 + v1];\n
                v5 -= 1;\n
                v1 = v5;\n
            } while (v5 != 1);\n
            return v0;\n
        }\n
    }\n
}\n
", "4201683:sub_401cd3": null, "4201696:cgc_memset": "int cgc_memset(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    char *v1;  // eax\n
    unsigned int v2;  // ecx\n
    unsigned int v3;  // esi\n
\n
    v1 = v0;\n
    if (!v1)\n
        return 0;\n
    v2 = a1;\n
    if (!v2)\n
        return v0;\n
    v3 = 0;\n
    do\n
    {\n
        v1[v3] = a0;\n
        v3 += 1;\n
    } while (v2 != v3);\n
    return v0;\n
}\n
", "4201744:cgc_output_number_printf": "int cgc_output_number_printf(unsigned int v5, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_2;  // tmp #2\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    void* v2;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x18]\n
    char v4;  // [bp-0x14]\n
    unsigned int v6;  // ebp\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    char v12;  // al\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // edx\n
    unsigned int v15;  // esi\n
    char v16;  // al\n
\n
    v6 = a3;\n
    v7 = a2;\n
    v8 = a1;\n
    v9 = a0;\n
    v14 = v5;\n
    if (v9 < v8)\n
    {\n
        v3 = v9;\n
        v2 = 0;\n
    }\n
    else\n
    {\n
        tmp_9 = (0 CONCAT v9) /m v8;\n
        v3 = tmp_9 >> 32;\n
        v14 = v5;\n
        v2 = cgc_output_number_printf(v5, (0 CONCAT v9) /m v8, v8, v7 - 1, v6);\n
    }\n
    v12 = v6;\n
    if (v7 > 0 && !v2)\n
    {\n
        tmp_2 = v7;\n
        v13 = v7 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                if (!(v12 & 1))\n
                    v1 = 32;\n
                else\n
                    v1 = 48;\n
                v0 = &v4;\n
                cgc_transmit(v14, &v1, 1);\n
                v12 = v6;\n
                v14 = v5;\n
                tmp_6 = v13;\n
                v13 -= 1;\n
            } while (tmp_6 != 1);\n
        }\n
    }\n
    if (!(v12 & 2))\n
    {\n
        v15 = v3;\n
        v16 = v15 + 87;\n
    }\n
    else\n
    {\n
        v15 = v3;\n
        v16 = v15 + 55;\n
    }\n
    if (v15 < 10)\n
        v16 = v15 + 48;\n
    v1 = v16;\n
    v0 = &v4;\n
    cgc_transmit();\n
    return v2 + 1;\n
}\n
", "4201865:sub_401d89": null, "4201985:sub_401e01": null, "4202000:cgc_fdprintf": "int cgc_fdprintf(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    char v1;  // [bp-0x1d]\n
    char v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x14]\n
    char v6;  // [bp+0xc]\n
    unsigned int v7;  // [bp+0x10]\n
    unsigned int v8;  // [bp+0x14]\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // esi\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // esi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // edi\n
\n
    v3 = &v6;\n
    v9 = a0;\n
    if (!*(v9))\n
        return 0;\n
    v10 = &v2;\n
    do\n
    {\n
        a0 = v9 + 1;\n
        *(&v9) = *(v9);\n
        if (v1 == 37)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                v11 = a0;\n
                a0 = v11 + 1;\n
                v17 = *(v11);\n
                v12 = v17;\n
                if (v12 - 49 >= 9)\n
                    break;\n
                v13 = cgc_strtol(v11, &a0);\n
            }\n
            switch (v12)\n
            {\n
            case 88:\n
                break;\n
            case 100:\n
                v14 = v3;\n
                v3 = v14 + 4;\n
                if (*(v14) < 0)\n
                {\n
LABEL_401fff:\n
                    v1 = 45;\n
                    v0 = &v2;\n
                    cgc_transmit(v14, &v1, 1);\n
                }\n
                goto LABEL_401fd6;\n
            case 115:\n
                v15 = v3;\n
                v3 = v15 + 4;\n
                v16 = *(v15);\n
                v10 = &v2;\n
                if (cgc_strlen())\n
                {\n
                    v18 = 0;\n
                    do\n
                    {\n
                        v1 = *((v16 + v18));\n
                        v0 = v10;\n
                        cgc_transmit(v5, &v1, 1);\n
                        v18 += 1;\n
                        v10 = &v2;\n
                    } while (v18 < cgc_strlen(v16, &v1, 1));\n
                }\n
                goto LABEL_401e68;\n
            case 117:\n
                v3 += 4;\n
                goto LABEL_401fd6;\n
            case 120:\n
                break;\n
            case 99:\n
                v17 = v3;\n
                v3 = v17 + 4;\n
                *(&v17) = *(v17);\n
            case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 116: case 118: case 119:\n
LABEL_401f14:\n
                v1 = v17;\n
                goto LABEL_401fe3;\n
            default:\n
                if (v12 == 37)\n
                {\n
                    v1 = 37;\n
LABEL_401fe3:\n
                    v0 = &v2;\n
                    goto LABEL_401fff;\n
                }\n
                if (v12 == 48)\n
                    goto LABEL_0x401ee0;\n
                else\n
                    goto LABEL_401f14;\n
            }\n
            v3 += 4;\n
LABEL_401fd6:\n
            cgc_output_number_printf(v5, a0, *(&v6), v7, v8);\n
            v10 = &v2;\n
            goto LABEL_401e68;\n
        }\n
        v1 = v9;\n
        v0 = v10;\n
        cgc_transmit(v5, &v1, 1);\n
        v10 = &v2;\n
LABEL_401e68:\n
        v9 = a0;\n
    } while (*(v9));\n
    return 0;\n
}\n
", "4202050:sub_401e42": null, "4202130:sub_401e92": null, "4202218:sub_401eea": null, "4202572:sub_40204c": null, "4202576:cgc_output_number_sprintf": "int cgc_output_number_sprintf(unsigned int *v5, struct struct_0 **a0, unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)\n
{\n
    unsigned int v0;  // [bp-0x18], Other Possible Types: char\n
    int tmp_2;  // tmp #2\n
    int tmp_12;  // tmp #12\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // esi\n
    unsigned int v10;  // ecx\n
    struct struct_0 **v11;  // ebp\n
    unsigned int *v12;  // edi\n
    void* v13;  // eax, Other Possible Types: unsigned int\n
    char v14;  // bl\n
    unsigned int v15;  // esi\n
    unsigned int v16;  // esi\n
    unsigned int v18;  // eax\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v2 = v8;\n
    v9 = a3;\n
    v10 = a2;\n
    v11 = a0;\n
    v12 = v5;\n
    v13 = 0;\n
    if (*(&v0) < v10)\n
    {\n
        v0 = a1;\n
    }\n
    else\n
    {\n
        v1 = v9 - 1;\n
        v0 = (0 CONCAT *(&v0)) /m v10 >> 32;\n
        v13 = cgc_output_number_sprintf(v12, v11, (0 CONCAT *(&v0)) /m v10, v10, v1, a4);\n
    }\n
    v14 = a4;\n
    if (v9 > 0 && !v13)\n
    {\n
        tmp_2 = v9;\n
        v15 = v9 - 1;\n
        if (tmp_2 != 1)\n
        {\n
            do\n
            {\n
                *(v11)->field_0 = ((v14 & 1) * 16) | 32;\n
                *(v11) = *(v11) + 1;\n
                *(v12) = *(v12) + 1;\n
                tmp_12 = v15;\n
                v15 -= 1;\n
            } while (tmp_12 != 1);\n
        }\n
    }\n
    v16 = v0;\n
    *(&*(v11)) = (!(v16 < 10) ? 48 : ((!(v14 & 2)) * 32 + 55)) + v16;\n
    *(v11) = *(v11) + 1;\n
    *(v12) = *(v12) + 1;\n
    v18 = v13 + 1;\n
    return v18;\n
}\n
", "4202775:sub_402117": null, "4202784:cgc_sprintf": "int cgc_sprintf(char *v8, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x1c], Other Possible Types: unsigned int\n
    struct struct_1 **v6;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v9;  // [bp+0xc]\n
    struct struct_0 **v10;  // eax\n
    char *v11;  // ecx\n
    unsigned int v12;  // eax\n
    struct struct_0 **v13;  // ecx\n
    struct struct_0 **v14;  // dl\n
    void* v15;  // esi, Other Possible Types: unsigned int\n
    char *v16;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // edi\n
    struct struct_1 **v18;  // ecx\n
    unsigned int v19;  // ecx\n
    struct struct_1 **v20;  // eax\n
    char *v21;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v22;  // edi\n
    struct struct_1 **v23;  // ecx\n
    char *v24;  // edx\n
    unsigned int v25;  // edi\n
    char *v26;  // eax\n
\n
    v5 = 0;\n
    v6 = &v9;\n
    while (true)\n
    {\n
        v10 = a0;\n
        if (!*(v10))\n
            break;\n
        a0 = v10 + 1;\n
        *(&v10) = *(v10);\n
        if (*(&v10) != 37)\n
        {\n
            v11 = v8;\n
            *(v11) = v10;\n
            v8 = v11 + 1;\n
            v5 += 1;\n
        }\n
        else\n
        {\n
            v7 = 0;\n
            v15 = 0;\n
            while (true)\n
            {\n
                v12 = v15 | 1;\n
                do\n
                {\n
                    v17 = v15;\n
                    v13 = a0;\n
                    a0 = v13 + 1;\n
                    v14 = *(v13);\n
                    v15 = v12;\n
                } while (v14 == 48);\n
                switch (v14)\n
                {\n
                case 37:\n
                    v16 = v8;\n
                    *(v16) = 37;\n
                    goto LABEL_4022a7;\n
                case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:\n
                    v4 = 10;\n
                    v7 = cgc_strtol(v13, &a0);\n
                    v15 = v17;\n
                    continue;\n
                case 100:\n
                    v18 = v6;\n
                    v6 = v18 + 1;\n
                    v19 = *(v18);\n
                    if (v19 < 0)\n
                    {\n
                        v24 = v8;\n
                        *(v24) = 45;\n
                        v8 = v24 + 1;\n
                        v5 += 1;\n
                        v19 = -(v19);\n
                    }\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 10;\n
                    v0 = v19;\n
LABEL_40222e:\n
                    cgc_output_number_sprintf(&v5, &v8, v0, v1, v2, v3);\n
                    break;\n
                case 115:\n
                    v20 = v6;\n
                    v6 = v20 + 1;\n
                    v21 = v8;\n
                    v22 = v5;\n
                    if (cgc_strlen())\n
                    {\n
                        v7 = v22;\n
                        v25 = 0;\n
                        do\n
                        {\n
                            v21[v25] = (*(v20))[v25].field_0;\n
                            v25 += 1;\n
                        } while (v25 < cgc_strlen());\n
                        v21 = &v21[v25];\n
                        v22 = v7 + v25;\n
                    }\n
                    v8 = v21;\n
                    v5 = v22;\n
                    break;\n
                case 88:\n
                    v17 |= 2;\n
                case 120:\n
                    v23 = v6;\n
                    v6 = v23 + 1;\n
                    v3 = v17;\n
                    v2 = v7;\n
                    v1 = 16;\n
                    v0 = *(v23);\n
                    goto LABEL_40222e;\n
                default:\n
                    v16 = v8;\n
                    *(v16) = v14;\n
LABEL_4022a7:\n
                    v8 = v16 + 1;\n
                    v5 += 1;\n
                    break;\n
                }\n
            }\n
        }\n
    }\n
    v26 = v8;\n
    v8 = v26 + 1;\n
    *(v26) = 0;\n
    return v5;\n
}\n
", "4202820:sub_402144": null, "4203216:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-18;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // edi\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    void* v5;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!v2)\n
    {\n
        v5 = cgc_malloc(v1);\n
        return v5;\n
    }\n
    if (!v1)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        v3 = cgc_malloc(v1);\n
        if (v3)\n
        {\n
            v5 = v3;\n
            v4 = v2[6].field_-18 - 24;\n
            if (v4 > v1)\n
                v4 = v1;\n
            cgc_memcpy(v5, v2, v4);\n
            cgc_free(v2);\n
            return v5;\n
        }\n
    }\n
    return 0;\n
}\n
", "4203334:sub_402346": null, "4203344:cgc_strcasecmp": "int cgc_strcasecmp(char v0[2], char *a0)\n
{\n
    char *v1;  // edi, Other Possible Types: unsigned int\n
    char v2[2];  // ebp, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax, Other Possible Types: char\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v6 = v0[0];\n
    while (true)\n
    {\n
        if (!v6)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        v3 = *(v1);\n
        if (!v3)\n
            return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        if (v6 != v3)\n
        {\n
            v5 = cgc_tolower(v6);\n
            if (v5 != cgc_tolower(*(v1)))\n
                return cgc_tolower(*(v2)) - cgc_tolower(*(v1));\n
        }\n
        v1 += 1;\n
        v6 = *((v2 + 1));\n
        v2 += 1;\n
    }\n
}\n
", "4203466:sub_4023ca": null, "4203472:cgc_strcat": "int cgc_strcat(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_strlen() + v2;\n
    v0 = a0;\n
    cgc_strcpy(v4);\n
    return v2;\n
}\n
", "4203529:sub_402409": null, "4203536:cgc_strchr": "int cgc_strchr(char *v0, unsigned int a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0;\n
    while (true)\n
    {\n
        v2 = *(v1);\n
        if (!v2)\n
            return 0;\n
        v1 += 1;\n
        if (v2 == a0)\n
            return v1;\n
    }\n
}\n
", "4203570:sub_402432": null, "4203584:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    char *v1;  // eax, Other Possible Types: unsigned int\n
    char *v2;  // edx\n
    char *v3;  // edx, Other Possible Types: unsigned int\n
    char v4;  // cl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    if (!*(v2))\n
        return *(a0) - *(v2);\n
    v3 = v2 + 1;\n
    while (*(v1))\n
    {\n
        if (v4 != *(v1))\n
            break;\n
        v1 += 1;\n
        v4 = *(v3);\n
        v3 += 1;\n
        if (!v4)\n
            break;\n
    }\n
    return *(v1) - v4;\n
}\n
", "4203648:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // dl\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    if (!*(v1))\n
    {\n
        v5 = 0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        do\n
        {\n
            v5 = v4 + 1;\n
            v2[v4] = v3;\n
            v3 = v1[1 + v4];\n
            v4 = v5;\n
        } while (v3);\n
    }\n
    v2[v5] = 0;\n
    return v0;\n
}\n
", "4203708:sub_4024bc": null, "4203712:cgc_strdup": "int cgc_strdup(unsigned int v0)\n
{\n
    unsigned int v1;  // edi\n
    unsigned int v2;  // eax\n
\n
    v1 = cgc_strlen() + 1;\n
    v2 = cgc_malloc(v1);\n
    if (!v2)\n
        return 0;\n
    cgc_memcpy(v2, v0, v1);\n
    return v2;\n
}\n
", "4203792:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_strncasecmp": "int cgc_strncasecmp(char *v0, char *a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edx\n
    char *v2;  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    char v4;  // cl\n
    char *v5;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    for (v5 = v0; v1 != 1; v2 += 1)\n
    {\n
        v3 = *(v5);\n
        if (!v3)\n
            break;\n
        v4 = *(v2);\n
        if (!v4)\n
            break;\n
        if (v3 != v4)\n
        {\n
            v1 = a1;\n
            if (cgc_tolower(v3) != cgc_tolower(*(v2)))\n
                break;\n
        }\n
        v5 += 1;\n
    }\n
    v6 = cgc_tolower(*(v5)) - cgc_tolower(*(v2));\n
    return v6;\n
}\n
", "4203861:sub_402555": null, "4203972:sub_4025c4": null, "4203984:cgc_strncmp": "int cgc_strncmp(char *v0, char *a0, unsigned int a1)\n
{\n
    int tmp_4;  // tmp #4\n
    int tmp_8;  // tmp #8\n
    unsigned int v1;  // edx\n
    char *v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // esi\n
    char *v4;  // edi\n
    char v5;  // bl\n
    unsigned int v6;  // edx\n
    char *v7;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v8;  // eax\n
\n
    v1 = a1;\n
    if (!v1)\n
        return 0;\n
    v2 = a0;\n
    v7 = v0;\n
    tmp_4 = v1;\n
    v6 = v1 - 1;\n
    if (tmp_4 != 1)\n
    {\n
        v3 = &v7[v6];\n
        v4 = &v2[v6];\n
        while (true)\n
        {\n
            v5 = *(v7);\n
            if (!v5)\n
                break;\n
            if (!*(v2))\n
                break;\n
            if (v5 != *(v2))\n
                break;\n
            v7 += 1;\n
            v2 += 1;\n
            tmp_8 = v6;\n
            v6 -= 1;\n
            if (tmp_8 == 1)\n
            {\n
                v7 = v3;\n
                v2 = v4;\n
                break;\n
            }\n
        }\n
    }\n
    v8 = *(v2) - *(v7);\n
    return v8;\n
}\n
", "4204064:cgc_strncpy": "int cgc_strncpy(char *v0, unsigned int a0, char *a1)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a1;\n
    v2 = v0;\n
    if (!v1)\n
    {\n
        v4 = 0;\n
        if (0 >= v1)\n
            return v0;\n
    }\n
    else\n
    {\n
        v4 = 0;\n
        while (true)\n
        {\n
            v3 = *((a0 + v4));\n
            v2[v4] = v3;\n
            if (!v3)\n
                break;\n
            v4 += 1;\n
            if (v1 == v4)\n
            {\n
                v4 = v1;\n
                break;\n
            }\n
        }\n
        if (v4 >= v1)\n
            return v0;\n
    }\n
    do\n
    {\n
        v2[v4] = 0;\n
        v4 += 1;\n
    } while (v1 != v4);\n
    return v0;\n
}\n
", "4204150:sub_402676": null, "4204160:cgc_strsep": "int cgc_strsep(struct struct_0 **v0, char *a0)\n
{\n
    struct struct_0 **v1;  // esi\n
    char v2[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v3;  // al, Other Possible Types: char\n
    unsigned int v4;  // eax\n
    char v6[2];  // edi, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return 0;\n
    v3 = v2[0];\n
    if (v2[0])\n
    {\n
        while (true)\n
        {\n
            v4 = cgc_strchr(a0, v3);\n
            if (v4)\n
                break;\n
            v3 = *((v2 + 1));\n
            v2 += 1;\n
            if (!v3)\n
                break;\n
        }\n
    }\n
    if (!*(v2))\n
    {\n
        v6 = 0;\n
    }\n
    else\n
    {\n
        *(v2) = 0;\n
        v6 = v2 + 1;\n
    }\n
    *(v1) = v6;\n
    return *(v1);\n
}\n
", "4204270:sub_4026ee": null, "4204272:cgc_strtol": "int cgc_strtol(char *v3, unsigned int *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // esi\n
    unsigned int *v5;  // ecx, Other Possible Types: unsigned int\n
    char *v6;  // edx, Other Possible Types: unsigned int\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    char *v8;  // ebx, Other Possible Types: unsigned int\n
    char v9;  // bl\n
    char *v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // edx\n
    unsigned int v12;  // ecx\n
    void* v13;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // ecx\n
    char *v17;  // esi, Other Possible Types: unsigned int\n
\n
    v4 = a1;\n
    v5 = a0;\n
    v6 = v3;\n
    v7 = 0;\n
    if (v4 > 36)\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
    }\n
    else\n
    {\n
        v8 = 0;\n
        v0 = v6;\n
        if (v4 != 1)\n
        {\n
            v10 = v6;\n
            while (true)\n
            {\n
                v9 = *(v10);\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)) && v9 != 32)\n
                    break;\n
                v10 += 1;\n
            }\n
            v11 = 0;\n
            *(&v11) = v9 == 45;\n
            v12 = (*((v10 + v11)) == 43) + v11;\n
            v0 = v10 + v12;\n
            if (!v4)\n
            {\n
                v4 = 10;\n
                if (*(v0) == 48)\n
                {\n
                    if ((*((v10 + v12 + 1)) | 32) == 120)\n
                    {\n
                        v0 = v10 + v12 + 2;\n
                        v4 = 16;\n
                    }\n
                    else\n
                    {\n
                        v0 = v10 + v12 + 1;\n
                        v4 = 8;\n
                    }\n
                }\n
            }\n
            else if (v4 == 16)\n
            {\n
                v4 = 16;\n
                if (*(v0) == 48 && (*((v10 + v12 + 1)) | 32) == 120)\n
                    v0 = v10 + v12 + 2;\n
            }\n
            v13 = 0;\n
            v14 = 0;\n
            v1 = v4;\n
            while (true)\n
            {\n
                v15 = *((v0 + v14));\n
                if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                {\n
                    if (!([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>)))\n
                        break;\n
                    v2 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, ((cl<1> & 0xdf<8>) - 0x41<8>)), 0x1a<32>, 0x0<32>);\n
                }\n
                if ([D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>))\n
                {\n
                    v16 = v15 - 48;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else if (!v2)\n
                {\n
                    v16 = [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (cl<1> - 0x30<8>)), 0xa<32>, 0x0<32>);\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                else\n
                {\n
                    v16 = v15 + [D] x86g_calculate_condition(0x2<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x1a<32>, 0x0<32>) * 32 - 87;\n
                    v4 = v1;\n
                    if (v16 >= v4)\n
                        break;\n
                }\n
                v13 = v4 * v13 + v16;\n
                v14 += 1;\n
            }\n
            v7 = -(v13);\n
            if (v9 != 45)\n
                v7 = v13;\n
            v8 = v14;\n
            v0 += v14;\n
            v5 = a0;\n
            v6 = v3;\n
        }\n
    }\n
    if (!v5)\n
        return v7;\n
    v17 = v0;\n
    if (!v8)\n
        v17 = v6;\n
    *(v5) = v17;\n
    return v7;\n
}\n
", "4204319:sub_40271f": null, "4204558:sub_40280e": null, "4204663:sub_402877": null, "4204672:cgc_strtoul": "int cgc_strtoul(char *v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4204713:sub_4028a9": null, "4204720:cgc_create_adjacent_coords": "int cgc_create_adjacent_coords(unsigned int v0, unsigned int a0)\n
{\n
    unsigned int v1;  // esi\n
    unsigned int v2;  // edi\n
    unsigned int v3[16];  // eax\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // esi\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = cgc_malloc(64);\n
    v4 = v2 - 1;\n
    v3[0] = v4;\n
    v5 = v1 - 1;\n
    v3[1] = v5;\n
    v3[2] = v2;\n
    v3[3] = v5;\n
    v6 = v2 + 1;\n
    v3[4] = v6;\n
    v3[5] = v5;\n
    v3[6] = v4;\n
    v3[7] = v1;\n
    v3[8] = v6;\n
    v3[9] = v1;\n
    v3[10] = v4;\n
    v7 = v1 + 1;\n
    v3[11] = v7;\n
    v3[12] = v2;\n
    v3[13] = v7;\n
    v3[14] = v6;\n
    v3[15] = v7;\n
    return v3;\n
}\n
", "4204824:sub_402918": null, "4204832:cgc_bomb_collisions": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[4];\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_1 *field_14;\n
} struct_1;\n
\n
extern unsigned int g_conway_gld;\n
\n
int cgc_bomb_collisions(struct_0 *v8, struct_1 *a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    void* v1;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x28]\n
    void* v3;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    struct_0 *v9;  // ebp, Other Possible Types: unsigned int\n
    void* v10;  // eax, Other Possible Types: unsigned int\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
    unsigned int v13[16];  // ebp\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // edx\n
    unsigned int v17;  // esi\n
    unsigned int v18[18];  // edi\n
    struct_0 *v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct_1 *v21;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v22;  // esi\n
    unsigned int v23;  // ecx\n
    unsigned int v24[4];  // eax\n
    unsigned int v25;  // edx\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // eax\n
\n
    v9 = v8;\n
    v10 = 0;\n
    while (v9)\n
    {\n
        if (*((v9 + 12)))\n
        {\n
            v9 = *((v9 + 20));\n
        }\n
        else\n
        {\n
            v6 = v10;\n
            v11 = *(v9);\n
            v12 = *((v9 + 4));\n
            v2 = v9;\n
            v13 = cgc_malloc(64);\n
            v14 = v11 - 1;\n
            v13[0] = v14;\n
            v15 = v12 - 1;\n
            v13[1] = v15;\n
            v13[2] = v11;\n
            v13[3] = v15;\n
            v16 = v11 + 1;\n
            v13[4] = v16;\n
            v13[5] = v15;\n
            v13[6] = v14;\n
            v13[7] = v12;\n
            v13[8] = v16;\n
            v13[9] = v12;\n
            v13[10] = v14;\n
            v17 = v12 + 1;\n
            v13[11] = v17;\n
            v13[12] = v11;\n
            v13[13] = v17;\n
            v13[14] = v16;\n
            v13[15] = v17;\n
            v18 = cgc_malloc(72);\n
            cgc_memcpy(v18, v13, 64);\n
            v19 = v2;\n
            v20 = v19->field_0;\n
            v18[17] = v19->field_4;\n
            v18[16] = v20;\n
            cgc_free(v13);\n
            v21 = a0;\n
            if (!a0)\n
            {\n
                v1 = 0;\n
            }\n
            else\n
            {\n
                v3 = 0;\n
                v1 = 0;\n
                do\n
                {\n
                    v22 = 0;\n
                    do\n
                    {\n
                        v23 = v18[2 * v22];\n
                        if (v21->field_0 == v23 && v21->field_4 == v18[1 + 2 * v22])\n
                        {\n
                            v7 = g_conway_gld;\n
                            v24 = cgc_qt_get_pixel(g_conway_gld, v23);\n
                            if (v24 && v24[2])\n
                            {\n
                                v24[2] = 0;\n
                                v3 += 1;\n
                                v25 = v1;\n
                                v1 = v25 + v25 * v3 + 100;\n
                                if (!v24[3])\n
                                {\n
                                    v26 = v24[3];\n
                                    v4 = v24[2];\n
                                    v5 = v24[0];\n
                                    v27 = v24[1];\n
                                    v0 = v26;\n
                                    cgc_qt_delete(v5, v27, v4);\n
                                }\n
                            }\n
                            v21 = v21->field_14;\n
                            if (v22 != 9)\n
                                goto LABEL_402a10;\n
                        }\n
                        v22 += 1;\n
                    } while (v22 != 9);\n
                    if (false)\n
                        goto LABEL_402a10;\n
                    v21 = *((v21 + 20));\n
LABEL_402a10:\n
                } while (v21);\n
            }\n
            v9 = v2->field_14;\n
            cgc_free(v18);\n
            v10 = v6 + v1;\n
        }\n
    }\n
    return v10;\n
}\n
", "4205058:sub_402a02": null, "4205087:sub_402a1f": null, "4205246:sub_402abe": null, "4205316:sub_402b04": null, "4205328:cgc_qt_get_pixel": "typedef struct struct_1 {\n
    char padding_0[12];\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
int cgc_qt_get_pixel(struct_1 *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // edi\n
    struct_1 *v2;  // ebp\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (v0->field_10 > v1)\n
        return 0;\n
    if (v2->field_18 <= v1)\n
        return 0;\n
    v3 = a1;\n
    if (v2->field_14 > v3)\n
        return 0;\n
    if (v2->field_1c <= v3)\n
        return 0;\n
    v4 = cgc_find_subregion_tree();\n
    if (v4)\n
    {\n
        v5 = cgc_qt_get_pixel(v4, v1, v3);\n
        return v5;\n
    }\n
    v5 = v2->field_c;\n
    while (true)\n
    {\n
        if (v5)\n
        {\n
            if (*(v5) == v1 && *((v5 + 4)) == v3)\n
                return v5;\n
            v5 = *((v5 + 20));\n
        }\n
        else\n
        {\n
            return 0;\n
        }\n
    }\n
}\n
", "4205422:sub_402b6e": null, "4205452:sub_402b8c": null, "4205456:cgc_qt_delete": "int cgc_qt_delete(unsigned int v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // ebp\n
    unsigned int v7;  // ecx\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edi\n
    unsigned int v16;  // ebp\n
    unsigned int v17;  // ecx\n
    unsigned int v18;  // ebp\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // edi\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // edx\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // ebp\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // ecx\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // edi\n
    unsigned int v30;  // ecx\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // edx\n
    unsigned int v33;  // edi\n
\n
    v5 = v4;\n
    if (*((v7 + 16)) > v4)\n
        return -1;\n
    v8 = v7;\n
    if (*((v7 + 24)) <= v5)\n
        return -1;\n
    v9 = a0;\n
    if (*((v7 + 20)) > v9)\n
    {\n
        return -1;\n
    }\n
    else if (*((v7 + 28)) <= v9)\n
    {\n
        return -1;\n
    }\n
    else\n
    {\n
        if (!cgc_find_subregion_tree())\n
        {\n
            v10 = *((v7 + 12));\n
            if (v10)\n
            {\n
                do\n
                {\n
                    if (v5 == *(v10) && v9 == *((v10 + 4)))\n
                    {\n
                        v12 = *((v10 + 20));\n
                        if (v12)\n
                            *((v12 + 16)) = *((v10 + 16));\n
                        v15 = *((v10 + 16));\n
                        v16 = v15 + 20;\n
                        if (!v15)\n
                            v16 = v7 + 12;\n
                        *(v16) = v12;\n
                        *((v10 + 16)) = 0;\n
                        *((v10 + 20)) = 0;\n
                        cgc_free(v10);\n
                        *((v8 + 8)) = *((v8 + 8)) - 1;\n
                        return 0;\n
                    }\n
                    v10 = *((v10 + 20));\n
                } while (v10);\n
            }\n
        }\n
        else if (!cgc_qt_delete(v4, a0, a1, a2))\n
        {\n
            if (!*((v7 + 32)))\n
                return -1;\n
            v11 = *((v7 + 56));\n
            if (*((v11 + 32)))\n
                return -1;\n
            v13 = *((v7 + 60));\n
            if (*((v13 + 32)))\n
                return -1;\n
            v14 = *((v7 + 64));\n
            if (*((v14 + 32)))\n
            {\n
                return -1;\n
            }\n
            else if (*((*((v8 + 68)) + 32)))\n
            {\n
                return -1;\n
            }\n
            else\n
            {\n
                v3 = v14;\n
                v2 = *((v11 + 8));\n
                v1 = *((v8 + 8)) + v2;\n
                v17 = v3;\n
                v0 = *((v8 + 68));\n
                if (*((v13 + 8)) + v1 + *((v17 + 8)) + *((v0 + 8)) > *((v8 + 4)))\n
                    return -1;\n
                if (v2)\n
                {\n
                    v18 = *((v11 + 12));\n
                    v19 = *((v8 + 12));\n
                    if (!v19)\n
                    {\n
                        *((v8 + 12)) = v18;\n
                    }\n
                    else if (v18)\n
                    {\n
                        do\n
                        {\n
                            v20 = v19;\n
                            v19 = *((v19 + 20));\n
                        } while (v19);\n
                        *((v20 + 20)) = v18;\n
                        *((v18 + 16)) = v20;\n
                    }\n
                    *((v8 + 8)) = v1;\n
                }\n
                v21 = *((v13 + 8));\n
                v22 = v0;\n
                if (v21)\n
                {\n
                    v23 = *((v13 + 12));\n
                    v24 = *((v8 + 12));\n
                    if (!v24)\n
                    {\n
                        *((v8 + 12)) = v23;\n
                    }\n
                    else if (v23)\n
                    {\n
                        do\n
                        {\n
                            v25 = v24;\n
                            v24 = *((v24 + 20));\n
                        } while (v24);\n
                        *((v25 + 20)) = v23;\n
                        *((v23 + 16)) = v25;\n
                        v22 = v0;\n
                    }\n
                    *((v8 + 8)) = *((v8 + 8)) + v21;\n
                }\n
                v26 = *((v17 + 8));\n
                if (v26)\n
                {\n
                    v27 = *((v17 + 12));\n
                    v28 = *((v8 + 12));\n
                    if (!v28)\n
                    {\n
                        *((v8 + 12)) = v27;\n
                    }\n
                    else if (v27)\n
                    {\n
                        do\n
                        {\n
                            v29 = v28;\n
                            v28 = *((v28 + 20));\n
                        } while (v28);\n
                        *((v29 + 20)) = v27;\n
                        *((v27 + 16)) = v29;\n
                    }\n
                    *((v8 + 8)) = *((v8 + 8)) + v26;\n
                }\n
                v30 = *((v22 + 8));\n
                if (v30)\n
                {\n
                    v31 = *((v22 + 12));\n
                    v32 = *((v8 + 12));\n
                    if (!v32)\n
                    {\n
                        *((v8 + 12)) = v31;\n
                    }\n
                    else if (v31)\n
                    {\n
                        do\n
                        {\n
                            v33 = v32;\n
                            v32 = *((v32 + 20));\n
                        } while (v32);\n
                        *((v33 + 20)) = v31;\n
                        *((v31 + 16)) = v33;\n
                    }\n
                    *((v8 + 8)) = *((v8 + 8)) + v30;\n
                }\n
                cgc_free(*((v8 + 56)));\n
                cgc_free(*((v8 + 60)));\n
                cgc_free(*((v8 + 64)));\n
                cgc_free(*((v8 + 68)));\n
                *((v8 + 56)) = 0;\n
                *((v8 + 60)) = 0;\n
                *((v8 + 64)) = 0;\n
                *((v8 + 68)) = 0;\n
                *((v8 + 32)) = 0;\n
                return 0;\n
            }\n
        }\n
        return -1;\n
    }\n
}\n
", "4205773:sub_402ccd": null, "4206098:sub_402e12": null, "4206112:cgc_gld_init_game": "extern struct_0 *g_conway_gld;\n
\n
int cgc_gld_init_game()\n
{\n
    unsigned int v1[18];  // eax\n
\n
    if (!g_conway_gld)\n
    {\n
        v1 = cgc_malloc(72);\n
        v1[0] = 13;\n
        v1[1] = 16;\n
        v1[2] = 0;\n
        v1[3] = 0;\n
        v1[4] = 0;\n
        v1[5] = 0;\n
        v1[6] = 0x2000;\n
        v1[7] = 0x2000;\n
        v1[8] = 0;\n
        v1[9] = cgc_qt_insert;\n
        v1[10] = cgc_qt_get_pixel;\n
        v1[11] = cgc_cg_step;\n
        v1[12] = cgc_shoot_pixel;\n
        v1[13] = cgc_set_bomb;\n
        v1[14] = 0;\n
        v1[15] = 0;\n
        v1[16] = 0;\n
        v1[17] = 0;\n
        g_conway_gld = &v1[0];\n
        return g_conway_gld;\n
    }\n
    return g_conway_gld;\n
}\n
", "4206305:sub_402ee1": null, "4206320:cgc_gld_clear_board": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
extern unsigned int g_conway_gld;\n
\n
int cgc_gld_clear_board()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v2;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v4;  // edi, Other Possible Types: unsigned int\n
\n
    if (!g_conway_gld)\n
        return v2;\n
    v2 = cgc_create_cell_list();\n
    if (!v2)\n
        return v2;\n
    v3 = v2;\n
    v4 = v2;\n
    do\n
    {\n
        v0 = *(v4);\n
        cgc_qt_delete(v0, *((v4 + 4)), *((v4 + 8)), *((v4 + 12)));\n
        v4 = *((v4 + 20));\n
    } while (v4);\n
    do\n
    {\n
        v2 = cgc_free(v3);\n
        v3 = *((v3 + 20));\n
    } while (v3);\n
    return v2;\n
}\n
", "4206445:sub_402f6d": null, "4206448:cgc_create_cell_list": "extern char g_10;\n
\n
int cgc_create_cell_list()\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // edi\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // esi\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // edx\n
    unsigned int v13;  // ecx\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // ecx\n
\n
    v2 = v1;\n
    if (*((v3 + 32)))\n
    {\n
        v7 = cgc_create_cell_list();\n
        v4 = cgc_create_cell_list();\n
        if (!v7)\n
        {\n
            v7 = v4;\n
        }\n
        else if (v4)\n
        {\n
            v9 = v7;\n
            do\n
            {\n
                v10 = v9;\n
                v9 = *((v9 + 20));\n
            } while (v9);\n
            *((v10 + 20)) = v4;\n
            *((v4 + &g_10)) = v10;\n
        }\n
        v11 = cgc_create_cell_list();\n
        if (!v7)\n
        {\n
            v7 = v11;\n
        }\n
        else if (v11)\n
        {\n
            v12 = v7;\n
            do\n
            {\n
                v13 = v12;\n
                v12 = *((v12 + 20));\n
            } while (v12);\n
            *((v13 + 20)) = v11;\n
            *((v11 + &g_10)) = v13;\n
        }\n
        v14 = cgc_create_cell_list();\n
        if (!v7)\n
        {\n
            return v14;\n
        }\n
        else if (!v14)\n
        {\n
            return v7;\n
        }\n
        else\n
        {\n
            v15 = v7;\n
            do\n
            {\n
                v16 = v15;\n
                v15 = *((v15 + 20));\n
            } while (v15);\n
            *((v16 + 20)) = v14;\n
            *((v14 + &g_10)) = v16;\n
            return v7;\n
        }\n
    }\n
    else\n
    {\n
        v8 = *((v3 + 12));\n
        for (v7 = 0; v8; v8 = *((v8 + 20)))\n
        {\n
            if (v2 != 3)\n
            {\n
                if (v2 == 2)\n
                    goto LABEL_40302b;\n
                if (!(v2 == 1))\n
                    goto LABEL_403040;\n
                if (!*((v8 + 8)))\n
                    goto LABEL_402fea;\n
                if (v2 == 2)\n
                    goto LABEL_40302b;\n
                if (!(v2 == 3))\n
                    goto LABEL_403040;\n
            }\n
            if (!*((v8 + 12)))\n
                goto LABEL_402fea;\n
            if (!(v2 == 2))\n
                goto LABEL_403040;\n
LABEL_40302b:\n
            if (!(!*((v8 + 8))))\n
                goto LABEL_402fea;\n
            if (!(!*((v8 + 12))))\n
                goto LABEL_402fea;\n
LABEL_403040:\n
            v5 = cgc_calloc(1, 24);\n
            v6 = *((v8 + 4));\n
            *(v5) = *(v8);\n
            *((v5 + 4)) = v6;\n
            *((v5 + 8)) = *((v8 + 8));\n
            *((v5 + 12)) = *((v8 + 12));\n
            if (!v7)\n
            {\n
LABEL_402fe8:\n
                v7 = v5;\n
            }\n
            else if (v5)\n
            {\n
                *((v5 + 20)) = v7;\n
                *((v5 + &g_10)) = 0;\n
                *((v7 + &g_10)) = v5;\n
                goto LABEL_402fe8;\n
            }\n
LABEL_402fea:\n
        }\n
        return v7;\n
    }\n
}\n
", "4206829:sub_4030ed": null, "4206832:cgc_gld_print_board": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
int cgc_gld_print_board(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v5;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v6;  // eax\n
\n
    v3 = 0;\n
    cgc_print_board_helper();\n
    v5 = v3;\n
    v2 = v4;\n
    cgc_fdprintf(1, \"%s\");\n
    if (v5)\n
    {\n
        do\n
        {\n
            v1 = *((v5 + 4));\n
            v0 = *(v5);\n
            cgc_fdprintf(1, \"--| (x,y) = (%d,%d) | Alive=%d | Bomb=%d |\\n
\");\n
            v5 = *((v5 + 20));\n
        } while (v5);\n
    }\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (!v6)\n
            break;\n
        v3 = v6->field_14;\n
        cgc_free(v6);\n
    }\n
    return v3;\n
}\n
", "4206946:sub_403162": null, "4206994:sub_403192": null, "4207008:cgc_print_board_helper": "typedef struct struct_3 {\n
    char padding_0[12];\n
    struct struct_2 *field_c;\n
    char padding_10[16];\n
    unsigned int field_20;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[8];\n
    struct struct_0 *field_10;\n
    struct struct_1 *field_14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[20];\n
    unsigned int field_14;\n
} struct_0;\n
\n
int cgc_print_board_helper()\n
{\n
    struct struct_1 **v1;  // edx\n
    struct struct_1 **v2;  // esi\n
    struct_3 *v3;  // ecx\n
    unsigned int v4;  // ecx\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // ecx\n
    struct_1 *v7;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v8;  // edx\n
    struct_2 *v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10[6];  // eax, Other Possible Types: unsigned int\n
\n
    v2 = v1;\n
    if (v3->field_20)\n
    {\n
        cgc_print_board_helper();\n
        cgc_print_board_helper();\n
        cgc_print_board_helper();\n
        v10 = cgc_print_board_helper();\n
    }\n
    v9 = v3->field_c;\n
    if (!v9)\n
        return v10;\n
    do\n
    {\n
LABEL_40320d:\n
        if (!*((v9 + 8)) && !*((v9 + 12)))\n
            continue;\n
        v10 = cgc_calloc(1, 24);\n
        *((v10 + 12)) = *((v9 + 12));\n
        *((v10 + 8)) = *((v9 + 8));\n
        v4 = *(v9);\n
        *((v10 + 4)) = *((v9 + 4));\n
        *(v10) = v4;\n
        v7 = *(v2);\n
        if (*(v2))\n
        {\n
            if (!v10)\n
                continue;\n
            v5 = *(v10);\n
            while (true)\n
            {\n
                v6 = v7;\n
                if (*(v7) >= v5)\n
                    break;\n
LABEL_403250:\n
                v7 = *((v7 + 20));\n
                if (!v6->field_14)\n
                {\n
                    v6->field_14 = v10;\n
                    *((v10 + 16)) = v6;\n
                    v9 = v9->field_14;\n
                    if (!v9)\n
                        return v10;\n
                    goto LABEL_40320d;\n
                }\n
            }\n
            if ([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=ebp<4>, size=4, endness=Iend_LE), edx<4>, 0x0<32>))\n
            {\n
                if (!(*((v7 + 4)) < *((v10 + 4))))\n
                    goto LABEL_403268;\n
                goto LABEL_403250;\n
            }\n
LABEL_403268:\n
            v8 = *((v7 + 16));\n
            if (v8)\n
                v8->field_14 = v10;\n
            *((v10 + 20)) = v7;\n
            *((v10 + 16)) = v8;\n
            *((v7 + 16)) = v10;\n
            if (!(!*((v10 + 16))))\n
                continue;\n
        }\n
        *(v2) = v10;\n
        v9 = *((v9 + 20));\n
    } while (v9);\n
    return v10;\n
}\n
", "4207089:sub_4031f1": null, "4207180:sub_40324c": null, "4207263:sub_40329f": null, "4207264:cgc_qt_debug_print_tree": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
    char padding_10[40];\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    char padding_8[12];\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
int cgc_qt_debug_print_tree(struct_1 *v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    struct_0 *v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_1 *v7;  // edi\n
    void* v8;  // esi, Other Possible Types: unsigned int\n
    struct_0 *v9;  // esi\n
    unsigned int v10;  // eax\n
\n
    v7 = v6;\n
    if (!v7)\n
        return v10;\n
    if (v7->field_8)\n
    {\n
        v3 = a0;\n
        v2 = 13 - v7->field_0;\n
        cgc_fdprintf(1, \"Level: %d, ID: %s\\n
\");\n
        v4 = v7->field_c;\n
        if (v4)\n
        {\n
            v5 = \"--| (x,y) = (%d,%d) | Alive=%d | Bomb=%d |\\n
\";\n
            do\n
            {\n
                if (v7->field_0 != 13)\n
                {\n
                    v8 = 0;\n
                    do\n
                    {\n
                        cgc_fdprintf(1, \"    >\");\n
                        v8 += 1;\n
                    } while (v8 < 13 - v7->field_0);\n
                }\n
                v9 = v4;\n
                v1 = v9->field_4;\n
                v0 = v9->field_0;\n
                cgc_fdprintf(1, v5);\n
                v4 = v9->field_14;\n
            } while (v4);\n
        }\n
    }\n
    cgc_qt_debug_print_tree(v7->field_38, \"NW\");\n
    cgc_qt_debug_print_tree(v7->field_3c, \"NE\");\n
    cgc_qt_debug_print_tree(v7->field_40, \"SW\");\n
    v10 = cgc_qt_debug_print_tree(v7->field_44, \"SE\");\n
    return v10;\n
}\n
", "4207363:sub_403303": null, "4207553:sub_4033c1": null, "4207568:cgc_find_subregion_tree": "typedef struct struct_0 {\n
    char padding_0[32];\n
    unsigned int field_20;\n
    char padding_24[20];\n
    struct struct_1 *field_38;\n
    struct struct_1 *field_3c;\n
    struct struct_1 *field_40;\n
    unsigned int field_44;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
} struct_1;\n
\n
int cgc_find_subregion_tree(unsigned int v0)\n
{\n
    struct_0 *v1;  // ecx\n
    unsigned int v2;  // esi\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int, unsigned int [7], unsigned int [8]\n
\n
    if (!v1->field_20)\n
        return 0;\n
    v2 = v0;\n
    v4 = v1->field_38;\n
    if (v4[4] <= v3 && v4[6] > v3 && v4[5] <= v2 && v4[7] > v2)\n
        return v1->field_38;\n
    v4 = v1->field_3c;\n
    if (*((v4 + 16)) <= v3 && *((v4 + 24)) > v3 && *((v4 + 20)) <= v2 && *((v4 + 28)) > v2)\n
        return v1->field_3c;\n
    v4 = v1->field_40;\n
    if (*((v4 + 16)) <= v3 && *((v4 + 24)) > v3 && *((v4 + 20)) <= v2 && *((v4 + 28)) > v2)\n
        return v1->field_40;\n
    v4 = (*((v4 + 28)) <= v2 ? v1->field_44 : 0);\n
    if (*((v4 + 20)) > v2)\n
        v4 = 0;\n
    if (*((v4 + 24)) <= v3)\n
        v4 = 0;\n
    if (*((v4 + 16)) <= v3)\n
        return v4;\n
    v4 = 0;\n
}\n
", "4207687:sub_403447": null, "4207696:cgc_qt_insert": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    struct struct_0 *field_c;\n
    unsigned int field_10;\n
    unsigned int field_14;\n
    unsigned int field_18;\n
    unsigned int field_1c;\n
    unsigned int field_20;\n
    char padding_24[20];\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    struct struct_2 *field_14;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
    struct struct_0 *field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_qt_insert(struct_1 *v11, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    unsigned int v3;  // [bp-0x30]\n
    unsigned int v4;  // [bp-0x2c]\n
    unsigned int v5;  // [bp-0x28]\n
    unsigned int v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    unsigned int v8;  // [bp-0x1c]\n
    unsigned int v9;  // [bp-0x18]\n
    char v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_1 *v12;  // ecx\n
    unsigned int v13;  // ebp\n
    unsigned int v14;  // edi\n
    unsigned int v15;  // ebx\n
    unsigned int v16;  // esi\n
    struct_1 *v17;  // edx\n
    unsigned int v19;  // esi\n
    struct_2 *v20;  // eax, Other Possible Types: unsigned int\n
    unsigned int v21;  // eax\n
    unsigned int v22[6];  // eax\n
    unsigned int v23;  // eax\n
    struct_1 *v24;  // edx\n
    struct_0 *v25;  // ecx\n
    unsigned int v26;  // edi\n
    unsigned int v27;  // ebp\n
    unsigned int v28;  // ebx\n
    unsigned int v29[18];  // eax\n
    unsigned int v30;  // edi\n
    struct_1 *v31;  // ecx\n
    unsigned int v32[18];  // eax\n
    struct_1 *v33;  // ecx\n
    unsigned int v34[18];  // eax\n
    unsigned int v35;  // edi\n
    struct_1 *v36;  // ecx\n
    unsigned int v37[18];  // eax\n
    struct_1 *v38;  // ecx\n
    struct_0 *v39;  // edi, Other Possible Types: unsigned int\n
    struct_1 *v40;  // edx, Other Possible Types: unsigned int\n
    struct_0 *v41;  // eax, Other Possible Types: unsigned int\n
    unsigned int v42[4];  // edi, Other Possible Types: unsigned int\n
    unsigned int v43;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = v11;\n
    v13 = a0;\n
    v14 = v12->field_10;\n
    if (v14 > a0)\n
        return -1;\n
    v15 = v12->field_18;\n
    if (v15 <= v13)\n
        return -1;\n
    v8 = v12->field_14;\n
    if (v8 > v8)\n
        return -1;\n
    v16 = a1;\n
    v9 = v14;\n
    if (*(&v10) <= v16)\n
        return -1;\n
    v10 = v12->field_1c;\n
    v7 = v15;\n
    v42 = &a0;\n
    v43 = cgc_find_subregion_tree(v16);\n
    if (v43)\n
        goto LABEL_4034c3;\n
    v17 = v11;\n
    v20 = v17->field_c;\n
    v19 = v9;\n
    if (v20)\n
    {\n
        do\n
        {\n
            if (v13 == *(v20) && v16 == *((v20 + 4)))\n
            {\n
                *((v20 + 12)) = a3;\n
                *((v20 + 8)) = a2;\n
                *((v20 + 4)) = a1;\n
                *(v20) = a0;\n
                return 0;\n
            }\n
            v20 = *((v20 + 20));\n
        } while (v20);\n
    }\n
    if (v17->field_8 < v17->field_4)\n
    {\n
        v22 = cgc_calloc(1, 24);\n
        v22[3] = a3;\n
        v22[2] = a2;\n
        v22[1] = a1;\n
        v24 = v11;\n
        v22[0] = a0;\n
        v25 = v24->field_c;\n
        if (v25)\n
        {\n
            if (!v22)\n
                goto LABEL_40354c;\n
            v22[5] = v25;\n
            v22[4] = 0;\n
            v25->field_10 = v22;\n
        }\n
        v24->field_c = &v22[0];\n
LABEL_40354c:\n
        v24->field_8 = v24->field_8 + 1;\n
        return 0;\n
    }\n
    v23 = v17->field_0;\n
    if (!v23)\n
        return -1;\n
    v0 = v23 - 1;\n
    v6 = v19 + (1 << (v0 & 31));\n
    v26 = v8;\n
    v27 = (1 << (v0 & 31)) + v26;\n
    v28 = v1;\n
    v29 = cgc_malloc(72);\n
    v29[0] = v0;\n
    v29[1] = 16;\n
    v29[2] = 0;\n
    v29[3] = 0;\n
    v29[4] = v19;\n
    v29[5] = v26;\n
    v30 = v6;\n
    v29[6] = v30;\n
    v29[7] = v27;\n
    v29[8] = 0;\n
    v2 = v28 - 19668;\n
    v29[9] = v2;\n
    v0 = v28 - 22036;\n
    v29[10] = v0;\n
    v5 = v28 - 18548;\n
    v29[11] = v5;\n
    v4 = v28 - 16644;\n
    v29[12] = v4;\n
    v3 = v28 - 16516;\n
    v29[13] = v3;\n
    v29[14] = 0;\n
    v29[15] = 0;\n
    v29[16] = 0;\n
    v29[17] = 0;\n
    v31 = v11;\n
    v31->field_38 = v29;\n
    v32 = cgc_malloc(72);\n
    v32[0] = v31->field_0 - 1;\n
    v32[1] = 16;\n
    v32[2] = 0;\n
    v32[3] = 0;\n
    v32[4] = v30;\n
    v32[5] = v8;\n
    v32[6] = v7;\n
    v32[7] = v27;\n
    v32[8] = 0;\n
    v32[9] = v2;\n
    v32[10] = v0;\n
    v32[11] = v5;\n
    v32[12] = v4;\n
    v32[13] = v3;\n
    v32[14] = 0;\n
    v32[15] = 0;\n
    v32[16] = 0;\n
    v32[17] = 0;\n
    v33 = v11;\n
    v33->field_3c = v32;\n
    v34 = cgc_malloc(72);\n
    v34[0] = v33->field_0 - 1;\n
    v34[1] = 16;\n
    v34[2] = 0;\n
    v34[3] = 0;\n
    v34[4] = v9;\n
    v34[5] = v27;\n
    v34[6] = v30;\n
    v35 = v10;\n
    v34[7] = v35;\n
    v34[8] = 0;\n
    v34[9] = v2;\n
    v34[10] = v0;\n
    v34[11] = v5;\n
    v34[12] = v4;\n
    v34[13] = v3;\n
    v34[14] = 0;\n
    v34[15] = 0;\n
    v34[16] = 0;\n
    v34[17] = 0;\n
    v36 = v11;\n
    v36->field_40 = v34;\n
    v37 = cgc_malloc(72);\n
    v37[0] = v36->field_0 - 1;\n
    v37[1] = 16;\n
    v37[2] = 0;\n
    v37[3] = 0;\n
    v37[4] = v6;\n
    v37[5] = v27;\n
    v37[6] = v7;\n
    v37[7] = v35;\n
    v37[8] = 0;\n
    v37[9] = v2;\n
    v37[10] = v0;\n
    v37[11] = v5;\n
    v37[12] = v4;\n
    v37[13] = v3;\n
    v37[14] = 0;\n
    v37[15] = 0;\n
    v37[16] = 0;\n
    v37[17] = 0;\n
    v38 = v11;\n
    v38->field_44 = v37;\n
    v38->field_20 = 1;\n
    v39 = v38->field_c;\n
    if (v39)\n
    {\n
        while (!cgc_qt_insert(cgc_find_subregion_tree(*((v39 + 4))), *(v39), *((v39 + 4)), *((v39 + 8)), *((v39 + 12))))\n
        {\n
            v39 = *((v39 + 20));\n
            if (!v39)\n
                goto LABEL_403847;\n
        }\n
    }\n
LABEL_403847:\n
    v40 = v11;\n
    v41 = v40->field_c;\n
    if (v41)\n
    {\n
        do\n
        {\n
            *((v40 + 12)) = *((v41 + 20));\n
            cgc_free(v41);\n
            v40 = v11;\n
            v41 = *((v40 + 12));\n
        } while (v41);\n
    }\n
    *((v40 + 12)) = 0;\n
    *((v40 + 8)) = 0;\n
    v42 = &a0;\n
    v43 = cgc_find_subregion_tree(a1);\n
LABEL_4034c3:\n
    v21 = cgc_qt_insert(v43, *(v42), *((v42 + 4)), *((v42 + 8)), *((v42 + 12)));\n
    return v21;\n
}\n
", "4207956:sub_403554": null, "4208816:cgc_cg_step": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_cg_step(unsigned int v17)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned int v5;  // [bp-0x40]\n
    unsigned int v6;  // [bp-0x3c]\n
    unsigned int v7;  // [bp-0x38]\n
    unsigned int v8;  // [bp-0x34]\n
    unsigned int v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x2c]\n
    unsigned int v11;  // [bp-0x28]\n
    unsigned int v12;  // [bp-0x24]\n
    unsigned int v13;  // [bp-0x20]\n
    unsigned int v14;  // [bp-0x1c]\n
    unsigned int v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x14]\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // edi\n
    unsigned int v21;  // ebp\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // edx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // edx\n
    unsigned int v27;  // edi\n
    unsigned int v28;  // eax\n
    unsigned int v29;  // ecx\n
    char v30;  // bl\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // eax\n
    unsigned int v33;  // edx\n
    unsigned int v34;  // ecx\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // ebp\n
    unsigned int v37;  // esi\n
    unsigned int v38;  // edi\n
    unsigned int v39;  // eax\n
    unsigned int v40;  // ecx\n
    unsigned int v41;  // edx\n
    unsigned int v42;  // esi\n
    unsigned int v43;  // esi\n
    unsigned int v44;  // ebp\n
    unsigned int v45;  // eax\n
    unsigned int v46;  // eax\n
    unsigned int v47;  // esi\n
    unsigned int v48;  // edx\n
    unsigned int v49;  // ecx\n
    unsigned int v50;  // edx\n
    unsigned int v51;  // edx\n
    unsigned int v52;  // ecx\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // eax\n
    unsigned int v55;  // ecx\n
    unsigned int v56;  // ecx\n
    unsigned int v57;  // esi\n
    unsigned int v58;  // ebp\n
    unsigned int v59;  // eax\n
    unsigned int v60;  // esi\n
    unsigned int v61;  // esi\n
    unsigned int v62;  // eax\n
    unsigned int v63;  // esi\n
    unsigned int v64;  // eax\n
    unsigned int v65;  // eax\n
    unsigned int v66;  // ebp\n
    unsigned int v67;  // esi\n
    unsigned int v68;  // eax\n
    unsigned int v69;  // edx\n
    unsigned int v70;  // edx\n
    unsigned int v71;  // ecx\n
    unsigned int v72;  // edi\n
    unsigned int v73;  // ecx\n
    unsigned int v74;  // edi\n
    unsigned int v75;  // eax\n
    unsigned int v76;  // edi\n
    unsigned int v77;  // esi\n
    unsigned int v78;  // ebp\n
    unsigned int v79;  // ebp\n
    unsigned int v80;  // ebp\n
\n
    v18 = 0;\n
    if (v17 <= 0)\n
        return 0;\n
    v19 = 0;\n
    v58 = 0;\n
    v77 = 0;\n
    v1 = 0;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    do\n
    {\n
        v5 = v77;\n
        v12 = v19;\n
        v13 = v18;\n
        v57 = cgc_create_cell_list();\n
        v11 = v57;\n
        if (v57)\n
        {\n
            do\n
            {\n
                v4 = v58;\n
                v20 = *(v57);\n
                v21 = *((v57 + 4));\n
                v14 = *((v57 + 12));\n
                v6 = v57;\n
                v15 = *((v57 + 8));\n
                v47 = cgc_malloc(64);\n
                v22 = v20 - 1;\n
                *(v47) = v22;\n
                v23 = v21 - 1;\n
                *((v47 + 4)) = v23;\n
                *((v47 + 8)) = v20;\n
                *((v47 + 12)) = v23;\n
                v24 = v20 + 1;\n
                *((v47 + 16)) = v24;\n
                *((v47 + 20)) = v23;\n
                *((v47 + 24)) = v22;\n
                *((v47 + 28)) = v21;\n
                *((v47 + 32)) = v24;\n
                *((v47 + 36)) = v21;\n
                *((v47 + 40)) = v22;\n
                v7 = v21;\n
                v25 = v21 + 1;\n
                v58 = v4;\n
                *((v47 + 44)) = v25;\n
                v8 = v20;\n
                *((v47 + 48)) = v20;\n
                *((v47 + 52)) = v25;\n
                *((v47 + 56)) = v24;\n
                *((v47 + 60)) = v25;\n
                v26 = 0;\n
                v10 = 0;\n
                v27 = v4;\n
                v9 = v47;\n
                do\n
                {\n
                    v28 = *((v47 + v26 * 8));\n
                    if (v28 >= 0)\n
                    {\n
                        v29 = *((v47 + v26 * 8 + 4));\n
                        if (!(v29 <= 0x2000))\n
                            continue;\n
                        if (v29 < 0)\n
                            continue;\n
                        if (!(v28 <= 0x2000))\n
                            continue;\n
                        v30 = !v27;\n
                        v3 = v26;\n
                        if (v27)\n
                        {\n
                            do\n
                            {\n
                                if (v28 == *(v27))\n
                                {\n
                                    if (v29 == *((v27 + 4)))\n
                                        break;\n
                                    continue;\n
                                }\n
                                v27 = *((v27 + 12));\n
                                v30 = !v27;\n
                            } while (v27);\n
                        }\n
                        v2 = v30;\n
                        v31 = cgc_qt_get_pixel(*((v0 + 320)), v28, v29);\n
                        if (v31 && *((v31 + 8)))\n
                        {\n
                            v10 += 1;\n
                            goto LABEL_403aa7;\n
                        }\n
                        if (!(v2 & 1))\n
                        {\n
LABEL_403aa7:\n
                            v26 = v3;\n
                            continue;\n
                        }\n
                        v16 = v31;\n
                        v32 = cgc_calloc(1, 16);\n
                        v33 = v3;\n
                        v34 = *((v47 + v33 * 8));\n
                        *((v32 + 4)) = *((v47 + v33 * 8 + 4));\n
                        *(v32) = v34;\n
                        if (v58)\n
                        {\n
                            if (v32)\n
                            {\n
                                *((v32 + 12)) = v58;\n
                                *((v32 + 8)) = 0;\n
                                *((v58 + 8)) = v32;\n
                            }\n
                            else\n
                            {\n
                                v4 = v58;\n
LABEL_403b7d:\n
                                v35 = v3;\n
                                v36 = *((v47 + v35 * 8));\n
                                v37 = *((v47 + v35 * 8 + 4));\n
                                v38 = cgc_malloc(64);\n
                                v39 = v36 - 1;\n
                                *(v38) = v39;\n
                                v40 = v37 - 1;\n
                                *((v38 + 4)) = v40;\n
                                *((v38 + 8)) = v36;\n
                                *((v38 + 12)) = v40;\n
                                v41 = v36 + 1;\n
                                *((v38 + 16)) = v41;\n
                                *((v38 + 20)) = v40;\n
                                *((v38 + 24)) = v39;\n
                                *((v38 + 28)) = v37;\n
                                *((v38 + 32)) = v41;\n
                                *((v38 + 36)) = v37;\n
                                *((v38 + 40)) = v39;\n
                                v42 = v37 + 1;\n
                                *((v38 + 44)) = v42;\n
                                *((v38 + 48)) = v36;\n
                                *((v38 + 52)) = v42;\n
                                *((v38 + 56)) = v41;\n
                                *((v38 + 60)) = v42;\n
                                v43 = 0;\n
                                v2 = *((v0 + 320));\n
                                v44 = 0;\n
                                do\n
                                {\n
                                    v45 = cgc_qt_get_pixel(v2, *((v38 + v44 * 8)), *((v38 + v44 * 8 + 4)));\n
                                    if (v45)\n
                                        v43 = v43 - -1 - (*((v45 + 8)) < 1);\n
                                    v44 += 1;\n
                                } while (v44 != 8);\n
                                cgc_free(v38);\n
                                v27 = 0;\n
                                if (v43 != 3)\n
                                {\n
                                    v58 = v4;\n
                                    v47 = v9;\n
                                    goto LABEL_403aa7;\n
                                }\n
                                else\n
                                {\n
                                    v46 = cgc_calloc(1, 24);\n
                                    v48 = v16;\n
                                    v58 = v4;\n
                                    v47 = v9;\n
                                    if (v48)\n
                                    {\n
                                        *((v46 + 12)) = *((v48 + 12));\n
                                        *((v46 + 8)) = *((v48 + 8));\n
                                        v49 = *(v48);\n
                                        v50 = *((v48 + 4));\n
                                    }\n
                                    else\n
                                    {\n
                                        v51 = v3;\n
                                        v49 = *((v47 + v51 * 8));\n
                                        v50 = *((v47 + v51 * 8 + 4));\n
                                    }\n
                                    *((v46 + 4)) = v50;\n
                                    *(v46) = v49;\n
                                    *((v46 + 8)) = 1;\n
                                    v26 = v3;\n
                                    if (v1)\n
                                    {\n
                                        if (!v46)\n
                                            continue;\n
                                        v52 = v1;\n
                                        *((v46 + 20)) = v52;\n
                                        *((v46 + 16)) = 0;\n
                                        *((v52 + 16)) = v46;\n
                                    }\n
                                    v1 = v46;\n
                                    goto LABEL_403aab;\n
                                }\n
                            }\n
                        }\n
                        v4 = v32;\n
                        goto LABEL_403b7d;\n
                    }\n
LABEL_403aab:\n
                    v26 += 1;\n
                } while (v26 != 8);\n
                v53 = cgc_calloc(1, 16);\n
                *((v53 + 4)) = v7;\n
                *(v53) = v8;\n
                if (v58)\n
                {\n
                    if (!v53)\n
                        goto LABEL_403cf9;\n
                    *((v53 + 12)) = v58;\n
                    *((v53 + 8)) = 0;\n
                    *((v58 + 8)) = v53;\n
                }\n
                v58 = v53;\n
LABEL_403cf9:\n
                v54 = cgc_calloc(1, 24);\n
                *((v54 + 4)) = v7;\n
                *(v54) = v8;\n
                *((v54 + 12)) = v14;\n
                *((v54 + 8)) = v15;\n
                if ((v10 & -2) == 2)\n
                {\n
                    *((v54 + 8)) = 1;\n
                    if (!v1)\n
                    {\n
                        v1 = v54;\n
                        goto LABEL_403a04;\n
                    }\n
                    else if (v54)\n
                    {\n
                        v56 = v1;\n
                        *((v54 + 20)) = v56;\n
                        *((v54 + 16)) = 0;\n
                        *((v56 + 16)) = v54;\n
                        v1 = v54;\n
                    }\n
                    continue;\n
                }\n
                else\n
                {\n
                    *((v54 + 8)) = 0;\n
                    v55 = v5;\n
                    if (v55)\n
                    {\n
                        if (!v54)\n
                            continue;\n
                        *((v54 + 20)) = v55;\n
                        *((v54 + 16)) = 0;\n
                        *((v55 + 16)) = v54;\n
                    }\n
                    v5 = v54;\n
                }\n
LABEL_403a04:\n
                cgc_free(v47);\n
                v57 = *((v6 + 20));\n
            } while (v57);\n
        }\n
        v59 = v11;\n
        if (v59)\n
        {\n
            do\n
            {\n
                cgc_free(v59);\n
                v59 = *((v59 + 20));\n
            } while (v59);\n
        }\n
        if (v58)\n
        {\n
            do\n
            {\n
                cgc_free(v58);\n
                v58 = *((v58 + 12));\n
            } while (v58);\n
        }\n
        v60 = v1;\n
        if (!v60)\n
        {\n
            v61 = v1;\n
        }\n
        else\n
        {\n
            do\n
            {\n
                cgc_qt_insert(*((v0 + 320)), *(v60), *((v60 + 4)), *((v60 + 8)), *((v60 + 12)));\n
                v60 = *((v60 + 20));\n
            } while (v60);\n
            v62 = v1;\n
            do\n
            {\n
                v61 = *((v62 + 20));\n
                cgc_free(v62);\n
                v62 = v61;\n
            } while (v61);\n
        }\n
        v1 = v61;\n
        v63 = v5;\n
        if (v63)\n
        {\n
            do\n
            {\n
                cgc_qt_insert(*((v0 + 320)), *(v63), *((v63 + 4)), *((v63 + 8)), *((v63 + 12)));\n
                v64 = v5;\n
                v63 = *((v63 + 20));\n
            } while (v63);\n
            do\n
            {\n
                cgc_free(v64);\n
                v64 = *((v64 + 20));\n
            } while (v64);\n
        }\n
        v65 = cgc_create_cell_list();\n
        v4 = v58;\n
        if (!v65)\n
        {\n
            v66 = 0;\n
        }\n
        else\n
        {\n
            v66 = 0;\n
            v67 = v65;\n
            v2 = v65;\n
            do\n
            {\n
                *((v67 + 12)) = *((v67 + 12)) - 1;\n
                cgc_qt_insert(*((v0 + 320)), *(v67), *((v67 + 4)), *((v67 + 8)), *((v67 + 12)));\n
                v68 = cgc_calloc(1, 24);\n
                v69 = *((v67 + 4));\n
                *(v68) = *(v67);\n
                *((v68 + 4)) = v69;\n
                *((v68 + 8)) = *((v67 + 8));\n
                *((v68 + 12)) = *((v67 + 12));\n
                if (!v66)\n
                {\n
                    v66 = v68;\n
                    goto LABEL_403e52;\n
                }\n
                else if (v68)\n
                {\n
                    v70 = *(v68);\n
                    v71 = v66;\n
                    do\n
                    {\n
                        v72 = v71;\n
                        if (*(v71) >= v70)\n
                        {\n
                            if (!([D] x86g_calculate_condition(0x4<32>, 0x6<32>, Load(addr=ecx<4>, size=4, endness=Iend_LE), edx<4>, 0x0<32>)))\n
                            {\n
LABEL_403ed7:\n
                                v73 = *((v72 + 16));\n
                                if (v73)\n
                                    *((v73 + 20)) = v68;\n
                                *((v68 + 20)) = v72;\n
                                *((v68 + 16)) = v73;\n
                                *((v72 + 16)) = v68;\n
                                if (!*((v68 + 16)))\n
                                    v66 = v68;\n
                                goto LABEL_403ef9;\n
                            }\n
                            else if (!(*((v71 + 4)) < *((v68 + 4))))\n
                            {\n
                                goto LABEL_403ed7;\n
                            }\n
                        }\n
                        v71 = *((v72 + 20));\n
                    } while (v71);\n
                    *((v72 + 20)) = v68;\n
                    *((v68 + 16)) = v72;\n
LABEL_403ef9:\n
                    v65 = v2;\n
                }\n
                else\n
                {\n
LABEL_403e52:\n
                    v65 = v2;\n
                    continue;\n
                }\n
                v67 = *((v67 + 20));\n
            } while (v67);\n
        }\n
        if (v65)\n
        {\n
            do\n
            {\n
                cgc_free(v65);\n
                v65 = *((v65 + 20));\n
            } while (v65);\n
        }\n
        v74 = cgc_create_cell_list();\n
        v3 = cgc_bomb_collisions(v66, v74);\n
        if (v74)\n
        {\n
            do\n
            {\n
                cgc_free(v74);\n
                v74 = *((v74 + 20));\n
            } while (v74);\n
        }\n
        if (v66)\n
        {\n
            do\n
            {\n
                cgc_free(v66);\n
                v66 = *((v66 + 20));\n
            } while (v66);\n
        }\n
        v75 = cgc_create_cell_list();\n
        v76 = v75;\n
        if (!v75)\n
        {\n
            v77 = v75;\n
            v78 = v4;\n
        }\n
        else\n
        {\n
            v79 = v75;\n
            do\n
            {\n
                v2 = *(v79);\n
                cgc_qt_delete(v2, *((v79 + 4)), *((v79 + 8)), *((v79 + 12)));\n
                v79 = *((v79 + 20));\n
            } while (v79);\n
            v80 = v4;\n
            do\n
            {\n
                v77 = *((v76 + 20));\n
                cgc_free(v76);\n
                v76 = v77;\n
            } while (v77);\n
        }\n
        v18 = v13 + v3;\n
        v19 = v12 + 1;\n
    } while (v19 != v17);\n
    return v13 + v3;\n
}\n
", "4208868:sub_4038e4": null, "4209148:sub_4039fc": null, "4209378:sub_403ae2": null, "4209634:sub_403be2": null, "4209849:sub_403cb9": null, "4210023:sub_403d67": null, "4210086:sub_403da6": null, "4210255:sub_403e4f": null, "4210367:sub_403ebf": null, "4210438:sub_403f06": null, "4210706:sub_404012": null, "4210720:cgc_shoot_pixel": "extern void* g_conway_gld;\n
\n
int cgc_shoot_pixel(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // edi\n
    unsigned int v4[4];  // eax\n
\n
    v1 = v3;\n
    v4 = cgc_qt_get_pixel(g_conway_gld, v2, a0);\n
    if (!v4)\n
    {\n
        return 0;\n
    }\n
    else if (!v4[2])\n
    {\n
        return 0;\n
    }\n
    else\n
    {\n
        v4[2] = 0;\n
        if (!v4[3])\n
        {\n
            v0 = v4[0];\n
            cgc_qt_delete(v0, v4[1], v4[2], v4[3]);\n
            return 100;\n
        }\n
        return 100;\n
    }\n
}\n
", "4210837:sub_404095": null, "4210848:cgc_set_bomb": "typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern void* g_conway_gld;\n
\n
int cgc_set_bomb(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    void* v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edi\n
    struct_0 *v10;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v11;  // ecx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v9 = a0;\n
    v10 = cgc_qt_get_pixel(g_conway_gld, v6, v9);\n
    if (!v10)\n
    {\n
        v0 = v6;\n
        v1 = v9;\n
        v2 = 0;\n
        v3 = 10;\n
        *(&v10) = !cgc_qt_insert(g_conway_gld, v0, v1, v2, v3);\n
        return v10;\n
    }\n
    v11 = v10;\n
    v10 = 0;\n
    if (v11->field_c)\n
        return v10;\n
    v11->field_c = 10;\n
    v10 = 1;\n
}\n
", "4210996:sub_404134": null, "4211008:main": "typedef struct struct_2 {\n
    char padding_0[324];\n
    struct struct_3 *field_144;\n
    char padding_148[516];\n
    unsigned int field_34c;\n
    char padding_350[8];\n
    unsigned int field_358;\n
    unsigned int field_35c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
typedef struct struct_3 {\n
    char padding_0[44];\n
    struct struct_1 *field_2c;\n
    struct struct_1 *field_30;\n
    struct struct_1 *field_34;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int a;\n
extern unsigned int g_406354;\n
extern char g_40640d;\n
extern unsigned int g_406465;\n
extern unsigned int g_406496;\n
extern unsigned int g_4064a1;\n
extern unsigned int g_4064b2;\n
extern char g_4064bf;\n
extern unsigned int g_4064c8;\n
extern char g_40650a;\n
extern unsigned int g_406536;\n
extern unsigned int g_406569;\n
extern unsigned int g_406578;\n
extern unsigned int g_40658a;\n
extern char g_406597;\n
extern char g_4065ad;\n
extern char g_4065b8;\n
extern unsigned int g_4065c4;\n
extern unsigned int g_4065d8;\n
extern unsigned int g_4065ff;\n
extern char g_406614;\n
extern unsigned int g_40662c;\n
extern char g_406645;\n
extern char g_406658;\n
extern unsigned int g_40667e;\n
extern unsigned int g_40668a;\n
extern char g_4066b1;\n
extern unsigned int g_4066c7;\n
extern char g_4066e3;\n
extern unsigned int g_406716;\n
extern unsigned int g_40673e;\n
extern unsigned int g_406756;\n
extern char g_board_revealed;\n
extern struct_0 *g_bombs_left;\n
extern char g_buf;\n
extern unsigned int g_current_score;\n
extern unsigned int g_game_board;\n
extern unsigned int g_high_score;\n
extern void* g_num_steps_left;\n
extern unsigned int g_shots_left;\n
\n
int main()\n
{\n
    struct_0 *v3;  // [bp-0x50]\n
    char v6;  // [bp-0x3c]\n
    unsigned int v8;  // [bp-0x34]\n
    unsigned int v9;  // [bp-0x30]\n
    unsigned int v10;  // [bp-0x2c]\n
    char *v11;  // [bp-0x28]\n
    unsigned int v12;  // [bp-0x24]\n
    char *v14;  // [bp-0x1c]\n
    unsigned int v15;  // [bp-0x18]\n
    unsigned int v16;  // [bp-0x14]\n
    struct_2 *v18;  // ebx\n
    unsigned int v19;  // eax\n
    char *v20;  // esi, Other Possible Types: unsigned int\n
    unsigned int v21;  // edi\n
    char *v22;  // ebp, Other Possible Types: unsigned int\n
    char *v23;  // esi, Other Possible Types: unsigned int\n
    unsigned int v24;  // eax\n
    struct_0 *v39;  // esi\n
    unsigned int v40;  // edi\n
    unsigned int v48;  // ebp\n
\n
    v18 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v19 = \"Before we begin. Enter a number [1 - 4294967295]\\n
Or any number. We'll figure it out: \";\n
    v11 = &g_buf;\n
    v10 = \"Bad input\\n
\";\n
    v12 = \"Before we begin. Enter a number [1 - 4294967295]\\n
Or any number. We'll figure it out: \";\n
LABEL_404184:\n
    cgc_fdprintf(1, v19);\n
    v21 = 0;\n
    v20 = v11;\n
    while (true)\n
    {\n
        v22 = &_GLOBAL_OFFSET_TABLE_.padding_0[v21 + 328];\n
        v3 = &v6;\n
        if (cgc_receive(0, &_GLOBAL_OFFSET_TABLE_.padding_0[v21 + 328], 1))\n
            break;\n
        if (!*(&v6))\n
            goto LABEL_0x404a85;\n
        if (*(v20) == 10)\n
        {\n
LABEL_4041ef:\n
            if (v21 == 0x200 && !(*(v22) == 10))\n
                goto LABEL_404180;\n
            if (*(v22) == 10)\n
            {\n
                *(v22) = 0;\n
                v23 = v11;\n
                while (true)\n
                {\n
                    v24 = *(v23);\n
                    if (!v24)\n
                        break;\n
                    v23 += 1;\n
                    if (!cgc_isdigit(v24))\n
                    {\n
                        cgc_fdprintf(1, \"Invalid number\\n
\");\n
                        v19 = v12;\n
                        goto LABEL_404184;\n
                    }\n
                }\n
                v14 = &g_buf;\n
                a = cgc_strtol(&g_buf, NULL, 10);\n
                g_game_board = cgc_gld_init_game();\n
                cgc_new_game();\n
                v48 = \"GAME OVER!\\n
\";\n
                v40 = \"A new high score!!\\n
\\n
\";\n
                v10 = \"                              --GAME OVER--\\n
\";\n
                v12 = \"1. New Game\\n
\";\n
                v16 = \"2. Quit\\n
\\n
\";\n
                v15 = \"High Score = %d\\n
\\n
\";\n
                v11 = \"Selection-: \";\n
                v39 = &v6;\n
                v9 = \"GAME OVER!\\n
\";\n
                v8 = \"A new high score!!\\n
\\n
\";\n
                break;\n
            }\n
LABEL_404180:\n
            v19 = v10;\n
            goto LABEL_404184;\n
        }\n
        v20 += 1;\n
        v21 += 1;\n
        if (v21 == 0x200)\n
        {\n
            v22 = &_GLOBAL_OFFSET_TABLE_.padding_0[v21 + 328];\n
            v21 = 0x200;\n
            goto LABEL_4041ef;\n
        }\n
    }\n
    if (g_num_steps_left <= 0)\n
        goto LABEL_0x404370;\n
    else\n
        goto LABEL_0x4042f1;\n
}\n
", "4211059:sub_404173": null, "4211395:sub_4042c3": null, "4211567:sub_40436f": null, "4211954:sub_4044f2": null, "4212359:sub_404687": null, "4212681:sub_4047c9": null, "4213392:cgc_new_game": "extern unsigned int a;\n
extern unsigned int b;\n
extern unsigned int c;\n
extern unsigned int d;\n
extern char g_board_revealed;\n
extern unsigned int g_bombs_left;\n
extern void* g_current_score;\n
extern struct_1 *g_game_board;\n
extern unsigned int g_high_score;\n
extern unsigned int g_num_steps_left;\n
extern unsigned int g_shots_left;\n
\n
int cgc_new_game()\n
{\n
    int tmp_2;  // tmp #2\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    void* v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    unsigned int v7;  // [bp-0x18]\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // edx\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // edi\n
    unsigned int v18;  // esi\n
    unsigned int v19;  // eax\n
    unsigned int v22;  // ebp\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // esi\n
    unsigned int v25;  // ebp\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // esi\n
\n
    cgc_gld_clear_board();\n
    if (g_high_score < g_current_score)\n
        g_high_score = g_current_score;\n
    v10 = 25;\n
    do\n
    {\n
        v7 = v10;\n
        v11 = a;\n
        v12 = v11 * 0x800 ^ v11;\n
        v13 = b;\n
        v15 = v12 ^ d;\n
        b = d;\n
        v16 = v15 ^ v12 / 0x100;\n
        v17 = d >> 19 ^ v16;\n
        v18 = v13 * 0x800 ^ v13;\n
        a = c;\n
        c = v17;\n
        v19 = v16 / 0x80000;\n
        d = v18 / 0x100 ^ v18 ^ v17 ^ v19;\n
        v2 = 1;\n
        v3 = 0;\n
        v8 = v17 & 8191;\n
        v0 = v8;\n
        v1 = (v18 / 0x100 ^ v18 ^ v17 ^ v19) & 8191;\n
        v4 = v2;\n
        v5 = v0;\n
        g_game_board->field_24(g_game_board, v5, v1, v4);\n
        if (!(((v18 / 0x100 ^ v18 ^ v17 ^ v19) | v17) & 0x1000))\n
        {\n
            v0 = v8;\n
            v5 = v1 + 1;\n
            v1 = v5;\n
            v4 = v0;\n
            g_game_board->field_24(g_game_board, v4, v1, v2);\n
            v0 = v0;\n
            v1 += 2;\n
            v4 = v0;\n
            g_game_board->field_24(g_game_board, v4, v1, v2);\n
            v0 -= 1;\n
            v1 = v1;\n
            g_game_board->field_24(g_game_board, v0, v1, v2);\n
            v26 = v5;\n
            v0 -= 2;\n
            v25 = v7;\n
            goto LABEL_404eef;\n
        }\n
        v22 = v8;\n
        v23 = v1;\n
        if (v8 >= 0x1000 && v1 <= 4095)\n
        {\n
            v0 = v22;\n
            v5 = v1 + 1;\n
            v1 = v5;\n
            v4 = v0;\n
            g_game_board->field_24(g_game_board, v4, v1, v2);\n
            v0 = v22;\n
            v1 += 2;\n
            v4 = v0;\n
            g_game_board->field_24(g_game_board, v4, v1, v2);\n
            v0 = v22 + 1;\n
            v1 = v1;\n
            g_game_board->field_24(g_game_board, v0, v1, v2);\n
            v26 = v5;\n
            v0 = v22 + 2;\n
            v25 = v7;\n
            goto LABEL_404eef;\n
        }\n
        v24 = v22;\n
        tmp_2 = v22;\n
        v25 = v7;\n
        if (tmp_2 <= 4095 && v23 >= 0x1000)\n
        {\n
            v0 = v24;\n
            v5 = v23 + 1;\n
            v1 = v5;\n
            v4 = v23;\n
            v6 = v0;\n
            g_game_board->field_24(g_game_board, v6, v1, v2);\n
            v0 = v24;\n
            v1 = v4 + 2;\n
            v6 = v0;\n
            g_game_board->field_24(g_game_board, v6, v1, v2);\n
            v0 = v24 - 1;\n
            v1 = v4;\n
            v4 = v0;\n
            g_game_board->field_24(g_game_board, v4, v1, v2);\n
            v26 = v5;\n
            v27 = v24 - 2;\n
            goto LABEL_404eeb;\n
        }\n
        if (v24 < 0x1000)\n
            continue;\n
        if (v23 < 0x1000)\n
            continue;\n
        v0 = v24;\n
        v5 = v23 + 1;\n
        v1 = v5;\n
        v4 = v23;\n
        v6 = v0;\n
        g_game_board->field_24(g_game_board, v6, v1, v2);\n
        v0 = v24;\n
        v1 = v4 + 2;\n
        v6 = v0;\n
        g_game_board->field_24(g_game_board, v6, v1, v2);\n
        v0 = v24 + 1;\n
        v1 = v4;\n
        v4 = v0;\n
        g_game_board->field_24(g_game_board, v4, v1, v2);\n
        v26 = v5;\n
        v27 = v24 + 2;\n
LABEL_404eeb:\n
        v0 = v27;\n
LABEL_404eef:\n
        v1 = v26;\n
        g_game_board->field_24(g_game_board, v0, v1, v2);\n
        tmp_2 = v25;\n
        v10 = v25 - 1;\n
    } while (tmp_2 != 1);\n
    g_board_revealed = 0;\n
    g_current_score = 0;\n
    g_num_steps_left = 10000;\n
    g_shots_left = 125;\n
    g_bombs_left = 5;\n
    return cgc_fdprintf(1, \"New Game -- Ready, set, go!\\n
\");\n
}\n
", "4213841:sub_404c51": null, "4214066:sub_404d32": null, "4214632:sub_404f68": null, "4214640:cgc_parse_coordinate": "extern char g_buf;\n
\n
int cgc_parse_coordinate()\n
{\n
    char *v0;  // [bp-0x18]\n
    char v1[2];  // [bp-0x14]\n
    unsigned int v3[2];  // ecx\n
    char *v4;  // esi\n
    char *v5;  // eax, Other Possible Types: unsigned int\n
    char *v6;  // ebp\n
    unsigned int v7;  // eax\n
    char *v8;  // edi, Other Possible Types: unsigned int\n
    char *v9;  // edi, Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    *(&v1) = &g_buf;\n
    v3[0] = -1;\n
    v3[1] = -1;\n
    v4 = cgc_strsep(v1, \",\");\n
    v5 = cgc_strsep(v1, \" \");\n
    if (v5)\n
        v5 = v1;\n
    v0 = v4;\n
    if (!v4)\n
        return v3;\n
    v6 = v5;\n
    if (!v5)\n
    {\n
        return v3;\n
    }\n
    else if (!cgc_strlen(v0))\n
    {\n
        return v3;\n
    }\n
    else if (!cgc_strlen(v5))\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v8 = v0;\n
        while (true)\n
        {\n
            v7 = *(v8);\n
            if (!v7)\n
            {\n
                v9 = v6;\n
                while (true)\n
                {\n
                    v10 = *(v9);\n
                    if (!v10)\n
                    {\n
                        v3[0] = cgc_strtol(v0, NULL, 10);\n
                        v3[1] = cgc_strtol(v6, NULL, 10);\n
                        return v3;\n
                    }\n
                    v9 += 1;\n
                    if (!cgc_isdigit(v10))\n
                        return v3;\n
                }\n
            }\n
            else\n
            {\n
                v8 += 1;\n
                if (!cgc_isdigit(v7))\n
                    return v3;\n
            }\n
        }\n
    }\n
}\n
", "4214924:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}