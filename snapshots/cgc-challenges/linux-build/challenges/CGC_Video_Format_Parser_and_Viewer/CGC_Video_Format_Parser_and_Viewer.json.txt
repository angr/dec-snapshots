{"4198400:_init": "extern struct_0 *g_406118;\n
\n
int _init()\n
{\n
    if (g_406118)\n
    {\n
        g_406118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198480:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198496:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198512:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198560:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198576:sub_4010b0": "int sub_4010b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198582:sub_4010b6": null, "4198592:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198635:sub_4010eb": null, "4198636:sub_4010ec": "int sub_4010ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198640:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198644:sub_4010f4": null, "4198656:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 20511;\n
    v6 = v5 + 12;\n
    v7 = v5 + 12;\n
    if (v7 == v6)\n
        return v5 + 12;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198707:sub_401133": "int sub_401133()\n
{\n
}\n
", "4198713:sub_401139": "int sub_401139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198720:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 20447;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 12;\n
    v9 = (v6 + 12 - (v6 + 12) >> 31) + (12 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198791:sub_401187": "int sub_401187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_406114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_406114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198875:sub_4011db": "int sub_4011db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198880:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198889:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198893:sub_4011ed": null, "4198896:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4198988:sub_40124c": null, "4198992:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[52];\n
    struct struct_1 *field_34;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_34->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_34 == v9)\n
        {\n
            v1->field_34 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_34 == v9)\n
    {\n
        v1->field_34 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4199675:sub_4014fb": null, "4199680:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_34;\n
    v7->field_34 = v3;\n
    return v3;\n
}\n
", "4199880:sub_4015c8": null, "4199888:cgc_free": "typedef struct struct_0 {\n
    char padding_0[52];\n
    struct struct_1 *field_34;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 **, struct_0 *, unsigned int, struct struct_1 *[2]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_34 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_34 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_34;\n
    v2[1] = 0;\n
    if (v9->field_34)\n
    {\n
        v12 = v1;\n
        *((&v12->field_34->field_0 + (v12->field_34->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_34 = v7;\n
    return v1;\n
}\n
", "4200352:cgc_expi": "int cgc_expi(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 1; a0; a0 -= 1)\n
    {\n
        v0 *= v1;\n
    }\n
    return v0;\n
}\n
", "4200411:sub_4017db": null, "4200416:cgc_floor": null, "4200580:sub_401884": null, "4200592:cgc_round_away_from_zero": null, "4200746:sub_40192a": null, "4200752:cgc_round": null, "4200896:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4200988:sub_401a1c": null, "4200992:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v14, struct struct_0 **a0)\n
{\n
    unsigned int v0;  // [bp-0x78]\n
    unsigned int v1;  // [bp-0x74]\n
    unsigned int v2;  // [bp-0x70]\n
    unsigned int v3;  // [bp-0x6c]\n
    struct_1 *v4;  // [bp-0x68], Other Possible Types: unsigned int\n
    char v5;  // [bp-0x64]\n
    unsigned int v6;  // [bp-0x44]\n
    struct_1 *v7;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v8;  // [bp-0x39]\n
    char v9;  // [bp-0x19]\n
    char *v10;  // [bp-0x18]\n
    char *v11;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0xc]\n
    struct struct_0 **v15;  // eax\n
    struct struct_0 **v16;  // eax\n
    struct struct_0 **v17;  // eax\n
    struct struct_0 **v18;  // eax\n
    struct_1 *v19;  // eax\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // eax\n
    struct_1 *v22;  // eax\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    struct_1 *v25;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = 0;\n
    if (!v14)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    while (true)\n
    {\n
        if (!*(v14))\n
        {\n
            v13 = v12;\n
            return v13;\n
        }\n
        if (*(v14) == 36)\n
            break;\n
        cgc_putc(*(v14));\n
        v14 += 1;\n
        v12 += 1;\n
LABEL_401dc8:\n
    }\n
    v14 += 1;\n
    v0 = *(v14);\n
    if (!v0)\n
    {\n
        v13 = -1;\n
        return v13;\n
    }\n
    if (v0 == 36)\n
    {\n
        cgc_putc(36);\n
        goto LABEL_401d97;\n
    }\n
    if (v0 != 88)\n
    {\n
        if (v0 == 99)\n
        {\n
            v15 = a0;\n
            a0 = v15 + 1;\n
            v10 = &*(v15)->field_0;\n
            v9 = v10;\n
            cgc_putc(v9);\n
            goto LABEL_401d97;\n
        }\n
        if (v0 == 100)\n
        {\n
            v16 = a0;\n
            a0 = v16 + 1;\n
            v6 = *(v16);\n
            v7 = 0;\n
            if (v6 < 0)\n
            {\n
                v6 = -(v6);\n
                cgc_putc(45);\n
                v12 += 1;\n
            }\n
            else\n
            {\n
                if (!v6)\n
                {\n
                    v7 = 1;\n
                    v8 = 48;\n
                }\n
            }\n
            while (v6)\n
            {\n
                v23 = v7;\n
                v7 = v23 + 1;\n
                (&v8)[v23] = ((v6 >> 31 CONCAT v6) /m 10 >> 32) + 48;\n
                v24 = v6;\n
                v6 = (v24 >> 31 CONCAT v24) /m 10;\n
                if (v7 >= 32)\n
                    break;\n
            }\n
            while (true)\n
            {\n
                v25 = v7;\n
                v7 = v25 + 1;\n
                if (v25 <= 0)\n
                    break;\n
                cgc_putc((&v8)[v7]);\n
                v12 += 1;\n
            }\n
            goto LABEL_401d97;\n
        }\n
        else if (v0 == 115)\n
        {\n
            v17 = a0;\n
            a0 = v17 + 1;\n
            v11 = &*(v17)->field_0;\n
            while (*(v11))\n
            {\n
                cgc_putc(*(v11));\n
                v12 += 1;\n
                v11 += 1;\n
                if (!v11)\n
                    break;\n
            }\n
            goto LABEL_401d97;\n
        }\n
        else if (v0 != 120)\n
        {\n
            v13 = -1;\n
            return v13;\n
        }\n
    }\n
    v18 = a0;\n
    a0 = v18 + 1;\n
    v3 = *(v18);\n
    v4 = 0;\n
    while (v3)\n
    {\n
        v2 = v3 & 15;\n
        v3 >>= 4;\n
        if (v2 < 10)\n
        {\n
            v19 = v4;\n
            v4 = v19 + 1;\n
            *((&v5 + v19)) = v2 + 48;\n
        }\n
        else if (*(v14) == 120)\n
        {\n
            v20 = v4;\n
            v4 = v20 + 1;\n
            (&v5)[v20] = v2 + 87;\n
        }\n
        else\n
        {\n
            v21 = v4;\n
            v4 = v21 + 1;\n
            (&v5)[v21] = v2 + 55;\n
        }\n
        if (v4 >= 32)\n
            break;\n
    }\n
    while (true)\n
    {\n
        v22 = v4;\n
        v4 = v22 + 1;\n
        if (v22 <= 0)\n
            break;\n
        cgc_putc((&v5)[v4]);\n
        v12 += 1;\n
    }\n
LABEL_401d97:\n
    v14 += 1;\n
    goto LABEL_401dc8;\n
}\n
", "4201948:sub_401ddc": null, "4201952:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4202010:sub_401e1a": null, "4202016:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202070:sub_401e56": null, "4202080:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202134:sub_401e96": null, "4202144:cgc_isascii": "int cgc_isascii(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (32 <= v1 && v1 <= 126)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202202:sub_401eda": null, "4202208:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_islower(v3) && !cgc_isupper(v3))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = 1;\n
    return v1;\n
}\n
", "4202304:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4202398:sub_401f9e": null, "4202400:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4202454:sub_401fd6": null, "4202464:cgc_isnan": null, "4202487:sub_401ff7": null, "4202496:cgc_isinf": null, "4202543:sub_40202f": null, "4202544:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4202602:sub_40206a": null, "4202608:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4202666:sub_4020aa": null, "4202672:cgc_strcmp": "int cgc_strcmp(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!*((v2 + v0)) && !*((a0 + v0)))\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!*((v2 + v0)))\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!*((a0 + v0)))\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (v0[v2] < v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (v0[v2] <= v0[a0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4202910:sub_40219e": null, "4202912:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4203003:sub_4021fb": null, "4203008:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!v0[a0])\n
            break;\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4203114:sub_40226a": null, "4203120:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a1; v0 += 4)\n
        {\n
            *(&v0[v1]) = *(&v0[a0]);\n
        }\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v1;\n
}\n
", "4203264:cgc_memset": "int cgc_memset(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = a0;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; v2 + 3 < a1; v2 += 4)\n
        {\n
            *(&v2[v3]) = v0;\n
        }\n
    }\n
    for (; v2 < a1; v2 += 1)\n
    {\n
        v2[v3] = v1;\n
    }\n
    return v3;\n
}\n
", "4203433:sub_4023a9": null, "4203440:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4203844:sub_402544": null, "4203856:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4203911:sub_402587": null, "4203920:cgc_abs": "int cgc_abs(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 0)\n
    {\n
        v0 = -(v1);\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203964:sub_4025bc": null, "4203968:cgc_freeStream": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeStream(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v1 = v3;\n
    if (!v1)\n
        return *(v2);\n
    if (*(v1))\n
        cgc_free(*(v1));\n
    cgc_free(v1);\n
    v3 = v2;\n
    *(v3) = 0;\n
    return v2;\n
}\n
", "4204088:sub_402638": null, "4204096:cgc_initStream": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initStream(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1[2];  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = 0;\n
    if (!v3)\n
    {\n
        v2[0] = v1;\n
        return v2;\n
    }\n
    else if (a0)\n
    {\n
        v1[0] = cgc_malloc(16);\n
        if (!v1)\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
        cgc_memset(v1, 0, 16);\n
        v1[0] = cgc_malloc(a0);\n
        if (!v1[0])\n
        {\n
            cgc_free(v1);\n
            v1[0] = 0;\n
            v2 = v1;\n
            return v2;\n
        }\n
        v1[1] = a0;\n
        cgc_memcpy(v1[0], v3, a0);\n
        v2 = v1;\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
}\n
", "4204363:sub_40274b": null, "4204368:cgc_readBits": "int cgc_readBits(unsigned int v5[4], unsigned int a0, unsigned int *a1)\n
{\n
    void* v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x11]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6[4];  // eax\n
\n
    v3 = 0;\n
    v2 = 0;\n
    v0 = 0;\n
    if (v5 && a1 && a0)\n
    {\n
        if (!v5[0])\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        else if (a0 <= 32)\n
        {\n
            v3 = v5[2] * 8;\n
            if (v5[1] << 3 < v3)\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            for (v3 = v5[3] + a0 + v3; a0; v2 += 1)\n
            {\n
                v1 = *((v5[0] + v5[2]));\n
                v1 = (v1 >> ((7 - v5[3]) & 31)) & 1;\n
                v0 *= 2;\n
                v0 = v1 | v0;\n
                v5[3] = v5[3] + 1 & 7;\n
                if (!v5[3])\n
                {\n
                    v6 = v5;\n
                    v6[2] = v6[2] + 1;\n
                }\n
                a0 -= 1;\n
            }\n
            *(a1) = v0;\n
            v4 = v2;\n
            return v4;\n
        }\n
        else\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
    }\n
    v4 = v2;\n
    return v4;\n
}\n
", "4204707:sub_4028a3": null, "4204720:cgc_receiveWrapper": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receiveWrapper(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = v6;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (v3 < a0)\n
        {\n
            v4 = 0;\n
            v0 = &v4;\n
            if (cgc_receive(0, v2 + v3, 1))\n
            {\n
                cgc_printf(v1 - 4348);\n
                v5 = 0;\n
                return v5;\n
            }\n
            v3 = v4 + v3;\n
        }\n
        else\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
}\n
", "4204923:sub_40297b": null, "4204928:cgc_freeCVF": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freeCVF(unsigned int v2[149])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct struct_0 **v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
        return v2;\n
    for (v1 = 0; v1 < 8; v1 += 1)\n
    {\n
        if (v2[132 + 2 * v1])\n
        {\n
            cgc_free(v2[132 + 2 * v1]);\n
            v2[132 + 2 * v1] = 0;\n
            v2[131 + 2 * v1] = 0;\n
        }\n
    }\n
    if (!v2[148])\n
        return cgc_free(v2);\n
    for (v1 = 0; v1 < v2[147]; v1 += 1)\n
    {\n
        if (*((v2[148] + (v1 << 2))))\n
        {\n
            if (*((*((v2[148] + (v1 << 2))) + 8)))\n
            {\n
                cgc_free(*((*((v2[148] + v1 * 4)) + 8)));\n
                *((*((v2[148] + v1 * 4)) + 8)) = 0;\n
                *(*((v2[148] + v1 * 4))) = 0;\n
                *((*((v2[148] + v1 * 4)) + 4)) = 0;\n
            }\n
            cgc_free(*((v2[148] + v1 * 4)));\n
            *((v2[148] + v1 * 4)) = 0;\n
        }\n
    }\n
    cgc_free(v2[148]);\n
    v2[148] = 0;\n
}\n
", "4205376:cgc_playVideo": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_playVideo(unsigned int v12[149])\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x34]\n
    void* v3;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x28]\n
    void* v6;  // [bp-0x24]\n
    unsigned int v7;  // [bp-0x20]\n
    struct_0 *v8;  // [bp-0x1c]\n
    void* v9;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 1;\n
    v6 = 0;\n
    v5 = 0;\n
    if (!v12)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    else if (v12[148])\n
    {\n
        v9 = v12[0] * v12[1];\n
        cgc_printf(v2 - 4329);\n
        v0 = v12[1];\n
        v1 = v12[147];\n
        cgc_printf(v2 - 4275);\n
        cgc_printf(v2 - 4236);\n
        cgc_printf(v2 - 4176);\n
        cgc_printf(v2 - 4123);\n
        for (v4 = 0; v4 < v12[0]; v4 += 1)\n
        {\n
            cgc_printf(v2 - 4090);\n
        }\n
        if (!cgc_receiveWrapper(&v6, 1))\n
        {\n
            v11 = 0;\n
            return v11;\n
        }\n
        while (true)\n
        {\n
            if (v10 < v12[147])\n
            {\n
                v8 = *((v12[148] + v10 * 4));\n
                if (!v8)\n
                {\n
                    v11 = 0;\n
                    return v11;\n
                }\n
                for (v3 = 0; v3 < v9; v3 += 1)\n
                {\n
                    if (v3 && !(0 CONCAT v3) /m v8->field_4 >> 32)\n
                        cgc_printf(v2 - 4277);\n
                    cgc_printf(v2 - 4087);\n
                }\n
                v10 = v10 + 1;\n
                cgc_printf(v2 - 4277);\n
            }\n
            else\n
            {\n
                v11 = v7;\n
                return v11;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
}\n
", "4205950:sub_402d7e": null, "4205952:cgc_bitsNeeded": "int cgc_bitsNeeded(unsigned int v2)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    if (!v2)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    for (v0 = 0; v2; v2 >>= 1)\n
    {\n
        v0 += 1;\n
    }\n
    v1 = v0;\n
    return v1;\n
}\n
", "4206042:sub_402dda": null, "4206048:cgc_parseCVFFrame": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCVFFrame(unsigned int v20[4], unsigned int a0[149])\n
{\n
    unsigned int v0;  // [bp-0x4c]\n
    void* v1;  // [bp-0x48], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x44], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x40], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x3c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x38], Other Possible Types: unsigned int\n
    char *v6;  // [bp-0x34], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x2c]\n
    void* v9;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x24]\n
    unsigned int v11;  // [bp-0x20]\n
    unsigned int v12[2];  // [bp-0x1c], Other Possible Types: unsigned int, struct_0 *\n
    void* v13;  // [bp-0x18], Other Possible Types: unsigned int [3]\n
    char v14;  // [bp-0x14]\n
    char v15;  // [bp-0x13]\n
    char v16;  // [bp-0x12]\n
    char v17;  // [bp-0x11]\n
    void* v18;  // [bp-0x10]\n
    unsigned int v19;  // [bp-0xc]\n
    unsigned int v21[149];  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v18 = 0;\n
    v17 = 0;\n
    v16 = 0;\n
    v15 = 0;\n
    v14 = 0;\n
    v13[0] = 0;\n
    v12[0] = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v20)\n
    {\n
        v19 = 0;\n
        return v19;\n
    }\n
    else if (!a0)\n
    {\n
        v19 = 0;\n
        return v19;\n
    }\n
    else if (!a0[0])\n
    {\n
        cgc_printf(v0 - 4084);\n
        v19 = 0;\n
        return v19;\n
    }\n
    else if (cgc_readBits(v20, 8, &v18))\n
    {\n
        v17 = (v18 >> 7) & 1;\n
        v16 = (v18 >> 6) & 1;\n
        v15 = (v18 >> 3) & 7;\n
        v14 = v18 & 7;\n
        if (!a0[147] && v17)\n
        {\n
            cgc_printf(v0 - 4024);\n
            v19 = 0;\n
            return v19;\n
        }\n
        if (v15)\n
        {\n
            if (v15 == 1)\n
            {\n
                v10 = 2;\n
                v11 = v0 - 3945;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 2)\n
            {\n
                v10 = 4;\n
                v11 = v0 - 3942;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 3)\n
            {\n
                v10 = 8;\n
                v11 = v0 - 3937;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 4)\n
            {\n
                v10 = 16;\n
                v11 = v0 - 3928;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 5)\n
            {\n
                v10 = 42;\n
                v11 = v0 - 3911;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 6)\n
            {\n
                v10 = 62;\n
                v11 = v0 - 3868;\n
                v12 = &v10;\n
            }\n
            else if (v15 == 7)\n
            {\n
                v10 = 95;\n
                v11 = v0 - 3805;\n
                v12 = &v10;\n
            }\n
        }\n
        else\n
        {\n
            if (a0[131 + 2 * v14])\n
            {\n
                v12[0] = &a0[131 + 2 * v14];\n
            }\n
            else\n
            {\n
                cgc_printf(v0 - 3990);\n
                v19 = 0;\n
                return v19;\n
            }\n
        }\n
        v2 = cgc_bitsNeeded(*(v12) - 1);\n
        v13[0] = cgc_malloc(12);\n
        if (!v13)\n
        {\n
            v19 = 0;\n
            return v19;\n
        }\n
        v9 = a0[1] * a0[0];\n
        v13[0] = a0[0];\n
        v13[1] = a0[1];\n
        v13[2] = cgc_malloc(v9);\n
        if (!v13[2])\n
        {\n
            cgc_free(v13);\n
            v13 = 0;\n
            v19 = 0;\n
            return v19;\n
        }\n
        if (v17 != 1)\n
        {\n
            v4 = v9;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            v5 = cgc_bitsNeeded(v9);\n
            if (!cgc_readBits(v20, v5, &v4))\n
            {\n
                cgc_free(v13[2]);\n
                v13[2] = 0;\n
                cgc_free(v13);\n
                v13 = 0;\n
                v19 = 0;\n
                return v19;\n
            }\n
            if (!v4)\n
            {\n
                cgc_printf(v0 - 3709);\n
                cgc_free(v13[2]);\n
                v13[2] = 0;\n
                cgc_free(v13);\n
                v13 = 0;\n
                v19 = 0;\n
                return v19;\n
            }\n
            v3 = cgc_bitsNeeded(v9 - 1);\n
        }\n
        if (!v17)\n
        {\n
            cgc_memset(v13[2], 32, v9);\n
            for (v7 = 0; v7 < v4; v7 += 1)\n
            {\n
                if (!cgc_readBits(v20, v2, &v6))\n
                {\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (v6 > *(v12))\n
                {\n
                    cgc_printf(v0 - 3675);\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                *((v13[2] + v7)) = *((*((v12 + 4)) + v6));\n
                v6 = 0;\n
            }\n
            v7 = 8 - (v2 * v4 & 7) & 7;\n
        }\n
        else\n
        {\n
            if (!*((a0[148] + (a0[147] - 1 << 2))))\n
            {\n
                cgc_free(v13[2]);\n
                v13[2] = 0;\n
                cgc_free(v13);\n
                v13 = 0;\n
                v19 = 0;\n
                return v19;\n
            }\n
            cgc_memcpy(v13[2], *((*((a0[148] + (a0[147] - 1) * 4)) + 8)), v9);\n
            for (v1 = 0; v1 < v4; v1 += 1)\n
            {\n
                v7 = 0;\n
                v6 = 0;\n
                if (!cgc_readBits(v20, v3, &v7))\n
                {\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    cgc_printf(v0 - 3652);\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (!cgc_readBits(v20, v2, &v6))\n
                {\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    cgc_printf(v0 - 3616);\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (v7 >= v9)\n
                {\n
                    cgc_printf(v0 - 3580);\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                if (v6 >= *(v12))\n
                {\n
                    cgc_printf(v0 - 3545);\n
                    cgc_free(v13[2]);\n
                    v13[2] = 0;\n
                    cgc_free(v13);\n
                    v13 = 0;\n
                    v19 = 0;\n
                    return v19;\n
                }\n
                *((v13[2] + v7)) = *((*((v12 + 4)) + v6));\n
            }\n
            v7 = v5;\n
            v7 = &v7[v4 * (v3 + v2)];\n
            v7 &= 7;\n
            v7 = 8 + -0x1 * v7 & 7;\n
        }\n
        if (v7 && !cgc_readBits(v20, v7, &v6))\n
        {\n
            cgc_free(v13[2]);\n
            v13[2] = 0;\n
            cgc_free(v13);\n
            v13 = 0;\n
            cgc_printf(v0 - 3505);\n
            v19 = 0;\n
            return v19;\n
        }\n
        *((a0[148] + a0[147] * 4)) = v13;\n
        v21 = a0;\n
        v21[147] = v21[147] + 1;\n
        v19 = 1;\n
        return v19;\n
    }\n
    else\n
    {\n
        v19 = 0;\n
        return v19;\n
    }\n
}\n
", "4208435:sub_403733": null, "4208448:cgc_parseCVFPixelDict": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCVFPixelDict(unsigned int v6[4], unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: void*\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (a0)\n
    {\n
        if (a1 >= 0 && a1 <= 7)\n
        {\n
            if (*((a0 + (a1 << 3) + 524)))\n
            {\n
                cgc_printf(v0 - 3468);\n
                v5 = 0;\n
                return v5;\n
            }\n
            else if (!cgc_readBits(v6, 8, &v4))\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            else if (v4)\n
            {\n
                v2 = cgc_malloc(v4 + 1);\n
                if (!v2)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                cgc_memset(v2, 0, v4 + 1);\n
                v1 = 0;\n
                while (true)\n
                {\n
                    if (v1 >= v4)\n
                    {\n
                        cgc_memset(a0 + 524 + a1 * 8, 0, 8);\n
                        *((a0 + a1 * 8 + 524)) = v4;\n
                        *((a0 + a1 * 8 + 528)) = v2;\n
                        v5 = 1;\n
                        return v5;\n
                    }\n
                    else if (cgc_readBits(v6, 8, &v3))\n
                    {\n
                        v2[v1] = v3;\n
                        v3 = 0;\n
                        v1 += 1;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v0 - 3376);\n
                        cgc_free(v2);\n
                        v2 = 0;\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                }\n
            }\n
            else\n
            {\n
                cgc_printf(v0 - 3427);\n
                v5 = v4;\n
                return v5;\n
            }\n
        }\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4209029:sub_403985": null, "4209040:cgc_parseCVFDescription": "typedef struct struct_0 {\n
    char padding_0[268];\n
    char field_10c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCVFDescription(unsigned int v6[4], struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x15]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (a0->field_10c)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!cgc_readBits(v6, 8, &v4))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v4 <= 255)\n
    {\n
        v3 = 0;\n
        while (true)\n
        {\n
            if (v3 >= v4)\n
            {\n
                v3 = 0;\n
                while (true)\n
                {\n
                    if (v3 >= v4)\n
                    {\n
                        v5 = 1;\n
                        return v5;\n
                    }\n
                    v2 = *((a0 + v3 + 268));\n
                    if (!cgc_isalpha(v2) && !cgc_isdigit(v2) && !cgc_isspace(v2))\n
                    {\n
                        cgc_printf(v0 - 0xd00);\n
                        v5 = 0;\n
                        return v5;\n
                    }\n
                    v3 += 1;\n
                }\n
            }\n
            else if (cgc_readBits(v6, 8, &v1))\n
            {\n
                (&a0->field_10c)[v3] = v1;\n
                v1 = 0;\n
                v3 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4209516:sub_403b6c": null, "4209520:cgc_parseCVFName": "typedef struct struct_0 {\n
    char padding_0[12];\n
    char field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCVFName(unsigned int v6[4], struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (v6 && a0)\n
    {\n
        if (a0->field_c)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        else if (!cgc_readBits(v6, 8, &v4))\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        else if (v4 <= 255)\n
        {\n
            v2 = 0;\n
            while (true)\n
            {\n
                if (v2 >= v4)\n
                {\n
                    v1 = 0;\n
                    while (true)\n
                    {\n
                        if (v1 >= v4)\n
                        {\n
                            v5 = 1;\n
                            return v5;\n
                        }\n
                        if (!cgc_isascii((&a0->field_c)[v1]))\n
                        {\n
                            cgc_printf(v0 - 3286);\n
                            v5 = 0;\n
                            return v5;\n
                        }\n
                        v1 += 1;\n
                    }\n
                }\n
                else if (cgc_readBits(v6, 8, &v3))\n
                {\n
                    *((a0 + v2 + 12)) = v3;\n
                    v3 = 0;\n
                    v2 += 1;\n
                }\n
                else\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
            }\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    v5 = 0;\n
    return v5;\n
}\n
", "4209921:sub_403d01": null, "4209936:cgc_parseCVFHeader": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parseCVFHeader(unsigned int v2[4], unsigned int a0[149])\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a0[0])\n
    {\n
        cgc_printf(v0 - 3249);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!cgc_readBits(v2, 8, a0))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!a0[0])\n
    {\n
        cgc_printf(v0 - 3196);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a0[0] > 35)\n
    {\n
        cgc_printf(v0 - 3151);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!cgc_readBits(v2, 8, &a0[1]))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!a0[1])\n
    {\n
        cgc_printf(v0 - 3114);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a0[1] > 128)\n
    {\n
        cgc_printf(v0 - 3070);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (!cgc_readBits(v2, 16, &a0[2]))\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a0[2] > 0x800)\n
    {\n
        cgc_printf(v0 - 3033);\n
        v1 = 0;\n
        return v1;\n
    }\n
    else if (a0[2])\n
    {\n
        a0[148] = cgc_malloc(a0[2] * 4);\n
        if (!a0[148])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        cgc_memset(a0[148], 0, a0[2] * 4);\n
        v1 = 1;\n
        return v1;\n
    }\n
    else\n
    {\n
        cgc_printf(v0 - 2996);\n
        v1 = 0;\n
        return v1;\n
    }\n
}\n
", "4210579:sub_403f93": null, "4210592:cgc_renderCVF": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_renderCVF(unsigned int v4[4])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v4)\n
        return v4;\n
    v5 = cgc_readBits(v4, 32, &v3);\n
    if (!v5)\n
        return v5;\n
    if (v3 != 4412998)\n
    {\n
        v5 = cgc_printf(v1 - 2953);\n
        return v5;\n
    }\n
    v5 = cgc_initCVF();\n
    v2 = v5;\n
    if (!v2)\n
        return v5;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (cgc_readBits(v4, 16, &v3))\n
        {\n
            v0 = v3;\n
            if (v0 == 4369)\n
            {\n
                if (!cgc_parseCVFHeader(v4, v2))\n
                {\n
                    v5 = cgc_freeCVF(v2);\n
                    v2 = 0;\n
                    return v5;\n
                }\n
            }\n
            else\n
            {\n
                if (v0 == 8738)\n
                {\n
                    if (!cgc_parseCVFName(v4, v2))\n
                    {\n
                        v5 = cgc_freeCVF(v2);\n
                        v2 = 0;\n
                        return v5;\n
                    }\n
                }\n
                else\n
                {\n
                    if (v0 == 13107)\n
                    {\n
                        if (!cgc_parseCVFDescription(v4, v2))\n
                        {\n
                            v5 = cgc_freeCVF(v2);\n
                            v2 = 0;\n
                            return v5;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v0 - 17476 < 8)\n
                        {\n
                            v3 -= 17476;\n
                            if (!cgc_parseCVFPixelDict(v4, v2, v3))\n
                            {\n
                                v5 = cgc_freeCVF(v2);\n
                                v2 = 0;\n
                                return v5;\n
                            }\n
                        }\n
                        else if (v0 != 21845)\n
                        {\n
                            v5 = cgc_printf(v1 - 2926);\n
                            return v5;\n
                        }\n
                        else if (!cgc_parseCVFFrame(v4, v2))\n
                        {\n
                            v5 = cgc_freeCVF(v2);\n
                            v2 = 0;\n
                            return v5;\n
                        }\n
                    }\n
                }\n
            }\n
            v3 = 0;\n
        }\n
        else\n
        {\n
            cgc_playVideo(v2);\n
            v5 = cgc_freeCVF(v2);\n
            return v5;\n
        }\n
    }\n
}\n
", "4211301:sub_404265": null, "4211312:cgc_initCVF": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initCVF()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    v1 = cgc_malloc(596);\n
    if (!v1)\n
    {\n
        v2 = v1;\n
        return v2;\n
    }\n
    cgc_memset(v1, 0, 596);\n
    v2 = v1;\n
    return v2;\n
}\n
", "4211424:cgc_receiveIt": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receiveIt(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = v6;\n
    v2 = 0;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    while (true)\n
    {\n
        if (0 < a0)\n
        {\n
            v0 = &v4;\n
            if (cgc_receive(0, v3 + v2, a0))\n
            {\n
                cgc_printf(v1 - 2892);\n
                v5 = 0;\n
                return v5;\n
            }\n
            v2 = v4 + v2;\n
            a0 -= v4;\n
        }\n
        else\n
        {\n
            v5 = v2;\n
            return v5;\n
        }\n
    }\n
}\n
", "4211629:sub_4043ad": null, "4211632:cgc_readImageData": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_readImageData()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    cgc_printf(\"----------------Stream Me Your Video----------------\\n
\");\n
    v3 = cgc_receiveIt(&v4, 4);\n
    if (v3 != 4)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v4 > 0x1000)\n
    {\n
        cgc_printf(v0 - 2811);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (v4 >= 8)\n
    {\n
        v1 = cgc_malloc(v4);\n
        if (!v1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        cgc_memset(v1, 0, v4);\n
        v3 = cgc_receiveIt(v1, v4);\n
        if (v3 != v4)\n
        {\n
            cgc_free(v1);\n
            v5 = 0;\n
            return v5;\n
        }\n
        v2 = cgc_initStream(v1, v4);\n
        cgc_free(v1);\n
        v1 = 0;\n
        v5 = v2;\n
        return v5;\n
    }\n
    else\n
    {\n
        cgc_printf(v0 - 2764);\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4212016:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1[4];  // [bp-0x14]\n
    char v2;  // [bp-0xd]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    v1[0] = cgc_readImageData();\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_renderCVF(v1);\n
    cgc_freeStream(v1);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4212132:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}