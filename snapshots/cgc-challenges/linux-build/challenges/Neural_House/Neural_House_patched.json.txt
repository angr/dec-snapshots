{"4202496:_init": "extern struct_0 *g_40bb14;\n
\n
int _init()\n
{\n
    if (g_40bb14)\n
    {\n
        g_40bb14();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202592:_Znaj": "// attributes: PLT stub\n
int operator new[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator new[]();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202656:_ZdaPv": "// attributes: PLT stub\n
int operator delete[](unsigned int v0)\n
{\n
    ::libstdc++.so::operator delete[]();\n
    return;\n
}\n
", "4202672:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202688:sub_4020c0": "int sub_4020c0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202694:sub_4020c6": null, "4202704:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202747:sub_4020fb": null, "4202748:sub_4020fc": "int sub_4020fc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202752:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202756:sub_402104": null, "4202768:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 39431;\n
    v6 = v5 + 867;\n
    v7 = v5 + 867;\n
    if (v7 == v6)\n
        return v5 + 867;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202819:sub_402143": "int sub_402143()\n
{\n
}\n
", "4202825:sub_402149": "int sub_402149()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202832:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 39367;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 867;\n
    v9 = (v6 + 867 - (v6 + 867) >> 31) + (867 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202903:sub_402197": "int sub_402197()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202912:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40bb08;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40bb08)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020c0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4202987:sub_4021eb": "int sub_4021eb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4202992:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203001:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203005:sub_4021fd": null, "4203008:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    if (v5 * a0 >> 32)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = cgc_malloc_alloc(v1 + 3476);\n
    if (!v2)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v4 = v2;\n
    return v4;\n
}\n
", "4203176:sub_4022a8": null, "4203184:cgc_isascii": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isascii(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 1;\n
}\n
", "4203224:sub_4022d8": null, "4203232:cgc_isdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isdigit(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 2;\n
}\n
", "4203272:sub_402308": null, "4203280:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 16;\n
}\n
", "4203320:sub_402338": null, "4203328:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 14;\n
}\n
", "4203368:sub_402368": null, "4203376:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 12;\n
}\n
", "4203416:sub_402398": null, "4203424:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 4;\n
}\n
", "4203464:sub_4023c8": null, "4203472:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 8;\n
}\n
", "4203512:sub_4023f8": null, "4203520:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 64;\n
}\n
", "4203560:sub_402428": null, "4203568:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 32;\n
}\n
", "4203608:sub_402458": null, "4203616:cgc_iscntrl": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_iscntrl(unsigned int v0)\n
{\n
    return (&_GLOBAL_OFFSET_TABLE_)[52 + v0] & 128;\n
}\n
", "4203658:sub_40248a": null, "4203664:cgc_isxdigit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isxdigit(unsigned int v4)\n
{\n
    char v0;  // [bp-0x11]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0x9]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_toupper();\n
    v2 = 1;\n
    if (cgc_isdigit(v4))\n
        return v2 & 1;\n
    v0 = 0;\n
    if (v4 >= 65)\n
        v0 = v4 <= 70;\n
    v2 = v0;\n
    return v2 & 1;\n
}\n
", "4203778:sub_402502": null, "4203792:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4203877:sub_402565": null, "4203888:cgc_digittoint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_digittoint(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = cgc_toupper(v3);\n
    if (cgc_isdigit(v3))\n
    {\n
        v1 = v3 - 48;\n
        return v1;\n
    }\n
    if (v3 >= 65 && v3 <= 70)\n
    {\n
        v1 = v3 + -55;\n
        return v1;\n
    }\n
    v1 = 0;\n
    return v1;\n
}\n
", "4204017:sub_4025f1": null, "4204032:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v1 = v1;\n
    if (!cgc_isupper(v1))\n
    {\n
        v0 = v1;\n
        return v0;\n
    }\n
    v1 ^= 32;\n
    v0 = v1;\n
    return v0;\n
}\n
", "4204117:sub_402655": null, "4204128:__cxa_pure_virtual": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int __cxa_pure_virtual()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(1, v0);\n
    cgc_exit(v2, v3);\n
    return;\n
}\n
", "4204160:cgc_exit": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exit()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x4]\n
    unsigned int v2;  // [bp+0x4]\n
    unsigned int v3;  // [bp+0x8]\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v4 = &v1;\n
    v0 = v5;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc__terminate(v2, v0);\n
    cgc_fflush(v2, v3);\n
    return;\n
}\n
", "4204192:cgc_fflush": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fflush(unsigned int v4[5])\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == -1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    else if (v4[1] != 1)\n
    {\n
        v2 = 0;\n
        v0 = v4[3] - v4[2];\n
        ::0x4027a0::cgc_xlat(v4[4], &v4[1 + 1] + v4[2]);\n
        v0 = v4[3] - v4[2];\n
        if (::0x402810::cgc_transmit_all(v4[0], &v4[1 + 1] + v4[2]))\n
            v2 = -1;\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = v2;\n
        return v3;\n
    }\n
    else\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4204444:sub_40279c": null, "4204448:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4204547:sub_402803": null, "4204560:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < a1)\n
        {\n
            v0 = &v2;\n
            if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 = *(&v2) + v3;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4204710:sub_4028a6": null, "4204720:cgc_fbuffered": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fbuffered(unsigned int v1[4], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[2] != -1)\n
        cgc_fflush(v1);\n
    if (a0)\n
        v1[2] = 0;\n
    else\n
        v1[2] = -1;\n
    v1[3] = 0;\n
    return v1;\n
}\n
", "4204836:sub_402924": null, "4204848:cgc_fopen": "int cgc_fopen(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1[6];  // [bp-0x10]\n
    unsigned int v2[6];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = 1048;\n
    v1[0] = cgc_malloc();\n
    if (!v1)\n
    {\n
        v2[0] = 0;\n
        return v2;\n
    }\n
    v1[0] = v3;\n
    v1[1] = (a0 ? 1 : 2);\n
    v1[2] = 0;\n
    v1[3] = 0;\n
    v1[5] = 0;\n
    v1[4] = 0;\n
    v2 = v1;\n
    return v2;\n
}\n
", "4204998:sub_4029c6": null, "4205008:cgc_fread": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fread(unsigned int v6, unsigned int a0, unsigned int a1[6])\n
{\n
    struct_0 *v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[6];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] == a1[3])\n
        cgc__refill();\n
    if (a1[2] != -1)\n
    {\n
        v2 = a1[3] - a1[2];\n
        if (v2 > a0)\n
            v2 = a0;\n
        cgc_memcpy(v4, 1 + a1 + a1[2]);\n
        v3 = v2 + v3;\n
        v7 = a1;\n
        v7[2] = v2 + v7[2];\n
        if (a1[2] == a1[3])\n
        {\n
            a1[3] = 0;\n
            a1[2] = 0;\n
        }\n
    }\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
        {\n
            v5 = v3;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(a1[0], v4 + v3, a0 - v3))\n
            break;\n
        if (!v2)\n
            break;\n
        ::0x402c30::cgc_xlat(a1[5], v4 + v3);\n
        v3 = v2 + v3;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4205387:sub_402b4b": null, "4205392:cgc__refill": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__refill(unsigned int v4[6])\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v4[2] == v4[3])\n
    {\n
        v4[3] = 0;\n
        v4[2] = 0;\n
    }\n
    v0 = &v2;\n
    if (!cgc_receive(v4[0], (1 + v4 + v4[3]), 0x400 - v4[3]) && *(&v2))\n
    {\n
        v4[3] = *(&v2);\n
        ::0x402c30::cgc_xlat(v4[5], v4 + 1);\n
        v3 = *(&v2);\n
        return v3;\n
    }\n
    v3 = -1;\n
    return v3;\n
}\n
", "4205603:sub_402c23": null, "4205616:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4205715:sub_402c93": null, "4205728:cgc_freaduntil": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_freaduntil(unsigned int v6, unsigned int a0, char a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    char *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    for (v4 = 0; v4 < a0 - 1; v4 += 1)\n
    {\n
        v0 = a2;\n
        v3 = cgc__getc();\n
        if (v3 == -1)\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        if (v3 == a1)\n
            break;\n
        *((v6 + v4)) = v3;\n
    }\n
    if (v4 == a0 - 1)\n
    {\n
        do\n
        {\n
            v0 = a2;\n
            v2 = cgc__getc();\n
            if (v2 == -1)\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
        } while (v2 != a1);\n
    }\n
    *((v6 + v4)) = 0;\n
    v5 = v4;\n
    return v5;\n
}\n
", "4205994:sub_402daa": null, "4206000:cgc__getc": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
    char padding_10[4];\n
    char *field_14;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__getc(struct_0 *v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    char v3;  // [bp-0x11]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v6[6];  // edx\n
    unsigned int v7;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v5->field_8 == -1)\n
    {\n
        v0 = &v2;\n
        if (!cgc_receive(v5->field_0, &v3, 1) && *(&v2))\n
        {\n
            ::0x402c30::cgc_xlat(v5->field_14, &v3, 1);\n
            v4 = v3;\n
            return v4;\n
        }\n
        v4 = -1;\n
        return v4;\n
    }\n
    else\n
    {\n
        if (v5->field_8 == v5->field_c && cgc__refill(v5) < 0)\n
        {\n
            v4 = -1;\n
            return v4;\n
        }\n
        v6 = v5;\n
        v7 = v6[2];\n
        v6[2] = v7 + 1;\n
        v4 = *(24 + &v5->field_0 + v7);\n
        return v4;\n
    }\n
}\n
", "4206245:sub_402ea5": null, "4206256:cgc_free": "extern unsigned int g_heap;\n
\n
int cgc_free(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return malloc_free(&g_heap);\n
}\n
", "4206305:sub_402ee1": null, "4206320:cgc_fwrite": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fwrite(unsigned int v6, unsigned int a0, unsigned int a1[5])\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v7[5];  // eax\n
    unsigned int v8[5];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v6;\n
    v3 = 0;\n
    if (a1[2] != -1)\n
    {\n
        if (a0 >= 0x400)\n
        {\n
            cgc_fflush(a1);\n
        }\n
        else\n
        {\n
            if (a1[3] + a0 >= 0x400)\n
            {\n
                v2 = 0x400 - a1[3];\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4);\n
                v7 = a1;\n
                v7[3] = v2 + v7[3];\n
                v3 = v2 + v3;\n
                cgc_fflush(a1);\n
            }\n
            if (v3 < a0)\n
            {\n
                v2 = a0 - v3;\n
                cgc_memcpy(&a1[1 + 1] + a1[3], v4 + v3);\n
                v8 = a1;\n
                v8[3] = v2 + v8[3];\n
                v3 = v2 + v3;\n
            }\n
            v5 = v3;\n
            return v5;\n
        }\n
    }\n
    if (a1[4])\n
    {\n
        v0 = a0;\n
        if (cgc_transmit_xlat(a1[0], a1[4], v6))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
    }\n
    else if (::0x4030b0::cgc_transmit_all(a1[0], v6))\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v5 = a0;\n
    return v5;\n
}\n
", "4206765:sub_4030ad": null, "4206768:cgc_transmit_all": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_all(unsigned int v6, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x20]\n
    char v2;  // [bp-0x1c]\n
    void* v3;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a0;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a1)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_transmit(v6, v4 + v3, a1 - v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 = *(&v2) + v3;\n
    }\n
}\n
", "4206918:sub_403146": null, "4206928:cgc_transmit_xlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_transmit_xlat(unsigned int v6, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x414], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x410]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = a1;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 < a2)\n
        {\n
            v1 = a2 - v2;\n
            if (v1 > 0x400)\n
                v1 = 0x400;\n
            cgc_memcpy(&v3, v4 + v2);\n
            ::0x403280::cgc_xlat(a0, &v3);\n
            if (::0x4030b0::cgc_transmit_all(v6, &v3, v1))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v2 = v1 + v2;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4207220:sub_403274": null, "4207232:cgc_xlat": "int cgc_xlat(char *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8]\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v3 = a0;\n
    v1 = v3;\n
    if (!v2)\n
        return a0;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v0;\n
        if (v3 >= a1)\n
            break;\n
        v1[v0] = v2[v1[v0]];\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4207331:sub_4032e3": null, "4207344:cgc_fxlat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_fxlat(unsigned int v8[6], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x28]\n
    unsigned int v2;  // [bp-0x24]\n
    unsigned int v3;  // [bp-0x20]\n
    char *v4;  // [bp-0x1c]\n
    char *v5;  // [bp-0x18]\n
    unsigned int v6;  // [bp-0x14]\n
    unsigned int v7;  // [bp-0x10]\n
    char *v9;  // eax\n
    char *v10;  // eax, Other Possible Types: unsigned int, unsigned int [6]\n
    char *v11;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a0)\n
    {\n
        cgc_free(v8[4]);\n
        v8[4] = 0;\n
        v10 = v8;\n
        v10[5] = 0;\n
        return v8;\n
    }\n
    v0 = 0x100;\n
    v9 = cgc_realloc(v8[4]);\n
    v8[4] = v9;\n
    v5 = v9;\n
    v0 = 0x100;\n
    v11 = cgc_realloc(v8[5]);\n
    v8[5] = v11;\n
    v4 = v11;\n
    v10 = cgc_hash_seed(a0);\n
    v7 = v10;\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v5[v6] = v6;\n
        v10 = v6 + 1;\n
    }\n
    for (v6 = 255; v6 >= 1; v6 = v10)\n
    {\n
        v3 = (0 CONCAT v7) /m v6 >> 32;\n
        v7 *= 3;\n
        v7 = v7 * 0x2000 ^ v7 >> 19 ^ v7 >> 21;\n
        v2 = v5[v6];\n
        v5[v6] = v5[v3];\n
        v5[v3] = v2;\n
        v10 = v6 - 1;\n
    }\n
    for (v6 = 0; v6 < 0x100; v6 = v10)\n
    {\n
        v4[v5[v6]] = v6;\n
        v10 = v6 + 1;\n
    }\n
    return v10;\n
}\n
", "4207739:sub_40347b": null, "4207744:cgc_hash_seed": "int cgc_hash_seed(unsigned int v2)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 826981510;\n
    for (v1 = 0; v1[v2]; v1 += 1)\n
    {\n
        v0 *= 37;\n
        v0 = v1[v2] ^ v0;\n
        v0 = v0 * 0x2000 ^ v0 >> 19;\n
    }\n
    return v0;\n
}\n
", "4207848:sub_4034e8": null, "4207856:cgc_malloc": "extern unsigned int g_heap;\n
\n
int cgc_malloc(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
\n
    v0 = v1;\n
    return cgc_malloc_alloc(&g_heap);\n
}\n
", "4207905:sub_403521": null, "4207920:cgc_malloc_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_alloc(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 > 2147483647)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    a0 = a0 - -3 & -0x4;\n
    if (a0 < 4)\n
    {\n
        v0 = 4;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 16)\n
    {\n
        v0 = a0;\n
        v2 = cgc_tiny_alloc(v4);\n
    }\n
    else if (a0 < 0x20000)\n
    {\n
        v0 = a0;\n
        v2 = cgc_small_alloc(v4);\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v2 = cgc_large_alloc(v4);\n
    }\n
    v3 = v2;\n
    return v3;\n
}\n
", "4208158:sub_40361e": null, "4208160:cgc_tiny_alloc": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    char padding_4[4628];\n
    unsigned int field_1218;\n
    unsigned int field_121c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_tiny_alloc(unsigned int v8, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int *v2;  // [bp-0x1c]\n
    unsigned short v3[2];  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int *v4;  // [bp-0x14]\n
    struct_0 *v5;  // [bp-0x10]\n
    unsigned int *v6;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned short v10[2];  // eax\n
    struct_0 *v11;  // eax\n
    unsigned short v12[2];  // eax\n
\n
    v7 = v9;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = cgc_size_to_bin();\n
    v4 = *((v8 + v5 * 4));\n
    if (v4)\n
    {\n
        *((v8 + v5 * 4)) = *(v4);\n
        v6 = v4;\n
        return v6;\n
    }\n
    *(&v3[0]) = *((v8 + v5 * 4 + 4620));\n
    if (!v3)\n
    {\n
        if (!*((v8 + 4632)))\n
        {\n
            v0 = 1;\n
            *((v8 + 4632)) = cgc_run_alloc(v8);\n
            if (!*((v8 + 4632)))\n
            {\n
                v6 = 0;\n
                return v6;\n
            }\n
            *((v8 + 4636)) = 0;\n
        }\n
        v10 = *((v8 + 4632)) + *((v8 + 4636));\n
        *((v8 + v5 * 4 + 4620)) = v10;\n
        v3 = v10;\n
        *(v3) = a0;\n
        *((v3 + 2)) = a0;\n
        v11 = v8;\n
        v11->field_121c = v11->field_121c + 0x1000;\n
        if (*((v8 + 4636)) == 0x100000)\n
            *((v8 + 4632)) = 0;\n
    }\n
    v2 = v3 + *((v3 + 2));\n
    v12 = v3;\n
    v12[1] = v12[1] + a0;\n
    if (*((v3 + 2)) + *(v3) > 0x1000)\n
        *((v8 + v5 * 4 + 4620)) = 0;\n
    v6 = v2;\n
    return v6;\n
}\n
", "4208571:sub_4037bb": null, "4208576:cgc_small_alloc": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    char padding_8[4];\n
    struct struct_0 *field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc(unsigned int v7, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x1c]\n
    struct_0 *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    struct struct_0 **v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 - -23 & -0x10;\n
    for (v4 = cgc_size_to_bin(); v4 < 131; v4 = v4 + 1)\n
    {\n
        for (v2 = *((v7 + v4 * 4)); v2; v2 = v2->field_c)\n
        {\n
            if (v2->field_4 >= v3)\n
                break;\n
        }\n
        if (v2)\n
            break;\n
    }\n
    if (v4 == 131)\n
    {\n
        if (!cgc_small_alloc_run())\n
        {\n
            v4 = 130;\n
            v2 = *((v7 + v4 * 4));\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
    v0 = v2;\n
    cgc_small_unlink_free(v7, v4);\n
    if (*((v2 + 4)) - v3 > 32)\n
    {\n
        v0 = v3;\n
        cgc_small_split(v7, v2);\n
    }\n
    v5 = v2 + 8;\n
    return v5;\n
}\n
", "4208903:sub_403907": null, "4208912:cgc_large_alloc": "int cgc_large_alloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1[2];  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = a0 - -4103 & -0x1000;\n
    v0 = &v2;\n
    if (cgc_allocate(v3, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1[0] = *(&v2);\n
    v1[0] = v5;\n
    v1[1] = v3;\n
    v4 = v1 + 1;\n
    return v4;\n
}\n
", "4209049:sub_403999": null, "4209056:malloc_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int malloc_free(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = *((v3 + (a0 >> 20) + 524));\n
    v2 = v4;\n
    if (!a0)\n
    {\n
        return *((v3 + (a0 >> 20) + 524));\n
    }\n
    else if (v2)\n
    {\n
        if (v2 == 2)\n
        {\n
            v0 = a0;\n
            v4 = cgc_small_free(v3);\n
        }\n
        else if (v2 == 1)\n
        {\n
            v0 = a0;\n
            v4 = cgc_tiny_free(v3);\n
        }\n
        return v4;\n
    }\n
    else\n
    {\n
        v0 = a0;\n
        v4 = cgc_large_free(v3);\n
        return v4;\n
    }\n
}\n
", "4209258:sub_403a6a": null, "4209264:cgc_large_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_large_free(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[2];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    if ((v3 & 4095) != 8)\n
        cgc_heap_error(v1 - 10932);\n
    v2[0] = a0 - 8;\n
    if (v2[0] != v4)\n
    {\n
        v0 = v4;\n
        cgc_heap_error(v1 - 10883, v3, v2[0]);\n
    }\n
    if (v2[1] >= 0x20000 && v2[1] <= 2147487743 && !(v2[1] & 4095))\n
        return cgc_deallocate(v2);\n
    cgc_heap_error(v1 - 10829, v3);\n
    return cgc_deallocate(v2);\n
}\n
", "4209520:cgc_small_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_free(unsigned int v10, unsigned int a0)\n
{\n
    unsigned int v0[2];  // [bp-0x34], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6[2];  // [bp-0x18]\n
    unsigned int v7[2];  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v8[2];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11[2];  // eax\n
    unsigned int v12[2];  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = a0;\n
    v8[0] = v9 - 8;\n
    v5 = v9 & -0x100000;\n
    if ((v9 & 7))\n
        cgc_heap_error(v4 - 10785);\n
    if ((v8[1] & 1))\n
        cgc_heap_error(v4 - 10736);\n
    if (v8[1] <= 0x20000 && !(v8[1] < 16))\n
        goto LABEL_403c2c;\n
    cgc_heap_error(v4 - 10698);\n
LABEL_403c2c:\n
    if (!v8[0])\n
        v7[0] = 0;\n
    else\n
        v7 = v8 - v8[0];\n
    v6[0] = v8 + v8[1];\n
    if (v7 && (*((v7 + 4)) & -2) != v8[0])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 10657, v7);\n
    }\n
    if (v6[0] != v8[1])\n
    {\n
        v0 = v9;\n
        cgc_heap_error(v4 - 10605, v6);\n
    }\n
    if (v7 && (*((v7 + 4)) & 1))\n
    {\n
        v3 = v10;\n
        v0[0] = v7;\n
        cgc_small_unlink_free(v3, cgc_size_to_bin());\n
        v11 = v7;\n
        v11[1] = v8[1] + v11[1];\n
        v8 = v7;\n
        v6[0] = *((v8 + 4));\n
    }\n
    if ((v6[1] & 1))\n
    {\n
        v2 = v10;\n
        v0[0] = v6;\n
        cgc_small_unlink_free(v2, cgc_size_to_bin());\n
        v12 = v8;\n
        v12[1] = v6[1] + v12[1];\n
        v6[0] = v8 + v8[1];\n
        v6[0] = *((v8 + 4));\n
    }\n
    v1 = v10;\n
    v0[0] = v8;\n
    return cgc_small_insert_free(v1, cgc_size_to_bin());\n
}\n
", "4210142:sub_403dde": null, "4210144:cgc_tiny_free": "int cgc_tiny_free(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned short *v1;  // [bp-0x14]\n
    unsigned short *v2;  // [bp-0x10]\n
    unsigned int *v3;  // [bp-0xc]\n
\n
    v2 = a0 & -0x1000;\n
    v1 = a0;\n
    v0 = *(v2);\n
    v3 = cgc_size_to_bin();\n
    *(&v1) = *((v4 + v3 * 4));\n
    *((v4 + v3 * 4)) = v1;\n
    return v4;\n
}\n
", "4210235:sub_403e3b": null, "4210240:cgc_malloc_size": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int cgc_malloc_size(unsigned int v4, unsigned short *a0)\n
{\n
    unsigned short *v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = *((v4 + (a0 >> 20) + 524));\n
    if (v2 != 2 && v2)\n
    {\n
        if (v2 == 1)\n
        {\n
            v0 = a0 & -0x1000;\n
            v3 = *(v0);\n
            return v3;\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
    v1 = &a0[4];\n
    v3 = v1->field_4 - 8;\n
    return v3;\n
}\n
", "4210378:sub_403eca": null, "4210384:cgc_malloc_realloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc_realloc(unsigned int v6, unsigned short *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a1 > 2147483647)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a1)\n
    {\n
        malloc_free(v6, a0);\n
        v5 = 0;\n
        return v5;\n
    }\n
    else if (!a0)\n
    {\n
        v5 = cgc_malloc_alloc(v6, a1);\n
        return v5;\n
    }\n
    else if (cgc_malloc_size(v6, a0) < a1)\n
    {\n
        v4 = cgc_malloc_alloc(v6, a1);\n
        if (!v4)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v1 = v4;\n
        v2 = a0;\n
        v0 = cgc_malloc_size(v6, a0);\n
        cgc_memcpy(v1, v2);\n
        malloc_free(v6, a0);\n
        v5 = v4;\n
        return v5;\n
    }\n
    else\n
    {\n
        v5 = a0;\n
        return v5;\n
    }\n
}\n
", "4210703:sub_40400f": null, "4210704:cgc_size_to_bin": "int cgc_size_to_bin(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 16)\n
    {\n
        v0 = (v1 >> 2) - 1;\n
        return v0;\n
    }\n
    else if (v1 <= 0x200)\n
    {\n
        v0 = (v1 >> 4) - -2;\n
        return v0;\n
    }\n
    else if (v1 <= 0x1200)\n
    {\n
        v0 = (v1 - 0x200 >> 7) - -34;\n
        return v0;\n
    }\n
    else if (v1 <= 0x20000)\n
    {\n
        v0 = (v1 - 0x1200 >> 11) - -66;\n
        return v0;\n
    }\n
    else\n
    {\n
        v0 = 130;\n
        return v0;\n
    }\n
}\n
", "4210867:sub_4040b3": null, "4210880:cgc_run_alloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_run_alloc(unsigned int v7, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_allocate(0x200000, 0))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = *(&v2);\n
    v3 = v4 - -1048575 & -0x100000;\n
    if (v4 < v3)\n
        cgc_deallocate(v4);\n
    if (v3 + 0x100000 < v4 + 0x200000)\n
        cgc_deallocate(v3 + 0x100000);\n
    *((v7 + (v3 >> 20) + 524)) = a0;\n
    v5 = v3;\n
    return v5;\n
}\n
", "4211133:sub_4041bd": null, "4211136:cgc_small_alloc_run": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_alloc_run(unsigned int v7)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3[2];  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_run_alloc(v7, 2);\n
    if (!v2)\n
    {\n
        v5 = 1;\n
        return v5;\n
    }\n
    v4[0] = v2 - -19 & -0x10;\n
    v4[0] = 0;\n
    v4[1] = 1048560 + -0x1 * v4 + v2;\n
    v3[0] = v4 + v4[1];\n
    v3[0] = v4[1];\n
    v3[1] = 0;\n
    v0[0] = v4;\n
    cgc_small_insert_free(v7, 130);\n
    v5 = 0;\n
    return v5;\n
}\n
", "4211334:sub_404286": null, "4211344:cgc_small_unlink_free": "typedef struct struct_2 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    struct struct_1 *field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_unlink_free(unsigned int *v2, unsigned int a0, struct_2 *a1)\n
{\n
    struct_2 *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    struct_2 *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!(a1->field_4 & 1))\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 10978);\n
    }\n
    v3 = a1;\n
    v3->field_4 = v3->field_4 & -2;\n
    if (a1->field_8)\n
        a1->field_8->field_c = a1->field_c;\n
    if (a1->field_c)\n
        a1->field_c->field_8 = a1->field_8;\n
    if (v2[a0] == a1)\n
        v2[a0] = a1->field_c;\n
    a1->field_8 = 0;\n
    a1->field_c = 0;\n
    return a1;\n
}\n
", "4211544:sub_404358": null, "4211552:cgc_small_split": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_split(unsigned int v7, struct_0 *a0, unsigned int a1)\n
{\n
    unsigned int v0[2];  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    unsigned int v4[2];  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v6 = v8;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0->field_4 - a1;\n
    v4[0] = &a0->padding_0[a1];\n
    v3 = &a0->padding_0[a0->field_4];\n
    a0->field_4 = a1;\n
    v4[0] = a0->field_4;\n
    v4[1] = v5;\n
    *(v3) = v5;\n
    v2 = v7;\n
    v0[0] = v4;\n
    v9 = v6;\n
    return cgc_small_insert_free(v2, cgc_size_to_bin(v5));\n
}\n
", "4211703:sub_4043f7": null, "4211712:cgc_small_insert_free": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_small_insert_free(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if ((*((a1 + 4)) & 1) == 1)\n
    {\n
        v0 = a1;\n
        cgc_heap_error(v1 - 11028);\n
    }\n
    v3 = a1;\n
    *((v3 + 4)) = *((v3 + 4)) | 1;\n
    *((a1 + 8)) = 0;\n
    *((a1 + 12)) = *((v2 + a0 * 4));\n
    *((v2 + a0 * 4)) = a1;\n
    v4 = a1;\n
    if (*((v4 + 12)))\n
    {\n
        v4 = *((a1 + 12));\n
        *((v4 + 8)) = a1;\n
    }\n
    return v4;\n
}\n
", "4211865:sub_404499": null, "4211872:cgc_heap_error": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_stderr;\n
\n
int cgc_heap_error()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    char v5;  // [bp-0x4]\n
    unsigned int v6;  // [bp+0x4]\n
    char v7;  // [bp+0x8]\n
    unsigned int v8;  // ebp\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // ebx\n
\n
    v8 = &v5;\n
    v4 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v7;\n
    v0 = v6;\n
    v1 = v3;\n
    cgc_vfprintf(cgc_stderr, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v9);\n
    v10 = v2;\n
    cgc__terminate(1, v0, v1, &_GLOBAL_OFFSET_TABLE_, &v7, v4);\n
    cgc_memchr();\n
    return;\n
}\n
", "4211968:cgc_memchr": "int cgc_memchr(char *v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    void* v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (v1[v0] != a0)\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v2 = &v1[v0];\n
            return v2;\n
        }\n
    }\n
}\n
", "4212075:sub_40456b": null, "4212080:cgc_memcmp": "int cgc_memcmp(char *v4, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    void* v3;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v4;\n
    v0 = a0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= a1)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        if (v1[v2] != *((v0 + v2)))\n
        {\n
            v3 = v1[v2] - *((v0 + v2));\n
            return v3;\n
        }\n
        v2 += 1;\n
    }\n
}\n
", "4212218:sub_4045fa": null, "4212224:cgc_memcpy": "int cgc_memcpy(char *v3, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v2[v0] = *((v1 + v0));\n
    }\n
    return v3;\n
}\n
", "4212310:sub_404656": null, "4212320:cgc_memmove": "int cgc_memmove(char *v3, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    char *v2;  // [bp-0x8]\n
\n
    v2 = v3;\n
    v1 = a0;\n
    if (v3 > a0)\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[1 + a1 + -1 * v0] = *((v1 + a1 - v0 - 1));\n
        }\n
        return v3;\n
    }\n
    else\n
    {\n
        for (v0 = 0; v0 < a1; v0 += 1)\n
        {\n
            v2[v0] = *((v1 + v0));\n
        }\n
        return v3;\n
    }\n
}\n
", "4212491:sub_40470b": null, "4212496:cgc_memset": "int cgc_memset(char *v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = v2;\n
    for (v1 = 0; v1 < a1; v1 += 1)\n
    {\n
        v0[v1] = a0;\n
    }\n
    return v2;\n
}\n
", "4212572:sub_40475c": null, "4212576:cgc_printf": "int cgc_printf(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0x8]\n
\n
    v1 = &v4;\n
    v0 = v1;\n
    v2 = cgc_vprintf(v3);\n
    return v2;\n
}\n
", "4212634:sub_40479a": null, "4212640:cgc_vprintf": "extern unsigned int cgc_stdout;\n
\n
int cgc_vprintf(unsigned int v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a0;\n
    return cgc_vfprintf(cgc_stdout, v1);\n
}\n
", "4212701:sub_4047dd": null, "4212704:cgc_fprintf": "int cgc_fprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vfprintf(v4, a0);\n
    return v2;\n
}\n
", "4212773:sub_404825": null, "4212784:cgc_vfprintf": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vfprintf(struct_0 *v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 1;\n
    if (v4->field_8 == -1)\n
    {\n
        v2 = 0;\n
        v4->field_8 = 0;\n
    }\n
    v0 = 2147483647;\n
    v3 = cgc__vsfprintf(a0, a1, v4, 0);\n
    if (!v2)\n
    {\n
        cgc_fflush(v4);\n
        v4->field_8 = -1;\n
        return v3;\n
    }\n
    return v3;\n
}\n
", "4212946:sub_4048d2": null, "4212960:cgc_sprintf": "int cgc_sprintf(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char v5;  // [bp+0xc]\n
    unsigned int v6;  // esi\n
\n
    v3 = v6;\n
    v1 = &v5;\n
    v0 = v1;\n
    v2 = cgc_vsprintf(v4, a0);\n
    return v2;\n
}\n
", "4213029:sub_404925": null, "4213040:cgc_vsprintf": "int cgc_vsprintf(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    v0 = 2147483647;\n
    return cgc__vsfprintf(a0, a1, 0, v1);\n
}\n
", "4213119:sub_40497f": null, "4213120:cgc__vsfprintf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__vsfprintf(char *v30, unsigned int *a0, unsigned int a1[5], unsigned int a2, unsigned int a3)\n
{\n
    unsigned int v0;  // [bp-0xc8]\n
    unsigned int v1;  // [bp-0xc4]\n
    void* v2;  // [bp-0xc0], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xb8]\n
    unsigned int v4;  // [bp-0xb4]\n
    unsigned int v5;  // [bp-0xb0]\n
    unsigned int v6;  // [bp-0xac]\n
    char v7;  // [bp-0xa5]\n
    unsigned int v8;  // [bp-0xa4]\n
    unsigned int v9;  // [bp-0xa0]\n
    char v10;  // [bp-0x99]\n
    unsigned int v11;  // [bp-0x98]\n
    unsigned int v12;  // [bp-0x94]\n
    char v13;  // [bp-0x8d]\n
    unsigned int v14;  // [bp-0x8c]\n
    unsigned int v15;  // [bp-0x88]\n
    unsigned int v16;  // [bp-0x84]\n
    unsigned int v17;  // [bp-0x80]\n
    char v18;  // [bp-0x79]\n
    unsigned int v19;  // [bp-0x78]\n
    unsigned int v20;  // [bp-0x74]\n
    char *v21;  // [bp-0x70]\n
    char *v22;  // [bp-0x6c]\n
    char v23;  // [bp-0x65]\n
    unsigned int v24;  // [bp-0x64]\n
    char v25;  // [bp-0x60]\n
    char *v26;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v27;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v28;  // [bp-0x18]\n
    char v29;  // [bp-0x11]\n
    char *v31;  // eax\n
    char *v32;  // eax\n
    char *v33;  // eax\n
    char *v34;  // eax\n
    char *v35;  // eax\n
    char *v36;  // eax\n
    unsigned int *v37;  // eax\n
    char *v38;  // eax\n
    unsigned int *v39;  // eax\n
    unsigned int *v40;  // eax\n
    unsigned int *v41;  // eax\n
    unsigned int v42;  // ecx\n
    char *v43;  // eax\n
    char *v44;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v26 = 0;\n
    while (true)\n
    {\n
        v31 = v30;\n
        v30 = v31 + 1;\n
        v29 = *(v31);\n
        if (!v29)\n
            break;\n
        v23 = 32;\n
        while (v29 != 37)\n
        {\n
            if (v26 >= a3)\n
            {\n
                v32 = v26;\n
                v26 = v32 + 1;\n
                if (v32 == -1)\n
                    cgc__terminate();\n
            }\n
            else\n
            {\n
                v18 = v29;\n
                if (a1)\n
                    cgc_fwrite(&v18, 1, a1);\n
                if (a2)\n
                    *((a2 + v26)) = v18;\n
                v26 += 1;\n
            }\n
            v33 = v30;\n
            v30 = v33 + 1;\n
            v29 = *(v33);\n
            if (!v29)\n
                goto LABEL_405316;\n
        }\n
        v22 = v30;\n
        v28 = 4;\n
        v27 = 0;\n
        v34 = v30;\n
        v30 = v34 + 1;\n
        v5 = *(v34);\n
        v29 = v5;\n
        if (!v5)\n
            break;\n
        if (v5 == 32)\n
        {\n
            v23 = 32;\n
        }\n
        else if (v5 == 48)\n
        {\n
            v23 = 48;\n
        }\n
        else\n
        {\n
            v30 += 1;\n
        }\n
        if (*(v30) >= 48 && *(v30) <= 57)\n
            v27 = cgc_strtoul(v30, &v30);\n
        v35 = v30;\n
        v30 = v35 + 1;\n
        v4 = *(v35);\n
        v29 = v4;\n
        if (!v4)\n
            break;\n
        if (v4 == 104)\n
        {\n
            if (*(v30) != 104)\n
            {\n
                v28 = 2;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 1;\n
            }\n
        }\n
        else\n
        {\n
            if (v4 != 108)\n
            {\n
                v30 += 1;\n
            }\n
            else if (*(v30) != 108)\n
            {\n
                v28 = 4;\n
            }\n
            else\n
            {\n
                v30 += 1;\n
                v28 = 8;\n
            }\n
        }\n
        v36 = v30;\n
        v30 = v36 + 1;\n
        v3 = *(v36);\n
        v29 = v3;\n
        if (!v3)\n
        {\n
            v17 = v30 - v22;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            else\n
            {\n
                v16 = a3 - v26;\n
                if (v16 > v17)\n
                    v16 = v17;\n
                if (a1)\n
                    cgc_fwrite(v22, v16, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, v22, v16);\n
                if (v26 + v17 < v26)\n
                    cgc__terminate();\n
                v26 = v17 + v26;\n
            }\n
            break;\n
        }\n
        if (v3 == 88)\n
        {\n
LABEL_404e9f:\n
            if (v29 == 100)\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v40 = a0;\n
                a0 = v40 + 1;\n
                v19 = *(v40);\n
                v0 = v19;\n
                v1 = 10;\n
                v2 = 0;\n
                cgc__convert_signed(&v25, v0, 10);\n
            }\n
            else\n
            {\n
                if (!(v28 <= 4))\n
                    break;\n
                v41 = a0;\n
                a0 = v41 + 1;\n
                v20 = *(v41);\n
                v42 = (v29 == 117 ? 16 : 10);\n
                v0 = v20;\n
                v1 = v42;\n
                v2 = v29 == 88;\n
                cgc__convert_unsigned();\n
            }\n
            v24 = cgc_strlen(&v25, v0, v1);\n
            if (v24 < v27)\n
            {\n
                v27 -= v24;\n
                do\n
                {\n
                    if (v26 >= a3)\n
                    {\n
                        v43 = v26;\n
                        v26 = v43 + 1;\n
                        if (v43 == -1)\n
                            cgc__terminate();\n
                    }\n
                    else\n
                    {\n
                        v13 = v23;\n
                        if (a1)\n
                            cgc_fwrite(&v13, 1, a1);\n
                        if (a2)\n
                            *((a2 + v26)) = v13;\n
                        v26 += 1;\n
                    }\n
                    v27 -= 1;\n
                } while (v27 > 0);\n
            }\n
            v12 = v24;\n
            if (v26 >= a3)\n
            {\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            else\n
            {\n
                v11 = a3 - v26;\n
                if (v11 > v12)\n
                    v11 = v12;\n
                if (a1)\n
                    cgc_fwrite(&v25, v11, a1);\n
                if (a2)\n
                    cgc_memcpy(a2 + v26, &v25, v11);\n
                if (v26 + v12 < v26)\n
                    cgc__terminate();\n
                v26 = v12 + v26;\n
            }\n
            goto LABEL_405307;\n
        }\n
        else\n
        {\n
            if (v3 == 99)\n
            {\n
                v37 = a0;\n
                a0 = v37 + 1;\n
                v29 = *(v37);\n
                if (v26 >= a3)\n
                {\n
                    v38 = v26;\n
                    v26 = v38 + 1;\n
                    if (v38 == -1)\n
                        cgc__terminate();\n
                }\n
                else\n
                {\n
                    v10 = v29;\n
                    if (a1)\n
                        cgc_fwrite(&v10, 1, a1);\n
                    if (a2)\n
                        *((a2 + v26)) = v10;\n
                    v26 += 1;\n
                }\n
                goto LABEL_405307;\n
            }\n
            if (v3 == 100)\n
                goto LABEL_404e9f;\n
            if (v3 == 115)\n
            {\n
                v39 = a0;\n
                a0 = v39 + 1;\n
                v21 = *(v39);\n
                v9 = cgc_strlen();\n
                if (v26 < a3)\n
                {\n
                    v8 = a3 - v26;\n
                    if (v8 > v9)\n
                        v8 = v9;\n
                    if (a1)\n
                        cgc_fwrite(v21, v8, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v21, v8);\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
                else\n
                {\n
                    if (v26 + v9 < v26)\n
                        cgc__terminate();\n
                    v26 = v9 + v26;\n
                }\n
LABEL_405307:\n
            }\n
            else if (v3 != 117 && v3 != 120)\n
            {\n
                v15 = v30 - v22;\n
                if (v26 >= a3)\n
                {\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                else\n
                {\n
                    v14 = a3 - v26;\n
                    if (v14 > v15)\n
                        v14 = v15;\n
                    if (a1)\n
                        cgc_fwrite(v22, v14, a1);\n
                    if (a2)\n
                        cgc_memcpy(a2 + v26, v22, v14);\n
                    if (v26 + v15 < v26)\n
                        cgc__terminate();\n
                    v26 = v15 + v26;\n
                }\n
                goto LABEL_405307;\n
            }\n
        }\n
    }\n
LABEL_405316:\n
    a1 = 0;\n
    if (v26 >= a3)\n
    {\n
        v44 = v26;\n
        v26 = v44 + 1;\n
        if (v44 != -1)\n
            return v26 - 1;\n
        cgc__terminate();\n
    }\n
    else\n
    {\n
        v7 = 0;\n
        if (a1)\n
            cgc_fwrite(&v7, 1, a1);\n
        if (a2)\n
            *((a2 + v26)) = v7;\n
        v26 += 1;\n
        return v26 - 1;\n
    }\n
}\n
", "4215739:sub_4053bb": null, "4215744:cgc__convert_signed": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_signed(char *v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char *v3;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 < 0)\n
    {\n
        v3 = v2;\n
        v2 = v3 + 1;\n
        *(v3) = 45;\n
        a0 = -(a0);\n
    }\n
    v0 = a2;\n
    return cgc__convert_unsigned(v2, a0, a1);\n
}\n
", "4215853:sub_40542d": null, "4215856:cgc__convert_unsigned": "typedef struct struct_0 {\n
    char field_-1;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__convert_unsigned(char *v4, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v5;  // eax\n
    struct_0 *v6;  // eax\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = &v4[20];\n
    if (a2)\n
        v3 = v1 - 10553;\n
    else\n
        v3 = v1 - 10536;\n
    v5 = v2;\n
    v2 = v5 + 1;\n
    if (!a0)\n
    {\n
        v6 = v2;\n
        v2 = v6 + 1;\n
        v6[1].field_-1 = *(v3);\n
        return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
    }\n
    for (v5[1].field_-1 = 0; a0; a0 = (0 CONCAT a0) /m a1)\n
    {\n
        v0 = v3;\n
        v7 = v2;\n
        v2 = v7 + 1;\n
        v7[1].field_-1 = v0[(0 CONCAT a0) /m a1 >> 32];\n
    }\n
    return cgc_memmove(v4, v2, 20 + -0x1 * &v4[-1 * v2]);\n
}\n
", "4216105:sub_405529": null, "4216112:cgc_realloc": "extern unsigned int g_heap;\n
\n
int cgc_realloc(unsigned short *v0, unsigned int a0)\n
{\n
    return cgc_malloc_realloc(&g_heap, v0, a0);\n
}\n
", "4216171:sub_40556b": null, "4216176:cgc_strcasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasecmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v3));\n
                v1 = v0 == cgc_tolower(*(a0));\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4216353:sub_405621": null, "4216368:cgc_strcasestr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcasestr(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (*((v6 + v3)))\n
        {\n
            v0 = v2;\n
            if (!cgc_strncasecmp(v6 + v3, a0))\n
            {\n
                v4 = v6 + v3;\n
                return v4;\n
            }\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4216525:sub_4056cd": null, "4216528:cgc_strchr": "int cgc_strchr(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    for (v0 = 0; *((v2 + v0)); v0 += 1)\n
    {\n
        if (*((v2 + v0)) == a0)\n
        {\n
            v1 = v2 + v0;\n
            return v1;\n
        }\n
    }\n
    if (a0)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = v2 + v0;\n
    return v1;\n
}\n
", "4216657:sub_405751": null, "4216672:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
                v1 = *(v2) == *(a0);\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4216800:cgc_strcpy": "int cgc_strcpy(char *v1, char *a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = v1; *(a0); v0 += 1)\n
    {\n
        *(v0) = *(a0);\n
        a0 += 1;\n
    }\n
    *(v0) = 0;\n
    return v1;\n
}\n
", "4216878:sub_40582e": null, "4216880:cgc_strdup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen();\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    v2[v1] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217014:sub_4058b6": null, "4217024:cgc_strlen": "int cgc_strlen(char *v1)\n
{\n
    void* v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    unsigned int v2;  // eax\n
    char *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v3 = v1;\n
        v1 = v3 + 1;\n
        if (!*(v3))\n
            break;\n
        v0 += 1;\n
    }\n
    return v0;\n
}\n
", "4217080:sub_4058f8": null, "4217088:cgc_strncasecmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strncasecmp(char *v5, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = &v5[a1];\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v5))\n
        {\n
            v1 = 0;\n
            if (*(a0))\n
            {\n
                v0 = cgc_tolower(*(v5));\n
                v1 = 0;\n
                if (v0 == cgc_tolower(*(a0)))\n
                    v1 = v5 < v3;\n
            }\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v5 += 1;\n
        a0 += 1;\n
    }\n
    if (v5 == v3)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = *(v5) - *(a0);\n
    return v4;\n
}\n
", "4217324:sub_4059ec": null, "4217328:cgc_strncpy": "int cgc_strncpy(char *v2, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = v2;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (*(a0))\n
            v0 = v1 - v2 < a1;\n
        if (!(v0 & 1))\n
            break;\n
        *(v1) = *(a0);\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    for (; v1 - v2 < a1; v1 += 1)\n
    {\n
        *(v1) = 0;\n
    }\n
    return v2;\n
}\n
", "4217485:sub_405a8d": null, "4217488:cgc_strndup": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strndup(char *v5, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = cgc_strlen(v5);\n
    if (v2 > a0)\n
        v2 = a0;\n
    v1 = cgc_malloc(v2 + 1);\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    cgc_memcpy(v1, v5, v2);\n
    *((v1 + v2)) = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217643:sub_405b2b": null, "4217648:cgc_strsep": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strsep(struct struct_0 **v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char *v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = &*(v4)->field_0;\n
    if (!v1)\n
    {\n
        v3 = 0;\n
        return v3;\n
    }\n
    for (v2 = 0; v1[v2]; v2 += 1)\n
    {\n
        if (cgc_strchr(a0, v1[v2]))\n
            break;\n
    }\n
    if (!v1[v2])\n
        *(v4) = 0;\n
    else\n
        *(v4) = &v1[1 + v2];\n
    v1[v2] = 0;\n
    v3 = v1;\n
    return v3;\n
}\n
", "4217867:sub_405c0b": null, "4217872:cgc_strstr": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strstr(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    while (true)\n
    {\n
        if (!*((v3 + v1)))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (cgc_strcmp(v3 + v1, a0))\n
        {\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v2 = v3 + v1;\n
            return v2;\n
        }\n
    }\n
}\n
", "4218008:sub_405c98": null, "4218016:cgc_strtol": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtol(char v11[2], unsigned int *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    char v2[2];  // [bp-0x2c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    void* v5;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x14]\n
    char v9[2];  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v9) = v11;\n
    v8 = 1;\n
    v7 = 1;\n
    v6 = 0;\n
    for (v5 = 0; cgc_isspace(*(v11)); v11 += 1)\n
    {\n
        if (!*(v11))\n
            goto LABEL_405e5f;\n
    }\n
    if (*(v11) == 43)\n
    {\n
        v8 = 1;\n
        v11 += 1;\n
    }\n
    else if (*(v11) == 45)\n
    {\n
        v8 = -1;\n
        v11 += 1;\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
            v11 += 2;\n
        goto LABEL_405e6e;\n
    }\n
    if (a1)\n
    {\n
LABEL_405e6e:\n
        for (; *(v11); v11 += 1)\n
        {\n
            if (cgc_isdigit(*(v11)))\n
            {\n
                v4 = *(v11) - 48;\n
            }\n
            else if (cgc_islower(*(v11)))\n
            {\n
                v4 = *(v11) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v11)))\n
                    break;\n
                v4 = *(v11) + -55;\n
            }\n
            if (v4 >= a1)\n
                break;\n
            v7 = 0;\n
            v5 = a1 * v5 + v4;\n
            if (v5 > 2147483647)\n
                v6 = 1;\n
        }\n
    }\n
    if (*(v11) == 48 && *((v11 + 1)) >= 48 && *((v11 + 1)) <= 55)\n
    {\n
        *(&v11) = v11 + 1;\n
        a1 = 8;\n
        goto LABEL_405e5f;\n
    }\n
    if (*(v11) == 48 && cgc_tolower(*((v11 + 1))) == 120)\n
    {\n
        v11 += 2;\n
        a1 = 16;\n
        goto LABEL_405e5f;\n
    }\n
    if (!cgc_isdigit(*(v11)))\n
        goto LABEL_405e5f;\n
    a1 = 10;\n
LABEL_405e5f:\n
    if (a0)\n
    {\n
        if (v7)\n
            *(&v2) = v9;\n
        else\n
            v2 = v11;\n
        *(a0) = v2;\n
    }\n
    if (v8 >= 0)\n
    {\n
        if (v6)\n
            v0 = 2147483647;\n
        else\n
            v0 = v5;\n
        v10 = v0;\n
        return v10;\n
    }\n
    else\n
    {\n
        if (v6)\n
            v1 = 0x80000000;\n
        else\n
            v1 = -(v5);\n
        v10 = v1;\n
        return v10;\n
    }\n
}\n
", "4218867:sub_405ff3": null, "4218880:cgc_strtoul": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtoul(char v12[2], unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_41;  // tmp #41\n
    int tmp_6;  // tmp #6\n
    unsigned int v0;  // [bp-0x44]\n
    void* v1;  // [bp-0x40], Other Possible Types: unsigned int\n
    char v2[2];  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    unsigned int v5;  // [bp-0x30]\n
    void* v6;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x20], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x18]\n
    char v11[2];  // [bp-0x14]\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    *(&v11) = v12;\n
    v10 = 1;\n
    v9 = 1;\n
    v8 = 0;\n
    v7 = 0;\n
    for (v6 = 0; cgc_isspace(*(v12)); v12 += 1)\n
    {\n
        if (!*(v12))\n
            goto LABEL_4061c8;\n
    }\n
    if (*(v12) == 43)\n
    {\n
        v10 = 1;\n
        v12 += 1;\n
    }\n
    else if (*(v12) == 45)\n
    {\n
        v10 = -1;\n
        v12 += 1;\n
    }\n
    if (a1 == 16)\n
    {\n
        if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
            v12 += 2;\n
        goto LABEL_4061d7;\n
    }\n
    if (a1)\n
    {\n
LABEL_4061d7:\n
        for (; *(v12); v12 += 1)\n
        {\n
            if (cgc_isdigit(*(v12)))\n
            {\n
                v5 = *(v12) - 48;\n
            }\n
            else if (cgc_islower(*(v12)))\n
            {\n
                v5 = *(v12) + -87;\n
            }\n
            else\n
            {\n
                if (!cgc_isupper(*(v12)))\n
                    break;\n
                v5 = *(v12) + -55;\n
            }\n
            if (v5 >= a1)\n
                break;\n
            v9 = 0;\n
            v3 = v7;\n
            v13 = v6 * a1;\n
            tmp_41 = v13;\n
            v15 = (v6 * a1 >> 32) + (a1 >> 31) * v6 + a1 * v3 + (v5 >> 31) + (tmp_41 + v5 < tmp_41);\n
            v6 = v13 + v5;\n
            v7 = v15;\n
            if (v7)\n
                v8 = 1;\n
        }\n
    }\n
    if (*(v12) == 48 && *((v12 + 1)) >= 48 && *((v12 + 1)) <= 55)\n
    {\n
        *(&v12) = v12 + 1;\n
        a1 = 8;\n
        goto LABEL_4061c8;\n
    }\n
    if (*(v12) == 48 && cgc_tolower(*((v12 + 1))) == 120)\n
    {\n
        v12 += 2;\n
        a1 = 16;\n
        goto LABEL_4061c8;\n
    }\n
    if (!cgc_isdigit(*(v12)))\n
        goto LABEL_4061c8;\n
    a1 = 10;\n
LABEL_4061c8:\n
    if (a0)\n
    {\n
        if (v9)\n
            *(&v2) = v11;\n
        else\n
            v2 = v12;\n
        *(a0) = v2;\n
    }\n
    if (v10 < 0)\n
    {\n
        if ((!(!(v7 CONCAT v6) << 1 >> 32) || !(!v7 >> 31)) && (!(!(v6 ^ 0x80000000)) || !(!v7)))\n
            v8 = 1;\n
        tmp_6 = v6;\n
        v6 = -(v6);\n
        v7 = -(v7) - (0 < tmp_6);\n
    }\n
    if (v8)\n
    {\n
        v0 = -1;\n
        v1 = 0;\n
        return v0;\n
    }\n
    v0 = v6;\n
    v1 = v7;\n
    return v0;\n
}\n
", "4219831:sub_4063b7": null, "4219840:_ZN6NeuronC2Ejj": "typedef struct struct_1 {\n
    char padding_0[16];\n
    unsigned int field_10;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int Neuron::__base_ctor__(struct_1 *v14, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x4c]\n
    struct_0 *v1;  // [bp-0x48]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned long v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x30]\n
    struct_1 *v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned long v7;  // [bp-0x24]\n
    void* v8;  // [bp-0x1c]\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14]\n
    void* v11;  // [bp-0x10]\n
    void* v12;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x8]\n
    unsigned int v15;  // ebx\n
    unsigned int v17;  // ftop\n
    unsigned int v18;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ebx\n
\n
    v13 = v15;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v14;\n
    vector::__base_ctor__();\n
    v5->field_10 = a0;\n
    for (v12 = 0; v12 < a1; v12 += 1)\n
    {\n
        v2 = v5 + 1;\n
        v11 = 0;\n
        v10 = 0;\n
        v9 = 0;\n
        v8 = 0;\n
        v1 = &v8;\n
        vector::push_back(v2);\n
        v6 = g_prng(*(&v0));\n
        v17 = ftop<4> - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v18 = v17 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v18 = v17 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v19 = v18 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v20 = v19 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v20 = v19 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t5,1] = t6\n
        [D] PutI(136:I8x8)[t5,1] = 0x01\n
        [D] PutI(136:I8x8)[t5,0] = 0x00\n
        v21 = v20 + 1;\n
        v7 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
        [D] PutI(136:I8x8)[t30,0] = 0x00\n
        [D] PutI(72:F64x8)[t39,0] = t42\n
        [D] PutI(136:I8x8)[t39,0] = 0x01\n
        v3 = ([D] GetI(136:I8x8)[t54,0] ? [D] GetI(72:F64x8)[t54,0] : nan);\n
        [D] PutI(136:I8x8)[t54,0] = 0x00\n
        v23 = v21 - 0 + 1;\n
        v25 = v23 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v26 = v25 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v26 = v25 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        *(vector::back()) = ([D] GetI(136:I8x8)[t9,0] ? [D] GetI(72:F64x8)[t9,0] : nan);\n
        [D] PutI(136:I8x8)[t9,0] = 0x00\n
        v27 = v26 + 1;\n
    }\n
    v28 = v13;\n
    return v12;\n
}\n
", "4220045:sub_40648d": null, "4220048:_ZN6Neuron7sigmoidEd": null, "4220125:sub_4064dd": null, "4220128:_ZN6Neuron8dsigmoidEd": null, "4220206:sub_40652e": null, "4220208:_ZN6Neuron11feedForwardER6vectorIS_E": null, "4220444:sub_40661c": null, "4220448:_ZN6Neuron14computeOutGradEd": null, "4220523:sub_40666b": null, "4220528:_ZN6Neuron17computeHiddenGradER6vectorIS_E": null, "4220744:sub_406748": null, "4220752:_ZN6Neuron13updateWeightsER6vectorIS_E": null, "4221095:sub_4068a7": null, "4221104:_ZN6vectorI4EdgeEC2Ev": "int vector::__base_ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[0] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4221135:sub_4068cf": null, "4221136:_ZN6vectorI4EdgeE9push_backERKS0_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::push_back(unsigned int v4[3], unsigned int a0[4])\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // esi\n
    unsigned int v6[3];  // ecx\n
    unsigned int v7[3];  // ecx\n
    unsigned int v8[3];  // esi\n
    unsigned int v9[4];  // ecx\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // edx\n
    unsigned int v12[4];  // eax\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v4;\n
    if (!v2[1])\n
    {\n
        v0 = 16;\n
        vector::reserve(v2);\n
    }\n
    v6 = v2;\n
    if (v6[0] == v6[1])\n
    {\n
        v7 = v2;\n
        v0 = v7[1] * 2;\n
        vector::reserve(v7);\n
    }\n
    v8 = v2;\n
    v9 = a0;\n
    v10 = v8[2];\n
    v11 = v8[0];\n
    v8[0] = v11 + 1;\n
    v12 = v10 + v11 * 16;\n
    v12[0] = v9[0];\n
    v12[1] = v9[1];\n
    v12[2] = v9[2];\n
    v12[3] = v9[3];\n
    return v12;\n
}\n
", "4221295:sub_40696f": null, "4221296:_ZN6vectorI4EdgeE4backEv": "int vector::back(unsigned int v0[3])\n
{\n
    return v0[2] + (v0[0] - 1) * 16;\n
}\n
", "4221320:sub_406988": null, "4221328:_ZNK6vectorI6NeuronE4sizeEv": "int vector::size const(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4221341:sub_40699d": null, "4221344:_ZN6vectorI6NeuronEixEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::operator[](struct_0 *v0, unsigned int a0)\n
{\n
    return v0->field_8 + a0 * 32;\n
}\n
", "4221369:sub_4069b9": null, "4221376:_ZN6Neuron8getValueEv": "int Neuron::getValue(unsigned int v0)\n
{\n
    [D] PutI(72:F64x8)[t18,0] = t21\n
    [D] PutI(136:I8x8)[t18,0] = 0x01\n
    return v0;\n
}\n
", "4221389:sub_4069cd": null, "4221392:_ZN6vectorI4EdgeEixEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::operator[](struct_0 *v0, unsigned int a0)\n
{\n
    return v0->field_8 + a0 * 16;\n
}\n
", "4221417:sub_4069e9": null, "4221424:_ZN6vectorI4EdgeE7reserveEm": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::reserve(unsigned int v6[3], unsigned int a0)\n
{\n
    int tmp_18;  // tmp #18\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10[4];  // ecx\n
    unsigned int v11[4];  // eax\n
    unsigned int v12[3];  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v6;\n
    v8 = a0;\n
    tmp_18 = v8;\n
    v9 = v8 * 16;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t18, 0x10<32>, 0x0<32>))\n
        v9 = -1;\n
    v4 = operator new[](v9);\n
    for (v3 = 0; v3 < v2[0]; v3 += 1)\n
    {\n
        v10 = v2[2] + v3 * 16;\n
        v11 = v4 + v3 * 16;\n
        v11[0] = v10[0];\n
        v11[1] = v10[1];\n
        v11[2] = v10[2];\n
        v11[3] = v10[3];\n
    }\n
    v12 = v2;\n
    v12[1] = a0;\n
    if (v12[2])\n
    {\n
        v0 = v2[2];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v2[2] = v4;\n
    return v2;\n
}\n
", "4221643:sub_406acb": null, "4221648:_ZN9NeuralNetC1ER6vectorIjE": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int NeuralNet::__ctor__(unsigned int v13, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x5c], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x58]\n
    unsigned int v2;  // [bp-0x54]\n
    unsigned int v3;  // [bp-0x50]\n
    unsigned int v4;  // [bp-0x4c]\n
    unsigned int v5;  // [bp-0x48]\n
    unsigned int v6;  // [bp-0x44]\n
    unsigned int v7;  // [bp-0x40]\n
    char v8;  // [bp-0x3c]\n
    char v9;  // [bp-0x1c]\n
    void* v10;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // ebx\n
\n
    v12 = v14;\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = v13;\n
    vector::__base_ctor__();\n
    v11 = 0;\n
    while (true)\n
    {\n
        v5 = v11;\n
        if (v5 >= vector::size const())\n
            break;\n
        vector::__base_ctor__();\n
        vector::push_back(v7);\n
        vector::__base_dtor__(&v9);\n
        v10 = 0;\n
        while (true)\n
        {\n
            v4 = v10;\n
            if (v4 > *(vector::operator[](a0)))\n
                break;\n
            v1 = vector::back();\n
            v2 = v10;\n
            v3 = v11;\n
            if (v3 == vector::size const() - 1)\n
                v0 = 0;\n
            else\n
                v0 = *(vector::operator[](a0));\n
            Neuron::__base_ctor__(&v8, v2, v0);\n
            vector::push_back(v1);\n
            Neuron::__base_dtor__(&v8);\n
            v10 += 1;\n
        }\n
        vector::back();\n
        Neuron::setValue(vector::back(), 0);\n
        v11 += 1;\n
    }\n
    v15 = v12;\n
    return v5;\n
}\n
", "4222074:sub_406c7a": null, "4222080:_ZN9NeuralNet11feedForwardER6vectorIdE": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int NeuralNet::feedForward(unsigned int v11, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x30]\n
    unsigned int v1;  // [bp-0x2c]\n
    unsigned int v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x24]\n
    unsigned int v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    void* v7;  // [bp-0x14]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0x8]\n
    unsigned int v12;  // ebx\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ebx\n
\n
    v10 = v12;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = v11;\n
    v7 = vector::front();\n
    v9 = 0;\n
    while (true)\n
    {\n
        v3 = v9;\n
        if (v3 >= vector::size const())\n
            break;\n
        v2 = vector::operator[](v7, v9);\n
        vector::operator[](a0);\n
        [D] PutI(72:F64x8)[t12,0] = t15\n
        [D] PutI(136:I8x8)[t12,0] = 0x01\n
        [D] PutI(136:I8x8)[t28,0] = 0x00\n
        v15 = ftop<4> - 1 + 1;\n
        Neuron::setValue(v2);\n
        v9 += 1;\n
    }\n
    v9 = 1;\n
    while (true)\n
    {\n
        v1 = v9;\n
        if (v1 >= vector::size const())\n
            break;\n
        v6 = vector::operator[](v5);\n
        v8 = 0;\n
        while (true)\n
        {\n
            v0 = v8;\n
            if (v0 >= vector::size const(vector::operator[](v5)) - 1)\n
                break;\n
            Neuron::feedForward(vector::operator[](vector::operator[](v5), v8), v6);\n
            v8 += 1;\n
        }\n
        v9 += 1;\n
    }\n
    v16 = v10;\n
    return v1;\n
}\n
", "4222472:sub_406e08": null, "4222480:_ZN9NeuralNet8backPropER6vectorIdE": null, "4223046:sub_407046": null, "4223056:_ZN9NeuralNet9getOutputER6vectorIdE": null, "4223246:sub_40710e": null, "4223248:_ZN6vectorIS_I6NeuronEEC2Ev": "int vector::__base_ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[0] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4223279:sub_40712f": null, "4223280:_ZNK6vectorIjE4sizeEv": "int vector::size const(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4223293:sub_40713d": null, "4223296:_ZN6vectorIS_I6NeuronEE9push_backERKS1_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::push_back(unsigned int v3[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    unsigned int v4[3];  // ecx\n
    unsigned int v5[3];  // ecx\n
    unsigned int v6[3];  // esi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v3;\n
    if (!v2[1])\n
    {\n
        v0 = 16;\n
        vector::reserve(v2);\n
    }\n
    v4 = v2;\n
    if (v4[0] == v4[1])\n
    {\n
        v5 = v2;\n
        v0 = v5[1] * 2;\n
        vector::reserve(v5);\n
    }\n
    v6 = v2;\n
    v6[0] = v6[0] + 1;\n
    v0 = a0;\n
    return vector::operator=(v6[2] + v6[0] * 12);\n
}\n
", "4223448:sub_4071d8": null, "4223456:_ZN6vectorI6NeuronEC2Ev": "int vector::__base_ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[0] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4223487:sub_4071ff": null, "4223488:_ZN6vectorI6NeuronED2Ev": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::__base_dtor__(struct_1 *v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    struct_0 *v4;  // [bp-0xc]\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ecx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = v5->field_8;\n
    v4 = v6;\n
    if (!v6)\n
        return v5->field_8;\n
    v7 = v4;\n
    v1 = v7 + 1;\n
    v2 = &v7[8 * v7[1].field_-4];\n
    if (v7 != v2)\n
    {\n
        do\n
        {\n
            v0 = v2 - 32;\n
            Neuron::__base_dtor__();\n
            v2 = v0;\n
        } while (v2 != v4);\n
    }\n
    v6 = operator delete[](v1);\n
    return v6;\n
}\n
", "4223620:sub_407284": null, "4223632:_ZN6vectorIjEixEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::operator[](struct_0 *v0, unsigned int a0)\n
{\n
    return v0->field_8 + a0 * 4;\n
}\n
", "4223657:sub_4072a9": null, "4223664:_ZN6vectorIS_I6NeuronEE4backEv": "int vector::back(unsigned int v0[3])\n
{\n
    return v0[2] + (v0[0] - 1) * 12;\n
}\n
", "4223688:sub_4072c8": null, "4223696:_ZN6vectorI6NeuronE9push_backERKS0_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::push_back(unsigned int v3[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    unsigned int v4[3];  // ecx\n
    unsigned int v5[3];  // ecx\n
    unsigned int v6[3];  // esi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v3;\n
    if (!v2[1])\n
    {\n
        v0 = 16;\n
        vector::reserve(v2);\n
    }\n
    v4 = v2;\n
    if (v4[0] == v4[1])\n
    {\n
        v5 = v2;\n
        v0 = v5[1] * 2;\n
        vector::reserve(v5);\n
    }\n
    v6 = v2;\n
    v6[0] = v6[0] + 1;\n
    v0 = a0;\n
    return Neuron::operator=(v6[2] + v6[0] * 32);\n
}\n
", "4223848:sub_407368": null, "4223856:_ZN6NeuronD2Ev": "int Neuron::__base_dtor__(unsigned int v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return vector::__base_dtor__(v1 + 20, *(&v0));\n
}\n
", "4223896:sub_407398": null, "4223904:_ZN6vectorI6NeuronE4backEv": "int vector::back(unsigned int v0[3])\n
{\n
    return v0[2] + (v0[0] - 1) * 32;\n
}\n
", "4223928:sub_4073b8": null, "4223936:_ZN6Neuron8setValueEd": null, "4223964:sub_4073dc": null, "4223968:_ZN6vectorIS_I6NeuronEE5frontEv": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::front(struct_0 *v0)\n
{\n
    return v0->field_8;\n
}\n
", "4223982:sub_4073ee": null, "4223984:_ZNK6vectorIdE4sizeEv": "int vector::size const(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4223997:sub_4073fd": null, "4224000:_ZN6vectorIdEixEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::operator[](struct_0 *v0, unsigned int a0)\n
{\n
    return v0->field_8 + a0 * 8;\n
}\n
", "4224025:sub_407419": null, "4224032:_ZNK6vectorIS_I6NeuronEE4sizeEv": "int vector::size const(unsigned int *v0)\n
{\n
    return *(v0);\n
}\n
", "4224045:sub_40742d": null, "4224048:_ZN6vectorIS_I6NeuronEEixEj": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
int vector::operator[](struct_0 *v0, unsigned int a0)\n
{\n
    return v0->field_8 + a0 * 12;\n
}\n
", "4224071:sub_407447": null, "4224080:_ZN6vectorIdE5clearEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::clear(unsigned int v3[3])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2[3];  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v3;\n
    v2[1] = 0;\n
    v2[0] = 0;\n
    if (v2[2])\n
    {\n
        v0 = v2[2];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v2[2] = 0;\n
    return v2;\n
}\n
", "4224187:sub_4074bb": null, "4224192:_ZN6vectorIdE9push_backERKd": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned long long field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::push_back(struct_0 *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    struct_0 *v4;  // ecx\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // edx\n
    unsigned long long *v7;  // ecx\n
    unsigned int v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v3;\n
    if (!v2->field_4)\n
    {\n
        v0 = 16;\n
        vector::reserve(v2);\n
    }\n
    v4 = v2;\n
    if (v4->field_0 == v4->field_4)\n
    {\n
        v5 = v2;\n
        v0 = v5->field_4 * 2;\n
        vector::reserve(v5);\n
    }\n
    v6 = v2;\n
    [D] PutI(72:F64x8)[t27,0] = t30\n
    [D] PutI(136:I8x8)[t27,0] = 0x01\n
    v7 = v6->field_0;\n
    v8 = v6->field_8;\n
    v6->field_0 = v7 + 1;\n
    *((v8 + v7 * 8)) = ([D] GetI(136:I8x8)[t50,0] ? [D] GetI(72:F64x8)[t50,0] : nan);\n
    [D] PutI(136:I8x8)[t50,0] = 0x00\n
    return v8;\n
}\n
", "4224327:sub_407547": null, "4224336:_ZN6vectorI4EdgeED2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::__base_dtor__(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2->field_8;\n
    v1 = v3;\n
    if (v3)\n
        v3 = operator delete[](v1);\n
    return v3;\n
}\n
", "4224399:sub_40758f": null, "4224400:_ZN6vectorIS_I6NeuronEE7reserveEm": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::reserve(struct_1 *v16, unsigned int a0)\n
{\n
    int tmp_19;  // tmp #19\n
    int tmp_26;  // tmp #26\n
    unsigned int v0;  // [bp-0x48]\n
    void* v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    struct_0 *v4;  // [bp-0x34]\n
    unsigned int v5[3];  // [bp-0x30]\n
    unsigned int v6;  // [bp-0x2c]\n
    unsigned int v7;  // [bp-0x28]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    struct_1 *v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    void* v13;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int v20;  // eax\n
    unsigned int *v21;  // ecx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // eax\n
    struct_1 *v24;  // eax\n
    struct_0 *v25;  // ecx\n
\n
    v15 = v17;\n
    v9 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = v16;\n
    v18 = a0;\n
    v11 = v18;\n
    tmp_19 = v18;\n
    v19 = v18 * 12;\n
    tmp_26 = v19;\n
    v20 = v19 + 4;\n
    if (([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t26, 0x4<32>, 0x0<32>) & 1))\n
        v20 = -1;\n
    v21 = operator new[](v20);\n
    v22 = v11;\n
    *(v21) = v22;\n
    v12 = v21 + 1;\n
    if (v22)\n
    {\n
        v23 = v12;\n
        v7 = v23 + v11 * 12;\n
        v8 = v23;\n
        do\n
        {\n
            v5[0] = v8;\n
            vector::__base_ctor__(v5);\n
            v6 = v5 + 1;\n
            v8 = v6;\n
        } while (v6 != v7);\n
    }\n
    v14 = v12;\n
    for (v13 = 0; v13 < v10->field_0; v13 += 1)\n
    {\n
        v0 = &v10->field_8[3 * v13];\n
        vector::operator=(v14 + v13 * 12);\n
    }\n
    v24 = v10;\n
    v24->field_4 = a0;\n
    if (v24->field_8)\n
    {\n
        v4 = v10->field_8;\n
        if (v4)\n
        {\n
            v25 = v4;\n
            v2 = v25 + 1;\n
            v3 = &v25[3 * v25[1].field_-4];\n
            if (v25 != v3)\n
            {\n
                do\n
                {\n
                    v1 = v3 - 12;\n
                    vector::__base_dtor__(v1);\n
                    v3 = v1;\n
                } while (v3 != v4);\n
            }\n
            operator delete[](v2);\n
        }\n
    }\n
    v10->field_8 = v14;\n
    return v10;\n
}\n
", "4224773:sub_407705": null, "4224784:_ZN6vectorI6NeuronEaSERKS1_": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::operator=(struct_1 *v14, unsigned int a0[3])\n
{\n
    int tmp_12;  // tmp #12\n
    int tmp_19;  // tmp #19\n
    unsigned int v0;  // [bp-0x48]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    unsigned int v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    unsigned int v9;  // [bp-0x1c]\n
    struct_0 *v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    struct_1 *v12;  // [bp-0x10]\n
    void* v13;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v15;  // ecx\n
    struct_1 *v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int *v20;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // eax\n
\n
    v11 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = v14;\n
    if (v12->field_8)\n
    {\n
        v10 = v12->field_8;\n
        if (v10)\n
        {\n
            v15 = v10;\n
            v8 = v15 + 1;\n
            v9 = &v15[8 * v15[1].field_-4];\n
            if (v15 != v9)\n
            {\n
                do\n
                {\n
                    v7 = v9 - 32;\n
                    Neuron::__base_dtor__(v7);\n
                    v9 = v7;\n
                } while (v9 != v10);\n
            }\n
            operator delete[](v8);\n
        }\n
    }\n
    v16 = v12;\n
    v16->field_0 = a0[0];\n
    v16->field_4 = a0[1];\n
    v17 = v16->field_4;\n
    v5 = v17;\n
    tmp_12 = v17;\n
    v18 = v17 * 32;\n
    tmp_19 = v18;\n
    v19 = v18 + 4;\n
    if (([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t19, 0x4<32>, 0x0<32>) & 1))\n
        v19 = -1;\n
    v20 = operator new[](v19);\n
    v21 = v5;\n
    *(v20) = v21;\n
    v6 = v20 + 1;\n
    if (v21)\n
    {\n
        v22 = v6;\n
        v3 = v22 + v5 * 32;\n
        v4 = v22;\n
        do\n
        {\n
            v1 = v4;\n
            Neuron::__base_ctor__();\n
            v2 = v1 + 32;\n
            v4 = v2;\n
        } while (v2 != v3);\n
    }\n
    v12->field_8 = v6;\n
    for (v13 = 0; v13 < v12->field_0; v13 += 1)\n
    {\n
        v0 = a0[2] + v13 * 32;\n
        Neuron::operator=(v12->field_8 + 0x20 * v13);\n
    }\n
    return v12;\n
}\n
", "4225176:sub_407898": null, "4225184:_ZN6NeuronC2Ev": "int Neuron::__base_ctor__(unsigned int v0)\n
{\n
    return vector::__base_ctor__(v0 + 20);\n
}\n
", "4225224:sub_4078c8": null, "4225232:_ZN6NeuronaSERKS_": "int Neuron::operator=(unsigned int v2[5], unsigned int a0[5])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1[5];  // [bp-0x10]\n
    unsigned int v3[5];  // esi\n
    unsigned int v4;  // edx\n
\n
    v1[0] = v2;\n
    v3 = a0;\n
    v1[4] = v3[4];\n
    v1[3] = v3[3];\n
    v1[2] = v3[2];\n
    v4 = v3[0];\n
    v1[1] = v3[1];\n
    v1[0] = v4;\n
    v0 = a0 + 1;\n
    vector::operator=(v1 + 1);\n
    return v1;\n
}\n
", "4225328:_ZN6vectorI4EdgeEaSERKS1_": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::operator=(unsigned int v4[3], unsigned int a0[3])\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    int tmp_11;  // tmp #11\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2[3];  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // eax\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
    unsigned int v8[4];  // ecx\n
    unsigned int v9[4];  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v4;\n
    if (v2[2])\n
    {\n
        v0 = v2[2];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v5 = v2;\n
    v5[0] = a0[0];\n
    v5[1] = a0[1];\n
    v6 = v5[1];\n
    tmp_11 = v6;\n
    v7 = v6 * 16;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t11, 0x10<32>, 0x0<32>))\n
        v7 = -1;\n
    v2[2] = operator new[](v7);\n
    for (v3 = 0; v3 < v2[0]; v3 += 1)\n
    {\n
        v8 = a0[2] + v3 * 16;\n
        v9 = v2[2] + v3 * 16;\n
        v9[0] = v8[0];\n
        v9[1] = v8[1];\n
        v9[2] = v8[2];\n
        v9[3] = v8[3];\n
    }\n
    return v2;\n
}\n
", "4225562:sub_407a1a": null, "4225568:_ZN6vectorI6NeuronE7reserveEm": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::reserve(struct_1 *v15, unsigned int a0)\n
{\n
    int tmp_19;  // tmp #19\n
    int tmp_26;  // tmp #26\n
    unsigned int v0;  // [bp-0x40]\n
    unsigned int v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x34]\n
    unsigned int v4;  // [bp-0x30]\n
    unsigned int v5;  // [bp-0x2c]\n
    unsigned int v6;  // [bp-0x28]\n
    unsigned int v7;  // [bp-0x24]\n
    unsigned int v8;  // [bp-0x20]\n
    struct_1 *v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0x18]\n
    unsigned int v11;  // [bp-0x14]\n
    void* v12;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0xc]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v16;  // ebx\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    unsigned int v19;  // eax\n
    unsigned int *v20;  // ecx\n
    unsigned int v21;  // eax\n
    unsigned int v22;  // eax\n
    struct_1 *v23;  // eax\n
    struct_0 *v24;  // ecx\n
\n
    v14 = v16;\n
    v8 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = v15;\n
    v17 = a0;\n
    v10 = v17;\n
    tmp_19 = v17;\n
    v18 = v17 * 32;\n
    tmp_26 = v18;\n
    v19 = v18 + 4;\n
    if (([D] x86g_calculate_condition(0x2<32>, 0x3<32>, t26, 0x4<32>, 0x0<32>) & 1))\n
        v19 = -1;\n
    v20 = operator new[](v19);\n
    v21 = v10;\n
    *(v20) = v21;\n
    v11 = v20 + 1;\n
    if (v21)\n
    {\n
        v22 = v11;\n
        v6 = v22 + v10 * 32;\n
        v7 = v22;\n
        do\n
        {\n
            v4 = v7;\n
            Neuron::__base_ctor__(v4);\n
            v5 = v4 + 32;\n
            v7 = v5;\n
        } while (v5 != v6);\n
    }\n
    v13 = v11;\n
    for (v12 = 0; v12 < v9->field_0; v12 += 1)\n
    {\n
        Neuron::operator=(v13 + v12 * 32, &v9->field_8[8 * v12]);\n
    }\n
    v23 = v9;\n
    v23->field_4 = a0;\n
    if (v23->field_8)\n
    {\n
        v3 = v9->field_8;\n
        if (v3)\n
        {\n
            v24 = v3;\n
            v1 = v24 + 1;\n
            v2 = &v24[8 * v24[1].field_-4];\n
            if (v24 != v2)\n
            {\n
                do\n
                {\n
                    v0 = v2 - 32;\n
                    Neuron::__base_dtor__(v0);\n
                    v2 = v0;\n
                } while (v2 != v3);\n
            }\n
            operator delete[](v1);\n
        }\n
    }\n
    v9->field_8 = v13;\n
    return v9;\n
}\n
", "4225947:sub_407b9b": null, "4225952:_ZN6vectorIdE7reserveEm": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::reserve(unsigned int v6[3], unsigned int a0)\n
{\n
    int tmp_18;  // tmp #18\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    unsigned long long *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned long long *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned long long *v10;  // ecx\n
    unsigned int v12;  // ftop\n
    unsigned int v13;  // ftop\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ftop\n
    unsigned int v16[3];  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v6;\n
    v8 = a0;\n
    tmp_18 = v8;\n
    v9 = v8 * 8;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t18, 0x8<32>, 0x0<32>))\n
        v9 = -1;\n
    v4 = operator new[](v9);\n
    for (v3 = 0; v3 < v2[0]; v3 = v3 + 1)\n
    {\n
        v10 = v3;\n
        v12 = v15 - 1;\n
        if ([D] GetI(136:I8x8)[t12,0])\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        else\n
        {\n
            v13 = v12 - 1;\n
            [D] PutI(72:F64x8)[t5,0] = t8\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
        }\n
        v14 = v4;\n
        if (![D] GetI(136:I8x8)[t12,0])\n
        {\n
            *((v14 + v10 * 8)) = nan;\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v15 = v13 + 1;\n
        }\n
        else\n
        {\n
            *((v14 + v10 * 8)) = [D] GetI(72:F64x8)[t8,0];\n
            [D] PutI(136:I8x8)[t8,0] = 0x00\n
            v15 = v13 + 1;\n
        }\n
    }\n
    v16 = v2;\n
    v16[1] = a0;\n
    if (v16[2])\n
    {\n
        v0 = v2[2];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v2[2] = v4;\n
    return v2;\n
}\n
", "4226142:sub_407c5e": null, "4226144:_Z12init_g_statePc": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_g_state;\n
\n
int init_g_state(unsigned int *v0)\n
{\n
    cgc_g_state = *(v0) * 1103515247 + 13579;\n
    return &_GLOBAL_OFFSET_TABLE_;\n
}\n
", "4226185:sub_407c89": null, "4226192:_Z6g_prngv": "extern unsigned int cgc_g_state;\n
\n
int g_prng()\n
{\n
    cgc_g_state = cgc_g_state * 1103515247 + 13579;\n
    return cgc_g_state >> 16 & 32767;\n
}\n
", "4226245:sub_407cc5": null, "4226256:_Z14start_trainingR9NeuralNet": "typedef struct struct_1 {\n
    unsigned int field_-140[6];\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int start_training(unsigned int v29)\n
{\n
    struct_0 *v0;  // [bp-0x98]\n
    struct_1 *v1;  // [bp-0x94]\n
    unsigned int v2;  // [bp-0x90]\n
    unsigned int v3;  // [bp-0x8c]\n
    unsigned int v4;  // [bp-0x88]\n
    unsigned int v5;  // [bp-0x84]\n
    unsigned int v6;  // [bp-0x80]\n
    unsigned int v7;  // [bp-0x7c]\n
    unsigned int v8;  // [bp-0x78]\n
    unsigned int v9;  // [bp-0x74]\n
    unsigned int v10;  // [bp-0x70]\n
    unsigned int v11;  // [bp-0x6c]\n
    unsigned int v12;  // [bp-0x68]\n
    unsigned long v13;  // [bp-0x64]\n
    unsigned long v14;  // [bp-0x5c]\n
    unsigned long v15;  // [bp-0x54]\n
    unsigned long v16;  // [bp-0x4c]\n
    unsigned long v17;  // [bp-0x44]\n
    char v18;  // [bp-0x3c]\n
    unsigned int v19[3];  // [bp-0x2c]\n
    char v20;  // [bp-0x20]\n
    void* v21;  // [bp-0x1c], Other Possible Types: unsigned int\n
    char v22;  // [bp-0x16]\n
    char v23;  // [bp-0x14]\n
    char v24;  // [bp-0x12]\n
    char v25;  // [bp-0x10]\n
    char v26;  // [bp-0xe]\n
    unsigned int v27;  // [bp-0xc]\n
    unsigned int v28;  // [bp-0x8]\n
    unsigned int v30;  // ebx\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v38;  // ftop\n
    unsigned int v39;  // ftop\n
    unsigned int v40;  // ftop\n
    unsigned int v41;  // ftop\n
    unsigned int v42;  // ftop\n
    unsigned int v44;  // ftop\n
    unsigned int v45;  // ftop\n
    unsigned int v46;  // ftop\n
    unsigned int v47;  // ftop\n
    unsigned int v48;  // ftop\n
    unsigned int v50;  // ftop\n
    unsigned int v51;  // ftop\n
    unsigned int v52;  // ftop\n
    unsigned int v53;  // ftop\n
    unsigned int v54;  // ftop\n
    unsigned int v56;  // ftop\n
    unsigned int v57;  // ftop\n
    unsigned int v58;  // ftop\n
    unsigned int v59;  // ftop\n
    unsigned int v60;  // ftop\n
    unsigned int v62;  // ftop\n
    unsigned int v63;  // ftop\n
    unsigned int v64;  // ftop\n
    unsigned int v65;  // ftop\n
    unsigned int v66;  // ftop\n
    unsigned int v68;  // ftop\n
    unsigned int v69;  // ftop\n
    unsigned int v70;  // ftop\n
    unsigned int v71;  // ftop\n
    unsigned int v72;  // ftop\n
    unsigned int v74;  // ftop\n
    unsigned int v75;  // ftop\n
    unsigned int v76;  // ftop\n
    unsigned int v77;  // ftop\n
    unsigned int v78;  // ftop\n
    unsigned int v80;  // ftop\n
    unsigned int v81;  // ftop\n
    unsigned int v82;  // ftop\n
    unsigned int v83;  // ftop\n
    unsigned int v84;  // ftop\n
    unsigned int v86;  // ftop\n
    unsigned int v87;  // ftop\n
    unsigned int v88;  // ftop\n
    unsigned int v89;  // ftop\n
    unsigned int v90;  // ftop\n
    unsigned int v91;  // ftop\n
\n
    v28 = v30;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.field_-140;\n
    vector::__base_ctor__();\n
    vector::__base_ctor__();\n
    if (cgc_fread(&v20, 4, v1[80].field_-140) != 4)\n
    {\n
LABEL_4080d3:\n
        v27 = 1;\n
    }\n
    else\n
    {\n
        if (*(&v20) >= 500 && *(&v20) <= 1000)\n
        {\n
            v21 = 0;\n
            while (true)\n
            {\n
                if (v21 >= *(&v20))\n
                {\n
                    v27 = 0;\n
                    goto LABEL_4080d3;\n
                }\n
                if (cgc_fread(&v26, 2, v1[80].field_-140) != 2)\n
                {\n
LABEL_407dd1:\n
                    goto LABEL_4080d3;\n
                }\n
                else\n
                {\n
                    v11 = *(&v26);\n
                    v32 = ftop<4> - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v33 = v32 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v33 = v32 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v34 = v33 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v35 = v34 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v35 = v34 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    v36 = v35 + 1;\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                        goto LABEL_407dd1;\n
                    if (cgc_fread(&v25, 2, v1[80].field_-140) != 2)\n
                    {\n
LABEL_407e31:\n
                        goto LABEL_4080d3;\n
                    }\n
                    else\n
                    {\n
                        v10 = *(&v25);\n
                        v38 = v36 + 1 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v39 = v38 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v39 = v38 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v40 = v39 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v41 = v40 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v41 = v40 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t5,0] = t9\n
                        [D] PutI(136:I8x8)[t5,0] = 0x01\n
                        [D] PutI(72:F64x8)[t5,1] = t2\n
                        [D] PutI(136:I8x8)[t5,1] = 0x01\n
                        [D] PutI(136:I8x8)[t25,0] = 0x00\n
                        v42 = v41 + 1;\n
                        [D] PutI(72:F64x8)[t39,0] = t40\n
                        [D] PutI(136:I8x8)[t39,0] = 0x01\n
                        [D] PutI(136:I8x8)[t39,0] = 0x00\n
                        if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                            goto LABEL_407e31;\n
                        if (cgc_fread(&v24, 2, v1[80].field_-140) != 2)\n
                        {\n
LABEL_407e91:\n
                            goto LABEL_4080d3;\n
                        }\n
                        else\n
                        {\n
                            v9 = *(&v24);\n
                            v44 = v42 + 1 - 1;\n
                            if ([D] GetI(136:I8x8)[t3,0])\n
                            {\n
                                v45 = v44 - 1;\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            else\n
                            {\n
                                v45 = v44 - 1;\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            v46 = v45 - 1;\n
                            if (![D] GetI(136:I8x8)[t3,0])\n
                            {\n
                                v47 = v46 - 1;\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            else\n
                            {\n
                                v47 = v46 - 1;\n
                                [D] PutI(72:F64x8)[t3,0] = t6\n
                                [D] PutI(136:I8x8)[t3,0] = 0x01\n
                            }\n
                            [D] PutI(72:F64x8)[t5,0] = t9\n
                            [D] PutI(136:I8x8)[t5,0] = 0x01\n
                            [D] PutI(72:F64x8)[t5,1] = t2\n
                            [D] PutI(136:I8x8)[t5,1] = 0x01\n
                            [D] PutI(136:I8x8)[t25,0] = 0x00\n
                            v48 = v47 + 1;\n
                            [D] PutI(72:F64x8)[t39,0] = t40\n
                            [D] PutI(136:I8x8)[t39,0] = 0x01\n
                            [D] PutI(136:I8x8)[t39,0] = 0x00\n
                            if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                                goto LABEL_407e91;\n
                            if (cgc_fread(&v23, 2, v1[80].field_-140) != 2)\n
                            {\n
LABEL_407ef1:\n
                                goto LABEL_4080d3;\n
                            }\n
                            else\n
                            {\n
                                v8 = *(&v23);\n
                                v50 = v48 + 1 - 1;\n
                                if ([D] GetI(136:I8x8)[t3,0])\n
                                {\n
                                    v51 = v50 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    v51 = v50 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                v52 = v51 - 1;\n
                                if (![D] GetI(136:I8x8)[t3,0])\n
                                {\n
                                    v53 = v52 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                else\n
                                {\n
                                    v53 = v52 - 1;\n
                                    [D] PutI(72:F64x8)[t3,0] = t6\n
                                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                }\n
                                [D] PutI(72:F64x8)[t5,0] = t9\n
                                [D] PutI(136:I8x8)[t5,0] = 0x01\n
                                [D] PutI(72:F64x8)[t5,1] = t2\n
                                [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                [D] PutI(136:I8x8)[t25,0] = 0x00\n
                                v54 = v53 + 1;\n
                                [D] PutI(72:F64x8)[t39,0] = t40\n
                                [D] PutI(136:I8x8)[t39,0] = 0x01\n
                                [D] PutI(136:I8x8)[t39,0] = 0x00\n
                                if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                                    goto LABEL_407ef1;\n
                                if (cgc_fread(&v22, 2, v1[80].field_-140) != 2)\n
                                {\n
LABEL_407f51:\n
                                    goto LABEL_4080d3;\n
                                }\n
                                else\n
                                {\n
                                    v7 = *(&v22);\n
                                    v56 = v54 + 1 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v57 = v56 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v57 = v56 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v58 = v57 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v59 = v58 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v59 = v58 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t5,0] = t9\n
                                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                                    [D] PutI(72:F64x8)[t5,1] = t2\n
                                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                                    v60 = v59 + 1;\n
                                    [D] PutI(72:F64x8)[t39,0] = t40\n
                                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                                    if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                                        goto LABEL_407f51;\n
                                    *(&v0) = v19;\n
                                    vector::clear(v19);\n
                                    v6 = *(&v26);\n
                                    v62 = v60 + 1 - 1;\n
                                    if (![D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v63 = v62 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v63 = v62 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v64 = v63 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v65 = v64 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v65 = v64 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t5,1] = t6\n
                                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                                    v66 = v65 + 1;\n
                                    v17 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                                    [D] PutI(136:I8x8)[t30,0] = 0x00\n
                                    vector::push_back(v0, &v17);\n
                                    v5 = *(&v25);\n
                                    v68 = v66 + 1 - 1;\n
                                    if (![D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v69 = v68 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v69 = v68 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v70 = v69 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v71 = v70 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v71 = v70 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t5,1] = t6\n
                                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                                    v72 = v71 + 1;\n
                                    v16 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                                    [D] PutI(136:I8x8)[t30,0] = 0x00\n
                                    vector::push_back(v0, &v16);\n
                                    v4 = *(&v24);\n
                                    v74 = v72 + 1 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v75 = v74 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v75 = v74 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v76 = v75 - 1;\n
                                    if (![D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v77 = v76 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v77 = v76 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t5,1] = t6\n
                                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                                    v78 = v77 + 1;\n
                                    v15 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                                    [D] PutI(136:I8x8)[t30,0] = 0x00\n
                                    vector::push_back(v0, &v15);\n
                                    v3 = *(&v23);\n
                                    v80 = v78 + 1 - 1;\n
                                    if (![D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v81 = v80 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v81 = v80 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v82 = v81 - 1;\n
                                    if (![D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v83 = v82 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v83 = v82 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t5,1] = t6\n
                                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t5,0] = 0x00\n
                                    v84 = v83 + 1;\n
                                    v14 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                                    [D] PutI(136:I8x8)[t30,0] = 0x00\n
                                    vector::push_back(v0, &v14);\n
                                    NeuralNet::feedForward(v29, v0);\n
                                    vector::clear(&v18);\n
                                    v2 = *(&v22);\n
                                    v86 = v84 + 1 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v87 = v86 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v87 = v86 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    v88 = v87 - 1;\n
                                    if ([D] GetI(136:I8x8)[t3,0])\n
                                    {\n
                                        v89 = v88 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    else\n
                                    {\n
                                        v89 = v88 - 1;\n
                                        [D] PutI(72:F64x8)[t3,0] = t6\n
                                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                                    }\n
                                    [D] PutI(72:F64x8)[t6,1] = t7\n
                                    [D] PutI(136:I8x8)[t6,1] = 0x01\n
                                    [D] PutI(136:I8x8)[t6,0] = 0x00\n
                                    v90 = v89 + 1;\n
                                    v13 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
                                    [D] PutI(136:I8x8)[t31,0] = 0x00\n
                                    v91 = v90 + 1;\n
                                    vector::push_back(&v18, &v13);\n
                                    NeuralNet::backProp(v29, &v18);\n
                                    v21 += 1;\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        goto LABEL_4080d3;\n
    }\n
    v12 = 1;\n
    vector::__base_dtor__();\n
    vector::__base_dtor__();\n
    return v27;\n
}\n
", "4227343:sub_40810f": null, "4227344:_Z12handle_queryR9NeuralNetR6vectorIdE": "typedef struct struct_0 {\n
    unsigned int field_-140[6];\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int handle_query(unsigned int v22, unsigned int a0)\n
{\n
    struct_1 *v0;  // [bp-0x70]\n
    struct_0 *v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    unsigned int v5;  // [bp-0x5c]\n
    unsigned int v6;  // [bp-0x58]\n
    unsigned int v7;  // [bp-0x54]\n
    unsigned int v8;  // [bp-0x50]\n
    unsigned int v9;  // [bp-0x4c]\n
    unsigned int v10;  // [bp-0x48]\n
    unsigned long v11;  // [bp-0x44]\n
    unsigned long v12;  // [bp-0x3c]\n
    unsigned long v13;  // [bp-0x34]\n
    unsigned long v14;  // [bp-0x2c]\n
    char v15;  // [bp-0x24]\n
    char v16;  // [bp-0x14]\n
    char v17;  // [bp-0x12]\n
    char v18;  // [bp-0x10]\n
    char v19;  // [bp-0xe]\n
    unsigned int v20;  // [bp-0xc]\n
    unsigned int v21;  // [bp-0x8]\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
\n
    v21 = v23;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.field_-140;\n
    vector::__base_ctor__();\n
    if (cgc_fread(&v19, 2, v1[80].field_-140) != 2)\n
    {\n
LABEL_40818c:\n
        goto LABEL_40829a;\n
    }\n
    else\n
    {\n
        v9 = *(&v19);\n
        v25 = v24 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v26 = v25 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v26 = v25 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        v27 = v26 - 1;\n
        if ([D] GetI(136:I8x8)[t3,0])\n
        {\n
            v28 = v27 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        else\n
        {\n
            v28 = v27 - 1;\n
            [D] PutI(72:F64x8)[t3,0] = t6\n
            [D] PutI(136:I8x8)[t3,0] = 0x01\n
        }\n
        [D] PutI(72:F64x8)[t5,0] = t9\n
        [D] PutI(136:I8x8)[t5,0] = 0x01\n
        [D] PutI(72:F64x8)[t5,1] = t2\n
        [D] PutI(136:I8x8)[t5,1] = 0x01\n
        [D] PutI(136:I8x8)[t25,0] = 0x00\n
        v29 = v28 + 1;\n
        [D] PutI(72:F64x8)[t39,0] = t40\n
        [D] PutI(136:I8x8)[t39,0] = 0x01\n
        [D] PutI(136:I8x8)[t39,0] = 0x00\n
        if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
            goto LABEL_40818c;\n
        if (cgc_fread(&v18, 2, v1[80].field_-140) != 2)\n
        {\n
LABEL_4081e6:\n
            goto LABEL_40829a;\n
        }\n
        else\n
        {\n
            v8 = *(&v18);\n
            v31 = v29 + 1 - 1;\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            if ([D] GetI(136:I8x8)[t3,0])\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            else\n
            {\n
                [D] PutI(72:F64x8)[t3,0] = t6\n
                [D] PutI(136:I8x8)[t3,0] = 0x01\n
            }\n
            [D] PutI(72:F64x8)[t5,0] = t9\n
            [D] PutI(136:I8x8)[t5,0] = 0x01\n
            [D] PutI(72:F64x8)[t5,1] = t2\n
            [D] PutI(136:I8x8)[t5,1] = 0x01\n
            [D] PutI(136:I8x8)[t25,0] = 0x00\n
            [D] PutI(72:F64x8)[t39,0] = t40\n
            [D] PutI(136:I8x8)[t39,0] = 0x01\n
            [D] PutI(136:I8x8)[t39,0] = 0x00\n
            if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                goto LABEL_4081e6;\n
            if (cgc_fread(&v17, 2, v1[80].field_-140) != 2)\n
            {\n
LABEL_408240:\n
                goto LABEL_40829a;\n
            }\n
            else\n
            {\n
                v7 = *(&v17);\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t5,0] = t9\n
                [D] PutI(136:I8x8)[t5,0] = 0x01\n
                [D] PutI(72:F64x8)[t5,1] = t2\n
                [D] PutI(136:I8x8)[t5,1] = 0x01\n
                [D] PutI(136:I8x8)[t25,0] = 0x00\n
                [D] PutI(72:F64x8)[t39,0] = t40\n
                [D] PutI(136:I8x8)[t39,0] = 0x01\n
                [D] PutI(136:I8x8)[t39,0] = 0x00\n
                if (!(((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | (CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6) & 1) == 1))\n
                    goto LABEL_408240;\n
                if (cgc_fread(&v16, 2, v1[80].field_-140) == 2)\n
                {\n
                    v6 = *(&v16);\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t5,0] = t9\n
                    [D] PutI(136:I8x8)[t5,0] = 0x01\n
                    [D] PutI(72:F64x8)[t5,1] = t2\n
                    [D] PutI(136:I8x8)[t5,1] = 0x01\n
                    [D] PutI(136:I8x8)[t25,0] = 0x00\n
                    [D] PutI(72:F64x8)[t39,0] = t40\n
                    [D] PutI(136:I8x8)[t39,0] = 0x01\n
                    [D] PutI(136:I8x8)[t39,0] = 0x00\n
                    if (((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t25,0] ? [D] GetI(72:F64x8)[t25,0] : nan), ([D] GetI(136:I8x8)[t25,1] ? [D] GetI(72:F64x8)[t25,1] : nan)) & 69) >> 6)) & 1) == 1)\n
                    {\n
                        v0 = &v15;\n
                        vector::clear(&v15);\n
                        v5 = *(&v19);\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t5,1] = t6\n
                        [D] PutI(136:I8x8)[t5,1] = 0x01\n
                        [D] PutI(136:I8x8)[t5,0] = 0x00\n
                        v14 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                        [D] PutI(136:I8x8)[t30,0] = 0x00\n
                        vector::push_back(v0, &v14);\n
                        v4 = *(&v18);\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t5,1] = t6\n
                        [D] PutI(136:I8x8)[t5,1] = 0x01\n
                        [D] PutI(136:I8x8)[t5,0] = 0x00\n
                        v13 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                        [D] PutI(136:I8x8)[t30,0] = 0x00\n
                        vector::push_back(v0, &v13);\n
                        v3 = *(&v17);\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t5,1] = t6\n
                        [D] PutI(136:I8x8)[t5,1] = 0x01\n
                        [D] PutI(136:I8x8)[t5,0] = 0x00\n
                        v12 = ([D] GetI(136:I8x8)[t30,0] ? [D] GetI(72:F64x8)[t30,0] : nan);\n
                        [D] PutI(136:I8x8)[t30,0] = 0x00\n
                        vector::push_back(v0, &v12);\n
                        v2 = *(&v16);\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t6,1] = t7\n
                        [D] PutI(136:I8x8)[t6,1] = 0x01\n
                        [D] PutI(136:I8x8)[t6,0] = 0x00\n
                        v11 = ([D] GetI(136:I8x8)[t31,0] ? [D] GetI(72:F64x8)[t31,0] : nan);\n
                        [D] PutI(136:I8x8)[t31,0] = 0x00\n
                        vector::push_back(&v15, &v11);\n
                        NeuralNet::feedForward(v22, &v15);\n
                        NeuralNet::getOutput(v22, a0);\n
                        v20 = 0;\n
                        v10 = 1;\n
                        goto LABEL_4083a4;\n
                    }\n
                }\n
LABEL_40829a:\n
                v20 = 1;\n
                v10 = 1;\n
            }\n
        }\n
    }\n
LABEL_4083a4:\n
    vector::__base_dtor__();\n
    return v20;\n
}\n
", "4228027:sub_4083bb": null, "4228032:main": "typedef struct struct_1 {\n
    unsigned int field_-140[6];\n
    unsigned int field_-13c[5];\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-140;\n
    unsigned int field_-13c[5];\n
} struct_0;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v17, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x88]\n
    struct_1 *v1;  // [bp-0x84]\n
    unsigned short v2;  // [bp-0x80]\n
    unsigned short v3;  // [bp-0x7e]\n
    unsigned long v4;  // [bp-0x7c]\n
    char v5;  // [bp-0x74]\n
    char v6;  // [bp-0x54]\n
    char v7;  // [bp-0x44]\n
    unsigned int v8;  // [bp-0x38]\n
    unsigned int v9;  // [bp-0x34]\n
    unsigned int v10;  // [bp-0x30]\n
    char v11;  // [bp-0x2c]\n
    char v12;  // [bp-0x1c]\n
    unsigned int v13;  // [bp-0x18]\n
    unsigned int *v14;  // [bp-0x14]\n
    void* v15;  // [bp-0x10]\n
    unsigned int v16;  // [bp-0x8]\n
    unsigned int v18;  // ebx\n
    struct_0 *v19;  // ebx\n
    struct_0 *v20;  // ebx\n
    struct_0 *v21;  // ebx\n
    struct_0 *v22;  // ebx\n
    struct_0 *v23;  // ebx\n
    struct_0 *v24;  // ebx\n
    struct_0 *v26;  // ebx\n
    struct_0 *v27;  // ebx\n
\n
    v16 = v18;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.field_-140;\n
    v15 = 0;\n
    v17 = 0x4347c000;\n
    v14 = v17;\n
    init_g_state(v14);\n
    vector::__base_ctor__();\n
    v10 = 4;\n
    vector::push_back(&v11);\n
    v9 = 2;\n
    vector::push_back(&v11);\n
    v8 = 1;\n
    vector::push_back(&v11);\n
    NeuralNet::__ctor__(&v7, &v11);\n
    vector::__base_ctor__(&v6);\n
    vector::__base_ctor__();\n
    vector::__base_ctor__();\n
    v19 = v1;\n
    cgc_fwrite(v19 + 1311, 4, v19[39].field_-13c);\n
    if (start_training(&v7))\n
    {\n
        v20 = v1;\n
        cgc_fwrite(&v20[1310].field_-140 + 3, 4, v20[39].field_-13c);\n
        cgc_exit(0, 4);\n
    }\n
    while (true)\n
    {\n
        v21 = v1;\n
        cgc_fwrite(&v21[1309].field_-13c + 2, 4, v21[39].field_-13c);\n
        if (cgc_fread(&v12, 4, v1[40].field_-140) != 4)\n
        {\n
            v22 = v1;\n
            cgc_fwrite(&v22[1309].field_-140 + 1, 4, v22[39].field_-13c);\n
            cgc_exit(0, 4);\n
        }\n
        if (!cgc_memcmp(&v12, &v1[1308].field_-13c, 4))\n
        {\n
            if (handle_query(&v7, &v5))\n
            {\n
                v23 = v1;\n
                cgc_fwrite(&v23[1307].field_-13c + 3, 4, v23[39].field_-13c);\n
                cgc_exit(0, 4);\n
            }\n
            v24 = v1;\n
            cgc_fwrite(&v24[1307].field_-140 + 2, 4, v24[39].field_-13c);\n
            vector::operator[](&v5, 0);\n
            [D] PutI(72:F64x8)[t1,0] = t4\n
            [D] PutI(136:I8x8)[t1,0] = 0x01\n
            [D] PutI(72:F64x8)[t11,0] = t14\n
            [D] PutI(136:I8x8)[t11,0] = 0x01\n
            [D] PutI(136:I8x8)[t26,0] = 0x00\n
            [D] PutI(72:F64x8)[t40,0] = t41\n
            [D] PutI(136:I8x8)[t40,0] = 0x01\n
            [D] PutI(136:I8x8)[t40,0] = 0x00\n
            if (((CmpF(([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan), ([D] GetI(136:I8x8)[t26,1] ? [D] GetI(72:F64x8)[t26,1] : nan)) & 69 | ((CmpF(([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan), ([D] GetI(136:I8x8)[t26,1] ? [D] GetI(72:F64x8)[t26,1] : nan)) & 69) >> 6)) & 1) != 1)\n
            {\n
                strncpy(vector::operator[](&v5, 0) + 4, \"Mb`?\", 4);\n
                *(eax<4>) = 3539053052;\n
            }\n
            vector::operator[](&v5, 0);\n
            [D] PutI(72:F64x8)[t30,0] = t33\n
            [D] PutI(136:I8x8)[t30,0] = 0x01\n
            [D] PutI(72:F64x8)[t42,0] = t45\n
            [D] PutI(136:I8x8)[t42,0] = 0x01\n
            [D] PutI(72:F64x8)[t53,1] = t54\n
            [D] PutI(136:I8x8)[t53,1] = 0x01\n
            [D] PutI(136:I8x8)[t53,0] = 0x00\n
            [D] PutI(72:F64x8)[t75,0] = t78\n
            [D] PutI(136:I8x8)[t75,0] = 0x01\n
            [D] PutI(72:F64x8)[t86,1] = t87\n
            [D] PutI(136:I8x8)[t86,1] = 0x01\n
            [D] PutI(136:I8x8)[t86,0] = 0x00\n
            v3 = [D] x86g_create_fpucw(fpround<4>);\n
            v2 = v3 | 0xc00;\n
            v4 = ([D] GetI(136:I8x8)[t132,0] ? [D] GetI(72:F64x8)[t132,0] : nan);\n
            [D] PutI(136:I8x8)[t132,0] = 0x00\n
            v13 = v4;\n
            cgc_fwrite(&v13, 4, v1[39].field_-13c);\n
            if (v13 == 1337)\n
            {\n
                v26 = v1;\n
                cgc_fwrite(&v26[1305].field_-140 + 3, 4, v26[39].field_-13c);\n
                cgc_fread(&v13, 4, v1[40].field_-140);\n
                if (v13 > 4)\n
                    v0 = 4;\n
                else\n
                    v0 = v13;\n
                v13 = v0;\n
                cgc_fread(&v12, v13, v1[40].field_-140);\n
            }\n
        }\n
        else if (!cgc_memcmp(&v12, &v1[1306].field_-13c + 1, 4))\n
        {\n
            break;\n
        }\n
    }\n
    v27 = v1;\n
    cgc_fwrite(v27 + 1306, 4, v27[39].field_-13c);\n
    v15 = 0;\n
    vector::__base_dtor__();\n
    vector::__base_dtor__();\n
    vector::__base_dtor__();\n
    NeuralNet::__base_dtor__();\n
    vector::__base_dtor__();\n
    return v15;\n
}\n
", "4229271:sub_408897": null, "4229280:_ZN6vectorIdEC2Ev": "int vector::__base_ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[0] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4229311:sub_4088bf": null, "4229312:_ZN6vectorIdED2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::__base_dtor__(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2->field_8;\n
    v1 = v3;\n
    if (v3)\n
        v3 = operator delete[](v1);\n
    return v3;\n
}\n
", "4229375:sub_4088ff": null, "4229376:_ZN6vectorIjEC2Ev": "int vector::__base_ctor__(unsigned int v0[3])\n
{\n
    unsigned int v1[3];  // eax\n
\n
    v1 = v0;\n
    v1[1] = 0;\n
    v1[0] = 0;\n
    v1[2] = 0;\n
    return v0;\n
}\n
", "4229407:sub_40891f": null, "4229408:_ZN6vectorIjE9push_backERKj": "typedef struct struct_0 {\n
    struct struct_1 *field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::push_back(struct_0 *v4, unsigned int *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x18]\n
    struct_0 *v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // esi\n
    struct_0 *v6;  // ecx\n
    struct_0 *v7;  // ecx\n
    struct_0 *v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int *v10;  // eax\n
    unsigned int v11;  // ecx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v4;\n
    if (!v2->field_4)\n
    {\n
        v0 = 16;\n
        vector::reserve(v2);\n
    }\n
    v6 = v2;\n
    if (v6->field_0 == v6->field_4)\n
    {\n
        v7 = v2;\n
        v0 = v7->field_4 * 2;\n
        vector::reserve(v7);\n
    }\n
    v8 = v2;\n
    v9 = *(a0);\n
    v10 = v8->field_8;\n
    v11 = v8->field_0;\n
    v8->field_0 = v11 + 1;\n
    v10[v11] = v9;\n
    return v10;\n
}\n
", "4229545:sub_4089a9": null, "4229552:_ZN9NeuralNetD2Ev": "int NeuralNet::__base_dtor__(unsigned int v1)\n
{\n
    char v0;  // [bp-0x8]\n
\n
    return vector::__base_dtor__(v1, *(&v0));\n
}\n
", "4229589:sub_4089d5": null, "4229600:_ZN6vectorIjED2Ev": "typedef struct struct_0 {\n
    char padding_0[8];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::__base_dtor__(struct_0 *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v2->field_8;\n
    v1 = v3;\n
    if (v3)\n
        v3 = operator delete[](v1);\n
    return v3;\n
}\n
", "4229663:sub_408a1f": null, "4229664:_ZN6vectorIS_I6NeuronEED2Ev": "typedef struct struct_1 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_-4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::__base_dtor__(struct_1 *v5)\n
{\n
    void* v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    struct_0 *v4;  // [bp-0xc]\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ecx\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = v5->field_8;\n
    v4 = v6;\n
    if (!v6)\n
        return v5->field_8;\n
    v7 = v4;\n
    v1 = v7 + 1;\n
    v2 = &v7[3 * v7[1].field_-4];\n
    if (v7 != v2)\n
    {\n
        do\n
        {\n
            v0 = v2 - 12;\n
            vector::__base_dtor__(v0);\n
            v2 = v0;\n
        } while (v2 != v4);\n
    }\n
    v6 = operator delete[](v1);\n
    return v6;\n
}\n
", "4229794:sub_408aa2": null, "4229808:_ZN6vectorIjE7reserveEm": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int vector::reserve(unsigned int v6[3], unsigned int a0)\n
{\n
    int tmp_18;  // tmp #18\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2[3];  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // eax\n
    unsigned int v10[3];  // eax\n
\n
    v5 = v7;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = v6;\n
    v8 = a0;\n
    tmp_18 = v8;\n
    v9 = v8 * 4;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t18, 0x4<32>, 0x0<32>))\n
        v9 = -1;\n
    v4 = operator new[](v9);\n
    for (v3 = 0; v3 < v2[0]; v3 += 1)\n
    {\n
        v4[v3] = *((v2[2] + v3 * 4));\n
    }\n
    v10 = v2;\n
    v10[1] = a0;\n
    if (v10[2])\n
    {\n
        v0 = v2[2];\n
        if (v0)\n
            operator delete[](v0);\n
    }\n
    v2[2] = v4;\n
    return v2;\n
}\n
", "4230004:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_receive": null, "5242888:_Znaj": null, "5242892:cgc_allocate": null, "5242896:cgc__terminate": null, "5242900:cgc_deallocate": null, "5242904:_ZdaPv": null, "5242908:cgc_transmit": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}