{"4198400:_init": "extern struct_0 *g_404d14;\n
\n
int _init()\n
{\n
    if (g_404d14)\n
    {\n
        g_404d14();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198528:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198544:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198560:sub_4010a0": "int sub_4010a0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198566:sub_4010a6": null, "4198576:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198619:sub_4010db": null, "4198620:sub_4010dc": "int sub_4010dc()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198624:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198628:sub_4010e4": null, "4198640:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 15403;\n
    v6 = v5 + 11;\n
    v7 = v5 + 11;\n
    if (v7 == v6)\n
        return v5 + 11;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198691:sub_401123": "int sub_401123()\n
{\n
}\n
", "4198697:sub_401129": "int sub_401129()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198704:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 15339;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 11;\n
    v9 = (v6 + 11 - (v6 + 11) >> 31) + (11 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198775:sub_401177": "int sub_401177()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198784:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_404d10;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_404d10)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010a0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198859:sub_4011cb": "int sub_4011cb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198864:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198873:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198877:sub_4011dd": null, "4198880:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v2 = v1;\n
    tmp_21 = v2;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t21, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v5 = v2 * a0;\n
    v6 = cgc_malloc();\n
    if (v6)\n
    {\n
        v0 = v5;\n
        cgc_memset(v6, 0);\n
        return v6;\n
    }\n
    return 0;\n
}\n
", "4198958:sub_40122e": null, "4198960:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4198974:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = !((&_GLOBAL_OFFSET_TABLE_)[7448 + v1] & 32);\n
    }\n
    return v2;\n
}\n
", "4199014:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[7448 + v1] & 7);\n
    }\n
    return v2;\n
}\n
", "4199051:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[7448 + v1] & 3);\n
    }\n
    return v2;\n
}\n
", "4199088:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[7448 + v1] & 1;\n
    return v2;\n
}\n
", "4199123:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[7448 + v1] >> 1 & 1;\n
    return v2;\n
}\n
", "4199160:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[7448 + v1] >> 4 & 1;\n
    return v2;\n
}\n
", "4199198:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[7448 + v1] >> 3 & 1;\n
    return v2;\n
}\n
", "4199236:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 91 > -27)\n
        v1 += 32;\n
    return v1;\n
}\n
", "4199257:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 123 > -27)\n
        v1 -= 32;\n
    return v1;\n
}\n
", "4199278:sub_40136e": null, "4199280:cgc_free": "typedef struct struct_1 {\n
    char field_-4;\n
    char padding_-3[3];\n
    struct struct_1 *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern unsigned int __bss_start;\n
extern char cgc_g_malloc;\n
\n
int cgc_free(struct_1 *v1)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    struct_1 *v2;  // eax, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int *v4;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v5;  // ebx\n
    unsigned int v6;  // edi\n
    unsigned int *v7;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v8;  // edi\n
    struct_1 *v9;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v11;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
        return v2;\n
    v3 = v2->field_0;\n
    if ((v2->field_0 & 1))\n
    {\n
        cgc__terminate();\n
        return cgc_malloc();\n
    }\n
    v2 = &v2->field_4;\n
    if ((v3 & 2))\n
    {\n
        v0 = *(v2);\n
        v2 = cgc_deallocate(v2);\n
        return v2;\n
    }\n
    *((v2 + 4)) = v3 | 1;\n
    v4 = &__bss_start;\n
    v9 = *(v2);\n
    v10 = -1;\n
    do\n
    {\n
        v10 += 1;\n
        v4 += 4;\n
    } while (v9 > 32 << (v10 & 31));\n
    if (v10 <= 11)\n
    {\n
        while (true)\n
        {\n
            v5 = v9 ^ v2;\n
            if (!(v5->field_0 & 1))\n
                break;\n
            if (*(&v5->field_-4) != v9)\n
                break;\n
            v6 = v5->field_8;\n
            v7 = v6 + 8;\n
            if (!v6)\n
                v7 = v4;\n
            *(v7) = *(&v5->field_4);\n
            v8 = *(&v5->field_4);\n
            if (v8)\n
                v8->field_c = v5->field_8;\n
            if (v5 < v2)\n
                v2 = v5;\n
            v9 = *(v2) * 2;\n
            *(v2) = v9;\n
            v10 += 1;\n
            v4 += 4;\n
            if (v10 == 12)\n
            {\n
                v10 = 12;\n
                break;\n
            }\n
        }\n
    }\n
    v11 = *(&(&cgc_g_malloc)[4 * v10]);\n
    *((v2 + 8)) = v11;\n
    if (v11)\n
        v11->field_c = v2;\n
    *((v2 + 12)) = 0;\n
    *(&(&cgc_g_malloc)[4 * v10]) = v2;\n
    return v2;\n
}\n
", "4199504:cgc_malloc": "typedef struct struct_4 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_4;\n
\n
typedef struct struct_3 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_3;\n
\n
typedef struct struct_2 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
extern struct_1 *__bss_start;\n
extern unsigned int cgc_g_malloc[13];\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1[13];  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // ebp\n
    struct struct_1 **v8;  // esi, Other Possible Types: unsigned int\n
    struct_4 *v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // eax\n
    struct_3 *v13;  // ebp\n
    unsigned int v14[13];  // ecx\n
    unsigned int v15;  // edx\n
    struct struct_2 **v16;  // ecx, Other Possible Types: unsigned int\n
    struct_2 *v17;  // edx\n
    struct_0 *v18;  // edi\n
    unsigned int v19;  // ebx\n
    struct struct_2 **v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21[4];  // edi\n
    struct_0 *v22;  // ebx\n
    struct_1 *v23;  // ecx\n
    struct_0 *v24;  // eax\n
    unsigned int v25;  // edx\n
    struct struct_1 **v26;  // edi, Other Possible Types: unsigned int\n
\n
    v7 = v6 + 8;\n
    if (v6 + 8 > 65535)\n
    {\n
        v0 = &v5;\n
        if (!cgc_allocate(v7, 0))\n
        {\n
            v9 = *(&v5);\n
            v9->field_4 = v9->field_4 & 252 | 2;\n
            v9->field_0 = v7;\n
            return &v9[1].field_0 + 3;\n
        }\n
        return 0;\n
    }\n
    else\n
    {\n
        v1[0] = &cgc_g_malloc[0];\n
        v8 = &__bss_start;\n
        v15 = -1;\n
        do\n
        {\n
            v15 += 1;\n
            v8 += 4;\n
        } while (v7 > 32 << (v15 & 31));\n
        v2 = v15;\n
        v10 = v15;\n
        if (v15 <= 12)\n
        {\n
            while (!v1[v10])\n
            {\n
                v10 += 1;\n
                if (v10 == 13)\n
                    goto LABEL_4014f6;\n
            }\n
        }\n
        else if (v15 == 13)\n
        {\n
LABEL_4014f6:\n
            v0 = &v3;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v3);\n
            v13 = v12 + 131071 & -0x20000;\n
            if ((v12 + 131071 & -0x20000) != v12)\n
                cgc_deallocate(v12);\n
            cgc_deallocate(v13 + 0x2000);\n
            v13->field_0 = 0x20000;\n
            v13->field_4 = v13->field_4 & 252 | 1;\n
            v14 = v1;\n
            v13->field_8 = v14[12];\n
            v13->field_c = 0;\n
            v14[12] = v13;\n
            v10 = 12;\n
            v15 = v2;\n
        }\n
        if (v10 > v15)\n
        {\n
            v16 = &v1[v10];\n
            v17 = *(v16);\n
            do\n
            {\n
                v18 = v17->field_8;\n
                if (v18)\n
                    v18->field_c = v17->field_c;\n
                v19 = v17->field_c;\n
                v20 = v19 + 8;\n
                if (!v19)\n
                    v20 = v16;\n
                *(v20) = v18;\n
                v17->field_8 = 0;\n
                v17->field_c = 0;\n
                v4 = v17->field_4;\n
                v21 = v17->field_0 >> 1;\n
                v17->field_0 = v21;\n
                *(((v21 ^ v17) + 12)) = 0;\n
                *(((v21 ^ v17) + 8)) = 0;\n
                *(((v21 ^ v17) + 4)) = v4;\n
                *((v21 ^ v17)) = v21;\n
                v17->field_c = 0;\n
                v17->field_8 = v21 ^ v17;\n
                *(((v21 ^ v17) + 12)) = v17;\n
                v22 = v1[1 + v10];\n
                *(((v21 ^ v17) + 8)) = v22;\n
                if (v22)\n
                    v22->field_c = v21 ^ v17;\n
                v1[1 + v10] = v17;\n
                v16 -= 4;\n
                v10 -= 1;\n
            } while (v10 > v2);\n
        }\n
        v23 = *(v8);\n
        v24 = v23->field_8;\n
        if (v24)\n
            v24->field_c = v23->field_c;\n
        v25 = v23->field_c;\n
        v26 = v25 + 8;\n
        if (!v25)\n
            v26 = v8;\n
        *(v26) = v24;\n
        v23->field_8 = 0;\n
        v23->field_c = 0;\n
        v23->field_4 = v23->field_4 & 254;\n
        return &v23->field_8;\n
    }\n
}\n
", "4199997:sub_40163d": null, "4200000:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_malloc_size(struct_0 *v0)\n
{\n
    return v0[2].field_-8 - 8;\n
}\n
", "4200011:sub_40164b": null, "4200012:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4200054:sub_401676": null, "4200056:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4200090:sub_40169a": null, "4200092:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4200121:sub_4016b9": null, "4200124:cgc_fdprintf": "int cgc_fdprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = v4;\n
    v1 = &v3;\n
    v0 = &v3;\n
    return cgc__printf(a0);\n
}\n
", "4200176:cgc__printf": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__printf(char a0, unsigned int a0)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_9;  // tmp #9\n
    int tmp_12;  // tmp #12\n
    int tmp_39;  // tmp #39\n
    unsigned int v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x64]\n
    unsigned int v2;  // [bp-0x5c], Other Possible Types: char\n
    unsigned int v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0x54]\n
    unsigned int v5;  // [bp-0x50]\n
    unsigned int v6;  // [bp-0x4c]\n
    unsigned int v7;  // [bp-0x48]\n
    unsigned int v8;  // [bp-0x44]\n
    unsigned int v9;  // [bp-0x40]\n
    unsigned int v10;  // [bp-0x3c]\n
    unsigned int v11;  // [bp-0x38]\n
    unsigned int v12;  // [bp-0x34]\n
    char v13;  // [bp-0x12]\n
    char v14;  // [bp-0x11]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v16;  // [bp+0x4]\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // edx\n
    unsigned int v19;  // ecx\n
    unsigned int v20;  // eax\n
    unsigned int v21;  // edx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ebx\n
    unsigned int v24;  // ecx\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // ebx\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // esi\n
    unsigned int v31;  // eax\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    unsigned int v36;  // eax\n
    unsigned int v38;  // eax\n
    unsigned int v39;  // esi\n
    unsigned int v41;  // ebx\n
    unsigned int v42;  // ecx\n
    unsigned int v43;  // ecx\n
    unsigned int v44;  // esi\n
    unsigned int v45;  // edi\n
    unsigned int v46;  // ebp\n
    unsigned int v47;  // ebp\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // eax\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // eax\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // eax\n
    unsigned int v56;  // ebx\n
    unsigned int v57;  // eax\n
    unsigned int v58;  // eax\n
\n
    v15 = v17;\n
    v6 = v18;\n
    v46 = v19;\n
    v23 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0;\n
    v22 = v16;\n
    v3 = 0;\n
    v43 = \" \";\n
    v12 = \" \";\n
    v2 = 0;\n
    v21 = 0;\n
    v8 = v46;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        if (*(v22) != 37)\n
        {\n
            if (*(v22))\n
            {\n
                if (!v21)\n
                    v21 = v22;\n
                v9 = v21;\n
                v16 = v22 + 1;\n
                *(&v21) = v2;\n
                goto LABEL_401ba3;\n
            }\n
            if (!v21)\n
                return v3;\n
            tmp_2 = v22;\n
            v57 = v22 - v21;\n
            if (tmp_2 != v21)\n
            {\n
                v1 = v57;\n
                v58 = v46(v6, v21);\n
                if (v58 >= 0)\n
                {\n
                    v3 += v58;\n
                    return v3;\n
                }\n
LABEL_401bda:\n
                v3 = -1;\n
                return v3;\n
            }\n
        }\n
        if (v21 && v22 != v21)\n
        {\n
            v1 = v22 - v21;\n
            v20 = v46(v6, v21);\n
            if (v20 < 0)\n
                goto LABEL_401bda;\n
            v3 += v20;\n
            if (v20 < v1)\n
                return v3;\n
            v22 = v16;\n
            v23 = v4;\n
        }\n
        v24 = v22 + 1;\n
        v16 = v24;\n
        if (*((v22 + 1)) == 37)\n
            break;\n
        v10 = v12;\n
        if (*((v22 + 1)) == 48)\n
        {\n
            v26 = v22 + 2;\n
            do\n
            {\n
                v16 = v26;\n
                tmp_9 = *(v26);\n
                v26 += 1;\n
            } while (tmp_9 == 48);\n
            v27 = v26 - 1;\n
            v10 = v23 - 7276;\n
            v24 = v27;\n
        }\n
        v1 = 10;\n
        v30 = cgc_strtoul(v24, &v16);\n
        v31 = v16;\n
        *(&v21) = *(v31);\n
        v32 = *(v31);\n
        if (v32 == 72)\n
        {\n
LABEL_4017fa:\n
            v16 = v31 + 1;\n
            *(&v21) = *((v31 + 1));\n
            v31 = v16;\n
            goto LABEL_401848;\n
        }\n
        else\n
        {\n
            if (v32 == 108)\n
                goto LABEL_4017fa;\n
            if (v32 == 104)\n
                goto LABEL_4017fa;\n
            *(&v21) = v21;\n
            *(&v21) = v2;\n
LABEL_401848:\n
            v33 = v4;\n
            v43 = v21;\n
            v9 = 0;\n
            if (v43 > 109)\n
            {\n
                v43 -= 110;\n
                switch (v43)\n
                {\n
                case 0:\n
                    v43 = *(v5);\n
                    if (v21 == 72)\n
                    {\n
                        *(v43) = v3;\n
                        v31 = v16;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v2 = v21;\n
                        if (v21 != 104)\n
                            *(v43) = v3;\n
                        else\n
                            *(v43) = v3;\n
                        *(&v21) = v2;\n
                        break;\n
                    }\n
                    v5 += 4;\n
                    v16 = v31 + 1;\n
                    goto LABEL_401ba3;\n
                case 1: case 7: case 10:\n
                    v34 = (v21 != 111) * 8 + 8;\n
                    if (v21 == 117)\n
                        v34 = 10;\n
                    v43 = *(v5);\n
                    v2 = v21;\n
                    v7 = v30;\n
                    if (!v43)\n
                    {\n
                        v14 = 48;\n
                        v44 = 1;\n
                        v45 = &v14;\n
                    }\n
                    else\n
                    {\n
                        v41 = v33 - 7257;\n
                        if (v21 == 88)\n
                            v41 = v33 - 7274;\n
                        v14 = *((v41 + ((0 CONCAT v43) /m v34 >> 32)));\n
                        v44 = 1;\n
                        v45 = &v14;\n
                        if (v43 >= v34)\n
                        {\n
                            v45 = &v14;\n
                            v44 = 1;\n
                            do\n
                            {\n
                                v44 += 1;\n
                                v43 = (0 CONCAT v43) /m v34;\n
                                *((v45 - 1)) = *((v41 + ((0 CONCAT v43) /m v34 >> 32)));\n
                                v45 = &v13;\n
                            } while (v43 >= v34);\n
                        }\n
                    }\n
                    v5 += 4;\n
                    v46 = v8;\n
                    if (v7 > v44)\n
                    {\n
                        do\n
                        {\n
                            v1 = 1;\n
                            v49 = v46(v6, v10);\n
                            v3 += v49;\n
                            tmp_12 = v49;\n
                            v50 = (!v49) * 9;\n
                            v43 = 8;\n
                            if (tmp_12 < 0)\n
                                v50 = 8;\n
                            if (v50)\n
                                *(&v43) = v2;\n
                            v7 -= 1;\n
                        } while (v7 > v44);\n
                    }\n
                    v1 = v44;\n
                    v52 = v46(v6, v45);\n
                    if (v52 >= 0)\n
                    {\n
                        v3 += v52;\n
                        if (v52 < v44)\n
                            return v3;\n
                        goto LABEL_401b5b;\n
                    }\n
                case 5:\n
                    v2 = v21;\n
                    v35 = cgc_strlen();\n
                    if (!v35)\n
                    {\n
LABEL_401a3e:\n
                        v5 += 4;\n
                        goto LABEL_401b5b;\n
                    }\n
                    else\n
                    {\n
                        v1 = v35;\n
                        v38 = v46(v6, *(v5));\n
                        if (v38 >= 0)\n
                        {\n
                            v3 += v38;\n
                            if (v38 < v35)\n
                                return v3;\n
                            goto LABEL_401a3e;\n
                        }\n
                    }\n
                default:\n
LABEL_401ba3:\n
                    v22 = v16;\n
                    *(&v43) = v21;\n
                    v2 = v43;\n
                    v21 = v9;\n
                    continue;\n
                }\n
            }\n
            else if (v43 != 88)\n
            {\n
                if (v43 != 100 && !(v43 == 105))\n
                    goto LABEL_401ba3;\n
                v36 = *(v5);\n
                v7 = v30;\n
                if (v21 == 72)\n
                {\n
                    v36 = v36;\n
                    v43 = 3435973837;\n
                }\n
                else\n
                {\n
                    v43 = 3435973837;\n
                    if (v21 == 104)\n
                        v36 = v36;\n
                }\n
                v2 = v21;\n
                v39 = -(v36);\n
                v11 = v36;\n
                if (!(v36) < 0)\n
                    v39 = v36;\n
                if (!v39)\n
                {\n
                    v14 = 48;\n
                    v48 = 1;\n
                    v47 = &v14;\n
                }\n
                else\n
                {\n
                    v14 = *((v4 + v39 - (v39 * 3435973837 >> 32 >> 2 & -2) * 5 - 7257));\n
                    v48 = 1;\n
                    v43 = 3435973837;\n
                    v47 = &v14;\n
                    if (v39 >= 10)\n
                    {\n
                        v48 = 1;\n
                        v47 = &v14;\n
                        do\n
                        {\n
                            v42 = v39 * 3435973837 >> 32 >> 3;\n
                            *((v47 - 1)) = *((v4 + v42 - ((v39 * 3435973837 >> 32 >> 3) * 3435973837 >> 32 >> 2 & -2) * 5 - 7257));\n
                            v48 += 1;\n
                            v47 = &v13;\n
                            tmp_39 = v39;\n
                            v39 = v42;\n
                            v43 = 3435973837;\n
                        } while (tmp_39 > 99);\n
                    }\n
                }\n
                if (v11 < 0)\n
                {\n
                    *((v47 - 1)) = 45;\n
                    v47 -= 1;\n
                    v48 += 1;\n
                }\n
                v51 = v7;\n
                v5 += 4;\n
                if (v51 > v48)\n
                {\n
                    do\n
                    {\n
                        v1 = 1;\n
                        v53 = v8(v6, v10);\n
                        v3 += v53;\n
                        tmp_12 = v53;\n
                        v50 = (!v53) * 9;\n
                        v43 = 8;\n
                        if (tmp_12 < 0)\n
                            v50 = 8;\n
                        if (v50)\n
                        {\n
                            *(&v43) = v2;\n
                            v46 = v8;\n
                        }\n
                        v51 -= 1;\n
                    } while (v51 > v48);\n
                }\n
                if (!v48)\n
                {\n
                    v46 = v8;\n
LABEL_401b5b:\n
                    v16 += 1;\n
                    v56 = v4;\n
                    *(&v21) = v2;\n
                    goto LABEL_401ba3;\n
                }\n
                else\n
                {\n
                    v1 = v48;\n
                    v0 = v47;\n
                    v46 = v8;\n
                    v54 = v8(v6, v0);\n
                    if (v54 >= 0)\n
                    {\n
                        v3 += v54;\n
                        if (v54 < v48)\n
                            return v3;\n
                        goto LABEL_401b5b;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v1 = 1;\n
    v25 = v46(v6, v24);\n
    v3 += v25;\n
    tmp_12 = v25;\n
    v50 = (!v25) * 9;\n
    v43 = 8;\n
    if (tmp_12 < 0)\n
        v50 = 8;\n
    if (v50)\n
    {\n
        v28 = v4;\n
        v43 = v2;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v9 = 0;\n
        *(&v21) = v2;\n
        v29 = v4;\n
        goto LABEL_401ba3;\n
    }\n
    if (v50 == 2)\n
    {\n
        v9 = 0;\n
        *(&v21) = v43;\n
        goto LABEL_401ba3;\n
    }\n
    else if (v50 != 8)\n
    {\n
        return v3;\n
    }\n
}\n
", "4201453:cgc__consumer_fd": "int cgc__consumer_fd(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // esi\n
\n
    cgc_transmit(v1, a0, a1, &v0, v2, v3);\n
    return a1;\n
}\n
", "4201500:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_sprintf(unsigned int v1)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp+0x8]\n
    char v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v0 = v4;\n
    v0 = &v3;\n
    return cgc__printf(*(&v2), &v3);\n
}\n
", "4201552:cgc__consumer_string": "int cgc__consumer_string(struct struct_0 **v1, unsigned int a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
    char *v3;  // esi\n
    struct struct_0 **v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = v1;\n
    cgc_memcpy(*(v4), a0, v3);\n
    v5 = *(v4);\n
    *(v4) = &v3[v5];\n
    v3[v5] = 0;\n
    return a1;\n
}\n
", "4201610:cgc_vsnprintf": "int cgc_vsnprintf(unsigned int v2, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
        return 0;\n
    v0 = v2;\n
    v1 = v3 - 1;\n
    return cgc__printf(a1, a2);\n
}\n
", "4201688:cgc__consumer_string_checked": "int cgc__consumer_string_checked(struct struct_0 *v0[2], unsigned int a0, char *a1)\n
{\n
    struct struct_0 *v1[2];  // edi\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    v2 = a1;\n
    if (v2 < v2)\n
        v2 = v1[1];\n
    if (v2)\n
    {\n
        cgc_memcpy(v1[0], a0, v2);\n
        v3 = v1[0];\n
        v1[0] = v3 + v2;\n
        *((v3 + v2)) = 0;\n
        v1[1] = &(v1[1])[-1 * v2];\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4201761:cgc_snprintf": "int cgc_snprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v4;  // [bp+0x10]\n
    unsigned int v5;  // ecx\n
\n
    v5 = a0;\n
    v0 = &v4;\n
    if (!v5)\n
        return 0;\n
    v1 = v3;\n
    v2 = v5 - 1;\n
    return cgc__printf(a1, v0);\n
}\n
", "4201847:sub_401d77": null, "4201848:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!a0)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        if (!v2)\n
            return cgc_malloc(v1);\n
        v3 = v2[2].field_-8;\n
        if (v3 >> 1 < v1 && !(v3 - 8 <= v1))\n
            goto LABEL_401dec;\n
        v4 = cgc_malloc(v1);\n
        if (v4)\n
        {\n
            v5 = v4;\n
            v6 = v2[2].field_-8 - 8;\n
            if (v6 > v1)\n
                v6 = v1;\n
            cgc_memcpy(v5, v2, v6);\n
            cgc_free(v2);\n
            v2 = v5;\n
            goto LABEL_401dec;\n
        }\n
    }\n
    v2 = 0;\n
LABEL_401dec:\n
    return v2;\n
}\n
", "4201984:cgc_strchr": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strchr(unsigned int v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0 - 1;\n
    while (true)\n
    {\n
        v2 = *((v1 + 1));\n
        v1 += 1;\n
        if (!v2)\n
            break;\n
        if (v2 == a0)\n
            break;\n
    }\n
    if (v2)\n
        return v1;\n
    return 0;\n
}\n
", "4202014:sub_401e1e": null, "4202016:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    unsigned int v1;  // eax\n
    char *v2;  // esi\n
    unsigned int v3;  // ecx\n
    char v4;  // dl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (!v4)\n
            return a0[v3] - 0;\n
        if (!*((v1 + v3)))\n
            return a0[v3] - v4;\n
        if (v4 != *((v1 + v3)))\n
            return a0[v3] - v4;\n
        v4 = v2[1 + v3];\n
        v3 += 1;\n
    }\n
}\n
", "4202066:sub_401e52": null, "4202068:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    for (v4 = 0; v3; v4 += 1)\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
    }\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4202101:sub_401e75": null, "4202104:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4202122:sub_401e8a": null, "4202124:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, unsigned int a0)\n
{\n
    int tmp_7;  // tmp #7\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // esi\n
    unsigned int v3;  // al, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = cgc_strchr(a0, v3);\n
            if (v3)\n
            {\n
                v1 = v0;\n
                v5 = 0;\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_401ef1;\n
                }\n
            }\n
            tmp_7 = *(v4);\n
            *(&v3) = *(v4);\n
            v4 += 1;\n
        } while (tmp_7);\n
        v1 = v0;\n
        v5 = 0;\n
    }\n
LABEL_401ef1:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4202237:sub_401efd": null, "4202240:cgc_strtol": "typedef struct struct_0 {\n
    char field_-1;\n
    struct struct_0 *field_0;\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strtol(struct_0 *v5, unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_7;  // tmp #7\n
    unsigned int v0;  // [bp-0x24]\n
    void* v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    struct_0 *v4;  // [bp-0x14]\n
    unsigned int v6;  // esi\n
    char v7;  // ecx\n
    struct_0 *v8;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v9;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v10;  // cc_dep1\n
    unsigned int v11;  // eax\n
    unsigned int v12;  // cc_dep1\n
    unsigned int v13;  // edx\n
    struct_0 *v14;  // ecx, Other Possible Types: unsigned int\n
    char *v15;  // esi\n
    struct_0 *v16;  // edi\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // eax\n
    struct_0 *v19;  // esi, Other Possible Types: unsigned int\n
    unsigned int *v20;  // eax\n
    struct_0 *v21;  // ebp, Other Possible Types: unsigned int\n
\n
    v6 = a1;\n
    if (v6)\n
    {\n
        v7 = v6 - 37;\n
        if (v7 < -35)\n
            return 0;\n
    }\n
    v9 = v5;\n
    *(&v8) = v5->field_-1;\n
    v7 = 1;\n
    *(&v1) = v7;\n
    if (v5->field_-1)\n
    {\n
        v9 = &(&v9->field_-1)[1];\n
        while (true)\n
        {\n
            v8 = cgc_isspace(v8);\n
            if (v8)\n
            {\n
                tmp_7 = *(v9);\n
                *(&v8) = *(v9);\n
                v9 += 1;\n
                if (!tmp_7)\n
                    goto LABEL_401f69;\n
            }\n
            else\n
            {\n
                if (*((v9 - 1)) == 43)\n
                    break;\n
                if (*((v9 - 1)) == 45)\n
                {\n
                    v1 = 0;\n
                    break;\n
                }\n
LABEL_401f69:\n
                v9 -= 1;\n
                break;\n
            }\n
        }\n
    }\n
    if (!(v6 & -17))\n
    {\n
        if (*(v9) != 48)\n
        {\n
            v10 = v6;\n
            v11 = 10;\n
        }\n
        else if (*((v9 + 1)) == 120)\n
        {\n
            v9 += 2;\n
            v0 = 16;\n
            goto LABEL_401fa2;\n
        }\n
        else\n
        {\n
            v12 = v6;\n
            v11 = 8;\n
        }\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
            v6 = v11;\n
    }\n
    v0 = v6;\n
LABEL_401fa2:\n
    v13 = 0;\n
    v3 = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n
    v14 = 0;\n
    v4 = v9;\n
    v15 = v3;\n
    while (true)\n
    {\n
        v2 = v14;\n
        v16 = v13;\n
        v17 = *((v9 + v13));\n
        if (!v17)\n
            break;\n
        v18 = cgc_memchr(v15, cgc_tolower(v17), v0);\n
        v9 = v4;\n
        v14 = v0 * v2 - v15 + v18;\n
        v13 += 1;\n
        if (!v18)\n
            break;\n
    }\n
    v19 = v2;\n
    if (!v16)\n
        v19 = v16;\n
    v20 = a0;\n
    if (v20)\n
    {\n
        v21 = &(&v16->field_-1)[v9];\n
        if (!v16)\n
            v21 = v5;\n
        *(v20) = v21;\n
    }\n
    if (!v1)\n
        return -(v19);\n
    return v19;\n
}\n
", "4202537:cgc_strtoul": "int cgc_strtoul(void* v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4202578:sub_402052": null, "4202580:cgc_readuntil": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
} struct_0;\n
\n
int cgc_readuntil(unsigned int v2, struct_0 *a0, unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // ebp\n
    struct_0 *v4;  // esi, Other Possible Types: unsigned int\n
\n
    v3 = a1;\n
    v4 = a0;\n
    if (a1)\n
    {\n
        v4 = a0;\n
        while (true)\n
        {\n
            v0 = &v1;\n
            if (cgc_receive(v2, v4, 1))\n
                break;\n
            if (!*(&v1))\n
                break;\n
            if (*(v4) != a2)\n
            {\n
                v4 += 1;\n
                v3 -= 1;\n
                if (!v3)\n
                    break;\n
            }\n
            else\n
            {\n
                v4 += 1;\n
                break;\n
            }\n
        }\n
    }\n
    *((v4 - 1)) = 0;\n
    return v4 - a0;\n
}\n
", "4202679:cgc_jit_int": "int cgc_jit_int(unsigned int v10[1253], unsigned int a0)\n
{\n
    char v0;  // [bp-0x19]\n
    char v1;  // [bp-0x18]\n
    char v2;  // [bp-0x17]\n
    char v3;  // [bp-0x16]\n
    char v4;  // [bp-0x15]\n
    unsigned int v5;  // [bp-0x14]\n
    char v6;  // [bp-0x10]\n
    char v7;  // [bp-0xf]\n
    char v8;  // [bp-0xe]\n
    char v9;  // [bp-0xd]\n
    unsigned int v11[1253];  // esi\n
    unsigned int v12;  // edi\n
    unsigned int v13;  // edx\n
    unsigned int v15;  // ecx\n
\n
    v11 = v10;\n
    v12 = v11[1251];\n
    v0 = 185;\n
    v1 = v12 - 4;\n
    v2 = v1;\n
    v3 = v1 >> 16;\n
    v4 = v1 >> 24;\n
    v5 = 3096918409;\n
    v6 = a0;\n
    v7 = v6;\n
    v8 = v6 >> 16;\n
    v9 = v6 >> 24;\n
    v13 = &v11[1000];\n
    if (v12 < v13)\n
        return 2;\n
    v15 = v11[1250];\n
    if (v15 + 13 < v13)\n
    {\n
        cgc_memcpy(v15, &v0, 13);\n
        v11[1250] = v11[1250] + 13;\n
        v11[1251] = v11[1251] - 4;\n
        v11[1252] = v11[1252] + 1;\n
        return 0;\n
    }\n
    return 2;\n
}\n
", "4202851:cgc_jit_op": "typedef struct struct_0 {\n
    char padding_0[5000];\n
    struct struct_1 *field_1388;\n
    unsigned int field_138c;\n
    unsigned int field_1390;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_jit_op(struct_0 *v0, char a0)\n
{\n
    struct_0 *v1;  // ecx\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // edx\n
    unsigned int v4;  // edi\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // edi\n
    unsigned int v9;  // edi\n
    unsigned int v10;  // esi\n
    unsigned int v11;  // esi\n
    char *v12;  // esi\n
    char *v13;  // esi\n
    char *v14;  // esi\n
    char *v15;  // esi\n
    char *v16;  // esi\n
    char *v17;  // edx\n
    unsigned int v18;  // esi\n
    char *v19;  // eax\n
    char *v20;  // edx\n
    char *v21;  // edx\n
    char *v22;  // eax\n
    char *v23;  // eax\n
    char *v24;  // eax\n
    char *v25;  // eax\n
    char *v26;  // esi\n
    char *v27;  // esi\n
    char *v28;  // esi\n
    char *v29;  // esi\n
    char *v30;  // esi\n
    char *v31;  // esi\n
    char *v32;  // eax\n
    char *v33;  // eax\n
    char *v34;  // eax\n
    char *v35;  // eax\n
    char *v36;  // eax\n
    char *v37;  // eax\n
    char *v38;  // eax\n
    char *v39;  // eax\n
    char *v40;  // eax\n
    char *v41;  // eax\n
    char *v42;  // eax\n
    char *v43;  // eax\n
    char *v44;  // eax\n
    char *v45;  // esi\n
    char *v46;  // esi\n
    char *v47;  // esi\n
    char *v48;  // esi\n
    char *v49;  // esi\n
    char *v50;  // esi\n
    char *v51;  // esi\n
    char *v52;  // esi\n
    char *v53;  // esi\n
    char *v54;  // esi\n
    char *v55;  // esi\n
    char *v56;  // esi\n
    char *v57;  // esi\n
    char *v58;  // esi\n
    char *v59;  // eax\n
    struct struct_1 **v60;  // ecx\n
    char *v61;  // edx\n
    char *v62;  // edx\n
    char *v63;  // edx\n
    char *v64;  // edx\n
    char *v65;  // edx\n
    char *v66;  // edx\n
    char *v67;  // edx\n
    char *v68;  // edx\n
    char *v69;  // edx\n
    char *v70;  // edx\n
    char *v71;  // edx\n
    char *v72;  // eax\n
    char *v73;  // eax\n
    char *v74;  // eax\n
    char *v75;  // eax\n
    char *v76;  // eax\n
    char *v77;  // eax\n
    char *v78;  // eax\n
    char *v79;  // esi\n
    char *v81;  // eax\n
    char *v82;  // eax\n
    char *v83;  // eax\n
\n
    v1 = v0;\n
    v2 = a0;\n
    v3 = v1->field_138c;\n
    if (v2 <= 93)\n
    {\n
        switch (v2)\n
        {\n
        case 42:\n
            v5 = &v1->padding_0[4000];\n
            if (v3 < v5)\n
                return 2;\n
            v13 = v1->field_1388;\n
            if (v13 + 10 >= v5)\n
                return 2;\n
            if (v1->field_1390 < 2)\n
                return 3;\n
            v1->field_1388 = &v13[1];\n
            *(v13) = 15;\n
            v43 = v1->field_1388;\n
            v1->field_1388 = &v43[1];\n
            *(v43) = 175;\n
            v44 = v1->field_1388;\n
            v1->field_1388 = &v44[1];\n
            *(v44) = 199;\n
            break;\n
            break;\n
        case 43:\n
            v6 = &v1->padding_0[4000];\n
            if (v3 < v6)\n
                return 2;\n
            v14 = v1->field_1388;\n
            if (v14 + 9 >= v6)\n
                return 2;\n
            if (v1->field_1390 < 2)\n
                return 3;\n
            v1->field_1388 = &v14[1];\n
            *(v14) = 1;\n
            goto LABEL_40236f;\n
        case 44: case 46:\n
            v19 = v1->field_1388;\n
            v1->field_1388 = &v19[1];\n
            *(v19) = 144;\n
            goto LABEL_402714;\n
        case 45:\n
            v7 = &v1->padding_0[4000];\n
            if (v3 < v7)\n
                return 2;\n
            v15 = v1->field_1388;\n
            if (v15 + 9 >= v7)\n
                return 2;\n
            if (v1->field_1390 < 2)\n
                return 3;\n
            v1->field_1388 = &v15[1];\n
            *(v15) = 41;\n
            goto LABEL_40236f;\n
        case 47:\n
            v9 = &v1->padding_0[4000];\n
            if (v3 < v9)\n
                return 2;\n
            v16 = v1->field_1388;\n
            if (v16 + 22 >= v9)\n
                return 2;\n
            if (v1->field_1390 < 2)\n
                return 3;\n
            v1->field_1388 = &v16[1];\n
            *(v16) = 131;\n
            v45 = v1->field_1388;\n
            v1->field_1388 = &v45[1];\n
            *(v45) = 255;\n
            v46 = v1->field_1388;\n
            v1->field_1388 = &v46[1];\n
            *(v46) = 0;\n
            v47 = v1->field_1388;\n
            v1->field_1388 = &v47[1];\n
            *(v47) = 117;\n
            v48 = v1->field_1388;\n
            v1->field_1388 = &v48[1];\n
            *(v48) = 7;\n
            v49 = v1->field_1388;\n
            v1->field_1388 = &v49[1];\n
            *(v49) = 49;\n
            v50 = v1->field_1388;\n
            v1->field_1388 = &v50[1];\n
            *(v50) = 192;\n
            v51 = v1->field_1388;\n
            v1->field_1388 = &v51[1];\n
            *(v51) = 64;\n
            v52 = v1->field_1388;\n
            v1->field_1388 = &v52[1];\n
            *(v52) = 137;\n
            v53 = v1->field_1388;\n
            v1->field_1388 = &v53[1];\n
            *(v53) = 195;\n
            v54 = v1->field_1388;\n
            v1->field_1388 = &v54[1];\n
            *(v54) = 205;\n
            v55 = v1->field_1388;\n
            v1->field_1388 = &v55[1];\n
            *(v55) = 128;\n
            v56 = v1->field_1388;\n
            v1->field_1388 = &v56[1];\n
            *(v56) = 153;\n
            v57 = v1->field_1388;\n
            v1->field_1388 = &v57[1];\n
            *(v57) = 247;\n
            v58 = v1->field_1388;\n
            v1->field_1388 = &v58[1];\n
            *(v58) = 255;\n
            break;\n
            break;\n
        default:\n
            if (v2 == 33)\n
            {\n
                v10 = &v1->padding_0[4000];\n
                if (v3 < v10)\n
                    return 2;\n
                v17 = v1->field_1388;\n
                if (v17 + 2 >= v10)\n
                    return 2;\n
                if (v1->field_1390 > 0)\n
                {\n
                    v1->field_1388 = &v17[1];\n
                    *(v17) = 247;\n
                    v59 = v1->field_1388;\n
                    v1->field_1388 = &v59[1];\n
                    *(v59) = 208;\n
                    goto LABEL_402714;\n
                }\n
            }\n
        }\n
LABEL_40236f:\n
        v74 = v1->field_1388;\n
        v1->field_1388 = &v74[1];\n
        *(v74) = 248;\n
        goto LABEL_402685;\n
    }\n
    else if (v2 == 94)\n
    {\n
        v4 = &v1->padding_0[4000];\n
        if (v3 < v4)\n
            return 2;\n
        v12 = v1->field_1388;\n
        if (v12 + 29 >= v4)\n
            return 2;\n
        if (v1->field_1390 < 2)\n
            return 3;\n
        v1->field_1388 = &v12[1];\n
        *(v12) = 87;\n
        v22 = v1->field_1388;\n
        v1->field_1388 = &v22[1];\n
        *(v22) = 49;\n
        v23 = v1->field_1388;\n
        v1->field_1388 = &v23[1];\n
        *(v23) = 201;\n
        v24 = v1->field_1388;\n
        v1->field_1388 = &v24[1];\n
        *(v24) = 65;\n
        v25 = v1->field_1388;\n
        v1->field_1388 = &v25[1];\n
        *(v25) = 131;\n
        v26 = v1->field_1388;\n
        v1->field_1388 = &v26[1];\n
        *(v26) = 255;\n
        v27 = v1->field_1388;\n
        v1->field_1388 = &v27[1];\n
        *(v27) = 0;\n
        v28 = v1->field_1388;\n
        v1->field_1388 = &v28[1];\n
        *(v28) = 124;\n
        v29 = v1->field_1388;\n
        v1->field_1388 = &v29[1];\n
        *(v29) = 10;\n
        v30 = v1->field_1388;\n
        v1->field_1388 = &v30[1];\n
        *(v30) = 133;\n
        v31 = v1->field_1388;\n
        v1->field_1388 = &v31[1];\n
        *(v31) = 255;\n
        v32 = v1->field_1388;\n
        v1->field_1388 = &v32[1];\n
        *(v32) = 116;\n
        v33 = v1->field_1388;\n
        v1->field_1388 = &v33[1];\n
        *(v33) = 7;\n
        v34 = v1->field_1388;\n
        v1->field_1388 = &v34[1];\n
        *(v34) = 15;\n
        v35 = v1->field_1388;\n
        v1->field_1388 = &v35[1];\n
        *(v35) = 175;\n
        v36 = v1->field_1388;\n
        v1->field_1388 = &v36[1];\n
        *(v36) = 200;\n
        v37 = v1->field_1388;\n
        v1->field_1388 = &v37[1];\n
        *(v37) = 79;\n
        v38 = v1->field_1388;\n
        v1->field_1388 = &v38[1];\n
        *(v38) = 235;\n
        v39 = v1->field_1388;\n
        v1->field_1388 = &v39[1];\n
        *(v39) = 246;\n
        v40 = v1->field_1388;\n
        v1->field_1388 = &v40[1];\n
        *(v40) = 73;\n
        v41 = v1->field_1388;\n
        v1->field_1388 = &v41[1];\n
        *(v41) = 95;\n
        v42 = v1->field_1388;\n
        v1->field_1388 = &v42[1];\n
        *(v42) = 145;\n
LABEL_402685:\n
        v76 = v1->field_1388;\n
        v1->field_1388 = &v76[1];\n
        *(v76) = 185;\n
        v77 = v1->field_1388;\n
        v1->field_1388 = &v77[1];\n
        *(v77) = v3;\n
        v78 = v1->field_1388;\n
        v1->field_1388 = &v78[1];\n
        *(v78) = v3;\n
        v79 = v1->field_1388;\n
        v1->field_1388 = &v79[1];\n
        *(v79) = v3 / 0x10000;\n
        v81 = v1->field_1388;\n
        v1->field_1388 = &v81[1];\n
        *(v81) = v3 / 0x1000000;\n
        v82 = v1->field_1388;\n
        v1->field_1388 = &v82[1];\n
        *(v82) = 139;\n
        v83 = v1->field_1388;\n
        v1->field_1388 = &v83[1];\n
        *(v83) = 57;\n
        v1->field_138c = v1->field_138c + 4;\n
        v1->field_1390 = v1->field_1390 - 1;\n
        goto LABEL_402714;\n
    }\n
    else if (v2 == 124)\n
    {\n
        v11 = &v1->padding_0[4000];\n
        if (v3 < v11)\n
            return 2;\n
        v20 = v1->field_1388;\n
        if (v20 + 14 >= v11)\n
            return 2;\n
        if (v1->field_1390 <= 0)\n
            return 3;\n
        v60 = &v1->field_1388;\n
        *(v60) = &v20[1];\n
        *(v20) = 82;\n
        v61 = *(v60);\n
        *(v60) = &v61[1];\n
        *(v61) = 137;\n
        v62 = *(v60);\n
        *(v60) = &v62[1];\n
        *(v62) = 193;\n
        v63 = *(v60);\n
        *(v60) = &v63[1];\n
        *(v63) = 193;\n
        v64 = *(v60);\n
        *(v60) = &v64[1];\n
        *(v64) = 249;\n
        v65 = *(v60);\n
        *(v60) = &v65[1];\n
        *(v65) = 31;\n
        v66 = *(v60);\n
        *(v60) = &v66[1];\n
        *(v66) = 137;\n
        v67 = *(v60);\n
        *(v60) = &v67[1];\n
        *(v67) = 202;\n
        v68 = *(v60);\n
        *(v60) = &v68[1];\n
        *(v68) = 49;\n
        v69 = *(v60);\n
        *(v60) = &v69[1];\n
        *(v69) = 194;\n
        v70 = *(v60);\n
        *(v60) = &v70[1];\n
        *(v70) = 41;\n
        v71 = *(v60);\n
        *(v60) = &v71[1];\n
        *(v71) = 202;\n
        v72 = *(v60);\n
        *(v60) = &v72[1];\n
        *(v72) = 146;\n
        v73 = *(v60);\n
        *(v60) = &v73[1];\n
        *(v73) = 90;\n
LABEL_402714:\n
        return 0;\n
    }\n
    else if (v2 == 126)\n
    {\n
        v18 = &v1->padding_0[4000];\n
        if (v3 < v18)\n
            return 2;\n
        v21 = v1->field_1388;\n
        if (v21 + 2 >= v18)\n
            return 2;\n
        if (v1->field_1390 > 0)\n
        {\n
            v1->field_1388 = &v21[1];\n
            *(v21) = 247;\n
            v75 = v1->field_1388;\n
            v1->field_1388 = &v75[1];\n
            *(v75) = 216;\n
            goto LABEL_402714;\n
        }\n
    }\n
}\n
", "4204514:main": "typedef struct struct_1 {\n
    char padding_0[5000];\n
    unsigned int field_1388;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_-1;\n
    char field_0;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4996];\n
    unsigned int field_1388;\n
} struct_0;\n
\n
extern unsigned int g_output_buf;\n
\n
int main()\n
{\n
    unsigned int v0;  // [bp-0x2058]\n
    int tmp_7;  // tmp #7\n
    char v1;  // [bp-0x2044]\n
    unsigned int v2;  // [bp-0x2040]\n
    unsigned int v3;  // [bp-0x203c]\n
    unsigned int v4;  // [bp-0x2038]\n
    char v5;  // [bp-0x2034]\n
    unsigned int v6;  // [bp-0x2030]\n
    unsigned int v7;  // [bp-0x202c]\n
    char *v8;  // [bp-0x2028]\n
    unsigned int v9;  // [bp-0x2024]\n
    unsigned int v10;  // [bp-0x2020]\n
    unsigned int v11;  // [bp-0x201c]\n
    unsigned int v12;  // [bp-0x2018]\n
    unsigned short v13;  // [bp-0x2014]\n
    char v14;  // [bp-0x2010]\n
    char v15;  // [bp-0x200f]\n
    char v16;  // [bp-0x200e]\n
    void* v18;  // esi, Other Possible Types: unsigned int\n
    unsigned int v19;  // eax\n
    unsigned int v20[1253];  // eax\n
    char *v22;  // esi\n
    struct_2 *v23;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // esi\n
    struct_1 *v27;  // ecx\n
    unsigned int v28;  // eax\n
    struct_0 *v29;  // eax\n
\n
    g_output_buf = cgc_malloc(0x10000);\n
    if (!g_output_buf)\n
    {\n
        cgc_fdprintf(1, \"Failed to allocate output buffer.\\n
\");\n
        return -1;\n
    }\n
    if (cgc_allocate(5012, 1))\n
    {\n
        v18 = -1;\n
        v19 = \"Failed to allocate JIT struct.\\n
\";\n
    }\n
    else\n
    {\n
        v9 = \"> \";\n
        cgc_fdprintf(1, \"> \");\n
        if (cgc_readuntil(0, &v14, 0x2000, 10) <= 0)\n
        {\n
LABEL_402aa8:\n
            return 0;\n
        }\n
        v8 = \"quit\";\n
        v6 = \"QUIT\\n
\";\n
        v7 = \"%d (0x%08x)\\n
\";\n
        do\n
        {\n
            if (!cgc_strcmp(&v14, v8))\n
            {\n
                v18 = 0;\n
                v19 = v6;\n
                goto LABEL_402836;\n
            }\n
            if (!cgc_strlen(&v14))\n
            {\n
LABEL_402a09:\n
                v0 = v7;\n
            }\n
            else\n
            {\n
                v20 = *(&v1);\n
                v20[1250] = v20;\n
                v20[1251] = &v20[1250];\n
                v20[1252] = 0;\n
                v13 = 49801;\n
                v12 = 0xc0315100;\n
                v11 = 65516;\n
                v10 = 2179763029;\n
                cgc_memcpy(v20, &v10, 14);\n
                *((*(&v1) + 5000)) = *((*(&v1) + 5000)) + 14;\n
                if (!v14)\n
                {\n
                    v26 = 0;\n
                }\n
                else\n
                {\n
                    v26 = 0;\n
                    v23 = &v14;\n
                    while (true)\n
                    {\n
                        v2 = v26;\n
                        v23 = &v15;\n
                        while (true)\n
                        {\n
                            v22 = &v14;\n
                            if (v22 >= &(&v14)[cgc_strlen(&v14)])\n
                            {\n
LABEL_402a03:\n
                                v26 = v2;\n
                                goto LABEL_402a0f;\n
                            }\n
                            if (!cgc_isspace(*(v22)))\n
                                break;\n
                            tmp_7 = *(v23);\n
                            v23 = &v16;\n
                            if (!tmp_7)\n
                                goto LABEL_402a03;\n
                        }\n
                        if (v22 != v3)\n
                        {\n
                            v26 = cgc_jit_int(*(&v1), cgc_strtol(v22, &v3, 0));\n
                            v23 = v3;\n
                            goto LABEL_4029f7;\n
                        }\n
                        v25 = *(v23);\n
                        if (!cgc_isspace(v25))\n
                            break;\n
LABEL_4029e1:\n
                        v26 = cgc_jit_op(*(&v1), *((v23 - 1)));\n
LABEL_4029f7:\n
                        if (!*(v23))\n
                            goto LABEL_402a0f;\n
                    }\n
                    if (!v25)\n
                        goto LABEL_4029e1;\n
                    v26 = 1;\n
                }\n
LABEL_402a0f:\n
                v5 = 195;\n
                v4 = 1575324505;\n
                v27 = *(&v1);\n
                v28 = v27->field_1388;\n
                if (v28 + 5 < &v27->padding_0[4000])\n
                {\n
                    cgc_memcpy(v28, &v4, 5);\n
                    *((*(&v1) + 5000)) = *((*(&v1) + 5000)) + 5;\n
                    v29();\n
                    if (!v26)\n
                        goto LABEL_402a09;\n
                }\n
                v0 = \"Error!\\n
\";\n
                continue;\n
            }\n
            cgc_fdprintf(1, v0);\n
            cgc_fdprintf(1, v9);\n
        } while (cgc_readuntil(0, &v14, 0x2000, 10) > 0);\n
        goto LABEL_402aa8;\n
    }\n
LABEL_402836:\n
    cgc_fdprintf(1, v19);\n
    return v18;\n
}\n
", "4205252:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_allocate": null, "5242896:cgc_deallocate": null, "5242900:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}