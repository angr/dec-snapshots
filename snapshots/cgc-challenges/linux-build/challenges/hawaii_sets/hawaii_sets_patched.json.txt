{"4198400:_init": "extern struct_0 *g_407118;\n
\n
int _init()\n
{\n
    if (g_407118)\n
    {\n
        g_407118();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4198480:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198496:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198512:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4198560:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198576:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4198592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198608:sub_4010d0": "int sub_4010d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198614:sub_4010d6": null, "4198624:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198667:sub_40110b": null, "4198668:sub_40110c": "int sub_40110c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198672:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198676:sub_401114": null, "4198688:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 24575;\n
    v6 = v5 + 14;\n
    v7 = v5 + 14;\n
    if (v7 == v6)\n
        return v5 + 14;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198739:sub_401153": "int sub_401153()\n
{\n
}\n
", "4198745:sub_401159": "int sub_401159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198752:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 24511;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 14;\n
    v9 = (v6 + 14 - (v6 + 14) >> 31) + (14 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198823:sub_4011a7": "int sub_4011a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198832:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_407114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_407114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010d0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198907:sub_4011fb": "int sub_4011fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198912:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198921:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198925:sub_40120d": null, "4198928:cgc_floor": null, "4199092:sub_4012b4": null, "4199104:cgc_round_away_from_zero": null, "4199258:sub_40135a": null, "4199264:cgc_round": null, "4199408:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4199500:sub_40144c": null, "4199504:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4199713:sub_401521": null, "4199728:cgc_float_to_str": null, "4200586:sub_40188a": null, "4200592:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v11, struct struct_1 **a0)\n
{\n
    struct_0 *v0;  // [bp-0x84]\n
    unsigned int v1;  // [bp-0x74]\n
    unsigned int v2;  // [bp-0x70]\n
    char *v3;  // [bp-0x6c], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x68], Other Possible Types: unsigned int\n
    unsigned long v5;  // [bp-0x64]\n
    struct_0 *v6;  // [bp-0x58], Other Possible Types: unsigned int\n
    char *v7;  // [bp-0x54]\n
    char v8;  // [bp-0x50]\n
    void* v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // [bp-0xc]\n
    struct struct_1 **v12;  // eax\n
    unsigned int v15;  // ftop\n
    unsigned int v16;  // ftop\n
    unsigned int v17;  // ftop\n
    struct struct_1 **v18;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v9 = 0;\n
    if (!v11)\n
    {\n
        v10 = -1;\n
        return v10;\n
    }\n
    while (true)\n
    {\n
        if (!*(v11))\n
        {\n
            v10 = v9;\n
            return v10;\n
        }\n
        if (*(v11) != 64)\n
        {\n
            cgc_putc(*(v11));\n
            v11 += 1;\n
            v9 += 1;\n
        }\n
        else\n
        {\n
            v11 += 1;\n
            v1 = *(v11);\n
            if (!v1)\n
            {\n
                v10 = -1;\n
                return v10;\n
            }\n
            if (v1 == 64)\n
            {\n
                cgc_putc(64);\n
            }\n
            else if (v1 == 100)\n
            {\n
                v12 = a0;\n
                a0 = v12 + 1;\n
                v7 = &*(v12)->field_0;\n
                cgc_int_to_str(v7, &v8);\n
                for (v6 = &v8; *(v6); v6 += 1)\n
                {\n
                    cgc_putc(*(v6));\n
                    v9 += 1;\n
                }\n
            }\n
            else if (v1 == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t23,0] = t26\n
                [D] PutI(136:I8x8)[t23,0] = 0x01\n
                v5 = ([D] GetI(136:I8x8)[t38,0] ? [D] GetI(72:F64x8)[t38,0] : nan);\n
                [D] PutI(136:I8x8)[t38,0] = 0x00\n
                v15 = ftop<4> - 1 + 1;\n
                v16 = v15 - 1;\n
                [D] PutI(72:F64x8)[t47,0] = t50\n
                [D] PutI(136:I8x8)[t47,0] = 0x01\n
                v0 = &v8;\n
                [D] PutI(136:I8x8)[t66,0] = 0x00\n
                v17 = v16 + 1;\n
                cgc_float_to_str();\n
                for (v4 = &v8; v4->field_0; v4 += 1)\n
                {\n
                    cgc_putc(v4->field_0);\n
                    v9 += 1;\n
                }\n
            }\n
            else if (v1 == 115)\n
            {\n
                v18 = a0;\n
                a0 = v18 + 1;\n
                for (v3 = &*(v18)->field_0; *(v3); v3 += 1)\n
                {\n
                    cgc_putc(*(v3));\n
                    v9 += 1;\n
                }\n
            }\n
            else\n
            {\n
                v10 = -1;\n
                return v10;\n
            }\n
            v11 += 1;\n
        }\n
    }\n
}\n
", "4201172:sub_401ad4": null, "4201184:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4201242:sub_401b1a": null, "4201248:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v0;\n
}\n
", "4201320:sub_401b68": null, "4201328:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201382:sub_401ba6": null, "4201392:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201446:sub_401be6": null, "4201456:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4201522:sub_401c32": null, "4201536:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4201602:sub_401c82": null, "4201616:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4201670:sub_401cc6": null, "4201680:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4201774:sub_401d2e": null, "4201776:cgc_isnan": null, "4201799:sub_401d47": null, "4201808:cgc_isinf": null, "4201855:sub_401d7f": null, "4201856:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_401fb2:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_401f8b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_401f8b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_401f8b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_401fb2;\n
                if (!v4)\n
                {\n
LABEL_401f07:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_401f8b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_401f07;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_401f8b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4202444:sub_401fcc": null, "4202448:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 9)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4202852:sub_402164": null, "4202864:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!*((a0 + v0)))\n
            break;\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4202970:sub_4021da": null, "4202976:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4203067:sub_40223b": null, "4203072:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4203180:sub_4022ac": null, "4203184:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4203292:sub_40231c": null, "4203296:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4203491:sub_4023e3": null, "4203504:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4203581:sub_40243d": null, "4203584:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            v4[v5] = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4203776:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4203935:sub_40259f": null, "4203936:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4204135:sub_402667": null, "4204144:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v5;\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2, cgc_strlen(v5));\n
}\n
", "4204227:sub_4026c3": null, "4204240:cgc_parse_command_line": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_command_line(unsigned int v5)\n
{\n
    struct struct_0 **v0;  // [bp-0x24]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v5)\n
        return v4;\n
    v0 = &v4;\n
    if (cgc_allocate(12, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_bzero(v4, 12);\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*((v5 + v3)))\n
            v1 = v3 < 0x100;\n
        if (!(v1 & 1))\n
        {\n
            if (v4->field_0)\n
                return v4;\n
LABEL_402986:\n
            cgc_printf(v2 - 4288);\n
            cgc_deallocate(v4);\n
            v4 = 0;\n
            break;\n
        }\n
        if (*((v5 + v3)) == 61)\n
        {\n
LABEL_4027ac:\n
            if (v4->field_0)\n
            {\n
                v4->field_4 = *((v5 + v3));\n
                *((v5 + v3)) = 0;\n
                goto LABEL_402949;\n
            }\n
        }\n
        else\n
        {\n
            if (*((v5 + v3)) == 64)\n
                goto LABEL_4027ac;\n
            if (*((v5 + v3)) == 32)\n
            {\n
                if (!v4->field_8)\n
                    *((v5 + v3)) = 0;\n
                goto LABEL_402949;\n
            }\n
            if (cgc_isalnum(*((v5 + v3))))\n
            {\n
                if (!v4->field_0)\n
                {\n
                    v4->field_0 = v5 + v3;\n
                }\n
                else if (!v4->field_8 && v4->field_4)\n
                {\n
                    v4->field_8 = v5 + v3;\n
                }\n
                goto LABEL_402949;\n
            }\n
            if (*((v5 + v3)) != 124 && *((v5 + v3)) != 45 && *((v5 + v3)) != 34 && *((v5 + v3)) != 44 && *((v5 + v3)) != 42 && *((v5 + v3)) != 94 && *((v5 + v3)) != 43 && !(*((v5 + v3)) == 126))\n
                goto LABEL_402986;\n
            if (!v4->field_0)\n
            {\n
LABEL_40292b:\n
                goto LABEL_402986;\n
            }\n
            else\n
            {\n
                if (!v4->field_4)\n
                    goto LABEL_40292b;\n
                if (!v4->field_8)\n
                    v4->field_8 = v5 + v3;\n
LABEL_402949:\n
                v3 += 1;\n
            }\n
        }\n
    }\n
    return v4;\n
}\n
", "4204989:sub_4029bd": null, "4204992:cgc_print_sets": "typedef struct struct_0 {\n
    char padding_0[60];\n
    unsigned int field_3c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern struct_1 *cgc_root;\n
\n
int cgc_print_sets()\n
{\n
    struct struct_1 **v0;  // [bp-0x1c]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    struct struct_1 **v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_1 **v5;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = cgc_root;\n
    v3 = &cgc_root->field_0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (!v3)\n
            return v5;\n
        v0 = v3;\n
        cgc_print_set();\n
        v3 = *(v3);\n
        v5 = v3;\n
        if (v5 == v1->field_3c)\n
            return v3;\n
    }\n
}\n
", "4205096:sub_402a28": null, "4205104:cgc_copymem": "int cgc_copymem(char *v1, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a2; v0 += 1)\n
    {\n
        v1[a1] = *((a0 + v0));\n
        a1 += 1;\n
    }\n
    return a1;\n
}\n
", "4205188:sub_402a84": null, "4205200:cgc_print_subsets": "typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_subsets(struct_1 *v22, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xcdc]\n
    char *v1;  // [bp-0xcd8]\n
    struct struct_0 **v2;  // [bp-0xcd4]\n
    unsigned int v3;  // [bp-0xcd0]\n
    struct struct_0 **v4;  // [bp-0xccc]\n
    unsigned int v5;  // [bp-0xcc8]\n
    unsigned int v6;  // [bp-0xcc4]\n
    struct struct_0 **v7;  // [bp-0xcc0]\n
    unsigned int v8;  // [bp-0xcbc]\n
    struct struct_0 **v9;  // [bp-0xcb8]\n
    struct struct_0 **v10;  // [bp-0xcb4]\n
    unsigned int v11;  // [bp-0xcb0]\n
    struct struct_0 **v12;  // [bp-0xcac]\n
    unsigned int v13;  // [bp-0xca8]\n
    unsigned int v14;  // [bp-0xca4]\n
    void* v15;  // [bp-0xca0], Other Possible Types: unsigned int\n
    struct struct_0 **v16;  // [bp-0xc9c], Other Possible Types: unsigned int\n
    struct struct_0 **v17;  // [bp-0xc98]\n
    char v18;  // [bp-0xc97]\n
    void* v19;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v20;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v23;  // eax\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
    unsigned int v26;  // eax\n
    unsigned int v27;  // eax\n
    unsigned int v28;  // eax\n
\n
    v13 = &_GLOBAL_OFFSET_TABLE_;\n
    v20 = 0;\n
    v19 = 0;\n
    v16 = 0;\n
    v15 = 0;\n
    if (a1 > 10)\n
    {\n
        v21 = 0;\n
        return v21;\n
    }\n
    else if (v22)\n
    {\n
        cgc_bzero(&v17, 3200);\n
        if (a0)\n
        {\n
            v11 = &v22->padding_0[8];\n
            v12 = v16;\n
            v16 = cgc_copymem(&v17, v11, v12, cgc_strlen(&v22->padding_0[8]));\n
            v16 = cgc_copymem(&v17, v13 - 4259, v16, 3);\n
        }\n
        v23 = v16;\n
        v16 = v23 + 1;\n
        *(&v17 + v23) = 124;\n
        v15 = 0;\n
        while (true)\n
        {\n
            if (v15 >= v22->field_18)\n
            {\n
                if (v16 < 3198)\n
                {\n
                    if (*(&v16 + v16) != 44)\n
                    {\n
                        *(&v17 + v16) = 124;\n
                        (&v18)[v16] = 0;\n
                    }\n
                    else\n
                    {\n
                        *(&v16 + v16) = 124;\n
                        *(&v17 + v16) = 0;\n
                    }\n
                }\n
                if (cgc_allocate(cgc_strlen(&v17) + 1, 0))\n
                {\n
                    v20 = 0;\n
                    break;\n
                }\n
                else\n
                {\n
                    v0 = v20;\n
                    cgc_bzero(v0, cgc_strlen(&v17) + 1);\n
                    v1 = v20;\n
                    v2 = &v17;\n
                    cgc_copymem(v1, v2, 0, cgc_strlen(&v17));\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                if (*((*((28 + &v22->padding_0[0] + 0x4 * v15)) + 4)) != 1)\n
                {\n
                    v14 = cgc_retrieve_set();\n
                    v19 = cgc_print_subsets(v14, 0, a1 + 1);\n
                    if (!v19)\n
                    {\n
                        v20 = 0;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v7 = v16;\n
                        if (v7 + cgc_strlen(v19) < 3199)\n
                        {\n
                            v3 = v19;\n
                            v4 = v16;\n
                            v16 = cgc_copymem(&v17, v3, v4, cgc_strlen(v19));\n
                            v5 = v19;\n
                            v26 = cgc_strlen(v19) + 1;\n
                            cgc_deallocate(v5);\n
                        }\n
                        else\n
                        {\n
                            v6 = v19;\n
                            v28 = cgc_strlen(v19) + 1;\n
                            cgc_deallocate(v6);\n
                            break;\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    if (v16 < 3199)\n
                    {\n
                        v24 = v16;\n
                        v16 = v24 + 1;\n
                        *(&v17 + v24) = 34;\n
                    }\n
                    v19 = *(*((28 + &v22->padding_0[0] + 0x4 * v15)));\n
                    v10 = v16;\n
                    if (v10 + cgc_strlen(v19) >= 3199)\n
                        break;\n
                    v8 = v19;\n
                    v9 = v16;\n
                    v16 = cgc_copymem(&v17, v8, v9, cgc_strlen(v19));\n
                    if (v16 < 3199)\n
                    {\n
                        v25 = v16;\n
                        v16 = v25 + 1;\n
                        *(&v17 + v25) = 34;\n
                    }\n
                }\n
                if (v16 < 3199)\n
                {\n
                    v27 = v16;\n
                    v16 = v27 + 1;\n
                    *(&v17 + v27) = 44;\n
                }\n
                v15 += 1;\n
            }\n
        }\n
        v21 = v20;\n
        return v21;\n
    }\n
    else\n
    {\n
        v21 = 0;\n
        return v21;\n
    }\n
}\n
", "4206589:sub_402ffd": null, "4206592:cgc_retrieve_set": "typedef struct struct_1 {\n
    char padding_0[60];\n
    struct struct_0 *field_3c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_retrieve_set(char *v2)\n
{\n
    struct_1 *v0;  // [bp-0x10]\n
    struct struct_0 **v1;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v1 = 0;\n
    if (!v2)\n
        return v1;\n
    v1 = v0->field_3c;\n
    while (true)\n
    {\n
        if (!v1)\n
        {\n
            return v1;\n
        }\n
        else if (!cgc_strcmp(v2, v1 + 8))\n
        {\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 = *(v1);\n
            if (v1 == v0->field_3c)\n
            {\n
                v1 = 0;\n
                return v1;\n
            }\n
        }\n
    }\n
}\n
", "4206756:sub_4030a4": null, "4206768:cgc_memcmp": "int cgc_memcmp(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (v0 >= a1)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (*((v2 + v0)) != *((a0 + v0)))\n
        {\n
            v1 = *((v2 + v0)) - *((a0 + v0));\n
            return v1;\n
        }\n
        v0 += 1;\n
    }\n
}\n
", "4206889:sub_403129": null, "4206896:cgc_exec_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_exec_command(char *v5)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14]\n
    char *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!v5)\n
        return v5;\n
    if (!cgc_strcmp(v5, v1 - 4255))\n
        cgc__terminate();\n
    if (!cgc_strcmp(v5, v1 - 4252))\n
    {\n
        cgc_printf(v1 - 4249);\n
        cgc_printf(v1 - 4209);\n
        cgc_printf(v1 - 4185);\n
        cgc_printf(v1 - 4157);\n
        cgc_printf(v1 - 4124);\n
        cgc_printf(v1 - 4085);\n
        cgc_printf(v1 - 4040);\n
        cgc_printf(v1 - 4019);\n
        cgc_printf(v1 - 3997);\n
        v6 = cgc_printf(v1 - 3962);\n
    }\n
    else if (cgc_memcmp(v5, v1 - 3926, 3))\n
    {\n
        if (cgc_strcmp(v5, v1 - 3896))\n
        {\n
            v6 = cgc_printf(v1 - 3893);\n
            return v6;\n
        }\n
        v6 = cgc_print_sets();\n
    }\n
    else\n
    {\n
        for (v5 += 3; *(v5) == 32; v5 += 1);\n
        for (; cgc_isalnum(*((v5 + v3))); v3 += 1);\n
        *((v5 + v3)) = 0;\n
        v2 = cgc_retrieve_set(v5);\n
        if (!v2)\n
        {\n
            v6 = cgc_printf(v1 - 3922);\n
            return v6;\n
        }\n
        v6 = cgc_print_subsets(v2, 1, 0);\n
        v4 = v6;\n
        if (v4)\n
        {\n
            cgc_printf(v1 - 3869);\n
            v0 = v4;\n
            v7 = cgc_strlen(v4) + 1;\n
            v6 = cgc_deallocate(v0);\n
        }\n
    }\n
    return v6;\n
}\n
", "4207625:sub_403409": null, "4207632:cgc_add_set": "typedef struct struct_2 {\n
    char padding_0[60];\n
    struct struct_0 *field_3c;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    struct struct_1 *field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_set(struct_0 *v1)\n
{\n
    struct_2 *v0;  // [bp-0x8]\n
    struct_2 *v2;  // eax\n
    unsigned int v3;  // eax\n
    struct_2 *v4;  // eax\n
\n
    v0 = v2;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v1)\n
        return v1;\n
    if (!v0->field_3c)\n
    {\n
        v0->field_3c = v1;\n
        v1->field_0 = v1;\n
        v1->field_4 = &v1->field_0;\n
    }\n
    v4 = v0;\n
    v1->field_0 = v4->field_3c;\n
    v1->field_4 = v4->field_3c->field_4;\n
    v4->field_3c->field_4->field_0 = v1;\n
    v3 = v4->field_3c;\n
    *((v3 + 4)) = v1;\n
    return v3;\n
}\n
", "4207774:sub_40349e": null, "4207776:cgc_parse_set": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_set()\n
{\n
    unsigned int v5;  // [bp-0x12c]\n
    void* v7;  // [bp-0x28]\n
    void* v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    char *v10;  // [bp-0x1c]\n
    char *v11;  // [bp-0x18]\n
    char *v12;  // [bp-0x14]\n
    void* v13;  // [bp-0x10]\n
    char *v15;  // [bp+0x4]\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v13 = 0;\n
    v12 = 0;\n
    v11 = 0;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    if (!v15)\n
        goto LABEL_0x403e2e;\n
    if (cgc_allocate(88, 0))\n
    {\n
        v13 = 0;\n
    }\n
    else\n
    {\n
        cgc_bzero(v13, 88);\n
        v12 = v15;\n
    }\n
}\n
", "4210269:sub_403e5d": null, "4210272:cgc_symmetric_difference": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_symmetric_difference(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    if (!(v6 && a0))\n
        return v5;\n
    v0 = a0;\n
    v4 = cgc_set_difference(v6);\n
    if (!v4)\n
        return v5;\n
    v0 = v6;\n
    v3 = cgc_set_difference(a0);\n
    if (!v3)\n
    {\n
        cgc_free_set_array();\n
        v4 = 0;\n
        return v5;\n
    }\n
    v0 = v3;\n
    v5 = cgc_unionset(v4);\n
    cgc_free_set_array(v4);\n
    cgc_free_set_array();\n
    return v5;\n
}\n
", "4210513:sub_403f51": null, "4210528:cgc_set_difference": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_set_difference(struct_0 *v6, unsigned int a0)\n
{\n
    struct_1 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!(v6 && a0))\n
        return v5;\n
    v0 = &v5;\n
    if (cgc_allocate(88, 0))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_bzero(v5, 88);\n
    while (true)\n
    {\n
        if (v4 >= v6->field_18)\n
            return v5;\n
        v3 = cgc_element_in_set(a0);\n
        if (v3 == -1)\n
        {\n
            cgc_free_set_array();\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (!v3)\n
        {\n
            v1 = v5;\n
            cgc_copy_element();\n
            if (cgc_add_element_to_set(v1))\n
            {\n
                cgc_free_set_array();\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        v4 += 1;\n
    }\n
}\n
", "4210882:sub_4040c2": null, "4210896:cgc_unionset": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_unionset(struct_0 *v7, struct_0 *a0)\n
{\n
    struct_1 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    void* v4;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v3 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    if (!(v7 && a0))\n
        return v6;\n
    v0 = &v6;\n
    if (cgc_allocate(88, 0))\n
    {\n
        cgc_printf(v3 - 3446);\n
        v6 = 0;\n
        return v6;\n
    }\n
    cgc_bzero(v6, 88);\n
    while (true)\n
    {\n
        if (v5 >= v7->field_18)\n
        {\n
            v5 = 0;\n
            while (true)\n
            {\n
                if (v5 >= a0->field_18)\n
                    return v6;\n
                v4 = cgc_element_in_set(v6);\n
                if (v4 == -1)\n
                {\n
                    cgc_printf(v3 - 3381);\n
                    cgc_free_set_array();\n
                    v6 = 0;\n
                    return v6;\n
                }\n
                if (!v4)\n
                {\n
                    v1 = v6;\n
                    cgc_copy_element();\n
                    if (cgc_add_element_to_set(v1))\n
                    {\n
                        cgc_printf(v3 - 3358);\n
                        cgc_free_set_array();\n
                        v6 = 0;\n
                        return v6;\n
                    }\n
                }\n
                v5 += 1;\n
            }\n
        }\n
        else\n
        {\n
            v2 = v6;\n
            cgc_copy_element();\n
            if (cgc_add_element_to_set(v2))\n
            {\n
                cgc_printf(v3 - 3415);\n
                cgc_free_set_array();\n
                v6 = 0;\n
                return v6;\n
            }\n
            v5 += 1;\n
        }\n
    }\n
}\n
", "4211439:sub_4042ef": null, "4211440:cgc_intersect": "typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_intersect(struct_1 *v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!(v6 && a0))\n
        return v5;\n
    v0 = &v5;\n
    if (cgc_allocate(88, 0))\n
    {\n
        cgc_printf(v2 - 3529);\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_bzero(v5, 88);\n
    while (true)\n
    {\n
        if (v4 >= v6->field_18)\n
            return v5;\n
        v3 = cgc_element_in_set(a0);\n
        if (v3 == -1)\n
        {\n
            cgc_printf(v2 - 3500);\n
            cgc_free_set_array();\n
            v5 = 0;\n
            return v5;\n
        }\n
        if (v3 == 1)\n
        {\n
            v1 = v5;\n
            cgc_copy_element();\n
            if (cgc_add_element_to_set(v1))\n
            {\n
                cgc_printf(v2 - 3483);\n
                cgc_free_set_array();\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        v4 += 1;\n
    }\n
}\n
", "4211850:sub_40448a": null, "4211856:cgc_parse_operations": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_operations(unsigned int v11, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    void* v1;  // [bp-0x3c], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x38]\n
    struct_0 *v3;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char v6;  // [bp-0x28]\n
    void* v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v11)\n
    {\n
LABEL_4044f1:\n
    }\n
    else\n
    {\n
        if (!a0)\n
            goto LABEL_4044f1;\n
        while (true)\n
        {\n
            if (!*(a0))\n
            {\n
                if (v5 == 43)\n
                {\n
                    v3 = cgc_unionset(v10, v8);\n
                }\n
                else if (v5 == 94)\n
                {\n
                    v3 = cgc_intersect(v10, v8);\n
                }\n
                else if (v5 == 45)\n
                {\n
                    v3 = cgc_set_difference(v10, v8);\n
                }\n
                else if (v5 == 126)\n
                {\n
                    v3 = cgc_symmetric_difference(v10, v8);\n
                }\n
                else\n
                {\n
                    v3 = cgc_copy_set();\n
                    if (!v3)\n
                    {\n
                        cgc_printf(v0 - 3210);\n
                        break;\n
                    }\n
                }\n
                if (v3)\n
                {\n
                    cgc_strncpy(v3 + 8, v11, 15);\n
                    v1 = 0;\n
                    for (v1 = 0; v1 < *((v3 + 24)); v1 += 1)\n
                    {\n
                        if (!*((*((v3 + (v1 << 2) + 28)) + 4)) && !cgc_strcmp(*(*((v3 + (v1 << 2) + 28))), v3 + 8))\n
                        {\n
                            cgc_printf(v0 - 3195);\n
                            cgc_free_set_array();\n
                            v3 = 0;\n
                            break;\n
                        }\n
                    }\n
                }\n
            }\n
            if (*(a0) == 124)\n
            {\n
                if (!v10)\n
                {\n
                    v10 = cgc_parse_set();\n
                    if (v10)\n
                    {\n
                        for (a0 += 1; *(a0) != 124; a0 += 1);\n
                        v9 = 1;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v0 - 3319);\n
                        break;\n
                    }\n
                }\n
                else if (v8)\n
                {\n
                    cgc_printf(v0 - 3297);\n
                    break;\n
                }\n
                else\n
                {\n
                    v8 = cgc_parse_set();\n
                    if (v8)\n
                    {\n
                        for (a0 += 1; *(a0) != 124; a0 += 1);\n
                        v7 = 1;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(v0 - 3319);\n
                        break;\n
                    }\n
                }\n
                goto LABEL_404822;\n
            }\n
            if (*(a0) == 94)\n
            {\n
LABEL_404660:\n
                if (!v5)\n
                {\n
                    v5 = *(a0);\n
                    goto LABEL_404822;\n
                }\n
                else\n
                {\n
                    cgc_printf(v0 - 3280);\n
                    break;\n
                }\n
            }\n
            else\n
            {\n
                if (*(a0) == 43)\n
                    goto LABEL_404660;\n
                if (*(a0) == 45)\n
                    goto LABEL_404660;\n
                if (*(a0) == 126)\n
                    goto LABEL_404660;\n
                if (cgc_isalnum(*(a0)))\n
                {\n
                    for (v2 = a0; cgc_isalnum(*(a0)); a0 += 1);\n
                    cgc_bzero(&v6, 16);\n
                    v4 = a0 - v2;\n
                    a0 -= 1;\n
                    if (v4 > 15)\n
                    {\n
                        cgc_printf(v0 - 3654);\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        cgc_memcpy(&v6, v2, v4);\n
                        if (v10)\n
                        {\n
                            if (v8)\n
                            {\n
                                cgc_printf(v0 - 3297);\n
                                break;\n
                            }\n
                            else\n
                            {\n
                                v8 = cgc_retrieve_set(&v6);\n
                                if (!v8)\n
                                {\n
                                    cgc_printf(v0 - 3249);\n
                                    break;\n
                                }\n
                            }\n
                        }\n
                        else\n
                        {\n
                            v10 = cgc_retrieve_set(&v6);\n
                            if (!v10)\n
                            {\n
                                cgc_printf(v0 - 3249);\n
                                break;\n
                            }\n
                        }\n
                    }\n
                }\n
                else if (*(a0) != 32)\n
                {\n
                    cgc_printf(v0 - 3226);\n
                    break;\n
                }\n
                else\n
                {\n
                    a0 += 1;\n
                    continue;\n
                }\n
LABEL_404822:\n
                a0 += 1;\n
            }\n
        }\n
    }\n
    if (v8 && v7)\n
    {\n
        cgc_free_set_array();\n
        v8 = 0;\n
    }\n
    if (!v10)\n
    {\n
        return v3;\n
    }\n
    else if (!v9)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        cgc_free_set_array();\n
        v10 = 0;\n
        return v3;\n
    }\n
}\n
", "4213315:sub_404a43": null, "4213328:cgc_handle_set_var": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    char *field_8;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_handle_set_var(struct_1 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    struct_0 *v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = -1;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v4)\n
    {\n
        return v3;\n
    }\n
    else if (!v4->field_0)\n
    {\n
        return v3;\n
    }\n
    else if (!v4->field_8)\n
    {\n
        return v3;\n
    }\n
    else\n
    {\n
        v2 = cgc_parse_operations(v4->field_0, v4->field_8);\n
        if (!v2)\n
        {\n
            cgc_printf(v0 - 3164);\n
            return v3;\n
        }\n
        v1 = cgc_retrieve_set(&v2->padding_0[8]);\n
        if (!v1)\n
        {\n
            cgc_add_set(v2);\n
        }\n
        else\n
        {\n
            for (v3 = 0; v3 < v1->field_18; v3 += 1)\n
            {\n
                cgc_free_element();\n
                *(&v1[1].padding_0[4 * v3]) = 0;\n
            }\n
            for (v3 = 0; v3 < v2->field_18; v3 += 1)\n
            {\n
                *(&v1[1].padding_0[4 * v3]) = *((28 + &v2->padding_0[0] + 0x4 * v3));\n
            }\n
            v1->field_18 = v2->field_18;\n
            cgc_deallocate(v2);\n
        }\n
        v3 = 0;\n
        return v3;\n
    }\n
}\n
", "4213711:sub_404bcf": null, "4213712:cgc_issubset": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_issubset(char *v11, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    char v1;  // [bp-0x24]\n
    char v2;  // [bp-0x23]\n
    char v3;  // [bp-0x22]\n
    char v4;  // [bp-0x21]\n
    unsigned int v5;  // [bp-0x20]\n
    void* v6;  // [bp-0x1c]\n
    void* v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int, unsigned int *\n
    struct_0 *v9;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int, char *\n
\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v12 = v11;\n
    v10 = 0;\n
    v9 = 0;\n
    v8 = 0;\n
    v7 = 0;\n
    v6 = 0;\n
    if (!v11)\n
    {\n
LABEL_404c23:\n
    }\n
    else\n
    {\n
        if (!a0)\n
            goto LABEL_404c23;\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v11))\n
                v4 = *(v11) == 32;\n
            if (!(v4 & 1))\n
                break;\n
            v11 += 1;\n
        }\n
        if (*(v11) == 124)\n
        {\n
            v9 = cgc_parse_set();\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v3 = 0;\n
                if (*((v11 + v10)) != 32)\n
                    v3 = *((v11 + v10));\n
                if (!(v3 & 1))\n
                    break;\n
                v10 += 1;\n
            }\n
            *((v11 + v10)) = 0;\n
            v9 = cgc_retrieve_set(v11);\n
        }\n
        if (!v9)\n
        {\n
            v12 = cgc_printf(v5 - 3142);\n
        }\n
        else\n
        {\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(a0))\n
                    v2 = *(a0) == 32;\n
                if (!(v2 & 1))\n
                    break;\n
                a0 += 1;\n
            }\n
            if (*(a0) == 124)\n
            {\n
                v8 = cgc_parse_set();\n
            }\n
            else\n
            {\n
                v10 = 0;\n
                while (true)\n
                {\n
                    v1 = 0;\n
                    if (*((a0 + v10)) != 32)\n
                        v1 = *((a0 + v10));\n
                    if (!(v1 & 1))\n
                        break;\n
                    v10 += 1;\n
                }\n
                *((a0 + v10)) = 0;\n
                v8 = cgc_retrieve_set(a0);\n
            }\n
            if (!v8)\n
            {\n
                v12 = cgc_printf(v5 - 3114);\n
            }\n
            else\n
            {\n
                v10 = 0;\n
                while (true)\n
                {\n
                    if (v10 >= *((v9 + 24)))\n
                    {\n
                        v12 = cgc_printf(v5 - 3085);\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        v0 = *((v9 + v10 * 4 + 28));\n
                        if (cgc_element_in_set(v8))\n
                        {\n
                            v10 += 1;\n
                        }\n
                        else\n
                        {\n
                            v12 = cgc_printf(v5 - 4047);\n
                            break;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    if (!v8)\n
        return v12;\n
    v12 = v8;\n
    if (*(v12))\n
        return v12;\n
    v12 = cgc_free_set_array();\n
    v8 = 0;\n
}\n
", "4214456:sub_404eb8": null, "4214464:cgc_command_loop": "typedef struct struct_1 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    char *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_command_loop()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    struct_0 *v1;  // [bp-0x110], Other Possible Types: struct_1 *\n
    char v2;  // [bp-0x10c]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v1 = 0;\n
    while (true)\n
    {\n
        cgc_bzero(&v2, 0x100);\n
        cgc_printf(v0 - 3079);\n
        v3 = cgc_receive_until(&v2, 10, 255);\n
        if (v2 == 46)\n
        {\n
            cgc_exec_command(&v2);\n
        }\n
        else\n
        {\n
            v1 = cgc_parse_command_line(&v2);\n
            if (!v1)\n
                cgc__terminate();\n
            if (v1->field_4 == 61)\n
            {\n
                cgc_handle_set_var(v1);\n
            }\n
            else if (v1->field_4 == 64)\n
            {\n
                cgc_issubset(v1->field_0, v1->field_8);\n
            }\n
            cgc_deallocate(v1);\n
        }\n
    }\n
}\n
", "4214832:main": "int main(unsigned int v2, unsigned int a0)\n
{\n
    void* v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v0 = 0;\n
    cgc_command_loop(); /* do not return */\n
}\n
", "4214867:sub_405053": "int sub_405053(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ebx\n
\n
    v1 = v0;\n
    return 0;\n
}\n
", "4214875:sub_40505b": null, "4214880:cgc_print_set": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_set(struct_0 *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    void* v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v3)\n
        return v3;\n
    v0 = &v3->padding_0[8];\n
    cgc_printf(v1 - 3076);\n
    while (v2 < v3->field_18)\n
    {\n
        if (*((*((28 + &v3->padding_0[0] + 0x4 * v2)) + 4)))\n
        {\n
            v0 = *(*((28 + &v3->padding_0[0] + 0x4 * v2)));\n
            cgc_printf(v1 - 3066);\n
        }\n
        else\n
        {\n
            v0 = *(*((28 + &v3->padding_0[0] + 0x4 * v2)));\n
            cgc_printf(v1 - 3069);\n
        }\n
        v2 += 1;\n
        if (v2 != v3->field_18)\n
            cgc_printf(v1 - 3061);\n
    }\n
    return cgc_printf(v1 - 3059);\n
}\n
", "4215129:sub_405159": null, "4215136:cgc_free_element": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_element(unsigned int *v3)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v3)\n
    {\n
        v1 = *(v3);\n
        v0 = cgc_strlen(*(v3)) + 1;\n
        cgc_deallocate(v1);\n
        v0 = 8;\n
        return cgc_deallocate(v3);\n
    }\n
    return v3;\n
}\n
", "4215249:sub_4051d1": null, "4215264:cgc_copy_set": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_copy_set(struct_0 *v5)\n
{\n
    struct_1 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    if (!v5)\n
        return v4;\n
    v0 = &v4;\n
    if (cgc_allocate(88, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_bzero(v4, 88);\n
    while (true)\n
    {\n
        if (v3 >= v5->field_18)\n
            return v4;\n
        v1 = v4;\n
        cgc_copy_element();\n
        if (cgc_add_element_to_set(v1))\n
        {\n
            cgc_free_set_array();\n
            v4 = 0;\n
            return v4;\n
        }\n
        v3 += 1;\n
    }\n
}\n
", "4215516:sub_4052dc": null, "4215520:cgc_add_element_to_set": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
int cgc_add_element_to_set(struct_0 *v1, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = 1;\n
    if (v1 && a0)\n
    {\n
        if (v1->field_18 >= 15)\n
            return v0;\n
        *(&v1[1].padding_0[4 * v1->field_18]) = a0;\n
        v3 = v1;\n
        v3->field_18 = v3->field_18 + 1;\n
        v0 = 0;\n
    }\n
    return v0;\n
}\n
", "4215623:sub_405347": null, "4215632:cgc_copy_element": "typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_copy_element(unsigned int v3[2])\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    void* v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v3)\n
    {\n
        return v2;\n
    }\n
    else if (!cgc_allocate(4, 0))\n
    {\n
        v1 = cgc_strlen(v3[0]) + 1;\n
        if (cgc_allocate(v1, 0))\n
        {\n
            cgc_deallocate(v2);\n
            v2 = 0;\n
            return v2;\n
        }\n
        cgc_bzero(v2->field_0, v1);\n
        cgc_memcpy(v2->field_0, v3[0], v1 - 1);\n
        v2->field_4 = v3[1];\n
        return v2;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
}\n
", "4215914:sub_40546a": null, "4215920:cgc_free_set_array": "typedef struct struct_0 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free_set_array(struct_0 *v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v4)\n
        return v4;\n
    for (v3 = 0; v3 < v4->field_18; v3 += 1)\n
    {\n
        v1 = *(*(&v4[1].padding_0[4 * v3]));\n
        v0 = cgc_strlen(*(*(&v4[1].padding_0[4 * v3]))) + 1;\n
        cgc_deallocate(v1);\n
        v0 = 8;\n
        cgc_deallocate(*(&v4[1].padding_0[4 * v3]));\n
        *(&v4[1].padding_0[4 * v3]) = 0;\n
    }\n
    v0 = 88;\n
    v5 = cgc_deallocate(v4);\n
    v4 = 0;\n
    return v5;\n
}\n
", "4216140:sub_40554c": null, "4216144:cgc_element_in_set": "typedef struct struct_1 {\n
    char padding_0[24];\n
    unsigned int field_18;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char *field_0;\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_element_in_set(struct_1 *v5, struct_0 *a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = -1;\n
    v3 = 0;\n
    v2 = 0;\n
    v1 = 0;\n
    if (!v5)\n
        return v4;\n
    if (!a0)\n
        return v4;\n
    while (true)\n
    {\n
        if (v1 < v5->field_18)\n
        {\n
            if (!cgc_strcmp(a0->field_0, *(*(&v5[1].padding_0[4 * v1]))) && a0->field_4 == *((*(&v5[1].padding_0[4 * v1]) + 4)))\n
            {\n
                v4 = 1;\n
                return v4;\n
            }\n
            v1 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4216363:sub_40562b": null, "4216368:cgc_create_element": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_create_element(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10]\n
    unsigned int v2[2];  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2[0] = 0;\n
    v1 = 0;\n
    if (!v3)\n
        return v2;\n
    if (a0 && a0 != 1)\n
        return v2;\n
    if (cgc_allocate(8, 0))\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v1 = cgc_strlen(v3);\n
    if (!cgc_allocate(v1 + 1, 0))\n
    {\n
        cgc_memcpy(v2[0], v3, v1);\n
        v1[v2[0]] = 0;\n
        v2[1] = a0;\n
        return v2;\n
    }\n
    cgc_deallocate(v2);\n
    v2 = 0;\n
    return v2;\n
}\n
", "4216660:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_deallocate": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}