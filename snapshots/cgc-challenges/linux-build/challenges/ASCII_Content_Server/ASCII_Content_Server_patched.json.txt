{"4202496:_init": "extern struct_0 *g_40a118;\n
\n
int _init()\n
{\n
    if (g_40a118)\n
    {\n
        g_40a118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:memset": "// attributes: PLT stub\n
void* memset(void* v0, unsigned int block, unsigned int c)\n
{\n
    return ::libc.so.0::memset(v0, block, c);\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202720:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202736:sub_4020f0": "int sub_4020f0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202742:sub_4020f6": null, "4202752:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202795:sub_40212b": null, "4202796:sub_40212c": "int sub_40212c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202800:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202804:sub_402134": null, "4202816:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 32735;\n
    v6 = v5 + 356;\n
    v7 = v5 + 356;\n
    if (v7 == v6)\n
        return v5 + 356;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202867:sub_402173": "int sub_402173()\n
{\n
}\n
", "4202873:sub_402179": "int sub_402179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202880:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32671;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 356;\n
    v9 = (v6 + 356 - (v6 + 356) >> 31) + (356 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202951:sub_4021c7": "int sub_4021c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202960:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40a114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40a114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203035:sub_40221b": "int sub_40221b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203040:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203049:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203053:sub_40222d": null, "4203056:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4203148:sub_40228c": null, "4203152:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[1448];\n
    struct struct_1 *field_5a8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_5a8->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_5a8 == v9)\n
        {\n
            v1->field_5a8 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_5a8 == v9)\n
    {\n
        v1->field_5a8 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4203835:sub_40253b": null, "4203840:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[1448];\n
    unsigned int field_5a8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_5a8;\n
    v7->field_5a8 = v3;\n
    return v3;\n
}\n
", "4204040:sub_402608": null, "4204048:cgc_free": "typedef struct struct_1 {\n
    char padding_0[1448];\n
    struct struct_0 *field_5a8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_1 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_0 *v3[2];  // [bp-0x1c]\n
    struct struct_0 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_1 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_1 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_0 *[2], unsigned int, struct struct_0 **, struct_1 *\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_5a8 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_5a8 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_5a8;\n
    v2[1] = 0;\n
    if (v9->field_5a8)\n
    {\n
        v12 = v1;\n
        *((&v12->field_5a8->field_0 + (v12->field_5a8->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_5a8 = v7;\n
    return v1;\n
}\n
", "4204512:cgc_floor": "typedef struct struct_1 {\n
    char padding_0[1448];\n
    struct struct_0 *field_5a8;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_1 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_0 *v3[2];  // [bp-0x1c]\n
    struct struct_0 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_1 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_1 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_0 *[2], unsigned int, struct struct_0 **, struct_1 *\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_5a8 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_5a8 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_5a8;\n
    v2[1] = 0;\n
    if (v9->field_5a8)\n
    {\n
        v12 = v1;\n
        *((&v12->field_5a8->field_0 + (v12->field_5a8->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_5a8 = v7;\n
    return v1;\n
}\n
", "4204676:sub_402884": null, "4204688:cgc_round_away_from_zero": null, "4204842:sub_40292a": null, "4204848:cgc_round": null, "4204992:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4205084:sub_402a1c": null, "4205088:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205297:sub_402af1": null, "4205312:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205505:sub_402bc1": null, "4205520:cgc_float_to_str": null, "4206383:sub_402f2f": null, "4206384:cgc_vprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_1 **a0)\n
{\n
    struct_0 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_0 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_0 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_1 **v27;  // eax\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_1 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_403804:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    cgc_putc(v14->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    cgc_putc(v12->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    cgc_putc(v10->field_0);\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_403804;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403683;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403683:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        cgc_putc(48);\n
                    else\n
                        cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4208667:sub_40381b": null, "4208672:cgc_vsprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_0 **a1)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            v24[v26] = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40405b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                v24[v26] = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                v24[v26] = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    v24[v26] = v14->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    v24[v26] = v12->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            v24[v26] = 32;\n
                        else\n
                            v24[v26] = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    v24[v26] = v10->field_0;\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40405b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403efe;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403efe:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        v24[v26] = 48;\n
                    else\n
                        v24[v26] = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                v24[v26] = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    v24[v26] = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4210802:sub_404072": null, "4210816:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4210880:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4210949:sub_404105": null, "4210960:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4211032:sub_404158": null, "4211040:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211094:sub_404196": null, "4211104:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211158:sub_4041d6": null, "4211168:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211226:sub_40421a": null, "4211232:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211290:sub_40425a": null, "4211296:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4211362:sub_4042a2": null, "4211376:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4211442:sub_4042f2": null, "4211456:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211510:sub_404336": null, "4211520:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4211614:sub_40439e": null, "4211616:cgc_isnan": null, "4211639:sub_4043b7": null, "4211648:cgc_isinf": null, "4211695:sub_4043ef": null, "4211696:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned long v6;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_404622:\n
                v15 = v5;\n
                v3 = v15;\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_4045fb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_4045fb;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_4045fb;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_404622;\n
                if (!v4)\n
                {\n
LABEL_404577:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_4045fb;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_404577;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_4045fb:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4212284:sub_40463c": null, "4212288:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4212692:sub_4047d4": null, "4212704:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4212795:sub_40483b": null, "4212800:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4212955:sub_4048db": null, "4212960:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4213068:sub_40494c": null, "4213072:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4213150:sub_40499e": null, "4213152:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4213260:sub_404a0c": null, "4213264:cgc_stricmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stricmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v0 = cgc_tolower(*(v3));\n
            v1 = v0 == cgc_tolower(*(a0));\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4213421:sub_404aad": null, "4213424:cgc_strncmp": "int cgc_strncmp(char *v3, char *a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0xd]\n
    void* v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
\n
    v1 = 0;\n
    if (a1 < 1)\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1 - 1)\n
        {\n
            v0 = 0;\n
            if (*(v3))\n
                v0 = *(v3) == *(a0);\n
        }\n
        if (!(v0 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
        v1 += 1;\n
    }\n
    v2 = *(v3) - *(a0);\n
    return v2;\n
}\n
", "4213608:sub_404b68": null, "4213616:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4213811:sub_404c33": null, "4213824:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4213901:sub_404c8d": null, "4213904:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        else if ((*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            cgc_receive(v9, &v2, 0x400);\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
}\n
", "4214226:sub_404dd2": null, "4214240:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4214343:sub_404e47": null, "4214352:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            v4[v5] = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4214566:sub_404f26": null, "4214576:cgc_receive_fixed": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_fixed(unsigned int v6, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a0)\n
        {\n
            v5 = v4;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        v3 = cgc_receive(0, v6 + v4, a0 - v4);\n
        if (v3)\n
            break;\n
        if (!*(&v2))\n
            break;\n
        v4 = *(&v2) + v4;\n
    }\n
    v5 = -1;\n
    return v5;\n
}\n
", "4214731:sub_404fcb": null, "4214736:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v2 = 0;\n
        v0 = &v2;\n
        if (cgc_receive(0, v6 + v4, v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 -= v2;\n
        v4 = v2 + v4;\n
    }\n
}\n
", "4214919:sub_405087": null, "4214928:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4215087:sub_40512f": null, "4215088:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4215287:sub_4051f7": null, "4215296:cgc_puts": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: char\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v5)\n
        return v5;\n
    v2 = cgc_strlen(v5);\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 < v2)\n
        {\n
            v0 = &v4;\n
            v6 = cgc_transmit(1, v5 + v3, v2 - v3);\n
            if (v6)\n
                return v6;\n
            v3 = *(&v4) + v3;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                if (v4 == 1)\n
                    return v6;\n
                v0 = &v4;\n
                v6 = cgc_transmit(1, v1 - 8024, 1);\n
                if (v6)\n
                    return v6;\n
            }\n
        }\n
    }\n
}\n
", "4215524:sub_4052e4": null, "4215536:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4215642:sub_40535a": null, "4215648:cgc_strrchr": "int cgc_strrchr(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v3;\n
    for (v1 = v0 + cgc_strlen(v3); v1 != v3; v1 -= 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v2 = v1;\n
            return v2;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v2 = 0;\n
        return v2;\n
    }\n
    v2 = v1;\n
    return v2;\n
}\n
", "4215794:sub_4053f2": null, "4215808:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[1428];\n
    unsigned int field_594;\n
    unsigned int field_598;\n
    unsigned int field_59c;\n
    struct struct_1 *field_5a0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_598)\n
        {\n
            cgc_deallocate(v4->field_598);\n
            v12 = v4;\n
            v12->field_598 = 0;\n
            v12->field_59c = 0;\n
            v12->field_5a0 = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_598)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_5a0 >= v11->field_598 + v11->field_59c)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_598)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_59c = cgc_strlen(v10);\n
        v0 = &v13->field_598;\n
        if (cgc_allocate(v13->field_59c, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_598, v10);\n
        v14 = v4;\n
        v14->field_5a0 = v14->field_598;\n
    }\n
    v10 = &v4->field_5a0->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_598 + v15->field_59c;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_598 + v16->field_59c)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_594 = v8;\n
    *(v7) = 0;\n
    v17->field_5a0 = v7 + 1;\n
    v9 = v17->field_594;\n
    return v9;\n
}\n
", "4216555:sub_4056eb": null, "4216560:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 < a0)\n
        {\n
            v0 = &v3;\n
            if (cgc_transmit(1, v5 + v2, a0 - v2))\n
            {\n
                v4 = v2;\n
                return v4;\n
            }\n
            v2 = *(&v3) + v2;\n
        }\n
        else\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
    }\n
}\n
", "4216725:sub_405795": null, "4216736:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4216928:cgc_DecodeData": "int cgc_DecodeData(char *v5, unsigned int a0, char a1[2], unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    char *v4;  // [bp-0x8]\n
    char *v6;  // eax\n
    char *v7;  // eax\n
\n
    v4 = v5;\n
    v6 = v5;\n
    v5 = v6 + 1;\n
    *(v6) = (a1[0] >> 1) & 127;\n
    for (v3 = 1; v3 <= a0; v3 += 1)\n
    {\n
        v0 = *(a1);\n
        v1 = v0 << (7 - ((v3 >> 31 CONCAT v3) /m 8 >> 32) & 31);\n
        v2 = *((a1 + 1));\n
        v7 = v5;\n
        v5 = v7 + 1;\n
        *(v7) = (v1 | (v2 >> (((v3 >> 31 CONCAT v3) /m 8 >> 32) + 1 & 31))) & 127;\n
        if ((v3 >> 31 CONCAT v3) /m 8 >> 32 != 7)\n
            *(&a1) = a1 + 1;\n
    }\n
    return 0;\n
}\n
", "4217149:sub_40593d": null, "4217152:cgc_DestroyCommand": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DestroyCommand(unsigned int v1[19])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[18])\n
    {\n
        cgc_free(v1[18]);\n
        v1[18] = 0;\n
    }\n
    v1[0] = 0;\n
    cgc_memset(&v1[1], 0, 64);\n
    v1[17] = 0;\n
    return v1;\n
}\n
", "4217277:sub_4059bd": null, "4217280:cgc_ReceiveCommand": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char padding_4[64];\n
    unsigned int field_44;\n
    char *field_48;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ReceiveCommand(struct_0 *v15, unsigned int *a0)\n
{\n
    char *v0;  // [bp-0x80]\n
    char *v1;  // [bp-0x7c]\n
    char *v2;  // [bp-0x78]\n
    char *v3;  // [bp-0x74]\n
    char *v4;  // [bp-0x70]\n
    char *v5;  // [bp-0x6c]\n
    unsigned int v6;  // [bp-0x68]\n
    char v7[2];  // [bp-0x64]\n
    unsigned int v8;  // [bp-0x60]\n
    char v9;  // [bp-0x5c]\n
    unsigned int v10;  // [bp-0x58]\n
    unsigned int v11;  // [bp-0x54]\n
    char v12;  // [bp-0x50]\n
    char v13;  // [bp-0x4f]\n
    unsigned int v14;  // [bp-0x10]\n
    unsigned int v16;  // eax\n
\n
    v6 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v15->field_48)\n
        cgc_DestroyCommand(v15);\n
    v11 = cgc_receive_fixed(&v12, 7);\n
    if (v11 != 7)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    if (!cgc_strncmp(&v12, v6 - 8364, 7))\n
    {\n
        *(a0) = 1;\n
    }\n
    else if (!cgc_strncmp(&v12, v6 - 8356, 7))\n
    {\n
        *(a0) = 0;\n
    }\n
    else\n
    {\n
        v14 = -2;\n
        return v14;\n
    }\n
    v11 = cgc_receive_until(&v12, 58, 64);\n
    if (!v11)\n
    {\n
        v14 = -1;\n
        return v14;\n
    }\n
    else if (v12 == 91)\n
    {\n
        v5 = &v13;\n
        if (!cgc_strncmp(v5, v6 - 8348, cgc_strlen(v6 - 8348)))\n
        {\n
            v15->field_0 = 1;\n
        }\n
        else\n
        {\n
            v4 = &v13;\n
            if (!cgc_strncmp(v4, v6 - 8340, cgc_strlen(v6 - 8340)))\n
            {\n
                v15->field_0 = 2;\n
            }\n
            else\n
            {\n
                v3 = &v13;\n
                if (!cgc_strncmp(v3, v6 - 8215, cgc_strlen(v6 - 8215)))\n
                {\n
                    v15->field_0 = 3;\n
                }\n
                else\n
                {\n
                    v2 = &v13;\n
                    if (!cgc_strncmp(v2, v6 - 8334, cgc_strlen(v6 - 8334)))\n
                    {\n
                        v15->field_0 = 4;\n
                    }\n
                    else\n
                    {\n
                        v1 = &v13;\n
                        if (!cgc_strncmp(v1, v6 - 8327, cgc_strlen(v6 - 8327)))\n
                        {\n
                            v15->field_0 = 5;\n
                        }\n
                        else\n
                        {\n
                            v0 = &v13;\n
                            if (cgc_strncmp(v0, v6 - 8317, cgc_strlen(v6 - 8317)))\n
                            {\n
                                v14 = -2;\n
                                return v14;\n
                            }\n
                            v15->field_0 = 6;\n
                        }\n
                    }\n
                }\n
            }\n
        }\n
        v11 = cgc_receive_until(&v12, 58, 64);\n
        if (v11 > 64)\n
        {\n
            v14 = -1;\n
            return v14;\n
        }\n
        if (v11 > 0)\n
            cgc_strncpy(&v15->padding_4, &v12, v11);\n
        v11 = cgc_receive_until(&v12, 58, 64);\n
        if (v11 > 6)\n
        {\n
            v14 = -1;\n
            return v14;\n
        }\n
        if (v11 > 0)\n
            v15->field_44 = cgc_atoi(&v12);\n
        if (v15->field_44 > 0)\n
        {\n
            v15->field_48 = cgc_calloc(v15->field_44 + 1, 1);\n
            cgc_VerifyPointerOrTerminate(v15->field_48);\n
            v10 = v15->field_48;\n
            v11 = cgc_receive_fixed(v15->field_48, v15->field_44);\n
            if (v11 != v15->field_44)\n
            {\n
                v14 = -1;\n
                return v14;\n
            }\n
        }\n
        else if (v15->field_44 == -1)\n
        {\n
            v11 = cgc_receive_fixed(&v9, 4);\n
            if (v11 != 4)\n
            {\n
                v14 = -1;\n
                return v14;\n
            }\n
            v16 = *(&v9) * 8;\n
            v8 = (v16 >> 31 CONCAT v16) /m 7;\n
            if (v8 <= 0)\n
            {\n
                v14 = -1;\n
                return v14;\n
            }\n
            v15->field_48 = cgc_calloc(v8 + 1, 1);\n
            cgc_VerifyPointerOrTerminate(v15->field_48);\n
            *(&v7) = cgc_calloc(*(&v9) + 1, 1);\n
            cgc_VerifyPointerOrTerminate(v7);\n
            v11 = cgc_receive_fixed(v7, *(&v9));\n
            if (v11 != *(&v9))\n
            {\n
                cgc_free(v7);\n
                v14 = -1;\n
                return v14;\n
            }\n
            if (cgc_DecodeData(v15->field_48, v8, v7, *(&v9)))\n
            {\n
                cgc_free(v7);\n
                v14 = -1;\n
                return v14;\n
            }\n
            if (v15->field_48[1 + v8])\n
                v15->field_44 = v8;\n
            else\n
                v15->field_44 = v8 - 1;\n
            cgc_free(v7);\n
        }\n
        v11 = cgc_receive_fixed(&v12, 1);\n
        if (v11 != 1)\n
        {\n
            v14 = -1;\n
            return v14;\n
        }\n
        else if (v12 == 93)\n
        {\n
            v14 = 0;\n
            return v14;\n
        }\n
        else\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
    }\n
    else\n
    {\n
        v14 = -2;\n
        return v14;\n
    }\n
}\n
", "4218930:sub_406032": null, "4218944:cgc_HandleCommand": "typedef struct struct_2 {\n
    char padding_0[68];\n
    unsigned int field_44;\n
    struct struct_1 *field_48;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
    struct struct_1 *field_4c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[72];\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_HandleCommand()\n
{\n
    unsigned int v3[20];  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v4[20];  // [bp+0x4], Other Possible Types: unsigned int\n
    unsigned int v5[20];  // [bp+0x8]\n
    unsigned int v7;  // [bp+0xfffec]\n
    unsigned int v8[20];  // [bp+0xffff4]\n
    struct_2 *v11;  // [bp+0x10000c]\n
\n
    v3[0] = &v11->padding_0[4];\n
    v8[0] = cgc_LookupNode();\n
    if (v8)\n
    {\n
        v3 = v8[19];\n
        v4 = v8[18];\n
        v5[0] = v11->field_48;\n
        cgc_InteractWithPage(v4, v5);\n
    }\n
    else\n
    {\n
        v3 = v7 - 8251;\n
        v4[0] = &v11->padding_0[4];\n
        cgc_printf(v7 - 8251);\n
    }\n
    return;\n
}\n
", "4219686:sub_406326": null, "4219696:cgc_PrintErrorAndTerminate": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PrintErrorAndTerminate()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    char v3;  // [bp-0x4]\n
    unsigned int v4;  // [bp+0x4]\n
    unsigned int v5;  // ebp\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v5 = &v3;\n
    v2 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = v4;\n
    cgc_printf(\"ERROR: @s\\n
\");\n
    v7 = v1;\n
    cgc__terminate(1);\n
    cgc_VerifyPointerOrTerminate();\n
    return;\n
}\n
", "4219760:cgc_VerifyPointerOrTerminate": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_VerifyPointerOrTerminate(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v2)\n
    {\n
        v0 = a0;\n
        cgc_printf(v1 - 8001);\n
        return cgc__terminate(1);\n
    }\n
    return v2;\n
}\n
", "4219843:sub_4063c3": null, "4219856:cgc_AddPageVar": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
    struct struct_0 *field_44;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_AddPageVar(struct_0 *v7, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x20], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x18]\n
    char *v4;  // [bp-0x14]\n
    unsigned int v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = cgc_strchr(a0, 58) + 1;\n
    v3 = cgc_strchr(v4, 58) + 1;\n
    v2 = cgc_strchr(a0, 93);\n
    if (v3 - v4 > 64)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    v1 = cgc_GetPageVar(v7, v4);\n
    if (!v1)\n
    {\n
        for (v1 = v7; v1->field_44; v1 = v1->field_44);\n
        *((v1 + 68)) = cgc_calloc(72, 1);\n
        cgc_VerifyPointerOrTerminate(*((v1 + 68)), v0 - 7971);\n
        v1 = *((v1 + 68));\n
    }\n
    else if (v1->field_40)\n
    {\n
        cgc_free(v1->field_40);\n
    }\n
    cgc_memcpy(v1, v4, -1 + v3 - v4);\n
    if (v2 - v3 <= 0)\n
    {\n
        v5 = -1;\n
        return v5;\n
    }\n
    *((v1 + 64)) = cgc_calloc(v2 - v3 + 1, 1);\n
    cgc_VerifyPointerOrTerminate(*((v1 + 64)), v0 - 7959);\n
    cgc_memcpy(*((v1 + 64)), v3, v2 - v3);\n
    v5 = 1;\n
    return v5;\n
}\n
", "4220354:sub_4065c2": null, "4220368:cgc_GetPageVar": "typedef struct struct_0 {\n
    char padding_0[68];\n
    struct struct_0 *field_44;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_GetPageVar(struct_0 *v2, char *a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        if (!v2)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!cgc_strncmp(v2, a0, a1 - a0))\n
        {\n
            v1 = v2;\n
            return v1;\n
        }\n
        v2 = v2->field_44;\n
    }\n
}\n
", "4220494:sub_40664e": null, "4220496:cgc_DestroyVarList": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DestroyVarList(unsigned int v1[18])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v1)\n
        return v1;\n
    if (v1[17])\n
    {\n
        cgc_DestroyVarList(v1[17]);\n
        v1[17] = 0;\n
    }\n
    if (!v1[16])\n
        return cgc_free(v1);\n
    cgc_free(v1[16]);\n
    v1[16] = 0;\n
}\n
", "4220636:sub_4066dc": null, "4220640:cgc_InteractWithPage": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InteractWithPage(unsigned int v6, unsigned int a0, char *a1)\n
{\n
    void* v0;  // [bp-0x24], Other Possible Types: unsigned int\n
    char v1;  // [bp-0x19]\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a1)\n
    {\n
        v0 = 0;\n
    }\n
    else\n
    {\n
        v4 = cgc_calloc(72, 1);\n
        cgc_VerifyPointerOrTerminate(v4, v2 - 7944);\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (*(a1))\n
                v1 = *(a1) != 93;\n
            if (!(v1 & 1))\n
                break;\n
            if (*(a1) != 91)\n
                break;\n
            cgc_AddPageVar(v4, a1);\n
            v3 = cgc_strchr(a1, 93);\n
            if (!v3)\n
                break;\n
            a1 = v3 + 1;\n
        }\n
        v0 = v4;\n
    }\n
    v5 = cgc_ServePageWithOverride(v6, a0);\n
    return v5;\n
}\n
", "4220956:sub_40681c": null, "4220960:cgc_ServePageWithOverride": "extern unsigned int _GLOBAL_OFFSET_TABLE_[364];\n
\n
int cgc_ServePageWithOverride(char v20[2], unsigned int a0, void* a1)\n
{\n
    char v0;  // [bp-0x51]\n
    char v1[2];  // [bp-0x50]\n
    char v2[2];  // [bp-0x4c]\n
    char v3[2];  // [bp-0x48]\n
    char v4;  // [bp-0x41]\n
    unsigned int v5;  // [bp-0x40]\n
    char v6;  // [bp-0x39]\n
    unsigned int v7[364];  // [bp-0x38]\n
    void* v8;  // [bp-0x34], Other Possible Types: unsigned int\n
    char v9[2];  // [bp-0x30], Other Possible Types: unsigned int\n
    void* v10;  // [bp-0x2c], Other Possible Types: unsigned int\n
    void* v11;  // [bp-0x28], Other Possible Types: unsigned int\n
    void* v12;  // [bp-0x24], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x20]\n
    char v14;  // [bp-0x19]\n
    char v15[2];  // [bp-0x18], Other Possible Types: unsigned int\n
    void* v16;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v17;  // [bp-0x10]\n
    unsigned int v18;  // [bp-0xc]\n
    unsigned int v19;  // [bp-0x8]\n
    unsigned int v21;  // ebx\n
    unsigned int v22[364];  // ebx\n
    char v23[2];  // eax\n
    char v24[2];  // eax\n
\n
    v19 = v21;\n
    v7[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v17 = cgc_calloc(72, 1);\n
    cgc_VerifyPointerOrTerminate(v17, &v7[5 + 158] + 3);\n
    v22 = v7;\n
    v22[361] = 0;\n
    cgc_memset(v22 + 1, 0, 81);\n
    v7[363] = 0;\n
    if (v20)\n
    {\n
        while (true)\n
        {\n
            v6 = 0;\n
            if (*(v20))\n
                v6 = v20 < v20 + a0;\n
            if (!(v6 & 1))\n
            {\n
                if (v7[363])\n
                    cgc_FlushOutput();\n
                cgc_DestroyVarList(v17);\n
                cgc_DestroyVarList(a1);\n
                v18 = 0;\n
                return v18;\n
            }\n
            if (v20[0] == 126)\n
            {\n
                *(&v20) = &v20[1];\n
                v5 = v20[0];\n
                if (v5 == 35)\n
                {\n
                    cgc_OutputChar();\n
                }\n
                else\n
                {\n
                    if (v5 == 91)\n
                    {\n
                        cgc_OutputChar();\n
                    }\n
                    else\n
                    {\n
                        if (v5 == 93)\n
                        {\n
                            cgc_OutputChar();\n
                        }\n
                        else\n
                        {\n
                            if (v5 == 110)\n
                            {\n
                                cgc_FlushOutput();\n
                            }\n
                            else\n
                            {\n
                                if (v5 == 116)\n
                                {\n
                                    for (v16 = 0; v16 < 4; v16 += 1)\n
                                    {\n
                                        cgc_OutputChar();\n
                                    }\n
                                }\n
                                else\n
                                {\n
                                    if (v5 == 126)\n
                                    {\n
                                        cgc_OutputChar();\n
                                    }\n
                                    else\n
                                    {\n
                                        cgc_printf(&v7[5 + 153]);\n
                                        break;\n
                                    }\n
                                }\n
                            }\n
                        }\n
                    }\n
                }\n
                *(&v20) = &v20[1];\n
            }\n
            else if (v20[0] == 91)\n
            {\n
                *(&v20) = &v20[1];\n
                *(&v15) = v20;\n
                while (true)\n
                {\n
                    v4 = 0;\n
                    if (v15[0] != 93)\n
                        v4 = v15[0];\n
                    if (!(v4 & 1))\n
                        break;\n
                    v15 = &v15[1];\n
                }\n
                if (!*(v15))\n
                    break;\n
                *(&v3) = v20;\n
                if (cgc_strncmp(v3, &v7[5 + 145] + 3, cgc_strlen(&v7[5 + 145] + 3)))\n
                {\n
                    *(&v2) = v20;\n
                    if (!cgc_strncmp(v2, &v7[5 + 144] + 2, cgc_strlen(&v7[5 + 144] + 2)))\n
                    {\n
                        cgc_AddPageVar(v17, v20);\n
                        *(&v20) = &v15[1];\n
                    }\n
                    else\n
                    {\n
                        *(&v1) = v20;\n
                        if (!cgc_strncmp(v1, &v7[5 + 143] + 2, cgc_strlen(&v7[5 + 143] + 2)))\n
                        {\n
                            v7[361] = 1;\n
                            cgc_FlushOutput();\n
                            for (v11 = 0; v11 < 80; v11 += 1)\n
                            {\n
                                cgc_putc(42);\n
                            }\n
                            cgc_printf(&v7[5 + 186]);\n
                            v20 += 2;\n
                        }\n
                    }\n
                }\n
                else\n
                {\n
                    *(&v20) = &v20[cgc_strlen(&v7[5 + 145] + 3)];\n
                    if (v20[0] != 58)\n
                        break;\n
                    v23 = v20;\n
                    *(&v20) = &v23[1];\n
                    v14 = v23[1];\n
                    v24 = v20;\n
                    *(&v20) = &v24[1];\n
                    if (v24[1] != 58)\n
                        break;\n
                    *(&v20) = &v20[1];\n
                    v13 = cgc_atoi(v20);\n
                    for (v12 = 0; v12 < v13; v12 += 1)\n
                    {\n
                        cgc_OutputChar();\n
                    }\n
                    *(&v20) = &v15[1];\n
                }\n
            }\n
            else if (v20[0] == 93)\n
            {\n
                *(&v20) = &v20[1];\n
                if (!v7[361])\n
                    break;\n
                v7[361] = 0;\n
                cgc_FlushOutput();\n
                for (v10 = 0; v10 < 80; v10 += 1)\n
                {\n
                    cgc_putc(42);\n
                }\n
                cgc_printf(&v7[5 + 186]);\n
            }\n
            else if (v20[0] != 35)\n
            {\n
                cgc_OutputChar();\n
                *(&v20) = &v20[1];\n
            }\n
            else\n
            {\n
                *(&v20) = &v20[1];\n
                *(&v9) = v20;\n
                while (true)\n
                {\n
                    v0 = 0;\n
                    if (*(v9))\n
                        v0 = *(v9) != 35;\n
                    if (!(v0 & 1))\n
                        break;\n
                    v9 += 1;\n
                }\n
                if (*(v9) != 35)\n
                    break;\n
                v8 = 0;\n
                if (a1)\n
                    v8 = cgc_GetPageVar(a1, v20, v9);\n
                if (!v8)\n
                    v8 = cgc_GetPageVar(v17, v20, v9);\n
                if (v8)\n
                    cgc_OutputStr();\n
                *(&v20) = v9 + 1;\n
            }\n
        }\n
    }\n
    cgc_printf(&v7[5 + 142] + 2);\n
    cgc_DestroyVarList(v17);\n
    cgc_DestroyVarList(a1);\n
    v18 = -1;\n
    return v18;\n
}\n
", "4222636:sub_406eac": null, "4222640:cgc_ServePage": "int cgc_ServePage(char v0[2], unsigned int a0)\n
{\n
    return cgc_ServePageWithOverride(v0, a0, NULL);\n
}\n
", "4222699:sub_406eeb": null, "4222704:cgc_FlushOutput": "typedef struct struct_0 {\n
    char padding_0[1444];\n
    unsigned int field_5a4;\n
    char padding_5a8[4];\n
    unsigned int field_5ac;\n
    char field_5b0;\n
    char padding_5b1[78];\n
    char field_5ff;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FlushOutput()\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    struct_0 *v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    cgc_printf(\"@s\\n
\");\n
    cgc_memset(&v0->field_5b0, 0, 81);\n
    if (!v0->field_5a4)\n
    {\n
        v4 = v0;\n
        v4->field_5ac = 0;\n
        return v0;\n
    }\n
    cgc_memset(&v0->field_5b0, 32, 80);\n
    v4 = v0;\n
    *((v4 + 1456)) = 42;\n
    *((v4 + 1535)) = 42;\n
    *((v4 + 1452)) = 2;\n
    return v0;\n
}\n
", "4222885:sub_406fa5": null, "4222896:cgc_OutputChar": "typedef struct struct_0 {\n
    char padding_0[1452];\n
    unsigned int field_5ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int cgc_in_a_box;\n
extern unsigned int line_length;\n
\n
int cgc_OutputChar(char v1)\n
{\n
    struct_0 *v0;  // [bp-0x10]\n
    unsigned int v2;  // ecx\n
    struct_0 *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = line_length;\n
    line_length = line_length + 1;\n
    _GLOBAL_OFFSET_TABLE_.padding_0[1456 + v2] = v1;\n
    if (cgc_in_a_box && v0->field_5ac == 78)\n
    {\n
        v3 = cgc_FlushOutput();\n
        return v3;\n
    }\n
    v3 = v0;\n
    if (v3->field_5ac == 80)\n
        v3 = cgc_FlushOutput();\n
    return v3;\n
}\n
", "4223027:sub_407033": null, "4223040:cgc_OutputStr": "typedef struct struct_0 {\n
    char padding_0[1452];\n
    unsigned int field_5ac;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_OutputStr(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    struct_0 *v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    struct_0 *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ebx\n
\n
    v3 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (cgc_strlen(v4) + v2->field_5ac > 80)\n
        cgc_FlushOutput();\n
    if (cgc_strlen(v4) > 80)\n
    {\n
        v6 = cgc_printf(&v2[5].padding_0[725]);\n
        return v6;\n
    }\n
    v7 = v2;\n
    v0 = &v7->padding_0[1 + v7->field_5ac];\n
    v1 = v4;\n
    cgc_memcpy(v0, v1, cgc_strlen(v4));\n
    v6 = v2;\n
    *((v6 + 1452)) = cgc_strlen(v4) + *((v6 + 1452));\n
    return v2;\n
}\n
", "4223251:sub_407113": null, "4223264:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    void* v1;  // [bp-0x60]\n
    char v2;  // [bp-0x5c]\n
    void* v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (cgc_InitializeTree())\n
        cgc_PrintErrorAndTerminate();\n
    memset(&v2, 0, 76);\n
    v1 = 0;\n
    do\n
    {\n
        if (cgc_ReceiveCommand(&v2, &v1))\n
            cgc_PrintErrorAndTerminate();\n
        cgc_HandleCommand();\n
        cgc_DestroyCommand(&v2);\n
    } while (v1 == 1);\n
    v7 = v4;\n
    return 0;\n
}\n
", "4223462:sub_4071e6": null, "4223472:cgc_InitializeTree": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_InitializeTree()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2[20];  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v3 < 20)\n
        {\n
            v2[0] = cgc_calloc(80, 1);\n
            cgc_VerifyPointerOrTerminate(v2, v1 - 5365);\n
            cgc_strncpy(v2, v1 + 64 + v3 * 68, 64);\n
            v2[18] = cgc_strlen(*((v1 + 64 + v3 * 68 + 64))) + 1;\n
            v2[19] = cgc_calloc(v2[18], 1);\n
            cgc_VerifyPointerOrTerminate(v2[19], v1 - 5334);\n
            v0 = *((v1 + 64 + v3 * 68 + 64));\n
            cgc_memcpy(v2[19], v0, v2[18]);\n
            if (cgc_InsertNodeInTree(v2, v0))\n
            {\n
                cgc_free(v2[19]);\n
                cgc_free(v2);\n
                v4 = -1;\n
                return v4;\n
            }\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4223843:sub_407363": null, "4223856:cgc_InsertNodeInTree": "typedef struct struct_1 {\n
    char padding_0[1540];\n
    struct struct_0 *field_604;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int root;\n
\n
int cgc_InsertNodeInTree(char *v7)\n
{\n
    unsigned int v0;  // [bp-0x68]\n
    struct_1 *v1;  // [bp-0x5c]\n
    struct_0 *v2;  // [bp-0x58], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x54]\n
    char v4;  // [bp-0x50]\n
    char *v5;  // [bp-0x10]\n
    unsigned int v6;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!root)\n
    {\n
        v5 = cgc_calloc(80, 1);\n
        cgc_VerifyPointerOrTerminate(v5, &v1[3].padding_0[594]);\n
        *(v5) = 46;\n
        v1->field_604 = &v5;\n
    }\n
    if (cgc_LookupNode())\n
    {\n
        cgc_printf(&v1[3].padding_0[566]);\n
        v6 = -1;\n
        return v6;\n
    }\n
    else if (*(v7))\n
    {\n
        cgc_memcpy(&v4, v7, 64);\n
        v3 = cgc_strrchr(&v4, 46);\n
        v2 = v1->field_604;\n
        if (!v3)\n
        {\n
            if (!*(&v2[1].padding_0[0]))\n
            {\n
                *(&v2[1].padding_0[0]) = v7;\n
            }\n
            else\n
            {\n
                for (v2 = *(&v2[1].padding_0[0]); *((v2 + 64)); v2 = *((v2 + 64)));\n
                *((v2 + 64)) = v7;\n
            }\n
            v6 = 0;\n
            return v6;\n
        }\n
        else\n
        {\n
            v0 = v3 + 1;\n
            cgc_strncpy(v7, v0, 64);\n
            *(v3) = 0;\n
            v2 = cgc_LookupNode(&v4, v0);\n
            if (!v2)\n
            {\n
                cgc_printf(&v1[3].padding_0[509]);\n
                v6 = -1;\n
                return v6;\n
            }\n
            else if (*(&v2[1].padding_0[0]))\n
            {\n
                for (v2 = *(&v2[1].padding_0[0]); *((v2 + 64)); v2 = *((v2 + 64)));\n
                *((v2 + 64)) = v7;\n
                v6 = 0;\n
                return v6;\n
            }\n
            else\n
            {\n
                *(&v2[1].padding_0[0]) = v7;\n
                v6 = 0;\n
                return v6;\n
            }\n
        }\n
    }\n
    else\n
    {\n
        cgc_printf(&v1[3].padding_0[538]);\n
        v6 = -1;\n
        return v6;\n
    }\n
}\n
", "4224416:cgc_WalkTree": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_WalkTree(unsigned int v9[18])\n
{\n
    unsigned int v0[18];  // [bp-0x228]\n
    unsigned int v1;  // [bp-0x220]\n
    void* v2;  // [bp-0x21c], Other Possible Types: unsigned int\n
    unsigned int v3[18];  // [bp-0x218]\n
    unsigned int v4;  // [bp-0x214]\n
    struct struct_0 **v5;  // [bp-0x210], Other Possible Types: unsigned int\n
    unsigned int v6[18];  // [bp-0x20c]\n
    char v7;  // [bp-0x208]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11[18];  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v12;  // eax\n
    unsigned int v13;  // eax\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // eax\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // eax\n
    unsigned int v18;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v6[0] = 0;\n
    v5 = 0;\n
    v4 = 254;\n
    v3[0] = v9;\n
    v0[0] = v3;\n
    cgc_printf(\"@s\\n
\");\n
    v11 = v3;\n
    if (v11[17])\n
    {\n
        v12 = v5;\n
        v5 = v12 + 1;\n
        *((&v7 + 0x4 * v12)) = v3[17];\n
        v11 = v5;\n
        v5 = v11 + 1;\n
        *(&(&v7)[4 * v11]) = &v6[0] + 1;\n
    }\n
    for (; v5 > 0; *(&(&v7)[4 * v11]) = &v6[0] + 1)\n
    {\n
        v13 = v5;\n
        v5 = v13 - 1;\n
        v6[0] = v6[v13];\n
        v14 = v5;\n
        v5 = v14 - 1;\n
        v3[0] = v6[v14];\n
        for (v2 = 0; v2 < v6; v2 += 1)\n
        {\n
            cgc_printf(v1 - 5301);\n
        }\n
        v0[0] = v3;\n
        cgc_printf(v1 - 8005);\n
        if (v3[16])\n
        {\n
            v15 = v5;\n
            v5 = v15 + 1;\n
            *(&(&v7)[4 * v15]) = v3[16];\n
            v16 = v5;\n
            v5 = v16 + 1;\n
            *(&(&v7)[4 * v16]) = v6;\n
        }\n
        v11 = v3;\n
        if (v11[17])\n
        {\n
            v17 = v5;\n
            v5 = v17 + 1;\n
            *(&(&v7)[4 * v17]) = v3[17];\n
            v11 = v5;\n
            v5 = v11 + 1;\n
        }\n
    }\n
    v18 = v8;\n
    return v11;\n
}\n
", "4224943:sub_4077af": null, "4224944:cgc_PrintTree": "typedef struct struct_0 {\n
    char padding_0[1540];\n
    unsigned int field_604;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PrintTree(char *v4)\n
{\n
    char *v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    unsigned int v2[18];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v4)\n
    {\n
LABEL_4077e2:\n
        v2[0] = v1->field_604;\n
    }\n
    else\n
    {\n
        if (!*(v4))\n
            goto LABEL_4077e2;\n
        v2 = cgc_LookupNode();\n
    }\n
    if (!v2)\n
    {\n
        v0 = v4;\n
        cgc_printf(&v1[3].padding_0[664]);\n
        v3 = -1;\n
        return v3;\n
    }\n
    cgc_WalkTree(v2);\n
    v3 = 0;\n
    return v3;\n
}\n
", "4225104:cgc_LookupNode": "typedef struct struct_1 {\n
    char padding_0[64];\n
    struct struct_1 *field_40;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern struct_2 *root;\n
\n
int cgc_LookupNode(unsigned int v7)\n
{\n
    unsigned int v0;  // [bp-0x5c]\n
    char *v1;  // [bp-0x58], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x50]\n
    struct_1 *v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_1 *v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = root->field_44;\n
    cgc_memcpy(&v3, v7, 64);\n
    v2 = &v3;\n
    v1 = cgc_strchr(&v3, 46);\n
    if (v1)\n
        *(v1) = 0;\n
    while (true)\n
    {\n
        if (!v4)\n
        {\n
            v5 = v4;\n
            return v5;\n
        }\n
        else if (cgc_strcmp(v4, v2))\n
        {\n
            v4 = v4->field_40;\n
        }\n
        else if (v1)\n
        {\n
            v2 = v1 + 1;\n
            v1 = cgc_strchr(v2, 46);\n
            if (v1)\n
                *(v1) = 0;\n
            v4 = *((v4 + 68));\n
        }\n
        else\n
        {\n
            v5 = v4;\n
            return v5;\n
        }\n
    }\n
}\n
", "4225373:sub_40795d": null, "4225376:cgc_FreeTree": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_FreeTree(unsigned int v1[20])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (v1[17])\n
        cgc_FreeTree(v1[17]);\n
    if (v1[16])\n
        cgc_FreeTree(v1[16]);\n
    if (v1[19])\n
        cgc_free(v1[19]);\n
    return cgc_free(v1);\n
}\n
", "4225511:sub_4079e7": null, "4225520:cgc_DeleteNode": "typedef struct struct_2 {\n
    char padding_0[1540];\n
    struct struct_1 *field_604;\n
} struct_2;\n
\n
typedef struct struct_3 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
} struct_3;\n
\n
typedef struct struct_1 {\n
    char padding_0[68];\n
    struct struct_0 *field_44;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[64];\n
    struct struct_0 *field_40;\n
} struct_0;\n
\n
extern struct_2 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_DeleteNode(unsigned int v9)\n
{\n
    char v0;  // [bp-0x61]\n
    struct_2 *v1;  // [bp-0x60]\n
    struct_0 *v2;  // [bp-0x5c], Other Possible Types: unsigned int\n
    char *v3;  // [bp-0x58]\n
    char v4;  // [bp-0x54]\n
    struct_1 *v5;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_3 *v6;  // [bp-0x10]\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v6 = cgc_LookupNode(v9);\n
    if (!v6)\n
    {\n
        cgc_printf(&v1[3].padding_0[637]);\n
        v7 = -1;\n
        return v7;\n
    }\n
    cgc_memcpy(&v4, v9, 64);\n
    v3 = cgc_strrchr(&v4, 46);\n
    if (!v3)\n
    {\n
        v5 = v1->field_604;\n
    }\n
    else\n
    {\n
        *(v3) = 0;\n
        v5 = cgc_LookupNode(&v4);\n
    }\n
    if (v6 && v5)\n
    {\n
        if (*((v5 + 68)))\n
        {\n
            if (*((v5 + 68)) == v6)\n
            {\n
                *((v5 + 68)) = v6->field_40;\n
            }\n
            else\n
            {\n
                v2 = *((v5 + 68));\n
                while (true)\n
                {\n
                    v0 = 0;\n
                    if (*((v2 + 64)) != v6)\n
                        v0 = v2;\n
                    if (!(v0 & 1))\n
                        break;\n
                    v2 = *((v2 + 64));\n
                }\n
                if (!v2)\n
                {\n
                    cgc_printf(&v1[3].padding_0[637]);\n
                    v7 = -1;\n
                    return v7;\n
                }\n
                *((v2 + 64)) = v6->field_40;\n
            }\n
            v6->field_40 = 0;\n
            cgc_FreeTree(v6);\n
            v7 = 0;\n
            return v7;\n
        }\n
        else\n
        {\n
            v7 = -1;\n
            return v7;\n
        }\n
    }\n
    v7 = -1;\n
    return v7;\n
}\n
", "4225968:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:memset": null, "5242912:cgc_deallocate": null, "5242916:cgc_log10": null, "5242920:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}