{"4202496:_init": "extern struct_0 *g_40b118;\n
\n
int _init()\n
{\n
    if (g_40b118)\n
    {\n
        g_40b118();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202608:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202624:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202640:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202656:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202704:sub_4020d0": "int sub_4020d0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202710:sub_4020d6": null, "4202720:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202763:sub_40210b": null, "4202764:sub_40210c": "int sub_40210c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202768:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202772:sub_402114": null, "4202784:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 36863;\n
    v6 = v5 + 29;\n
    v7 = v5 + 29;\n
    if (v7 == v6)\n
        return v5 + 29;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202835:sub_402153": "int sub_402153()\n
{\n
}\n
", "4202841:sub_402159": "int sub_402159()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202848:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 36799;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 29;\n
    v9 = (v6 + 29 - (v6 + 29) >> 31) + (29 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202919:sub_4021a7": "int sub_4021a7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202928:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40b114;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40b114)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020d0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203003:sub_4021fb": "int sub_4021fb()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203008:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203017:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203021:sub_40220d": null, "4203024:cgc_floor": null, "4203188:sub_4022b4": null, "4203200:cgc_round_away_from_zero": null, "4203354:sub_40235a": null, "4203360:cgc_round": null, "4203504:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4203596:sub_40244c": null, "4203600:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4203809:sub_402521": null, "4203824:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 39;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4204017:sub_4025f1": null, "4204032:cgc_float_to_str": null, "4204895:sub_40295f": null, "4204896:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_403234:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    cgc_putc(*(v14));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    cgc_putc(*(v12));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    cgc_putc(*(v10));\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_403234;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_4030b3;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_4030b3:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        cgc_putc(48);\n
                    else\n
                        cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4207179:sub_40324b": null, "4207184:cgc_vsprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, unsigned int a0, unsigned int a1)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            *((v26 + v24)) = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_403a8b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                *((v26 + v24)) = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                *((v26 + v24)) = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    *((v26 + v24)) = *(v14);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    *((v26 + v24)) = *(v12);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    *((v26 + v24)) = *(v10);\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_403a8b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = *(v35);\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_40392e;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_40392e:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        *((v26 + v24)) = 32;\n
                    else\n
                        *((v26 + v24)) = 48;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                *((v26 + v24)) = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4209314:sub_403aa2": null, "4209328:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4209392:cgc_sprintf": "int cgc_sprintf(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4209461:sub_403b35": null, "4209472:cgc_sprng": "typedef struct struct_0 {\n
    char padding_0[268];\n
    unsigned int field_10c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprng(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // edi\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = a0;\n
    v2 = v4;\n
    for (v1 = 0; v1 < 16; v1 += 1)\n
    {\n
        v5 = v2;\n
        v6 = v3;\n
        v3 = v6 ^ v6 / 0x1000;\n
        v2 = v5 ^ ((v6 CONCAT v5) * 0x100000 >> 32);\n
        v8 = v2;\n
        v9 = v3;\n
        v3 = v9 ^ ((v9 CONCAT v8) * 0x2000000 >> 32);\n
        v2 = v8 ^ v8 * 0x2000000;\n
        v12 = v2;\n
        v13 = v3;\n
        v3 = v13 ^ v13 / 0x8000000;\n
        v2 = v12 ^ ((v13 CONCAT v12) * 32 >> 32);\n
        v15 = v2;\n
        v16 = v0;\n
        v17 = v1;\n
        *(&v16->padding_0[140 + 8 * v17]) = v15 * 3625897269;\n
        *(&v16->padding_0[144 + 8 * v17]) = (v15 * 3625897269 >> 32) + v15 * 419896726 + v3 * 3625897269;\n
    }\n
    v0->field_10c = 0;\n
    return v0;\n
}\n
", "4209698:sub_403c22": null, "4209712:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int position;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[144 + 8 * position]);\n
    v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[140 + 8 * position]);\n
    v9 = position + 1;\n
    if (v9 < 0)\n
        v9 = position + 16;\n
    position = position + -(v9 & -0x10) + 1;\n
    v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[144 + 8 * position]);\n
    v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[140 + 8 * position]);\n
    v10 = v0;\n
    v11 = v1;\n
    v1 = v11 ^ ((v11 CONCAT v10) * 0x8000000 >> 32);\n
    v0 = v10 ^ v10 * 0x8000000;\n
    v14 = v0;\n
    v15 = v1;\n
    v1 = v15 ^ v15 / 0x2000;\n
    v0 = v14 ^ ((v15 CONCAT v14) * 0x80000 >> 32);\n
    v2 ^= v3 >> 14;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[144 + 8 * position]) = v3 ^ v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[140 + 8 * position]) = v2 ^ v0;\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[140 + 8 * position]) * 3479400805;\n
}\n
", "4209976:sub_403d38": null, "4209984:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 <= v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = a0 - v5 + 1;\n
    v2 = (0 CONCAT -1) /m v3;\n
    do\n
    {\n
        v1 = cgc_prng();\n
    } while (v1 >= v3 * v2);\n
    v4 = (0 CONCAT v1) /m v2 + v5;\n
    return v4;\n
}\n
", "4210113:sub_403dc1": null, "4210128:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4210200:sub_403e18": null, "4210208:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210262:sub_403e56": null, "4210272:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210326:sub_403e96": null, "4210336:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4210402:sub_403ee2": null, "4210416:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4210482:sub_403f32": null, "4210496:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4210550:sub_403f76": null, "4210560:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4210654:sub_403fde": null, "4210656:cgc_isnan": null, "4210679:sub_403ff7": null, "4210688:cgc_isinf": null, "4210735:sub_40402f": null, "4210736:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_404262:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40423b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40423b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40423b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_404262;\n
                if (!v4)\n
                {\n
LABEL_4041b7:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40423b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_4041b7;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40423b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4211324:sub_40427c": null, "4211328:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4211732:sub_404414": null, "4211744:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4211835:sub_40447b": null, "4211840:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4211995:sub_40451b": null, "4212000:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212108:sub_40458c": null, "4212112:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4212190:sub_4045de": null, "4212192:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4212300:sub_40464c": null, "4212304:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4212499:sub_404713": null, "4212512:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4212589:sub_40476d": null, "4212592:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v2 != a0)\n
        {\n
            v4[v5] = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            return v4;\n
        }\n
    }\n
}\n
", "4212784:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v5, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a0)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v4[v5] = v2;\n
        v4 += 1;\n
    }\n
}\n
", "4212952:sub_4048d8": null, "4212960:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4213119:sub_40497f": null, "4213120:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4213319:sub_404a47": null, "4213328:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 3101, 1);\n
}\n
", "4213451:sub_404acb": null, "4213456:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4213562:sub_404b3a": null, "4213568:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[120];\n
    unsigned int field_78;\n
    unsigned int field_7c;\n
    unsigned int field_80;\n
    struct struct_1 *field_84;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_7c)\n
        {\n
            cgc_deallocate(v4->field_7c);\n
            v12 = v4;\n
            v12->field_7c = 0;\n
            v12->field_80 = 0;\n
            v12->field_84 = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_7c)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_84 >= v11->field_7c + v11->field_80)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_7c)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_80 = cgc_strlen(v10);\n
        v0 = &v13->field_7c;\n
        if (cgc_allocate(v13->field_80, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_7c, v10);\n
        v14 = v4;\n
        v14->field_84 = v14->field_7c;\n
    }\n
    v10 = &v4->field_84->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_7c + v15->field_80;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_7c + v16->field_80)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_78 = v8;\n
    *(v7) = 0;\n
    v17->field_84 = v7 + 1;\n
    v9 = v17->field_78;\n
    return v9;\n
}\n
", "4214315:sub_404e2b": null, "4214320:cgc_write": "int cgc_write(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    cgc_transmit(1, v3, a0);\n
    if (a0 != *(&v1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4214417:sub_404e91": null, "4214432:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4214624:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char *v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_malloc();\n
    cgc_memset(v1, 0, v3 * a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4214714:sub_404fba": null, "4214720:cgc_malloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char cgc_heap_manager;\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    char v0;  // [bp-0x1d]\n
    unsigned int v1;  // [bp-0x1c]\n
    unsigned int v2;  // [bp-0x18]\n
    char v3;  // [bp-0x14]\n
    unsigned int v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!cgc_heap_manager)\n
    {\n
        cgc_allocate(0x1000, 0);\n
        v7 = v1;\n
        *((v7 + 136)) = *(&v3);\n
        *(*((v7 + 136))) = 0x1000;\n
        *((*((v7 + 136)) + 8)) = 4;\n
        *((*((v7 + 136)) + 4)) = 0x1000 - *((*((v7 + 136)) + 8));\n
        cgc_allocate(0x1000, 0);\n
        cgc_memset(*((*((v1 + 136)) + 12)), 0, 0x1000);\n
        v4 = *((*((v1 + 136)) + 12));\n
        *(v4) = 4084;\n
        *((v4 + 4)) = 0;\n
    }\n
    v4 = *((*((v1 + 136)) + 12));\n
    if (v6 > *(v4))\n
    {\n
        cgc_allocate(0x1000, 0);\n
        if (!*((v4 + 4)))\n
        {\n
            cgc_puts(v1 - 4316);\n
            cgc__terminate();\n
        }\n
        v4 = *((v4 + 4));\n
        *(v4) = 4084;\n
        v5 = 0;\n
        return v5;\n
    }\n
    else\n
    {\n
        v8 = v4;\n
        *(v8) = *(v8) - v6;\n
        v2 = v4 + 8;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if ((*((v2 + 4)) & 1))\n
                v0 = *(v2) < v6 + 8;\n
            if (!(v0 & 1))\n
                break;\n
            v2 = v2 + 8 + *(v2);\n
        }\n
        *(v2) = v6;\n
        *((v2 + 4)) = 1;\n
        v5 = v2 + 8;\n
        return v5;\n
    }\n
}\n
", "4215233:sub_4051c1": null, "4215248:cgc_free": "typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
int cgc_free(unsigned int v2)\n
{\n
    struct_1 *v0;  // [bp-0xc]\n
    struct_0 *v1;  // [bp-0x8]\n
    struct_1 *v3;  // eax\n
\n
    v1 = v2 - 8;\n
    v1->field_4 = 2;\n
    v0 = &v2 & -0x1000;\n
    v3 = v0;\n
    *(&v3) = v1->field_0 + *(&v3);\n
    return v0;\n
}\n
", "4215301:sub_405205": null, "4215312:cgc_read_short": "int cgc_read_short()\n
{\n
    char v0;  // [bp-0xc]\n
    unsigned short v1;  // [bp-0xa]\n
\n
    if (cgc_receive_bytes(&v0, 2) != 2)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    v1 = *(&v0);\n
    return v1;\n
}\n
", "4215388:sub_40525c": null, "4215392:cgc_populate_entry": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_populate_entry(unsigned int v2, unsigned int a0, char *a1, unsigned int a2, char a3, char a4, char a5)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v0;\n
    *((v4 + 336 + v2 * 60 + a0 * 4)) = cgc_malloc(30);\n
    *(*((v4 + 336 + v2 * 60 + a0 * 4))) = a5;\n
    *((*((v4 + 336 + v2 * 60 + a0 * 4)) + 2)) = a4;\n
    *((*((v4 + 336 + v2 * 60 + a0 * 4)) + 3)) = a3;\n
    *((*((v4 + 336 + v2 * 60 + a0 * 4)) + 1)) = a2;\n
    cgc_strncpy(*((v4 + 336 + v2 * 60 + a0 * 4)) + 4, a1, a2);\n
    v5 = v1;\n
    return cgc_bzero(a1, 26);\n
}\n
", "4215638:sub_405356": null, "4215648:cgc_populate_sub_entry": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_populate_sub_entry(unsigned int v2, unsigned int a0, char *a1, unsigned int a2, char a3, char a4, char a5)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v0;\n
    *((v4 + 1240 + v2 * 60 + a0 * 4)) = cgc_malloc(30);\n
    *(*((v4 + 1240 + v2 * 60 + a0 * 4))) = a5;\n
    *((*((v4 + 1240 + v2 * 60 + a0 * 4)) + 2)) = a4;\n
    *((*((v4 + 1240 + v2 * 60 + a0 * 4)) + 3)) = a3;\n
    *((*((v4 + 1240 + v2 * 60 + a0 * 4)) + 1)) = a2;\n
    cgc_strncpy(*((v4 + 1240 + v2 * 60 + a0 * 4)) + 4, a1, a2);\n
    v5 = v1;\n
    return cgc_bzero(a1, 26);\n
}\n
", "4215894:sub_405456": null, "4215904:cgc_populateEntryInfo": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_populateEntryInfo()\n
{\n
    unsigned int v0;  // [bp-0x1c8]\n
    struct_0 *v1;  // [bp-0x1c4]\n
    unsigned int v2;  // [bp-0x1c0]\n
    struct_0 *v3;  // [bp-0x1bc]\n
    unsigned int v4;  // [bp-0x1b8]\n
    struct_0 *v5;  // [bp-0x1b4]\n
    unsigned int v6;  // [bp-0x1b0]\n
    struct_0 *v7;  // [bp-0x1ac]\n
    unsigned int v8;  // [bp-0x1a8]\n
    struct_0 *v9;  // [bp-0x1a4]\n
    unsigned int v10;  // [bp-0x1a0]\n
    struct_0 *v11;  // [bp-0x19c]\n
    unsigned int v12;  // [bp-0x198]\n
    struct_0 *v13;  // [bp-0x194]\n
    unsigned int v14;  // [bp-0x190]\n
    struct_0 *v15;  // [bp-0x18c]\n
    unsigned int v16;  // [bp-0x188]\n
    struct_0 *v17;  // [bp-0x184]\n
    unsigned int v18;  // [bp-0x180]\n
    struct_0 *v19;  // [bp-0x17c]\n
    unsigned int v20;  // [bp-0x178]\n
    struct_0 *v21;  // [bp-0x174]\n
    unsigned int v22;  // [bp-0x170]\n
    struct_0 *v23;  // [bp-0x16c]\n
    unsigned int v24;  // [bp-0x168]\n
    struct_0 *v25;  // [bp-0x164]\n
    unsigned int v26;  // [bp-0x160]\n
    struct_0 *v27;  // [bp-0x15c]\n
    unsigned int v28;  // [bp-0x158]\n
    struct_0 *v29;  // [bp-0x154]\n
    unsigned int v30;  // [bp-0x150]\n
    struct_0 *v31;  // [bp-0x14c]\n
    unsigned int v32;  // [bp-0x148]\n
    struct_0 *v33;  // [bp-0x144]\n
    unsigned int v34;  // [bp-0x140]\n
    struct_0 *v35;  // [bp-0x13c]\n
    unsigned int v36;  // [bp-0x138]\n
    struct_0 *v37;  // [bp-0x134]\n
    unsigned int v38;  // [bp-0x130]\n
    struct_0 *v39;  // [bp-0x12c]\n
    unsigned int v40;  // [bp-0x128]\n
    struct_0 *v41;  // [bp-0x124]\n
    unsigned int v42;  // [bp-0x120]\n
    struct_0 *v43;  // [bp-0x11c]\n
    unsigned int v44;  // [bp-0x118]\n
    struct_0 *v45;  // [bp-0x114]\n
    unsigned int v46;  // [bp-0x110]\n
    struct_0 *v47;  // [bp-0x10c]\n
    unsigned int v48;  // [bp-0x108]\n
    struct_0 *v49;  // [bp-0x104]\n
    unsigned int v50;  // [bp-0x100]\n
    struct_0 *v51;  // [bp-0xfc]\n
    unsigned int v52;  // [bp-0xf8]\n
    struct_0 *v53;  // [bp-0xf4]\n
    unsigned int v54;  // [bp-0xf0]\n
    struct_0 *v55;  // [bp-0xec]\n
    unsigned int v56;  // [bp-0xe8]\n
    struct_0 *v57;  // [bp-0xe4]\n
    unsigned int v58;  // [bp-0xe0]\n
    struct_0 *v59;  // [bp-0xdc]\n
    unsigned int v60;  // [bp-0xd8]\n
    struct_0 *v61;  // [bp-0xd4]\n
    unsigned int v62;  // [bp-0xd0]\n
    struct_0 *v63;  // [bp-0xcc]\n
    unsigned int v64;  // [bp-0xc8]\n
    struct_0 *v65;  // [bp-0xc4]\n
    unsigned int v66;  // [bp-0xc0]\n
    struct_0 *v67;  // [bp-0xbc]\n
    unsigned int v68;  // [bp-0xb8]\n
    struct_0 *v69;  // [bp-0xb4]\n
    unsigned int v70;  // [bp-0xb0]\n
    struct_0 *v71;  // [bp-0xac]\n
    unsigned int v72;  // [bp-0xa8]\n
    struct_0 *v73;  // [bp-0xa4]\n
    unsigned int v74;  // [bp-0xa0]\n
    struct_0 *v75;  // [bp-0x9c]\n
    unsigned int v76;  // [bp-0x98]\n
    struct_0 *v77;  // [bp-0x94]\n
    unsigned int v78;  // [bp-0x90]\n
    struct_0 *v79;  // [bp-0x8c]\n
    unsigned int v80;  // [bp-0x88]\n
    struct_0 *v81;  // [bp-0x84]\n
    unsigned int v82;  // [bp-0x80]\n
    struct_0 *v83;  // [bp-0x7c]\n
    unsigned int v84;  // [bp-0x78]\n
    struct_0 *v85;  // [bp-0x74]\n
    unsigned int v86;  // [bp-0x70]\n
    struct_0 *v87;  // [bp-0x6c]\n
    unsigned int v88;  // [bp-0x68]\n
    struct_0 *v89;  // [bp-0x64]\n
    unsigned int v90;  // [bp-0x60]\n
    struct_0 *v91;  // [bp-0x5c]\n
    unsigned int v92;  // [bp-0x58]\n
    struct_0 *v93;  // [bp-0x54]\n
    unsigned int v94;  // [bp-0x50]\n
    struct_0 *v95;  // [bp-0x4c]\n
    unsigned int v96;  // [bp-0x48]\n
    struct_0 *v97;  // [bp-0x44]\n
    unsigned int v98;  // [bp-0x40]\n
    unsigned int v99;  // [bp-0x3c]\n
    struct_0 *v100;  // [bp-0x38]\n
    void* v101;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v102;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v103;  // [bp-0x2a]\n
    unsigned int v104;  // [bp-0x8]\n
    unsigned int v106;  // ebx\n
\n
    v104 = v106;\n
    v98 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_bzero(&v103, 26);\n
    v102 = 0;\n
    v101 = 0;\n
    cgc_strcpy(&v103, v98 - 4146);\n
    v0 = v102;\n
    v102 = v0 + 1;\n
    v1 = &v103;\n
    cgc_populate_entry(v101, v0, v1, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4135);\n
    v2 = v102;\n
    v102 = v2 + 1;\n
    v3 = &v103;\n
    cgc_populate_entry(v101, v2, v3, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4123);\n
    v4 = v102;\n
    v102 = v4 + 1;\n
    v5 = &v103;\n
    cgc_populate_entry(v101, v4, v5, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4113);\n
    v6 = v102;\n
    v102 = v6 + 1;\n
    v7 = &v103;\n
    cgc_populate_entry(v101, v6, v7, cgc_strlen(&v103), 1, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3619);\n
    v8 = v102;\n
    v102 = v8 + 1;\n
    v9 = &v103;\n
    cgc_populate_entry(v101, v8, v9, cgc_strlen(&v103), 0, 0, 1);\n
    cgc_strcpy(&v103, v98 - 4109);\n
    v10 = v102;\n
    v102 = v10 + 1;\n
    v11 = &v103;\n
    cgc_populate_entry(v101, v10, v11, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4095);\n
    v12 = v102;\n
    v102 = v12 + 1;\n
    v13 = &v103;\n
    cgc_populate_entry(v101, v12, v13, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4083);\n
    v14 = v102;\n
    v102 = v14 + 1;\n
    v15 = &v103;\n
    cgc_populate_entry(v101, v14, v15, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4072);\n
    v16 = v102;\n
    v102 = v16 + 1;\n
    v17 = &v103;\n
    cgc_populate_entry(v101, v16, v17, cgc_strlen(&v103), 0, 0, 4);\n
    v102 = 0;\n
    v101 = 1;\n
    cgc_strcpy(&v103, v98 - 4064);\n
    v18 = v102;\n
    v102 = v18 + 1;\n
    v19 = &v103;\n
    cgc_populate_entry(v101, v18, v19, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4058);\n
    v20 = v102;\n
    v102 = v20 + 1;\n
    v21 = &v103;\n
    cgc_populate_entry(v101, v20, v21, cgc_strlen(&v103), 0, 1, 3);\n
    cgc_strcpy(&v103, v98 - 4052);\n
    v22 = v102;\n
    v102 = v22 + 1;\n
    v23 = &v103;\n
    cgc_populate_entry(v101, v22, v23, cgc_strlen(&v103), 0, 1, 3);\n
    cgc_strcpy(&v103, v98 - 4043);\n
    v24 = v102;\n
    v102 = v24 + 1;\n
    v25 = &v103;\n
    cgc_populate_entry(v101, v24, v25, cgc_strlen(&v103), 0, 1, 3);\n
    cgc_strcpy(&v103, v98 - 4034);\n
    v26 = v102;\n
    v102 = v26 + 1;\n
    v27 = &v103;\n
    cgc_populate_entry(v101, v26, v27, cgc_strlen(&v103), 0, 0, 1);\n
    cgc_strcpy(&v103, v98 - 4020);\n
    v28 = v102;\n
    v102 = v28 + 1;\n
    v29 = &v103;\n
    cgc_populate_entry(v101, v28, v29, cgc_strlen(&v103), 1, 0, 3);\n
    v102 = 0;\n
    v101 = 2;\n
    cgc_strcpy(&v103, v98 - 4007);\n
    v30 = v102;\n
    v102 = v30 + 1;\n
    v31 = &v103;\n
    cgc_populate_entry(v101, v30, v31, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 4002);\n
    v32 = v102;\n
    v102 = v32 + 1;\n
    v33 = &v103;\n
    cgc_populate_entry(v101, v32, v33, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3996);\n
    v34 = v102;\n
    v102 = v34 + 1;\n
    v35 = &v103;\n
    cgc_populate_entry(v101, v34, v35, cgc_strlen(&v103), 0, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3990);\n
    v36 = v102;\n
    v102 = v36 + 1;\n
    v37 = &v103;\n
    cgc_populate_entry(v101, v36, v37, cgc_strlen(&v103), 0, 0, 1);\n
    cgc_strcpy(&v103, v98 - 3977);\n
    v38 = v102;\n
    v102 = v38 + 1;\n
    v39 = &v103;\n
    cgc_populate_entry(v101, v38, v39, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3958);\n
    v40 = v102;\n
    v102 = v40 + 1;\n
    v41 = &v103;\n
    cgc_populate_entry(v101, v40, v41, cgc_strlen(&v103), 1, 0, 0);\n
    v102 = 0;\n
    v101 = 3;\n
    cgc_strcpy(&v103, v98 - 3952);\n
    v42 = v102;\n
    v102 = v42 + 1;\n
    v43 = &v103;\n
    cgc_populate_entry(v101, v42, v43, cgc_strlen(&v103), 1, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3945);\n
    v44 = v102;\n
    v102 = v44 + 1;\n
    v45 = &v103;\n
    cgc_populate_entry(v101, v44, v45, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 4015);\n
    v46 = v102;\n
    v102 = v46 + 1;\n
    v47 = &v103;\n
    cgc_populate_entry(v101, v46, v47, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3940);\n
    v48 = v102;\n
    v102 = v48 + 1;\n
    v49 = &v103;\n
    cgc_populate_entry(v101, v48, v49, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3930);\n
    v50 = v102;\n
    v102 = v50 + 1;\n
    v51 = &v103;\n
    cgc_populate_entry(v101, v50, v51, cgc_strlen(&v103), 0, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3920);\n
    v52 = v102;\n
    v102 = v52 + 1;\n
    v53 = &v103;\n
    cgc_populate_entry(v101, v52, v53, cgc_strlen(&v103), 1, 0, 4);\n
    v102 = 0;\n
    v101 = 4;\n
    cgc_strcpy(&v103, v98 - 3902);\n
    v54 = v102;\n
    v102 = v54 + 1;\n
    v55 = &v103;\n
    cgc_populate_entry(v101, v54, v55, cgc_strlen(&v103), 1, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3945);\n
    v56 = v102;\n
    v102 = v56 + 1;\n
    v57 = &v103;\n
    cgc_populate_entry(v101, v56, v57, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3895);\n
    v58 = v102;\n
    v102 = v58 + 1;\n
    v59 = &v103;\n
    cgc_populate_entry(v101, v58, v59, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3940);\n
    v60 = v102;\n
    v102 = v60 + 1;\n
    v61 = &v103;\n
    cgc_populate_entry(v101, v60, v61, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3889);\n
    v62 = v102;\n
    v102 = v62 + 1;\n
    v63 = &v103;\n
    cgc_populate_entry(v101, v62, v63, cgc_strlen(&v103), 1, 0, 4);\n
    v102 = 0;\n
    v101 = 5;\n
    cgc_strcpy(&v103, v98 - 4064);\n
    v64 = v102;\n
    v102 = v64 + 1;\n
    v65 = &v103;\n
    cgc_populate_entry(v101, v64, v65, cgc_strlen(&v103), 1, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3877);\n
    v66 = v102;\n
    v102 = v66 + 1;\n
    v67 = &v103;\n
    cgc_populate_entry(v101, v66, v67, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3871);\n
    v68 = v102;\n
    v102 = v68 + 1;\n
    v69 = &v103;\n
    cgc_populate_entry(v101, v68, v69, cgc_strlen(&v103), 0, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3858);\n
    v70 = v102;\n
    v102 = v70 + 1;\n
    v71 = &v103;\n
    cgc_populate_entry(v101, v70, v71, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3850);\n
    v72 = v102;\n
    v102 = v72 + 1;\n
    v73 = &v103;\n
    cgc_populate_entry(v101, v72, v73, cgc_strlen(&v103), 0, 0, 4);\n
    cgc_strcpy(&v103, v98 - 3831);\n
    v74 = v102;\n
    v102 = v74 + 1;\n
    v75 = &v103;\n
    cgc_populate_entry(v101, v74, v75, cgc_strlen(&v103), 1, 0, 2);\n
    v102 = 0;\n
    v101 = 6;\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v76 = v102;\n
    v102 = v76 + 1;\n
    v77 = &v103;\n
    cgc_populate_entry(v101, v76, v77, cgc_strlen(&v103), 0, 0, 5);\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v78 = v102;\n
    v102 = v78 + 1;\n
    v79 = &v103;\n
    cgc_populate_entry(v101, v78, v79, cgc_strlen(&v103), 0, 0, 5);\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v80 = v102;\n
    v102 = v80 + 1;\n
    v81 = &v103;\n
    cgc_populate_entry(v101, v80, v81, cgc_strlen(&v103), 0, 0, 5);\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v82 = v102;\n
    v102 = v82 + 1;\n
    v83 = &v103;\n
    cgc_populate_entry(v101, v82, v83, cgc_strlen(&v103), 0, 0, 5);\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v84 = v102;\n
    v102 = v84 + 1;\n
    v85 = &v103;\n
    cgc_populate_entry(v101, v84, v85, cgc_strlen(&v103), 0, 0, 5);\n
    cgc_strcpy(&v103, v98 - 3100);\n
    v86 = v102;\n
    v102 = v86 + 1;\n
    v87 = &v103;\n
    cgc_populate_entry(v101, v86, v87, cgc_strlen(&v103), 0, 0, 5);\n
    v102 = 0;\n
    v101 = 7;\n
    cgc_strcpy(&v103, v98 - 4128);\n
    v88 = v102;\n
    v102 = v88 + 1;\n
    v89 = &v103;\n
    cgc_populate_entry(v101, v88, v89, cgc_strlen(&v103), 1, 1, 3);\n
    cgc_strcpy(&v103, v98 - 3824);\n
    v90 = v102;\n
    v102 = v90 + 1;\n
    v91 = &v103;\n
    cgc_populate_entry(v101, v90, v91, cgc_strlen(&v103), 1, 0, 3);\n
    cgc_strcpy(&v103, v98 - 3816);\n
    v92 = v102;\n
    v102 = v92 + 1;\n
    v93 = &v103;\n
    cgc_populate_entry(v101, v92, v93, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3811);\n
    v94 = v102;\n
    v102 = v94 + 1;\n
    v95 = &v103;\n
    cgc_populate_entry(v101, v94, v95, cgc_strlen(&v103), 0, 0, 4);\n
    cgc_strcpy(&v103, v98 - 4113);\n
    v96 = v102;\n
    v102 = v96 + 1;\n
    v97 = &v103;\n
    cgc_populate_entry(v101, v96, v97, cgc_strlen(&v103), 0, 0, 0);\n
    cgc_strcpy(&v103, v98 - 3799);\n
    v99 = v102;\n
    v102 = v99 + 1;\n
    v100 = &v103;\n
    return cgc_populate_entry(v101, v99, v100, cgc_strlen(&v103), 1, 0, 4);\n
}\n
", "4222251:sub_406d2b": null, "4222256:cgc_populateSubEntryInfo": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_populateSubEntryInfo()\n
{\n
    unsigned int v0;  // [bp-0x1a0]\n
    struct_0 *v1;  // [bp-0x19c]\n
    unsigned int v2;  // [bp-0x198]\n
    struct_0 *v3;  // [bp-0x194]\n
    unsigned int v4;  // [bp-0x190]\n
    struct_0 *v5;  // [bp-0x18c]\n
    unsigned int v6;  // [bp-0x188]\n
    struct_0 *v7;  // [bp-0x184]\n
    unsigned int v8;  // [bp-0x180]\n
    struct_0 *v9;  // [bp-0x17c]\n
    unsigned int v10;  // [bp-0x178]\n
    struct_0 *v11;  // [bp-0x174]\n
    unsigned int v12;  // [bp-0x170]\n
    struct_0 *v13;  // [bp-0x16c]\n
    unsigned int v14;  // [bp-0x168]\n
    struct_0 *v15;  // [bp-0x164]\n
    unsigned int v16;  // [bp-0x160]\n
    struct_0 *v17;  // [bp-0x15c]\n
    unsigned int v18;  // [bp-0x158]\n
    struct_0 *v19;  // [bp-0x154]\n
    unsigned int v20;  // [bp-0x150]\n
    struct_0 *v21;  // [bp-0x14c]\n
    unsigned int v22;  // [bp-0x148]\n
    struct_0 *v23;  // [bp-0x144]\n
    unsigned int v24;  // [bp-0x140]\n
    struct_0 *v25;  // [bp-0x13c]\n
    unsigned int v26;  // [bp-0x138]\n
    struct_0 *v27;  // [bp-0x134]\n
    unsigned int v28;  // [bp-0x130]\n
    struct_0 *v29;  // [bp-0x12c]\n
    unsigned int v30;  // [bp-0x128]\n
    struct_0 *v31;  // [bp-0x124]\n
    unsigned int v32;  // [bp-0x120]\n
    struct_0 *v33;  // [bp-0x11c]\n
    unsigned int v34;  // [bp-0x118]\n
    struct_0 *v35;  // [bp-0x114]\n
    unsigned int v36;  // [bp-0x110]\n
    struct_0 *v37;  // [bp-0x10c]\n
    unsigned int v38;  // [bp-0x108]\n
    struct_0 *v39;  // [bp-0x104]\n
    unsigned int v40;  // [bp-0x100]\n
    struct_0 *v41;  // [bp-0xfc]\n
    unsigned int v42;  // [bp-0xf8]\n
    struct_0 *v43;  // [bp-0xf4]\n
    unsigned int v44;  // [bp-0xf0]\n
    struct_0 *v45;  // [bp-0xec]\n
    unsigned int v46;  // [bp-0xe8]\n
    struct_0 *v47;  // [bp-0xe4]\n
    unsigned int v48;  // [bp-0xe0]\n
    struct_0 *v49;  // [bp-0xdc]\n
    unsigned int v50;  // [bp-0xd8]\n
    struct_0 *v51;  // [bp-0xd4]\n
    unsigned int v52;  // [bp-0xd0]\n
    struct_0 *v53;  // [bp-0xcc]\n
    unsigned int v54;  // [bp-0xc8]\n
    struct_0 *v55;  // [bp-0xc4]\n
    unsigned int v56;  // [bp-0xc0]\n
    struct_0 *v57;  // [bp-0xbc]\n
    unsigned int v58;  // [bp-0xb8]\n
    struct_0 *v59;  // [bp-0xb4]\n
    unsigned int v60;  // [bp-0xb0]\n
    struct_0 *v61;  // [bp-0xac]\n
    unsigned int v62;  // [bp-0xa8]\n
    struct_0 *v63;  // [bp-0xa4]\n
    unsigned int v64;  // [bp-0xa0]\n
    struct_0 *v65;  // [bp-0x9c]\n
    unsigned int v66;  // [bp-0x98]\n
    struct_0 *v67;  // [bp-0x94]\n
    unsigned int v68;  // [bp-0x90]\n
    struct_0 *v69;  // [bp-0x8c]\n
    unsigned int v70;  // [bp-0x88]\n
    struct_0 *v71;  // [bp-0x84]\n
    unsigned int v72;  // [bp-0x80]\n
    struct_0 *v73;  // [bp-0x7c]\n
    unsigned int v74;  // [bp-0x78]\n
    struct_0 *v75;  // [bp-0x74]\n
    unsigned int v76;  // [bp-0x70]\n
    struct_0 *v77;  // [bp-0x6c]\n
    unsigned int v78;  // [bp-0x68]\n
    struct_0 *v79;  // [bp-0x64]\n
    unsigned int v80;  // [bp-0x60]\n
    struct_0 *v81;  // [bp-0x5c]\n
    unsigned int v82;  // [bp-0x58]\n
    struct_0 *v83;  // [bp-0x54]\n
    unsigned int v84;  // [bp-0x50]\n
    struct_0 *v85;  // [bp-0x4c]\n
    unsigned int v86;  // [bp-0x48]\n
    struct_0 *v87;  // [bp-0x44]\n
    unsigned int v88;  // [bp-0x40]\n
    unsigned int v89;  // [bp-0x3c]\n
    struct_0 *v90;  // [bp-0x38]\n
    void* v91;  // [bp-0x34], Other Possible Types: unsigned int\n
    void* v92;  // [bp-0x30], Other Possible Types: unsigned int\n
    char v93;  // [bp-0x2a]\n
    unsigned int v94;  // [bp-0x8]\n
    unsigned int v96;  // ebx\n
\n
    v94 = v96;\n
    v88 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_bzero(&v93, 26);\n
    v92 = 0;\n
    v91 = 0;\n
    cgc_strcpy(&v93, v88 - 4007);\n
    v0 = v92;\n
    v92 = v0 + 1;\n
    v1 = &v93;\n
    cgc_populate_sub_entry(v91, v0, v1, cgc_strlen(&v93), 1, 1, 3);\n
    cgc_strcpy(&v93, v88 - 4002);\n
    v2 = v92;\n
    v92 = v2 + 1;\n
    v3 = &v93;\n
    cgc_populate_sub_entry(v91, v2, v3, cgc_strlen(&v93), 1, 1, 3);\n
    cgc_strcpy(&v93, v88 - 3785);\n
    v4 = v92;\n
    v92 = v4 + 1;\n
    v5 = &v93;\n
    cgc_populate_sub_entry(v91, v4, v5, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3723);\n
    v6 = v92;\n
    v92 = v6 + 1;\n
    v7 = &v93;\n
    cgc_populate_sub_entry(v91, v6, v7, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3778);\n
    v8 = v92;\n
    v92 = v8 + 1;\n
    v9 = &v93;\n
    cgc_populate_sub_entry(v91, v8, v9, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3765);\n
    v10 = v92;\n
    v92 = v10 + 1;\n
    v11 = &v93;\n
    cgc_populate_sub_entry(v91, v10, v11, cgc_strlen(&v93), 1, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3748);\n
    v12 = v92;\n
    v92 = v12 + 1;\n
    v13 = &v93;\n
    cgc_populate_sub_entry(v91, v12, v13, cgc_strlen(&v93), 0, 0, 4);\n
    v92 = 0;\n
    v91 = 1;\n
    cgc_strcpy(&v93, v88 - 4007);\n
    v14 = v92;\n
    v92 = v14 + 1;\n
    v15 = &v93;\n
    cgc_populate_sub_entry(v91, v14, v15, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 4002);\n
    v16 = v92;\n
    v92 = v16 + 1;\n
    v17 = &v93;\n
    cgc_populate_sub_entry(v91, v16, v17, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3741);\n
    v18 = v92;\n
    v92 = v18 + 1;\n
    v19 = &v93;\n
    cgc_populate_sub_entry(v91, v18, v19, cgc_strlen(&v93), 0, 0, 1);\n
    cgc_strcpy(&v93, v88 - 3735);\n
    v20 = v92;\n
    v92 = v20 + 1;\n
    v21 = &v93;\n
    cgc_populate_sub_entry(v91, v20, v21, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3729);\n
    v22 = v92;\n
    v92 = v22 + 1;\n
    v23 = &v93;\n
    cgc_populate_sub_entry(v91, v22, v23, cgc_strlen(&v93), 1, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3778);\n
    v24 = v92;\n
    v92 = v24 + 1;\n
    v25 = &v93;\n
    cgc_populate_sub_entry(v91, v24, v25, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3716);\n
    v26 = v92;\n
    v92 = v26 + 1;\n
    v27 = &v93;\n
    cgc_populate_sub_entry(v91, v26, v27, cgc_strlen(&v93), 0, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3748);\n
    v28 = v92;\n
    v92 = v28 + 1;\n
    v29 = &v93;\n
    cgc_populate_sub_entry(v91, v28, v29, cgc_strlen(&v93), 1, 0, 4);\n
    v92 = 0;\n
    v91 = 2;\n
    cgc_strcpy(&v93, v88 - 4128);\n
    v30 = v92;\n
    v92 = v30 + 1;\n
    v31 = &v93;\n
    cgc_populate_sub_entry(v91, v30, v31, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3741);\n
    v32 = v92;\n
    v92 = v32 + 1;\n
    v33 = &v93;\n
    cgc_populate_sub_entry(v91, v32, v33, cgc_strlen(&v93), 1, 0, 1);\n
    cgc_strcpy(&v93, v88 - 3698);\n
    v34 = v92;\n
    v92 = v34 + 1;\n
    v35 = &v93;\n
    cgc_populate_sub_entry(v91, v34, v35, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3691);\n
    v36 = v92;\n
    v92 = v36 + 1;\n
    v37 = &v93;\n
    cgc_populate_sub_entry(v91, v36, v37, cgc_strlen(&v93), 1, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3686);\n
    v38 = v92;\n
    v92 = v38 + 1;\n
    v39 = &v93;\n
    cgc_populate_sub_entry(v91, v38, v39, cgc_strlen(&v93), 1, 0, 0);\n
    v92 = 0;\n
    v91 = 3;\n
    cgc_strcpy(&v93, v88 - 4007);\n
    v40 = v92;\n
    v92 = v40 + 1;\n
    v41 = &v93;\n
    cgc_populate_sub_entry(v91, v40, v41, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 4002);\n
    v42 = v92;\n
    v92 = v42 + 1;\n
    v43 = &v93;\n
    cgc_populate_sub_entry(v91, v42, v43, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3723);\n
    v44 = v92;\n
    v92 = v44 + 1;\n
    v45 = &v93;\n
    cgc_populate_sub_entry(v91, v44, v45, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3735);\n
    v46 = v92;\n
    v92 = v46 + 1;\n
    v47 = &v93;\n
    cgc_populate_sub_entry(v91, v46, v47, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3680);\n
    v48 = v92;\n
    v92 = v48 + 1;\n
    v49 = &v93;\n
    cgc_populate_sub_entry(v91, v48, v49, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3765);\n
    v50 = v92;\n
    v92 = v50 + 1;\n
    v51 = &v93;\n
    cgc_populate_sub_entry(v91, v50, v51, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3662);\n
    v52 = v92;\n
    v92 = v52 + 1;\n
    v53 = &v93;\n
    cgc_populate_sub_entry(v91, v52, v53, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3648);\n
    v54 = v92;\n
    v92 = v54 + 1;\n
    v55 = &v93;\n
    cgc_populate_sub_entry(v91, v54, v55, cgc_strlen(&v93), 0, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3640);\n
    v56 = v92;\n
    v92 = v56 + 1;\n
    v57 = &v93;\n
    cgc_populate_sub_entry(v91, v56, v57, cgc_strlen(&v93), 0, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3632);\n
    v58 = v92;\n
    v92 = v58 + 1;\n
    v59 = &v93;\n
    cgc_populate_sub_entry(v91, v58, v59, cgc_strlen(&v93), 0, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3748);\n
    v60 = v92;\n
    v92 = v60 + 1;\n
    v61 = &v93;\n
    cgc_populate_sub_entry(v91, v60, v61, cgc_strlen(&v93), 0, 0, 4);\n
    v92 = 0;\n
    v91 = 4;\n
    cgc_strcpy(&v93, v88 - 4128);\n
    v62 = v92;\n
    v92 = v62 + 1;\n
    v63 = &v93;\n
    cgc_populate_sub_entry(v91, v62, v63, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3698);\n
    v64 = v92;\n
    v92 = v64 + 1;\n
    v65 = &v93;\n
    cgc_populate_sub_entry(v91, v64, v65, cgc_strlen(&v93), 0, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3741);\n
    v66 = v92;\n
    v92 = v66 + 1;\n
    v67 = &v93;\n
    cgc_populate_sub_entry(v91, v66, v67, cgc_strlen(&v93), 1, 0, 2);\n
    cgc_strcpy(&v93, v88 - 3691);\n
    v68 = v92;\n
    v92 = v68 + 1;\n
    v69 = &v93;\n
    cgc_populate_sub_entry(v91, v68, v69, cgc_strlen(&v93), 1, 0, 4);\n
    cgc_strcpy(&v93, v88 - 3686);\n
    v70 = v92;\n
    v92 = v70 + 1;\n
    v71 = &v93;\n
    cgc_populate_sub_entry(v91, v70, v71, cgc_strlen(&v93), 1, 0, 0);\n
    v92 = 0;\n
    v91 = 5;\n
    cgc_strcpy(&v93, v88 - 4128);\n
    v72 = v92;\n
    v92 = v72 + 1;\n
    v73 = &v93;\n
    cgc_populate_sub_entry(v91, v72, v73, cgc_strlen(&v93), 1, 1, 3);\n
    cgc_strcpy(&v93, v88 - 3623);\n
    v74 = v92;\n
    v92 = v74 + 1;\n
    v75 = &v93;\n
    cgc_populate_sub_entry(v91, v74, v75, cgc_strlen(&v93), 1, 0, 1);\n
    cgc_strcpy(&v93, v88 - 3612);\n
    v76 = v92;\n
    v92 = v76 + 1;\n
    v77 = &v93;\n
    cgc_populate_sub_entry(v91, v76, v77, cgc_strlen(&v93), 0, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3607);\n
    v78 = v92;\n
    v92 = v78 + 1;\n
    v79 = &v93;\n
    cgc_populate_sub_entry(v91, v78, v79, cgc_strlen(&v93), 1, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3748);\n
    v80 = v92;\n
    v92 = v80 + 1;\n
    v81 = &v93;\n
    cgc_populate_sub_entry(v91, v80, v81, cgc_strlen(&v93), 0, 0, 4);\n
    v92 = 0;\n
    v91 = 6;\n
    cgc_strcpy(&v93, v88 - 4128);\n
    v82 = v92;\n
    v92 = v82 + 1;\n
    v83 = &v93;\n
    cgc_populate_sub_entry(v91, v82, v83, cgc_strlen(&v93), 1, 0, 3);\n
    cgc_strcpy(&v93, v88 - 3602);\n
    v84 = v92;\n
    v92 = v84 + 1;\n
    v85 = &v93;\n
    cgc_populate_sub_entry(v91, v84, v85, cgc_strlen(&v93), 1, 1, 3);\n
    cgc_strcpy(&v93, v88 - 3765);\n
    v86 = v92;\n
    v92 = v86 + 1;\n
    v87 = &v93;\n
    cgc_populate_sub_entry(v91, v86, v87, cgc_strlen(&v93), 1, 0, 0);\n
    cgc_strcpy(&v93, v88 - 3748);\n
    v89 = v92;\n
    v92 = v89 + 1;\n
    v90 = &v93;\n
    return cgc_populate_sub_entry(v91, v89, v90, cgc_strlen(&v93), 0, 0, 4);\n
}\n
", "4227959:sub_408377": null, "4227968:cgc_getEntryInfo": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_getEntryInfo(unsigned short v1, char a0, char a1, char a2[4])\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!a1)\n
        cgc_memcpy(a2, *((v0 + 336 + v1 * 60 + a0 * 4)), 30);\n
    else\n
        cgc_memcpy(a2, *((v0 + 1240 + v1 * 60 + a0 * 4)), 30);\n
    if (a2[2] <= 1 && a2[3] <= 1)\n
        return 1;\n
    cgc_printf(v0 - 3593);\n
    return 1;\n
}\n
", "4228174:sub_40844e": null, "4228176:cgc_verify_entry": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned int field_134;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    unsigned short field_3;\n
    unsigned short field_5;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_verify_entry(struct_1 *v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v2)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    else if (v2->field_0 > 15)\n
    {\n
        v1 = 2;\n
        return v1;\n
    }\n
    else if (v2->field_1 <= 5)\n
    {\n
        if (v2->field_1 != 3 && !(v2->field_1 == 2))\n
            goto LABEL_4084fc;\n
        if (*(&(&v2->field_2)[1]) >= v0->field_134)\n
        {\n
            v1 = 4;\n
            return v1;\n
        }\n
LABEL_4084fc:\n
        if (v2->field_2 > 26)\n
        {\n
            v1 = 5;\n
            return v1;\n
        }\n
        else if (*((&v2->field_3 + 1)) < v0->field_134)\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        else\n
        {\n
            v1 = 6;\n
            return v1;\n
        }\n
    }\n
    else\n
    {\n
        v1 = 3;\n
        return v1;\n
    }\n
}\n
", "4228425:sub_408549": null, "4228432:cgc_verify_chapter": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned int field_134;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_verify_chapter(struct_1 *v2)\n
{\n
    struct_0 *v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!v2)\n
    {\n
        v1 = 1;\n
        return v1;\n
    }\n
    else if (v2->field_0 >= 8)\n
    {\n
        v1 = 2;\n
        return v1;\n
    }\n
    else if (v2->field_1 > 15)\n
    {\n
        v1 = 3;\n
        return v1;\n
    }\n
    else if (v2->field_2 >= v0->field_134)\n
    {\n
        v1 = 4;\n
        return v1;\n
    }\n
    else if (v2->field_4 < v0->field_134)\n
    {\n
        v1 = 0;\n
        return v1;\n
    }\n
    else\n
    {\n
        v1 = 5;\n
        return v1;\n
    }\n
}\n
", "4228616:sub_408608": null, "4228624:cgc_parse_book": "typedef struct struct_0 {\n
    char padding_0[272];\n
    char field_110;\n
    char field_111;\n
    char field_112;\n
    char field_113;\n
    char field_114;\n
    char padding_115[15];\n
    char field_124;\n
    char padding_125[21];\n
    unsigned short field_13a;\n
    unsigned short field_13c;\n
    unsigned short field_13e;\n
    unsigned short field_140;\n
    unsigned short field_142;\n
    unsigned short field_144;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
    char field_1;\n
    unsigned short field_2;\n
    unsigned short field_4;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
    char field_1;\n
    char field_2;\n
    unsigned short field_3;\n
    unsigned short field_5;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_parse_book(unsigned int *v26, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0xa8]\n
    char v1;  // [bp-0x91]\n
    struct_0 *v2;  // [bp-0x90]\n
    unsigned short v3;  // [bp-0x8a]\n
    unsigned int v4;  // [bp-0x88]\n
    char v5;  // [bp-0x84]\n
    char v6;  // [bp-0x6b]\n
    char v7;  // [bp-0x6a]\n
    char v8;  // [bp-0x69]\n
    void* v9;  // [bp-0x68], Other Possible Types: unsigned int\n
    char v10;  // [bp-0x64]\n
    char v11;  // [bp-0x62]\n
    void* v12;  // [bp-0x40], Other Possible Types: unsigned int\n
    void* v13;  // [bp-0x3c], Other Possible Types: unsigned int\n
    unsigned int v14;  // [bp-0x38]\n
    void* v15;  // [bp-0x34], Other Possible Types: unsigned int\n
    struct_1 *v16;  // [bp-0x30], Other Possible Types: unsigned int\n
    unsigned int v17;  // [bp-0x2c]\n
    char v18;  // [bp-0x25]\n
    unsigned int v19;  // [bp-0x24]\n
    unsigned short v20;  // [bp-0x20]\n
    char v21;  // [bp-0x1d]\n
    void* v22;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned short v23;  // [bp-0x16]\n
    struct_2 *v24;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0x10]\n
    struct_0 *v27;  // ebx\n
    struct_0 *v28;  // eax\n
    unsigned int v29;  // ecx\n
    struct_0 *v30;  // eax\n
    unsigned int v31;  // ecx\n
    struct_0 *v32;  // eax\n
    struct_0 *v33;  // eax\n
    struct_0 *v34;  // eax\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v23 = a1;\n
    v22 = 1;\n
    v21 = 0;\n
    v20 = 0;\n
    v18 = 0;\n
    v16 = 0;\n
    while (!v16)\n
    {\n
        v16 = v26 + v23;\n
LABEL_4086cb:\n
        v15 = 0;\n
        if (*(v16) == 6 && !v21)\n
        {\n
            cgc_printf(&v2[10].padding_125[10]);\n
            cgc_printf(&v2[10].field_124);\n
            v28 = v2;\n
            v19 = &v28->padding_0[88];\n
            v17 = &v28[3].padding_0[262];\n
            v23 = *((v16 + 2));\n
            v20 = *((v16 + 4));\n
            v21 = 1;\n
            v18 = 1;\n
            goto LABEL_409035;\n
        }\n
        if (!v21)\n
        {\n
            v27 = v2;\n
            v19 = &v27->padding_0[56];\n
            v17 = &v27[1].padding_0[10];\n
            v15 = cgc_verify_chapter(v16);\n
            if (v15)\n
            {\n
                cgc_printf(&v2[10].field_111);\n
                cgc__terminate(-2);\n
            }\n
        }\n
        cgc_printf(&v2[10].padding_125[10]);\n
        if (*((v16 + 1)) > 15)\n
        {\n
            cgc_printf(&v2[10].padding_0[235]);\n
            cgc__terminate(-1);\n
        }\n
        cgc_printf(&v2[10].field_124);\n
        if (!*((v16 + 2)))\n
        {\n
LABEL_408879:\n
            v23 = *((v16 + 4));\n
            cgc_printf(&v2[10].padding_0[206]);\n
            goto LABEL_409035;\n
        }\n
        else\n
        {\n
            if (!*((v16 + 1)))\n
                goto LABEL_408879;\n
            v14 = 1;\n
            v13 = 0;\n
            v22 = 1;\n
            v24 = v26 + *((v16 + 2));\n
            v15 = cgc_verify_entry(v24);\n
            if (v15)\n
            {\n
                cgc_printf(&v2[10].padding_0[188]);\n
                cgc__terminate(-1);\n
            }\n
            while (true)\n
            {\n
                v12 = 0;\n
                if (v19 != &v2->padding_0[88])\n
                    cgc_getEntryInfo(*(v16), *(v24), 0, &v10);\n
                else\n
                    cgc_getEntryInfo(*(v16), *(v24), 1, &v10);\n
                if (v22)\n
                {\n
                    cgc_memset(&v2->padding_115, -1, *((v16 + 1)));\n
                    cgc_memset(&v2->field_124, -1, 15);\n
                    v22 = 0;\n
                    v13 = 0;\n
                    v2->field_124 = 0;\n
                    for (v9 = 0; v9 < 15; v9 += 1)\n
                    {\n
                        if (*((v17 + *(v16) * 60 + (v9 << 2))) && *((*((v17 + *(v16) * 60 + (v9 << 2))) + 3)) == 1)\n
                        {\n
                            v29 = v14;\n
                            v14 = v29 + 1;\n
                            (&v2->field_124)[v29] = v9;\n
                        }\n
                    }\n
                    v14 -= 1;\n
                    v2->field_124 = v14;\n
                }\n
                for (v8 = 1; v8 <= v14; v8 += 1)\n
                {\n
                    if (v24->field_0 == (&v2->field_124)[v8])\n
                    {\n
                        v30 = v2;\n
                        (&v30->field_124)[v8] = 70;\n
                        v30->field_124 = v30->field_124 - 1;\n
                    }\n
                }\n
                for (v7 = 1; v7 <= v13; v7 += 1)\n
                {\n
                    if (v24->field_0 == v2->padding_115[v7] && v11 != 1)\n
                    {\n
                        cgc_printf(&v2[10].padding_0[152]);\n
                        cgc__terminate();\n
                    }\n
                }\n
                v31 = v13;\n
                v13 = v31 + 1;\n
                v2->padding_115[v31] = v24->field_0;\n
                if (v10 != v24->field_1)\n
                {\n
                    v0 = v10;\n
                    cgc_printf(&v2[10].padding_0[117]);\n
                    cgc__terminate(-2, v0);\n
                }\n
                if (*(v16) == 7 && !v24->field_0)\n
                {\n
                    if (v2->field_113 == 255)\n
                        v2->field_113 = 1;\n
                    if (!v2->field_113)\n
                        v2->field_113 = 255;\n
                }\n
                if (*(v16) == 5 && v24->field_0 == 1 && *(&(&v24->field_2)[1]) > 20)\n
                    v2->field_114 = 1;\n
                if (v10 == 3)\n
                {\n
                    cgc_memcpy(&v5, v26 + *(&(&v24->field_2)[1]), v24->field_2);\n
                    if (v24->field_2 >= 26)\n
                        v6 = 0;\n
                    else\n
                        (&v5)[v24->field_2] = 0;\n
                    cgc_printf(&v2[10].padding_0[93]);\n
                    v12 = v24->field_2 + v12;\n
                }\n
                else if (v10 == 2)\n
                {\n
                    v4 = *((v26 + *(&(&v24->field_2)[1])));\n
                    cgc_printf(&v2[10].padding_0[85]);\n
                    v12 += 4;\n
                }\n
                else if (v10 != 4)\n
                {\n
                    cgc_printf(&v2[10].padding_0[85]);\n
                }\n
                else\n
                {\n
                    v3 = *(&(&v24->field_2)[1]);\n
                    if (v3 == 1)\n
                    {\n
                        cgc_printf(&v2[10].padding_0[75]);\n
                    }\n
                    else if (v3)\n
                    {\n
                        cgc_printf(&v2[10].padding_0[54]);\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(&v2[10].padding_0[65]);\n
                    }\n
                    v12 = v12;\n
                }\n
                if (!*(v16))\n
                {\n
                    if (v24->field_0 == 8)\n
                    {\n
                        if (v2->field_110 == 1)\n
                        {\n
                            v32 = v2;\n
                            v32->field_13e = *(&(&v24->field_2)[1]);\n
                            v32->field_140 = v24->field_2;\n
                            v32->field_111 = 1;\n
                        }\n
                        else\n
                        {\n
                            v33 = v2;\n
                            v33->field_13a = *(&(&v24->field_2)[1]);\n
                            v33->field_13c = v24->field_2;\n
                            v33->field_110 = 1;\n
                        }\n
                    }\n
                    else\n
                    {\n
                        if (v24->field_0 == 3 && *(&(&v24->field_2)[1]) < 11)\n
                        {\n
                            v34 = v2;\n
                            v34->field_112 = 1;\n
                            v34->field_142 = *(&(&v24->field_2)[1]);\n
                            v34->field_144 = v24->field_2;\n
                        }\n
                    }\n
                }\n
                if (!*((&v24->field_3 + 1)))\n
                    break;\n
                v24 = v26 + *((&v24->field_3 + 1));\n
                v15 = cgc_verify_entry(v24);\n
                if (v15)\n
                {\n
                    cgc_printf(&v2[10].padding_0[42]);\n
                    cgc__terminate(-1, v15);\n
                }\n
                if (!v24)\n
                    break;\n
            }\n
            v23 = *((v16 + 4));\n
            if (v2->field_124)\n
            {\n
                cgc_printf(&v2[10].padding_0[2]);\n
                v25 = -1;\n
                return v25;\n
            }\n
LABEL_409035:\n
            v1 = 1;\n
            if (!*((v16 + 4)))\n
                v1 = v21;\n
            if (!(v1 & 1))\n
            {\n
                v25 = 1;\n
                return v25;\n
            }\n
        }\n
    }\n
    if (!*((v16 + 4)) && !v18)\n
    {\n
        if (v21)\n
        {\n
            v21 = 0;\n
            if (!v20)\n
                goto LABEL_409035;\n
            v16 = v26 + v20;\n
        }\n
        goto LABEL_4086ba;\n
    }\n
    v16 = v26 + v23;\n
    v18 = 0;\n
LABEL_4086ba:\n
    goto LABEL_4086cb;\n
}\n
", "4231295:sub_40907f": null, "4231296:cgc_init": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_init()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // ebx\n
\n
    v1 = v3;\n
    v0 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_populateEntryInfo();\n
    v5 = v1;\n
    return cgc_populateSubEntryInfo();\n
}\n
", "4231335:sub_4090a7": null, "4231344:cgc_test_win": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_test_win()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1a]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v7;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = 0;\n
    for (v4 = 0; v4 < 5; v4 = v7)\n
    {\n
        if (*((v0 + v4 + 272)) == 1)\n
            v5 += 1;\n
        v7 = v4 + 1;\n
    }\n
    if (v5 == 5)\n
    {\n
        v2 = 25;\n
        cgc_printf(v0 - 3216);\n
        v1 = cgc_receive_until(&v3, 10, v2);\n
        (&v3)[v1] = 0;\n
        v7 = cgc_printf(v0 - 3182);\n
        return v7;\n
    }\n
    return v7;\n
}\n
", "4231545:sub_409179": null, "4231552:main": "typedef struct struct_0 {\n
    char padding_0[308];\n
    unsigned int field_134;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v9, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    struct_1 *v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int *v4;  // [bp-0x18]\n
    unsigned short v5;  // [bp-0x12]\n
    void* v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = 0;\n
    cgc_init();\n
    cgc_memset(&v0->padding_0[272], 0, 5);\n
    cgc_memset(&v0[1].padding_0[2], 0, 20);\n
    v6 = 0;\n
    cgc_printf(&v0[10].padding_0[9]);\n
    v5 = cgc_read_short();\n
    v0->field_134 = v5;\n
    if (v5 < 1)\n
    {\n
        cgc_printf(&v0[9].padding_0[291]);\n
        cgc__terminate();\n
    }\n
    v4 = cgc_malloc(v5);\n
    if (!v4)\n
    {\n
        cgc_printf(&v0[9].padding_0[262]);\n
        cgc__terminate();\n
    }\n
    v3 = cgc_receive_bytes(v4, v5);\n
    if (v3 != v5)\n
    {\n
        cgc_printf(&v0[9].padding_0[212]);\n
        cgc__terminate();\n
    }\n
    if (v5 < 8)\n
    {\n
        cgc_printf(&v0[9].padding_0[212]);\n
        cgc__terminate();\n
    }\n
    v2 = v4 + v6;\n
    v6 += 8;\n
    cgc_printf(&v0[9].padding_0[174]);\n
    cgc_printf(&v0[9].padding_0[162]);\n
    cgc_printf(&v0[9].padding_0[142]);\n
    cgc_printf(&v0[9].padding_0[128]);\n
    v1 = cgc_parse_book(v4, v3, v2->field_4);\n
    if (v1 == -1)\n
    {\n
        cgc_printf(&v0[9].padding_0[114]);\n
        v7 = -1;\n
        return v7;\n
    }\n
    cgc_test_win();\n
    cgc_free(v4);\n
    cgc_printf(&v0[9].padding_0[103]);\n
    v7 = 0;\n
    return v7;\n
}\n
", "4232192:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc__terminate": null, "5242892:cgc_transmit": null, "5242896:cgc_allocate": null, "5242900:cgc_rint": null, "5242904:cgc_deallocate": null, "5242908:cgc_log10": null, "5242912:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}