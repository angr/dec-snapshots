{"4202496:_init": "extern struct_0 *g_40a18c;\n
\n
int _init()\n
{\n
    if (g_40a18c)\n
    {\n
        g_40a18c();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202576:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libstdc++.so::cgc_fdwait();\n
    return;\n
}\n
", "4202592:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libstdc++.so::cgc_receive();\n
    return;\n
}\n
", "4202608:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libstdc++.so::cgc_allocate();\n
    return;\n
}\n
", "4202624:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libstdc++.so::cgc__terminate();\n
    return;\n
}\n
", "4202640:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libstdc++.so::cgc_deallocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libstdc++.so::cgc_rint();\n
    return;\n
}\n
", "4202672:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libstdc++.so::cgc_log10();\n
    return;\n
}\n
", "4202688:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libstdc++.so::cgc_transmit();\n
    return;\n
}\n
", "4202704:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libstdc++.so::cgc_pow();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 20));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 32863;\n
    v6 = v5 + 38;\n
    v7 = v5 + 38;\n
    if (v7 == v6)\n
        return v5 + 38;\n
    v7 = v5[3].field_-c;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[3].field_-c();\n
    }\n
    return v5[3].field_-c;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32799;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 38;\n
    v9 = (v6 + 38 - (v6 + 38) >> 31) + (38 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern unsigned int __dso_handle;\n
extern char completed.0;\n
extern unsigned int g_40a180;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (completed.0)\n
        return;\n
    if (g_40a180)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    completed.0 = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4203132:sub_40227c": null, "4203136:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[176];\n
    struct struct_1 *field_b0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_b0->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_b0 == v9)\n
        {\n
            v1->field_b0 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_b0 == v9)\n
    {\n
        v1->field_b0 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[176];\n
    unsigned int field_b0;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_b0;\n
    v7->field_b0 = v3;\n
    return v3;\n
}\n
", "4204024:sub_4025f8": null, "4204032:cgc_free": "typedef struct struct_0 {\n
    char padding_0[176];\n
    struct struct_1 *field_b0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: unsigned int, struct struct_1 *[2], struct_0 *, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_b0 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_b0 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_b0;\n
    v2[1] = 0;\n
    if (v9->field_b0)\n
    {\n
        v12 = v1;\n
        *((&v12->field_b0->field_0 + (v12->field_b0->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_b0 = v7;\n
    return v1;\n
}\n
", "4204496:cgc_floor": "typedef struct struct_0 {\n
    char padding_0[176];\n
    struct struct_1 *field_b0;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: unsigned int, struct struct_1 *[2], struct_0 *, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_b0 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_b0 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_b0;\n
    v2[1] = 0;\n
    if (v9->field_b0)\n
    {\n
        v12 = v1;\n
        *((&v12->field_b0->field_0 + (v12->field_b0->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_b0 = v7;\n
    return v1;\n
}\n
", "4204660:sub_402874": null, "4204672:cgc_round_away_from_zero": null, "4204826:sub_40291a": null, "4204832:cgc_round": null, "4204976:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4205068:sub_402a0c": null, "4205072:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v3 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205489:sub_402bb1": null, "4205504:cgc_float_to_str": null, "4206367:sub_402f1f": null, "4206368:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_4037f4:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    cgc_putc(*(v14));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    cgc_putc(*(v12));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    cgc_putc(*(v10));\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_4037f4;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403673;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403673:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4208651:sub_40380b": null, "4208656:cgc_vsprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_1 **a1)\n
{\n
    struct_0 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_0 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_0 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_1 **v27;  // eax\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_1 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            v24[v26] = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40404b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                v24[v26] = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            v24[v26] = 32;\n
                        else\n
                            v24[v26] = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                v24[v26] = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    v24[v26] = *(v14);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    v24[v26] = *(v12);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            v24[v26] = 48;\n
                        else\n
                            v24[v26] = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    v24[v26] = *(v10);\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40404b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403eee;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403eee:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        v24[v26] = 32;\n
                    else\n
                        v24[v26] = 48;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                v24[v26] = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    v24[v26] = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4210786:sub_404062": null, "4210800:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4210864:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4210933:sub_4040f5": null, "4210944:cgc_sprng": "typedef struct struct_0 {\n
    char padding_0[180];\n
    unsigned int field_b4;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sprng(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x1c]\n
    void* v1;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // ecx\n
    unsigned int v8;  // eax\n
    unsigned int v9;  // ecx\n
    unsigned int v12;  // eax\n
    unsigned int v13;  // ecx\n
    unsigned int v15;  // edi\n
    struct_0 *v16;  // eax\n
    unsigned int v17;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = a0;\n
    v2 = v4;\n
    for (v1 = 0; v1 < 16; v1 += 1)\n
    {\n
        v5 = v2;\n
        v6 = v3;\n
        v3 = v6 ^ v6 / 0x1000;\n
        v2 = v5 ^ ((v6 CONCAT v5) * 0x100000 >> 32);\n
        v8 = v2;\n
        v9 = v3;\n
        v3 = v9 ^ ((v9 CONCAT v8) * 0x2000000 >> 32);\n
        v2 = v8 ^ v8 * 0x2000000;\n
        v12 = v2;\n
        v13 = v3;\n
        v3 = v13 ^ v13 / 0x8000000;\n
        v2 = v12 ^ ((v13 CONCAT v12) * 32 >> 32);\n
        v15 = v2;\n
        v16 = v0;\n
        v17 = v1;\n
        *(&v16[1].padding_0[4 + 8 * v17]) = v15 * 3625897269;\n
        *(&v16[1].padding_0[8 + 8 * v17]) = (v15 * 3625897269 >> 32) + v15 * 419896726 + v3 * 3625897269;\n
    }\n
    v0->field_b4 = 0;\n
    return v0;\n
}\n
", "4211170:sub_4041e2": null, "4211184:cgc_prng": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int position;\n
\n
int cgc_prng()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // esi\n
    unsigned int v9;  // edx\n
    unsigned int v10;  // ecx\n
    unsigned int v11;  // edx\n
    unsigned int v14;  // ecx\n
    unsigned int v15;  // edx\n
\n
    v5 = v7;\n
    v4 = v8;\n
    v3 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 8 * position]);\n
    v2 = *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 8 * position]);\n
    v9 = position + 1;\n
    if (v9 < 0)\n
        v9 = position + 16;\n
    position = position + -(v9 & -0x10) + 1;\n
    v1 = *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 8 * position]);\n
    v0 = *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 8 * position]);\n
    v10 = v0;\n
    v11 = v1;\n
    v1 = v11 ^ ((v11 CONCAT v10) * 0x8000000 >> 32);\n
    v0 = v10 ^ v10 * 0x8000000;\n
    v14 = v0;\n
    v15 = v1;\n
    v1 = v15 ^ v15 / 0x2000;\n
    v0 = v14 ^ ((v15 CONCAT v14) * 0x80000 >> 32);\n
    v2 ^= v3 >> 14;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[192 + 8 * position]) = v3 ^ v1;\n
    *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 8 * position]) = v2 ^ v0;\n
    return *(&(&_GLOBAL_OFFSET_TABLE_)[188 + 8 * position]) * 3479400805;\n
}\n
", "4211448:sub_4042f8": null, "4211456:cgc_random_in_range": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_random_in_range(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (a0 <= v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v3 = a0 - v5 + 1;\n
    v2 = (0 CONCAT -1) /m v3;\n
    do\n
    {\n
        v1 = cgc_prng();\n
    } while (v1 >= v3 * v2);\n
    v4 = (0 CONCAT v1) /m v2 + v5;\n
    return v4;\n
}\n
", "4211585:sub_404381": null, "4211600:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4211672:sub_4043d8": null, "4211680:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211734:sub_404416": null, "4211744:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211798:sub_404456": null, "4211808:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211866:sub_40449a": null, "4211872:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211930:sub_4044da": null, "4211936:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4212002:sub_404522": null, "4212016:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4212082:sub_404572": null, "4212096:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212150:sub_4045b6": null, "4212160:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4212254:sub_40461e": null, "4212256:cgc_isnan": null, "4212279:sub_404637": null, "4212288:cgc_isinf": null, "4212335:sub_40466f": null, "4212336:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4048a2:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40487b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40487b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40487b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4048a2;\n
                if (!v4)\n
                {\n
LABEL_4047f7:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40487b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_4047f7;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40487b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4212924:sub_4048bc": null, "4212928:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4213332:sub_404a54": null, "4213344:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4213435:sub_404abb": null, "4213440:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4213595:sub_404b5b": null, "4213600:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4213708:sub_404bcc": null, "4213712:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4213790:sub_404c1e": null, "4213792:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4213900:sub_404c8c": null, "4213904:cgc_stricmp": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_stricmp(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char v1;  // [bp-0xd]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v3))\n
        {\n
            v0 = cgc_tolower(*(v3));\n
            v1 = v0 == cgc_tolower(*(a0));\n
        }\n
        if (!(v1 & 1))\n
            break;\n
        v3 += 1;\n
        a0 += 1;\n
    }\n
    return *(v3) - *(a0);\n
}\n
", "4214061:sub_404d2d": null, "4214064:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4214259:sub_404df3": null, "4214272:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4214349:sub_404e4d": null, "4214352:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        if (!(*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
        cgc_receive(v9, &v2, 0x400);\n
    }\n
}\n
", "4214674:sub_404f92": null, "4214688:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4214791:sub_405007": null, "4214800:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v4 >= a1)\n
            return v4;\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        else if (v3)\n
        {\n
            if (v2 == a0)\n
                return v4;\n
            v4[v5] = v2;\n
            v4 += 1;\n
        }\n
        else\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
    }\n
}\n
", "4215014:sub_4050e6": null, "4215024:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (v3)\n
        {\n
            v2 = 0;\n
            v0 = &v2;\n
            if (cgc_receive(0, v6 + v4, v3))\n
            {\n
                v5 = -1;\n
                return v5;\n
            }\n
            v3 -= v2;\n
            v4 = v2 + v4;\n
        }\n
        else\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
    }\n
}\n
", "4215207:sub_4051a7": null, "4215216:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4215375:sub_40524f": null, "4215376:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4215575:sub_405317": null, "4215584:cgc_puts": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    void* v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0xc], Other Possible Types: char\n
    unsigned int v6;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    if (!v5)\n
        return v5;\n
    v2 = cgc_strlen(v5);\n
    while (true)\n
    {\n
        v6 = v3;\n
        if (v6 >= v2)\n
        {\n
            v4 = 0;\n
            while (true)\n
            {\n
                if (v4 == 1)\n
                    return v6;\n
                v0 = &v4;\n
                v6 = cgc_transmit(1, v1 - 7793, 1);\n
                if (v6)\n
                    return v6;\n
            }\n
        }\n
        else\n
        {\n
            v0 = &v4;\n
            v6 = cgc_transmit(1, v5 + v3, v2 - v3);\n
            if (v6)\n
                return v6;\n
            v3 = *(&v4) + v3;\n
        }\n
    }\n
}\n
", "4215812:sub_405404": null, "4215824:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4215930:sub_40547a": null, "4215936:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[160];\n
    unsigned int field_a0;\n
    unsigned int field_a4;\n
    unsigned int field_a8;\n
    struct struct_1 *field_ac;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_a4)\n
        {\n
            cgc_deallocate(v4->field_a4);\n
            v12 = v4;\n
            v12->field_a4 = 0;\n
            v12->field_a8 = 0;\n
            v12->field_ac = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_a4)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_ac >= v11->field_a4 + v11->field_a8)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_a4)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_a8 = cgc_strlen(v10);\n
        v0 = &v13->field_a4;\n
        if (cgc_allocate(v13->field_a8, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_a4, v10);\n
        v14 = v4;\n
        v14->field_ac = v14->field_a4;\n
    }\n
    v10 = &v4->field_ac->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_a4 + v15->field_a8;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_a4 + v16->field_a8)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_a0 = v8;\n
    *(v7) = 0;\n
    v17->field_ac = v7 + 1;\n
    v9 = v17->field_a0;\n
    return v9;\n
}\n
", "4216683:sub_40576b": null, "4216688:cgc_write": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_write(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    while (true)\n
    {\n
        if (v2 >= a0)\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        v0 = &v3;\n
        if (cgc_transmit(1, v5 + v2, a0 - v2))\n
        {\n
            v4 = v2;\n
            return v4;\n
        }\n
        v2 = *(&v3) + v2;\n
    }\n
}\n
", "4216853:sub_405815": null, "4216864:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4217056:_ZN15CCommandHandlerC2Ev": "typedef struct struct_0 {\n
    char padding_0[12880];\n
    unsigned int field_3250;\n
} struct_0;\n
\n
int CCommandHandler::__base_ctor__(struct_0 *v0)\n
{\n
    v0->field_3250 = 0;\n
    return cgc_memset(v0, 0, 12880);\n
}\n
", "4217123:sub_405923": null, "4217136:_ZN15CCommandHandlerD2Ev": "int CCommandHandler::__base_dtor__(unsigned int v0)\n
{\n
    return v0;\n
}\n
", "4217144:sub_405938": null, "4217152:_ZN15CCommandHandler15RegisterCommandEPKcS1_PFvPcE": "typedef struct struct_0 {\n
    char padding_0[12880];\n
    unsigned int field_3250;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CCommandHandler::RegisterCommand(struct_0 *v3, unsigned int a0, unsigned int a1, unsigned int a2)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    char v2;  // [bp-0xd]\n
    struct_0 *v4;  // ecx\n
    struct_0 *v5;  // ecx\n
    struct_0 *v6;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v3;\n
    if (v1->field_3250 == 20)\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    else if (!a0)\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
    else if (a2)\n
    {\n
        v4 = v1;\n
        cgc_strncpy(&v4->padding_0[644 * v4->field_3250], a0, 128);\n
        v5 = v1;\n
        cgc_strncpy(&v5->padding_0[644 * v5->field_3250 + 128], a1, 0x200);\n
        v6 = v1;\n
        *(&v6->padding_0[640 + 644 * v6->field_3250]) = a2;\n
        v6->field_3250 = v6->field_3250 + 1;\n
        v2 = 1;\n
        return v2 & 1;\n
    }\n
    else\n
    {\n
        v2 = 0;\n
        return v2 & 1;\n
    }\n
}\n
", "4217401:sub_405a39": null, "4217408:_ZN15CCommandHandler18GetCommandFunctionEPKc": "typedef struct struct_0 {\n
    char padding_0[12880];\n
    unsigned int field_3250;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CCommandHandler::GetCommandFunction(struct_0 *v4, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    struct_0 *v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v4;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v2 >= v1->field_3250)\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (cgc_stricmp(&v1->padding_0[644 * v2], a0))\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = *(&v1->padding_0[640 + 644 * v2]);\n
            return v3;\n
        }\n
    }\n
}\n
", "4217567:sub_405adf": null, "4217568:_ZN15CCommandHandler3RunEv": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CCommandHandler::Run(unsigned int v6)\n
{\n
    struct struct_0 **v0;  // [bp-0x41c]\n
    unsigned int v1;  // [bp-0x418]\n
    void* v2;  // [bp-0x414]\n
    struct struct_0 **v3;  // [bp-0x410]\n
    char *v4;  // [bp-0x40c]\n
    char v5;  // [bp-0x408]\n
    unsigned int v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = v6;\n
    while (true)\n
    {\n
        while (true)\n
        {\n
            cgc_printf(v1 - 8228);\n
            cgc_getline(&v5, 0x400);\n
            v4 = cgc_strtok(&v5, v1 - 8227);\n
            if (v4)\n
                break;\n
            cgc_printf(v1 - 8500);\n
        }\n
        v7 = cgc_stricmp(v4, v1 - 8482);\n
        if (!v7)\n
            break;\n
        if (!cgc_stricmp(v4, v1 - 8477))\n
        {\n
            CCommandHandler::ListCommands();\n
        }\n
        else\n
        {\n
            v3 = CCommandHandler::GetCommandFunction(v2, v4);\n
            if (v3)\n
            {\n
                v0 = v3;\n
                v0(cgc_strtok(NULL, v1 - 7792));\n
            }\n
            else\n
            {\n
                cgc_printf(v1 - 8500);\n
            }\n
        }\n
    }\n
    return v7;\n
}\n
", "4217987:sub_405c83": null, "4218000:_ZN15CCommandHandler12ListCommandsEv": "typedef struct struct_0 {\n
    char padding_0[12880];\n
    unsigned int field_3250;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int CCommandHandler::ListCommands(struct_0 *v6)\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
    struct_0 *v8;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // ebx\n
\n
    v5 = v7;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v6;\n
    cgc_printf(\"Available commands:\\n
\");\n
    for (v4 = 0; v4 < v3->field_3250; v4 += 1)\n
    {\n
        v8 = v3;\n
        v10 = 128 + v8 + 0x284 * v4;\n
        v0 = v8 + 0x284 * v4;\n
        v1 = v10;\n
        cgc_printf(v2 - 8454);\n
    }\n
    v11 = v5;\n
    return v4;\n
}\n
", "4218143:sub_405d1f": null, "4218144:_Z10recv_bytesPhm": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int recv_bytes(unsigned int v4, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    void* v2;  // [bp-0x10]\n
    void* v3;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = 0;\n
    v2 = 0;\n
    while (true)\n
    {\n
        if (v3 >= a0)\n
            return v3;\n
        v0 = &v2;\n
        if (cgc_receive(0, v4 + v3, 1))\n
            return v3;\n
        if (v2 != 1)\n
            return v3;\n
        v3 += 1;\n
    }\n
}\n
", "4218297:sub_405db9": null, "4218304:cgc_My64Encode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_My64Encode(unsigned int v13, unsigned int a0, unsigned int *a1)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x30]\n
    unsigned int v2;  // [bp-0x2c]\n
    unsigned int v3;  // [bp-0x28]\n
    unsigned int v4;  // [bp-0x24]\n
    char v5;  // [bp-0x20]\n
    char v6;  // [bp-0x1f]\n
    char v7;  // [bp-0x1e]\n
    char v8;  // [bp-0x1d]\n
    unsigned int v9;  // [bp-0x1c]\n
    unsigned int v10;  // [bp-0x18]\n
    char *v11;  // [bp-0x14]\n
    char *v12;  // [bp-0x10]\n
    unsigned int v14;  // eax\n
    unsigned int v15;  // ecx\n
    unsigned int v16;  // eax\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v13;\n
    v14 = v1;\n
    v15 = (v1 * 2863311531 >> 32 >> 1) * 3;\n
    v2 = v14 - v15;\n
    if (v14 == v15)\n
    {\n
        v9 = v13;\n
        v10 = (0 CONCAT v9 * 4) /m 3;\n
    }\n
    else if (v2 == 1)\n
    {\n
        v9 = v13 + 2;\n
        v10 = (0 CONCAT v9 * 4) /m 3;\n
    }\n
    else if (v2 == 2)\n
    {\n
        v9 = v13 + 1;\n
        v10 = (0 CONCAT v9 * 4) /m 3;\n
    }\n
    v11 = cgc_malloc(v9);\n
    if (!v11)\n
    {\n
        cgc_printf(v0 - 8445);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v11, v9);\n
    cgc_memcpy(v11, a0, v13);\n
    v12 = cgc_malloc(v10);\n
    if (!v12)\n
    {\n
        cgc_printf(v0 - 8445);\n
        cgc__terminate();\n
    }\n
    cgc_bzero(v12, v10);\n
    v4 = 0;\n
    for (v3 = 0; v4 < v9; v3 += 4)\n
    {\n
        v16 = v0;\n
        v8 = v11[v4] >> 2;\n
        v7 = (v11[v4] & 3) * 16 | (v11[1 + v4] >> 4);\n
        v6 = (v11[1 + v4] & 15) * 4 | ((v11[2 + v4] & 192) >> 6);\n
        v5 = v11[2 + v4] & 63;\n
        v12[v3] = *((v16 + v8 + 60));\n
        v12[1 + v3] = *((v16 + v7 + 60));\n
        v12[2 + v3] = *((v16 + v6 + 60));\n
        v12[3 + v3] = *((v16 + v5 + 60));\n
        v4 += 3;\n
    }\n
    cgc_free(v11);\n
    *(a1) = v10;\n
    return v12;\n
}\n
", "4218960:cgc_encode_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_encode_command(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x420]\n
    unsigned int v1;  // [bp-0x41c]\n
    unsigned int v2;  // [bp-0x418]\n
    void* v3;  // [bp-0x414], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0x410]\n
    unsigned int v5;  // [bp-0x40c]\n
    char v6;  // [bp-0x408]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
    unsigned int v10;  // eax\n
\n
    v7 = v9;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"How many bytes of data:\\n
\");\n
    cgc_getline(&v6, 100);\n
    v10 = cgc_atoi(&v6);\n
    v2 = v10;\n
    if (v2 <= 0)\n
        return v10;\n
    v1 = cgc_malloc(v2);\n
    if (!v1)\n
    {\n
        cgc_printf(v0 - 8445);\n
        cgc__terminate();\n
    }\n
    cgc_printf(v0 - 8400);\n
    cgc_receive_bytes(v1, v2);\n
    v5 = cgc_My64Encode(v2, v1, &v4);\n
    cgc_flush_input(0);\n
    for (v3 = 0; v3 < v4; v3 += 1)\n
    {\n
        cgc_printf(v0 - 8373);\n
    }\n
    cgc_printf(v0 - 7793);\n
    v10 = cgc_free(v5);\n
    return v10;\n
}\n
", "4219412:sub_406214": null, "4219424:cgc_Add": "extern char _GLOBAL_OFFSET_TABLE_[318];\n
\n
int cgc_Add(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0[318];  // [bp-0x14]\n
    char v1;  // [bp-0xe]\n
    char v2;  // [bp-0xd]\n
    char v4[318];  // esi\n
\n
    *(&v0[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v2 = 0; v2 < v0[316]; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < v0[317]; v1 += 1)\n
        {\n
            v4 = v0;\n
            *((a1 + v2 * 4 + v4[316] * v1 * 4)) = *((v3 + v2 * 4 + v4[316] * v1 * 4)) + *((a0 + v2 * 4 + v4[316] * v1 * 4));\n
        }\n
    }\n
    return v2;\n
}\n
", "4219636:sub_4062f4": null, "4219648:cgc_Sub": "extern char _GLOBAL_OFFSET_TABLE_[318];\n
\n
int cgc_Sub(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0[318];  // [bp-0x14]\n
    char v1;  // [bp-0xe]\n
    char v2;  // [bp-0xd]\n
    char v4[318];  // esi\n
\n
    *(&v0[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v2 = 0; v2 < v0[316]; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < v0[317]; v1 += 1)\n
        {\n
            v4 = v0;\n
            *((a1 + v2 * 4 + v4[316] * v1 * 4)) = *((v3 + v2 * 4 + v4[316] * v1 * 4)) - *((a0 + v2 * 4 + v4[316] * v1 * 4));\n
        }\n
    }\n
    return v2;\n
}\n
", "4219860:sub_4063d4": null, "4219872:cgc_ScalerMultiply": "extern char _GLOBAL_OFFSET_TABLE_[318];\n
\n
int cgc_ScalerMultiply(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    char v0[318];  // [bp-0x10]\n
    char v1;  // [bp-0xa]\n
    char v2;  // [bp-0x9]\n
    char v4[318];  // esi\n
\n
    *(&v0[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v2 = 0; v2 < v0[316]; v2 += 1)\n
    {\n
        for (v1 = 0; v1 < v0[317]; v1 += 1)\n
        {\n
            v4 = v0;\n
            *((a1 + v2 * 4 + v4[316] * v1 * 4)) = a0 * *((v3 + v2 * 4 + v4[316] * v1 * 4));\n
        }\n
    }\n
    return v2;\n
}\n
", "4220057:sub_406499": null, "4220064:cgc_PrintMenu": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_PrintMenu()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v3;  // ebx\n
    unsigned int v4;  // ebx\n
\n
    v1 = v3;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_puts(\"Matrix Calculator\");\n
    cgc_puts(v0 - 8334);\n
    cgc_puts(v0 - 8314);\n
    cgc_puts(v0 - 8289);\n
    cgc_puts(v0 - 8261);\n
    v4 = v1;\n
    return cgc_printf(v0 - 8238);\n
}\n
", "4220191:sub_40651f": null, "4220192:cgc_ReadMatrix": "extern char X;\n
extern char _GLOBAL_OFFSET_TABLE_[318];\n
\n
int cgc_ReadMatrix(unsigned int v6)\n
{\n
    char v0[318];  // [bp-0x20]\n
    unsigned short v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x1a]\n
    char v3;  // [bp-0x12]\n
    char v4;  // [bp-0x11]\n
    unsigned int v5;  // [bp-0x10]\n
    char v7[318];  // eax\n
\n
    *(&v0[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    if (X)\n
    {\n
LABEL_406677:\n
        v1 = v3 * v4;\n
        if (v1 > 255)\n
        {\n
            cgc_puts(&v0[25 + 263]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        cgc_puts(&v0[25 + 246]);\n
        for (v4 = 0; v4 < v0[316]; v4 += 1)\n
        {\n
            for (v3 = 0; v3 < v0[317]; v3 += 1)\n
            {\n
                cgc_printf(&v0[25 + 222]);\n
                if (!cgc_receive_until(&v2, 10, 7))\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                *((v6 + v4 * 4 + v0[316] * v3 * 4)) = cgc_atoi(&v2);\n
            }\n
        }\n
        v5 = 1;\n
        return v5;\n
    }\n
    else\n
    {\n
        cgc_printf(&v0[25 + 279]);\n
        if (!cgc_receive_until(&v2, 10, 7))\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v4 = cgc_atoi(&v2);\n
        if (v4 >= 1 && v4 <= 20)\n
        {\n
            cgc_printf(&v0[25 + 267]);\n
            if (!cgc_receive_until(&v2, 10, 7))\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
            v3 = cgc_atoi(&v2);\n
            if (v3 >= 1 && v3 <= 20)\n
            {\n
                v7 = v0;\n
                v7[316] = v4;\n
                v7[317] = v3;\n
                goto LABEL_406677;\n
            }\n
            cgc_puts(&v0[25 + 275]);\n
            v5 = 0;\n
            return v5;\n
        }\n
        cgc_puts(&v0[25 + 275]);\n
        v5 = 0;\n
        return v5;\n
    }\n
}\n
", "4220842:sub_4067aa": null, "4220848:cgc_PrintMatrix": "extern char _GLOBAL_OFFSET_TABLE_[318];\n
\n
int cgc_PrintMatrix(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    char v1[318];  // [bp-0x10]\n
    char v2;  // [bp-0xa]\n
    char v3;  // [bp-0x9]\n
    char v5[318];  // ebx\n
\n
    *(&v1[0]) = &_GLOBAL_OFFSET_TABLE_[0];\n
    for (v3 = 0; v3 < v1[316]; v3 += 1)\n
    {\n
        for (v2 = 0; v2 < v1[317]; v2 += 1)\n
        {\n
            v5 = v1;\n
            v0 = *((v4 + v3 * 4 + v5[316] * v2 * 4));\n
            cgc_printf(&v5[25 + 214]);\n
        }\n
        cgc_puts(&v1[24 + 160]);\n
    }\n
    return v3;\n
}\n
", "4221024:cgc_matrix_add": "extern char X;\n
extern char Y;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_matrix_add()\n
{\n
    unsigned int v0;  // [bp-0xc08]\n
    char v1;  // [bp-0xc00]\n
    char v2;  // [bp-0x804]\n
    char v3;  // [bp-0x408]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    X = 0;\n
    Y = 0;\n
    cgc_puts(\"First matrix\");\n
    cgc_puts(v0 - 8147);\n
    if (!cgc_ReadMatrix(&v3))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_puts(v0 - 8117);\n
    if (!cgc_ReadMatrix(&v2))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_Add(&v3, &v2, &v1);\n
    cgc_puts(v0 - 8103);\n
    cgc_PrintMatrix(&v1);\n
    v4 = 1;\n
    return v4;\n
}\n
", "4221301:sub_406975": null, "4221312:cgc_matrix_sub": "extern char X;\n
extern char Y;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_matrix_sub()\n
{\n
    unsigned int v0;  // [bp-0xc08]\n
    char v1;  // [bp-0xc00]\n
    char v2;  // [bp-0x804]\n
    char v3;  // [bp-0x408]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v5;  // [bp-0x8]\n
    unsigned int v7;  // ebx\n
\n
    v5 = v7;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    X = 0;\n
    Y = 0;\n
    cgc_puts(\"First matrix\");\n
    cgc_puts(v0 - 8147);\n
    if (!cgc_ReadMatrix(&v3))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_puts(v0 - 8117);\n
    if (!cgc_ReadMatrix(&v2))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    cgc_Sub(&v3, &v2, &v1);\n
    cgc_puts(v0 - 8103);\n
    cgc_PrintMatrix(&v1);\n
    v4 = 1;\n
    return v4;\n
}\n
", "4221589:sub_406a95": null, "4221600:cgc_matrix_smul": "extern char X;\n
extern char Y;\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_matrix_smul()\n
{\n
    unsigned int v0;  // [bp-0x818]\n
    char v1;  // [bp-0x814]\n
    unsigned int v2;  // [bp-0x80c]\n
    char v3;  // [bp-0x804]\n
    char v4;  // [bp-0x408]\n
    unsigned int v5;  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
\n
    v6 = v8;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    X = 0;\n
    Y = 0;\n
    cgc_puts(\"Provide the matrix dimensions\");\n
    if (!cgc_ReadMatrix(&v4))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    cgc_printf(v0 - 8096);\n
    if (!cgc_receive_until(&v1, 10, 7))\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v2 = cgc_atoi(&v1);\n
    cgc_ScalerMultiply(&v4, v2, &v3);\n
    cgc_puts(v0 - 8103);\n
    cgc_PrintMatrix(&v3);\n
    v5 = 1;\n
    return v5;\n
}\n
", "4221899:sub_406bcb": null, "4221904:cgc_matrix_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_matrix_command()\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char v2;  // [bp-0x15]\n
    char v3;  // [bp-0x14]\n
    void* v4;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_PrintMenu();\n
        if (!cgc_receive_until(&v3, 10, 7))\n
        {\n
            v4 = 0;\n
            return;\n
        }\n
        v2 = cgc_atoi(&v3);\n
        if (v2 < 1)\n
        {\n
LABEL_406c4f:\n
            continue;\n
        }\n
        else\n
        {\n
            if (!(v2 <= 4))\n
                goto LABEL_406c4f;\n
            v0 = v2 - 1;\n
            if (v0 <= 3)\n
                goto *(((stack_base)[28] + (stack_base)[32] * 4 - 8368)) + (stack_base)[28];\n
        }\n
    }\n
}\n
", "4222137:sub_406cb9": null, "4222144:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int main(unsigned int v4, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x3268]\n
    char v1;  // [bp-0x3264]\n
    void* v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    CCommandHandler::__base_ctor__(&v1);\n
    v6 = v0;\n
    CCommandHandler::RegisterCommand(&v1, v6 - 8083, v6 - 8078, v6 - 12180);\n
    v7 = v0;\n
    CCommandHandler::RegisterCommand(&v1, v7 - 8268, v7 - 8049, v7 - 13764);\n
    v8 = v0;\n
    CCommandHandler::RegisterCommand(&v1, v8 - 8014, v8 - 8008, v8 - 12980);\n
    v9 = v0;\n
    CCommandHandler::RegisterCommand(&v1, v9 - 7965, v9 - 7958, v9 - 16708);\n
    CCommandHandler::Run(&v1);\n
    v2 = 0;\n
    CCommandHandler::__base_dtor__(&v1);\n
    return v2;\n
}\n
", "4222460:sub_406dfc": null, "4222464:cgc_keep_receiving_until": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_keep_receiving_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    char *v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    char v3;  // [bp-0x14]\n
    char v4;  // [bp-0xd]\n
    unsigned int v6;  // ecx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = &v3;\n
        if (cgc_receive(0, &v4, 1))\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
        else if (*(&v3))\n
        {\n
            if (v2 < a1)\n
            {\n
                if (v4 != a0)\n
                {\n
                    v6 = v2;\n
                    v2 = v6 + 1;\n
                    *((v5 + v6)) = v4;\n
                }\n
                else\n
                {\n
                    *((v5 + v2)) = 0;\n
                    return v2;\n
                }\n
            }\n
            if (v4 == a0)\n
                return v2;\n
        }\n
        else\n
        {\n
            v2 = 0;\n
            return v2;\n
        }\n
    }\n
}\n
", "4222679:sub_406ed7": null, "4222688:cgc_simon_command": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_simon_command(unsigned int v12[2])\n
{\n
    unsigned int v0;  // [bp-0x22c]\n
    unsigned int v1;  // [bp-0x228]\n
    void* v2;  // [bp-0x224], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x220]\n
    char v4;  // [bp-0x219]\n
    struct_0 *v5;  // [bp-0x218], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x214]\n
    unsigned int v7;  // [bp-0x210]\n
    char v8;  // [bp-0x209]\n
    char v9;  // [bp-0x111]\n
    char v10;  // [bp-0x10d]\n
    char v11;  // [bp-0x109]\n
    unsigned int v13;  // eax\n
    unsigned int v14[2];  // ecx\n
    struct_0 *v15;  // eax\n
    struct_0 *v16;  // ecx\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v12)\n
        return v12;\n
    v13 = cgc_strlen(v12);\n
    if (v13 < 8)\n
        return v13;\n
    v14 = v12;\n
    v7 = v14[1];\n
    v6 = v14[0];\n
    cgc_sprng(v6, v7);\n
    v5 = 0;\n
    while (true)\n
    {\n
        if (v5 >= 0x100)\n
        {\n
            v13 = cgc_printf(v0 - 7801);\n
            return v13;\n
        }\n
        if (v5 == 100)\n
        {\n
            cgc_printf(v0 - 7888);\n
            v13 = cgc_keep_receiving_until(&v4, 10, 1);\n
            if (v13 != 1)\n
            {\n
                return v13;\n
            }\n
            else if (v4 != 121 && v4 != 89)\n
            {\n
                v13 = cgc_printf(v0 - 7852);\n
                return v13;\n
            }\n
        }\n
        v3 = cgc_random_in_range(0, 6);\n
        v15 = v5;\n
        v5 = v15 + 1;\n
        *((&v8 + v15)) = v3;\n
        cgc_printf(v0 - 7841);\n
        for (v2 = 0; v2 < v5; v2 += 1)\n
        {\n
            cgc_printf(v0 - 7828);\n
        }\n
        cgc_printf(v0 - 8403);\n
        v13 = cgc_keep_receiving_until(&v11, 10, v5 + 1);\n
        if (v13 != v5)\n
            return v13;\n
        for (v1 = 0; v1 < v5; v1 += 1)\n
        {\n
            if ((&v8)[v1] != (&v11)[v1] - 48)\n
            {\n
                cgc_printf(v0 - 7824);\n
                if (v5 >= 8)\n
                {\n
                    v16 = v1;\n
                    v7 = *((&v10 + v16));\n
                    v6 = *((&v9 + v16));\n
                }\n
                cgc_sprng(v6, v7);\n
                v5 = 0;\n
            }\n
        }\n
    }\n
}\n
", "4223474:sub_4071f2": null, "4223488:cgc_sort_command": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sort_command(char *v11)\n
{\n
    unsigned int v0;  // [bp-0x1a8]\n
    unsigned int v1;  // [bp-0x1a4]\n
    unsigned int v2;  // [bp-0x1a0]\n
    void* v3;  // [bp-0x19c], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x198], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x194]\n
    char v6;  // [bp-0x18d]\n
    char v7;  // [bp-0x18c]\n
    char v8;  // [bp-0x10c]\n
    char v9;  // [bp-0x108]\n
    unsigned int *v10;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v12;  // eax, Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v11)\n
    {\n
        v12 = cgc_printf(v0 - 7791);\n
        return v12;\n
    }\n
    v6 = cgc_atoi(v11);\n
    if (!v6)\n
    {\n
        v12 = cgc_printf(v0 - 7775);\n
        return v12;\n
    }\n
    else if (v6 > 64)\n
    {\n
        v12 = cgc_printf(v0 - 7733);\n
        return v12;\n
    }\n
    else\n
    {\n
        cgc_printf(v0 - 7758);\n
        v5 = v6;\n
        for (v10 = 0; v10 < v5; v10 = v10 + 1)\n
        {\n
            cgc_getline(&v7, 128);\n
            *((&v8 + 0x4 * v10)) = cgc_atoi(&v7);\n
        }\n
        for (v4 = 0; v4 < v5 - 1; v4 += 1)\n
        {\n
            v3 = 0;\n
            for (v2 = 0; v2 < v5 - v4 - 1; v2 += 1)\n
            {\n
                if (*(&(&v8)[4 * v2]) > *(&(&v9)[4 * v2]))\n
                {\n
                    v1 = *(&(&v8)[4 * v2]);\n
                    *(&(&v8)[4 * v2]) = *(&(&v9)[4 * v2]);\n
                    *(&(&v9)[4 * v2]) = v1;\n
                    v3 = 1;\n
                }\n
            }\n
            if (!v3)\n
                break;\n
        }\n
        cgc_printf(v0 - 7695);\n
        v10 = 0;\n
        while (true)\n
        {\n
            v12 = v10;\n
            if (v12 >= v5)\n
                break;\n
            cgc_printf(v0 - 7677);\n
            v10 = v10 + 1;\n
        }\n
        return v10;\n
    }\n
}\n
", "4224184:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc_fdwait": null, "5242888:cgc_receive": null, "5242892:cgc_allocate": null, "5242896:cgc__terminate": null, "5242900:cgc_deallocate": null, "5242904:cgc_rint": null, "5242908:cgc_log10": null, "5242912:cgc_transmit": null, "5242916:cgc_pow": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}