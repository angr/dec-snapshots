{"4198400:_init": "extern struct_0 *g_4051c4;\n
\n
int _init()\n
{\n
    if (g_4051c4)\n
    {\n
        g_4051c4();\n
        return;\n
    }\n
    return;\n
}\n
", "4198448:sub_401030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_401030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4198464:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4198480:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4198496:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4198512:cgc_random": "// attributes: PLT stub\n
int cgc_random()\n
{\n
    ::libc.so.0::cgc_random();\n
    return;\n
}\n
", "4198528:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4198544:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4198560:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4198576:sub_4010b0": "int sub_4010b0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4198582:sub_4010b6": null, "4198592:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4198635:sub_4010eb": null, "4198636:sub_4010ec": "int sub_4010ec()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198640:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4198644:sub_4010f4": null, "4198656:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 16587;\n
    v6 = v5 + 28;\n
    v7 = v5 + 28;\n
    if (v7 == v6)\n
        return v5 + 28;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4198707:sub_401133": "int sub_401133()\n
{\n
}\n
", "4198713:sub_401139": "int sub_401139()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4198720:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 16523;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 28;\n
    v9 = (v6 + 28 - (v6 + 28) >> 31) + (28 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4198791:sub_401187": "int sub_401187()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4198800:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_4051c0;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_4051c0)\n
    {\n
        v0 = __dso_handle;\n
        sub_4010b0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4198875:sub_4011db": "int sub_4011db()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4198880:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4198889:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4198893:sub_4011ed": null, "4198896:cgc_calloc": "int cgc_calloc(unsigned int v1, unsigned int a0)\n
{\n
    int tmp_21;  // tmp #21\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v2;  // eax\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v2 = v1;\n
    tmp_21 = v2;\n
    if ([D] x86g_calculate_condition(0x0<32>, 0x24<32>, t21, Load(addr=stack_base+8, size=4, endness=Iend_LE), 0x0<32>))\n
        return 0;\n
    v5 = v2 * a0;\n
    v6 = cgc_malloc();\n
    if (v6)\n
    {\n
        v0 = v5;\n
        cgc_memset(v6, 0);\n
        return v6;\n
    }\n
    return 0;\n
}\n
", "4198974:sub_40123e": null, "4198976:cgc_isascii": "int cgc_isascii(unsigned int v0)\n
{\n
    return v0 < 128;\n
}\n
", "4198990:cgc_isprint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isprint(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = !((&_GLOBAL_OFFSET_TABLE_)[8648 + v1] & 32);\n
    }\n
    return v2;\n
}\n
", "4199030:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[8648 + v1] & 7);\n
    }\n
    return v2;\n
}\n
", "4199067:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
    {\n
        v2 = 0;\n
        *(&v2) = ((&_GLOBAL_OFFSET_TABLE_)[8648 + v1] & 3);\n
    }\n
    return v2;\n
}\n
", "4199104:cgc_islower": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_islower(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8648 + v1] & 1;\n
    return v2;\n
}\n
", "4199139:cgc_isupper": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isupper(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8648 + v1] >> 1 & 1;\n
    return v2;\n
}\n
", "4199176:cgc_isspace": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isspace(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8648 + v1] >> 4 & 1;\n
    return v2;\n
}\n
", "4199214:cgc_ispunct": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_ispunct(unsigned int v0)\n
{\n
    unsigned int v1;  // edx\n
    unsigned int v2;  // eax\n
\n
    v1 = v0;\n
    v2 = 0;\n
    if (v1 <= 127)\n
        v2 = (&_GLOBAL_OFFSET_TABLE_)[8648 + v1] >> 3 & 1;\n
    return v2;\n
}\n
", "4199252:cgc_tolower": "int cgc_tolower(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 91 > -27)\n
        v1 += 32;\n
    return v1;\n
}\n
", "4199273:cgc_toupper": "int cgc_toupper(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
\n
    v1 = v0;\n
    if (v1 <= 127 && v1 - 123 > -27)\n
        v1 -= 32;\n
    return v1;\n
}\n
", "4199294:sub_40137e": null, "4199296:cgc_free": "typedef struct struct_1 {\n
    char field_-4;\n
    char padding_-3[3];\n
    struct struct_1 *field_0;\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern unsigned int __bss_start;\n
extern char cgc_g_malloc;\n
\n
int cgc_free(struct_1 *v1)\n
{\n
    struct_1 *v0;  // [bp-0x18]\n
    struct_1 *v2;  // eax, Other Possible Types: unsigned int\n
    char v3;  // cl\n
    unsigned int *v4;  // esi, Other Possible Types: unsigned int\n
    struct_1 *v5;  // ebx\n
    unsigned int v6;  // edi\n
    unsigned int *v7;  // ebp, Other Possible Types: unsigned int\n
    struct_0 *v8;  // edi\n
    struct_1 *v9;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // ecx, Other Possible Types: unsigned int\n
    struct_0 *v11;  // esi\n
\n
    v2 = v1;\n
    if (!v2)\n
        return v2;\n
    v3 = v2->field_0;\n
    if ((v2->field_0 & 1))\n
    {\n
        cgc__terminate();\n
        return cgc_malloc();\n
    }\n
    v2 = &v2->field_4;\n
    if ((v3 & 2))\n
    {\n
        v0 = *(v2);\n
        v2 = cgc_deallocate(v2);\n
        return v2;\n
    }\n
    *((v2 + 4)) = v3 | 1;\n
    v4 = &__bss_start;\n
    v9 = *(v2);\n
    v10 = -1;\n
    do\n
    {\n
        v10 += 1;\n
        v4 += 4;\n
    } while (v9 > 32 << (v10 & 31));\n
    if (v10 <= 11)\n
    {\n
        while (true)\n
        {\n
            v5 = v9 ^ v2;\n
            if (!(v5->field_0 & 1))\n
                break;\n
            if (*(&v5->field_-4) != v9)\n
                break;\n
            v6 = v5->field_8;\n
            v7 = v6 + 8;\n
            if (!v6)\n
                v7 = v4;\n
            *(v7) = *(&v5->field_4);\n
            v8 = *(&v5->field_4);\n
            if (v8)\n
                v8->field_c = v5->field_8;\n
            if (v5 < v2)\n
                v2 = v5;\n
            v9 = *(v2) * 2;\n
            *(v2) = v9;\n
            v10 += 1;\n
            v4 += 4;\n
            if (v10 == 12)\n
            {\n
                v10 = 12;\n
                break;\n
            }\n
        }\n
    }\n
    v11 = *(&(&cgc_g_malloc)[4 * v10]);\n
    *((v2 + 8)) = v11;\n
    if (v11)\n
        v11->field_c = v2;\n
    *((v2 + 12)) = 0;\n
    *(&(&cgc_g_malloc)[4 * v10]) = v2;\n
    return v2;\n
}\n
", "4199520:cgc_malloc": "typedef struct struct_3 {\n
    unsigned int field_0;\n
    char field_4;\n
} struct_3;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
    char field_4;\n
    char padding_5[3];\n
    unsigned int field_8;\n
    unsigned int field_c;\n
} struct_0;\n
\n
typedef struct struct_4 {\n
    unsigned int field_0;\n
    unsigned int field_4;\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_4;\n
\n
typedef struct struct_1 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char padding_0[4];\n
    char field_4;\n
    char padding_5[3];\n
    struct struct_1 *field_8;\n
    unsigned int field_c;\n
} struct_2;\n
\n
extern struct_2 *__bss_start;\n
extern unsigned int cgc_g_malloc[13];\n
\n
int cgc_malloc(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1[13];  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    char v5;  // [bp-0x14]\n
    unsigned int v7;  // ebp\n
    struct struct_2 **v8;  // esi, Other Possible Types: unsigned int\n
    struct_3 *v9;  // eax\n
    unsigned int v10;  // eax\n
    unsigned int v12;  // eax\n
    struct_0 *v13;  // ebp\n
    unsigned int v14[13];  // ecx\n
    unsigned int v15;  // edx\n
    struct struct_4 **v16;  // ecx, Other Possible Types: unsigned int\n
    struct_4 *v17;  // edx\n
    struct_1 *v18;  // edi\n
    unsigned int v19;  // ebx\n
    struct struct_4 **v20;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v21[4];  // edi\n
    struct_1 *v22;  // ebx\n
    struct_2 *v23;  // ecx\n
    struct_1 *v24;  // eax\n
    unsigned int v25;  // edx\n
    struct struct_2 **v26;  // edi, Other Possible Types: unsigned int\n
\n
    v7 = v6 + 8;\n
    if (v6 + 8 > 65535)\n
    {\n
        v0 = &v5;\n
        if (!cgc_allocate(v7, 0))\n
        {\n
            v9 = *(&v5);\n
            v9->field_4 = v9->field_4 & 252 | 2;\n
            v9->field_0 = v7;\n
            return &v9[1].field_0 + 3;\n
        }\n
        return 0;\n
    }\n
    else\n
    {\n
        v1[0] = &cgc_g_malloc[0];\n
        v8 = &__bss_start;\n
        v15 = -1;\n
        do\n
        {\n
            v15 += 1;\n
            v8 += 4;\n
        } while (v7 > 32 << (v15 & 31));\n
        v2 = v15;\n
        v10 = v15;\n
        if (v15 <= 12)\n
        {\n
            while (!v1[v10])\n
            {\n
                v10 += 1;\n
                if (v10 == 13)\n
                    goto LABEL_401506;\n
            }\n
        }\n
        else if (v15 == 13)\n
        {\n
LABEL_401506:\n
            v0 = &v3;\n
            if (cgc_allocate(0x40000, 0))\n
                return 0;\n
            v12 = *(&v3);\n
            v13 = v12 + 131071 & -0x20000;\n
            if ((v12 + 131071 & -0x20000) != v12)\n
                cgc_deallocate(v12);\n
            cgc_deallocate(v13 + 0x2000);\n
            v13->field_0 = 0x20000;\n
            v13->field_4 = v13->field_4 & 252 | 1;\n
            v14 = v1;\n
            v13->field_8 = v14[12];\n
            v13->field_c = 0;\n
            v14[12] = v13;\n
            v10 = 12;\n
            v15 = v2;\n
        }\n
        if (v10 > v15)\n
        {\n
            v16 = &v1[v10];\n
            v17 = *(v16);\n
            do\n
            {\n
                v18 = v17->field_8;\n
                if (v18)\n
                    v18->field_c = v17->field_c;\n
                v19 = v17->field_c;\n
                v20 = v19 + 8;\n
                if (!v19)\n
                    v20 = v16;\n
                *(v20) = v18;\n
                v17->field_8 = 0;\n
                v17->field_c = 0;\n
                v4 = v17->field_4;\n
                v21 = v17->field_0 >> 1;\n
                v17->field_0 = v21;\n
                *(((v21 ^ v17) + 12)) = 0;\n
                *(((v21 ^ v17) + 8)) = 0;\n
                *(((v21 ^ v17) + 4)) = v4;\n
                *((v21 ^ v17)) = v21;\n
                v17->field_c = 0;\n
                v17->field_8 = v21 ^ v17;\n
                *(((v21 ^ v17) + 12)) = v17;\n
                v22 = v1[1 + v10];\n
                *(((v21 ^ v17) + 8)) = v22;\n
                if (v22)\n
                    v22->field_c = v21 ^ v17;\n
                v1[1 + v10] = v17;\n
                v16 -= 4;\n
                v10 -= 1;\n
            } while (v10 > v2);\n
        }\n
        v23 = *(v8);\n
        v24 = v23->field_8;\n
        if (v24)\n
            v24->field_c = v23->field_c;\n
        v25 = v23->field_c;\n
        v26 = v25 + 8;\n
        if (!v25)\n
            v26 = v8;\n
        *(v26) = v24;\n
        v23->field_8 = 0;\n
        v23->field_c = 0;\n
        v23->field_4 = v23->field_4 & 254;\n
        return &v23->field_8;\n
    }\n
}\n
", "4200013:sub_40164d": null, "4200016:cgc_malloc_size": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_malloc_size(struct_0 *v0)\n
{\n
    return v0[2].field_-8 - 8;\n
}\n
", "4200027:sub_40165b": null, "4200028:cgc_memchr": "int cgc_memchr(char *v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // eax\n
    unsigned int v3;  // edx\n
    void* v4;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (v1)\n
    {\n
        v2 = v0;\n
        v3 = 0;\n
        do\n
        {\n
            if (v2[v3] == a0)\n
            {\n
                v4 = &v2[v3];\n
                return v4;\n
            }\n
            v3 += 1;\n
        } while (v1 != v3);\n
    }\n
    return 0;\n
}\n
", "4200070:sub_401686": null, "4200072:cgc_memcpy": "int cgc_memcpy(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = *((a0 + v2));\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4200106:sub_4016aa": null, "4200108:cgc_memset": "int cgc_memset(unsigned int v0, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v1;  // ecx\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
\n
    v1 = a1;\n
    if (!v1)\n
        return v0;\n
    v2 = 0;\n
    do\n
    {\n
        *((v0 + v2)) = a0;\n
        v2 += 1;\n
    } while (v1 != v2);\n
    return v0;\n
}\n
", "4200137:sub_4016c9": null, "4200140:cgc_fdprintf": "int cgc_fdprintf(unsigned int v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0xc]\n
    char v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v1 = v4;\n
    v1 = &v3;\n
    v0 = &v3;\n
    return cgc__printf(a0);\n
}\n
", "4200192:cgc__printf": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__printf(char a0, struct struct_0 **a0)\n
{\n
    int tmp_2;  // tmp #2\n
    int tmp_9;  // tmp #9\n
    int tmp_12;  // tmp #12\n
    int tmp_39;  // tmp #39\n
    struct_1 *v0;  // [bp-0x68]\n
    unsigned int v1;  // [bp-0x64]\n
    struct struct_0 **v2;  // [bp-0x5c], Other Possible Types: unsigned int, char\n
    unsigned int v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0x54]\n
    struct struct_0 **v5;  // [bp-0x50]\n
    unsigned int v6;  // [bp-0x4c]\n
    unsigned int v7;  // [bp-0x48]\n
    struct struct_0 **v8;  // [bp-0x44]\n
    struct struct_0 **v9;  // [bp-0x40], Other Possible Types: unsigned int\n
    struct struct_0 **v10;  // [bp-0x3c], Other Possible Types: unsigned int\n
    struct struct_0 **v11;  // [bp-0x38]\n
    struct struct_0 **v12;  // [bp-0x34]\n
    char v13;  // [bp-0x12]\n
    char v14;  // [bp-0x11]\n
    unsigned int v15;  // [bp-0x8]\n
    struct struct_0 **v16;  // [bp+0x4], Other Possible Types: unsigned int\n
    unsigned int v17;  // ebx\n
    unsigned int v18;  // edx\n
    struct struct_0 **v19;  // ecx\n
    unsigned int v20;  // eax\n
    struct struct_0 **v21;  // edx, Other Possible Types: unsigned int\n
    struct struct_0 **v22;  // eax, Other Possible Types: unsigned int\n
    unsigned int v23;  // ebx\n
    struct struct_0 **v24;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v25;  // eax\n
    struct struct_0 **v26;  // eax, Other Possible Types: unsigned int\n
    struct struct_0 **v27;  // eax\n
    unsigned int v28;  // ebx\n
    unsigned int v29;  // ebx\n
    unsigned int v30;  // esi\n
    struct struct_0 **v31;  // eax, Other Possible Types: unsigned int\n
    unsigned int v32;  // ecx\n
    unsigned int v33;  // ebx\n
    unsigned int v34;  // ebp\n
    unsigned int v35;  // eax\n
    struct struct_0 **v36;  // eax, Other Possible Types: unsigned int\n
    unsigned int v38;  // eax\n
    struct struct_0 **v39;  // esi, Other Possible Types: unsigned int\n
    unsigned int v41;  // ebx\n
    struct struct_0 **v42;  // ecx\n
    struct struct_0 **v43;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v44;  // esi\n
    struct_1 *v45;  // edi, Other Possible Types: unsigned int\n
    struct struct_0 **v46;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v47;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v48;  // edi\n
    unsigned int v49;  // eax\n
    unsigned int v50;  // eax\n
    unsigned int v51;  // esi\n
    unsigned int v52;  // eax\n
    unsigned int v53;  // eax\n
    unsigned int v54;  // eax\n
    unsigned int v56;  // ebx\n
    unsigned int v57;  // eax\n
    unsigned int v58;  // eax\n
\n
    v15 = v17;\n
    v6 = v18;\n
    v46 = v19;\n
    v23 = &_GLOBAL_OFFSET_TABLE_;\n
    v5 = a0;\n
    v22 = v16;\n
    v3 = 0;\n
    v43 = \" \";\n
    v12 = &\" \";\n
    v2 = 0;\n
    v21 = 0;\n
    v8 = v46;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        if (*(v22) != 37)\n
        {\n
            if (*(v22))\n
            {\n
                if (!v21)\n
                    v21 = v22;\n
                v9 = v21;\n
                v16 = v22 + 1;\n
                *(&v21) = v2;\n
                goto LABEL_401bb3;\n
            }\n
            if (!v21)\n
                return v3;\n
            tmp_2 = v22;\n
            v57 = v22 - v21;\n
            if (tmp_2 != v21)\n
            {\n
                v1 = v57;\n
                v58 = v46(v6, v21);\n
                if (v58 >= 0)\n
                {\n
                    v3 += v58;\n
                    return v3;\n
                }\n
LABEL_401bea:\n
                v3 = -1;\n
                return v3;\n
            }\n
        }\n
        if (v21 && v22 != v21)\n
        {\n
            v1 = v22 - v21;\n
            v20 = v46(v6, v21);\n
            if (v20 < 0)\n
                goto LABEL_401bea;\n
            v3 += v20;\n
            if (v20 < v1)\n
                return v3;\n
            v22 = v16;\n
            v23 = v4;\n
        }\n
        v24 = v22 + 1;\n
        v16 = v24;\n
        if (*((v22 + 1)) == 37)\n
            break;\n
        v10 = v12;\n
        if (*((v22 + 1)) == 48)\n
        {\n
            v26 = v22 + 2;\n
            do\n
            {\n
                v16 = v26;\n
                tmp_9 = *(v26);\n
                v26 += 1;\n
            } while (tmp_9 == 48);\n
            v27 = v26 - 1;\n
            v10 = v23 - 8476;\n
            v24 = v27;\n
        }\n
        v1 = 10;\n
        v30 = cgc_strtoul(v24, &v16);\n
        v31 = v16;\n
        *(&v21) = *(v31);\n
        v32 = *(v31);\n
        if (v32 == 72)\n
        {\n
LABEL_40180a:\n
            v16 = v31 + 1;\n
            *(&v21) = *(v31 + 1);\n
            v31 = v16;\n
            goto LABEL_401858;\n
        }\n
        else\n
        {\n
            if (v32 == 108)\n
                goto LABEL_40180a;\n
            if (v32 == 104)\n
                goto LABEL_40180a;\n
            *(&v21) = v21;\n
            *(&v21) = v2;\n
LABEL_401858:\n
            v33 = v4;\n
            v43 = v21;\n
            v9 = 0;\n
            if (v43 > 109)\n
            {\n
                v43 -= 110;\n
                switch (v43)\n
                {\n
                case 0:\n
                    v43 = *(v5);\n
                    if (v21 == 72)\n
                    {\n
                        *(v43) = v3;\n
                        v31 = v16;\n
                        break;\n
                    }\n
                    else\n
                    {\n
                        *(&v2) = v21;\n
                        if (v21 != 104)\n
                            *(v43) = v3;\n
                        else\n
                            *(v43) = v3;\n
                        *(&v21) = v2;\n
                        break;\n
                    }\n
                    v5 = v5 + 1;\n
                    v16 = v31 + 1;\n
                    goto LABEL_401bb3;\n
                case 1: case 7: case 10:\n
                    v34 = (v21 != 111) * 8 + 8;\n
                    if (v21 == 117)\n
                        v34 = 10;\n
                    v43 = *(v5);\n
                    *(&v2) = v21;\n
                    v7 = v30;\n
                    if (!v43)\n
                    {\n
                        v14 = 48;\n
                        v44 = 1;\n
                        v45 = &v14;\n
                    }\n
                    else\n
                    {\n
                        v41 = v33 - 8455;\n
                        if (v21 == 88)\n
                            v41 = v33 - 8472;\n
                        v14 = *((v41 + ((0 CONCAT v43) /m v34 >> 32)));\n
                        v44 = 1;\n
                        v45 = &v14;\n
                        if (v43 >= v34)\n
                        {\n
                            v45 = &v14;\n
                            v44 = 1;\n
                            do\n
                            {\n
                                v44 += 1;\n
                                v43 = (0 CONCAT v43) /m v34;\n
                                *((v45 - 1)) = *((v41 + ((0 CONCAT v43) /m v34 >> 32)));\n
                                v45 = &v13;\n
                            } while (v43 >= v34);\n
                        }\n
                    }\n
                    v5 = v5 + 1;\n
                    v46 = v8;\n
                    if (v7 > v44)\n
                    {\n
                        do\n
                        {\n
                            v1 = 1;\n
                            v49 = v46(v6, v10);\n
                            v3 += v49;\n
                            tmp_12 = v49;\n
                            v50 = (!v49) * 9;\n
                            v43 = 8;\n
                            if (tmp_12 < 0)\n
                                v50 = 8;\n
                            if (v50)\n
                                *(&v43) = v2;\n
                            v7 -= 1;\n
                        } while (v7 > v44);\n
                    }\n
                    v1 = v44;\n
                    v52 = v46(v6, v45);\n
                    if (v52 >= 0)\n
                    {\n
                        v3 += v52;\n
                        if (v52 < v44)\n
                            return v3;\n
                        goto LABEL_401b6b;\n
                    }\n
                case 5:\n
                    v2 = v21;\n
                    v35 = cgc_strlen();\n
                    if (!v35)\n
                    {\n
LABEL_401a4e:\n
                        v5 = v5 + 1;\n
                        goto LABEL_401b6b;\n
                    }\n
                    else\n
                    {\n
                        v1 = v35;\n
                        v38 = v46(v6, *(v5));\n
                        if (v38 >= 0)\n
                        {\n
                            v3 += v38;\n
                            if (v38 < v35)\n
                                return v3;\n
                            goto LABEL_401a4e;\n
                        }\n
                    }\n
                default:\n
LABEL_401bb3:\n
                    v22 = v16;\n
                    *(&v43) = v21;\n
                    v2 = v43;\n
                    v21 = v9;\n
                    continue;\n
                }\n
            }\n
            else if (v43 != 88)\n
            {\n
                if (v43 != 100 && !(v43 == 105))\n
                    goto LABEL_401bb3;\n
                v36 = *(v5);\n
                v7 = v30;\n
                if (v21 == 72)\n
                {\n
                    v36 = v36;\n
                    v43 = 3435973837;\n
                }\n
                else\n
                {\n
                    v43 = 3435973837;\n
                    if (v21 == 104)\n
                        v36 = v36;\n
                }\n
                v2 = v21;\n
                v39 = -(v36);\n
                v11 = v36;\n
                if (!(v36) < 0)\n
                    v39 = v36;\n
                if (!v39)\n
                {\n
                    v14 = 48;\n
                    v48 = 1;\n
                    v47 = &v14;\n
                }\n
                else\n
                {\n
                    v14 = *((v4 + v39 - (v39 * 3435973837 >> 32 >> 2 & -2) * 5 - 8455));\n
                    v48 = 1;\n
                    v43 = 3435973837;\n
                    v47 = &v14;\n
                    if (v39 >= 10)\n
                    {\n
                        v48 = 1;\n
                        v47 = &v14;\n
                        do\n
                        {\n
                            v42 = v39 * 3435973837 >> 32 >> 3;\n
                            *((v47 - 1)) = *(-8455 + v4 + v42 + -5 * ((v39 * 3435973837 >> 32 >> 3) * 3435973837 >> 32 >> 2 & -2));\n
                            v48 += 1;\n
                            v47 = &v13;\n
                            tmp_39 = v39;\n
                            v39 = v42;\n
                            v43 = 3435973837;\n
                        } while (tmp_39 > 99);\n
                    }\n
                }\n
                if (v11 < 0)\n
                {\n
                    *((v47 - 1)) = 45;\n
                    v47 -= 1;\n
                    v48 += 1;\n
                }\n
                v51 = v7;\n
                v5 += 1;\n
                if (v51 > v48)\n
                {\n
                    do\n
                    {\n
                        v1 = 1;\n
                        v53 = v8(v6, v10);\n
                        v3 += v53;\n
                        tmp_12 = v53;\n
                        v50 = (!v53) * 9;\n
                        v43 = 8;\n
                        if (tmp_12 < 0)\n
                            v50 = 8;\n
                        if (v50)\n
                        {\n
                            *(&v43) = v2;\n
                            v46 = v8;\n
                        }\n
                        v51 -= 1;\n
                    } while (v51 > v48);\n
                }\n
                if (!v48)\n
                {\n
                    v46 = v8;\n
LABEL_401b6b:\n
                    v16 += 1;\n
                    v56 = v4;\n
                    *(&v21) = v2;\n
                    goto LABEL_401bb3;\n
                }\n
                else\n
                {\n
                    v1 = v48;\n
                    v0 = v47;\n
                    v46 = v8;\n
                    v54 = v8(v6, v0);\n
                    if (v54 >= 0)\n
                    {\n
                        v3 += v54;\n
                        if (v54 < v48)\n
                            return v3;\n
                        goto LABEL_401b6b;\n
                    }\n
                }\n
            }\n
        }\n
    }\n
    v1 = 1;\n
    v25 = v46(v6, v24);\n
    v3 += v25;\n
    tmp_12 = v25;\n
    v50 = (!v25) * 9;\n
    v43 = 8;\n
    if (tmp_12 < 0)\n
        v50 = 8;\n
    if (v50)\n
    {\n
        v28 = v4;\n
        v43 = v2;\n
    }\n
    else\n
    {\n
        v16 += 1;\n
        v9 = 0;\n
        *(&v21) = v2;\n
        v29 = v4;\n
        goto LABEL_401bb3;\n
    }\n
    if (v50 == 2)\n
    {\n
        v9 = 0;\n
        *(&v21) = v43;\n
        goto LABEL_401bb3;\n
    }\n
    else if (v50 != 8)\n
    {\n
        return v3;\n
    }\n
}\n
", "4201469:cgc__consumer_fd": "int cgc__consumer_fd(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
\n
    v0 = a1;\n
    return cgc_writeall(v1, a0);\n
}\n
", "4201510:cgc_sprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_sprintf(unsigned int v1)\n
{\n
    struct_0 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    char v2;  // [bp+0x8]\n
    void* *v3;  // [bp+0xc]\n
    unsigned int v4;  // eax\n
\n
    v0 = v4;\n
    v0 = &v3;\n
    return cgc__printf(*(&v2), &v3);\n
}\n
", "4201562:cgc__consumer_string": "int cgc__consumer_string(struct struct_0 **v1, unsigned int a0, char *a1)\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // esi\n
    char *v3;  // esi\n
    struct struct_0 **v4;  // edi\n
    unsigned int v5;  // eax\n
\n
    v0 = v2;\n
    v3 = a1;\n
    v4 = v1;\n
    cgc_memcpy(*(v4), a0, v3);\n
    v5 = *(v4);\n
    *(v4) = &v3[v5];\n
    v3[v5] = 0;\n
    return a1;\n
}\n
", "4201620:cgc_vsnprintf": "int cgc_vsnprintf(unsigned int v2, unsigned int a0, unsigned int a1, void* **a2)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0x10]\n
    unsigned int v3;  // eax\n
\n
    v3 = a0;\n
    if (!v3)\n
        return 0;\n
    v0 = v2;\n
    v1 = v3 - 1;\n
    return cgc__printf(a1, a2);\n
}\n
", "4201698:cgc__consumer_string_checked": "int cgc__consumer_string_checked(struct struct_0 *v0[2], unsigned int a0, char *a1)\n
{\n
    struct struct_0 *v1[2];  // edi\n
    char *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
\n
    v1 = v0;\n
    v2 = a1;\n
    if (v2 < v2)\n
        v2 = v1[1];\n
    if (v2)\n
    {\n
        cgc_memcpy(v1[0], a0, v2);\n
        v3 = v1[0];\n
        v1[0] = v3 + v2;\n
        *((v3 + v2)) = 0;\n
        v1[1] = &(v1[1])[-1 * v2];\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4201771:cgc_snprintf": "int cgc_snprintf(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* **v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v4;  // [bp+0x10]\n
    unsigned int v5;  // ecx\n
\n
    v5 = a0;\n
    v0 = &v4;\n
    if (!v5)\n
        return 0;\n
    v1 = v3;\n
    v2 = v5 - 1;\n
    return cgc__printf(a1, v0);\n
}\n
", "4201857:sub_401d81": null, "4201860:cgc_readuntil": "int cgc_readuntil(unsigned int v3, char a0[2], unsigned int a1, char a2)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x14]\n
    unsigned int v4;  // esi\n
    char v5[2];  // edi, Other Possible Types: unsigned int\n
    unsigned int v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v8;  // ecx\n
\n
    v4 = a1;\n
    v5 = a0;\n
    v7 = &v5[v4 + 1];\n
    if (v7 != v5)\n
    {\n
        v1 = v7;\n
        v6 = v4 - 1;\n
        while (true)\n
        {\n
            v0 = &v2;\n
            if (cgc_receive(v3, v5, 1))\n
                break;\n
            if (!*(&v2))\n
                break;\n
            if (*(v5) == a2)\n
                break;\n
            v5 += 1;\n
            v6 -= 1;\n
            if (!v6)\n
                return 1;\n
        }\n
        v7 = v1;\n
    }\n
    v8 = 1;\n
    if (v5 != v7 && *(v5) == a2)\n
    {\n
        *((v5 + 1)) = 0;\n
        v8 = 0;\n
    }\n
    return v8;\n
}\n
", "4201983:cgc_writeall": "int cgc_writeall(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x14]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // ebp\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // ecx\n
\n
    v3 = a0;\n
    v4 = a1 + v3;\n
    while (true)\n
    {\n
        if (v3 != v4)\n
        {\n
            v5 = v3;\n
            v6 = v4 - v3;\n
            v0 = &v1;\n
            if (cgc_transmit(v2, a0, v6))\n
                return v5 - a0;\n
            v7 = *(&v1);\n
            v3 = v5 + v7;\n
            if (!v7)\n
                return v5 - a0;\n
        }\n
        else\n
        {\n
            return v4 - a0;\n
        }\n
    }\n
}\n
", "4202077:sub_401e5d": null, "4202080:cgc_realloc": "typedef struct struct_0 {\n
    unsigned int field_-8;\n
} struct_0;\n
\n
int cgc_realloc(struct_0 *v0, unsigned int a0)\n
{\n
    unsigned int v1;  // ebp\n
    struct_0 *v2;  // esi, Other Possible Types: unsigned int\n
    unsigned int v3;  // eax\n
    struct_0 *v4;  // eax\n
    struct_0 *v5;  // edi\n
    unsigned int v6;  // eax\n
\n
    v1 = a0;\n
    v2 = v0;\n
    if (!a0)\n
    {\n
        cgc_free(v2);\n
    }\n
    else\n
    {\n
        if (!v2)\n
            return cgc_malloc(v1);\n
        v3 = v2[2].field_-8;\n
        if (v3 >> 1 < v1 && !(v3 - 8 <= v1))\n
            goto LABEL_401ed4;\n
        v4 = cgc_malloc(v1);\n
        if (v4)\n
        {\n
            v5 = v4;\n
            v6 = v2[2].field_-8 - 8;\n
            if (v6 > v1)\n
                v6 = v1;\n
            cgc_memcpy(v5, v2, v6);\n
            cgc_free(v2);\n
            v2 = v5;\n
            goto LABEL_401ed4;\n
        }\n
    }\n
    v2 = 0;\n
LABEL_401ed4:\n
    return v2;\n
}\n
", "4202216:cgc_strchr": "typedef struct struct_0 {\n
    char padding_0[1];\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strchr(unsigned int v0, unsigned int a0)\n
{\n
    struct_0 *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int v2;  // edx\n
\n
    v1 = v0 - 1;\n
    while (true)\n
    {\n
        v2 = *((v1 + 1));\n
        v1 += 1;\n
        if (!v2)\n
            break;\n
        if (v2 == a0)\n
            break;\n
    }\n
    if (v2)\n
        return v1;\n
    return 0;\n
}\n
", "4202246:sub_401f06": null, "4202248:cgc_strcmp": "int cgc_strcmp(char *v0, char *a0)\n
{\n
    unsigned int v1;  // eax\n
    char *v2;  // esi\n
    unsigned int v3;  // ecx\n
    char v4;  // dl\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v4 = *(v2);\n
    v3 = 0;\n
    while (true)\n
    {\n
        if (v4)\n
        {\n
            if (!*((v1 + v3)))\n
                return a0[v3] - v4;\n
            if (v4 != *((v1 + v3)))\n
                return a0[v3] - v4;\n
            v4 = v2[1 + v3];\n
            v3 += 1;\n
        }\n
        else\n
        {\n
            return a0[v3] - 0;\n
        }\n
    }\n
}\n
", "4202298:sub_401f3a": null, "4202300:cgc_strcpy": "int cgc_strcpy(char *v0, char *a0)\n
{\n
    char *v1;  // ecx\n
    char *v2;  // eax\n
    char v3;  // bl\n
    unsigned int v4;  // edx\n
\n
    v1 = a0;\n
    v2 = v0;\n
    v3 = *(v1);\n
    for (v4 = 0; v3; v4 += 1)\n
    {\n
        v2[v4] = v3;\n
        v3 = v1[1 + v4];\n
    }\n
    v2[v4] = 0;\n
    return v0;\n
}\n
", "4202333:sub_401f5d": null, "4202336:cgc_strlen": "int cgc_strlen(unsigned int v0)\n
{\n
    unsigned int v1;  // eax\n
    char v2;  // cc_dep1\n
\n
    v1 = -1;\n
    do\n
    {\n
        v2 = *((v0 + v1 + 1));\n
        v1 += 1;\n
    } while (v2);\n
    return v1;\n
}\n
", "4202354:sub_401f72": null, "4202356:cgc_strsep": "typedef struct struct_1 {\n
    char field_-1;\n
    char field_0;\n
} struct_1;\n
\n
int cgc_strsep(struct struct_0 **v0, unsigned int a0)\n
{\n
    int tmp_7;  // tmp #7\n
    struct struct_0 **v1;  // ecx, Other Possible Types: unsigned int\n
    char *v2;  // esi\n
    unsigned int v3;  // al, Other Possible Types: char\n
    struct_1 *v4;  // ebp, Other Possible Types: unsigned int\n
    struct_1 *v5;  // edx, Other Possible Types: unsigned int\n
\n
    v1 = v0;\n
    v2 = *(v1);\n
    if (!v2)\n
        return v2;\n
    v3 = *(v2);\n
    v5 = 0;\n
    if (*(v2))\n
    {\n
        v4 = v2 + 1;\n
        do\n
        {\n
            v3 = cgc_strchr(a0, v3);\n
            if (v3)\n
            {\n
                v1 = v0;\n
                v5 = 0;\n
                if (*((v4 - 1)))\n
                {\n
                    *((v4 - 1)) = 0;\n
                    v5 = v4;\n
                    goto LABEL_401fd9;\n
                }\n
            }\n
            tmp_7 = *(v4);\n
            *(&v3) = *(v4);\n
            v4 += 1;\n
        } while (tmp_7);\n
        v1 = v0;\n
        v5 = 0;\n
    }\n
LABEL_401fd9:\n
    *(v1) = v5;\n
    return v2;\n
}\n
", "4202469:sub_401fe5": null, "4202472:cgc_strtol": "typedef struct struct_0 {\n
    char field_-1;\n
    char field_0;\n
    char field_1;\n
} struct_0;\n
\n
int cgc_strtol(struct_0 *v4, unsigned int *a0, unsigned int a1)\n
{\n
    int tmp_5;  // tmp #5\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x18]\n
    unsigned int v3;  // [bp-0x14]\n
    unsigned int v5;  // edi\n
    char v6;  // ecx\n
    void* v7;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v8;  // esi, Other Possible Types: unsigned int\n
    unsigned int v9;  // cc_dep1\n
    unsigned int v10;  // eax\n
    unsigned int v11;  // cc_dep1\n
    void* v12;  // ecx, Other Possible Types: unsigned int\n
    char *v13;  // ebp\n
    unsigned int v14;  // edx\n
    struct_0 *v15;  // edi\n
    unsigned int v16;  // eax\n
    unsigned int v17;  // esi\n
    unsigned int v18;  // eax\n
    unsigned int *v19;  // eax\n
\n
    v5 = a1;\n
    if (v5)\n
    {\n
        v6 = v5 - 37;\n
        if (v6 < -35)\n
            return 0;\n
    }\n
    v8 = v4;\n
    *(&v7) = v8->field_-1;\n
    v6 = 1;\n
    *(&v1) = v6;\n
    if (v8->field_-1)\n
    {\n
        v8 = &v8->field_0;\n
        while (true)\n
        {\n
            v7 = cgc_isspace(v7);\n
            if (v7)\n
            {\n
                tmp_5 = *(v8);\n
                *(&v7) = *(v8);\n
                v8 += 1;\n
                if (!tmp_5)\n
                    goto LABEL_40204f;\n
            }\n
            else\n
            {\n
                if (*((v8 - 1)) == 43)\n
                    break;\n
                if (*((v8 - 1)) == 45)\n
                {\n
                    v1 = 0;\n
                    break;\n
                }\n
LABEL_40204f:\n
                v8 -= 1;\n
                break;\n
            }\n
        }\n
    }\n
    if (!(v5 & -17))\n
    {\n
        if (*(v8) != 48)\n
        {\n
            v9 = v5;\n
            v10 = 10;\n
        }\n
        else if (*((v8 + 1)) == 120)\n
        {\n
            v8 += 2;\n
            v0 = 16;\n
            goto LABEL_402087;\n
        }\n
        else\n
        {\n
            v11 = v5;\n
            v10 = 8;\n
        }\n
        if ([D] x86g_calculate_condition(0x4<32>, 0xf<32>, cc_dep1<4>, 0x0<32>, 0x0<32>))\n
            v5 = v10;\n
    }\n
    v0 = v5;\n
LABEL_402087:\n
    v12 = 0;\n
    v2 = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n
    v13 = v2;\n
    while (true)\n
    {\n
        v14 = v12;\n
        v15 = v8;\n
        v16 = *(v8);\n
        if (!v16)\n
            break;\n
        v3 = v12;\n
        v17 = v0;\n
        v18 = cgc_memchr(v13, cgc_tolower(v16), v17);\n
        v14 = v3;\n
        v12 = v17 * v14 - v13 + v18;\n
        v8 = &v15->field_0;\n
        if (!v18)\n
            break;\n
    }\n
    v19 = a0;\n
    if (v19)\n
        *(v19) = v8;\n
    if (!v1)\n
        return -(v14);\n
    return v14;\n
}\n
", "4202740:cgc_strtoul": "int cgc_strtoul(void* v0, unsigned int *a0, unsigned int a1)\n
{\n
    return cgc_strtol(v0, a0, a1);\n
}\n
", "4202781:sub_40211d": null, "4202784:main": "typedef struct struct_1 {\n
    unsigned int field_-8;\n
    struct struct_0 *field_-4;\n
    unsigned int field_0;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 g_405094;\n
extern unsigned int g_output_buf;\n
\n
int main()\n
{\n
    char *v0;  // [bp-0x428]\n
    unsigned int v1;  // [bp-0x424]\n
    struct_1 *v2;  // [bp-0x420]\n
    unsigned int v3;  // [bp-0x41c]\n
    char *v4;  // [bp-0x418]\n
    unsigned int v5;  // [bp-0x414]\n
    char v6[2];  // [bp-0x410]\n
    char *v8;  // eax\n
    struct_1 *v10;  // ebp, Other Possible Types: unsigned int\n
    char *v11;  // eax, Other Possible Types: unsigned int\n
\n
    g_output_buf = cgc_malloc(0x10000);\n
    if (cgc_readuntil(0, v6, 0x400, 10))\n
    {\n
        cgc_fdprintf(1, \"BYE\\n
\");\n
        return 0;\n
    }\n
    v5 = \" \";\n
    v4 = \"BYE\";\n
    v3 = \"HELLO\";\n
    v2 = &g_405094.field_-8;\n
    v1 = \"ERROR %3d\\n
\";\n
    while (true)\n
    {\n
        *(&v0) = v6;\n
        if (!cgc_strlen(v6))\n
            break;\n
        *(&v5 + cgc_strlen(v6)) = 0;\n
        v8 = cgc_strsep(&v0, v5);\n
        if (!v8)\n
            break;\n
        if (!cgc_strcmp(v8, v4))\n
            break;\n
        v10 = v2;\n
        v11 = v3;\n
        while (cgc_strcmp(v11, v8))\n
        {\n
            v11 = *(v10);\n
            v10 += 8;\n
            if (!v11)\n
                goto LABEL_402255;\n
        }\n
        if (*((v10 - 8)))\n
        {\n
            if (!(!*((v10 - 4))()))\n
                break;\n
            goto LABEL_402274;\n
        }\n
LABEL_402255:\n
        if (cgc_fdprintf(1, v1) <= 9)\n
            break;\n
LABEL_402274:\n
        if (cgc_readuntil(0, v6, 0x400, 10))\n
            break;\n
    }\n
}\n
", "4203155:cgc_handle_hello": "extern unsigned int g_token;\n
\n
int cgc_handle_hello(unsigned int v2)\n
{\n
    void* v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v3;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // cc_dep1\n
    unsigned int v7;  // cc_dep1\n
\n
    v1 = v3;\n
    if (v2)\n
    {\n
        v0 = 500;\n
        v5 = cgc_fdprintf(1, \"ERROR %3d\\n
\");\n
        return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0xa<32>, 0x0<32>);\n
    }\n
    v4 = g_token;\n
    if (!g_token)\n
    {\n
        do\n
        {\n
            v0 = 0;\n
            cgc_random(&g_token, 4);\n
            v4 = g_token;\n
        } while (!g_token);\n
    }\n
    v0 = v4;\n
    v7 = cgc_fdprintf(1, \"OK %08X\\n
\");\n
    return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0xc<32>, 0x0<32>);\n
}\n
", "4203285:cgc_handle_auth": "extern char g_auth;\n
extern unsigned int g_token;\n
\n
int cgc_handle_auth()\n
{\n
    char *v0;  // [bp+0x4]\n
    void* v1;  // eax\n
    unsigned int v2;  // cc_dep1\n
    unsigned int v4;  // cc_dep1\n
\n
    v1 = cgc_strsep(&v0, \" \");\n
    if (v1 && cgc_strtoul(v1, NULL, 16) == g_token)\n
    {\n
        g_auth = 1;\n
        v2 = cgc_fdprintf(1, \"OK\\n
\");\n
        return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0x3<32>, 0x0<32>);\n
    }\n
    v4 = cgc_fdprintf(1, \"ERROR %3d\\n
\");\n
    return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0xa<32>, 0x0<32>);\n
}\n
", "4203436:cgc_handle_set": "extern char g_auth;\n
extern struct_0 *variables;\n
\n
int cgc_handle_set(char *v1)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v2;  // eax\n
    char *v3;  // ebp\n
    unsigned int v5[3];  // eax\n
    unsigned int v6[3];  // edi\n
    char *v7;  // eax\n
    char *v8;  // esi\n
    char *v9;  // esi\n
    unsigned int v10;  // cc_dep1\n
    unsigned int v12;  // cc_dep1\n
\n
    if (!g_auth)\n
    {\n
        v0 = 403;\n
    }\n
    else\n
    {\n
        v2 = cgc_strsep(&v1, \" \");\n
        v3 = v1;\n
        if (v1)\n
        {\n
            v5 = cgc_malloc(cgc_strlen(v3) + cgc_strlen(v2) + 14);\n
            if (v5)\n
            {\n
                v6 = v5;\n
                v7 = v2;\n
                v8 = v6 + 1;\n
                cgc_strcpy(v8, v7);\n
                v6[1] = v8;\n
                v9 = 13 + cgc_strlen(v8) + v6;\n
                cgc_strcpy(v9, v3);\n
                v6[2] = v9;\n
                v6[0] = variables;\n
                variables = &v6[0];\n
                v12 = cgc_fdprintf(1, \"OK\\n
\");\n
                return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0x3<32>, 0x0<32>);\n
            }\n
        }\n
        v0 = 500;\n
    }\n
    v10 = cgc_fdprintf(1, \"ERROR %3d\\n
\");\n
    return [D] x86g_calculate_condition(0xc<32>, 0x6<32>, cc_dep1<4>, 0xa<32>, 0x0<32>);\n
}\n
", "4203696:cgc_handle_call": "typedef struct struct_2 {\n
    unsigned int field_0;\n
    char padding_4[4];\n
    struct struct_0 *field_8;\n
    unsigned int field_c;\n
    unsigned int field_10;\n
} struct_2;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
extern struct_1 functions;\n
extern char g_auth;\n
extern unsigned int g_output_buf;\n
extern void* g_output_len;\n
\n
int cgc_handle_call()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    char *v1;  // [bp+0x4]\n
    unsigned int v2;  // eax\n
    unsigned int v3;  // eax\n
    struct_2 *v4;  // esi, Other Possible Types: unsigned int\n
    char *v5;  // eax\n
    char v6;  // cl\n
\n
    v0 = v2;\n
    if (g_auth)\n
    {\n
        v1 = cgc_strsep(&v1, \" \");\n
        if (v1 && functions.field_0)\n
        {\n
            v3 = cgc_strcmp(functions.field_0, v1);\n
            v4 = &functions.field_0;\n
            while (true)\n
            {\n
                if (!v3)\n
                {\n
                    if (*(v4))\n
                    {\n
                        g_output_len = 0;\n
                        *((v4 + 8))();\n
                        *((v4 + 12)) = *((v4 + 12)) + 1;\n
                        if (cgc_fdprintf(1, \"OK %u\\n
\") >= 4)\n
                        {\n
                            v6 = cgc_writeall(1, g_output_buf, g_output_len) != g_output_len;\n
                            return v6;\n
                        }\n
                        return 1;\n
                    }\n
                    break;\n
                }\n
                else\n
                {\n
                    v5 = *((v4 + 16));\n
                    if (!v5)\n
                        break;\n
                    v4 += 16;\n
                    v3 = cgc_strcmp(v5, v1);\n
                }\n
            }\n
        }\n
    }\n
    v6 = cgc_fdprintf(1, \"ERROR %3d\\n
\") < 10;\n
    return v6;\n
}\n
", "4203993:cgc_page_home": "typedef struct struct_0 {\n
    unsigned int field_-c;\n
    char padding_-8[4];\n
    unsigned int field_-4;\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern unsigned int functions;\n
extern struct_0 g_405210;\n
\n
int cgc_page_home()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v2;  // eax\n
    struct_0 *v3;  // esi, Other Possible Types: unsigned int\n
\n
    cgc_output_append();\n
    v2 = functions;\n
    if (functions)\n
    {\n
        v3 = &g_405210.field_-c;\n
        do\n
        {\n
            v0 = *((v3 - 12));\n
            cgc_output_append(\"\\t%s (called %d times)\\t\\t%s\\n
\", v2, *((v3 - 4)));\n
            v2 = *(v3);\n
            v3 += 16;\n
        } while (v2);\n
    }\n
    cgc_output_append();\n
    return 0;\n
}\n
", "4204097:cgc_page_root64": "int cgc_page_root64()\n
{\n
    unsigned int v0;  // [bp-0x114]\n
    char v1;  // [bp-0x10c]\n
    char *v3;  // edi\n
    unsigned int v4;  // eax\n
\n
    v3 = cgc_variable_get();\n
    v4 = cgc_variable_get();\n
    if (v3 && v4)\n
    {\n
        if (!cgc_strcmp(v3, \"encode\"))\n
        {\n
            if ((cgc_strlen(v4) * 2863311531 >> 32 << 1 & 0xfffffffc) <= 0x100)\n
            {\n
                cgc_root64_encode(&v1);\n
                goto LABEL_40271d;\n
            }\n
        }\n
        else\n
        {\n
            if (!cgc_strcmp(v3, \"decode\"))\n
            {\n
                if (cgc_strlen(v4) <= 0x100)\n
                {\n
                    cgc_root64_decode(&v1);\n
LABEL_40271d:\n
                    cgc_output_write();\n
                    return 0;\n
                }\n
                v0 = 501;\n
LABEL_4026b4:\n
                cgc_fdprintf(1, \"ERROR %3d\\n
\");\n
                return 1;\n
            }\n
        }\n
    }\n
    v0 = 500;\n
    goto LABEL_4026b4;\n
}\n
", "4204352:cgc_page_parcour": "int cgc_page_parcour()\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v4;  // ebp\n
    char *v5;  // eax\n
    char *v6;  // esi\n
    unsigned int v7;  // eax\n
    unsigned int v10;  // ebp\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // edi\n
\n
    v4 = cgc_variable_get();\n
    v5 = cgc_variable_get();\n
    if (v4)\n
    {\n
        v6 = v5;\n
        if (v5)\n
        {\n
            v7 = cgc_strlen(v4);\n
            cgc_parcour_init();\n
            v10 = cgc_strlen(v6);\n
            v1 = v4;\n
            if (!v10)\n
            {\n
                cgc_output_write();\n
                cgc_parcour_init(v1);\n
            }\n
            else\n
            {\n
                v2 = (v7 < 2 ? 2 : v7);\n
                v11 = 0;\n
                do\n
                {\n
                    v6[v11] = v6[v11] ^ cgc_parcour_byte();\n
                    v11 += 1;\n
                } while (v10 != v11);\n
                cgc_output_write();\n
                cgc_parcour_init(v1);\n
                if (v10)\n
                {\n
                    v12 = 0;\n
                    do\n
                    {\n
                        v6[v12] = v6[v12] ^ cgc_parcour_byte();\n
                        v12 += 1;\n
                    } while (v10 != v12);\n
                }\n
            }\n
            return 0;\n
        }\n
    }\n
    v0 = 500;\n
    cgc_fdprintf(1, \"ERROR %3d\\n
\");\n
    return 1;\n
}\n
", "4204595:cgc_output_append": "typedef struct struct_0 {\n
    char padding_0[184];\n
    unsigned int field_b8;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_output_buf;\n
extern unsigned int g_output_len;\n
\n
int cgc_output_append(unsigned int v1)\n
{\n
    struct_1 *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    void* *v2;  // [bp+0x8]\n
    unsigned int v3;  // eax\n
    unsigned int v5;  // eax\n
\n
    v0 = v3;\n
    v0 = &v2;\n
    v5 = cgc_vsnprintf(g_output_len + g_output_buf, 65535 - g_output_len, v1, &v2);\n
    if (v5 > 0)\n
    {\n
        *(&_GLOBAL_OFFSET_TABLE_.padding_0[184]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[184]) + v5;\n
        return v5;\n
    }\n
    return v5;\n
}\n
", "4204668:cgc_variable_get": "typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
    char *field_4;\n
    unsigned int field_8;\n
} struct_1;\n
\n
extern struct_0 *variables;\n
\n
int cgc_variable_get()\n
{\n
    struct_1 *v1;  // ebp, Other Possible Types: unsigned int\n
    char *v3;  // ecx\n
\n
    v1 = variables;\n
    if (!variables)\n
        return 0;\n
    while (true)\n
    {\n
        if (!cgc_strcmp(v3, *((v1 + 4))))\n
            return *((v1 + 8));\n
        v1 = *(v1);\n
        if (!v1)\n
            return 0;\n
    }\n
}\n
", "4204742:cgc_output_write": "typedef struct struct_0 {\n
    char padding_0[184];\n
    unsigned int field_b8;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
extern unsigned int g_output_buf;\n
extern unsigned int g_output_len;\n
\n
int cgc_output_write()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
    unsigned int v2;  // eax\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // edx\n
    unsigned int v7;  // ecx\n
\n
    v0 = v2;\n
    v5 = 65535 - g_output_len;\n
    if (v5 >= v6)\n
        v5 = v6;\n
    if (v5)\n
    {\n
        v4 = cgc_memcpy(g_output_len + g_output_buf, v7, v5);\n
        *(&_GLOBAL_OFFSET_TABLE_.padding_0[184]) = *(&_GLOBAL_OFFSET_TABLE_.padding_0[184]) + v5;\n
        return v4;\n
    }\n
    return g_output_len;\n
}\n
", "4204811:sub_40290b": null, "4204812:cgc_parcour_byte": "extern char _GLOBAL_OFFSET_TABLE_[190];\n
extern char g_40528d;\n
extern char g_state;\n
\n
int cgc_parcour_byte()\n
{\n
    int tmp_9;  // tmp #9\n
    int tmp_13;  // tmp #13\n
    char v1[190];  // eax\n
    unsigned int v2;  // edx\n
    unsigned int v3;  // ecx\n
    unsigned int v4;  // esi\n
    unsigned int v6;  // edx\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_[0];\n
    tmp_9 = g_state + 1;\n
    v1[188] = v1[188] + 1;\n
    v2 = tmp_9;\n
    v3 = _GLOBAL_OFFSET_TABLE_[190 + v2];\n
    tmp_13 = g_40528d + v3;\n
    v1[189] = v1[189] + v3;\n
    v4 = tmp_13;\n
    v1[1 + v2] = v1[1 + v4];\n
    _GLOBAL_OFFSET_TABLE_[190 + v4] = v3;\n
    v6 = _GLOBAL_OFFSET_TABLE_[190 + v2] + v3;\n
    return 16465 CONCAT _GLOBAL_OFFSET_TABLE_[190 + v6];\n
}\n
", "4204912:cgc_parcour_init": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern char g_40528d;\n
extern char g_40528e;\n
extern char g_state;\n
\n
int cgc_parcour_init(unsigned int v0, unsigned int a0)\n
{\n
    int tmp_23;  // tmp #23\n
    int tmp_18;  // tmp #18\n
    unsigned int v1;  // esi\n
    void* v2;  // eax, Other Possible Types: unsigned int\n
    char *v3;  // ecx, Other Possible Types: unsigned int\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // edi\n
    unsigned int v6;  // eax\n
    unsigned int v7;  // edx\n
    unsigned int v8;  // edi\n
    unsigned int v9;  // edi\n
    void* v10;  // edi, Other Possible Types: unsigned int\n
    void* v11;  // ecx, Other Possible Types: unsigned int\n
    char *v12;  // ebp, Other Possible Types: unsigned int\n
    unsigned int v13;  // ecx\n
    void* v14;  // eax\n
    unsigned int v15;  // edx\n
    unsigned int v16;  // edi\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v3 = &g_40528e;\n
    do\n
    {\n
        *(v3) = v2;\n
        v2 += 1;\n
        v3 += 1;\n
    } while (v2 != 0x100);\n
    v11 = 0;\n
    v12 = &g_40528e;\n
    v10 = 0;\n
    do\n
    {\n
        v4 = *(v12);\n
        v5 = v10 - v4;\n
        v6 = *((v0 + ((0 CONCAT v11) /m a0 >> 32)));\n
        v7 = v5 + v6 + 511;\n
        v8 = v5 + v6;\n
        tmp_23 = v8;\n
        v9 = v8 + 0x100;\n
        if ([D] x86g_calculate_condition(0x9<32>, 0x3<32>, t23, 0x100<32>, 0x0<32>))\n
            v7 = v9;\n
        v10 = v9 - (v7 & -0x100);\n
        *(v12) = (&_GLOBAL_OFFSET_TABLE_)[190 + v10];\n
        (&_GLOBAL_OFFSET_TABLE_)[190 + v10] = v4;\n
        v11 += 1;\n
        v12 += 1;\n
    } while (v11 != 0x100);\n
    v13 = 1;\n
    v14 = 0;\n
    do\n
    {\n
        v15 = v13;\n
        tmp_18 = (&_GLOBAL_OFFSET_TABLE_)[190 + v15];\n
        *(&v14) = v14 + (&_GLOBAL_OFFSET_TABLE_)[190 + v15];\n
        v16 = *(&v14);\n
        *((v1 + v15 + 190)) = *((v1 + v16 + 190));\n
        (&_GLOBAL_OFFSET_TABLE_)[190 + v16] = tmp_18;\n
        v13 += 1;\n
    } while (v13 != 5001);\n
    g_state = 136;\n
    g_40528d = v14;\n
    return v14;\n
}\n
", "4205104:cgc_root64_decode": "int cgc_root64_decode(unsigned int v1, char *a0)\n
{\n
    char *v0;  // [bp-0x14], Other Possible Types: unsigned int\n
    int tmp_32;  // tmp #32\n
    char *v2;  // eax\n
    char *v3;  // esi\n
    char v4;  // bl\n
    char *v5;  // esi, Other Possible Types: unsigned int\n
    unsigned int v6;  // ecx\n
    unsigned int v7;  // edi\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // edx\n
    void* v11;  // ebp, Other Possible Types: unsigned int\n
\n
    v0 = v2;\n
    v3 = a0;\n
    v4 = *(v3);\n
    if (!*(v3))\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v5 = v3 + 1;\n
    v11 = 0;\n
    v10 = 8;\n
    v0 = 0;\n
    while (true)\n
    {\n
        v6 = v4;\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x19<32>, 0x0<32>))\n
        {\n
            v8 = v6 - 48;\n
            goto LABEL_402a7e;\n
        }\n
        if ([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x19<32>, 0x0<32>))\n
        {\n
            v8 = v6 - 55;\n
            goto LABEL_402a7e;\n
        }\n
        else if (!([D] x86g_calculate_condition(0x6<32>, 0x4<32>, Conv(8->32, (Conv(32->8, ecx<4>) - 0x41<8>)), 0x19<32>, 0x0<32>)))\n
        {\n
            v7 = 62;\n
            if (v6 == 58)\n
            {\n
LABEL_402a85:\n
                v9 = 6;\n
                if (v10 <= 6)\n
                {\n
                    v9 = 6 - v10;\n
                    *((v1 + v0)) = (v7 >> (v9 & 31)) | v11;\n
                    *(&v10) = v10 + 2;\n
                    v0 += 1;\n
                    v7 &= 255 >> (v10 & 31);\n
                    v10 = 8;\n
                    v11 = 0;\n
                }\n
                v10 -= v9;\n
                v11 |= v7 << (v10 & 31);\n
                tmp_32 = *(v5);\n
                v4 = *(v5);\n
                v5 += 1;\n
                if (!tmp_32)\n
                    return v0;\n
            }\n
            else\n
            {\n
                v7 = (v6 == 59) * 64 - 1;\n
LABEL_402a80:\n
                if (v7 == -1)\n
                    return v0;\n
                goto LABEL_402a85;\n
            }\n
        }\n
        else\n
        {\n
            v8 = v6 - 61;\n
LABEL_402a7e:\n
            v7 = v8;\n
            goto LABEL_402a80;\n
        }\n
    }\n
}\n
", "4205312:cgc_root64_encode": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_root64_encode(unsigned int v1, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    int tmp_5;  // tmp #5\n
    int tmp_0;  // tmp #0\n
    unsigned int v2;  // eax\n
    char *v3;  // ebx\n
    char v4;  // cl\n
    unsigned int v5;  // esi\n
    unsigned int v6;  // ebp\n
    unsigned int v8;  // esi\n
    void* v9;  // edi, Other Possible Types: unsigned int\n
    char *v10;  // eax, Other Possible Types: unsigned int\n
    void* v11;  // edx, Other Possible Types: unsigned int\n
    char *v12;  // ebx, Other Possible Types: unsigned int\n
    unsigned int v13;  // edx\n
\n
    v0 = v2;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0;\n
    v4 = *(v3);\n
    if (!*(v3))\n
        return 0;\n
    v12 = v3 + 1;\n
    v11 = 0;\n
    v9 = 0;\n
    v10 = 0;\n
    do\n
    {\n
        v5 = v4;\n
        tmp_0 = 4 - v11;\n
        v11 += 2;\n
        v6 = v5 >> (v11 & 31) | v9;\n
        *((v1 + v10)) = *((v0 + v6 - 8196));\n
        v8 = v5 << (tmp_0 & 31) & 63;\n
        if (v11 != 6)\n
        {\n
            v9 = v8;\n
            v10 += 1;\n
        }\n
        else\n
        {\n
            *((v1 + v10 + 1)) = *((v0 + v9 - 8196));\n
            v10 += 2;\n
            v9 = 0;\n
            v11 = 0;\n
        }\n
        tmp_5 = *(v12);\n
        v4 = *(v12);\n
        v12 += 1;\n
    } while (tmp_5);\n
    if (v11 <= 0)\n
    {\n
        v13 = v1;\n
    }\n
    else\n
    {\n
        v13 = v1;\n
        *((v13 + v10)) = *((v0 + v9 - 8196));\n
        goto LABEL_402b9b;\n
    }\n
    for (; (v10 & 3); v10 += 1)\n
    {\n
        *((v13 + v10)) = 61;\n
LABEL_402b9b:\n
    }\n
    return v10;\n
}\n
", "4205480:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:__libc_start_main": null, "5242884:cgc__terminate": null, "5242888:cgc_transmit": null, "5242892:cgc_random": null, "5242896:cgc_allocate": null, "5242900:cgc_deallocate": null, "5242904:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}