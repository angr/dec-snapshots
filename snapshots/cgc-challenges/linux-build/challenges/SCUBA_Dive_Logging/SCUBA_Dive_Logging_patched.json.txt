{"4202496:_init": "extern struct_0 *g_40b344;\n
\n
int _init()\n
{\n
    if (g_40b344)\n
    {\n
        g_40b344();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:memcpy": "// attributes: PLT stub\n
void* memcpy(void* v0, void* to, unsigned int from)\n
{\n
    return ::libc.so.0::memcpy(v0, to, from);\n
}\n
", "4202608:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202624:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202640:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202656:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202672:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202688:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202704:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202720:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202736:sub_4020f0": "int sub_4020f0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202742:sub_4020f6": null, "4202752:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp+0x0], Other Possible Types: unsigned int\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202795:sub_40212b": null, "4202796:sub_40212c": "int sub_40212c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202800:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202804:sub_402134": null, "4202816:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 37387;\n
    v6 = v5 + 16;\n
    v7 = v5 + 16;\n
    if (v7 == v6)\n
        return v5 + 16;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202867:sub_402173": "int sub_402173()\n
{\n
}\n
", "4202873:sub_402179": "int sub_402179()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202880:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 37323;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 16;\n
    v9 = (v6 + 16 - (v6 + 16) >> 31) + (16 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202951:sub_4021c7": "int sub_4021c7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202960:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_40b340;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_40b340)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020f0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203035:sub_40221b": "int sub_40221b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203040:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203049:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203053:sub_40222d": null, "4203056:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4203148:sub_40228c": null, "4203152:cgc_malloc": "typedef struct struct_1 {\n
    char padding_0[84];\n
    struct struct_0 *field_54;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    unsigned int field_0;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_1 *v1;  // [bp-0x2c]\n
    struct struct_0 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_0 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_54->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_54 == v9)\n
        {\n
            v1->field_54 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_54 == v9)\n
    {\n
        v1->field_54 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4203835:sub_40253b": null, "4203840:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[84];\n
    unsigned int field_54;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_54;\n
    v7->field_54 = v3;\n
    return v3;\n
}\n
", "4204040:sub_402608": null, "4204048:cgc_free": "typedef struct struct_0 {\n
    char padding_0[84];\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct_0 *, struct struct_1 *[2], unsigned int, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_54 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_54 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_54;\n
    v2[1] = 0;\n
    if (v9->field_54)\n
    {\n
        v12 = v1;\n
        *((&v12->field_54->field_0 + (v12->field_54->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_54 = v7;\n
    return v1;\n
}\n
", "4204512:cgc_floor": "typedef struct struct_0 {\n
    char padding_0[84];\n
    struct struct_1 *field_54;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct_0 *, struct struct_1 *[2], unsigned int, struct struct_1 **\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_54 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_54 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_54;\n
    v2[1] = 0;\n
    if (v9->field_54)\n
    {\n
        v12 = v1;\n
        *((&v12->field_54->field_0 + (v12->field_54->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_54 = v7;\n
    return v1;\n
}\n
", "4204676:sub_402884": null, "4204688:cgc_round_away_from_zero": null, "4204842:sub_40292a": null, "4204848:cgc_round": null, "4204992:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4205084:sub_402a1c": null, "4205088:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        *(v1) = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205297:sub_402af1": null, "4205312:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        *(v1) = (v3 & 15) + 48;\n
        if (*(v1) > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205505:sub_402bc1": null, "4205520:cgc_float_to_str": null, "4206383:sub_402f2f": null, "4206384:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_403804:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    cgc_putc(v14->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    cgc_putc(*(v12));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    cgc_putc(*(v10));\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_403804;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403683;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403683:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (!v20)\n
                        cgc_putc(32);\n
                    else\n
                        cgc_putc(48);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4208667:sub_40381b": null, "4208672:cgc_vsprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_0 **a1)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    unsigned int v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            *((v26 + v24)) = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40405b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                *((v26 + v24)) = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                *((v26 + v24)) = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = *(v28);\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    *((v26 + v24)) = v14->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; *(v12); v12 += 1)\n
                {\n
                    *((v26 + v24)) = *(v12);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 8;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; *(v10); v10 += 1)\n
                {\n
                    *((v26 + v24)) = *(v10);\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40405b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403efe;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403efe:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        *((v26 + v24)) = 48;\n
                    else\n
                        *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                *((v26 + v24)) = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4210802:sub_404072": null, "4210816:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4210880:cgc_sprintf": "int cgc_sprintf(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    return v0;\n
}\n
", "4210949:sub_404105": null, "4210960:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    return v0;\n
}\n
", "4211032:sub_404158": null, "4211040:cgc_islower": "int cgc_islower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211094:sub_404196": null, "4211104:cgc_isupper": "int cgc_isupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211158:sub_4041d6": null, "4211168:cgc_isalpha": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalpha(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_islower(v3);\n
    v5 = v2;\n
    return v1 | cgc_isupper(v3);\n
}\n
", "4211234:sub_404222": null, "4211248:cgc_isalnum": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_isalnum(unsigned int v3)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_isalpha(v3);\n
    v5 = v2;\n
    return v1 | cgc_isdigit();\n
}\n
", "4211314:sub_404272": null, "4211328:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4211382:sub_4042b6": null, "4211392:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4211486:sub_40431e": null, "4211488:cgc_isnan": null, "4211511:sub_404337": null, "4211520:cgc_isinf": null, "4211567:sub_40436f": null, "4211568:cgc_atof": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atof(char *v13)\n
{\n
    unsigned int v0;  // [bp-0x3c]\n
    unsigned int v1;  // [bp-0x38]\n
    unsigned int v2;  // [bp-0x34]\n
    char *v3;  // [bp-0x30]\n
    void* v4;  // [bp-0x2c], Other Possible Types: unsigned int\n
    char *v5;  // [bp-0x28], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x24], Other Possible Types: unsigned long\n
    unsigned int v7;  // [bp-0x20]\n
    void* v8;  // [bp-0x1c], Other Possible Types: unsigned long\n
    void* v9;  // [bp-0x18]\n
    void* v10;  // [bp-0x14], Other Possible Types: unsigned long\n
    void* v11;  // [bp-0x10]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    char *v15;  // eax, Other Possible Types: unsigned int\n
    unsigned int v17;  // ftop\n
    unsigned int v19;  // ftop\n
    unsigned int v20;  // ftop\n
    unsigned int v21;  // ftop\n
    unsigned int v22;  // ftop\n
    unsigned int v23;  // ftop\n
    unsigned int v24;  // ftop\n
    unsigned int v25;  // ftop\n
    unsigned int v26;  // ftop\n
    unsigned int v27;  // ftop\n
    unsigned int v28;  // ftop\n
    unsigned int v29;  // ftop\n
    unsigned int v31;  // ftop\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v35;  // ftop\n
    unsigned int v36;  // ftop\n
    unsigned int v37;  // ftop\n
\n
    v12 = v14;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v15 = v13;\n
    if (!v13)\n
    {\n
        v11 = 0;\n
        v10 = 0;\n
    }\n
    else\n
    {\n
        v9 = 0;\n
        v8 = 0;\n
        v7 = 1069128089;\n
        v6 = 2576980378;\n
        for (v5 = 1; cgc_isspace(*(v13)); v13 += 1);\n
        v4 = 0;\n
        while (true)\n
        {\n
            if (!*(v13))\n
            {\n
LABEL_4045a2:\n
                v15 = v5;\n
                v3 = v15;\n
                if (![D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                if ([D] GetI(136:I8x8)[t3,0])\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                else\n
                {\n
                    [D] PutI(72:F64x8)[t3,0] = t6\n
                    [D] PutI(136:I8x8)[t3,0] = 0x01\n
                }\n
                [D] PutI(72:F64x8)[t1,1] = t2\n
                [D] PutI(136:I8x8)[t1,1] = 0x01\n
                [D] PutI(136:I8x8)[t1,0] = 0x00\n
                v10 = ([D] GetI(136:I8x8)[t26,0] ? [D] GetI(72:F64x8)[t26,0] : nan);\n
                [D] PutI(136:I8x8)[t26,0] = 0x00\n
                break;\n
            }\n
            else\n
            {\n
                v15 = *(v13);\n
                if (v15 == 45)\n
                {\n
                    if (!v4)\n
                    {\n
                        v5 = -1;\n
                        v4 += 1;\n
                        goto LABEL_40457b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 43)\n
                {\n
                    if (!v4)\n
                    {\n
                        v4 += 1;\n
                        goto LABEL_40457b;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                }\n
                v15 = *(v13);\n
                if (v15 == 46)\n
                {\n
                    if (v4 && v4 != 1)\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
                    v4 = 2;\n
                    goto LABEL_40457b;\n
                }\n
                v15 = cgc_isdigit(*(v13));\n
                if (!v15)\n
                    goto LABEL_4045a2;\n
                if (!v4)\n
                {\n
LABEL_4044f7:\n
                    v4 = 1;\n
                    v17 = v31 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v20 = v17 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v1 = *(v13) - 48;\n
                    v21 = v20 - 1;\n
                    if (![D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v23 = v21 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    v25 = v23 - 1;\n
                    if ([D] GetI(136:I8x8)[t3,0])\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    else\n
                    {\n
                        v27 = v25 - 1;\n
                        [D] PutI(72:F64x8)[t3,0] = t6\n
                        [D] PutI(136:I8x8)[t3,0] = 0x01\n
                    }\n
                    [D] PutI(72:F64x8)[t1,2] = t2\n
                    [D] PutI(136:I8x8)[t1,2] = 0x01\n
                    [D] PutI(136:I8x8)[t1,0] = 0x00\n
                    v29 = v27 + 1;\n
                    [D] PutI(72:F64x8)[t21,1] = t22\n
                    [D] PutI(136:I8x8)[t21,1] = 0x01\n
                    [D] PutI(136:I8x8)[t21,0] = 0x00\n
                    v8 = ([D] GetI(136:I8x8)[t46,0] ? [D] GetI(72:F64x8)[t46,0] : nan);\n
                    [D] PutI(136:I8x8)[t46,0] = 0x00\n
                    v31 = v29 + 1 + 1;\n
                    goto LABEL_40457b;\n
                }\n
                else\n
                {\n
                    if (v4 == 1)\n
                        goto LABEL_4044f7;\n
                    if (v4 == 2)\n
                    {\n
                        v2 = *(v13) - 48;\n
                        v19 = v31 - 1;\n
                        if (![D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v22 = v19 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v24 = v22 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v26 = v24 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        v28 = v26 - 1;\n
                        if ([D] GetI(136:I8x8)[t3,0])\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        else\n
                        {\n
                            v32 = v28 - 1;\n
                            [D] PutI(72:F64x8)[t3,0] = t6\n
                            [D] PutI(136:I8x8)[t3,0] = 0x01\n
                        }\n
                        [D] PutI(72:F64x8)[t9,0] = t13\n
                        [D] PutI(136:I8x8)[t9,0] = 0x01\n
                        [D] PutI(72:F64x8)[t9,2] = t6\n
                        [D] PutI(136:I8x8)[t9,2] = 0x01\n
                        [D] PutI(72:F64x8)[t24,1] = t25\n
                        [D] PutI(136:I8x8)[t24,1] = 0x01\n
                        [D] PutI(136:I8x8)[t24,0] = 0x00\n
                        v33 = v32 + 1;\n
                        [D] PutI(72:F64x8)[t44,1] = t45\n
                        [D] PutI(136:I8x8)[t44,1] = 0x01\n
                        [D] PutI(136:I8x8)[t44,0] = 0x00\n
                        v8 = ([D] GetI(136:I8x8)[t69,0] ? [D] GetI(72:F64x8)[t69,0] : nan);\n
                        [D] PutI(136:I8x8)[t69,0] = 0x00\n
                        v35 = v33 + 1 - 0;\n
                        [D] PutI(72:F64x8)[t78,0] = t81\n
                        [D] PutI(136:I8x8)[t78,0] = 0x01\n
                        v36 = v35 - 1;\n
                        [D] PutI(72:F64x8)[t90,0] = t93\n
                        [D] PutI(136:I8x8)[t90,0] = 0x01\n
                        [D] PutI(72:F64x8)[t101,1] = t102\n
                        [D] PutI(136:I8x8)[t101,1] = 0x01\n
                        [D] PutI(136:I8x8)[t101,0] = 0x00\n
                        v37 = v36 + 1;\n
                        v6 = ([D] GetI(136:I8x8)[t126,0] ? [D] GetI(72:F64x8)[t126,0] : nan);\n
                        [D] PutI(136:I8x8)[t126,0] = 0x00\n
                        v31 = v37 + 1;\n
                    }\n
                    else\n
                    {\n
                        v11 = 0;\n
                        v10 = 0;\n
                        break;\n
                    }\n
LABEL_40457b:\n
                    v13 += 1;\n
                }\n
            }\n
        }\n
    }\n
    if ([D] GetI(136:I8x8)[t3,0])\n
    {\n
        [D] PutI(72:F64x8)[t3,0] = t6\n
        [D] PutI(136:I8x8)[t3,0] = 0x01\n
        return v15;\n
    }\n
    [D] PutI(72:F64x8)[t3,0] = t6\n
    [D] PutI(136:I8x8)[t3,0] = 0x01\n
    return v15;\n
}\n
", "4212156:sub_4045bc": null, "4212160:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 10)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4212564:sub_404754": null, "4212576:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0[a0]; v0 += 1)\n
    {\n
        v0[v1] = v0[a0];\n
    }\n
    v0[v1] = 0;\n
    return v1;\n
}\n
", "4212667:sub_4047bb": null, "4212672:cgc_strncpy": "int cgc_strncpy(unsigned int v2, unsigned int a0, unsigned int a1)\n
{\n
    char v0;  // [bp-0x9]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v1 < a1)\n
            v0 = *((a0 + v1));\n
        if (!(v0 & 1))\n
            break;\n
        *((v2 + v1)) = *((a0 + v1));\n
        v1 += 1;\n
    }\n
    for (; v1 < a1; v1 += 1)\n
    {\n
        *((v2 + v1)) = 0;\n
    }\n
    return v2;\n
}\n
", "4212827:sub_40485b": null, "4212832:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4212940:sub_4048cc": null, "4212944:cgc_memset": "int cgc_memset(char *v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8]\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    v0 = v1;\n
    while (true)\n
    {\n
        a1 -= 1;\n
        if (!a1)\n
            break;\n
        v0[a1] = a0;\n
    }\n
    v0[a1] = a0;\n
    return v1;\n
}\n
", "4213022:sub_40491e": null, "4213024:cgc_strcmp": "int cgc_strcmp(char *v2, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    char v1;  // [bp-0x5]\n
    unsigned int v3;  // eax\n
\n
    v0 = v3;\n
    while (true)\n
    {\n
        v1 = 0;\n
        if (*(v2))\n
            v1 = *(v2) == *(a0);\n
        if (!(v1 & 1))\n
            break;\n
        v2 += 1;\n
        a0 += 1;\n
    }\n
    return *(v2) - *(a0);\n
}\n
", "4213132:sub_40498c": null, "4213136:cgc_strncat": "int cgc_strncat(char *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char v1;  // [bp-0x15]\n
    unsigned int v2;  // [bp-0x14]\n
    unsigned int v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = v5;\n
    v3 = cgc_strlen();\n
    if (v5 && a0)\n
    {\n
        v2 = 0;\n
        while (true)\n
        {\n
            v1 = 0;\n
            if (v2 < a1)\n
                v1 = a0[v2];\n
            if (!(v1 & 1))\n
                break;\n
            v5[v2 + v3] = a0[v2];\n
            v2 += 1;\n
        }\n
        v5[v2 + v3] = 0;\n
        v4 = v5;\n
        return v4;\n
    }\n
    v4 = v5;\n
    return v4;\n
}\n
", "4213331:sub_404a53": null, "4213344:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (!v1)\n
        return v0;\n
    for (v0 = 0; v0[v1]; v0 += 1);\n
    return v0;\n
}\n
", "4213421:sub_404aad": null, "4213424:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_bzero(&v7, 128);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        else if ((*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            cgc_receive(v9, &v2, 0x400);\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
}\n
", "4213746:sub_404bf2": null, "4213760:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4213863:sub_404c67": null, "4213872:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 0; v4 < a1; v4 += 1)\n
    {\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a0)\n
                break;\n
            v4[v5] = v2;\n
        }\n
    }\n
    if (v4 == a1)\n
        cgc_flush_input(0);\n
    return v4;\n
}\n
", "4214093:sub_404d4d": null, "4214096:cgc_receive_bytes": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_bytes(unsigned int v6, unsigned int a0)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x1c]\n
    void* v2;  // [bp-0x18]\n
    void* v3;  // [bp-0x14], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    v2 = 0;\n
    v3 = a0 - v4;\n
    while (true)\n
    {\n
        if (!v3)\n
        {\n
            v5 = 0;\n
            return v5;\n
        }\n
        v0 = &v2;\n
        if (cgc_receive(0, v6 + v4, v3))\n
        {\n
            v5 = -1;\n
            return v5;\n
        }\n
        v3 -= v2;\n
        v4 = v2 + v4;\n
    }\n
}\n
", "4214272:cgc_strcat": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strcat(char *v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char *v1;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    v1 = 0;\n
    if (v3 && a0)\n
    {\n
        for (v1 = cgc_strlen(v3); v2[a0]; v2 += 1)\n
        {\n
            v3[v1] = v2[a0];\n
            v1 += 1;\n
        }\n
        v2 = v1;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4214431:sub_404e9f": null, "4214432:cgc_itoa": "int cgc_itoa(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    void* v0;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = 0;\n
    v0 = 0;\n
    if (!v3)\n
        return v2;\n
    v0 = a0;\n
    do\n
    {\n
        v1 += 1;\n
        v0 = (0 CONCAT v0) /m 10;\n
    } while (v0);\n
    if (v1 >= a1)\n
        return v2;\n
    v2 = v1;\n
    v1 -= 1;\n
    do\n
    {\n
        *((v3 + v1)) = ((0 CONCAT a0) /m 10 >> 32) + 48;\n
        a0 = (0 CONCAT a0) /m 10;\n
        v1 -= 1;\n
    } while (a0);\n
    *((v3 + v2)) = 0;\n
    return v2;\n
}\n
", "4214631:sub_404f67": null, "4214640:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 8610, 1);\n
}\n
", "4214763:sub_404feb": null, "4214768:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4214874:sub_40505a": null, "4214880:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[68];\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    unsigned int field_4c;\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_48)\n
        {\n
            cgc_deallocate(v4->field_48);\n
            v12 = v4;\n
            v12->field_48 = 0;\n
            v12->field_4c = 0;\n
            v12->field_50 = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_48)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_50 >= v11->field_48 + v11->field_4c)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_48)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_4c = cgc_strlen(v10);\n
        v0 = &v13->field_48;\n
        if (cgc_allocate(v13->field_4c, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_48, v10);\n
        v14 = v4;\n
        v14->field_50 = v14->field_48;\n
    }\n
    v10 = &v4->field_50->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_48 + v15->field_4c;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_48 + v16->field_4c)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_44 = v8;\n
    *(v7) = 0;\n
    v17->field_50 = v7 + 1;\n
    v9 = v17->field_44;\n
    return v9;\n
}\n
", "4215627:sub_40534b": null, "4215632:cgc_write": "int cgc_write(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    char v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
\n
    v0 = &v1;\n
    cgc_transmit(1, v3, a0);\n
    if (a0 != *(&v1))\n
    {\n
        v2 = -1;\n
        return v2;\n
    }\n
    v2 = *(&v1);\n
    return v2;\n
}\n
", "4215729:sub_4053b1": null, "4215744:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen(v5) + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen(v5) + 1);\n
    cgc_strcpy(*(&v3), v5);\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4215936:cgc_datetime2time_t": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_datetime2time_t(unsigned int v5[7])\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x18]\n
    void* v2;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x10]\n
    void* v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    if (v5[2] < 1970)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    for (v3 = 1970; v3 < v5[2]; v3 += 1)\n
    {\n
        v0 = v3;\n
        v2 = cgc_leap_year() + 365 + v2;\n
    }\n
    v2 = v5[6] - 1 + v2;\n
    v2 *= 86400;\n
    v2 = v5[3] * 3600 + v2;\n
    v2 = v5[4] * 60 + v2;\n
    v2 = v5[5] + v2;\n
    v4 = v2;\n
    return v4;\n
}\n
", "4216138:sub_40554a": null, "4216144:cgc_leap_year": "int cgc_leap_year(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if ((0 CONCAT v1) /m 400 >> 32 && !(0 CONCAT v1) /m 100 >> 32)\n
        goto LABEL_40559c;\n
    if (!(v1 & 3))\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
LABEL_40559c:\n
    v0 = 0;\n
    return v0;\n
}\n
", "4216235:sub_4055ab": null, "4216240:cgc_time_t2datetime": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_409060;\n
\n
int cgc_time_t2datetime(unsigned int v12, unsigned int a0[7])\n
{\n
    unsigned int v0;  // [bp-0x64]\n
    unsigned int v1;  // [bp-0x60]\n
    unsigned int v2;  // [bp-0x5c]\n
    unsigned int v3;  // [bp-0x58]\n
    unsigned int v4;  // [bp-0x54]\n
    char v5;  // [bp-0x50]\n
    struct_0 *v6;  // [bp-0x1c], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0x18]\n
    void* v8;  // [bp-0x14], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x10]\n
    unsigned int v10;  // [bp-0xc]\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // ebx\n
\n
    v11 = v13;\n
    v4 = &_GLOBAL_OFFSET_TABLE_;\n
    memcpy(&v5, &g_409060, 52);\n
    v10 = (0 CONCAT v12) /m 86400 >> 32;\n
    a0[5] = (0 CONCAT v10) /m 60 >> 32;\n
    a0[4] = (0 CONCAT (0 CONCAT v10) /m 60) /m 60 >> 32;\n
    a0[3] = (0 CONCAT v10) /m 3600;\n
    v9 = (0 CONCAT v12) /m 86400;\n
    v8 = 0;\n
    for (v6 = 1970; v8 <= v9; v6 += 1)\n
    {\n
        v8 = cgc_leap_year(v6) + 365 + v8;\n
    }\n
    a0[2] = v6 - 1;\n
    v8 -= cgc_leap_year(a0[2]) + 365;\n
    v7 = v9 - v8 + 1;\n
    a0[6] = v7;\n
    v6 = 0;\n
    while (true)\n
    {\n
        v3 = *(&(&v5)[4 * v6]);\n
        v2 = !(v6 <= 1);\n
        if (v3 + cgc_leap_year(a0[2]) * v2 >= v7)\n
            break;\n
        v6 += 1;\n
    }\n
    a0[0] = v6;\n
    v0 = v7 - *(&(&v5)[4 + 4 * a0[0]]);\n
    v1 = !(a0[0] <= 2);\n
    a0[1] = v0 - cgc_leap_year(a0[2]) * v1;\n
    v14 = v11;\n
    return 0;\n
}\n
", "4216700:sub_40577c": null, "4216704:cgc_str2datetime": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_409094;\n
\n
int cgc_str2datetime(char *v16, unsigned int a0[7])\n
{\n
    char v0;  // [bp-0x66]\n
    char v1;  // [bp-0x65]\n
    unsigned int v2;  // [bp-0x64]\n
    char v3;  // [bp-0x5e]\n
    char v4;  // [bp-0x5d]\n
    unsigned int v5;  // [bp-0x5c]\n
    char *v6;  // [bp-0x58], Other Possible Types: unsigned int\n
    char v7;  // [bp-0x54]\n
    unsigned int v8;  // [bp-0x24]\n
    unsigned int v9;  // [bp-0x20]\n
    unsigned int v10;  // [bp-0x1c]\n
    unsigned int v11;  // [bp-0x18]\n
    unsigned int v12;  // [bp-0x14]\n
    unsigned int v13;  // [bp-0x10]\n
    unsigned int v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
\n
    v15 = v17;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    memcpy(&v7, &g_409094, 48);\n
    for (; cgc_isspace(*(v16)); v16 += 1);\n
    v6 = v16;\n
    v13 = cgc_atoi(v6);\n
    if (v13 >= 1 && v13 <= 12)\n
    {\n
        while (true)\n
        {\n
            v4 = 0;\n
            if (*(v6) != 47)\n
                v4 = *(v6);\n
            if (!(v4 & 1))\n
                break;\n
            v6 += 1;\n
        }\n
        v6 += 1;\n
        v12 = cgc_atoi(v6);\n
        if (v12 < 1)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
        if (v13 != 1 && v13 != 3 && v13 != 5 && v13 != 7 && v13 != 8 && v13 != 10 && !(v13 == 12))\n
            goto LABEL_4058ea;\n
        if (v12 > 31)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
LABEL_4058ea:\n
        if (v13 != 4 && v13 != 6 && v13 != 9 && !(v13 == 11))\n
            goto LABEL_405928;\n
        if (v12 > 30)\n
        {\n
            v14 = -2;\n
            return v14;\n
        }\n
LABEL_405928:\n
        while (true)\n
        {\n
            v3 = 0;\n
            if (*(v6) != 47)\n
                v3 = *(v6);\n
            if (!(v3 & 1))\n
                break;\n
            v6 += 1;\n
        }\n
        v6 += 1;\n
        v11 = cgc_atoi(v6);\n
        if (v11 >= 1970 && v11 <= 2050)\n
        {\n
            if (v13 == 2)\n
            {\n
                v2 = v12;\n
                if (v2 > cgc_leap_year(v11) + 28)\n
                {\n
                    v14 = -2;\n
                    return v14;\n
                }\n
            }\n
            a0[2] = v11;\n
            a0[1] = v12;\n
            for (a0[0] = v13; ((cgc_isspace(*(v6)) ^ 255) & 1); v6 += 1);\n
            for (; cgc_isspace(*(v6)); v6 += 1);\n
            v10 = cgc_atoi(v6);\n
            while (true)\n
            {\n
                v1 = 0;\n
                if (*(v6) != 58)\n
                    v1 = *(v6);\n
                if (!(v1 & 1))\n
                    break;\n
                v6 += 1;\n
            }\n
            v6 += 1;\n
            v9 = cgc_atoi(v6);\n
            while (true)\n
            {\n
                v0 = 0;\n
                if (*(v6) != 58)\n
                    v0 = *(v6);\n
                if (!(v0 & 1))\n
                    break;\n
                v6 += 1;\n
            }\n
            v6 += 1;\n
            v8 = cgc_atoi(v6);\n
            a0[3] = v10;\n
            a0[4] = v9;\n
            a0[5] = v8;\n
            a0[6] = cgc_doy(a0[2], a0[0]);\n
            v14 = cgc_datetime2time_t(a0);\n
            return v14;\n
        }\n
        v14 = -2;\n
        return v14;\n
    }\n
    v14 = -2;\n
    return v14;\n
}\n
", "4217739:sub_405b8b": null, "4217744:cgc_doy": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_4090c4;\n
\n
int cgc_doy(unsigned int v4, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x40]\n
    char v1;  // [bp-0x3c]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    memcpy(&v1, &g_4090c4, 48);\n
    v2 = *(&(&v1)[4 + 4 * a0]) + a1;\n
    if (a0 > 2)\n
    {\n
        v2 = cgc_leap_year(v4) + v2;\n
        return v2;\n
    }\n
    return v2;\n
}\n
", "4217859:sub_405c03": null, "4217872:cgc_print_time_t": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_time_t(unsigned int v15)\n
{\n
    unsigned int v0;  // [bp-0x54]\n
    unsigned int v1;  // [bp-0x50]\n
    unsigned int v2;  // [bp-0x4c]\n
    unsigned int v3;  // [bp-0x48]\n
    unsigned int v4;  // [bp-0x44]\n
    unsigned int v5;  // [bp-0x38]\n
    unsigned int v6;  // [bp-0x34]\n
    unsigned int v7;  // [bp-0x30]\n
    unsigned int v8[7];  // [bp-0x2c]\n
    char v9;  // [bp-0x28]\n
    char v10;  // [bp-0x24]\n
    char v11;  // [bp-0x20]\n
    char v12;  // [bp-0x1c]\n
    char v13;  // [bp-0x18]\n
    unsigned int v14;  // [bp-0x8]\n
    unsigned int v16;  // ebx\n
\n
    v14 = v16;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_time_t2datetime(v15, v8);\n
    v6 = v8[0];\n
    v7 = *(&v13);\n
    v0 = *(&v9);\n
    v1 = *(&v10);\n
    v2 = *(&v11);\n
    v3 = *(&v12);\n
    v4 = v7;\n
    return cgc_printf(v5 - 8796);\n
}\n
", "4217996:sub_405c8c": null, "4218000:cgc_print_datetime": "int cgc_print_datetime(unsigned int v10[6])\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    unsigned int v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x24]\n
    unsigned int v6;  // [bp-0x18]\n
    unsigned int v7;  // [bp-0x14]\n
    unsigned int v8;  // [bp-0x10]\n
    unsigned int v9;  // [bp-0xc]\n
    unsigned int v11;  // edi\n
    unsigned int v12;  // esi\n
\n
    v9 = v11;\n
    v8 = v12;\n
    v6 = v10[0];\n
    v7 = v10[5];\n
    v0 = v6;\n
    v1 = v10[1];\n
    v2 = v10[2];\n
    v3 = v10[3];\n
    v4 = v10[4];\n
    v5 = v7;\n
    return cgc_printf(\"@d/@d/@d @02d:@02d:@02d\");\n
}\n
", "4218117:sub_405d05": null, "4218128:cgc_to_date_str": "int cgc_to_date_str(unsigned int v5[3], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v0 = v5[0];\n
    v1 = v5[1];\n
    v2 = v5[2];\n
    cgc_sprintf(a0, \"@d/@d/@d\");\n
    return 0;\n
}\n
", "4218215:sub_405d67": null, "4218224:cgc_to_time_str": "int cgc_to_time_str(unsigned int v5[6], unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x20]\n
    unsigned int v2;  // [bp-0x1c]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
    unsigned int v6;  // edi\n
    unsigned int v7;  // esi\n
\n
    v4 = v6;\n
    v3 = v7;\n
    v0 = v5[3];\n
    v1 = v5[4];\n
    v2 = v5[5];\n
    cgc_sprintf(a0, \"@02d:@02d:@02d\");\n
    return 0;\n
}\n
", "4218312:sub_405dc8": null, "4218320:cgc_diff_between_dates": "int cgc_diff_between_dates(unsigned int v0, unsigned int a0)\n
{\n
    return 0;\n
}\n
", "4218333:sub_405ddd": null, "4218336:cgc_dive_statistics": "typedef struct struct_1 {\n
    char padding_0[156];\n
    struct struct_0 *field_9c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[52];\n
    unsigned int field_34;\n
    char padding_38[4];\n
    unsigned int field_3c;\n
    char padding_40[60];\n
    struct struct_0 *field_7c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_dive_statistics(struct_1 *v10)\n
{\n
    unsigned int v0;  // [bp-0x438]\n
    unsigned int v1;  // [bp-0x42c]\n
    struct_0 *v2;  // [bp-0x428], Other Possible Types: unsigned int\n
    void* v3;  // [bp-0x424], Other Possible Types: unsigned int\n
    void* v4;  // [bp-0x420], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0x41c], Other Possible Types: unsigned int\n
    void* v6;  // [bp-0x418], Other Possible Types: unsigned int\n
    void* v7;  // [bp-0x414], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0xc]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // eax\n
    unsigned int v14;  // eax\n
\n
    v9 = v11;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v4 = 0;\n
    v3 = 0;\n
    cgc_printf(\"\\n
\");\n
    if (!v10->field_9c)\n
    {\n
        cgc_printf(v1 - 8763);\n
        v8 = -1;\n
        return v8;\n
    }\n
    for (v2 = v10->field_9c; v2; v2 = *((v2 + 124)))\n
    {\n
        v7 += 1;\n
        if (v2->field_34 > 0)\n
        {\n
            v6 = v2->field_34 + v6;\n
            v5 += 1;\n
        }\n
        if (v2->field_3c > 0)\n
        {\n
            v4 = v2->field_3c + v4;\n
            v3 += 1;\n
        }\n
    }\n
    v0 = v7;\n
    cgc_printf(v1 - 8742);\n
    if (v5 <= 0)\n
    {\n
        cgc_printf(v1 - 8701);\n
    }\n
    else\n
    {\n
        v12 = v6;\n
        v0 = (v12 >> 31 CONCAT v12) /m v5;\n
        cgc_printf(v1 - 8724);\n
    }\n
    if (v3 <= 0)\n
    {\n
        cgc_printf(v1 - 8654);\n
    }\n
    else\n
    {\n
        v14 = v4;\n
        v0 = (v14 >> 31 CONCAT v14) /m v3;\n
        cgc_printf(v1 - 8679);\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4218845:sub_405fdd": null, "4218848:cgc_download_dive": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_download_dive(unsigned int v20)\n
{\n
    unsigned int v0;  // [bp-0x864]\n
    unsigned int v1;  // [bp-0x860]\n
    unsigned int v2;  // [bp-0x85c]\n
    unsigned int v3;  // [bp-0x858]\n
    unsigned int v4;  // [bp-0x854]\n
    unsigned int v5;  // [bp-0x850]\n
    unsigned int v6;  // [bp-0x84c]\n
    unsigned int v7;  // [bp-0x848]\n
    char v8;  // [bp-0x844]\n
    unsigned int v9;  // [bp-0x828]\n
    char v10;  // [bp-0x824]\n
    char v11;  // [bp-0x820]\n
    char v12;  // [bp-0x81c]\n
    unsigned int v13;  // [bp-0x818]\n
    unsigned int v14;  // [bp-0x814]\n
    char v15;  // [bp-0x810]\n
    char v16;  // [bp-0x410]\n
    unsigned int v17;  // [bp-0x10]\n
    unsigned int v18;  // [bp-0xc]\n
    unsigned int v19;  // [bp-0x8]\n
    unsigned int v21;  // ebx\n
    unsigned int v22;  // eax\n
    unsigned int v23;  // ecx\n
    unsigned int v24;  // eax\n
    unsigned int v25;  // eax\n
\n
    v19 = v21;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    v13 = cgc_receive_bytes(&v11, 4);\n
    if (v13 < 0)\n
    {\n
        cgc_printf(v0 - 8630);\n
        v18 = -1;\n
        return v18;\n
    }\n
    v13 = cgc_receive_bytes(&v10, 4);\n
    if (v13 < 0)\n
    {\n
        cgc_printf(v0 - 8608);\n
        v18 = -1;\n
        return v18;\n
    }\n
    if (!*((v20 + 156)))\n
    {\n
        *((v20 + 156)) = cgc_calloc(1, 128);\n
        if (!*((v20 + 156)))\n
            cgc__terminate();\n
        v17 = *((v20 + 156));\n
    }\n
    else\n
    {\n
        for (v17 = *((v20 + 156)); *((v17 + 124)); v17 = *((v17 + 124)));\n
        *((v17 + 124)) = cgc_calloc(1, 128);\n
        if (!*((v17 + 124)))\n
            cgc__terminate();\n
        v17 = *((v17 + 124));\n
    }\n
    *((v17 + 120)) = cgc_calloc(1, 12);\n
    if (!*((v17 + 120)))\n
        cgc__terminate();\n
    v9 = *((v17 + 120));\n
    *(v9) = *(&v11);\n
    *((v9 + 4)) = *(&v10);\n
    cgc_time_t2datetime(*(&v11), &v8);\n
    while (true)\n
    {\n
        v13 = cgc_receive_bytes(&v12, 4);\n
        if (v13 < 0)\n
        {\n
            cgc_printf(v0 - 8571);\n
            v18 = -1;\n
            return v18;\n
        }\n
        if (!*(&v12))\n
            break;\n
        v13 = cgc_receive_bytes(&v10, 4);\n
        if (v13 < 0)\n
        {\n
            cgc_printf(v0 - 8608);\n
            v18 = -1;\n
            return v18;\n
        }\n
        *((v9 + 8)) = cgc_calloc(1, 12);\n
        if (!*((v9 + 8)))\n
            cgc__terminate();\n
        v9 = *((v9 + 8));\n
        *(v9) = *(&v12);\n
        *((v9 + 4)) = *(&v10);\n
    }\n
    *((v9 + 8)) = 0;\n
    v4 = *(v9) - *(&v11);\n
    *((v17 + 48)) = *(&v11);\n
    cgc_to_date_str(&v8, v17 + 26);\n
    cgc_to_time_str(&v8, v17 + 37);\n
    *((v17 + 60)) = (0 CONCAT v4) /m 60;\n
    v3 = cgc_calloc(*((v17 + 60)) + 1, 4);\n
    if (!v3)\n
        cgc__terminate();\n
    v7 = 0;\n
    v6 = 0;\n
    v5 = 0;\n
    for (v9 = *((v17 + 120)); v9; v9 = *((v9 + 8)))\n
    {\n
        if (*((v9 + 4)) > v7)\n
            v7 = *((v9 + 4));\n
        v6 = *((v9 + 4)) + v6;\n
        v5 += 1;\n
        v2 = (0 CONCAT *(v9) - *(&v11)) /m 60;\n
        if (v2 >= 0 && v2 < *((v17 + 60)) + 1)\n
        {\n
            v22 = v3;\n
            v23 = v2;\n
            *((v22 + v23 * 4)) = *((v22 + v23 * 4)) + 1;\n
        }\n
    }\n
    *((v17 + 88)) = 0;\n
    for (v1 = 0; v1 < *((v17 + 60)) + 1; v1 += 1)\n
    {\n
        v24 = v17;\n
        *((v24 + 88)) = *((v3 + v1 * 4)) + *((v24 + 88));\n
    }\n
    cgc_free(v3);\n
    *((v17 + 52)) = v7;\n
    if (v5 <= 0)\n
    {\n
        *((v17 + 56)) = 0;\n
    }\n
    else\n
    {\n
        v25 = v6;\n
        *((v17 + 56)) = (v25 >> 31 CONCAT v25) /m v5;\n
    }\n
    cgc_printf(v0 - 8531);\n
    if (*(v17))\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 26);\n
    if (v14 > 0)\n
        cgc_strncpy(v17, &v16, 26);\n
    cgc_printf(v0 - 8290);\n
    if (*((v17 + 26)))\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 11);\n
    if (v14 > 0)\n
        cgc_strncpy(v17 + 26, &v16, v14);\n
    cgc_printf(v0 - 8515);\n
    if (*((v17 + 37)))\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v15, 9);\n
    if (v14 > 0)\n
        cgc_strncpy(v17 + 37, &v15, v14);\n
    cgc_printf(v0 - 8510);\n
    if (*((v17 + 92)))\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 26);\n
    if (v14 > 0)\n
        cgc_strncpy(v17 + 92, &v16, v14);\n
    cgc_printf(v0 - 8489);\n
    if (*((v17 + 52)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 0x400);\n
    if (v14 > 0)\n
        *((v17 + 52)) = cgc_atoi(&v16);\n
    cgc_printf(v0 - 8467);\n
    if (*((v17 + 56)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 0x400);\n
    if (v14 > 0)\n
        *((v17 + 56)) = cgc_atoi(&v16);\n
    cgc_printf(v0 - 8451);\n
    if (*((v17 + 60)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 13);\n
    if (v14 > 0)\n
        *((v17 + 60)) = cgc_atoi(&v16);\n
    cgc_printf(v0 - 8430);\n
    if (*((v17 + 72)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 11);\n
    if (v14 > 0)\n
        *((v17 + 72)) = cgc_atoi(&v16);\n
    cgc_printf(v0 - 8416);\n
    if (*((v17 + 64)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 20);\n
    if (v14 > 0)\n
        *((v17 + 64)) = cgc_atoi(&v16);\n
    cgc_printf(v0 - 8398);\n
    if (*((v17 + 68)))\n
        cgc_printf(v0 - 8473);\n
    cgc_printf(v0 - 8123);\n
    v14 = cgc_getline(&v16, 11);\n
    if (v14 > 0)\n
        *((v17 + 68)) = cgc_atoi(&v16);\n
    *((v17 + 124)) = 0;\n
    v18 = 0;\n
    return v18;\n
}\n
", "4221967:sub_406c0f": null, "4221968:cgc_edit_diver": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_edit_diver(char v4[143])\n
{\n
    unsigned int v0;  // [bp-0x410]\n
    unsigned int v1;  // [bp-0x40c]\n
    char v2;  // [bp-0x408]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"First Name\");\n
    if (v4[21])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 21);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[21], &v2, 21);\n
    cgc_printf(v0 - 8368);\n
    if (v4[0])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 21);\n
    if (v1 > 0)\n
        cgc_strncpy(v4, &v2, 21);\n
    cgc_printf(v0 - 8358);\n
    if (v4[58])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 30);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[58], &v2, 30);\n
    cgc_printf(v0 - 8351);\n
    if (v4[88])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 20);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[88], &v2, 20);\n
    cgc_printf(v0 - 8346);\n
    if (v4[108])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 3);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[108], &v2, 3);\n
    cgc_printf(v0 - 8340);\n
    if (v4[111])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 11);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[111], &v2, 11);\n
    cgc_printf(v0 - 8331);\n
    if (v4[42])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 16);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[42], &v2, 16);\n
    cgc_printf(v0 - 8318);\n
    if (v4[122])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 20);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[122], &v2, 20);\n
    cgc_printf(v0 - 8300);\n
    if (v4[142])\n
        cgc_printf(v0 - 8521);\n
    cgc_printf(v0 - 8123);\n
    v1 = cgc_getline(&v2, 11);\n
    if (v1 > 0)\n
        cgc_strncpy(&v4[142], &v2, 11);\n
    cgc_print_diver_info();\n
    return 0;\n
}\n
", "4223561:sub_407249": null, "4223568:cgc_print_diver_info": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_diver_info(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    unsigned int v6;  // ebx\n
\n
    v3 = v5;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"\\n
\");\n
    v0 = v4 + 21;\n
    v1 = v4;\n
    cgc_printf(v2 - 8285);\n
    v0 = v4 + 58;\n
    cgc_printf(v2 - 8267);\n
    v0 = v4 + 88;\n
    cgc_printf(v2 - 8252);\n
    v0 = v4 + 108;\n
    cgc_printf(v2 - 8237);\n
    v0 = v4 + 111;\n
    cgc_printf(v2 - 8222);\n
    v0 = v4 + 42;\n
    cgc_printf(v2 - 8207);\n
    v0 = v4 + 122;\n
    cgc_printf(v2 - 0x2000);\n
    v0 = v4 + 142;\n
    cgc_printf(v2 - 8177);\n
    cgc_printf(v2 - 8610);\n
    v6 = v3;\n
    return 0;\n
}\n
", "4223857:sub_407371": null, "4223872:cgc_edit_dives": "typedef struct struct_1 {\n
    char padding_0[156];\n
    struct struct_0 *field_9c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[124];\n
    struct struct_0 *field_7c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_edit_dives(struct_1 *v8)\n
{\n
    char v0;  // [bp-0x421]\n
    unsigned int v1;  // [bp-0x420]\n
    void* v2;  // [bp-0x41c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x418]\n
    struct_0 *v4;  // [bp-0x414], Other Possible Types: unsigned int\n
    unsigned int v5;  // [bp-0x410]\n
    char v6;  // [bp-0x40c]\n
    void* v7;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = v8->field_9c;\n
    v3 = 1;\n
    v2 = 0;\n
    if (!v4)\n
    {\n
        cgc_printf(v1 - 8610);\n
        cgc_printf(v1 - 8162);\n
        v7 = 0;\n
        return v7;\n
    }\n
    cgc_list_dives();\n
    cgc_printf(v1 - 8610);\n
    cgc_printf(v1 - 8143);\n
    v5 = cgc_getline(&v6, 0x400);\n
    if (!v5)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v2 = cgc_atoi(&v6);\n
    v4 = v8->field_9c;\n
    v3 = 1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v3 < v2)\n
            v0 = v4;\n
        if (!(v0 & 1))\n
            break;\n
        v3 += 1;\n
        v4 = v4->field_7c;\n
    }\n
    if (v3 == v2 && v4)\n
    {\n
        cgc_printf(v1 - 8120);\n
        cgc_update_dive(v4);\n
        goto LABEL_407574;\n
    }\n
    cgc_printf(v1 - 8096);\n
LABEL_407574:\n
    v7 = 0;\n
    return v7;\n
}\n
", "4224391:sub_407587": null, "4224400:cgc_update_dive": "typedef struct struct_0 {\n
    char field_0;\n
    char padding_1[25];\n
    char field_1a;\n
    char padding_1b[10];\n
    char field_25;\n
    char padding_26[10];\n
    unsigned int field_30;\n
    unsigned int field_34;\n
    unsigned int field_38;\n
    unsigned int field_3c;\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    char padding_4c[16];\n
    char field_5c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_update_dive(struct_0 *v8)\n
{\n
    struct_1 *v0;  // [bp-0x838]\n
    struct_1 *v1;  // [bp-0x834]\n
    unsigned int v2;  // [bp-0x830]\n
    unsigned int v3[7];  // [bp-0x82c]\n
    unsigned int v4;  // [bp-0x80c]\n
    char v5;  // [bp-0x808]\n
    char v6;  // [bp-0x408]\n
    unsigned int v7;  // [bp-0x8]\n
    unsigned int v9;  // ebx\n
\n
    v7 = v9;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    cgc_printf(\"Dive Site\");\n
    if (v8->field_0)\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 26);\n
    if (v4 > 0)\n
        cgc_strncpy(v8, &v6, 26);\n
    cgc_printf(v2 - 8290);\n
    if (v8->field_1a)\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
        cgc_strncpy(&v8->field_1a, &v6, 11);\n
    cgc_printf(v2 - 8515);\n
    if (v8->field_25)\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v5, 9);\n
    if (v4 > 0)\n
        cgc_strncpy(&v8->field_25, &v5, 9);\n
    cgc_strncat(&v6, v2 - 8122, 1);\n
    v0 = &v6;\n
    v1 = &v5;\n
    cgc_strncat(v0, v1, cgc_strlen(&v5));\n
    v8->field_30 = cgc_str2datetime(&v6, v3);\n
    cgc_printf(v2 - 8510);\n
    if (v8->field_5c)\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 26);\n
    if (v4 > 0)\n
        cgc_strncpy(&v8->field_5c, &v6, v4);\n
    cgc_printf(v2 - 8489);\n
    if (v8->field_34)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 0x400);\n
    if (v4 > 0)\n
        v8->field_34 = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8467);\n
    if (v8->field_38)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 0x400);\n
    if (v4 > 0)\n
        v8->field_38 = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8451);\n
    if (v8->field_3c)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 13);\n
    if (v4 > 0)\n
        v8->field_3c = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8430);\n
    if (v8->field_48)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
        v8->field_48 = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8416);\n
    if (v8->field_40)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 20);\n
    if (v4 > 0)\n
        v8->field_40 = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8398);\n
    if (v8->field_44)\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
    {\n
        v8->field_44 = cgc_atoi(&v6);\n
        return 0;\n
    }\n
    return 0;\n
}\n
", "4226217:sub_407ca9": null, "4226224:cgc_log_dives": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_log_dives(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x838]\n
    unsigned int v1;  // [bp-0x834]\n
    unsigned int v2;  // [bp-0x830]\n
    char v3;  // [bp-0x82c]\n
    unsigned int v4;  // [bp-0x810]\n
    char v5;  // [bp-0x80c]\n
    char v6;  // [bp-0x40c]\n
    unsigned int v7;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!*((v8 + 156)))\n
    {\n
        *((v8 + 156)) = cgc_calloc(1, 128);\n
        if (!*((v8 + 156)))\n
            cgc__terminate();\n
        v7 = *((v8 + 156));\n
    }\n
    else\n
    {\n
        for (v7 = *((v8 + 156)); *((v7 + 124)); v7 = *((v7 + 124)));\n
        *((v7 + 124)) = cgc_calloc(1, 128);\n
        if (!*((v7 + 124)))\n
            cgc__terminate();\n
        v7 = *((v7 + 124));\n
    }\n
    cgc_printf(v2 - 8531);\n
    if (*(v7))\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 26);\n
    if (v4 > 0)\n
        cgc_strncpy(v7, &v6, 26);\n
    cgc_printf(v2 - 8290);\n
    if (*((v7 + 26)))\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
        cgc_strncpy(v7 + 26, &v6, v4);\n
    cgc_printf(v2 - 8515);\n
    if (*((v7 + 37)))\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v5, 9);\n
    if (v4 > 0)\n
        cgc_strncpy(v7 + 37, &v5, v4);\n
    cgc_strncat(&v6, v2 - 8122, 1);\n
    v0 = &v6;\n
    v1 = &v5;\n
    cgc_strncat(v0, v1, cgc_strlen(&v5));\n
    *((v7 + 48)) = cgc_str2datetime(&v6, &v3);\n
    cgc_printf(v2 - 8510);\n
    if (*((v7 + 92)))\n
        cgc_printf(v2 - 8521);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 26);\n
    if (v4 > 0)\n
        cgc_strncpy(v7 + 92, &v6, v4);\n
    cgc_printf(v2 - 8489);\n
    if (*((v7 + 52)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 0x400);\n
    if (v4 > 0)\n
        *((v7 + 52)) = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8467);\n
    if (*((v7 + 56)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 0x400);\n
    if (v4 > 0)\n
        *((v7 + 56)) = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8451);\n
    if (*((v7 + 60)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 13);\n
    if (v4 > 0)\n
        *((v7 + 60)) = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8430);\n
    if (*((v7 + 72)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
        *((v7 + 72)) = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8416);\n
    if (*((v7 + 64)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 20);\n
    if (v4 > 0)\n
        *((v7 + 64)) = cgc_atoi(&v6);\n
    cgc_printf(v2 - 8398);\n
    if (*((v7 + 68)))\n
        cgc_printf(v2 - 8473);\n
    cgc_printf(v2 - 8123);\n
    v4 = cgc_getline(&v6, 11);\n
    if (v4 > 0)\n
        *((v7 + 68)) = cgc_atoi(&v6);\n
    *((v7 + 124)) = 0;\n
    return 0;\n
}\n
", "4228278:sub_4084b6": null, "4228288:cgc_process_menu": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_process_menu(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    unsigned int v1;  // [bp-0x2c]\n
    char v2;  // [bp-0x28]\n
    unsigned int v3;  // [bp-0x10]\n
    unsigned int *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        do\n
        {\n
            cgc_printf(v1 - 8610);\n
            for (v4 = 0; v4 < a0; v4 += 1)\n
            {\n
                v0 = *((v5 + v4 * 12));\n
                cgc_printf(v1 - 8067);\n
            }\n
            cgc_printf(v1 - 8058);\n
            v3 = cgc_getline(&v2, 24);\n
        } while (!v3);\n
        cgc_printf(v1 - 8610);\n
        for (v4 = 0; v4 < a0; v4 += 1)\n
        {\n
            if (cgc_find_char(v2))\n
            {\n
                if (!*((v5 + v4 * 12 + 8)))\n
                    return 0;\n
                *((v5 + v4 * 12 + 8))();\n
                break;\n
            }\n
        }\n
    }\n
}\n
", "4228632:sub_408618": null, "4228640:cgc_find_char": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_find_char(char v4, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x14]\n
    char *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0xc]\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v2 = 0;\n
    while (true)\n
    {\n
        v0 = v2;\n
        if (v0 >= cgc_strlen(a0))\n
        {\n
            v3 = 0;\n
            return v3;\n
        }\n
        else if (*((a0 + v2)) != v4)\n
        {\n
            v2 += 1;\n
        }\n
        else\n
        {\n
            v3 = 1;\n
            return v3;\n
        }\n
    }\n
}\n
", "4228777:sub_4086a9": null, "4228784:cgc_list_dives": "typedef struct struct_1 {\n
    char padding_0[156];\n
    struct struct_0 *field_9c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[124];\n
    struct struct_0 *field_7c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_list_dives(struct_1 *v10)\n
{\n
    unsigned int v0;  // [bp-0x38]\n
    unsigned int v1;  // [bp-0x34]\n
    unsigned int v2;  // [bp-0x30]\n
    struct_0 *v3;  // [bp-0x2c]\n
    unsigned int v4;  // [bp-0x28]\n
    unsigned int v5;  // [bp-0x20]\n
    unsigned int v6;  // [bp-0x1c]\n
    struct_0 *v7;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x14]\n
    unsigned int v9;  // [bp-0x8]\n
    unsigned int v11;  // ebx\n
    unsigned int v12;  // ebx\n
\n
    v9 = v11;\n
    v5 = &_GLOBAL_OFFSET_TABLE_;\n
    v6 = 1;\n
    v7 = v10->field_9c;\n
    cgc_printf(\"\\n
\");\n
    if (!v7)\n
    {\n
        cgc_printf(v5 - 8162);\n
        v8 = -1;\n
        return v8;\n
    }\n
    v12 = v5;\n
    v0 = v12 - 8290;\n
    v1 = v12 - 8515;\n
    v2 = v12 - 8531;\n
    v3 = v12 - 8026;\n
    cgc_printf(v12 - 8056);\n
    for (; v7; v6 += 1)\n
    {\n
        v0 = v6;\n
        v1 = v7 + 26;\n
        v2 = v7 + 37;\n
        v3 = v7;\n
        v4 = v7 + 92;\n
        cgc_printf(v5 - 8017);\n
        v7 = *((v7 + 124));\n
    }\n
    v8 = 0;\n
    return v8;\n
}\n
", "4229055:sub_4087bf": null, "4229056:cgc_print_dives": "typedef struct struct_1 {\n
    char padding_0[156];\n
    struct struct_0 *field_9c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[124];\n
    struct struct_0 *field_7c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_print_dives(struct_1 *v9)\n
{\n
    char v0;  // [bp-0x85]\n
    unsigned int v1;  // [bp-0x84]\n
    char v2;  // [bp-0x80]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    struct_0 *v6;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7;  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
\n
    v8 = v10;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    if (cgc_list_dives(v9) == -1)\n
    {\n
        v7 = -1;\n
        return v7;\n
    }\n
    cgc_printf(v1 - 8610);\n
    cgc_printf(v1 - 7988);\n
    v3 = cgc_getline(&v2, 100);\n
    if (!v3)\n
    {\n
        v7 = 0;\n
        return v7;\n
    }\n
    v4 = cgc_atoi(&v2);\n
    v6 = v9->field_9c;\n
    v5 = 1;\n
    while (true)\n
    {\n
        v0 = 0;\n
        if (v5 < v4)\n
            v0 = v6;\n
        if (!(v0 & 1))\n
            break;\n
        v5 += 1;\n
        v6 = *((v6 + 124));\n
    }\n
    if (v5 == v4 && v6)\n
    {\n
        cgc_printf(v1 - 8610);\n
        cgc_printf(v1 - 7962);\n
        cgc_printf(v1 - 7942);\n
        cgc_printf(v1 - 7922);\n
        cgc_printf(v1 - 7902);\n
        cgc_printf(v1 - 7882);\n
        cgc_printf(v1 - 7862);\n
        cgc_printf(v1 - 7842);\n
        cgc_printf(v1 - 7822);\n
        cgc_printf(v1 - 7802);\n
        cgc_printf(v1 - 7782);\n
        cgc_printf(v1 - 7762);\n
        cgc_printf(v1 - 8610);\n
        goto LABEL_408a30;\n
    }\n
    cgc_printf(v1 - 8096);\n
LABEL_408a30:\n
    v7 = 0;\n
    return v7;\n
}\n
", "4229699:sub_408a43": null, "4229712:cgc_remove_dives": "typedef struct struct_2 {\n
    char padding_0[156];\n
    struct struct_1 *field_9c;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    char padding_0[120];\n
    struct struct_0 *field_78;\n
    struct struct_1 *field_7c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[8];\n
    struct struct_0 *field_8;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_remove_dives(struct_2 *v12)\n
{\n
    char v0;  // [bp-0x431]\n
    unsigned int v1;  // [bp-0x430]\n
    void* v2;  // [bp-0x42c], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x428]\n
    struct_0 *v4;  // [bp-0x424]\n
    struct_0 *v5;  // [bp-0x420], Other Possible Types: unsigned int\n
    struct_1 *v6;  // [bp-0x41c]\n
    struct_1 *v7;  // [bp-0x418]\n
    struct_1 *v8;  // [bp-0x414], Other Possible Types: unsigned int\n
    unsigned int v9;  // [bp-0x410]\n
    char v10;  // [bp-0x40c]\n
    void* v11;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v8 = v12->field_9c;\n
    v3 = 1;\n
    v2 = 0;\n
    if (!v8)\n
    {\n
        cgc_printf(v1 - 8610);\n
        cgc_printf(v1 - 8162);\n
        v11 = 0;\n
        return v11;\n
    }\n
    cgc_list_dives(v12);\n
    cgc_printf(v1 - 8610);\n
    cgc_printf(v1 - 7742);\n
    v9 = cgc_getline(&v10, 0x400);\n
    if (!v9)\n
    {\n
        v11 = 0;\n
        return v11;\n
    }\n
    v2 = cgc_atoi(&v10);\n
    v8 = v12->field_9c;\n
    if (v2 == 1)\n
    {\n
        v6 = v8->field_7c;\n
        if (v8->field_78)\n
        {\n
            for (v5 = v8->field_78; v5; v5 = v4)\n
            {\n
                v4 = *((v5 + 8));\n
                cgc_free(v5);\n
            }\n
        }\n
        cgc_free(v8);\n
        v12->field_9c = v6;\n
        v11 = 0;\n
        return v11;\n
    }\n
    else\n
    {\n
        v3 = 1;\n
        while (true)\n
        {\n
            v0 = 0;\n
            if (v3 < v2)\n
                v0 = v8;\n
            if (!(v0 & 1))\n
                break;\n
            v3 += 1;\n
            v7 = v8;\n
            v8 = *((v8 + 124));\n
        }\n
        if (v3 == v2 && v8)\n
        {\n
            v7->field_7c = *((v8 + 124));\n
            if (v8->field_78)\n
            {\n
                for (v5 = *((v8 + 120)); v5; v5 = v4)\n
                {\n
                    v4 = v5->field_8;\n
                    cgc_free(v5);\n
                }\n
            }\n
            cgc_free(v8);\n
            goto LABEL_408d59;\n
        }\n
        cgc_printf(v1 - 8096);\n
LABEL_408d59:\n
        v11 = 0;\n
        return v11;\n
    }\n
}\n
", "4230508:sub_408d6c": null, "4230512:main": "extern char _GLOBAL_OFFSET_TABLE_;\n
extern void g_40b1d4;\n
\n
int main(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    char v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    memcpy(&v1, &g_40b1d4, 96);\n
    cgc_bzero(v0 + 88, 160);\n
    cgc_process_menu(&v1, 8);\n
    v5 = v2;\n
    return 0;\n
}\n
", "4230624:cgc_exit_app": "int cgc_exit_app(unsigned int v0)\n
{\n
    unsigned int v1;  // ebx\n
\n
    cgc__terminate(v0, v1);\n
}\n
", "4230656:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:memcpy": null, "5242892:cgc_fdwait": null, "5242896:cgc__terminate": null, "5242900:cgc_transmit": null, "5242904:cgc_allocate": null, "5242908:cgc_rint": null, "5242912:cgc_deallocate": null, "5242916:cgc_log10": null, "5242920:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}