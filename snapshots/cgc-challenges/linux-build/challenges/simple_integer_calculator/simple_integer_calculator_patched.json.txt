{"4202496:_init": "extern struct_0 *g_409f90;\n
\n
int _init()\n
{\n
    if (g_409f90)\n
    {\n
        g_409f90();\n
        return;\n
    }\n
    return;\n
}\n
", "4202544:sub_402030": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
int sub_402030()\n
{\n
    unsigned int v0;  // [bp-0x4]\n
    struct_0 *v2;  // ebx\n
\n
    v0 = v2->field_4;\n
    goto *((ebx<4> + 8));\n
}\n
", "4202560:cgc_pow": "// attributes: PLT stub\n
int cgc_pow()\n
{\n
    ::libc.so.0::cgc_pow();\n
    return;\n
}\n
", "4202576:__libc_start_main": "// attributes: PLT stub\n
char * __libc_start_main(unsigned int v0, unsigned int a0, unsigned int a1, unsigned int a2, unsigned int a3)\n
{\n
    ::libc.so.0::__libc_start_main(); /* do not return */\n
}\n
", "4202592:cgc_fdwait": "// attributes: PLT stub\n
int cgc_fdwait()\n
{\n
    ::libc.so.0::cgc_fdwait();\n
    return;\n
}\n
", "4202608:cgc__terminate": "// attributes: PLT stub\n
int cgc__terminate()\n
{\n
    ::libc.so.0::cgc__terminate();\n
    return;\n
}\n
", "4202624:cgc_transmit": "// attributes: PLT stub\n
int cgc_transmit()\n
{\n
    ::libc.so.0::cgc_transmit();\n
    return;\n
}\n
", "4202640:cgc_allocate": "// attributes: PLT stub\n
int cgc_allocate()\n
{\n
    ::libc.so.0::cgc_allocate();\n
    return;\n
}\n
", "4202656:cgc_rint": "// attributes: PLT stub\n
int cgc_rint()\n
{\n
    ::libc.so.0::cgc_rint();\n
    return;\n
}\n
", "4202672:cgc_deallocate": "// attributes: PLT stub\n
int cgc_deallocate()\n
{\n
    ::libc.so.0::cgc_deallocate();\n
    return;\n
}\n
", "4202688:cgc_log10": "// attributes: PLT stub\n
int cgc_log10()\n
{\n
    ::libc.so.0::cgc_log10();\n
    return;\n
}\n
", "4202704:cgc_receive": "// attributes: PLT stub\n
int cgc_receive()\n
{\n
    ::libc.so.0::cgc_receive();\n
    return;\n
}\n
", "4202720:sub_4020e0": "int sub_4020e0()\n
{\n
    goto *((ebx<4> - 16));\n
}\n
", "4202726:sub_4020e6": null, "4202736:_start": "int _start()\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v1;  // [bp+0x0], Other Possible Types: char\n
    unsigned int v3;  // esi\n
    unsigned int v4;  // eax\n
    unsigned int v5;  // edx\n
    unsigned int v6;  // ecx\n
\n
    v3 = *(&v1);\n
    v1 = v4;\n
    v0 = v5;\n
    __libc_start_main(main, v3, v6, 0, 0); /* do not return */\n
}\n
", "4202779:sub_40211b": null, "4202780:sub_40211c": "int sub_40211c()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202784:__x86.get_pc_thunk.bx": "int __x86.get_pc_thunk.bx()\n
{\n
    char v0;  // [bp+0x0]\n
    unsigned int v2;  // ebx\n
    unsigned int v3;  // eax\n
\n
    v2 = *(&v0);\n
    return v3;\n
}\n
", "4202788:sub_402124": null, "4202800:deregister_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-14;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int deregister_tm_clones()\n
{\n
    struct struct_0 **v0;  // [bp-0x1c]\n
    unsigned int v1;  // [bp-0x4]\n
    char v2;  // [bp+0x0]\n
    unsigned int v4;  // edx\n
    struct_1 *v5;  // edx\n
    struct struct_0 **v6;  // ecx\n
    struct struct_0 **v7;  // eax, Other Possible Types: unsigned int\n
\n
    __x86.get_pc_thunk.dx();\n
    v5 = v4 + 32359;\n
    v6 = v5 + 15;\n
    v7 = v5 + 15;\n
    if (v7 == v6)\n
        return v5 + 15;\n
    v7 = v5[5].field_-14;\n
    if (v7)\n
    {\n
        v1 = &v2;\n
        v0 = v6;\n
        return v5[5].field_-14();\n
    }\n
    return v5[5].field_-14;\n
}\n
", "4202851:sub_402163": "int sub_402163()\n
{\n
}\n
", "4202857:sub_402169": "int sub_402169()\n
{\n
    register_tm_clones();\n
    return;\n
}\n
", "4202864:register_tm_clones": "typedef struct struct_1 {\n
    struct struct_0 *field_-4;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
} struct_0;\n
\n
int register_tm_clones()\n
{\n
    unsigned int v0;  // [bp-0x18]\n
    unsigned int v1;  // [bp-0x8]\n
    unsigned int v2;  // [bp-0x4]\n
    char v3;  // [bp+0x0]\n
    unsigned int v5;  // edx\n
    struct_1 *v6;  // edx\n
    unsigned int v7;  // ebx\n
    unsigned int v8;  // ecx\n
    unsigned int v9;  // eax\n
    struct struct_0 **v10;  // edx\n
\n
    __x86.get_pc_thunk.dx();\n
    v6 = v5 + 32295;\n
    v2 = &v3;\n
    v1 = v7;\n
    v8 = v6 + 15;\n
    v9 = (v6 + 15 - (v6 + 15) >> 31) + (15 + v6 - v8 >> 2) >> 1;\n
    if (!v9)\n
    {\n
        return v9;\n
    }\n
    else if (!v6[1].field_-4)\n
    {\n
        return v9;\n
    }\n
    else\n
    {\n
        v0 = v9;\n
        v9 = v10(v8);\n
        return v9;\n
    }\n
}\n
", "4202935:sub_4021b7": "int sub_4021b7()\n
{\n
    __do_global_dtors_aux();\n
    return;\n
}\n
", "4202944:__do_global_dtors_aux": "extern char __bss_start;\n
extern unsigned int __dso_handle;\n
extern unsigned int g_409f8c;\n
\n
int __do_global_dtors_aux()\n
{\n
    unsigned int v0;  // [bp-0x1c]\n
\n
    if (__bss_start)\n
        return;\n
    if (g_409f8c)\n
    {\n
        v0 = __dso_handle;\n
        sub_4020e0();\n
    }\n
    deregister_tm_clones();\n
    __bss_start = 1;\n
    return;\n
}\n
", "4203019:sub_40220b": "int sub_40220b()\n
{\n
    frame_dummy();\n
    return;\n
}\n
", "4203024:frame_dummy": "int frame_dummy()\n
{\n
    return register_tm_clones();\n
}\n
", "4203033:__x86.get_pc_thunk.dx": "int __x86.get_pc_thunk.dx()\n
{\n
    unsigned int v1;  // eax\n
\n
    return v1;\n
}\n
", "4203037:sub_40221d": null, "4203040:cgc_calloc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_calloc(unsigned int v5, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    unsigned int v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = a0 * v5;\n
    v2 = cgc_malloc();\n
    v0 = v3;\n
    cgc_memset(v2, 0);\n
    v7 = v4;\n
    return v2;\n
}\n
", "4203132:sub_40227c": null, "4203136:cgc_malloc": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_malloc(unsigned int v10)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_0 *v1;  // [bp-0x2c]\n
    struct struct_1 *v2[2];  // [bp-0x28]\n
    unsigned int *v3;  // [bp-0x24]\n
    unsigned int *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    unsigned int v6;  // [bp-0x18]\n
    struct struct_1 *v7[2];  // [bp-0x14]\n
    unsigned int *v8;  // [bp-0x10]\n
    unsigned int *v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int *v11;  // eax\n
    unsigned int *v12;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (v10 < 8)\n
    {\n
        v10 = 8;\n
    }\n
    else if ((v10 & 3))\n
    {\n
        v10 = (v10 >> 2) + 1;\n
        v10 *= 4;\n
    }\n
    v9 = &v1->field_50->field_0;\n
    while (true)\n
    {\n
        if (!v9)\n
            v9 = cgc_add_free_list();\n
        v8 = v9;\n
        v7[0] = v9 + (*(v8) & -0x4) - 4;\n
        if (*(v8) >= v10)\n
            break;\n
        v9 = v7[0];\n
    }\n
    v6 = v9 + 4;\n
    v5 = *(v8) - v10;\n
    *(v8) = v10;\n
    v11 = v8;\n
    *(v11) = *(v11) | 1;\n
    if (v5 >= 12)\n
    {\n
        v4 = v9 + v10 + 4;\n
        v3 = v4;\n
        *(v3) = v5 - 4;\n
        v2[0] = &v7[0];\n
        if (-4 + v3 + (*(v3) & -0x4) != v7)\n
        {\n
            cgc_printf();\n
            cgc__terminate();\n
        }\n
        if (v1->field_50 == v9)\n
        {\n
            v1->field_50 = v3;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v3;\n
        }\n
        else\n
        {\n
            if (v2[1])\n
                *((-4 + &v2[1]->field_0 + (v2[1]->field_0 & -0x4))) = v4;\n
            if (v2[0])\n
                *((&v2[0]->field_0 + (v2[0]->field_0 & -0x4))) = v4;\n
        }\n
        v12 = v8;\n
        *(v12) = *(v12) | 2;\n
    }\n
    else if (v1->field_50 == v9)\n
    {\n
        v1->field_50 = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = 0;\n
    }\n
    else\n
    {\n
        if (v7[1])\n
            *((-4 + &v7[1]->field_0 + (v7[1]->field_0 & -0x4))) = v7[0];\n
        if (v7[0])\n
            *((&v7[0]->field_0 + (v7[0]->field_0 & -0x4))) = v7[1];\n
    }\n
    v0 = v10;\n
    cgc_memset(v9 + 4, 0);\n
    return v9 + 4;\n
}\n
", "4203819:sub_40252b": null, "4203824:cgc_add_free_list": "typedef struct struct_0 {\n
    char padding_0[80];\n
    unsigned int field_50;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add_free_list(unsigned int v6)\n
{\n
    unsigned int v0;  // [bp-0x24]\n
    struct_0 *v1;  // [bp-0x1c]\n
    unsigned int v2[2];  // [bp-0x18]\n
    unsigned int *v3;  // [bp-0x14]\n
    char v4;  // [bp-0x10]\n
    unsigned int v5;  // [bp-0xc]\n
    struct_0 *v7;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5 = v6 + 4;\n
    if ((v5 & 4095))\n
    {\n
        v5 = (v5 >> 12) + 1;\n
        v5 *= 0x1000;\n
    }\n
    v0 = &v4;\n
    if (cgc_allocate(v5, 0))\n
        cgc__terminate();\n
    v7 = v1;\n
    v3 = *(&v4);\n
    v2[0] = *(&v4) + v5 - 8;\n
    *(v3) = v5 - 4;\n
    v2[1] = 0;\n
    v2[0] = v7->field_50;\n
    v7->field_50 = v3;\n
    return v3;\n
}\n
", "4204024:sub_4025f8": null, "4204032:cgc_free": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 **, struct struct_1 *[2], struct_0 *, unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_50 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_50 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_50;\n
    v2[1] = 0;\n
    if (v9->field_50)\n
    {\n
        v12 = v1;\n
        *((&v12->field_50->field_0 + (v12->field_50->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_50 = v7;\n
    return v1;\n
}\n
", "4204496:cgc_floor": "typedef struct struct_0 {\n
    char padding_0[80];\n
    struct struct_1 *field_50;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    unsigned int field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_free(unsigned int v8)\n
{\n
    unsigned int v0;  // [bp-0x2c]\n
    struct_0 *v1;  // [bp-0x24]\n
    unsigned int v2[2];  // [bp-0x20]\n
    struct struct_1 *v3[2];  // [bp-0x1c]\n
    struct struct_1 **v4;  // [bp-0x18]\n
    unsigned int v5;  // [bp-0x14]\n
    unsigned int *v6;  // [bp-0x10]\n
    unsigned int *v7;  // [bp-0xc]\n
    struct_0 *v9;  // eax\n
    unsigned int *v10;  // ecx\n
    unsigned int *v11;  // eax\n
    struct_0 *v12;  // ecx\n
    unsigned int *v13;  // eax, Other Possible Types: struct struct_1 **, struct struct_1 *[2], struct_0 *, unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = v8 - 4;\n
    if (!(*(v7) & 1))\n
    {\n
        v0 = -2;\n
        cgc__terminate();\n
    }\n
    if ((*(v7) & 2))\n
    {\n
        v6 = v8 + (*(v7) & -0x4);\n
        if (!(*(v6) & 1))\n
        {\n
            v5 = (*(v7) & -0x4) + (*(v6) & -0x4) + 4;\n
            *(v7) = v5;\n
            if ((*(v6) & 2))\n
            {\n
                v11 = v7;\n
                *(v11) = *(v11) | 2;\n
            }\n
            if (v1->field_50 != v6)\n
            {\n
                v3[0] = -4 + v7 + v5;\n
                if (v3[1])\n
                    *((-4 + &v3[1]->field_0 + (v3[1]->field_0 & -0x4))) = v7;\n
                v13 = v3;\n
                if (v13[0])\n
                {\n
                    v13 = v3[0];\n
                    *((v13 + (v3[0]->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            else\n
            {\n
                v1->field_50 = v7;\n
                v4 = -4 + v7 + v5;\n
                v13 = v4;\n
                if (*(v13))\n
                {\n
                    v13 = *(v4);\n
                    *((v13 + (*(v4)->field_0 & -0x4))) = v7;\n
                }\n
            }\n
            return v13;\n
        }\n
    }\n
    v9 = v1;\n
    v10 = v7;\n
    *(v10) = *(v10) & -2;\n
    v2[0] = -4 + v7 + (*(v7) & -0x4);\n
    v2[0] = v9->field_50;\n
    v2[1] = 0;\n
    if (v9->field_50)\n
    {\n
        v12 = v1;\n
        *((&v12->field_50->field_0 + (v12->field_50->field_0 & -0x4))) = v7;\n
    }\n
    v13 = v1;\n
    v13->field_50 = v7;\n
    return v1;\n
}\n
", "4204660:sub_402874": null, "4204672:cgc_round_away_from_zero": null, "4204826:sub_40291a": null, "4204832:cgc_round": null, "4204976:cgc_putc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_putc(unsigned int v4)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x10]\n
    char v2;  // [bp-0xc]\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v0 = &v2;\n
    if (cgc_transmit(1, &v4, 1))\n
    {\n
        cgc__terminate();\n
        return v4;\n
    }\n
    return v4;\n
}\n
", "4205068:sub_402a0c": null, "4205072:cgc_int_to_str": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_str(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    unsigned int v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    if (v3 < 0)\n
    {\n
        a0->field_0 = 45;\n
        a0 += 1;\n
        v3 *= -1;\n
    }\n
    do\n
    {\n
        v1->field_0 = ((v3 >> 31 CONCAT v3) /m 10 >> 32) + 48;\n
        v5 = v3;\n
        v3 = (v5 >> 31 CONCAT v5) /m 10;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        *(a0) = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205281:sub_402ae1": null, "4205296:cgc_int_to_hex": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
int cgc_int_to_hex(unsigned int v3, struct_0 *a0)\n
{\n
    void* v0;  // [bp-0x2c], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x28], Other Possible Types: unsigned int\n
    char v2;  // [bp-0x24]\n
    struct_0 *v5;  // eax\n
    unsigned int v6;  // eax\n
\n
    v1 = &v2;\n
    v0 = 0;\n
    if (!a0)\n
        return &v2;\n
    do\n
    {\n
        v1->field_0 = (v3 & 15) + 48;\n
        if (v1->field_0 > 57)\n
        {\n
            v5 = v1;\n
            v5->field_0 = v5->field_0 + 7;\n
        }\n
        v3 >>= 4;\n
        v1 += 1;\n
        v0 += 1;\n
    } while (v3);\n
    while (true)\n
    {\n
        v6 = v0;\n
        v0 = v6 - 1;\n
        if (v6 <= 0)\n
            break;\n
        v1 -= 1;\n
        a0->field_0 = *(v1);\n
        a0 += 1;\n
    }\n
    *(a0) = 0;\n
    return a0;\n
}\n
", "4205489:sub_402bb1": null, "4205504:cgc_float_to_str": null, "4206367:sub_402f1f": null, "4206368:cgc_vprintf": "typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vprintf(char *v26, struct struct_0 **a0)\n
{\n
    struct_1 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_1 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_1 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    unsigned int v13;  // [bp-0x78]\n
    struct_1 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    void* v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v25;  // [bp-0xc]\n
    struct struct_0 **v27;  // eax\n
    struct struct_0 **v28;  // eax\n
    struct struct_0 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_0 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!v26)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(v26))\n
    {\n
        if (*(v26) != 64)\n
        {\n
            cgc_putc(*(v26));\n
            v26 += 1;\n
            v24 += 1;\n
LABEL_4037f4:\n
        }\n
        else\n
        {\n
            v26 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(v26) == 64)\n
            {\n
                cgc_putc(64);\n
                v26 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 45)\n
            {\n
                v19 = 1;\n
                v26 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(v26) == 48)\n
                {\n
                    v20 = 1;\n
                    v26 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
                }\n
            }\n
            if (*(v26) == 46)\n
            {\n
                v26 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); v26 += 1);\n
            }\n
            if (*(v26) == 99)\n
            {\n
                v27 = a0;\n
                a0 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                cgc_putc(v16);\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 100)\n
            {\n
                v28 = a0;\n
                a0 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            cgc_putc(32);\n
                        else\n
                            cgc_putc(48);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; *(v14); v14 += 1)\n
                {\n
                    cgc_putc(*(v14));\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 120)\n
            {\n
                v29 = a0;\n
                a0 = v29 + 1;\n
                v13 = *(v29);\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    cgc_putc(v12->field_0);\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (*(v26) == 102)\n
            {\n
                a0 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            cgc_putc(48);\n
                        else\n
                            cgc_putc(32);\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    cgc_putc(v10->field_0);\n
                    v24 += 1;\n
                }\n
                v26 += 1;\n
                continue;\n
            }\n
            if (!(*(v26) == 115))\n
                goto LABEL_4037f4;\n
            v35 = a0;\n
            a0 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403673;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403673:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        cgc_putc(48);\n
                    else\n
                        cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                cgc_putc(*(v9));\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    cgc_putc(32);\n
                    v24 += 1;\n
                }\n
            }\n
            v26 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4208651:sub_40380b": null, "4208656:cgc_vsprintf": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_vsprintf(unsigned int v26, char *a0, struct struct_1 **a1)\n
{\n
    struct_0 *v0;  // [bp-0xb4]\n
    unsigned int v1;  // [bp-0xb0]\n
    char v2;  // [bp-0xa5]\n
    unsigned int v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    unsigned int v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    unsigned int v7;  // [bp-0x94]\n
    unsigned int v8;  // [bp-0x90]\n
    char *v9;  // [bp-0x8c], Other Possible Types: unsigned int\n
    struct_0 *v10;  // [bp-0x88], Other Possible Types: unsigned int\n
    unsigned long v11;  // [bp-0x84]\n
    struct_0 *v12;  // [bp-0x7c], Other Possible Types: unsigned int\n
    char *v13;  // [bp-0x78]\n
    struct_0 *v14;  // [bp-0x74], Other Possible Types: unsigned int\n
    char *v15;  // [bp-0x70]\n
    char v16;  // [bp-0x69]\n
    void* v17;  // [bp-0x68], Other Possible Types: unsigned int\n
    void* v18;  // [bp-0x64], Other Possible Types: unsigned int\n
    unsigned int v19;  // [bp-0x60]\n
    void* v20;  // [bp-0x5c], Other Possible Types: unsigned int\n
    void* v21;  // [bp-0x58], Other Possible Types: unsigned int\n
    void* v22;  // [bp-0x54], Other Possible Types: unsigned int\n
    char v23;  // [bp-0x50]\n
    char *v24;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v25;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct struct_1 **v27;  // eax\n
    struct struct_1 **v28;  // eax\n
    struct struct_1 **v29;  // eax\n
    unsigned int v32;  // ftop\n
    unsigned int v33;  // ftop\n
    unsigned int v34;  // ftop\n
    struct struct_1 **v35;  // eax\n
\n
    v7 = &_GLOBAL_OFFSET_TABLE_;\n
    v24 = 0;\n
    if (!a0)\n
    {\n
        v25 = -1;\n
        return v25;\n
    }\n
    while (*(a0))\n
    {\n
        if (*(a0) != 64)\n
        {\n
            *((v26 + v24)) = *(a0);\n
            a0 += 1;\n
            v24 += 1;\n
LABEL_40404b:\n
        }\n
        else\n
        {\n
            a0 += 1;\n
            v22 = 0;\n
            v21 = 0;\n
            v20 = 0;\n
            v19 = 0;\n
            v17 = 0;\n
            if (*(a0) == 64)\n
            {\n
                *((v26 + v24)) = 64;\n
                a0 += 1;\n
                v24 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 45)\n
            {\n
                v19 = 1;\n
                a0 += 1;\n
            }\n
            if (cgc_isdigit())\n
            {\n
                if (*(a0) == 48)\n
                {\n
                    v20 = 1;\n
                    a0 += 1;\n
                }\n
                if (cgc_isdigit())\n
                {\n
                    for (v22 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
                }\n
            }\n
            if (*(a0) == 46)\n
            {\n
                a0 += 1;\n
                for (v21 = cgc_atoi(); cgc_isdigit(); a0 += 1);\n
            }\n
            if (*(a0) == 99)\n
            {\n
                v27 = a1;\n
                a1 = v27 + 1;\n
                v16 = *(v27);\n
                v17 = v22 - 1;\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                *((v26 + v24)) = v16;\n
                v24 += 1;\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 100)\n
            {\n
                v28 = a1;\n
                a1 = v28 + 1;\n
                v15 = &*(v28)->field_0;\n
                cgc_int_to_str(v15, &v23);\n
                v6 = v22;\n
                v17 = v6 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v14 = &v23; v14->field_0; v14 += 1)\n
                {\n
                    *((v26 + v24)) = v14->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 120)\n
            {\n
                v29 = a1;\n
                a1 = v29 + 1;\n
                v13 = &*(v29)->field_0;\n
                cgc_int_to_hex(v13, &v23);\n
                v5 = v22;\n
                v17 = v5 - cgc_strlen(&v23);\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (!v20)\n
                            *((v26 + v24)) = 32;\n
                        else\n
                            *((v26 + v24)) = 48;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v12 = &v23; v12->field_0; v12 += 1)\n
                {\n
                    *((v26 + v24)) = v12->field_0;\n
                    v24 += 1;\n
                }\n
                if (v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (*(a0) == 102)\n
            {\n
                a1 += 2;\n
                [D] PutI(72:F64x8)[t25,0] = t28\n
                [D] PutI(136:I8x8)[t25,0] = 0x01\n
                v11 = ([D] GetI(136:I8x8)[t40,0] ? [D] GetI(72:F64x8)[t40,0] : nan);\n
                [D] PutI(136:I8x8)[t40,0] = 0x00\n
                v32 = ftop<4> - 1 + 1;\n
                v33 = v32 - 1;\n
                [D] PutI(72:F64x8)[t49,0] = t52\n
                [D] PutI(136:I8x8)[t49,0] = 0x01\n
                v1 = v21;\n
                v0 = &v23;\n
                [D] PutI(136:I8x8)[t74,0] = 0x00\n
                v34 = v33 + 1;\n
                cgc_float_to_str();\n
                v4 = v22;\n
                v17 = v4 - cgc_strlen();\n
                if (!v19)\n
                {\n
                    for (v18 = 0; v18 < v17; v18 += 1)\n
                    {\n
                        if (v20)\n
                            *((v26 + v24)) = 48;\n
                        else\n
                            *((v26 + v24)) = 32;\n
                        v24 += 1;\n
                    }\n
                }\n
                for (v10 = &v23; v10->field_0; v10 += 1)\n
                {\n
                    *((v26 + v24)) = v10->field_0;\n
                    v24 += 1;\n
                }\n
                a0 += 1;\n
                continue;\n
            }\n
            if (!(*(a0) == 115))\n
                goto LABEL_40404b;\n
            v35 = a1;\n
            a1 = v35 + 1;\n
            v9 = &*(v35)->field_0;\n
            if (v21 > 0)\n
            {\n
                v3 = v21;\n
                if (v3 < cgc_strlen())\n
                {\n
                    v8 = v21;\n
                    goto LABEL_403eee;\n
                }\n
            }\n
            v8 = cgc_strlen();\n
LABEL_403eee:\n
            v17 = v22 - v8;\n
            if (!v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    if (v20)\n
                        *((v26 + v24)) = 48;\n
                    else\n
                        *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            while (true)\n
            {\n
                v2 = 0;\n
                if (*(v9))\n
                    v2 = !(v8 <= 0);\n
                if (!(v2 & 1))\n
                    break;\n
                *((v26 + v24)) = *(v9);\n
                v24 += 1;\n
                v9 += 1;\n
                v8 -= 1;\n
            }\n
            if (v19)\n
            {\n
                for (v18 = 0; v18 < v17; v18 += 1)\n
                {\n
                    *((v26 + v24)) = 32;\n
                    v24 += 1;\n
                }\n
            }\n
            a0 += 1;\n
        }\n
    }\n
    v25 = v24;\n
    return v25;\n
}\n
", "4210786:sub_404062": null, "4210800:cgc_printf": "int cgc_printf(char *v2)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char **v1;  // [bp-0xc]\n
    char v3;  // [bp+0x8]\n
\n
    v1 = &v3;\n
    v0 = cgc_vprintf(v2, v1);\n
    return v0;\n
}\n
", "4210864:cgc_sprintf": "int cgc_sprintf(char *v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    char **v1;  // [bp-0x10]\n
    unsigned int v2;  // [bp-0xc]\n
    char v4;  // [bp+0xc]\n
    unsigned int v5;  // esi\n
\n
    v2 = v5;\n
    v1 = &v4;\n
    v0 = cgc_vsprintf(v3, a0, v1);\n
    v3[v0] = 0;\n
    return v0;\n
}\n
", "4210943:sub_4040ff": null, "4210944:cgc_bzero": "int cgc_bzero(char *v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc]\n
    char *v1;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v3;  // eax, Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v3 = v2;\n
    v0 = v3;\n
    if (!v2)\n
    {\n
        return v2;\n
    }\n
    else if (!a0)\n
    {\n
        return v2;\n
    }\n
    else\n
    {\n
        v1 = 0;\n
        while (true)\n
        {\n
            v3 = v1;\n
            if (v3 >= a0)\n
                break;\n
            v0[v1] = 0;\n
            v1 += 1;\n
        }\n
        return v1;\n
    }\n
}\n
", "4211052:sub_40416c": null, "4211056:cgc_strchr": "int cgc_strchr(char *v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    for (v0 = v2; *(v1); v1 += 1)\n
    {\n
        if (*(v1) == a0)\n
        {\n
            v0 = v1;\n
            return v0;\n
        }\n
    }\n
    if (*(v1) != a0)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4211162:sub_4041da": null, "4211168:cgc_strdup": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strdup(unsigned int v5)\n
{\n
    struct_0 *v0;  // [bp-0x24]\n
    unsigned int v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    char v3;  // [bp-0x10]\n
    unsigned int v4;  // [bp-0xc]\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v5)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v0 = &v3;\n
    if (cgc_allocate(cgc_strlen() + 1, 0))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v1 = *(&v3);\n
    cgc_bzero(v1, cgc_strlen() + 1);\n
    cgc_strcpy(*(&v3));\n
    v4 = *(&v3);\n
    return v4;\n
}\n
", "4211360:cgc_strlen": "int cgc_strlen(unsigned int v1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((v1 + v0)); v0 += 1);\n
    return v0;\n
}\n
", "4211415:sub_4042d7": null, "4211424:cgc_strcpy": "int cgc_strcpy(unsigned int v1, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; *((a0 + v0)); v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4211515:sub_40433b": null, "4211520:cgc_strtok": "typedef struct struct_0 {\n
    char padding_0[64];\n
    unsigned int field_40;\n
    unsigned int field_44;\n
    unsigned int field_48;\n
    struct struct_1 *field_4c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_strtok(char *v10, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    char *v1;  // [bp-0x2c]\n
    char *v2;  // [bp-0x28]\n
    char v3;  // [bp-0x21]\n
    struct_0 *v4;  // [bp-0x20]\n
    unsigned int v5;  // [bp-0x1c]\n
    char *v6;  // [bp-0x18]\n
    char *v7;  // [bp-0x14], Other Possible Types: unsigned int\n
    char *v8;  // [bp-0x10]\n
    void* v9;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v11;  // edx\n
    struct_0 *v12;  // eax\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // eax\n
    struct_0 *v15;  // edx\n
    struct_0 *v16;  // edx\n
    struct_0 *v17;  // eax\n
\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    if (!a0)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    if (v10)\n
    {\n
        if (v4->field_44)\n
        {\n
            cgc_deallocate(v4->field_44);\n
            v12 = v4;\n
            v12->field_44 = 0;\n
            v12->field_48 = 0;\n
            v12->field_4c = 0;\n
        }\n
    }\n
    else\n
    {\n
        if (!v4->field_44)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v11 = v4;\n
        if (v11->field_4c >= v11->field_44 + v11->field_48)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
    }\n
    if (!v4->field_44)\n
    {\n
        if (cgc_strlen(v10) > 0x1000)\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        v13 = v4;\n
        v13->field_48 = cgc_strlen(v10);\n
        v0 = &v13->field_44;\n
        if (cgc_allocate(v13->field_48, 0))\n
        {\n
            v9 = 0;\n
            return v9;\n
        }\n
        cgc_strcpy(v4->field_44, v10);\n
        v14 = v4;\n
        v14->field_4c = v14->field_44;\n
    }\n
    v10 = &v4->field_4c->field_0;\n
    while (true)\n
    {\n
        v3 = 0;\n
        if (cgc_strchr(a0, *(v10)))\n
        {\n
            v15 = v4;\n
            v3 = v10 < v15->field_44 + v15->field_48;\n
        }\n
        if (!(v3 & 1))\n
            break;\n
        v10 += 1;\n
    }\n
    v16 = v4;\n
    if (v10 >= v16->field_44 + v16->field_48)\n
    {\n
        v9 = 0;\n
        return v9;\n
    }\n
    v8 = v10;\n
    v2 = v10;\n
    v7 = &v2[cgc_strlen(v10)];\n
    v5 = 0;\n
    while (true)\n
    {\n
        v1 = v5;\n
        if (v1 >= cgc_strlen(a0))\n
            break;\n
        v6 = cgc_strchr(v8, a0[v5]);\n
        if (v6 && v6 && v6 < v7)\n
            v7 = v6;\n
        v5 += 1;\n
    }\n
    v17 = v4;\n
    v17->field_40 = v8;\n
    *(v7) = 0;\n
    v17->field_4c = v7 + 1;\n
    v9 = v17->field_40;\n
    return v9;\n
}\n
", "4212267:sub_40462b": null, "4212272:cgc_puts": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_puts(unsigned int v5)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x14]\n
    unsigned int v2;  // [bp-0x10]\n
    char v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // ebx\n
\n
    v4 = v6;\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = v5;\n
    v0 = &v3;\n
    cgc_transmit(1, v1, cgc_strlen(v5));\n
    v0 = &v3;\n
    v7 = v4;\n
    return cgc_transmit(1, v2 - 7547, 1);\n
}\n
", "4212395:sub_4046ab": null, "4212400:cgc_isspace": "int cgc_isspace(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 != 32 && v1 != 9 && v1 != 10 && v1 != 11 && v1 != 12 && v1 != 13)\n
    {\n
        v0 = 0;\n
        return v0;\n
    }\n
    v0 = 1;\n
    return v0;\n
}\n
", "4212494:sub_40470e": null, "4212496:cgc_isdigit": "int cgc_isdigit(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 48 && v1 <= 57)\n
    {\n
        v0 = 1;\n
        return v0;\n
    }\n
    v0 = 0;\n
    return v0;\n
}\n
", "4212550:sub_404746": null, "4212560:cgc_isnan": null, "4212583:sub_404767": null, "4212592:cgc_isinf": null, "4212639:sub_40479f": null, "4212640:cgc_tolower": "int cgc_tolower(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 65 && v1 <= 90)\n
    {\n
        v0 = v1 + 32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4212698:sub_4047da": null, "4212704:cgc_toupper": "int cgc_toupper(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 >= 97 && v1 <= 122)\n
    {\n
        v0 = v1 + -32;\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4212762:sub_40481a": null, "4212768:cgc_strcmp": "int cgc_strcmp(unsigned int v2, unsigned int a0)\n
{\n
    char *v0;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v1;  // [bp-0x8]\n
\n
    v0 = 0;\n
    while (true)\n
    {\n
        if (!v0[v2] && !v0[a0])\n
        {\n
            v1 = 0;\n
            return v1;\n
        }\n
        if (!v0[v2])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (!v0[a0])\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
        else if (v0[v2] < v0[a0])\n
        {\n
            v1 = -1;\n
            return v1;\n
        }\n
        else if (v0[v2] <= v0[a0])\n
        {\n
            v0 += 1;\n
        }\n
        else\n
        {\n
            v1 = 1;\n
            return v1;\n
        }\n
    }\n
}\n
", "4213006:sub_40490e": null, "4213008:cgc_strncpy": "int cgc_strncpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    for (v0 = 0; v0 < a1; v0 += 1)\n
    {\n
        if (!*((a0 + v0)))\n
            break;\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    *((v1 + v0)) = 0;\n
    return v1;\n
}\n
", "4213114:sub_40497a": null, "4213120:cgc_flush_input": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_flush_input(unsigned int v9)\n
{\n
    unsigned int v0;  // [bp-0x4bc]\n
    unsigned int v1;  // [bp-0x4ac]\n
    char v2;  // [bp-0x4a4]\n
    void* v3;  // [bp-0xa4]\n
    unsigned int v4;  // [bp-0xa0]\n
    char v5;  // [bp-0x9c]\n
    unsigned int v6;  // [bp-0x98]\n
    char v7;  // [bp-0x94]\n
    void* v8;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10;  // eax\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    while (true)\n
    {\n
        cgc_memset(&v7, 0);\n
        v10 = v9 >> 5;\n
        *(&(&v7)[4 * v10]) = 1 << (v9 & 31 & 31) | *(&(&v7)[4 * v10]);\n
        v3 = 0;\n
        v4 = 10;\n
        v0 = &v5;\n
        v6 = cgc_fdwait(v9 + 1, &v7, 0, &v3);\n
        if (v6)\n
        {\n
            v8 = v6;\n
            return v8;\n
        }\n
        else if ((*(&(&v7)[4 * (v9 >> 5)]) & 1 << (v9 & 31 & 31)))\n
        {\n
            cgc_receive(v9, &v2, 0x400);\n
        }\n
        else\n
        {\n
            v8 = 0;\n
            return v8;\n
        }\n
    }\n
}\n
", "4213452:sub_404acc": null, "4213456:cgc_memset": "int cgc_memset(unsigned int v3, unsigned int a0, unsigned int a1)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    char v1;  // [bp-0x9]\n
    char *v2;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v2 = 0;\n
    v1 = a0;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = v1 * 0x1000000 | v1 * 0x10000 | v1 * 0x100 | v1; v2 + 3 < a1; v2 += 4)\n
        {\n
            *((v3 + v2)) = v0;\n
        }\n
    }\n
    for (; v2 < a1; v2 += 1)\n
    {\n
        *((v3 + v2)) = v1;\n
    }\n
    return v3;\n
}\n
", "4213625:sub_404b79": null, "4213632:cgc_getline": "int cgc_getline(char *v2, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    unsigned int v1;  // [bp-0xc]\n
\n
    v0 = a0;\n
    v1 = cgc_receive_until(v2, 10);\n
    if (v1 != a0)\n
    {\n
        v2[v1] = 0;\n
        return v1;\n
    }\n
    v2[1 + a0] = 0;\n
    return v1;\n
}\n
", "4213735:sub_404be7": null, "4213744:cgc_receive_until": "typedef struct struct_0 {\n
    char field_0;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_receive_until(unsigned int v5, char a0, unsigned int a1)\n
{\n
    struct_0 *v0;  // [bp-0x20]\n
    unsigned int v1;  // [bp-0x18]\n
    char v2;  // [bp-0x11]\n
    void* v3;  // [bp-0x10]\n
    char *v4;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v1 = &_GLOBAL_OFFSET_TABLE_;\n
    v4 = 0;\n
    v3 = 0;\n
    for (v2 = 0; v4 < a1; v4 += 1)\n
    {\n
        v4[v5] = 0;\n
        v0 = &v3;\n
        if (cgc_receive(0, &v2, 1))\n
        {\n
            v4 = 0;\n
            break;\n
        }\n
        else\n
        {\n
            if (v2 == a0)\n
                break;\n
            v4[v5] = v2;\n
        }\n
    }\n
    if (v4 == a1)\n
        cgc_flush_input(0);\n
    return v4;\n
}\n
", "4213965:sub_404ccd": null, "4213968:cgc_memcpy": "int cgc_memcpy(unsigned int v1, unsigned int a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x8], Other Possible Types: unsigned int\n
    char *v2;  // eax\n
\n
    v0 = v2;\n
    if (a1 >= 4)\n
    {\n
        for (v0 = 0; v0 + 3 < a1; v0 += 4)\n
        {\n
            *((v1 + v0)) = *((a0 + v0));\n
        }\n
    }\n
    for (; v0 < a1; v0 += 1)\n
    {\n
        *((v1 + v0)) = *((a0 + v0));\n
    }\n
    return v1;\n
}\n
", "4214112:cgc_atoi": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_atoi(char *v6)\n
{\n
    unsigned int v0;  // [bp-0x20]\n
    void* v1;  // [bp-0x1c], Other Possible Types: unsigned int\n
    void* v2;  // [bp-0x18], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x14]\n
    void* v4;  // [bp-0x10], Other Possible Types: unsigned int\n
    void* v5;  // [bp-0xc], Other Possible Types: unsigned int\n
\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    if (!v6)\n
    {\n
        v5 = 0;\n
        return v5;\n
    }\n
    v4 = 0;\n
    v3 = 1;\n
    for (v1 = 0; cgc_isspace(*(v6)); v6 += 1);\n
    for (v2 = 0; *(v6); v6 += 1)\n
    {\n
        if (*(v6) == 45)\n
        {\n
            if (!v2)\n
            {\n
                v3 = -1;\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
        else\n
        {\n
            if (*(v6) != 43)\n
            {\n
                if (!cgc_isdigit(*(v6)))\n
                    break;\n
                if (v2 && v2 != 1)\n
                {\n
                    v5 = 0;\n
                    return v5;\n
                }\n
                v2 = 1;\n
                v4 = v4 * 10 + *(v6) - 48;\n
                v1 += 1;\n
                if (v1 == 12)\n
                    break;\n
            }\n
            else if (!v2)\n
            {\n
                v2 += 1;\n
            }\n
            else\n
            {\n
                v5 = 0;\n
                return v5;\n
            }\n
        }\n
    }\n
    v5 = v4 * v3;\n
    return v5;\n
}\n
", "4214516:sub_404ef4": null, "4214528:cgc_abs": "int cgc_abs(unsigned int v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
\n
    v0 = v2;\n
    if (v1 < 0)\n
    {\n
        v0 = -(v1);\n
        return v0;\n
    }\n
    v0 = v1;\n
    return v0;\n
}\n
", "4214572:sub_404f2c": null, "4214576:cgc_lint": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lint(unsigned int v3, char *a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1[4];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = cgc_calloc(16, 1);\n
    v1[2] = cgc_atoi(a0);\n
    v1[1] = v0 - 8000;\n
    v1[0] = cgc_strdup(v3);\n
    v1[3] = cgc_strlen(a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4214713:sub_404fb9": null, "4214720:cgc_lstring": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lstring(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1[4];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = cgc_calloc(16, 1);\n
    v1[2] = cgc_strdup(a0);\n
    v1[1] = v0 - 7992;\n
    v1[0] = cgc_strdup(v3);\n
    v1[3] = cgc_strlen(a0);\n
    v5 = v2;\n
    return v1;\n
}\n
", "4214857:sub_405049": null, "4214864:cgc_lbool": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lbool(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1[4];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = cgc_calloc(16, 1);\n
    if (!cgc_strcmp(a0, v0 - 7985))\n
        v1[2] = 1;\n
    else\n
        v1[2] = 0;\n
    v1[3] = 1;\n
    v1[1] = v0 - 7980;\n
    v1[0] = cgc_strdup(v3);\n
    return v1;\n
}\n
", "4215026:sub_4050f2": null, "4215040:cgc_lfunc": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_lfunc(unsigned int v3, unsigned int a0)\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1[4];  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
    unsigned int v5;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1[0] = cgc_calloc(16, 1);\n
    v1[0] = cgc_strdup(v3);\n
    v1[2] = a0;\n
    v1[1] = v0 - 7972;\n
    v1[3] = 0;\n
    v5 = v2;\n
    return v1;\n
}\n
", "4215155:sub_405173": null, "4215168:main": "extern unsigned int _GLOBAL_OFFSET_TABLE_[24];\n
\n
int main(unsigned int v16, unsigned int a0)\n
{\n
    void* v0;  // [bp-0x240]\n
    unsigned int v1;  // [bp-0x23c]\n
    unsigned int v2;  // [bp-0x238]\n
    unsigned int v3;  // [bp-0x234]\n
    unsigned int v4;  // [bp-0x230]\n
    unsigned int v5;  // [bp-0x22c]\n
    unsigned int v6;  // [bp-0x228]\n
    unsigned int v7;  // [bp-0x224]\n
    unsigned int v8;  // [bp-0x220]\n
    unsigned int v9;  // [bp-0x21c]\n
    unsigned int v10;  // [bp-0x218]\n
    unsigned int v11[24];  // [bp-0x214]\n
    unsigned int v12;  // [bp-0x210]\n
    char v13;  // [bp-0x10c]\n
    void* v14;  // [bp-0xc]\n
    unsigned int v15;  // [bp-0x8]\n
    unsigned int v17;  // ebx\n
    unsigned int v18[24];  // ebx\n
    unsigned int v19[24];  // ebx\n
    unsigned int v20[24];  // ebx\n
    unsigned int v21[24];  // ebx\n
    unsigned int v22[24];  // ebx\n
    unsigned int v23[24];  // ebx\n
    unsigned int v24[24];  // ebx\n
    unsigned int v25[24];  // ebx\n
    unsigned int v26[24];  // ebx\n
    unsigned int v27[24];  // ebx\n
    unsigned int v28[24];  // ebx\n
\n
    v15 = v17;\n
    v11[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v14 = 0;\n
    v11[22] = cgc_initTrie();\n
    v11[23] = cgc_initStack();\n
    v18 = v11;\n
    v18[21] = cgc_initStack();\n
    v1 = v18[22];\n
    cgc_lfunc(&v18[80 + 20] + 1, &v18[163 + 11]);\n
    cgc_insertInTrie(v1, &v11[80 + 20] + 1);\n
    v19 = v11;\n
    v2 = v19[22];\n
    cgc_lfunc(&v19[77 + 22] + 2, &v19[137 + 23]);\n
    cgc_insertInTrie(v2, &v11[77 + 22] + 2);\n
    v20 = v11;\n
    v3 = v20[22];\n
    cgc_lfunc(&v20[82 + 22] + 3, &v20[146 + 3]);\n
    cgc_insertInTrie(v3, &v11[82 + 22] + 3);\n
    v21 = v11;\n
    v4 = v21[22];\n
    cgc_lfunc(&v21[82 + 21] + 3, &v21[133 + 15]);\n
    cgc_insertInTrie(v4, &v11[82 + 21] + 3);\n
    v22 = v11;\n
    v5 = v22[22];\n
    cgc_lfunc(&v22[82 + 20] + 3, &v22[129 + 3]);\n
    cgc_insertInTrie(v5, &v11[82 + 20] + 3);\n
    v23 = v11;\n
    v6 = v23[22];\n
    cgc_lfunc(&v23[82 + 19] + 3, &v23[124 + 15]);\n
    cgc_insertInTrie(v6, &v11[82 + 19] + 3);\n
    v24 = v11;\n
    v7 = v24[22];\n
    cgc_lfunc(&v24[79 + 18] + 1, &v24[152 + 3]);\n
    cgc_insertInTrie(v7, &v11[79 + 18] + 1);\n
    v25 = v11;\n
    v8 = v25[22];\n
    cgc_lfunc(&v25[82 + 18] + 3, &v25[107 + 3]);\n
    cgc_insertInTrie(v8, &v11[82 + 18] + 3);\n
    v26 = v11;\n
    v9 = v26[22];\n
    cgc_lfunc(&v26[82 + 16] + 1, &v26[116 + 11]);\n
    cgc_insertInTrie(v9, &v11[82 + 16] + 1);\n
    v27 = v11;\n
    v10 = v27[22];\n
    cgc_lfunc(&v27[82 + 14] + 2, &v27[108 + 15]);\n
    cgc_insertInTrie(v10, &v11[82 + 14] + 2);\n
    v28 = v11;\n
    v12 = v28[22];\n
    cgc_lfunc(&v28[82 + 13] + 1, &v28[118 + 15]);\n
    cgc_insertInTrie(v12, &v11[82 + 13] + 1);\n
    while (true)\n
    {\n
        cgc_memset(&v13, 0, 0x100);\n
        v0 = 0;\n
        cgc_transmit(1, (&v11[82 + 12] + 1), 2);\n
        if (!cgc_receive_until(&v13, 10, 255))\n
            cgc__terminate();\n
        cgc_process();\n
    }\n
}\n
", "4216264:sub_4055c8": null, "4216272:cgc_process": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
typedef struct struct_2 {\n
    char padding_0[8];\n
    struct struct_1 *field_8;\n
} struct_2;\n
\n
typedef struct struct_1 {\n
    struct struct_1 *field_0;\n
} struct_1;\n
\n
extern unsigned int _GLOBAL_OFFSET_TABLE_[24];\n
\n
int cgc_process(char *v35)\n
{\n
    unsigned int v0;  // [bp-0x94]\n
    unsigned int v1;  // [bp-0x90]\n
    unsigned int v2;  // [bp-0x8c]\n
    unsigned int v3;  // [bp-0x88]\n
    unsigned int v4;  // [bp-0x84]\n
    unsigned int v5;  // [bp-0x80]\n
    unsigned int v6;  // [bp-0x7c]\n
    unsigned int v7;  // [bp-0x78]\n
    unsigned int v8;  // [bp-0x74]\n
    unsigned int v9;  // [bp-0x70]\n
    unsigned int v10;  // [bp-0x6c]\n
    unsigned int v11;  // [bp-0x68]\n
    unsigned int v12;  // [bp-0x64]\n
    unsigned int v13;  // [bp-0x60]\n
    char *v14;  // [bp-0x5c]\n
    char *v15;  // [bp-0x58]\n
    unsigned int v16[24];  // [bp-0x54]\n
    unsigned int v17[3];  // [bp-0x50]\n
    struct_2 *v18;  // [bp-0x4c]\n
    struct_0 *v19;  // [bp-0x48]\n
    struct_0 *v20;  // [bp-0x44]\n
    struct_0 *v21;  // [bp-0x40]\n
    struct_0 *v22;  // [bp-0x3c]\n
    struct_0 *v23;  // [bp-0x38]\n
    struct_0 *v24;  // [bp-0x34]\n
    struct_0 *v25;  // [bp-0x30]\n
    char *v26;  // [bp-0x2c]\n
    char *v27;  // [bp-0x28]\n
    char *v28;  // [bp-0x24]\n
    unsigned int v29;  // [bp-0x20]\n
    char *v30;  // [bp-0x1c]\n
    unsigned int v31;  // [bp-0x14]\n
    char *v32;  // [bp-0x10], Other Possible Types: unsigned int\n
    char *v33;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v34;  // [bp-0x8]\n
    unsigned int v36;  // ebx\n
    unsigned int v37[24];  // ebx\n
    unsigned int v38[24];  // ebx\n
    unsigned int v39[24];  // ebx\n
    unsigned int v40[24];  // ebx\n
    unsigned int v41;  // eax\n
\n
    v34 = v36;\n
    v16[0] = &_GLOBAL_OFFSET_TABLE_[0];\n
    v32 = 0;\n
    v33 = cgc_strtok(v35, \" \");\n
    while (v33)\n
    {\n
        if (cgc_isdigit(*(v33)))\n
        {\n
LABEL_405655:\n
            v32 = 1;\n
            while (true)\n
            {\n
                v15 = v32;\n
                if (v15 >= cgc_strlen(v33))\n
                    break;\n
                if (!cgc_isdigit(v33[v32]))\n
                    break;\n
                v32 += 1;\n
            }\n
            v14 = v32;\n
            if (v14 < cgc_strlen(v33))\n
            {\n
                cgc_puts(&v16[82 + 11] + 2);\n
            }\n
            else\n
            {\n
                v31 = cgc_lint(&v16[78 + 14] + 2, v33);\n
                cgc_push(v16[23]);\n
            }\n
            goto LABEL_4060b5;\n
        }\n
        else if (*(v33) != 45)\n
        {\n
LABEL_405722:\n
            if (*(v33) == 34)\n
            {\n
                v33 += 1;\n
                v30 = cgc_strchr(v33, 34);\n
                if (!v30)\n
                {\n
                    v33 += 1;\n
                    cgc_printf(&v16[82 + 8] + 1);\n
                }\n
                else\n
                {\n
                    v37 = v16;\n
                    *(v30) = 0;\n
                    v13 = v37[23];\n
                    cgc_lstring(&v37[78 + 14] + 2, v33);\n
                    cgc_push(v13);\n
                }\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 23] + 3))\n
            {\n
                v29 = cgc_strtok(NULL, &v16[82 + 12]);\n
                v28 = cgc_strtok(NULL, &v16[82 + 12]);\n
                if (!v28)\n
                    break;\n
                if (v28 && *(v28) == 61)\n
                {\n
                    v27 = cgc_strtok(NULL, &v16[82 + 12]);\n
                    if (v27)\n
                    {\n
                        if (*(v27) != 34)\n
                        {\n
                            if (!cgc_strcmp(v27, &v16[81 + 14] + 3))\n
                            {\n
                                v9 = v16[22];\n
                                v10 = v29;\n
                                v0 = cgc_lbool(v29, v27);\n
                                cgc_insertInTrie(v9, v10);\n
                            }\n
                            else\n
                            {\n
                                if (cgc_strcmp(v27, &v16[83 + 4] + 1))\n
                                {\n
                                    v5 = v16[22];\n
                                    v6 = v29;\n
                                    v0 = cgc_lint(v29, v27);\n
                                    cgc_insertInTrie(v5, v6);\n
                                }\n
                                else\n
                                {\n
                                    v7 = v16[22];\n
                                    v8 = v29;\n
                                    v0 = cgc_lbool(v29, v27);\n
                                    cgc_insertInTrie(v7, v8);\n
                                }\n
                            }\n
                        }\n
                        else\n
                        {\n
                            v27 += 1;\n
                            v26 = cgc_strchr(v27, 34);\n
                            if (v26)\n
                            {\n
                                *(v26) = 0;\n
                                v11 = v16[22];\n
                                v12 = v29;\n
                                v0 = cgc_lstring(v29, v27);\n
                                cgc_insertInTrie(v11, v12);\n
                            }\n
                        }\n
                        goto LABEL_405a5f;\n
                    }\n
                    else\n
                    {\n
                        cgc_printf(&v16[81 + 22] + 3);\n
                        break;\n
                    }\n
                }\n
                v40 = v16;\n
                v3 = v40[22];\n
                v4 = v29;\n
                v0 = cgc_lint(v29, &v40[83 + 9] + 2);\n
                cgc_insertInTrie(v3, v4);\n
LABEL_405a5f:\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[83 + 4] + 1))\n
            {\n
                v38 = v16;\n
                v2 = v38[23];\n
                cgc_lbool(&v38[78 + 14] + 2, &v38[83 + 4] + 1);\n
                cgc_push(v2);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 14] + 3))\n
            {\n
                v39 = v16;\n
                v1 = v39[23];\n
                cgc_lbool(&v39[78 + 14] + 2, &v39[81 + 14] + 3);\n
                cgc_push(v1);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 13] + 1))\n
            {\n
                v25 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (!cgc_strcmp(v25->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[21]);\n
                else\n
                    cgc_push(v16[23]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 12] + 3))\n
            {\n
                v24 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (!cgc_strcmp(v24->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[21]);\n
                else\n
                    cgc_push(v16[23]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 12] + 1))\n
            {\n
                v23 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (cgc_strcmp(v23->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[23]);\n
                else\n
                    cgc_push(v16[21]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 11] + 3))\n
            {\n
                v22 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (cgc_strcmp(v22->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[23]);\n
                else\n
                    cgc_push(v16[21]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 11] + 1))\n
            {\n
                v21 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (cgc_strcmp(v21->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[23]);\n
                else\n
                    cgc_push(v16[21]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_strcmp(v33, &v16[81 + 10] + 3))\n
            {\n
                v20 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (!cgc_strcmp(v20->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[21]);\n
                else\n
                    cgc_push(v16[23]);\n
                v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
                continue;\n
            }\n
            else if (!cgc_findInTrie(v16[22]))\n
            {\n
                cgc_printf(&v16[81 + 10]);\n
            }\n
            else\n
            {\n
                v19 = *((cgc_findInTrie(v16[22]) + 12));\n
                if (cgc_strcmp(v19->field_4, &v16[83 + 1]))\n
                    cgc_push(v16[23]);\n
                else\n
                    cgc_push(v16[21]);\n
            }\n
LABEL_4060b5:\n
            v33 = cgc_strtok(NULL, &v16[82 + 12]);\n
        }\n
        else\n
        {\n
            if (cgc_strlen(v33) <= 1)\n
                goto LABEL_405722;\n
            goto LABEL_405655;\n
        }\n
    }\n
    while (((cgc_isEmpty() ^ 255) & 1))\n
    {\n
        v18 = cgc_pop();\n
        v18->field_8();\n
    }\n
    v41 = cgc_isEmpty();\n
    if (v41)\n
        return v41;\n
    v17[0] = cgc_pop();\n
    if (!cgc_strcmp(v17[1], &v16[83 + 8]))\n
    {\n
        v41 = cgc_printf(&v16[81 + 3] + 1);\n
    }\n
    else if (!cgc_strcmp(v17[1], &v16[83 + 6]))\n
    {\n
        v41 = cgc_printf(&v16[81 + 4] + 1);\n
    }\n
    else\n
    {\n
        v41 = cgc_strcmp(v17[1], &v16[83 + 3]);\n
        if (!v41)\n
            v41 = cgc_printf(&v16[81 + 4] + 1);\n
    }\n
    return v41;\n
}\n
", "4219460:sub_406244": null, "4219472:cgc_add": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char field_0;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_add()\n
{\n
    unsigned int v0;  // [bp-0x70]\n
    struct_1 *v1;  // [bp-0x6c]\n
    unsigned int v2;  // [bp-0x68]\n
    unsigned int v3;  // [bp-0x64]\n
    unsigned int v4;  // [bp-0x60]\n
    struct_0 *v5;  // [bp-0x5c]\n
    char v6;  // [bp-0x58]\n
    unsigned int v7;  // [bp-0x38]\n
    unsigned int v8;  // [bp-0x34]\n
    char v9;  // [bp-0x30]\n
    unsigned int v10[4];  // [bp-0x10]\n
    unsigned int v11[4];  // [bp-0xc]\n
    unsigned int v12;  // [bp-0x8]\n
    unsigned int v14;  // ebx\n
    unsigned int v15;  // eax\n
    struct_0 *v16;  // ebx\n
    struct_0 *v17;  // ebx\n
    struct_0 *v18;  // ebx\n
\n
    v12 = v14;\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v11[0] = 0;\n
    v10[0] = 0;\n
    if (cgc_isEmpty())\n
    {\n
        v15 = cgc_puts(&v5[81].padding_0[9]);\n
        return v15;\n
    }\n
    v11[0] = cgc_pop();\n
    if (cgc_isEmpty())\n
    {\n
        v15 = cgc_puts(&v5[81].padding_0[9]);\n
        return v15;\n
    }\n
    v10[0] = cgc_pop();\n
    if (!cgc_strcmp(v11[1], &v5[83].padding_0[32]) && !cgc_strcmp(v10[1], &v5[83].padding_0[32]))\n
    {\n
        cgc_bzero(&v9, 32);\n
        cgc_int_to_str(v11[2] + v10[2], &v9);\n
        v16 = v5;\n
        v4 = v16->field_5c;\n
        cgc_lint(&v16[78].padding_0[58], &v9);\n
        v15 = cgc_push(v4);\n
        return v15;\n
    }\n
    if (!cgc_strcmp(v11[1], &v5[83].padding_0[24]) && !cgc_strcmp(v10[1], &v5[83].padding_0[24]))\n
    {\n
        v8 = cgc_calloc(v11[3] + v10[3] + 1, 1);\n
        if (!v8)\n
        {\n
            cgc_puts(&v5[80].padding_0[77]);\n
            v15 = cgc__terminate();\n
        }\n
        else\n
        {\n
            cgc_memcpy(v8, v10[2], v10[3]);\n
            cgc_memcpy(v8 + v10[3], v11[2], v11[3]);\n
            v17 = v5;\n
            v3 = v17->field_5c;\n
            cgc_lstring(&v17[78].padding_0[58], v8);\n
            cgc_push(v3);\n
            v15 = cgc_free(v8);\n
        }\n
        goto LABEL_406675;\n
    }\n
    if (!cgc_strcmp(v10[1], &v5[83].padding_0[24]) && !cgc_strcmp(v11[1], &v5[83].padding_0[32]))\n
    {\n
        cgc_bzero(&v6, 32);\n
        cgc_int_to_str(v11[2], &v6);\n
        v7 = cgc_calloc(v10[3] + v11[3] + 1, 1);\n
        if (!v7)\n
        {\n
            cgc_puts(&v5[80].padding_0[77]);\n
            v15 = cgc__terminate();\n
        }\n
        else\n
        {\n
            cgc_memcpy(v7, v10[2], v10[3]);\n
            v0 = v7 + v10[3];\n
            v1 = &v6;\n
            cgc_memcpy(v0, v1, cgc_strlen(&v6));\n
            v18 = v5;\n
            v2 = v18->field_5c;\n
            cgc_lstring(&v18[78].padding_0[58], v7);\n
            cgc_push(v2);\n
            v15 = cgc_free(v7);\n
        }\n
        goto LABEL_406675;\n
    }\n
    v15 = cgc_printf(&v5[80].padding_0[44]);\n
LABEL_406675:\n
    return v15;\n
}\n
", "4220549:sub_406685": null, "4220560:cgc__int": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
    struct struct_2 *field_8;\n
} struct_1;\n
\n
typedef struct struct_2 {\n
    char field_0;\n
} struct_2;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc__int()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    char *v3;  // [bp-0x1c]\n
    struct_0 *v4;  // [bp-0x18]\n
    char *v5;  // [bp-0x14]\n
    unsigned int v6;  // [bp-0x10]\n
    struct_1 *v7;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // ebx\n
\n
    v8 = v10;\n
    v4 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7 = 0;\n
    if (!cgc_isEmpty())\n
        v7 = cgc_pop();\n
    if (!v7)\n
    {\n
        v11 = cgc_puts(&v4[79].padding_0[67]);\n
        return v11;\n
    }\n
    if (!cgc_strcmp(*((v7 + 4)), &v4[83].padding_0[32]))\n
    {\n
        v11 = cgc_push(v4->field_5c);\n
    }\n
    else if (cgc_strcmp(*((v7 + 4)), &v4[83].padding_0[24]))\n
    {\n
        v11 = cgc_strcmp(*((v7 + 4)), &v4[83].padding_0[12]);\n
        if (!v11)\n
        {\n
            if (!*((v7 + 8)))\n
            {\n
                v14 = v4;\n
                v0 = v14->field_5c;\n
                cgc_lint(&v14[78].padding_0[58], &v14[83].padding_0[38]);\n
                v11 = cgc_push(v0);\n
            }\n
            else\n
            {\n
                v13 = v4;\n
                v1 = v13->field_5c;\n
                cgc_lint(&v13[78].padding_0[58], &v13[79].padding_0[69]);\n
                v11 = cgc_push(v1);\n
            }\n
        }\n
    }\n
    else\n
    {\n
        v5 = *((v7 + 8));\n
        v6 = 0;\n
        while (true)\n
        {\n
            v3 = v6;\n
            if (v3 >= cgc_strlen(v5))\n
                break;\n
            if (!cgc_isdigit(v5[v6]))\n
            {\n
                v11 = cgc_puts(&v4[80].padding_0[7]);\n
                return v11;\n
            }\n
            v6 += 1;\n
        }\n
        v12 = v4;\n
        v2 = v12->field_5c;\n
        cgc_lint(&v12[78].padding_0[58], *((v7 + 8)));\n
        v11 = cgc_push(v2);\n
    }\n
    return v11;\n
}\n
", "4221127:sub_4068c7": null, "4221136:cgc_mul": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_mul()\n
{\n
    unsigned int v0;  // [bp-0x50]\n
    unsigned int v1;  // [bp-0x4c]\n
    unsigned int v2;  // [bp-0x48]\n
    struct_0 *v3;  // [bp-0x44]\n
    unsigned int v4;  // [bp-0x40]\n
    unsigned int v5;  // [bp-0x3c]\n
    unsigned int v6;  // [bp-0x38]\n
    unsigned int v7;  // [bp-0x34]\n
    char v8;  // [bp-0x30]\n
    unsigned int v9[4];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v10[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v11;  // [bp-0x8]\n
    unsigned int v13;  // ebx\n
    unsigned int v14;  // eax\n
    struct_0 *v15;  // ebx\n
    unsigned int v16;  // eax\n
    struct_0 *v17;  // ebx\n
\n
    v11 = v13;\n
    v3 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v10[0] = 0;\n
    v9[0] = 0;\n
    if (!cgc_isEmpty())\n
        v10 = cgc_pop();\n
    if (!cgc_isEmpty())\n
        v9 = cgc_pop();\n
    if (v10 && v9)\n
    {\n
        if (!cgc_strcmp(*((v9 + 4)), &v3[83].padding_0[32]) && !cgc_strcmp(*((v10 + 4)), &v3[83].padding_0[32]))\n
        {\n
            cgc_bzero(&v8, 32);\n
            cgc_int_to_str(*((v10 + 8)) * *((v9 + 8)), &v8);\n
            v15 = v3;\n
            v2 = v15->field_5c;\n
            cgc_lint(&v15[78].padding_0[58], &v8);\n
            v14 = cgc_push(v2);\n
            goto LABEL_406bb0;\n
        }\n
        if (!cgc_strcmp(*((v9 + 4)), &v3[83].padding_0[24]) && !cgc_strcmp(*((v10 + 4)), &v3[83].padding_0[32]))\n
        {\n
            v1 = *((v10 + 8));\n
            v14 = v1;\n
            if (v14 >= (0 CONCAT 2147483647) /m *((v9 + 12)))\n
                return v1;\n
            v14 = *((v10 + 8));\n
            if (v14 <= 0)\n
                return *((v10 + 8));\n
            v5 = *((v10 + 8));\n
            v6 = *((v10 + 8)) * *((v9 + 12)) + 1;\n
            v7 = cgc_calloc(v6, 1);\n
            v4 = v7;\n
            if (!v7)\n
            {\n
                cgc_puts(&v3[79].padding_0[39]);\n
                v14 = cgc__terminate();\n
            }\n
            else\n
            {\n
                while (true)\n
                {\n
                    v16 = v5;\n
                    v5 = v16 - 1;\n
                    if (!v16)\n
                        break;\n
                    cgc_memcpy(v7, *((v9 + 8)), *((v9 + 12)));\n
                    v7 = *((v9 + 12)) + v7;\n
                }\n
                v17 = v3;\n
                v0 = v17->field_5c;\n
                cgc_lstring(&v17[78].padding_0[58], v4);\n
                v14 = cgc_push(v0);\n
            }\n
            goto LABEL_406bb0;\n
            goto LABEL_406bb0;\n
        }\n
        v14 = cgc_printf(&v3[79].padding_0[2]);\n
LABEL_406bb0:\n
        return v14;\n
    }\n
    v14 = cgc_puts(&v3[78].padding_0[57]);\n
    return v14;\n
}\n
", "4221905:sub_406bd1": null, "4221920:cgc_sub": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_sub()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x34]\n
    char v3;  // [bp-0x30]\n
    unsigned int v4[3];  // [bp-0x10]\n
    unsigned int v5[3];  // [bp-0xc]\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    struct_0 *v10;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5[0] = 0;\n
    v4[0] = 0;\n
    if (cgc_isEmpty())\n
    {\n
        v9 = cgc_puts(&v2[78].padding_0[18]);\n
        return v9;\n
    }\n
    v5[0] = cgc_pop();\n
    if (cgc_isEmpty())\n
    {\n
        v9 = cgc_puts(&v2[78].padding_0[18]);\n
        return v9;\n
    }\n
    v4[0] = cgc_pop();\n
    if (!cgc_strcmp(v5[1], &v2[83].padding_0[32]) && !cgc_strcmp(v4[1], &v2[83].padding_0[32]))\n
    {\n
        cgc_bzero(&v3, 32);\n
        cgc_int_to_str(v4[2] - v5[2], &v3);\n
        v10 = v2;\n
        v1 = v10->field_5c;\n
        cgc_lint(&v10[78].padding_0[58], &v3);\n
        v9 = cgc_push(v1);\n
        return v9;\n
    }\n
    v0 = v5[1];\n
    v9 = cgc_printf(&v2[77].padding_0[86]);\n
    return v9;\n
}\n
", "4222324:sub_406d74": null, "4222336:cgc_div": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_div()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x34]\n
    char v3;  // [bp-0x30]\n
    unsigned int v4[3];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    unsigned int v10;  // eax\n
    struct_0 *v12;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5[0] = 0;\n
    v4[0] = 0;\n
    if (!cgc_isEmpty())\n
        v5 = cgc_pop();\n
    if (!cgc_isEmpty())\n
        v4 = cgc_pop();\n
    if (v5 && v4)\n
    {\n
        if (!cgc_strcmp(*((v5 + 4)), &v2[83].padding_0[32]) && !cgc_strcmp(*((v4 + 4)), &v2[83].padding_0[32]))\n
        {\n
            cgc_bzero(&v3, 32);\n
            if (!*((v5 + 8)))\n
            {\n
                v9 = cgc_puts(&v2[77].padding_0[48]);\n
            }\n
            else\n
            {\n
                v10 = *((v4 + 8));\n
                cgc_int_to_str((v10 >> 31 CONCAT v10) /m *((v5 + 8)), &v3);\n
                v12 = v2;\n
                v1 = v12->field_5c;\n
                cgc_lint(&v12[78].padding_0[58], &v3);\n
                v9 = cgc_push(v1);\n
            }\n
            goto LABEL_406f12;\n
        }\n
        v0 = *((v5 + 4));\n
        v9 = cgc_printf(&v2[77].padding_0[25]);\n
LABEL_406f12:\n
        return v9;\n
    }\n
    v9 = cgc_puts(&v2[76].padding_0[78]);\n
    return v9;\n
}\n
", "4222766:sub_406f2e": null, "4222768:cgc_mod": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_mod()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x38]\n
    struct_0 *v2;  // [bp-0x34]\n
    char v3;  // [bp-0x30]\n
    unsigned int v4[3];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v5[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v6;  // [bp-0x8]\n
    unsigned int v8;  // ebx\n
    unsigned int v9;  // eax\n
    struct_0 *v10;  // ebx\n
\n
    v6 = v8;\n
    v2 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v5[0] = 0;\n
    v4[0] = 0;\n
    if (!cgc_isEmpty())\n
        v5 = cgc_pop();\n
    if (!cgc_isEmpty())\n
        v4 = cgc_pop();\n
    if (v5 && v4)\n
    {\n
        if (!cgc_strcmp(*((v5 + 4)), &v2[83].padding_0[32]) && !cgc_strcmp(*((v4 + 4)), &v2[83].padding_0[32]))\n
        {\n
            cgc_bzero(&v3, 32);\n
            if (!*((v5 + 8)))\n
            {\n
                v9 = cgc_puts(&v2[76].padding_0[44]);\n
            }\n
            else\n
            {\n
                cgc_int_to_str((*((v4 + 8)) >> 31 CONCAT *((v4 + 8))) /m *((v5 + 8)) >> 32, &v3);\n
                v10 = v2;\n
                v1 = v10->field_5c;\n
                cgc_lint(&v10[78].padding_0[58], &v3);\n
                v9 = cgc_push(v1);\n
            }\n
            goto LABEL_4070c0;\n
        }\n
        v0 = *((v5 + 4));\n
        v9 = cgc_printf(&v2[76].padding_0[24]);\n
LABEL_4070c0:\n
        return v9;\n
    }\n
    v9 = cgc_puts(&v2[75].padding_0[82]);\n
    return v9;\n
}\n
", "4223196:sub_4070dc": null, "4223200:cgc_not": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_not()\n
{\n
    unsigned int v0;  // [bp-0x44]\n
    unsigned int v1;  // [bp-0x40]\n
    unsigned int v2;  // [bp-0x3c]\n
    unsigned int v3;  // [bp-0x38]\n
    unsigned int v4;  // [bp-0x34]\n
    struct_0 *v5;  // [bp-0x30]\n
    char v6;  // [bp-0x2c]\n
    unsigned int v7[3];  // [bp-0xc]\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // ebx\n
    struct_0 *v15;  // ebx\n
    struct_0 *v16;  // ebx\n
\n
    v8 = v10;\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7[0] = 0;\n
    if (cgc_isEmpty())\n
    {\n
        v11 = cgc_puts(&v5[75].padding_0[53]);\n
        return v11;\n
    }\n
    v7[0] = cgc_pop();\n
    if (cgc_strcmp(v7[1], &v5[83].padding_0[24]))\n
    {\n
        if (!cgc_strcmp(v7[1], &v5[83].padding_0[32]))\n
        {\n
            cgc_bzero(&v6, 32);\n
            cgc_int_to_str(v7[2] ^ -1, &v6);\n
            v16 = v5;\n
            v2 = v16->field_5c;\n
            cgc_lint(&v16[78].padding_0[58], &v6);\n
            v11 = cgc_push(v2);\n
        }\n
        else if (v7[2] == 1)\n
        {\n
            v14 = v5;\n
            v1 = v14->field_5c;\n
            cgc_lbool(&v14[78].padding_0[58], &v14[81].padding_0[59]);\n
            v11 = cgc_push(v1);\n
        }\n
        else\n
        {\n
            v15 = v5;\n
            v0 = v15->field_5c;\n
            cgc_lbool(&v15[78].padding_0[58], &v15[83].padding_0[17]);\n
            v11 = cgc_push(v0);\n
        }\n
        return v11;\n
    }\n
    else\n
    {\n
        if (!cgc_strcmp(v7[2], &v5[75].padding_0[24]))\n
        {\n
            v13 = v5;\n
            v3 = v13->field_5c;\n
            cgc_lstring(&v13[78].padding_0[58], &v13[75].padding_0[20]);\n
            v11 = cgc_push(v3);\n
        }\n
        else\n
        {\n
            v12 = v5;\n
            v4 = v12->field_5c;\n
            cgc_lstring(&v12[78].padding_0[58], &v12[75].padding_0[24]);\n
            v11 = cgc_push(v4);\n
        }\n
        return v11;\n
    }\n
}\n
", "4223774:sub_40731e": null, "4223776:len": "typedef struct struct_1 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_1;\n
\n
typedef struct struct_0 {\n
    char padding_0[12];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern struct_1 _GLOBAL_OFFSET_TABLE_;\n
\n
int len()\n
{\n
    unsigned int v0;  // [bp-0x34]\n
    struct_1 *v1;  // [bp-0x30]\n
    char v2;  // [bp-0x2c]\n
    struct_0 *v3;  // [bp-0xc]\n
    unsigned int v4;  // [bp-0x8]\n
    unsigned int v6;  // ebx\n
    unsigned int v7;  // eax\n
    struct_1 *v8;  // ebx\n
\n
    v4 = v6;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v3 = 0;\n
    if (cgc_isEmpty())\n
    {\n
        v7 = cgc_puts(&v1[75].padding_0[16]);\n
        return v7;\n
    }\n
    v3 = cgc_pop();\n
    cgc_bzero(&v2, 32);\n
    cgc_int_to_str(v3->field_c, &v2);\n
    v8 = v1;\n
    v0 = v8->field_5c;\n
    cgc_lint(&v8[78].padding_0[58], &v2);\n
    v7 = cgc_push(v0);\n
    return v7;\n
}\n
", "4223978:sub_4073ea": null, "4223984:cgc_equals": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_equals()\n
{\n
    unsigned int v0;  // [bp-0x28]\n
    unsigned int v1;  // [bp-0x24]\n
    unsigned int v2;  // [bp-0x20]\n
    unsigned int v3;  // [bp-0x1c]\n
    unsigned int v4;  // [bp-0x18]\n
    struct_0 *v5;  // [bp-0x14]\n
    unsigned int v6[3];  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v7[3];  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v8;  // [bp-0x8]\n
    unsigned int v10;  // ebx\n
    unsigned int v11;  // eax\n
    struct_0 *v12;  // ebx\n
    struct_0 *v13;  // ebx\n
    struct_0 *v14;  // ebx\n
    struct_0 *v15;  // ebx\n
    struct_0 *v16;  // ebx\n
\n
    v8 = v10;\n
    v5 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v7[0] = 0;\n
    v6[0] = 0;\n
    if (!cgc_isEmpty())\n
        v7 = cgc_pop();\n
    if (!cgc_isEmpty())\n
        v6 = cgc_pop();\n
    if (v7 && v6)\n
    {\n
        if (!cgc_strcmp(*((v7 + 4)), &v5[83].padding_0[32]) && !cgc_strcmp(*((v6 + 4)), &v5[83].padding_0[32]))\n
            goto LABEL_407511;\n
        if (cgc_strcmp(*((v7 + 4)), &v5[83].padding_0[12]))\n
        {\n
LABEL_407599:\n
            if (!cgc_strcmp(*((v7 + 4)), &v5[83].padding_0[24]) && !cgc_strcmp(*((v6 + 4)), &v5[83].padding_0[24]))\n
            {\n
                if (!cgc_strcmp(*((v7 + 8)), *((v6 + 8))))\n
                {\n
                    v15 = v5;\n
                    v2 = v15->field_5c;\n
                    cgc_lbool(&v15[78].padding_0[58], &v15[83].padding_0[17]);\n
                    v11 = cgc_push(v2);\n
                }\n
                else\n
                {\n
                    v16 = v5;\n
                    v1 = v16->field_5c;\n
                    cgc_lbool(&v16[78].padding_0[58], &v16[81].padding_0[59]);\n
                    v11 = cgc_push(v1);\n
                }\n
                goto LABEL_4076b1;\n
            }\n
            v14 = v5;\n
            v0 = v14->field_5c;\n
            cgc_lbool(&v14[78].padding_0[58], &v14[81].padding_0[59]);\n
            v11 = cgc_push(v0);\n
LABEL_4076b1:\n
        }\n
        else\n
        {\n
            if (!(!cgc_strcmp(*((v6 + 4)), &v5[83].padding_0[12])))\n
                goto LABEL_407599;\n
LABEL_407511:\n
            if (*((v7 + 8)) == *((v6 + 8)))\n
            {\n
                v12 = v5;\n
                v4 = v12->field_5c;\n
                cgc_lbool(&v12[78].padding_0[58], &v12[83].padding_0[17]);\n
                v11 = cgc_push(v4);\n
            }\n
            else\n
            {\n
                v13 = v5;\n
                v3 = v13->field_5c;\n
                cgc_lbool(&v13[78].padding_0[58], &v13[81].padding_0[59]);\n
                v11 = cgc_push(v3);\n
            }\n
        }\n
        return v11;\n
    }\n
    v11 = cgc_puts(&v5[74].padding_0[83]);\n
    return v11;\n
}\n
", "4224722:sub_4076d2": null, "4224736:cgc_type": "typedef struct struct_0 {\n
    char padding_0[92];\n
    unsigned int field_5c;\n
} struct_0;\n
\n
typedef struct struct_1 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_1;\n
\n
extern struct_0 _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_type()\n
{\n
    unsigned int v0;  // [bp-0x14]\n
    struct_0 *v1;  // [bp-0x10]\n
    struct_1 *v2;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v3;  // [bp-0x8]\n
    unsigned int v5;  // ebx\n
    struct_1 *v6;  // eax, Other Possible Types: unsigned int\n
    struct_0 *v7;  // ebx\n
\n
    v3 = v5;\n
    v1 = &_GLOBAL_OFFSET_TABLE_.padding_0[0];\n
    v2 = 0;\n
    v6 = cgc_isEmpty();\n
    if (!v6)\n
    {\n
        v6 = cgc_pop();\n
        v2 = v6;\n
    }\n
    if (v2)\n
    {\n
        v7 = v1;\n
        v0 = v7->field_5c;\n
        cgc_lstring(&v7[78].padding_0[58], *((v2 + 4)));\n
        v6 = cgc_push(v0);\n
        return v6;\n
    }\n
    return v6;\n
}\n
", "4224878:sub_40776e": null, "4224880:cgc_terminate": "typedef struct struct_0 {\n
    char padding_0[4];\n
    unsigned int field_4;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_terminate()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    struct_0 *v1;  // [bp-0xc], Other Possible Types: unsigned int\n
    unsigned int v2;  // [bp-0x8]\n
    char v3;  // [bp-0x4]\n
    unsigned int v5;  // ebp\n
    unsigned int v6;  // ebx\n
\n
    v5 = &v3;\n
    v2 = v6;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = 0;\n
    if (!cgc_isEmpty())\n
        v1 = cgc_pop();\n
    if (v1 && !cgc_strcmp(*((v1 + 4)), v0 - 8000))\n
        cgc__terminate();\n
    cgc__terminate();\n
    cgc_pop();\n
    return;\n
}\n
", "4225040:cgc_pop": "int cgc_pop(unsigned int *v1)\n
{\n
    unsigned int v0;  // [bp-0x8]\n
    unsigned int v2;  // eax\n
    unsigned int *v3;  // eax\n
\n
    v0 = v2;\n
    v0 = v1[1 + *(v1)];\n
    v3 = v1;\n
    *(v3) = *(v3) - 1;\n
    return v0;\n
}\n
", "4225080:sub_407838": null, "4225088:cgc_push": "int cgc_push(unsigned int *v0, unsigned int a0)\n
{\n
    unsigned int *v1;  // eax, Other Possible Types: unsigned int\n
    unsigned int *v2;  // eax\n
\n
    v1 = v0;\n
    if (*(v1) < 31)\n
    {\n
        v2 = v0;\n
        *(v2) = *(v2) + 1;\n
        v1 = v0;\n
        *((v1 + *(v0) * 4 + 4)) = a0;\n
    }\n
    return v1;\n
}\n
", "4225136:cgc_isEmpty": "int cgc_isEmpty(unsigned int *v0)\n
{\n
    return !*(v0);\n
}\n
", "4225158:sub_407886": null, "4225168:cgc_initStack": "extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_initStack()\n
{\n
    unsigned int v0;  // [bp-0x10]\n
    unsigned int v1;  // [bp-0xc]\n
    unsigned int v2;  // [bp-0x8]\n
    unsigned int v4;  // ebx\n
\n
    v2 = v4;\n
    v0 = &_GLOBAL_OFFSET_TABLE_;\n
    v1 = cgc_calloc(132, 1);\n
    if (!v1)\n
    {\n
        cgc_puts(v0 - 7154);\n
        cgc__terminate();\n
        return v1;\n
    }\n
    return v1;\n
}\n
", "4225269:sub_4078f5": null, "4225280:cgc_initTrie": "int cgc_initTrie()\n
{\n
    unsigned int v0;  // [bp-0xc]\n
\n
    v0 = cgc_calloc(16, 1);\n
    return v0;\n
}\n
", "4225331:sub_407933": null, "4225344:cgc_insertInTrie": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
} struct_0;\n
\n
extern char _GLOBAL_OFFSET_TABLE_;\n
\n
int cgc_insertInTrie(struct_0 *v5, char *a0, unsigned int a1)\n
{\n
    char *v0;  // [bp-0x1c]\n
    char *v1;  // [bp-0x18]\n
    unsigned int v2;  // [bp-0x14]\n
    struct_0 *v3;  // [bp-0x10], Other Possible Types: unsigned int\n
    unsigned int v4;  // [bp-0xc]\n
    char *v6;  // ecx\n
\n
    v2 = &_GLOBAL_OFFSET_TABLE_;\n
    v3 = v5;\n
    if (!v3->field_0)\n
    {\n
        v3->field_0 = cgc_calloc(16, 1);\n
        v3->field_0->field_8 = *(a0);\n
    }\n
    v3 = v3->field_0;\n
    v4 = 0;\n
    while (true)\n
    {\n
        v1 = v4;\n
        if (v1 > cgc_strlen(a0))\n
            break;\n
        for (; v3->padding_4; *(&v3) = v3->padding_4)\n
        {\n
            if (v3->field_8 == a0[v4])\n
                break;\n
        }\n
        if (*((v3 + 8)) != a0[v4])\n
        {\n
            *((v3 + 4)) = cgc_calloc(16, 1);\n
            *((*((v3 + 4)) + 8)) = a0[v4];\n
            v3 = *((v3 + 4));\n
            while (true)\n
            {\n
                v0 = v4;\n
                if (v0 >= cgc_strlen(a0))\n
                    break;\n
                *(v3) = cgc_calloc(16, 1);\n
                v6 = v4;\n
                v4 = v6 + 1;\n
                v3->field_0->field_8 = *((a0 + v6 + 1));\n
                v3 = *(v3);\n
            }\n
        }\n
        else\n
        {\n
            if (!a0[v4])\n
                break;\n
            if (!v3->field_0)\n
            {\n
                *(v3) = cgc_calloc(16, 1);\n
                v3->field_0->field_8 = a0[1 + v4];\n
            }\n
            v3 = *(v3);\n
            v4 += 1;\n
        }\n
    }\n
    *((v3 + 12)) = a1;\n
    return v3;\n
}\n
", "4225867:sub_407b4b": null, "4225872:cgc_findInTrie": "typedef struct struct_0 {\n
    struct struct_0 *field_0;\n
    char padding_4[4];\n
    char field_8;\n
    char padding_9[3];\n
    unsigned int field_c;\n
} struct_0;\n
\n
int cgc_findInTrie(struct_0 *v5, unsigned int a0)\n
{\n
    char *v0;  // [bp-0x18], Other Possible Types: unsigned int\n
    struct_0 *v1;  // [bp-0x14], Other Possible Types: unsigned int\n
    struct_0 *v2;  // [bp-0x10], Other Possible Types: unsigned int\n
    struct_0 *v3;  // [bp-0xc], Other Possible Types: unsigned int\n
    struct_0 *v4;  // [bp-0x8], Other Possible Types: unsigned int\n
\n
    v1 = 0;\n
    v0 = 0;\n
    v2 = v5;\n
    if (!v2->field_0)\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v2 = v2->field_0;\n
    while (true)\n
    {\n
        for (v3 = v2; v3; v3 = *((v3 + 4)))\n
        {\n
            if (*((v3 + 8)) == v0[a0])\n
            {\n
                v1 = v3;\n
                break;\n
            }\n
        }\n
        if (!v1)\n
        {\n
            v4 = v3;\n
            return v4;\n
        }\n
        if (!v0[a0])\n
            break;\n
        if (!v3)\n
        {\n
            v4 = 0;\n
            return v4;\n
        }\n
        v2 = *(v3);\n
        v0 += 1;\n
    }\n
    if (!*((v1 + 12)))\n
    {\n
        v4 = 0;\n
        return v4;\n
    }\n
    v4 = v1;\n
    return v4;\n
}\n
", "4226152:_fini": "int _fini()\n
{\n
    return;\n
}\n
", "5242880:cgc_pow": null, "5242884:__libc_start_main": null, "5242888:cgc_fdwait": null, "5242892:cgc__terminate": null, "5242896:cgc_transmit": null, "5242900:cgc_allocate": null, "5242904:cgc_rint": null, "5242908:cgc_deallocate": null, "5242912:cgc_log10": null, "5242916:cgc_receive": null, "6295628:UnresolvableJumpTarget": null, "6295632:UnresolvableCallTarget": null}